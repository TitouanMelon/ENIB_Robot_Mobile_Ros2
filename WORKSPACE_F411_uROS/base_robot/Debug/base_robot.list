
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b1b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f50  0801b358  0801b358  0002b358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c2a8  0801c2a8  000300f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c2a8  0801c2a8  0002c2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c2b0  0801c2b0  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c2b0  0801c2b0  0002c2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c2b4  0801c2b4  0002c2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0801c2b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e788  200000f0  0801c3a8  000300f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e878  0801c3a8  0003e878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY
 13 .debug_info   000e5c96  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000182a4  00000000  00000000  00115e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004350  00000000  00000000  0012e0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016eb  00000000  00000000  00132448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b49  00000000  00000000  00133b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00075d58  00000000  00000000  0015967c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8e32  00000000  00000000  001cf3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00010b20  00000000  00000000  00288208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00298d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00057b45  00000000  00000000  00298db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00009b50  00000000  00000000  002f08f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801b33c 	.word	0x0801b33c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	0801b33c 	.word	0x0801b33c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_ldivmod>:
 8000bfc:	b97b      	cbnz	r3, 8000c1e <__aeabi_ldivmod+0x22>
 8000bfe:	b972      	cbnz	r2, 8000c1e <__aeabi_ldivmod+0x22>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bfbe      	ittt	lt
 8000c04:	2000      	movlt	r0, #0
 8000c06:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c0a:	e006      	blt.n	8000c1a <__aeabi_ldivmod+0x1e>
 8000c0c:	bf08      	it	eq
 8000c0e:	2800      	cmpeq	r0, #0
 8000c10:	bf1c      	itt	ne
 8000c12:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c16:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1a:	f000 b9bb 	b.w	8000f94 <__aeabi_idiv0>
 8000c1e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c22:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c26:	2900      	cmp	r1, #0
 8000c28:	db09      	blt.n	8000c3e <__aeabi_ldivmod+0x42>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db1a      	blt.n	8000c64 <__aeabi_ldivmod+0x68>
 8000c2e:	f000 f84d 	bl	8000ccc <__udivmoddi4>
 8000c32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3a:	b004      	add	sp, #16
 8000c3c:	4770      	bx	lr
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db1b      	blt.n	8000c80 <__aeabi_ldivmod+0x84>
 8000c48:	f000 f840 	bl	8000ccc <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c62:	4770      	bx	lr
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	f000 f82f 	bl	8000ccc <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4240      	negs	r0, r0
 8000c7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f821 	bl	8000ccc <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b970 	b.w	8000f94 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	460d      	mov	r5, r1
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	460f      	mov	r7, r1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d14a      	bne.n	8000d72 <__udivmoddi4+0xa6>
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	4694      	mov	ip, r2
 8000ce0:	d965      	bls.n	8000dae <__udivmoddi4+0xe2>
 8000ce2:	fab2 f382 	clz	r3, r2
 8000ce6:	b143      	cbz	r3, 8000cfa <__udivmoddi4+0x2e>
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	f1c3 0220 	rsb	r2, r3, #32
 8000cf0:	409f      	lsls	r7, r3
 8000cf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf6:	4317      	orrs	r7, r2
 8000cf8:	409c      	lsls	r4, r3
 8000cfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfe:	fa1f f58c 	uxth.w	r5, ip
 8000d02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d06:	0c22      	lsrs	r2, r4, #16
 8000d08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d10:	fb01 f005 	mul.w	r0, r1, r5
 8000d14:	4290      	cmp	r0, r2
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x62>
 8000d18:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d20:	f080 811c 	bcs.w	8000f5c <__udivmoddi4+0x290>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f240 8119 	bls.w	8000f5c <__udivmoddi4+0x290>
 8000d2a:	3902      	subs	r1, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a12      	subs	r2, r2, r0
 8000d30:	b2a4      	uxth	r4, r4
 8000d32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3e:	fb00 f505 	mul.w	r5, r0, r5
 8000d42:	42a5      	cmp	r5, r4
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x90>
 8000d46:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4e:	f080 8107 	bcs.w	8000f60 <__udivmoddi4+0x294>
 8000d52:	42a5      	cmp	r5, r4
 8000d54:	f240 8104 	bls.w	8000f60 <__udivmoddi4+0x294>
 8000d58:	4464      	add	r4, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d60:	1b64      	subs	r4, r4, r5
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11e      	cbz	r6, 8000d6e <__udivmoddi4+0xa2>
 8000d66:	40dc      	lsrs	r4, r3
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0xbc>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	f000 80ed 	beq.w	8000f56 <__udivmoddi4+0x28a>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	d149      	bne.n	8000e24 <__udivmoddi4+0x158>
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d302      	bcc.n	8000d9a <__udivmoddi4+0xce>
 8000d94:	4282      	cmp	r2, r0
 8000d96:	f200 80f8 	bhi.w	8000f8a <__udivmoddi4+0x2be>
 8000d9a:	1a84      	subs	r4, r0, r2
 8000d9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000da0:	2001      	movs	r0, #1
 8000da2:	4617      	mov	r7, r2
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d0e2      	beq.n	8000d6e <__udivmoddi4+0xa2>
 8000da8:	e9c6 4700 	strd	r4, r7, [r6]
 8000dac:	e7df      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xe6>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f382 	clz	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x210>
 8000dbc:	1a8a      	subs	r2, r1, r2
 8000dbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd0:	0c22      	lsrs	r2, r4, #16
 8000dd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd6:	fb0e f005 	mul.w	r0, lr, r5
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x124>
 8000dde:	eb1c 0202 	adds.w	r2, ip, r2
 8000de2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x122>
 8000de8:	4290      	cmp	r0, r2
 8000dea:	f200 80cb 	bhi.w	8000f84 <__udivmoddi4+0x2b8>
 8000dee:	4645      	mov	r5, r8
 8000df0:	1a12      	subs	r2, r2, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e00:	fb0e fe00 	mul.w	lr, lr, r0
 8000e04:	45a6      	cmp	lr, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x14e>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e10:	d202      	bcs.n	8000e18 <__udivmoddi4+0x14c>
 8000e12:	45a6      	cmp	lr, r4
 8000e14:	f200 80bb 	bhi.w	8000f8e <__udivmoddi4+0x2c2>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e22:	e79f      	b.n	8000d64 <__udivmoddi4+0x98>
 8000e24:	f1c1 0720 	rsb	r7, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e32:	fa05 f401 	lsl.w	r4, r5, r1
 8000e36:	fa20 f307 	lsr.w	r3, r0, r7
 8000e3a:	40fd      	lsrs	r5, r7
 8000e3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e46:	fa1f fe8c 	uxth.w	lr, ip
 8000e4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e54:	fb08 f50e 	mul.w	r5, r8, lr
 8000e58:	42a5      	cmp	r5, r4
 8000e5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b0>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e6c:	f080 8088 	bcs.w	8000f80 <__udivmoddi4+0x2b4>
 8000e70:	42a5      	cmp	r5, r4
 8000e72:	f240 8085 	bls.w	8000f80 <__udivmoddi4+0x2b4>
 8000e76:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7a:	4464      	add	r4, ip
 8000e7c:	1b64      	subs	r4, r4, r5
 8000e7e:	b29d      	uxth	r5, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1da>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e9c:	d26c      	bcs.n	8000f78 <__udivmoddi4+0x2ac>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	d96a      	bls.n	8000f78 <__udivmoddi4+0x2ac>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	4464      	add	r4, ip
 8000ea6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	46c8      	mov	r8, r9
 8000eb6:	46ae      	mov	lr, r5
 8000eb8:	d356      	bcc.n	8000f68 <__udivmoddi4+0x29c>
 8000eba:	d053      	beq.n	8000f64 <__udivmoddi4+0x298>
 8000ebc:	b156      	cbz	r6, 8000ed4 <__udivmoddi4+0x208>
 8000ebe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ec2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eca:	40ca      	lsrs	r2, r1
 8000ecc:	40cc      	lsrs	r4, r1
 8000ece:	4317      	orrs	r7, r2
 8000ed0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000edc:	f1c3 0120 	rsb	r1, r3, #32
 8000ee0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee8:	fa25 f101 	lsr.w	r1, r5, r1
 8000eec:	409d      	lsls	r5, r3
 8000eee:	432a      	orrs	r2, r5
 8000ef0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef4:	fa1f fe8c 	uxth.w	lr, ip
 8000ef8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000efc:	fb07 1510 	mls	r5, r7, r0, r1
 8000f00:	0c11      	lsrs	r1, r2, #16
 8000f02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f06:	fb00 f50e 	mul.w	r5, r0, lr
 8000f0a:	428d      	cmp	r5, r1
 8000f0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x258>
 8000f12:	eb1c 0101 	adds.w	r1, ip, r1
 8000f16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1a:	d22f      	bcs.n	8000f7c <__udivmoddi4+0x2b0>
 8000f1c:	428d      	cmp	r5, r1
 8000f1e:	d92d      	bls.n	8000f7c <__udivmoddi4+0x2b0>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	1b49      	subs	r1, r1, r5
 8000f26:	b292      	uxth	r2, r2
 8000f28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	fb05 f10e 	mul.w	r1, r5, lr
 8000f38:	4291      	cmp	r1, r2
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x282>
 8000f3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f44:	d216      	bcs.n	8000f74 <__udivmoddi4+0x2a8>
 8000f46:	4291      	cmp	r1, r2
 8000f48:	d914      	bls.n	8000f74 <__udivmoddi4+0x2a8>
 8000f4a:	3d02      	subs	r5, #2
 8000f4c:	4462      	add	r2, ip
 8000f4e:	1a52      	subs	r2, r2, r1
 8000f50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f54:	e738      	b.n	8000dc8 <__udivmoddi4+0xfc>
 8000f56:	4631      	mov	r1, r6
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e708      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	e6e6      	b.n	8000d2e <__udivmoddi4+0x62>
 8000f60:	4610      	mov	r0, r2
 8000f62:	e6fb      	b.n	8000d5c <__udivmoddi4+0x90>
 8000f64:	4548      	cmp	r0, r9
 8000f66:	d2a9      	bcs.n	8000ebc <__udivmoddi4+0x1f0>
 8000f68:	ebb9 0802 	subs.w	r8, r9, r2
 8000f6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f70:	3b01      	subs	r3, #1
 8000f72:	e7a3      	b.n	8000ebc <__udivmoddi4+0x1f0>
 8000f74:	4645      	mov	r5, r8
 8000f76:	e7ea      	b.n	8000f4e <__udivmoddi4+0x282>
 8000f78:	462b      	mov	r3, r5
 8000f7a:	e794      	b.n	8000ea6 <__udivmoddi4+0x1da>
 8000f7c:	4640      	mov	r0, r8
 8000f7e:	e7d1      	b.n	8000f24 <__udivmoddi4+0x258>
 8000f80:	46d0      	mov	r8, sl
 8000f82:	e77b      	b.n	8000e7c <__udivmoddi4+0x1b0>
 8000f84:	3d02      	subs	r5, #2
 8000f86:	4462      	add	r2, ip
 8000f88:	e732      	b.n	8000df0 <__udivmoddi4+0x124>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e70a      	b.n	8000da4 <__udivmoddi4+0xd8>
 8000f8e:	4464      	add	r4, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e742      	b.n	8000e1a <__udivmoddi4+0x14e>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeReg>:
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte);
//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	i2c1_WriteRegBuffer(g_i2cAddr,reg,&value,1);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <writeReg+0x28>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b298      	uxth	r0, r3
 8000fae:	1dba      	adds	r2, r7, #6
 8000fb0:	79f9      	ldrb	r1, [r7, #7]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f000 ff38 	bl	8001e28 <i2c1_WriteRegBuffer>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 8000fd4:	88bb      	ldrh	r3, [r7, #4]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer(g_i2cAddr,reg,tab,2);
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <writeReg16Bit+0x3c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b298      	uxth	r0, r3
 8000fea:	f107 020c 	add.w	r2, r7, #12
 8000fee:	79f9      	ldrb	r1, [r7, #7]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f000 ff19 	bl	8001e28 <i2c1_WriteRegBuffer>
}
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000000 	.word	0x20000000

08001004 <readReg>:
		tab[0] = ((value ) & 0xFF);
		i2c1_WriteRegBuffer(g_i2cAddr,reg,tab,4);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
  	i2c1_WriteBuffer(g_i2cAddr, &reg, 1);
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <readReg+0x40>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	1df9      	adds	r1, r7, #7
 800101a:	2201      	movs	r2, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fecf 	bl	8001dc0 <i2c1_WriteBuffer>
	i2c1_ReadBuffer(g_i2cAddr|0x01, &value, 1);
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <readReg+0x40>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	b29b      	uxth	r3, r3
 800102e:	f107 010f 	add.w	r1, r7, #15
 8001032:	2201      	movs	r2, #1
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fedd 	bl	8001df4 <i2c1_ReadBuffer>
  	return value;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000

08001048 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2];
	i2c1_WriteBuffer(g_i2cAddr, &reg, 1);
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <readReg16Bit+0x4c>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	1df9      	adds	r1, r7, #7
 800105a:	2201      	movs	r2, #1
 800105c:	4618      	mov	r0, r3
 800105e:	f000 feaf 	bl	8001dc0 <i2c1_WriteBuffer>
	i2c1_ReadBuffer(g_i2cAddr|0x01, tab, 2);
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <readReg16Bit+0x4c>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	b29b      	uxth	r3, r3
 800106e:	f107 010c 	add.w	r1, r7, #12
 8001072:	2202      	movs	r2, #2
 8001074:	4618      	mov	r0, r3
 8001076:	f000 febd 	bl	8001df4 <i2c1_ReadBuffer>
  	uint16_t value= ((uint16_t)tab[0] << 8) | (uint16_t)tab[1];
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	7b7b      	ldrb	r3, [r7, #13]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21b      	sxth	r3, r3
 8001088:	81fb      	strh	r3, [r7, #14]
  	return value;
 800108a:	89fb      	ldrh	r3, [r7, #14]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000000 	.word	0x20000000

08001098 <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t initVL53L0X( ){
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (IO_2V8)
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
    readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 800109c:	2089      	movs	r0, #137	; 0x89
 800109e:	f7ff ffb1 	bl	8001004 <readReg>
 80010a2:	4603      	mov	r3, r0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4619      	mov	r1, r3
 80010ac:	2089      	movs	r0, #137	; 0x89
 80010ae:	f7ff ff73 	bl	8000f98 <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 80010b2:	2100      	movs	r1, #0
 80010b4:	2088      	movs	r0, #136	; 0x88
 80010b6:	f7ff ff6f 	bl	8000f98 <writeReg>

  writeReg(0x80, 0x01);
 80010ba:	2101      	movs	r1, #1
 80010bc:	2080      	movs	r0, #128	; 0x80
 80010be:	f7ff ff6b 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 80010c2:	2101      	movs	r1, #1
 80010c4:	20ff      	movs	r0, #255	; 0xff
 80010c6:	f7ff ff67 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 80010ca:	2100      	movs	r1, #0
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff ff63 	bl	8000f98 <writeReg>
  g_stopVariable = readReg(0x91);
 80010d2:	2091      	movs	r0, #145	; 0x91
 80010d4:	f7ff ff96 	bl	8001004 <readReg>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4bd5      	ldr	r3, [pc, #852]	; (8001434 <initVL53L0X+0x39c>)
 80010de:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 80010e0:	2101      	movs	r1, #1
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff58 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 80010e8:	2100      	movs	r1, #0
 80010ea:	20ff      	movs	r0, #255	; 0xff
 80010ec:	f7ff ff54 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 80010f0:	2100      	movs	r1, #0
 80010f2:	2080      	movs	r0, #128	; 0x80
 80010f4:	f7ff ff50 	bl	8000f98 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80010f8:	2060      	movs	r0, #96	; 0x60
 80010fa:	f7ff ff83 	bl	8001004 <readReg>
 80010fe:	4603      	mov	r3, r0
 8001100:	f043 0312 	orr.w	r3, r3, #18
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4619      	mov	r1, r3
 8001108:	2060      	movs	r0, #96	; 0x60
 800110a:	f7ff ff45 	bl	8000f98 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 800110e:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8001112:	f000 f991 	bl	8001438 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001116:	21ff      	movs	r1, #255	; 0xff
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff ff3d 	bl	8000f98 <writeReg>
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 800111e:	2101      	movs	r1, #1
 8001120:	20ff      	movs	r0, #255	; 0xff
 8001122:	f7ff ff39 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001126:	2100      	movs	r1, #0
 8001128:	204f      	movs	r0, #79	; 0x4f
 800112a:	f7ff ff35 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 800112e:	212c      	movs	r1, #44	; 0x2c
 8001130:	204e      	movs	r0, #78	; 0x4e
 8001132:	f7ff ff31 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001136:	2100      	movs	r1, #0
 8001138:	20ff      	movs	r0, #255	; 0xff
 800113a:	f7ff ff2d 	bl	8000f98 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 800113e:	21b4      	movs	r1, #180	; 0xb4
 8001140:	20b6      	movs	r0, #182	; 0xb6
 8001142:	f7ff ff29 	bl	8000f98 <writeReg>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8001146:	2101      	movs	r1, #1
 8001148:	20ff      	movs	r0, #255	; 0xff
 800114a:	f7ff ff25 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 800114e:	2100      	movs	r1, #0
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff ff21 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001156:	2100      	movs	r1, #0
 8001158:	20ff      	movs	r0, #255	; 0xff
 800115a:	f7ff ff1d 	bl	8000f98 <writeReg>
  writeReg(0x09, 0x00);
 800115e:	2100      	movs	r1, #0
 8001160:	2009      	movs	r0, #9
 8001162:	f7ff ff19 	bl	8000f98 <writeReg>
  writeReg(0x10, 0x00);
 8001166:	2100      	movs	r1, #0
 8001168:	2010      	movs	r0, #16
 800116a:	f7ff ff15 	bl	8000f98 <writeReg>
  writeReg(0x11, 0x00);
 800116e:	2100      	movs	r1, #0
 8001170:	2011      	movs	r0, #17
 8001172:	f7ff ff11 	bl	8000f98 <writeReg>

  writeReg(0x24, 0x01);
 8001176:	2101      	movs	r1, #1
 8001178:	2024      	movs	r0, #36	; 0x24
 800117a:	f7ff ff0d 	bl	8000f98 <writeReg>
  writeReg(0x25, 0xFF);
 800117e:	21ff      	movs	r1, #255	; 0xff
 8001180:	2025      	movs	r0, #37	; 0x25
 8001182:	f7ff ff09 	bl	8000f98 <writeReg>
  writeReg(0x75, 0x00);
 8001186:	2100      	movs	r1, #0
 8001188:	2075      	movs	r0, #117	; 0x75
 800118a:	f7ff ff05 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800118e:	2101      	movs	r1, #1
 8001190:	20ff      	movs	r0, #255	; 0xff
 8001192:	f7ff ff01 	bl	8000f98 <writeReg>
  writeReg(0x4E, 0x2C);
 8001196:	212c      	movs	r1, #44	; 0x2c
 8001198:	204e      	movs	r0, #78	; 0x4e
 800119a:	f7ff fefd 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x00);
 800119e:	2100      	movs	r1, #0
 80011a0:	2048      	movs	r0, #72	; 0x48
 80011a2:	f7ff fef9 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x20);
 80011a6:	2120      	movs	r1, #32
 80011a8:	2030      	movs	r0, #48	; 0x30
 80011aa:	f7ff fef5 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80011ae:	2100      	movs	r1, #0
 80011b0:	20ff      	movs	r0, #255	; 0xff
 80011b2:	f7ff fef1 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x09);
 80011b6:	2109      	movs	r1, #9
 80011b8:	2030      	movs	r0, #48	; 0x30
 80011ba:	f7ff feed 	bl	8000f98 <writeReg>
  writeReg(0x54, 0x00);
 80011be:	2100      	movs	r1, #0
 80011c0:	2054      	movs	r0, #84	; 0x54
 80011c2:	f7ff fee9 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 80011c6:	2104      	movs	r1, #4
 80011c8:	2031      	movs	r0, #49	; 0x31
 80011ca:	f7ff fee5 	bl	8000f98 <writeReg>
  writeReg(0x32, 0x03);
 80011ce:	2103      	movs	r1, #3
 80011d0:	2032      	movs	r0, #50	; 0x32
 80011d2:	f7ff fee1 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x83);
 80011d6:	2183      	movs	r1, #131	; 0x83
 80011d8:	2040      	movs	r0, #64	; 0x40
 80011da:	f7ff fedd 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x25);
 80011de:	2125      	movs	r1, #37	; 0x25
 80011e0:	2046      	movs	r0, #70	; 0x46
 80011e2:	f7ff fed9 	bl	8000f98 <writeReg>
  writeReg(0x60, 0x00);
 80011e6:	2100      	movs	r1, #0
 80011e8:	2060      	movs	r0, #96	; 0x60
 80011ea:	f7ff fed5 	bl	8000f98 <writeReg>
  writeReg(0x27, 0x00);
 80011ee:	2100      	movs	r1, #0
 80011f0:	2027      	movs	r0, #39	; 0x27
 80011f2:	f7ff fed1 	bl	8000f98 <writeReg>
  writeReg(0x50, 0x06);
 80011f6:	2106      	movs	r1, #6
 80011f8:	2050      	movs	r0, #80	; 0x50
 80011fa:	f7ff fecd 	bl	8000f98 <writeReg>
  writeReg(0x51, 0x00);
 80011fe:	2100      	movs	r1, #0
 8001200:	2051      	movs	r0, #81	; 0x51
 8001202:	f7ff fec9 	bl	8000f98 <writeReg>
  writeReg(0x52, 0x96);
 8001206:	2196      	movs	r1, #150	; 0x96
 8001208:	2052      	movs	r0, #82	; 0x52
 800120a:	f7ff fec5 	bl	8000f98 <writeReg>
  writeReg(0x56, 0x08);
 800120e:	2108      	movs	r1, #8
 8001210:	2056      	movs	r0, #86	; 0x56
 8001212:	f7ff fec1 	bl	8000f98 <writeReg>
  writeReg(0x57, 0x30);
 8001216:	2130      	movs	r1, #48	; 0x30
 8001218:	2057      	movs	r0, #87	; 0x57
 800121a:	f7ff febd 	bl	8000f98 <writeReg>
  writeReg(0x61, 0x00);
 800121e:	2100      	movs	r1, #0
 8001220:	2061      	movs	r0, #97	; 0x61
 8001222:	f7ff feb9 	bl	8000f98 <writeReg>
  writeReg(0x62, 0x00);
 8001226:	2100      	movs	r1, #0
 8001228:	2062      	movs	r0, #98	; 0x62
 800122a:	f7ff feb5 	bl	8000f98 <writeReg>
  writeReg(0x64, 0x00);
 800122e:	2100      	movs	r1, #0
 8001230:	2064      	movs	r0, #100	; 0x64
 8001232:	f7ff feb1 	bl	8000f98 <writeReg>
  writeReg(0x65, 0x00);
 8001236:	2100      	movs	r1, #0
 8001238:	2065      	movs	r0, #101	; 0x65
 800123a:	f7ff fead 	bl	8000f98 <writeReg>
  writeReg(0x66, 0xA0);
 800123e:	21a0      	movs	r1, #160	; 0xa0
 8001240:	2066      	movs	r0, #102	; 0x66
 8001242:	f7ff fea9 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001246:	2101      	movs	r1, #1
 8001248:	20ff      	movs	r0, #255	; 0xff
 800124a:	f7ff fea5 	bl	8000f98 <writeReg>
  writeReg(0x22, 0x32);
 800124e:	2132      	movs	r1, #50	; 0x32
 8001250:	2022      	movs	r0, #34	; 0x22
 8001252:	f7ff fea1 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x14);
 8001256:	2114      	movs	r1, #20
 8001258:	2047      	movs	r0, #71	; 0x47
 800125a:	f7ff fe9d 	bl	8000f98 <writeReg>
  writeReg(0x49, 0xFF);
 800125e:	21ff      	movs	r1, #255	; 0xff
 8001260:	2049      	movs	r0, #73	; 0x49
 8001262:	f7ff fe99 	bl	8000f98 <writeReg>
  writeReg(0x4A, 0x00);
 8001266:	2100      	movs	r1, #0
 8001268:	204a      	movs	r0, #74	; 0x4a
 800126a:	f7ff fe95 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800126e:	2100      	movs	r1, #0
 8001270:	20ff      	movs	r0, #255	; 0xff
 8001272:	f7ff fe91 	bl	8000f98 <writeReg>
  writeReg(0x7A, 0x0A);
 8001276:	210a      	movs	r1, #10
 8001278:	207a      	movs	r0, #122	; 0x7a
 800127a:	f7ff fe8d 	bl	8000f98 <writeReg>
  writeReg(0x7B, 0x00);
 800127e:	2100      	movs	r1, #0
 8001280:	207b      	movs	r0, #123	; 0x7b
 8001282:	f7ff fe89 	bl	8000f98 <writeReg>
  writeReg(0x78, 0x21);
 8001286:	2121      	movs	r1, #33	; 0x21
 8001288:	2078      	movs	r0, #120	; 0x78
 800128a:	f7ff fe85 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800128e:	2101      	movs	r1, #1
 8001290:	20ff      	movs	r0, #255	; 0xff
 8001292:	f7ff fe81 	bl	8000f98 <writeReg>
  writeReg(0x23, 0x34);
 8001296:	2134      	movs	r1, #52	; 0x34
 8001298:	2023      	movs	r0, #35	; 0x23
 800129a:	f7ff fe7d 	bl	8000f98 <writeReg>
  writeReg(0x42, 0x00);
 800129e:	2100      	movs	r1, #0
 80012a0:	2042      	movs	r0, #66	; 0x42
 80012a2:	f7ff fe79 	bl	8000f98 <writeReg>
  writeReg(0x44, 0xFF);
 80012a6:	21ff      	movs	r1, #255	; 0xff
 80012a8:	2044      	movs	r0, #68	; 0x44
 80012aa:	f7ff fe75 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x26);
 80012ae:	2126      	movs	r1, #38	; 0x26
 80012b0:	2045      	movs	r0, #69	; 0x45
 80012b2:	f7ff fe71 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x05);
 80012b6:	2105      	movs	r1, #5
 80012b8:	2046      	movs	r0, #70	; 0x46
 80012ba:	f7ff fe6d 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x40);
 80012be:	2140      	movs	r1, #64	; 0x40
 80012c0:	2040      	movs	r0, #64	; 0x40
 80012c2:	f7ff fe69 	bl	8000f98 <writeReg>
  writeReg(0x0E, 0x06);
 80012c6:	2106      	movs	r1, #6
 80012c8:	200e      	movs	r0, #14
 80012ca:	f7ff fe65 	bl	8000f98 <writeReg>
  writeReg(0x20, 0x1A);
 80012ce:	211a      	movs	r1, #26
 80012d0:	2020      	movs	r0, #32
 80012d2:	f7ff fe61 	bl	8000f98 <writeReg>
  writeReg(0x43, 0x40);
 80012d6:	2140      	movs	r1, #64	; 0x40
 80012d8:	2043      	movs	r0, #67	; 0x43
 80012da:	f7ff fe5d 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80012de:	2100      	movs	r1, #0
 80012e0:	20ff      	movs	r0, #255	; 0xff
 80012e2:	f7ff fe59 	bl	8000f98 <writeReg>
  writeReg(0x34, 0x03);
 80012e6:	2103      	movs	r1, #3
 80012e8:	2034      	movs	r0, #52	; 0x34
 80012ea:	f7ff fe55 	bl	8000f98 <writeReg>
  writeReg(0x35, 0x44);
 80012ee:	2144      	movs	r1, #68	; 0x44
 80012f0:	2035      	movs	r0, #53	; 0x35
 80012f2:	f7ff fe51 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 80012f6:	2101      	movs	r1, #1
 80012f8:	20ff      	movs	r0, #255	; 0xff
 80012fa:	f7ff fe4d 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 80012fe:	2104      	movs	r1, #4
 8001300:	2031      	movs	r0, #49	; 0x31
 8001302:	f7ff fe49 	bl	8000f98 <writeReg>
  writeReg(0x4B, 0x09);
 8001306:	2109      	movs	r1, #9
 8001308:	204b      	movs	r0, #75	; 0x4b
 800130a:	f7ff fe45 	bl	8000f98 <writeReg>
  writeReg(0x4C, 0x05);
 800130e:	2105      	movs	r1, #5
 8001310:	204c      	movs	r0, #76	; 0x4c
 8001312:	f7ff fe41 	bl	8000f98 <writeReg>
  writeReg(0x4D, 0x04);
 8001316:	2104      	movs	r1, #4
 8001318:	204d      	movs	r0, #77	; 0x4d
 800131a:	f7ff fe3d 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800131e:	2100      	movs	r1, #0
 8001320:	20ff      	movs	r0, #255	; 0xff
 8001322:	f7ff fe39 	bl	8000f98 <writeReg>
  writeReg(0x44, 0x00);
 8001326:	2100      	movs	r1, #0
 8001328:	2044      	movs	r0, #68	; 0x44
 800132a:	f7ff fe35 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x20);
 800132e:	2120      	movs	r1, #32
 8001330:	2045      	movs	r0, #69	; 0x45
 8001332:	f7ff fe31 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x08);
 8001336:	2108      	movs	r1, #8
 8001338:	2047      	movs	r0, #71	; 0x47
 800133a:	f7ff fe2d 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x28);
 800133e:	2128      	movs	r1, #40	; 0x28
 8001340:	2048      	movs	r0, #72	; 0x48
 8001342:	f7ff fe29 	bl	8000f98 <writeReg>
  writeReg(0x67, 0x00);
 8001346:	2100      	movs	r1, #0
 8001348:	2067      	movs	r0, #103	; 0x67
 800134a:	f7ff fe25 	bl	8000f98 <writeReg>
  writeReg(0x70, 0x04);
 800134e:	2104      	movs	r1, #4
 8001350:	2070      	movs	r0, #112	; 0x70
 8001352:	f7ff fe21 	bl	8000f98 <writeReg>
  writeReg(0x71, 0x01);
 8001356:	2101      	movs	r1, #1
 8001358:	2071      	movs	r0, #113	; 0x71
 800135a:	f7ff fe1d 	bl	8000f98 <writeReg>
  writeReg(0x72, 0xFE);
 800135e:	21fe      	movs	r1, #254	; 0xfe
 8001360:	2072      	movs	r0, #114	; 0x72
 8001362:	f7ff fe19 	bl	8000f98 <writeReg>
  writeReg(0x76, 0x00);
 8001366:	2100      	movs	r1, #0
 8001368:	2076      	movs	r0, #118	; 0x76
 800136a:	f7ff fe15 	bl	8000f98 <writeReg>
  writeReg(0x77, 0x00);
 800136e:	2100      	movs	r1, #0
 8001370:	2077      	movs	r0, #119	; 0x77
 8001372:	f7ff fe11 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001376:	2101      	movs	r1, #1
 8001378:	20ff      	movs	r0, #255	; 0xff
 800137a:	f7ff fe0d 	bl	8000f98 <writeReg>
  writeReg(0x0D, 0x01);
 800137e:	2101      	movs	r1, #1
 8001380:	200d      	movs	r0, #13
 8001382:	f7ff fe09 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001386:	2100      	movs	r1, #0
 8001388:	20ff      	movs	r0, #255	; 0xff
 800138a:	f7ff fe05 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x01);
 800138e:	2101      	movs	r1, #1
 8001390:	2080      	movs	r0, #128	; 0x80
 8001392:	f7ff fe01 	bl	8000f98 <writeReg>
  writeReg(0x01, 0xF8);
 8001396:	21f8      	movs	r1, #248	; 0xf8
 8001398:	2001      	movs	r0, #1
 800139a:	f7ff fdfd 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800139e:	2101      	movs	r1, #1
 80013a0:	20ff      	movs	r0, #255	; 0xff
 80013a2:	f7ff fdf9 	bl	8000f98 <writeReg>
  writeReg(0x8E, 0x01);
 80013a6:	2101      	movs	r1, #1
 80013a8:	208e      	movs	r0, #142	; 0x8e
 80013aa:	f7ff fdf5 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 80013ae:	2101      	movs	r1, #1
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fdf1 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 80013b6:	2100      	movs	r1, #0
 80013b8:	20ff      	movs	r0, #255	; 0xff
 80013ba:	f7ff fded 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 80013be:	2100      	movs	r1, #0
 80013c0:	2080      	movs	r0, #128	; 0x80
 80013c2:	f7ff fde9 	bl	8000f98 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80013c6:	2104      	movs	r1, #4
 80013c8:	200a      	movs	r0, #10
 80013ca:	f7ff fde5 	bl	8000f98 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80013ce:	2084      	movs	r0, #132	; 0x84
 80013d0:	f7ff fe18 	bl	8001004 <readReg>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f023 0310 	bic.w	r3, r3, #16
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4619      	mov	r1, r3
 80013de:	2084      	movs	r0, #132	; 0x84
 80013e0:	f7ff fdda 	bl	8000f98 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80013e4:	2101      	movs	r1, #1
 80013e6:	200b      	movs	r0, #11
 80013e8:	f7ff fdd6 	bl	8000f98 <writeReg>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80013ec:	21e8      	movs	r1, #232	; 0xe8
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff fdd2 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80013f4:	2101      	movs	r1, #1
 80013f6:	2001      	movs	r0, #1
 80013f8:	f7ff fdce 	bl	8000f98 <writeReg>
  if (performSingleRefCalibration(0x40)) { return 1; }
 80013fc:	2040      	movs	r0, #64	; 0x40
 80013fe:	f000 f883 	bl	8001508 <performSingleRefCalibration>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <initVL53L0X+0x374>
 8001408:	2301      	movs	r3, #1
 800140a:	e010      	b.n	800142e <initVL53L0X+0x396>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 800140c:	2102      	movs	r1, #2
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff fdc2 	bl	8000f98 <writeReg>
  if (performSingleRefCalibration(0x00)) { return 1; }
 8001414:	2000      	movs	r0, #0
 8001416:	f000 f877 	bl	8001508 <performSingleRefCalibration>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <initVL53L0X+0x38c>
 8001420:	2301      	movs	r3, #1
 8001422:	e004      	b.n	800142e <initVL53L0X+0x396>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001424:	21e8      	movs	r1, #232	; 0xe8
 8001426:	2001      	movs	r0, #1
 8001428:	f7ff fdb6 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return 0;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	2000010c 	.word	0x2000010c

08001438 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t setSignalRateLimit(float limit_Mcps)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001442:	edd7 7a01 	vldr	s15, [r7, #4]
 8001446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	d40a      	bmi.n	8001466 <setSignalRateLimit+0x2e>
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff f891 	bl	8000578 <__aeabi_f2d>
 8001456:	a311      	add	r3, pc, #68	; (adr r3, 800149c <setSignalRateLimit+0x64>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff fb74 	bl	8000b48 <__aeabi_dcmpgt>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <setSignalRateLimit+0x32>
 8001466:	2300      	movs	r3, #0
 8001468:	e00f      	b.n	800148a <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 800146a:	edd7 7a01 	vldr	s15, [r7, #4]
 800146e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001498 <setSignalRateLimit+0x60>
 8001472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800147a:	ee17 3a90 	vmov	r3, s15
 800147e:	b29b      	uxth	r3, r3
 8001480:	4619      	mov	r1, r3
 8001482:	2044      	movs	r0, #68	; 0x44
 8001484:	f7ff fd9e 	bl	8000fc4 <writeReg16Bit>
  return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	43000000 	.word	0x43000000
 800149c:	0a3d70a4 	.word	0x0a3d70a4
 80014a0:	407fffd7 	.word	0x407fffd7

080014a4 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( /*statInfo_t *extraStats */) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  writeReg(0x80, 0x01);
 80014aa:	2101      	movs	r1, #1
 80014ac:	2080      	movs	r0, #128	; 0x80
 80014ae:	f7ff fd73 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 80014b2:	2101      	movs	r1, #1
 80014b4:	20ff      	movs	r0, #255	; 0xff
 80014b6:	f7ff fd6f 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 80014ba:	2100      	movs	r1, #0
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fd6b 	bl	8000f98 <writeReg>
  writeReg(0x91, g_stopVariable);
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <readRangeSingleMillimeters+0x60>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	2091      	movs	r0, #145	; 0x91
 80014ca:	f7ff fd65 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 80014ce:	2101      	movs	r1, #1
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff fd61 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 80014d6:	2100      	movs	r1, #0
 80014d8:	20ff      	movs	r0, #255	; 0xff
 80014da:	f7ff fd5d 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 80014de:	2100      	movs	r1, #0
 80014e0:	2080      	movs	r0, #128	; 0x80
 80014e2:	f7ff fd59 	bl	8000f98 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 80014e6:	2101      	movs	r1, #1
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fd55 	bl	8000f98 <writeReg>
	  while (readReg(SYSRANGE_START) & 0x01){};
	  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0){};
  }
  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80014ee:	201e      	movs	r0, #30
 80014f0:	f7ff fdaa 	bl	8001048 <readReg16Bit>
 80014f4:	4603      	mov	r3, r0
 80014f6:	80fb      	strh	r3, [r7, #6]
  temp+=0;

  return temp;
 80014f8:	88fb      	ldrh	r3, [r7, #6]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000010c 	.word	0x2000010c

08001508 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4619      	mov	r1, r3
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff fd3b 	bl	8000f98 <writeReg>

  if (ACTIVE_WHILE)
	  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0){};

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001522:	2101      	movs	r1, #1
 8001524:	200b      	movs	r0, #11
 8001526:	f7ff fd37 	bl	8000f98 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 800152a:	2100      	movs	r1, #0
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff fd33 	bl	8000f98 <writeReg>

  return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <captDistIR_Init+0x5c>)
 8001542:	4a16      	ldr	r2, [pc, #88]	; (800159c <captDistIR_Init+0x60>)
 8001544:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <captDistIR_Init+0x5c>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <captDistIR_Init+0x5c>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <captDistIR_Init+0x5c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <captDistIR_Init+0x5c>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <captDistIR_Init+0x5c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <captDistIR_Init+0x5c>)
 8001566:	2202      	movs	r2, #2
 8001568:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <captDistIR_Init+0x5c>)
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <captDistIR_Init+0x5c>)
 8001572:	2202      	movs	r2, #2
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <captDistIR_Init+0x5c>)
 8001578:	2200      	movs	r2, #0
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <captDistIR_Init+0x5c>)
 800157e:	2200      	movs	r2, #0
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <captDistIR_Init+0x5c>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <captDistIR_Init+0x5c>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 800158e:	4802      	ldr	r0, [pc, #8]	; (8001598 <captDistIR_Init+0x5c>)
 8001590:	f003 fbe0 	bl	8004d54 <HAL_ADC_Init>
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000110 	.word	0x20000110
 800159c:	40012000 	.word	0x40012000

080015a0 <captDistIR_Get>:
//=================================================================
//			IR GET (POLL METHOD)
//=================================================================

int  captDistIR_Get(int* tab)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	sConfig.Channel      = ADC_CHANNEL_4;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <captDistIR_Get+0x80>)
 80015aa:	2204      	movs	r2, #4
 80015ac:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <captDistIR_Get+0x80>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <captDistIR_Get+0x80>)
 80015b6:	2203      	movs	r2, #3
 80015b8:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 80015ba:	4919      	ldr	r1, [pc, #100]	; (8001620 <captDistIR_Get+0x80>)
 80015bc:	4819      	ldr	r0, [pc, #100]	; (8001624 <captDistIR_Get+0x84>)
 80015be:	f003 fcb5 	bl	8004f2c <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);					//Start the conversion
 80015c2:	4818      	ldr	r0, [pc, #96]	; (8001624 <captDistIR_Get+0x84>)
 80015c4:	f003 fbfa 	bl	8004dbc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);	//Processing the conversion
 80015c8:	210a      	movs	r1, #10
 80015ca:	4816      	ldr	r0, [pc, #88]	; (8001624 <captDistIR_Get+0x84>)
 80015cc:	f003 fc62 	bl	8004e94 <HAL_ADC_PollForConversion>
	tab[0]=HAL_ADC_GetValue(&adcHandle); 		//Return the converted data
 80015d0:	4814      	ldr	r0, [pc, #80]	; (8001624 <captDistIR_Get+0x84>)
 80015d2:	f003 fc9e 	bl	8004f12 <HAL_ADC_GetValue>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]

	sConfig.Channel      = ADC_CHANNEL_8;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <captDistIR_Get+0x80>)
 80015e0:	2208      	movs	r2, #8
 80015e2:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <captDistIR_Get+0x80>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <captDistIR_Get+0x80>)
 80015ec:	2203      	movs	r2, #3
 80015ee:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 80015f0:	490b      	ldr	r1, [pc, #44]	; (8001620 <captDistIR_Get+0x80>)
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <captDistIR_Get+0x84>)
 80015f4:	f003 fc9a 	bl	8004f2c <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);						//Start the conversion
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <captDistIR_Get+0x84>)
 80015fa:	f003 fbdf 	bl	8004dbc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);		//Processing the conversion
 80015fe:	210a      	movs	r1, #10
 8001600:	4808      	ldr	r0, [pc, #32]	; (8001624 <captDistIR_Get+0x84>)
 8001602:	f003 fc47 	bl	8004e94 <HAL_ADC_PollForConversion>
	tab[1]=HAL_ADC_GetValue(&adcHandle); 			//Return the converted data
 8001606:	4807      	ldr	r0, [pc, #28]	; (8001624 <captDistIR_Get+0x84>)
 8001608:	f003 fc83 	bl	8004f12 <HAL_ADC_GetValue>
 800160c:	4602      	mov	r2, r0
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3304      	adds	r3, #4
 8001612:	601a      	str	r2, [r3, #0]

	return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000154 	.word	0x20000154
 8001624:	20000110 	.word	0x20000110

08001628 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001634:	f00b fb60 	bl	800ccf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001638:	4b58      	ldr	r3, [pc, #352]	; (800179c <pvPortMallocMicroROS+0x174>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001640:	f000 f98c 	bl	800195c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001644:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <pvPortMallocMicroROS+0x178>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	f040 808e 	bne.w	800176e <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d01d      	beq.n	8001694 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001658:	2208      	movs	r2, #8
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	2b00      	cmp	r3, #0
 8001668:	d014      	beq.n	8001694 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f023 0307 	bic.w	r3, r3, #7
 8001670:	3308      	adds	r3, #8
 8001672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00a      	beq.n	8001694 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800167e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001682:	f383 8811 	msr	BASEPRI, r3
 8001686:	f3bf 8f6f 	isb	sy
 800168a:	f3bf 8f4f 	dsb	sy
 800168e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001690:	bf00      	nop
 8001692:	e7fe      	b.n	8001692 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d069      	beq.n	800176e <pvPortMallocMicroROS+0x146>
 800169a:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <pvPortMallocMicroROS+0x17c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d864      	bhi.n	800176e <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80016a4:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <pvPortMallocMicroROS+0x180>)
 80016a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80016a8:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <pvPortMallocMicroROS+0x180>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016ae:	e004      	b.n	80016ba <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d903      	bls.n	80016cc <pvPortMallocMicroROS+0xa4>
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f1      	bne.n	80016b0 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <pvPortMallocMicroROS+0x174>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d04b      	beq.n	800176e <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2208      	movs	r2, #8
 80016dc:	4413      	add	r3, r2
 80016de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	1ad2      	subs	r2, r2, r3
 80016f0:	2308      	movs	r3, #8
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d91f      	bls.n	8001738 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80016f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00a      	beq.n	8001720 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800170a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800170e:	f383 8811 	msr	BASEPRI, r3
 8001712:	f3bf 8f6f 	isb	sy
 8001716:	f3bf 8f4f 	dsb	sy
 800171a:	613b      	str	r3, [r7, #16]
}
 800171c:	bf00      	nop
 800171e:	e7fe      	b.n	800171e <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	1ad2      	subs	r2, r2, r3
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001732:	69b8      	ldr	r0, [r7, #24]
 8001734:	f000 f974 	bl	8001a20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <pvPortMallocMicroROS+0x17c>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <pvPortMallocMicroROS+0x17c>)
 8001744:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <pvPortMallocMicroROS+0x17c>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <pvPortMallocMicroROS+0x184>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d203      	bcs.n	800175a <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <pvPortMallocMicroROS+0x17c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <pvPortMallocMicroROS+0x184>)
 8001758:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <pvPortMallocMicroROS+0x178>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	431a      	orrs	r2, r3
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800176e:	f00b fad1 	bl	800cd14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00a      	beq.n	8001792 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 800177c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001780:	f383 8811 	msr	BASEPRI, r3
 8001784:	f3bf 8f6f 	isb	sy
 8001788:	f3bf 8f4f 	dsb	sy
 800178c:	60fb      	str	r3, [r7, #12]
}
 800178e:	bf00      	nop
 8001790:	e7fe      	b.n	8001790 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8001792:	69fb      	ldr	r3, [r7, #28]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000416c 	.word	0x2000416c
 80017a0:	20004178 	.word	0x20004178
 80017a4:	20004170 	.word	0x20004170
 80017a8:	20004164 	.word	0x20004164
 80017ac:	20004174 	.word	0x20004174

080017b0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d048      	beq.n	8001854 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80017c2:	2308      	movs	r3, #8
 80017c4:	425b      	negs	r3, r3
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	4413      	add	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <vPortFreeMicroROS+0xac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4013      	ands	r3, r2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10a      	bne.n	80017f4 <vPortFreeMicroROS+0x44>
	__asm volatile
 80017de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e2:	f383 8811 	msr	BASEPRI, r3
 80017e6:	f3bf 8f6f 	isb	sy
 80017ea:	f3bf 8f4f 	dsb	sy
 80017ee:	60fb      	str	r3, [r7, #12]
}
 80017f0:	bf00      	nop
 80017f2:	e7fe      	b.n	80017f2 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00a      	beq.n	8001812 <vPortFreeMicroROS+0x62>
	__asm volatile
 80017fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001800:	f383 8811 	msr	BASEPRI, r3
 8001804:	f3bf 8f6f 	isb	sy
 8001808:	f3bf 8f4f 	dsb	sy
 800180c:	60bb      	str	r3, [r7, #8]
}
 800180e:	bf00      	nop
 8001810:	e7fe      	b.n	8001810 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <vPortFreeMicroROS+0xac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d019      	beq.n	8001854 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d115      	bne.n	8001854 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <vPortFreeMicroROS+0xac>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	43db      	mvns	r3, r3
 8001832:	401a      	ands	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001838:	f00b fa5e 	bl	800ccf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <vPortFreeMicroROS+0xb0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4413      	add	r3, r2
 8001846:	4a06      	ldr	r2, [pc, #24]	; (8001860 <vPortFreeMicroROS+0xb0>)
 8001848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800184a:	6938      	ldr	r0, [r7, #16]
 800184c:	f000 f8e8 	bl	8001a20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001850:	f00b fa60 	bl	800cd14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20004178 	.word	0x20004178
 8001860:	20004170 	.word	0x20004170

08001864 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001870:	2308      	movs	r3, #8
 8001872:	425b      	negs	r3, r3
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	4413      	add	r3, r2
 8001878:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <getBlockSize+0x38>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	43db      	mvns	r3, r3
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

	return count;
 800188c:	68fb      	ldr	r3, [r7, #12]
}
 800188e:	4618      	mov	r0, r3
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20004178 	.word	0x20004178

080018a0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80018aa:	f00b fa25 	bl	800ccf8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80018ae:	6838      	ldr	r0, [r7, #0]
 80018b0:	f7ff feba 	bl	8001628 <pvPortMallocMicroROS>
 80018b4:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80018ba:	2308      	movs	r3, #8
 80018bc:	425b      	negs	r3, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <pvPortReallocMicroROS+0x70>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	43db      	mvns	r3, r3
 80018da:	4013      	ands	r3, r2
 80018dc:	617b      	str	r3, [r7, #20]

  	while(count--)
 80018de:	e007      	b.n	80018f0 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	1c53      	adds	r3, r2, #1
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	1c59      	adds	r1, r3, #1
 80018ea:	61b9      	str	r1, [r7, #24]
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	1e5a      	subs	r2, r3, #1
 80018f4:	617a      	str	r2, [r7, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f2      	bne.n	80018e0 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff58 	bl	80017b0 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001900:	f00b fa08 	bl	800cd14 <xTaskResumeAll>

	return newmem;
 8001904:	693b      	ldr	r3, [r7, #16]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20004178 	.word	0x20004178

08001914 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800191e:	f00b f9eb 	bl	800ccf8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800192c:	6978      	ldr	r0, [r7, #20]
 800192e:	f7ff fe7b 	bl	8001628 <pvPortMallocMicroROS>
 8001932:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001938:	e004      	b.n	8001944 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	613a      	str	r2, [r7, #16]
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	1e5a      	subs	r2, r3, #1
 8001948:	617a      	str	r2, [r7, #20]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f5      	bne.n	800193a <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800194e:	f00b f9e1 	bl	800cd14 <xTaskResumeAll>
  	return mem;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001962:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001966:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <prvHeapInit+0xac>)
 800196a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00c      	beq.n	8001990 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3307      	adds	r3, #7
 800197a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f023 0307 	bic.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <prvHeapInit+0xac>)
 800198c:	4413      	add	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001994:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <prvHeapInit+0xb0>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <prvHeapInit+0xb0>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	4413      	add	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80019a8:	2208      	movs	r2, #8
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f023 0307 	bic.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <prvHeapInit+0xb4>)
 80019bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <prvHeapInit+0xb4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <prvHeapInit+0xb4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	1ad2      	subs	r2, r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <prvHeapInit+0xb4>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <prvHeapInit+0xb8>)
 80019ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <prvHeapInit+0xbc>)
 80019f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <prvHeapInit+0xc0>)
 80019f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20000164 	.word	0x20000164
 8001a0c:	20004164 	.word	0x20004164
 8001a10:	2000416c 	.word	0x2000416c
 8001a14:	20004174 	.word	0x20004174
 8001a18:	20004170 	.word	0x20004170
 8001a1c:	20004178 	.word	0x20004178

08001a20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <prvInsertBlockIntoFreeList+0xac>)
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e002      	b.n	8001a34 <prvInsertBlockIntoFreeList+0x14>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d8f7      	bhi.n	8001a2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d108      	bne.n	8001a62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	441a      	add	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	441a      	add	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d118      	bne.n	8001aa8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <prvInsertBlockIntoFreeList+0xb0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d00d      	beq.n	8001a9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	441a      	add	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e008      	b.n	8001ab0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <prvInsertBlockIntoFreeList+0xb0>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e003      	b.n	8001ab0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d002      	beq.n	8001abe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20004164 	.word	0x20004164
 8001ad0:	2000416c 	.word	0x2000416c

08001ad4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001ae2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ae8:	4904      	ldr	r1, [pc, #16]	; (8001afc <cubemx_transport_open+0x28>)
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f008 fc9c 	bl	800a428 <HAL_UART_Receive_DMA>
    return true;
 8001af0:	2301      	movs	r3, #1
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000417c 	.word	0x2000417c

08001b00 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001b0e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f008 fcb9 	bl	800a488 <HAL_UART_DMAStop>
    return true;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001b34:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b20      	cmp	r3, #32
 8001b40:	d11c      	bne.n	8001b7c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	6978      	ldr	r0, [r7, #20]
 8001b4c:	f008 fbee 	bl	800a32c <HAL_UART_Transmit_DMA>
 8001b50:	4603      	mov	r3, r0
 8001b52:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001b54:	e002      	b.n	8001b5c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f009 ff06 	bl	800b968 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001b5c:	7cfb      	ldrb	r3, [r7, #19]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d105      	bne.n	8001b6e <cubemx_transport_write+0x4e>
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d1f3      	bne.n	8001b56 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001b6e:	7cfb      	ldrb	r3, [r7, #19]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <cubemx_transport_write+0x58>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	e002      	b.n	8001b7e <cubemx_transport_write+0x5e>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e000      	b.n	8001b7e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001b7c:	2300      	movs	r3, #0
    }
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001b9c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba2:	b672      	cpsid	i
}
 8001ba4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <cubemx_transport_read+0x9c>)
 8001bb4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bb6:	b662      	cpsie	i
}
 8001bb8:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f009 fed1 	bl	800b968 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <cubemx_transport_read+0xa0>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <cubemx_transport_read+0x9c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d103      	bne.n	8001bda <cubemx_transport_read+0x52>
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dbe3      	blt.n	8001ba2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001bde:	e011      	b.n	8001c04 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <cubemx_transport_read+0xa0>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	440b      	add	r3, r1
 8001bea:	4910      	ldr	r1, [pc, #64]	; (8001c2c <cubemx_transport_read+0xa4>)
 8001bec:	5c8a      	ldrb	r2, [r1, r2]
 8001bee:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <cubemx_transport_read+0xa0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <cubemx_transport_read+0xa0>)
 8001bfc:	6013      	str	r3, [r2, #0]
        wrote++;
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	3301      	adds	r3, #1
 8001c02:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <cubemx_transport_read+0xa0>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <cubemx_transport_read+0x9c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d003      	beq.n	8001c18 <cubemx_transport_read+0x90>
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d3e3      	bcc.n	8001be0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001c18:	69bb      	ldr	r3, [r7, #24]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20004980 	.word	0x20004980
 8001c28:	2000497c 	.word	0x2000497c
 8001c2c:	2000417c 	.word	0x2000417c

08001c30 <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
 8001c44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a2c      	ldr	r2, [pc, #176]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a1e      	ldr	r2, [pc, #120]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <MX_GPIO_Init+0xd0>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2120      	movs	r1, #32
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <MX_GPIO_Init+0xd4>)
 8001cbc:	f004 f990 	bl	8005fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cc6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480c      	ldr	r0, [pc, #48]	; (8001d08 <MX_GPIO_Init+0xd8>)
 8001cd8:	f003 fffe 	bl	8005cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cdc:	2320      	movs	r3, #32
 8001cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4804      	ldr	r0, [pc, #16]	; (8001d04 <MX_GPIO_Init+0xd4>)
 8001cf4:	f003 fff0 	bl	8005cd8 <HAL_GPIO_Init>

}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020800 	.word	0x40020800

08001d0c <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d1c:	d017      	beq.n	8001d4e <HAL_GPIO_EXTI_Callback+0x42>
 8001d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d22:	dc16      	bgt.n	8001d52 <HAL_GPIO_EXTI_Callback+0x46>
 8001d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d28:	d00e      	beq.n	8001d48 <HAL_GPIO_EXTI_Callback+0x3c>
 8001d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2e:	dc10      	bgt.n	8001d52 <HAL_GPIO_EXTI_Callback+0x46>
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d010      	beq.n	8001d56 <HAL_GPIO_EXTI_Callback+0x4a>
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	dc0c      	bgt.n	8001d52 <HAL_GPIO_EXTI_Callback+0x46>
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d002      	beq.n	8001d42 <HAL_GPIO_EXTI_Callback+0x36>
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d00c      	beq.n	8001d5a <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 8001d40:	e007      	b.n	8001d52 <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 8001d42:	f001 ffc1 	bl	8003cc8 <quadEncoder_CallbackIndexR>
					break;
 8001d46:	e009      	b.n	8001d5c <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8001d48:	f001 ff98 	bl	8003c7c <quadEncoder_CallbackIndexL>
					break;
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001d4e:	bf00      	nop
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 8001d52:	bf00      	nop
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001d56:	bf00      	nop
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001d5a:	bf00      	nop


	}
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d6a:	4a13      	ldr	r2, [pc, #76]	; (8001db8 <MX_I2C1_Init+0x54>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d70:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <MX_I2C1_Init+0x58>)
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001da2:	f004 f94f 	bl	8006044 <HAL_I2C_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dac:	f001 fbe2 	bl	8003574 <Error_Handler>
  }

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20004984 	.word	0x20004984
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	000186a0 	.word	0x000186a0

08001dc0 <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	89f9      	ldrh	r1, [r7, #14]
 8001dd4:	2264      	movs	r2, #100	; 0x64
 8001dd6:	9200      	str	r2, [sp, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <i2c1_WriteBuffer+0x30>)
 8001ddc:	f004 fa76 	bl	80062cc <HAL_I2C_Master_Transmit>
 8001de0:	4603      	mov	r3, r0
 8001de2:	617b      	str	r3, [r7, #20]
	return status;
 8001de4:	697b      	ldr	r3, [r7, #20]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20004984 	.word	0x20004984

08001df4 <i2c1_ReadBuffer>:
//======================================================================
// Receive n_data bytes from i2c slave
//======================================================================
int i2c1_ReadBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data , 100);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	89f9      	ldrh	r1, [r7, #14]
 8001e08:	2264      	movs	r2, #100	; 0x64
 8001e0a:	9200      	str	r2, [sp, #0]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <i2c1_ReadBuffer+0x30>)
 8001e10:	f004 fb5a 	bl	80064c8 <HAL_I2C_Master_Receive>
 8001e14:	4603      	mov	r3, r0
 8001e16:	617b      	str	r3, [r7, #20]
	return status;
 8001e18:	697b      	ldr	r3, [r7, #20]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20004984 	.word	0x20004984

08001e28 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	60ba      	str	r2, [r7, #8]
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	4603      	mov	r3, r0
 8001e34:	81fb      	strh	r3, [r7, #14]
 8001e36:	460b      	mov	r3, r1
 8001e38:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8001e3a:	7b7b      	ldrb	r3, [r7, #13]
 8001e3c:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	3301      	adds	r3, #1
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68b9      	ldr	r1, [r7, #8]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f018 fc2c 	bl	801a6a6 <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f107 0214 	add.w	r2, r7, #20
 8001e5a:	89f9      	ldrh	r1, [r7, #14]
 8001e5c:	2064      	movs	r0, #100	; 0x64
 8001e5e:	9000      	str	r0, [sp, #0]
 8001e60:	4804      	ldr	r0, [pc, #16]	; (8001e74 <i2c1_WriteRegBuffer+0x4c>)
 8001e62:	f004 fa33 	bl	80062cc <HAL_I2C_Master_Transmit>
 8001e66:	4603      	mov	r3, r0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
     return status;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3728      	adds	r7, #40	; 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20004984 	.word	0x20004984

08001e78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;


void MX_USART1_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_USART1_UART_Init+0x50>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	f008 f8bb 	bl	800a02a <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eba:	f001 fb5b 	bl	8003574 <Error_Handler>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200049d8 	.word	0x200049d8
 8001ec8:	40011000 	.word	0x40011000

08001ecc <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_USART2_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001f04:	f008 f891 	bl	800a02a <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f001 fb31 	bl	8003574 <Error_Handler>
  }
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20004a1c 	.word	0x20004a1c
 8001f1c:	40004400 	.word	0x40004400

08001f20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <MX_DMA_Init+0x88>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <MX_DMA_Init+0x88>)
 8001f30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <MX_DMA_Init+0x88>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <MX_DMA_Init+0x88>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <MX_DMA_Init+0x88>)
 8001f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <MX_DMA_Init+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2105      	movs	r1, #5
 8001f62:	2010      	movs	r0, #16
 8001f64:	f003 fa7e 	bl	8005464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f68:	2010      	movs	r0, #16
 8001f6a:	f003 fa97 	bl	800549c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2105      	movs	r1, #5
 8001f72:	2011      	movs	r0, #17
 8001f74:	f003 fa76 	bl	8005464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f78:	2011      	movs	r0, #17
 8001f7a:	f003 fa8f 	bl	800549c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2105      	movs	r1, #5
 8001f82:	203a      	movs	r0, #58	; 0x3a
 8001f84:	f003 fa6e 	bl	8005464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f88:	203a      	movs	r0, #58	; 0x3a
 8001f8a:	f003 fa87 	bl	800549c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2105      	movs	r1, #5
 8001f92:	2046      	movs	r0, #70	; 0x46
 8001f94:	f003 fa66 	bl	8005464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001f98:	2046      	movs	r0, #70	; 0x46
 8001f9a:	f003 fa7f 	bl	800549c <HAL_NVIC_EnableIRQ>

}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	207c      	movs	r0, #124	; 0x7c
 8001fc0:	f7ff fefe 	bl	8001dc0 <i2c1_WriteBuffer>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	71bb      	strb	r3, [r7, #6]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 8001fde:	79bb      	ldrb	r3, [r7, #6]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d906      	bls.n	8001ff2 <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 8001fe4:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <groveLCD_begin+0xe8>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f043 0308 	orr.w	r3, r3, #8
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <groveLCD_begin+0xe8>)
 8001ff0:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 8001ff2:	4a31      	ldr	r2, [pc, #196]	; (80020b8 <groveLCD_begin+0xec>)
 8001ff4:	79bb      	ldrb	r3, [r7, #6]
 8001ff6:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8001ff8:	4b30      	ldr	r3, [pc, #192]	; (80020bc <groveLCD_begin+0xf0>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 8001ffe:	797b      	ldrb	r3, [r7, #5]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d009      	beq.n	8002018 <groveLCD_begin+0x4c>
 8002004:	79bb      	ldrb	r3, [r7, #6]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d106      	bne.n	8002018 <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <groveLCD_begin+0xe8>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <groveLCD_begin+0xe8>)
 8002016:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 8002018:	2032      	movs	r0, #50	; 0x32
 800201a:	f002 fe77 	bl	8004d0c <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800201e:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <groveLCD_begin+0xe8>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f043 0320 	orr.w	r3, r3, #32
 8002026:	b2db      	uxtb	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f89b 	bl	8002164 <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 800202e:	2005      	movs	r0, #5
 8002030:	f002 fe6c 	bl	8004d0c <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002034:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <groveLCD_begin+0xe8>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f043 0320 	orr.w	r3, r3, #32
 800203c:	b2db      	uxtb	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f890 	bl	8002164 <groveLCD_command>
    HAL_Delay(5);
 8002044:	2005      	movs	r0, #5
 8002046:	f002 fe61 	bl	8004d0c <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <groveLCD_begin+0xe8>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	f043 0320 	orr.w	r3, r3, #32
 8002052:	b2db      	uxtb	r3, r3
 8002054:	4618      	mov	r0, r3
 8002056:	f000 f885 	bl	8002164 <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <groveLCD_begin+0xe8>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f043 0320 	orr.w	r3, r3, #32
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4618      	mov	r0, r3
 8002066:	f000 f87d 	bl	8002164 <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <groveLCD_begin+0xf4>)
 800206c:	2204      	movs	r2, #4
 800206e:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 8002070:	f000 f862 	bl	8002138 <groveLCD_display>

    // clear it off
    groveLCD_clear();
 8002074:	f000 f831 	bl	80020da <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <groveLCD_begin+0xf8>)
 800207a:	2202      	movs	r2, #2
 800207c:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <groveLCD_begin+0xf8>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	b2db      	uxtb	r3, r3
 8002088:	4618      	mov	r0, r3
 800208a:	f000 f86b 	bl	8002164 <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 800208e:	2100      	movs	r1, #0
 8002090:	2000      	movs	r0, #0
 8002092:	f000 f8a4 	bl	80021de <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 8002096:	21ff      	movs	r1, #255	; 0xff
 8002098:	2008      	movs	r0, #8
 800209a:	f000 f8a0 	bl	80021de <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 800209e:	2120      	movs	r1, #32
 80020a0:	2001      	movs	r0, #1
 80020a2:	f000 f89c 	bl	80021de <groveLCD_setReg>

    groveLCD_setColorWhite();
 80020a6:	f000 f80f 	bl	80020c8 <groveLCD_setColorWhite>

}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20004be0 	.word	0x20004be0
 80020b8:	20004be3 	.word	0x20004be3
 80020bc:	20004be4 	.word	0x20004be4
 80020c0:	20004be1 	.word	0x20004be1
 80020c4:	20004be2 	.word	0x20004be2

080020c8 <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	22ff      	movs	r2, #255	; 0xff
 80020ce:	21ff      	movs	r1, #255	; 0xff
 80020d0:	20ff      	movs	r0, #255	; 0xff
 80020d2:	f000 f896 	bl	8002202 <groveLCD_setRGB>
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}

080020da <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80020de:	2001      	movs	r0, #1
 80020e0:	f000 f840 	bl	8002164 <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 80020e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020e8:	f002 fe10 	bl	8004d0c <HAL_Delay>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	460a      	mov	r2, r1
 80020fa:	71fb      	strb	r3, [r7, #7]
 80020fc:	4613      	mov	r3, r2
 80020fe:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 8002100:	79bb      	ldrb	r3, [r7, #6]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d104      	bne.n	8002110 <groveLCD_setCursor+0x20>
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e003      	b.n	8002118 <groveLCD_setCursor+0x28>
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002116:	b2db      	uxtb	r3, r3
 8002118:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	733b      	strb	r3, [r7, #12]
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	2102      	movs	r1, #2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff3f 	bl	8001fac <i2c_send_byteS>
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <groveLCD_display+0x28>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <groveLCD_display+0x28>)
 8002148:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <groveLCD_display+0x28>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f043 0308 	orr.w	r3, r3, #8
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f805 	bl	8002164 <groveLCD_command>
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20004be1 	.word	0x20004be1

08002164 <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	733b      	strb	r3, [r7, #12]
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	2102      	movs	r1, #2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff15 	bl	8001fac <i2c_send_byteS>
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 8002194:	2340      	movs	r3, #64	; 0x40
 8002196:	733b      	strb	r3, [r7, #12]
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2102      	movs	r1, #2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff02 	bl	8001fac <i2c_send_byteS>
    return 1; // assume sucess
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 80021ba:	e007      	b.n	80021cc <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ffe2 	bl	800218a <groveLCD_write>
		s++;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3301      	adds	r3, #1
 80021ca:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f3      	bne.n	80021bc <groveLCD_putString+0xa>
	}
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	460a      	mov	r2, r1
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	4613      	mov	r3, r2
 80021ec:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 80021ee:	1dba      	adds	r2, r7, #6
 80021f0:	79f9      	ldrb	r1, [r7, #7]
 80021f2:	2301      	movs	r3, #1
 80021f4:	20c4      	movs	r0, #196	; 0xc4
 80021f6:	f7ff fe17 	bl	8001e28 <i2c1_WriteRegBuffer>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	460b      	mov	r3, r1
 800220e:	71bb      	strb	r3, [r7, #6]
 8002210:	4613      	mov	r3, r2
 8002212:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	4619      	mov	r1, r3
 8002218:	2004      	movs	r0, #4
 800221a:	f7ff ffe0 	bl	80021de <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 800221e:	79bb      	ldrb	r3, [r7, #6]
 8002220:	4619      	mov	r1, r3
 8002222:	2003      	movs	r0, #3
 8002224:	f7ff ffdb 	bl	80021de <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 8002228:	797b      	ldrb	r3, [r7, #5]
 800222a:	4619      	mov	r1, r3
 800222c:	2002      	movs	r0, #2
 800222e:	f7ff ffd6 	bl	80021de <groveLCD_setReg>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <groveLCD_setColor>:
    {0, 255, 0},                // green
    {0, 0, 255},                // blue
};
//=================================================================
void groveLCD_setColor(unsigned char color)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
    if(color > 3)return ;
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d81a      	bhi.n	8002282 <groveLCD_setColor+0x46>
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
 800224c:	79fa      	ldrb	r2, [r7, #7]
 800224e:	490f      	ldr	r1, [pc, #60]	; (800228c <groveLCD_setColor+0x50>)
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	440b      	add	r3, r1
 8002258:	7818      	ldrb	r0, [r3, #0]
 800225a:	79fa      	ldrb	r2, [r7, #7]
 800225c:	490b      	ldr	r1, [pc, #44]	; (800228c <groveLCD_setColor+0x50>)
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	440b      	add	r3, r1
 8002266:	3301      	adds	r3, #1
 8002268:	7819      	ldrb	r1, [r3, #0]
 800226a:	79fa      	ldrb	r2, [r7, #7]
 800226c:	4c07      	ldr	r4, [pc, #28]	; (800228c <groveLCD_setColor+0x50>)
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	4423      	add	r3, r4
 8002276:	3302      	adds	r3, #2
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	f7ff ffc1 	bl	8002202 <groveLCD_setRGB>
 8002280:	e000      	b.n	8002284 <groveLCD_setColor+0x48>
    if(color > 3)return ;
 8002282:	bf00      	nop
}
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bd90      	pop	{r4, r7, pc}
 800228a:	bf00      	nop
 800228c:	0801b75c 	.word	0x0801b75c

08002290 <groveLCD_term_printf>:
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 8002290:	b40f      	push	{r0, r1, r2, r3}
 8002292:	b5b0      	push	{r4, r5, r7, lr}
 8002294:	b0a4      	sub	sp, #144	; 0x90
 8002296:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8002298:	2300      	movs	r3, #0
 800229a:	677b      	str	r3, [r7, #116]	; 0x74

	va_start(ap, fmt);
 800229c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022a0:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 80022a2:	e1cd      	b.n	8002640 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 80022a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b25      	cmp	r3, #37	; 0x25
 80022ac:	f040 81bd 	bne.w	800262a <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 80022b0:	2300      	movs	r3, #0
 80022b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022b4:	2301      	movs	r3, #1
 80022b6:	67bb      	str	r3, [r7, #120]	; 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 80022b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022bc:	3301      	adds	r3, #1
 80022be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b30      	cmp	r3, #48	; 0x30
 80022ca:	d106      	bne.n	80022da <groveLCD_term_printf+0x4a>
 80022cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022d0:	3301      	adds	r3, #1
 80022d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022d6:	2300      	movs	r3, #0
 80022d8:	67bb      	str	r3, [r7, #120]	; 0x78
			ch=*fmt;
 80022da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 80022e4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d92c      	bls.n	8002346 <groveLCD_term_printf+0xb6>
 80022ec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022f0:	2b39      	cmp	r3, #57	; 0x39
 80022f2:	d828      	bhi.n	8002346 <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	673b      	str	r3, [r7, #112]	; 0x70
				while ((ch>='0') && (ch<='9')) {
 80022f8:	e012      	b.n	8002320 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 80022fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	673a      	str	r2, [r7, #112]	; 0x70
 8002300:	3388      	adds	r3, #136	; 0x88
 8002302:	443b      	add	r3, r7
 8002304:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002308:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 800230c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002310:	3301      	adds	r3, #1
 8002312:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				while ((ch>='0') && (ch<='9')) {
 8002320:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002324:	2b2f      	cmp	r3, #47	; 0x2f
 8002326:	d903      	bls.n	8002330 <groveLCD_term_printf+0xa0>
 8002328:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800232c:	2b39      	cmp	r3, #57	; 0x39
 800232e:	d9e4      	bls.n	80022fa <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 8002330:	463a      	mov	r2, r7
 8002332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002334:	4413      	add	r3, r2
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 800233a:	463b      	mov	r3, r7
 800233c:	210a      	movs	r1, #10
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fb20 	bl	8004984 <str2num>
 8002344:	67f8      	str	r0, [r7, #124]	; 0x7c
			}
			switch (ch) {
 8002346:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800234a:	2b25      	cmp	r3, #37	; 0x25
 800234c:	d03c      	beq.n	80023c8 <groveLCD_term_printf+0x138>
 800234e:	2b25      	cmp	r3, #37	; 0x25
 8002350:	f2c0 8164 	blt.w	800261c <groveLCD_term_printf+0x38c>
 8002354:	2b78      	cmp	r3, #120	; 0x78
 8002356:	f300 8161 	bgt.w	800261c <groveLCD_term_printf+0x38c>
 800235a:	2b63      	cmp	r3, #99	; 0x63
 800235c:	f2c0 815e 	blt.w	800261c <groveLCD_term_printf+0x38c>
 8002360:	3b63      	subs	r3, #99	; 0x63
 8002362:	2b15      	cmp	r3, #21
 8002364:	f200 815a 	bhi.w	800261c <groveLCD_term_printf+0x38c>
 8002368:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <groveLCD_term_printf+0xe0>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	080023d1 	.word	0x080023d1
 8002374:	080023fb 	.word	0x080023fb
 8002378:	0800261d 	.word	0x0800261d
 800237c:	080024fb 	.word	0x080024fb
 8002380:	0800261d 	.word	0x0800261d
 8002384:	0800261d 	.word	0x0800261d
 8002388:	0800261d 	.word	0x0800261d
 800238c:	0800261d 	.word	0x0800261d
 8002390:	0800261d 	.word	0x0800261d
 8002394:	0800261d 	.word	0x0800261d
 8002398:	0800261d 	.word	0x0800261d
 800239c:	0800261d 	.word	0x0800261d
 80023a0:	0800246b 	.word	0x0800246b
 80023a4:	08002497 	.word	0x08002497
 80023a8:	0800261d 	.word	0x0800261d
 80023ac:	0800261d 	.word	0x0800261d
 80023b0:	080023e9 	.word	0x080023e9
 80023b4:	0800261d 	.word	0x0800261d
 80023b8:	0800243f 	.word	0x0800243f
 80023bc:	0800261d 	.word	0x0800261d
 80023c0:	0800261d 	.word	0x0800261d
 80023c4:	080024cf 	.word	0x080024cf
				case '%':
					groveLCD_write('%');
 80023c8:	2025      	movs	r0, #37	; 0x25
 80023ca:	f7ff fede 	bl	800218a <groveLCD_write>
					break;
 80023ce:	e132      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 80023d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d2:	1d1a      	adds	r2, r3, #4
 80023d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					groveLCD_write(ch);
 80023dc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fed2 	bl	800218a <groveLCD_write>
					break;
 80023e6:	e126      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 80023e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ea:	1d1a      	adds	r2, r3, #4
 80023ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	66fb      	str	r3, [r7, #108]	; 0x6c
					groveLCD_putString(p);
 80023f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80023f4:	f7ff fedd 	bl	80021b2 <groveLCD_putString>
					break;
 80023f8:	e11d      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 80023fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fc:	1d1a      	adds	r2, r3, #4
 80023fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if ((long)ul < 0) {
 8002406:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800240a:	2b00      	cmp	r3, #0
 800240c:	da07      	bge.n	800241e <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 800240e:	202d      	movs	r0, #45	; 0x2d
 8002410:	f7ff febb 	bl	800218a <groveLCD_write>
						ul = -(long)ul;
 8002414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002418:	425b      	negs	r3, r3
 800241a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 800241e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002420:	f107 000c 	add.w	r0, r7, #12
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002428:	220a      	movs	r2, #10
 800242a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800242e:	f002 fa25 	bl	800487c <num2str>
					groveLCD_putString(s);
 8002432:	f107 030c 	add.w	r3, r7, #12
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff febb 	bl	80021b2 <groveLCD_putString>
					break;
 800243c:	e0fb      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 800243e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002440:	1d1a      	adds	r2, r3, #4
 8002442:	64ba      	str	r2, [r7, #72]	; 0x48
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 10, size, sp);
 800244a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800244c:	f107 000c 	add.w	r0, r7, #12
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002454:	220a      	movs	r2, #10
 8002456:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800245a:	f002 fa0f 	bl	800487c <num2str>
					groveLCD_putString(s);
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fea5 	bl	80021b2 <groveLCD_putString>
					break;
 8002468:	e0e5      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 800246a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246c:	1d1a      	adds	r2, r3, #4
 800246e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 8, size, sp);
 8002476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002478:	f107 000c 	add.w	r0, r7, #12
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002480:	2208      	movs	r2, #8
 8002482:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002486:	f002 f9f9 	bl	800487c <num2str>
					groveLCD_putString(s);
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fe8f 	bl	80021b2 <groveLCD_putString>
					break;
 8002494:	e0cf      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 8002496:	2030      	movs	r0, #48	; 0x30
 8002498:	f7ff fe77 	bl	800218a <groveLCD_write>
					groveLCD_write('x');
 800249c:	2078      	movs	r0, #120	; 0x78
 800249e:	f7ff fe74 	bl	800218a <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 80024a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a4:	1d1a      	adds	r2, r3, #4
 80024a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 80024ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b0:	f107 000c 	add.w	r0, r7, #12
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024b8:	2210      	movs	r2, #16
 80024ba:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80024be:	f002 f9dd 	bl	800487c <num2str>
					groveLCD_putString(s);
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fe73 	bl	80021b2 <groveLCD_putString>
					break;
 80024cc:	e0b3      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 80024ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d0:	1d1a      	adds	r2, r3, #4
 80024d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 80024da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024dc:	f107 000c 	add.w	r0, r7, #12
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024e4:	2210      	movs	r2, #16
 80024e6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80024ea:	f002 f9c7 	bl	800487c <num2str>
					groveLCD_putString(s);
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fe5d 	bl	80021b2 <groveLCD_putString>
					break;
 80024f8:	e09d      	b.n	8002636 <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 80024fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10c      	bne.n	800251a <groveLCD_term_printf+0x28a>
 8002500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002502:	3307      	adds	r3, #7
 8002504:	f023 0307 	bic.w	r3, r3, #7
 8002508:	f103 0208 	add.w	r2, r3, #8
 800250c:	64ba      	str	r2, [r7, #72]	; 0x48
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8002516:	2301      	movs	r3, #1
 8002518:	677b      	str	r3, [r7, #116]	; 0x74
					ull = va_arg(ap, long long unsigned int);
 800251a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251c:	3307      	adds	r3, #7
 800251e:	f023 0307 	bic.w	r3, r3, #7
 8002522:	f103 0208 	add.w	r2, r3, #8
 8002526:	64ba      	str	r2, [r7, #72]	; 0x48
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 8002530:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	0fc2      	lsrs	r2, r0, #31
 800253e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002542:	0fcb      	lsrs	r3, r1, #31
 8002544:	4613      	mov	r3, r2
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	65fb      	str	r3, [r7, #92]	; 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 800254c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800254e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002552:	65bb      	str	r3, [r7, #88]	; 0x58
					float mf = (float)m ;
 8002554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800255e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf / pow(2.0,20.0);
 8002562:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002566:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002668 <groveLCD_term_printf+0x3d8>
 800256a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800256e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf + 1.0;
 8002572:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800257a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800257e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 8002582:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	0dc2      	lsrs	r2, r0, #23
 8002590:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8002594:	0dcb      	lsrs	r3, r1, #23
 8002596:	4613      	mov	r3, r2
 8002598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800259c:	653b      	str	r3, [r7, #80]	; 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 800259e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	0d02      	lsrs	r2, r0, #20
 80025ac:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80025b0:	0d0b      	lsrs	r3, r1, #20
 80025b2:	4613      	mov	r3, r2
 80025b4:	f003 020f 	and.w	r2, r3, #15
 80025b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ba:	4313      	orrs	r3, r2
 80025bc:	653b      	str	r3, [r7, #80]	; 0x50
					e = e - 127;
 80025be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c0:	3b7f      	subs	r3, #127	; 0x7f
 80025c2:	653b      	str	r3, [r7, #80]	; 0x50
					float f = mf*myPow(2.0,e);
 80025c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80025c6:	f7fd ffd7 	bl	8000578 <__aeabi_f2d>
 80025ca:	4604      	mov	r4, r0
 80025cc:	460d      	mov	r5, r1
 80025ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80025d0:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8002660 <groveLCD_term_printf+0x3d0>
 80025d4:	f002 fae4 	bl	8004ba0 <myPow>
 80025d8:	ec53 2b10 	vmov	r2, r3, d0
 80025dc:	4620      	mov	r0, r4
 80025de:	4629      	mov	r1, r5
 80025e0:	f7fe f822 	bl	8000628 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7fe fab6 	bl	8000b5c <__aeabi_d2f>
 80025f0:	4603      	mov	r3, r0
 80025f2:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ groveLCD_write('-'); }
 80025f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <groveLCD_term_printf+0x370>
 80025fa:	202d      	movs	r0, #45	; 0x2d
 80025fc:	f7ff fdc5 	bl	800218a <groveLCD_write>
					float2str((char*)s, f, 5);
 8002600:	f107 030c 	add.w	r3, r7, #12
 8002604:	2105      	movs	r1, #5
 8002606:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 800260a:	4618      	mov	r0, r3
 800260c:	f002 fa78 	bl	8004b00 <float2str>
					groveLCD_putString((char*)s);
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fdcc 	bl	80021b2 <groveLCD_putString>
					break;
 800261a:	e00c      	b.n	8002636 <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 800261c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fdb1 	bl	800218a <groveLCD_write>
 8002628:	e005      	b.n	8002636 <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 800262a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fdaa 	bl	800218a <groveLCD_write>
		fmt++;
 8002636:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800263a:	3301      	adds	r3, #1
 800263c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*fmt != '\0') {
 8002640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f47f ae2c 	bne.w	80022a4 <groveLCD_term_printf+0x14>
	}
	va_end(ap);
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3788      	adds	r7, #136	; 0x88
 8002652:	46bd      	mov	sp, r7
 8002654:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002658:	b004      	add	sp, #16
 800265a:	4770      	bx	lr
 800265c:	f3af 8000 	nop.w
 8002660:	00000000 	.word	0x00000000
 8002664:	40000000 	.word	0x40000000
 8002668:	49800000 	.word	0x49800000

0800266c <CHECKMRRET>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void CHECKMRRET(rcl_ret_t ret, char* msg){if (ret != RCL_RET_OK){ if (DEBUG_PRINTF){printf("Error : %d\r\nMsg : %s\r\n", (int)ret, msg); }}}
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <SubscriberCallbackFunction>:

void SubscriberCallbackFunction(const void *msgin){
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
#if SYNCHRO_EX == EXTEST_MICROROS
	std_msgs__msg__String * msg = (std_msgs__msg__String * )msgin;
	printf("\r\nMessage recue : %s\r\n", msg->data->data);
#elif SYNCHRO_EX == EXFINAL
	std_msgs__msg__Int32 * msg = (std_msgs__msg__Int32 * )msgin;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]
	if (DEBUG_PRINTF)
		printf("\r\nMessage recue : %ld\r\n", msg->data);
#endif //SYNCHRO_EX
}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <microros_task>:

// https://github.com/lFatality/stm32_micro_ros_setup
void microros_task(void *argument)
{
 800269c:	b5b0      	push	{r4, r5, r7, lr}
 800269e:	b0ec      	sub	sp, #432	; 0x1b0
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026aa:	6018      	str	r0, [r3, #0]
	rcl_node_t node; //microRos structure wich represent a node ROS
	rcl_node_options_t node_opt; //microRos structure wich represent option of a node ROS
	rclc_executor_t executor; //microRos structure wich represent an executor wich can be use to receive message

	// micro-ROS configuration with freertos
	rmw_uros_set_custom_transport(
 80026ac:	4bd5      	ldr	r3, [pc, #852]	; (8002a04 <microros_task+0x368>)
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	4bd5      	ldr	r3, [pc, #852]	; (8002a08 <microros_task+0x36c>)
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4bd5      	ldr	r3, [pc, #852]	; (8002a0c <microros_task+0x370>)
 80026b6:	4ad6      	ldr	r2, [pc, #856]	; (8002a10 <microros_task+0x374>)
 80026b8:	49d6      	ldr	r1, [pc, #856]	; (8002a14 <microros_task+0x378>)
 80026ba:	2001      	movs	r0, #1
 80026bc:	f00d fa60 	bl	800fb80 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80026c0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026c8:	4618      	mov	r0, r3
 80026ca:	f00c ffc3 	bl	800f654 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80026ce:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026d2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026d6:	4ad0      	ldr	r2, [pc, #832]	; (8002a18 <microros_task+0x37c>)
 80026d8:	601a      	str	r2, [r3, #0]
	freeRTOS_allocator.deallocate = microros_deallocate;
 80026da:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026de:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026e2:	4ace      	ldr	r2, [pc, #824]	; (8002a1c <microros_task+0x380>)
 80026e4:	605a      	str	r2, [r3, #4]
	freeRTOS_allocator.reallocate = microros_reallocate;
 80026e6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026ea:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026ee:	4acc      	ldr	r2, [pc, #816]	; (8002a20 <microros_task+0x384>)
 80026f0:	609a      	str	r2, [r3, #8]
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80026f2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026f6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026fa:	4aca      	ldr	r2, [pc, #808]	; (8002a24 <microros_task+0x388>)
 80026fc:	60da      	str	r2, [r3, #12]

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80026fe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002702:	4618      	mov	r0, r3
 8002704:	f00c ffb4 	bl	800f670 <rcutils_set_default_allocator>
 8002708:	4603      	mov	r3, r0
 800270a:	f083 0301 	eor.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <microros_task+0x80>
		printf("Error on default allocators (line %d)\r\n", __LINE__);
 8002714:	21c1      	movs	r1, #193	; 0xc1
 8002716:	48c4      	ldr	r0, [pc, #784]	; (8002a28 <microros_task+0x38c>)
 8002718:	f017 fc86 	bl	801a028 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 800271c:	463b      	mov	r3, r7
 800271e:	4618      	mov	r0, r3
 8002720:	f00c ffc6 	bl	800f6b0 <rcutils_get_default_allocator>
 8002724:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002728:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800272c:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8002730:	461d      	mov	r5, r3
 8002732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002736:	682b      	ldr	r3, [r5, #0]
 8002738:	6023      	str	r3, [r4, #0]

	//create init_options
	CHECKMRRET(rclc_support_init(&support, 0, NULL, &allocator), "error on init support");
 800273a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800273e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	f00c fe99 	bl	800f47c <rclc_support_init>
 800274a:	4603      	mov	r3, r0
 800274c:	49b7      	ldr	r1, [pc, #732]	; (8002a2c <microros_task+0x390>)
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ff8c 	bl	800266c <CHECKMRRET>
	// create node
	node_opt = rcl_node_get_default_options(); //Get default node options
 8002754:	463b      	mov	r3, r7
 8002756:	4618      	mov	r0, r3
 8002758:	f00c f848 	bl	800e7ec <rcl_node_get_default_options>
 800275c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002760:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002764:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8002768:	461d      	mov	r5, r3
 800276a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800276c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800276e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	node_opt.domain_id = ROS_DOMAIN_ID; //Set the ROS_DOMAIN_ID
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	CHECKMRRET(rclc_node_init_with_options(&node, "STM32_node", "", &support, &node_opt), "error on init node");
 800277c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8002780:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8002784:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4613      	mov	r3, r2
 800278c:	4aa8      	ldr	r2, [pc, #672]	; (8002a30 <microros_task+0x394>)
 800278e:	49a9      	ldr	r1, [pc, #676]	; (8002a34 <microros_task+0x398>)
 8002790:	f00c fec2 	bl	800f518 <rclc_node_init_with_options>
 8002794:	4603      	mov	r3, r0
 8002796:	49a8      	ldr	r1, [pc, #672]	; (8002a38 <microros_task+0x39c>)
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff67 	bl	800266c <CHECKMRRET>
		ret = rclc_executor_spin_some(&executor, 100*1000*1000);
		vTaskDelay(SAMPLING_PERIOD_ms);
	}
#elif SYNCHRO_EX == EXFINAL
	//Init the queue mesage
	MicroRosPubMsg MsgToPub = {'N', 0, 0};
 800279e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027a6:	224e      	movs	r2, #78	; 0x4e
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027b2:	2200      	movs	r2, #0
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
	MicroRosSubMsg SubToMsg = {DEFAULT_DIR, 0, 0, DEFAULT_MODE, DEFAULT_SPEED};
 80027c2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80027ca:	4a9c      	ldr	r2, [pc, #624]	; (8002a3c <microros_task+0x3a0>)
 80027cc:	461c      	mov	r4, r3
 80027ce:	4615      	mov	r5, r2
 80027d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027d4:	682b      	ldr	r3, [r5, #0]
 80027d6:	6023      	str	r3, [r4, #0]
	/* PUBLISHER */
	//Use to publish the direction of robot in sensor mode
	rcl_publisher_t capteur_dir_pub;
	char* capteur_dir_topic = CAPTEUR_DIR_TOPIC;
 80027d8:	4b99      	ldr	r3, [pc, #612]	; (8002a40 <microros_task+0x3a4>)
 80027da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	std_msgs__msg__Int32 capteur_dir_msg;
	//Use to publish the actual mode of the robot
	rcl_publisher_t etat_mode_pub;
	char* etat_mode_topic = ETAT_MODE_TOPIC;
 80027de:	4b99      	ldr	r3, [pc, #612]	; (8002a44 <microros_task+0x3a8>)
 80027e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	std_msgs__msg__Int32 etat_mode_msg;
	//Use to publish the actual speed of the robot
	rcl_publisher_t etat_speed_pub;
	char* etat_speed_topic = ETAT_SPEED_TOPIC;
 80027e4:	4b98      	ldr	r3, [pc, #608]	; (8002a48 <microros_task+0x3ac>)
 80027e6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	std_msgs__msg__Int32 etat_speed_msg;
	/* SUBSCRIBER */
	//Use to receive the x position of object see by the camera
	rcl_subscription_t camera_x_sub;
	char* camera_x_topic = CAMERA_X_TOPIC;
 80027ea:	4b98      	ldr	r3, [pc, #608]	; (8002a4c <microros_task+0x3b0>)
 80027ec:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	std_msgs__msg__Int32 camera_x_msg;
	//Use to receive the y position of object see by the camera
	rcl_subscription_t camera_y_sub;
	char* camera_y_topic = CAMERA_Y_TOPIC;
 80027f0:	4b97      	ldr	r3, [pc, #604]	; (8002a50 <microros_task+0x3b4>)
 80027f2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	std_msgs__msg__Int32 camera_y_msg;
	//Use to receive the remote control in remote mode
	rcl_subscription_t telecommande_dir_sub;
	char* telecommande_dir_topic = TELECOMMANDE_DIR_TOPIC;
 80027f6:	4b97      	ldr	r3, [pc, #604]	; (8002a54 <microros_task+0x3b8>)
 80027f8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	std_msgs__msg__Int32 telecommande_dir_msg;
	//Use to receive the mode config
	rcl_subscription_t config_mode_sub;
	char* config_mode_topic = CONFIG_MODE_TOPIC;
 80027fc:	4b96      	ldr	r3, [pc, #600]	; (8002a58 <microros_task+0x3bc>)
 80027fe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	std_msgs__msg__Int32 config_mode_msg;
	//Use to receive the speed config
	rcl_subscription_t config_speed_sub;
	char* config_speed_topic = CONFIG_SPEED_TOPIC;
 8002802:	4b96      	ldr	r3, [pc, #600]	; (8002a5c <microros_task+0x3c0>)
 8002804:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	std_msgs__msg__Int32 config_speed_msg;

	// create publisher
	createPublisher(&capteur_dir_pub, &node,
 8002808:	f00e f82c 	bl	8010864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800280c:	4602      	mov	r2, r0
 800280e:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8002812:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8002816:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002820:	f000 feae 	bl	8003580 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		capteur_dir_topic, &capteur_dir_msg);

	createPublisher(&etat_mode_pub, &node,
 8002824:	f00e f81e 	bl	8010864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002828:	4602      	mov	r2, r0
 800282a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800282e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002832:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800283c:	f000 fea0 	bl	8003580 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_mode_topic, &etat_mode_msg);

	createPublisher(&etat_speed_pub, &node,
 8002840:	f00e f810 	bl	8010864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002844:	4602      	mov	r2, r0
 8002846:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800284a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800284e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002858:	f000 fe92 	bl	8003580 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_speed_topic, &etat_speed_msg);

	//create subscriber
	createSubscriber(&camera_x_sub, &node,
 800285c:	f00e f802 	bl	8010864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002860:	4602      	mov	r2, r0
 8002862:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8002866:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800286a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002874:	f000 fea0 	bl	80035b8 <createSubscriber>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		camera_x_topic, &camera_x_msg);

	createSubscriber(&camera_y_sub, &node,
 8002878:	f00d fff4 	bl	8010864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800287c:	4602      	mov	r2, r0
 800287e:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8002882:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002886:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002890:	f000 fe92 	bl	80035b8 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			camera_y_topic, &camera_y_msg);

	createSubscriber(&telecommande_dir_sub, &node,
 8002894:	f00d ffe6 	bl	8010864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002898:	4602      	mov	r2, r0
 800289a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800289e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80028a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028ac:	f000 fe84 	bl	80035b8 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			telecommande_dir_topic, &telecommande_dir_msg);

	createSubscriber(&config_mode_sub, &node,
 80028b0:	f00d ffd8 	bl	8010864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80028ba:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80028be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80028c8:	f000 fe76 	bl	80035b8 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_mode_topic, &config_mode_msg);

	createSubscriber(&config_speed_sub, &node,
 80028cc:	f00d ffca 	bl	8010864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80028d0:	4602      	mov	r2, r0
 80028d2:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80028d6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028e4:	f000 fe68 	bl	80035b8 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_speed_topic, &config_speed_msg);

	//Init the executor
	CHECKMRRET(rclc_executor_init(&executor, &support.context, 5, &allocator), "Error on init executor");
 80028e8:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80028ec:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80028f0:	1d19      	adds	r1, r3, #4
 80028f2:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80028f6:	4613      	mov	r3, r2
 80028f8:	2205      	movs	r2, #5
 80028fa:	f00c fb61 	bl	800efc0 <rclc_executor_init>
 80028fe:	4603      	mov	r3, r0
 8002900:	4957      	ldr	r1, [pc, #348]	; (8002a60 <microros_task+0x3c4>)
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff feb2 	bl	800266c <CHECKMRRET>
	/*Add subscriber to executor to let it check if message is receive on this
	topic and store the data on the message structure after call the callback*/
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_x_sub, &camera_x_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_x_sub");
 8002908:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800290c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002910:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002914:	2300      	movs	r3, #0
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4b52      	ldr	r3, [pc, #328]	; (8002a64 <microros_task+0x3c8>)
 800291a:	f00c fbc5 	bl	800f0a8 <rclc_executor_add_subscription>
 800291e:	4603      	mov	r3, r0
 8002920:	4951      	ldr	r1, [pc, #324]	; (8002a68 <microros_task+0x3cc>)
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fea2 	bl	800266c <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_y_sub, &camera_y_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_y_sub");
 8002928:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800292c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002930:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002934:	2300      	movs	r3, #0
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	4b4a      	ldr	r3, [pc, #296]	; (8002a64 <microros_task+0x3c8>)
 800293a:	f00c fbb5 	bl	800f0a8 <rclc_executor_add_subscription>
 800293e:	4603      	mov	r3, r0
 8002940:	494a      	ldr	r1, [pc, #296]	; (8002a6c <microros_task+0x3d0>)
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fe92 	bl	800266c <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &telecommande_dir_sub, &telecommande_dir_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add telecommande_dir_sub");
 8002948:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800294c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002950:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002954:	2300      	movs	r3, #0
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4b42      	ldr	r3, [pc, #264]	; (8002a64 <microros_task+0x3c8>)
 800295a:	f00c fba5 	bl	800f0a8 <rclc_executor_add_subscription>
 800295e:	4603      	mov	r3, r0
 8002960:	4943      	ldr	r1, [pc, #268]	; (8002a70 <microros_task+0x3d4>)
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fe82 	bl	800266c <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_mode_sub, &config_mode_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_mode_sub");
 8002968:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800296c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002970:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002974:	2300      	movs	r3, #0
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <microros_task+0x3c8>)
 800297a:	f00c fb95 	bl	800f0a8 <rclc_executor_add_subscription>
 800297e:	4603      	mov	r3, r0
 8002980:	493c      	ldr	r1, [pc, #240]	; (8002a74 <microros_task+0x3d8>)
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fe72 	bl	800266c <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_speed_sub, &config_speed_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_speed_sub");
 8002988:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800298c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002990:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002994:	2300      	movs	r3, #0
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <microros_task+0x3c8>)
 800299a:	f00c fb85 	bl	800f0a8 <rclc_executor_add_subscription>
 800299e:	4603      	mov	r3, r0
 80029a0:	4935      	ldr	r1, [pc, #212]	; (8002a78 <microros_task+0x3dc>)
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fe62 	bl	800266c <CHECKMRRET>

	for(;;)
	{
		if (!uxQueueMessagesWaiting(qhMR_sub)) //If no message in 'output' queue
 80029a8:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <microros_task+0x3e0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f009 fda3 	bl	800c4f8 <uxQueueMessagesWaiting>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d108      	bne.n	80029ca <microros_task+0x32e>
			xQueueSend(qhMR_sub, ( void * ) &SubToMsg, portMAX_DELAY); //Send queue message
 80029b8:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <microros_task+0x3e0>)
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80029c0:	2300      	movs	r3, #0
 80029c2:	f04f 32ff 	mov.w	r2, #4294967295
 80029c6:	f009 fa11 	bl	800bdec <xQueueGenericSend>
		rclc_executor_spin_some(&executor, 1*1000*1000); //Execute executor
 80029ca:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80029ce:	4a2c      	ldr	r2, [pc, #176]	; (8002a80 <microros_task+0x3e4>)
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	4608      	mov	r0, r1
 80029d6:	f00c fd1b 	bl	800f410 <rclc_executor_spin_some>

		//Put the receive data into the queue message structure
		SubToMsg.dir = telecommande_dir_msg.data;
 80029da:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80029de:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80029e8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029ec:	601a      	str	r2, [r3, #0]
		SubToMsg.x = camera_x_msg.data;
 80029ee:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80029f2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80029fc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	e03f      	b.n	8002a84 <microros_task+0x3e8>
 8002a04:	08001b89 	.word	0x08001b89
 8002a08:	08001b21 	.word	0x08001b21
 8002a0c:	08001b01 	.word	0x08001b01
 8002a10:	08001ad5 	.word	0x08001ad5
 8002a14:	200049d8 	.word	0x200049d8
 8002a18:	080035fd 	.word	0x080035fd
 8002a1c:	08003641 	.word	0x08003641
 8002a20:	08003679 	.word	0x08003679
 8002a24:	080036e5 	.word	0x080036e5
 8002a28:	0801b364 	.word	0x0801b364
 8002a2c:	0801b38c 	.word	0x0801b38c
 8002a30:	0801b3a4 	.word	0x0801b3a4
 8002a34:	0801b3a8 	.word	0x0801b3a8
 8002a38:	0801b3b4 	.word	0x0801b3b4
 8002a3c:	0801b520 	.word	0x0801b520
 8002a40:	0801b3c8 	.word	0x0801b3c8
 8002a44:	0801b3d4 	.word	0x0801b3d4
 8002a48:	0801b3e0 	.word	0x0801b3e0
 8002a4c:	0801b3ec 	.word	0x0801b3ec
 8002a50:	0801b3f8 	.word	0x0801b3f8
 8002a54:	0801b404 	.word	0x0801b404
 8002a58:	0801b410 	.word	0x0801b410
 8002a5c:	0801b418 	.word	0x0801b418
 8002a60:	0801b420 	.word	0x0801b420
 8002a64:	08002683 	.word	0x08002683
 8002a68:	0801b438 	.word	0x0801b438
 8002a6c:	0801b450 	.word	0x0801b450
 8002a70:	0801b468 	.word	0x0801b468
 8002a74:	0801b488 	.word	0x0801b488
 8002a78:	0801b4a4 	.word	0x0801b4a4
 8002a7c:	20004bf4 	.word	0x20004bf4
 8002a80:	000f4240 	.word	0x000f4240
		SubToMsg.y = camera_y_msg.data;
 8002a84:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002a88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002a92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a96:	609a      	str	r2, [r3, #8]
		SubToMsg.mode = config_mode_msg.data;
 8002a98:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002a9c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002aa6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002aaa:	60da      	str	r2, [r3, #12]
		SubToMsg.speed = config_speed_msg.data;
 8002aac:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ab0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002aba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002abe:	611a      	str	r2, [r3, #16]

		if (uxQueueMessagesWaiting(qhMR_pub)) //If no message in 'input' queue
 8002ac0:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <microros_task+0x4dc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f009 fd17 	bl	800c4f8 <uxQueueMessagesWaiting>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d04e      	beq.n	8002b6e <microros_task+0x4d2>
		{
			xQueueReceive(qhMR_pub, &MsgToPub, portMAX_DELAY); //Receive data
 8002ad0:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <microros_task+0x4dc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8002adc:	4618      	mov	r0, r3
 8002ade:	f009 fb1f 	bl	800c120 <xQueueReceive>
			capteur_dir_msg.data = (int)MsgToPub.dir;
 8002ae2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002af2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002af6:	601a      	str	r2, [r3, #0]
			etat_mode_msg.data = MsgToPub.mode;
 8002af8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b0a:	601a      	str	r2, [r3, #0]
			etat_speed_msg.data = MsgToPub.speed;
 8002b0c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b1a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002b1e:	601a      	str	r2, [r3, #0]

			//Publish data
			CHECKMRRET(rcl_publish(&capteur_dir_pub, &capteur_dir_msg, NULL), "erreur publish capteur_dir_pub");
 8002b20:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002b24:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f00b ffb6 	bl	800ea9c <rcl_publish>
 8002b30:	4603      	mov	r3, r0
 8002b32:	4912      	ldr	r1, [pc, #72]	; (8002b7c <microros_task+0x4e0>)
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fd99 	bl	800266c <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_mode_pub, &etat_mode_msg, NULL), "erreur publish etat_mode_pub");
 8002b3a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002b3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b42:	2200      	movs	r2, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f00b ffa9 	bl	800ea9c <rcl_publish>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <microros_task+0x4e4>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fd8c 	bl	800266c <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_speed_pub, &etat_speed_msg, NULL), "erreur publish etat_speed_pub");
 8002b54:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002b58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f00b ff9c 	bl	800ea9c <rcl_publish>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4907      	ldr	r1, [pc, #28]	; (8002b84 <microros_task+0x4e8>)
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fd7f 	bl	800266c <CHECKMRRET>

			#if DEBUG_PRINTF
			printf("\r\nReceive from decision :\r\nDirection : %d\r\nMode : %d\r\nSpeed : %d\r\n", capteur_dir_msg.data, etat_mode_msg.data, etat_speed_msg.data);
			#endif //DEBUG_PRINTF
		}
		vTaskDelay(SAMPLING_PERIOD_ms);
 8002b6e:	2005      	movs	r0, #5
 8002b70:	f00a f81e 	bl	800cbb0 <vTaskDelay>
		if (!uxQueueMessagesWaiting(qhMR_sub)) //If no message in 'output' queue
 8002b74:	e718      	b.n	80029a8 <microros_task+0x30c>
 8002b76:	bf00      	nop
 8002b78:	20004bf8 	.word	0x20004bf8
 8002b7c:	0801b4c0 	.word	0x0801b4c0
 8002b80:	0801b4e0 	.word	0x0801b4e0
 8002b84:	0801b500 	.word	0x0801b500

08002b88 <task_Motor_Left>:
	}
#endif //SYNCHRO_EX
}

void task_Motor_Left(void *pvParameters)
{
 8002b88:	b5b0      	push	{r4, r5, r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0; //Store the desirate speed
 8002b90:	2300      	movs	r3, #0
 8002b92:	81fb      	strh	r3, [r7, #14]

	float ui = 0.0; //Integral term of the correcteur
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
	float up = 0.0; //Proportionnal term of the correcteur
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	61bb      	str	r3, [r7, #24]
	int err = 0; //Error term of the correcteur
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
	int speed = 0; //Actual speed of motor
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]

	for (;;)
	{
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY); //receive wanted speed
 8002ba8:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <task_Motor_Left+0xf8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f107 010e 	add.w	r1, r7, #14
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f009 fab3 	bl	800c120 <xQueueReceive>

		speed = quadEncoder_GetSpeedL(); //Get actual speed
 8002bba:	f000 ffbb 	bl	8003b34 <quadEncoder_GetSpeedL>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	613b      	str	r3, [r7, #16]
		//Calculate term of correcteur
		err=consigne-speed;
 8002bc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
		up=LKp*(float)err;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd8:	ee17 0a90 	vmov	r0, s15
 8002bdc:	f7fd fccc 	bl	8000578 <__aeabi_f2d>
 8002be0:	a323      	add	r3, pc, #140	; (adr r3, 8002c70 <task_Motor_Left+0xe8>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	f7fd fd1f 	bl	8000628 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7fd ffb3 	bl	8000b5c <__aeabi_d2f>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	61bb      	str	r3, [r7, #24]
		ui=ui+LKp*LKi*(float)err;
 8002bfa:	69f8      	ldr	r0, [r7, #28]
 8002bfc:	f7fd fcbc 	bl	8000578 <__aeabi_f2d>
 8002c00:	4604      	mov	r4, r0
 8002c02:	460d      	mov	r5, r1
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	ee07 3a90 	vmov	s15, r3
 8002c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0e:	ee17 0a90 	vmov	r0, s15
 8002c12:	f7fd fcb1 	bl	8000578 <__aeabi_f2d>
 8002c16:	a318      	add	r3, pc, #96	; (adr r3, 8002c78 <task_Motor_Left+0xf0>)
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	f7fd fd04 	bl	8000628 <__aeabi_dmul>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4620      	mov	r0, r4
 8002c26:	4629      	mov	r1, r5
 8002c28:	f7fd fb48 	bl	80002bc <__adddf3>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7fd ff92 	bl	8000b5c <__aeabi_d2f>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	61fb      	str	r3, [r7, #28]

		motorLeft_SetDuty(100+(int)(up+ui)); //Set duty cycle of the motor
 8002c3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c40:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c4c:	ee17 3a90 	vmov	r3, s15
 8002c50:	3364      	adds	r3, #100	; 0x64
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fe92 	bl	800397c <motorLeft_SetDuty>

		xSemaphoreGive(xSem_Supervision); //Give semaphore to liberate the decision task
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <task_Motor_Left+0xfc>)
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	f009 f8c3 	bl	800bdec <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8002c66:	2005      	movs	r0, #5
 8002c68:	f009 ffa2 	bl	800cbb0 <vTaskDelay>
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY); //receive wanted speed
 8002c6c:	e79c      	b.n	8002ba8 <task_Motor_Left+0x20>
 8002c6e:	bf00      	nop
 8002c70:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c74:	3f50624d 	.word	0x3f50624d
 8002c78:	47ae147b 	.word	0x47ae147b
 8002c7c:	3f547ae1 	.word	0x3f547ae1
 8002c80:	20004bec 	.word	0x20004bec
 8002c84:	20004be8 	.word	0x20004be8

08002c88 <task_Motor_Right>:
	}
}

void task_Motor_Right(void *pvParameters)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0; //Store the desirate speed
 8002c90:	2300      	movs	r3, #0
 8002c92:	81fb      	strh	r3, [r7, #14]

	float ui = 0.0; //Integral term of the correcteur
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
	float up = 0.0; //Proportionnal term of the correcteur
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
	int err = 0; //Error term of the correcteur
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
	int speed = 0; //Actual speed of motor
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]

	for (;;)
	{
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY); //receive wanted speed
 8002ca8:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <task_Motor_Right+0xf8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f107 010e 	add.w	r1, r7, #14
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f009 fa33 	bl	800c120 <xQueueReceive>

		speed = quadEncoder_GetSpeedR(); //Get actual speed
 8002cba:	f000 ff8d 	bl	8003bd8 <quadEncoder_GetSpeedR>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	613b      	str	r3, [r7, #16]
		//Calculate term of correcteur
		err=consigne-speed;
 8002cc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
		up=RKp*(float)err;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cd8:	ee17 0a90 	vmov	r0, s15
 8002cdc:	f7fd fc4c 	bl	8000578 <__aeabi_f2d>
 8002ce0:	a323      	add	r3, pc, #140	; (adr r3, 8002d70 <task_Motor_Right+0xe8>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fc9f 	bl	8000628 <__aeabi_dmul>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f7fd ff33 	bl	8000b5c <__aeabi_d2f>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	61bb      	str	r3, [r7, #24]
		ui=ui+RKp*RKi*(float)err;
 8002cfa:	69f8      	ldr	r0, [r7, #28]
 8002cfc:	f7fd fc3c 	bl	8000578 <__aeabi_f2d>
 8002d00:	4604      	mov	r4, r0
 8002d02:	460d      	mov	r5, r1
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d0e:	ee17 0a90 	vmov	r0, s15
 8002d12:	f7fd fc31 	bl	8000578 <__aeabi_f2d>
 8002d16:	a318      	add	r3, pc, #96	; (adr r3, 8002d78 <task_Motor_Right+0xf0>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f7fd fc84 	bl	8000628 <__aeabi_dmul>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4620      	mov	r0, r4
 8002d26:	4629      	mov	r1, r5
 8002d28:	f7fd fac8 	bl	80002bc <__adddf3>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	f7fd ff12 	bl	8000b5c <__aeabi_d2f>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	61fb      	str	r3, [r7, #28]

		motorRight_SetDuty(100+(int)(up+ui)); //Set duty cycle of the motor
 8002d3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d40:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d4c:	ee17 3a90 	vmov	r3, s15
 8002d50:	3364      	adds	r3, #100	; 0x64
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fe22 	bl	800399c <motorRight_SetDuty>

		xSemaphoreGive(xSem_Supervision);//Give semaphore to liberate the decision task
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <task_Motor_Right+0xfc>)
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2100      	movs	r1, #0
 8002d62:	f009 f843 	bl	800bdec <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8002d66:	2005      	movs	r0, #5
 8002d68:	f009 ff22 	bl	800cbb0 <vTaskDelay>
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY); //receive wanted speed
 8002d6c:	e79c      	b.n	8002ca8 <task_Motor_Right+0x20>
 8002d6e:	bf00      	nop
 8002d70:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d74:	3f50624d 	.word	0x3f50624d
 8002d78:	47ae147b 	.word	0x47ae147b
 8002d7c:	3f547ae1 	.word	0x3f547ae1
 8002d80:	20004bf0 	.word	0x20004bf0
 8002d84:	20004be8 	.word	0x20004be8

08002d88 <task_VL53>:
	}
}

#if VL53
void task_VL53(void *pvParameters)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	static uint16_t dist;
	static const int SEUIL = 20; //Trigger
	int obs = 0; //Bool to indicate if we detect an obstacle or not
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		dist = readRangeSingleMillimeters()/10; //Get the distance from the sensor
 8002d94:	f7fe fb86 	bl	80014a4 <readRangeSingleMillimeters>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <task_VL53+0x6c>)
 8002d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002da2:	08db      	lsrs	r3, r3, #3
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <task_VL53+0x70>)
 8002da8:	801a      	strh	r2, [r3, #0]

		if (dist < SEUIL && dist != 0) //If distance is less than the trigger
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <task_VL53+0x70>)
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <task_VL53+0x74>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	da06      	bge.n	8002dc6 <task_VL53+0x3e>
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <task_VL53+0x70>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <task_VL53+0x3e>
			obs = 1; //We detect an obstacle
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e001      	b.n	8002dca <task_VL53+0x42>
		else
			obs = 0; //We do not detect an obstacle
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]

		if (!uxQueueMessagesWaiting(qhVl53)) //If no data in queue
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <task_VL53+0x78>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f009 fb92 	bl	800c4f8 <uxQueueMessagesWaiting>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <task_VL53+0x64>
			xQueueSend(qhVl53, (void *)&obs, portMAX_DELAY); //Send data
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <task_VL53+0x78>)
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	f107 010c 	add.w	r1, r7, #12
 8002de2:	2300      	movs	r3, #0
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	f009 f800 	bl	800bdec <xQueueGenericSend>

		vTaskDelay(SAMPLING_PERIOD_ms);
 8002dec:	2005      	movs	r0, #5
 8002dee:	f009 fedf 	bl	800cbb0 <vTaskDelay>
		dist = readRangeSingleMillimeters()/10; //Get the distance from the sensor
 8002df2:	e7cf      	b.n	8002d94 <task_VL53+0xc>
 8002df4:	cccccccd 	.word	0xcccccccd
 8002df8:	20004c04 	.word	0x20004c04
 8002dfc:	0801b768 	.word	0x0801b768
 8002e00:	20004c00 	.word	0x20004c00

08002e04 <task_Grove_LCD>:
#endif //VL53


#if LCD
void task_Grove_LCD(void *pvParameters)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
#elif SYNCHRO_EX == EXFINAL
	AMessage pxRxedMessage;

	for(;;)
	{
		if (uxQueueMessagesWaiting(qhLCD)) //If data in the queue
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <task_Grove_LCD+0x70>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f009 fb71 	bl	800c4f8 <uxQueueMessagesWaiting>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d026      	beq.n	8002e6a <task_Grove_LCD+0x66>
		{
			xQueueReceive(qhLCD, &pxRxedMessage, portMAX_DELAY); //Receive data
 8002e1c:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <task_Grove_LCD+0x70>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f107 0108 	add.w	r1, r7, #8
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f009 f979 	bl	800c120 <xQueueReceive>
			int mode = pxRxedMessage.data;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	617b      	str	r3, [r7, #20]
			char direction=pxRxedMessage.command;
 8002e32:	7a3b      	ldrb	r3, [r7, #8]
 8002e34:	74fb      	strb	r3, [r7, #19]
			groveLCD_setCursor(0,0);
 8002e36:	2100      	movs	r1, #0
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7ff f959 	bl	80020f0 <groveLCD_setCursor>
			//Write on screen information about mode
			if (mode == MODE_OBS)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <task_Grove_LCD+0x4c>
				groveLCD_term_printf("M:Obstacle  D:%c", direction);
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	4619      	mov	r1, r3
 8002e48:	480b      	ldr	r0, [pc, #44]	; (8002e78 <task_Grove_LCD+0x74>)
 8002e4a:	f7ff fa21 	bl	8002290 <groveLCD_term_printf>
 8002e4e:	e00c      	b.n	8002e6a <task_Grove_LCD+0x66>
			else if (mode == MODE_ZIG)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d103      	bne.n	8002e5e <task_Grove_LCD+0x5a>
				groveLCD_term_printf("M:Manuel        ");
 8002e56:	4809      	ldr	r0, [pc, #36]	; (8002e7c <task_Grove_LCD+0x78>)
 8002e58:	f7ff fa1a 	bl	8002290 <groveLCD_term_printf>
 8002e5c:	e005      	b.n	8002e6a <task_Grove_LCD+0x66>
			else if (mode == MODE_CAM)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d102      	bne.n	8002e6a <task_Grove_LCD+0x66>
				groveLCD_term_printf("M:Camera        ");
 8002e64:	4806      	ldr	r0, [pc, #24]	; (8002e80 <task_Grove_LCD+0x7c>)
 8002e66:	f7ff fa13 	bl	8002290 <groveLCD_term_printf>
		}

		vTaskDelay(SAMPLING_PERIOD_ms);
 8002e6a:	2005      	movs	r0, #5
 8002e6c:	f009 fea0 	bl	800cbb0 <vTaskDelay>
		if (uxQueueMessagesWaiting(qhLCD)) //If data in the queue
 8002e70:	e7cc      	b.n	8002e0c <task_Grove_LCD+0x8>
 8002e72:	bf00      	nop
 8002e74:	20004bfc 	.word	0x20004bfc
 8002e78:	0801b534 	.word	0x0801b534
 8002e7c:	0801b548 	.word	0x0801b548
 8002e80:	0801b55c 	.word	0x0801b55c

08002e84 <task_Supervision>:
#endif //SYNCHRO_EX
}
#endif //LCD

void task_Supervision(void *pvParameters)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b090      	sub	sp, #64	; 0x40
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	int16_t speedLeft; //Motor left speed
	int16_t speedRight; //Motor rigth speed

	int table[2]; //VL53L0X sensors values
	#if VL53
	int vl53 = 0; //VL530X detect an obstacle or not
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
#endif //MICROROS

	for (;;)
	{
		#if MICROROS
		if (uxQueueMessagesWaiting(qhMR_sub)) //If data  are in the the queue
 8002e90:	4b9a      	ldr	r3, [pc, #616]	; (80030fc <task_Supervision+0x278>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f009 fb2f 	bl	800c4f8 <uxQueueMessagesWaiting>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d029      	beq.n	8002ef4 <task_Supervision+0x70>
		{
			xQueueReceive(qhMR_sub, &SubToMsg, portMAX_DELAY); //Receive data
 8002ea0:	4b96      	ldr	r3, [pc, #600]	; (80030fc <task_Supervision+0x278>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f107 0114 	add.w	r1, r7, #20
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	4618      	mov	r0, r3
 8002eae:	f009 f937 	bl	800c120 <xQueueReceive>
			//Set mode, speed and direction if the data is correct
			if (SubToMsg.mode >= 0 && SubToMsg.mode < LAST_MODE)
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	db05      	blt.n	8002ec4 <task_Supervision+0x40>
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	dc02      	bgt.n	8002ec4 <task_Supervision+0x40>
				mode = SubToMsg.mode;
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	4a8f      	ldr	r2, [pc, #572]	; (8003100 <task_Supervision+0x27c>)
 8002ec2:	6013      	str	r3, [r2, #0]
			if (SubToMsg.dir >= 0 && SubToMsg.dir < LAST_DIR)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db05      	blt.n	8002ed6 <task_Supervision+0x52>
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	dc02      	bgt.n	8002ed6 <task_Supervision+0x52>
				direction = SubToMsg.dir;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4a8c      	ldr	r2, [pc, #560]	; (8003104 <task_Supervision+0x280>)
 8002ed4:	6013      	str	r3, [r2, #0]
			if (SubToMsg.speed > 0 && SubToMsg.speed < LAST_SPEED)
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	dd05      	ble.n	8002ee8 <task_Supervision+0x64>
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	2b63      	cmp	r3, #99	; 0x63
 8002ee0:	dc02      	bgt.n	8002ee8 <task_Supervision+0x64>
				speed = SubToMsg.speed;
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	4a88      	ldr	r2, [pc, #544]	; (8003108 <task_Supervision+0x284>)
 8002ee6:	6013      	str	r3, [r2, #0]
			//Set x and y position
			x = SubToMsg.x;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	4a88      	ldr	r2, [pc, #544]	; (800310c <task_Supervision+0x288>)
 8002eec:	6013      	str	r3, [r2, #0]
			y = SubToMsg.y;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4a87      	ldr	r2, [pc, #540]	; (8003110 <task_Supervision+0x28c>)
 8002ef2:	6013      	str	r3, [r2, #0]
			printf("%cc%c[2J%c[0;0HVariable to make decision : \n\rDirection : %d\r\nMode: %d\r\nSpeed : %d\r\nX: %d\r\nY : %d\r\n", 0x1b, 0x1b, 0x1b, direction, mode, speed, x, y);
			#endif //DEBUG_PRINTF
		}
		#endif //MICROROS

		if (mode == MODE_ZIG) //Mode manual
 8002ef4:	4b82      	ldr	r3, [pc, #520]	; (8003100 <task_Supervision+0x27c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	f040 80e3 	bne.w	80030c4 <task_Supervision+0x240>
		{
			dir = 'N'; //No direction information
 8002efe:	4b85      	ldr	r3, [pc, #532]	; (8003114 <task_Supervision+0x290>)
 8002f00:	224e      	movs	r2, #78	; 0x4e
 8002f02:	701a      	strb	r2, [r3, #0]
			obs = 0; //No obstacle
 8002f04:	4b84      	ldr	r3, [pc, #528]	; (8003118 <task_Supervision+0x294>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
			switch(direction) //Set the motor speed depending of the direction variable
 8002f0a:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <task_Supervision+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	f200 80d3 	bhi.w	80030ba <task_Supervision+0x236>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <task_Supervision+0x98>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f4b 	.word	0x08002f4b
 8002f20:	08002fd5 	.word	0x08002fd5
 8002f24:	08002f79 	.word	0x08002f79
 8002f28:	08002fa7 	.word	0x08002fa7
 8002f2c:	08002f41 	.word	0x08002f41
 8002f30:	08003003 	.word	0x08003003
 8002f34:	0800302f 	.word	0x0800302f
 8002f38:	0800305b 	.word	0x0800305b
 8002f3c:	0800308b 	.word	0x0800308b
			{
				case STOP:
					speedLeft = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002f48:	e19f      	b.n	800328a <task_Supervision+0x406>
				case AVANT:
					speedLeft = VITESSE_KART+(8*(speed-50));
 8002f4a:	4b6f      	ldr	r3, [pc, #444]	; (8003108 <task_Supervision+0x284>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3b32      	subs	r3, #50	; 0x32
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = VITESSE_KART+(8*(speed-50));
 8002f60:	4b69      	ldr	r3, [pc, #420]	; (8003108 <task_Supervision+0x284>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3b32      	subs	r3, #50	; 0x32
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	b21b      	sxth	r3, r3
 8002f74:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002f76:	e188      	b.n	800328a <task_Supervision+0x406>
				case RECULE:
					speedLeft = -(VITESSE_KART+(8*(speed-50)));
 8002f78:	4b63      	ldr	r3, [pc, #396]	; (8003108 <task_Supervision+0x284>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3b32      	subs	r3, #50	; 0x32
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	4b65      	ldr	r3, [pc, #404]	; (800311c <task_Supervision+0x298>)
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -(VITESSE_KART+(8*(speed-50)));
 8002f8e:	4b5e      	ldr	r3, [pc, #376]	; (8003108 <task_Supervision+0x284>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3b32      	subs	r3, #50	; 0x32
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	4b60      	ldr	r3, [pc, #384]	; (800311c <task_Supervision+0x298>)
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002fa4:	e171      	b.n	800328a <task_Supervision+0x406>
				case DROITE:
					speedLeft = VITESSE_KART+(8*(speed-50));
 8002fa6:	4b58      	ldr	r3, [pc, #352]	; (8003108 <task_Supervision+0x284>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3b32      	subs	r3, #50	; 0x32
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	b21b      	sxth	r3, r3
 8002fba:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -(VITESSE_KART+(8*(speed-50)));
 8002fbc:	4b52      	ldr	r3, [pc, #328]	; (8003108 <task_Supervision+0x284>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3b32      	subs	r3, #50	; 0x32
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	4b54      	ldr	r3, [pc, #336]	; (800311c <task_Supervision+0x298>)
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	b21b      	sxth	r3, r3
 8002fd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002fd2:	e15a      	b.n	800328a <task_Supervision+0x406>
				case GAUCHE:
					speedLeft = -(VITESSE_KART+(8*(speed-50)));
 8002fd4:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <task_Supervision+0x284>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3b32      	subs	r3, #50	; 0x32
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	4b4e      	ldr	r3, [pc, #312]	; (800311c <task_Supervision+0x298>)
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	b21b      	sxth	r3, r3
 8002fe8:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = VITESSE_KART+(8*(speed-50));
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <task_Supervision+0x284>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3b32      	subs	r3, #50	; 0x32
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8003000:	e143      	b.n	800328a <task_Supervision+0x406>
				case AVANT_GAUCHE:
					speedLeft = (VITESSE_KART/2)+(8*(speed-50));
 8003002:	4b41      	ldr	r3, [pc, #260]	; (8003108 <task_Supervision+0x284>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3b32      	subs	r3, #50	; 0x32
 8003008:	b29b      	uxth	r3, r3
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	b29b      	uxth	r3, r3
 800300e:	33fa      	adds	r3, #250	; 0xfa
 8003010:	b29b      	uxth	r3, r3
 8003012:	b21b      	sxth	r3, r3
 8003014:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = VITESSE_KART+(8*(speed-50));
 8003016:	4b3c      	ldr	r3, [pc, #240]	; (8003108 <task_Supervision+0x284>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3b32      	subs	r3, #50	; 0x32
 800301c:	b29b      	uxth	r3, r3
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	b29b      	uxth	r3, r3
 8003022:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003026:	b29b      	uxth	r3, r3
 8003028:	b21b      	sxth	r3, r3
 800302a:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 800302c:	e12d      	b.n	800328a <task_Supervision+0x406>
				case AVANT_DROITE:
					speedLeft = VITESSE_KART+(8*(speed-50));
 800302e:	4b36      	ldr	r3, [pc, #216]	; (8003108 <task_Supervision+0x284>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3b32      	subs	r3, #50	; 0x32
 8003034:	b29b      	uxth	r3, r3
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	b29b      	uxth	r3, r3
 800303a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800303e:	b29b      	uxth	r3, r3
 8003040:	b21b      	sxth	r3, r3
 8003042:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = (VITESSE_KART/2)+(8*(speed-50));
 8003044:	4b30      	ldr	r3, [pc, #192]	; (8003108 <task_Supervision+0x284>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3b32      	subs	r3, #50	; 0x32
 800304a:	b29b      	uxth	r3, r3
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	b29b      	uxth	r3, r3
 8003050:	33fa      	adds	r3, #250	; 0xfa
 8003052:	b29b      	uxth	r3, r3
 8003054:	b21b      	sxth	r3, r3
 8003056:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8003058:	e117      	b.n	800328a <task_Supervision+0x406>
				case RECULE_GAUCHE:
					speedLeft = -(VITESSE_KART+(8*(speed-50)));
 800305a:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <task_Supervision+0x284>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3b32      	subs	r3, #50	; 0x32
 8003060:	b29b      	uxth	r3, r3
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	b29a      	uxth	r2, r3
 8003066:	4b2d      	ldr	r3, [pc, #180]	; (800311c <task_Supervision+0x298>)
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	b29b      	uxth	r3, r3
 800306c:	b21b      	sxth	r3, r3
 800306e:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -((VITESSE_KART/2)+(8*(speed-50)));
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <task_Supervision+0x284>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3b32      	subs	r3, #50	; 0x32
 8003076:	b29b      	uxth	r3, r3
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	b29a      	uxth	r2, r3
 800307c:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	b21b      	sxth	r3, r3
 8003086:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8003088:	e0ff      	b.n	800328a <task_Supervision+0x406>
				case RECULE_DROITE:
					speedLeft = -((VITESSE_KART/2)+(8*(speed-50)));
 800308a:	4b1f      	ldr	r3, [pc, #124]	; (8003108 <task_Supervision+0x284>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3b32      	subs	r3, #50	; 0x32
 8003090:	b29b      	uxth	r3, r3
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	b29a      	uxth	r2, r3
 8003096:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	b29b      	uxth	r3, r3
 800309e:	b21b      	sxth	r3, r3
 80030a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -(VITESSE_KART+(8*(speed-50)));
 80030a2:	4b19      	ldr	r3, [pc, #100]	; (8003108 <task_Supervision+0x284>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3b32      	subs	r3, #50	; 0x32
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b1b      	ldr	r3, [pc, #108]	; (800311c <task_Supervision+0x298>)
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 80030b8:	e0e7      	b.n	800328a <task_Supervision+0x406>
				default:
					speedLeft = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 80030c2:	e0e2      	b.n	800328a <task_Supervision+0x406>
			}
		}
		else if (mode == MODE_OBS) //Mode obstacle
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <task_Supervision+0x27c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f040 80a7 	bne.w	800321c <task_Supervision+0x398>
		{
			//Get sensors informations
			captDistIR_Get(table);
 80030ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fa64 	bl	80015a0 <captDistIR_Get>
			#if VL53
			if (uxQueueMessagesWaiting(qhVl53))
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <task_Supervision+0x29c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f009 fa0b 	bl	800c4f8 <uxQueueMessagesWaiting>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01d      	beq.n	8003124 <task_Supervision+0x2a0>
				xQueueReceive(qhVl53, &vl53, portMAX_DELAY);
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <task_Supervision+0x29c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80030f0:	f04f 32ff 	mov.w	r2, #4294967295
 80030f4:	4618      	mov	r0, r3
 80030f6:	f009 f813 	bl	800c120 <xQueueReceive>
 80030fa:	e015      	b.n	8003128 <task_Supervision+0x2a4>
 80030fc:	20004bf4 	.word	0x20004bf4
 8003100:	20000004 	.word	0x20000004
 8003104:	20000008 	.word	0x20000008
 8003108:	2000000c 	.word	0x2000000c
 800310c:	20004c08 	.word	0x20004c08
 8003110:	20004c0c 	.word	0x20004c0c
 8003114:	20000010 	.word	0x20000010
 8003118:	20004c10 	.word	0x20004c10
 800311c:	fffffe0c 	.word	0xfffffe0c
 8003120:	20004c00 	.word	0x20004c00
			else
				vl53 = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	633b      	str	r3, [r7, #48]	; 0x30

			if (vl53 == 1) //if an obstacle is detected on the back we stop
 8003128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312a:	2b01      	cmp	r3, #1
 800312c:	d111      	bne.n	8003152 <task_Supervision+0x2ce>
			{
				if (dir != 'S')
 800312e:	4b82      	ldr	r3, [pc, #520]	; (8003338 <task_Supervision+0x4b4>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b53      	cmp	r3, #83	; 0x53
 8003134:	d002      	beq.n	800313c <task_Supervision+0x2b8>
					printf("Detection d'un obstacle à l'arrièrre");
 8003136:	4881      	ldr	r0, [pc, #516]	; (800333c <task_Supervision+0x4b8>)
 8003138:	f016 ff76 	bl	801a028 <iprintf>
				speedLeft = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	87bb      	strh	r3, [r7, #60]	; 0x3c
				dir = 'S';
 8003144:	4b7c      	ldr	r3, [pc, #496]	; (8003338 <task_Supervision+0x4b4>)
 8003146:	2253      	movs	r2, #83	; 0x53
 8003148:	701a      	strb	r2, [r3, #0]
				obs = 1;
 800314a:	4b7d      	ldr	r3, [pc, #500]	; (8003340 <task_Supervision+0x4bc>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e09b      	b.n	800328a <task_Supervision+0x406>
			}
			else
			#endif //VL53
			if (table[0] > SEUIL_DIST_SENSOR || table[1] > SEUIL_DIST_SENSOR) //We have an obstacle in front of the robot
 8003152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003154:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003158:	dc03      	bgt.n	8003162 <task_Supervision+0x2de>
 800315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003160:	dd4f      	ble.n	8003202 <task_Supervision+0x37e>
			{
				if (obs > 10) //If we detect more than 10 different obstacle we turn on the left until they are no more obstacle
 8003162:	4b77      	ldr	r3, [pc, #476]	; (8003340 <task_Supervision+0x4bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b0a      	cmp	r3, #10
 8003168:	dd09      	ble.n	800317e <task_Supervision+0x2fa>
				{
					speedLeft = VITESSE_OBS/2;
 800316a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800316e:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -VITESSE_OBS/2;
 8003170:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8003174:	87bb      	strh	r3, [r7, #60]	; 0x3c
					dir = 'G';
 8003176:	4b70      	ldr	r3, [pc, #448]	; (8003338 <task_Supervision+0x4b4>)
 8003178:	2247      	movs	r2, #71	; 0x47
 800317a:	701a      	strb	r2, [r3, #0]
				if (obs > 10) //If we detect more than 10 different obstacle we turn on the left until they are no more obstacle
 800317c:	e084      	b.n	8003288 <task_Supervision+0x404>
				}
				else
				{
					speedLeft = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	87bb      	strh	r3, [r7, #60]	; 0x3c

					if (table[0] > table[1] && table[0] > SEUIL_DIST_SENSOR) //We have an obstacle on our right
 8003186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	429a      	cmp	r2, r3
 800318c:	dd18      	ble.n	80031c0 <task_Supervision+0x33c>
 800318e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003190:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003194:	dd14      	ble.n	80031c0 <task_Supervision+0x33c>
					{
						dir = 'G';
 8003196:	4b68      	ldr	r3, [pc, #416]	; (8003338 <task_Supervision+0x4b4>)
 8003198:	2247      	movs	r2, #71	; 0x47
 800319a:	701a      	strb	r2, [r3, #0]
						speedLeft = -VITESSE_OBS/2;
 800319c:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80031a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
						speedRight = VITESSE_OBS/2;
 80031a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
						if (obs%2 == 0)
 80031a8:	4b65      	ldr	r3, [pc, #404]	; (8003340 <task_Supervision+0x4bc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d125      	bne.n	8003200 <task_Supervision+0x37c>
							obs++;
 80031b4:	4b62      	ldr	r3, [pc, #392]	; (8003340 <task_Supervision+0x4bc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3301      	adds	r3, #1
 80031ba:	4a61      	ldr	r2, [pc, #388]	; (8003340 <task_Supervision+0x4bc>)
 80031bc:	6013      	str	r3, [r2, #0]
						if (obs%2 == 0)
 80031be:	e01f      	b.n	8003200 <task_Supervision+0x37c>
					}
					else if (table[0] < table[1] && table[1] > SEUIL_DIST_SENSOR) //We have an obstacle on left right
 80031c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	429a      	cmp	r2, r3
 80031c6:	da5f      	bge.n	8003288 <task_Supervision+0x404>
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80031ce:	dd5b      	ble.n	8003288 <task_Supervision+0x404>
					{
						dir = 'D';
 80031d0:	4b59      	ldr	r3, [pc, #356]	; (8003338 <task_Supervision+0x4b4>)
 80031d2:	2244      	movs	r2, #68	; 0x44
 80031d4:	701a      	strb	r2, [r3, #0]
						speedLeft = VITESSE_OBS/2;
 80031d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031da:	87fb      	strh	r3, [r7, #62]	; 0x3e
						speedRight = -VITESSE_OBS/2;
 80031dc:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80031e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
						if (obs%2 == 1)
 80031e2:	4b57      	ldr	r3, [pc, #348]	; (8003340 <task_Supervision+0x4bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	bfb8      	it	lt
 80031ee:	425b      	neglt	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d149      	bne.n	8003288 <task_Supervision+0x404>
							obs++;
 80031f4:	4b52      	ldr	r3, [pc, #328]	; (8003340 <task_Supervision+0x4bc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	4a51      	ldr	r2, [pc, #324]	; (8003340 <task_Supervision+0x4bc>)
 80031fc:	6013      	str	r3, [r2, #0]
				if (obs > 10) //If we detect more than 10 different obstacle we turn on the left until they are no more obstacle
 80031fe:	e043      	b.n	8003288 <task_Supervision+0x404>
 8003200:	e042      	b.n	8003288 <task_Supervision+0x404>
					}
				}
			}
			else //No obstacle
			{
				speedLeft = VITESSE_OBS;
 8003202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003206:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = VITESSE_OBS;
 8003208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800320c:	87bb      	strh	r3, [r7, #60]	; 0x3c
				dir = 'F';
 800320e:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <task_Supervision+0x4b4>)
 8003210:	2246      	movs	r2, #70	; 0x46
 8003212:	701a      	strb	r2, [r3, #0]
				obs = 0;
 8003214:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <task_Supervision+0x4bc>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e036      	b.n	800328a <task_Supervision+0x406>
			}
		}
		else if (mode == MODE_CAM) //Mode camera
 800321c:	4b49      	ldr	r3, [pc, #292]	; (8003344 <task_Supervision+0x4c0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d132      	bne.n	800328a <task_Supervision+0x406>
		{
			dir = 'N';
 8003224:	4b44      	ldr	r3, [pc, #272]	; (8003338 <task_Supervision+0x4b4>)
 8003226:	224e      	movs	r2, #78	; 0x4e
 8003228:	701a      	strb	r2, [r3, #0]
			obs = 0;
 800322a:	4b45      	ldr	r3, [pc, #276]	; (8003340 <task_Supervision+0x4bc>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

			if(x < 0 || y < 0) //No object
 8003230:	4b45      	ldr	r3, [pc, #276]	; (8003348 <task_Supervision+0x4c4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	db03      	blt.n	8003240 <task_Supervision+0x3bc>
 8003238:	4b44      	ldr	r3, [pc, #272]	; (800334c <task_Supervision+0x4c8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	da04      	bge.n	800324a <task_Supervision+0x3c6>
			{
				speedLeft = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003248:	e01f      	b.n	800328a <task_Supervision+0x406>
			}
			else //Try to keep the object on the center
			{
				speedLeft = VITESSE_CAM - ((CAMERA_X_MAX/2 - x))/3; // (int) (((float) ((x-CAMERA_X_MAX/2)/CAMERA_X_MAX))*500);
 800324a:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <task_Supervision+0x4c4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003252:	4a3f      	ldr	r2, [pc, #252]	; (8003350 <task_Supervision+0x4cc>)
 8003254:	fb82 1203 	smull	r1, r2, r2, r3
 8003258:	17db      	asrs	r3, r3, #31
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	b29b      	uxth	r3, r3
 800325e:	f203 134d 	addw	r3, r3, #333	; 0x14d
 8003262:	b29b      	uxth	r3, r3
 8003264:	b21b      	sxth	r3, r3
 8003266:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = VITESSE_CAM + ((CAMERA_X_MAX/2 - x))/3; // (int) (((float) (x/CAMERA_X_MAX))*500);
 8003268:	4b37      	ldr	r3, [pc, #220]	; (8003348 <task_Supervision+0x4c4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003270:	4a37      	ldr	r2, [pc, #220]	; (8003350 <task_Supervision+0x4cc>)
 8003272:	fb82 1203 	smull	r1, r2, r2, r3
 8003276:	17db      	asrs	r3, r3, #31
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	b29b      	uxth	r3, r3
 800327c:	f203 134d 	addw	r3, r3, #333	; 0x14d
 8003280:	b29b      	uxth	r3, r3
 8003282:	b21b      	sxth	r3, r3
 8003284:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003286:	e000      	b.n	800328a <task_Supervision+0x406>
				if (obs > 10) //If we detect more than 10 different obstacle we turn on the left until they are no more obstacle
 8003288:	bf00      	nop

		#if DEBUG_MOTOR
		printf("Motor L : %d || R : %d\r\n", speedLeft, speedRight);
		#endif

		xQueueSend( q_mot_L, ( void * ) &speedLeft,  portMAX_DELAY ); //Send motor left speed
 800328a:	4b32      	ldr	r3, [pc, #200]	; (8003354 <task_Supervision+0x4d0>)
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	f107 013e 	add.w	r1, r7, #62	; 0x3e
 8003292:	2300      	movs	r3, #0
 8003294:	f04f 32ff 	mov.w	r2, #4294967295
 8003298:	f008 fda8 	bl	800bdec <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 800329c:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <task_Supervision+0x4d4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295
 80032a4:	4618      	mov	r0, r3
 80032a6:	f009 f81b 	bl	800c2e0 <xQueueSemaphoreTake>

		xQueueSend( q_mot_R, ( void * ) &speedRight,  portMAX_DELAY ); //Send motor right speed
 80032aa:	4b2c      	ldr	r3, [pc, #176]	; (800335c <task_Supervision+0x4d8>)
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80032b2:	2300      	movs	r3, #0
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295
 80032b8:	f008 fd98 	bl	800bdec <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 80032bc:	4b26      	ldr	r3, [pc, #152]	; (8003358 <task_Supervision+0x4d4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f04f 31ff 	mov.w	r1, #4294967295
 80032c4:	4618      	mov	r0, r3
 80032c6:	f009 f80b 	bl	800c2e0 <xQueueSemaphoreTake>

	#if MICROROS
		MsgToPub.dir = dir;
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <task_Supervision+0x4b4>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	723b      	strb	r3, [r7, #8]
		MsgToPub.mode = mode;
 80032d0:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <task_Supervision+0x4c0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
		MsgToPub.speed = speed;
 80032d6:	4b22      	ldr	r3, [pc, #136]	; (8003360 <task_Supervision+0x4dc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	613b      	str	r3, [r7, #16]
		if (!uxQueueMessagesWaiting(qhMR_pub)) //If no data in queue
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <task_Supervision+0x4e0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f009 f909 	bl	800c4f8 <uxQueueMessagesWaiting>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d108      	bne.n	80032fe <task_Supervision+0x47a>
			xQueueSend(qhMR_pub, ( void * ) &MsgToPub, portMAX_DELAY); //Send data
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <task_Supervision+0x4e0>)
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	f107 0108 	add.w	r1, r7, #8
 80032f4:	2300      	movs	r3, #0
 80032f6:	f04f 32ff 	mov.w	r2, #4294967295
 80032fa:	f008 fd77 	bl	800bdec <xQueueGenericSend>
	#endif //MICROROS

	#if LCD
		if (!uxQueueMessagesWaiting(qhLCD)) //If no data in queue
 80032fe:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <task_Supervision+0x4e4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f009 f8f8 	bl	800c4f8 <uxQueueMessagesWaiting>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10f      	bne.n	800332e <task_Supervision+0x4aa>
		{
			pxMessage.data=mode;
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <task_Supervision+0x4c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
			pxMessage.command=dir;
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <task_Supervision+0x4b4>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			xQueueSend( qhLCD, ( void * ) &pxMessage, portMAX_DELAY); //Send data
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <task_Supervision+0x4e4>)
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003324:	2300      	movs	r3, #0
 8003326:	f04f 32ff 	mov.w	r2, #4294967295
 800332a:	f008 fd5f 	bl	800bdec <xQueueGenericSend>
		}
	#endif //LCD

		vTaskDelay(SAMPLING_PERIOD_ms);
 800332e:	2005      	movs	r0, #5
 8003330:	f009 fc3e 	bl	800cbb0 <vTaskDelay>
		if (uxQueueMessagesWaiting(qhMR_sub)) //If data  are in the the queue
 8003334:	e5ac      	b.n	8002e90 <task_Supervision+0xc>
 8003336:	bf00      	nop
 8003338:	20000010 	.word	0x20000010
 800333c:	0801b570 	.word	0x0801b570
 8003340:	20004c10 	.word	0x20004c10
 8003344:	20000004 	.word	0x20000004
 8003348:	20004c08 	.word	0x20004c08
 800334c:	20004c0c 	.word	0x20004c0c
 8003350:	55555556 	.word	0x55555556
 8003354:	20004bec 	.word	0x20004bec
 8003358:	20004be8 	.word	0x20004be8
 800335c:	20004bf0 	.word	0x20004bf0
 8003360:	2000000c 	.word	0x2000000c
 8003364:	20004bf8 	.word	0x20004bf8
 8003368:	20004bfc 	.word	0x20004bfc

0800336c <main>:
	}
#endif //SYNCHRO_EX
}

int main(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af02      	add	r7, sp, #8
  HAL_Init();
 8003372:	f001 fc89 	bl	8004c88 <HAL_Init>
  SystemClock_Config();
 8003376:	f001 fa17 	bl	80047a8 <SystemClock_Config>
  MX_GPIO_Init();
 800337a:	f7fe fc59 	bl	8001c30 <MX_GPIO_Init>
  MX_DMA_Init();
 800337e:	f7fe fdcf 	bl	8001f20 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003382:	f7fe fda3 	bl	8001ecc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003386:	f7fe fced 	bl	8001d64 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800338a:	f7fe fd75 	bl	8001e78 <MX_USART1_UART_Init>

  RetargetInit(&huart2); //make printf and scanf work with uart2
 800338e:	485a      	ldr	r0, [pc, #360]	; (80034f8 <main+0x18c>)
 8003390:	f000 fcc0 	bl	8003d14 <RetargetInit>
  printf("%cc%c[2J%c[0;0HTitouan//Jeremy//Louanne//Donald\r\n", 0x1b, 0x1b, 0x1b);
 8003394:	231b      	movs	r3, #27
 8003396:	221b      	movs	r2, #27
 8003398:	211b      	movs	r1, #27
 800339a:	4858      	ldr	r0, [pc, #352]	; (80034fc <main+0x190>)
 800339c:	f016 fe44 	bl	801a028 <iprintf>

  motorCommand_Init();
 80033a0:	f000 fa92 	bl	80038c8 <motorCommand_Init>
  quadEncoder_Init();
 80033a4:	f000 fb0a 	bl	80039bc <quadEncoder_Init>
  captDistIR_Init();
 80033a8:	f7fe f8c8 	bl	800153c <captDistIR_Init>

  HAL_Delay(500);
 80033ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033b0:	f001 fcac 	bl	8004d0c <HAL_Delay>

#if VL53
  initVL53L0X();
 80033b4:	f7fd fe70 	bl	8001098 <initVL53L0X>
  HAL_Delay(500);
 80033b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033bc:	f001 fca6 	bl	8004d0c <HAL_Delay>
#endif //VL53

  // Test Ecran LCD
#if LCD
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 80033c0:	2200      	movs	r2, #0
 80033c2:	2102      	movs	r1, #2
 80033c4:	2010      	movs	r0, #16
 80033c6:	f7fe fe01 	bl	8001fcc <groveLCD_begin>
  HAL_Delay(100);
 80033ca:	2064      	movs	r0, #100	; 0x64
 80033cc:	f001 fc9e 	bl	8004d0c <HAL_Delay>
  groveLCD_setCursor(0,0);
 80033d0:	2100      	movs	r1, #0
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7fe fe8c 	bl	80020f0 <groveLCD_setCursor>
  groveLCD_setColor(1);
 80033d8:	2001      	movs	r0, #1
 80033da:	f7fe ff2f 	bl	800223c <groveLCD_setColor>
  groveLCD_term_printf("Titouan//Jeremy//Louanne");
 80033de:	4848      	ldr	r0, [pc, #288]	; (8003500 <main+0x194>)
 80033e0:	f7fe ff56 	bl	8002290 <groveLCD_term_printf>
  HAL_Delay(1000);
 80033e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033e8:	f001 fc90 	bl	8004d0c <HAL_Delay>
#endif //LCD

  osKernelInitialize();
 80033ec:	f008 fa72 	bl	800b8d4 <osKernelInitialize>
	xTaskCreate(test_vl53, ( const portCHAR * ) "test_vl53", 128 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXTEST_MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXFINAL
	#if MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, 24, NULL);
 80033f0:	2300      	movs	r3, #0
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	2318      	movs	r3, #24
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80033fe:	4941      	ldr	r1, [pc, #260]	; (8003504 <main+0x198>)
 8003400:	4841      	ldr	r0, [pc, #260]	; (8003508 <main+0x19c>)
 8003402:	f009 fa7a 	bl	800c8fa <xTaskCreate>
	#endif //MICROROS
    xTaskCreate(task_Supervision, ( const portCHAR * ) "task Supervision", 128 /* stack size */, NULL, 27, NULL);
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	231b      	movs	r3, #27
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2300      	movs	r3, #0
 8003410:	2280      	movs	r2, #128	; 0x80
 8003412:	493e      	ldr	r1, [pc, #248]	; (800350c <main+0x1a0>)
 8003414:	483e      	ldr	r0, [pc, #248]	; (8003510 <main+0x1a4>)
 8003416:	f009 fa70 	bl	800c8fa <xTaskCreate>
	xTaskCreate(task_Motor_Left, ( const portCHAR * ) "task Motor Left", 128 /* stack size */, NULL, 25, NULL);
 800341a:	2300      	movs	r3, #0
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	2319      	movs	r3, #25
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	493b      	ldr	r1, [pc, #236]	; (8003514 <main+0x1a8>)
 8003428:	483b      	ldr	r0, [pc, #236]	; (8003518 <main+0x1ac>)
 800342a:	f009 fa66 	bl	800c8fa <xTaskCreate>
	xTaskCreate(task_Motor_Right, ( const portCHAR * ) "task Motor Right", 128 /* stack size */, NULL, 26, NULL);
 800342e:	2300      	movs	r3, #0
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	231a      	movs	r3, #26
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	2300      	movs	r3, #0
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	4938      	ldr	r1, [pc, #224]	; (800351c <main+0x1b0>)
 800343c:	4838      	ldr	r0, [pc, #224]	; (8003520 <main+0x1b4>)
 800343e:	f009 fa5c 	bl	800c8fa <xTaskCreate>

	#if VL53
	xTaskCreate(task_VL53, ( const portCHAR * ) "task VL53", 128 /* stack size */, NULL, 23, NULL);
 8003442:	2300      	movs	r3, #0
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	2317      	movs	r3, #23
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2300      	movs	r3, #0
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	4935      	ldr	r1, [pc, #212]	; (8003524 <main+0x1b8>)
 8003450:	4835      	ldr	r0, [pc, #212]	; (8003528 <main+0x1bc>)
 8003452:	f009 fa52 	bl	800c8fa <xTaskCreate>
	#endif //VL53

	#if LCD
	xTaskCreate(task_Grove_LCD, ( const portCHAR * ) "task LCD", 128 /* stack size */, NULL, 23, NULL);
 8003456:	2300      	movs	r3, #0
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	2317      	movs	r3, #23
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2300      	movs	r3, #0
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	4932      	ldr	r1, [pc, #200]	; (800352c <main+0x1c0>)
 8003464:	4832      	ldr	r0, [pc, #200]	; (8003530 <main+0x1c4>)
 8003466:	f009 fa48 	bl	800c8fa <xTaskCreate>
	#endif //LCD
#endif //SYNCHRO_EX

	//Create the semaphore
    vSemaphoreCreateBinary(xSem_Supervision);
 800346a:	2203      	movs	r2, #3
 800346c:	2100      	movs	r1, #0
 800346e:	2001      	movs	r0, #1
 8003470:	f008 fc5e 	bl	800bd30 <xQueueGenericCreate>
 8003474:	4603      	mov	r3, r0
 8003476:	4a2f      	ldr	r2, [pc, #188]	; (8003534 <main+0x1c8>)
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <main+0x1c8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <main+0x124>
 8003482:	4b2c      	ldr	r3, [pc, #176]	; (8003534 <main+0x1c8>)
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	2300      	movs	r3, #0
 8003488:	2200      	movs	r2, #0
 800348a:	2100      	movs	r1, #0
 800348c:	f008 fcae 	bl	800bdec <xQueueGenericSend>

    //Init all the queue
    q_mot_L = xQueueCreate(1, sizeof(int16_t));
 8003490:	2200      	movs	r2, #0
 8003492:	2102      	movs	r1, #2
 8003494:	2001      	movs	r0, #1
 8003496:	f008 fc4b 	bl	800bd30 <xQueueGenericCreate>
 800349a:	4603      	mov	r3, r0
 800349c:	4a26      	ldr	r2, [pc, #152]	; (8003538 <main+0x1cc>)
 800349e:	6013      	str	r3, [r2, #0]
    q_mot_R = xQueueCreate(1, sizeof(int16_t));
 80034a0:	2200      	movs	r2, #0
 80034a2:	2102      	movs	r1, #2
 80034a4:	2001      	movs	r0, #1
 80034a6:	f008 fc43 	bl	800bd30 <xQueueGenericCreate>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4a23      	ldr	r2, [pc, #140]	; (800353c <main+0x1d0>)
 80034ae:	6013      	str	r3, [r2, #0]
    qhVl53 = xQueueCreate(1, sizeof(int));
 80034b0:	2200      	movs	r2, #0
 80034b2:	2104      	movs	r1, #4
 80034b4:	2001      	movs	r0, #1
 80034b6:	f008 fc3b 	bl	800bd30 <xQueueGenericCreate>
 80034ba:	4603      	mov	r3, r0
 80034bc:	4a20      	ldr	r2, [pc, #128]	; (8003540 <main+0x1d4>)
 80034be:	6013      	str	r3, [r2, #0]

    qhMR_sub = xQueueCreate(1, sizeof(MicroRosSubMsg));
 80034c0:	2200      	movs	r2, #0
 80034c2:	2114      	movs	r1, #20
 80034c4:	2001      	movs	r0, #1
 80034c6:	f008 fc33 	bl	800bd30 <xQueueGenericCreate>
 80034ca:	4603      	mov	r3, r0
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <main+0x1d8>)
 80034ce:	6013      	str	r3, [r2, #0]
    qhMR_pub = xQueueCreate(1, sizeof(MicroRosPubMsg));
 80034d0:	2200      	movs	r2, #0
 80034d2:	210c      	movs	r1, #12
 80034d4:	2001      	movs	r0, #1
 80034d6:	f008 fc2b 	bl	800bd30 <xQueueGenericCreate>
 80034da:	4603      	mov	r3, r0
 80034dc:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <main+0x1dc>)
 80034de:	6013      	str	r3, [r2, #0]
    qhLCD = xQueueCreate(1, sizeof(AMessage));
 80034e0:	2200      	movs	r2, #0
 80034e2:	2108      	movs	r1, #8
 80034e4:	2001      	movs	r0, #1
 80034e6:	f008 fc23 	bl	800bd30 <xQueueGenericCreate>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4a17      	ldr	r2, [pc, #92]	; (800354c <main+0x1e0>)
 80034ee:	6013      	str	r3, [r2, #0]

    osKernelStart();
 80034f0:	f008 fa14 	bl	800b91c <osKernelStart>
    while(1){}
 80034f4:	e7fe      	b.n	80034f4 <main+0x188>
 80034f6:	bf00      	nop
 80034f8:	20004a1c 	.word	0x20004a1c
 80034fc:	0801b598 	.word	0x0801b598
 8003500:	0801b5cc 	.word	0x0801b5cc
 8003504:	0801b5e8 	.word	0x0801b5e8
 8003508:	0800269d 	.word	0x0800269d
 800350c:	0801b5f8 	.word	0x0801b5f8
 8003510:	08002e85 	.word	0x08002e85
 8003514:	0801b60c 	.word	0x0801b60c
 8003518:	08002b89 	.word	0x08002b89
 800351c:	0801b61c 	.word	0x0801b61c
 8003520:	08002c89 	.word	0x08002c89
 8003524:	0801b630 	.word	0x0801b630
 8003528:	08002d89 	.word	0x08002d89
 800352c:	0801b63c 	.word	0x0801b63c
 8003530:	08002e05 	.word	0x08002e05
 8003534:	20004be8 	.word	0x20004be8
 8003538:	20004bec 	.word	0x20004bec
 800353c:	20004bf0 	.word	0x20004bf0
 8003540:	20004c00 	.word	0x20004c00
 8003544:	20004bf4 	.word	0x20004bf4
 8003548:	20004bf8 	.word	0x20004bf8
 800354c:	20004bfc 	.word	0x20004bfc

08003550 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003562:	f001 fbb3 	bl	8004ccc <HAL_IncTick>
  }
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40000800 	.word	0x40000800

08003574 <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003578:	b672      	cpsid	i
}
 800357a:	bf00      	nop
  __disable_irq();
  while (1)
 800357c:	e7fe      	b.n	800357c <Error_Handler+0x8>
	...

08003580 <createPublisher>:
void createPublisher(rcl_publisher_t* publisher,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
	rcl_ret_t ret = rclc_publisher_init_default(publisher, node, type_support, topic_name);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f00b ffed 	bl	800f574 <rclc_publisher_init_default>
 800359a:	6178      	str	r0, [r7, #20]
	printf("Publisher %s is created with result %d\r\n", topic_name, (int)ret);
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	6839      	ldr	r1, [r7, #0]
 80035a0:	4804      	ldr	r0, [pc, #16]	; (80035b4 <createPublisher+0x34>)
 80035a2:	f016 fd41 	bl	801a028 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
#endif

}
 80035ac:	bf00      	nop
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	0801b6b0 	.word	0x0801b6b0

080035b8 <createSubscriber>:
void createSubscriber(rcl_subscription_t* subscription,
	rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
	*subscription = rcl_get_zero_initialized_subscription();
 80035c6:	f00b fa8d 	bl	800eae4 <rcl_get_zero_initialized_subscription>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]

	rcl_ret_t ret = rclc_subscription_init_default(subscription, node,
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f00c f800 	bl	800f5dc <rclc_subscription_init_default>
 80035dc:	6178      	str	r0, [r7, #20]
		type_support, topic_name);
	printf("Subscription %s is created with result %d\r\n", topic_name, (int)ret);
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	4805      	ldr	r0, [pc, #20]	; (80035f8 <createSubscriber+0x40>)
 80035e4:	f016 fd20 	bl	801a028 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
#endif
}
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	0801b6dc 	.word	0x0801b6dc

080035fc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <microros_allocate+0x3c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	461a      	mov	r2, r3
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <microros_allocate+0x3c>)
 8003614:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <microros_allocate+0x40>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	461a      	mov	r2, r3
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <microros_allocate+0x40>)
 8003624:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fd fffe 	bl	8001628 <pvPortMallocMicroROS>
 800362c:	4603      	mov	r3, r0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20004c14 	.word	0x20004c14
 800363c:	20004c18 	.word	0x20004c18

08003640 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00c      	beq.n	800366a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fe f907 	bl	8001864 <getBlockSize>
 8003656:	4603      	mov	r3, r0
 8003658:	4a06      	ldr	r2, [pc, #24]	; (8003674 <microros_deallocate+0x34>)
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	461a      	mov	r2, r3
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <microros_deallocate+0x34>)
 8003662:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fe f8a3 	bl	80017b0 <vPortFreeMicroROS>
  }
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20004c18 	.word	0x20004c18

08003678 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003684:	4b15      	ldr	r3, [pc, #84]	; (80036dc <microros_reallocate+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4413      	add	r3, r2
 800368e:	461a      	mov	r2, r3
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <microros_reallocate+0x64>)
 8003692:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003694:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <microros_reallocate+0x68>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	461a      	mov	r2, r3
 80036a0:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <microros_reallocate+0x68>)
 80036a2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80036aa:	68b8      	ldr	r0, [r7, #8]
 80036ac:	f7fd ffbc 	bl	8001628 <pvPortMallocMicroROS>
 80036b0:	4603      	mov	r3, r0
 80036b2:	e00e      	b.n	80036d2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f7fe f8d5 	bl	8001864 <getBlockSize>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <microros_reallocate+0x68>)
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <microros_reallocate+0x68>)
 80036c6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7fe f8e8 	bl	80018a0 <pvPortReallocMicroROS>
 80036d0:	4603      	mov	r3, r0
  }
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20004c14 	.word	0x20004c14
 80036e0:	20004c18 	.word	0x20004c18

080036e4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	fb02 f303 	mul.w	r3, r2, r3
 80036f8:	4a0c      	ldr	r2, [pc, #48]	; (800372c <microros_zero_allocate+0x48>)
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	4413      	add	r3, r2
 80036fe:	461a      	mov	r2, r3
 8003700:	4b0a      	ldr	r3, [pc, #40]	; (800372c <microros_zero_allocate+0x48>)
 8003702:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	fb02 f303 	mul.w	r3, r2, r3
 800370c:	4a08      	ldr	r2, [pc, #32]	; (8003730 <microros_zero_allocate+0x4c>)
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	4413      	add	r3, r2
 8003712:	461a      	mov	r2, r3
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <microros_zero_allocate+0x4c>)
 8003716:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7fe f8fa 	bl	8001914 <pvPortCallocMicroROS>
 8003720:	4603      	mov	r3, r0
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20004c14 	.word	0x20004c14
 8003730:	20004c18 	.word	0x20004c18
 8003734:	00000000 	.word	0x00000000

08003738 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800374a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800374e:	a320      	add	r3, pc, #128	; (adr r3, 80037d0 <UTILS_NanosecondsToTimespec+0x98>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f7fd fa52 	bl	8000bfc <__aeabi_ldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003762:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003766:	a31a      	add	r3, pc, #104	; (adr r3, 80037d0 <UTILS_NanosecondsToTimespec+0x98>)
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f7fd fa46 	bl	8000bfc <__aeabi_ldivmod>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	da20      	bge.n	80037be <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4a11      	ldr	r2, [pc, #68]	; (80037c8 <UTILS_NanosecondsToTimespec+0x90>)
 8003782:	fb82 1203 	smull	r1, r2, r2, r3
 8003786:	1712      	asrs	r2, r2, #28
 8003788:	17db      	asrs	r3, r3, #31
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	3301      	adds	r3, #1
 800378e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	6979      	ldr	r1, [r7, #20]
 8003798:	17c8      	asrs	r0, r1, #31
 800379a:	460c      	mov	r4, r1
 800379c:	4605      	mov	r5, r0
 800379e:	ebb2 0804 	subs.w	r8, r2, r4
 80037a2:	eb63 0905 	sbc.w	r9, r3, r5
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4906      	ldr	r1, [pc, #24]	; (80037cc <UTILS_NanosecondsToTimespec+0x94>)
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	441a      	add	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	609a      	str	r2, [r3, #8]
    }
}
 80037be:	bf00      	nop
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037c8:	44b82fa1 	.word	0x44b82fa1
 80037cc:	3b9aca00 	.word	0x3b9aca00
 80037d0:	3b9aca00 	.word	0x3b9aca00
 80037d4:	00000000 	.word	0x00000000

080037d8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80037d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037dc:	b08e      	sub	sp, #56	; 0x38
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6278      	str	r0, [r7, #36]	; 0x24
 80037e2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80037e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037e8:	2300      	movs	r3, #0
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80037fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037fe:	4618      	mov	r0, r3
 8003800:	f009 fd08 	bl	800d214 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	17da      	asrs	r2, r3, #31
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	61fa      	str	r2, [r7, #28]
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	69b9      	ldr	r1, [r7, #24]
 8003816:	000b      	movs	r3, r1
 8003818:	2200      	movs	r2, #0
 800381a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	2200      	movs	r2, #0
 8003822:	461c      	mov	r4, r3
 8003824:	4615      	mov	r5, r2
 8003826:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800382a:	1911      	adds	r1, r2, r4
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	416b      	adcs	r3, r5
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003836:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800383a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	f04f 0400 	mov.w	r4, #0
 8003846:	f04f 0500 	mov.w	r5, #0
 800384a:	015d      	lsls	r5, r3, #5
 800384c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003850:	0154      	lsls	r4, r2, #5
 8003852:	4622      	mov	r2, r4
 8003854:	462b      	mov	r3, r5
 8003856:	ebb2 0800 	subs.w	r8, r2, r0
 800385a:	eb63 0901 	sbc.w	r9, r3, r1
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800386a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800386e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003872:	4690      	mov	r8, r2
 8003874:	4699      	mov	r9, r3
 8003876:	eb18 0a00 	adds.w	sl, r8, r0
 800387a:	eb49 0b01 	adc.w	fp, r9, r1
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800388a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800388e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003892:	ebb2 040a 	subs.w	r4, r2, sl
 8003896:	603c      	str	r4, [r7, #0]
 8003898:	eb63 030b 	sbc.w	r3, r3, fp
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038a2:	4623      	mov	r3, r4
 80038a4:	181b      	adds	r3, r3, r0
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	462b      	mov	r3, r5
 80038aa:	eb41 0303 	adc.w	r3, r1, r3
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	6a3a      	ldr	r2, [r7, #32]
 80038b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038b6:	f7ff ff3f 	bl	8003738 <UTILS_NanosecondsToTimespec>

    return 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	3738      	adds	r7, #56	; 0x38
 80038c0:	46bd      	mov	sp, r7
 80038c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080038c8 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <motorCommand_Init+0x9c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a24      	ldr	r2, [pc, #144]	; (8003968 <motorCommand_Init+0xa0>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	0d9b      	lsrs	r3, r3, #22
 80038de:	3b01      	subs	r3, #1
 80038e0:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 80038e2:	4b22      	ldr	r3, [pc, #136]	; (800396c <motorCommand_Init+0xa4>)
 80038e4:	4a22      	ldr	r2, [pc, #136]	; (8003970 <motorCommand_Init+0xa8>)
 80038e6:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 80038e8:	4b20      	ldr	r3, [pc, #128]	; (800396c <motorCommand_Init+0xa4>)
 80038ea:	22c7      	movs	r2, #199	; 0xc7
 80038ec:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <motorCommand_Init+0xa4>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 80038f4:	4b1d      	ldr	r3, [pc, #116]	; (800396c <motorCommand_Init+0xa4>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038fa:	4b1c      	ldr	r3, [pc, #112]	; (800396c <motorCommand_Init+0xa4>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8003900:	481a      	ldr	r0, [pc, #104]	; (800396c <motorCommand_Init+0xa4>)
 8003902:	f005 fcb1 	bl	8009268 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003906:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <motorCommand_Init+0xac>)
 8003908:	2260      	movs	r2, #96	; 0x60
 800390a:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <motorCommand_Init+0xac>)
 800390e:	2205      	movs	r2, #5
 8003910:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003912:	4b18      	ldr	r3, [pc, #96]	; (8003974 <motorCommand_Init+0xac>)
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <motorCommand_Init+0xac>)
 800391a:	2200      	movs	r2, #0
 800391c:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 800391e:	2200      	movs	r2, #0
 8003920:	4914      	ldr	r1, [pc, #80]	; (8003974 <motorCommand_Init+0xac>)
 8003922:	4812      	ldr	r0, [pc, #72]	; (800396c <motorCommand_Init+0xa4>)
 8003924:	f006 f852 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8003928:	2204      	movs	r2, #4
 800392a:	4912      	ldr	r1, [pc, #72]	; (8003974 <motorCommand_Init+0xac>)
 800392c:	480f      	ldr	r0, [pc, #60]	; (800396c <motorCommand_Init+0xa4>)
 800392e:	f006 f84d 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <motorCommand_Init+0xa4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2264      	movs	r2, #100	; 0x64
 8003938:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 800393a:	4b0c      	ldr	r3, [pc, #48]	; (800396c <motorCommand_Init+0xa4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2264      	movs	r2, #100	; 0x64
 8003940:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 8003942:	2100      	movs	r1, #0
 8003944:	4809      	ldr	r0, [pc, #36]	; (800396c <motorCommand_Init+0xa4>)
 8003946:	f005 fd4b 	bl	80093e0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 800394a:	2104      	movs	r1, #4
 800394c:	4807      	ldr	r0, [pc, #28]	; (800396c <motorCommand_Init+0xa4>)
 800394e:	f005 fd47 	bl	80093e0 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8003952:	2200      	movs	r2, #0
 8003954:	2108      	movs	r1, #8
 8003956:	4808      	ldr	r0, [pc, #32]	; (8003978 <motorCommand_Init+0xb0>)
 8003958:	f002 fb42 	bl	8005fe0 <HAL_GPIO_WritePin>
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000014 	.word	0x20000014
 8003968:	6b5fca6b 	.word	0x6b5fca6b
 800396c:	20004c1c 	.word	0x20004c1c
 8003970:	40000400 	.word	0x40000400
 8003974:	20004c64 	.word	0x20004c64
 8003978:	40020400 	.word	0x40020400

0800397c <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <motorLeft_SetDuty+0x1c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	20004c1c 	.word	0x20004c1c

0800399c <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <motorRight_SetDuty+0x1c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	20004c1c 	.word	0x20004c1c

080039bc <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 80039c2:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <quadEncoder_Init+0xdc>)
 80039c4:	4a35      	ldr	r2, [pc, #212]	; (8003a9c <quadEncoder_Init+0xe0>)
 80039c6:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 80039c8:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <quadEncoder_Init+0xdc>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ce:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <quadEncoder_Init+0xdc>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <quadEncoder_Init+0xdc>)
 80039d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039da:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039dc:	4b2e      	ldr	r3, [pc, #184]	; (8003a98 <quadEncoder_Init+0xdc>)
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80039e2:	2303      	movs	r3, #3
 80039e4:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039ea:	2301      	movs	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80039ee:	2308      	movs	r3, #8
 80039f0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 80039f2:	230f      	movs	r3, #15
 80039f4:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 80039fa:	2301      	movs	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80039fe:	2308      	movs	r3, #8
 8003a00:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003a02:	230f      	movs	r3, #15
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4823      	ldr	r0, [pc, #140]	; (8003a98 <quadEncoder_Init+0xdc>)
 8003a0c:	f005 fd98 	bl	8009540 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8003a10:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <quadEncoder_Init+0xdc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2200      	movs	r2, #0
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003a18:	2100      	movs	r1, #0
 8003a1a:	481f      	ldr	r0, [pc, #124]	; (8003a98 <quadEncoder_Init+0xdc>)
 8003a1c:	f005 fe40 	bl	80096a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003a20:	2104      	movs	r1, #4
 8003a22:	481d      	ldr	r0, [pc, #116]	; (8003a98 <quadEncoder_Init+0xdc>)
 8003a24:	f005 fe3c 	bl	80096a0 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a2e:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8003a3c:	4b18      	ldr	r3, [pc, #96]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a44:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a52:	2301      	movs	r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003a56:	2308      	movs	r3, #8
 8003a58:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8003a5a:	230f      	movs	r3, #15
 8003a5c:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8003a62:	2301      	movs	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003a66:	2308      	movs	r3, #8
 8003a68:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003a6a:	230f      	movs	r3, #15
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	480b      	ldr	r0, [pc, #44]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a74:	f005 fd64 	bl	8009540 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003a80:	2100      	movs	r1, #0
 8003a82:	4807      	ldr	r0, [pc, #28]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a84:	f005 fe0c 	bl	80096a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003a88:	2104      	movs	r1, #4
 8003a8a:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <quadEncoder_Init+0xe4>)
 8003a8c:	f005 fe08 	bl	80096a0 <HAL_TIM_Encoder_Start>
}
 8003a90:	bf00      	nop
 8003a92:	3728      	adds	r7, #40	; 0x28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20004c80 	.word	0x20004c80
 8003a9c:	40010000 	.word	0x40010000
 8003aa0:	20004cc8 	.word	0x20004cc8

08003aa4 <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <quadEncoder_PosCalcL+0x40>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f641 129b 	movw	r2, #6555	; 0x199b
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	4a07      	ldr	r2, [pc, #28]	; (8003ae8 <quadEncoder_PosCalcL+0x44>)
 8003acc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad0:	099b      	lsrs	r3, r3, #6
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	10624dd3 	.word	0x10624dd3

08003aec <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 8003af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f641 129b 	movw	r2, #6555	; 0x199b
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	4a06      	ldr	r2, [pc, #24]	; (8003b30 <quadEncoder_PosCalcR+0x44>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	099b      	lsrs	r3, r3, #6
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	601a      	str	r2, [r3, #0]
}
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	10624dd3 	.word	0x10624dd3

08003b34 <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 8003b38:	4824      	ldr	r0, [pc, #144]	; (8003bcc <quadEncoder_GetSpeedL+0x98>)
 8003b3a:	f7ff ffb3 	bl	8003aa4 <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 8003b3e:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <quadEncoder_GetSpeedL+0x98>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <quadEncoder_GetSpeedL+0x98>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	b21a      	sxth	r2, r3
 8003b50:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b52:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 8003b54:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	db10      	blt.n	8003b80 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b68:	db1a      	blt.n	8003ba0 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 8003b6a:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	b21a      	sxth	r2, r3
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b7c:	801a      	strh	r2, [r3, #0]
 8003b7e:	e00f      	b.n	8003ba0 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 8003b80:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b86:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003b8a:	da09      	bge.n	8003ba0 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 8003b8c:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	b21a      	sxth	r2, r3
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003b9e:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
 8003bb0:	4a08      	ldr	r2, [pc, #32]	; (8003bd4 <quadEncoder_GetSpeedL+0xa0>)
 8003bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8003bb6:	1412      	asrs	r2, r2, #16
 8003bb8:	17db      	asrs	r3, r3, #31
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	b21a      	sxth	r2, r3
 8003bbe:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003bc0:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 8003bc2:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <quadEncoder_GetSpeedL+0x9c>)
 8003bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20004d18 	.word	0x20004d18
 8003bd0:	20004d20 	.word	0x20004d20
 8003bd4:	66673335 	.word	0x66673335

08003bd8 <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 8003bdc:	4824      	ldr	r0, [pc, #144]	; (8003c70 <quadEncoder_GetSpeedR+0x98>)
 8003bde:	f7ff ff85 	bl	8003aec <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 8003be2:	4b23      	ldr	r3, [pc, #140]	; (8003c70 <quadEncoder_GetSpeedR+0x98>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <quadEncoder_GetSpeedR+0x98>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	b21a      	sxth	r2, r3
 8003bf4:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003bf6:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 8003bf8:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	db10      	blt.n	8003c24 <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0c:	db1a      	blt.n	8003c44 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 8003c0e:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	b21a      	sxth	r2, r3
 8003c1e:	4b15      	ldr	r3, [pc, #84]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e00f      	b.n	8003c44 <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c2a:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003c2e:	da09      	bge.n	8003c44 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	b21a      	sxth	r2, r3
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c42:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	4a08      	ldr	r2, [pc, #32]	; (8003c78 <quadEncoder_GetSpeedR+0xa0>)
 8003c56:	fb82 1203 	smull	r1, r2, r2, r3
 8003c5a:	1412      	asrs	r2, r2, #16
 8003c5c:	17db      	asrs	r3, r3, #31
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	b21a      	sxth	r2, r3
 8003c62:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c64:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 8003c66:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <quadEncoder_GetSpeedR+0x9c>)
 8003c68:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	20004d24 	.word	0x20004d24
 8003c74:	20004d2c 	.word	0x20004d2c
 8003c78:	66673335 	.word	0x66673335

08003c7c <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <quadEncoder_CallbackIndexL+0x44>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d105      	bne.n	8003c9a <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <quadEncoder_CallbackIndexL+0x48>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	4a0b      	ldr	r2, [pc, #44]	; (8003cc4 <quadEncoder_CallbackIndexL+0x48>)
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	e004      	b.n	8003ca4 <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <quadEncoder_CallbackIndexL+0x48>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <quadEncoder_CallbackIndexL+0x48>)
 8003ca2:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <quadEncoder_CallbackIndexL+0x44>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003cac:	2100      	movs	r1, #0
 8003cae:	4804      	ldr	r0, [pc, #16]	; (8003cc0 <quadEncoder_CallbackIndexL+0x44>)
 8003cb0:	f005 fcf6 	bl	80096a0 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003cb4:	2104      	movs	r1, #4
 8003cb6:	4802      	ldr	r0, [pc, #8]	; (8003cc0 <quadEncoder_CallbackIndexL+0x44>)
 8003cb8:	f005 fcf2 	bl	80096a0 <HAL_TIM_Encoder_Start>

}
 8003cbc:	bf00      	nop
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20004c80 	.word	0x20004c80
 8003cc4:	20004d10 	.word	0x20004d10

08003cc8 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <quadEncoder_CallbackIndexR+0x44>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d105      	bne.n	8003ce6 <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <quadEncoder_CallbackIndexR+0x48>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	4a0b      	ldr	r2, [pc, #44]	; (8003d10 <quadEncoder_CallbackIndexR+0x48>)
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	e004      	b.n	8003cf0 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <quadEncoder_CallbackIndexR+0x48>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3301      	adds	r3, #1
 8003cec:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <quadEncoder_CallbackIndexR+0x48>)
 8003cee:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <quadEncoder_CallbackIndexR+0x44>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4804      	ldr	r0, [pc, #16]	; (8003d0c <quadEncoder_CallbackIndexR+0x44>)
 8003cfc:	f005 fcd0 	bl	80096a0 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003d00:	2104      	movs	r1, #4
 8003d02:	4802      	ldr	r0, [pc, #8]	; (8003d0c <quadEncoder_CallbackIndexR+0x44>)
 8003d04:	f005 fccc 	bl	80096a0 <HAL_TIM_Encoder_Start>

}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20004cc8 	.word	0x20004cc8
 8003d10:	20004d14 	.word	0x20004d14

08003d14 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003d1c:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <RetargetInit+0x28>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <RetargetInit+0x2c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6898      	ldr	r0, [r3, #8]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	f016 f98d 	bl	801a04c <setvbuf>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20004d30 	.word	0x20004d30
 8003d40:	200000e8 	.word	0x200000e8

08003d44 <_isatty>:

int _isatty(int fd) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	db04      	blt.n	8003d5c <_isatty+0x18>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	dc01      	bgt.n	8003d5c <_isatty+0x18>
    return 1;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e005      	b.n	8003d68 <_isatty+0x24>

  errno = EBADF;
 8003d5c:	f016 fc6e 	bl	801a63c <__errno>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2209      	movs	r2, #9
 8003d64:	601a      	str	r2, [r3, #0]
  return 0;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <_write>:

int _write(int fd, char* ptr, int len) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d002      	beq.n	8003d88 <_write+0x18>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d111      	bne.n	8003dac <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <_write+0x54>)
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	f04f 33ff 	mov.w	r3, #4294967295
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	f006 f995 	bl	800a0c4 <HAL_UART_Transmit>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <_write+0x38>
      return len;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	e008      	b.n	8003dba <_write+0x4a>
    else
      return EIO;
 8003da8:	2305      	movs	r3, #5
 8003daa:	e006      	b.n	8003dba <_write+0x4a>
  }
  errno = EBADF;
 8003dac:	f016 fc46 	bl	801a63c <__errno>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2209      	movs	r2, #9
 8003db4:	601a      	str	r2, [r3, #0]
  return -1;
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20004d30 	.word	0x20004d30

08003dc8 <_close>:

int _close(int fd) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	db04      	blt.n	8003de0 <_close+0x18>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	dc01      	bgt.n	8003de0 <_close+0x18>
    return 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e006      	b.n	8003dee <_close+0x26>

  errno = EBADF;
 8003de0:	f016 fc2c 	bl	801a63c <__errno>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2209      	movs	r2, #9
 8003de8:	601a      	str	r2, [r3, #0]
  return -1;
 8003dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003e02:	f016 fc1b 	bl	801a63c <__errno>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2209      	movs	r2, #9
 8003e0a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <_read>:

int _read(int fd, char* ptr, int len) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d110      	bne.n	8003e4c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <_read+0x4c>)
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e32:	2201      	movs	r2, #1
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	f006 f9d7 	bl	800a1e8 <HAL_UART_Receive>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <_read+0x30>
      return 1;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e008      	b.n	8003e5a <_read+0x42>
    else
      return EIO;
 8003e48:	2305      	movs	r3, #5
 8003e4a:	e006      	b.n	8003e5a <_read+0x42>
  }
  errno = EBADF;
 8003e4c:	f016 fbf6 	bl	801a63c <__errno>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2209      	movs	r2, #9
 8003e54:	601a      	str	r2, [r3, #0]
  return -1;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20004d30 	.word	0x20004d30

08003e68 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	db08      	blt.n	8003e8a <_fstat+0x22>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	dc05      	bgt.n	8003e8a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e84:	605a      	str	r2, [r3, #4]
    return 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e005      	b.n	8003e96 <_fstat+0x2e>
  }

  errno = EBADF;
 8003e8a:	f016 fbd7 	bl	801a63c <__errno>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2209      	movs	r2, #9
 8003e92:	601a      	str	r2, [r3, #0]
  return 0;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <_getpid>:

int _getpid(void)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
	return 1;
 8003ea2:	2301      	movs	r3, #1
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_kill>:

int _kill(int pid, int sig)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003eb8:	f016 fbc0 	bl	801a63c <__errno>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2216      	movs	r2, #22
 8003ec0:	601a      	str	r2, [r3, #0]
	return -1;
 8003ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <HAL_MspInit>:
void HAL_Encoder_Timer1_MspInit(void);
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);

void HAL_MspInit(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	4b32      	ldr	r3, [pc, #200]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ede:	4a31      	ldr	r2, [pc, #196]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee6:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f18:	f043 0304 	orr.w	r3, r3, #4
 8003f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1e:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f38:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6313      	str	r3, [r2, #48]	; 0x30
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	607b      	str	r3, [r7, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	4a0e      	ldr	r2, [pc, #56]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f6c:	f043 0302 	orr.w	r3, r3, #2
 8003f70:	6313      	str	r3, [r2, #48]	; 0x30
 8003f72:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_MspInit+0xd4>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	210f      	movs	r1, #15
 8003f82:	f06f 0001 	mvn.w	r0, #1
 8003f86:	f001 fa6d 	bl	8005464 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 8003f8a:	f000 f88b 	bl	80040a4 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 8003f8e:	f000 f80b 	bl	8003fa8 <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 8003f92:	f000 f849 	bl	8004028 <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 8003f96:	f000 f8d3 	bl	8004140 <HAL_adcir_MspInit>
}
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800

08003fa8 <HAL_Encoder_Timer1_MspInit>:
 * PWM1/1	-->	PA8		-- Encodeur Voie A
 * PWM1/2	--> PA9		-- Encodeur Voie B
 * EXTI10	--> PB10	-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <HAL_Encoder_Timer1_MspInit+0x74>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	4a19      	ldr	r2, [pc, #100]	; (800401c <HAL_Encoder_Timer1_MspInit+0x74>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003fbe:	4b17      	ldr	r3, [pc, #92]	; (800401c <HAL_Encoder_Timer1_MspInit+0x74>)
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003fca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fce:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 8003fdc:	2301      	movs	r3, #1
 8003fde:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //PA8 & PA9
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	480e      	ldr	r0, [pc, #56]	; (8004020 <HAL_Encoder_Timer1_MspInit+0x78>)
 8003fe6:	f001 fe77 	bl	8005cd8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fee:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ff0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ff4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); //PB10
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4809      	ldr	r0, [pc, #36]	; (8004024 <HAL_Encoder_Timer1_MspInit+0x7c>)
 8004000:	f001 fe6a 	bl	8005cd8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 8004004:	2200      	movs	r2, #0
 8004006:	2107      	movs	r1, #7
 8004008:	2028      	movs	r0, #40	; 0x28
 800400a:	f001 fa2b 	bl	8005464 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800400e:	2028      	movs	r0, #40	; 0x28
 8004010:	f001 fa44 	bl	800549c <HAL_NVIC_EnableIRQ>
}
 8004014:	bf00      	nop
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40023800 	.word	0x40023800
 8004020:	40020000 	.word	0x40020000
 8004024:	40020400 	.word	0x40020400

08004028 <HAL_Encoder_Timer2_MspInit>:
 * PWM2/1	-->	PA0		-- Encodeur Voie A
 * PWM2/2	--> PA1		-- Encodeur Voie B
 * EXTI0 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_Encoder_Timer2_MspInit+0x70>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	4a18      	ldr	r2, [pc, #96]	; (8004098 <HAL_Encoder_Timer2_MspInit+0x70>)
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	6413      	str	r3, [r2, #64]	; 0x40
 800403e:	4b16      	ldr	r3, [pc, #88]	; (8004098 <HAL_Encoder_Timer2_MspInit+0x70>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800404a:	2303      	movs	r3, #3
 800404c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 800404e:	2302      	movs	r3, #2
 8004050:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004052:	2301      	movs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004056:	2301      	movs	r3, #1
 8004058:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 800405a:	2301      	movs	r3, #1
 800405c:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //PA0 & PA1
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	4619      	mov	r1, r3
 8004062:	480e      	ldr	r0, [pc, #56]	; (800409c <HAL_Encoder_Timer2_MspInit+0x74>)
 8004064:	f001 fe38 	bl	8005cd8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004068:	2301      	movs	r3, #1
 800406a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800406c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004070:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //PC0
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	4619      	mov	r1, r3
 800407a:	4809      	ldr	r0, [pc, #36]	; (80040a0 <HAL_Encoder_Timer2_MspInit+0x78>)
 800407c:	f001 fe2c 	bl	8005cd8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 8004080:	2200      	movs	r2, #0
 8004082:	2106      	movs	r1, #6
 8004084:	2006      	movs	r0, #6
 8004086:	f001 f9ed 	bl	8005464 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800408a:	2006      	movs	r0, #6
 800408c:	f001 fa06 	bl	800549c <HAL_NVIC_EnableIRQ>
}
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40023800 	.word	0x40023800
 800409c:	40020000 	.word	0x40020000
 80040a0:	40020800 	.word	0x40020800

080040a4 <HAL_PWM_Timer3_MspInit>:
 * PA6 --> PWM3/1
 * PC7 --> PWM3/2
 * PB3 --> ENABLE MOTEUR (Active at low level)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <HAL_PWM_Timer3_MspInit+0x8c>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <HAL_PWM_Timer3_MspInit+0x8c>)
 80040b4:	f043 0302 	orr.w	r3, r3, #2
 80040b8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <HAL_PWM_Timer3_MspInit+0x8c>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80040c6:	2340      	movs	r3, #64	; 0x40
 80040c8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	2302      	movs	r3, #2
 80040cc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040ce:	2301      	movs	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80040d2:	2301      	movs	r3, #1
 80040d4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80040d6:	2302      	movs	r3, #2
 80040d8:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //PA6
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	4619      	mov	r1, r3
 80040de:	4815      	ldr	r0, [pc, #84]	; (8004134 <HAL_PWM_Timer3_MspInit+0x90>)
 80040e0:	f001 fdfa 	bl	8005cd8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e8:	2302      	movs	r3, #2
 80040ea:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040ec:	2301      	movs	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80040f0:	2301      	movs	r3, #1
 80040f2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80040f4:	2302      	movs	r3, #2
 80040f6:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //PC7
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	480e      	ldr	r0, [pc, #56]	; (8004138 <HAL_PWM_Timer3_MspInit+0x94>)
 80040fe:	f001 fdeb 	bl	8005cd8 <HAL_GPIO_Init>

	  // ENABLE MOTEUR : SORTIE LOGIQUE PB3
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004102:	2308      	movs	r3, #8
 8004104:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004106:	2301      	movs	r3, #1
 8004108:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800410a:	2301      	movs	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800410e:	2302      	movs	r3, #2
 8004110:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); //PB3
 8004112:	1d3b      	adds	r3, r7, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4809      	ldr	r0, [pc, #36]	; (800413c <HAL_PWM_Timer3_MspInit+0x98>)
 8004118:	f001 fdde 	bl	8005cd8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800411c:	2201      	movs	r2, #1
 800411e:	2108      	movs	r1, #8
 8004120:	4806      	ldr	r0, [pc, #24]	; (800413c <HAL_PWM_Timer3_MspInit+0x98>)
 8004122:	f001 ff5d 	bl	8005fe0 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);*/
}
 8004126:	bf00      	nop
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	40020000 	.word	0x40020000
 8004138:	40020800 	.word	0x40020800
 800413c:	40020400 	.word	0x40020400

08004140 <HAL_adcir_MspInit>:
 * ADC1_4	--> PA4
 * ADC1_8	--> PB0
 * http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_adcir_MspInit+0x58>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	4a12      	ldr	r2, [pc, #72]	; (8004198 <HAL_adcir_MspInit+0x58>)
 8004150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004154:	6453      	str	r3, [r2, #68]	; 0x44
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_adcir_MspInit+0x58>)
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 8004162:	2310      	movs	r3, #16
 8004164:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004166:	2303      	movs	r3, #3
 8004168:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416a:	2300      	movs	r3, #0
 800416c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //PA4
 800416e:	1d3b      	adds	r3, r7, #4
 8004170:	4619      	mov	r1, r3
 8004172:	480a      	ldr	r0, [pc, #40]	; (800419c <HAL_adcir_MspInit+0x5c>)
 8004174:	f001 fdb0 	bl	8005cd8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8004178:	2301      	movs	r3, #1
 800417a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800417c:	2303      	movs	r3, #3
 800417e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); //PB0
 8004184:	1d3b      	adds	r3, r7, #4
 8004186:	4619      	mov	r1, r3
 8004188:	4805      	ldr	r0, [pc, #20]	; (80041a0 <HAL_adcir_MspInit+0x60>)
 800418a:	f001 fda5 	bl	8005cd8 <HAL_GPIO_Init>

}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	40020000 	.word	0x40020000
 80041a0:	40020400 	.word	0x40020400

080041a4 <HAL_I2C_MspInit>:
* PB9     ------> I2C1_SDA
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ac:	f107 0314 	add.w	r3, r7, #20
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a21      	ldr	r2, [pc, #132]	; (8004248 <HAL_I2C_MspInit+0xa4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d13c      	bne.n	8004240 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_I2C_MspInit+0xa8>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	4a1f      	ldr	r2, [pc, #124]	; (800424c <HAL_I2C_MspInit+0xa8>)
 80041d0:	f043 0302 	orr.w	r3, r3, #2
 80041d4:	6313      	str	r3, [r2, #48]	; 0x30
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <HAL_I2C_MspInit+0xa8>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041e8:	2312      	movs	r3, #18
 80041ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f0:	2303      	movs	r3, #3
 80041f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041f4:	2304      	movs	r3, #4
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); //PB8 & PB9
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	4619      	mov	r1, r3
 80041fe:	4814      	ldr	r0, [pc, #80]	; (8004250 <HAL_I2C_MspInit+0xac>)
 8004200:	f001 fd6a 	bl	8005cd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_I2C_MspInit+0xa8>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	4a0f      	ldr	r2, [pc, #60]	; (800424c <HAL_I2C_MspInit+0xa8>)
 800420e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004212:	6413      	str	r3, [r2, #64]	; 0x40
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <HAL_I2C_MspInit+0xa8>)
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8004220:	2200      	movs	r2, #0
 8004222:	2102      	movs	r1, #2
 8004224:	2020      	movs	r0, #32
 8004226:	f001 f91d 	bl	8005464 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800422a:	2020      	movs	r0, #32
 800422c:	f001 f936 	bl	800549c <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8004230:	2200      	movs	r2, #0
 8004232:	210b      	movs	r1, #11
 8004234:	201f      	movs	r0, #31
 8004236:	f001 f915 	bl	8005464 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800423a:	201f      	movs	r0, #31
 800423c:	f001 f92e 	bl	800549c <HAL_NVIC_EnableIRQ>
  }
}
 8004240:	bf00      	nop
 8004242:	3728      	adds	r7, #40	; 0x28
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40005400 	.word	0x40005400
 800424c:	40023800 	.word	0x40023800
 8004250:	40020400 	.word	0x40020400

08004254 <HAL_UART_MspInit>:
* PA3     ------> USART2_RX
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08c      	sub	sp, #48	; 0x30
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800425c:	f107 031c 	add.w	r3, r7, #28
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	609a      	str	r2, [r3, #8]
 8004268:	60da      	str	r2, [r3, #12]
 800426a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4aa2      	ldr	r2, [pc, #648]	; (80044fc <HAL_UART_MspInit+0x2a8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	f040 80a5 	bne.w	80043c2 <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	4ba0      	ldr	r3, [pc, #640]	; (8004500 <HAL_UART_MspInit+0x2ac>)
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	4a9f      	ldr	r2, [pc, #636]	; (8004500 <HAL_UART_MspInit+0x2ac>)
 8004282:	f043 0310 	orr.w	r3, r3, #16
 8004286:	6453      	str	r3, [r2, #68]	; 0x44
 8004288:	4b9d      	ldr	r3, [pc, #628]	; (8004500 <HAL_UART_MspInit+0x2ac>)
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	4b99      	ldr	r3, [pc, #612]	; (8004500 <HAL_UART_MspInit+0x2ac>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	4a98      	ldr	r2, [pc, #608]	; (8004500 <HAL_UART_MspInit+0x2ac>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6313      	str	r3, [r2, #48]	; 0x30
 80042a4:	4b96      	ldr	r3, [pc, #600]	; (8004500 <HAL_UART_MspInit+0x2ac>)
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]

    // USART1
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b6:	2302      	movs	r3, #2
 80042b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042be:	2303      	movs	r3, #3
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042c2:	2307      	movs	r3, #7
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //PA10
 80042c6:	f107 031c 	add.w	r3, r7, #28
 80042ca:	4619      	mov	r1, r3
 80042cc:	488d      	ldr	r0, [pc, #564]	; (8004504 <HAL_UART_MspInit+0x2b0>)
 80042ce:	f001 fd03 	bl	8005cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042d2:	2340      	movs	r3, #64	; 0x40
 80042d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d6:	2302      	movs	r3, #2
 80042d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042de:	2303      	movs	r3, #3
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042e2:	2307      	movs	r3, #7
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); //PB6
 80042e6:	f107 031c 	add.w	r3, r7, #28
 80042ea:	4619      	mov	r1, r3
 80042ec:	4886      	ldr	r0, [pc, #536]	; (8004508 <HAL_UART_MspInit+0x2b4>)
 80042ee:	f001 fcf3 	bl	8005cd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80042f2:	4b86      	ldr	r3, [pc, #536]	; (800450c <HAL_UART_MspInit+0x2b8>)
 80042f4:	4a86      	ldr	r2, [pc, #536]	; (8004510 <HAL_UART_MspInit+0x2bc>)
 80042f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80042f8:	4b84      	ldr	r3, [pc, #528]	; (800450c <HAL_UART_MspInit+0x2b8>)
 80042fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004300:	4b82      	ldr	r3, [pc, #520]	; (800450c <HAL_UART_MspInit+0x2b8>)
 8004302:	2200      	movs	r2, #0
 8004304:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004306:	4b81      	ldr	r3, [pc, #516]	; (800450c <HAL_UART_MspInit+0x2b8>)
 8004308:	2200      	movs	r2, #0
 800430a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800430c:	4b7f      	ldr	r3, [pc, #508]	; (800450c <HAL_UART_MspInit+0x2b8>)
 800430e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004312:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004314:	4b7d      	ldr	r3, [pc, #500]	; (800450c <HAL_UART_MspInit+0x2b8>)
 8004316:	2200      	movs	r2, #0
 8004318:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800431a:	4b7c      	ldr	r3, [pc, #496]	; (800450c <HAL_UART_MspInit+0x2b8>)
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004320:	4b7a      	ldr	r3, [pc, #488]	; (800450c <HAL_UART_MspInit+0x2b8>)
 8004322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004326:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004328:	4b78      	ldr	r3, [pc, #480]	; (800450c <HAL_UART_MspInit+0x2b8>)
 800432a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800432e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004330:	4b76      	ldr	r3, [pc, #472]	; (800450c <HAL_UART_MspInit+0x2b8>)
 8004332:	2200      	movs	r2, #0
 8004334:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004336:	4875      	ldr	r0, [pc, #468]	; (800450c <HAL_UART_MspInit+0x2b8>)
 8004338:	f001 f8be 	bl	80054b8 <HAL_DMA_Init>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8004342:	f7ff f917 	bl	8003574 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a70      	ldr	r2, [pc, #448]	; (800450c <HAL_UART_MspInit+0x2b8>)
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
 800434c:	4a6f      	ldr	r2, [pc, #444]	; (800450c <HAL_UART_MspInit+0x2b8>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004352:	4b70      	ldr	r3, [pc, #448]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 8004354:	4a70      	ldr	r2, [pc, #448]	; (8004518 <HAL_UART_MspInit+0x2c4>)
 8004356:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004358:	4b6e      	ldr	r3, [pc, #440]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 800435a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800435e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004360:	4b6c      	ldr	r3, [pc, #432]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 8004362:	2240      	movs	r2, #64	; 0x40
 8004364:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004366:	4b6b      	ldr	r3, [pc, #428]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 8004368:	2200      	movs	r2, #0
 800436a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800436c:	4b69      	ldr	r3, [pc, #420]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 800436e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004372:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004374:	4b67      	ldr	r3, [pc, #412]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 8004376:	2200      	movs	r2, #0
 8004378:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800437a:	4b66      	ldr	r3, [pc, #408]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 800437c:	2200      	movs	r2, #0
 800437e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004380:	4b64      	ldr	r3, [pc, #400]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 8004382:	2200      	movs	r2, #0
 8004384:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004386:	4b63      	ldr	r3, [pc, #396]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 8004388:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800438c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800438e:	4b61      	ldr	r3, [pc, #388]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 8004390:	2200      	movs	r2, #0
 8004392:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004394:	485f      	ldr	r0, [pc, #380]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 8004396:	f001 f88f 	bl	80054b8 <HAL_DMA_Init>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 80043a0:	f7ff f8e8 	bl	8003574 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a5b      	ldr	r2, [pc, #364]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 80043a8:	635a      	str	r2, [r3, #52]	; 0x34
 80043aa:	4a5a      	ldr	r2, [pc, #360]	; (8004514 <HAL_UART_MspInit+0x2c0>)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80043b0:	2200      	movs	r2, #0
 80043b2:	2105      	movs	r1, #5
 80043b4:	2025      	movs	r0, #37	; 0x25
 80043b6:	f001 f855 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043ba:	2025      	movs	r0, #37	; 0x25
 80043bc:	f001 f86e 	bl	800549c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80043c0:	e098      	b.n	80044f4 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a55      	ldr	r2, [pc, #340]	; (800451c <HAL_UART_MspInit+0x2c8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	f040 8093 	bne.w	80044f4 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043ce:	2300      	movs	r3, #0
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	4b4b      	ldr	r3, [pc, #300]	; (8004500 <HAL_UART_MspInit+0x2ac>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	4a4a      	ldr	r2, [pc, #296]	; (8004500 <HAL_UART_MspInit+0x2ac>)
 80043d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043dc:	6413      	str	r3, [r2, #64]	; 0x40
 80043de:	4b48      	ldr	r3, [pc, #288]	; (8004500 <HAL_UART_MspInit+0x2ac>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	4b44      	ldr	r3, [pc, #272]	; (8004500 <HAL_UART_MspInit+0x2ac>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	4a43      	ldr	r2, [pc, #268]	; (8004500 <HAL_UART_MspInit+0x2ac>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	6313      	str	r3, [r2, #48]	; 0x30
 80043fa:	4b41      	ldr	r3, [pc, #260]	; (8004500 <HAL_UART_MspInit+0x2ac>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004406:	230c      	movs	r3, #12
 8004408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440a:	2302      	movs	r3, #2
 800440c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440e:	2300      	movs	r3, #0
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004412:	2303      	movs	r3, #3
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004416:	2307      	movs	r3, #7
 8004418:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //PA4 & PA8
 800441a:	f107 031c 	add.w	r3, r7, #28
 800441e:	4619      	mov	r1, r3
 8004420:	4838      	ldr	r0, [pc, #224]	; (8004504 <HAL_UART_MspInit+0x2b0>)
 8004422:	f001 fc59 	bl	8005cd8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004426:	4b3e      	ldr	r3, [pc, #248]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 8004428:	4a3e      	ldr	r2, [pc, #248]	; (8004524 <HAL_UART_MspInit+0x2d0>)
 800442a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800442c:	4b3c      	ldr	r3, [pc, #240]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 800442e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004432:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004434:	4b3a      	ldr	r3, [pc, #232]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 8004436:	2200      	movs	r2, #0
 8004438:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800443a:	4b39      	ldr	r3, [pc, #228]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 800443c:	2200      	movs	r2, #0
 800443e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004440:	4b37      	ldr	r3, [pc, #220]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 8004442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004446:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004448:	4b35      	ldr	r3, [pc, #212]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 800444a:	2200      	movs	r2, #0
 800444c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800444e:	4b34      	ldr	r3, [pc, #208]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 8004450:	2200      	movs	r2, #0
 8004452:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004454:	4b32      	ldr	r3, [pc, #200]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 8004456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800445a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800445c:	4b30      	ldr	r3, [pc, #192]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 800445e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004462:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004464:	4b2e      	ldr	r3, [pc, #184]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 8004466:	2200      	movs	r2, #0
 8004468:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800446a:	482d      	ldr	r0, [pc, #180]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 800446c:	f001 f824 	bl	80054b8 <HAL_DMA_Init>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_UART_MspInit+0x226>
      Error_Handler();
 8004476:	f7ff f87d 	bl	8003574 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a28      	ldr	r2, [pc, #160]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
 8004480:	4a27      	ldr	r2, [pc, #156]	; (8004520 <HAL_UART_MspInit+0x2cc>)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004486:	4b28      	ldr	r3, [pc, #160]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 8004488:	4a28      	ldr	r2, [pc, #160]	; (800452c <HAL_UART_MspInit+0x2d8>)
 800448a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800448c:	4b26      	ldr	r3, [pc, #152]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 800448e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004492:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004494:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 8004496:	2240      	movs	r2, #64	; 0x40
 8004498:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800449a:	4b23      	ldr	r3, [pc, #140]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 800449c:	2200      	movs	r2, #0
 800449e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044a0:	4b21      	ldr	r3, [pc, #132]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 80044a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044a8:	4b1f      	ldr	r3, [pc, #124]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044ae:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80044b4:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80044ba:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 80044bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80044c0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044c2:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80044c8:	4817      	ldr	r0, [pc, #92]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 80044ca:	f000 fff5 	bl	80054b8 <HAL_DMA_Init>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80044d4:	f7ff f84e 	bl	8003574 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a13      	ldr	r2, [pc, #76]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 80044dc:	635a      	str	r2, [r3, #52]	; 0x34
 80044de:	4a12      	ldr	r2, [pc, #72]	; (8004528 <HAL_UART_MspInit+0x2d4>)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80044e4:	2200      	movs	r2, #0
 80044e6:	2105      	movs	r1, #5
 80044e8:	2026      	movs	r0, #38	; 0x26
 80044ea:	f000 ffbb 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80044ee:	2026      	movs	r0, #38	; 0x26
 80044f0:	f000 ffd4 	bl	800549c <HAL_NVIC_EnableIRQ>
}
 80044f4:	bf00      	nop
 80044f6:	3730      	adds	r7, #48	; 0x30
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40011000 	.word	0x40011000
 8004500:	40023800 	.word	0x40023800
 8004504:	40020000 	.word	0x40020000
 8004508:	40020400 	.word	0x40020400
 800450c:	20004a60 	.word	0x20004a60
 8004510:	40026440 	.word	0x40026440
 8004514:	20004ac0 	.word	0x20004ac0
 8004518:	400264b8 	.word	0x400264b8
 800451c:	40004400 	.word	0x40004400
 8004520:	20004b20 	.word	0x20004b20
 8004524:	40026088 	.word	0x40026088
 8004528:	20004b80 	.word	0x20004b80
 800452c:	400260a0 	.word	0x400260a0

08004530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08c      	sub	sp, #48	; 0x30
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004540:	2300      	movs	r3, #0
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <HAL_InitTick+0xd4>)
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	4a2e      	ldr	r2, [pc, #184]	; (8004604 <HAL_InitTick+0xd4>)
 800454a:	f043 0304 	orr.w	r3, r3, #4
 800454e:	6413      	str	r3, [r2, #64]	; 0x40
 8004550:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <HAL_InitTick+0xd4>)
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800455c:	f107 020c 	add.w	r2, r7, #12
 8004560:	f107 0310 	add.w	r3, r7, #16
 8004564:	4611      	mov	r1, r2
 8004566:	4618      	mov	r0, r3
 8004568:	f004 fe4c 	bl	8009204 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800456c:	f004 fe36 	bl	80091dc <HAL_RCC_GetPCLK2Freq>
 8004570:	4603      	mov	r3, r0
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	4a23      	ldr	r2, [pc, #140]	; (8004608 <HAL_InitTick+0xd8>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	0c9b      	lsrs	r3, r3, #18
 8004580:	3b01      	subs	r3, #1
 8004582:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 8004584:	4b21      	ldr	r3, [pc, #132]	; (800460c <HAL_InitTick+0xdc>)
 8004586:	4a22      	ldr	r2, [pc, #136]	; (8004610 <HAL_InitTick+0xe0>)
 8004588:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_InitTick+0xdc>)
 800458c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004590:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8004592:	4a1e      	ldr	r2, [pc, #120]	; (800460c <HAL_InitTick+0xdc>)
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004598:	4b1c      	ldr	r3, [pc, #112]	; (800460c <HAL_InitTick+0xdc>)
 800459a:	2200      	movs	r2, #0
 800459c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800459e:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_InitTick+0xdc>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045a4:	4b19      	ldr	r3, [pc, #100]	; (800460c <HAL_InitTick+0xdc>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80045aa:	4818      	ldr	r0, [pc, #96]	; (800460c <HAL_InitTick+0xdc>)
 80045ac:	f004 fe5c 	bl	8009268 <HAL_TIM_Base_Init>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80045b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11b      	bne.n	80045f6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80045be:	4813      	ldr	r0, [pc, #76]	; (800460c <HAL_InitTick+0xdc>)
 80045c0:	f004 feac 	bl	800931c <HAL_TIM_Base_Start_IT>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80045ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d111      	bne.n	80045f6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80045d2:	201e      	movs	r0, #30
 80045d4:	f000 ff62 	bl	800549c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b0f      	cmp	r3, #15
 80045dc:	d808      	bhi.n	80045f0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80045de:	2200      	movs	r2, #0
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	201e      	movs	r0, #30
 80045e4:	f000 ff3e 	bl	8005464 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045e8:	4a0a      	ldr	r2, [pc, #40]	; (8004614 <HAL_InitTick+0xe4>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e002      	b.n	80045f6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80045f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3730      	adds	r7, #48	; 0x30
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800
 8004608:	431bde83 	.word	0x431bde83
 800460c:	20004d34 	.word	0x20004d34
 8004610:	40000800 	.word	0x40000800
 8004614:	2000002c 	.word	0x2000002c

08004618 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  while (1)
 800461c:	e7fe      	b.n	800461c <NMI_Handler+0x4>

0800461e <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 800461e:	b480      	push	{r7}
 8004620:	af00      	add	r7, sp, #0

  while (1)
 8004622:	e7fe      	b.n	8004622 <HardFault_Handler+0x4>

08004624 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  while (1)
 8004628:	e7fe      	b.n	8004628 <MemManage_Handler+0x4>

0800462a <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800462a:	b480      	push	{r7}
 800462c:	af00      	add	r7, sp, #0
  while (1)
 800462e:	e7fe      	b.n	800462e <BusFault_Handler+0x4>

08004630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  while (1)
 8004634:	e7fe      	b.n	8004634 <UsageFault_Handler+0x4>

08004636 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8004636:	b480      	push	{r7}
 8004638:	af00      	add	r7, sp, #0
}
 800463a:	bf00      	nop
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004648:	4802      	ldr	r0, [pc, #8]	; (8004654 <DMA1_Stream5_IRQHandler+0x10>)
 800464a:	f001 f8cd 	bl	80057e8 <HAL_DMA_IRQHandler>
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20004b20 	.word	0x20004b20

08004658 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800465c:	4802      	ldr	r0, [pc, #8]	; (8004668 <DMA1_Stream6_IRQHandler+0x10>)
 800465e:	f001 f8c3 	bl	80057e8 <HAL_DMA_IRQHandler>
}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20004b80 	.word	0x20004b80

0800466c <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8004670:	4802      	ldr	r0, [pc, #8]	; (800467c <TIM4_IRQHandler+0x10>)
 8004672:	f005 f8a3 	bl	80097bc <HAL_TIM_IRQHandler>
}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20004d34 	.word	0x20004d34

08004680 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8004684:	4802      	ldr	r0, [pc, #8]	; (8004690 <USART1_IRQHandler+0x10>)
 8004686:	f005 ff7f 	bl	800a588 <HAL_UART_IRQHandler>
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	200049d8 	.word	0x200049d8

08004694 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8004698:	4802      	ldr	r0, [pc, #8]	; (80046a4 <USART2_IRQHandler+0x10>)
 800469a:	f005 ff75 	bl	800a588 <HAL_UART_IRQHandler>
}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20004a1c 	.word	0x20004a1c

080046a8 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80046ac:	4802      	ldr	r0, [pc, #8]	; (80046b8 <DMA2_Stream2_IRQHandler+0x10>)
 80046ae:	f001 f89b 	bl	80057e8 <HAL_DMA_IRQHandler>
}
 80046b2:	bf00      	nop
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20004a60 	.word	0x20004a60

080046bc <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80046c0:	4802      	ldr	r0, [pc, #8]	; (80046cc <DMA2_Stream7_IRQHandler+0x10>)
 80046c2:	f001 f891 	bl	80057e8 <HAL_DMA_IRQHandler>
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20004ac0 	.word	0x20004ac0

080046d0 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80046d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80046d8:	f001 fc9c 	bl	8006014 <HAL_GPIO_EXTI_IRQHandler>
}
 80046dc:	bf00      	nop
 80046de:	bd80      	pop	{r7, pc}

080046e0 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80046e4:	2001      	movs	r0, #1
 80046e6:	f001 fc95 	bl	8006014 <HAL_GPIO_EXTI_IRQHandler>
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 80046f4:	4802      	ldr	r0, [pc, #8]	; (8004700 <I2C1_EV_IRQHandler+0x10>)
 80046f6:	f002 f90d 	bl	8006914 <HAL_I2C_EV_IRQHandler>
}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20004984 	.word	0x20004984

08004704 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004708:	4802      	ldr	r0, [pc, #8]	; (8004714 <I2C1_ER_IRQHandler+0x10>)
 800470a:	f002 fa56 	bl	8006bba <HAL_I2C_ER_IRQHandler>
}
 800470e:	bf00      	nop
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20004984 	.word	0x20004984

08004718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004720:	4a14      	ldr	r2, [pc, #80]	; (8004774 <_sbrk+0x5c>)
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <_sbrk+0x60>)
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800472c:	4b13      	ldr	r3, [pc, #76]	; (800477c <_sbrk+0x64>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004734:	4b11      	ldr	r3, [pc, #68]	; (800477c <_sbrk+0x64>)
 8004736:	4a12      	ldr	r2, [pc, #72]	; (8004780 <_sbrk+0x68>)
 8004738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800473a:	4b10      	ldr	r3, [pc, #64]	; (800477c <_sbrk+0x64>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4413      	add	r3, r2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	429a      	cmp	r2, r3
 8004746:	d207      	bcs.n	8004758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004748:	f015 ff78 	bl	801a63c <__errno>
 800474c:	4603      	mov	r3, r0
 800474e:	220c      	movs	r2, #12
 8004750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004752:	f04f 33ff 	mov.w	r3, #4294967295
 8004756:	e009      	b.n	800476c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004758:	4b08      	ldr	r3, [pc, #32]	; (800477c <_sbrk+0x64>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <_sbrk+0x64>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	4a05      	ldr	r2, [pc, #20]	; (800477c <_sbrk+0x64>)
 8004768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800476a:	68fb      	ldr	r3, [r7, #12]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20020000 	.word	0x20020000
 8004778:	00000400 	.word	0x00000400
 800477c:	20004d7c 	.word	0x20004d7c
 8004780:	2000e878 	.word	0x2000e878

08004784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <SystemInit+0x20>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	4a05      	ldr	r2, [pc, #20]	; (80047a4 <SystemInit+0x20>)
 8004790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	e000ed00 	.word	0xe000ed00

080047a8 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b094      	sub	sp, #80	; 0x50
 80047ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ae:	f107 0320 	add.w	r3, r7, #32
 80047b2:	2230      	movs	r2, #48	; 0x30
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f015 fe56 	bl	801a468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047bc:	f107 030c 	add.w	r3, r7, #12
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	609a      	str	r2, [r3, #8]
 80047c8:	60da      	str	r2, [r3, #12]
 80047ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047cc:	2300      	movs	r3, #0
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	4b28      	ldr	r3, [pc, #160]	; (8004874 <SystemClock_Config+0xcc>)
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	4a27      	ldr	r2, [pc, #156]	; (8004874 <SystemClock_Config+0xcc>)
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047da:	6413      	str	r3, [r2, #64]	; 0x40
 80047dc:	4b25      	ldr	r3, [pc, #148]	; (8004874 <SystemClock_Config+0xcc>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047e8:	2300      	movs	r3, #0
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	4b22      	ldr	r3, [pc, #136]	; (8004878 <SystemClock_Config+0xd0>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a21      	ldr	r2, [pc, #132]	; (8004878 <SystemClock_Config+0xd0>)
 80047f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	4b1f      	ldr	r3, [pc, #124]	; (8004878 <SystemClock_Config+0xd0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004800:	607b      	str	r3, [r7, #4]
 8004802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004804:	2301      	movs	r3, #1
 8004806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004808:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800480e:	2302      	movs	r3, #2
 8004810:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004818:	2308      	movs	r3, #8
 800481a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800481c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8004820:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8004822:	2306      	movs	r3, #6
 8004824:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004826:	2304      	movs	r3, #4
 8004828:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800482a:	f107 0320 	add.w	r3, r7, #32
 800482e:	4618      	mov	r0, r3
 8004830:	f004 f850 	bl	80088d4 <HAL_RCC_OscConfig>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800483a:	f7fe fe9b 	bl	8003574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800483e:	230f      	movs	r3, #15
 8004840:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004842:	2302      	movs	r3, #2
 8004844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800484a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800484e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004850:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004854:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004856:	f107 030c 	add.w	r3, r7, #12
 800485a:	2102      	movs	r1, #2
 800485c:	4618      	mov	r0, r3
 800485e:	f004 fab1 	bl	8008dc4 <HAL_RCC_ClockConfig>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004868:	f7fe fe84 	bl	8003574 <Error_Handler>
  }
}
 800486c:	bf00      	nop
 800486e:	3750      	adds	r7, #80	; 0x50
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40023800 	.word	0x40023800
 8004878:	40007000 	.word	0x40007000

0800487c <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 800487c:	b480      	push	{r7}
 800487e:	b089      	sub	sp, #36	; 0x24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	fbb3 f2f2 	udiv	r2, r3, r2
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	fb01 f202 	mul.w	r2, r1, r2
 800489c:	1a9a      	subs	r2, r3, r2
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1c59      	adds	r1, r3, #1
 80048a2:	60f9      	str	r1, [r7, #12]
 80048a4:	4936      	ldr	r1, [pc, #216]	; (8004980 <num2str+0x104>)
 80048a6:	5c8a      	ldrb	r2, [r1, r2]
 80048a8:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e9      	bne.n	800488e <num2str+0x12>
        *s='\0';
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	e01a      	b.n	8004904 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	4413      	add	r3, r2
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	76fb      	strb	r3, [r7, #27]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	441a      	add	r2, r3
 80048e4:	6979      	ldr	r1, [r7, #20]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	440b      	add	r3, r1
 80048ea:	7812      	ldrb	r2, [r2, #0]
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4413      	add	r3, r2
 80048fa:	7efa      	ldrb	r2, [r7, #27]
 80048fc:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3301      	adds	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	429a      	cmp	r2, r3
 800490c:	d3df      	bcc.n	80048ce <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d22d      	bcs.n	8004972 <num2str+0xf6>
                for (i=cnt;i==0;i--)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	e00e      	b.n	800493a <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	441a      	add	r2, r3
 8004922:	69f9      	ldr	r1, [r7, #28]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	4419      	add	r1, r3
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1acb      	subs	r3, r1, r3
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	440b      	add	r3, r1
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3b01      	subs	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0ed      	beq.n	800491c <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <num2str+0xd0>
 8004946:	2320      	movs	r3, #32
 8004948:	76fb      	strb	r3, [r7, #27]
 800494a:	e001      	b.n	8004950 <num2str+0xd4>
 800494c:	2330      	movs	r3, #48	; 0x30
 800494e:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8004950:	2300      	movs	r3, #0
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	e007      	b.n	8004966 <num2str+0xea>
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	7efa      	ldrb	r2, [r7, #27]
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	3301      	adds	r3, #1
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	429a      	cmp	r2, r3
 8004970:	d3f1      	bcc.n	8004956 <num2str+0xda>
        }
}
 8004972:	bf00      	nop
 8004974:	3724      	adds	r7, #36	; 0x24
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000018 	.word	0x20000018

08004984 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 800499c:	e02e      	b.n	80049fc <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	2b2f      	cmp	r3, #47	; 0x2f
 80049a2:	d906      	bls.n	80049b2 <str2num+0x2e>
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b39      	cmp	r3, #57	; 0x39
 80049a8:	d803      	bhi.n	80049b2 <str2num+0x2e>
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	3b30      	subs	r3, #48	; 0x30
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	e018      	b.n	80049e4 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d109      	bne.n	80049cc <str2num+0x48>
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d906      	bls.n	80049cc <str2num+0x48>
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b46      	cmp	r3, #70	; 0x46
 80049c2:	d803      	bhi.n	80049cc <str2num+0x48>
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	3b37      	subs	r3, #55	; 0x37
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	e00b      	b.n	80049e4 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d117      	bne.n	8004a02 <str2num+0x7e>
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b60      	cmp	r3, #96	; 0x60
 80049d6:	d914      	bls.n	8004a02 <str2num+0x7e>
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b66      	cmp	r3, #102	; 0x66
 80049dc:	d811      	bhi.n	8004a02 <str2num+0x7e>
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	3b57      	subs	r3, #87	; 0x57
 80049e2:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4413      	add	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]
		ch=*s++;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1cd      	bne.n	800499e <str2num+0x1a>
	}
	return u;
 8004a02:	697b      	ldr	r3, [r7, #20]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004a24:	e018      	b.n	8004a58 <reverse+0x48>
    {
        temp = str[i];
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	441a      	add	r2, r3
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	440b      	add	r3, r1
 8004a3c:	7812      	ldrb	r2, [r2, #0]
 8004a3e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	dbe2      	blt.n	8004a26 <reverse+0x16>
    }
}
 8004a60:	bf00      	nop
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
    int i = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
    while (x)
 8004a80:	e01d      	b.n	8004abe <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <intToStr+0x8c>)
 8004a86:	fb83 1302 	smull	r1, r3, r3, r2
 8004a8a:	1099      	asrs	r1, r3, #2
 8004a8c:	17d3      	asrs	r3, r2, #31
 8004a8e:	1ac9      	subs	r1, r1, r3
 8004a90:	460b      	mov	r3, r1
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	1ad1      	subs	r1, r2, r3
 8004a9a:	b2ca      	uxtb	r2, r1
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	1c59      	adds	r1, r3, #1
 8004aa0:	6179      	str	r1, [r7, #20]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3230      	adds	r2, #48	; 0x30
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a12      	ldr	r2, [pc, #72]	; (8004afc <intToStr+0x8c>)
 8004ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8004ab6:	1092      	asrs	r2, r2, #2
 8004ab8:	17db      	asrs	r3, r3, #31
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	60fb      	str	r3, [r7, #12]
    while (x)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1de      	bne.n	8004a82 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8004ac4:	e007      	b.n	8004ad6 <intToStr+0x66>
        str[i++] = '0';
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	617a      	str	r2, [r7, #20]
 8004acc:	461a      	mov	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	2230      	movs	r2, #48	; 0x30
 8004ad4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	dbf3      	blt.n	8004ac6 <intToStr+0x56>

    reverse(str, i);
 8004ade:	6979      	ldr	r1, [r7, #20]
 8004ae0:	68b8      	ldr	r0, [r7, #8]
 8004ae2:	f7ff ff95 	bl	8004a10 <reverse>
    str[i] = '\0';
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	4413      	add	r3, r2
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
    return i;
 8004af0:	697b      	ldr	r3, [r7, #20]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	66666667 	.word	0x66666667

08004b00 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b0c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8004b0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b16:	ee17 3a90 	vmov	r3, s15
 8004b1a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b26:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b2e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8004b32:	2200      	movs	r2, #0
 8004b34:	68f9      	ldr	r1, [r7, #12]
 8004b36:	69f8      	ldr	r0, [r7, #28]
 8004b38:	f7ff ff9a 	bl	8004a70 <intToStr>
 8004b3c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d025      	beq.n	8004b90 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	222e      	movs	r2, #46	; 0x2e
 8004b4c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8004b98 <float2str+0x98>
 8004b54:	f000 f824 	bl	8004ba0 <myPow>
 8004b58:	ec53 2b10 	vmov	r2, r3, d0
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f7fb fffc 	bl	8000b5c <__aeabi_d2f>
 8004b64:	ee07 0a10 	vmov	s14, r0
 8004b68:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b70:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8004b74:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	4619      	mov	r1, r3
 8004b88:	ee17 0a90 	vmov	r0, s15
 8004b8c:	f7ff ff70 	bl	8004a70 <intToStr>
    }
}
 8004b90:	bf00      	nop
 8004b92:	3720      	adds	r7, #32
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	00000000 	.word	0x00000000
 8004b9c:	40240000 	.word	0x40240000

08004ba0 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	ed87 0b02 	vstr	d0, [r7, #8]
 8004baa:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bfb8      	it	lt
 8004bb2:	425b      	neglt	r3, r3
 8004bb4:	61fb      	str	r3, [r7, #28]
    double result = 1;
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <myPow+0x90>)
 8004bbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8004bc0:	e01b      	b.n	8004bfa <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <myPow+0x40>
        {
            result = result * x;
 8004bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004bd4:	f7fb fd28 	bl	8000628 <__aeabi_dmul>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	085b      	lsrs	r3, r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
        x = x * x;
 8004be6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bee:	f7fb fd1b 	bl	8000628 <__aeabi_dmul>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e0      	bne.n	8004bc2 <myPow+0x22>
    }

    if(n < 0)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da09      	bge.n	8004c1a <myPow+0x7a>
    {
        return 1/result;
 8004c06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c0a:	f04f 0000 	mov.w	r0, #0
 8004c0e:	4908      	ldr	r1, [pc, #32]	; (8004c30 <myPow+0x90>)
 8004c10:	f7fb fe34 	bl	800087c <__aeabi_ddiv>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	e001      	b.n	8004c1e <myPow+0x7e>
    }
    return result;
 8004c1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004c1e:	ec43 2b17 	vmov	d7, r2, r3
 8004c22:	eeb0 0a47 	vmov.f32	s0, s14
 8004c26:	eef0 0a67 	vmov.f32	s1, s15
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	3ff00000 	.word	0x3ff00000

08004c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c38:	480d      	ldr	r0, [pc, #52]	; (8004c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c3a:	490e      	ldr	r1, [pc, #56]	; (8004c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c40:	e002      	b.n	8004c48 <LoopCopyDataInit>

08004c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c46:	3304      	adds	r3, #4

08004c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c4c:	d3f9      	bcc.n	8004c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c4e:	4a0b      	ldr	r2, [pc, #44]	; (8004c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c50:	4c0b      	ldr	r4, [pc, #44]	; (8004c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c54:	e001      	b.n	8004c5a <LoopFillZerobss>

08004c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c58:	3204      	adds	r2, #4

08004c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c5c:	d3fb      	bcc.n	8004c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c5e:	f7ff fd91 	bl	8004784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c62:	f015 fcf1 	bl	801a648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c66:	f7fe fb81 	bl	800336c <main>
  bx  lr    
 8004c6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c74:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8004c78:	0801c2b8 	.word	0x0801c2b8
  ldr r2, =_sbss
 8004c7c:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8004c80:	2000e878 	.word	0x2000e878

08004c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c84:	e7fe      	b.n	8004c84 <ADC_IRQHandler>
	...

08004c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c8c:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <HAL_Init+0x40>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a0d      	ldr	r2, [pc, #52]	; (8004cc8 <HAL_Init+0x40>)
 8004c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_Init+0x40>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <HAL_Init+0x40>)
 8004c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ca4:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <HAL_Init+0x40>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a07      	ldr	r2, [pc, #28]	; (8004cc8 <HAL_Init+0x40>)
 8004caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cb0:	2003      	movs	r0, #3
 8004cb2:	f000 fbcc 	bl	800544e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cb6:	200f      	movs	r0, #15
 8004cb8:	f7ff fc3a 	bl	8004530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cbc:	f7ff f908 	bl	8003ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023c00 	.word	0x40023c00

08004ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_IncTick+0x20>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_IncTick+0x24>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4413      	add	r3, r2
 8004cdc:	4a04      	ldr	r2, [pc, #16]	; (8004cf0 <HAL_IncTick+0x24>)
 8004cde:	6013      	str	r3, [r2, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000030 	.word	0x20000030
 8004cf0:	20004d80 	.word	0x20004d80

08004cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <HAL_GetTick+0x14>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20004d80 	.word	0x20004d80

08004d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d14:	f7ff ffee 	bl	8004cf4 <HAL_GetTick>
 8004d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d005      	beq.n	8004d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <HAL_Delay+0x44>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d32:	bf00      	nop
 8004d34:	f7ff ffde 	bl	8004cf4 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d8f7      	bhi.n	8004d34 <HAL_Delay+0x28>
  {
  }
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000030 	.word	0x20000030

08004d54 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e01b      	b.n	8004d9e <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f817 	bl	8004da6 <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f9d7 	bl	8005134 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ADC_Start+0x1a>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e053      	b.n	8004e7e <HAL_ADC_Start+0xc2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b22      	cmp	r3, #34	; 0x22
 8004de8:	d104      	bne.n	8004df4 <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2232      	movs	r2, #50	; 0x32
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004df2:	e003      	b.n	8004dfc <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2212      	movs	r2, #18
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d010      	beq.n	8004e2c <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilization */
    for(; i <= 540; i++)
 8004e1a:	e003      	b.n	8004e24 <HAL_ADC_Start+0x68>
    {
      __NOP();
 8004e1c:	bf00      	nop
    for(; i <= 540; i++)
 8004e1e:	89fb      	ldrh	r3, [r7, #14]
 8004e20:	3301      	adds	r3, #1
 8004e22:	81fb      	strh	r3, [r7, #14]
 8004e24:	89fb      	ldrh	r3, [r7, #14]
 8004e26:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8004e2a:	d9f7      	bls.n	8004e1c <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004e2c:	4b17      	ldr	r3, [pc, #92]	; (8004e8c <HAL_ADC_Start+0xd0>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10c      	bne.n	8004e52 <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d119      	bne.n	8004e74 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e4e:	609a      	str	r2, [r3, #8]
 8004e50:	e010      	b.n	8004e74 <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <HAL_ADC_Start+0xd4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d10b      	bne.n	8004e74 <HAL_ADC_Start+0xb8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e72:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40012300 	.word	0x40012300
 8004e90:	40012000 	.word	0x40012000

08004e94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004ea2:	f7ff ff27 	bl	8004cf4 <HAL_GetTick>
 8004ea6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ea8:	e018      	b.n	8004edc <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d014      	beq.n	8004edc <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <HAL_ADC_PollForConversion+0x34>
 8004eb8:	f7ff ff1c 	bl	8004cf4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d209      	bcs.n	8004edc <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2203      	movs	r2, #3
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e016      	b.n	8004f0a <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d1df      	bne.n	8004eaa <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b25      	cmp	r3, #37	; 0x25
 8004ef4:	d104      	bne.n	8004f00 <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2235      	movs	r2, #53	; 0x35
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004efe:	e003      	b.n	8004f08 <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2215      	movs	r2, #21
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x18>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e0ed      	b.n	8005120 <HAL_ADC_ConfigChannel+0x1f4>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b09      	cmp	r3, #9
 8004f52:	d925      	bls.n	8004fa0 <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68d9      	ldr	r1, [r3, #12]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	4613      	mov	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	4413      	add	r3, r2
 8004f68:	3b1e      	subs	r3, #30
 8004f6a:	2207      	movs	r2, #7
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43da      	mvns	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	400a      	ands	r2, r1
 8004f78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68d9      	ldr	r1, [r3, #12]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	4403      	add	r3, r0
 8004f92:	3b1e      	subs	r3, #30
 8004f94:	409a      	lsls	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	e022      	b.n	8004fe6 <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6919      	ldr	r1, [r3, #16]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	4613      	mov	r3, r2
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	4413      	add	r3, r2
 8004fb4:	2207      	movs	r2, #7
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43da      	mvns	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6919      	ldr	r1, [r3, #16]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4403      	add	r3, r0
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b06      	cmp	r3, #6
 8004fec:	d824      	bhi.n	8005038 <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3b05      	subs	r3, #5
 8005000:	221f      	movs	r2, #31
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	43da      	mvns	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	400a      	ands	r2, r1
 800500e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	4618      	mov	r0, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	3b05      	subs	r3, #5
 800502a:	fa00 f203 	lsl.w	r2, r0, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	635a      	str	r2, [r3, #52]	; 0x34
 8005036:	e04c      	b.n	80050d2 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b0c      	cmp	r3, #12
 800503e:	d824      	bhi.n	800508a <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	3b23      	subs	r3, #35	; 0x23
 8005052:	221f      	movs	r2, #31
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	43da      	mvns	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	400a      	ands	r2, r1
 8005060:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	b29b      	uxth	r3, r3
 800506e:	4618      	mov	r0, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	3b23      	subs	r3, #35	; 0x23
 800507c:	fa00 f203 	lsl.w	r2, r0, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
 8005088:	e023      	b.n	80050d2 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	3b41      	subs	r3, #65	; 0x41
 800509c:	221f      	movs	r2, #31
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43da      	mvns	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	400a      	ands	r2, r1
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	4618      	mov	r0, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	3b41      	subs	r3, #65	; 0x41
 80050c6:	fa00 f203 	lsl.w	r2, r0, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a15      	ldr	r2, [pc, #84]	; (800512c <HAL_ADC_ConfigChannel+0x200>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d109      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x1c4>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b12      	cmp	r3, #18
 80050e2:	d105      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80050e4:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_ADC_ConfigChannel+0x204>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4a11      	ldr	r2, [pc, #68]	; (8005130 <HAL_ADC_ConfigChannel+0x204>)
 80050ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050ee:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a0d      	ldr	r2, [pc, #52]	; (800512c <HAL_ADC_ConfigChannel+0x200>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d10d      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x1ea>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b10      	cmp	r3, #16
 8005100:	d003      	beq.n	800510a <HAL_ADC_ConfigChannel+0x1de>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b11      	cmp	r3, #17
 8005108:	d105      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x1ea>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800510a:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_ADC_ConfigChannel+0x204>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4a08      	ldr	r2, [pc, #32]	; (8005130 <HAL_ADC_ConfigChannel+0x204>)
 8005110:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005114:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40012000 	.word	0x40012000
 8005130:	40012300 	.word	0x40012300

08005134 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800513c:	4b6c      	ldr	r3, [pc, #432]	; (80052f0 <ADC_Init+0x1bc>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a6b      	ldr	r2, [pc, #428]	; (80052f0 <ADC_Init+0x1bc>)
 8005142:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005146:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005148:	4b69      	ldr	r3, [pc, #420]	; (80052f0 <ADC_Init+0x1bc>)
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	4967      	ldr	r1, [pc, #412]	; (80052f0 <ADC_Init+0x1bc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005164:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6859      	ldr	r1, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	021a      	lsls	r2, r3, #8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6899      	ldr	r1, [r3, #8]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6899      	ldr	r1, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6899      	ldr	r1, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0202 	bic.w	r2, r2, #2
 8005210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6899      	ldr	r1, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	005a      	lsls	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01b      	beq.n	8005266 <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800524c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	3b01      	subs	r3, #1
 800525a:	035a      	lsls	r2, r3, #13
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	605a      	str	r2, [r3, #4]
 8005264:	e007      	b.n	8005276 <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005274:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005284:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	3b01      	subs	r3, #1
 8005292:	051a      	lsls	r2, r3, #20
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6899      	ldr	r1, [r3, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	025a      	lsls	r2, r3, #9
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6899      	ldr	r1, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	029a      	lsls	r2, r3, #10
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	609a      	str	r2, [r3, #8]
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	40012300 	.word	0x40012300

080052f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <__NVIC_SetPriorityGrouping+0x44>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005310:	4013      	ands	r3, r2
 8005312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800531c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005326:	4a04      	ldr	r2, [pc, #16]	; (8005338 <__NVIC_SetPriorityGrouping+0x44>)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	60d3      	str	r3, [r2, #12]
}
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	e000ed00 	.word	0xe000ed00

0800533c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005340:	4b04      	ldr	r3, [pc, #16]	; (8005354 <__NVIC_GetPriorityGrouping+0x18>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	0a1b      	lsrs	r3, r3, #8
 8005346:	f003 0307 	and.w	r3, r3, #7
}
 800534a:	4618      	mov	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	e000ed00 	.word	0xe000ed00

08005358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005366:	2b00      	cmp	r3, #0
 8005368:	db0b      	blt.n	8005382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	f003 021f 	and.w	r2, r3, #31
 8005370:	4907      	ldr	r1, [pc, #28]	; (8005390 <__NVIC_EnableIRQ+0x38>)
 8005372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	2001      	movs	r0, #1
 800537a:	fa00 f202 	lsl.w	r2, r0, r2
 800537e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	e000e100 	.word	0xe000e100

08005394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	6039      	str	r1, [r7, #0]
 800539e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	db0a      	blt.n	80053be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	490c      	ldr	r1, [pc, #48]	; (80053e0 <__NVIC_SetPriority+0x4c>)
 80053ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b2:	0112      	lsls	r2, r2, #4
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	440b      	add	r3, r1
 80053b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053bc:	e00a      	b.n	80053d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	4908      	ldr	r1, [pc, #32]	; (80053e4 <__NVIC_SetPriority+0x50>)
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	3b04      	subs	r3, #4
 80053cc:	0112      	lsls	r2, r2, #4
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	440b      	add	r3, r1
 80053d2:	761a      	strb	r2, [r3, #24]
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	e000e100 	.word	0xe000e100
 80053e4:	e000ed00 	.word	0xe000ed00

080053e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b089      	sub	sp, #36	; 0x24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f1c3 0307 	rsb	r3, r3, #7
 8005402:	2b04      	cmp	r3, #4
 8005404:	bf28      	it	cs
 8005406:	2304      	movcs	r3, #4
 8005408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	3304      	adds	r3, #4
 800540e:	2b06      	cmp	r3, #6
 8005410:	d902      	bls.n	8005418 <NVIC_EncodePriority+0x30>
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	3b03      	subs	r3, #3
 8005416:	e000      	b.n	800541a <NVIC_EncodePriority+0x32>
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800541c:	f04f 32ff 	mov.w	r2, #4294967295
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43da      	mvns	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	401a      	ands	r2, r3
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005430:	f04f 31ff 	mov.w	r1, #4294967295
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	fa01 f303 	lsl.w	r3, r1, r3
 800543a:	43d9      	mvns	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005440:	4313      	orrs	r3, r2
         );
}
 8005442:	4618      	mov	r0, r3
 8005444:	3724      	adds	r7, #36	; 0x24
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff ff4c 	bl	80052f4 <__NVIC_SetPriorityGrouping>
}
 800545c:	bf00      	nop
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005476:	f7ff ff61 	bl	800533c <__NVIC_GetPriorityGrouping>
 800547a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	6978      	ldr	r0, [r7, #20]
 8005482:	f7ff ffb1 	bl	80053e8 <NVIC_EncodePriority>
 8005486:	4602      	mov	r2, r0
 8005488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548c:	4611      	mov	r1, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ff80 	bl	8005394 <__NVIC_SetPriority>
}
 8005494:	bf00      	nop
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff ff54 	bl	8005358 <__NVIC_EnableIRQ>
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054c4:	f7ff fc16 	bl	8004cf4 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e099      	b.n	8005608 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054f4:	e00f      	b.n	8005516 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054f6:	f7ff fbfd 	bl	8004cf4 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b05      	cmp	r3, #5
 8005502:	d908      	bls.n	8005516 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2203      	movs	r2, #3
 800550e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e078      	b.n	8005608 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e8      	bne.n	80054f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4b38      	ldr	r3, [pc, #224]	; (8005610 <HAL_DMA_Init+0x158>)
 8005530:	4013      	ands	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005542:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800554e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800555a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	2b04      	cmp	r3, #4
 800556e:	d107      	bne.n	8005580 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	4313      	orrs	r3, r2
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0307 	bic.w	r3, r3, #7
 8005596:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d117      	bne.n	80055da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00e      	beq.n	80055da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fb0f 	bl	8005be0 <DMA_CheckFifoParam>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2240      	movs	r2, #64	; 0x40
 80055cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055d6:	2301      	movs	r3, #1
 80055d8:	e016      	b.n	8005608 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fac6 	bl	8005b74 <DMA_CalcBaseAndBitshift>
 80055e8:	4603      	mov	r3, r0
 80055ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f0:	223f      	movs	r2, #63	; 0x3f
 80055f2:	409a      	lsls	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	f010803f 	.word	0xf010803f

08005614 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_DMA_Start_IT+0x26>
 8005636:	2302      	movs	r3, #2
 8005638:	e040      	b.n	80056bc <HAL_DMA_Start_IT+0xa8>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	d12f      	bne.n	80056ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2202      	movs	r2, #2
 8005652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fa58 	bl	8005b18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566c:	223f      	movs	r2, #63	; 0x3f
 800566e:	409a      	lsls	r2, r3
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0216 	orr.w	r2, r2, #22
 8005682:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0208 	orr.w	r2, r2, #8
 800569a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e005      	b.n	80056ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
 80056b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056d2:	f7ff fb0f 	bl	8004cf4 <HAL_GetTick>
 80056d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d008      	beq.n	80056f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2280      	movs	r2, #128	; 0x80
 80056e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e052      	b.n	800579c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0216 	bic.w	r2, r2, #22
 8005704:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695a      	ldr	r2, [r3, #20]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005714:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <HAL_DMA_Abort+0x62>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0208 	bic.w	r2, r2, #8
 8005734:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0201 	bic.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005746:	e013      	b.n	8005770 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005748:	f7ff fad4 	bl	8004cf4 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b05      	cmp	r3, #5
 8005754:	d90c      	bls.n	8005770 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2203      	movs	r2, #3
 8005760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e015      	b.n	800579c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e4      	bne.n	8005748 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005782:	223f      	movs	r2, #63	; 0x3f
 8005784:	409a      	lsls	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d004      	beq.n	80057c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2280      	movs	r2, #128	; 0x80
 80057bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e00c      	b.n	80057dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2205      	movs	r2, #5
 80057c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0201 	bic.w	r2, r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057f4:	4b8e      	ldr	r3, [pc, #568]	; (8005a30 <HAL_DMA_IRQHandler+0x248>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a8e      	ldr	r2, [pc, #568]	; (8005a34 <HAL_DMA_IRQHandler+0x24c>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	0a9b      	lsrs	r3, r3, #10
 8005800:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005806:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005812:	2208      	movs	r2, #8
 8005814:	409a      	lsls	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4013      	ands	r3, r2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01a      	beq.n	8005854 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d013      	beq.n	8005854 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0204 	bic.w	r2, r2, #4
 800583a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005840:	2208      	movs	r2, #8
 8005842:	409a      	lsls	r2, r3
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584c:	f043 0201 	orr.w	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005858:	2201      	movs	r2, #1
 800585a:	409a      	lsls	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d012      	beq.n	800588a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005876:	2201      	movs	r2, #1
 8005878:	409a      	lsls	r2, r3
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	f043 0202 	orr.w	r2, r3, #2
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588e:	2204      	movs	r2, #4
 8005890:	409a      	lsls	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4013      	ands	r3, r2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d012      	beq.n	80058c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00b      	beq.n	80058c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ac:	2204      	movs	r2, #4
 80058ae:	409a      	lsls	r2, r3
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b8:	f043 0204 	orr.w	r2, r3, #4
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c4:	2210      	movs	r2, #16
 80058c6:	409a      	lsls	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d043      	beq.n	8005958 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d03c      	beq.n	8005958 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e2:	2210      	movs	r2, #16
 80058e4:	409a      	lsls	r2, r3
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d018      	beq.n	800592a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d108      	bne.n	8005918 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d024      	beq.n	8005958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	4798      	blx	r3
 8005916:	e01f      	b.n	8005958 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01b      	beq.n	8005958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	4798      	blx	r3
 8005928:	e016      	b.n	8005958 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d107      	bne.n	8005948 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0208 	bic.w	r2, r2, #8
 8005946:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595c:	2220      	movs	r2, #32
 800595e:	409a      	lsls	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4013      	ands	r3, r2
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 808f 	beq.w	8005a88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 8087 	beq.w	8005a88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597e:	2220      	movs	r2, #32
 8005980:	409a      	lsls	r2, r3
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b05      	cmp	r3, #5
 8005990:	d136      	bne.n	8005a00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0216 	bic.w	r2, r2, #22
 80059a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <HAL_DMA_IRQHandler+0x1da>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0208 	bic.w	r2, r2, #8
 80059d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d6:	223f      	movs	r2, #63	; 0x3f
 80059d8:	409a      	lsls	r2, r3
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d07e      	beq.n	8005af4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	4798      	blx	r3
        }
        return;
 80059fe:	e079      	b.n	8005af4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d01d      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10d      	bne.n	8005a38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d031      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
 8005a2c:	e02c      	b.n	8005a88 <HAL_DMA_IRQHandler+0x2a0>
 8005a2e:	bf00      	nop
 8005a30:	20000014 	.word	0x20000014
 8005a34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d023      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
 8005a48:	e01e      	b.n	8005a88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10f      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0210 	bic.w	r2, r2, #16
 8005a66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d032      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d022      	beq.n	8005ae2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2205      	movs	r2, #5
 8005aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	60bb      	str	r3, [r7, #8]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d307      	bcc.n	8005ad0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f2      	bne.n	8005ab4 <HAL_DMA_IRQHandler+0x2cc>
 8005ace:	e000      	b.n	8005ad2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005ad0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	4798      	blx	r3
 8005af2:	e000      	b.n	8005af6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005af4:	bf00      	nop
    }
  }
}
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b0a:	b2db      	uxtb	r3, r3
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	2b40      	cmp	r3, #64	; 0x40
 8005b44:	d108      	bne.n	8005b58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b56:	e007      	b.n	8005b68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	60da      	str	r2, [r3, #12]
}
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	3b10      	subs	r3, #16
 8005b84:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8005b86:	fba2 2303 	umull	r2, r3, r2, r3
 8005b8a:	091b      	lsrs	r3, r3, #4
 8005b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b8e:	4a13      	ldr	r2, [pc, #76]	; (8005bdc <DMA_CalcBaseAndBitshift+0x68>)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d909      	bls.n	8005bb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005baa:	f023 0303 	bic.w	r3, r3, #3
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8005bb4:	e007      	b.n	8005bc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bbe:	f023 0303 	bic.w	r3, r3, #3
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	aaaaaaab 	.word	0xaaaaaaab
 8005bdc:	0801b784 	.word	0x0801b784

08005be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d11f      	bne.n	8005c3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d856      	bhi.n	8005cae <DMA_CheckFifoParam+0xce>
 8005c00:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <DMA_CheckFifoParam+0x28>)
 8005c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c06:	bf00      	nop
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005c2b 	.word	0x08005c2b
 8005c10:	08005c19 	.word	0x08005c19
 8005c14:	08005caf 	.word	0x08005caf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d046      	beq.n	8005cb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c28:	e043      	b.n	8005cb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c32:	d140      	bne.n	8005cb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c38:	e03d      	b.n	8005cb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c42:	d121      	bne.n	8005c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d837      	bhi.n	8005cba <DMA_CheckFifoParam+0xda>
 8005c4a:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <DMA_CheckFifoParam+0x70>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c61 	.word	0x08005c61
 8005c54:	08005c67 	.word	0x08005c67
 8005c58:	08005c61 	.word	0x08005c61
 8005c5c:	08005c79 	.word	0x08005c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	73fb      	strb	r3, [r7, #15]
      break;
 8005c64:	e030      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d025      	beq.n	8005cbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c76:	e022      	b.n	8005cbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c80:	d11f      	bne.n	8005cc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c86:	e01c      	b.n	8005cc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d903      	bls.n	8005c96 <DMA_CheckFifoParam+0xb6>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d003      	beq.n	8005c9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c94:	e018      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	73fb      	strb	r3, [r7, #15]
      break;
 8005c9a:	e015      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00e      	beq.n	8005cc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
      break;
 8005cac:	e00b      	b.n	8005cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8005cae:	bf00      	nop
 8005cb0:	e00a      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e008      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e006      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e004      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cbe:	bf00      	nop
 8005cc0:	e002      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005cc2:	bf00      	nop
 8005cc4:	e000      	b.n	8005cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8005cc6:	bf00      	nop
    }
  } 
  
  return status; 
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop

08005cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b089      	sub	sp, #36	; 0x24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	e159      	b.n	8005fa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4013      	ands	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	f040 8148 	bne.w	8005fa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d005      	beq.n	8005d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d130      	bne.n	8005d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	2203      	movs	r2, #3
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d60:	2201      	movs	r2, #1
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	fa02 f303 	lsl.w	r3, r2, r3
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	f003 0201 	and.w	r2, r3, #1
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f003 0303 	and.w	r3, r3, #3
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d017      	beq.n	8005dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	2203      	movs	r2, #3
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	43db      	mvns	r3, r3
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4013      	ands	r3, r2
 8005dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f003 0303 	and.w	r3, r3, #3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d123      	bne.n	8005e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	08da      	lsrs	r2, r3, #3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	3208      	adds	r2, #8
 8005ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	220f      	movs	r2, #15
 8005dec:	fa02 f303 	lsl.w	r3, r2, r3
 8005df0:	43db      	mvns	r3, r3
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	4013      	ands	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	08da      	lsrs	r2, r3, #3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3208      	adds	r2, #8
 8005e16:	69b9      	ldr	r1, [r7, #24]
 8005e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	2203      	movs	r2, #3
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4013      	ands	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f003 0203 	and.w	r2, r3, #3
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 80a2 	beq.w	8005fa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	4b57      	ldr	r3, [pc, #348]	; (8005fc0 <HAL_GPIO_Init+0x2e8>)
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	4a56      	ldr	r2, [pc, #344]	; (8005fc0 <HAL_GPIO_Init+0x2e8>)
 8005e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e6e:	4b54      	ldr	r3, [pc, #336]	; (8005fc0 <HAL_GPIO_Init+0x2e8>)
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e7a:	4a52      	ldr	r2, [pc, #328]	; (8005fc4 <HAL_GPIO_Init+0x2ec>)
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	089b      	lsrs	r3, r3, #2
 8005e80:	3302      	adds	r3, #2
 8005e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	220f      	movs	r2, #15
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	43db      	mvns	r3, r3
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a49      	ldr	r2, [pc, #292]	; (8005fc8 <HAL_GPIO_Init+0x2f0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d019      	beq.n	8005eda <HAL_GPIO_Init+0x202>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a48      	ldr	r2, [pc, #288]	; (8005fcc <HAL_GPIO_Init+0x2f4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <HAL_GPIO_Init+0x1fe>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a47      	ldr	r2, [pc, #284]	; (8005fd0 <HAL_GPIO_Init+0x2f8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00d      	beq.n	8005ed2 <HAL_GPIO_Init+0x1fa>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a46      	ldr	r2, [pc, #280]	; (8005fd4 <HAL_GPIO_Init+0x2fc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d007      	beq.n	8005ece <HAL_GPIO_Init+0x1f6>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a45      	ldr	r2, [pc, #276]	; (8005fd8 <HAL_GPIO_Init+0x300>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d101      	bne.n	8005eca <HAL_GPIO_Init+0x1f2>
 8005ec6:	2304      	movs	r3, #4
 8005ec8:	e008      	b.n	8005edc <HAL_GPIO_Init+0x204>
 8005eca:	2307      	movs	r3, #7
 8005ecc:	e006      	b.n	8005edc <HAL_GPIO_Init+0x204>
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e004      	b.n	8005edc <HAL_GPIO_Init+0x204>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e002      	b.n	8005edc <HAL_GPIO_Init+0x204>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <HAL_GPIO_Init+0x204>
 8005eda:	2300      	movs	r3, #0
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	f002 0203 	and.w	r2, r2, #3
 8005ee2:	0092      	lsls	r2, r2, #2
 8005ee4:	4093      	lsls	r3, r2
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eec:	4935      	ldr	r1, [pc, #212]	; (8005fc4 <HAL_GPIO_Init+0x2ec>)
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	089b      	lsrs	r3, r3, #2
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005efa:	4b38      	ldr	r3, [pc, #224]	; (8005fdc <HAL_GPIO_Init+0x304>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	43db      	mvns	r3, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4013      	ands	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f1e:	4a2f      	ldr	r2, [pc, #188]	; (8005fdc <HAL_GPIO_Init+0x304>)
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f24:	4b2d      	ldr	r3, [pc, #180]	; (8005fdc <HAL_GPIO_Init+0x304>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f48:	4a24      	ldr	r2, [pc, #144]	; (8005fdc <HAL_GPIO_Init+0x304>)
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f4e:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <HAL_GPIO_Init+0x304>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f72:	4a1a      	ldr	r2, [pc, #104]	; (8005fdc <HAL_GPIO_Init+0x304>)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f78:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <HAL_GPIO_Init+0x304>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4013      	ands	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f9c:	4a0f      	ldr	r2, [pc, #60]	; (8005fdc <HAL_GPIO_Init+0x304>)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	61fb      	str	r3, [r7, #28]
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b0f      	cmp	r3, #15
 8005fac:	f67f aea2 	bls.w	8005cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	3724      	adds	r7, #36	; 0x24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	40013800 	.word	0x40013800
 8005fc8:	40020000 	.word	0x40020000
 8005fcc:	40020400 	.word	0x40020400
 8005fd0:	40020800 	.word	0x40020800
 8005fd4:	40020c00 	.word	0x40020c00
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40013c00 	.word	0x40013c00

08005fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	807b      	strh	r3, [r7, #2]
 8005fec:	4613      	mov	r3, r2
 8005fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ff0:	787b      	ldrb	r3, [r7, #1]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ff6:	887a      	ldrh	r2, [r7, #2]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ffc:	e003      	b.n	8006006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ffe:	887b      	ldrh	r3, [r7, #2]
 8006000:	041a      	lsls	r2, r3, #16
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	619a      	str	r2, [r3, #24]
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
	...

08006014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800601e:	4b08      	ldr	r3, [pc, #32]	; (8006040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006020:	695a      	ldr	r2, [r3, #20]
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	4013      	ands	r3, r2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d006      	beq.n	8006038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800602a:	4a05      	ldr	r2, [pc, #20]	; (8006040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800602c:	88fb      	ldrh	r3, [r7, #6]
 800602e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	4618      	mov	r0, r3
 8006034:	f7fb fe6a 	bl	8001d0c <HAL_GPIO_EXTI_Callback>
  }
}
 8006038:	bf00      	nop
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40013c00 	.word	0x40013c00

08006044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e12b      	b.n	80062ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7fe f89a 	bl	80041a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2224      	movs	r2, #36	; 0x24
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0201 	bic.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006096:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060a8:	f003 f884 	bl	80091b4 <HAL_RCC_GetPCLK1Freq>
 80060ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	4a81      	ldr	r2, [pc, #516]	; (80062b8 <HAL_I2C_Init+0x274>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d807      	bhi.n	80060c8 <HAL_I2C_Init+0x84>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4a80      	ldr	r2, [pc, #512]	; (80062bc <HAL_I2C_Init+0x278>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	bf94      	ite	ls
 80060c0:	2301      	movls	r3, #1
 80060c2:	2300      	movhi	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	e006      	b.n	80060d6 <HAL_I2C_Init+0x92>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4a7d      	ldr	r2, [pc, #500]	; (80062c0 <HAL_I2C_Init+0x27c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	bf94      	ite	ls
 80060d0:	2301      	movls	r3, #1
 80060d2:	2300      	movhi	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e0e7      	b.n	80062ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a78      	ldr	r2, [pc, #480]	; (80062c4 <HAL_I2C_Init+0x280>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	0c9b      	lsrs	r3, r3, #18
 80060e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	4a6a      	ldr	r2, [pc, #424]	; (80062b8 <HAL_I2C_Init+0x274>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d802      	bhi.n	8006118 <HAL_I2C_Init+0xd4>
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	3301      	adds	r3, #1
 8006116:	e009      	b.n	800612c <HAL_I2C_Init+0xe8>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800611e:	fb02 f303 	mul.w	r3, r2, r3
 8006122:	4a69      	ldr	r2, [pc, #420]	; (80062c8 <HAL_I2C_Init+0x284>)
 8006124:	fba2 2303 	umull	r2, r3, r2, r3
 8006128:	099b      	lsrs	r3, r3, #6
 800612a:	3301      	adds	r3, #1
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	430b      	orrs	r3, r1
 8006132:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800613e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	495c      	ldr	r1, [pc, #368]	; (80062b8 <HAL_I2C_Init+0x274>)
 8006148:	428b      	cmp	r3, r1
 800614a:	d819      	bhi.n	8006180 <HAL_I2C_Init+0x13c>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	1e59      	subs	r1, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	fbb1 f3f3 	udiv	r3, r1, r3
 800615a:	1c59      	adds	r1, r3, #1
 800615c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006160:	400b      	ands	r3, r1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <HAL_I2C_Init+0x138>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1e59      	subs	r1, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	fbb1 f3f3 	udiv	r3, r1, r3
 8006174:	3301      	adds	r3, #1
 8006176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800617a:	e051      	b.n	8006220 <HAL_I2C_Init+0x1dc>
 800617c:	2304      	movs	r3, #4
 800617e:	e04f      	b.n	8006220 <HAL_I2C_Init+0x1dc>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d111      	bne.n	80061ac <HAL_I2C_Init+0x168>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	1e58      	subs	r0, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6859      	ldr	r1, [r3, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	440b      	add	r3, r1
 8006196:	fbb0 f3f3 	udiv	r3, r0, r3
 800619a:	3301      	adds	r3, #1
 800619c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	bf0c      	ite	eq
 80061a4:	2301      	moveq	r3, #1
 80061a6:	2300      	movne	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	e012      	b.n	80061d2 <HAL_I2C_Init+0x18e>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	1e58      	subs	r0, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6859      	ldr	r1, [r3, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	0099      	lsls	r1, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	fbb0 f3f3 	udiv	r3, r0, r3
 80061c2:	3301      	adds	r3, #1
 80061c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bf0c      	ite	eq
 80061cc:	2301      	moveq	r3, #1
 80061ce:	2300      	movne	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <HAL_I2C_Init+0x196>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e022      	b.n	8006220 <HAL_I2C_Init+0x1dc>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10e      	bne.n	8006200 <HAL_I2C_Init+0x1bc>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1e58      	subs	r0, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6859      	ldr	r1, [r3, #4]
 80061ea:	460b      	mov	r3, r1
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	440b      	add	r3, r1
 80061f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80061f4:	3301      	adds	r3, #1
 80061f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fe:	e00f      	b.n	8006220 <HAL_I2C_Init+0x1dc>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	1e58      	subs	r0, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6859      	ldr	r1, [r3, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	440b      	add	r3, r1
 800620e:	0099      	lsls	r1, r3, #2
 8006210:	440b      	add	r3, r1
 8006212:	fbb0 f3f3 	udiv	r3, r0, r3
 8006216:	3301      	adds	r3, #1
 8006218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800621c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	6809      	ldr	r1, [r1, #0]
 8006224:	4313      	orrs	r3, r2
 8006226:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69da      	ldr	r2, [r3, #28]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800624e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6911      	ldr	r1, [r2, #16]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	68d2      	ldr	r2, [r2, #12]
 800625a:	4311      	orrs	r1, r2
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6812      	ldr	r2, [r2, #0]
 8006260:	430b      	orrs	r3, r1
 8006262:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695a      	ldr	r2, [r3, #20]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	000186a0 	.word	0x000186a0
 80062bc:	001e847f 	.word	0x001e847f
 80062c0:	003d08ff 	.word	0x003d08ff
 80062c4:	431bde83 	.word	0x431bde83
 80062c8:	10624dd3 	.word	0x10624dd3

080062cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	461a      	mov	r2, r3
 80062d8:	460b      	mov	r3, r1
 80062da:	817b      	strh	r3, [r7, #10]
 80062dc:	4613      	mov	r3, r2
 80062de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062e0:	f7fe fd08 	bl	8004cf4 <HAL_GetTick>
 80062e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	f040 80e0 	bne.w	80064b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	2319      	movs	r3, #25
 80062fa:	2201      	movs	r2, #1
 80062fc:	4970      	ldr	r1, [pc, #448]	; (80064c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f002 f8be 	bl	8008480 <I2C_WaitOnFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800630a:	2302      	movs	r3, #2
 800630c:	e0d3      	b.n	80064b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_I2C_Master_Transmit+0x50>
 8006318:	2302      	movs	r3, #2
 800631a:	e0cc      	b.n	80064b6 <HAL_I2C_Master_Transmit+0x1ea>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b01      	cmp	r3, #1
 8006330:	d007      	beq.n	8006342 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006350:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2221      	movs	r2, #33	; 0x21
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2210      	movs	r2, #16
 800635e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	893a      	ldrh	r2, [r7, #8]
 8006372:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4a50      	ldr	r2, [pc, #320]	; (80064c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006382:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006384:	8979      	ldrh	r1, [r7, #10]
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	6a3a      	ldr	r2, [r7, #32]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f001 fe80 	bl	8008090 <I2C_MasterRequestWrite>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e08d      	b.n	80064b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639a:	2300      	movs	r3, #0
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80063b0:	e066      	b.n	8006480 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	6a39      	ldr	r1, [r7, #32]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f002 f938 	bl	800862c <I2C_WaitOnTXEFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00d      	beq.n	80063de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d107      	bne.n	80063da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e06b      	b.n	80064b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	781a      	ldrb	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006406:	3b01      	subs	r3, #1
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b04      	cmp	r3, #4
 800641a:	d11b      	bne.n	8006454 <HAL_I2C_Master_Transmit+0x188>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006420:	2b00      	cmp	r3, #0
 8006422:	d017      	beq.n	8006454 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	781a      	ldrb	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	6a39      	ldr	r1, [r7, #32]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f002 f928 	bl	80086ae <I2C_WaitOnBTFFlagUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00d      	beq.n	8006480 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	2b04      	cmp	r3, #4
 800646a:	d107      	bne.n	800647c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e01a      	b.n	80064b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006484:	2b00      	cmp	r3, #0
 8006486:	d194      	bne.n	80063b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e000      	b.n	80064b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
  }
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	00100002 	.word	0x00100002
 80064c4:	ffff0000 	.word	0xffff0000

080064c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08c      	sub	sp, #48	; 0x30
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	461a      	mov	r2, r3
 80064d4:	460b      	mov	r3, r1
 80064d6:	817b      	strh	r3, [r7, #10]
 80064d8:	4613      	mov	r3, r2
 80064da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064dc:	f7fe fc0a 	bl	8004cf4 <HAL_GetTick>
 80064e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	f040 820b 	bne.w	8006906 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	2319      	movs	r3, #25
 80064f6:	2201      	movs	r2, #1
 80064f8:	497c      	ldr	r1, [pc, #496]	; (80066ec <HAL_I2C_Master_Receive+0x224>)
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f001 ffc0 	bl	8008480 <I2C_WaitOnFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006506:	2302      	movs	r3, #2
 8006508:	e1fe      	b.n	8006908 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_I2C_Master_Receive+0x50>
 8006514:	2302      	movs	r3, #2
 8006516:	e1f7      	b.n	8006908 <HAL_I2C_Master_Receive+0x440>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b01      	cmp	r3, #1
 800652c:	d007      	beq.n	800653e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800654c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2222      	movs	r2, #34	; 0x22
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2210      	movs	r2, #16
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	893a      	ldrh	r2, [r7, #8]
 800656e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4a5c      	ldr	r2, [pc, #368]	; (80066f0 <HAL_I2C_Master_Receive+0x228>)
 800657e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006580:	8979      	ldrh	r1, [r7, #10]
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f001 fe04 	bl	8008194 <I2C_MasterRequestRead>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e1b8      	b.n	8006908 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d113      	bne.n	80065c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800659e:	2300      	movs	r3, #0
 80065a0:	623b      	str	r3, [r7, #32]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	623b      	str	r3, [r7, #32]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	623b      	str	r3, [r7, #32]
 80065b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	e18c      	b.n	80068e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d11b      	bne.n	8006606 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065de:	2300      	movs	r3, #0
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	61fb      	str	r3, [r7, #28]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	61fb      	str	r3, [r7, #28]
 80065f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	e16c      	b.n	80068e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660a:	2b02      	cmp	r3, #2
 800660c:	d11b      	bne.n	8006646 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800661c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800662c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800662e:	2300      	movs	r3, #0
 8006630:	61bb      	str	r3, [r7, #24]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	61bb      	str	r3, [r7, #24]
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	e14c      	b.n	80068e0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006654:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800666c:	e138      	b.n	80068e0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006672:	2b03      	cmp	r3, #3
 8006674:	f200 80f1 	bhi.w	800685a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667c:	2b01      	cmp	r3, #1
 800667e:	d123      	bne.n	80066c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006682:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f002 f885 	bl	8008794 <I2C_WaitOnRXNEFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e139      	b.n	8006908 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691a      	ldr	r2, [r3, #16]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066c6:	e10b      	b.n	80068e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d14e      	bne.n	800676e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	2200      	movs	r2, #0
 80066d8:	4906      	ldr	r1, [pc, #24]	; (80066f4 <HAL_I2C_Master_Receive+0x22c>)
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f001 fed0 	bl	8008480 <I2C_WaitOnFlagUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d008      	beq.n	80066f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e10e      	b.n	8006908 <HAL_I2C_Master_Receive+0x440>
 80066ea:	bf00      	nop
 80066ec:	00100002 	.word	0x00100002
 80066f0:	ffff0000 	.word	0xffff0000
 80066f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006762:	b29b      	uxth	r3, r3
 8006764:	3b01      	subs	r3, #1
 8006766:	b29a      	uxth	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800676c:	e0b8      	b.n	80068e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	2200      	movs	r2, #0
 8006776:	4966      	ldr	r1, [pc, #408]	; (8006910 <HAL_I2C_Master_Receive+0x448>)
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f001 fe81 	bl	8008480 <I2C_WaitOnFlagUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e0bf      	b.n	8006908 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691a      	ldr	r2, [r3, #16]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	2200      	movs	r2, #0
 80067d2:	494f      	ldr	r1, [pc, #316]	; (8006910 <HAL_I2C_Master_Receive+0x448>)
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f001 fe53 	bl	8008480 <I2C_WaitOnFlagUntilTimeout>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e091      	b.n	8006908 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681c:	b29b      	uxth	r3, r3
 800681e:	3b01      	subs	r3, #1
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006858:	e042      	b.n	80068e0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800685a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f001 ff98 	bl	8008794 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e04c      	b.n	8006908 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d118      	bne.n	80068e0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f47f aec2 	bne.w	800666e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	e000      	b.n	8006908 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006906:	2302      	movs	r3, #2
  }
}
 8006908:	4618      	mov	r0, r3
 800690a:	3728      	adds	r7, #40	; 0x28
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	00010004 	.word	0x00010004

08006914 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006934:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	2b10      	cmp	r3, #16
 8006942:	d003      	beq.n	800694c <HAL_I2C_EV_IRQHandler+0x38>
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b40      	cmp	r3, #64	; 0x40
 8006948:	f040 80b1 	bne.w	8006aae <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10d      	bne.n	8006982 <HAL_I2C_EV_IRQHandler+0x6e>
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800696c:	d003      	beq.n	8006976 <HAL_I2C_EV_IRQHandler+0x62>
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006974:	d101      	bne.n	800697a <HAL_I2C_EV_IRQHandler+0x66>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <HAL_I2C_EV_IRQHandler+0x68>
 800697a:	2300      	movs	r3, #0
 800697c:	2b01      	cmp	r3, #1
 800697e:	f000 8114 	beq.w	8006baa <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <HAL_I2C_EV_IRQHandler+0x90>
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006992:	2b00      	cmp	r3, #0
 8006994:	d006      	beq.n	80069a4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 ff81 	bl	800889e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fd5e 	bl	800745e <I2C_Master_SB>
 80069a2:	e083      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d008      	beq.n	80069c0 <HAL_I2C_EV_IRQHandler+0xac>
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fdd6 	bl	800756a <I2C_Master_ADD10>
 80069be:	e075      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d008      	beq.n	80069dc <HAL_I2C_EV_IRQHandler+0xc8>
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fdf2 	bl	80075be <I2C_Master_ADDR>
 80069da:	e067      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d036      	beq.n	8006a54 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f4:	f000 80db 	beq.w	8006bae <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00d      	beq.n	8006a1e <HAL_I2C_EV_IRQHandler+0x10a>
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <HAL_I2C_EV_IRQHandler+0x10a>
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f9d6 	bl	8006dc8 <I2C_MasterTransmit_TXE>
 8006a1c:	e046      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80c2 	beq.w	8006bae <HAL_I2C_EV_IRQHandler+0x29a>
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80bc 	beq.w	8006bae <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	2b21      	cmp	r3, #33	; 0x21
 8006a3a:	d103      	bne.n	8006a44 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fa5f 	bl	8006f00 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a42:	e0b4      	b.n	8006bae <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b40      	cmp	r3, #64	; 0x40
 8006a48:	f040 80b1 	bne.w	8006bae <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 facd 	bl	8006fec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a52:	e0ac      	b.n	8006bae <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a62:	f000 80a4 	beq.w	8006bae <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00d      	beq.n	8006a8c <HAL_I2C_EV_IRQHandler+0x178>
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d008      	beq.n	8006a8c <HAL_I2C_EV_IRQHandler+0x178>
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d103      	bne.n	8006a8c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fb45 	bl	8007114 <I2C_MasterReceive_RXNE>
 8006a8a:	e00f      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f003 0304 	and.w	r3, r3, #4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 808b 	beq.w	8006bae <HAL_I2C_EV_IRQHandler+0x29a>
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8085 	beq.w	8006bae <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fbf0 	bl	800728a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aaa:	e080      	b.n	8006bae <HAL_I2C_EV_IRQHandler+0x29a>
 8006aac:	e07f      	b.n	8006bae <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	61fb      	str	r3, [r7, #28]
 8006abe:	e007      	b.n	8006ad0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d011      	beq.n	8006afe <HAL_I2C_EV_IRQHandler+0x1ea>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00c      	beq.n	8006afe <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006af4:	69b9      	ldr	r1, [r7, #24]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 ffb0 	bl	8007a5c <I2C_Slave_ADDR>
 8006afc:	e05a      	b.n	8006bb4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f003 0310 	and.w	r3, r3, #16
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d008      	beq.n	8006b1a <HAL_I2C_EV_IRQHandler+0x206>
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 ffea 	bl	8007aec <I2C_Slave_STOPF>
 8006b18:	e04c      	b.n	8006bb4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b1a:	7bbb      	ldrb	r3, [r7, #14]
 8006b1c:	2b21      	cmp	r3, #33	; 0x21
 8006b1e:	d002      	beq.n	8006b26 <HAL_I2C_EV_IRQHandler+0x212>
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	2b29      	cmp	r3, #41	; 0x29
 8006b24:	d120      	bne.n	8006b68 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00d      	beq.n	8006b4c <HAL_I2C_EV_IRQHandler+0x238>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d008      	beq.n	8006b4c <HAL_I2C_EV_IRQHandler+0x238>
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d103      	bne.n	8006b4c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fecb 	bl	80078e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b4a:	e032      	b.n	8006bb2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d02d      	beq.n	8006bb2 <HAL_I2C_EV_IRQHandler+0x29e>
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d028      	beq.n	8006bb2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fefa 	bl	800795a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b66:	e024      	b.n	8006bb2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00d      	beq.n	8006b8e <HAL_I2C_EV_IRQHandler+0x27a>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d008      	beq.n	8006b8e <HAL_I2C_EV_IRQHandler+0x27a>
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 ff08 	bl	800799c <I2C_SlaveReceive_RXNE>
 8006b8c:	e012      	b.n	8006bb4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00d      	beq.n	8006bb4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 ff38 	bl	8007a18 <I2C_SlaveReceive_BTF>
 8006ba8:	e004      	b.n	8006bb4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006baa:	bf00      	nop
 8006bac:	e002      	b.n	8006bb4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bae:	bf00      	nop
 8006bb0:	e000      	b.n	8006bb4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bb2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006bb4:	3720      	adds	r7, #32
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b08a      	sub	sp, #40	; 0x28
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	695b      	ldr	r3, [r3, #20]
 8006bc8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bdc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00d      	beq.n	8006c04 <HAL_I2C_ER_IRQHandler+0x4a>
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d008      	beq.n	8006c04 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	f043 0301 	orr.w	r3, r3, #1
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c02:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00d      	beq.n	8006c2a <HAL_I2C_ER_IRQHandler+0x70>
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d008      	beq.n	8006c2a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	f043 0302 	orr.w	r3, r3, #2
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006c28:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d03e      	beq.n	8006cb2 <HAL_I2C_ER_IRQHandler+0xf8>
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d039      	beq.n	8006cb2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8006c3e:	7efb      	ldrb	r3, [r7, #27]
 8006c40:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c50:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c56:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006c58:	7ebb      	ldrb	r3, [r7, #26]
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	d112      	bne.n	8006c84 <HAL_I2C_ER_IRQHandler+0xca>
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10f      	bne.n	8006c84 <HAL_I2C_ER_IRQHandler+0xca>
 8006c64:	7cfb      	ldrb	r3, [r7, #19]
 8006c66:	2b21      	cmp	r3, #33	; 0x21
 8006c68:	d008      	beq.n	8006c7c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006c6a:	7cfb      	ldrb	r3, [r7, #19]
 8006c6c:	2b29      	cmp	r3, #41	; 0x29
 8006c6e:	d005      	beq.n	8006c7c <HAL_I2C_ER_IRQHandler+0xc2>
 8006c70:	7cfb      	ldrb	r3, [r7, #19]
 8006c72:	2b28      	cmp	r3, #40	; 0x28
 8006c74:	d106      	bne.n	8006c84 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b21      	cmp	r3, #33	; 0x21
 8006c7a:	d103      	bne.n	8006c84 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 f865 	bl	8007d4c <I2C_Slave_AF>
 8006c82:	e016      	b.n	8006cb2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c8c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	f043 0304 	orr.w	r3, r3, #4
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006c96:	7efb      	ldrb	r3, [r7, #27]
 8006c98:	2b10      	cmp	r3, #16
 8006c9a:	d002      	beq.n	8006ca2 <HAL_I2C_ER_IRQHandler+0xe8>
 8006c9c:	7efb      	ldrb	r3, [r7, #27]
 8006c9e:	2b40      	cmp	r3, #64	; 0x40
 8006ca0:	d107      	bne.n	8006cb2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00d      	beq.n	8006cd8 <HAL_I2C_ER_IRQHandler+0x11e>
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d008      	beq.n	8006cd8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	f043 0308 	orr.w	r3, r3, #8
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006cd6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d008      	beq.n	8006cf0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 f89e 	bl	8007e2c <I2C_ITError>
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	3728      	adds	r7, #40	; 0x28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
 8006d54:	4613      	mov	r3, r2
 8006d56:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d150      	bne.n	8006e90 <I2C_MasterTransmit_TXE+0xc8>
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	2b21      	cmp	r3, #33	; 0x21
 8006df2:	d14d      	bne.n	8006e90 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d01d      	beq.n	8006e36 <I2C_MasterTransmit_TXE+0x6e>
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2b20      	cmp	r3, #32
 8006dfe:	d01a      	beq.n	8006e36 <I2C_MasterTransmit_TXE+0x6e>
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e06:	d016      	beq.n	8006e36 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e16:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2211      	movs	r2, #17
 8006e1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff ff62 	bl	8006cf8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e34:	e060      	b.n	8006ef8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e44:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e54:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	d107      	bne.n	8006e80 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7ff ff7d 	bl	8006d78 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e7e:	e03b      	b.n	8006ef8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff ff35 	bl	8006cf8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e8e:	e033      	b.n	8006ef8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	2b21      	cmp	r3, #33	; 0x21
 8006e94:	d005      	beq.n	8006ea2 <I2C_MasterTransmit_TXE+0xda>
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	2b40      	cmp	r3, #64	; 0x40
 8006e9a:	d12d      	bne.n	8006ef8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b22      	cmp	r3, #34	; 0x22
 8006ea0:	d12a      	bne.n	8006ef8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d108      	bne.n	8006ebe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006ebc:	e01c      	b.n	8006ef8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b40      	cmp	r3, #64	; 0x40
 8006ec8:	d103      	bne.n	8006ed2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f88e 	bl	8006fec <I2C_MemoryTransmit_TXE_BTF>
}
 8006ed0:	e012      	b.n	8006ef8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	781a      	ldrb	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006ef6:	e7ff      	b.n	8006ef8 <I2C_MasterTransmit_TXE+0x130>
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b21      	cmp	r3, #33	; 0x21
 8006f18:	d164      	bne.n	8006fe4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d012      	beq.n	8006f4a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	781a      	ldrb	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006f48:	e04c      	b.n	8006fe4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d01d      	beq.n	8006f8c <I2C_MasterTransmit_BTF+0x8c>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d01a      	beq.n	8006f8c <I2C_MasterTransmit_BTF+0x8c>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f5c:	d016      	beq.n	8006f8c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f6c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2211      	movs	r2, #17
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff feb7 	bl	8006cf8 <HAL_I2C_MasterTxCpltCallback>
}
 8006f8a:	e02b      	b.n	8006fe4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f9a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006faa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b40      	cmp	r3, #64	; 0x40
 8006fc4:	d107      	bne.n	8006fd6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7ff fed2 	bl	8006d78 <HAL_I2C_MemTxCpltCallback>
}
 8006fd4:	e006      	b.n	8006fe4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff fe8a 	bl	8006cf8 <HAL_I2C_MasterTxCpltCallback>
}
 8006fe4:	bf00      	nop
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007000:	2b00      	cmp	r3, #0
 8007002:	d11d      	bne.n	8007040 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d10b      	bne.n	8007024 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007010:	b2da      	uxtb	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701c:	1c9a      	adds	r2, r3, #2
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007022:	e073      	b.n	800710c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007028:	b29b      	uxth	r3, r3
 800702a:	121b      	asrs	r3, r3, #8
 800702c:	b2da      	uxtb	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800703e:	e065      	b.n	800710c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007044:	2b01      	cmp	r3, #1
 8007046:	d10b      	bne.n	8007060 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800704c:	b2da      	uxtb	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800705e:	e055      	b.n	800710c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007064:	2b02      	cmp	r3, #2
 8007066:	d151      	bne.n	800710c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	2b22      	cmp	r3, #34	; 0x22
 800706c:	d10d      	bne.n	800708a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800707c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007088:	e040      	b.n	800710c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d015      	beq.n	80070c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	2b21      	cmp	r3, #33	; 0x21
 8007098:	d112      	bne.n	80070c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	781a      	ldrb	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	3b01      	subs	r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070be:	e025      	b.n	800710c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d120      	bne.n	800710c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
 80070cc:	2b21      	cmp	r3, #33	; 0x21
 80070ce:	d11d      	bne.n	800710c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070de:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff fe36 	bl	8006d78 <HAL_I2C_MemTxCpltCallback>
}
 800710c:	bf00      	nop
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b22      	cmp	r3, #34	; 0x22
 8007126:	f040 80ac 	bne.w	8007282 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712e:	b29b      	uxth	r3, r3
 8007130:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b03      	cmp	r3, #3
 8007136:	d921      	bls.n	800717c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b29a      	uxth	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b03      	cmp	r3, #3
 8007166:	f040 808c 	bne.w	8007282 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007178:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800717a:	e082      	b.n	8007282 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	2b02      	cmp	r3, #2
 8007182:	d075      	beq.n	8007270 <I2C_MasterReceive_RXNE+0x15c>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d002      	beq.n	8007190 <I2C_MasterReceive_RXNE+0x7c>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d16f      	bne.n	8007270 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 facd 	bl	8008730 <I2C_WaitOnSTOPRequestThroughIT>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d142      	bne.n	8007222 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d8:	b29b      	uxth	r3, r3
 80071da:	3b01      	subs	r3, #1
 80071dc:	b29a      	uxth	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b40      	cmp	r3, #64	; 0x40
 80071f4:	d10a      	bne.n	800720c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff fdc1 	bl	8006d8c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800720a:	e03a      	b.n	8007282 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2212      	movs	r2, #18
 8007218:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fd76 	bl	8006d0c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007220:	e02f      	b.n	8007282 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007230:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	b2d2      	uxtb	r2, r2
 800723e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff fd99 	bl	8006da0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800726e:	e008      	b.n	8007282 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800727e:	605a      	str	r2, [r3, #4]
}
 8007280:	e7ff      	b.n	8007282 <I2C_MasterReceive_RXNE+0x16e>
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800729c:	b29b      	uxth	r3, r3
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d11b      	bne.n	80072da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	3b01      	subs	r3, #1
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80072d8:	e0bd      	b.n	8007456 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d129      	bne.n	8007338 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d00a      	beq.n	8007310 <I2C_MasterReceive_BTF+0x86>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d007      	beq.n	8007310 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800730e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	691a      	ldr	r2, [r3, #16]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732c:	b29b      	uxth	r3, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	b29a      	uxth	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007336:	e08e      	b.n	8007456 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b02      	cmp	r3, #2
 8007340:	d176      	bne.n	8007430 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d002      	beq.n	800734e <I2C_MasterReceive_BTF+0xc4>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b10      	cmp	r3, #16
 800734c:	d108      	bne.n	8007360 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	e019      	b.n	8007394 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b04      	cmp	r3, #4
 8007364:	d002      	beq.n	800736c <I2C_MasterReceive_BTF+0xe2>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b02      	cmp	r3, #2
 800736a:	d108      	bne.n	800737e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	e00a      	b.n	8007394 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b10      	cmp	r3, #16
 8007382:	d007      	beq.n	8007394 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007392:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691a      	ldr	r2, [r3, #16]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691a      	ldr	r2, [r3, #16]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	3b01      	subs	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80073ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b40      	cmp	r3, #64	; 0x40
 8007402:	d10a      	bne.n	800741a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff fcba 	bl	8006d8c <HAL_I2C_MemRxCpltCallback>
}
 8007418:	e01d      	b.n	8007456 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2212      	movs	r2, #18
 8007426:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff fc6f 	bl	8006d0c <HAL_I2C_MasterRxCpltCallback>
}
 800742e:	e012      	b.n	8007456 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691a      	ldr	r2, [r3, #16]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744c:	b29b      	uxth	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007456:	bf00      	nop
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b40      	cmp	r3, #64	; 0x40
 8007470:	d117      	bne.n	80074a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800747e:	b2db      	uxtb	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800748a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800748c:	e067      	b.n	800755e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007492:	b2db      	uxtb	r3, r3
 8007494:	f043 0301 	orr.w	r3, r3, #1
 8007498:	b2da      	uxtb	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	611a      	str	r2, [r3, #16]
}
 80074a0:	e05d      	b.n	800755e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074aa:	d133      	bne.n	8007514 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b21      	cmp	r3, #33	; 0x21
 80074b6:	d109      	bne.n	80074cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	461a      	mov	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074c8:	611a      	str	r2, [r3, #16]
 80074ca:	e008      	b.n	80074de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	f043 0301 	orr.w	r3, r3, #1
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d004      	beq.n	80074f0 <I2C_Master_SB+0x92>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d108      	bne.n	8007502 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d032      	beq.n	800755e <I2C_Master_SB+0x100>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d02d      	beq.n	800755e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007510:	605a      	str	r2, [r3, #4]
}
 8007512:	e024      	b.n	800755e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10e      	bne.n	800753a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007520:	b29b      	uxth	r3, r3
 8007522:	11db      	asrs	r3, r3, #7
 8007524:	b2db      	uxtb	r3, r3
 8007526:	f003 0306 	and.w	r3, r3, #6
 800752a:	b2db      	uxtb	r3, r3
 800752c:	f063 030f 	orn	r3, r3, #15
 8007530:	b2da      	uxtb	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	611a      	str	r2, [r3, #16]
}
 8007538:	e011      	b.n	800755e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753e:	2b01      	cmp	r3, #1
 8007540:	d10d      	bne.n	800755e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007546:	b29b      	uxth	r3, r3
 8007548:	11db      	asrs	r3, r3, #7
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 0306 	and.w	r3, r3, #6
 8007550:	b2db      	uxtb	r3, r3
 8007552:	f063 030e 	orn	r3, r3, #14
 8007556:	b2da      	uxtb	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	611a      	str	r2, [r3, #16]
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007576:	b2da      	uxtb	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007582:	2b00      	cmp	r3, #0
 8007584:	d004      	beq.n	8007590 <I2C_Master_ADD10+0x26>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758c:	2b00      	cmp	r3, #0
 800758e:	d108      	bne.n	80075a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00c      	beq.n	80075b2 <I2C_Master_ADD10+0x48>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d007      	beq.n	80075b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075b0:	605a      	str	r2, [r3, #4]
  }
}
 80075b2:	bf00      	nop
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80075be:	b480      	push	{r7}
 80075c0:	b091      	sub	sp, #68	; 0x44
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b22      	cmp	r3, #34	; 0x22
 80075e6:	f040 8169 	bne.w	80078bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10f      	bne.n	8007612 <I2C_Master_ADDR+0x54>
 80075f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d10b      	bne.n	8007612 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075fa:	2300      	movs	r3, #0
 80075fc:	633b      	str	r3, [r7, #48]	; 0x30
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	633b      	str	r3, [r7, #48]	; 0x30
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	633b      	str	r3, [r7, #48]	; 0x30
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	e160      	b.n	80078d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007616:	2b00      	cmp	r3, #0
 8007618:	d11d      	bne.n	8007656 <I2C_Master_ADDR+0x98>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007622:	d118      	bne.n	8007656 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007624:	2300      	movs	r3, #0
 8007626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007638:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007648:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	651a      	str	r2, [r3, #80]	; 0x50
 8007654:	e13e      	b.n	80078d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d113      	bne.n	8007688 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007660:	2300      	movs	r3, #0
 8007662:	62bb      	str	r3, [r7, #40]	; 0x28
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	62bb      	str	r3, [r7, #40]	; 0x28
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
 8007674:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	e115      	b.n	80078b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768c:	b29b      	uxth	r3, r3
 800768e:	2b01      	cmp	r3, #1
 8007690:	f040 808a 	bne.w	80077a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800769a:	d137      	bne.n	800770c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ba:	d113      	bne.n	80076e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076cc:	2300      	movs	r3, #0
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	e0e7      	b.n	80078b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076e4:	2300      	movs	r3, #0
 80076e6:	623b      	str	r3, [r7, #32]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	623b      	str	r3, [r7, #32]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	623b      	str	r3, [r7, #32]
 80076f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	e0d3      	b.n	80078b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800770c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770e:	2b08      	cmp	r3, #8
 8007710:	d02e      	beq.n	8007770 <I2C_Master_ADDR+0x1b2>
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	2b20      	cmp	r3, #32
 8007716:	d02b      	beq.n	8007770 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771a:	2b12      	cmp	r3, #18
 800771c:	d102      	bne.n	8007724 <I2C_Master_ADDR+0x166>
 800771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007720:	2b01      	cmp	r3, #1
 8007722:	d125      	bne.n	8007770 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	2b04      	cmp	r3, #4
 8007728:	d00e      	beq.n	8007748 <I2C_Master_ADDR+0x18a>
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	2b02      	cmp	r3, #2
 800772e:	d00b      	beq.n	8007748 <I2C_Master_ADDR+0x18a>
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	2b10      	cmp	r3, #16
 8007734:	d008      	beq.n	8007748 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	e007      	b.n	8007758 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007756:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007758:	2300      	movs	r3, #0
 800775a:	61fb      	str	r3, [r7, #28]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	e0a1      	b.n	80078b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800777e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007780:	2300      	movs	r3, #0
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	61bb      	str	r3, [r7, #24]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	61bb      	str	r3, [r7, #24]
 8007794:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	e085      	b.n	80078b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d14d      	bne.n	800784e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d016      	beq.n	80077e6 <I2C_Master_ADDR+0x228>
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d013      	beq.n	80077e6 <I2C_Master_ADDR+0x228>
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	2b10      	cmp	r3, #16
 80077c2:	d010      	beq.n	80077e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	e007      	b.n	80077f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007804:	d117      	bne.n	8007836 <I2C_Master_ADDR+0x278>
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800780c:	d00b      	beq.n	8007826 <I2C_Master_ADDR+0x268>
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	2b01      	cmp	r3, #1
 8007812:	d008      	beq.n	8007826 <I2C_Master_ADDR+0x268>
 8007814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007816:	2b08      	cmp	r3, #8
 8007818:	d005      	beq.n	8007826 <I2C_Master_ADDR+0x268>
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	2b10      	cmp	r3, #16
 800781e:	d002      	beq.n	8007826 <I2C_Master_ADDR+0x268>
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	2b20      	cmp	r3, #32
 8007824:	d107      	bne.n	8007836 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007834:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007836:	2300      	movs	r3, #0
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	e032      	b.n	80078b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800785c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800786c:	d117      	bne.n	800789e <I2C_Master_ADDR+0x2e0>
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007874:	d00b      	beq.n	800788e <I2C_Master_ADDR+0x2d0>
 8007876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007878:	2b01      	cmp	r3, #1
 800787a:	d008      	beq.n	800788e <I2C_Master_ADDR+0x2d0>
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	2b08      	cmp	r3, #8
 8007880:	d005      	beq.n	800788e <I2C_Master_ADDR+0x2d0>
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	2b10      	cmp	r3, #16
 8007886:	d002      	beq.n	800788e <I2C_Master_ADDR+0x2d0>
 8007888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788a:	2b20      	cmp	r3, #32
 800788c:	d107      	bne.n	800789e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800789c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800789e:	2300      	movs	r3, #0
 80078a0:	613b      	str	r3, [r7, #16]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	613b      	str	r3, [r7, #16]
 80078b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80078ba:	e00b      	b.n	80078d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
}
 80078d2:	e7ff      	b.n	80078d4 <I2C_Master_ADDR+0x316>
 80078d4:	bf00      	nop
 80078d6:	3744      	adds	r7, #68	; 0x44
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d02b      	beq.n	8007952 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007914:	b29b      	uxth	r3, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	b29a      	uxth	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007922:	b29b      	uxth	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d114      	bne.n	8007952 <I2C_SlaveTransmit_TXE+0x72>
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	2b29      	cmp	r3, #41	; 0x29
 800792c:	d111      	bne.n	8007952 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800793c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2221      	movs	r2, #33	; 0x21
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2228      	movs	r2, #40	; 0x28
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff f9e7 	bl	8006d20 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007952:	bf00      	nop
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007966:	b29b      	uxth	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d011      	beq.n	8007990 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	781a      	ldrb	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d02c      	beq.n	8007a10 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	b2d2      	uxtb	r2, r2
 80079c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d114      	bne.n	8007a10 <I2C_SlaveReceive_RXNE+0x74>
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	2b2a      	cmp	r3, #42	; 0x2a
 80079ea:	d111      	bne.n	8007a10 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079fa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2222      	movs	r2, #34	; 0x22
 8007a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2228      	movs	r2, #40	; 0x28
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff f992 	bl	8006d34 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007a10:	bf00      	nop
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d012      	beq.n	8007a50 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	691a      	ldr	r2, [r3, #16]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007a76:	2b28      	cmp	r3, #40	; 0x28
 8007a78:	d125      	bne.n	8007ac6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a88:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007a94:	2301      	movs	r3, #1
 8007a96:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d103      	bne.n	8007aaa <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	81bb      	strh	r3, [r7, #12]
 8007aa8:	e002      	b.n	8007ab0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007ab8:	89ba      	ldrh	r2, [r7, #12]
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff f942 	bl	8006d48 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ac4:	e00e      	b.n	8007ae4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60bb      	str	r3, [r7, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	60bb      	str	r3, [r7, #8]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	60bb      	str	r3, [r7, #8]
 8007ada:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007ae4:	bf00      	nop
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	60bb      	str	r3, [r7, #8]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	60bb      	str	r3, [r7, #8]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0201 	orr.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b48:	d172      	bne.n	8007c30 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	2b22      	cmp	r3, #34	; 0x22
 8007b4e:	d002      	beq.n	8007b56 <I2C_Slave_STOPF+0x6a>
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	2b2a      	cmp	r3, #42	; 0x2a
 8007b54:	d135      	bne.n	8007bc2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d005      	beq.n	8007b7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	f043 0204 	orr.w	r2, r3, #4
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fd ffb4 	bl	8005afc <HAL_DMA_GetState>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d049      	beq.n	8007c2e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	4a69      	ldr	r2, [pc, #420]	; (8007d44 <I2C_Slave_STOPF+0x258>)
 8007ba0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fd fdfc 	bl	80057a4 <HAL_DMA_Abort_IT>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d03d      	beq.n	8007c2e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bc0:	e035      	b.n	8007c2e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	f043 0204 	orr.w	r2, r3, #4
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bf4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fd ff7e 	bl	8005afc <HAL_DMA_GetState>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d014      	beq.n	8007c30 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0a:	4a4e      	ldr	r2, [pc, #312]	; (8007d44 <I2C_Slave_STOPF+0x258>)
 8007c0c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fd fdc6 	bl	80057a4 <HAL_DMA_Abort_IT>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d008      	beq.n	8007c30 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
 8007c2c:	e000      	b.n	8007c30 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c2e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d03e      	beq.n	8007cb8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b04      	cmp	r3, #4
 8007c46:	d112      	bne.n	8007c6e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	691a      	ldr	r2, [r3, #16]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c78:	2b40      	cmp	r3, #64	; 0x40
 8007c7a:	d112      	bne.n	8007ca2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	f043 0204 	orr.w	r2, r3, #4
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f8b3 	bl	8007e2c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007cc6:	e039      	b.n	8007d3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b2a      	cmp	r3, #42	; 0x2a
 8007ccc:	d109      	bne.n	8007ce2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2228      	movs	r2, #40	; 0x28
 8007cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff f829 	bl	8006d34 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b28      	cmp	r3, #40	; 0x28
 8007cec:	d111      	bne.n	8007d12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <I2C_Slave_STOPF+0x25c>)
 8007cf2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff f82a 	bl	8006d64 <HAL_I2C_ListenCpltCallback>
}
 8007d10:	e014      	b.n	8007d3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d16:	2b22      	cmp	r3, #34	; 0x22
 8007d18:	d002      	beq.n	8007d20 <I2C_Slave_STOPF+0x234>
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	2b22      	cmp	r3, #34	; 0x22
 8007d1e:	d10d      	bne.n	8007d3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7fe fffc 	bl	8006d34 <HAL_I2C_SlaveRxCpltCallback>
}
 8007d3c:	bf00      	nop
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	08008331 	.word	0x08008331
 8007d48:	ffff0000 	.word	0xffff0000

08007d4c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d60:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d002      	beq.n	8007d6e <I2C_Slave_AF+0x22>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2b20      	cmp	r3, #32
 8007d6c:	d129      	bne.n	8007dc2 <I2C_Slave_AF+0x76>
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	2b28      	cmp	r3, #40	; 0x28
 8007d72:	d126      	bne.n	8007dc2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a2c      	ldr	r2, [pc, #176]	; (8007e28 <I2C_Slave_AF+0xdc>)
 8007d78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d88:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d92:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007da2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7fe ffd2 	bl	8006d64 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007dc0:	e02e      	b.n	8007e20 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	2b21      	cmp	r3, #33	; 0x21
 8007dc6:	d126      	bne.n	8007e16 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a17      	ldr	r2, [pc, #92]	; (8007e28 <I2C_Slave_AF+0xdc>)
 8007dcc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2221      	movs	r2, #33	; 0x21
 8007dd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007df2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007dfc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e0c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fe ff86 	bl	8006d20 <HAL_I2C_SlaveTxCpltCallback>
}
 8007e14:	e004      	b.n	8007e20 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e1e:	615a      	str	r2, [r3, #20]
}
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	ffff0000 	.word	0xffff0000

08007e2c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
 8007e46:	2b10      	cmp	r3, #16
 8007e48:	d002      	beq.n	8007e50 <I2C_ITError+0x24>
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	2b40      	cmp	r3, #64	; 0x40
 8007e4e:	d10a      	bne.n	8007e66 <I2C_ITError+0x3a>
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	2b22      	cmp	r3, #34	; 0x22
 8007e54:	d107      	bne.n	8007e66 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e6c:	2b28      	cmp	r3, #40	; 0x28
 8007e6e:	d107      	bne.n	8007e80 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2228      	movs	r2, #40	; 0x28
 8007e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e7e:	e015      	b.n	8007eac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e8e:	d00a      	beq.n	8007ea6 <I2C_ITError+0x7a>
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	2b60      	cmp	r3, #96	; 0x60
 8007e94:	d007      	beq.n	8007ea6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eba:	d162      	bne.n	8007f82 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007eca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d020      	beq.n	8007f1c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ede:	4a6a      	ldr	r2, [pc, #424]	; (8008088 <I2C_ITError+0x25c>)
 8007ee0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fd fc5c 	bl	80057a4 <HAL_DMA_Abort_IT>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 8089 	beq.w	8008006 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0201 	bic.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f16:	4610      	mov	r0, r2
 8007f18:	4798      	blx	r3
 8007f1a:	e074      	b.n	8008006 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f20:	4a59      	ldr	r2, [pc, #356]	; (8008088 <I2C_ITError+0x25c>)
 8007f22:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fd fc3b 	bl	80057a4 <HAL_DMA_Abort_IT>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d068      	beq.n	8008006 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3e:	2b40      	cmp	r3, #64	; 0x40
 8007f40:	d10b      	bne.n	8007f5a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	b2d2      	uxtb	r2, r2
 8007f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0201 	bic.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	4798      	blx	r3
 8007f80:	e041      	b.n	8008006 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b60      	cmp	r3, #96	; 0x60
 8007f8c:	d125      	bne.n	8007fda <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa6:	2b40      	cmp	r3, #64	; 0x40
 8007fa8:	d10b      	bne.n	8007fc2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0201 	bic.w	r2, r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7fe feee 	bl	8006db4 <HAL_I2C_AbortCpltCallback>
 8007fd8:	e015      	b.n	8008006 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe4:	2b40      	cmp	r3, #64	; 0x40
 8007fe6:	d10b      	bne.n	8008000 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691a      	ldr	r2, [r3, #16]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff2:	b2d2      	uxtb	r2, r2
 8007ff4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7fe fecd 	bl	8006da0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d10e      	bne.n	8008034 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800801c:	2b00      	cmp	r3, #0
 800801e:	d109      	bne.n	8008034 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008026:	2b00      	cmp	r3, #0
 8008028:	d104      	bne.n	8008034 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008030:	2b00      	cmp	r3, #0
 8008032:	d007      	beq.n	8008044 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008042:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800804a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b04      	cmp	r3, #4
 8008056:	d113      	bne.n	8008080 <I2C_ITError+0x254>
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	2b28      	cmp	r3, #40	; 0x28
 800805c:	d110      	bne.n	8008080 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a0a      	ldr	r2, [pc, #40]	; (800808c <I2C_ITError+0x260>)
 8008062:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2220      	movs	r2, #32
 800806e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fe fe72 	bl	8006d64 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008080:	bf00      	nop
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	08008331 	.word	0x08008331
 800808c:	ffff0000 	.word	0xffff0000

08008090 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af02      	add	r7, sp, #8
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	607a      	str	r2, [r7, #4]
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	460b      	mov	r3, r1
 800809e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b08      	cmp	r3, #8
 80080aa:	d006      	beq.n	80080ba <I2C_MasterRequestWrite+0x2a>
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d003      	beq.n	80080ba <I2C_MasterRequestWrite+0x2a>
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080b8:	d108      	bne.n	80080cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	e00b      	b.n	80080e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d0:	2b12      	cmp	r3, #18
 80080d2:	d107      	bne.n	80080e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 f9c5 	bl	8008480 <I2C_WaitOnFlagUntilTimeout>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00d      	beq.n	8008118 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800810a:	d103      	bne.n	8008114 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008112:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008114:	2303      	movs	r3, #3
 8008116:	e035      	b.n	8008184 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008120:	d108      	bne.n	8008134 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008122:	897b      	ldrh	r3, [r7, #10]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	461a      	mov	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008130:	611a      	str	r2, [r3, #16]
 8008132:	e01b      	b.n	800816c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008134:	897b      	ldrh	r3, [r7, #10]
 8008136:	11db      	asrs	r3, r3, #7
 8008138:	b2db      	uxtb	r3, r3
 800813a:	f003 0306 	and.w	r3, r3, #6
 800813e:	b2db      	uxtb	r3, r3
 8008140:	f063 030f 	orn	r3, r3, #15
 8008144:	b2da      	uxtb	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	490e      	ldr	r1, [pc, #56]	; (800818c <I2C_MasterRequestWrite+0xfc>)
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 f9eb 	bl	800852e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e010      	b.n	8008184 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008162:	897b      	ldrh	r3, [r7, #10]
 8008164:	b2da      	uxtb	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	4907      	ldr	r1, [pc, #28]	; (8008190 <I2C_MasterRequestWrite+0x100>)
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 f9db 	bl	800852e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	00010008 	.word	0x00010008
 8008190:	00010002 	.word	0x00010002

08008194 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af02      	add	r7, sp, #8
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	607a      	str	r2, [r7, #4]
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	460b      	mov	r3, r1
 80081a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d006      	beq.n	80081ce <I2C_MasterRequestRead+0x3a>
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d003      	beq.n	80081ce <I2C_MasterRequestRead+0x3a>
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081cc:	d108      	bne.n	80081e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	e00b      	b.n	80081f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	2b11      	cmp	r3, #17
 80081e6:	d107      	bne.n	80081f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 f93b 	bl	8008480 <I2C_WaitOnFlagUntilTimeout>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00d      	beq.n	800822c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800821e:	d103      	bne.n	8008228 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008226:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e079      	b.n	8008320 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008234:	d108      	bne.n	8008248 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008236:	897b      	ldrh	r3, [r7, #10]
 8008238:	b2db      	uxtb	r3, r3
 800823a:	f043 0301 	orr.w	r3, r3, #1
 800823e:	b2da      	uxtb	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	611a      	str	r2, [r3, #16]
 8008246:	e05f      	b.n	8008308 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008248:	897b      	ldrh	r3, [r7, #10]
 800824a:	11db      	asrs	r3, r3, #7
 800824c:	b2db      	uxtb	r3, r3
 800824e:	f003 0306 	and.w	r3, r3, #6
 8008252:	b2db      	uxtb	r3, r3
 8008254:	f063 030f 	orn	r3, r3, #15
 8008258:	b2da      	uxtb	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	4930      	ldr	r1, [pc, #192]	; (8008328 <I2C_MasterRequestRead+0x194>)
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 f961 	bl	800852e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e054      	b.n	8008320 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008276:	897b      	ldrh	r3, [r7, #10]
 8008278:	b2da      	uxtb	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	4929      	ldr	r1, [pc, #164]	; (800832c <I2C_MasterRequestRead+0x198>)
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f000 f951 	bl	800852e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e044      	b.n	8008320 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008296:	2300      	movs	r3, #0
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	613b      	str	r3, [r7, #16]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	613b      	str	r3, [r7, #16]
 80082aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f8d9 	bl	8008480 <I2C_WaitOnFlagUntilTimeout>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00d      	beq.n	80082f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e2:	d103      	bne.n	80082ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e017      	b.n	8008320 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80082f0:	897b      	ldrh	r3, [r7, #10]
 80082f2:	11db      	asrs	r3, r3, #7
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	f003 0306 	and.w	r3, r3, #6
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	f063 030e 	orn	r3, r3, #14
 8008300:	b2da      	uxtb	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	4907      	ldr	r1, [pc, #28]	; (800832c <I2C_MasterRequestRead+0x198>)
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 f90d 	bl	800852e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	00010008 	.word	0x00010008
 800832c:	00010002 	.word	0x00010002

08008330 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008348:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800834a:	4b4b      	ldr	r3, [pc, #300]	; (8008478 <I2C_DMAAbort+0x148>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	08db      	lsrs	r3, r3, #3
 8008350:	4a4a      	ldr	r2, [pc, #296]	; (800847c <I2C_DMAAbort+0x14c>)
 8008352:	fba2 2303 	umull	r2, r3, r2, r3
 8008356:	0a1a      	lsrs	r2, r3, #8
 8008358:	4613      	mov	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	00da      	lsls	r2, r3, #3
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d106      	bne.n	8008378 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	f043 0220 	orr.w	r2, r3, #32
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008376:	e00a      	b.n	800838e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	3b01      	subs	r3, #1
 800837c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800838c:	d0ea      	beq.n	8008364 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839a:	2200      	movs	r2, #0
 800839c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	2200      	movs	r2, #0
 80083ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2200      	movs	r2, #0
 80083c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d0:	2200      	movs	r2, #0
 80083d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e0:	2200      	movs	r2, #0
 80083e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0201 	bic.w	r2, r2, #1
 80083f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b60      	cmp	r3, #96	; 0x60
 80083fe:	d10e      	bne.n	800841e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2200      	movs	r2, #0
 8008414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008416:	6978      	ldr	r0, [r7, #20]
 8008418:	f7fe fccc 	bl	8006db4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800841c:	e027      	b.n	800846e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800841e:	7cfb      	ldrb	r3, [r7, #19]
 8008420:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008424:	2b28      	cmp	r3, #40	; 0x28
 8008426:	d117      	bne.n	8008458 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0201 	orr.w	r2, r2, #1
 8008436:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008446:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	2200      	movs	r2, #0
 800844c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2228      	movs	r2, #40	; 0x28
 8008452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008456:	e007      	b.n	8008468 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2220      	movs	r2, #32
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008468:	6978      	ldr	r0, [r7, #20]
 800846a:	f7fe fc99 	bl	8006da0 <HAL_I2C_ErrorCallback>
}
 800846e:	bf00      	nop
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20000014 	.word	0x20000014
 800847c:	14f8b589 	.word	0x14f8b589

08008480 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	603b      	str	r3, [r7, #0]
 800848c:	4613      	mov	r3, r2
 800848e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008490:	e025      	b.n	80084de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008498:	d021      	beq.n	80084de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800849a:	f7fc fc2b 	bl	8004cf4 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d302      	bcc.n	80084b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d116      	bne.n	80084de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2220      	movs	r2, #32
 80084ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	f043 0220 	orr.w	r2, r3, #32
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e023      	b.n	8008526 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	0c1b      	lsrs	r3, r3, #16
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d10d      	bne.n	8008504 <I2C_WaitOnFlagUntilTimeout+0x84>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	43da      	mvns	r2, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	4013      	ands	r3, r2
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bf0c      	ite	eq
 80084fa:	2301      	moveq	r3, #1
 80084fc:	2300      	movne	r3, #0
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	e00c      	b.n	800851e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	43da      	mvns	r2, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4013      	ands	r3, r2
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	bf0c      	ite	eq
 8008516:	2301      	moveq	r3, #1
 8008518:	2300      	movne	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	461a      	mov	r2, r3
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	429a      	cmp	r2, r3
 8008522:	d0b6      	beq.n	8008492 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	60b9      	str	r1, [r7, #8]
 8008538:	607a      	str	r2, [r7, #4]
 800853a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800853c:	e051      	b.n	80085e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800854c:	d123      	bne.n	8008596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800855c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008566:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2220      	movs	r2, #32
 8008572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	f043 0204 	orr.w	r2, r3, #4
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e046      	b.n	8008624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859c:	d021      	beq.n	80085e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800859e:	f7fc fba9 	bl	8004cf4 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d302      	bcc.n	80085b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d116      	bne.n	80085e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2220      	movs	r2, #32
 80085be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f043 0220 	orr.w	r2, r3, #32
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e020      	b.n	8008624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	0c1b      	lsrs	r3, r3, #16
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d10c      	bne.n	8008606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	43da      	mvns	r2, r3
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	4013      	ands	r3, r2
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	bf14      	ite	ne
 80085fe:	2301      	movne	r3, #1
 8008600:	2300      	moveq	r3, #0
 8008602:	b2db      	uxtb	r3, r3
 8008604:	e00b      	b.n	800861e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	43da      	mvns	r2, r3
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	4013      	ands	r3, r2
 8008612:	b29b      	uxth	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	bf14      	ite	ne
 8008618:	2301      	movne	r3, #1
 800861a:	2300      	moveq	r3, #0
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d18d      	bne.n	800853e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008638:	e02d      	b.n	8008696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 f900 	bl	8008840 <I2C_IsAcknowledgeFailed>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e02d      	b.n	80086a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008650:	d021      	beq.n	8008696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008652:	f7fc fb4f 	bl	8004cf4 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	429a      	cmp	r2, r3
 8008660:	d302      	bcc.n	8008668 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d116      	bne.n	8008696 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2220      	movs	r2, #32
 8008672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	f043 0220 	orr.w	r2, r3, #32
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e007      	b.n	80086a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a0:	2b80      	cmp	r3, #128	; 0x80
 80086a2:	d1ca      	bne.n	800863a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086ba:	e02d      	b.n	8008718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 f8bf 	bl	8008840 <I2C_IsAcknowledgeFailed>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e02d      	b.n	8008728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d2:	d021      	beq.n	8008718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086d4:	f7fc fb0e 	bl	8004cf4 <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d302      	bcc.n	80086ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d116      	bne.n	8008718 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008704:	f043 0220 	orr.w	r2, r3, #32
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e007      	b.n	8008728 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	f003 0304 	and.w	r3, r3, #4
 8008722:	2b04      	cmp	r3, #4
 8008724:	d1ca      	bne.n	80086bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008738:	2300      	movs	r3, #0
 800873a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800873c:	4b13      	ldr	r3, [pc, #76]	; (800878c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	08db      	lsrs	r3, r3, #3
 8008742:	4a13      	ldr	r2, [pc, #76]	; (8008790 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008744:	fba2 2303 	umull	r2, r3, r2, r3
 8008748:	0a1a      	lsrs	r2, r3, #8
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	3b01      	subs	r3, #1
 8008756:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d107      	bne.n	800876e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	f043 0220 	orr.w	r2, r3, #32
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e008      	b.n	8008780 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800877c:	d0e9      	beq.n	8008752 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	20000014 	.word	0x20000014
 8008790:	14f8b589 	.word	0x14f8b589

08008794 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087a0:	e042      	b.n	8008828 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	f003 0310 	and.w	r3, r3, #16
 80087ac:	2b10      	cmp	r3, #16
 80087ae:	d119      	bne.n	80087e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f06f 0210 	mvn.w	r2, #16
 80087b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e029      	b.n	8008838 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087e4:	f7fc fa86 	bl	8004cf4 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d302      	bcc.n	80087fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d116      	bne.n	8008828 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2220      	movs	r2, #32
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008814:	f043 0220 	orr.w	r2, r3, #32
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e007      	b.n	8008838 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008832:	2b40      	cmp	r3, #64	; 0x40
 8008834:	d1b5      	bne.n	80087a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008856:	d11b      	bne.n	8008890 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008860:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887c:	f043 0204 	orr.w	r2, r3, #4
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e000      	b.n	8008892 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800889e:	b480      	push	{r7}
 80088a0:	b083      	sub	sp, #12
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80088ae:	d103      	bne.n	80088b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80088b6:	e007      	b.n	80088c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80088c0:	d102      	bne.n	80088c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2208      	movs	r2, #8
 80088c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e267      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d075      	beq.n	80089de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80088f2:	4b88      	ldr	r3, [pc, #544]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f003 030c 	and.w	r3, r3, #12
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d00c      	beq.n	8008918 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088fe:	4b85      	ldr	r3, [pc, #532]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008906:	2b08      	cmp	r3, #8
 8008908:	d112      	bne.n	8008930 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800890a:	4b82      	ldr	r3, [pc, #520]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008916:	d10b      	bne.n	8008930 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008918:	4b7e      	ldr	r3, [pc, #504]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d05b      	beq.n	80089dc <HAL_RCC_OscConfig+0x108>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d157      	bne.n	80089dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e242      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008938:	d106      	bne.n	8008948 <HAL_RCC_OscConfig+0x74>
 800893a:	4b76      	ldr	r3, [pc, #472]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a75      	ldr	r2, [pc, #468]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	e01d      	b.n	8008984 <HAL_RCC_OscConfig+0xb0>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008950:	d10c      	bne.n	800896c <HAL_RCC_OscConfig+0x98>
 8008952:	4b70      	ldr	r3, [pc, #448]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a6f      	ldr	r2, [pc, #444]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800895c:	6013      	str	r3, [r2, #0]
 800895e:	4b6d      	ldr	r3, [pc, #436]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a6c      	ldr	r2, [pc, #432]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	e00b      	b.n	8008984 <HAL_RCC_OscConfig+0xb0>
 800896c:	4b69      	ldr	r3, [pc, #420]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a68      	ldr	r2, [pc, #416]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	4b66      	ldr	r3, [pc, #408]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a65      	ldr	r2, [pc, #404]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 800897e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d013      	beq.n	80089b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800898c:	f7fc f9b2 	bl	8004cf4 <HAL_GetTick>
 8008990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008992:	e008      	b.n	80089a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008994:	f7fc f9ae 	bl	8004cf4 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b64      	cmp	r3, #100	; 0x64
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e207      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089a6:	4b5b      	ldr	r3, [pc, #364]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0f0      	beq.n	8008994 <HAL_RCC_OscConfig+0xc0>
 80089b2:	e014      	b.n	80089de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089b4:	f7fc f99e 	bl	8004cf4 <HAL_GetTick>
 80089b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089ba:	e008      	b.n	80089ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089bc:	f7fc f99a 	bl	8004cf4 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b64      	cmp	r3, #100	; 0x64
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e1f3      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089ce:	4b51      	ldr	r3, [pc, #324]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1f0      	bne.n	80089bc <HAL_RCC_OscConfig+0xe8>
 80089da:	e000      	b.n	80089de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d063      	beq.n	8008ab2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80089ea:	4b4a      	ldr	r3, [pc, #296]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f003 030c 	and.w	r3, r3, #12
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00b      	beq.n	8008a0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089f6:	4b47      	ldr	r3, [pc, #284]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	d11c      	bne.n	8008a3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a02:	4b44      	ldr	r3, [pc, #272]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d116      	bne.n	8008a3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a0e:	4b41      	ldr	r3, [pc, #260]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <HAL_RCC_OscConfig+0x152>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d001      	beq.n	8008a26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e1c7      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a26:	4b3b      	ldr	r3, [pc, #236]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	00db      	lsls	r3, r3, #3
 8008a34:	4937      	ldr	r1, [pc, #220]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a3a:	e03a      	b.n	8008ab2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d020      	beq.n	8008a86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a44:	4b34      	ldr	r3, [pc, #208]	; (8008b18 <HAL_RCC_OscConfig+0x244>)
 8008a46:	2201      	movs	r2, #1
 8008a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a4a:	f7fc f953 	bl	8004cf4 <HAL_GetTick>
 8008a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a50:	e008      	b.n	8008a64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a52:	f7fc f94f 	bl	8004cf4 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e1a8      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a64:	4b2b      	ldr	r3, [pc, #172]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0f0      	beq.n	8008a52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a70:	4b28      	ldr	r3, [pc, #160]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	4925      	ldr	r1, [pc, #148]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	600b      	str	r3, [r1, #0]
 8008a84:	e015      	b.n	8008ab2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a86:	4b24      	ldr	r3, [pc, #144]	; (8008b18 <HAL_RCC_OscConfig+0x244>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a8c:	f7fc f932 	bl	8004cf4 <HAL_GetTick>
 8008a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a92:	e008      	b.n	8008aa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a94:	f7fc f92e 	bl	8004cf4 <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d901      	bls.n	8008aa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e187      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aa6:	4b1b      	ldr	r3, [pc, #108]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1f0      	bne.n	8008a94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 0308 	and.w	r3, r3, #8
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d036      	beq.n	8008b2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d016      	beq.n	8008af4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ac6:	4b15      	ldr	r3, [pc, #84]	; (8008b1c <HAL_RCC_OscConfig+0x248>)
 8008ac8:	2201      	movs	r2, #1
 8008aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008acc:	f7fc f912 	bl	8004cf4 <HAL_GetTick>
 8008ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ad2:	e008      	b.n	8008ae6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ad4:	f7fc f90e 	bl	8004cf4 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d901      	bls.n	8008ae6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e167      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ae6:	4b0b      	ldr	r3, [pc, #44]	; (8008b14 <HAL_RCC_OscConfig+0x240>)
 8008ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d0f0      	beq.n	8008ad4 <HAL_RCC_OscConfig+0x200>
 8008af2:	e01b      	b.n	8008b2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008af4:	4b09      	ldr	r3, [pc, #36]	; (8008b1c <HAL_RCC_OscConfig+0x248>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008afa:	f7fc f8fb 	bl	8004cf4 <HAL_GetTick>
 8008afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b00:	e00e      	b.n	8008b20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b02:	f7fc f8f7 	bl	8004cf4 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d907      	bls.n	8008b20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e150      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
 8008b14:	40023800 	.word	0x40023800
 8008b18:	42470000 	.word	0x42470000
 8008b1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b20:	4b88      	ldr	r3, [pc, #544]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1ea      	bne.n	8008b02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 8097 	beq.w	8008c68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b3e:	4b81      	ldr	r3, [pc, #516]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10f      	bne.n	8008b6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60bb      	str	r3, [r7, #8]
 8008b4e:	4b7d      	ldr	r3, [pc, #500]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	4a7c      	ldr	r2, [pc, #496]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b58:	6413      	str	r3, [r2, #64]	; 0x40
 8008b5a:	4b7a      	ldr	r3, [pc, #488]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b62:	60bb      	str	r3, [r7, #8]
 8008b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b66:	2301      	movs	r3, #1
 8008b68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b6a:	4b77      	ldr	r3, [pc, #476]	; (8008d48 <HAL_RCC_OscConfig+0x474>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d118      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b76:	4b74      	ldr	r3, [pc, #464]	; (8008d48 <HAL_RCC_OscConfig+0x474>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a73      	ldr	r2, [pc, #460]	; (8008d48 <HAL_RCC_OscConfig+0x474>)
 8008b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b82:	f7fc f8b7 	bl	8004cf4 <HAL_GetTick>
 8008b86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b88:	e008      	b.n	8008b9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b8a:	f7fc f8b3 	bl	8004cf4 <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d901      	bls.n	8008b9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e10c      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b9c:	4b6a      	ldr	r3, [pc, #424]	; (8008d48 <HAL_RCC_OscConfig+0x474>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d0f0      	beq.n	8008b8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d106      	bne.n	8008bbe <HAL_RCC_OscConfig+0x2ea>
 8008bb0:	4b64      	ldr	r3, [pc, #400]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb4:	4a63      	ldr	r2, [pc, #396]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008bb6:	f043 0301 	orr.w	r3, r3, #1
 8008bba:	6713      	str	r3, [r2, #112]	; 0x70
 8008bbc:	e01c      	b.n	8008bf8 <HAL_RCC_OscConfig+0x324>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	2b05      	cmp	r3, #5
 8008bc4:	d10c      	bne.n	8008be0 <HAL_RCC_OscConfig+0x30c>
 8008bc6:	4b5f      	ldr	r3, [pc, #380]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bca:	4a5e      	ldr	r2, [pc, #376]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008bcc:	f043 0304 	orr.w	r3, r3, #4
 8008bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8008bd2:	4b5c      	ldr	r3, [pc, #368]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd6:	4a5b      	ldr	r2, [pc, #364]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008bd8:	f043 0301 	orr.w	r3, r3, #1
 8008bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8008bde:	e00b      	b.n	8008bf8 <HAL_RCC_OscConfig+0x324>
 8008be0:	4b58      	ldr	r3, [pc, #352]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be4:	4a57      	ldr	r2, [pc, #348]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008be6:	f023 0301 	bic.w	r3, r3, #1
 8008bea:	6713      	str	r3, [r2, #112]	; 0x70
 8008bec:	4b55      	ldr	r3, [pc, #340]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf0:	4a54      	ldr	r2, [pc, #336]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008bf2:	f023 0304 	bic.w	r3, r3, #4
 8008bf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d015      	beq.n	8008c2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c00:	f7fc f878 	bl	8004cf4 <HAL_GetTick>
 8008c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c06:	e00a      	b.n	8008c1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c08:	f7fc f874 	bl	8004cf4 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d901      	bls.n	8008c1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e0cb      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c1e:	4b49      	ldr	r3, [pc, #292]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d0ee      	beq.n	8008c08 <HAL_RCC_OscConfig+0x334>
 8008c2a:	e014      	b.n	8008c56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c2c:	f7fc f862 	bl	8004cf4 <HAL_GetTick>
 8008c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c32:	e00a      	b.n	8008c4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c34:	f7fc f85e 	bl	8004cf4 <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d901      	bls.n	8008c4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e0b5      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c4a:	4b3e      	ldr	r3, [pc, #248]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1ee      	bne.n	8008c34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c56:	7dfb      	ldrb	r3, [r7, #23]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d105      	bne.n	8008c68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c5c:	4b39      	ldr	r3, [pc, #228]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c60:	4a38      	ldr	r2, [pc, #224]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 80a1 	beq.w	8008db4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c72:	4b34      	ldr	r3, [pc, #208]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f003 030c 	and.w	r3, r3, #12
 8008c7a:	2b08      	cmp	r3, #8
 8008c7c:	d05c      	beq.n	8008d38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d141      	bne.n	8008d0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c86:	4b31      	ldr	r3, [pc, #196]	; (8008d4c <HAL_RCC_OscConfig+0x478>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c8c:	f7fc f832 	bl	8004cf4 <HAL_GetTick>
 8008c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c92:	e008      	b.n	8008ca6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c94:	f7fc f82e 	bl	8004cf4 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e087      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ca6:	4b27      	ldr	r3, [pc, #156]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1f0      	bne.n	8008c94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	69da      	ldr	r2, [r3, #28]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	019b      	lsls	r3, r3, #6
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc8:	085b      	lsrs	r3, r3, #1
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	041b      	lsls	r3, r3, #16
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	061b      	lsls	r3, r3, #24
 8008cd6:	491b      	ldr	r1, [pc, #108]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cdc:	4b1b      	ldr	r3, [pc, #108]	; (8008d4c <HAL_RCC_OscConfig+0x478>)
 8008cde:	2201      	movs	r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ce2:	f7fc f807 	bl	8004cf4 <HAL_GetTick>
 8008ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ce8:	e008      	b.n	8008cfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cea:	f7fc f803 	bl	8004cf4 <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d901      	bls.n	8008cfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e05c      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cfc:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d0f0      	beq.n	8008cea <HAL_RCC_OscConfig+0x416>
 8008d08:	e054      	b.n	8008db4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d0a:	4b10      	ldr	r3, [pc, #64]	; (8008d4c <HAL_RCC_OscConfig+0x478>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d10:	f7fb fff0 	bl	8004cf4 <HAL_GetTick>
 8008d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d16:	e008      	b.n	8008d2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d18:	f7fb ffec 	bl	8004cf4 <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d901      	bls.n	8008d2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e045      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d2a:	4b06      	ldr	r3, [pc, #24]	; (8008d44 <HAL_RCC_OscConfig+0x470>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1f0      	bne.n	8008d18 <HAL_RCC_OscConfig+0x444>
 8008d36:	e03d      	b.n	8008db4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d107      	bne.n	8008d50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e038      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
 8008d44:	40023800 	.word	0x40023800
 8008d48:	40007000 	.word	0x40007000
 8008d4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008d50:	4b1b      	ldr	r3, [pc, #108]	; (8008dc0 <HAL_RCC_OscConfig+0x4ec>)
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d028      	beq.n	8008db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d121      	bne.n	8008db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d11a      	bne.n	8008db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008d80:	4013      	ands	r3, r2
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d111      	bne.n	8008db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d96:	085b      	lsrs	r3, r3, #1
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d107      	bne.n	8008db0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008daa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d001      	beq.n	8008db4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e000      	b.n	8008db6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	40023800 	.word	0x40023800

08008dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e0cc      	b.n	8008f72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008dd8:	4b68      	ldr	r3, [pc, #416]	; (8008f7c <HAL_RCC_ClockConfig+0x1b8>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0307 	and.w	r3, r3, #7
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d90c      	bls.n	8008e00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008de6:	4b65      	ldr	r3, [pc, #404]	; (8008f7c <HAL_RCC_ClockConfig+0x1b8>)
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	b2d2      	uxtb	r2, r2
 8008dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dee:	4b63      	ldr	r3, [pc, #396]	; (8008f7c <HAL_RCC_ClockConfig+0x1b8>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d001      	beq.n	8008e00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e0b8      	b.n	8008f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0302 	and.w	r3, r3, #2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d020      	beq.n	8008e4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0304 	and.w	r3, r3, #4
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d005      	beq.n	8008e24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e18:	4b59      	ldr	r3, [pc, #356]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	4a58      	ldr	r2, [pc, #352]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0308 	and.w	r3, r3, #8
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d005      	beq.n	8008e3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e30:	4b53      	ldr	r3, [pc, #332]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	4a52      	ldr	r2, [pc, #328]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e3c:	4b50      	ldr	r3, [pc, #320]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	494d      	ldr	r1, [pc, #308]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d044      	beq.n	8008ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d107      	bne.n	8008e72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e62:	4b47      	ldr	r3, [pc, #284]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d119      	bne.n	8008ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e07f      	b.n	8008f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d003      	beq.n	8008e82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d107      	bne.n	8008e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e82:	4b3f      	ldr	r3, [pc, #252]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d109      	bne.n	8008ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e06f      	b.n	8008f72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e92:	4b3b      	ldr	r3, [pc, #236]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0302 	and.w	r3, r3, #2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e067      	b.n	8008f72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ea2:	4b37      	ldr	r3, [pc, #220]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f023 0203 	bic.w	r2, r3, #3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	4934      	ldr	r1, [pc, #208]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008eb4:	f7fb ff1e 	bl	8004cf4 <HAL_GetTick>
 8008eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eba:	e00a      	b.n	8008ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ebc:	f7fb ff1a 	bl	8004cf4 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d901      	bls.n	8008ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e04f      	b.n	8008f72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ed2:	4b2b      	ldr	r3, [pc, #172]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f003 020c 	and.w	r2, r3, #12
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d1eb      	bne.n	8008ebc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ee4:	4b25      	ldr	r3, [pc, #148]	; (8008f7c <HAL_RCC_ClockConfig+0x1b8>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d20c      	bcs.n	8008f0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ef2:	4b22      	ldr	r3, [pc, #136]	; (8008f7c <HAL_RCC_ClockConfig+0x1b8>)
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	b2d2      	uxtb	r2, r2
 8008ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008efa:	4b20      	ldr	r3, [pc, #128]	; (8008f7c <HAL_RCC_ClockConfig+0x1b8>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0307 	and.w	r3, r3, #7
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d001      	beq.n	8008f0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e032      	b.n	8008f72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d008      	beq.n	8008f2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f18:	4b19      	ldr	r3, [pc, #100]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	4916      	ldr	r1, [pc, #88]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0308 	and.w	r3, r3, #8
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d009      	beq.n	8008f4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f36:	4b12      	ldr	r3, [pc, #72]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	00db      	lsls	r3, r3, #3
 8008f44:	490e      	ldr	r1, [pc, #56]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f4a:	f000 f821 	bl	8008f90 <HAL_RCC_GetSysClockFreq>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	4b0b      	ldr	r3, [pc, #44]	; (8008f80 <HAL_RCC_ClockConfig+0x1bc>)
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	091b      	lsrs	r3, r3, #4
 8008f56:	f003 030f 	and.w	r3, r3, #15
 8008f5a:	490a      	ldr	r1, [pc, #40]	; (8008f84 <HAL_RCC_ClockConfig+0x1c0>)
 8008f5c:	5ccb      	ldrb	r3, [r1, r3]
 8008f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f62:	4a09      	ldr	r2, [pc, #36]	; (8008f88 <HAL_RCC_ClockConfig+0x1c4>)
 8008f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f66:	4b09      	ldr	r3, [pc, #36]	; (8008f8c <HAL_RCC_ClockConfig+0x1c8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7fb fae0 	bl	8004530 <HAL_InitTick>

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	40023c00 	.word	0x40023c00
 8008f80:	40023800 	.word	0x40023800
 8008f84:	0801b76c 	.word	0x0801b76c
 8008f88:	20000014 	.word	0x20000014
 8008f8c:	2000002c 	.word	0x2000002c

08008f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f94:	b094      	sub	sp, #80	; 0x50
 8008f96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fa8:	4b79      	ldr	r3, [pc, #484]	; (8009190 <HAL_RCC_GetSysClockFreq+0x200>)
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f003 030c 	and.w	r3, r3, #12
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d00d      	beq.n	8008fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8008fb4:	2b08      	cmp	r3, #8
 8008fb6:	f200 80e1 	bhi.w	800917c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <HAL_RCC_GetSysClockFreq+0x34>
 8008fbe:	2b04      	cmp	r3, #4
 8008fc0:	d003      	beq.n	8008fca <HAL_RCC_GetSysClockFreq+0x3a>
 8008fc2:	e0db      	b.n	800917c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fc4:	4b73      	ldr	r3, [pc, #460]	; (8009194 <HAL_RCC_GetSysClockFreq+0x204>)
 8008fc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008fc8:	e0db      	b.n	8009182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008fca:	4b73      	ldr	r3, [pc, #460]	; (8009198 <HAL_RCC_GetSysClockFreq+0x208>)
 8008fcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fce:	e0d8      	b.n	8009182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008fd0:	4b6f      	ldr	r3, [pc, #444]	; (8009190 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008fda:	4b6d      	ldr	r3, [pc, #436]	; (8009190 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d063      	beq.n	80090ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008fe6:	4b6a      	ldr	r3, [pc, #424]	; (8009190 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	099b      	lsrs	r3, r3, #6
 8008fec:	2200      	movs	r2, #0
 8008fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ff0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ffe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009002:	4622      	mov	r2, r4
 8009004:	462b      	mov	r3, r5
 8009006:	f04f 0000 	mov.w	r0, #0
 800900a:	f04f 0100 	mov.w	r1, #0
 800900e:	0159      	lsls	r1, r3, #5
 8009010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009014:	0150      	lsls	r0, r2, #5
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4621      	mov	r1, r4
 800901c:	1a51      	subs	r1, r2, r1
 800901e:	6139      	str	r1, [r7, #16]
 8009020:	4629      	mov	r1, r5
 8009022:	eb63 0301 	sbc.w	r3, r3, r1
 8009026:	617b      	str	r3, [r7, #20]
 8009028:	f04f 0200 	mov.w	r2, #0
 800902c:	f04f 0300 	mov.w	r3, #0
 8009030:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009034:	4659      	mov	r1, fp
 8009036:	018b      	lsls	r3, r1, #6
 8009038:	4651      	mov	r1, sl
 800903a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800903e:	4651      	mov	r1, sl
 8009040:	018a      	lsls	r2, r1, #6
 8009042:	4651      	mov	r1, sl
 8009044:	ebb2 0801 	subs.w	r8, r2, r1
 8009048:	4659      	mov	r1, fp
 800904a:	eb63 0901 	sbc.w	r9, r3, r1
 800904e:	f04f 0200 	mov.w	r2, #0
 8009052:	f04f 0300 	mov.w	r3, #0
 8009056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800905a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800905e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009062:	4690      	mov	r8, r2
 8009064:	4699      	mov	r9, r3
 8009066:	4623      	mov	r3, r4
 8009068:	eb18 0303 	adds.w	r3, r8, r3
 800906c:	60bb      	str	r3, [r7, #8]
 800906e:	462b      	mov	r3, r5
 8009070:	eb49 0303 	adc.w	r3, r9, r3
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	f04f 0200 	mov.w	r2, #0
 800907a:	f04f 0300 	mov.w	r3, #0
 800907e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009082:	4629      	mov	r1, r5
 8009084:	024b      	lsls	r3, r1, #9
 8009086:	4621      	mov	r1, r4
 8009088:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800908c:	4621      	mov	r1, r4
 800908e:	024a      	lsls	r2, r1, #9
 8009090:	4610      	mov	r0, r2
 8009092:	4619      	mov	r1, r3
 8009094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009096:	2200      	movs	r2, #0
 8009098:	62bb      	str	r3, [r7, #40]	; 0x28
 800909a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800909c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090a0:	f7f7 fdfc 	bl	8000c9c <__aeabi_uldivmod>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4613      	mov	r3, r2
 80090aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090ac:	e058      	b.n	8009160 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090ae:	4b38      	ldr	r3, [pc, #224]	; (8009190 <HAL_RCC_GetSysClockFreq+0x200>)
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	099b      	lsrs	r3, r3, #6
 80090b4:	2200      	movs	r2, #0
 80090b6:	4618      	mov	r0, r3
 80090b8:	4611      	mov	r1, r2
 80090ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80090be:	623b      	str	r3, [r7, #32]
 80090c0:	2300      	movs	r3, #0
 80090c2:	627b      	str	r3, [r7, #36]	; 0x24
 80090c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80090c8:	4642      	mov	r2, r8
 80090ca:	464b      	mov	r3, r9
 80090cc:	f04f 0000 	mov.w	r0, #0
 80090d0:	f04f 0100 	mov.w	r1, #0
 80090d4:	0159      	lsls	r1, r3, #5
 80090d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090da:	0150      	lsls	r0, r2, #5
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4641      	mov	r1, r8
 80090e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80090e6:	4649      	mov	r1, r9
 80090e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	f04f 0300 	mov.w	r3, #0
 80090f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80090f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80090fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009100:	ebb2 040a 	subs.w	r4, r2, sl
 8009104:	eb63 050b 	sbc.w	r5, r3, fp
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	f04f 0300 	mov.w	r3, #0
 8009110:	00eb      	lsls	r3, r5, #3
 8009112:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009116:	00e2      	lsls	r2, r4, #3
 8009118:	4614      	mov	r4, r2
 800911a:	461d      	mov	r5, r3
 800911c:	4643      	mov	r3, r8
 800911e:	18e3      	adds	r3, r4, r3
 8009120:	603b      	str	r3, [r7, #0]
 8009122:	464b      	mov	r3, r9
 8009124:	eb45 0303 	adc.w	r3, r5, r3
 8009128:	607b      	str	r3, [r7, #4]
 800912a:	f04f 0200 	mov.w	r2, #0
 800912e:	f04f 0300 	mov.w	r3, #0
 8009132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009136:	4629      	mov	r1, r5
 8009138:	028b      	lsls	r3, r1, #10
 800913a:	4621      	mov	r1, r4
 800913c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009140:	4621      	mov	r1, r4
 8009142:	028a      	lsls	r2, r1, #10
 8009144:	4610      	mov	r0, r2
 8009146:	4619      	mov	r1, r3
 8009148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800914a:	2200      	movs	r2, #0
 800914c:	61bb      	str	r3, [r7, #24]
 800914e:	61fa      	str	r2, [r7, #28]
 8009150:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009154:	f7f7 fda2 	bl	8000c9c <__aeabi_uldivmod>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4613      	mov	r3, r2
 800915e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009160:	4b0b      	ldr	r3, [pc, #44]	; (8009190 <HAL_RCC_GetSysClockFreq+0x200>)
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	0c1b      	lsrs	r3, r3, #16
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	3301      	adds	r3, #1
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009174:	fbb2 f3f3 	udiv	r3, r2, r3
 8009178:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800917a:	e002      	b.n	8009182 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800917c:	4b05      	ldr	r3, [pc, #20]	; (8009194 <HAL_RCC_GetSysClockFreq+0x204>)
 800917e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009184:	4618      	mov	r0, r3
 8009186:	3750      	adds	r7, #80	; 0x50
 8009188:	46bd      	mov	sp, r7
 800918a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800918e:	bf00      	nop
 8009190:	40023800 	.word	0x40023800
 8009194:	00f42400 	.word	0x00f42400
 8009198:	007a1200 	.word	0x007a1200

0800919c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091a0:	4b03      	ldr	r3, [pc, #12]	; (80091b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80091a2:	681b      	ldr	r3, [r3, #0]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	20000014 	.word	0x20000014

080091b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80091b8:	f7ff fff0 	bl	800919c <HAL_RCC_GetHCLKFreq>
 80091bc:	4602      	mov	r2, r0
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	0a9b      	lsrs	r3, r3, #10
 80091c4:	f003 0307 	and.w	r3, r3, #7
 80091c8:	4903      	ldr	r1, [pc, #12]	; (80091d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091ca:	5ccb      	ldrb	r3, [r1, r3]
 80091cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	40023800 	.word	0x40023800
 80091d8:	0801b77c 	.word	0x0801b77c

080091dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80091e0:	f7ff ffdc 	bl	800919c <HAL_RCC_GetHCLKFreq>
 80091e4:	4602      	mov	r2, r0
 80091e6:	4b05      	ldr	r3, [pc, #20]	; (80091fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	0b5b      	lsrs	r3, r3, #13
 80091ec:	f003 0307 	and.w	r3, r3, #7
 80091f0:	4903      	ldr	r1, [pc, #12]	; (8009200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091f2:	5ccb      	ldrb	r3, [r1, r3]
 80091f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	40023800 	.word	0x40023800
 8009200:	0801b77c 	.word	0x0801b77c

08009204 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	220f      	movs	r2, #15
 8009212:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009214:	4b12      	ldr	r3, [pc, #72]	; (8009260 <HAL_RCC_GetClockConfig+0x5c>)
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f003 0203 	and.w	r2, r3, #3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009220:	4b0f      	ldr	r3, [pc, #60]	; (8009260 <HAL_RCC_GetClockConfig+0x5c>)
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800922c:	4b0c      	ldr	r3, [pc, #48]	; (8009260 <HAL_RCC_GetClockConfig+0x5c>)
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009238:	4b09      	ldr	r3, [pc, #36]	; (8009260 <HAL_RCC_GetClockConfig+0x5c>)
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	08db      	lsrs	r3, r3, #3
 800923e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009246:	4b07      	ldr	r3, [pc, #28]	; (8009264 <HAL_RCC_GetClockConfig+0x60>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0207 	and.w	r2, r3, #7
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	601a      	str	r2, [r3, #0]
}
 8009252:	bf00      	nop
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	40023800 	.word	0x40023800
 8009264:	40023c00 	.word	0x40023c00

08009268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e041      	b.n	80092fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f839 	bl	8009306 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	3304      	adds	r3, #4
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	f000 fc7a 	bl	8009ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800930e:	bf00      	nop
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
	...

0800931c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b01      	cmp	r3, #1
 800932e:	d001      	beq.n	8009334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e044      	b.n	80093be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2202      	movs	r2, #2
 8009338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f042 0201 	orr.w	r2, r2, #1
 800934a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a1e      	ldr	r2, [pc, #120]	; (80093cc <HAL_TIM_Base_Start_IT+0xb0>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d018      	beq.n	8009388 <HAL_TIM_Base_Start_IT+0x6c>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935e:	d013      	beq.n	8009388 <HAL_TIM_Base_Start_IT+0x6c>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a1a      	ldr	r2, [pc, #104]	; (80093d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d00e      	beq.n	8009388 <HAL_TIM_Base_Start_IT+0x6c>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a19      	ldr	r2, [pc, #100]	; (80093d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d009      	beq.n	8009388 <HAL_TIM_Base_Start_IT+0x6c>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a17      	ldr	r2, [pc, #92]	; (80093d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d004      	beq.n	8009388 <HAL_TIM_Base_Start_IT+0x6c>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a16      	ldr	r2, [pc, #88]	; (80093dc <HAL_TIM_Base_Start_IT+0xc0>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d111      	bne.n	80093ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 0307 	and.w	r3, r3, #7
 8009392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2b06      	cmp	r3, #6
 8009398:	d010      	beq.n	80093bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f042 0201 	orr.w	r2, r2, #1
 80093a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093aa:	e007      	b.n	80093bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f042 0201 	orr.w	r2, r2, #1
 80093ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	40010000 	.word	0x40010000
 80093d0:	40000400 	.word	0x40000400
 80093d4:	40000800 	.word	0x40000800
 80093d8:	40000c00 	.word	0x40000c00
 80093dc:	40014000 	.word	0x40014000

080093e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d109      	bne.n	8009404 <HAL_TIM_PWM_Start+0x24>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	bf14      	ite	ne
 80093fc:	2301      	movne	r3, #1
 80093fe:	2300      	moveq	r3, #0
 8009400:	b2db      	uxtb	r3, r3
 8009402:	e022      	b.n	800944a <HAL_TIM_PWM_Start+0x6a>
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2b04      	cmp	r3, #4
 8009408:	d109      	bne.n	800941e <HAL_TIM_PWM_Start+0x3e>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009410:	b2db      	uxtb	r3, r3
 8009412:	2b01      	cmp	r3, #1
 8009414:	bf14      	ite	ne
 8009416:	2301      	movne	r3, #1
 8009418:	2300      	moveq	r3, #0
 800941a:	b2db      	uxtb	r3, r3
 800941c:	e015      	b.n	800944a <HAL_TIM_PWM_Start+0x6a>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b08      	cmp	r3, #8
 8009422:	d109      	bne.n	8009438 <HAL_TIM_PWM_Start+0x58>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b01      	cmp	r3, #1
 800942e:	bf14      	ite	ne
 8009430:	2301      	movne	r3, #1
 8009432:	2300      	moveq	r3, #0
 8009434:	b2db      	uxtb	r3, r3
 8009436:	e008      	b.n	800944a <HAL_TIM_PWM_Start+0x6a>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b01      	cmp	r3, #1
 8009442:	bf14      	ite	ne
 8009444:	2301      	movne	r3, #1
 8009446:	2300      	moveq	r3, #0
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e068      	b.n	8009524 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d104      	bne.n	8009462 <HAL_TIM_PWM_Start+0x82>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2202      	movs	r2, #2
 800945c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009460:	e013      	b.n	800948a <HAL_TIM_PWM_Start+0xaa>
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b04      	cmp	r3, #4
 8009466:	d104      	bne.n	8009472 <HAL_TIM_PWM_Start+0x92>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009470:	e00b      	b.n	800948a <HAL_TIM_PWM_Start+0xaa>
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b08      	cmp	r3, #8
 8009476:	d104      	bne.n	8009482 <HAL_TIM_PWM_Start+0xa2>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2202      	movs	r2, #2
 800947c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009480:	e003      	b.n	800948a <HAL_TIM_PWM_Start+0xaa>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2202      	movs	r2, #2
 8009486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2201      	movs	r2, #1
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 fd90 	bl	8009fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a23      	ldr	r2, [pc, #140]	; (800952c <HAL_TIM_PWM_Start+0x14c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d107      	bne.n	80094b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a1d      	ldr	r2, [pc, #116]	; (800952c <HAL_TIM_PWM_Start+0x14c>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d018      	beq.n	80094ee <HAL_TIM_PWM_Start+0x10e>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c4:	d013      	beq.n	80094ee <HAL_TIM_PWM_Start+0x10e>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a19      	ldr	r2, [pc, #100]	; (8009530 <HAL_TIM_PWM_Start+0x150>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d00e      	beq.n	80094ee <HAL_TIM_PWM_Start+0x10e>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a17      	ldr	r2, [pc, #92]	; (8009534 <HAL_TIM_PWM_Start+0x154>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d009      	beq.n	80094ee <HAL_TIM_PWM_Start+0x10e>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a16      	ldr	r2, [pc, #88]	; (8009538 <HAL_TIM_PWM_Start+0x158>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d004      	beq.n	80094ee <HAL_TIM_PWM_Start+0x10e>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a14      	ldr	r2, [pc, #80]	; (800953c <HAL_TIM_PWM_Start+0x15c>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d111      	bne.n	8009512 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f003 0307 	and.w	r3, r3, #7
 80094f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2b06      	cmp	r3, #6
 80094fe:	d010      	beq.n	8009522 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0201 	orr.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009510:	e007      	b.n	8009522 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f042 0201 	orr.w	r2, r2, #1
 8009520:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	40010000 	.word	0x40010000
 8009530:	40000400 	.word	0x40000400
 8009534:	40000800 	.word	0x40000800
 8009538:	40000c00 	.word	0x40000c00
 800953c:	40014000 	.word	0x40014000

08009540 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d101      	bne.n	8009554 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e097      	b.n	8009684 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b00      	cmp	r3, #0
 800955e:	d106      	bne.n	800956e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f88f 	bl	800968c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2202      	movs	r2, #2
 8009572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	6812      	ldr	r2, [r2, #0]
 8009580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009584:	f023 0307 	bic.w	r3, r3, #7
 8009588:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3304      	adds	r3, #4
 8009592:	4619      	mov	r1, r3
 8009594:	4610      	mov	r0, r2
 8009596:	f000 fb03 	bl	8009ba0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
 80095b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095c2:	f023 0303 	bic.w	r3, r3, #3
 80095c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	689a      	ldr	r2, [r3, #8]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	021b      	lsls	r3, r3, #8
 80095d2:	4313      	orrs	r3, r2
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80095e0:	f023 030c 	bic.w	r3, r3, #12
 80095e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	021b      	lsls	r3, r3, #8
 80095fc:	4313      	orrs	r3, r2
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	4313      	orrs	r3, r2
 8009602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	011a      	lsls	r2, r3, #4
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	031b      	lsls	r3, r3, #12
 8009610:	4313      	orrs	r3, r2
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	4313      	orrs	r3, r2
 8009616:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800961e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009626:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	695b      	ldr	r3, [r3, #20]
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	4313      	orrs	r3, r2
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80096c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d110      	bne.n	80096f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d102      	bne.n	80096dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80096d6:	7b7b      	ldrb	r3, [r7, #13]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d001      	beq.n	80096e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e069      	b.n	80097b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096f0:	e031      	b.n	8009756 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d110      	bne.n	800971a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d102      	bne.n	8009704 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80096fe:	7b3b      	ldrb	r3, [r7, #12]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d001      	beq.n	8009708 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e055      	b.n	80097b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2202      	movs	r2, #2
 8009714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009718:	e01d      	b.n	8009756 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800971a:	7bfb      	ldrb	r3, [r7, #15]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d108      	bne.n	8009732 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009720:	7bbb      	ldrb	r3, [r7, #14]
 8009722:	2b01      	cmp	r3, #1
 8009724:	d105      	bne.n	8009732 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009726:	7b7b      	ldrb	r3, [r7, #13]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d102      	bne.n	8009732 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800972c:	7b3b      	ldrb	r3, [r7, #12]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d001      	beq.n	8009736 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e03e      	b.n	80097b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2202      	movs	r2, #2
 800973a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2202      	movs	r2, #2
 8009742:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2202      	movs	r2, #2
 800974a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2202      	movs	r2, #2
 8009752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <HAL_TIM_Encoder_Start+0xc4>
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2b04      	cmp	r3, #4
 8009760:	d008      	beq.n	8009774 <HAL_TIM_Encoder_Start+0xd4>
 8009762:	e00f      	b.n	8009784 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2201      	movs	r2, #1
 800976a:	2100      	movs	r1, #0
 800976c:	4618      	mov	r0, r3
 800976e:	f000 fc23 	bl	8009fb8 <TIM_CCxChannelCmd>
      break;
 8009772:	e016      	b.n	80097a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2201      	movs	r2, #1
 800977a:	2104      	movs	r1, #4
 800977c:	4618      	mov	r0, r3
 800977e:	f000 fc1b 	bl	8009fb8 <TIM_CCxChannelCmd>
      break;
 8009782:	e00e      	b.n	80097a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2201      	movs	r2, #1
 800978a:	2100      	movs	r1, #0
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fc13 	bl	8009fb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2201      	movs	r2, #1
 8009798:	2104      	movs	r1, #4
 800979a:	4618      	mov	r0, r3
 800979c:	f000 fc0c 	bl	8009fb8 <TIM_CCxChannelCmd>
      break;
 80097a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f042 0201 	orr.w	r2, r2, #1
 80097b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	691b      	ldr	r3, [r3, #16]
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d122      	bne.n	8009818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	f003 0302 	and.w	r3, r3, #2
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d11b      	bne.n	8009818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f06f 0202 	mvn.w	r2, #2
 80097e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	f003 0303 	and.w	r3, r3, #3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f9b0 	bl	8009b64 <HAL_TIM_IC_CaptureCallback>
 8009804:	e005      	b.n	8009812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f9a2 	bl	8009b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f9b3 	bl	8009b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	f003 0304 	and.w	r3, r3, #4
 8009822:	2b04      	cmp	r3, #4
 8009824:	d122      	bne.n	800986c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	f003 0304 	and.w	r3, r3, #4
 8009830:	2b04      	cmp	r3, #4
 8009832:	d11b      	bne.n	800986c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f06f 0204 	mvn.w	r2, #4
 800983c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2202      	movs	r2, #2
 8009842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f986 	bl	8009b64 <HAL_TIM_IC_CaptureCallback>
 8009858:	e005      	b.n	8009866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f978 	bl	8009b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f989 	bl	8009b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	f003 0308 	and.w	r3, r3, #8
 8009876:	2b08      	cmp	r3, #8
 8009878:	d122      	bne.n	80098c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b08      	cmp	r3, #8
 8009886:	d11b      	bne.n	80098c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f06f 0208 	mvn.w	r2, #8
 8009890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2204      	movs	r2, #4
 8009896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	f003 0303 	and.w	r3, r3, #3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f95c 	bl	8009b64 <HAL_TIM_IC_CaptureCallback>
 80098ac:	e005      	b.n	80098ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f94e 	bl	8009b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f95f 	bl	8009b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	f003 0310 	and.w	r3, r3, #16
 80098ca:	2b10      	cmp	r3, #16
 80098cc:	d122      	bne.n	8009914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	f003 0310 	and.w	r3, r3, #16
 80098d8:	2b10      	cmp	r3, #16
 80098da:	d11b      	bne.n	8009914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f06f 0210 	mvn.w	r2, #16
 80098e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2208      	movs	r2, #8
 80098ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f932 	bl	8009b64 <HAL_TIM_IC_CaptureCallback>
 8009900:	e005      	b.n	800990e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f924 	bl	8009b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f935 	bl	8009b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b01      	cmp	r3, #1
 8009920:	d10e      	bne.n	8009940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	2b01      	cmp	r3, #1
 800992e:	d107      	bne.n	8009940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f06f 0201 	mvn.w	r2, #1
 8009938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7f9 fe08 	bl	8003550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994a:	2b80      	cmp	r3, #128	; 0x80
 800994c:	d10e      	bne.n	800996c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009958:	2b80      	cmp	r3, #128	; 0x80
 800995a:	d107      	bne.n	800996c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fb55 	bl	800a016 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009976:	2b40      	cmp	r3, #64	; 0x40
 8009978:	d10e      	bne.n	8009998 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009984:	2b40      	cmp	r3, #64	; 0x40
 8009986:	d107      	bne.n	8009998 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f8fa 	bl	8009b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	f003 0320 	and.w	r3, r3, #32
 80099a2:	2b20      	cmp	r3, #32
 80099a4:	d10e      	bne.n	80099c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	f003 0320 	and.w	r3, r3, #32
 80099b0:	2b20      	cmp	r3, #32
 80099b2:	d107      	bne.n	80099c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f06f 0220 	mvn.w	r2, #32
 80099bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fb1f 	bl	800a002 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d101      	bne.n	80099ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099e6:	2302      	movs	r3, #2
 80099e8:	e0ae      	b.n	8009b48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b0c      	cmp	r3, #12
 80099f6:	f200 809f 	bhi.w	8009b38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80099fa:	a201      	add	r2, pc, #4	; (adr r2, 8009a00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80099fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a00:	08009a35 	.word	0x08009a35
 8009a04:	08009b39 	.word	0x08009b39
 8009a08:	08009b39 	.word	0x08009b39
 8009a0c:	08009b39 	.word	0x08009b39
 8009a10:	08009a75 	.word	0x08009a75
 8009a14:	08009b39 	.word	0x08009b39
 8009a18:	08009b39 	.word	0x08009b39
 8009a1c:	08009b39 	.word	0x08009b39
 8009a20:	08009ab7 	.word	0x08009ab7
 8009a24:	08009b39 	.word	0x08009b39
 8009a28:	08009b39 	.word	0x08009b39
 8009a2c:	08009b39 	.word	0x08009b39
 8009a30:	08009af7 	.word	0x08009af7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 f930 	bl	8009ca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	699a      	ldr	r2, [r3, #24]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f042 0208 	orr.w	r2, r2, #8
 8009a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	699a      	ldr	r2, [r3, #24]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f022 0204 	bic.w	r2, r2, #4
 8009a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6999      	ldr	r1, [r3, #24]
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	691a      	ldr	r2, [r3, #16]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	619a      	str	r2, [r3, #24]
      break;
 8009a72:	e064      	b.n	8009b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68b9      	ldr	r1, [r7, #8]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 f976 	bl	8009d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699a      	ldr	r2, [r3, #24]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	699a      	ldr	r2, [r3, #24]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6999      	ldr	r1, [r3, #24]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	021a      	lsls	r2, r3, #8
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	619a      	str	r2, [r3, #24]
      break;
 8009ab4:	e043      	b.n	8009b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68b9      	ldr	r1, [r7, #8]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 f9c1 	bl	8009e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	69da      	ldr	r2, [r3, #28]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f042 0208 	orr.w	r2, r2, #8
 8009ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	69da      	ldr	r2, [r3, #28]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f022 0204 	bic.w	r2, r2, #4
 8009ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	69d9      	ldr	r1, [r3, #28]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	691a      	ldr	r2, [r3, #16]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	430a      	orrs	r2, r1
 8009af2:	61da      	str	r2, [r3, #28]
      break;
 8009af4:	e023      	b.n	8009b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68b9      	ldr	r1, [r7, #8]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fa0b 	bl	8009f18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	69da      	ldr	r2, [r3, #28]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	69da      	ldr	r2, [r3, #28]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	69d9      	ldr	r1, [r3, #28]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	021a      	lsls	r2, r3, #8
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	430a      	orrs	r2, r1
 8009b34:	61da      	str	r2, [r3, #28]
      break;
 8009b36:	e002      	b.n	8009b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3718      	adds	r7, #24
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a34      	ldr	r2, [pc, #208]	; (8009c84 <TIM_Base_SetConfig+0xe4>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d00f      	beq.n	8009bd8 <TIM_Base_SetConfig+0x38>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bbe:	d00b      	beq.n	8009bd8 <TIM_Base_SetConfig+0x38>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a31      	ldr	r2, [pc, #196]	; (8009c88 <TIM_Base_SetConfig+0xe8>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d007      	beq.n	8009bd8 <TIM_Base_SetConfig+0x38>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a30      	ldr	r2, [pc, #192]	; (8009c8c <TIM_Base_SetConfig+0xec>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d003      	beq.n	8009bd8 <TIM_Base_SetConfig+0x38>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a2f      	ldr	r2, [pc, #188]	; (8009c90 <TIM_Base_SetConfig+0xf0>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d108      	bne.n	8009bea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a25      	ldr	r2, [pc, #148]	; (8009c84 <TIM_Base_SetConfig+0xe4>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d01b      	beq.n	8009c2a <TIM_Base_SetConfig+0x8a>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bf8:	d017      	beq.n	8009c2a <TIM_Base_SetConfig+0x8a>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a22      	ldr	r2, [pc, #136]	; (8009c88 <TIM_Base_SetConfig+0xe8>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d013      	beq.n	8009c2a <TIM_Base_SetConfig+0x8a>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a21      	ldr	r2, [pc, #132]	; (8009c8c <TIM_Base_SetConfig+0xec>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d00f      	beq.n	8009c2a <TIM_Base_SetConfig+0x8a>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a20      	ldr	r2, [pc, #128]	; (8009c90 <TIM_Base_SetConfig+0xf0>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d00b      	beq.n	8009c2a <TIM_Base_SetConfig+0x8a>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a1f      	ldr	r2, [pc, #124]	; (8009c94 <TIM_Base_SetConfig+0xf4>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d007      	beq.n	8009c2a <TIM_Base_SetConfig+0x8a>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a1e      	ldr	r2, [pc, #120]	; (8009c98 <TIM_Base_SetConfig+0xf8>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d003      	beq.n	8009c2a <TIM_Base_SetConfig+0x8a>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a1d      	ldr	r2, [pc, #116]	; (8009c9c <TIM_Base_SetConfig+0xfc>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d108      	bne.n	8009c3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	689a      	ldr	r2, [r3, #8]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a08      	ldr	r2, [pc, #32]	; (8009c84 <TIM_Base_SetConfig+0xe4>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d103      	bne.n	8009c70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	691a      	ldr	r2, [r3, #16]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	615a      	str	r2, [r3, #20]
}
 8009c76:	bf00      	nop
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	40010000 	.word	0x40010000
 8009c88:	40000400 	.word	0x40000400
 8009c8c:	40000800 	.word	0x40000800
 8009c90:	40000c00 	.word	0x40000c00
 8009c94:	40014000 	.word	0x40014000
 8009c98:	40014400 	.word	0x40014400
 8009c9c:	40014800 	.word	0x40014800

08009ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b087      	sub	sp, #28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	f023 0201 	bic.w	r2, r3, #1
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f023 0303 	bic.w	r3, r3, #3
 8009cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f023 0302 	bic.w	r3, r3, #2
 8009ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a1c      	ldr	r2, [pc, #112]	; (8009d68 <TIM_OC1_SetConfig+0xc8>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d10c      	bne.n	8009d16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f023 0308 	bic.w	r3, r3, #8
 8009d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f023 0304 	bic.w	r3, r3, #4
 8009d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a13      	ldr	r2, [pc, #76]	; (8009d68 <TIM_OC1_SetConfig+0xc8>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d111      	bne.n	8009d42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	693a      	ldr	r2, [r7, #16]
 8009d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	621a      	str	r2, [r3, #32]
}
 8009d5c:	bf00      	nop
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	40010000 	.word	0x40010000

08009d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	f023 0210 	bic.w	r2, r3, #16
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	699b      	ldr	r3, [r3, #24]
 8009d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	021b      	lsls	r3, r3, #8
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f023 0320 	bic.w	r3, r3, #32
 8009db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	011b      	lsls	r3, r3, #4
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a1e      	ldr	r2, [pc, #120]	; (8009e40 <TIM_OC2_SetConfig+0xd4>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d10d      	bne.n	8009de8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	011b      	lsls	r3, r3, #4
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009de6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a15      	ldr	r2, [pc, #84]	; (8009e40 <TIM_OC2_SetConfig+0xd4>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d113      	bne.n	8009e18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	621a      	str	r2, [r3, #32]
}
 8009e32:	bf00      	nop
 8009e34:	371c      	adds	r7, #28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	40010000 	.word	0x40010000

08009e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b087      	sub	sp, #28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f023 0303 	bic.w	r3, r3, #3
 8009e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	021b      	lsls	r3, r3, #8
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a1d      	ldr	r2, [pc, #116]	; (8009f14 <TIM_OC3_SetConfig+0xd0>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d10d      	bne.n	8009ebe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	021b      	lsls	r3, r3, #8
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a14      	ldr	r2, [pc, #80]	; (8009f14 <TIM_OC3_SetConfig+0xd0>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d113      	bne.n	8009eee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	011b      	lsls	r3, r3, #4
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	011b      	lsls	r3, r3, #4
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	621a      	str	r2, [r3, #32]
}
 8009f08:	bf00      	nop
 8009f0a:	371c      	adds	r7, #28
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	40010000 	.word	0x40010000

08009f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	69db      	ldr	r3, [r3, #28]
 8009f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	021b      	lsls	r3, r3, #8
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	031b      	lsls	r3, r3, #12
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a10      	ldr	r2, [pc, #64]	; (8009fb4 <TIM_OC4_SetConfig+0x9c>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d109      	bne.n	8009f8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	695b      	ldr	r3, [r3, #20]
 8009f84:	019b      	lsls	r3, r3, #6
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	621a      	str	r2, [r3, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	371c      	adds	r7, #28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	40010000 	.word	0x40010000

08009fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b087      	sub	sp, #28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f003 031f 	and.w	r3, r3, #31
 8009fca:	2201      	movs	r2, #1
 8009fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6a1a      	ldr	r2, [r3, #32]
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	43db      	mvns	r3, r3
 8009fda:	401a      	ands	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6a1a      	ldr	r2, [r3, #32]
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	f003 031f 	and.w	r3, r3, #31
 8009fea:	6879      	ldr	r1, [r7, #4]
 8009fec:	fa01 f303 	lsl.w	r3, r1, r3
 8009ff0:	431a      	orrs	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	621a      	str	r2, [r3, #32]
}
 8009ff6:	bf00      	nop
 8009ff8:	371c      	adds	r7, #28
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a002:	b480      	push	{r7}
 800a004:	b083      	sub	sp, #12
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a00a:	bf00      	nop
 800a00c:	370c      	adds	r7, #12
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a016:	b480      	push	{r7}
 800a018:	b083      	sub	sp, #12
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a01e:	bf00      	nop
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b082      	sub	sp, #8
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e03f      	b.n	800a0bc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a042:	b2db      	uxtb	r3, r3
 800a044:	2b00      	cmp	r3, #0
 800a046:	d106      	bne.n	800a056 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7fa f8ff 	bl	8004254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2224      	movs	r2, #36	; 0x24
 800a05a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68da      	ldr	r2, [r3, #12]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a06c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f001 f978 	bl	800b364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	691a      	ldr	r2, [r3, #16]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a082:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	695a      	ldr	r2, [r3, #20]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a092:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68da      	ldr	r2, [r3, #12]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2220      	movs	r2, #32
 800a0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2220      	movs	r2, #32
 800a0b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08a      	sub	sp, #40	; 0x28
 800a0c8:	af02      	add	r7, sp, #8
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	603b      	str	r3, [r7, #0]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b20      	cmp	r3, #32
 800a0e2:	d17c      	bne.n	800a1de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <HAL_UART_Transmit+0x2c>
 800a0ea:	88fb      	ldrh	r3, [r7, #6]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e075      	b.n	800a1e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d101      	bne.n	800a102 <HAL_UART_Transmit+0x3e>
 800a0fe:	2302      	movs	r3, #2
 800a100:	e06e      	b.n	800a1e0 <HAL_UART_Transmit+0x11c>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2221      	movs	r2, #33	; 0x21
 800a114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a118:	f7fa fdec 	bl	8004cf4 <HAL_GetTick>
 800a11c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	88fa      	ldrh	r2, [r7, #6]
 800a122:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	88fa      	ldrh	r2, [r7, #6]
 800a128:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a132:	d108      	bne.n	800a146 <HAL_UART_Transmit+0x82>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d104      	bne.n	800a146 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	61bb      	str	r3, [r7, #24]
 800a144:	e003      	b.n	800a14e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a156:	e02a      	b.n	800a1ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	2200      	movs	r2, #0
 800a160:	2180      	movs	r1, #128	; 0x80
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 fe2f 	bl	800adc6 <UART_WaitOnFlagUntilTimeout>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e036      	b.n	800a1e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10b      	bne.n	800a190 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	881b      	ldrh	r3, [r3, #0]
 800a17c:	461a      	mov	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a186:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	3302      	adds	r3, #2
 800a18c:	61bb      	str	r3, [r7, #24]
 800a18e:	e007      	b.n	800a1a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	781a      	ldrb	r2, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	3301      	adds	r3, #1
 800a19e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1cf      	bne.n	800a158 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2140      	movs	r1, #64	; 0x40
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 fdff 	bl	800adc6 <UART_WaitOnFlagUntilTimeout>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e006      	b.n	800a1e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	e000      	b.n	800a1e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a1de:	2302      	movs	r3, #2
  }
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3720      	adds	r7, #32
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08a      	sub	sp, #40	; 0x28
 800a1ec:	af02      	add	r7, sp, #8
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	603b      	str	r3, [r7, #0]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b20      	cmp	r3, #32
 800a206:	f040 808c 	bne.w	800a322 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <HAL_UART_Receive+0x2e>
 800a210:	88fb      	ldrh	r3, [r7, #6]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e084      	b.n	800a324 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a220:	2b01      	cmp	r3, #1
 800a222:	d101      	bne.n	800a228 <HAL_UART_Receive+0x40>
 800a224:	2302      	movs	r3, #2
 800a226:	e07d      	b.n	800a324 <HAL_UART_Receive+0x13c>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2222      	movs	r2, #34	; 0x22
 800a23a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a244:	f7fa fd56 	bl	8004cf4 <HAL_GetTick>
 800a248:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	88fa      	ldrh	r2, [r7, #6]
 800a24e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	88fa      	ldrh	r2, [r7, #6]
 800a254:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a25e:	d108      	bne.n	800a272 <HAL_UART_Receive+0x8a>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d104      	bne.n	800a272 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a268:	2300      	movs	r3, #0
 800a26a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	61bb      	str	r3, [r7, #24]
 800a270:	e003      	b.n	800a27a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a276:	2300      	movs	r3, #0
 800a278:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a282:	e043      	b.n	800a30c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	2200      	movs	r2, #0
 800a28c:	2120      	movs	r1, #32
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 fd99 	bl	800adc6 <UART_WaitOnFlagUntilTimeout>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e042      	b.n	800a324 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10c      	bne.n	800a2be <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	3302      	adds	r3, #2
 800a2ba:	61bb      	str	r3, [r7, #24]
 800a2bc:	e01f      	b.n	800a2fe <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2c6:	d007      	beq.n	800a2d8 <HAL_UART_Receive+0xf0>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10a      	bne.n	800a2e6 <HAL_UART_Receive+0xfe>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d106      	bne.n	800a2e6 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	701a      	strb	r2, [r3, #0]
 800a2e4:	e008      	b.n	800a2f8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a302:	b29b      	uxth	r3, r3
 800a304:	3b01      	subs	r3, #1
 800a306:	b29a      	uxth	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a310:	b29b      	uxth	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1b6      	bne.n	800a284 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2220      	movs	r2, #32
 800a31a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	e000      	b.n	800a324 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a322:	2302      	movs	r3, #2
  }
}
 800a324:	4618      	mov	r0, r3
 800a326:	3720      	adds	r7, #32
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08c      	sub	sp, #48	; 0x30
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b20      	cmp	r3, #32
 800a344:	d165      	bne.n	800a412 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <HAL_UART_Transmit_DMA+0x26>
 800a34c:	88fb      	ldrh	r3, [r7, #6]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e05e      	b.n	800a414 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d101      	bne.n	800a364 <HAL_UART_Transmit_DMA+0x38>
 800a360:	2302      	movs	r3, #2
 800a362:	e057      	b.n	800a414 <HAL_UART_Transmit_DMA+0xe8>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	88fa      	ldrh	r2, [r7, #6]
 800a376:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	88fa      	ldrh	r2, [r7, #6]
 800a37c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2221      	movs	r2, #33	; 0x21
 800a388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a390:	4a22      	ldr	r2, [pc, #136]	; (800a41c <HAL_UART_Transmit_DMA+0xf0>)
 800a392:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a398:	4a21      	ldr	r2, [pc, #132]	; (800a420 <HAL_UART_Transmit_DMA+0xf4>)
 800a39a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a0:	4a20      	ldr	r2, [pc, #128]	; (800a424 <HAL_UART_Transmit_DMA+0xf8>)
 800a3a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a3ac:	f107 0308 	add.w	r3, r7, #8
 800a3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b8:	6819      	ldr	r1, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	88fb      	ldrh	r3, [r7, #6]
 800a3c4:	f7fb f926 	bl	8005614 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3d0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	3314      	adds	r3, #20
 800a3e0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	e853 3f00 	ldrex	r3, [r3]
 800a3e8:	617b      	str	r3, [r7, #20]
   return(result);
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3314      	adds	r3, #20
 800a3f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3fa:	627a      	str	r2, [r7, #36]	; 0x24
 800a3fc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fe:	6a39      	ldr	r1, [r7, #32]
 800a400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a402:	e841 2300 	strex	r3, r2, [r1]
 800a406:	61fb      	str	r3, [r7, #28]
   return(result);
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e5      	bne.n	800a3da <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	e000      	b.n	800a414 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a412:	2302      	movs	r3, #2
  }
}
 800a414:	4618      	mov	r0, r3
 800a416:	3730      	adds	r7, #48	; 0x30
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	0800ab21 	.word	0x0800ab21
 800a420:	0800abbb 	.word	0x0800abbb
 800a424:	0800ad33 	.word	0x0800ad33

0800a428 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	4613      	mov	r3, r2
 800a434:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b20      	cmp	r3, #32
 800a440:	d11d      	bne.n	800a47e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <HAL_UART_Receive_DMA+0x26>
 800a448:	88fb      	ldrh	r3, [r7, #6]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d101      	bne.n	800a452 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e016      	b.n	800a480 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d101      	bne.n	800a460 <HAL_UART_Receive_DMA+0x38>
 800a45c:	2302      	movs	r3, #2
 800a45e:	e00f      	b.n	800a480 <HAL_UART_Receive_DMA+0x58>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a46e:	88fb      	ldrh	r3, [r7, #6]
 800a470:	461a      	mov	r2, r3
 800a472:	68b9      	ldr	r1, [r7, #8]
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f000 fd15 	bl	800aea4 <UART_Start_Receive_DMA>
 800a47a:	4603      	mov	r3, r0
 800a47c:	e000      	b.n	800a480 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a47e:	2302      	movs	r3, #2
  }
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b090      	sub	sp, #64	; 0x40
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a490:	2300      	movs	r3, #0
 800a492:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a49e:	2b80      	cmp	r3, #128	; 0x80
 800a4a0:	bf0c      	ite	eq
 800a4a2:	2301      	moveq	r3, #1
 800a4a4:	2300      	movne	r3, #0
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b21      	cmp	r3, #33	; 0x21
 800a4b4:	d128      	bne.n	800a508 <HAL_UART_DMAStop+0x80>
 800a4b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d025      	beq.n	800a508 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3314      	adds	r3, #20
 800a4c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	623b      	str	r3, [r7, #32]
   return(result);
 800a4cc:	6a3b      	ldr	r3, [r7, #32]
 800a4ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3314      	adds	r3, #20
 800a4da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4dc:	633a      	str	r2, [r7, #48]	; 0x30
 800a4de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e5      	bne.n	800a4bc <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d004      	beq.n	800a502 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fb f8e1 	bl	80056c4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fd6c 	bl	800afe0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a512:	2b40      	cmp	r3, #64	; 0x40
 800a514:	bf0c      	ite	eq
 800a516:	2301      	moveq	r3, #1
 800a518:	2300      	movne	r3, #0
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b22      	cmp	r3, #34	; 0x22
 800a528:	d128      	bne.n	800a57c <HAL_UART_DMAStop+0xf4>
 800a52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d025      	beq.n	800a57c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	3314      	adds	r3, #20
 800a536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	e853 3f00 	ldrex	r3, [r3]
 800a53e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a546:	637b      	str	r3, [r7, #52]	; 0x34
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	3314      	adds	r3, #20
 800a54e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a550:	61fa      	str	r2, [r7, #28]
 800a552:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	69b9      	ldr	r1, [r7, #24]
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	617b      	str	r3, [r7, #20]
   return(result);
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e5      	bne.n	800a530 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d004      	beq.n	800a576 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a570:	4618      	mov	r0, r3
 800a572:	f7fb f8a7 	bl	80056c4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fd5a 	bl	800b030 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3740      	adds	r7, #64	; 0x40
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b0ba      	sub	sp, #232	; 0xe8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5be:	f003 030f 	and.w	r3, r3, #15
 800a5c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a5c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10f      	bne.n	800a5ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5d2:	f003 0320 	and.w	r3, r3, #32
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d009      	beq.n	800a5ee <HAL_UART_IRQHandler+0x66>
 800a5da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5de:	f003 0320 	and.w	r3, r3, #32
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fe01 	bl	800b1ee <UART_Receive_IT>
      return;
 800a5ec:	e256      	b.n	800aa9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a5ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 80de 	beq.w	800a7b4 <HAL_UART_IRQHandler+0x22c>
 800a5f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	d106      	bne.n	800a612 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a608:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 80d1 	beq.w	800a7b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00b      	beq.n	800a636 <HAL_UART_IRQHandler+0xae>
 800a61e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a626:	2b00      	cmp	r3, #0
 800a628:	d005      	beq.n	800a636 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62e:	f043 0201 	orr.w	r2, r3, #1
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a63a:	f003 0304 	and.w	r3, r3, #4
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00b      	beq.n	800a65a <HAL_UART_IRQHandler+0xd2>
 800a642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d005      	beq.n	800a65a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a652:	f043 0202 	orr.w	r2, r3, #2
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a65e:	f003 0302 	and.w	r3, r3, #2
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00b      	beq.n	800a67e <HAL_UART_IRQHandler+0xf6>
 800a666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d005      	beq.n	800a67e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a676:	f043 0204 	orr.w	r2, r3, #4
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a682:	f003 0308 	and.w	r3, r3, #8
 800a686:	2b00      	cmp	r3, #0
 800a688:	d011      	beq.n	800a6ae <HAL_UART_IRQHandler+0x126>
 800a68a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a68e:	f003 0320 	and.w	r3, r3, #32
 800a692:	2b00      	cmp	r3, #0
 800a694:	d105      	bne.n	800a6a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d005      	beq.n	800a6ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	f043 0208 	orr.w	r2, r3, #8
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 81ed 	beq.w	800aa92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6bc:	f003 0320 	and.w	r3, r3, #32
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d008      	beq.n	800a6d6 <HAL_UART_IRQHandler+0x14e>
 800a6c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6c8:	f003 0320 	and.w	r3, r3, #32
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d002      	beq.n	800a6d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fd8c 	bl	800b1ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e0:	2b40      	cmp	r3, #64	; 0x40
 800a6e2:	bf0c      	ite	eq
 800a6e4:	2301      	moveq	r3, #1
 800a6e6:	2300      	movne	r3, #0
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f2:	f003 0308 	and.w	r3, r3, #8
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d103      	bne.n	800a702 <HAL_UART_IRQHandler+0x17a>
 800a6fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d04f      	beq.n	800a7a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fc94 	bl	800b030 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a712:	2b40      	cmp	r3, #64	; 0x40
 800a714:	d141      	bne.n	800a79a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3314      	adds	r3, #20
 800a71c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a724:	e853 3f00 	ldrex	r3, [r3]
 800a728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a72c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	3314      	adds	r3, #20
 800a73e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a74e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a752:	e841 2300 	strex	r3, r2, [r1]
 800a756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a75a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1d9      	bne.n	800a716 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a766:	2b00      	cmp	r3, #0
 800a768:	d013      	beq.n	800a792 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76e:	4a7d      	ldr	r2, [pc, #500]	; (800a964 <HAL_UART_IRQHandler+0x3dc>)
 800a770:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a776:	4618      	mov	r0, r3
 800a778:	f7fb f814 	bl	80057a4 <HAL_DMA_Abort_IT>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d016      	beq.n	800a7b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a78c:	4610      	mov	r0, r2
 800a78e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a790:	e00e      	b.n	800a7b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f9ae 	bl	800aaf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a798:	e00a      	b.n	800a7b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f9aa 	bl	800aaf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7a0:	e006      	b.n	800a7b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f9a6 	bl	800aaf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a7ae:	e170      	b.n	800aa92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b0:	bf00      	nop
    return;
 800a7b2:	e16e      	b.n	800aa92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	f040 814a 	bne.w	800aa52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c2:	f003 0310 	and.w	r3, r3, #16
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 8143 	beq.w	800aa52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a7cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7d0:	f003 0310 	and.w	r3, r3, #16
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 813c 	beq.w	800aa52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60bb      	str	r3, [r7, #8]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	60bb      	str	r3, [r7, #8]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	60bb      	str	r3, [r7, #8]
 800a7ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7fa:	2b40      	cmp	r3, #64	; 0x40
 800a7fc:	f040 80b4 	bne.w	800a968 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a80c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 8140 	beq.w	800aa96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a81a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a81e:	429a      	cmp	r2, r3
 800a820:	f080 8139 	bcs.w	800aa96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a82a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a830:	69db      	ldr	r3, [r3, #28]
 800a832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a836:	f000 8088 	beq.w	800a94a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	330c      	adds	r3, #12
 800a840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a848:	e853 3f00 	ldrex	r3, [r3]
 800a84c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	330c      	adds	r3, #12
 800a862:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a866:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a86a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a872:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a876:	e841 2300 	strex	r3, r2, [r1]
 800a87a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a87e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1d9      	bne.n	800a83a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3314      	adds	r3, #20
 800a88c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a898:	f023 0301 	bic.w	r3, r3, #1
 800a89c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	3314      	adds	r3, #20
 800a8a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a8aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a8ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a8b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a8b6:	e841 2300 	strex	r3, r2, [r1]
 800a8ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a8bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1e1      	bne.n	800a886 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3314      	adds	r3, #20
 800a8c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8cc:	e853 3f00 	ldrex	r3, [r3]
 800a8d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a8d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3314      	adds	r3, #20
 800a8e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a8e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a8e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a8ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a8f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e3      	bne.n	800a8c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2220      	movs	r2, #32
 800a8fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	330c      	adds	r3, #12
 800a90e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a912:	e853 3f00 	ldrex	r3, [r3]
 800a916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a91a:	f023 0310 	bic.w	r3, r3, #16
 800a91e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	330c      	adds	r3, #12
 800a928:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a92c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a92e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a934:	e841 2300 	strex	r3, r2, [r1]
 800a938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1e3      	bne.n	800a908 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	4618      	mov	r0, r3
 800a946:	f7fa febd 	bl	80056c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a952:	b29b      	uxth	r3, r3
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	b29b      	uxth	r3, r3
 800a958:	4619      	mov	r1, r3
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f8d4 	bl	800ab08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a960:	e099      	b.n	800aa96 <HAL_UART_IRQHandler+0x50e>
 800a962:	bf00      	nop
 800a964:	0800b0f7 	.word	0x0800b0f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a970:	b29b      	uxth	r3, r3
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f000 808b 	beq.w	800aa9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 8086 	beq.w	800aa9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	330c      	adds	r3, #12
 800a994:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a998:	e853 3f00 	ldrex	r3, [r3]
 800a99c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	330c      	adds	r3, #12
 800a9ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a9b2:	647a      	str	r2, [r7, #68]	; 0x44
 800a9b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9ba:	e841 2300 	strex	r3, r2, [r1]
 800a9be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1e3      	bne.n	800a98e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3314      	adds	r3, #20
 800a9cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	e853 3f00 	ldrex	r3, [r3]
 800a9d4:	623b      	str	r3, [r7, #32]
   return(result);
 800a9d6:	6a3b      	ldr	r3, [r7, #32]
 800a9d8:	f023 0301 	bic.w	r3, r3, #1
 800a9dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3314      	adds	r3, #20
 800a9e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a9ea:	633a      	str	r2, [r7, #48]	; 0x30
 800a9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e3      	bne.n	800a9c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2220      	movs	r2, #32
 800aa02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	330c      	adds	r3, #12
 800aa12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	e853 3f00 	ldrex	r3, [r3]
 800aa1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f023 0310 	bic.w	r3, r3, #16
 800aa22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	330c      	adds	r3, #12
 800aa2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aa30:	61fa      	str	r2, [r7, #28]
 800aa32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	69b9      	ldr	r1, [r7, #24]
 800aa36:	69fa      	ldr	r2, [r7, #28]
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	617b      	str	r3, [r7, #20]
   return(result);
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e3      	bne.n	800aa0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa48:	4619      	mov	r1, r3
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f85c 	bl	800ab08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa50:	e023      	b.n	800aa9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d009      	beq.n	800aa72 <HAL_UART_IRQHandler+0x4ea>
 800aa5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d003      	beq.n	800aa72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fb57 	bl	800b11e <UART_Transmit_IT>
    return;
 800aa70:	e014      	b.n	800aa9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00e      	beq.n	800aa9c <HAL_UART_IRQHandler+0x514>
 800aa7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d008      	beq.n	800aa9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fb97 	bl	800b1be <UART_EndTransmit_IT>
    return;
 800aa90:	e004      	b.n	800aa9c <HAL_UART_IRQHandler+0x514>
    return;
 800aa92:	bf00      	nop
 800aa94:	e002      	b.n	800aa9c <HAL_UART_IRQHandler+0x514>
      return;
 800aa96:	bf00      	nop
 800aa98:	e000      	b.n	800aa9c <HAL_UART_IRQHandler+0x514>
      return;
 800aa9a:	bf00      	nop
  }
}
 800aa9c:	37e8      	adds	r7, #232	; 0xe8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop

0800aaa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aac0:	bf00      	nop
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800aad4:	bf00      	nop
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aafc:	bf00      	nop
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	460b      	mov	r3, r1
 800ab12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b090      	sub	sp, #64	; 0x40
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d137      	bne.n	800abac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ab3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab3e:	2200      	movs	r2, #0
 800ab40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3314      	adds	r3, #20
 800ab48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	e853 3f00 	ldrex	r3, [r3]
 800ab50:	623b      	str	r3, [r7, #32]
   return(result);
 800ab52:	6a3b      	ldr	r3, [r7, #32]
 800ab54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab58:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3314      	adds	r3, #20
 800ab60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab62:	633a      	str	r2, [r7, #48]	; 0x30
 800ab64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab6a:	e841 2300 	strex	r3, r2, [r1]
 800ab6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1e5      	bne.n	800ab42 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	330c      	adds	r3, #12
 800ab7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	e853 3f00 	ldrex	r3, [r3]
 800ab84:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ab8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	330c      	adds	r3, #12
 800ab94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab96:	61fa      	str	r2, [r7, #28]
 800ab98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9a:	69b9      	ldr	r1, [r7, #24]
 800ab9c:	69fa      	ldr	r2, [r7, #28]
 800ab9e:	e841 2300 	strex	r3, r2, [r1]
 800aba2:	617b      	str	r3, [r7, #20]
   return(result);
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1e5      	bne.n	800ab76 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abaa:	e002      	b.n	800abb2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800abac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800abae:	f7ff ff79 	bl	800aaa4 <HAL_UART_TxCpltCallback>
}
 800abb2:	bf00      	nop
 800abb4:	3740      	adds	r7, #64	; 0x40
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f7ff ff75 	bl	800aab8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abce:	bf00      	nop
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b09c      	sub	sp, #112	; 0x70
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d172      	bne.n	800acd8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800abf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf4:	2200      	movs	r2, #0
 800abf6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	330c      	adds	r3, #12
 800abfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac02:	e853 3f00 	ldrex	r3, [r3]
 800ac06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	330c      	adds	r3, #12
 800ac16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac18:	65ba      	str	r2, [r7, #88]	; 0x58
 800ac1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac20:	e841 2300 	strex	r3, r2, [r1]
 800ac24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1e5      	bne.n	800abf8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3314      	adds	r3, #20
 800ac32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac36:	e853 3f00 	ldrex	r3, [r3]
 800ac3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3e:	f023 0301 	bic.w	r3, r3, #1
 800ac42:	667b      	str	r3, [r7, #100]	; 0x64
 800ac44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3314      	adds	r3, #20
 800ac4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac4c:	647a      	str	r2, [r7, #68]	; 0x44
 800ac4e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac54:	e841 2300 	strex	r3, r2, [r1]
 800ac58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1e5      	bne.n	800ac2c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3314      	adds	r3, #20
 800ac66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	e853 3f00 	ldrex	r3, [r3]
 800ac6e:	623b      	str	r3, [r7, #32]
   return(result);
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac76:	663b      	str	r3, [r7, #96]	; 0x60
 800ac78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3314      	adds	r3, #20
 800ac7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac80:	633a      	str	r2, [r7, #48]	; 0x30
 800ac82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac88:	e841 2300 	strex	r3, r2, [r1]
 800ac8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1e5      	bne.n	800ac60 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac96:	2220      	movs	r2, #32
 800ac98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d119      	bne.n	800acd8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	330c      	adds	r3, #12
 800acaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	e853 3f00 	ldrex	r3, [r3]
 800acb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f023 0310 	bic.w	r3, r3, #16
 800acba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	330c      	adds	r3, #12
 800acc2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acc4:	61fa      	str	r2, [r7, #28]
 800acc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc8:	69b9      	ldr	r1, [r7, #24]
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	e841 2300 	strex	r3, r2, [r1]
 800acd0:	617b      	str	r3, [r7, #20]
   return(result);
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1e5      	bne.n	800aca4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d106      	bne.n	800acee <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ace0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ace2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ace4:	4619      	mov	r1, r3
 800ace6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ace8:	f7ff ff0e 	bl	800ab08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800acec:	e002      	b.n	800acf4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800acee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acf0:	f7ff feec 	bl	800aacc <HAL_UART_RxCpltCallback>
}
 800acf4:	bf00      	nop
 800acf6:	3770      	adds	r7, #112	; 0x70
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad08:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d108      	bne.n	800ad24 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad16:	085b      	lsrs	r3, r3, #1
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f7ff fef3 	bl	800ab08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad22:	e002      	b.n	800ad2a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f7ff fedb 	bl	800aae0 <HAL_UART_RxHalfCpltCallback>
}
 800ad2a:	bf00      	nop
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b084      	sub	sp, #16
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad42:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	695b      	ldr	r3, [r3, #20]
 800ad4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad4e:	2b80      	cmp	r3, #128	; 0x80
 800ad50:	bf0c      	ite	eq
 800ad52:	2301      	moveq	r3, #1
 800ad54:	2300      	movne	r3, #0
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	2b21      	cmp	r3, #33	; 0x21
 800ad64:	d108      	bne.n	800ad78 <UART_DMAError+0x46>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d005      	beq.n	800ad78 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ad72:	68b8      	ldr	r0, [r7, #8]
 800ad74:	f000 f934 	bl	800afe0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad82:	2b40      	cmp	r3, #64	; 0x40
 800ad84:	bf0c      	ite	eq
 800ad86:	2301      	moveq	r3, #1
 800ad88:	2300      	movne	r3, #0
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	2b22      	cmp	r3, #34	; 0x22
 800ad98:	d108      	bne.n	800adac <UART_DMAError+0x7a>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d005      	beq.n	800adac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2200      	movs	r2, #0
 800ada4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ada6:	68b8      	ldr	r0, [r7, #8]
 800ada8:	f000 f942 	bl	800b030 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb0:	f043 0210 	orr.w	r2, r3, #16
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adb8:	68b8      	ldr	r0, [r7, #8]
 800adba:	f7ff fe9b 	bl	800aaf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adbe:	bf00      	nop
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b090      	sub	sp, #64	; 0x40
 800adca:	af00      	add	r7, sp, #0
 800adcc:	60f8      	str	r0, [r7, #12]
 800adce:	60b9      	str	r1, [r7, #8]
 800add0:	603b      	str	r3, [r7, #0]
 800add2:	4613      	mov	r3, r2
 800add4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800add6:	e050      	b.n	800ae7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800add8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adde:	d04c      	beq.n	800ae7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ade0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d007      	beq.n	800adf6 <UART_WaitOnFlagUntilTimeout+0x30>
 800ade6:	f7f9 ff85 	bl	8004cf4 <HAL_GetTick>
 800adea:	4602      	mov	r2, r0
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	1ad3      	subs	r3, r2, r3
 800adf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d241      	bcs.n	800ae7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	330c      	adds	r3, #12
 800adfc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	e853 3f00 	ldrex	r3, [r3]
 800ae04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	330c      	adds	r3, #12
 800ae14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae16:	637a      	str	r2, [r7, #52]	; 0x34
 800ae18:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae1e:	e841 2300 	strex	r3, r2, [r1]
 800ae22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1e5      	bne.n	800adf6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3314      	adds	r3, #20
 800ae30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	e853 3f00 	ldrex	r3, [r3]
 800ae38:	613b      	str	r3, [r7, #16]
   return(result);
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	f023 0301 	bic.w	r3, r3, #1
 800ae40:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	3314      	adds	r3, #20
 800ae48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae4a:	623a      	str	r2, [r7, #32]
 800ae4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4e:	69f9      	ldr	r1, [r7, #28]
 800ae50:	6a3a      	ldr	r2, [r7, #32]
 800ae52:	e841 2300 	strex	r3, r2, [r1]
 800ae56:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1e5      	bne.n	800ae2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2220      	movs	r2, #32
 800ae62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2220      	movs	r2, #32
 800ae6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ae76:	2303      	movs	r3, #3
 800ae78:	e00f      	b.n	800ae9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	4013      	ands	r3, r2
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	bf0c      	ite	eq
 800ae8a:	2301      	moveq	r3, #1
 800ae8c:	2300      	movne	r3, #0
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	461a      	mov	r2, r3
 800ae92:	79fb      	ldrb	r3, [r7, #7]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d09f      	beq.n	800add8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3740      	adds	r7, #64	; 0x40
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
	...

0800aea4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b098      	sub	sp, #96	; 0x60
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	88fa      	ldrh	r2, [r7, #6]
 800aebc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2222      	movs	r2, #34	; 0x22
 800aec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed0:	4a40      	ldr	r2, [pc, #256]	; (800afd4 <UART_Start_Receive_DMA+0x130>)
 800aed2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed8:	4a3f      	ldr	r2, [pc, #252]	; (800afd8 <UART_Start_Receive_DMA+0x134>)
 800aeda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee0:	4a3e      	ldr	r2, [pc, #248]	; (800afdc <UART_Start_Receive_DMA+0x138>)
 800aee2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee8:	2200      	movs	r2, #0
 800aeea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aeec:	f107 0308 	add.w	r3, r7, #8
 800aef0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3304      	adds	r3, #4
 800aefc:	4619      	mov	r1, r3
 800aefe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	88fb      	ldrh	r3, [r7, #6]
 800af04:	f7fa fb86 	bl	8005614 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800af08:	2300      	movs	r3, #0
 800af0a:	613b      	str	r3, [r7, #16]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	613b      	str	r3, [r7, #16]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	613b      	str	r3, [r7, #16]
 800af1c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d019      	beq.n	800af62 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	330c      	adds	r3, #12
 800af34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af38:	e853 3f00 	ldrex	r3, [r3]
 800af3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af44:	65bb      	str	r3, [r7, #88]	; 0x58
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	330c      	adds	r3, #12
 800af4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af4e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800af50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800af54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af56:	e841 2300 	strex	r3, r2, [r1]
 800af5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800af5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1e5      	bne.n	800af2e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3314      	adds	r3, #20
 800af68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6c:	e853 3f00 	ldrex	r3, [r3]
 800af70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af74:	f043 0301 	orr.w	r3, r3, #1
 800af78:	657b      	str	r3, [r7, #84]	; 0x54
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	3314      	adds	r3, #20
 800af80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af82:	63ba      	str	r2, [r7, #56]	; 0x38
 800af84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af8a:	e841 2300 	strex	r3, r2, [r1]
 800af8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e5      	bne.n	800af62 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3314      	adds	r3, #20
 800af9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	617b      	str	r3, [r7, #20]
   return(result);
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afac:	653b      	str	r3, [r7, #80]	; 0x50
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3314      	adds	r3, #20
 800afb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afb6:	627a      	str	r2, [r7, #36]	; 0x24
 800afb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	6a39      	ldr	r1, [r7, #32]
 800afbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	61fb      	str	r3, [r7, #28]
   return(result);
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e5      	bne.n	800af96 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3760      	adds	r7, #96	; 0x60
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	0800abd7 	.word	0x0800abd7
 800afd8:	0800acfd 	.word	0x0800acfd
 800afdc:	0800ad33 	.word	0x0800ad33

0800afe0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b089      	sub	sp, #36	; 0x24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	330c      	adds	r3, #12
 800afee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	e853 3f00 	ldrex	r3, [r3]
 800aff6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800affe:	61fb      	str	r3, [r7, #28]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	330c      	adds	r3, #12
 800b006:	69fa      	ldr	r2, [r7, #28]
 800b008:	61ba      	str	r2, [r7, #24]
 800b00a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00c:	6979      	ldr	r1, [r7, #20]
 800b00e:	69ba      	ldr	r2, [r7, #24]
 800b010:	e841 2300 	strex	r3, r2, [r1]
 800b014:	613b      	str	r3, [r7, #16]
   return(result);
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d1e5      	bne.n	800afe8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2220      	movs	r2, #32
 800b020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b024:	bf00      	nop
 800b026:	3724      	adds	r7, #36	; 0x24
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b030:	b480      	push	{r7}
 800b032:	b095      	sub	sp, #84	; 0x54
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	330c      	adds	r3, #12
 800b03e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b042:	e853 3f00 	ldrex	r3, [r3]
 800b046:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b04e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	330c      	adds	r3, #12
 800b056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b058:	643a      	str	r2, [r7, #64]	; 0x40
 800b05a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b05e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b060:	e841 2300 	strex	r3, r2, [r1]
 800b064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d1e5      	bne.n	800b038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3314      	adds	r3, #20
 800b072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b074:	6a3b      	ldr	r3, [r7, #32]
 800b076:	e853 3f00 	ldrex	r3, [r3]
 800b07a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	f023 0301 	bic.w	r3, r3, #1
 800b082:	64bb      	str	r3, [r7, #72]	; 0x48
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	3314      	adds	r3, #20
 800b08a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b08c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b08e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b094:	e841 2300 	strex	r3, r2, [r1]
 800b098:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1e5      	bne.n	800b06c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d119      	bne.n	800b0dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	330c      	adds	r3, #12
 800b0ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	e853 3f00 	ldrex	r3, [r3]
 800b0b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	f023 0310 	bic.w	r3, r3, #16
 800b0be:	647b      	str	r3, [r7, #68]	; 0x44
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	330c      	adds	r3, #12
 800b0c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0c8:	61ba      	str	r2, [r7, #24]
 800b0ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0cc:	6979      	ldr	r1, [r7, #20]
 800b0ce:	69ba      	ldr	r2, [r7, #24]
 800b0d0:	e841 2300 	strex	r3, r2, [r1]
 800b0d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1e5      	bne.n	800b0a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2220      	movs	r2, #32
 800b0e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b0ea:	bf00      	nop
 800b0ec:	3754      	adds	r7, #84	; 0x54
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b084      	sub	sp, #16
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b102:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f7ff fcef 	bl	800aaf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b116:	bf00      	nop
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b11e:	b480      	push	{r7}
 800b120:	b085      	sub	sp, #20
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b21      	cmp	r3, #33	; 0x21
 800b130:	d13e      	bne.n	800b1b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b13a:	d114      	bne.n	800b166 <UART_Transmit_IT+0x48>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	691b      	ldr	r3, [r3, #16]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d110      	bne.n	800b166 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a1b      	ldr	r3, [r3, #32]
 800b148:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	881b      	ldrh	r3, [r3, #0]
 800b14e:	461a      	mov	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b158:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	1c9a      	adds	r2, r3, #2
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	621a      	str	r2, [r3, #32]
 800b164:	e008      	b.n	800b178 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a1b      	ldr	r3, [r3, #32]
 800b16a:	1c59      	adds	r1, r3, #1
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	6211      	str	r1, [r2, #32]
 800b170:	781a      	ldrb	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	3b01      	subs	r3, #1
 800b180:	b29b      	uxth	r3, r3
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	4619      	mov	r1, r3
 800b186:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10f      	bne.n	800b1ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b19a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68da      	ldr	r2, [r3, #12]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	e000      	b.n	800b1b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b1b0:	2302      	movs	r3, #2
  }
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3714      	adds	r7, #20
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b082      	sub	sp, #8
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68da      	ldr	r2, [r3, #12]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2220      	movs	r2, #32
 800b1da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7ff fc60 	bl	800aaa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b08c      	sub	sp, #48	; 0x30
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b22      	cmp	r3, #34	; 0x22
 800b200:	f040 80ab 	bne.w	800b35a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b20c:	d117      	bne.n	800b23e <UART_Receive_IT+0x50>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d113      	bne.n	800b23e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b216:	2300      	movs	r3, #0
 800b218:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	b29b      	uxth	r3, r3
 800b228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b230:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b236:	1c9a      	adds	r2, r3, #2
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	629a      	str	r2, [r3, #40]	; 0x28
 800b23c:	e026      	b.n	800b28c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b242:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b244:	2300      	movs	r3, #0
 800b246:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b250:	d007      	beq.n	800b262 <UART_Receive_IT+0x74>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10a      	bne.n	800b270 <UART_Receive_IT+0x82>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d106      	bne.n	800b270 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26c:	701a      	strb	r2, [r3, #0]
 800b26e:	e008      	b.n	800b282 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	b2db      	uxtb	r3, r3
 800b278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b27c:	b2da      	uxtb	r2, r3
 800b27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b280:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b290:	b29b      	uxth	r3, r3
 800b292:	3b01      	subs	r3, #1
 800b294:	b29b      	uxth	r3, r3
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	4619      	mov	r1, r3
 800b29a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d15a      	bne.n	800b356 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68da      	ldr	r2, [r3, #12]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f022 0220 	bic.w	r2, r2, #32
 800b2ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68da      	ldr	r2, [r3, #12]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	695a      	ldr	r2, [r3, #20]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f022 0201 	bic.w	r2, r2, #1
 800b2ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2220      	movs	r2, #32
 800b2d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d135      	bne.n	800b34c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	330c      	adds	r3, #12
 800b2ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	e853 3f00 	ldrex	r3, [r3]
 800b2f4:	613b      	str	r3, [r7, #16]
   return(result);
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	f023 0310 	bic.w	r3, r3, #16
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	330c      	adds	r3, #12
 800b304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b306:	623a      	str	r2, [r7, #32]
 800b308:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30a:	69f9      	ldr	r1, [r7, #28]
 800b30c:	6a3a      	ldr	r2, [r7, #32]
 800b30e:	e841 2300 	strex	r3, r2, [r1]
 800b312:	61bb      	str	r3, [r7, #24]
   return(result);
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1e5      	bne.n	800b2e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 0310 	and.w	r3, r3, #16
 800b324:	2b10      	cmp	r3, #16
 800b326:	d10a      	bne.n	800b33e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b328:	2300      	movs	r3, #0
 800b32a:	60fb      	str	r3, [r7, #12]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	60fb      	str	r3, [r7, #12]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	60fb      	str	r3, [r7, #12]
 800b33c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b342:	4619      	mov	r1, r3
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7ff fbdf 	bl	800ab08 <HAL_UARTEx_RxEventCallback>
 800b34a:	e002      	b.n	800b352 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f7ff fbbd 	bl	800aacc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	e002      	b.n	800b35c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	e000      	b.n	800b35c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b35a:	2302      	movs	r3, #2
  }
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3730      	adds	r7, #48	; 0x30
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b368:	b0c0      	sub	sp, #256	; 0x100
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b37c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b380:	68d9      	ldr	r1, [r3, #12]
 800b382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	ea40 0301 	orr.w	r3, r0, r1
 800b38c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b38e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b392:	689a      	ldr	r2, [r3, #8]
 800b394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	431a      	orrs	r2, r3
 800b39c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3a8:	69db      	ldr	r3, [r3, #28]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b3bc:	f021 010c 	bic.w	r1, r1, #12
 800b3c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b3ca:	430b      	orrs	r3, r1
 800b3cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b3ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	695b      	ldr	r3, [r3, #20]
 800b3d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3de:	6999      	ldr	r1, [r3, #24]
 800b3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	ea40 0301 	orr.w	r3, r0, r1
 800b3ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	4b8f      	ldr	r3, [pc, #572]	; (800b630 <UART_SetConfig+0x2cc>)
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d005      	beq.n	800b404 <UART_SetConfig+0xa0>
 800b3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	4b8d      	ldr	r3, [pc, #564]	; (800b634 <UART_SetConfig+0x2d0>)
 800b400:	429a      	cmp	r2, r3
 800b402:	d104      	bne.n	800b40e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b404:	f7fd feea 	bl	80091dc <HAL_RCC_GetPCLK2Freq>
 800b408:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b40c:	e003      	b.n	800b416 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b40e:	f7fd fed1 	bl	80091b4 <HAL_RCC_GetPCLK1Freq>
 800b412:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b41a:	69db      	ldr	r3, [r3, #28]
 800b41c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b420:	f040 810c 	bne.w	800b63c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b428:	2200      	movs	r2, #0
 800b42a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b42e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b432:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b436:	4622      	mov	r2, r4
 800b438:	462b      	mov	r3, r5
 800b43a:	1891      	adds	r1, r2, r2
 800b43c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b43e:	415b      	adcs	r3, r3
 800b440:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b442:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b446:	4621      	mov	r1, r4
 800b448:	eb12 0801 	adds.w	r8, r2, r1
 800b44c:	4629      	mov	r1, r5
 800b44e:	eb43 0901 	adc.w	r9, r3, r1
 800b452:	f04f 0200 	mov.w	r2, #0
 800b456:	f04f 0300 	mov.w	r3, #0
 800b45a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b45e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b466:	4690      	mov	r8, r2
 800b468:	4699      	mov	r9, r3
 800b46a:	4623      	mov	r3, r4
 800b46c:	eb18 0303 	adds.w	r3, r8, r3
 800b470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b474:	462b      	mov	r3, r5
 800b476:	eb49 0303 	adc.w	r3, r9, r3
 800b47a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b47e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b48a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b48e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b492:	460b      	mov	r3, r1
 800b494:	18db      	adds	r3, r3, r3
 800b496:	653b      	str	r3, [r7, #80]	; 0x50
 800b498:	4613      	mov	r3, r2
 800b49a:	eb42 0303 	adc.w	r3, r2, r3
 800b49e:	657b      	str	r3, [r7, #84]	; 0x54
 800b4a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b4a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b4a8:	f7f5 fbf8 	bl	8000c9c <__aeabi_uldivmod>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4b61      	ldr	r3, [pc, #388]	; (800b638 <UART_SetConfig+0x2d4>)
 800b4b2:	fba3 2302 	umull	r2, r3, r3, r2
 800b4b6:	095b      	lsrs	r3, r3, #5
 800b4b8:	011c      	lsls	r4, r3, #4
 800b4ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b4c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b4cc:	4642      	mov	r2, r8
 800b4ce:	464b      	mov	r3, r9
 800b4d0:	1891      	adds	r1, r2, r2
 800b4d2:	64b9      	str	r1, [r7, #72]	; 0x48
 800b4d4:	415b      	adcs	r3, r3
 800b4d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b4dc:	4641      	mov	r1, r8
 800b4de:	eb12 0a01 	adds.w	sl, r2, r1
 800b4e2:	4649      	mov	r1, r9
 800b4e4:	eb43 0b01 	adc.w	fp, r3, r1
 800b4e8:	f04f 0200 	mov.w	r2, #0
 800b4ec:	f04f 0300 	mov.w	r3, #0
 800b4f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b4f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b4f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4fc:	4692      	mov	sl, r2
 800b4fe:	469b      	mov	fp, r3
 800b500:	4643      	mov	r3, r8
 800b502:	eb1a 0303 	adds.w	r3, sl, r3
 800b506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b50a:	464b      	mov	r3, r9
 800b50c:	eb4b 0303 	adc.w	r3, fp, r3
 800b510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b520:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b524:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b528:	460b      	mov	r3, r1
 800b52a:	18db      	adds	r3, r3, r3
 800b52c:	643b      	str	r3, [r7, #64]	; 0x40
 800b52e:	4613      	mov	r3, r2
 800b530:	eb42 0303 	adc.w	r3, r2, r3
 800b534:	647b      	str	r3, [r7, #68]	; 0x44
 800b536:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b53a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b53e:	f7f5 fbad 	bl	8000c9c <__aeabi_uldivmod>
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	4611      	mov	r1, r2
 800b548:	4b3b      	ldr	r3, [pc, #236]	; (800b638 <UART_SetConfig+0x2d4>)
 800b54a:	fba3 2301 	umull	r2, r3, r3, r1
 800b54e:	095b      	lsrs	r3, r3, #5
 800b550:	2264      	movs	r2, #100	; 0x64
 800b552:	fb02 f303 	mul.w	r3, r2, r3
 800b556:	1acb      	subs	r3, r1, r3
 800b558:	00db      	lsls	r3, r3, #3
 800b55a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b55e:	4b36      	ldr	r3, [pc, #216]	; (800b638 <UART_SetConfig+0x2d4>)
 800b560:	fba3 2302 	umull	r2, r3, r3, r2
 800b564:	095b      	lsrs	r3, r3, #5
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b56c:	441c      	add	r4, r3
 800b56e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b572:	2200      	movs	r2, #0
 800b574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b578:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b57c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b580:	4642      	mov	r2, r8
 800b582:	464b      	mov	r3, r9
 800b584:	1891      	adds	r1, r2, r2
 800b586:	63b9      	str	r1, [r7, #56]	; 0x38
 800b588:	415b      	adcs	r3, r3
 800b58a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b58c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b590:	4641      	mov	r1, r8
 800b592:	1851      	adds	r1, r2, r1
 800b594:	6339      	str	r1, [r7, #48]	; 0x30
 800b596:	4649      	mov	r1, r9
 800b598:	414b      	adcs	r3, r1
 800b59a:	637b      	str	r3, [r7, #52]	; 0x34
 800b59c:	f04f 0200 	mov.w	r2, #0
 800b5a0:	f04f 0300 	mov.w	r3, #0
 800b5a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b5a8:	4659      	mov	r1, fp
 800b5aa:	00cb      	lsls	r3, r1, #3
 800b5ac:	4651      	mov	r1, sl
 800b5ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5b2:	4651      	mov	r1, sl
 800b5b4:	00ca      	lsls	r2, r1, #3
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	4642      	mov	r2, r8
 800b5be:	189b      	adds	r3, r3, r2
 800b5c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5c4:	464b      	mov	r3, r9
 800b5c6:	460a      	mov	r2, r1
 800b5c8:	eb42 0303 	adc.w	r3, r2, r3
 800b5cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b5dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b5e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	18db      	adds	r3, r3, r3
 800b5e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	eb42 0303 	adc.w	r3, r2, r3
 800b5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b5f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b5fa:	f7f5 fb4f 	bl	8000c9c <__aeabi_uldivmod>
 800b5fe:	4602      	mov	r2, r0
 800b600:	460b      	mov	r3, r1
 800b602:	4b0d      	ldr	r3, [pc, #52]	; (800b638 <UART_SetConfig+0x2d4>)
 800b604:	fba3 1302 	umull	r1, r3, r3, r2
 800b608:	095b      	lsrs	r3, r3, #5
 800b60a:	2164      	movs	r1, #100	; 0x64
 800b60c:	fb01 f303 	mul.w	r3, r1, r3
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	00db      	lsls	r3, r3, #3
 800b614:	3332      	adds	r3, #50	; 0x32
 800b616:	4a08      	ldr	r2, [pc, #32]	; (800b638 <UART_SetConfig+0x2d4>)
 800b618:	fba2 2303 	umull	r2, r3, r2, r3
 800b61c:	095b      	lsrs	r3, r3, #5
 800b61e:	f003 0207 	and.w	r2, r3, #7
 800b622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4422      	add	r2, r4
 800b62a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b62c:	e106      	b.n	800b83c <UART_SetConfig+0x4d8>
 800b62e:	bf00      	nop
 800b630:	40011000 	.word	0x40011000
 800b634:	40011400 	.word	0x40011400
 800b638:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b63c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b640:	2200      	movs	r2, #0
 800b642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b646:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b64a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b64e:	4642      	mov	r2, r8
 800b650:	464b      	mov	r3, r9
 800b652:	1891      	adds	r1, r2, r2
 800b654:	6239      	str	r1, [r7, #32]
 800b656:	415b      	adcs	r3, r3
 800b658:	627b      	str	r3, [r7, #36]	; 0x24
 800b65a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b65e:	4641      	mov	r1, r8
 800b660:	1854      	adds	r4, r2, r1
 800b662:	4649      	mov	r1, r9
 800b664:	eb43 0501 	adc.w	r5, r3, r1
 800b668:	f04f 0200 	mov.w	r2, #0
 800b66c:	f04f 0300 	mov.w	r3, #0
 800b670:	00eb      	lsls	r3, r5, #3
 800b672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b676:	00e2      	lsls	r2, r4, #3
 800b678:	4614      	mov	r4, r2
 800b67a:	461d      	mov	r5, r3
 800b67c:	4643      	mov	r3, r8
 800b67e:	18e3      	adds	r3, r4, r3
 800b680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b684:	464b      	mov	r3, r9
 800b686:	eb45 0303 	adc.w	r3, r5, r3
 800b68a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b68e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b69a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b69e:	f04f 0200 	mov.w	r2, #0
 800b6a2:	f04f 0300 	mov.w	r3, #0
 800b6a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	008b      	lsls	r3, r1, #2
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	008a      	lsls	r2, r1, #2
 800b6b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b6bc:	f7f5 faee 	bl	8000c9c <__aeabi_uldivmod>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4b60      	ldr	r3, [pc, #384]	; (800b848 <UART_SetConfig+0x4e4>)
 800b6c6:	fba3 2302 	umull	r2, r3, r3, r2
 800b6ca:	095b      	lsrs	r3, r3, #5
 800b6cc:	011c      	lsls	r4, r3, #4
 800b6ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b6d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b6dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b6e0:	4642      	mov	r2, r8
 800b6e2:	464b      	mov	r3, r9
 800b6e4:	1891      	adds	r1, r2, r2
 800b6e6:	61b9      	str	r1, [r7, #24]
 800b6e8:	415b      	adcs	r3, r3
 800b6ea:	61fb      	str	r3, [r7, #28]
 800b6ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b6f0:	4641      	mov	r1, r8
 800b6f2:	1851      	adds	r1, r2, r1
 800b6f4:	6139      	str	r1, [r7, #16]
 800b6f6:	4649      	mov	r1, r9
 800b6f8:	414b      	adcs	r3, r1
 800b6fa:	617b      	str	r3, [r7, #20]
 800b6fc:	f04f 0200 	mov.w	r2, #0
 800b700:	f04f 0300 	mov.w	r3, #0
 800b704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b708:	4659      	mov	r1, fp
 800b70a:	00cb      	lsls	r3, r1, #3
 800b70c:	4651      	mov	r1, sl
 800b70e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b712:	4651      	mov	r1, sl
 800b714:	00ca      	lsls	r2, r1, #3
 800b716:	4610      	mov	r0, r2
 800b718:	4619      	mov	r1, r3
 800b71a:	4603      	mov	r3, r0
 800b71c:	4642      	mov	r2, r8
 800b71e:	189b      	adds	r3, r3, r2
 800b720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b724:	464b      	mov	r3, r9
 800b726:	460a      	mov	r2, r1
 800b728:	eb42 0303 	adc.w	r3, r2, r3
 800b72c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	67bb      	str	r3, [r7, #120]	; 0x78
 800b73a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b73c:	f04f 0200 	mov.w	r2, #0
 800b740:	f04f 0300 	mov.w	r3, #0
 800b744:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b748:	4649      	mov	r1, r9
 800b74a:	008b      	lsls	r3, r1, #2
 800b74c:	4641      	mov	r1, r8
 800b74e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b752:	4641      	mov	r1, r8
 800b754:	008a      	lsls	r2, r1, #2
 800b756:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b75a:	f7f5 fa9f 	bl	8000c9c <__aeabi_uldivmod>
 800b75e:	4602      	mov	r2, r0
 800b760:	460b      	mov	r3, r1
 800b762:	4611      	mov	r1, r2
 800b764:	4b38      	ldr	r3, [pc, #224]	; (800b848 <UART_SetConfig+0x4e4>)
 800b766:	fba3 2301 	umull	r2, r3, r3, r1
 800b76a:	095b      	lsrs	r3, r3, #5
 800b76c:	2264      	movs	r2, #100	; 0x64
 800b76e:	fb02 f303 	mul.w	r3, r2, r3
 800b772:	1acb      	subs	r3, r1, r3
 800b774:	011b      	lsls	r3, r3, #4
 800b776:	3332      	adds	r3, #50	; 0x32
 800b778:	4a33      	ldr	r2, [pc, #204]	; (800b848 <UART_SetConfig+0x4e4>)
 800b77a:	fba2 2303 	umull	r2, r3, r2, r3
 800b77e:	095b      	lsrs	r3, r3, #5
 800b780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b784:	441c      	add	r4, r3
 800b786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b78a:	2200      	movs	r2, #0
 800b78c:	673b      	str	r3, [r7, #112]	; 0x70
 800b78e:	677a      	str	r2, [r7, #116]	; 0x74
 800b790:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b794:	4642      	mov	r2, r8
 800b796:	464b      	mov	r3, r9
 800b798:	1891      	adds	r1, r2, r2
 800b79a:	60b9      	str	r1, [r7, #8]
 800b79c:	415b      	adcs	r3, r3
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7a4:	4641      	mov	r1, r8
 800b7a6:	1851      	adds	r1, r2, r1
 800b7a8:	6039      	str	r1, [r7, #0]
 800b7aa:	4649      	mov	r1, r9
 800b7ac:	414b      	adcs	r3, r1
 800b7ae:	607b      	str	r3, [r7, #4]
 800b7b0:	f04f 0200 	mov.w	r2, #0
 800b7b4:	f04f 0300 	mov.w	r3, #0
 800b7b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b7bc:	4659      	mov	r1, fp
 800b7be:	00cb      	lsls	r3, r1, #3
 800b7c0:	4651      	mov	r1, sl
 800b7c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7c6:	4651      	mov	r1, sl
 800b7c8:	00ca      	lsls	r2, r1, #3
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	4642      	mov	r2, r8
 800b7d2:	189b      	adds	r3, r3, r2
 800b7d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7d6:	464b      	mov	r3, r9
 800b7d8:	460a      	mov	r2, r1
 800b7da:	eb42 0303 	adc.w	r3, r2, r3
 800b7de:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	663b      	str	r3, [r7, #96]	; 0x60
 800b7ea:	667a      	str	r2, [r7, #100]	; 0x64
 800b7ec:	f04f 0200 	mov.w	r2, #0
 800b7f0:	f04f 0300 	mov.w	r3, #0
 800b7f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b7f8:	4649      	mov	r1, r9
 800b7fa:	008b      	lsls	r3, r1, #2
 800b7fc:	4641      	mov	r1, r8
 800b7fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b802:	4641      	mov	r1, r8
 800b804:	008a      	lsls	r2, r1, #2
 800b806:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b80a:	f7f5 fa47 	bl	8000c9c <__aeabi_uldivmod>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4b0d      	ldr	r3, [pc, #52]	; (800b848 <UART_SetConfig+0x4e4>)
 800b814:	fba3 1302 	umull	r1, r3, r3, r2
 800b818:	095b      	lsrs	r3, r3, #5
 800b81a:	2164      	movs	r1, #100	; 0x64
 800b81c:	fb01 f303 	mul.w	r3, r1, r3
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	011b      	lsls	r3, r3, #4
 800b824:	3332      	adds	r3, #50	; 0x32
 800b826:	4a08      	ldr	r2, [pc, #32]	; (800b848 <UART_SetConfig+0x4e4>)
 800b828:	fba2 2303 	umull	r2, r3, r2, r3
 800b82c:	095b      	lsrs	r3, r3, #5
 800b82e:	f003 020f 	and.w	r2, r3, #15
 800b832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4422      	add	r2, r4
 800b83a:	609a      	str	r2, [r3, #8]
}
 800b83c:	bf00      	nop
 800b83e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b842:	46bd      	mov	sp, r7
 800b844:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b848:	51eb851f 	.word	0x51eb851f

0800b84c <__NVIC_SetPriority>:
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	4603      	mov	r3, r0
 800b854:	6039      	str	r1, [r7, #0]
 800b856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	db0a      	blt.n	800b876 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	b2da      	uxtb	r2, r3
 800b864:	490c      	ldr	r1, [pc, #48]	; (800b898 <__NVIC_SetPriority+0x4c>)
 800b866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b86a:	0112      	lsls	r2, r2, #4
 800b86c:	b2d2      	uxtb	r2, r2
 800b86e:	440b      	add	r3, r1
 800b870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b874:	e00a      	b.n	800b88c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	b2da      	uxtb	r2, r3
 800b87a:	4908      	ldr	r1, [pc, #32]	; (800b89c <__NVIC_SetPriority+0x50>)
 800b87c:	79fb      	ldrb	r3, [r7, #7]
 800b87e:	f003 030f 	and.w	r3, r3, #15
 800b882:	3b04      	subs	r3, #4
 800b884:	0112      	lsls	r2, r2, #4
 800b886:	b2d2      	uxtb	r2, r2
 800b888:	440b      	add	r3, r1
 800b88a:	761a      	strb	r2, [r3, #24]
}
 800b88c:	bf00      	nop
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	e000e100 	.word	0xe000e100
 800b89c:	e000ed00 	.word	0xe000ed00

0800b8a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b8a4:	4b05      	ldr	r3, [pc, #20]	; (800b8bc <SysTick_Handler+0x1c>)
 800b8a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b8a8:	f001 fe38 	bl	800d51c <xTaskGetSchedulerState>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d001      	beq.n	800b8b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b8b2:	f002 fd21 	bl	800e2f8 <xPortSysTickHandler>
  }
}
 800b8b6:	bf00      	nop
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	e000e010 	.word	0xe000e010

0800b8c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	f06f 0004 	mvn.w	r0, #4
 800b8ca:	f7ff ffbf 	bl	800b84c <__NVIC_SetPriority>
#endif
}
 800b8ce:	bf00      	nop
 800b8d0:	bd80      	pop	{r7, pc}
	...

0800b8d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8da:	f3ef 8305 	mrs	r3, IPSR
 800b8de:	603b      	str	r3, [r7, #0]
  return(result);
 800b8e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d003      	beq.n	800b8ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b8e6:	f06f 0305 	mvn.w	r3, #5
 800b8ea:	607b      	str	r3, [r7, #4]
 800b8ec:	e00c      	b.n	800b908 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b8ee:	4b0a      	ldr	r3, [pc, #40]	; (800b918 <osKernelInitialize+0x44>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d105      	bne.n	800b902 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b8f6:	4b08      	ldr	r3, [pc, #32]	; (800b918 <osKernelInitialize+0x44>)
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	607b      	str	r3, [r7, #4]
 800b900:	e002      	b.n	800b908 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b902:	f04f 33ff 	mov.w	r3, #4294967295
 800b906:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b908:	687b      	ldr	r3, [r7, #4]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	20004d84 	.word	0x20004d84

0800b91c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b922:	f3ef 8305 	mrs	r3, IPSR
 800b926:	603b      	str	r3, [r7, #0]
  return(result);
 800b928:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d003      	beq.n	800b936 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b92e:	f06f 0305 	mvn.w	r3, #5
 800b932:	607b      	str	r3, [r7, #4]
 800b934:	e010      	b.n	800b958 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b936:	4b0b      	ldr	r3, [pc, #44]	; (800b964 <osKernelStart+0x48>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d109      	bne.n	800b952 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b93e:	f7ff ffbf 	bl	800b8c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b942:	4b08      	ldr	r3, [pc, #32]	; (800b964 <osKernelStart+0x48>)
 800b944:	2202      	movs	r2, #2
 800b946:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b948:	f001 f966 	bl	800cc18 <vTaskStartScheduler>
      stat = osOK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	607b      	str	r3, [r7, #4]
 800b950:	e002      	b.n	800b958 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b952:	f04f 33ff 	mov.w	r3, #4294967295
 800b956:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b958:	687b      	ldr	r3, [r7, #4]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	20004d84 	.word	0x20004d84

0800b968 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b970:	f3ef 8305 	mrs	r3, IPSR
 800b974:	60bb      	str	r3, [r7, #8]
  return(result);
 800b976:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <osDelay+0x1c>
    stat = osErrorISR;
 800b97c:	f06f 0305 	mvn.w	r3, #5
 800b980:	60fb      	str	r3, [r7, #12]
 800b982:	e007      	b.n	800b994 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d002      	beq.n	800b994 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f001 f90e 	bl	800cbb0 <vTaskDelay>
    }
  }

  return (stat);
 800b994:	68fb      	ldr	r3, [r7, #12]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
	...

0800b9a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	4a07      	ldr	r2, [pc, #28]	; (800b9cc <vApplicationGetIdleTaskMemory+0x2c>)
 800b9b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	4a06      	ldr	r2, [pc, #24]	; (800b9d0 <vApplicationGetIdleTaskMemory+0x30>)
 800b9b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2280      	movs	r2, #128	; 0x80
 800b9bc:	601a      	str	r2, [r3, #0]
}
 800b9be:	bf00      	nop
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	20004d88 	.word	0x20004d88
 800b9d0:	20004e30 	.word	0x20004e30

0800b9d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	4a07      	ldr	r2, [pc, #28]	; (800ba00 <vApplicationGetTimerTaskMemory+0x2c>)
 800b9e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	4a06      	ldr	r2, [pc, #24]	; (800ba04 <vApplicationGetTimerTaskMemory+0x30>)
 800b9ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9f2:	601a      	str	r2, [r3, #0]
}
 800b9f4:	bf00      	nop
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	20005030 	.word	0x20005030
 800ba04:	200050d8 	.word	0x200050d8

0800ba08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f103 0208 	add.w	r2, r3, #8
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f103 0208 	add.w	r2, r3, #8
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f103 0208 	add.w	r2, r3, #8
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba56:	bf00      	nop
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba62:	b480      	push	{r7}
 800ba64:	b085      	sub	sp, #20
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	689a      	ldr	r2, [r3, #8]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	1c5a      	adds	r2, r3, #1
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	601a      	str	r2, [r3, #0]
}
 800ba9e:	bf00      	nop
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800baaa:	b480      	push	{r7}
 800baac:	b085      	sub	sp, #20
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac0:	d103      	bne.n	800baca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	60fb      	str	r3, [r7, #12]
 800bac8:	e00c      	b.n	800bae4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	3308      	adds	r3, #8
 800bace:	60fb      	str	r3, [r7, #12]
 800bad0:	e002      	b.n	800bad8 <vListInsert+0x2e>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	60fb      	str	r3, [r7, #12]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d2f6      	bcs.n	800bad2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	685a      	ldr	r2, [r3, #4]
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	683a      	ldr	r2, [r7, #0]
 800baf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	683a      	ldr	r2, [r7, #0]
 800bafe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	1c5a      	adds	r2, r3, #1
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	601a      	str	r2, [r3, #0]
}
 800bb10:	bf00      	nop
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	6892      	ldr	r2, [r2, #8]
 800bb32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	6852      	ldr	r2, [r2, #4]
 800bb3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d103      	bne.n	800bb50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	1e5a      	subs	r2, r3, #1
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10a      	bne.n	800bb9a <xQueueGenericReset+0x2a>
	__asm volatile
 800bb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb88:	f383 8811 	msr	BASEPRI, r3
 800bb8c:	f3bf 8f6f 	isb	sy
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	60bb      	str	r3, [r7, #8]
}
 800bb96:	bf00      	nop
 800bb98:	e7fe      	b.n	800bb98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bb9a:	f002 fb1b 	bl	800e1d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba6:	68f9      	ldr	r1, [r7, #12]
 800bba8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bbaa:	fb01 f303 	mul.w	r3, r1, r3
 800bbae:	441a      	add	r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	68f9      	ldr	r1, [r7, #12]
 800bbce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bbd0:	fb01 f303 	mul.w	r3, r1, r3
 800bbd4:	441a      	add	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	22ff      	movs	r2, #255	; 0xff
 800bbde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	22ff      	movs	r2, #255	; 0xff
 800bbe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d114      	bne.n	800bc1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d01a      	beq.n	800bc2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	3310      	adds	r3, #16
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f001 faa5 	bl	800d14c <xTaskRemoveFromEventList>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d012      	beq.n	800bc2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc08:	4b0c      	ldr	r3, [pc, #48]	; (800bc3c <xQueueGenericReset+0xcc>)
 800bc0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	e009      	b.n	800bc2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	3310      	adds	r3, #16
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7ff fef2 	bl	800ba08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	3324      	adds	r3, #36	; 0x24
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7ff feed 	bl	800ba08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc2e:	f002 fb01 	bl	800e234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc32:	2301      	movs	r3, #1
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	e000ed04 	.word	0xe000ed04

0800bc40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08e      	sub	sp, #56	; 0x38
 800bc44:	af02      	add	r7, sp, #8
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
 800bc4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10a      	bne.n	800bc6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc66:	bf00      	nop
 800bc68:	e7fe      	b.n	800bc68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10a      	bne.n	800bc86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc82:	bf00      	nop
 800bc84:	e7fe      	b.n	800bc84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <xQueueGenericCreateStatic+0x52>
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d001      	beq.n	800bc96 <xQueueGenericCreateStatic+0x56>
 800bc92:	2301      	movs	r3, #1
 800bc94:	e000      	b.n	800bc98 <xQueueGenericCreateStatic+0x58>
 800bc96:	2300      	movs	r3, #0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d10a      	bne.n	800bcb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca0:	f383 8811 	msr	BASEPRI, r3
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	623b      	str	r3, [r7, #32]
}
 800bcae:	bf00      	nop
 800bcb0:	e7fe      	b.n	800bcb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d102      	bne.n	800bcbe <xQueueGenericCreateStatic+0x7e>
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <xQueueGenericCreateStatic+0x82>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e000      	b.n	800bcc4 <xQueueGenericCreateStatic+0x84>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10a      	bne.n	800bcde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	61fb      	str	r3, [r7, #28]
}
 800bcda:	bf00      	nop
 800bcdc:	e7fe      	b.n	800bcdc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bcde:	2350      	movs	r3, #80	; 0x50
 800bce0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	2b50      	cmp	r3, #80	; 0x50
 800bce6:	d00a      	beq.n	800bcfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	61bb      	str	r3, [r7, #24]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bcfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00d      	beq.n	800bd26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	68b9      	ldr	r1, [r7, #8]
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f000 f83f 	bl	800bda4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3730      	adds	r7, #48	; 0x30
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b08a      	sub	sp, #40	; 0x28
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10a      	bne.n	800bd5a <xQueueGenericCreate+0x2a>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	613b      	str	r3, [r7, #16]
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	fb02 f303 	mul.w	r3, r2, r3
 800bd62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	3350      	adds	r3, #80	; 0x50
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f002 fb55 	bl	800e418 <pvPortMalloc>
 800bd6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d011      	beq.n	800bd9a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	3350      	adds	r3, #80	; 0x50
 800bd7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd88:	79fa      	ldrb	r2, [r7, #7]
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	68b9      	ldr	r1, [r7, #8]
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f000 f805 	bl	800bda4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd9a:	69bb      	ldr	r3, [r7, #24]
	}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3720      	adds	r7, #32
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
 800bdb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d103      	bne.n	800bdc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	69ba      	ldr	r2, [r7, #24]
 800bdbc:	601a      	str	r2, [r3, #0]
 800bdbe:	e002      	b.n	800bdc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	68ba      	ldr	r2, [r7, #8]
 800bdd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdd2:	2101      	movs	r1, #1
 800bdd4:	69b8      	ldr	r0, [r7, #24]
 800bdd6:	f7ff fecb 	bl	800bb70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	78fa      	ldrb	r2, [r7, #3]
 800bdde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bde2:	bf00      	nop
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
	...

0800bdec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b08e      	sub	sp, #56	; 0x38
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
 800bdf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10a      	bne.n	800be1e <xQueueGenericSend+0x32>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be1a:	bf00      	nop
 800be1c:	e7fe      	b.n	800be1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d103      	bne.n	800be2c <xQueueGenericSend+0x40>
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d101      	bne.n	800be30 <xQueueGenericSend+0x44>
 800be2c:	2301      	movs	r3, #1
 800be2e:	e000      	b.n	800be32 <xQueueGenericSend+0x46>
 800be30:	2300      	movs	r3, #0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10a      	bne.n	800be4c <xQueueGenericSend+0x60>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be48:	bf00      	nop
 800be4a:	e7fe      	b.n	800be4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d103      	bne.n	800be5a <xQueueGenericSend+0x6e>
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be56:	2b01      	cmp	r3, #1
 800be58:	d101      	bne.n	800be5e <xQueueGenericSend+0x72>
 800be5a:	2301      	movs	r3, #1
 800be5c:	e000      	b.n	800be60 <xQueueGenericSend+0x74>
 800be5e:	2300      	movs	r3, #0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10a      	bne.n	800be7a <xQueueGenericSend+0x8e>
	__asm volatile
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	623b      	str	r3, [r7, #32]
}
 800be76:	bf00      	nop
 800be78:	e7fe      	b.n	800be78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be7a:	f001 fb4f 	bl	800d51c <xTaskGetSchedulerState>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d102      	bne.n	800be8a <xQueueGenericSend+0x9e>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <xQueueGenericSend+0xa2>
 800be8a:	2301      	movs	r3, #1
 800be8c:	e000      	b.n	800be90 <xQueueGenericSend+0xa4>
 800be8e:	2300      	movs	r3, #0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10a      	bne.n	800beaa <xQueueGenericSend+0xbe>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	61fb      	str	r3, [r7, #28]
}
 800bea6:	bf00      	nop
 800bea8:	e7fe      	b.n	800bea8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800beaa:	f002 f993 	bl	800e1d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800beae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d302      	bcc.n	800bec0 <xQueueGenericSend+0xd4>
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d129      	bne.n	800bf14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	68b9      	ldr	r1, [r7, #8]
 800bec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bec6:	f000 fb4d 	bl	800c564 <prvCopyDataToQueue>
 800beca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800becc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d010      	beq.n	800bef6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed6:	3324      	adds	r3, #36	; 0x24
 800bed8:	4618      	mov	r0, r3
 800beda:	f001 f937 	bl	800d14c <xTaskRemoveFromEventList>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d013      	beq.n	800bf0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bee4:	4b3f      	ldr	r3, [pc, #252]	; (800bfe4 <xQueueGenericSend+0x1f8>)
 800bee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	e00a      	b.n	800bf0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d007      	beq.n	800bf0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800befc:	4b39      	ldr	r3, [pc, #228]	; (800bfe4 <xQueueGenericSend+0x1f8>)
 800befe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf02:	601a      	str	r2, [r3, #0]
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf0c:	f002 f992 	bl	800e234 <vPortExitCritical>
				return pdPASS;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e063      	b.n	800bfdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d103      	bne.n	800bf22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf1a:	f002 f98b 	bl	800e234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	e05c      	b.n	800bfdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d106      	bne.n	800bf36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf28:	f107 0314 	add.w	r3, r7, #20
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f001 f997 	bl	800d260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf32:	2301      	movs	r3, #1
 800bf34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf36:	f002 f97d 	bl	800e234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf3a:	f000 fedd 	bl	800ccf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf3e:	f002 f949 	bl	800e1d4 <vPortEnterCritical>
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf48:	b25b      	sxtb	r3, r3
 800bf4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4e:	d103      	bne.n	800bf58 <xQueueGenericSend+0x16c>
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf5e:	b25b      	sxtb	r3, r3
 800bf60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf64:	d103      	bne.n	800bf6e <xQueueGenericSend+0x182>
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf6e:	f002 f961 	bl	800e234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf72:	1d3a      	adds	r2, r7, #4
 800bf74:	f107 0314 	add.w	r3, r7, #20
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f001 f986 	bl	800d28c <xTaskCheckForTimeOut>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d124      	bne.n	800bfd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf88:	f000 fbe4 	bl	800c754 <prvIsQueueFull>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d018      	beq.n	800bfc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	3310      	adds	r3, #16
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	4611      	mov	r1, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f001 f886 	bl	800d0ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bfa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfa2:	f000 fb6f 	bl	800c684 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bfa6:	f000 feb5 	bl	800cd14 <xTaskResumeAll>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f47f af7c 	bne.w	800beaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bfb2:	4b0c      	ldr	r3, [pc, #48]	; (800bfe4 <xQueueGenericSend+0x1f8>)
 800bfb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfb8:	601a      	str	r2, [r3, #0]
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	e772      	b.n	800beaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bfc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfc6:	f000 fb5d 	bl	800c684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfca:	f000 fea3 	bl	800cd14 <xTaskResumeAll>
 800bfce:	e76c      	b.n	800beaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bfd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfd2:	f000 fb57 	bl	800c684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfd6:	f000 fe9d 	bl	800cd14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bfda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3738      	adds	r7, #56	; 0x38
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	e000ed04 	.word	0xe000ed04

0800bfe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b090      	sub	sp, #64	; 0x40
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
 800bff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10a      	bne.n	800c016 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c012:	bf00      	nop
 800c014:	e7fe      	b.n	800c014 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d103      	bne.n	800c024 <xQueueGenericSendFromISR+0x3c>
 800c01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <xQueueGenericSendFromISR+0x40>
 800c024:	2301      	movs	r3, #1
 800c026:	e000      	b.n	800c02a <xQueueGenericSendFromISR+0x42>
 800c028:	2300      	movs	r3, #0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10a      	bne.n	800c044 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c040:	bf00      	nop
 800c042:	e7fe      	b.n	800c042 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b02      	cmp	r3, #2
 800c048:	d103      	bne.n	800c052 <xQueueGenericSendFromISR+0x6a>
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d101      	bne.n	800c056 <xQueueGenericSendFromISR+0x6e>
 800c052:	2301      	movs	r3, #1
 800c054:	e000      	b.n	800c058 <xQueueGenericSendFromISR+0x70>
 800c056:	2300      	movs	r3, #0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d10a      	bne.n	800c072 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c060:	f383 8811 	msr	BASEPRI, r3
 800c064:	f3bf 8f6f 	isb	sy
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	623b      	str	r3, [r7, #32]
}
 800c06e:	bf00      	nop
 800c070:	e7fe      	b.n	800c070 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c072:	f002 f991 	bl	800e398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c076:	f3ef 8211 	mrs	r2, BASEPRI
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	61fa      	str	r2, [r7, #28]
 800c08c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c08e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c090:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d302      	bcc.n	800c0a4 <xQueueGenericSendFromISR+0xbc>
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d12f      	bne.n	800c104 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0b4:	683a      	ldr	r2, [r7, #0]
 800c0b6:	68b9      	ldr	r1, [r7, #8]
 800c0b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0ba:	f000 fa53 	bl	800c564 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c0be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c6:	d112      	bne.n	800c0ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d016      	beq.n	800c0fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d2:	3324      	adds	r3, #36	; 0x24
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f001 f839 	bl	800d14c <xTaskRemoveFromEventList>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00e      	beq.n	800c0fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00b      	beq.n	800c0fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	e007      	b.n	800c0fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	b25a      	sxtb	r2, r3
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c0fe:	2301      	movs	r3, #1
 800c100:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c102:	e001      	b.n	800c108 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c104:	2300      	movs	r3, #0
 800c106:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c112:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c116:	4618      	mov	r0, r3
 800c118:	3740      	adds	r7, #64	; 0x40
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
	...

0800c120 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b08c      	sub	sp, #48	; 0x30
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c12c:	2300      	movs	r3, #0
 800c12e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10a      	bne.n	800c150 <xQueueReceive+0x30>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	623b      	str	r3, [r7, #32]
}
 800c14c:	bf00      	nop
 800c14e:	e7fe      	b.n	800c14e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d103      	bne.n	800c15e <xQueueReceive+0x3e>
 800c156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <xQueueReceive+0x42>
 800c15e:	2301      	movs	r3, #1
 800c160:	e000      	b.n	800c164 <xQueueReceive+0x44>
 800c162:	2300      	movs	r3, #0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d10a      	bne.n	800c17e <xQueueReceive+0x5e>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	61fb      	str	r3, [r7, #28]
}
 800c17a:	bf00      	nop
 800c17c:	e7fe      	b.n	800c17c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c17e:	f001 f9cd 	bl	800d51c <xTaskGetSchedulerState>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d102      	bne.n	800c18e <xQueueReceive+0x6e>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d101      	bne.n	800c192 <xQueueReceive+0x72>
 800c18e:	2301      	movs	r3, #1
 800c190:	e000      	b.n	800c194 <xQueueReceive+0x74>
 800c192:	2300      	movs	r3, #0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d10a      	bne.n	800c1ae <xQueueReceive+0x8e>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	61bb      	str	r3, [r7, #24]
}
 800c1aa:	bf00      	nop
 800c1ac:	e7fe      	b.n	800c1ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1ae:	f002 f811 	bl	800e1d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d01f      	beq.n	800c1fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1c2:	f000 fa39 	bl	800c638 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c8:	1e5a      	subs	r2, r3, #1
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00f      	beq.n	800c1f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	3310      	adds	r3, #16
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 ffb6 	bl	800d14c <xTaskRemoveFromEventList>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d007      	beq.n	800c1f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1e6:	4b3d      	ldr	r3, [pc, #244]	; (800c2dc <xQueueReceive+0x1bc>)
 800c1e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ec:	601a      	str	r2, [r3, #0]
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1f6:	f002 f81d 	bl	800e234 <vPortExitCritical>
				return pdPASS;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e069      	b.n	800c2d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d103      	bne.n	800c20c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c204:	f002 f816 	bl	800e234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c208:	2300      	movs	r3, #0
 800c20a:	e062      	b.n	800c2d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d106      	bne.n	800c220 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c212:	f107 0310 	add.w	r3, r7, #16
 800c216:	4618      	mov	r0, r3
 800c218:	f001 f822 	bl	800d260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c21c:	2301      	movs	r3, #1
 800c21e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c220:	f002 f808 	bl	800e234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c224:	f000 fd68 	bl	800ccf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c228:	f001 ffd4 	bl	800e1d4 <vPortEnterCritical>
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c232:	b25b      	sxtb	r3, r3
 800c234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c238:	d103      	bne.n	800c242 <xQueueReceive+0x122>
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	2200      	movs	r2, #0
 800c23e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c248:	b25b      	sxtb	r3, r3
 800c24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c24e:	d103      	bne.n	800c258 <xQueueReceive+0x138>
 800c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c258:	f001 ffec 	bl	800e234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c25c:	1d3a      	adds	r2, r7, #4
 800c25e:	f107 0310 	add.w	r3, r7, #16
 800c262:	4611      	mov	r1, r2
 800c264:	4618      	mov	r0, r3
 800c266:	f001 f811 	bl	800d28c <xTaskCheckForTimeOut>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d123      	bne.n	800c2b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c272:	f000 fa59 	bl	800c728 <prvIsQueueEmpty>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d017      	beq.n	800c2ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	3324      	adds	r3, #36	; 0x24
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	4611      	mov	r1, r2
 800c284:	4618      	mov	r0, r3
 800c286:	f000 ff11 	bl	800d0ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c28a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c28c:	f000 f9fa 	bl	800c684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c290:	f000 fd40 	bl	800cd14 <xTaskResumeAll>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d189      	bne.n	800c1ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c29a:	4b10      	ldr	r3, [pc, #64]	; (800c2dc <xQueueReceive+0x1bc>)
 800c29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	e780      	b.n	800c1ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ae:	f000 f9e9 	bl	800c684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2b2:	f000 fd2f 	bl	800cd14 <xTaskResumeAll>
 800c2b6:	e77a      	b.n	800c1ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c2b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ba:	f000 f9e3 	bl	800c684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2be:	f000 fd29 	bl	800cd14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2c4:	f000 fa30 	bl	800c728 <prvIsQueueEmpty>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f43f af6f 	beq.w	800c1ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3730      	adds	r7, #48	; 0x30
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	e000ed04 	.word	0xe000ed04

0800c2e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b08e      	sub	sp, #56	; 0x38
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d10a      	bne.n	800c312 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	623b      	str	r3, [r7, #32]
}
 800c30e:	bf00      	nop
 800c310:	e7fe      	b.n	800c310 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00a      	beq.n	800c330 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	61fb      	str	r3, [r7, #28]
}
 800c32c:	bf00      	nop
 800c32e:	e7fe      	b.n	800c32e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c330:	f001 f8f4 	bl	800d51c <xTaskGetSchedulerState>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d102      	bne.n	800c340 <xQueueSemaphoreTake+0x60>
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d101      	bne.n	800c344 <xQueueSemaphoreTake+0x64>
 800c340:	2301      	movs	r3, #1
 800c342:	e000      	b.n	800c346 <xQueueSemaphoreTake+0x66>
 800c344:	2300      	movs	r3, #0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10a      	bne.n	800c360 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	61bb      	str	r3, [r7, #24]
}
 800c35c:	bf00      	nop
 800c35e:	e7fe      	b.n	800c35e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c360:	f001 ff38 	bl	800e1d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c368:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d024      	beq.n	800c3ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c372:	1e5a      	subs	r2, r3, #1
 800c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c376:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d104      	bne.n	800c38a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c380:	f001 fa42 	bl	800d808 <pvTaskIncrementMutexHeldCount>
 800c384:	4602      	mov	r2, r0
 800c386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c388:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00f      	beq.n	800c3b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c394:	3310      	adds	r3, #16
 800c396:	4618      	mov	r0, r3
 800c398:	f000 fed8 	bl	800d14c <xTaskRemoveFromEventList>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d007      	beq.n	800c3b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3a2:	4b54      	ldr	r3, [pc, #336]	; (800c4f4 <xQueueSemaphoreTake+0x214>)
 800c3a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3b2:	f001 ff3f 	bl	800e234 <vPortExitCritical>
				return pdPASS;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e097      	b.n	800c4ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d111      	bne.n	800c3e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00a      	beq.n	800c3dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	f383 8811 	msr	BASEPRI, r3
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	617b      	str	r3, [r7, #20]
}
 800c3d8:	bf00      	nop
 800c3da:	e7fe      	b.n	800c3da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c3dc:	f001 ff2a 	bl	800e234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	e082      	b.n	800c4ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d106      	bne.n	800c3f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3ea:	f107 030c 	add.w	r3, r7, #12
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 ff36 	bl	800d260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3f8:	f001 ff1c 	bl	800e234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3fc:	f000 fc7c 	bl	800ccf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c400:	f001 fee8 	bl	800e1d4 <vPortEnterCritical>
 800c404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c40a:	b25b      	sxtb	r3, r3
 800c40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c410:	d103      	bne.n	800c41a <xQueueSemaphoreTake+0x13a>
 800c412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c414:	2200      	movs	r2, #0
 800c416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c420:	b25b      	sxtb	r3, r3
 800c422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c426:	d103      	bne.n	800c430 <xQueueSemaphoreTake+0x150>
 800c428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42a:	2200      	movs	r2, #0
 800c42c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c430:	f001 ff00 	bl	800e234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c434:	463a      	mov	r2, r7
 800c436:	f107 030c 	add.w	r3, r7, #12
 800c43a:	4611      	mov	r1, r2
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 ff25 	bl	800d28c <xTaskCheckForTimeOut>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d132      	bne.n	800c4ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c448:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c44a:	f000 f96d 	bl	800c728 <prvIsQueueEmpty>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d026      	beq.n	800c4a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d109      	bne.n	800c470 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c45c:	f001 feba 	bl	800e1d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	4618      	mov	r0, r3
 800c466:	f001 f877 	bl	800d558 <xTaskPriorityInherit>
 800c46a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c46c:	f001 fee2 	bl	800e234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c472:	3324      	adds	r3, #36	; 0x24
 800c474:	683a      	ldr	r2, [r7, #0]
 800c476:	4611      	mov	r1, r2
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 fe17 	bl	800d0ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c47e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c480:	f000 f900 	bl	800c684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c484:	f000 fc46 	bl	800cd14 <xTaskResumeAll>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f47f af68 	bne.w	800c360 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c490:	4b18      	ldr	r3, [pc, #96]	; (800c4f4 <xQueueSemaphoreTake+0x214>)
 800c492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c496:	601a      	str	r2, [r3, #0]
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	e75e      	b.n	800c360 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c4a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4a4:	f000 f8ee 	bl	800c684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4a8:	f000 fc34 	bl	800cd14 <xTaskResumeAll>
 800c4ac:	e758      	b.n	800c360 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c4ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4b0:	f000 f8e8 	bl	800c684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4b4:	f000 fc2e 	bl	800cd14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4ba:	f000 f935 	bl	800c728 <prvIsQueueEmpty>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f43f af4d 	beq.w	800c360 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00d      	beq.n	800c4e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c4cc:	f001 fe82 	bl	800e1d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c4d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4d2:	f000 f82f 	bl	800c534 <prvGetDisinheritPriorityAfterTimeout>
 800c4d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f001 f910 	bl	800d704 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c4e4:	f001 fea6 	bl	800e234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3738      	adds	r7, #56	; 0x38
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	e000ed04 	.word	0xe000ed04

0800c4f8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d10a      	bne.n	800c51c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	60bb      	str	r3, [r7, #8]
}
 800c518:	bf00      	nop
 800c51a:	e7fe      	b.n	800c51a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c51c:	f001 fe5a 	bl	800e1d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c524:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c526:	f001 fe85 	bl	800e234 <vPortExitCritical>

	return uxReturn;
 800c52a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c540:	2b00      	cmp	r3, #0
 800c542:	d006      	beq.n	800c552 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c54e:	60fb      	str	r3, [r7, #12]
 800c550:	e001      	b.n	800c556 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c552:	2300      	movs	r3, #0
 800c554:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c556:	68fb      	ldr	r3, [r7, #12]
	}
 800c558:	4618      	mov	r0, r3
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b086      	sub	sp, #24
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c570:	2300      	movs	r3, #0
 800c572:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c578:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d10d      	bne.n	800c59e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d14d      	bne.n	800c626 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	4618      	mov	r0, r3
 800c590:	f001 f84a 	bl	800d628 <xTaskPriorityDisinherit>
 800c594:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2200      	movs	r2, #0
 800c59a:	609a      	str	r2, [r3, #8]
 800c59c:	e043      	b.n	800c626 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d119      	bne.n	800c5d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6858      	ldr	r0, [r3, #4]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	68b9      	ldr	r1, [r7, #8]
 800c5b0:	f00e f879 	bl	801a6a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5bc:	441a      	add	r2, r3
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d32b      	bcc.n	800c626 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	605a      	str	r2, [r3, #4]
 800c5d6:	e026      	b.n	800c626 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	68d8      	ldr	r0, [r3, #12]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	68b9      	ldr	r1, [r7, #8]
 800c5e4:	f00e f85f 	bl	801a6a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	68da      	ldr	r2, [r3, #12]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f0:	425b      	negs	r3, r3
 800c5f2:	441a      	add	r2, r3
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	68da      	ldr	r2, [r3, #12]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	429a      	cmp	r2, r3
 800c602:	d207      	bcs.n	800c614 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	689a      	ldr	r2, [r3, #8]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60c:	425b      	negs	r3, r3
 800c60e:	441a      	add	r2, r3
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b02      	cmp	r3, #2
 800c618:	d105      	bne.n	800c626 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	3b01      	subs	r3, #1
 800c624:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	1c5a      	adds	r2, r3, #1
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c62e:	697b      	ldr	r3, [r7, #20]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c646:	2b00      	cmp	r3, #0
 800c648:	d018      	beq.n	800c67c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68da      	ldr	r2, [r3, #12]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c652:	441a      	add	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	68da      	ldr	r2, [r3, #12]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	429a      	cmp	r2, r3
 800c662:	d303      	bcc.n	800c66c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68d9      	ldr	r1, [r3, #12]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c674:	461a      	mov	r2, r3
 800c676:	6838      	ldr	r0, [r7, #0]
 800c678:	f00e f815 	bl	801a6a6 <memcpy>
	}
}
 800c67c:	bf00      	nop
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c68c:	f001 fda2 	bl	800e1d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c696:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c698:	e011      	b.n	800c6be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d012      	beq.n	800c6c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	3324      	adds	r3, #36	; 0x24
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 fd50 	bl	800d14c <xTaskRemoveFromEventList>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d001      	beq.n	800c6b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c6b2:	f000 fe4d 	bl	800d350 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c6b6:	7bfb      	ldrb	r3, [r7, #15]
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	dce9      	bgt.n	800c69a <prvUnlockQueue+0x16>
 800c6c6:	e000      	b.n	800c6ca <prvUnlockQueue+0x46>
					break;
 800c6c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	22ff      	movs	r2, #255	; 0xff
 800c6ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c6d2:	f001 fdaf 	bl	800e234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c6d6:	f001 fd7d 	bl	800e1d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6e2:	e011      	b.n	800c708 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d012      	beq.n	800c712 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	3310      	adds	r3, #16
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f000 fd2b 	bl	800d14c <xTaskRemoveFromEventList>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d001      	beq.n	800c700 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c6fc:	f000 fe28 	bl	800d350 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c700:	7bbb      	ldrb	r3, [r7, #14]
 800c702:	3b01      	subs	r3, #1
 800c704:	b2db      	uxtb	r3, r3
 800c706:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	dce9      	bgt.n	800c6e4 <prvUnlockQueue+0x60>
 800c710:	e000      	b.n	800c714 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c712:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	22ff      	movs	r2, #255	; 0xff
 800c718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c71c:	f001 fd8a 	bl	800e234 <vPortExitCritical>
}
 800c720:	bf00      	nop
 800c722:	3710      	adds	r7, #16
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c730:	f001 fd50 	bl	800e1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d102      	bne.n	800c742 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c73c:	2301      	movs	r3, #1
 800c73e:	60fb      	str	r3, [r7, #12]
 800c740:	e001      	b.n	800c746 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c742:	2300      	movs	r3, #0
 800c744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c746:	f001 fd75 	bl	800e234 <vPortExitCritical>

	return xReturn;
 800c74a:	68fb      	ldr	r3, [r7, #12]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c75c:	f001 fd3a 	bl	800e1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c768:	429a      	cmp	r2, r3
 800c76a:	d102      	bne.n	800c772 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c76c:	2301      	movs	r3, #1
 800c76e:	60fb      	str	r3, [r7, #12]
 800c770:	e001      	b.n	800c776 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c772:	2300      	movs	r3, #0
 800c774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c776:	f001 fd5d 	bl	800e234 <vPortExitCritical>

	return xReturn;
 800c77a:	68fb      	ldr	r3, [r7, #12]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3710      	adds	r7, #16
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c78e:	2300      	movs	r3, #0
 800c790:	60fb      	str	r3, [r7, #12]
 800c792:	e014      	b.n	800c7be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c794:	4a0f      	ldr	r2, [pc, #60]	; (800c7d4 <vQueueAddToRegistry+0x50>)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10b      	bne.n	800c7b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c7a0:	490c      	ldr	r1, [pc, #48]	; (800c7d4 <vQueueAddToRegistry+0x50>)
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	683a      	ldr	r2, [r7, #0]
 800c7a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c7aa:	4a0a      	ldr	r2, [pc, #40]	; (800c7d4 <vQueueAddToRegistry+0x50>)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	4413      	add	r3, r2
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c7b6:	e006      	b.n	800c7c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2b07      	cmp	r3, #7
 800c7c2:	d9e7      	bls.n	800c794 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c7c4:	bf00      	nop
 800c7c6:	bf00      	nop
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	200054d8 	.word	0x200054d8

0800c7d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c7e8:	f001 fcf4 	bl	800e1d4 <vPortEnterCritical>
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7f2:	b25b      	sxtb	r3, r3
 800c7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f8:	d103      	bne.n	800c802 <vQueueWaitForMessageRestricted+0x2a>
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c808:	b25b      	sxtb	r3, r3
 800c80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c80e:	d103      	bne.n	800c818 <vQueueWaitForMessageRestricted+0x40>
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2200      	movs	r2, #0
 800c814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c818:	f001 fd0c 	bl	800e234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c820:	2b00      	cmp	r3, #0
 800c822:	d106      	bne.n	800c832 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	3324      	adds	r3, #36	; 0x24
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	68b9      	ldr	r1, [r7, #8]
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 fc61 	bl	800d0f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c832:	6978      	ldr	r0, [r7, #20]
 800c834:	f7ff ff26 	bl	800c684 <prvUnlockQueue>
	}
 800c838:	bf00      	nop
 800c83a:	3718      	adds	r7, #24
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c840:	b580      	push	{r7, lr}
 800c842:	b08e      	sub	sp, #56	; 0x38
 800c844:	af04      	add	r7, sp, #16
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
 800c84c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c850:	2b00      	cmp	r3, #0
 800c852:	d10a      	bne.n	800c86a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c858:	f383 8811 	msr	BASEPRI, r3
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	623b      	str	r3, [r7, #32]
}
 800c866:	bf00      	nop
 800c868:	e7fe      	b.n	800c868 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d10a      	bne.n	800c886 <xTaskCreateStatic+0x46>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	61fb      	str	r3, [r7, #28]
}
 800c882:	bf00      	nop
 800c884:	e7fe      	b.n	800c884 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c886:	23a8      	movs	r3, #168	; 0xa8
 800c888:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	2ba8      	cmp	r3, #168	; 0xa8
 800c88e:	d00a      	beq.n	800c8a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	61bb      	str	r3, [r7, #24]
}
 800c8a2:	bf00      	nop
 800c8a4:	e7fe      	b.n	800c8a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c8a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d01e      	beq.n	800c8ec <xTaskCreateStatic+0xac>
 800c8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d01b      	beq.n	800c8ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c0:	2202      	movs	r2, #2
 800c8c2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	9303      	str	r3, [sp, #12]
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	9302      	str	r3, [sp, #8]
 800c8ce:	f107 0314 	add.w	r3, r7, #20
 800c8d2:	9301      	str	r3, [sp, #4]
 800c8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	68b9      	ldr	r1, [r7, #8]
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f000 f850 	bl	800c984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8e6:	f000 f8f3 	bl	800cad0 <prvAddNewTaskToReadyList>
 800c8ea:	e001      	b.n	800c8f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c8f0:	697b      	ldr	r3, [r7, #20]
	}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3728      	adds	r7, #40	; 0x28
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b08c      	sub	sp, #48	; 0x30
 800c8fe:	af04      	add	r7, sp, #16
 800c900:	60f8      	str	r0, [r7, #12]
 800c902:	60b9      	str	r1, [r7, #8]
 800c904:	603b      	str	r3, [r7, #0]
 800c906:	4613      	mov	r3, r2
 800c908:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c90a:	88fb      	ldrh	r3, [r7, #6]
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4618      	mov	r0, r3
 800c910:	f001 fd82 	bl	800e418 <pvPortMalloc>
 800c914:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00e      	beq.n	800c93a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c91c:	20a8      	movs	r0, #168	; 0xa8
 800c91e:	f001 fd7b 	bl	800e418 <pvPortMalloc>
 800c922:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d003      	beq.n	800c932 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	697a      	ldr	r2, [r7, #20]
 800c92e:	631a      	str	r2, [r3, #48]	; 0x30
 800c930:	e005      	b.n	800c93e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c932:	6978      	ldr	r0, [r7, #20]
 800c934:	f001 fe3c 	bl	800e5b0 <vPortFree>
 800c938:	e001      	b.n	800c93e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c93a:	2300      	movs	r3, #0
 800c93c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d017      	beq.n	800c974 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	2200      	movs	r2, #0
 800c948:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c94c:	88fa      	ldrh	r2, [r7, #6]
 800c94e:	2300      	movs	r3, #0
 800c950:	9303      	str	r3, [sp, #12]
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	9302      	str	r3, [sp, #8]
 800c956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c958:	9301      	str	r3, [sp, #4]
 800c95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f000 f80e 	bl	800c984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c968:	69f8      	ldr	r0, [r7, #28]
 800c96a:	f000 f8b1 	bl	800cad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c96e:	2301      	movs	r3, #1
 800c970:	61bb      	str	r3, [r7, #24]
 800c972:	e002      	b.n	800c97a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c974:	f04f 33ff 	mov.w	r3, #4294967295
 800c978:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c97a:	69bb      	ldr	r3, [r7, #24]
	}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3720      	adds	r7, #32
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b088      	sub	sp, #32
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c994:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	461a      	mov	r2, r3
 800c99c:	21a5      	movs	r1, #165	; 0xa5
 800c99e:	f00d fd63 	bl	801a468 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	4413      	add	r3, r2
 800c9b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	f023 0307 	bic.w	r3, r3, #7
 800c9ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	f003 0307 	and.w	r3, r3, #7
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00a      	beq.n	800c9dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	617b      	str	r3, [r7, #20]
}
 800c9d8:	bf00      	nop
 800c9da:	e7fe      	b.n	800c9da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d01f      	beq.n	800ca22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	61fb      	str	r3, [r7, #28]
 800c9e6:	e012      	b.n	800ca0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	7819      	ldrb	r1, [r3, #0]
 800c9f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	3334      	adds	r3, #52	; 0x34
 800c9f8:	460a      	mov	r2, r1
 800c9fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	4413      	add	r3, r2
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d006      	beq.n	800ca16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	61fb      	str	r3, [r7, #28]
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	2b0f      	cmp	r3, #15
 800ca12:	d9e9      	bls.n	800c9e8 <prvInitialiseNewTask+0x64>
 800ca14:	e000      	b.n	800ca18 <prvInitialiseNewTask+0x94>
			{
				break;
 800ca16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca20:	e003      	b.n	800ca2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2c:	2b37      	cmp	r3, #55	; 0x37
 800ca2e:	d901      	bls.n	800ca34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca30:	2337      	movs	r3, #55	; 0x37
 800ca32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca42:	2200      	movs	r2, #0
 800ca44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca48:	3304      	adds	r3, #4
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fe fffc 	bl	800ba48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca52:	3318      	adds	r3, #24
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fe fff7 	bl	800ba48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ca80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca82:	3354      	adds	r3, #84	; 0x54
 800ca84:	224c      	movs	r2, #76	; 0x4c
 800ca86:	2100      	movs	r1, #0
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f00d fced 	bl	801a468 <memset>
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca90:	4a0c      	ldr	r2, [pc, #48]	; (800cac4 <prvInitialiseNewTask+0x140>)
 800ca92:	659a      	str	r2, [r3, #88]	; 0x58
 800ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca96:	4a0c      	ldr	r2, [pc, #48]	; (800cac8 <prvInitialiseNewTask+0x144>)
 800ca98:	65da      	str	r2, [r3, #92]	; 0x5c
 800ca9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9c:	4a0b      	ldr	r2, [pc, #44]	; (800cacc <prvInitialiseNewTask+0x148>)
 800ca9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800caa0:	683a      	ldr	r2, [r7, #0]
 800caa2:	68f9      	ldr	r1, [r7, #12]
 800caa4:	69b8      	ldr	r0, [r7, #24]
 800caa6:	f001 fa65 	bl	800df74 <pxPortInitialiseStack>
 800caaa:	4602      	mov	r2, r0
 800caac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d002      	beq.n	800cabc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cabc:	bf00      	nop
 800cabe:	3720      	adds	r7, #32
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	20009d68 	.word	0x20009d68
 800cac8:	20009dd0 	.word	0x20009dd0
 800cacc:	20009e38 	.word	0x20009e38

0800cad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cad8:	f001 fb7c 	bl	800e1d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cadc:	4b2d      	ldr	r3, [pc, #180]	; (800cb94 <prvAddNewTaskToReadyList+0xc4>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	3301      	adds	r3, #1
 800cae2:	4a2c      	ldr	r2, [pc, #176]	; (800cb94 <prvAddNewTaskToReadyList+0xc4>)
 800cae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cae6:	4b2c      	ldr	r3, [pc, #176]	; (800cb98 <prvAddNewTaskToReadyList+0xc8>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d109      	bne.n	800cb02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800caee:	4a2a      	ldr	r2, [pc, #168]	; (800cb98 <prvAddNewTaskToReadyList+0xc8>)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800caf4:	4b27      	ldr	r3, [pc, #156]	; (800cb94 <prvAddNewTaskToReadyList+0xc4>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d110      	bne.n	800cb1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cafc:	f000 fc4c 	bl	800d398 <prvInitialiseTaskLists>
 800cb00:	e00d      	b.n	800cb1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb02:	4b26      	ldr	r3, [pc, #152]	; (800cb9c <prvAddNewTaskToReadyList+0xcc>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d109      	bne.n	800cb1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cb0a:	4b23      	ldr	r3, [pc, #140]	; (800cb98 <prvAddNewTaskToReadyList+0xc8>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d802      	bhi.n	800cb1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cb18:	4a1f      	ldr	r2, [pc, #124]	; (800cb98 <prvAddNewTaskToReadyList+0xc8>)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb1e:	4b20      	ldr	r3, [pc, #128]	; (800cba0 <prvAddNewTaskToReadyList+0xd0>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	3301      	adds	r3, #1
 800cb24:	4a1e      	ldr	r2, [pc, #120]	; (800cba0 <prvAddNewTaskToReadyList+0xd0>)
 800cb26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cb28:	4b1d      	ldr	r3, [pc, #116]	; (800cba0 <prvAddNewTaskToReadyList+0xd0>)
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb34:	4b1b      	ldr	r3, [pc, #108]	; (800cba4 <prvAddNewTaskToReadyList+0xd4>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d903      	bls.n	800cb44 <prvAddNewTaskToReadyList+0x74>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb40:	4a18      	ldr	r2, [pc, #96]	; (800cba4 <prvAddNewTaskToReadyList+0xd4>)
 800cb42:	6013      	str	r3, [r2, #0]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb48:	4613      	mov	r3, r2
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	4413      	add	r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	4a15      	ldr	r2, [pc, #84]	; (800cba8 <prvAddNewTaskToReadyList+0xd8>)
 800cb52:	441a      	add	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	3304      	adds	r3, #4
 800cb58:	4619      	mov	r1, r3
 800cb5a:	4610      	mov	r0, r2
 800cb5c:	f7fe ff81 	bl	800ba62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb60:	f001 fb68 	bl	800e234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb64:	4b0d      	ldr	r3, [pc, #52]	; (800cb9c <prvAddNewTaskToReadyList+0xcc>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00e      	beq.n	800cb8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb6c:	4b0a      	ldr	r3, [pc, #40]	; (800cb98 <prvAddNewTaskToReadyList+0xc8>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d207      	bcs.n	800cb8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb7a:	4b0c      	ldr	r3, [pc, #48]	; (800cbac <prvAddNewTaskToReadyList+0xdc>)
 800cb7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb8a:	bf00      	nop
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	200059ec 	.word	0x200059ec
 800cb98:	20005518 	.word	0x20005518
 800cb9c:	200059f8 	.word	0x200059f8
 800cba0:	20005a08 	.word	0x20005a08
 800cba4:	200059f4 	.word	0x200059f4
 800cba8:	2000551c 	.word	0x2000551c
 800cbac:	e000ed04 	.word	0xe000ed04

0800cbb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d017      	beq.n	800cbf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cbc2:	4b13      	ldr	r3, [pc, #76]	; (800cc10 <vTaskDelay+0x60>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00a      	beq.n	800cbe0 <vTaskDelay+0x30>
	__asm volatile
 800cbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	60bb      	str	r3, [r7, #8]
}
 800cbdc:	bf00      	nop
 800cbde:	e7fe      	b.n	800cbde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cbe0:	f000 f88a 	bl	800ccf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 fe22 	bl	800d830 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cbec:	f000 f892 	bl	800cd14 <xTaskResumeAll>
 800cbf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d107      	bne.n	800cc08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cbf8:	4b06      	ldr	r3, [pc, #24]	; (800cc14 <vTaskDelay+0x64>)
 800cbfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbfe:	601a      	str	r2, [r3, #0]
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc08:	bf00      	nop
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	20005a14 	.word	0x20005a14
 800cc14:	e000ed04 	.word	0xe000ed04

0800cc18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b08a      	sub	sp, #40	; 0x28
 800cc1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc22:	2300      	movs	r3, #0
 800cc24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc26:	463a      	mov	r2, r7
 800cc28:	1d39      	adds	r1, r7, #4
 800cc2a:	f107 0308 	add.w	r3, r7, #8
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fe feb6 	bl	800b9a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc34:	6839      	ldr	r1, [r7, #0]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	68ba      	ldr	r2, [r7, #8]
 800cc3a:	9202      	str	r2, [sp, #8]
 800cc3c:	9301      	str	r3, [sp, #4]
 800cc3e:	2300      	movs	r3, #0
 800cc40:	9300      	str	r3, [sp, #0]
 800cc42:	2300      	movs	r3, #0
 800cc44:	460a      	mov	r2, r1
 800cc46:	4924      	ldr	r1, [pc, #144]	; (800ccd8 <vTaskStartScheduler+0xc0>)
 800cc48:	4824      	ldr	r0, [pc, #144]	; (800ccdc <vTaskStartScheduler+0xc4>)
 800cc4a:	f7ff fdf9 	bl	800c840 <xTaskCreateStatic>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	4a23      	ldr	r2, [pc, #140]	; (800cce0 <vTaskStartScheduler+0xc8>)
 800cc52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc54:	4b22      	ldr	r3, [pc, #136]	; (800cce0 <vTaskStartScheduler+0xc8>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d002      	beq.n	800cc62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	617b      	str	r3, [r7, #20]
 800cc60:	e001      	b.n	800cc66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc62:	2300      	movs	r3, #0
 800cc64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d102      	bne.n	800cc72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc6c:	f000 fe34 	bl	800d8d8 <xTimerCreateTimerTask>
 800cc70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d11b      	bne.n	800ccb0 <vTaskStartScheduler+0x98>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	613b      	str	r3, [r7, #16]
}
 800cc8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cc8c:	4b15      	ldr	r3, [pc, #84]	; (800cce4 <vTaskStartScheduler+0xcc>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3354      	adds	r3, #84	; 0x54
 800cc92:	4a15      	ldr	r2, [pc, #84]	; (800cce8 <vTaskStartScheduler+0xd0>)
 800cc94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cc96:	4b15      	ldr	r3, [pc, #84]	; (800ccec <vTaskStartScheduler+0xd4>)
 800cc98:	f04f 32ff 	mov.w	r2, #4294967295
 800cc9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cc9e:	4b14      	ldr	r3, [pc, #80]	; (800ccf0 <vTaskStartScheduler+0xd8>)
 800cca0:	2201      	movs	r2, #1
 800cca2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cca4:	4b13      	ldr	r3, [pc, #76]	; (800ccf4 <vTaskStartScheduler+0xdc>)
 800cca6:	2200      	movs	r2, #0
 800cca8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ccaa:	f001 f9f1 	bl	800e090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ccae:	e00e      	b.n	800ccce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb6:	d10a      	bne.n	800ccce <vTaskStartScheduler+0xb6>
	__asm volatile
 800ccb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbc:	f383 8811 	msr	BASEPRI, r3
 800ccc0:	f3bf 8f6f 	isb	sy
 800ccc4:	f3bf 8f4f 	dsb	sy
 800ccc8:	60fb      	str	r3, [r7, #12]
}
 800ccca:	bf00      	nop
 800cccc:	e7fe      	b.n	800cccc <vTaskStartScheduler+0xb4>
}
 800ccce:	bf00      	nop
 800ccd0:	3718      	adds	r7, #24
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	0801b708 	.word	0x0801b708
 800ccdc:	0800d369 	.word	0x0800d369
 800cce0:	20005a10 	.word	0x20005a10
 800cce4:	20005518 	.word	0x20005518
 800cce8:	200000e8 	.word	0x200000e8
 800ccec:	20005a0c 	.word	0x20005a0c
 800ccf0:	200059f8 	.word	0x200059f8
 800ccf4:	200059f0 	.word	0x200059f0

0800ccf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ccfc:	4b04      	ldr	r3, [pc, #16]	; (800cd10 <vTaskSuspendAll+0x18>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	3301      	adds	r3, #1
 800cd02:	4a03      	ldr	r2, [pc, #12]	; (800cd10 <vTaskSuspendAll+0x18>)
 800cd04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd06:	bf00      	nop
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	20005a14 	.word	0x20005a14

0800cd14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd22:	4b42      	ldr	r3, [pc, #264]	; (800ce2c <xTaskResumeAll+0x118>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10a      	bne.n	800cd40 <xTaskResumeAll+0x2c>
	__asm volatile
 800cd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	603b      	str	r3, [r7, #0]
}
 800cd3c:	bf00      	nop
 800cd3e:	e7fe      	b.n	800cd3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd40:	f001 fa48 	bl	800e1d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd44:	4b39      	ldr	r3, [pc, #228]	; (800ce2c <xTaskResumeAll+0x118>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	4a38      	ldr	r2, [pc, #224]	; (800ce2c <xTaskResumeAll+0x118>)
 800cd4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd4e:	4b37      	ldr	r3, [pc, #220]	; (800ce2c <xTaskResumeAll+0x118>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d162      	bne.n	800ce1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd56:	4b36      	ldr	r3, [pc, #216]	; (800ce30 <xTaskResumeAll+0x11c>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d05e      	beq.n	800ce1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd5e:	e02f      	b.n	800cdc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd60:	4b34      	ldr	r3, [pc, #208]	; (800ce34 <xTaskResumeAll+0x120>)
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	3318      	adds	r3, #24
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7fe fed5 	bl	800bb1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	3304      	adds	r3, #4
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7fe fed0 	bl	800bb1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd80:	4b2d      	ldr	r3, [pc, #180]	; (800ce38 <xTaskResumeAll+0x124>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d903      	bls.n	800cd90 <xTaskResumeAll+0x7c>
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8c:	4a2a      	ldr	r2, [pc, #168]	; (800ce38 <xTaskResumeAll+0x124>)
 800cd8e:	6013      	str	r3, [r2, #0]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd94:	4613      	mov	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	4a27      	ldr	r2, [pc, #156]	; (800ce3c <xTaskResumeAll+0x128>)
 800cd9e:	441a      	add	r2, r3
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	3304      	adds	r3, #4
 800cda4:	4619      	mov	r1, r3
 800cda6:	4610      	mov	r0, r2
 800cda8:	f7fe fe5b 	bl	800ba62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb0:	4b23      	ldr	r3, [pc, #140]	; (800ce40 <xTaskResumeAll+0x12c>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d302      	bcc.n	800cdc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cdba:	4b22      	ldr	r3, [pc, #136]	; (800ce44 <xTaskResumeAll+0x130>)
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdc0:	4b1c      	ldr	r3, [pc, #112]	; (800ce34 <xTaskResumeAll+0x120>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d1cb      	bne.n	800cd60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d001      	beq.n	800cdd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cdce:	f000 fb85 	bl	800d4dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cdd2:	4b1d      	ldr	r3, [pc, #116]	; (800ce48 <xTaskResumeAll+0x134>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d010      	beq.n	800ce00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cdde:	f000 f847 	bl	800ce70 <xTaskIncrementTick>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d002      	beq.n	800cdee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cde8:	4b16      	ldr	r3, [pc, #88]	; (800ce44 <xTaskResumeAll+0x130>)
 800cdea:	2201      	movs	r2, #1
 800cdec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1f1      	bne.n	800cdde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cdfa:	4b13      	ldr	r3, [pc, #76]	; (800ce48 <xTaskResumeAll+0x134>)
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce00:	4b10      	ldr	r3, [pc, #64]	; (800ce44 <xTaskResumeAll+0x130>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d009      	beq.n	800ce1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce0c:	4b0f      	ldr	r3, [pc, #60]	; (800ce4c <xTaskResumeAll+0x138>)
 800ce0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	f3bf 8f4f 	dsb	sy
 800ce18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce1c:	f001 fa0a 	bl	800e234 <vPortExitCritical>

	return xAlreadyYielded;
 800ce20:	68bb      	ldr	r3, [r7, #8]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	20005a14 	.word	0x20005a14
 800ce30:	200059ec 	.word	0x200059ec
 800ce34:	200059ac 	.word	0x200059ac
 800ce38:	200059f4 	.word	0x200059f4
 800ce3c:	2000551c 	.word	0x2000551c
 800ce40:	20005518 	.word	0x20005518
 800ce44:	20005a00 	.word	0x20005a00
 800ce48:	200059fc 	.word	0x200059fc
 800ce4c:	e000ed04 	.word	0xe000ed04

0800ce50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ce56:	4b05      	ldr	r3, [pc, #20]	; (800ce6c <xTaskGetTickCount+0x1c>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce5c:	687b      	ldr	r3, [r7, #4]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	370c      	adds	r7, #12
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	200059f0 	.word	0x200059f0

0800ce70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce76:	2300      	movs	r3, #0
 800ce78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce7a:	4b4f      	ldr	r3, [pc, #316]	; (800cfb8 <xTaskIncrementTick+0x148>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	f040 808f 	bne.w	800cfa2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce84:	4b4d      	ldr	r3, [pc, #308]	; (800cfbc <xTaskIncrementTick+0x14c>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce8c:	4a4b      	ldr	r2, [pc, #300]	; (800cfbc <xTaskIncrementTick+0x14c>)
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d120      	bne.n	800ceda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce98:	4b49      	ldr	r3, [pc, #292]	; (800cfc0 <xTaskIncrementTick+0x150>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d00a      	beq.n	800ceb8 <xTaskIncrementTick+0x48>
	__asm volatile
 800cea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea6:	f383 8811 	msr	BASEPRI, r3
 800ceaa:	f3bf 8f6f 	isb	sy
 800ceae:	f3bf 8f4f 	dsb	sy
 800ceb2:	603b      	str	r3, [r7, #0]
}
 800ceb4:	bf00      	nop
 800ceb6:	e7fe      	b.n	800ceb6 <xTaskIncrementTick+0x46>
 800ceb8:	4b41      	ldr	r3, [pc, #260]	; (800cfc0 <xTaskIncrementTick+0x150>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	60fb      	str	r3, [r7, #12]
 800cebe:	4b41      	ldr	r3, [pc, #260]	; (800cfc4 <xTaskIncrementTick+0x154>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4a3f      	ldr	r2, [pc, #252]	; (800cfc0 <xTaskIncrementTick+0x150>)
 800cec4:	6013      	str	r3, [r2, #0]
 800cec6:	4a3f      	ldr	r2, [pc, #252]	; (800cfc4 <xTaskIncrementTick+0x154>)
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6013      	str	r3, [r2, #0]
 800cecc:	4b3e      	ldr	r3, [pc, #248]	; (800cfc8 <xTaskIncrementTick+0x158>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	3301      	adds	r3, #1
 800ced2:	4a3d      	ldr	r2, [pc, #244]	; (800cfc8 <xTaskIncrementTick+0x158>)
 800ced4:	6013      	str	r3, [r2, #0]
 800ced6:	f000 fb01 	bl	800d4dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ceda:	4b3c      	ldr	r3, [pc, #240]	; (800cfcc <xTaskIncrementTick+0x15c>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	693a      	ldr	r2, [r7, #16]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d349      	bcc.n	800cf78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cee4:	4b36      	ldr	r3, [pc, #216]	; (800cfc0 <xTaskIncrementTick+0x150>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d104      	bne.n	800cef8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceee:	4b37      	ldr	r3, [pc, #220]	; (800cfcc <xTaskIncrementTick+0x15c>)
 800cef0:	f04f 32ff 	mov.w	r2, #4294967295
 800cef4:	601a      	str	r2, [r3, #0]
					break;
 800cef6:	e03f      	b.n	800cf78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cef8:	4b31      	ldr	r3, [pc, #196]	; (800cfc0 <xTaskIncrementTick+0x150>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf08:	693a      	ldr	r2, [r7, #16]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d203      	bcs.n	800cf18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf10:	4a2e      	ldr	r2, [pc, #184]	; (800cfcc <xTaskIncrementTick+0x15c>)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf16:	e02f      	b.n	800cf78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fe fdfd 	bl	800bb1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d004      	beq.n	800cf34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	3318      	adds	r3, #24
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe fdf4 	bl	800bb1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf38:	4b25      	ldr	r3, [pc, #148]	; (800cfd0 <xTaskIncrementTick+0x160>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d903      	bls.n	800cf48 <xTaskIncrementTick+0xd8>
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf44:	4a22      	ldr	r2, [pc, #136]	; (800cfd0 <xTaskIncrementTick+0x160>)
 800cf46:	6013      	str	r3, [r2, #0]
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4a1f      	ldr	r2, [pc, #124]	; (800cfd4 <xTaskIncrementTick+0x164>)
 800cf56:	441a      	add	r2, r3
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	3304      	adds	r3, #4
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	4610      	mov	r0, r2
 800cf60:	f7fe fd7f 	bl	800ba62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf68:	4b1b      	ldr	r3, [pc, #108]	; (800cfd8 <xTaskIncrementTick+0x168>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d3b8      	bcc.n	800cee4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cf72:	2301      	movs	r3, #1
 800cf74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf76:	e7b5      	b.n	800cee4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf78:	4b17      	ldr	r3, [pc, #92]	; (800cfd8 <xTaskIncrementTick+0x168>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf7e:	4915      	ldr	r1, [pc, #84]	; (800cfd4 <xTaskIncrementTick+0x164>)
 800cf80:	4613      	mov	r3, r2
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	4413      	add	r3, r2
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	440b      	add	r3, r1
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d901      	bls.n	800cf94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cf90:	2301      	movs	r3, #1
 800cf92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cf94:	4b11      	ldr	r3, [pc, #68]	; (800cfdc <xTaskIncrementTick+0x16c>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d007      	beq.n	800cfac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	617b      	str	r3, [r7, #20]
 800cfa0:	e004      	b.n	800cfac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cfa2:	4b0f      	ldr	r3, [pc, #60]	; (800cfe0 <xTaskIncrementTick+0x170>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	4a0d      	ldr	r2, [pc, #52]	; (800cfe0 <xTaskIncrementTick+0x170>)
 800cfaa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cfac:	697b      	ldr	r3, [r7, #20]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3718      	adds	r7, #24
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	20005a14 	.word	0x20005a14
 800cfbc:	200059f0 	.word	0x200059f0
 800cfc0:	200059a4 	.word	0x200059a4
 800cfc4:	200059a8 	.word	0x200059a8
 800cfc8:	20005a04 	.word	0x20005a04
 800cfcc:	20005a0c 	.word	0x20005a0c
 800cfd0:	200059f4 	.word	0x200059f4
 800cfd4:	2000551c 	.word	0x2000551c
 800cfd8:	20005518 	.word	0x20005518
 800cfdc:	20005a00 	.word	0x20005a00
 800cfe0:	200059fc 	.word	0x200059fc

0800cfe4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cfea:	4b2a      	ldr	r3, [pc, #168]	; (800d094 <vTaskSwitchContext+0xb0>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d003      	beq.n	800cffa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cff2:	4b29      	ldr	r3, [pc, #164]	; (800d098 <vTaskSwitchContext+0xb4>)
 800cff4:	2201      	movs	r2, #1
 800cff6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cff8:	e046      	b.n	800d088 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cffa:	4b27      	ldr	r3, [pc, #156]	; (800d098 <vTaskSwitchContext+0xb4>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d000:	4b26      	ldr	r3, [pc, #152]	; (800d09c <vTaskSwitchContext+0xb8>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	60fb      	str	r3, [r7, #12]
 800d006:	e010      	b.n	800d02a <vTaskSwitchContext+0x46>
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10a      	bne.n	800d024 <vTaskSwitchContext+0x40>
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	607b      	str	r3, [r7, #4]
}
 800d020:	bf00      	nop
 800d022:	e7fe      	b.n	800d022 <vTaskSwitchContext+0x3e>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	3b01      	subs	r3, #1
 800d028:	60fb      	str	r3, [r7, #12]
 800d02a:	491d      	ldr	r1, [pc, #116]	; (800d0a0 <vTaskSwitchContext+0xbc>)
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4613      	mov	r3, r2
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	4413      	add	r3, r2
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	440b      	add	r3, r1
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d0e4      	beq.n	800d008 <vTaskSwitchContext+0x24>
 800d03e:	68fa      	ldr	r2, [r7, #12]
 800d040:	4613      	mov	r3, r2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	4413      	add	r3, r2
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	4a15      	ldr	r2, [pc, #84]	; (800d0a0 <vTaskSwitchContext+0xbc>)
 800d04a:	4413      	add	r3, r2
 800d04c:	60bb      	str	r3, [r7, #8]
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	685a      	ldr	r2, [r3, #4]
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	605a      	str	r2, [r3, #4]
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	3308      	adds	r3, #8
 800d060:	429a      	cmp	r2, r3
 800d062:	d104      	bne.n	800d06e <vTaskSwitchContext+0x8a>
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	685a      	ldr	r2, [r3, #4]
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	605a      	str	r2, [r3, #4]
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	4a0b      	ldr	r2, [pc, #44]	; (800d0a4 <vTaskSwitchContext+0xc0>)
 800d076:	6013      	str	r3, [r2, #0]
 800d078:	4a08      	ldr	r2, [pc, #32]	; (800d09c <vTaskSwitchContext+0xb8>)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d07e:	4b09      	ldr	r3, [pc, #36]	; (800d0a4 <vTaskSwitchContext+0xc0>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	3354      	adds	r3, #84	; 0x54
 800d084:	4a08      	ldr	r2, [pc, #32]	; (800d0a8 <vTaskSwitchContext+0xc4>)
 800d086:	6013      	str	r3, [r2, #0]
}
 800d088:	bf00      	nop
 800d08a:	3714      	adds	r7, #20
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr
 800d094:	20005a14 	.word	0x20005a14
 800d098:	20005a00 	.word	0x20005a00
 800d09c:	200059f4 	.word	0x200059f4
 800d0a0:	2000551c 	.word	0x2000551c
 800d0a4:	20005518 	.word	0x20005518
 800d0a8:	200000e8 	.word	0x200000e8

0800d0ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10a      	bne.n	800d0d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	60fb      	str	r3, [r7, #12]
}
 800d0ce:	bf00      	nop
 800d0d0:	e7fe      	b.n	800d0d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0d2:	4b07      	ldr	r3, [pc, #28]	; (800d0f0 <vTaskPlaceOnEventList+0x44>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	3318      	adds	r3, #24
 800d0d8:	4619      	mov	r1, r3
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f7fe fce5 	bl	800baaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d0e0:	2101      	movs	r1, #1
 800d0e2:	6838      	ldr	r0, [r7, #0]
 800d0e4:	f000 fba4 	bl	800d830 <prvAddCurrentTaskToDelayedList>
}
 800d0e8:	bf00      	nop
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	20005518 	.word	0x20005518

0800d0f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b086      	sub	sp, #24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d10a      	bne.n	800d11c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10a:	f383 8811 	msr	BASEPRI, r3
 800d10e:	f3bf 8f6f 	isb	sy
 800d112:	f3bf 8f4f 	dsb	sy
 800d116:	617b      	str	r3, [r7, #20]
}
 800d118:	bf00      	nop
 800d11a:	e7fe      	b.n	800d11a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d11c:	4b0a      	ldr	r3, [pc, #40]	; (800d148 <vTaskPlaceOnEventListRestricted+0x54>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	3318      	adds	r3, #24
 800d122:	4619      	mov	r1, r3
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	f7fe fc9c 	bl	800ba62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d002      	beq.n	800d136 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d130:	f04f 33ff 	mov.w	r3, #4294967295
 800d134:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d136:	6879      	ldr	r1, [r7, #4]
 800d138:	68b8      	ldr	r0, [r7, #8]
 800d13a:	f000 fb79 	bl	800d830 <prvAddCurrentTaskToDelayedList>
	}
 800d13e:	bf00      	nop
 800d140:	3718      	adds	r7, #24
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	20005518 	.word	0x20005518

0800d14c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d10a      	bne.n	800d178 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	60fb      	str	r3, [r7, #12]
}
 800d174:	bf00      	nop
 800d176:	e7fe      	b.n	800d176 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	3318      	adds	r3, #24
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fe fccd 	bl	800bb1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d182:	4b1e      	ldr	r3, [pc, #120]	; (800d1fc <xTaskRemoveFromEventList+0xb0>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d11d      	bne.n	800d1c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	3304      	adds	r3, #4
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fe fcc4 	bl	800bb1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d198:	4b19      	ldr	r3, [pc, #100]	; (800d200 <xTaskRemoveFromEventList+0xb4>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d903      	bls.n	800d1a8 <xTaskRemoveFromEventList+0x5c>
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a4:	4a16      	ldr	r2, [pc, #88]	; (800d200 <xTaskRemoveFromEventList+0xb4>)
 800d1a6:	6013      	str	r3, [r2, #0]
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	4413      	add	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	4a13      	ldr	r2, [pc, #76]	; (800d204 <xTaskRemoveFromEventList+0xb8>)
 800d1b6:	441a      	add	r2, r3
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	3304      	adds	r3, #4
 800d1bc:	4619      	mov	r1, r3
 800d1be:	4610      	mov	r0, r2
 800d1c0:	f7fe fc4f 	bl	800ba62 <vListInsertEnd>
 800d1c4:	e005      	b.n	800d1d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	3318      	adds	r3, #24
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	480e      	ldr	r0, [pc, #56]	; (800d208 <xTaskRemoveFromEventList+0xbc>)
 800d1ce:	f7fe fc48 	bl	800ba62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d6:	4b0d      	ldr	r3, [pc, #52]	; (800d20c <xTaskRemoveFromEventList+0xc0>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d905      	bls.n	800d1ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d1e4:	4b0a      	ldr	r3, [pc, #40]	; (800d210 <xTaskRemoveFromEventList+0xc4>)
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	601a      	str	r2, [r3, #0]
 800d1ea:	e001      	b.n	800d1f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d1f0:	697b      	ldr	r3, [r7, #20]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3718      	adds	r7, #24
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	20005a14 	.word	0x20005a14
 800d200:	200059f4 	.word	0x200059f4
 800d204:	2000551c 	.word	0x2000551c
 800d208:	200059ac 	.word	0x200059ac
 800d20c:	20005518 	.word	0x20005518
 800d210:	20005a00 	.word	0x20005a00

0800d214 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10a      	bne.n	800d238 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800d222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d226:	f383 8811 	msr	BASEPRI, r3
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	f3bf 8f4f 	dsb	sy
 800d232:	60fb      	str	r3, [r7, #12]
}
 800d234:	bf00      	nop
 800d236:	e7fe      	b.n	800d236 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d238:	f000 ffcc 	bl	800e1d4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d23c:	4b06      	ldr	r3, [pc, #24]	; (800d258 <vTaskSetTimeOutState+0x44>)
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d244:	4b05      	ldr	r3, [pc, #20]	; (800d25c <vTaskSetTimeOutState+0x48>)
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d24c:	f000 fff2 	bl	800e234 <vPortExitCritical>
}
 800d250:	bf00      	nop
 800d252:	3710      	adds	r7, #16
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	20005a04 	.word	0x20005a04
 800d25c:	200059f0 	.word	0x200059f0

0800d260 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d268:	4b06      	ldr	r3, [pc, #24]	; (800d284 <vTaskInternalSetTimeOutState+0x24>)
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d270:	4b05      	ldr	r3, [pc, #20]	; (800d288 <vTaskInternalSetTimeOutState+0x28>)
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	605a      	str	r2, [r3, #4]
}
 800d278:	bf00      	nop
 800d27a:	370c      	adds	r7, #12
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr
 800d284:	20005a04 	.word	0x20005a04
 800d288:	200059f0 	.word	0x200059f0

0800d28c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b088      	sub	sp, #32
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d10a      	bne.n	800d2b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a0:	f383 8811 	msr	BASEPRI, r3
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	f3bf 8f4f 	dsb	sy
 800d2ac:	613b      	str	r3, [r7, #16]
}
 800d2ae:	bf00      	nop
 800d2b0:	e7fe      	b.n	800d2b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10a      	bne.n	800d2ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2bc:	f383 8811 	msr	BASEPRI, r3
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	60fb      	str	r3, [r7, #12]
}
 800d2ca:	bf00      	nop
 800d2cc:	e7fe      	b.n	800d2cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d2ce:	f000 ff81 	bl	800e1d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d2d2:	4b1d      	ldr	r3, [pc, #116]	; (800d348 <xTaskCheckForTimeOut+0xbc>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	69ba      	ldr	r2, [r7, #24]
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ea:	d102      	bne.n	800d2f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	61fb      	str	r3, [r7, #28]
 800d2f0:	e023      	b.n	800d33a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	4b15      	ldr	r3, [pc, #84]	; (800d34c <xTaskCheckForTimeOut+0xc0>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d007      	beq.n	800d30e <xTaskCheckForTimeOut+0x82>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	69ba      	ldr	r2, [r7, #24]
 800d304:	429a      	cmp	r2, r3
 800d306:	d302      	bcc.n	800d30e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d308:	2301      	movs	r3, #1
 800d30a:	61fb      	str	r3, [r7, #28]
 800d30c:	e015      	b.n	800d33a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	697a      	ldr	r2, [r7, #20]
 800d314:	429a      	cmp	r2, r3
 800d316:	d20b      	bcs.n	800d330 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	1ad2      	subs	r2, r2, r3
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f7ff ff9b 	bl	800d260 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d32a:	2300      	movs	r3, #0
 800d32c:	61fb      	str	r3, [r7, #28]
 800d32e:	e004      	b.n	800d33a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	2200      	movs	r2, #0
 800d334:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d336:	2301      	movs	r3, #1
 800d338:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d33a:	f000 ff7b 	bl	800e234 <vPortExitCritical>

	return xReturn;
 800d33e:	69fb      	ldr	r3, [r7, #28]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3720      	adds	r7, #32
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	200059f0 	.word	0x200059f0
 800d34c:	20005a04 	.word	0x20005a04

0800d350 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d350:	b480      	push	{r7}
 800d352:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d354:	4b03      	ldr	r3, [pc, #12]	; (800d364 <vTaskMissedYield+0x14>)
 800d356:	2201      	movs	r2, #1
 800d358:	601a      	str	r2, [r3, #0]
}
 800d35a:	bf00      	nop
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	20005a00 	.word	0x20005a00

0800d368 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d370:	f000 f852 	bl	800d418 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d374:	4b06      	ldr	r3, [pc, #24]	; (800d390 <prvIdleTask+0x28>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d9f9      	bls.n	800d370 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d37c:	4b05      	ldr	r3, [pc, #20]	; (800d394 <prvIdleTask+0x2c>)
 800d37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d38c:	e7f0      	b.n	800d370 <prvIdleTask+0x8>
 800d38e:	bf00      	nop
 800d390:	2000551c 	.word	0x2000551c
 800d394:	e000ed04 	.word	0xe000ed04

0800d398 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d39e:	2300      	movs	r3, #0
 800d3a0:	607b      	str	r3, [r7, #4]
 800d3a2:	e00c      	b.n	800d3be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	4413      	add	r3, r2
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	4a12      	ldr	r2, [pc, #72]	; (800d3f8 <prvInitialiseTaskLists+0x60>)
 800d3b0:	4413      	add	r3, r2
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fe fb28 	bl	800ba08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	607b      	str	r3, [r7, #4]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2b37      	cmp	r3, #55	; 0x37
 800d3c2:	d9ef      	bls.n	800d3a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d3c4:	480d      	ldr	r0, [pc, #52]	; (800d3fc <prvInitialiseTaskLists+0x64>)
 800d3c6:	f7fe fb1f 	bl	800ba08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d3ca:	480d      	ldr	r0, [pc, #52]	; (800d400 <prvInitialiseTaskLists+0x68>)
 800d3cc:	f7fe fb1c 	bl	800ba08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d3d0:	480c      	ldr	r0, [pc, #48]	; (800d404 <prvInitialiseTaskLists+0x6c>)
 800d3d2:	f7fe fb19 	bl	800ba08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d3d6:	480c      	ldr	r0, [pc, #48]	; (800d408 <prvInitialiseTaskLists+0x70>)
 800d3d8:	f7fe fb16 	bl	800ba08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d3dc:	480b      	ldr	r0, [pc, #44]	; (800d40c <prvInitialiseTaskLists+0x74>)
 800d3de:	f7fe fb13 	bl	800ba08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d3e2:	4b0b      	ldr	r3, [pc, #44]	; (800d410 <prvInitialiseTaskLists+0x78>)
 800d3e4:	4a05      	ldr	r2, [pc, #20]	; (800d3fc <prvInitialiseTaskLists+0x64>)
 800d3e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d3e8:	4b0a      	ldr	r3, [pc, #40]	; (800d414 <prvInitialiseTaskLists+0x7c>)
 800d3ea:	4a05      	ldr	r2, [pc, #20]	; (800d400 <prvInitialiseTaskLists+0x68>)
 800d3ec:	601a      	str	r2, [r3, #0]
}
 800d3ee:	bf00      	nop
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	2000551c 	.word	0x2000551c
 800d3fc:	2000597c 	.word	0x2000597c
 800d400:	20005990 	.word	0x20005990
 800d404:	200059ac 	.word	0x200059ac
 800d408:	200059c0 	.word	0x200059c0
 800d40c:	200059d8 	.word	0x200059d8
 800d410:	200059a4 	.word	0x200059a4
 800d414:	200059a8 	.word	0x200059a8

0800d418 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d41e:	e019      	b.n	800d454 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d420:	f000 fed8 	bl	800e1d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d424:	4b10      	ldr	r3, [pc, #64]	; (800d468 <prvCheckTasksWaitingTermination+0x50>)
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	3304      	adds	r3, #4
 800d430:	4618      	mov	r0, r3
 800d432:	f7fe fb73 	bl	800bb1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d436:	4b0d      	ldr	r3, [pc, #52]	; (800d46c <prvCheckTasksWaitingTermination+0x54>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	3b01      	subs	r3, #1
 800d43c:	4a0b      	ldr	r2, [pc, #44]	; (800d46c <prvCheckTasksWaitingTermination+0x54>)
 800d43e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d440:	4b0b      	ldr	r3, [pc, #44]	; (800d470 <prvCheckTasksWaitingTermination+0x58>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3b01      	subs	r3, #1
 800d446:	4a0a      	ldr	r2, [pc, #40]	; (800d470 <prvCheckTasksWaitingTermination+0x58>)
 800d448:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d44a:	f000 fef3 	bl	800e234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 f810 	bl	800d474 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d454:	4b06      	ldr	r3, [pc, #24]	; (800d470 <prvCheckTasksWaitingTermination+0x58>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d1e1      	bne.n	800d420 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d45c:	bf00      	nop
 800d45e:	bf00      	nop
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	200059c0 	.word	0x200059c0
 800d46c:	200059ec 	.word	0x200059ec
 800d470:	200059d4 	.word	0x200059d4

0800d474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	3354      	adds	r3, #84	; 0x54
 800d480:	4618      	mov	r0, r3
 800d482:	f00d f83f 	bl	801a504 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d108      	bne.n	800d4a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d494:	4618      	mov	r0, r3
 800d496:	f001 f88b 	bl	800e5b0 <vPortFree>
				vPortFree( pxTCB );
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f001 f888 	bl	800e5b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d4a0:	e018      	b.n	800d4d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d103      	bne.n	800d4b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f001 f87f 	bl	800e5b0 <vPortFree>
	}
 800d4b2:	e00f      	b.n	800d4d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d00a      	beq.n	800d4d4 <prvDeleteTCB+0x60>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	60fb      	str	r3, [r7, #12]
}
 800d4d0:	bf00      	nop
 800d4d2:	e7fe      	b.n	800d4d2 <prvDeleteTCB+0x5e>
	}
 800d4d4:	bf00      	nop
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4e2:	4b0c      	ldr	r3, [pc, #48]	; (800d514 <prvResetNextTaskUnblockTime+0x38>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d104      	bne.n	800d4f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d4ec:	4b0a      	ldr	r3, [pc, #40]	; (800d518 <prvResetNextTaskUnblockTime+0x3c>)
 800d4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d4f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d4f4:	e008      	b.n	800d508 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4f6:	4b07      	ldr	r3, [pc, #28]	; (800d514 <prvResetNextTaskUnblockTime+0x38>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	4a04      	ldr	r2, [pc, #16]	; (800d518 <prvResetNextTaskUnblockTime+0x3c>)
 800d506:	6013      	str	r3, [r2, #0]
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr
 800d514:	200059a4 	.word	0x200059a4
 800d518:	20005a0c 	.word	0x20005a0c

0800d51c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d522:	4b0b      	ldr	r3, [pc, #44]	; (800d550 <xTaskGetSchedulerState+0x34>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d102      	bne.n	800d530 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d52a:	2301      	movs	r3, #1
 800d52c:	607b      	str	r3, [r7, #4]
 800d52e:	e008      	b.n	800d542 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d530:	4b08      	ldr	r3, [pc, #32]	; (800d554 <xTaskGetSchedulerState+0x38>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d102      	bne.n	800d53e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d538:	2302      	movs	r3, #2
 800d53a:	607b      	str	r3, [r7, #4]
 800d53c:	e001      	b.n	800d542 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d53e:	2300      	movs	r3, #0
 800d540:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d542:	687b      	ldr	r3, [r7, #4]
	}
 800d544:	4618      	mov	r0, r3
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr
 800d550:	200059f8 	.word	0x200059f8
 800d554:	20005a14 	.word	0x20005a14

0800d558 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d564:	2300      	movs	r3, #0
 800d566:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d051      	beq.n	800d612 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d572:	4b2a      	ldr	r3, [pc, #168]	; (800d61c <xTaskPriorityInherit+0xc4>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d578:	429a      	cmp	r2, r3
 800d57a:	d241      	bcs.n	800d600 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	699b      	ldr	r3, [r3, #24]
 800d580:	2b00      	cmp	r3, #0
 800d582:	db06      	blt.n	800d592 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d584:	4b25      	ldr	r3, [pc, #148]	; (800d61c <xTaskPriorityInherit+0xc4>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d58a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	6959      	ldr	r1, [r3, #20]
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d59a:	4613      	mov	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4413      	add	r3, r2
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	4a1f      	ldr	r2, [pc, #124]	; (800d620 <xTaskPriorityInherit+0xc8>)
 800d5a4:	4413      	add	r3, r2
 800d5a6:	4299      	cmp	r1, r3
 800d5a8:	d122      	bne.n	800d5f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fe fab4 	bl	800bb1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d5b4:	4b19      	ldr	r3, [pc, #100]	; (800d61c <xTaskPriorityInherit+0xc4>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5c2:	4b18      	ldr	r3, [pc, #96]	; (800d624 <xTaskPriorityInherit+0xcc>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d903      	bls.n	800d5d2 <xTaskPriorityInherit+0x7a>
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ce:	4a15      	ldr	r2, [pc, #84]	; (800d624 <xTaskPriorityInherit+0xcc>)
 800d5d0:	6013      	str	r3, [r2, #0]
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	4413      	add	r3, r2
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	4a10      	ldr	r2, [pc, #64]	; (800d620 <xTaskPriorityInherit+0xc8>)
 800d5e0:	441a      	add	r2, r3
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	3304      	adds	r3, #4
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	4610      	mov	r0, r2
 800d5ea:	f7fe fa3a 	bl	800ba62 <vListInsertEnd>
 800d5ee:	e004      	b.n	800d5fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d5f0:	4b0a      	ldr	r3, [pc, #40]	; (800d61c <xTaskPriorityInherit+0xc4>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	60fb      	str	r3, [r7, #12]
 800d5fe:	e008      	b.n	800d612 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d604:	4b05      	ldr	r3, [pc, #20]	; (800d61c <xTaskPriorityInherit+0xc4>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d201      	bcs.n	800d612 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d60e:	2301      	movs	r3, #1
 800d610:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d612:	68fb      	ldr	r3, [r7, #12]
	}
 800d614:	4618      	mov	r0, r3
 800d616:	3710      	adds	r7, #16
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	20005518 	.word	0x20005518
 800d620:	2000551c 	.word	0x2000551c
 800d624:	200059f4 	.word	0x200059f4

0800d628 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b086      	sub	sp, #24
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d634:	2300      	movs	r3, #0
 800d636:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d056      	beq.n	800d6ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d63e:	4b2e      	ldr	r3, [pc, #184]	; (800d6f8 <xTaskPriorityDisinherit+0xd0>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	693a      	ldr	r2, [r7, #16]
 800d644:	429a      	cmp	r2, r3
 800d646:	d00a      	beq.n	800d65e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64c:	f383 8811 	msr	BASEPRI, r3
 800d650:	f3bf 8f6f 	isb	sy
 800d654:	f3bf 8f4f 	dsb	sy
 800d658:	60fb      	str	r3, [r7, #12]
}
 800d65a:	bf00      	nop
 800d65c:	e7fe      	b.n	800d65c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d662:	2b00      	cmp	r3, #0
 800d664:	d10a      	bne.n	800d67c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66a:	f383 8811 	msr	BASEPRI, r3
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f3bf 8f4f 	dsb	sy
 800d676:	60bb      	str	r3, [r7, #8]
}
 800d678:	bf00      	nop
 800d67a:	e7fe      	b.n	800d67a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d680:	1e5a      	subs	r2, r3, #1
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d68e:	429a      	cmp	r2, r3
 800d690:	d02c      	beq.n	800d6ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d696:	2b00      	cmp	r3, #0
 800d698:	d128      	bne.n	800d6ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	3304      	adds	r3, #4
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fe fa3c 	bl	800bb1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6bc:	4b0f      	ldr	r3, [pc, #60]	; (800d6fc <xTaskPriorityDisinherit+0xd4>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d903      	bls.n	800d6cc <xTaskPriorityDisinherit+0xa4>
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c8:	4a0c      	ldr	r2, [pc, #48]	; (800d6fc <xTaskPriorityDisinherit+0xd4>)
 800d6ca:	6013      	str	r3, [r2, #0]
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6d0:	4613      	mov	r3, r2
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	4413      	add	r3, r2
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	4a09      	ldr	r2, [pc, #36]	; (800d700 <xTaskPriorityDisinherit+0xd8>)
 800d6da:	441a      	add	r2, r3
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	3304      	adds	r3, #4
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	4610      	mov	r0, r2
 800d6e4:	f7fe f9bd 	bl	800ba62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6ec:	697b      	ldr	r3, [r7, #20]
	}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3718      	adds	r7, #24
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	20005518 	.word	0x20005518
 800d6fc:	200059f4 	.word	0x200059f4
 800d700:	2000551c 	.word	0x2000551c

0800d704 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d704:	b580      	push	{r7, lr}
 800d706:	b088      	sub	sp, #32
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d712:	2301      	movs	r3, #1
 800d714:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d06a      	beq.n	800d7f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10a      	bne.n	800d73a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	60fb      	str	r3, [r7, #12]
}
 800d736:	bf00      	nop
 800d738:	e7fe      	b.n	800d738 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d73e:	683a      	ldr	r2, [r7, #0]
 800d740:	429a      	cmp	r2, r3
 800d742:	d902      	bls.n	800d74a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	61fb      	str	r3, [r7, #28]
 800d748:	e002      	b.n	800d750 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d74e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d754:	69fa      	ldr	r2, [r7, #28]
 800d756:	429a      	cmp	r2, r3
 800d758:	d04b      	beq.n	800d7f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d75e:	697a      	ldr	r2, [r7, #20]
 800d760:	429a      	cmp	r2, r3
 800d762:	d146      	bne.n	800d7f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d764:	4b25      	ldr	r3, [pc, #148]	; (800d7fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	69ba      	ldr	r2, [r7, #24]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d10a      	bne.n	800d784 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	60bb      	str	r3, [r7, #8]
}
 800d780:	bf00      	nop
 800d782:	e7fe      	b.n	800d782 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d788:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	69fa      	ldr	r2, [r7, #28]
 800d78e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	2b00      	cmp	r3, #0
 800d796:	db04      	blt.n	800d7a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d798:	69fb      	ldr	r3, [r7, #28]
 800d79a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	6959      	ldr	r1, [r3, #20]
 800d7a6:	693a      	ldr	r2, [r7, #16]
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	4413      	add	r3, r2
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	4a13      	ldr	r2, [pc, #76]	; (800d800 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d7b2:	4413      	add	r3, r2
 800d7b4:	4299      	cmp	r1, r3
 800d7b6:	d11c      	bne.n	800d7f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	3304      	adds	r3, #4
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7fe f9ad 	bl	800bb1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c6:	4b0f      	ldr	r3, [pc, #60]	; (800d804 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d903      	bls.n	800d7d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d2:	4a0c      	ldr	r2, [pc, #48]	; (800d804 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d7d4:	6013      	str	r3, [r2, #0]
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7da:	4613      	mov	r3, r2
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	4413      	add	r3, r2
 800d7e0:	009b      	lsls	r3, r3, #2
 800d7e2:	4a07      	ldr	r2, [pc, #28]	; (800d800 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d7e4:	441a      	add	r2, r3
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	3304      	adds	r3, #4
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	4610      	mov	r0, r2
 800d7ee:	f7fe f938 	bl	800ba62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7f2:	bf00      	nop
 800d7f4:	3720      	adds	r7, #32
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20005518 	.word	0x20005518
 800d800:	2000551c 	.word	0x2000551c
 800d804:	200059f4 	.word	0x200059f4

0800d808 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d808:	b480      	push	{r7}
 800d80a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d80c:	4b07      	ldr	r3, [pc, #28]	; (800d82c <pvTaskIncrementMutexHeldCount+0x24>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d004      	beq.n	800d81e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d814:	4b05      	ldr	r3, [pc, #20]	; (800d82c <pvTaskIncrementMutexHeldCount+0x24>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d81a:	3201      	adds	r2, #1
 800d81c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d81e:	4b03      	ldr	r3, [pc, #12]	; (800d82c <pvTaskIncrementMutexHeldCount+0x24>)
 800d820:	681b      	ldr	r3, [r3, #0]
	}
 800d822:	4618      	mov	r0, r3
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr
 800d82c:	20005518 	.word	0x20005518

0800d830 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d83a:	4b21      	ldr	r3, [pc, #132]	; (800d8c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d840:	4b20      	ldr	r3, [pc, #128]	; (800d8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	3304      	adds	r3, #4
 800d846:	4618      	mov	r0, r3
 800d848:	f7fe f968 	bl	800bb1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d852:	d10a      	bne.n	800d86a <prvAddCurrentTaskToDelayedList+0x3a>
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d007      	beq.n	800d86a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d85a:	4b1a      	ldr	r3, [pc, #104]	; (800d8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	3304      	adds	r3, #4
 800d860:	4619      	mov	r1, r3
 800d862:	4819      	ldr	r0, [pc, #100]	; (800d8c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d864:	f7fe f8fd 	bl	800ba62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d868:	e026      	b.n	800d8b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d86a:	68fa      	ldr	r2, [r7, #12]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4413      	add	r3, r2
 800d870:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d872:	4b14      	ldr	r3, [pc, #80]	; (800d8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d87a:	68ba      	ldr	r2, [r7, #8]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d209      	bcs.n	800d896 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d882:	4b12      	ldr	r3, [pc, #72]	; (800d8cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	4b0f      	ldr	r3, [pc, #60]	; (800d8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3304      	adds	r3, #4
 800d88c:	4619      	mov	r1, r3
 800d88e:	4610      	mov	r0, r2
 800d890:	f7fe f90b 	bl	800baaa <vListInsert>
}
 800d894:	e010      	b.n	800d8b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d896:	4b0e      	ldr	r3, [pc, #56]	; (800d8d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	4b0a      	ldr	r3, [pc, #40]	; (800d8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	3304      	adds	r3, #4
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	4610      	mov	r0, r2
 800d8a4:	f7fe f901 	bl	800baaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d8a8:	4b0a      	ldr	r3, [pc, #40]	; (800d8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	68ba      	ldr	r2, [r7, #8]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d202      	bcs.n	800d8b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d8b2:	4a08      	ldr	r2, [pc, #32]	; (800d8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	6013      	str	r3, [r2, #0]
}
 800d8b8:	bf00      	nop
 800d8ba:	3710      	adds	r7, #16
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	200059f0 	.word	0x200059f0
 800d8c4:	20005518 	.word	0x20005518
 800d8c8:	200059d8 	.word	0x200059d8
 800d8cc:	200059a8 	.word	0x200059a8
 800d8d0:	200059a4 	.word	0x200059a4
 800d8d4:	20005a0c 	.word	0x20005a0c

0800d8d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b08a      	sub	sp, #40	; 0x28
 800d8dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d8e2:	f000 fb07 	bl	800def4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d8e6:	4b1c      	ldr	r3, [pc, #112]	; (800d958 <xTimerCreateTimerTask+0x80>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d021      	beq.n	800d932 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d8f6:	1d3a      	adds	r2, r7, #4
 800d8f8:	f107 0108 	add.w	r1, r7, #8
 800d8fc:	f107 030c 	add.w	r3, r7, #12
 800d900:	4618      	mov	r0, r3
 800d902:	f7fe f867 	bl	800b9d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d906:	6879      	ldr	r1, [r7, #4]
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	9202      	str	r2, [sp, #8]
 800d90e:	9301      	str	r3, [sp, #4]
 800d910:	2302      	movs	r3, #2
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	2300      	movs	r3, #0
 800d916:	460a      	mov	r2, r1
 800d918:	4910      	ldr	r1, [pc, #64]	; (800d95c <xTimerCreateTimerTask+0x84>)
 800d91a:	4811      	ldr	r0, [pc, #68]	; (800d960 <xTimerCreateTimerTask+0x88>)
 800d91c:	f7fe ff90 	bl	800c840 <xTaskCreateStatic>
 800d920:	4603      	mov	r3, r0
 800d922:	4a10      	ldr	r2, [pc, #64]	; (800d964 <xTimerCreateTimerTask+0x8c>)
 800d924:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d926:	4b0f      	ldr	r3, [pc, #60]	; (800d964 <xTimerCreateTimerTask+0x8c>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d001      	beq.n	800d932 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d92e:	2301      	movs	r3, #1
 800d930:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10a      	bne.n	800d94e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d93c:	f383 8811 	msr	BASEPRI, r3
 800d940:	f3bf 8f6f 	isb	sy
 800d944:	f3bf 8f4f 	dsb	sy
 800d948:	613b      	str	r3, [r7, #16]
}
 800d94a:	bf00      	nop
 800d94c:	e7fe      	b.n	800d94c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d94e:	697b      	ldr	r3, [r7, #20]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3718      	adds	r7, #24
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	20005a48 	.word	0x20005a48
 800d95c:	0801b710 	.word	0x0801b710
 800d960:	0800da9d 	.word	0x0800da9d
 800d964:	20005a4c 	.word	0x20005a4c

0800d968 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b08a      	sub	sp, #40	; 0x28
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
 800d974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d976:	2300      	movs	r3, #0
 800d978:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d10a      	bne.n	800d996 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d984:	f383 8811 	msr	BASEPRI, r3
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	623b      	str	r3, [r7, #32]
}
 800d992:	bf00      	nop
 800d994:	e7fe      	b.n	800d994 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d996:	4b1a      	ldr	r3, [pc, #104]	; (800da00 <xTimerGenericCommand+0x98>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d02a      	beq.n	800d9f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	2b05      	cmp	r3, #5
 800d9ae:	dc18      	bgt.n	800d9e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d9b0:	f7ff fdb4 	bl	800d51c <xTaskGetSchedulerState>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	d109      	bne.n	800d9ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d9ba:	4b11      	ldr	r3, [pc, #68]	; (800da00 <xTimerGenericCommand+0x98>)
 800d9bc:	6818      	ldr	r0, [r3, #0]
 800d9be:	f107 0110 	add.w	r1, r7, #16
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9c6:	f7fe fa11 	bl	800bdec <xQueueGenericSend>
 800d9ca:	6278      	str	r0, [r7, #36]	; 0x24
 800d9cc:	e012      	b.n	800d9f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d9ce:	4b0c      	ldr	r3, [pc, #48]	; (800da00 <xTimerGenericCommand+0x98>)
 800d9d0:	6818      	ldr	r0, [r3, #0]
 800d9d2:	f107 0110 	add.w	r1, r7, #16
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f7fe fa07 	bl	800bdec <xQueueGenericSend>
 800d9de:	6278      	str	r0, [r7, #36]	; 0x24
 800d9e0:	e008      	b.n	800d9f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d9e2:	4b07      	ldr	r3, [pc, #28]	; (800da00 <xTimerGenericCommand+0x98>)
 800d9e4:	6818      	ldr	r0, [r3, #0]
 800d9e6:	f107 0110 	add.w	r1, r7, #16
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	683a      	ldr	r2, [r7, #0]
 800d9ee:	f7fe fafb 	bl	800bfe8 <xQueueGenericSendFromISR>
 800d9f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3728      	adds	r7, #40	; 0x28
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	20005a48 	.word	0x20005a48

0800da04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b088      	sub	sp, #32
 800da08:	af02      	add	r7, sp, #8
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da0e:	4b22      	ldr	r3, [pc, #136]	; (800da98 <prvProcessExpiredTimer+0x94>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	3304      	adds	r3, #4
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fe f87d 	bl	800bb1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da28:	f003 0304 	and.w	r3, r3, #4
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d022      	beq.n	800da76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	699a      	ldr	r2, [r3, #24]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	18d1      	adds	r1, r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	683a      	ldr	r2, [r7, #0]
 800da3c:	6978      	ldr	r0, [r7, #20]
 800da3e:	f000 f8d1 	bl	800dbe4 <prvInsertTimerInActiveList>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d01f      	beq.n	800da88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da48:	2300      	movs	r3, #0
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	2300      	movs	r3, #0
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	2100      	movs	r1, #0
 800da52:	6978      	ldr	r0, [r7, #20]
 800da54:	f7ff ff88 	bl	800d968 <xTimerGenericCommand>
 800da58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d113      	bne.n	800da88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	60fb      	str	r3, [r7, #12]
}
 800da72:	bf00      	nop
 800da74:	e7fe      	b.n	800da74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da7c:	f023 0301 	bic.w	r3, r3, #1
 800da80:	b2da      	uxtb	r2, r3
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	6a1b      	ldr	r3, [r3, #32]
 800da8c:	6978      	ldr	r0, [r7, #20]
 800da8e:	4798      	blx	r3
}
 800da90:	bf00      	nop
 800da92:	3718      	adds	r7, #24
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	20005a40 	.word	0x20005a40

0800da9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800daa4:	f107 0308 	add.w	r3, r7, #8
 800daa8:	4618      	mov	r0, r3
 800daaa:	f000 f857 	bl	800db5c <prvGetNextExpireTime>
 800daae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	4619      	mov	r1, r3
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f000 f803 	bl	800dac0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800daba:	f000 f8d5 	bl	800dc68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dabe:	e7f1      	b.n	800daa4 <prvTimerTask+0x8>

0800dac0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800daca:	f7ff f915 	bl	800ccf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dace:	f107 0308 	add.w	r3, r7, #8
 800dad2:	4618      	mov	r0, r3
 800dad4:	f000 f866 	bl	800dba4 <prvSampleTimeNow>
 800dad8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d130      	bne.n	800db42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10a      	bne.n	800dafc <prvProcessTimerOrBlockTask+0x3c>
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	429a      	cmp	r2, r3
 800daec:	d806      	bhi.n	800dafc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800daee:	f7ff f911 	bl	800cd14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800daf2:	68f9      	ldr	r1, [r7, #12]
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f7ff ff85 	bl	800da04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dafa:	e024      	b.n	800db46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d008      	beq.n	800db14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800db02:	4b13      	ldr	r3, [pc, #76]	; (800db50 <prvProcessTimerOrBlockTask+0x90>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d101      	bne.n	800db10 <prvProcessTimerOrBlockTask+0x50>
 800db0c:	2301      	movs	r3, #1
 800db0e:	e000      	b.n	800db12 <prvProcessTimerOrBlockTask+0x52>
 800db10:	2300      	movs	r3, #0
 800db12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800db14:	4b0f      	ldr	r3, [pc, #60]	; (800db54 <prvProcessTimerOrBlockTask+0x94>)
 800db16:	6818      	ldr	r0, [r3, #0]
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	683a      	ldr	r2, [r7, #0]
 800db20:	4619      	mov	r1, r3
 800db22:	f7fe fe59 	bl	800c7d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800db26:	f7ff f8f5 	bl	800cd14 <xTaskResumeAll>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d10a      	bne.n	800db46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800db30:	4b09      	ldr	r3, [pc, #36]	; (800db58 <prvProcessTimerOrBlockTask+0x98>)
 800db32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db36:	601a      	str	r2, [r3, #0]
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	f3bf 8f6f 	isb	sy
}
 800db40:	e001      	b.n	800db46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800db42:	f7ff f8e7 	bl	800cd14 <xTaskResumeAll>
}
 800db46:	bf00      	nop
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	20005a44 	.word	0x20005a44
 800db54:	20005a48 	.word	0x20005a48
 800db58:	e000ed04 	.word	0xe000ed04

0800db5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800db5c:	b480      	push	{r7}
 800db5e:	b085      	sub	sp, #20
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800db64:	4b0e      	ldr	r3, [pc, #56]	; (800dba0 <prvGetNextExpireTime+0x44>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d101      	bne.n	800db72 <prvGetNextExpireTime+0x16>
 800db6e:	2201      	movs	r2, #1
 800db70:	e000      	b.n	800db74 <prvGetNextExpireTime+0x18>
 800db72:	2200      	movs	r2, #0
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d105      	bne.n	800db8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db80:	4b07      	ldr	r3, [pc, #28]	; (800dba0 <prvGetNextExpireTime+0x44>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	60fb      	str	r3, [r7, #12]
 800db8a:	e001      	b.n	800db90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db8c:	2300      	movs	r3, #0
 800db8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db90:	68fb      	ldr	r3, [r7, #12]
}
 800db92:	4618      	mov	r0, r3
 800db94:	3714      	adds	r7, #20
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	20005a40 	.word	0x20005a40

0800dba4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dbac:	f7ff f950 	bl	800ce50 <xTaskGetTickCount>
 800dbb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dbb2:	4b0b      	ldr	r3, [pc, #44]	; (800dbe0 <prvSampleTimeNow+0x3c>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	68fa      	ldr	r2, [r7, #12]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d205      	bcs.n	800dbc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dbbc:	f000 f936 	bl	800de2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	601a      	str	r2, [r3, #0]
 800dbc6:	e002      	b.n	800dbce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dbce:	4a04      	ldr	r2, [pc, #16]	; (800dbe0 <prvSampleTimeNow+0x3c>)
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	20005a50 	.word	0x20005a50

0800dbe4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b086      	sub	sp, #24
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
 800dbf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	68ba      	ldr	r2, [r7, #8]
 800dbfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	68fa      	ldr	r2, [r7, #12]
 800dc00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dc02:	68ba      	ldr	r2, [r7, #8]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d812      	bhi.n	800dc30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	1ad2      	subs	r2, r2, r3
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	699b      	ldr	r3, [r3, #24]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d302      	bcc.n	800dc1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	617b      	str	r3, [r7, #20]
 800dc1c:	e01b      	b.n	800dc56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dc1e:	4b10      	ldr	r3, [pc, #64]	; (800dc60 <prvInsertTimerInActiveList+0x7c>)
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	3304      	adds	r3, #4
 800dc26:	4619      	mov	r1, r3
 800dc28:	4610      	mov	r0, r2
 800dc2a:	f7fd ff3e 	bl	800baaa <vListInsert>
 800dc2e:	e012      	b.n	800dc56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d206      	bcs.n	800dc46 <prvInsertTimerInActiveList+0x62>
 800dc38:	68ba      	ldr	r2, [r7, #8]
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d302      	bcc.n	800dc46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dc40:	2301      	movs	r3, #1
 800dc42:	617b      	str	r3, [r7, #20]
 800dc44:	e007      	b.n	800dc56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc46:	4b07      	ldr	r3, [pc, #28]	; (800dc64 <prvInsertTimerInActiveList+0x80>)
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	3304      	adds	r3, #4
 800dc4e:	4619      	mov	r1, r3
 800dc50:	4610      	mov	r0, r2
 800dc52:	f7fd ff2a 	bl	800baaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dc56:	697b      	ldr	r3, [r7, #20]
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3718      	adds	r7, #24
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	20005a44 	.word	0x20005a44
 800dc64:	20005a40 	.word	0x20005a40

0800dc68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b08e      	sub	sp, #56	; 0x38
 800dc6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc6e:	e0ca      	b.n	800de06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	da18      	bge.n	800dca8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dc76:	1d3b      	adds	r3, r7, #4
 800dc78:	3304      	adds	r3, #4
 800dc7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d10a      	bne.n	800dc98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc86:	f383 8811 	msr	BASEPRI, r3
 800dc8a:	f3bf 8f6f 	isb	sy
 800dc8e:	f3bf 8f4f 	dsb	sy
 800dc92:	61fb      	str	r3, [r7, #28]
}
 800dc94:	bf00      	nop
 800dc96:	e7fe      	b.n	800dc96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc9e:	6850      	ldr	r0, [r2, #4]
 800dca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dca2:	6892      	ldr	r2, [r2, #8]
 800dca4:	4611      	mov	r1, r2
 800dca6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f2c0 80ab 	blt.w	800de06 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb6:	695b      	ldr	r3, [r3, #20]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d004      	beq.n	800dcc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbe:	3304      	adds	r3, #4
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fd ff2b 	bl	800bb1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dcc6:	463b      	mov	r3, r7
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7ff ff6b 	bl	800dba4 <prvSampleTimeNow>
 800dcce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b09      	cmp	r3, #9
 800dcd4:	f200 8096 	bhi.w	800de04 <prvProcessReceivedCommands+0x19c>
 800dcd8:	a201      	add	r2, pc, #4	; (adr r2, 800dce0 <prvProcessReceivedCommands+0x78>)
 800dcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcde:	bf00      	nop
 800dce0:	0800dd09 	.word	0x0800dd09
 800dce4:	0800dd09 	.word	0x0800dd09
 800dce8:	0800dd09 	.word	0x0800dd09
 800dcec:	0800dd7d 	.word	0x0800dd7d
 800dcf0:	0800dd91 	.word	0x0800dd91
 800dcf4:	0800dddb 	.word	0x0800dddb
 800dcf8:	0800dd09 	.word	0x0800dd09
 800dcfc:	0800dd09 	.word	0x0800dd09
 800dd00:	0800dd7d 	.word	0x0800dd7d
 800dd04:	0800dd91 	.word	0x0800dd91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd0e:	f043 0301 	orr.w	r3, r3, #1
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dd1a:	68ba      	ldr	r2, [r7, #8]
 800dd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1e:	699b      	ldr	r3, [r3, #24]
 800dd20:	18d1      	adds	r1, r2, r3
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd28:	f7ff ff5c 	bl	800dbe4 <prvInsertTimerInActiveList>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d069      	beq.n	800de06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd34:	6a1b      	ldr	r3, [r3, #32]
 800dd36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd40:	f003 0304 	and.w	r3, r3, #4
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d05e      	beq.n	800de06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd48:	68ba      	ldr	r2, [r7, #8]
 800dd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4c:	699b      	ldr	r3, [r3, #24]
 800dd4e:	441a      	add	r2, r3
 800dd50:	2300      	movs	r3, #0
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	2300      	movs	r3, #0
 800dd56:	2100      	movs	r1, #0
 800dd58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd5a:	f7ff fe05 	bl	800d968 <xTimerGenericCommand>
 800dd5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dd60:	6a3b      	ldr	r3, [r7, #32]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d14f      	bne.n	800de06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6a:	f383 8811 	msr	BASEPRI, r3
 800dd6e:	f3bf 8f6f 	isb	sy
 800dd72:	f3bf 8f4f 	dsb	sy
 800dd76:	61bb      	str	r3, [r7, #24]
}
 800dd78:	bf00      	nop
 800dd7a:	e7fe      	b.n	800dd7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd82:	f023 0301 	bic.w	r3, r3, #1
 800dd86:	b2da      	uxtb	r2, r3
 800dd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dd8e:	e03a      	b.n	800de06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd96:	f043 0301 	orr.w	r3, r3, #1
 800dd9a:	b2da      	uxtb	r2, r3
 800dd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dda2:	68ba      	ldr	r2, [r7, #8]
 800dda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d10a      	bne.n	800ddc6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ddb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	617b      	str	r3, [r7, #20]
}
 800ddc2:	bf00      	nop
 800ddc4:	e7fe      	b.n	800ddc4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ddc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc8:	699a      	ldr	r2, [r3, #24]
 800ddca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddcc:	18d1      	adds	r1, r2, r3
 800ddce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddd4:	f7ff ff06 	bl	800dbe4 <prvInsertTimerInActiveList>
					break;
 800ddd8:	e015      	b.n	800de06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ddda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dde0:	f003 0302 	and.w	r3, r3, #2
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d103      	bne.n	800ddf0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dde8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddea:	f000 fbe1 	bl	800e5b0 <vPortFree>
 800ddee:	e00a      	b.n	800de06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddf6:	f023 0301 	bic.w	r3, r3, #1
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800de02:	e000      	b.n	800de06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800de04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de06:	4b08      	ldr	r3, [pc, #32]	; (800de28 <prvProcessReceivedCommands+0x1c0>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	1d39      	adds	r1, r7, #4
 800de0c:	2200      	movs	r2, #0
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe f986 	bl	800c120 <xQueueReceive>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	f47f af2a 	bne.w	800dc70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800de1c:	bf00      	nop
 800de1e:	bf00      	nop
 800de20:	3730      	adds	r7, #48	; 0x30
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	20005a48 	.word	0x20005a48

0800de2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b088      	sub	sp, #32
 800de30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de32:	e048      	b.n	800dec6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de34:	4b2d      	ldr	r3, [pc, #180]	; (800deec <prvSwitchTimerLists+0xc0>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de3e:	4b2b      	ldr	r3, [pc, #172]	; (800deec <prvSwitchTimerLists+0xc0>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	3304      	adds	r3, #4
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fd fe65 	bl	800bb1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6a1b      	ldr	r3, [r3, #32]
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de60:	f003 0304 	and.w	r3, r3, #4
 800de64:	2b00      	cmp	r3, #0
 800de66:	d02e      	beq.n	800dec6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	699b      	ldr	r3, [r3, #24]
 800de6c:	693a      	ldr	r2, [r7, #16]
 800de6e:	4413      	add	r3, r2
 800de70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800de72:	68ba      	ldr	r2, [r7, #8]
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	429a      	cmp	r2, r3
 800de78:	d90e      	bls.n	800de98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	68ba      	ldr	r2, [r7, #8]
 800de7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	68fa      	ldr	r2, [r7, #12]
 800de84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de86:	4b19      	ldr	r3, [pc, #100]	; (800deec <prvSwitchTimerLists+0xc0>)
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3304      	adds	r3, #4
 800de8e:	4619      	mov	r1, r3
 800de90:	4610      	mov	r0, r2
 800de92:	f7fd fe0a 	bl	800baaa <vListInsert>
 800de96:	e016      	b.n	800dec6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de98:	2300      	movs	r3, #0
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	2300      	movs	r3, #0
 800de9e:	693a      	ldr	r2, [r7, #16]
 800dea0:	2100      	movs	r1, #0
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f7ff fd60 	bl	800d968 <xTimerGenericCommand>
 800dea8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d10a      	bne.n	800dec6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800deb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	603b      	str	r3, [r7, #0]
}
 800dec2:	bf00      	nop
 800dec4:	e7fe      	b.n	800dec4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dec6:	4b09      	ldr	r3, [pc, #36]	; (800deec <prvSwitchTimerLists+0xc0>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d1b1      	bne.n	800de34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ded0:	4b06      	ldr	r3, [pc, #24]	; (800deec <prvSwitchTimerLists+0xc0>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ded6:	4b06      	ldr	r3, [pc, #24]	; (800def0 <prvSwitchTimerLists+0xc4>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4a04      	ldr	r2, [pc, #16]	; (800deec <prvSwitchTimerLists+0xc0>)
 800dedc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dede:	4a04      	ldr	r2, [pc, #16]	; (800def0 <prvSwitchTimerLists+0xc4>)
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	6013      	str	r3, [r2, #0]
}
 800dee4:	bf00      	nop
 800dee6:	3718      	adds	r7, #24
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	20005a40 	.word	0x20005a40
 800def0:	20005a44 	.word	0x20005a44

0800def4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800defa:	f000 f96b 	bl	800e1d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800defe:	4b15      	ldr	r3, [pc, #84]	; (800df54 <prvCheckForValidListAndQueue+0x60>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d120      	bne.n	800df48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800df06:	4814      	ldr	r0, [pc, #80]	; (800df58 <prvCheckForValidListAndQueue+0x64>)
 800df08:	f7fd fd7e 	bl	800ba08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800df0c:	4813      	ldr	r0, [pc, #76]	; (800df5c <prvCheckForValidListAndQueue+0x68>)
 800df0e:	f7fd fd7b 	bl	800ba08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800df12:	4b13      	ldr	r3, [pc, #76]	; (800df60 <prvCheckForValidListAndQueue+0x6c>)
 800df14:	4a10      	ldr	r2, [pc, #64]	; (800df58 <prvCheckForValidListAndQueue+0x64>)
 800df16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800df18:	4b12      	ldr	r3, [pc, #72]	; (800df64 <prvCheckForValidListAndQueue+0x70>)
 800df1a:	4a10      	ldr	r2, [pc, #64]	; (800df5c <prvCheckForValidListAndQueue+0x68>)
 800df1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800df1e:	2300      	movs	r3, #0
 800df20:	9300      	str	r3, [sp, #0]
 800df22:	4b11      	ldr	r3, [pc, #68]	; (800df68 <prvCheckForValidListAndQueue+0x74>)
 800df24:	4a11      	ldr	r2, [pc, #68]	; (800df6c <prvCheckForValidListAndQueue+0x78>)
 800df26:	2110      	movs	r1, #16
 800df28:	200a      	movs	r0, #10
 800df2a:	f7fd fe89 	bl	800bc40 <xQueueGenericCreateStatic>
 800df2e:	4603      	mov	r3, r0
 800df30:	4a08      	ldr	r2, [pc, #32]	; (800df54 <prvCheckForValidListAndQueue+0x60>)
 800df32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800df34:	4b07      	ldr	r3, [pc, #28]	; (800df54 <prvCheckForValidListAndQueue+0x60>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d005      	beq.n	800df48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800df3c:	4b05      	ldr	r3, [pc, #20]	; (800df54 <prvCheckForValidListAndQueue+0x60>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	490b      	ldr	r1, [pc, #44]	; (800df70 <prvCheckForValidListAndQueue+0x7c>)
 800df42:	4618      	mov	r0, r3
 800df44:	f7fe fc1e 	bl	800c784 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800df48:	f000 f974 	bl	800e234 <vPortExitCritical>
}
 800df4c:	bf00      	nop
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	20005a48 	.word	0x20005a48
 800df58:	20005a18 	.word	0x20005a18
 800df5c:	20005a2c 	.word	0x20005a2c
 800df60:	20005a40 	.word	0x20005a40
 800df64:	20005a44 	.word	0x20005a44
 800df68:	20005af4 	.word	0x20005af4
 800df6c:	20005a54 	.word	0x20005a54
 800df70:	0801b718 	.word	0x0801b718

0800df74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df74:	b480      	push	{r7}
 800df76:	b085      	sub	sp, #20
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	3b04      	subs	r3, #4
 800df84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	3b04      	subs	r3, #4
 800df92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	f023 0201 	bic.w	r2, r3, #1
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	3b04      	subs	r3, #4
 800dfa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dfa4:	4a0c      	ldr	r2, [pc, #48]	; (800dfd8 <pxPortInitialiseStack+0x64>)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	3b14      	subs	r3, #20
 800dfae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	3b04      	subs	r3, #4
 800dfba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f06f 0202 	mvn.w	r2, #2
 800dfc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3b20      	subs	r3, #32
 800dfc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dfca:	68fb      	ldr	r3, [r7, #12]
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3714      	adds	r7, #20
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr
 800dfd8:	0800dfdd 	.word	0x0800dfdd

0800dfdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dfe6:	4b12      	ldr	r3, [pc, #72]	; (800e030 <prvTaskExitError+0x54>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfee:	d00a      	beq.n	800e006 <prvTaskExitError+0x2a>
	__asm volatile
 800dff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	60fb      	str	r3, [r7, #12]
}
 800e002:	bf00      	nop
 800e004:	e7fe      	b.n	800e004 <prvTaskExitError+0x28>
	__asm volatile
 800e006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00a:	f383 8811 	msr	BASEPRI, r3
 800e00e:	f3bf 8f6f 	isb	sy
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	60bb      	str	r3, [r7, #8]
}
 800e018:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e01a:	bf00      	nop
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d0fc      	beq.n	800e01c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e022:	bf00      	nop
 800e024:	bf00      	nop
 800e026:	3714      	adds	r7, #20
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr
 800e030:	20000034 	.word	0x20000034
	...

0800e040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e040:	4b07      	ldr	r3, [pc, #28]	; (800e060 <pxCurrentTCBConst2>)
 800e042:	6819      	ldr	r1, [r3, #0]
 800e044:	6808      	ldr	r0, [r1, #0]
 800e046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04a:	f380 8809 	msr	PSP, r0
 800e04e:	f3bf 8f6f 	isb	sy
 800e052:	f04f 0000 	mov.w	r0, #0
 800e056:	f380 8811 	msr	BASEPRI, r0
 800e05a:	4770      	bx	lr
 800e05c:	f3af 8000 	nop.w

0800e060 <pxCurrentTCBConst2>:
 800e060:	20005518 	.word	0x20005518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e064:	bf00      	nop
 800e066:	bf00      	nop

0800e068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e068:	4808      	ldr	r0, [pc, #32]	; (800e08c <prvPortStartFirstTask+0x24>)
 800e06a:	6800      	ldr	r0, [r0, #0]
 800e06c:	6800      	ldr	r0, [r0, #0]
 800e06e:	f380 8808 	msr	MSP, r0
 800e072:	f04f 0000 	mov.w	r0, #0
 800e076:	f380 8814 	msr	CONTROL, r0
 800e07a:	b662      	cpsie	i
 800e07c:	b661      	cpsie	f
 800e07e:	f3bf 8f4f 	dsb	sy
 800e082:	f3bf 8f6f 	isb	sy
 800e086:	df00      	svc	0
 800e088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e08a:	bf00      	nop
 800e08c:	e000ed08 	.word	0xe000ed08

0800e090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e096:	4b46      	ldr	r3, [pc, #280]	; (800e1b0 <xPortStartScheduler+0x120>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4a46      	ldr	r2, [pc, #280]	; (800e1b4 <xPortStartScheduler+0x124>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d10a      	bne.n	800e0b6 <xPortStartScheduler+0x26>
	__asm volatile
 800e0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a4:	f383 8811 	msr	BASEPRI, r3
 800e0a8:	f3bf 8f6f 	isb	sy
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	613b      	str	r3, [r7, #16]
}
 800e0b2:	bf00      	nop
 800e0b4:	e7fe      	b.n	800e0b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e0b6:	4b3e      	ldr	r3, [pc, #248]	; (800e1b0 <xPortStartScheduler+0x120>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4a3f      	ldr	r2, [pc, #252]	; (800e1b8 <xPortStartScheduler+0x128>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d10a      	bne.n	800e0d6 <xPortStartScheduler+0x46>
	__asm volatile
 800e0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	60fb      	str	r3, [r7, #12]
}
 800e0d2:	bf00      	nop
 800e0d4:	e7fe      	b.n	800e0d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e0d6:	4b39      	ldr	r3, [pc, #228]	; (800e1bc <xPortStartScheduler+0x12c>)
 800e0d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	22ff      	movs	r2, #255	; 0xff
 800e0e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e0f0:	78fb      	ldrb	r3, [r7, #3]
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e0f8:	b2da      	uxtb	r2, r3
 800e0fa:	4b31      	ldr	r3, [pc, #196]	; (800e1c0 <xPortStartScheduler+0x130>)
 800e0fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e0fe:	4b31      	ldr	r3, [pc, #196]	; (800e1c4 <xPortStartScheduler+0x134>)
 800e100:	2207      	movs	r2, #7
 800e102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e104:	e009      	b.n	800e11a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e106:	4b2f      	ldr	r3, [pc, #188]	; (800e1c4 <xPortStartScheduler+0x134>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	3b01      	subs	r3, #1
 800e10c:	4a2d      	ldr	r2, [pc, #180]	; (800e1c4 <xPortStartScheduler+0x134>)
 800e10e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e110:	78fb      	ldrb	r3, [r7, #3]
 800e112:	b2db      	uxtb	r3, r3
 800e114:	005b      	lsls	r3, r3, #1
 800e116:	b2db      	uxtb	r3, r3
 800e118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e11a:	78fb      	ldrb	r3, [r7, #3]
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e122:	2b80      	cmp	r3, #128	; 0x80
 800e124:	d0ef      	beq.n	800e106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e126:	4b27      	ldr	r3, [pc, #156]	; (800e1c4 <xPortStartScheduler+0x134>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f1c3 0307 	rsb	r3, r3, #7
 800e12e:	2b04      	cmp	r3, #4
 800e130:	d00a      	beq.n	800e148 <xPortStartScheduler+0xb8>
	__asm volatile
 800e132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e136:	f383 8811 	msr	BASEPRI, r3
 800e13a:	f3bf 8f6f 	isb	sy
 800e13e:	f3bf 8f4f 	dsb	sy
 800e142:	60bb      	str	r3, [r7, #8]
}
 800e144:	bf00      	nop
 800e146:	e7fe      	b.n	800e146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e148:	4b1e      	ldr	r3, [pc, #120]	; (800e1c4 <xPortStartScheduler+0x134>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	021b      	lsls	r3, r3, #8
 800e14e:	4a1d      	ldr	r2, [pc, #116]	; (800e1c4 <xPortStartScheduler+0x134>)
 800e150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e152:	4b1c      	ldr	r3, [pc, #112]	; (800e1c4 <xPortStartScheduler+0x134>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e15a:	4a1a      	ldr	r2, [pc, #104]	; (800e1c4 <xPortStartScheduler+0x134>)
 800e15c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	b2da      	uxtb	r2, r3
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e166:	4b18      	ldr	r3, [pc, #96]	; (800e1c8 <xPortStartScheduler+0x138>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a17      	ldr	r2, [pc, #92]	; (800e1c8 <xPortStartScheduler+0x138>)
 800e16c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e172:	4b15      	ldr	r3, [pc, #84]	; (800e1c8 <xPortStartScheduler+0x138>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a14      	ldr	r2, [pc, #80]	; (800e1c8 <xPortStartScheduler+0x138>)
 800e178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e17c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e17e:	f000 f8dd 	bl	800e33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e182:	4b12      	ldr	r3, [pc, #72]	; (800e1cc <xPortStartScheduler+0x13c>)
 800e184:	2200      	movs	r2, #0
 800e186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e188:	f000 f8fc 	bl	800e384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e18c:	4b10      	ldr	r3, [pc, #64]	; (800e1d0 <xPortStartScheduler+0x140>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a0f      	ldr	r2, [pc, #60]	; (800e1d0 <xPortStartScheduler+0x140>)
 800e192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e198:	f7ff ff66 	bl	800e068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e19c:	f7fe ff22 	bl	800cfe4 <vTaskSwitchContext>
	prvTaskExitError();
 800e1a0:	f7ff ff1c 	bl	800dfdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3718      	adds	r7, #24
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	e000ed00 	.word	0xe000ed00
 800e1b4:	410fc271 	.word	0x410fc271
 800e1b8:	410fc270 	.word	0x410fc270
 800e1bc:	e000e400 	.word	0xe000e400
 800e1c0:	20005b44 	.word	0x20005b44
 800e1c4:	20005b48 	.word	0x20005b48
 800e1c8:	e000ed20 	.word	0xe000ed20
 800e1cc:	20000034 	.word	0x20000034
 800e1d0:	e000ef34 	.word	0xe000ef34

0800e1d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
	__asm volatile
 800e1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1de:	f383 8811 	msr	BASEPRI, r3
 800e1e2:	f3bf 8f6f 	isb	sy
 800e1e6:	f3bf 8f4f 	dsb	sy
 800e1ea:	607b      	str	r3, [r7, #4]
}
 800e1ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e1ee:	4b0f      	ldr	r3, [pc, #60]	; (800e22c <vPortEnterCritical+0x58>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	4a0d      	ldr	r2, [pc, #52]	; (800e22c <vPortEnterCritical+0x58>)
 800e1f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e1f8:	4b0c      	ldr	r3, [pc, #48]	; (800e22c <vPortEnterCritical+0x58>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d10f      	bne.n	800e220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e200:	4b0b      	ldr	r3, [pc, #44]	; (800e230 <vPortEnterCritical+0x5c>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	b2db      	uxtb	r3, r3
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00a      	beq.n	800e220 <vPortEnterCritical+0x4c>
	__asm volatile
 800e20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20e:	f383 8811 	msr	BASEPRI, r3
 800e212:	f3bf 8f6f 	isb	sy
 800e216:	f3bf 8f4f 	dsb	sy
 800e21a:	603b      	str	r3, [r7, #0]
}
 800e21c:	bf00      	nop
 800e21e:	e7fe      	b.n	800e21e <vPortEnterCritical+0x4a>
	}
}
 800e220:	bf00      	nop
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr
 800e22c:	20000034 	.word	0x20000034
 800e230:	e000ed04 	.word	0xe000ed04

0800e234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e23a:	4b12      	ldr	r3, [pc, #72]	; (800e284 <vPortExitCritical+0x50>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d10a      	bne.n	800e258 <vPortExitCritical+0x24>
	__asm volatile
 800e242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e246:	f383 8811 	msr	BASEPRI, r3
 800e24a:	f3bf 8f6f 	isb	sy
 800e24e:	f3bf 8f4f 	dsb	sy
 800e252:	607b      	str	r3, [r7, #4]
}
 800e254:	bf00      	nop
 800e256:	e7fe      	b.n	800e256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e258:	4b0a      	ldr	r3, [pc, #40]	; (800e284 <vPortExitCritical+0x50>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	3b01      	subs	r3, #1
 800e25e:	4a09      	ldr	r2, [pc, #36]	; (800e284 <vPortExitCritical+0x50>)
 800e260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e262:	4b08      	ldr	r3, [pc, #32]	; (800e284 <vPortExitCritical+0x50>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d105      	bne.n	800e276 <vPortExitCritical+0x42>
 800e26a:	2300      	movs	r3, #0
 800e26c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	f383 8811 	msr	BASEPRI, r3
}
 800e274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e276:	bf00      	nop
 800e278:	370c      	adds	r7, #12
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	20000034 	.word	0x20000034
	...

0800e290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e290:	f3ef 8009 	mrs	r0, PSP
 800e294:	f3bf 8f6f 	isb	sy
 800e298:	4b15      	ldr	r3, [pc, #84]	; (800e2f0 <pxCurrentTCBConst>)
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	f01e 0f10 	tst.w	lr, #16
 800e2a0:	bf08      	it	eq
 800e2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2aa:	6010      	str	r0, [r2, #0]
 800e2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e2b4:	f380 8811 	msr	BASEPRI, r0
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	f3bf 8f6f 	isb	sy
 800e2c0:	f7fe fe90 	bl	800cfe4 <vTaskSwitchContext>
 800e2c4:	f04f 0000 	mov.w	r0, #0
 800e2c8:	f380 8811 	msr	BASEPRI, r0
 800e2cc:	bc09      	pop	{r0, r3}
 800e2ce:	6819      	ldr	r1, [r3, #0]
 800e2d0:	6808      	ldr	r0, [r1, #0]
 800e2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d6:	f01e 0f10 	tst.w	lr, #16
 800e2da:	bf08      	it	eq
 800e2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e2e0:	f380 8809 	msr	PSP, r0
 800e2e4:	f3bf 8f6f 	isb	sy
 800e2e8:	4770      	bx	lr
 800e2ea:	bf00      	nop
 800e2ec:	f3af 8000 	nop.w

0800e2f0 <pxCurrentTCBConst>:
 800e2f0:	20005518 	.word	0x20005518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e2f4:	bf00      	nop
 800e2f6:	bf00      	nop

0800e2f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e302:	f383 8811 	msr	BASEPRI, r3
 800e306:	f3bf 8f6f 	isb	sy
 800e30a:	f3bf 8f4f 	dsb	sy
 800e30e:	607b      	str	r3, [r7, #4]
}
 800e310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e312:	f7fe fdad 	bl	800ce70 <xTaskIncrementTick>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d003      	beq.n	800e324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e31c:	4b06      	ldr	r3, [pc, #24]	; (800e338 <xPortSysTickHandler+0x40>)
 800e31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	2300      	movs	r3, #0
 800e326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	f383 8811 	msr	BASEPRI, r3
}
 800e32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e330:	bf00      	nop
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	e000ed04 	.word	0xe000ed04

0800e33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e33c:	b480      	push	{r7}
 800e33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e340:	4b0b      	ldr	r3, [pc, #44]	; (800e370 <vPortSetupTimerInterrupt+0x34>)
 800e342:	2200      	movs	r2, #0
 800e344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e346:	4b0b      	ldr	r3, [pc, #44]	; (800e374 <vPortSetupTimerInterrupt+0x38>)
 800e348:	2200      	movs	r2, #0
 800e34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e34c:	4b0a      	ldr	r3, [pc, #40]	; (800e378 <vPortSetupTimerInterrupt+0x3c>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a0a      	ldr	r2, [pc, #40]	; (800e37c <vPortSetupTimerInterrupt+0x40>)
 800e352:	fba2 2303 	umull	r2, r3, r2, r3
 800e356:	099b      	lsrs	r3, r3, #6
 800e358:	4a09      	ldr	r2, [pc, #36]	; (800e380 <vPortSetupTimerInterrupt+0x44>)
 800e35a:	3b01      	subs	r3, #1
 800e35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e35e:	4b04      	ldr	r3, [pc, #16]	; (800e370 <vPortSetupTimerInterrupt+0x34>)
 800e360:	2207      	movs	r2, #7
 800e362:	601a      	str	r2, [r3, #0]
}
 800e364:	bf00      	nop
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop
 800e370:	e000e010 	.word	0xe000e010
 800e374:	e000e018 	.word	0xe000e018
 800e378:	20000014 	.word	0x20000014
 800e37c:	10624dd3 	.word	0x10624dd3
 800e380:	e000e014 	.word	0xe000e014

0800e384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e394 <vPortEnableVFP+0x10>
 800e388:	6801      	ldr	r1, [r0, #0]
 800e38a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e38e:	6001      	str	r1, [r0, #0]
 800e390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e392:	bf00      	nop
 800e394:	e000ed88 	.word	0xe000ed88

0800e398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e398:	b480      	push	{r7}
 800e39a:	b085      	sub	sp, #20
 800e39c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e39e:	f3ef 8305 	mrs	r3, IPSR
 800e3a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2b0f      	cmp	r3, #15
 800e3a8:	d914      	bls.n	800e3d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e3aa:	4a17      	ldr	r2, [pc, #92]	; (800e408 <vPortValidateInterruptPriority+0x70>)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	4413      	add	r3, r2
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e3b4:	4b15      	ldr	r3, [pc, #84]	; (800e40c <vPortValidateInterruptPriority+0x74>)
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	7afa      	ldrb	r2, [r7, #11]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d20a      	bcs.n	800e3d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c2:	f383 8811 	msr	BASEPRI, r3
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	607b      	str	r3, [r7, #4]
}
 800e3d0:	bf00      	nop
 800e3d2:	e7fe      	b.n	800e3d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e3d4:	4b0e      	ldr	r3, [pc, #56]	; (800e410 <vPortValidateInterruptPriority+0x78>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e3dc:	4b0d      	ldr	r3, [pc, #52]	; (800e414 <vPortValidateInterruptPriority+0x7c>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d90a      	bls.n	800e3fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e8:	f383 8811 	msr	BASEPRI, r3
 800e3ec:	f3bf 8f6f 	isb	sy
 800e3f0:	f3bf 8f4f 	dsb	sy
 800e3f4:	603b      	str	r3, [r7, #0]
}
 800e3f6:	bf00      	nop
 800e3f8:	e7fe      	b.n	800e3f8 <vPortValidateInterruptPriority+0x60>
	}
 800e3fa:	bf00      	nop
 800e3fc:	3714      	adds	r7, #20
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop
 800e408:	e000e3f0 	.word	0xe000e3f0
 800e40c:	20005b44 	.word	0x20005b44
 800e410:	e000ed0c 	.word	0xe000ed0c
 800e414:	20005b48 	.word	0x20005b48

0800e418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b08a      	sub	sp, #40	; 0x28
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e420:	2300      	movs	r3, #0
 800e422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e424:	f7fe fc68 	bl	800ccf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e428:	4b5b      	ldr	r3, [pc, #364]	; (800e598 <pvPortMalloc+0x180>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d101      	bne.n	800e434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e430:	f000 f920 	bl	800e674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e434:	4b59      	ldr	r3, [pc, #356]	; (800e59c <pvPortMalloc+0x184>)
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	4013      	ands	r3, r2
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f040 8093 	bne.w	800e568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d01d      	beq.n	800e484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e448:	2208      	movs	r2, #8
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4413      	add	r3, r2
 800e44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f003 0307 	and.w	r3, r3, #7
 800e456:	2b00      	cmp	r3, #0
 800e458:	d014      	beq.n	800e484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f023 0307 	bic.w	r3, r3, #7
 800e460:	3308      	adds	r3, #8
 800e462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f003 0307 	and.w	r3, r3, #7
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d00a      	beq.n	800e484 <pvPortMalloc+0x6c>
	__asm volatile
 800e46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e472:	f383 8811 	msr	BASEPRI, r3
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	617b      	str	r3, [r7, #20]
}
 800e480:	bf00      	nop
 800e482:	e7fe      	b.n	800e482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d06e      	beq.n	800e568 <pvPortMalloc+0x150>
 800e48a:	4b45      	ldr	r3, [pc, #276]	; (800e5a0 <pvPortMalloc+0x188>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	429a      	cmp	r2, r3
 800e492:	d869      	bhi.n	800e568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e494:	4b43      	ldr	r3, [pc, #268]	; (800e5a4 <pvPortMalloc+0x18c>)
 800e496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e498:	4b42      	ldr	r3, [pc, #264]	; (800e5a4 <pvPortMalloc+0x18c>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e49e:	e004      	b.n	800e4aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d903      	bls.n	800e4bc <pvPortMalloc+0xa4>
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1f1      	bne.n	800e4a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e4bc:	4b36      	ldr	r3, [pc, #216]	; (800e598 <pvPortMalloc+0x180>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d050      	beq.n	800e568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e4c6:	6a3b      	ldr	r3, [r7, #32]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	2208      	movs	r2, #8
 800e4cc:	4413      	add	r3, r2
 800e4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	6a3b      	ldr	r3, [r7, #32]
 800e4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4da:	685a      	ldr	r2, [r3, #4]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	1ad2      	subs	r2, r2, r3
 800e4e0:	2308      	movs	r3, #8
 800e4e2:	005b      	lsls	r3, r3, #1
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d91f      	bls.n	800e528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	f003 0307 	and.w	r3, r3, #7
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00a      	beq.n	800e510 <pvPortMalloc+0xf8>
	__asm volatile
 800e4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4fe:	f383 8811 	msr	BASEPRI, r3
 800e502:	f3bf 8f6f 	isb	sy
 800e506:	f3bf 8f4f 	dsb	sy
 800e50a:	613b      	str	r3, [r7, #16]
}
 800e50c:	bf00      	nop
 800e50e:	e7fe      	b.n	800e50e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e512:	685a      	ldr	r2, [r3, #4]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	1ad2      	subs	r2, r2, r3
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e522:	69b8      	ldr	r0, [r7, #24]
 800e524:	f000 f908 	bl	800e738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e528:	4b1d      	ldr	r3, [pc, #116]	; (800e5a0 <pvPortMalloc+0x188>)
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	1ad3      	subs	r3, r2, r3
 800e532:	4a1b      	ldr	r2, [pc, #108]	; (800e5a0 <pvPortMalloc+0x188>)
 800e534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e536:	4b1a      	ldr	r3, [pc, #104]	; (800e5a0 <pvPortMalloc+0x188>)
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	4b1b      	ldr	r3, [pc, #108]	; (800e5a8 <pvPortMalloc+0x190>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d203      	bcs.n	800e54a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e542:	4b17      	ldr	r3, [pc, #92]	; (800e5a0 <pvPortMalloc+0x188>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a18      	ldr	r2, [pc, #96]	; (800e5a8 <pvPortMalloc+0x190>)
 800e548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54c:	685a      	ldr	r2, [r3, #4]
 800e54e:	4b13      	ldr	r3, [pc, #76]	; (800e59c <pvPortMalloc+0x184>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	431a      	orrs	r2, r3
 800e554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	2200      	movs	r2, #0
 800e55c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e55e:	4b13      	ldr	r3, [pc, #76]	; (800e5ac <pvPortMalloc+0x194>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	3301      	adds	r3, #1
 800e564:	4a11      	ldr	r2, [pc, #68]	; (800e5ac <pvPortMalloc+0x194>)
 800e566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e568:	f7fe fbd4 	bl	800cd14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	f003 0307 	and.w	r3, r3, #7
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00a      	beq.n	800e58c <pvPortMalloc+0x174>
	__asm volatile
 800e576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	60fb      	str	r3, [r7, #12]
}
 800e588:	bf00      	nop
 800e58a:	e7fe      	b.n	800e58a <pvPortMalloc+0x172>
	return pvReturn;
 800e58c:	69fb      	ldr	r3, [r7, #28]
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3728      	adds	r7, #40	; 0x28
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	20009b54 	.word	0x20009b54
 800e59c:	20009b68 	.word	0x20009b68
 800e5a0:	20009b58 	.word	0x20009b58
 800e5a4:	20009b4c 	.word	0x20009b4c
 800e5a8:	20009b5c 	.word	0x20009b5c
 800e5ac:	20009b60 	.word	0x20009b60

0800e5b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d04d      	beq.n	800e65e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e5c2:	2308      	movs	r3, #8
 800e5c4:	425b      	negs	r3, r3
 800e5c6:	697a      	ldr	r2, [r7, #20]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	685a      	ldr	r2, [r3, #4]
 800e5d4:	4b24      	ldr	r3, [pc, #144]	; (800e668 <vPortFree+0xb8>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4013      	ands	r3, r2
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d10a      	bne.n	800e5f4 <vPortFree+0x44>
	__asm volatile
 800e5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	60fb      	str	r3, [r7, #12]
}
 800e5f0:	bf00      	nop
 800e5f2:	e7fe      	b.n	800e5f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00a      	beq.n	800e612 <vPortFree+0x62>
	__asm volatile
 800e5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e600:	f383 8811 	msr	BASEPRI, r3
 800e604:	f3bf 8f6f 	isb	sy
 800e608:	f3bf 8f4f 	dsb	sy
 800e60c:	60bb      	str	r3, [r7, #8]
}
 800e60e:	bf00      	nop
 800e610:	e7fe      	b.n	800e610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	685a      	ldr	r2, [r3, #4]
 800e616:	4b14      	ldr	r3, [pc, #80]	; (800e668 <vPortFree+0xb8>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4013      	ands	r3, r2
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d01e      	beq.n	800e65e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d11a      	bne.n	800e65e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	685a      	ldr	r2, [r3, #4]
 800e62c:	4b0e      	ldr	r3, [pc, #56]	; (800e668 <vPortFree+0xb8>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	43db      	mvns	r3, r3
 800e632:	401a      	ands	r2, r3
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e638:	f7fe fb5e 	bl	800ccf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	685a      	ldr	r2, [r3, #4]
 800e640:	4b0a      	ldr	r3, [pc, #40]	; (800e66c <vPortFree+0xbc>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4413      	add	r3, r2
 800e646:	4a09      	ldr	r2, [pc, #36]	; (800e66c <vPortFree+0xbc>)
 800e648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e64a:	6938      	ldr	r0, [r7, #16]
 800e64c:	f000 f874 	bl	800e738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e650:	4b07      	ldr	r3, [pc, #28]	; (800e670 <vPortFree+0xc0>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	3301      	adds	r3, #1
 800e656:	4a06      	ldr	r2, [pc, #24]	; (800e670 <vPortFree+0xc0>)
 800e658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e65a:	f7fe fb5b 	bl	800cd14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e65e:	bf00      	nop
 800e660:	3718      	adds	r7, #24
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	20009b68 	.word	0x20009b68
 800e66c:	20009b58 	.word	0x20009b58
 800e670:	20009b64 	.word	0x20009b64

0800e674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e674:	b480      	push	{r7}
 800e676:	b085      	sub	sp, #20
 800e678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e67a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e67e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e680:	4b27      	ldr	r3, [pc, #156]	; (800e720 <prvHeapInit+0xac>)
 800e682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f003 0307 	and.w	r3, r3, #7
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d00c      	beq.n	800e6a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	3307      	adds	r3, #7
 800e692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f023 0307 	bic.w	r3, r3, #7
 800e69a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e69c:	68ba      	ldr	r2, [r7, #8]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	4a1f      	ldr	r2, [pc, #124]	; (800e720 <prvHeapInit+0xac>)
 800e6a4:	4413      	add	r3, r2
 800e6a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e6ac:	4a1d      	ldr	r2, [pc, #116]	; (800e724 <prvHeapInit+0xb0>)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e6b2:	4b1c      	ldr	r3, [pc, #112]	; (800e724 <prvHeapInit+0xb0>)
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	4413      	add	r3, r2
 800e6be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e6c0:	2208      	movs	r2, #8
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	1a9b      	subs	r3, r3, r2
 800e6c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f023 0307 	bic.w	r3, r3, #7
 800e6ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	4a15      	ldr	r2, [pc, #84]	; (800e728 <prvHeapInit+0xb4>)
 800e6d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e6d6:	4b14      	ldr	r3, [pc, #80]	; (800e728 <prvHeapInit+0xb4>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e6de:	4b12      	ldr	r3, [pc, #72]	; (800e728 <prvHeapInit+0xb4>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	1ad2      	subs	r2, r2, r3
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6f4:	4b0c      	ldr	r3, [pc, #48]	; (800e728 <prvHeapInit+0xb4>)
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	4a0a      	ldr	r2, [pc, #40]	; (800e72c <prvHeapInit+0xb8>)
 800e702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	4a09      	ldr	r2, [pc, #36]	; (800e730 <prvHeapInit+0xbc>)
 800e70a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e70c:	4b09      	ldr	r3, [pc, #36]	; (800e734 <prvHeapInit+0xc0>)
 800e70e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e712:	601a      	str	r2, [r3, #0]
}
 800e714:	bf00      	nop
 800e716:	3714      	adds	r7, #20
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr
 800e720:	20005b4c 	.word	0x20005b4c
 800e724:	20009b4c 	.word	0x20009b4c
 800e728:	20009b54 	.word	0x20009b54
 800e72c:	20009b5c 	.word	0x20009b5c
 800e730:	20009b58 	.word	0x20009b58
 800e734:	20009b68 	.word	0x20009b68

0800e738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e740:	4b28      	ldr	r3, [pc, #160]	; (800e7e4 <prvInsertBlockIntoFreeList+0xac>)
 800e742:	60fb      	str	r3, [r7, #12]
 800e744:	e002      	b.n	800e74c <prvInsertBlockIntoFreeList+0x14>
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	60fb      	str	r3, [r7, #12]
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	429a      	cmp	r2, r3
 800e754:	d8f7      	bhi.n	800e746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	68ba      	ldr	r2, [r7, #8]
 800e760:	4413      	add	r3, r2
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	429a      	cmp	r2, r3
 800e766:	d108      	bne.n	800e77a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	685a      	ldr	r2, [r3, #4]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	441a      	add	r2, r3
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	68ba      	ldr	r2, [r7, #8]
 800e784:	441a      	add	r2, r3
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d118      	bne.n	800e7c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	4b15      	ldr	r3, [pc, #84]	; (800e7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	429a      	cmp	r2, r3
 800e798:	d00d      	beq.n	800e7b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	685a      	ldr	r2, [r3, #4]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	441a      	add	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	601a      	str	r2, [r3, #0]
 800e7b4:	e008      	b.n	800e7c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7b6:	4b0c      	ldr	r3, [pc, #48]	; (800e7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	601a      	str	r2, [r3, #0]
 800e7be:	e003      	b.n	800e7c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d002      	beq.n	800e7d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7d6:	bf00      	nop
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	20009b4c 	.word	0x20009b4c
 800e7e8:	20009b54 	.word	0x20009b54

0800e7ec <rcl_node_get_default_options>:
 800e7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7ee:	b087      	sub	sp, #28
 800e7f0:	4607      	mov	r7, r0
 800e7f2:	466d      	mov	r5, sp
 800e7f4:	4668      	mov	r0, sp
 800e7f6:	f000 ff5b 	bl	800f6b0 <rcutils_get_default_allocator>
 800e7fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7fc:	4c08      	ldr	r4, [pc, #32]	; (800e820 <rcl_node_get_default_options+0x34>)
 800e7fe:	f8d5 c000 	ldr.w	ip, [r5]
 800e802:	1d26      	adds	r6, r4, #4
 800e804:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e808:	463d      	mov	r5, r7
 800e80a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e80c:	f8c6 c000 	str.w	ip, [r6]
 800e810:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e814:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e818:	4638      	mov	r0, r7
 800e81a:	b007      	add	sp, #28
 800e81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e81e:	bf00      	nop
 800e820:	20000038 	.word	0x20000038

0800e824 <rcl_node_options_copy>:
 800e824:	b1c8      	cbz	r0, 800e85a <rcl_node_options_copy+0x36>
 800e826:	b4f0      	push	{r4, r5, r6, r7}
 800e828:	460f      	mov	r7, r1
 800e82a:	b199      	cbz	r1, 800e854 <rcl_node_options_copy+0x30>
 800e82c:	4288      	cmp	r0, r1
 800e82e:	4606      	mov	r6, r0
 800e830:	d010      	beq.n	800e854 <rcl_node_options_copy+0x30>
 800e832:	4605      	mov	r5, r0
 800e834:	460c      	mov	r4, r1
 800e836:	f855 3b04 	ldr.w	r3, [r5], #4
 800e83a:	f844 3b04 	str.w	r3, [r4], #4
 800e83e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e842:	7e32      	ldrb	r2, [r6, #24]
 800e844:	6829      	ldr	r1, [r5, #0]
 800e846:	7e73      	ldrb	r3, [r6, #25]
 800e848:	6021      	str	r1, [r4, #0]
 800e84a:	2000      	movs	r0, #0
 800e84c:	763a      	strb	r2, [r7, #24]
 800e84e:	767b      	strb	r3, [r7, #25]
 800e850:	bcf0      	pop	{r4, r5, r6, r7}
 800e852:	4770      	bx	lr
 800e854:	200b      	movs	r0, #11
 800e856:	bcf0      	pop	{r4, r5, r6, r7}
 800e858:	4770      	bx	lr
 800e85a:	200b      	movs	r0, #11
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop

0800e860 <rcl_get_zero_initialized_publisher>:
 800e860:	4b01      	ldr	r3, [pc, #4]	; (800e868 <rcl_get_zero_initialized_publisher+0x8>)
 800e862:	6818      	ldr	r0, [r3, #0]
 800e864:	4770      	bx	lr
 800e866:	bf00      	nop
 800e868:	0801b78c 	.word	0x0801b78c

0800e86c <rcl_publisher_init>:
 800e86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e870:	b091      	sub	sp, #68	; 0x44
 800e872:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e874:	b3d7      	cbz	r7, 800e8ec <rcl_publisher_init+0x80>
 800e876:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800e87a:	4604      	mov	r4, r0
 800e87c:	4648      	mov	r0, r9
 800e87e:	4688      	mov	r8, r1
 800e880:	4616      	mov	r6, r2
 800e882:	461d      	mov	r5, r3
 800e884:	f000 ff22 	bl	800f6cc <rcutils_allocator_is_valid>
 800e888:	b380      	cbz	r0, 800e8ec <rcl_publisher_init+0x80>
 800e88a:	b37c      	cbz	r4, 800e8ec <rcl_publisher_init+0x80>
 800e88c:	f8d4 a000 	ldr.w	sl, [r4]
 800e890:	f1ba 0f00 	cmp.w	sl, #0
 800e894:	d004      	beq.n	800e8a0 <rcl_publisher_init+0x34>
 800e896:	2564      	movs	r5, #100	; 0x64
 800e898:	4628      	mov	r0, r5
 800e89a:	b011      	add	sp, #68	; 0x44
 800e89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a0:	4640      	mov	r0, r8
 800e8a2:	f006 fdf9 	bl	8015498 <rcl_node_is_valid>
 800e8a6:	b330      	cbz	r0, 800e8f6 <rcl_publisher_init+0x8a>
 800e8a8:	b306      	cbz	r6, 800e8ec <rcl_publisher_init+0x80>
 800e8aa:	b1fd      	cbz	r5, 800e8ec <rcl_publisher_init+0x80>
 800e8ac:	46ce      	mov	lr, r9
 800e8ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e8b2:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800e8b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e8ba:	f8de 3000 	ldr.w	r3, [lr]
 800e8be:	f8cc 3000 	str.w	r3, [ip]
 800e8c2:	f000 ff3f 	bl	800f744 <rcutils_get_zero_initialized_string_map>
 800e8c6:	ab10      	add	r3, sp, #64	; 0x40
 800e8c8:	4684      	mov	ip, r0
 800e8ca:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e8ce:	f8cd c020 	str.w	ip, [sp, #32]
 800e8d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e8d6:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800e8da:	4651      	mov	r1, sl
 800e8dc:	a808      	add	r0, sp, #32
 800e8de:	f000 ffab 	bl	800f838 <rcutils_string_map_init>
 800e8e2:	b150      	cbz	r0, 800e8fa <rcl_publisher_init+0x8e>
 800e8e4:	280a      	cmp	r0, #10
 800e8e6:	d013      	beq.n	800e910 <rcl_publisher_init+0xa4>
 800e8e8:	2501      	movs	r5, #1
 800e8ea:	e7d5      	b.n	800e898 <rcl_publisher_init+0x2c>
 800e8ec:	250b      	movs	r5, #11
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	b011      	add	sp, #68	; 0x44
 800e8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f6:	25c8      	movs	r5, #200	; 0xc8
 800e8f8:	e7ce      	b.n	800e898 <rcl_publisher_init+0x2c>
 800e8fa:	a808      	add	r0, sp, #32
 800e8fc:	f006 fa02 	bl	8014d04 <rcl_get_default_topic_name_substitutions>
 800e900:	4682      	mov	sl, r0
 800e902:	b138      	cbz	r0, 800e914 <rcl_publisher_init+0xa8>
 800e904:	a808      	add	r0, sp, #32
 800e906:	f000 ffd7 	bl	800f8b8 <rcutils_string_map_fini>
 800e90a:	f1ba 0f0a 	cmp.w	sl, #10
 800e90e:	d1eb      	bne.n	800e8e8 <rcl_publisher_init+0x7c>
 800e910:	250a      	movs	r5, #10
 800e912:	e7c1      	b.n	800e898 <rcl_publisher_init+0x2c>
 800e914:	4640      	mov	r0, r8
 800e916:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e91a:	f006 fdc7 	bl	80154ac <rcl_node_get_name>
 800e91e:	4682      	mov	sl, r0
 800e920:	4640      	mov	r0, r8
 800e922:	f006 fdcb 	bl	80154bc <rcl_node_get_namespace>
 800e926:	4686      	mov	lr, r0
 800e928:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e92c:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800e930:	46ec      	mov	ip, sp
 800e932:	f8cd b014 	str.w	fp, [sp, #20]
 800e936:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e93a:	f8d9 3000 	ldr.w	r3, [r9]
 800e93e:	f8cc 3000 	str.w	r3, [ip]
 800e942:	4628      	mov	r0, r5
 800e944:	4651      	mov	r1, sl
 800e946:	4672      	mov	r2, lr
 800e948:	ab08      	add	r3, sp, #32
 800e94a:	f006 f875 	bl	8014a38 <rcl_expand_topic_name>
 800e94e:	4605      	mov	r5, r0
 800e950:	a808      	add	r0, sp, #32
 800e952:	f000 ffb1 	bl	800f8b8 <rcutils_string_map_fini>
 800e956:	b920      	cbnz	r0, 800e962 <rcl_publisher_init+0xf6>
 800e958:	b15d      	cbz	r5, 800e972 <rcl_publisher_init+0x106>
 800e95a:	2d67      	cmp	r5, #103	; 0x67
 800e95c:	d002      	beq.n	800e964 <rcl_publisher_init+0xf8>
 800e95e:	2d69      	cmp	r5, #105	; 0x69
 800e960:	d05f      	beq.n	800ea22 <rcl_publisher_init+0x1b6>
 800e962:	2501      	movs	r5, #1
 800e964:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e966:	2800      	cmp	r0, #0
 800e968:	d096      	beq.n	800e898 <rcl_publisher_init+0x2c>
 800e96a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e96c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e96e:	4798      	blx	r3
 800e970:	e792      	b.n	800e898 <rcl_publisher_init+0x2c>
 800e972:	4640      	mov	r0, r8
 800e974:	f006 fdaa 	bl	80154cc <rcl_node_get_options>
 800e978:	2800      	cmp	r0, #0
 800e97a:	d0f2      	beq.n	800e962 <rcl_publisher_init+0xf6>
 800e97c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e97e:	f7f1 fc39 	bl	80001f4 <strlen>
 800e982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e984:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e986:	3001      	adds	r0, #1
 800e988:	4798      	blx	r3
 800e98a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e98c:	9107      	str	r1, [sp, #28]
 800e98e:	4681      	mov	r9, r0
 800e990:	4608      	mov	r0, r1
 800e992:	f7f1 fc2f 	bl	80001f4 <strlen>
 800e996:	9907      	ldr	r1, [sp, #28]
 800e998:	1c42      	adds	r2, r0, #1
 800e99a:	4648      	mov	r0, r9
 800e99c:	f00b fe83 	bl	801a6a6 <memcpy>
 800e9a0:	462a      	mov	r2, r5
 800e9a2:	4648      	mov	r0, r9
 800e9a4:	a90a      	add	r1, sp, #40	; 0x28
 800e9a6:	f001 f865 	bl	800fa74 <rmw_validate_full_topic_name>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d137      	bne.n	800ea1e <rcl_publisher_init+0x1b2>
 800e9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d138      	bne.n	800ea26 <rcl_publisher_init+0x1ba>
 800e9b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e9b8:	20c0      	movs	r0, #192	; 0xc0
 800e9ba:	4798      	blx	r3
 800e9bc:	6020      	str	r0, [r4, #0]
 800e9be:	b3a0      	cbz	r0, 800ea2a <rcl_publisher_init+0x1be>
 800e9c0:	4640      	mov	r0, r8
 800e9c2:	f006 fd8b 	bl	80154dc <rcl_node_get_rmw_handle>
 800e9c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	4631      	mov	r1, r6
 800e9ce:	463b      	mov	r3, r7
 800e9d0:	464a      	mov	r2, r9
 800e9d2:	6825      	ldr	r5, [r4, #0]
 800e9d4:	f001 f94e 	bl	800fc74 <rmw_create_publisher>
 800e9d8:	6821      	ldr	r1, [r4, #0]
 800e9da:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800e9de:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800e9e2:	b388      	cbz	r0, 800ea48 <rcl_publisher_init+0x1dc>
 800e9e4:	3168      	adds	r1, #104	; 0x68
 800e9e6:	f001 fa23 	bl	800fe30 <rmw_publisher_get_actual_qos>
 800e9ea:	6823      	ldr	r3, [r4, #0]
 800e9ec:	4605      	mov	r5, r0
 800e9ee:	b9f0      	cbnz	r0, 800ea2e <rcl_publisher_init+0x1c2>
 800e9f0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800e9f4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	2268      	movs	r2, #104	; 0x68
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	f00b fe52 	bl	801a6a6 <memcpy>
 800ea02:	f8d8 2000 	ldr.w	r2, [r8]
 800ea06:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800ea0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea0c:	b110      	cbz	r0, 800ea14 <rcl_publisher_init+0x1a8>
 800ea0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea10:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea12:	4798      	blx	r3
 800ea14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea18:	4648      	mov	r0, r9
 800ea1a:	4798      	blx	r3
 800ea1c:	e73c      	b.n	800e898 <rcl_publisher_init+0x2c>
 800ea1e:	2501      	movs	r5, #1
 800ea20:	e7f3      	b.n	800ea0a <rcl_publisher_init+0x19e>
 800ea22:	2567      	movs	r5, #103	; 0x67
 800ea24:	e79e      	b.n	800e964 <rcl_publisher_init+0xf8>
 800ea26:	2567      	movs	r5, #103	; 0x67
 800ea28:	e7ef      	b.n	800ea0a <rcl_publisher_init+0x19e>
 800ea2a:	250a      	movs	r5, #10
 800ea2c:	e7ed      	b.n	800ea0a <rcl_publisher_init+0x19e>
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d0f5      	beq.n	800ea1e <rcl_publisher_init+0x1b2>
 800ea32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ea36:	b13b      	cbz	r3, 800ea48 <rcl_publisher_init+0x1dc>
 800ea38:	4640      	mov	r0, r8
 800ea3a:	f006 fd4f 	bl	80154dc <rcl_node_get_rmw_handle>
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ea44:	f001 f9f6 	bl	800fe34 <rmw_destroy_publisher>
 800ea48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea4a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea4c:	6820      	ldr	r0, [r4, #0]
 800ea4e:	4798      	blx	r3
 800ea50:	2300      	movs	r3, #0
 800ea52:	6023      	str	r3, [r4, #0]
 800ea54:	2501      	movs	r5, #1
 800ea56:	e7d8      	b.n	800ea0a <rcl_publisher_init+0x19e>

0800ea58 <rcl_publisher_get_default_options>:
 800ea58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea5a:	4f0e      	ldr	r7, [pc, #56]	; (800ea94 <rcl_publisher_get_default_options+0x3c>)
 800ea5c:	490e      	ldr	r1, [pc, #56]	; (800ea98 <rcl_publisher_get_default_options+0x40>)
 800ea5e:	b087      	sub	sp, #28
 800ea60:	4606      	mov	r6, r0
 800ea62:	2250      	movs	r2, #80	; 0x50
 800ea64:	4638      	mov	r0, r7
 800ea66:	f00b fe1e 	bl	801a6a6 <memcpy>
 800ea6a:	466c      	mov	r4, sp
 800ea6c:	4668      	mov	r0, sp
 800ea6e:	f000 fe1f 	bl	800f6b0 <rcutils_get_default_allocator>
 800ea72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea74:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ea78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea7a:	6823      	ldr	r3, [r4, #0]
 800ea7c:	602b      	str	r3, [r5, #0]
 800ea7e:	f000 ffe1 	bl	800fa44 <rmw_get_default_publisher_options>
 800ea82:	4639      	mov	r1, r7
 800ea84:	6678      	str	r0, [r7, #100]	; 0x64
 800ea86:	2268      	movs	r2, #104	; 0x68
 800ea88:	4630      	mov	r0, r6
 800ea8a:	f00b fe0c 	bl	801a6a6 <memcpy>
 800ea8e:	4630      	mov	r0, r6
 800ea90:	b007      	add	sp, #28
 800ea92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea94:	20009b70 	.word	0x20009b70
 800ea98:	0801b790 	.word	0x0801b790

0800ea9c <rcl_publish>:
 800ea9c:	b1f8      	cbz	r0, 800eade <rcl_publish+0x42>
 800ea9e:	6803      	ldr	r3, [r0, #0]
 800eaa0:	b570      	push	{r4, r5, r6, lr}
 800eaa2:	4604      	mov	r4, r0
 800eaa4:	b1b3      	cbz	r3, 800ead4 <rcl_publish+0x38>
 800eaa6:	4616      	mov	r6, r2
 800eaa8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800eaac:	b192      	cbz	r2, 800ead4 <rcl_publish+0x38>
 800eaae:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800eab2:	460d      	mov	r5, r1
 800eab4:	f005 ff56 	bl	8014964 <rcl_context_is_valid>
 800eab8:	b160      	cbz	r0, 800ead4 <rcl_publish+0x38>
 800eaba:	6823      	ldr	r3, [r4, #0]
 800eabc:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800eac0:	b140      	cbz	r0, 800ead4 <rcl_publish+0x38>
 800eac2:	b155      	cbz	r5, 800eada <rcl_publish+0x3e>
 800eac4:	4632      	mov	r2, r6
 800eac6:	4629      	mov	r1, r5
 800eac8:	f001 f874 	bl	800fbb4 <rmw_publish>
 800eacc:	3800      	subs	r0, #0
 800eace:	bf18      	it	ne
 800ead0:	2001      	movne	r0, #1
 800ead2:	bd70      	pop	{r4, r5, r6, pc}
 800ead4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ead8:	bd70      	pop	{r4, r5, r6, pc}
 800eada:	200b      	movs	r0, #11
 800eadc:	bd70      	pop	{r4, r5, r6, pc}
 800eade:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800eae2:	4770      	bx	lr

0800eae4 <rcl_get_zero_initialized_subscription>:
 800eae4:	4b01      	ldr	r3, [pc, #4]	; (800eaec <rcl_get_zero_initialized_subscription+0x8>)
 800eae6:	6818      	ldr	r0, [r3, #0]
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop
 800eaec:	0801b7e0 	.word	0x0801b7e0

0800eaf0 <rcl_subscription_init>:
 800eaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf4:	b091      	sub	sp, #68	; 0x44
 800eaf6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800eaf8:	b1d7      	cbz	r7, 800eb30 <rcl_subscription_init+0x40>
 800eafa:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800eafe:	4604      	mov	r4, r0
 800eb00:	4648      	mov	r0, r9
 800eb02:	4688      	mov	r8, r1
 800eb04:	4616      	mov	r6, r2
 800eb06:	461d      	mov	r5, r3
 800eb08:	f000 fde0 	bl	800f6cc <rcutils_allocator_is_valid>
 800eb0c:	b180      	cbz	r0, 800eb30 <rcl_subscription_init+0x40>
 800eb0e:	b17c      	cbz	r4, 800eb30 <rcl_subscription_init+0x40>
 800eb10:	4640      	mov	r0, r8
 800eb12:	f006 fcc1 	bl	8015498 <rcl_node_is_valid>
 800eb16:	b380      	cbz	r0, 800eb7a <rcl_subscription_init+0x8a>
 800eb18:	b156      	cbz	r6, 800eb30 <rcl_subscription_init+0x40>
 800eb1a:	b14d      	cbz	r5, 800eb30 <rcl_subscription_init+0x40>
 800eb1c:	f8d4 a000 	ldr.w	sl, [r4]
 800eb20:	f1ba 0f00 	cmp.w	sl, #0
 800eb24:	d009      	beq.n	800eb3a <rcl_subscription_init+0x4a>
 800eb26:	2564      	movs	r5, #100	; 0x64
 800eb28:	4628      	mov	r0, r5
 800eb2a:	b011      	add	sp, #68	; 0x44
 800eb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb30:	250b      	movs	r5, #11
 800eb32:	4628      	mov	r0, r5
 800eb34:	b011      	add	sp, #68	; 0x44
 800eb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb3a:	46ce      	mov	lr, r9
 800eb3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb40:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800eb44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb48:	f8de 3000 	ldr.w	r3, [lr]
 800eb4c:	f8cc 3000 	str.w	r3, [ip]
 800eb50:	f000 fdf8 	bl	800f744 <rcutils_get_zero_initialized_string_map>
 800eb54:	ab10      	add	r3, sp, #64	; 0x40
 800eb56:	4684      	mov	ip, r0
 800eb58:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800eb5c:	f8cd c020 	str.w	ip, [sp, #32]
 800eb60:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eb64:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800eb68:	4651      	mov	r1, sl
 800eb6a:	a808      	add	r0, sp, #32
 800eb6c:	f000 fe64 	bl	800f838 <rcutils_string_map_init>
 800eb70:	b140      	cbz	r0, 800eb84 <rcl_subscription_init+0x94>
 800eb72:	280a      	cmp	r0, #10
 800eb74:	d011      	beq.n	800eb9a <rcl_subscription_init+0xaa>
 800eb76:	2501      	movs	r5, #1
 800eb78:	e7db      	b.n	800eb32 <rcl_subscription_init+0x42>
 800eb7a:	25c8      	movs	r5, #200	; 0xc8
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	b011      	add	sp, #68	; 0x44
 800eb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb84:	a808      	add	r0, sp, #32
 800eb86:	f006 f8bd 	bl	8014d04 <rcl_get_default_topic_name_substitutions>
 800eb8a:	4682      	mov	sl, r0
 800eb8c:	b138      	cbz	r0, 800eb9e <rcl_subscription_init+0xae>
 800eb8e:	a808      	add	r0, sp, #32
 800eb90:	f000 fe92 	bl	800f8b8 <rcutils_string_map_fini>
 800eb94:	f1ba 0f0a 	cmp.w	sl, #10
 800eb98:	d1ed      	bne.n	800eb76 <rcl_subscription_init+0x86>
 800eb9a:	250a      	movs	r5, #10
 800eb9c:	e7c9      	b.n	800eb32 <rcl_subscription_init+0x42>
 800eb9e:	4640      	mov	r0, r8
 800eba0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800eba4:	f006 fc82 	bl	80154ac <rcl_node_get_name>
 800eba8:	4682      	mov	sl, r0
 800ebaa:	4640      	mov	r0, r8
 800ebac:	f006 fc86 	bl	80154bc <rcl_node_get_namespace>
 800ebb0:	4686      	mov	lr, r0
 800ebb2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ebb6:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800ebba:	46ec      	mov	ip, sp
 800ebbc:	f8cd b014 	str.w	fp, [sp, #20]
 800ebc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebc4:	f8d9 3000 	ldr.w	r3, [r9]
 800ebc8:	f8cc 3000 	str.w	r3, [ip]
 800ebcc:	4628      	mov	r0, r5
 800ebce:	4651      	mov	r1, sl
 800ebd0:	4672      	mov	r2, lr
 800ebd2:	ab08      	add	r3, sp, #32
 800ebd4:	f005 ff30 	bl	8014a38 <rcl_expand_topic_name>
 800ebd8:	4605      	mov	r5, r0
 800ebda:	a808      	add	r0, sp, #32
 800ebdc:	f000 fe6c 	bl	800f8b8 <rcutils_string_map_fini>
 800ebe0:	b920      	cbnz	r0, 800ebec <rcl_subscription_init+0xfc>
 800ebe2:	b15d      	cbz	r5, 800ebfc <rcl_subscription_init+0x10c>
 800ebe4:	2d67      	cmp	r5, #103	; 0x67
 800ebe6:	d002      	beq.n	800ebee <rcl_subscription_init+0xfe>
 800ebe8:	2d69      	cmp	r5, #105	; 0x69
 800ebea:	d05a      	beq.n	800eca2 <rcl_subscription_init+0x1b2>
 800ebec:	2501      	movs	r5, #1
 800ebee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	d09e      	beq.n	800eb32 <rcl_subscription_init+0x42>
 800ebf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebf6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ebf8:	4798      	blx	r3
 800ebfa:	e79a      	b.n	800eb32 <rcl_subscription_init+0x42>
 800ebfc:	4640      	mov	r0, r8
 800ebfe:	f006 fc65 	bl	80154cc <rcl_node_get_options>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d0f2      	beq.n	800ebec <rcl_subscription_init+0xfc>
 800ec06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec08:	f7f1 faf4 	bl	80001f4 <strlen>
 800ec0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec10:	3001      	adds	r0, #1
 800ec12:	4798      	blx	r3
 800ec14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec16:	9107      	str	r1, [sp, #28]
 800ec18:	4681      	mov	r9, r0
 800ec1a:	4608      	mov	r0, r1
 800ec1c:	f7f1 faea 	bl	80001f4 <strlen>
 800ec20:	9907      	ldr	r1, [sp, #28]
 800ec22:	1c42      	adds	r2, r0, #1
 800ec24:	4648      	mov	r0, r9
 800ec26:	f00b fd3e 	bl	801a6a6 <memcpy>
 800ec2a:	462a      	mov	r2, r5
 800ec2c:	4648      	mov	r0, r9
 800ec2e:	a90a      	add	r1, sp, #40	; 0x28
 800ec30:	f000 ff20 	bl	800fa74 <rmw_validate_full_topic_name>
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d132      	bne.n	800ec9e <rcl_subscription_init+0x1ae>
 800ec38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d133      	bne.n	800eca6 <rcl_subscription_init+0x1b6>
 800ec3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec40:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec42:	20c8      	movs	r0, #200	; 0xc8
 800ec44:	4798      	blx	r3
 800ec46:	6020      	str	r0, [r4, #0]
 800ec48:	b378      	cbz	r0, 800ecaa <rcl_subscription_init+0x1ba>
 800ec4a:	4640      	mov	r0, r8
 800ec4c:	f006 fc46 	bl	80154dc <rcl_node_get_rmw_handle>
 800ec50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ec54:	9300      	str	r3, [sp, #0]
 800ec56:	4631      	mov	r1, r6
 800ec58:	463b      	mov	r3, r7
 800ec5a:	464a      	mov	r2, r9
 800ec5c:	6825      	ldr	r5, [r4, #0]
 800ec5e:	f001 f939 	bl	800fed4 <rmw_create_subscription>
 800ec62:	6821      	ldr	r1, [r4, #0]
 800ec64:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800ec68:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800ec6c:	b368      	cbz	r0, 800ecca <rcl_subscription_init+0x1da>
 800ec6e:	3170      	adds	r1, #112	; 0x70
 800ec70:	f001 fa10 	bl	8010094 <rmw_subscription_get_actual_qos>
 800ec74:	4605      	mov	r5, r0
 800ec76:	b9d0      	cbnz	r0, 800ecae <rcl_subscription_init+0x1be>
 800ec78:	6820      	ldr	r0, [r4, #0]
 800ec7a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ec7e:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800ec82:	2270      	movs	r2, #112	; 0x70
 800ec84:	4639      	mov	r1, r7
 800ec86:	f00b fd0e 	bl	801a6a6 <memcpy>
 800ec8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec8c:	b110      	cbz	r0, 800ec94 <rcl_subscription_init+0x1a4>
 800ec8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec90:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec92:	4798      	blx	r3
 800ec94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec96:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec98:	4648      	mov	r0, r9
 800ec9a:	4798      	blx	r3
 800ec9c:	e749      	b.n	800eb32 <rcl_subscription_init+0x42>
 800ec9e:	2501      	movs	r5, #1
 800eca0:	e7f3      	b.n	800ec8a <rcl_subscription_init+0x19a>
 800eca2:	2567      	movs	r5, #103	; 0x67
 800eca4:	e7a3      	b.n	800ebee <rcl_subscription_init+0xfe>
 800eca6:	2567      	movs	r5, #103	; 0x67
 800eca8:	e7ef      	b.n	800ec8a <rcl_subscription_init+0x19a>
 800ecaa:	250a      	movs	r5, #10
 800ecac:	e7ed      	b.n	800ec8a <rcl_subscription_init+0x19a>
 800ecae:	6823      	ldr	r3, [r4, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d0f4      	beq.n	800ec9e <rcl_subscription_init+0x1ae>
 800ecb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ecb8:	b13b      	cbz	r3, 800ecca <rcl_subscription_init+0x1da>
 800ecba:	4640      	mov	r0, r8
 800ecbc:	f006 fc0e 	bl	80154dc <rcl_node_get_rmw_handle>
 800ecc0:	6823      	ldr	r3, [r4, #0]
 800ecc2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800ecc6:	f001 f9e7 	bl	8010098 <rmw_destroy_subscription>
 800ecca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eccc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ecce:	6820      	ldr	r0, [r4, #0]
 800ecd0:	4798      	blx	r3
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	6023      	str	r3, [r4, #0]
 800ecd6:	2501      	movs	r5, #1
 800ecd8:	e7d7      	b.n	800ec8a <rcl_subscription_init+0x19a>
 800ecda:	bf00      	nop

0800ecdc <rcl_subscription_get_default_options>:
 800ecdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece0:	4f12      	ldr	r7, [pc, #72]	; (800ed2c <rcl_subscription_get_default_options+0x50>)
 800ece2:	4913      	ldr	r1, [pc, #76]	; (800ed30 <rcl_subscription_get_default_options+0x54>)
 800ece4:	b088      	sub	sp, #32
 800ece6:	4606      	mov	r6, r0
 800ece8:	2250      	movs	r2, #80	; 0x50
 800ecea:	4638      	mov	r0, r7
 800ecec:	f00b fcdb 	bl	801a6a6 <memcpy>
 800ecf0:	ac02      	add	r4, sp, #8
 800ecf2:	a802      	add	r0, sp, #8
 800ecf4:	f000 fcdc 	bl	800f6b0 <rcutils_get_default_allocator>
 800ecf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ecfa:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ecfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed00:	46e8      	mov	r8, sp
 800ed02:	6823      	ldr	r3, [r4, #0]
 800ed04:	602b      	str	r3, [r5, #0]
 800ed06:	4640      	mov	r0, r8
 800ed08:	f000 fe9e 	bl	800fa48 <rmw_get_default_subscription_options>
 800ed0c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ed10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ed14:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed18:	2270      	movs	r2, #112	; 0x70
 800ed1a:	4639      	mov	r1, r7
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	f00b fcc2 	bl	801a6a6 <memcpy>
 800ed22:	4630      	mov	r0, r6
 800ed24:	b008      	add	sp, #32
 800ed26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed2a:	bf00      	nop
 800ed2c:	20009bd8 	.word	0x20009bd8
 800ed30:	0801b7e8 	.word	0x0801b7e8

0800ed34 <rcl_take>:
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d03f      	beq.n	800edb8 <rcl_take+0x84>
 800ed38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed3c:	4617      	mov	r7, r2
 800ed3e:	6802      	ldr	r2, [r0, #0]
 800ed40:	b09d      	sub	sp, #116	; 0x74
 800ed42:	4606      	mov	r6, r0
 800ed44:	b382      	cbz	r2, 800eda8 <rcl_take+0x74>
 800ed46:	4699      	mov	r9, r3
 800ed48:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800ed4c:	b363      	cbz	r3, 800eda8 <rcl_take+0x74>
 800ed4e:	4688      	mov	r8, r1
 800ed50:	b381      	cbz	r1, 800edb4 <rcl_take+0x80>
 800ed52:	2f00      	cmp	r7, #0
 800ed54:	d034      	beq.n	800edc0 <rcl_take+0x8c>
 800ed56:	a802      	add	r0, sp, #8
 800ed58:	ac02      	add	r4, sp, #8
 800ed5a:	f000 fe79 	bl	800fa50 <rmw_get_zero_initialized_message_info>
 800ed5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed60:	463d      	mov	r5, r7
 800ed62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ed6c:	6834      	ldr	r4, [r6, #0]
 800ed6e:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800ed72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800ed76:	2400      	movs	r4, #0
 800ed78:	463b      	mov	r3, r7
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f8cd 9000 	str.w	r9, [sp]
 800ed80:	4641      	mov	r1, r8
 800ed82:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800ed86:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800ed8a:	f001 f9e3 	bl	8010154 <rmw_take_with_info>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	b9c0      	cbnz	r0, 800edc4 <rcl_take+0x90>
 800ed92:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800ed96:	f240 1291 	movw	r2, #401	; 0x191
 800ed9a:	2900      	cmp	r1, #0
 800ed9c:	bf08      	it	eq
 800ed9e:	4613      	moveq	r3, r2
 800eda0:	4618      	mov	r0, r3
 800eda2:	b01d      	add	sp, #116	; 0x74
 800eda4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eda8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800edac:	4618      	mov	r0, r3
 800edae:	b01d      	add	sp, #116	; 0x74
 800edb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edb4:	230b      	movs	r3, #11
 800edb6:	e7f3      	b.n	800eda0 <rcl_take+0x6c>
 800edb8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800edbc:	4618      	mov	r0, r3
 800edbe:	4770      	bx	lr
 800edc0:	af10      	add	r7, sp, #64	; 0x40
 800edc2:	e7c8      	b.n	800ed56 <rcl_take+0x22>
 800edc4:	f005 fdb0 	bl	8014928 <rcl_convert_rmw_ret_to_rcl_ret>
 800edc8:	4603      	mov	r3, r0
 800edca:	e7e9      	b.n	800eda0 <rcl_take+0x6c>

0800edcc <rcl_subscription_get_rmw_handle>:
 800edcc:	b118      	cbz	r0, 800edd6 <rcl_subscription_get_rmw_handle+0xa>
 800edce:	6800      	ldr	r0, [r0, #0]
 800edd0:	b108      	cbz	r0, 800edd6 <rcl_subscription_get_rmw_handle+0xa>
 800edd2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800edd6:	4770      	bx	lr

0800edd8 <_rclc_check_for_new_data>:
 800edd8:	b1e0      	cbz	r0, 800ee14 <_rclc_check_for_new_data+0x3c>
 800edda:	7803      	ldrb	r3, [r0, #0]
 800eddc:	2b08      	cmp	r3, #8
 800edde:	d81b      	bhi.n	800ee18 <_rclc_check_for_new_data+0x40>
 800ede0:	e8df f003 	tbb	[pc, r3]
 800ede4:	12161010 	.word	0x12161010
 800ede8:	05050512 	.word	0x05050512
 800edec:	14          	.byte	0x14
 800eded:	00          	.byte	0x00
 800edee:	6a0b      	ldr	r3, [r1, #32]
 800edf0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800edf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edf6:	3b00      	subs	r3, #0
 800edf8:	bf18      	it	ne
 800edfa:	2301      	movne	r3, #1
 800edfc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ee00:	2000      	movs	r0, #0
 800ee02:	4770      	bx	lr
 800ee04:	680b      	ldr	r3, [r1, #0]
 800ee06:	e7f3      	b.n	800edf0 <_rclc_check_for_new_data+0x18>
 800ee08:	698b      	ldr	r3, [r1, #24]
 800ee0a:	e7f1      	b.n	800edf0 <_rclc_check_for_new_data+0x18>
 800ee0c:	688b      	ldr	r3, [r1, #8]
 800ee0e:	e7ef      	b.n	800edf0 <_rclc_check_for_new_data+0x18>
 800ee10:	690b      	ldr	r3, [r1, #16]
 800ee12:	e7ed      	b.n	800edf0 <_rclc_check_for_new_data+0x18>
 800ee14:	200b      	movs	r0, #11
 800ee16:	4770      	bx	lr
 800ee18:	2300      	movs	r3, #0
 800ee1a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ee1e:	2001      	movs	r0, #1
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop

0800ee24 <_rclc_take_new_data>:
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d049      	beq.n	800eebc <_rclc_take_new_data+0x98>
 800ee28:	b510      	push	{r4, lr}
 800ee2a:	7803      	ldrb	r3, [r0, #0]
 800ee2c:	b08e      	sub	sp, #56	; 0x38
 800ee2e:	4604      	mov	r4, r0
 800ee30:	2b08      	cmp	r3, #8
 800ee32:	d84a      	bhi.n	800eeca <_rclc_take_new_data+0xa6>
 800ee34:	e8df f003 	tbb	[pc, r3]
 800ee38:	2b121515 	.word	0x2b121515
 800ee3c:	0505052b 	.word	0x0505052b
 800ee40:	12          	.byte	0x12
 800ee41:	00          	.byte	0x00
 800ee42:	6a0b      	ldr	r3, [r1, #32]
 800ee44:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ee46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee4a:	b13b      	cbz	r3, 800ee5c <_rclc_take_new_data+0x38>
 800ee4c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ee50:	f104 0110 	add.w	r1, r4, #16
 800ee54:	f006 fc42 	bl	80156dc <rcl_take_request>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	d131      	bne.n	800eec0 <_rclc_take_new_data+0x9c>
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	b00e      	add	sp, #56	; 0x38
 800ee60:	bd10      	pop	{r4, pc}
 800ee62:	680b      	ldr	r3, [r1, #0]
 800ee64:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ee66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d0f6      	beq.n	800ee5c <_rclc_take_new_data+0x38>
 800ee6e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ee72:	2300      	movs	r3, #0
 800ee74:	aa02      	add	r2, sp, #8
 800ee76:	f7ff ff5d 	bl	800ed34 <rcl_take>
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	d0ef      	beq.n	800ee5e <_rclc_take_new_data+0x3a>
 800ee7e:	f240 1391 	movw	r3, #401	; 0x191
 800ee82:	4298      	cmp	r0, r3
 800ee84:	d115      	bne.n	800eeb2 <_rclc_take_new_data+0x8e>
 800ee86:	2300      	movs	r3, #0
 800ee88:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800ee8c:	e7e7      	b.n	800ee5e <_rclc_take_new_data+0x3a>
 800ee8e:	698b      	ldr	r3, [r1, #24]
 800ee90:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ee92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d0e0      	beq.n	800ee5c <_rclc_take_new_data+0x38>
 800ee9a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ee9e:	f104 0110 	add.w	r1, r4, #16
 800eea2:	f005 fd05 	bl	80148b0 <rcl_take_response>
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d0d8      	beq.n	800ee5c <_rclc_take_new_data+0x38>
 800eeaa:	f240 13f5 	movw	r3, #501	; 0x1f5
 800eeae:	4298      	cmp	r0, r3
 800eeb0:	d0d5      	beq.n	800ee5e <_rclc_take_new_data+0x3a>
 800eeb2:	9001      	str	r0, [sp, #4]
 800eeb4:	f000 fc2e 	bl	800f714 <rcutils_reset_error>
 800eeb8:	9801      	ldr	r0, [sp, #4]
 800eeba:	e7d0      	b.n	800ee5e <_rclc_take_new_data+0x3a>
 800eebc:	200b      	movs	r0, #11
 800eebe:	4770      	bx	lr
 800eec0:	f240 2359 	movw	r3, #601	; 0x259
 800eec4:	4298      	cmp	r0, r3
 800eec6:	d0de      	beq.n	800ee86 <_rclc_take_new_data+0x62>
 800eec8:	e7f3      	b.n	800eeb2 <_rclc_take_new_data+0x8e>
 800eeca:	2001      	movs	r0, #1
 800eecc:	e7c7      	b.n	800ee5e <_rclc_take_new_data+0x3a>
 800eece:	bf00      	nop

0800eed0 <rclc_executor_trigger_any>:
 800eed0:	b170      	cbz	r0, 800eef0 <rclc_executor_trigger_any+0x20>
 800eed2:	b179      	cbz	r1, 800eef4 <rclc_executor_trigger_any+0x24>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2200      	movs	r2, #0
 800eed8:	e005      	b.n	800eee6 <rclc_executor_trigger_any+0x16>
 800eeda:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800eede:	3340      	adds	r3, #64	; 0x40
 800eee0:	b930      	cbnz	r0, 800eef0 <rclc_executor_trigger_any+0x20>
 800eee2:	4291      	cmp	r1, r2
 800eee4:	d005      	beq.n	800eef2 <rclc_executor_trigger_any+0x22>
 800eee6:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800eeea:	3201      	adds	r2, #1
 800eeec:	2800      	cmp	r0, #0
 800eeee:	d1f4      	bne.n	800eeda <rclc_executor_trigger_any+0xa>
 800eef0:	4770      	bx	lr
 800eef2:	4770      	bx	lr
 800eef4:	4608      	mov	r0, r1
 800eef6:	e7fb      	b.n	800eef0 <rclc_executor_trigger_any+0x20>

0800eef8 <_rclc_execute.part.0>:
 800eef8:	b530      	push	{r4, r5, lr}
 800eefa:	7803      	ldrb	r3, [r0, #0]
 800eefc:	b083      	sub	sp, #12
 800eefe:	4604      	mov	r4, r0
 800ef00:	2b08      	cmp	r3, #8
 800ef02:	d85b      	bhi.n	800efbc <_rclc_execute.part.0+0xc4>
 800ef04:	e8df f003 	tbb	[pc, r3]
 800ef08:	3036271f 	.word	0x3036271f
 800ef0c:	0505053f 	.word	0x0505053f
 800ef10:	1a          	.byte	0x1a
 800ef11:	00          	.byte	0x00
 800ef12:	2b06      	cmp	r3, #6
 800ef14:	d049      	beq.n	800efaa <_rclc_execute.part.0+0xb2>
 800ef16:	2b07      	cmp	r3, #7
 800ef18:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef1a:	d140      	bne.n	800ef9e <_rclc_execute.part.0+0xa6>
 800ef1c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800ef20:	6880      	ldr	r0, [r0, #8]
 800ef22:	4798      	blx	r3
 800ef24:	f104 0110 	add.w	r1, r4, #16
 800ef28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ef2a:	6860      	ldr	r0, [r4, #4]
 800ef2c:	f006 fc0e 	bl	801574c <rcl_send_response>
 800ef30:	b138      	cbz	r0, 800ef42 <_rclc_execute.part.0+0x4a>
 800ef32:	9001      	str	r0, [sp, #4]
 800ef34:	f000 fbee 	bl	800f714 <rcutils_reset_error>
 800ef38:	9801      	ldr	r0, [sp, #4]
 800ef3a:	e002      	b.n	800ef42 <_rclc_execute.part.0+0x4a>
 800ef3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef3e:	4798      	blx	r3
 800ef40:	2000      	movs	r0, #0
 800ef42:	b003      	add	sp, #12
 800ef44:	bd30      	pop	{r4, r5, pc}
 800ef46:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800ef4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef4c:	b96d      	cbnz	r5, 800ef6a <_rclc_execute.part.0+0x72>
 800ef4e:	4628      	mov	r0, r5
 800ef50:	4798      	blx	r3
 800ef52:	4628      	mov	r0, r5
 800ef54:	e7f5      	b.n	800ef42 <_rclc_execute.part.0+0x4a>
 800ef56:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800ef5a:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800ef5e:	b1d5      	cbz	r5, 800ef96 <_rclc_execute.part.0+0x9e>
 800ef60:	6880      	ldr	r0, [r0, #8]
 800ef62:	4798      	blx	r3
 800ef64:	2000      	movs	r0, #0
 800ef66:	e7ec      	b.n	800ef42 <_rclc_execute.part.0+0x4a>
 800ef68:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef6a:	68a0      	ldr	r0, [r4, #8]
 800ef6c:	4798      	blx	r3
 800ef6e:	2000      	movs	r0, #0
 800ef70:	b003      	add	sp, #12
 800ef72:	bd30      	pop	{r4, r5, pc}
 800ef74:	6840      	ldr	r0, [r0, #4]
 800ef76:	f006 fca3 	bl	80158c0 <rcl_timer_call>
 800ef7a:	f240 3321 	movw	r3, #801	; 0x321
 800ef7e:	4298      	cmp	r0, r3
 800ef80:	d1d6      	bne.n	800ef30 <_rclc_execute.part.0+0x38>
 800ef82:	2000      	movs	r0, #0
 800ef84:	e7dd      	b.n	800ef42 <_rclc_execute.part.0+0x4a>
 800ef86:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef88:	6880      	ldr	r0, [r0, #8]
 800ef8a:	f104 0110 	add.w	r1, r4, #16
 800ef8e:	4798      	blx	r3
 800ef90:	2000      	movs	r0, #0
 800ef92:	b003      	add	sp, #12
 800ef94:	bd30      	pop	{r4, r5, pc}
 800ef96:	4628      	mov	r0, r5
 800ef98:	4798      	blx	r3
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	e7d1      	b.n	800ef42 <_rclc_execute.part.0+0x4a>
 800ef9e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800efa0:	6880      	ldr	r0, [r0, #8]
 800efa2:	4798      	blx	r3
 800efa4:	f104 0110 	add.w	r1, r4, #16
 800efa8:	e7be      	b.n	800ef28 <_rclc_execute.part.0+0x30>
 800efaa:	f100 0110 	add.w	r1, r0, #16
 800efae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800efb0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800efb2:	6880      	ldr	r0, [r0, #8]
 800efb4:	9101      	str	r1, [sp, #4]
 800efb6:	4798      	blx	r3
 800efb8:	9901      	ldr	r1, [sp, #4]
 800efba:	e7b5      	b.n	800ef28 <_rclc_execute.part.0+0x30>
 800efbc:	2001      	movs	r0, #1
 800efbe:	e7c0      	b.n	800ef42 <_rclc_execute.part.0+0x4a>

0800efc0 <rclc_executor_init>:
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d063      	beq.n	800f08c <rclc_executor_init+0xcc>
 800efc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc8:	460f      	mov	r7, r1
 800efca:	b0ae      	sub	sp, #184	; 0xb8
 800efcc:	2900      	cmp	r1, #0
 800efce:	d055      	beq.n	800f07c <rclc_executor_init+0xbc>
 800efd0:	4605      	mov	r5, r0
 800efd2:	4618      	mov	r0, r3
 800efd4:	4616      	mov	r6, r2
 800efd6:	4698      	mov	r8, r3
 800efd8:	f000 fb78 	bl	800f6cc <rcutils_allocator_is_valid>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d04d      	beq.n	800f07c <rclc_executor_init+0xbc>
 800efe0:	2e00      	cmp	r6, #0
 800efe2:	d04b      	beq.n	800f07c <rclc_executor_init+0xbc>
 800efe4:	492e      	ldr	r1, [pc, #184]	; (800f0a0 <rclc_executor_init+0xe0>)
 800efe6:	2280      	movs	r2, #128	; 0x80
 800efe8:	a80e      	add	r0, sp, #56	; 0x38
 800efea:	f00b fb5c 	bl	801a6a6 <memcpy>
 800efee:	2400      	movs	r4, #0
 800eff0:	a90e      	add	r1, sp, #56	; 0x38
 800eff2:	2280      	movs	r2, #128	; 0x80
 800eff4:	4628      	mov	r0, r5
 800eff6:	f00b fb56 	bl	801a6a6 <memcpy>
 800effa:	602f      	str	r7, [r5, #0]
 800effc:	4668      	mov	r0, sp
 800effe:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800f002:	466f      	mov	r7, sp
 800f004:	f006 feb6 	bl	8015d74 <rcl_get_zero_initialized_wait_set>
 800f008:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f00a:	f105 0c14 	add.w	ip, r5, #20
 800f00e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f012:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f014:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f018:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f01a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f01e:	a31e      	add	r3, pc, #120	; (adr r3, 800f098 <rclc_executor_init+0xd8>)
 800f020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f024:	6839      	ldr	r1, [r7, #0]
 800f026:	f8cc 1000 	str.w	r1, [ip]
 800f02a:	f8d8 7000 	ldr.w	r7, [r8]
 800f02e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f032:	f8c5 8010 	str.w	r8, [r5, #16]
 800f036:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800f03a:	01b0      	lsls	r0, r6, #6
 800f03c:	47b8      	blx	r7
 800f03e:	6068      	str	r0, [r5, #4]
 800f040:	b908      	cbnz	r0, 800f046 <rclc_executor_init+0x86>
 800f042:	e025      	b.n	800f090 <rclc_executor_init+0xd0>
 800f044:	6868      	ldr	r0, [r5, #4]
 800f046:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f04a:	4631      	mov	r1, r6
 800f04c:	3401      	adds	r4, #1
 800f04e:	f000 fa01 	bl	800f454 <rclc_executor_handle_init>
 800f052:	42a6      	cmp	r6, r4
 800f054:	d1f6      	bne.n	800f044 <rclc_executor_init+0x84>
 800f056:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800f05a:	f000 f9ef 	bl	800f43c <rclc_executor_handle_counters_zero_init>
 800f05e:	686b      	ldr	r3, [r5, #4]
 800f060:	4a10      	ldr	r2, [pc, #64]	; (800f0a4 <rclc_executor_init+0xe4>)
 800f062:	672a      	str	r2, [r5, #112]	; 0x70
 800f064:	2000      	movs	r0, #0
 800f066:	6768      	str	r0, [r5, #116]	; 0x74
 800f068:	b163      	cbz	r3, 800f084 <rclc_executor_init+0xc4>
 800f06a:	692b      	ldr	r3, [r5, #16]
 800f06c:	b153      	cbz	r3, 800f084 <rclc_executor_init+0xc4>
 800f06e:	68ab      	ldr	r3, [r5, #8]
 800f070:	b143      	cbz	r3, 800f084 <rclc_executor_init+0xc4>
 800f072:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800f076:	b02e      	add	sp, #184	; 0xb8
 800f078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f07c:	200b      	movs	r0, #11
 800f07e:	b02e      	add	sp, #184	; 0xb8
 800f080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f084:	4618      	mov	r0, r3
 800f086:	b02e      	add	sp, #184	; 0xb8
 800f088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f08c:	200b      	movs	r0, #11
 800f08e:	4770      	bx	lr
 800f090:	200a      	movs	r0, #10
 800f092:	e7f4      	b.n	800f07e <rclc_executor_init+0xbe>
 800f094:	f3af 8000 	nop.w
 800f098:	3b9aca00 	.word	0x3b9aca00
 800f09c:	00000000 	.word	0x00000000
 800f0a0:	0801b838 	.word	0x0801b838
 800f0a4:	0800eed1 	.word	0x0800eed1

0800f0a8 <rclc_executor_add_subscription>:
 800f0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ac:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800f0b0:	b358      	cbz	r0, 800f10a <rclc_executor_add_subscription+0x62>
 800f0b2:	b351      	cbz	r1, 800f10a <rclc_executor_add_subscription+0x62>
 800f0b4:	b34a      	cbz	r2, 800f10a <rclc_executor_add_subscription+0x62>
 800f0b6:	b343      	cbz	r3, 800f10a <rclc_executor_add_subscription+0x62>
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800f0be:	4285      	cmp	r5, r0
 800f0c0:	d302      	bcc.n	800f0c8 <rclc_executor_add_subscription+0x20>
 800f0c2:	2001      	movs	r0, #1
 800f0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c8:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800f0cc:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800f0d0:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800f0d4:	f04f 0c00 	mov.w	ip, #0
 800f0d8:	f80e c008 	strb.w	ip, [lr, r8]
 800f0dc:	2001      	movs	r0, #1
 800f0de:	3501      	adds	r5, #1
 800f0e0:	f104 0814 	add.w	r8, r4, #20
 800f0e4:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800f0e8:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800f0ec:	6333      	str	r3, [r6, #48]	; 0x30
 800f0ee:	7077      	strb	r7, [r6, #1]
 800f0f0:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800f0f4:	4640      	mov	r0, r8
 800f0f6:	60e5      	str	r5, [r4, #12]
 800f0f8:	f006 fe4e 	bl	8015d98 <rcl_wait_set_is_valid>
 800f0fc:	b940      	cbnz	r0, 800f110 <rclc_executor_add_subscription+0x68>
 800f0fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f100:	3301      	adds	r3, #1
 800f102:	64a3      	str	r3, [r4, #72]	; 0x48
 800f104:	2000      	movs	r0, #0
 800f106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f10a:	200b      	movs	r0, #11
 800f10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f110:	4640      	mov	r0, r8
 800f112:	f006 fe47 	bl	8015da4 <rcl_wait_set_fini>
 800f116:	2800      	cmp	r0, #0
 800f118:	d0f1      	beq.n	800f0fe <rclc_executor_add_subscription+0x56>
 800f11a:	e7d3      	b.n	800f0c4 <rclc_executor_add_subscription+0x1c>

0800f11c <rclc_executor_prepare>:
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d03d      	beq.n	800f19c <rclc_executor_prepare+0x80>
 800f120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f124:	f100 0814 	add.w	r8, r0, #20
 800f128:	b09a      	sub	sp, #104	; 0x68
 800f12a:	4604      	mov	r4, r0
 800f12c:	4640      	mov	r0, r8
 800f12e:	f006 fe33 	bl	8015d98 <rcl_wait_set_is_valid>
 800f132:	b118      	cbz	r0, 800f13c <rclc_executor_prepare+0x20>
 800f134:	2000      	movs	r0, #0
 800f136:	b01a      	add	sp, #104	; 0x68
 800f138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f13c:	4640      	mov	r0, r8
 800f13e:	f006 fe31 	bl	8015da4 <rcl_wait_set_fini>
 800f142:	2800      	cmp	r0, #0
 800f144:	d127      	bne.n	800f196 <rclc_executor_prepare+0x7a>
 800f146:	a80c      	add	r0, sp, #48	; 0x30
 800f148:	ad0c      	add	r5, sp, #48	; 0x30
 800f14a:	f006 fe13 	bl	8015d74 <rcl_get_zero_initialized_wait_set>
 800f14e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f150:	4646      	mov	r6, r8
 800f152:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f156:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f15a:	6927      	ldr	r7, [r4, #16]
 800f15c:	682d      	ldr	r5, [r5, #0]
 800f15e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f160:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f162:	6035      	str	r5, [r6, #0]
 800f164:	ad04      	add	r5, sp, #16
 800f166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f168:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800f16c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f16e:	6826      	ldr	r6, [r4, #0]
 800f170:	6838      	ldr	r0, [r7, #0]
 800f172:	6028      	str	r0, [r5, #0]
 800f174:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800f178:	e9cd 3200 	strd	r3, r2, [sp]
 800f17c:	4640      	mov	r0, r8
 800f17e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f180:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f182:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f184:	f007 f92c 	bl	80163e0 <rcl_wait_set_init>
 800f188:	2800      	cmp	r0, #0
 800f18a:	d0d4      	beq.n	800f136 <rclc_executor_prepare+0x1a>
 800f18c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f18e:	f000 fac1 	bl	800f714 <rcutils_reset_error>
 800f192:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f194:	e7cf      	b.n	800f136 <rclc_executor_prepare+0x1a>
 800f196:	f000 fabd 	bl	800f714 <rcutils_reset_error>
 800f19a:	e7d4      	b.n	800f146 <rclc_executor_prepare+0x2a>
 800f19c:	200b      	movs	r0, #11
 800f19e:	4770      	bx	lr

0800f1a0 <rclc_executor_spin_some.part.0>:
 800f1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a4:	f100 0814 	add.w	r8, r0, #20
 800f1a8:	b083      	sub	sp, #12
 800f1aa:	4692      	mov	sl, r2
 800f1ac:	4699      	mov	r9, r3
 800f1ae:	4605      	mov	r5, r0
 800f1b0:	f7ff ffb4 	bl	800f11c <rclc_executor_prepare>
 800f1b4:	4640      	mov	r0, r8
 800f1b6:	f006 fec1 	bl	8015f3c <rcl_wait_set_clear>
 800f1ba:	4607      	mov	r7, r0
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	f040 80be 	bne.w	800f33e <rclc_executor_spin_some.part.0+0x19e>
 800f1c2:	68ab      	ldr	r3, [r5, #8]
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	b1eb      	cbz	r3, 800f204 <rclc_executor_spin_some.part.0+0x64>
 800f1c8:	686e      	ldr	r6, [r5, #4]
 800f1ca:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800f1ce:	01a2      	lsls	r2, r4, #6
 800f1d0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800f1d4:	b1b3      	cbz	r3, 800f204 <rclc_executor_spin_some.part.0+0x64>
 800f1d6:	5cb3      	ldrb	r3, [r6, r2]
 800f1d8:	2b08      	cmp	r3, #8
 800f1da:	f200 80a9 	bhi.w	800f330 <rclc_executor_spin_some.part.0+0x190>
 800f1de:	e8df f003 	tbb	[pc, r3]
 800f1e2:	8989      	.short	0x8989
 800f1e4:	057b7b93 	.word	0x057b7b93
 800f1e8:	0505      	.short	0x0505
 800f1ea:	9d          	.byte	0x9d
 800f1eb:	00          	.byte	0x00
 800f1ec:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f1f0:	4640      	mov	r0, r8
 800f1f2:	6849      	ldr	r1, [r1, #4]
 800f1f4:	f007 fa0a 	bl	801660c <rcl_wait_set_add_service>
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d175      	bne.n	800f2e8 <rclc_executor_spin_some.part.0+0x148>
 800f1fc:	68ab      	ldr	r3, [r5, #8]
 800f1fe:	3401      	adds	r4, #1
 800f200:	429c      	cmp	r4, r3
 800f202:	d3e1      	bcc.n	800f1c8 <rclc_executor_spin_some.part.0+0x28>
 800f204:	464b      	mov	r3, r9
 800f206:	4652      	mov	r2, sl
 800f208:	4640      	mov	r0, r8
 800f20a:	f007 fa2d 	bl	8016668 <rcl_wait>
 800f20e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800f212:	2b00      	cmp	r3, #0
 800f214:	f000 809b 	beq.w	800f34e <rclc_executor_spin_some.part.0+0x1ae>
 800f218:	2b01      	cmp	r3, #1
 800f21a:	f040 8089 	bne.w	800f330 <rclc_executor_spin_some.part.0+0x190>
 800f21e:	68ab      	ldr	r3, [r5, #8]
 800f220:	2b00      	cmp	r3, #0
 800f222:	f000 80ef 	beq.w	800f404 <rclc_executor_spin_some.part.0+0x264>
 800f226:	2400      	movs	r4, #0
 800f228:	4626      	mov	r6, r4
 800f22a:	f240 1991 	movw	r9, #401	; 0x191
 800f22e:	e00a      	b.n	800f246 <rclc_executor_spin_some.part.0+0xa6>
 800f230:	f7ff fdd2 	bl	800edd8 <_rclc_check_for_new_data>
 800f234:	4604      	mov	r4, r0
 800f236:	b110      	cbz	r0, 800f23e <rclc_executor_spin_some.part.0+0x9e>
 800f238:	4548      	cmp	r0, r9
 800f23a:	f040 8086 	bne.w	800f34a <rclc_executor_spin_some.part.0+0x1aa>
 800f23e:	68ab      	ldr	r3, [r5, #8]
 800f240:	429e      	cmp	r6, r3
 800f242:	f080 80db 	bcs.w	800f3fc <rclc_executor_spin_some.part.0+0x25c>
 800f246:	686a      	ldr	r2, [r5, #4]
 800f248:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f24c:	4641      	mov	r1, r8
 800f24e:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800f252:	3601      	adds	r6, #1
 800f254:	f1bc 0f00 	cmp.w	ip, #0
 800f258:	d1ea      	bne.n	800f230 <rclc_executor_spin_some.part.0+0x90>
 800f25a:	4619      	mov	r1, r3
 800f25c:	4610      	mov	r0, r2
 800f25e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800f262:	4798      	blx	r3
 800f264:	2800      	cmp	r0, #0
 800f266:	d070      	beq.n	800f34a <rclc_executor_spin_some.part.0+0x1aa>
 800f268:	68aa      	ldr	r2, [r5, #8]
 800f26a:	2a00      	cmp	r2, #0
 800f26c:	d06d      	beq.n	800f34a <rclc_executor_spin_some.part.0+0x1aa>
 800f26e:	2600      	movs	r6, #0
 800f270:	f240 1991 	movw	r9, #401	; 0x191
 800f274:	e008      	b.n	800f288 <rclc_executor_spin_some.part.0+0xe8>
 800f276:	f7ff fdd5 	bl	800ee24 <_rclc_take_new_data>
 800f27a:	4604      	mov	r4, r0
 800f27c:	b108      	cbz	r0, 800f282 <rclc_executor_spin_some.part.0+0xe2>
 800f27e:	4548      	cmp	r0, r9
 800f280:	d163      	bne.n	800f34a <rclc_executor_spin_some.part.0+0x1aa>
 800f282:	68aa      	ldr	r2, [r5, #8]
 800f284:	4296      	cmp	r6, r2
 800f286:	d208      	bcs.n	800f29a <rclc_executor_spin_some.part.0+0xfa>
 800f288:	6868      	ldr	r0, [r5, #4]
 800f28a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800f28e:	4641      	mov	r1, r8
 800f290:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f294:	3601      	adds	r6, #1
 800f296:	2b00      	cmp	r3, #0
 800f298:	d1ed      	bne.n	800f276 <rclc_executor_spin_some.part.0+0xd6>
 800f29a:	2600      	movs	r6, #0
 800f29c:	b932      	cbnz	r2, 800f2ac <rclc_executor_spin_some.part.0+0x10c>
 800f29e:	e054      	b.n	800f34a <rclc_executor_spin_some.part.0+0x1aa>
 800f2a0:	2901      	cmp	r1, #1
 800f2a2:	d012      	beq.n	800f2ca <rclc_executor_spin_some.part.0+0x12a>
 800f2a4:	3601      	adds	r6, #1
 800f2a6:	4296      	cmp	r6, r2
 800f2a8:	d245      	bcs.n	800f336 <rclc_executor_spin_some.part.0+0x196>
 800f2aa:	2400      	movs	r4, #0
 800f2ac:	686b      	ldr	r3, [r5, #4]
 800f2ae:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800f2b8:	2900      	cmp	r1, #0
 800f2ba:	d046      	beq.n	800f34a <rclc_executor_spin_some.part.0+0x1aa>
 800f2bc:	7859      	ldrb	r1, [r3, #1]
 800f2be:	2900      	cmp	r1, #0
 800f2c0:	d1ee      	bne.n	800f2a0 <rclc_executor_spin_some.part.0+0x100>
 800f2c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d0ec      	beq.n	800f2a4 <rclc_executor_spin_some.part.0+0x104>
 800f2ca:	f7ff fe15 	bl	800eef8 <_rclc_execute.part.0>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	f040 8096 	bne.w	800f400 <rclc_executor_spin_some.part.0+0x260>
 800f2d4:	68aa      	ldr	r2, [r5, #8]
 800f2d6:	e7e5      	b.n	800f2a4 <rclc_executor_spin_some.part.0+0x104>
 800f2d8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f2dc:	4640      	mov	r0, r8
 800f2de:	6849      	ldr	r1, [r1, #4]
 800f2e0:	f007 f968 	bl	80165b4 <rcl_wait_set_add_client>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d089      	beq.n	800f1fc <rclc_executor_spin_some.part.0+0x5c>
 800f2e8:	9001      	str	r0, [sp, #4]
 800f2ea:	f000 fa13 	bl	800f714 <rcutils_reset_error>
 800f2ee:	9801      	ldr	r0, [sp, #4]
 800f2f0:	4607      	mov	r7, r0
 800f2f2:	e020      	b.n	800f336 <rclc_executor_spin_some.part.0+0x196>
 800f2f4:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f2f8:	4640      	mov	r0, r8
 800f2fa:	6849      	ldr	r1, [r1, #4]
 800f2fc:	f006 fdf2 	bl	8015ee4 <rcl_wait_set_add_subscription>
 800f300:	2800      	cmp	r0, #0
 800f302:	f43f af7b 	beq.w	800f1fc <rclc_executor_spin_some.part.0+0x5c>
 800f306:	e7ef      	b.n	800f2e8 <rclc_executor_spin_some.part.0+0x148>
 800f308:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f30c:	4640      	mov	r0, r8
 800f30e:	6849      	ldr	r1, [r1, #4]
 800f310:	f007 f920 	bl	8016554 <rcl_wait_set_add_timer>
 800f314:	2800      	cmp	r0, #0
 800f316:	f43f af71 	beq.w	800f1fc <rclc_executor_spin_some.part.0+0x5c>
 800f31a:	e7e5      	b.n	800f2e8 <rclc_executor_spin_some.part.0+0x148>
 800f31c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f320:	4640      	mov	r0, r8
 800f322:	6849      	ldr	r1, [r1, #4]
 800f324:	f007 f8ea 	bl	80164fc <rcl_wait_set_add_guard_condition>
 800f328:	2800      	cmp	r0, #0
 800f32a:	f43f af67 	beq.w	800f1fc <rclc_executor_spin_some.part.0+0x5c>
 800f32e:	e7db      	b.n	800f2e8 <rclc_executor_spin_some.part.0+0x148>
 800f330:	f000 f9f0 	bl	800f714 <rcutils_reset_error>
 800f334:	2701      	movs	r7, #1
 800f336:	4638      	mov	r0, r7
 800f338:	b003      	add	sp, #12
 800f33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f33e:	f000 f9e9 	bl	800f714 <rcutils_reset_error>
 800f342:	4638      	mov	r0, r7
 800f344:	b003      	add	sp, #12
 800f346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f34a:	4627      	mov	r7, r4
 800f34c:	e7f3      	b.n	800f336 <rclc_executor_spin_some.part.0+0x196>
 800f34e:	68ab      	ldr	r3, [r5, #8]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d05a      	beq.n	800f40a <rclc_executor_spin_some.part.0+0x26a>
 800f354:	2400      	movs	r4, #0
 800f356:	4626      	mov	r6, r4
 800f358:	f240 1991 	movw	r9, #401	; 0x191
 800f35c:	e008      	b.n	800f370 <rclc_executor_spin_some.part.0+0x1d0>
 800f35e:	f7ff fd3b 	bl	800edd8 <_rclc_check_for_new_data>
 800f362:	4604      	mov	r4, r0
 800f364:	b108      	cbz	r0, 800f36a <rclc_executor_spin_some.part.0+0x1ca>
 800f366:	4548      	cmp	r0, r9
 800f368:	d1ef      	bne.n	800f34a <rclc_executor_spin_some.part.0+0x1aa>
 800f36a:	68ab      	ldr	r3, [r5, #8]
 800f36c:	429e      	cmp	r6, r3
 800f36e:	d243      	bcs.n	800f3f8 <rclc_executor_spin_some.part.0+0x258>
 800f370:	686a      	ldr	r2, [r5, #4]
 800f372:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f376:	4641      	mov	r1, r8
 800f378:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800f37c:	3601      	adds	r6, #1
 800f37e:	f1bc 0f00 	cmp.w	ip, #0
 800f382:	d1ec      	bne.n	800f35e <rclc_executor_spin_some.part.0+0x1be>
 800f384:	4619      	mov	r1, r3
 800f386:	4610      	mov	r0, r2
 800f388:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800f38c:	4798      	blx	r3
 800f38e:	2800      	cmp	r0, #0
 800f390:	d0db      	beq.n	800f34a <rclc_executor_spin_some.part.0+0x1aa>
 800f392:	68ab      	ldr	r3, [r5, #8]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d0d8      	beq.n	800f34a <rclc_executor_spin_some.part.0+0x1aa>
 800f398:	f04f 0a00 	mov.w	sl, #0
 800f39c:	f240 1691 	movw	r6, #401	; 0x191
 800f3a0:	f240 2959 	movw	r9, #601	; 0x259
 800f3a4:	e00b      	b.n	800f3be <rclc_executor_spin_some.part.0+0x21e>
 800f3a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800f3aa:	b113      	cbz	r3, 800f3b2 <rclc_executor_spin_some.part.0+0x212>
 800f3ac:	f7ff fda4 	bl	800eef8 <_rclc_execute.part.0>
 800f3b0:	bb30      	cbnz	r0, 800f400 <rclc_executor_spin_some.part.0+0x260>
 800f3b2:	68ab      	ldr	r3, [r5, #8]
 800f3b4:	f10a 0a01 	add.w	sl, sl, #1
 800f3b8:	459a      	cmp	sl, r3
 800f3ba:	d2bc      	bcs.n	800f336 <rclc_executor_spin_some.part.0+0x196>
 800f3bc:	2400      	movs	r4, #0
 800f3be:	6868      	ldr	r0, [r5, #4]
 800f3c0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f3c4:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f3c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d0bc      	beq.n	800f34a <rclc_executor_spin_some.part.0+0x1aa>
 800f3d0:	4641      	mov	r1, r8
 800f3d2:	f7ff fd27 	bl	800ee24 <_rclc_take_new_data>
 800f3d6:	b118      	cbz	r0, 800f3e0 <rclc_executor_spin_some.part.0+0x240>
 800f3d8:	42b0      	cmp	r0, r6
 800f3da:	d001      	beq.n	800f3e0 <rclc_executor_spin_some.part.0+0x240>
 800f3dc:	4548      	cmp	r0, r9
 800f3de:	d10f      	bne.n	800f400 <rclc_executor_spin_some.part.0+0x260>
 800f3e0:	6868      	ldr	r0, [r5, #4]
 800f3e2:	eb10 000b 	adds.w	r0, r0, fp
 800f3e6:	d005      	beq.n	800f3f4 <rclc_executor_spin_some.part.0+0x254>
 800f3e8:	7843      	ldrb	r3, [r0, #1]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d0db      	beq.n	800f3a6 <rclc_executor_spin_some.part.0+0x206>
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	d1df      	bne.n	800f3b2 <rclc_executor_spin_some.part.0+0x212>
 800f3f2:	e7db      	b.n	800f3ac <rclc_executor_spin_some.part.0+0x20c>
 800f3f4:	270b      	movs	r7, #11
 800f3f6:	e79e      	b.n	800f336 <rclc_executor_spin_some.part.0+0x196>
 800f3f8:	686a      	ldr	r2, [r5, #4]
 800f3fa:	e7c3      	b.n	800f384 <rclc_executor_spin_some.part.0+0x1e4>
 800f3fc:	686a      	ldr	r2, [r5, #4]
 800f3fe:	e72c      	b.n	800f25a <rclc_executor_spin_some.part.0+0xba>
 800f400:	4607      	mov	r7, r0
 800f402:	e798      	b.n	800f336 <rclc_executor_spin_some.part.0+0x196>
 800f404:	686a      	ldr	r2, [r5, #4]
 800f406:	461c      	mov	r4, r3
 800f408:	e727      	b.n	800f25a <rclc_executor_spin_some.part.0+0xba>
 800f40a:	686a      	ldr	r2, [r5, #4]
 800f40c:	461c      	mov	r4, r3
 800f40e:	e7b9      	b.n	800f384 <rclc_executor_spin_some.part.0+0x1e4>

0800f410 <rclc_executor_spin_some>:
 800f410:	b190      	cbz	r0, 800f438 <rclc_executor_spin_some+0x28>
 800f412:	b570      	push	{r4, r5, r6, lr}
 800f414:	4604      	mov	r4, r0
 800f416:	6800      	ldr	r0, [r0, #0]
 800f418:	4616      	mov	r6, r2
 800f41a:	461d      	mov	r5, r3
 800f41c:	f005 faa2 	bl	8014964 <rcl_context_is_valid>
 800f420:	b130      	cbz	r0, 800f430 <rclc_executor_spin_some+0x20>
 800f422:	4632      	mov	r2, r6
 800f424:	462b      	mov	r3, r5
 800f426:	4620      	mov	r0, r4
 800f428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f42c:	f7ff beb8 	b.w	800f1a0 <rclc_executor_spin_some.part.0>
 800f430:	f000 f970 	bl	800f714 <rcutils_reset_error>
 800f434:	2001      	movs	r0, #1
 800f436:	bd70      	pop	{r4, r5, r6, pc}
 800f438:	200b      	movs	r0, #11
 800f43a:	4770      	bx	lr

0800f43c <rclc_executor_handle_counters_zero_init>:
 800f43c:	b140      	cbz	r0, 800f450 <rclc_executor_handle_counters_zero_init+0x14>
 800f43e:	2300      	movs	r3, #0
 800f440:	6003      	str	r3, [r0, #0]
 800f442:	6043      	str	r3, [r0, #4]
 800f444:	6083      	str	r3, [r0, #8]
 800f446:	60c3      	str	r3, [r0, #12]
 800f448:	6103      	str	r3, [r0, #16]
 800f44a:	6143      	str	r3, [r0, #20]
 800f44c:	4618      	mov	r0, r3
 800f44e:	4770      	bx	lr
 800f450:	200b      	movs	r0, #11
 800f452:	4770      	bx	lr

0800f454 <rclc_executor_handle_init>:
 800f454:	b178      	cbz	r0, 800f476 <rclc_executor_handle_init+0x22>
 800f456:	b430      	push	{r4, r5}
 800f458:	4603      	mov	r3, r0
 800f45a:	2209      	movs	r2, #9
 800f45c:	2000      	movs	r0, #0
 800f45e:	2400      	movs	r4, #0
 800f460:	2500      	movs	r5, #0
 800f462:	801a      	strh	r2, [r3, #0]
 800f464:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800f468:	bc30      	pop	{r4, r5}
 800f46a:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800f46e:	6359      	str	r1, [r3, #52]	; 0x34
 800f470:	6318      	str	r0, [r3, #48]	; 0x30
 800f472:	8718      	strh	r0, [r3, #56]	; 0x38
 800f474:	4770      	bx	lr
 800f476:	200b      	movs	r0, #11
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop

0800f47c <rclc_support_init>:
 800f47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f480:	b086      	sub	sp, #24
 800f482:	2800      	cmp	r0, #0
 800f484:	d042      	beq.n	800f50c <rclc_support_init+0x90>
 800f486:	461c      	mov	r4, r3
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d03f      	beq.n	800f50c <rclc_support_init+0x90>
 800f48c:	460f      	mov	r7, r1
 800f48e:	4690      	mov	r8, r2
 800f490:	4606      	mov	r6, r0
 800f492:	f005 fd47 	bl	8014f24 <rcl_get_zero_initialized_init_options>
 800f496:	4603      	mov	r3, r0
 800f498:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800f49c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f4a0:	9305      	str	r3, [sp, #20]
 800f4a2:	a805      	add	r0, sp, #20
 800f4a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f4a8:	f005 fd3e 	bl	8014f28 <rcl_init_options_init>
 800f4ac:	4605      	mov	r5, r0
 800f4ae:	bb38      	cbnz	r0, 800f500 <rclc_support_init+0x84>
 800f4b0:	f005 fd38 	bl	8014f24 <rcl_get_zero_initialized_init_options>
 800f4b4:	4631      	mov	r1, r6
 800f4b6:	6030      	str	r0, [r6, #0]
 800f4b8:	a805      	add	r0, sp, #20
 800f4ba:	f005 fdab 	bl	8015014 <rcl_init_options_copy>
 800f4be:	4605      	mov	r5, r0
 800f4c0:	b9c0      	cbnz	r0, 800f4f4 <rclc_support_init+0x78>
 800f4c2:	ad02      	add	r5, sp, #8
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	f005 fa43 	bl	8014950 <rcl_get_zero_initialized_context>
 800f4ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f4ce:	1d33      	adds	r3, r6, #4
 800f4d0:	e883 0003 	stmia.w	r3, {r0, r1}
 800f4d4:	4632      	mov	r2, r6
 800f4d6:	4641      	mov	r1, r8
 800f4d8:	4638      	mov	r0, r7
 800f4da:	f005 fc19 	bl	8014d10 <rcl_init>
 800f4de:	4605      	mov	r5, r0
 800f4e0:	b940      	cbnz	r0, 800f4f4 <rclc_support_init+0x78>
 800f4e2:	60f4      	str	r4, [r6, #12]
 800f4e4:	4622      	mov	r2, r4
 800f4e6:	f106 0110 	add.w	r1, r6, #16
 800f4ea:	2003      	movs	r0, #3
 800f4ec:	f006 f95c 	bl	80157a8 <rcl_clock_init>
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	b108      	cbz	r0, 800f4f8 <rclc_support_init+0x7c>
 800f4f4:	f000 f90e 	bl	800f714 <rcutils_reset_error>
 800f4f8:	a805      	add	r0, sp, #20
 800f4fa:	f005 fd67 	bl	8014fcc <rcl_init_options_fini>
 800f4fe:	b108      	cbz	r0, 800f504 <rclc_support_init+0x88>
 800f500:	f000 f908 	bl	800f714 <rcutils_reset_error>
 800f504:	4628      	mov	r0, r5
 800f506:	b006      	add	sp, #24
 800f508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f50c:	250b      	movs	r5, #11
 800f50e:	4628      	mov	r0, r5
 800f510:	b006      	add	sp, #24
 800f512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f516:	bf00      	nop

0800f518 <rclc_node_init_with_options>:
 800f518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f51c:	b087      	sub	sp, #28
 800f51e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f520:	b1e0      	cbz	r0, 800f55c <rclc_node_init_with_options+0x44>
 800f522:	460d      	mov	r5, r1
 800f524:	b1d1      	cbz	r1, 800f55c <rclc_node_init_with_options+0x44>
 800f526:	4616      	mov	r6, r2
 800f528:	b1c2      	cbz	r2, 800f55c <rclc_node_init_with_options+0x44>
 800f52a:	4698      	mov	r8, r3
 800f52c:	b1b3      	cbz	r3, 800f55c <rclc_node_init_with_options+0x44>
 800f52e:	b1af      	cbz	r7, 800f55c <rclc_node_init_with_options+0x44>
 800f530:	f10d 0910 	add.w	r9, sp, #16
 800f534:	4604      	mov	r4, r0
 800f536:	4648      	mov	r0, r9
 800f538:	f005 fe34 	bl	80151a4 <rcl_get_zero_initialized_node>
 800f53c:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f540:	f108 0304 	add.w	r3, r8, #4
 800f544:	9700      	str	r7, [sp, #0]
 800f546:	4632      	mov	r2, r6
 800f548:	e884 0003 	stmia.w	r4, {r0, r1}
 800f54c:	4629      	mov	r1, r5
 800f54e:	4620      	mov	r0, r4
 800f550:	f005 fe32 	bl	80151b8 <rcl_node_init>
 800f554:	b930      	cbnz	r0, 800f564 <rclc_node_init_with_options+0x4c>
 800f556:	b007      	add	sp, #28
 800f558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f55c:	200b      	movs	r0, #11
 800f55e:	b007      	add	sp, #28
 800f560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f564:	9003      	str	r0, [sp, #12]
 800f566:	f000 f8d5 	bl	800f714 <rcutils_reset_error>
 800f56a:	9803      	ldr	r0, [sp, #12]
 800f56c:	b007      	add	sp, #28
 800f56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f572:	bf00      	nop

0800f574 <rclc_publisher_init_default>:
 800f574:	b368      	cbz	r0, 800f5d2 <rclc_publisher_init_default+0x5e>
 800f576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f57a:	460d      	mov	r5, r1
 800f57c:	b09e      	sub	sp, #120	; 0x78
 800f57e:	b321      	cbz	r1, 800f5ca <rclc_publisher_init_default+0x56>
 800f580:	4616      	mov	r6, r2
 800f582:	b312      	cbz	r2, 800f5ca <rclc_publisher_init_default+0x56>
 800f584:	461f      	mov	r7, r3
 800f586:	b303      	cbz	r3, 800f5ca <rclc_publisher_init_default+0x56>
 800f588:	4604      	mov	r4, r0
 800f58a:	f7ff f969 	bl	800e860 <rcl_get_zero_initialized_publisher>
 800f58e:	f10d 0810 	add.w	r8, sp, #16
 800f592:	6020      	str	r0, [r4, #0]
 800f594:	4640      	mov	r0, r8
 800f596:	f7ff fa5f 	bl	800ea58 <rcl_publisher_get_default_options>
 800f59a:	490f      	ldr	r1, [pc, #60]	; (800f5d8 <rclc_publisher_init_default+0x64>)
 800f59c:	2250      	movs	r2, #80	; 0x50
 800f59e:	4640      	mov	r0, r8
 800f5a0:	f00b f881 	bl	801a6a6 <memcpy>
 800f5a4:	f8cd 8000 	str.w	r8, [sp]
 800f5a8:	463b      	mov	r3, r7
 800f5aa:	4632      	mov	r2, r6
 800f5ac:	4629      	mov	r1, r5
 800f5ae:	4620      	mov	r0, r4
 800f5b0:	f7ff f95c 	bl	800e86c <rcl_publisher_init>
 800f5b4:	b910      	cbnz	r0, 800f5bc <rclc_publisher_init_default+0x48>
 800f5b6:	b01e      	add	sp, #120	; 0x78
 800f5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5bc:	9003      	str	r0, [sp, #12]
 800f5be:	f000 f8a9 	bl	800f714 <rcutils_reset_error>
 800f5c2:	9803      	ldr	r0, [sp, #12]
 800f5c4:	b01e      	add	sp, #120	; 0x78
 800f5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ca:	200b      	movs	r0, #11
 800f5cc:	b01e      	add	sp, #120	; 0x78
 800f5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d2:	200b      	movs	r0, #11
 800f5d4:	4770      	bx	lr
 800f5d6:	bf00      	nop
 800f5d8:	0801b8b8 	.word	0x0801b8b8

0800f5dc <rclc_subscription_init_default>:
 800f5dc:	b368      	cbz	r0, 800f63a <rclc_subscription_init_default+0x5e>
 800f5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e2:	460d      	mov	r5, r1
 800f5e4:	b0a0      	sub	sp, #128	; 0x80
 800f5e6:	b321      	cbz	r1, 800f632 <rclc_subscription_init_default+0x56>
 800f5e8:	4616      	mov	r6, r2
 800f5ea:	b312      	cbz	r2, 800f632 <rclc_subscription_init_default+0x56>
 800f5ec:	461f      	mov	r7, r3
 800f5ee:	b303      	cbz	r3, 800f632 <rclc_subscription_init_default+0x56>
 800f5f0:	4604      	mov	r4, r0
 800f5f2:	f7ff fa77 	bl	800eae4 <rcl_get_zero_initialized_subscription>
 800f5f6:	f10d 0810 	add.w	r8, sp, #16
 800f5fa:	6020      	str	r0, [r4, #0]
 800f5fc:	4640      	mov	r0, r8
 800f5fe:	f7ff fb6d 	bl	800ecdc <rcl_subscription_get_default_options>
 800f602:	490f      	ldr	r1, [pc, #60]	; (800f640 <rclc_subscription_init_default+0x64>)
 800f604:	2250      	movs	r2, #80	; 0x50
 800f606:	4640      	mov	r0, r8
 800f608:	f00b f84d 	bl	801a6a6 <memcpy>
 800f60c:	f8cd 8000 	str.w	r8, [sp]
 800f610:	463b      	mov	r3, r7
 800f612:	4632      	mov	r2, r6
 800f614:	4629      	mov	r1, r5
 800f616:	4620      	mov	r0, r4
 800f618:	f7ff fa6a 	bl	800eaf0 <rcl_subscription_init>
 800f61c:	b910      	cbnz	r0, 800f624 <rclc_subscription_init_default+0x48>
 800f61e:	b020      	add	sp, #128	; 0x80
 800f620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f624:	9003      	str	r0, [sp, #12]
 800f626:	f000 f875 	bl	800f714 <rcutils_reset_error>
 800f62a:	9803      	ldr	r0, [sp, #12]
 800f62c:	b020      	add	sp, #128	; 0x80
 800f62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f632:	200b      	movs	r0, #11
 800f634:	b020      	add	sp, #128	; 0x80
 800f636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f63a:	200b      	movs	r0, #11
 800f63c:	4770      	bx	lr
 800f63e:	bf00      	nop
 800f640:	0801b908 	.word	0x0801b908

0800f644 <__default_zero_allocate>:
 800f644:	f00a b9ec 	b.w	8019a20 <calloc>

0800f648 <__default_reallocate>:
 800f648:	f00a bb78 	b.w	8019d3c <realloc>

0800f64c <__default_deallocate>:
 800f64c:	f00a ba56 	b.w	8019afc <free>

0800f650 <__default_allocate>:
 800f650:	f00a ba4c 	b.w	8019aec <malloc>

0800f654 <rcutils_get_zero_initialized_allocator>:
 800f654:	b470      	push	{r4, r5, r6}
 800f656:	4d05      	ldr	r5, [pc, #20]	; (800f66c <rcutils_get_zero_initialized_allocator+0x18>)
 800f658:	4606      	mov	r6, r0
 800f65a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f65c:	4634      	mov	r4, r6
 800f65e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f660:	682b      	ldr	r3, [r5, #0]
 800f662:	6023      	str	r3, [r4, #0]
 800f664:	4630      	mov	r0, r6
 800f666:	bc70      	pop	{r4, r5, r6}
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	0801b958 	.word	0x0801b958

0800f670 <rcutils_set_default_allocator>:
 800f670:	b1a0      	cbz	r0, 800f69c <rcutils_set_default_allocator+0x2c>
 800f672:	6801      	ldr	r1, [r0, #0]
 800f674:	b199      	cbz	r1, 800f69e <rcutils_set_default_allocator+0x2e>
 800f676:	b430      	push	{r4, r5}
 800f678:	6844      	ldr	r4, [r0, #4]
 800f67a:	b194      	cbz	r4, 800f6a2 <rcutils_set_default_allocator+0x32>
 800f67c:	68c5      	ldr	r5, [r0, #12]
 800f67e:	b15d      	cbz	r5, 800f698 <rcutils_set_default_allocator+0x28>
 800f680:	6883      	ldr	r3, [r0, #8]
 800f682:	b18b      	cbz	r3, 800f6a8 <rcutils_set_default_allocator+0x38>
 800f684:	4a09      	ldr	r2, [pc, #36]	; (800f6ac <rcutils_set_default_allocator+0x3c>)
 800f686:	e9c2 1400 	strd	r1, r4, [r2]
 800f68a:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800f68e:	2000      	movs	r0, #0
 800f690:	6110      	str	r0, [r2, #16]
 800f692:	2001      	movs	r0, #1
 800f694:	bc30      	pop	{r4, r5}
 800f696:	4770      	bx	lr
 800f698:	4628      	mov	r0, r5
 800f69a:	e7fb      	b.n	800f694 <rcutils_set_default_allocator+0x24>
 800f69c:	4770      	bx	lr
 800f69e:	4608      	mov	r0, r1
 800f6a0:	4770      	bx	lr
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	bc30      	pop	{r4, r5}
 800f6a6:	4770      	bx	lr
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	e7f3      	b.n	800f694 <rcutils_set_default_allocator+0x24>
 800f6ac:	20000054 	.word	0x20000054

0800f6b0 <rcutils_get_default_allocator>:
 800f6b0:	b470      	push	{r4, r5, r6}
 800f6b2:	4d05      	ldr	r5, [pc, #20]	; (800f6c8 <rcutils_get_default_allocator+0x18>)
 800f6b4:	4606      	mov	r6, r0
 800f6b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f6b8:	4634      	mov	r4, r6
 800f6ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6bc:	682b      	ldr	r3, [r5, #0]
 800f6be:	6023      	str	r3, [r4, #0]
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	bc70      	pop	{r4, r5, r6}
 800f6c4:	4770      	bx	lr
 800f6c6:	bf00      	nop
 800f6c8:	20000054 	.word	0x20000054

0800f6cc <rcutils_allocator_is_valid>:
 800f6cc:	b158      	cbz	r0, 800f6e6 <rcutils_allocator_is_valid+0x1a>
 800f6ce:	6803      	ldr	r3, [r0, #0]
 800f6d0:	b143      	cbz	r3, 800f6e4 <rcutils_allocator_is_valid+0x18>
 800f6d2:	6843      	ldr	r3, [r0, #4]
 800f6d4:	b133      	cbz	r3, 800f6e4 <rcutils_allocator_is_valid+0x18>
 800f6d6:	68c3      	ldr	r3, [r0, #12]
 800f6d8:	b123      	cbz	r3, 800f6e4 <rcutils_allocator_is_valid+0x18>
 800f6da:	6880      	ldr	r0, [r0, #8]
 800f6dc:	3800      	subs	r0, #0
 800f6de:	bf18      	it	ne
 800f6e0:	2001      	movne	r0, #1
 800f6e2:	4770      	bx	lr
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	4770      	bx	lr

0800f6e8 <rcutils_get_error_string>:
 800f6e8:	4b06      	ldr	r3, [pc, #24]	; (800f704 <rcutils_get_error_string+0x1c>)
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	b13b      	cbz	r3, 800f6fe <rcutils_get_error_string+0x16>
 800f6ee:	4b06      	ldr	r3, [pc, #24]	; (800f708 <rcutils_get_error_string+0x20>)
 800f6f0:	781a      	ldrb	r2, [r3, #0]
 800f6f2:	b90a      	cbnz	r2, 800f6f8 <rcutils_get_error_string+0x10>
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	701a      	strb	r2, [r3, #0]
 800f6f8:	4b04      	ldr	r3, [pc, #16]	; (800f70c <rcutils_get_error_string+0x24>)
 800f6fa:	7818      	ldrb	r0, [r3, #0]
 800f6fc:	4770      	bx	lr
 800f6fe:	4b04      	ldr	r3, [pc, #16]	; (800f710 <rcutils_get_error_string+0x28>)
 800f700:	7818      	ldrb	r0, [r3, #0]
 800f702:	4770      	bx	lr
 800f704:	20009c48 	.word	0x20009c48
 800f708:	20009c49 	.word	0x20009c49
 800f70c:	20009eb0 	.word	0x20009eb0
 800f710:	0801b96c 	.word	0x0801b96c

0800f714 <rcutils_reset_error>:
 800f714:	b4d0      	push	{r4, r6, r7}
 800f716:	4a07      	ldr	r2, [pc, #28]	; (800f734 <rcutils_reset_error+0x20>)
 800f718:	4807      	ldr	r0, [pc, #28]	; (800f738 <rcutils_reset_error+0x24>)
 800f71a:	4c08      	ldr	r4, [pc, #32]	; (800f73c <rcutils_reset_error+0x28>)
 800f71c:	4908      	ldr	r1, [pc, #32]	; (800f740 <rcutils_reset_error+0x2c>)
 800f71e:	2300      	movs	r3, #0
 800f720:	2600      	movs	r6, #0
 800f722:	2700      	movs	r7, #0
 800f724:	8013      	strh	r3, [r2, #0]
 800f726:	7003      	strb	r3, [r0, #0]
 800f728:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800f72c:	7023      	strb	r3, [r4, #0]
 800f72e:	700b      	strb	r3, [r1, #0]
 800f730:	bcd0      	pop	{r4, r6, r7}
 800f732:	4770      	bx	lr
 800f734:	20009eb8 	.word	0x20009eb8
 800f738:	20009eb0 	.word	0x20009eb0
 800f73c:	20009c49 	.word	0x20009c49
 800f740:	20009c48 	.word	0x20009c48

0800f744 <rcutils_get_zero_initialized_string_map>:
 800f744:	4b01      	ldr	r3, [pc, #4]	; (800f74c <rcutils_get_zero_initialized_string_map+0x8>)
 800f746:	2000      	movs	r0, #0
 800f748:	6018      	str	r0, [r3, #0]
 800f74a:	4770      	bx	lr
 800f74c:	20009c4c 	.word	0x20009c4c

0800f750 <rcutils_string_map_reserve>:
 800f750:	2800      	cmp	r0, #0
 800f752:	d061      	beq.n	800f818 <rcutils_string_map_reserve+0xc8>
 800f754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f758:	6805      	ldr	r5, [r0, #0]
 800f75a:	b083      	sub	sp, #12
 800f75c:	460c      	mov	r4, r1
 800f75e:	4606      	mov	r6, r0
 800f760:	b12d      	cbz	r5, 800f76e <rcutils_string_map_reserve+0x1e>
 800f762:	68eb      	ldr	r3, [r5, #12]
 800f764:	42a3      	cmp	r3, r4
 800f766:	d906      	bls.n	800f776 <rcutils_string_map_reserve+0x26>
 800f768:	461c      	mov	r4, r3
 800f76a:	2d00      	cmp	r5, #0
 800f76c:	d1f9      	bne.n	800f762 <rcutils_string_map_reserve+0x12>
 800f76e:	201f      	movs	r0, #31
 800f770:	b003      	add	sp, #12
 800f772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f776:	68ab      	ldr	r3, [r5, #8]
 800f778:	42a3      	cmp	r3, r4
 800f77a:	d049      	beq.n	800f810 <rcutils_string_map_reserve+0xc0>
 800f77c:	6a2f      	ldr	r7, [r5, #32]
 800f77e:	2c00      	cmp	r4, #0
 800f780:	d035      	beq.n	800f7ee <rcutils_string_map_reserve+0x9e>
 800f782:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f786:	d245      	bcs.n	800f814 <rcutils_string_map_reserve+0xc4>
 800f788:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800f78c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800f790:	6828      	ldr	r0, [r5, #0]
 800f792:	4641      	mov	r1, r8
 800f794:	463a      	mov	r2, r7
 800f796:	47c8      	blx	r9
 800f798:	2800      	cmp	r0, #0
 800f79a:	d03b      	beq.n	800f814 <rcutils_string_map_reserve+0xc4>
 800f79c:	6833      	ldr	r3, [r6, #0]
 800f79e:	463a      	mov	r2, r7
 800f7a0:	6018      	str	r0, [r3, #0]
 800f7a2:	4641      	mov	r1, r8
 800f7a4:	6858      	ldr	r0, [r3, #4]
 800f7a6:	47c8      	blx	r9
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d033      	beq.n	800f814 <rcutils_string_map_reserve+0xc4>
 800f7ac:	6835      	ldr	r5, [r6, #0]
 800f7ae:	68ab      	ldr	r3, [r5, #8]
 800f7b0:	6068      	str	r0, [r5, #4]
 800f7b2:	42a3      	cmp	r3, r4
 800f7b4:	d227      	bcs.n	800f806 <rcutils_string_map_reserve+0xb6>
 800f7b6:	682a      	ldr	r2, [r5, #0]
 800f7b8:	eb00 0108 	add.w	r1, r0, r8
 800f7bc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800f7c0:	428f      	cmp	r7, r1
 800f7c2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f7c6:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f7ca:	d203      	bcs.n	800f7d4 <rcutils_string_map_reserve+0x84>
 800f7cc:	eb02 0108 	add.w	r1, r2, r8
 800f7d0:	428e      	cmp	r6, r1
 800f7d2:	d323      	bcc.n	800f81c <rcutils_string_map_reserve+0xcc>
 800f7d4:	1ae3      	subs	r3, r4, r3
 800f7d6:	009a      	lsls	r2, r3, #2
 800f7d8:	4638      	mov	r0, r7
 800f7da:	2100      	movs	r1, #0
 800f7dc:	9201      	str	r2, [sp, #4]
 800f7de:	f00a fe43 	bl	801a468 <memset>
 800f7e2:	9a01      	ldr	r2, [sp, #4]
 800f7e4:	4630      	mov	r0, r6
 800f7e6:	2100      	movs	r1, #0
 800f7e8:	f00a fe3e 	bl	801a468 <memset>
 800f7ec:	e00b      	b.n	800f806 <rcutils_string_map_reserve+0xb6>
 800f7ee:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800f7f2:	6828      	ldr	r0, [r5, #0]
 800f7f4:	4639      	mov	r1, r7
 800f7f6:	47c0      	blx	r8
 800f7f8:	6833      	ldr	r3, [r6, #0]
 800f7fa:	4639      	mov	r1, r7
 800f7fc:	6858      	ldr	r0, [r3, #4]
 800f7fe:	601c      	str	r4, [r3, #0]
 800f800:	47c0      	blx	r8
 800f802:	6835      	ldr	r5, [r6, #0]
 800f804:	606c      	str	r4, [r5, #4]
 800f806:	2000      	movs	r0, #0
 800f808:	60ac      	str	r4, [r5, #8]
 800f80a:	b003      	add	sp, #12
 800f80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f810:	2000      	movs	r0, #0
 800f812:	e7ad      	b.n	800f770 <rcutils_string_map_reserve+0x20>
 800f814:	200a      	movs	r0, #10
 800f816:	e7ab      	b.n	800f770 <rcutils_string_map_reserve+0x20>
 800f818:	200b      	movs	r0, #11
 800f81a:	4770      	bx	lr
 800f81c:	1f13      	subs	r3, r2, #4
 800f81e:	f1ac 0c04 	sub.w	ip, ip, #4
 800f822:	4498      	add	r8, r3
 800f824:	4460      	add	r0, ip
 800f826:	4462      	add	r2, ip
 800f828:	2300      	movs	r3, #0
 800f82a:	f842 3f04 	str.w	r3, [r2, #4]!
 800f82e:	4542      	cmp	r2, r8
 800f830:	f840 3f04 	str.w	r3, [r0, #4]!
 800f834:	d1f9      	bne.n	800f82a <rcutils_string_map_reserve+0xda>
 800f836:	e7e6      	b.n	800f806 <rcutils_string_map_reserve+0xb6>

0800f838 <rcutils_string_map_init>:
 800f838:	b082      	sub	sp, #8
 800f83a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f83c:	460e      	mov	r6, r1
 800f83e:	a906      	add	r1, sp, #24
 800f840:	e881 000c 	stmia.w	r1, {r2, r3}
 800f844:	b380      	cbz	r0, 800f8a8 <rcutils_string_map_init+0x70>
 800f846:	6807      	ldr	r7, [r0, #0]
 800f848:	4604      	mov	r4, r0
 800f84a:	b12f      	cbz	r7, 800f858 <rcutils_string_map_init+0x20>
 800f84c:	251e      	movs	r5, #30
 800f84e:	4628      	mov	r0, r5
 800f850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f854:	b002      	add	sp, #8
 800f856:	4770      	bx	lr
 800f858:	a806      	add	r0, sp, #24
 800f85a:	f7ff ff37 	bl	800f6cc <rcutils_allocator_is_valid>
 800f85e:	b318      	cbz	r0, 800f8a8 <rcutils_string_map_init+0x70>
 800f860:	9b06      	ldr	r3, [sp, #24]
 800f862:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f864:	2024      	movs	r0, #36	; 0x24
 800f866:	4798      	blx	r3
 800f868:	4605      	mov	r5, r0
 800f86a:	6020      	str	r0, [r4, #0]
 800f86c:	b310      	cbz	r0, 800f8b4 <rcutils_string_map_init+0x7c>
 800f86e:	f10d 0e18 	add.w	lr, sp, #24
 800f872:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f876:	f105 0c10 	add.w	ip, r5, #16
 800f87a:	e9c5 7700 	strd	r7, r7, [r5]
 800f87e:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800f882:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f886:	f8de 3000 	ldr.w	r3, [lr]
 800f88a:	f8cc 3000 	str.w	r3, [ip]
 800f88e:	4631      	mov	r1, r6
 800f890:	4620      	mov	r0, r4
 800f892:	f7ff ff5d 	bl	800f750 <rcutils_string_map_reserve>
 800f896:	4605      	mov	r5, r0
 800f898:	2800      	cmp	r0, #0
 800f89a:	d0d8      	beq.n	800f84e <rcutils_string_map_init+0x16>
 800f89c:	9b07      	ldr	r3, [sp, #28]
 800f89e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f8a0:	6820      	ldr	r0, [r4, #0]
 800f8a2:	4798      	blx	r3
 800f8a4:	6027      	str	r7, [r4, #0]
 800f8a6:	e7d2      	b.n	800f84e <rcutils_string_map_init+0x16>
 800f8a8:	250b      	movs	r5, #11
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f8b0:	b002      	add	sp, #8
 800f8b2:	4770      	bx	lr
 800f8b4:	250a      	movs	r5, #10
 800f8b6:	e7ca      	b.n	800f84e <rcutils_string_map_init+0x16>

0800f8b8 <rcutils_string_map_fini>:
 800f8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8bc:	b082      	sub	sp, #8
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	d039      	beq.n	800f936 <rcutils_string_map_fini+0x7e>
 800f8c2:	6804      	ldr	r4, [r0, #0]
 800f8c4:	4606      	mov	r6, r0
 800f8c6:	2c00      	cmp	r4, #0
 800f8c8:	d031      	beq.n	800f92e <rcutils_string_map_fini+0x76>
 800f8ca:	68a3      	ldr	r3, [r4, #8]
 800f8cc:	b323      	cbz	r3, 800f918 <rcutils_string_map_fini+0x60>
 800f8ce:	2500      	movs	r5, #0
 800f8d0:	6822      	ldr	r2, [r4, #0]
 800f8d2:	46a8      	mov	r8, r5
 800f8d4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f8d8:	b1d8      	cbz	r0, 800f912 <rcutils_string_map_fini+0x5a>
 800f8da:	6a21      	ldr	r1, [r4, #32]
 800f8dc:	6967      	ldr	r7, [r4, #20]
 800f8de:	9101      	str	r1, [sp, #4]
 800f8e0:	47b8      	blx	r7
 800f8e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f8e6:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f8ea:	9901      	ldr	r1, [sp, #4]
 800f8ec:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8f0:	47b8      	blx	r7
 800f8f2:	68e3      	ldr	r3, [r4, #12]
 800f8f4:	6862      	ldr	r2, [r4, #4]
 800f8f6:	3b01      	subs	r3, #1
 800f8f8:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f8fc:	60e3      	str	r3, [r4, #12]
 800f8fe:	6834      	ldr	r4, [r6, #0]
 800f900:	68a3      	ldr	r3, [r4, #8]
 800f902:	3501      	adds	r5, #1
 800f904:	429d      	cmp	r5, r3
 800f906:	d207      	bcs.n	800f918 <rcutils_string_map_fini+0x60>
 800f908:	6822      	ldr	r2, [r4, #0]
 800f90a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f90e:	2800      	cmp	r0, #0
 800f910:	d1e3      	bne.n	800f8da <rcutils_string_map_fini+0x22>
 800f912:	3501      	adds	r5, #1
 800f914:	429d      	cmp	r5, r3
 800f916:	d3dd      	bcc.n	800f8d4 <rcutils_string_map_fini+0x1c>
 800f918:	2100      	movs	r1, #0
 800f91a:	4630      	mov	r0, r6
 800f91c:	f7ff ff18 	bl	800f750 <rcutils_string_map_reserve>
 800f920:	4604      	mov	r4, r0
 800f922:	b920      	cbnz	r0, 800f92e <rcutils_string_map_fini+0x76>
 800f924:	6830      	ldr	r0, [r6, #0]
 800f926:	6943      	ldr	r3, [r0, #20]
 800f928:	6a01      	ldr	r1, [r0, #32]
 800f92a:	4798      	blx	r3
 800f92c:	6034      	str	r4, [r6, #0]
 800f92e:	4620      	mov	r0, r4
 800f930:	b002      	add	sp, #8
 800f932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f936:	240b      	movs	r4, #11
 800f938:	4620      	mov	r0, r4
 800f93a:	b002      	add	sp, #8
 800f93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f940 <rcutils_string_map_getn>:
 800f940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f944:	b082      	sub	sp, #8
 800f946:	b308      	cbz	r0, 800f98c <rcutils_string_map_getn+0x4c>
 800f948:	6804      	ldr	r4, [r0, #0]
 800f94a:	b304      	cbz	r4, 800f98e <rcutils_string_map_getn+0x4e>
 800f94c:	460d      	mov	r5, r1
 800f94e:	b1e9      	cbz	r1, 800f98c <rcutils_string_map_getn+0x4c>
 800f950:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800f954:	6827      	ldr	r7, [r4, #0]
 800f956:	f1b9 0f00 	cmp.w	r9, #0
 800f95a:	d017      	beq.n	800f98c <rcutils_string_map_getn+0x4c>
 800f95c:	4690      	mov	r8, r2
 800f95e:	3f04      	subs	r7, #4
 800f960:	2600      	movs	r6, #0
 800f962:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800f966:	9101      	str	r1, [sp, #4]
 800f968:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800f96c:	4608      	mov	r0, r1
 800f96e:	3601      	adds	r6, #1
 800f970:	b151      	cbz	r1, 800f988 <rcutils_string_map_getn+0x48>
 800f972:	f7f0 fc3f 	bl	80001f4 <strlen>
 800f976:	4540      	cmp	r0, r8
 800f978:	4602      	mov	r2, r0
 800f97a:	9901      	ldr	r1, [sp, #4]
 800f97c:	bf38      	it	cc
 800f97e:	4642      	movcc	r2, r8
 800f980:	4628      	mov	r0, r5
 800f982:	f00a fd86 	bl	801a492 <strncmp>
 800f986:	b130      	cbz	r0, 800f996 <rcutils_string_map_getn+0x56>
 800f988:	45b1      	cmp	r9, r6
 800f98a:	d1ea      	bne.n	800f962 <rcutils_string_map_getn+0x22>
 800f98c:	2400      	movs	r4, #0
 800f98e:	4620      	mov	r0, r4
 800f990:	b002      	add	sp, #8
 800f992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f996:	6863      	ldr	r3, [r4, #4]
 800f998:	f853 400a 	ldr.w	r4, [r3, sl]
 800f99c:	4620      	mov	r0, r4
 800f99e:	b002      	add	sp, #8
 800f9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f9a4 <rcutils_system_time_now>:
 800f9a4:	b310      	cbz	r0, 800f9ec <rcutils_system_time_now+0x48>
 800f9a6:	b570      	push	{r4, r5, r6, lr}
 800f9a8:	b084      	sub	sp, #16
 800f9aa:	4669      	mov	r1, sp
 800f9ac:	4604      	mov	r4, r0
 800f9ae:	2001      	movs	r0, #1
 800f9b0:	f7f3 ff12 	bl	80037d8 <clock_gettime>
 800f9b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	f171 0300 	sbcs.w	r3, r1, #0
 800f9be:	db12      	blt.n	800f9e6 <rcutils_system_time_now+0x42>
 800f9c0:	9d02      	ldr	r5, [sp, #8]
 800f9c2:	2d00      	cmp	r5, #0
 800f9c4:	db0c      	blt.n	800f9e0 <rcutils_system_time_now+0x3c>
 800f9c6:	4e0a      	ldr	r6, [pc, #40]	; (800f9f0 <rcutils_system_time_now+0x4c>)
 800f9c8:	fba0 2306 	umull	r2, r3, r0, r6
 800f9cc:	1952      	adds	r2, r2, r5
 800f9ce:	fb06 3301 	mla	r3, r6, r1, r3
 800f9d2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800f9d6:	2000      	movs	r0, #0
 800f9d8:	e9c4 2300 	strd	r2, r3, [r4]
 800f9dc:	b004      	add	sp, #16
 800f9de:	bd70      	pop	{r4, r5, r6, pc}
 800f9e0:	ea50 0301 	orrs.w	r3, r0, r1
 800f9e4:	d1ef      	bne.n	800f9c6 <rcutils_system_time_now+0x22>
 800f9e6:	2002      	movs	r0, #2
 800f9e8:	b004      	add	sp, #16
 800f9ea:	bd70      	pop	{r4, r5, r6, pc}
 800f9ec:	200b      	movs	r0, #11
 800f9ee:	4770      	bx	lr
 800f9f0:	3b9aca00 	.word	0x3b9aca00

0800f9f4 <rcutils_steady_time_now>:
 800f9f4:	b310      	cbz	r0, 800fa3c <rcutils_steady_time_now+0x48>
 800f9f6:	b570      	push	{r4, r5, r6, lr}
 800f9f8:	b084      	sub	sp, #16
 800f9fa:	4669      	mov	r1, sp
 800f9fc:	4604      	mov	r4, r0
 800f9fe:	2000      	movs	r0, #0
 800fa00:	f7f3 feea 	bl	80037d8 <clock_gettime>
 800fa04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	f171 0300 	sbcs.w	r3, r1, #0
 800fa0e:	db12      	blt.n	800fa36 <rcutils_steady_time_now+0x42>
 800fa10:	9d02      	ldr	r5, [sp, #8]
 800fa12:	2d00      	cmp	r5, #0
 800fa14:	db0c      	blt.n	800fa30 <rcutils_steady_time_now+0x3c>
 800fa16:	4e0a      	ldr	r6, [pc, #40]	; (800fa40 <rcutils_steady_time_now+0x4c>)
 800fa18:	fba0 2306 	umull	r2, r3, r0, r6
 800fa1c:	1952      	adds	r2, r2, r5
 800fa1e:	fb06 3301 	mla	r3, r6, r1, r3
 800fa22:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800fa26:	2000      	movs	r0, #0
 800fa28:	e9c4 2300 	strd	r2, r3, [r4]
 800fa2c:	b004      	add	sp, #16
 800fa2e:	bd70      	pop	{r4, r5, r6, pc}
 800fa30:	ea50 0301 	orrs.w	r3, r0, r1
 800fa34:	d1ef      	bne.n	800fa16 <rcutils_steady_time_now+0x22>
 800fa36:	2002      	movs	r0, #2
 800fa38:	b004      	add	sp, #16
 800fa3a:	bd70      	pop	{r4, r5, r6, pc}
 800fa3c:	200b      	movs	r0, #11
 800fa3e:	4770      	bx	lr
 800fa40:	3b9aca00 	.word	0x3b9aca00

0800fa44 <rmw_get_default_publisher_options>:
 800fa44:	2000      	movs	r0, #0
 800fa46:	4770      	bx	lr

0800fa48 <rmw_get_default_subscription_options>:
 800fa48:	2200      	movs	r2, #0
 800fa4a:	6002      	str	r2, [r0, #0]
 800fa4c:	7102      	strb	r2, [r0, #4]
 800fa4e:	4770      	bx	lr

0800fa50 <rmw_get_zero_initialized_message_info>:
 800fa50:	b470      	push	{r4, r5, r6}
 800fa52:	4d07      	ldr	r5, [pc, #28]	; (800fa70 <rmw_get_zero_initialized_message_info+0x20>)
 800fa54:	4606      	mov	r6, r0
 800fa56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa58:	4634      	mov	r4, r6
 800fa5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fa64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fa68:	4630      	mov	r0, r6
 800fa6a:	bc70      	pop	{r4, r5, r6}
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	0801b720 	.word	0x0801b720

0800fa74 <rmw_validate_full_topic_name>:
 800fa74:	2800      	cmp	r0, #0
 800fa76:	d062      	beq.n	800fb3e <rmw_validate_full_topic_name+0xca>
 800fa78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa7c:	460d      	mov	r5, r1
 800fa7e:	2900      	cmp	r1, #0
 800fa80:	d05f      	beq.n	800fb42 <rmw_validate_full_topic_name+0xce>
 800fa82:	4616      	mov	r6, r2
 800fa84:	4604      	mov	r4, r0
 800fa86:	f7f0 fbb5 	bl	80001f4 <strlen>
 800fa8a:	b148      	cbz	r0, 800faa0 <rmw_validate_full_topic_name+0x2c>
 800fa8c:	7823      	ldrb	r3, [r4, #0]
 800fa8e:	2b2f      	cmp	r3, #47	; 0x2f
 800fa90:	d00d      	beq.n	800faae <rmw_validate_full_topic_name+0x3a>
 800fa92:	2302      	movs	r3, #2
 800fa94:	602b      	str	r3, [r5, #0]
 800fa96:	b13e      	cbz	r6, 800faa8 <rmw_validate_full_topic_name+0x34>
 800fa98:	2000      	movs	r0, #0
 800fa9a:	6030      	str	r0, [r6, #0]
 800fa9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faa0:	2301      	movs	r3, #1
 800faa2:	602b      	str	r3, [r5, #0]
 800faa4:	2e00      	cmp	r6, #0
 800faa6:	d1f7      	bne.n	800fa98 <rmw_validate_full_topic_name+0x24>
 800faa8:	2000      	movs	r0, #0
 800faaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faae:	1e47      	subs	r7, r0, #1
 800fab0:	5de3      	ldrb	r3, [r4, r7]
 800fab2:	2b2f      	cmp	r3, #47	; 0x2f
 800fab4:	d047      	beq.n	800fb46 <rmw_validate_full_topic_name+0xd2>
 800fab6:	1e63      	subs	r3, r4, #1
 800fab8:	eb03 0900 	add.w	r9, r3, r0
 800fabc:	f1c4 0e01 	rsb	lr, r4, #1
 800fac0:	eb0e 0803 	add.w	r8, lr, r3
 800fac4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800fac8:	f021 0220 	bic.w	r2, r1, #32
 800facc:	3a41      	subs	r2, #65	; 0x41
 800face:	2a19      	cmp	r2, #25
 800fad0:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800fad4:	d90c      	bls.n	800faf0 <rmw_validate_full_topic_name+0x7c>
 800fad6:	295f      	cmp	r1, #95	; 0x5f
 800fad8:	d00a      	beq.n	800faf0 <rmw_validate_full_topic_name+0x7c>
 800fada:	f1bc 0f0a 	cmp.w	ip, #10
 800fade:	d907      	bls.n	800faf0 <rmw_validate_full_topic_name+0x7c>
 800fae0:	2304      	movs	r3, #4
 800fae2:	602b      	str	r3, [r5, #0]
 800fae4:	2e00      	cmp	r6, #0
 800fae6:	d0df      	beq.n	800faa8 <rmw_validate_full_topic_name+0x34>
 800fae8:	f8c6 8000 	str.w	r8, [r6]
 800faec:	2000      	movs	r0, #0
 800faee:	e7d5      	b.n	800fa9c <rmw_validate_full_topic_name+0x28>
 800faf0:	454b      	cmp	r3, r9
 800faf2:	d1e5      	bne.n	800fac0 <rmw_validate_full_topic_name+0x4c>
 800faf4:	f8df e084 	ldr.w	lr, [pc, #132]	; 800fb7c <rmw_validate_full_topic_name+0x108>
 800faf8:	2300      	movs	r3, #0
 800fafa:	f107 0801 	add.w	r8, r7, #1
 800fafe:	e005      	b.n	800fb0c <rmw_validate_full_topic_name+0x98>
 800fb00:	4611      	mov	r1, r2
 800fb02:	4288      	cmp	r0, r1
 800fb04:	4613      	mov	r3, r2
 800fb06:	f104 0401 	add.w	r4, r4, #1
 800fb0a:	d925      	bls.n	800fb58 <rmw_validate_full_topic_name+0xe4>
 800fb0c:	429f      	cmp	r7, r3
 800fb0e:	f103 0201 	add.w	r2, r3, #1
 800fb12:	d01e      	beq.n	800fb52 <rmw_validate_full_topic_name+0xde>
 800fb14:	7821      	ldrb	r1, [r4, #0]
 800fb16:	292f      	cmp	r1, #47	; 0x2f
 800fb18:	d1f2      	bne.n	800fb00 <rmw_validate_full_topic_name+0x8c>
 800fb1a:	f894 c001 	ldrb.w	ip, [r4, #1]
 800fb1e:	1c5a      	adds	r2, r3, #1
 800fb20:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800fb24:	4611      	mov	r1, r2
 800fb26:	d024      	beq.n	800fb72 <rmw_validate_full_topic_name+0xfe>
 800fb28:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800fb2c:	075b      	lsls	r3, r3, #29
 800fb2e:	d5e8      	bpl.n	800fb02 <rmw_validate_full_topic_name+0x8e>
 800fb30:	2306      	movs	r3, #6
 800fb32:	602b      	str	r3, [r5, #0]
 800fb34:	2e00      	cmp	r6, #0
 800fb36:	d0b7      	beq.n	800faa8 <rmw_validate_full_topic_name+0x34>
 800fb38:	6032      	str	r2, [r6, #0]
 800fb3a:	2000      	movs	r0, #0
 800fb3c:	e7ae      	b.n	800fa9c <rmw_validate_full_topic_name+0x28>
 800fb3e:	200b      	movs	r0, #11
 800fb40:	4770      	bx	lr
 800fb42:	200b      	movs	r0, #11
 800fb44:	e7aa      	b.n	800fa9c <rmw_validate_full_topic_name+0x28>
 800fb46:	2303      	movs	r3, #3
 800fb48:	602b      	str	r3, [r5, #0]
 800fb4a:	2e00      	cmp	r6, #0
 800fb4c:	d0ac      	beq.n	800faa8 <rmw_validate_full_topic_name+0x34>
 800fb4e:	6037      	str	r7, [r6, #0]
 800fb50:	e7aa      	b.n	800faa8 <rmw_validate_full_topic_name+0x34>
 800fb52:	4641      	mov	r1, r8
 800fb54:	1c7a      	adds	r2, r7, #1
 800fb56:	e7d4      	b.n	800fb02 <rmw_validate_full_topic_name+0x8e>
 800fb58:	28f7      	cmp	r0, #247	; 0xf7
 800fb5a:	d802      	bhi.n	800fb62 <rmw_validate_full_topic_name+0xee>
 800fb5c:	2000      	movs	r0, #0
 800fb5e:	6028      	str	r0, [r5, #0]
 800fb60:	e79c      	b.n	800fa9c <rmw_validate_full_topic_name+0x28>
 800fb62:	2307      	movs	r3, #7
 800fb64:	602b      	str	r3, [r5, #0]
 800fb66:	2e00      	cmp	r6, #0
 800fb68:	d09e      	beq.n	800faa8 <rmw_validate_full_topic_name+0x34>
 800fb6a:	23f6      	movs	r3, #246	; 0xf6
 800fb6c:	6033      	str	r3, [r6, #0]
 800fb6e:	2000      	movs	r0, #0
 800fb70:	e794      	b.n	800fa9c <rmw_validate_full_topic_name+0x28>
 800fb72:	2305      	movs	r3, #5
 800fb74:	602b      	str	r3, [r5, #0]
 800fb76:	2e00      	cmp	r6, #0
 800fb78:	d1de      	bne.n	800fb38 <rmw_validate_full_topic_name+0xc4>
 800fb7a:	e795      	b.n	800faa8 <rmw_validate_full_topic_name+0x34>
 800fb7c:	0801c138 	.word	0x0801c138

0800fb80 <rmw_uros_set_custom_transport>:
 800fb80:	b470      	push	{r4, r5, r6}
 800fb82:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800fb86:	b162      	cbz	r2, 800fba2 <rmw_uros_set_custom_transport+0x22>
 800fb88:	b15b      	cbz	r3, 800fba2 <rmw_uros_set_custom_transport+0x22>
 800fb8a:	b155      	cbz	r5, 800fba2 <rmw_uros_set_custom_transport+0x22>
 800fb8c:	b14e      	cbz	r6, 800fba2 <rmw_uros_set_custom_transport+0x22>
 800fb8e:	4c06      	ldr	r4, [pc, #24]	; (800fba8 <rmw_uros_set_custom_transport+0x28>)
 800fb90:	7020      	strb	r0, [r4, #0]
 800fb92:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800fb96:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fb9a:	6166      	str	r6, [r4, #20]
 800fb9c:	2000      	movs	r0, #0
 800fb9e:	bc70      	pop	{r4, r5, r6}
 800fba0:	4770      	bx	lr
 800fba2:	200b      	movs	r0, #11
 800fba4:	bc70      	pop	{r4, r5, r6}
 800fba6:	4770      	bx	lr
 800fba8:	20009ec8 	.word	0x20009ec8

0800fbac <flush_session>:
 800fbac:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800fbae:	f002 bf03 	b.w	80129b8 <uxr_run_session_until_confirm_delivery>
 800fbb2:	bf00      	nop

0800fbb4 <rmw_publish>:
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	d053      	beq.n	800fc60 <rmw_publish+0xac>
 800fbb8:	b570      	push	{r4, r5, r6, lr}
 800fbba:	460d      	mov	r5, r1
 800fbbc:	b08e      	sub	sp, #56	; 0x38
 800fbbe:	2900      	cmp	r1, #0
 800fbc0:	d04b      	beq.n	800fc5a <rmw_publish+0xa6>
 800fbc2:	4604      	mov	r4, r0
 800fbc4:	6800      	ldr	r0, [r0, #0]
 800fbc6:	f000 fe33 	bl	8010830 <is_uxrce_rmw_identifier_valid>
 800fbca:	2800      	cmp	r0, #0
 800fbcc:	d045      	beq.n	800fc5a <rmw_publish+0xa6>
 800fbce:	6866      	ldr	r6, [r4, #4]
 800fbd0:	2e00      	cmp	r6, #0
 800fbd2:	d042      	beq.n	800fc5a <rmw_publish+0xa6>
 800fbd4:	69b4      	ldr	r4, [r6, #24]
 800fbd6:	4628      	mov	r0, r5
 800fbd8:	6923      	ldr	r3, [r4, #16]
 800fbda:	4798      	blx	r3
 800fbdc:	69f3      	ldr	r3, [r6, #28]
 800fbde:	9005      	str	r0, [sp, #20]
 800fbe0:	b113      	cbz	r3, 800fbe8 <rmw_publish+0x34>
 800fbe2:	a805      	add	r0, sp, #20
 800fbe4:	4798      	blx	r3
 800fbe6:	9805      	ldr	r0, [sp, #20]
 800fbe8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fbec:	691b      	ldr	r3, [r3, #16]
 800fbee:	9000      	str	r0, [sp, #0]
 800fbf0:	6972      	ldr	r2, [r6, #20]
 800fbf2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800fbf4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800fbf8:	ab06      	add	r3, sp, #24
 800fbfa:	f003 fce5 	bl	80135c8 <uxr_prepare_output_stream>
 800fbfe:	b1d8      	cbz	r0, 800fc38 <rmw_publish+0x84>
 800fc00:	68a3      	ldr	r3, [r4, #8]
 800fc02:	4628      	mov	r0, r5
 800fc04:	a906      	add	r1, sp, #24
 800fc06:	4798      	blx	r3
 800fc08:	6a33      	ldr	r3, [r6, #32]
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	b10b      	cbz	r3, 800fc12 <rmw_publish+0x5e>
 800fc0e:	a806      	add	r0, sp, #24
 800fc10:	4798      	blx	r3
 800fc12:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fc1c:	d022      	beq.n	800fc64 <rmw_publish+0xb0>
 800fc1e:	6918      	ldr	r0, [r3, #16]
 800fc20:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800fc22:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fc26:	f002 fec7 	bl	80129b8 <uxr_run_session_until_confirm_delivery>
 800fc2a:	4020      	ands	r0, r4
 800fc2c:	b2c4      	uxtb	r4, r0
 800fc2e:	f084 0001 	eor.w	r0, r4, #1
 800fc32:	b2c0      	uxtb	r0, r0
 800fc34:	b00e      	add	sp, #56	; 0x38
 800fc36:	bd70      	pop	{r4, r5, r6, pc}
 800fc38:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fc3c:	4a0c      	ldr	r2, [pc, #48]	; (800fc70 <rmw_publish+0xbc>)
 800fc3e:	6918      	ldr	r0, [r3, #16]
 800fc40:	9b05      	ldr	r3, [sp, #20]
 800fc42:	9300      	str	r3, [sp, #0]
 800fc44:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800fc48:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fc4c:	6972      	ldr	r2, [r6, #20]
 800fc4e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800fc50:	ab06      	add	r3, sp, #24
 800fc52:	f003 fce9 	bl	8013628 <uxr_prepare_output_stream_fragmented>
 800fc56:	2800      	cmp	r0, #0
 800fc58:	d1d2      	bne.n	800fc00 <rmw_publish+0x4c>
 800fc5a:	2001      	movs	r0, #1
 800fc5c:	b00e      	add	sp, #56	; 0x38
 800fc5e:	bd70      	pop	{r4, r5, r6, pc}
 800fc60:	2001      	movs	r0, #1
 800fc62:	4770      	bx	lr
 800fc64:	6918      	ldr	r0, [r3, #16]
 800fc66:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fc6a:	f002 fae9 	bl	8012240 <uxr_flash_output_streams>
 800fc6e:	e7de      	b.n	800fc2e <rmw_publish+0x7a>
 800fc70:	0800fbad 	.word	0x0800fbad

0800fc74 <rmw_create_publisher>:
 800fc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc78:	b087      	sub	sp, #28
 800fc7a:	2800      	cmp	r0, #0
 800fc7c:	f000 80cc 	beq.w	800fe18 <rmw_create_publisher+0x1a4>
 800fc80:	460e      	mov	r6, r1
 800fc82:	2900      	cmp	r1, #0
 800fc84:	f000 80c8 	beq.w	800fe18 <rmw_create_publisher+0x1a4>
 800fc88:	4604      	mov	r4, r0
 800fc8a:	6800      	ldr	r0, [r0, #0]
 800fc8c:	4615      	mov	r5, r2
 800fc8e:	4698      	mov	r8, r3
 800fc90:	f000 fdce 	bl	8010830 <is_uxrce_rmw_identifier_valid>
 800fc94:	2800      	cmp	r0, #0
 800fc96:	f000 80bf 	beq.w	800fe18 <rmw_create_publisher+0x1a4>
 800fc9a:	2d00      	cmp	r5, #0
 800fc9c:	f000 80bc 	beq.w	800fe18 <rmw_create_publisher+0x1a4>
 800fca0:	782b      	ldrb	r3, [r5, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	f000 80b8 	beq.w	800fe18 <rmw_create_publisher+0x1a4>
 800fca8:	f1b8 0f00 	cmp.w	r8, #0
 800fcac:	f000 80b4 	beq.w	800fe18 <rmw_create_publisher+0x1a4>
 800fcb0:	485c      	ldr	r0, [pc, #368]	; (800fe24 <rmw_create_publisher+0x1b0>)
 800fcb2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fcb6:	f007 f953 	bl	8016f60 <get_memory>
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	f000 80ac 	beq.w	800fe18 <rmw_create_publisher+0x1a4>
 800fcc0:	68c4      	ldr	r4, [r0, #12]
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800fcc8:	f007 f9b2 	bl	8017030 <rmw_get_implementation_identifier>
 800fccc:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800fcd0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800fcd4:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800fcd8:	4628      	mov	r0, r5
 800fcda:	f7f0 fa8b 	bl	80001f4 <strlen>
 800fcde:	3001      	adds	r0, #1
 800fce0:	283c      	cmp	r0, #60	; 0x3c
 800fce2:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800fce6:	f200 8094 	bhi.w	800fe12 <rmw_create_publisher+0x19e>
 800fcea:	4a4f      	ldr	r2, [pc, #316]	; (800fe28 <rmw_create_publisher+0x1b4>)
 800fcec:	462b      	mov	r3, r5
 800fcee:	213c      	movs	r1, #60	; 0x3c
 800fcf0:	4650      	mov	r0, sl
 800fcf2:	f00a fa59 	bl	801a1a8 <sniprintf>
 800fcf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fcfa:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800fcfe:	4641      	mov	r1, r8
 800fd00:	2250      	movs	r2, #80	; 0x50
 800fd02:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800fd06:	f00a fcce 	bl	801a6a6 <memcpy>
 800fd0a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800fd0e:	4947      	ldr	r1, [pc, #284]	; (800fe2c <rmw_create_publisher+0x1b8>)
 800fd10:	2b02      	cmp	r3, #2
 800fd12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd16:	bf0c      	ite	eq
 800fd18:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800fd1c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800fd20:	67a3      	str	r3, [r4, #120]	; 0x78
 800fd22:	2300      	movs	r3, #0
 800fd24:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fd28:	4630      	mov	r0, r6
 800fd2a:	f000 fd8f 	bl	801084c <get_message_typesupport_handle>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d06f      	beq.n	800fe12 <rmw_create_publisher+0x19e>
 800fd32:	6842      	ldr	r2, [r0, #4]
 800fd34:	61a2      	str	r2, [r4, #24]
 800fd36:	2a00      	cmp	r2, #0
 800fd38:	d06b      	beq.n	800fe12 <rmw_create_publisher+0x19e>
 800fd3a:	4629      	mov	r1, r5
 800fd3c:	4643      	mov	r3, r8
 800fd3e:	4648      	mov	r0, r9
 800fd40:	f007 fbc0 	bl	80174c4 <create_topic>
 800fd44:	6260      	str	r0, [r4, #36]	; 0x24
 800fd46:	2800      	cmp	r0, #0
 800fd48:	d063      	beq.n	800fe12 <rmw_create_publisher+0x19e>
 800fd4a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fd4e:	f241 5398 	movw	r3, #5528	; 0x1598
 800fd52:	2103      	movs	r1, #3
 800fd54:	5ad0      	ldrh	r0, [r2, r3]
 800fd56:	1c45      	adds	r5, r0, #1
 800fd58:	52d5      	strh	r5, [r2, r3]
 800fd5a:	f001 ffff 	bl	8011d5c <uxr_object_id>
 800fd5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd62:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800fd66:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800fd6a:	6912      	ldr	r2, [r2, #16]
 800fd6c:	6120      	str	r0, [r4, #16]
 800fd6e:	f04f 0a06 	mov.w	sl, #6
 800fd72:	f8cd a000 	str.w	sl, [sp]
 800fd76:	6819      	ldr	r1, [r3, #0]
 800fd78:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fd7c:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800fd80:	6922      	ldr	r2, [r4, #16]
 800fd82:	f001 fe9b 	bl	8011abc <uxr_buffer_create_publisher_bin>
 800fd86:	4602      	mov	r2, r0
 800fd88:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fd8c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800fd90:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fd94:	f000 fccc 	bl	8010730 <run_xrce_session>
 800fd98:	b3b8      	cbz	r0, 800fe0a <rmw_create_publisher+0x196>
 800fd9a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fd9e:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800fda2:	f241 539a 	movw	r3, #5530	; 0x159a
 800fda6:	2105      	movs	r1, #5
 800fda8:	5ad0      	ldrh	r0, [r2, r3]
 800fdaa:	1c45      	adds	r5, r0, #1
 800fdac:	52d5      	strh	r5, [r2, r3]
 800fdae:	f001 ffd5 	bl	8011d5c <uxr_object_id>
 800fdb2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800fdb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fdba:	6915      	ldr	r5, [r2, #16]
 800fdbc:	6160      	str	r0, [r4, #20]
 800fdbe:	ae04      	add	r6, sp, #16
 800fdc0:	4641      	mov	r1, r8
 800fdc2:	4630      	mov	r0, r6
 800fdc4:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800fdc8:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800fdcc:	f000 fccc 	bl	8010768 <convert_qos_profile>
 800fdd0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fdd4:	f8cd a00c 	str.w	sl, [sp, #12]
 800fdd8:	9001      	str	r0, [sp, #4]
 800fdda:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fdde:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fde2:	9300      	str	r3, [sp, #0]
 800fde4:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800fde8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800fdec:	f8d8 1000 	ldr.w	r1, [r8]
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	f001 fec1 	bl	8011b78 <uxr_buffer_create_datawriter_bin>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fdfc:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800fe00:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fe04:	f000 fc94 	bl	8010730 <run_xrce_session>
 800fe08:	b938      	cbnz	r0, 800fe1a <rmw_create_publisher+0x1a6>
 800fe0a:	4806      	ldr	r0, [pc, #24]	; (800fe24 <rmw_create_publisher+0x1b0>)
 800fe0c:	4621      	mov	r1, r4
 800fe0e:	f007 f8b7 	bl	8016f80 <put_memory>
 800fe12:	4638      	mov	r0, r7
 800fe14:	f000 fb3a 	bl	801048c <rmw_uxrce_fini_publisher_memory>
 800fe18:	2700      	movs	r7, #0
 800fe1a:	4638      	mov	r0, r7
 800fe1c:	b007      	add	sp, #28
 800fe1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe22:	bf00      	nop
 800fe24:	20009ef8 	.word	0x20009ef8
 800fe28:	0801b9a4 	.word	0x0801b9a4
 800fe2c:	0801b970 	.word	0x0801b970

0800fe30 <rmw_publisher_get_actual_qos>:
 800fe30:	2000      	movs	r0, #0
 800fe32:	4770      	bx	lr

0800fe34 <rmw_destroy_publisher>:
 800fe34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe36:	b128      	cbz	r0, 800fe44 <rmw_destroy_publisher+0x10>
 800fe38:	4604      	mov	r4, r0
 800fe3a:	6800      	ldr	r0, [r0, #0]
 800fe3c:	460d      	mov	r5, r1
 800fe3e:	f000 fcf7 	bl	8010830 <is_uxrce_rmw_identifier_valid>
 800fe42:	b910      	cbnz	r0, 800fe4a <rmw_destroy_publisher+0x16>
 800fe44:	2401      	movs	r4, #1
 800fe46:	4620      	mov	r0, r4
 800fe48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe4a:	6863      	ldr	r3, [r4, #4]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d0f9      	beq.n	800fe44 <rmw_destroy_publisher+0x10>
 800fe50:	2d00      	cmp	r5, #0
 800fe52:	d0f7      	beq.n	800fe44 <rmw_destroy_publisher+0x10>
 800fe54:	6828      	ldr	r0, [r5, #0]
 800fe56:	f000 fceb 	bl	8010830 <is_uxrce_rmw_identifier_valid>
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d0f2      	beq.n	800fe44 <rmw_destroy_publisher+0x10>
 800fe5e:	686c      	ldr	r4, [r5, #4]
 800fe60:	2c00      	cmp	r4, #0
 800fe62:	d0ef      	beq.n	800fe44 <rmw_destroy_publisher+0x10>
 800fe64:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fe66:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800fe6a:	f007 fb8d 	bl	8017588 <destroy_topic>
 800fe6e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800fe72:	6962      	ldr	r2, [r4, #20]
 800fe74:	6918      	ldr	r0, [r3, #16]
 800fe76:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800fe7a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fe7e:	6819      	ldr	r1, [r3, #0]
 800fe80:	f001 fd6a 	bl	8011958 <uxr_buffer_delete_entity>
 800fe84:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800fe88:	6922      	ldr	r2, [r4, #16]
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	6908      	ldr	r0, [r1, #16]
 800fe8e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fe92:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fe96:	6809      	ldr	r1, [r1, #0]
 800fe98:	461c      	mov	r4, r3
 800fe9a:	f001 fd5d 	bl	8011958 <uxr_buffer_delete_entity>
 800fe9e:	4606      	mov	r6, r0
 800fea0:	6938      	ldr	r0, [r7, #16]
 800fea2:	4622      	mov	r2, r4
 800fea4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800fea8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800feac:	f000 fc40 	bl	8010730 <run_xrce_session>
 800feb0:	4604      	mov	r4, r0
 800feb2:	6938      	ldr	r0, [r7, #16]
 800feb4:	4632      	mov	r2, r6
 800feb6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800feba:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800febe:	f000 fc37 	bl	8010730 <run_xrce_session>
 800fec2:	b12c      	cbz	r4, 800fed0 <rmw_destroy_publisher+0x9c>
 800fec4:	b120      	cbz	r0, 800fed0 <rmw_destroy_publisher+0x9c>
 800fec6:	2400      	movs	r4, #0
 800fec8:	4628      	mov	r0, r5
 800feca:	f000 fadf 	bl	801048c <rmw_uxrce_fini_publisher_memory>
 800fece:	e7ba      	b.n	800fe46 <rmw_destroy_publisher+0x12>
 800fed0:	2402      	movs	r4, #2
 800fed2:	e7f9      	b.n	800fec8 <rmw_destroy_publisher+0x94>

0800fed4 <rmw_create_subscription>:
 800fed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed8:	b08d      	sub	sp, #52	; 0x34
 800feda:	2800      	cmp	r0, #0
 800fedc:	f000 80cf 	beq.w	801007e <rmw_create_subscription+0x1aa>
 800fee0:	460e      	mov	r6, r1
 800fee2:	2900      	cmp	r1, #0
 800fee4:	f000 80cb 	beq.w	801007e <rmw_create_subscription+0x1aa>
 800fee8:	4604      	mov	r4, r0
 800feea:	6800      	ldr	r0, [r0, #0]
 800feec:	4615      	mov	r5, r2
 800feee:	4698      	mov	r8, r3
 800fef0:	f000 fc9e 	bl	8010830 <is_uxrce_rmw_identifier_valid>
 800fef4:	2800      	cmp	r0, #0
 800fef6:	f000 80c2 	beq.w	801007e <rmw_create_subscription+0x1aa>
 800fefa:	2d00      	cmp	r5, #0
 800fefc:	f000 80bf 	beq.w	801007e <rmw_create_subscription+0x1aa>
 800ff00:	782b      	ldrb	r3, [r5, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	f000 80bb 	beq.w	801007e <rmw_create_subscription+0x1aa>
 800ff08:	f1b8 0f00 	cmp.w	r8, #0
 800ff0c:	f000 80b7 	beq.w	801007e <rmw_create_subscription+0x1aa>
 800ff10:	485d      	ldr	r0, [pc, #372]	; (8010088 <rmw_create_subscription+0x1b4>)
 800ff12:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ff16:	f007 f823 	bl	8016f60 <get_memory>
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	f000 80af 	beq.w	8010080 <rmw_create_subscription+0x1ac>
 800ff22:	68c7      	ldr	r7, [r0, #12]
 800ff24:	2300      	movs	r3, #0
 800ff26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ff2a:	f007 f881 	bl	8017030 <rmw_get_implementation_identifier>
 800ff2e:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800ff32:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ff34:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800ff38:	4628      	mov	r0, r5
 800ff3a:	f7f0 f95b 	bl	80001f4 <strlen>
 800ff3e:	3001      	adds	r0, #1
 800ff40:	283c      	cmp	r0, #60	; 0x3c
 800ff42:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800ff46:	f200 8097 	bhi.w	8010078 <rmw_create_subscription+0x1a4>
 800ff4a:	4a50      	ldr	r2, [pc, #320]	; (801008c <rmw_create_subscription+0x1b8>)
 800ff4c:	462b      	mov	r3, r5
 800ff4e:	213c      	movs	r1, #60	; 0x3c
 800ff50:	4650      	mov	r0, sl
 800ff52:	f00a f929 	bl	801a1a8 <sniprintf>
 800ff56:	4641      	mov	r1, r8
 800ff58:	f8c7 9020 	str.w	r9, [r7, #32]
 800ff5c:	2250      	movs	r2, #80	; 0x50
 800ff5e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ff62:	f00a fba0 	bl	801a6a6 <memcpy>
 800ff66:	494a      	ldr	r1, [pc, #296]	; (8010090 <rmw_create_subscription+0x1bc>)
 800ff68:	4630      	mov	r0, r6
 800ff6a:	f000 fc6f 	bl	801084c <get_message_typesupport_handle>
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	f000 8082 	beq.w	8010078 <rmw_create_subscription+0x1a4>
 800ff74:	6842      	ldr	r2, [r0, #4]
 800ff76:	61ba      	str	r2, [r7, #24]
 800ff78:	2a00      	cmp	r2, #0
 800ff7a:	d07d      	beq.n	8010078 <rmw_create_subscription+0x1a4>
 800ff7c:	4629      	mov	r1, r5
 800ff7e:	4643      	mov	r3, r8
 800ff80:	4648      	mov	r0, r9
 800ff82:	f007 fa9f 	bl	80174c4 <create_topic>
 800ff86:	61f8      	str	r0, [r7, #28]
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	d075      	beq.n	8010078 <rmw_create_subscription+0x1a4>
 800ff8c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ff90:	f241 539c 	movw	r3, #5532	; 0x159c
 800ff94:	2104      	movs	r1, #4
 800ff96:	5ad0      	ldrh	r0, [r2, r3]
 800ff98:	1c45      	adds	r5, r0, #1
 800ff9a:	52d5      	strh	r5, [r2, r3]
 800ff9c:	f001 fede 	bl	8011d5c <uxr_object_id>
 800ffa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffa4:	6138      	str	r0, [r7, #16]
 800ffa6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800ffaa:	2606      	movs	r6, #6
 800ffac:	9600      	str	r6, [sp, #0]
 800ffae:	6811      	ldr	r1, [r2, #0]
 800ffb0:	693a      	ldr	r2, [r7, #16]
 800ffb2:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ffb6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ffba:	f001 fdad 	bl	8011b18 <uxr_buffer_create_subscriber_bin>
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ffc4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ffc8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ffcc:	f000 fbb0 	bl	8010730 <run_xrce_session>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d04d      	beq.n	8010070 <rmw_create_subscription+0x19c>
 800ffd4:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ffd8:	f241 539e 	movw	r3, #5534	; 0x159e
 800ffdc:	4631      	mov	r1, r6
 800ffde:	5ad0      	ldrh	r0, [r2, r3]
 800ffe0:	1c45      	adds	r5, r0, #1
 800ffe2:	52d5      	strh	r5, [r2, r3]
 800ffe4:	f001 feba 	bl	8011d5c <uxr_object_id>
 800ffe8:	ad08      	add	r5, sp, #32
 800ffea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	6178      	str	r0, [r7, #20]
 800fff2:	4641      	mov	r1, r8
 800fff4:	4628      	mov	r0, r5
 800fff6:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800fffa:	9305      	str	r3, [sp, #20]
 800fffc:	f000 fbb4 	bl	8010768 <convert_qos_profile>
 8010000:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010004:	9b05      	ldr	r3, [sp, #20]
 8010006:	9001      	str	r0, [sp, #4]
 8010008:	9603      	str	r6, [sp, #12]
 801000a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801000e:	691b      	ldr	r3, [r3, #16]
 8010010:	9300      	str	r3, [sp, #0]
 8010012:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8010016:	f8db 1000 	ldr.w	r1, [fp]
 801001a:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 801001e:	f001 fe23 	bl	8011c68 <uxr_buffer_create_datareader_bin>
 8010022:	4602      	mov	r2, r0
 8010024:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010028:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801002c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010030:	f000 fb7e 	bl	8010730 <run_xrce_session>
 8010034:	b1e0      	cbz	r0, 8010070 <rmw_create_subscription+0x19c>
 8010036:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801003a:	f898 3008 	ldrb.w	r3, [r8, #8]
 801003e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010042:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010046:	2200      	movs	r2, #0
 8010048:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 801004c:	2b02      	cmp	r3, #2
 801004e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010052:	bf0c      	ite	eq
 8010054:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8010058:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 801005c:	9307      	str	r3, [sp, #28]
 801005e:	aa0a      	add	r2, sp, #40	; 0x28
 8010060:	9200      	str	r2, [sp, #0]
 8010062:	697a      	ldr	r2, [r7, #20]
 8010064:	6809      	ldr	r1, [r1, #0]
 8010066:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801006a:	f001 fea5 	bl	8011db8 <uxr_buffer_request_data>
 801006e:	e007      	b.n	8010080 <rmw_create_subscription+0x1ac>
 8010070:	4805      	ldr	r0, [pc, #20]	; (8010088 <rmw_create_subscription+0x1b4>)
 8010072:	4639      	mov	r1, r7
 8010074:	f006 ff84 	bl	8016f80 <put_memory>
 8010078:	4620      	mov	r0, r4
 801007a:	f000 fa1d 	bl	80104b8 <rmw_uxrce_fini_subscription_memory>
 801007e:	2400      	movs	r4, #0
 8010080:	4620      	mov	r0, r4
 8010082:	b00d      	add	sp, #52	; 0x34
 8010084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010088:	2000d154 	.word	0x2000d154
 801008c:	0801b9a4 	.word	0x0801b9a4
 8010090:	0801b970 	.word	0x0801b970

08010094 <rmw_subscription_get_actual_qos>:
 8010094:	2000      	movs	r0, #0
 8010096:	4770      	bx	lr

08010098 <rmw_destroy_subscription>:
 8010098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801009a:	b128      	cbz	r0, 80100a8 <rmw_destroy_subscription+0x10>
 801009c:	4604      	mov	r4, r0
 801009e:	6800      	ldr	r0, [r0, #0]
 80100a0:	460d      	mov	r5, r1
 80100a2:	f000 fbc5 	bl	8010830 <is_uxrce_rmw_identifier_valid>
 80100a6:	b910      	cbnz	r0, 80100ae <rmw_destroy_subscription+0x16>
 80100a8:	2401      	movs	r4, #1
 80100aa:	4620      	mov	r0, r4
 80100ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100ae:	6863      	ldr	r3, [r4, #4]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d0f9      	beq.n	80100a8 <rmw_destroy_subscription+0x10>
 80100b4:	2d00      	cmp	r5, #0
 80100b6:	d0f7      	beq.n	80100a8 <rmw_destroy_subscription+0x10>
 80100b8:	6828      	ldr	r0, [r5, #0]
 80100ba:	f000 fbb9 	bl	8010830 <is_uxrce_rmw_identifier_valid>
 80100be:	2800      	cmp	r0, #0
 80100c0:	d0f2      	beq.n	80100a8 <rmw_destroy_subscription+0x10>
 80100c2:	686c      	ldr	r4, [r5, #4]
 80100c4:	2c00      	cmp	r4, #0
 80100c6:	d0ef      	beq.n	80100a8 <rmw_destroy_subscription+0x10>
 80100c8:	6a26      	ldr	r6, [r4, #32]
 80100ca:	6962      	ldr	r2, [r4, #20]
 80100cc:	6930      	ldr	r0, [r6, #16]
 80100ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80100d2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80100d6:	6819      	ldr	r1, [r3, #0]
 80100d8:	f001 fea8 	bl	8011e2c <uxr_buffer_cancel_data>
 80100dc:	4602      	mov	r2, r0
 80100de:	6930      	ldr	r0, [r6, #16]
 80100e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80100e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80100e8:	f000 fb22 	bl	8010730 <run_xrce_session>
 80100ec:	69e0      	ldr	r0, [r4, #28]
 80100ee:	f007 fa4b 	bl	8017588 <destroy_topic>
 80100f2:	6a23      	ldr	r3, [r4, #32]
 80100f4:	6962      	ldr	r2, [r4, #20]
 80100f6:	6918      	ldr	r0, [r3, #16]
 80100f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80100fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010100:	6819      	ldr	r1, [r3, #0]
 8010102:	f001 fc29 	bl	8011958 <uxr_buffer_delete_entity>
 8010106:	6a21      	ldr	r1, [r4, #32]
 8010108:	6922      	ldr	r2, [r4, #16]
 801010a:	4603      	mov	r3, r0
 801010c:	6908      	ldr	r0, [r1, #16]
 801010e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010112:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010116:	6809      	ldr	r1, [r1, #0]
 8010118:	461c      	mov	r4, r3
 801011a:	f001 fc1d 	bl	8011958 <uxr_buffer_delete_entity>
 801011e:	4607      	mov	r7, r0
 8010120:	6930      	ldr	r0, [r6, #16]
 8010122:	4622      	mov	r2, r4
 8010124:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010128:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801012c:	f000 fb00 	bl	8010730 <run_xrce_session>
 8010130:	4604      	mov	r4, r0
 8010132:	6930      	ldr	r0, [r6, #16]
 8010134:	463a      	mov	r2, r7
 8010136:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801013a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801013e:	f000 faf7 	bl	8010730 <run_xrce_session>
 8010142:	b12c      	cbz	r4, 8010150 <rmw_destroy_subscription+0xb8>
 8010144:	b120      	cbz	r0, 8010150 <rmw_destroy_subscription+0xb8>
 8010146:	2400      	movs	r4, #0
 8010148:	4628      	mov	r0, r5
 801014a:	f000 f9b5 	bl	80104b8 <rmw_uxrce_fini_subscription_memory>
 801014e:	e7ac      	b.n	80100aa <rmw_destroy_subscription+0x12>
 8010150:	2402      	movs	r4, #2
 8010152:	e7f9      	b.n	8010148 <rmw_destroy_subscription+0xb0>

08010154 <rmw_take_with_info>:
 8010154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010156:	4604      	mov	r4, r0
 8010158:	6800      	ldr	r0, [r0, #0]
 801015a:	b089      	sub	sp, #36	; 0x24
 801015c:	460f      	mov	r7, r1
 801015e:	4615      	mov	r5, r2
 8010160:	b128      	cbz	r0, 801016e <rmw_take_with_info+0x1a>
 8010162:	4b24      	ldr	r3, [pc, #144]	; (80101f4 <rmw_take_with_info+0xa0>)
 8010164:	6819      	ldr	r1, [r3, #0]
 8010166:	f7f0 f83b 	bl	80001e0 <strcmp>
 801016a:	2800      	cmp	r0, #0
 801016c:	d13e      	bne.n	80101ec <rmw_take_with_info+0x98>
 801016e:	b305      	cbz	r5, 80101b2 <rmw_take_with_info+0x5e>
 8010170:	6864      	ldr	r4, [r4, #4]
 8010172:	2300      	movs	r3, #0
 8010174:	702b      	strb	r3, [r5, #0]
 8010176:	f000 fa63 	bl	8010640 <rmw_uxrce_clean_expired_static_input_buffer>
 801017a:	4620      	mov	r0, r4
 801017c:	f000 fa36 	bl	80105ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8010180:	4606      	mov	r6, r0
 8010182:	b1f0      	cbz	r0, 80101c2 <rmw_take_with_info+0x6e>
 8010184:	68c1      	ldr	r1, [r0, #12]
 8010186:	4668      	mov	r0, sp
 8010188:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801018c:	3110      	adds	r1, #16
 801018e:	f001 fb73 	bl	8011878 <ucdr_init_buffer>
 8010192:	69a3      	ldr	r3, [r4, #24]
 8010194:	4639      	mov	r1, r7
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	4668      	mov	r0, sp
 801019a:	4798      	blx	r3
 801019c:	4631      	mov	r1, r6
 801019e:	4604      	mov	r4, r0
 80101a0:	4815      	ldr	r0, [pc, #84]	; (80101f8 <rmw_take_with_info+0xa4>)
 80101a2:	f006 feed 	bl	8016f80 <put_memory>
 80101a6:	702c      	strb	r4, [r5, #0]
 80101a8:	f084 0001 	eor.w	r0, r4, #1
 80101ac:	b2c0      	uxtb	r0, r0
 80101ae:	b009      	add	sp, #36	; 0x24
 80101b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101b2:	6864      	ldr	r4, [r4, #4]
 80101b4:	f000 fa44 	bl	8010640 <rmw_uxrce_clean_expired_static_input_buffer>
 80101b8:	4620      	mov	r0, r4
 80101ba:	f000 fa17 	bl	80105ec <rmw_uxrce_find_static_input_buffer_by_owner>
 80101be:	4605      	mov	r5, r0
 80101c0:	b910      	cbnz	r0, 80101c8 <rmw_take_with_info+0x74>
 80101c2:	2001      	movs	r0, #1
 80101c4:	b009      	add	sp, #36	; 0x24
 80101c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101c8:	68e9      	ldr	r1, [r5, #12]
 80101ca:	4668      	mov	r0, sp
 80101cc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80101d0:	3110      	adds	r1, #16
 80101d2:	f001 fb51 	bl	8011878 <ucdr_init_buffer>
 80101d6:	69a3      	ldr	r3, [r4, #24]
 80101d8:	4639      	mov	r1, r7
 80101da:	68db      	ldr	r3, [r3, #12]
 80101dc:	4668      	mov	r0, sp
 80101de:	4798      	blx	r3
 80101e0:	4629      	mov	r1, r5
 80101e2:	4604      	mov	r4, r0
 80101e4:	4804      	ldr	r0, [pc, #16]	; (80101f8 <rmw_take_with_info+0xa4>)
 80101e6:	f006 fecb 	bl	8016f80 <put_memory>
 80101ea:	e7dd      	b.n	80101a8 <rmw_take_with_info+0x54>
 80101ec:	200c      	movs	r0, #12
 80101ee:	b009      	add	sp, #36	; 0x24
 80101f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101f2:	bf00      	nop
 80101f4:	0801beac 	.word	0x0801beac
 80101f8:	20009ee8 	.word	0x20009ee8

080101fc <rmw_uxrce_init_service_memory>:
 80101fc:	b1b2      	cbz	r2, 801022c <rmw_uxrce_init_service_memory+0x30>
 80101fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010200:	7a07      	ldrb	r7, [r0, #8]
 8010202:	4605      	mov	r5, r0
 8010204:	b98f      	cbnz	r7, 801022a <rmw_uxrce_init_service_memory+0x2e>
 8010206:	e9c0 7700 	strd	r7, r7, [r0]
 801020a:	460c      	mov	r4, r1
 801020c:	23c8      	movs	r3, #200	; 0xc8
 801020e:	2101      	movs	r1, #1
 8010210:	fb03 4602 	mla	r6, r3, r2, r4
 8010214:	60c3      	str	r3, [r0, #12]
 8010216:	7201      	strb	r1, [r0, #8]
 8010218:	4621      	mov	r1, r4
 801021a:	4628      	mov	r0, r5
 801021c:	f006 feb0 	bl	8016f80 <put_memory>
 8010220:	60e4      	str	r4, [r4, #12]
 8010222:	f804 7bc8 	strb.w	r7, [r4], #200
 8010226:	42a6      	cmp	r6, r4
 8010228:	d1f6      	bne.n	8010218 <rmw_uxrce_init_service_memory+0x1c>
 801022a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801022c:	4770      	bx	lr
 801022e:	bf00      	nop

08010230 <rmw_uxrce_init_client_memory>:
 8010230:	b1b2      	cbz	r2, 8010260 <rmw_uxrce_init_client_memory+0x30>
 8010232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010234:	7a07      	ldrb	r7, [r0, #8]
 8010236:	4605      	mov	r5, r0
 8010238:	b98f      	cbnz	r7, 801025e <rmw_uxrce_init_client_memory+0x2e>
 801023a:	e9c0 7700 	strd	r7, r7, [r0]
 801023e:	460c      	mov	r4, r1
 8010240:	23c8      	movs	r3, #200	; 0xc8
 8010242:	2101      	movs	r1, #1
 8010244:	fb03 4602 	mla	r6, r3, r2, r4
 8010248:	60c3      	str	r3, [r0, #12]
 801024a:	7201      	strb	r1, [r0, #8]
 801024c:	4621      	mov	r1, r4
 801024e:	4628      	mov	r0, r5
 8010250:	f006 fe96 	bl	8016f80 <put_memory>
 8010254:	60e4      	str	r4, [r4, #12]
 8010256:	f804 7bc8 	strb.w	r7, [r4], #200
 801025a:	42a6      	cmp	r6, r4
 801025c:	d1f6      	bne.n	801024c <rmw_uxrce_init_client_memory+0x1c>
 801025e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010260:	4770      	bx	lr
 8010262:	bf00      	nop

08010264 <rmw_uxrce_init_publisher_memory>:
 8010264:	b1b2      	cbz	r2, 8010294 <rmw_uxrce_init_publisher_memory+0x30>
 8010266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010268:	7a07      	ldrb	r7, [r0, #8]
 801026a:	4605      	mov	r5, r0
 801026c:	b98f      	cbnz	r7, 8010292 <rmw_uxrce_init_publisher_memory+0x2e>
 801026e:	e9c0 7700 	strd	r7, r7, [r0]
 8010272:	460c      	mov	r4, r1
 8010274:	23d8      	movs	r3, #216	; 0xd8
 8010276:	2101      	movs	r1, #1
 8010278:	fb03 4602 	mla	r6, r3, r2, r4
 801027c:	60c3      	str	r3, [r0, #12]
 801027e:	7201      	strb	r1, [r0, #8]
 8010280:	4621      	mov	r1, r4
 8010282:	4628      	mov	r0, r5
 8010284:	f006 fe7c 	bl	8016f80 <put_memory>
 8010288:	60e4      	str	r4, [r4, #12]
 801028a:	f804 7bd8 	strb.w	r7, [r4], #216
 801028e:	42a6      	cmp	r6, r4
 8010290:	d1f6      	bne.n	8010280 <rmw_uxrce_init_publisher_memory+0x1c>
 8010292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop

08010298 <rmw_uxrce_init_subscription_memory>:
 8010298:	b1b2      	cbz	r2, 80102c8 <rmw_uxrce_init_subscription_memory+0x30>
 801029a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801029c:	7a07      	ldrb	r7, [r0, #8]
 801029e:	4605      	mov	r5, r0
 80102a0:	b98f      	cbnz	r7, 80102c6 <rmw_uxrce_init_subscription_memory+0x2e>
 80102a2:	e9c0 7700 	strd	r7, r7, [r0]
 80102a6:	460c      	mov	r4, r1
 80102a8:	23d0      	movs	r3, #208	; 0xd0
 80102aa:	2101      	movs	r1, #1
 80102ac:	fb03 4602 	mla	r6, r3, r2, r4
 80102b0:	60c3      	str	r3, [r0, #12]
 80102b2:	7201      	strb	r1, [r0, #8]
 80102b4:	4621      	mov	r1, r4
 80102b6:	4628      	mov	r0, r5
 80102b8:	f006 fe62 	bl	8016f80 <put_memory>
 80102bc:	60e4      	str	r4, [r4, #12]
 80102be:	f804 7bd0 	strb.w	r7, [r4], #208
 80102c2:	42a6      	cmp	r6, r4
 80102c4:	d1f6      	bne.n	80102b4 <rmw_uxrce_init_subscription_memory+0x1c>
 80102c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop

080102cc <rmw_uxrce_init_node_memory>:
 80102cc:	b1b2      	cbz	r2, 80102fc <rmw_uxrce_init_node_memory+0x30>
 80102ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102d0:	7a07      	ldrb	r7, [r0, #8]
 80102d2:	4605      	mov	r5, r0
 80102d4:	b98f      	cbnz	r7, 80102fa <rmw_uxrce_init_node_memory+0x2e>
 80102d6:	e9c0 7700 	strd	r7, r7, [r0]
 80102da:	460c      	mov	r4, r1
 80102dc:	23a4      	movs	r3, #164	; 0xa4
 80102de:	2101      	movs	r1, #1
 80102e0:	fb03 4602 	mla	r6, r3, r2, r4
 80102e4:	60c3      	str	r3, [r0, #12]
 80102e6:	7201      	strb	r1, [r0, #8]
 80102e8:	4621      	mov	r1, r4
 80102ea:	4628      	mov	r0, r5
 80102ec:	f006 fe48 	bl	8016f80 <put_memory>
 80102f0:	60e4      	str	r4, [r4, #12]
 80102f2:	f804 7ba4 	strb.w	r7, [r4], #164
 80102f6:	42a6      	cmp	r6, r4
 80102f8:	d1f6      	bne.n	80102e8 <rmw_uxrce_init_node_memory+0x1c>
 80102fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102fc:	4770      	bx	lr
 80102fe:	bf00      	nop

08010300 <rmw_uxrce_init_session_memory>:
 8010300:	b1d2      	cbz	r2, 8010338 <rmw_uxrce_init_session_memory+0x38>
 8010302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010306:	7a07      	ldrb	r7, [r0, #8]
 8010308:	4605      	mov	r5, r0
 801030a:	b99f      	cbnz	r7, 8010334 <rmw_uxrce_init_session_memory+0x34>
 801030c:	e9c0 7700 	strd	r7, r7, [r0]
 8010310:	f241 53a8 	movw	r3, #5544	; 0x15a8
 8010314:	460c      	mov	r4, r1
 8010316:	2101      	movs	r1, #1
 8010318:	fb03 4602 	mla	r6, r3, r2, r4
 801031c:	60c3      	str	r3, [r0, #12]
 801031e:	4698      	mov	r8, r3
 8010320:	7201      	strb	r1, [r0, #8]
 8010322:	4621      	mov	r1, r4
 8010324:	4628      	mov	r0, r5
 8010326:	f006 fe2b 	bl	8016f80 <put_memory>
 801032a:	60e4      	str	r4, [r4, #12]
 801032c:	7027      	strb	r7, [r4, #0]
 801032e:	4444      	add	r4, r8
 8010330:	42a6      	cmp	r6, r4
 8010332:	d1f6      	bne.n	8010322 <rmw_uxrce_init_session_memory+0x22>
 8010334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010338:	4770      	bx	lr
 801033a:	bf00      	nop

0801033c <rmw_uxrce_init_topic_memory>:
 801033c:	b1c2      	cbz	r2, 8010370 <rmw_uxrce_init_topic_memory+0x34>
 801033e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010340:	7a07      	ldrb	r7, [r0, #8]
 8010342:	4606      	mov	r6, r0
 8010344:	b99f      	cbnz	r7, 801036e <rmw_uxrce_init_topic_memory+0x32>
 8010346:	e9c0 7700 	strd	r7, r7, [r0]
 801034a:	460c      	mov	r4, r1
 801034c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010350:	2101      	movs	r1, #1
 8010352:	231c      	movs	r3, #28
 8010354:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010358:	7201      	strb	r1, [r0, #8]
 801035a:	60c3      	str	r3, [r0, #12]
 801035c:	4621      	mov	r1, r4
 801035e:	4630      	mov	r0, r6
 8010360:	f006 fe0e 	bl	8016f80 <put_memory>
 8010364:	60e4      	str	r4, [r4, #12]
 8010366:	f804 7b1c 	strb.w	r7, [r4], #28
 801036a:	42a5      	cmp	r5, r4
 801036c:	d1f6      	bne.n	801035c <rmw_uxrce_init_topic_memory+0x20>
 801036e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010370:	4770      	bx	lr
 8010372:	bf00      	nop

08010374 <rmw_uxrce_init_static_input_buffer_memory>:
 8010374:	b1d2      	cbz	r2, 80103ac <rmw_uxrce_init_static_input_buffer_memory+0x38>
 8010376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010378:	7a07      	ldrb	r7, [r0, #8]
 801037a:	4606      	mov	r6, r0
 801037c:	b9af      	cbnz	r7, 80103aa <rmw_uxrce_init_static_input_buffer_memory+0x36>
 801037e:	e9c0 7700 	strd	r7, r7, [r0]
 8010382:	460c      	mov	r4, r1
 8010384:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 8010388:	2101      	movs	r1, #1
 801038a:	f44f 6304 	mov.w	r3, #2112	; 0x840
 801038e:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 8010392:	7201      	strb	r1, [r0, #8]
 8010394:	60c3      	str	r3, [r0, #12]
 8010396:	4621      	mov	r1, r4
 8010398:	4630      	mov	r0, r6
 801039a:	f006 fdf1 	bl	8016f80 <put_memory>
 801039e:	60e4      	str	r4, [r4, #12]
 80103a0:	7027      	strb	r7, [r4, #0]
 80103a2:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 80103a6:	42a5      	cmp	r5, r4
 80103a8:	d1f5      	bne.n	8010396 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80103aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop

080103b0 <rmw_uxrce_init_init_options_impl_memory>:
 80103b0:	b1b2      	cbz	r2, 80103e0 <rmw_uxrce_init_init_options_impl_memory+0x30>
 80103b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b4:	7a07      	ldrb	r7, [r0, #8]
 80103b6:	4605      	mov	r5, r0
 80103b8:	b98f      	cbnz	r7, 80103de <rmw_uxrce_init_init_options_impl_memory+0x2e>
 80103ba:	e9c0 7700 	strd	r7, r7, [r0]
 80103be:	460c      	mov	r4, r1
 80103c0:	232c      	movs	r3, #44	; 0x2c
 80103c2:	2101      	movs	r1, #1
 80103c4:	fb03 4602 	mla	r6, r3, r2, r4
 80103c8:	60c3      	str	r3, [r0, #12]
 80103ca:	7201      	strb	r1, [r0, #8]
 80103cc:	4621      	mov	r1, r4
 80103ce:	4628      	mov	r0, r5
 80103d0:	f006 fdd6 	bl	8016f80 <put_memory>
 80103d4:	60e4      	str	r4, [r4, #12]
 80103d6:	f804 7b2c 	strb.w	r7, [r4], #44
 80103da:	42a6      	cmp	r6, r4
 80103dc:	d1f6      	bne.n	80103cc <rmw_uxrce_init_init_options_impl_memory+0x1c>
 80103de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop

080103e4 <rmw_uxrce_init_wait_set_memory>:
 80103e4:	b1c2      	cbz	r2, 8010418 <rmw_uxrce_init_wait_set_memory+0x34>
 80103e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103e8:	7a07      	ldrb	r7, [r0, #8]
 80103ea:	4606      	mov	r6, r0
 80103ec:	b99f      	cbnz	r7, 8010416 <rmw_uxrce_init_wait_set_memory+0x32>
 80103ee:	e9c0 7700 	strd	r7, r7, [r0]
 80103f2:	460c      	mov	r4, r1
 80103f4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80103f8:	2101      	movs	r1, #1
 80103fa:	231c      	movs	r3, #28
 80103fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010400:	7201      	strb	r1, [r0, #8]
 8010402:	60c3      	str	r3, [r0, #12]
 8010404:	4621      	mov	r1, r4
 8010406:	4630      	mov	r0, r6
 8010408:	f006 fdba 	bl	8016f80 <put_memory>
 801040c:	60e4      	str	r4, [r4, #12]
 801040e:	f804 7b1c 	strb.w	r7, [r4], #28
 8010412:	42a5      	cmp	r5, r4
 8010414:	d1f6      	bne.n	8010404 <rmw_uxrce_init_wait_set_memory+0x20>
 8010416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop

0801041c <rmw_uxrce_init_guard_condition_memory>:
 801041c:	b1b2      	cbz	r2, 801044c <rmw_uxrce_init_guard_condition_memory+0x30>
 801041e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010420:	7a07      	ldrb	r7, [r0, #8]
 8010422:	4605      	mov	r5, r0
 8010424:	b98f      	cbnz	r7, 801044a <rmw_uxrce_init_guard_condition_memory+0x2e>
 8010426:	e9c0 7700 	strd	r7, r7, [r0]
 801042a:	460c      	mov	r4, r1
 801042c:	2320      	movs	r3, #32
 801042e:	2101      	movs	r1, #1
 8010430:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 8010434:	7201      	strb	r1, [r0, #8]
 8010436:	60c3      	str	r3, [r0, #12]
 8010438:	4621      	mov	r1, r4
 801043a:	4628      	mov	r0, r5
 801043c:	f006 fda0 	bl	8016f80 <put_memory>
 8010440:	60e4      	str	r4, [r4, #12]
 8010442:	f804 7b20 	strb.w	r7, [r4], #32
 8010446:	42a6      	cmp	r6, r4
 8010448:	d1f6      	bne.n	8010438 <rmw_uxrce_init_guard_condition_memory+0x1c>
 801044a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop

08010450 <rmw_uxrce_fini_session_memory>:
 8010450:	4601      	mov	r1, r0
 8010452:	4801      	ldr	r0, [pc, #4]	; (8010458 <rmw_uxrce_fini_session_memory+0x8>)
 8010454:	f006 bd94 	b.w	8016f80 <put_memory>
 8010458:	2000d090 	.word	0x2000d090

0801045c <rmw_uxrce_fini_node_memory>:
 801045c:	b538      	push	{r3, r4, r5, lr}
 801045e:	4604      	mov	r4, r0
 8010460:	6800      	ldr	r0, [r0, #0]
 8010462:	b128      	cbz	r0, 8010470 <rmw_uxrce_fini_node_memory+0x14>
 8010464:	4b07      	ldr	r3, [pc, #28]	; (8010484 <rmw_uxrce_fini_node_memory+0x28>)
 8010466:	6819      	ldr	r1, [r3, #0]
 8010468:	f7ef feba 	bl	80001e0 <strcmp>
 801046c:	b940      	cbnz	r0, 8010480 <rmw_uxrce_fini_node_memory+0x24>
 801046e:	6020      	str	r0, [r4, #0]
 8010470:	6861      	ldr	r1, [r4, #4]
 8010472:	b129      	cbz	r1, 8010480 <rmw_uxrce_fini_node_memory+0x24>
 8010474:	2500      	movs	r5, #0
 8010476:	4804      	ldr	r0, [pc, #16]	; (8010488 <rmw_uxrce_fini_node_memory+0x2c>)
 8010478:	610d      	str	r5, [r1, #16]
 801047a:	f006 fd81 	bl	8016f80 <put_memory>
 801047e:	6065      	str	r5, [r4, #4]
 8010480:	bd38      	pop	{r3, r4, r5, pc}
 8010482:	bf00      	nop
 8010484:	0801beac 	.word	0x0801beac
 8010488:	2000cebc 	.word	0x2000cebc

0801048c <rmw_uxrce_fini_publisher_memory>:
 801048c:	b510      	push	{r4, lr}
 801048e:	4604      	mov	r4, r0
 8010490:	6800      	ldr	r0, [r0, #0]
 8010492:	b128      	cbz	r0, 80104a0 <rmw_uxrce_fini_publisher_memory+0x14>
 8010494:	4b06      	ldr	r3, [pc, #24]	; (80104b0 <rmw_uxrce_fini_publisher_memory+0x24>)
 8010496:	6819      	ldr	r1, [r3, #0]
 8010498:	f7ef fea2 	bl	80001e0 <strcmp>
 801049c:	b938      	cbnz	r0, 80104ae <rmw_uxrce_fini_publisher_memory+0x22>
 801049e:	6020      	str	r0, [r4, #0]
 80104a0:	6861      	ldr	r1, [r4, #4]
 80104a2:	b121      	cbz	r1, 80104ae <rmw_uxrce_fini_publisher_memory+0x22>
 80104a4:	4803      	ldr	r0, [pc, #12]	; (80104b4 <rmw_uxrce_fini_publisher_memory+0x28>)
 80104a6:	f006 fd6b 	bl	8016f80 <put_memory>
 80104aa:	2300      	movs	r3, #0
 80104ac:	6063      	str	r3, [r4, #4]
 80104ae:	bd10      	pop	{r4, pc}
 80104b0:	0801beac 	.word	0x0801beac
 80104b4:	20009ef8 	.word	0x20009ef8

080104b8 <rmw_uxrce_fini_subscription_memory>:
 80104b8:	b510      	push	{r4, lr}
 80104ba:	4604      	mov	r4, r0
 80104bc:	6800      	ldr	r0, [r0, #0]
 80104be:	b128      	cbz	r0, 80104cc <rmw_uxrce_fini_subscription_memory+0x14>
 80104c0:	4b06      	ldr	r3, [pc, #24]	; (80104dc <rmw_uxrce_fini_subscription_memory+0x24>)
 80104c2:	6819      	ldr	r1, [r3, #0]
 80104c4:	f7ef fe8c 	bl	80001e0 <strcmp>
 80104c8:	b938      	cbnz	r0, 80104da <rmw_uxrce_fini_subscription_memory+0x22>
 80104ca:	6020      	str	r0, [r4, #0]
 80104cc:	6861      	ldr	r1, [r4, #4]
 80104ce:	b121      	cbz	r1, 80104da <rmw_uxrce_fini_subscription_memory+0x22>
 80104d0:	4803      	ldr	r0, [pc, #12]	; (80104e0 <rmw_uxrce_fini_subscription_memory+0x28>)
 80104d2:	f006 fd55 	bl	8016f80 <put_memory>
 80104d6:	2300      	movs	r3, #0
 80104d8:	6063      	str	r3, [r4, #4]
 80104da:	bd10      	pop	{r4, pc}
 80104dc:	0801beac 	.word	0x0801beac
 80104e0:	2000d154 	.word	0x2000d154

080104e4 <rmw_uxrce_fini_service_memory>:
 80104e4:	b510      	push	{r4, lr}
 80104e6:	4604      	mov	r4, r0
 80104e8:	6800      	ldr	r0, [r0, #0]
 80104ea:	b128      	cbz	r0, 80104f8 <rmw_uxrce_fini_service_memory+0x14>
 80104ec:	4b06      	ldr	r3, [pc, #24]	; (8010508 <rmw_uxrce_fini_service_memory+0x24>)
 80104ee:	6819      	ldr	r1, [r3, #0]
 80104f0:	f7ef fe76 	bl	80001e0 <strcmp>
 80104f4:	b938      	cbnz	r0, 8010506 <rmw_uxrce_fini_service_memory+0x22>
 80104f6:	6020      	str	r0, [r4, #0]
 80104f8:	6861      	ldr	r1, [r4, #4]
 80104fa:	b121      	cbz	r1, 8010506 <rmw_uxrce_fini_service_memory+0x22>
 80104fc:	4803      	ldr	r0, [pc, #12]	; (801050c <rmw_uxrce_fini_service_memory+0x28>)
 80104fe:	f006 fd3f 	bl	8016f80 <put_memory>
 8010502:	2300      	movs	r3, #0
 8010504:	6063      	str	r3, [r4, #4]
 8010506:	bd10      	pop	{r4, pc}
 8010508:	0801beac 	.word	0x0801beac
 801050c:	2000d144 	.word	0x2000d144

08010510 <rmw_uxrce_fini_client_memory>:
 8010510:	b510      	push	{r4, lr}
 8010512:	4604      	mov	r4, r0
 8010514:	6800      	ldr	r0, [r0, #0]
 8010516:	b128      	cbz	r0, 8010524 <rmw_uxrce_fini_client_memory+0x14>
 8010518:	4b06      	ldr	r3, [pc, #24]	; (8010534 <rmw_uxrce_fini_client_memory+0x24>)
 801051a:	6819      	ldr	r1, [r3, #0]
 801051c:	f7ef fe60 	bl	80001e0 <strcmp>
 8010520:	b938      	cbnz	r0, 8010532 <rmw_uxrce_fini_client_memory+0x22>
 8010522:	6020      	str	r0, [r4, #0]
 8010524:	6861      	ldr	r1, [r4, #4]
 8010526:	b121      	cbz	r1, 8010532 <rmw_uxrce_fini_client_memory+0x22>
 8010528:	4803      	ldr	r0, [pc, #12]	; (8010538 <rmw_uxrce_fini_client_memory+0x28>)
 801052a:	f006 fd29 	bl	8016f80 <put_memory>
 801052e:	2300      	movs	r3, #0
 8010530:	6063      	str	r3, [r4, #4]
 8010532:	bd10      	pop	{r4, pc}
 8010534:	0801beac 	.word	0x0801beac
 8010538:	2000a778 	.word	0x2000a778

0801053c <rmw_uxrce_fini_topic_memory>:
 801053c:	b510      	push	{r4, lr}
 801053e:	4601      	mov	r1, r0
 8010540:	4604      	mov	r4, r0
 8010542:	4803      	ldr	r0, [pc, #12]	; (8010550 <rmw_uxrce_fini_topic_memory+0x14>)
 8010544:	f006 fd1c 	bl	8016f80 <put_memory>
 8010548:	2300      	movs	r3, #0
 801054a:	61a3      	str	r3, [r4, #24]
 801054c:	bd10      	pop	{r4, pc}
 801054e:	bf00      	nop
 8010550:	2000d080 	.word	0x2000d080

08010554 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010554:	b082      	sub	sp, #8
 8010556:	b4f0      	push	{r4, r5, r6, r7}
 8010558:	4923      	ldr	r1, [pc, #140]	; (80105e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 801055a:	ac04      	add	r4, sp, #16
 801055c:	e884 000c 	stmia.w	r4, {r2, r3}
 8010560:	680d      	ldr	r5, [r1, #0]
 8010562:	9c05      	ldr	r4, [sp, #20]
 8010564:	2d00      	cmp	r5, #0
 8010566:	d03d      	beq.n	80105e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 8010568:	462b      	mov	r3, r5
 801056a:	2100      	movs	r1, #0
 801056c:	68da      	ldr	r2, [r3, #12]
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8010574:	4290      	cmp	r0, r2
 8010576:	bf08      	it	eq
 8010578:	3101      	addeq	r1, #1
 801057a:	2b00      	cmp	r3, #0
 801057c:	d1f6      	bne.n	801056c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801057e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010582:	2b02      	cmp	r3, #2
 8010584:	d026      	beq.n	80105d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 8010586:	d906      	bls.n	8010596 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8010588:	2b03      	cmp	r3, #3
 801058a:	d004      	beq.n	8010596 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 801058c:	2100      	movs	r1, #0
 801058e:	bcf0      	pop	{r4, r5, r6, r7}
 8010590:	4608      	mov	r0, r1
 8010592:	b002      	add	sp, #8
 8010594:	4770      	bx	lr
 8010596:	b304      	cbz	r4, 80105da <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010598:	428c      	cmp	r4, r1
 801059a:	d81e      	bhi.n	80105da <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801059c:	2d00      	cmp	r5, #0
 801059e:	d0f5      	beq.n	801058c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80105a0:	2100      	movs	r1, #0
 80105a2:	f04f 36ff 	mov.w	r6, #4294967295
 80105a6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80105aa:	e002      	b.n	80105b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 80105ac:	68ad      	ldr	r5, [r5, #8]
 80105ae:	2d00      	cmp	r5, #0
 80105b0:	d0ed      	beq.n	801058e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 80105b2:	68eb      	ldr	r3, [r5, #12]
 80105b4:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 80105b8:	4290      	cmp	r0, r2
 80105ba:	d1f7      	bne.n	80105ac <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80105bc:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80105c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c4:	42b2      	cmp	r2, r6
 80105c6:	eb73 0407 	sbcs.w	r4, r3, r7
 80105ca:	daef      	bge.n	80105ac <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80105cc:	4616      	mov	r6, r2
 80105ce:	461f      	mov	r7, r3
 80105d0:	4629      	mov	r1, r5
 80105d2:	e7eb      	b.n	80105ac <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80105d4:	b10c      	cbz	r4, 80105da <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80105d6:	428c      	cmp	r4, r1
 80105d8:	d9d8      	bls.n	801058c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80105da:	bcf0      	pop	{r4, r5, r6, r7}
 80105dc:	4802      	ldr	r0, [pc, #8]	; (80105e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 80105de:	b002      	add	sp, #8
 80105e0:	f006 bcbe 	b.w	8016f60 <get_memory>
 80105e4:	4629      	mov	r1, r5
 80105e6:	e7ca      	b.n	801057e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80105e8:	20009ee8 	.word	0x20009ee8

080105ec <rmw_uxrce_find_static_input_buffer_by_owner>:
 80105ec:	4b12      	ldr	r3, [pc, #72]	; (8010638 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	b1fb      	cbz	r3, 8010632 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 80105f2:	b4f0      	push	{r4, r5, r6, r7}
 80105f4:	f04f 0c00 	mov.w	ip, #0
 80105f8:	f04f 34ff 	mov.w	r4, #4294967295
 80105fc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8010600:	e001      	b.n	8010606 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8010602:	689b      	ldr	r3, [r3, #8]
 8010604:	b193      	cbz	r3, 801062c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 8010606:	68da      	ldr	r2, [r3, #12]
 8010608:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 801060c:	4288      	cmp	r0, r1
 801060e:	d1f8      	bne.n	8010602 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010610:	f602 0218 	addw	r2, r2, #2072	; 0x818
 8010614:	e9d2 6700 	ldrd	r6, r7, [r2]
 8010618:	42a6      	cmp	r6, r4
 801061a:	eb77 0205 	sbcs.w	r2, r7, r5
 801061e:	daf0      	bge.n	8010602 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010620:	469c      	mov	ip, r3
 8010622:	689b      	ldr	r3, [r3, #8]
 8010624:	4634      	mov	r4, r6
 8010626:	463d      	mov	r5, r7
 8010628:	2b00      	cmp	r3, #0
 801062a:	d1ec      	bne.n	8010606 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 801062c:	4660      	mov	r0, ip
 801062e:	bcf0      	pop	{r4, r5, r6, r7}
 8010630:	4770      	bx	lr
 8010632:	4618      	mov	r0, r3
 8010634:	4770      	bx	lr
 8010636:	bf00      	nop
 8010638:	20009ee8 	.word	0x20009ee8
 801063c:	00000000 	.word	0x00000000

08010640 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010644:	4e38      	ldr	r6, [pc, #224]	; (8010728 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 8010646:	f8d6 8000 	ldr.w	r8, [r6]
 801064a:	b083      	sub	sp, #12
 801064c:	f007 fbd2 	bl	8017df4 <rmw_uros_epoch_nanos>
 8010650:	f1b8 0f00 	cmp.w	r8, #0
 8010654:	d05f      	beq.n	8010716 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 8010656:	46b1      	mov	r9, r6
 8010658:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801065c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8010660:	2b04      	cmp	r3, #4
 8010662:	4682      	mov	sl, r0
 8010664:	468b      	mov	fp, r1
 8010666:	d02d      	beq.n	80106c4 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010668:	2b05      	cmp	r3, #5
 801066a:	d041      	beq.n	80106f0 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 801066c:	2b03      	cmp	r3, #3
 801066e:	d029      	beq.n	80106c4 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010670:	2200      	movs	r2, #0
 8010672:	2300      	movs	r3, #0
 8010674:	e9cd 2300 	strd	r2, r3, [sp]
 8010678:	2001      	movs	r0, #1
 801067a:	2100      	movs	r1, #0
 801067c:	9b00      	ldr	r3, [sp, #0]
 801067e:	f606 0618 	addw	r6, r6, #2072	; 0x818
 8010682:	e9d6 6700 	ldrd	r6, r7, [r6]
 8010686:	18c2      	adds	r2, r0, r3
 8010688:	9b01      	ldr	r3, [sp, #4]
 801068a:	eb41 0303 	adc.w	r3, r1, r3
 801068e:	1994      	adds	r4, r2, r6
 8010690:	eb43 0507 	adc.w	r5, r3, r7
 8010694:	4554      	cmp	r4, sl
 8010696:	eb75 020b 	sbcs.w	r2, r5, fp
 801069a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801069e:	db03      	blt.n	80106a8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 80106a0:	45b2      	cmp	sl, r6
 80106a2:	eb7b 0207 	sbcs.w	r2, fp, r7
 80106a6:	da05      	bge.n	80106b4 <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 80106a8:	4641      	mov	r1, r8
 80106aa:	4648      	mov	r0, r9
 80106ac:	9300      	str	r3, [sp, #0]
 80106ae:	f006 fc67 	bl	8016f80 <put_memory>
 80106b2:	9b00      	ldr	r3, [sp, #0]
 80106b4:	b37b      	cbz	r3, 8010716 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 80106b6:	4698      	mov	r8, r3
 80106b8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80106bc:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 80106c0:	2b04      	cmp	r3, #4
 80106c2:	d1d1      	bne.n	8010668 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 80106c4:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 80106c8:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 80106cc:	e9cd 2300 	strd	r2, r3, [sp]
 80106d0:	4313      	orrs	r3, r2
 80106d2:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 80106d6:	d015      	beq.n	8010704 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80106d8:	9a01      	ldr	r2, [sp, #4]
 80106da:	4b14      	ldr	r3, [pc, #80]	; (801072c <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 80106dc:	fb03 f702 	mul.w	r7, r3, r2
 80106e0:	9a00      	ldr	r2, [sp, #0]
 80106e2:	fba2 2303 	umull	r2, r3, r2, r3
 80106e6:	e9cd 2300 	strd	r2, r3, [sp]
 80106ea:	443b      	add	r3, r7
 80106ec:	9301      	str	r3, [sp, #4]
 80106ee:	e7c5      	b.n	801067c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 80106f0:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 80106f4:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 80106f8:	e9cd 2300 	strd	r2, r3, [sp]
 80106fc:	4313      	orrs	r3, r2
 80106fe:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 8010702:	d1e9      	bne.n	80106d8 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 8010704:	ea50 0301 	orrs.w	r3, r0, r1
 8010708:	bf02      	ittt	eq
 801070a:	a305      	addeq	r3, pc, #20	; (adr r3, 8010720 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 801070c:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 8010710:	e9cd 2300 	strdeq	r2, r3, [sp]
 8010714:	e7b2      	b.n	801067c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010716:	b003      	add	sp, #12
 8010718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071c:	f3af 8000 	nop.w
 8010720:	fc23ac00 	.word	0xfc23ac00
 8010724:	00000006 	.word	0x00000006
 8010728:	20009ee8 	.word	0x20009ee8
 801072c:	3b9aca00 	.word	0x3b9aca00

08010730 <run_xrce_session>:
 8010730:	b510      	push	{r4, lr}
 8010732:	788c      	ldrb	r4, [r1, #2]
 8010734:	b086      	sub	sp, #24
 8010736:	2c01      	cmp	r4, #1
 8010738:	f8ad 200e 	strh.w	r2, [sp, #14]
 801073c:	d00c      	beq.n	8010758 <run_xrce_session+0x28>
 801073e:	4619      	mov	r1, r3
 8010740:	2301      	movs	r3, #1
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	f10d 020e 	add.w	r2, sp, #14
 8010748:	f10d 0317 	add.w	r3, sp, #23
 801074c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010750:	f002 f958 	bl	8012a04 <uxr_run_session_until_all_status>
 8010754:	b006      	add	sp, #24
 8010756:	bd10      	pop	{r4, pc}
 8010758:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801075c:	f001 fd70 	bl	8012240 <uxr_flash_output_streams>
 8010760:	4620      	mov	r0, r4
 8010762:	b006      	add	sp, #24
 8010764:	bd10      	pop	{r4, pc}
 8010766:	bf00      	nop

08010768 <convert_qos_profile>:
 8010768:	b430      	push	{r4, r5}
 801076a:	7a0d      	ldrb	r5, [r1, #8]
 801076c:	780c      	ldrb	r4, [r1, #0]
 801076e:	7a4a      	ldrb	r2, [r1, #9]
 8010770:	8889      	ldrh	r1, [r1, #4]
 8010772:	8081      	strh	r1, [r0, #4]
 8010774:	f1a5 0502 	sub.w	r5, r5, #2
 8010778:	f1a4 0402 	sub.w	r4, r4, #2
 801077c:	2a02      	cmp	r2, #2
 801077e:	fab5 f585 	clz	r5, r5
 8010782:	fab4 f484 	clz	r4, r4
 8010786:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801078a:	ea4f 1454 	mov.w	r4, r4, lsr #5
 801078e:	bf18      	it	ne
 8010790:	2200      	movne	r2, #0
 8010792:	7045      	strb	r5, [r0, #1]
 8010794:	7084      	strb	r4, [r0, #2]
 8010796:	7002      	strb	r2, [r0, #0]
 8010798:	bc30      	pop	{r4, r5}
 801079a:	4770      	bx	lr

0801079c <generate_type_name>:
 801079c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801079e:	2300      	movs	r3, #0
 80107a0:	700b      	strb	r3, [r1, #0]
 80107a2:	6803      	ldr	r3, [r0, #0]
 80107a4:	b087      	sub	sp, #28
 80107a6:	4614      	mov	r4, r2
 80107a8:	b1d3      	cbz	r3, 80107e0 <generate_type_name+0x44>
 80107aa:	4d0f      	ldr	r5, [pc, #60]	; (80107e8 <generate_type_name+0x4c>)
 80107ac:	462f      	mov	r7, r5
 80107ae:	4a0f      	ldr	r2, [pc, #60]	; (80107ec <generate_type_name+0x50>)
 80107b0:	4e0f      	ldr	r6, [pc, #60]	; (80107f0 <generate_type_name+0x54>)
 80107b2:	6840      	ldr	r0, [r0, #4]
 80107b4:	9004      	str	r0, [sp, #16]
 80107b6:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80107ba:	4608      	mov	r0, r1
 80107bc:	9205      	str	r2, [sp, #20]
 80107be:	9503      	str	r5, [sp, #12]
 80107c0:	4a0c      	ldr	r2, [pc, #48]	; (80107f4 <generate_type_name+0x58>)
 80107c2:	9700      	str	r7, [sp, #0]
 80107c4:	4621      	mov	r1, r4
 80107c6:	f009 fcef 	bl	801a1a8 <sniprintf>
 80107ca:	2800      	cmp	r0, #0
 80107cc:	db05      	blt.n	80107da <generate_type_name+0x3e>
 80107ce:	4284      	cmp	r4, r0
 80107d0:	bfd4      	ite	le
 80107d2:	2000      	movle	r0, #0
 80107d4:	2001      	movgt	r0, #1
 80107d6:	b007      	add	sp, #28
 80107d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107da:	2000      	movs	r0, #0
 80107dc:	b007      	add	sp, #28
 80107de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107e0:	4b05      	ldr	r3, [pc, #20]	; (80107f8 <generate_type_name+0x5c>)
 80107e2:	4d01      	ldr	r5, [pc, #4]	; (80107e8 <generate_type_name+0x4c>)
 80107e4:	461f      	mov	r7, r3
 80107e6:	e7e2      	b.n	80107ae <generate_type_name+0x12>
 80107e8:	0801b994 	.word	0x0801b994
 80107ec:	0801b9a8 	.word	0x0801b9a8
 80107f0:	0801b9ac 	.word	0x0801b9ac
 80107f4:	0801b998 	.word	0x0801b998
 80107f8:	0801bc84 	.word	0x0801bc84

080107fc <generate_topic_name>:
 80107fc:	b510      	push	{r4, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	4b09      	ldr	r3, [pc, #36]	; (8010828 <generate_topic_name+0x2c>)
 8010802:	9000      	str	r0, [sp, #0]
 8010804:	4614      	mov	r4, r2
 8010806:	4608      	mov	r0, r1
 8010808:	4611      	mov	r1, r2
 801080a:	4a08      	ldr	r2, [pc, #32]	; (801082c <generate_topic_name+0x30>)
 801080c:	f009 fccc 	bl	801a1a8 <sniprintf>
 8010810:	2800      	cmp	r0, #0
 8010812:	db05      	blt.n	8010820 <generate_topic_name+0x24>
 8010814:	4284      	cmp	r4, r0
 8010816:	bfd4      	ite	le
 8010818:	2000      	movle	r0, #0
 801081a:	2001      	movgt	r0, #1
 801081c:	b002      	add	sp, #8
 801081e:	bd10      	pop	{r4, pc}
 8010820:	2000      	movs	r0, #0
 8010822:	b002      	add	sp, #8
 8010824:	bd10      	pop	{r4, pc}
 8010826:	bf00      	nop
 8010828:	0801b9b8 	.word	0x0801b9b8
 801082c:	0801b9b0 	.word	0x0801b9b0

08010830 <is_uxrce_rmw_identifier_valid>:
 8010830:	b510      	push	{r4, lr}
 8010832:	4604      	mov	r4, r0
 8010834:	b140      	cbz	r0, 8010848 <is_uxrce_rmw_identifier_valid+0x18>
 8010836:	f006 fbfb 	bl	8017030 <rmw_get_implementation_identifier>
 801083a:	4601      	mov	r1, r0
 801083c:	4620      	mov	r0, r4
 801083e:	f7ef fccf 	bl	80001e0 <strcmp>
 8010842:	fab0 f080 	clz	r0, r0
 8010846:	0940      	lsrs	r0, r0, #5
 8010848:	bd10      	pop	{r4, pc}
 801084a:	bf00      	nop

0801084c <get_message_typesupport_handle>:
 801084c:	6883      	ldr	r3, [r0, #8]
 801084e:	4718      	bx	r3

08010850 <get_message_typesupport_handle_function>:
 8010850:	b510      	push	{r4, lr}
 8010852:	4604      	mov	r4, r0
 8010854:	6800      	ldr	r0, [r0, #0]
 8010856:	f7ef fcc3 	bl	80001e0 <strcmp>
 801085a:	2800      	cmp	r0, #0
 801085c:	bf0c      	ite	eq
 801085e:	4620      	moveq	r0, r4
 8010860:	2000      	movne	r0, #0
 8010862:	bd10      	pop	{r4, pc}

08010864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010864:	f000 b82a 	b.w	80108bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>

08010868 <_Int32__max_serialized_size>:
 8010868:	b508      	push	{r3, lr}
 801086a:	2104      	movs	r1, #4
 801086c:	2000      	movs	r0, #0
 801086e:	f001 f807 	bl	8011880 <ucdr_alignment>
 8010872:	3004      	adds	r0, #4
 8010874:	bd08      	pop	{r3, pc}
 8010876:	bf00      	nop

08010878 <_Int32__cdr_deserialize>:
 8010878:	b109      	cbz	r1, 801087e <_Int32__cdr_deserialize+0x6>
 801087a:	f000 bf1b 	b.w	80116b4 <ucdr_deserialize_int32_t>
 801087e:	4608      	mov	r0, r1
 8010880:	4770      	bx	lr
 8010882:	bf00      	nop

08010884 <get_serialized_size_std_msgs__msg__Int32>:
 8010884:	b130      	cbz	r0, 8010894 <get_serialized_size_std_msgs__msg__Int32+0x10>
 8010886:	b508      	push	{r3, lr}
 8010888:	4608      	mov	r0, r1
 801088a:	2104      	movs	r1, #4
 801088c:	f000 fff8 	bl	8011880 <ucdr_alignment>
 8010890:	3004      	adds	r0, #4
 8010892:	bd08      	pop	{r3, pc}
 8010894:	4770      	bx	lr
 8010896:	bf00      	nop

08010898 <_Int32__cdr_serialize>:
 8010898:	460a      	mov	r2, r1
 801089a:	b118      	cbz	r0, 80108a4 <_Int32__cdr_serialize+0xc>
 801089c:	6801      	ldr	r1, [r0, #0]
 801089e:	4610      	mov	r0, r2
 80108a0:	f000 be70 	b.w	8011584 <ucdr_serialize_int32_t>
 80108a4:	4770      	bx	lr
 80108a6:	bf00      	nop

080108a8 <_Int32__get_serialized_size>:
 80108a8:	b130      	cbz	r0, 80108b8 <_Int32__get_serialized_size+0x10>
 80108aa:	b508      	push	{r3, lr}
 80108ac:	2104      	movs	r1, #4
 80108ae:	2000      	movs	r0, #0
 80108b0:	f000 ffe6 	bl	8011880 <ucdr_alignment>
 80108b4:	3004      	adds	r0, #4
 80108b6:	bd08      	pop	{r3, pc}
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop

080108bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80108bc:	4800      	ldr	r0, [pc, #0]	; (80108c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 80108be:	4770      	bx	lr
 80108c0:	20000068 	.word	0x20000068

080108c4 <ucdr_serialize_bool>:
 80108c4:	b538      	push	{r3, r4, r5, lr}
 80108c6:	460d      	mov	r5, r1
 80108c8:	2101      	movs	r1, #1
 80108ca:	4604      	mov	r4, r0
 80108cc:	f000 ff8e 	bl	80117ec <ucdr_check_final_buffer_behavior>
 80108d0:	b148      	cbz	r0, 80108e6 <ucdr_serialize_bool+0x22>
 80108d2:	68a3      	ldr	r3, [r4, #8]
 80108d4:	701d      	strb	r5, [r3, #0]
 80108d6:	68a2      	ldr	r2, [r4, #8]
 80108d8:	6923      	ldr	r3, [r4, #16]
 80108da:	3201      	adds	r2, #1
 80108dc:	3301      	adds	r3, #1
 80108de:	2101      	movs	r1, #1
 80108e0:	60a2      	str	r2, [r4, #8]
 80108e2:	6123      	str	r3, [r4, #16]
 80108e4:	7561      	strb	r1, [r4, #21]
 80108e6:	7da0      	ldrb	r0, [r4, #22]
 80108e8:	f080 0001 	eor.w	r0, r0, #1
 80108ec:	bd38      	pop	{r3, r4, r5, pc}
 80108ee:	bf00      	nop

080108f0 <ucdr_deserialize_bool>:
 80108f0:	b538      	push	{r3, r4, r5, lr}
 80108f2:	460d      	mov	r5, r1
 80108f4:	2101      	movs	r1, #1
 80108f6:	4604      	mov	r4, r0
 80108f8:	f000 ff78 	bl	80117ec <ucdr_check_final_buffer_behavior>
 80108fc:	b168      	cbz	r0, 801091a <ucdr_deserialize_bool+0x2a>
 80108fe:	68a2      	ldr	r2, [r4, #8]
 8010900:	6923      	ldr	r3, [r4, #16]
 8010902:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010906:	3900      	subs	r1, #0
 8010908:	f103 0301 	add.w	r3, r3, #1
 801090c:	bf18      	it	ne
 801090e:	2101      	movne	r1, #1
 8010910:	2001      	movs	r0, #1
 8010912:	7029      	strb	r1, [r5, #0]
 8010914:	60a2      	str	r2, [r4, #8]
 8010916:	6123      	str	r3, [r4, #16]
 8010918:	7560      	strb	r0, [r4, #21]
 801091a:	7da0      	ldrb	r0, [r4, #22]
 801091c:	f080 0001 	eor.w	r0, r0, #1
 8010920:	bd38      	pop	{r3, r4, r5, pc}
 8010922:	bf00      	nop

08010924 <ucdr_serialize_uint8_t>:
 8010924:	b538      	push	{r3, r4, r5, lr}
 8010926:	460d      	mov	r5, r1
 8010928:	2101      	movs	r1, #1
 801092a:	4604      	mov	r4, r0
 801092c:	f000 ff5e 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010930:	b148      	cbz	r0, 8010946 <ucdr_serialize_uint8_t+0x22>
 8010932:	68a3      	ldr	r3, [r4, #8]
 8010934:	701d      	strb	r5, [r3, #0]
 8010936:	68a2      	ldr	r2, [r4, #8]
 8010938:	6923      	ldr	r3, [r4, #16]
 801093a:	3201      	adds	r2, #1
 801093c:	3301      	adds	r3, #1
 801093e:	2101      	movs	r1, #1
 8010940:	60a2      	str	r2, [r4, #8]
 8010942:	6123      	str	r3, [r4, #16]
 8010944:	7561      	strb	r1, [r4, #21]
 8010946:	7da0      	ldrb	r0, [r4, #22]
 8010948:	f080 0001 	eor.w	r0, r0, #1
 801094c:	bd38      	pop	{r3, r4, r5, pc}
 801094e:	bf00      	nop

08010950 <ucdr_deserialize_uint8_t>:
 8010950:	b538      	push	{r3, r4, r5, lr}
 8010952:	460d      	mov	r5, r1
 8010954:	2101      	movs	r1, #1
 8010956:	4604      	mov	r4, r0
 8010958:	f000 ff48 	bl	80117ec <ucdr_check_final_buffer_behavior>
 801095c:	b150      	cbz	r0, 8010974 <ucdr_deserialize_uint8_t+0x24>
 801095e:	68a3      	ldr	r3, [r4, #8]
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	702b      	strb	r3, [r5, #0]
 8010964:	68a2      	ldr	r2, [r4, #8]
 8010966:	6923      	ldr	r3, [r4, #16]
 8010968:	3201      	adds	r2, #1
 801096a:	3301      	adds	r3, #1
 801096c:	2101      	movs	r1, #1
 801096e:	60a2      	str	r2, [r4, #8]
 8010970:	6123      	str	r3, [r4, #16]
 8010972:	7561      	strb	r1, [r4, #21]
 8010974:	7da0      	ldrb	r0, [r4, #22]
 8010976:	f080 0001 	eor.w	r0, r0, #1
 801097a:	bd38      	pop	{r3, r4, r5, pc}

0801097c <ucdr_serialize_uint16_t>:
 801097c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010980:	b082      	sub	sp, #8
 8010982:	460b      	mov	r3, r1
 8010984:	2102      	movs	r1, #2
 8010986:	4604      	mov	r4, r0
 8010988:	f8ad 3006 	strh.w	r3, [sp, #6]
 801098c:	f000 ff80 	bl	8011890 <ucdr_buffer_alignment>
 8010990:	4601      	mov	r1, r0
 8010992:	4620      	mov	r0, r4
 8010994:	7d67      	ldrb	r7, [r4, #21]
 8010996:	f000 ffbf 	bl	8011918 <ucdr_advance_buffer>
 801099a:	4620      	mov	r0, r4
 801099c:	2102      	movs	r1, #2
 801099e:	f000 ff19 	bl	80117d4 <ucdr_check_buffer_available_for>
 80109a2:	bb78      	cbnz	r0, 8010a04 <ucdr_serialize_uint16_t+0x88>
 80109a4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80109a8:	42b5      	cmp	r5, r6
 80109aa:	d926      	bls.n	80109fa <ucdr_serialize_uint16_t+0x7e>
 80109ac:	6922      	ldr	r2, [r4, #16]
 80109ae:	60a5      	str	r5, [r4, #8]
 80109b0:	1bad      	subs	r5, r5, r6
 80109b2:	442a      	add	r2, r5
 80109b4:	f1c5 0802 	rsb	r8, r5, #2
 80109b8:	6122      	str	r2, [r4, #16]
 80109ba:	4641      	mov	r1, r8
 80109bc:	4620      	mov	r0, r4
 80109be:	f000 ff15 	bl	80117ec <ucdr_check_final_buffer_behavior>
 80109c2:	2800      	cmp	r0, #0
 80109c4:	d03b      	beq.n	8010a3e <ucdr_serialize_uint16_t+0xc2>
 80109c6:	7d23      	ldrb	r3, [r4, #20]
 80109c8:	2b01      	cmp	r3, #1
 80109ca:	d04a      	beq.n	8010a62 <ucdr_serialize_uint16_t+0xe6>
 80109cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80109d0:	7033      	strb	r3, [r6, #0]
 80109d2:	2d00      	cmp	r5, #0
 80109d4:	d040      	beq.n	8010a58 <ucdr_serialize_uint16_t+0xdc>
 80109d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80109da:	7073      	strb	r3, [r6, #1]
 80109dc:	6923      	ldr	r3, [r4, #16]
 80109de:	68a2      	ldr	r2, [r4, #8]
 80109e0:	7da0      	ldrb	r0, [r4, #22]
 80109e2:	3302      	adds	r3, #2
 80109e4:	1b5b      	subs	r3, r3, r5
 80109e6:	4442      	add	r2, r8
 80109e8:	2102      	movs	r1, #2
 80109ea:	f080 0001 	eor.w	r0, r0, #1
 80109ee:	6123      	str	r3, [r4, #16]
 80109f0:	60a2      	str	r2, [r4, #8]
 80109f2:	7561      	strb	r1, [r4, #21]
 80109f4:	b002      	add	sp, #8
 80109f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109fa:	2102      	movs	r1, #2
 80109fc:	4620      	mov	r0, r4
 80109fe:	f000 fef5 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010a02:	b190      	cbz	r0, 8010a2a <ucdr_serialize_uint16_t+0xae>
 8010a04:	7d23      	ldrb	r3, [r4, #20]
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	68a3      	ldr	r3, [r4, #8]
 8010a0a:	d014      	beq.n	8010a36 <ucdr_serialize_uint16_t+0xba>
 8010a0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010a10:	701a      	strb	r2, [r3, #0]
 8010a12:	68a3      	ldr	r3, [r4, #8]
 8010a14:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010a18:	705a      	strb	r2, [r3, #1]
 8010a1a:	68a2      	ldr	r2, [r4, #8]
 8010a1c:	6923      	ldr	r3, [r4, #16]
 8010a1e:	3202      	adds	r2, #2
 8010a20:	3302      	adds	r3, #2
 8010a22:	2102      	movs	r1, #2
 8010a24:	60a2      	str	r2, [r4, #8]
 8010a26:	6123      	str	r3, [r4, #16]
 8010a28:	7561      	strb	r1, [r4, #21]
 8010a2a:	7da0      	ldrb	r0, [r4, #22]
 8010a2c:	f080 0001 	eor.w	r0, r0, #1
 8010a30:	b002      	add	sp, #8
 8010a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010a3a:	801a      	strh	r2, [r3, #0]
 8010a3c:	e7ed      	b.n	8010a1a <ucdr_serialize_uint16_t+0x9e>
 8010a3e:	68a2      	ldr	r2, [r4, #8]
 8010a40:	6923      	ldr	r3, [r4, #16]
 8010a42:	7da0      	ldrb	r0, [r4, #22]
 8010a44:	7567      	strb	r7, [r4, #21]
 8010a46:	1b52      	subs	r2, r2, r5
 8010a48:	1b5b      	subs	r3, r3, r5
 8010a4a:	f080 0001 	eor.w	r0, r0, #1
 8010a4e:	60a2      	str	r2, [r4, #8]
 8010a50:	6123      	str	r3, [r4, #16]
 8010a52:	b002      	add	sp, #8
 8010a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a58:	68a3      	ldr	r3, [r4, #8]
 8010a5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010a5e:	701a      	strb	r2, [r3, #0]
 8010a60:	e7bc      	b.n	80109dc <ucdr_serialize_uint16_t+0x60>
 8010a62:	4630      	mov	r0, r6
 8010a64:	f10d 0606 	add.w	r6, sp, #6
 8010a68:	4631      	mov	r1, r6
 8010a6a:	462a      	mov	r2, r5
 8010a6c:	f009 fe1b 	bl	801a6a6 <memcpy>
 8010a70:	68a0      	ldr	r0, [r4, #8]
 8010a72:	4642      	mov	r2, r8
 8010a74:	1971      	adds	r1, r6, r5
 8010a76:	f009 fe16 	bl	801a6a6 <memcpy>
 8010a7a:	e7af      	b.n	80109dc <ucdr_serialize_uint16_t+0x60>

08010a7c <ucdr_serialize_endian_uint16_t>:
 8010a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a80:	b083      	sub	sp, #12
 8010a82:	460d      	mov	r5, r1
 8010a84:	2102      	movs	r1, #2
 8010a86:	4604      	mov	r4, r0
 8010a88:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010a8c:	f000 ff00 	bl	8011890 <ucdr_buffer_alignment>
 8010a90:	4601      	mov	r1, r0
 8010a92:	4620      	mov	r0, r4
 8010a94:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010a98:	f000 ff3e 	bl	8011918 <ucdr_advance_buffer>
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	2102      	movs	r1, #2
 8010aa0:	f000 fe98 	bl	80117d4 <ucdr_check_buffer_available_for>
 8010aa4:	bb70      	cbnz	r0, 8010b04 <ucdr_serialize_endian_uint16_t+0x88>
 8010aa6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010aaa:	42be      	cmp	r6, r7
 8010aac:	d925      	bls.n	8010afa <ucdr_serialize_endian_uint16_t+0x7e>
 8010aae:	6922      	ldr	r2, [r4, #16]
 8010ab0:	60a6      	str	r6, [r4, #8]
 8010ab2:	1bf6      	subs	r6, r6, r7
 8010ab4:	4432      	add	r2, r6
 8010ab6:	f1c6 0902 	rsb	r9, r6, #2
 8010aba:	6122      	str	r2, [r4, #16]
 8010abc:	4649      	mov	r1, r9
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f000 fe94 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	d039      	beq.n	8010b3c <ucdr_serialize_endian_uint16_t+0xc0>
 8010ac8:	2d01      	cmp	r5, #1
 8010aca:	d04a      	beq.n	8010b62 <ucdr_serialize_endian_uint16_t+0xe6>
 8010acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010ad0:	703b      	strb	r3, [r7, #0]
 8010ad2:	2e00      	cmp	r6, #0
 8010ad4:	d040      	beq.n	8010b58 <ucdr_serialize_endian_uint16_t+0xdc>
 8010ad6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010ada:	707b      	strb	r3, [r7, #1]
 8010adc:	6923      	ldr	r3, [r4, #16]
 8010ade:	68a2      	ldr	r2, [r4, #8]
 8010ae0:	7da0      	ldrb	r0, [r4, #22]
 8010ae2:	3302      	adds	r3, #2
 8010ae4:	1b9b      	subs	r3, r3, r6
 8010ae6:	444a      	add	r2, r9
 8010ae8:	2102      	movs	r1, #2
 8010aea:	f080 0001 	eor.w	r0, r0, #1
 8010aee:	6123      	str	r3, [r4, #16]
 8010af0:	60a2      	str	r2, [r4, #8]
 8010af2:	7561      	strb	r1, [r4, #21]
 8010af4:	b003      	add	sp, #12
 8010af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010afa:	2102      	movs	r1, #2
 8010afc:	4620      	mov	r0, r4
 8010afe:	f000 fe75 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010b02:	b188      	cbz	r0, 8010b28 <ucdr_serialize_endian_uint16_t+0xac>
 8010b04:	2d01      	cmp	r5, #1
 8010b06:	68a3      	ldr	r3, [r4, #8]
 8010b08:	d014      	beq.n	8010b34 <ucdr_serialize_endian_uint16_t+0xb8>
 8010b0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010b0e:	701a      	strb	r2, [r3, #0]
 8010b10:	68a3      	ldr	r3, [r4, #8]
 8010b12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010b16:	705a      	strb	r2, [r3, #1]
 8010b18:	68a2      	ldr	r2, [r4, #8]
 8010b1a:	6923      	ldr	r3, [r4, #16]
 8010b1c:	3202      	adds	r2, #2
 8010b1e:	3302      	adds	r3, #2
 8010b20:	2102      	movs	r1, #2
 8010b22:	60a2      	str	r2, [r4, #8]
 8010b24:	6123      	str	r3, [r4, #16]
 8010b26:	7561      	strb	r1, [r4, #21]
 8010b28:	7da0      	ldrb	r0, [r4, #22]
 8010b2a:	f080 0001 	eor.w	r0, r0, #1
 8010b2e:	b003      	add	sp, #12
 8010b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010b38:	801a      	strh	r2, [r3, #0]
 8010b3a:	e7ed      	b.n	8010b18 <ucdr_serialize_endian_uint16_t+0x9c>
 8010b3c:	68a2      	ldr	r2, [r4, #8]
 8010b3e:	6923      	ldr	r3, [r4, #16]
 8010b40:	7da0      	ldrb	r0, [r4, #22]
 8010b42:	f884 8015 	strb.w	r8, [r4, #21]
 8010b46:	1b92      	subs	r2, r2, r6
 8010b48:	1b9b      	subs	r3, r3, r6
 8010b4a:	f080 0001 	eor.w	r0, r0, #1
 8010b4e:	60a2      	str	r2, [r4, #8]
 8010b50:	6123      	str	r3, [r4, #16]
 8010b52:	b003      	add	sp, #12
 8010b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b58:	68a3      	ldr	r3, [r4, #8]
 8010b5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010b5e:	701a      	strb	r2, [r3, #0]
 8010b60:	e7bc      	b.n	8010adc <ucdr_serialize_endian_uint16_t+0x60>
 8010b62:	f10d 0506 	add.w	r5, sp, #6
 8010b66:	4629      	mov	r1, r5
 8010b68:	4632      	mov	r2, r6
 8010b6a:	4638      	mov	r0, r7
 8010b6c:	f009 fd9b 	bl	801a6a6 <memcpy>
 8010b70:	68a0      	ldr	r0, [r4, #8]
 8010b72:	464a      	mov	r2, r9
 8010b74:	19a9      	adds	r1, r5, r6
 8010b76:	f009 fd96 	bl	801a6a6 <memcpy>
 8010b7a:	e7af      	b.n	8010adc <ucdr_serialize_endian_uint16_t+0x60>

08010b7c <ucdr_deserialize_uint16_t>:
 8010b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b80:	460d      	mov	r5, r1
 8010b82:	2102      	movs	r1, #2
 8010b84:	4604      	mov	r4, r0
 8010b86:	f000 fe83 	bl	8011890 <ucdr_buffer_alignment>
 8010b8a:	4601      	mov	r1, r0
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010b92:	f000 fec1 	bl	8011918 <ucdr_advance_buffer>
 8010b96:	4620      	mov	r0, r4
 8010b98:	2102      	movs	r1, #2
 8010b9a:	f000 fe1b 	bl	80117d4 <ucdr_check_buffer_available_for>
 8010b9e:	bb60      	cbnz	r0, 8010bfa <ucdr_deserialize_uint16_t+0x7e>
 8010ba0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010ba4:	42be      	cmp	r6, r7
 8010ba6:	d923      	bls.n	8010bf0 <ucdr_deserialize_uint16_t+0x74>
 8010ba8:	6922      	ldr	r2, [r4, #16]
 8010baa:	60a6      	str	r6, [r4, #8]
 8010bac:	1bf6      	subs	r6, r6, r7
 8010bae:	4432      	add	r2, r6
 8010bb0:	f1c6 0902 	rsb	r9, r6, #2
 8010bb4:	6122      	str	r2, [r4, #16]
 8010bb6:	4649      	mov	r1, r9
 8010bb8:	4620      	mov	r0, r4
 8010bba:	f000 fe17 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	d034      	beq.n	8010c2c <ucdr_deserialize_uint16_t+0xb0>
 8010bc2:	7d23      	ldrb	r3, [r4, #20]
 8010bc4:	2b01      	cmp	r3, #1
 8010bc6:	d042      	beq.n	8010c4e <ucdr_deserialize_uint16_t+0xd2>
 8010bc8:	787b      	ldrb	r3, [r7, #1]
 8010bca:	702b      	strb	r3, [r5, #0]
 8010bcc:	2e00      	cmp	r6, #0
 8010bce:	d03a      	beq.n	8010c46 <ucdr_deserialize_uint16_t+0xca>
 8010bd0:	783b      	ldrb	r3, [r7, #0]
 8010bd2:	706b      	strb	r3, [r5, #1]
 8010bd4:	6923      	ldr	r3, [r4, #16]
 8010bd6:	68a2      	ldr	r2, [r4, #8]
 8010bd8:	7da0      	ldrb	r0, [r4, #22]
 8010bda:	2102      	movs	r1, #2
 8010bdc:	3302      	adds	r3, #2
 8010bde:	1b9b      	subs	r3, r3, r6
 8010be0:	444a      	add	r2, r9
 8010be2:	7561      	strb	r1, [r4, #21]
 8010be4:	6123      	str	r3, [r4, #16]
 8010be6:	60a2      	str	r2, [r4, #8]
 8010be8:	f080 0001 	eor.w	r0, r0, #1
 8010bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bf0:	2102      	movs	r1, #2
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	f000 fdfa 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010bf8:	b180      	cbz	r0, 8010c1c <ucdr_deserialize_uint16_t+0xa0>
 8010bfa:	7d23      	ldrb	r3, [r4, #20]
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	68a3      	ldr	r3, [r4, #8]
 8010c00:	d011      	beq.n	8010c26 <ucdr_deserialize_uint16_t+0xaa>
 8010c02:	785b      	ldrb	r3, [r3, #1]
 8010c04:	702b      	strb	r3, [r5, #0]
 8010c06:	68a3      	ldr	r3, [r4, #8]
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	706b      	strb	r3, [r5, #1]
 8010c0c:	68a2      	ldr	r2, [r4, #8]
 8010c0e:	6923      	ldr	r3, [r4, #16]
 8010c10:	3202      	adds	r2, #2
 8010c12:	3302      	adds	r3, #2
 8010c14:	2102      	movs	r1, #2
 8010c16:	60a2      	str	r2, [r4, #8]
 8010c18:	6123      	str	r3, [r4, #16]
 8010c1a:	7561      	strb	r1, [r4, #21]
 8010c1c:	7da0      	ldrb	r0, [r4, #22]
 8010c1e:	f080 0001 	eor.w	r0, r0, #1
 8010c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c26:	881b      	ldrh	r3, [r3, #0]
 8010c28:	802b      	strh	r3, [r5, #0]
 8010c2a:	e7ef      	b.n	8010c0c <ucdr_deserialize_uint16_t+0x90>
 8010c2c:	68a2      	ldr	r2, [r4, #8]
 8010c2e:	6923      	ldr	r3, [r4, #16]
 8010c30:	7da0      	ldrb	r0, [r4, #22]
 8010c32:	f884 8015 	strb.w	r8, [r4, #21]
 8010c36:	1b92      	subs	r2, r2, r6
 8010c38:	1b9b      	subs	r3, r3, r6
 8010c3a:	60a2      	str	r2, [r4, #8]
 8010c3c:	6123      	str	r3, [r4, #16]
 8010c3e:	f080 0001 	eor.w	r0, r0, #1
 8010c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c46:	68a3      	ldr	r3, [r4, #8]
 8010c48:	781b      	ldrb	r3, [r3, #0]
 8010c4a:	706b      	strb	r3, [r5, #1]
 8010c4c:	e7c2      	b.n	8010bd4 <ucdr_deserialize_uint16_t+0x58>
 8010c4e:	4639      	mov	r1, r7
 8010c50:	4632      	mov	r2, r6
 8010c52:	4628      	mov	r0, r5
 8010c54:	f009 fd27 	bl	801a6a6 <memcpy>
 8010c58:	68a1      	ldr	r1, [r4, #8]
 8010c5a:	464a      	mov	r2, r9
 8010c5c:	19a8      	adds	r0, r5, r6
 8010c5e:	f009 fd22 	bl	801a6a6 <memcpy>
 8010c62:	e7b7      	b.n	8010bd4 <ucdr_deserialize_uint16_t+0x58>

08010c64 <ucdr_deserialize_endian_uint16_t>:
 8010c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c68:	460e      	mov	r6, r1
 8010c6a:	2102      	movs	r1, #2
 8010c6c:	4604      	mov	r4, r0
 8010c6e:	4615      	mov	r5, r2
 8010c70:	f000 fe0e 	bl	8011890 <ucdr_buffer_alignment>
 8010c74:	4601      	mov	r1, r0
 8010c76:	4620      	mov	r0, r4
 8010c78:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010c7c:	f000 fe4c 	bl	8011918 <ucdr_advance_buffer>
 8010c80:	4620      	mov	r0, r4
 8010c82:	2102      	movs	r1, #2
 8010c84:	f000 fda6 	bl	80117d4 <ucdr_check_buffer_available_for>
 8010c88:	bb70      	cbnz	r0, 8010ce8 <ucdr_deserialize_endian_uint16_t+0x84>
 8010c8a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8010c8e:	4547      	cmp	r7, r8
 8010c90:	d925      	bls.n	8010cde <ucdr_deserialize_endian_uint16_t+0x7a>
 8010c92:	6922      	ldr	r2, [r4, #16]
 8010c94:	60a7      	str	r7, [r4, #8]
 8010c96:	eba7 0708 	sub.w	r7, r7, r8
 8010c9a:	443a      	add	r2, r7
 8010c9c:	f1c7 0a02 	rsb	sl, r7, #2
 8010ca0:	6122      	str	r2, [r4, #16]
 8010ca2:	4651      	mov	r1, sl
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f000 fda1 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010caa:	2800      	cmp	r0, #0
 8010cac:	d034      	beq.n	8010d18 <ucdr_deserialize_endian_uint16_t+0xb4>
 8010cae:	2e01      	cmp	r6, #1
 8010cb0:	d043      	beq.n	8010d3a <ucdr_deserialize_endian_uint16_t+0xd6>
 8010cb2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010cb6:	702b      	strb	r3, [r5, #0]
 8010cb8:	2f00      	cmp	r7, #0
 8010cba:	d03a      	beq.n	8010d32 <ucdr_deserialize_endian_uint16_t+0xce>
 8010cbc:	f898 3000 	ldrb.w	r3, [r8]
 8010cc0:	706b      	strb	r3, [r5, #1]
 8010cc2:	6923      	ldr	r3, [r4, #16]
 8010cc4:	68a2      	ldr	r2, [r4, #8]
 8010cc6:	7da0      	ldrb	r0, [r4, #22]
 8010cc8:	2102      	movs	r1, #2
 8010cca:	3302      	adds	r3, #2
 8010ccc:	1bdb      	subs	r3, r3, r7
 8010cce:	4452      	add	r2, sl
 8010cd0:	7561      	strb	r1, [r4, #21]
 8010cd2:	6123      	str	r3, [r4, #16]
 8010cd4:	60a2      	str	r2, [r4, #8]
 8010cd6:	f080 0001 	eor.w	r0, r0, #1
 8010cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cde:	2102      	movs	r1, #2
 8010ce0:	4620      	mov	r0, r4
 8010ce2:	f000 fd83 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010ce6:	b178      	cbz	r0, 8010d08 <ucdr_deserialize_endian_uint16_t+0xa4>
 8010ce8:	2e01      	cmp	r6, #1
 8010cea:	68a3      	ldr	r3, [r4, #8]
 8010cec:	d011      	beq.n	8010d12 <ucdr_deserialize_endian_uint16_t+0xae>
 8010cee:	785b      	ldrb	r3, [r3, #1]
 8010cf0:	702b      	strb	r3, [r5, #0]
 8010cf2:	68a3      	ldr	r3, [r4, #8]
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	706b      	strb	r3, [r5, #1]
 8010cf8:	68a2      	ldr	r2, [r4, #8]
 8010cfa:	6923      	ldr	r3, [r4, #16]
 8010cfc:	3202      	adds	r2, #2
 8010cfe:	3302      	adds	r3, #2
 8010d00:	2102      	movs	r1, #2
 8010d02:	60a2      	str	r2, [r4, #8]
 8010d04:	6123      	str	r3, [r4, #16]
 8010d06:	7561      	strb	r1, [r4, #21]
 8010d08:	7da0      	ldrb	r0, [r4, #22]
 8010d0a:	f080 0001 	eor.w	r0, r0, #1
 8010d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d12:	881b      	ldrh	r3, [r3, #0]
 8010d14:	802b      	strh	r3, [r5, #0]
 8010d16:	e7ef      	b.n	8010cf8 <ucdr_deserialize_endian_uint16_t+0x94>
 8010d18:	68a2      	ldr	r2, [r4, #8]
 8010d1a:	6923      	ldr	r3, [r4, #16]
 8010d1c:	7da0      	ldrb	r0, [r4, #22]
 8010d1e:	f884 9015 	strb.w	r9, [r4, #21]
 8010d22:	1bd2      	subs	r2, r2, r7
 8010d24:	1bdb      	subs	r3, r3, r7
 8010d26:	60a2      	str	r2, [r4, #8]
 8010d28:	6123      	str	r3, [r4, #16]
 8010d2a:	f080 0001 	eor.w	r0, r0, #1
 8010d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d32:	68a3      	ldr	r3, [r4, #8]
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	706b      	strb	r3, [r5, #1]
 8010d38:	e7c3      	b.n	8010cc2 <ucdr_deserialize_endian_uint16_t+0x5e>
 8010d3a:	4641      	mov	r1, r8
 8010d3c:	463a      	mov	r2, r7
 8010d3e:	4628      	mov	r0, r5
 8010d40:	f009 fcb1 	bl	801a6a6 <memcpy>
 8010d44:	68a1      	ldr	r1, [r4, #8]
 8010d46:	4652      	mov	r2, sl
 8010d48:	19e8      	adds	r0, r5, r7
 8010d4a:	f009 fcac 	bl	801a6a6 <memcpy>
 8010d4e:	e7b8      	b.n	8010cc2 <ucdr_deserialize_endian_uint16_t+0x5e>

08010d50 <ucdr_serialize_uint32_t>:
 8010d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d54:	b082      	sub	sp, #8
 8010d56:	4604      	mov	r4, r0
 8010d58:	9101      	str	r1, [sp, #4]
 8010d5a:	2104      	movs	r1, #4
 8010d5c:	f000 fd98 	bl	8011890 <ucdr_buffer_alignment>
 8010d60:	4601      	mov	r1, r0
 8010d62:	4620      	mov	r0, r4
 8010d64:	7d67      	ldrb	r7, [r4, #21]
 8010d66:	f000 fdd7 	bl	8011918 <ucdr_advance_buffer>
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	2104      	movs	r1, #4
 8010d6e:	f000 fd31 	bl	80117d4 <ucdr_check_buffer_available_for>
 8010d72:	2800      	cmp	r0, #0
 8010d74:	d139      	bne.n	8010dea <ucdr_serialize_uint32_t+0x9a>
 8010d76:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8010d7a:	42ae      	cmp	r6, r5
 8010d7c:	d930      	bls.n	8010de0 <ucdr_serialize_uint32_t+0x90>
 8010d7e:	6922      	ldr	r2, [r4, #16]
 8010d80:	60a6      	str	r6, [r4, #8]
 8010d82:	1b76      	subs	r6, r6, r5
 8010d84:	4432      	add	r2, r6
 8010d86:	f1c6 0804 	rsb	r8, r6, #4
 8010d8a:	6122      	str	r2, [r4, #16]
 8010d8c:	4641      	mov	r1, r8
 8010d8e:	4620      	mov	r0, r4
 8010d90:	f000 fd2c 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d04c      	beq.n	8010e32 <ucdr_serialize_uint32_t+0xe2>
 8010d98:	7d23      	ldrb	r3, [r4, #20]
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d063      	beq.n	8010e66 <ucdr_serialize_uint32_t+0x116>
 8010d9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010da2:	702b      	strb	r3, [r5, #0]
 8010da4:	2e00      	cmp	r6, #0
 8010da6:	d051      	beq.n	8010e4c <ucdr_serialize_uint32_t+0xfc>
 8010da8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010dac:	706b      	strb	r3, [r5, #1]
 8010dae:	2e01      	cmp	r6, #1
 8010db0:	d050      	beq.n	8010e54 <ucdr_serialize_uint32_t+0x104>
 8010db2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010db6:	70ab      	strb	r3, [r5, #2]
 8010db8:	2e02      	cmp	r6, #2
 8010dba:	d04f      	beq.n	8010e5c <ucdr_serialize_uint32_t+0x10c>
 8010dbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010dc0:	70eb      	strb	r3, [r5, #3]
 8010dc2:	6923      	ldr	r3, [r4, #16]
 8010dc4:	68a2      	ldr	r2, [r4, #8]
 8010dc6:	7da0      	ldrb	r0, [r4, #22]
 8010dc8:	3304      	adds	r3, #4
 8010dca:	1b9b      	subs	r3, r3, r6
 8010dcc:	4442      	add	r2, r8
 8010dce:	2104      	movs	r1, #4
 8010dd0:	f080 0001 	eor.w	r0, r0, #1
 8010dd4:	6123      	str	r3, [r4, #16]
 8010dd6:	60a2      	str	r2, [r4, #8]
 8010dd8:	7561      	strb	r1, [r4, #21]
 8010dda:	b002      	add	sp, #8
 8010ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010de0:	2104      	movs	r1, #4
 8010de2:	4620      	mov	r0, r4
 8010de4:	f000 fd02 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010de8:	b1d0      	cbz	r0, 8010e20 <ucdr_serialize_uint32_t+0xd0>
 8010dea:	7d23      	ldrb	r3, [r4, #20]
 8010dec:	2b01      	cmp	r3, #1
 8010dee:	68a3      	ldr	r3, [r4, #8]
 8010df0:	d01c      	beq.n	8010e2c <ucdr_serialize_uint32_t+0xdc>
 8010df2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010df6:	701a      	strb	r2, [r3, #0]
 8010df8:	68a3      	ldr	r3, [r4, #8]
 8010dfa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010dfe:	705a      	strb	r2, [r3, #1]
 8010e00:	68a3      	ldr	r3, [r4, #8]
 8010e02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010e06:	709a      	strb	r2, [r3, #2]
 8010e08:	68a3      	ldr	r3, [r4, #8]
 8010e0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010e0e:	70da      	strb	r2, [r3, #3]
 8010e10:	68a2      	ldr	r2, [r4, #8]
 8010e12:	6923      	ldr	r3, [r4, #16]
 8010e14:	3204      	adds	r2, #4
 8010e16:	3304      	adds	r3, #4
 8010e18:	2104      	movs	r1, #4
 8010e1a:	60a2      	str	r2, [r4, #8]
 8010e1c:	6123      	str	r3, [r4, #16]
 8010e1e:	7561      	strb	r1, [r4, #21]
 8010e20:	7da0      	ldrb	r0, [r4, #22]
 8010e22:	f080 0001 	eor.w	r0, r0, #1
 8010e26:	b002      	add	sp, #8
 8010e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e2c:	9a01      	ldr	r2, [sp, #4]
 8010e2e:	601a      	str	r2, [r3, #0]
 8010e30:	e7ee      	b.n	8010e10 <ucdr_serialize_uint32_t+0xc0>
 8010e32:	68a2      	ldr	r2, [r4, #8]
 8010e34:	6923      	ldr	r3, [r4, #16]
 8010e36:	7da0      	ldrb	r0, [r4, #22]
 8010e38:	7567      	strb	r7, [r4, #21]
 8010e3a:	1b92      	subs	r2, r2, r6
 8010e3c:	1b9b      	subs	r3, r3, r6
 8010e3e:	f080 0001 	eor.w	r0, r0, #1
 8010e42:	60a2      	str	r2, [r4, #8]
 8010e44:	6123      	str	r3, [r4, #16]
 8010e46:	b002      	add	sp, #8
 8010e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e4c:	68a3      	ldr	r3, [r4, #8]
 8010e4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e52:	701a      	strb	r2, [r3, #0]
 8010e54:	68a3      	ldr	r3, [r4, #8]
 8010e56:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010e5a:	701a      	strb	r2, [r3, #0]
 8010e5c:	68a3      	ldr	r3, [r4, #8]
 8010e5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010e62:	701a      	strb	r2, [r3, #0]
 8010e64:	e7ad      	b.n	8010dc2 <ucdr_serialize_uint32_t+0x72>
 8010e66:	4628      	mov	r0, r5
 8010e68:	ad01      	add	r5, sp, #4
 8010e6a:	4629      	mov	r1, r5
 8010e6c:	4632      	mov	r2, r6
 8010e6e:	f009 fc1a 	bl	801a6a6 <memcpy>
 8010e72:	68a0      	ldr	r0, [r4, #8]
 8010e74:	4642      	mov	r2, r8
 8010e76:	19a9      	adds	r1, r5, r6
 8010e78:	f009 fc15 	bl	801a6a6 <memcpy>
 8010e7c:	e7a1      	b.n	8010dc2 <ucdr_serialize_uint32_t+0x72>
 8010e7e:	bf00      	nop

08010e80 <ucdr_serialize_endian_uint32_t>:
 8010e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e84:	b083      	sub	sp, #12
 8010e86:	460d      	mov	r5, r1
 8010e88:	2104      	movs	r1, #4
 8010e8a:	4604      	mov	r4, r0
 8010e8c:	9201      	str	r2, [sp, #4]
 8010e8e:	f000 fcff 	bl	8011890 <ucdr_buffer_alignment>
 8010e92:	4601      	mov	r1, r0
 8010e94:	4620      	mov	r0, r4
 8010e96:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010e9a:	f000 fd3d 	bl	8011918 <ucdr_advance_buffer>
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	2104      	movs	r1, #4
 8010ea2:	f000 fc97 	bl	80117d4 <ucdr_check_buffer_available_for>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	d138      	bne.n	8010f1c <ucdr_serialize_endian_uint32_t+0x9c>
 8010eaa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010eae:	42b7      	cmp	r7, r6
 8010eb0:	d92f      	bls.n	8010f12 <ucdr_serialize_endian_uint32_t+0x92>
 8010eb2:	6922      	ldr	r2, [r4, #16]
 8010eb4:	60a7      	str	r7, [r4, #8]
 8010eb6:	1bbf      	subs	r7, r7, r6
 8010eb8:	443a      	add	r2, r7
 8010eba:	f1c7 0904 	rsb	r9, r7, #4
 8010ebe:	6122      	str	r2, [r4, #16]
 8010ec0:	4649      	mov	r1, r9
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	f000 fc92 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	d04a      	beq.n	8010f62 <ucdr_serialize_endian_uint32_t+0xe2>
 8010ecc:	2d01      	cmp	r5, #1
 8010ece:	d063      	beq.n	8010f98 <ucdr_serialize_endian_uint32_t+0x118>
 8010ed0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010ed4:	7033      	strb	r3, [r6, #0]
 8010ed6:	2f00      	cmp	r7, #0
 8010ed8:	d051      	beq.n	8010f7e <ucdr_serialize_endian_uint32_t+0xfe>
 8010eda:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010ede:	7073      	strb	r3, [r6, #1]
 8010ee0:	2f01      	cmp	r7, #1
 8010ee2:	d050      	beq.n	8010f86 <ucdr_serialize_endian_uint32_t+0x106>
 8010ee4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010ee8:	70b3      	strb	r3, [r6, #2]
 8010eea:	2f02      	cmp	r7, #2
 8010eec:	d04f      	beq.n	8010f8e <ucdr_serialize_endian_uint32_t+0x10e>
 8010eee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010ef2:	70f3      	strb	r3, [r6, #3]
 8010ef4:	6923      	ldr	r3, [r4, #16]
 8010ef6:	68a2      	ldr	r2, [r4, #8]
 8010ef8:	7da0      	ldrb	r0, [r4, #22]
 8010efa:	3304      	adds	r3, #4
 8010efc:	1bdb      	subs	r3, r3, r7
 8010efe:	444a      	add	r2, r9
 8010f00:	2104      	movs	r1, #4
 8010f02:	f080 0001 	eor.w	r0, r0, #1
 8010f06:	6123      	str	r3, [r4, #16]
 8010f08:	60a2      	str	r2, [r4, #8]
 8010f0a:	7561      	strb	r1, [r4, #21]
 8010f0c:	b003      	add	sp, #12
 8010f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f12:	2104      	movs	r1, #4
 8010f14:	4620      	mov	r0, r4
 8010f16:	f000 fc69 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010f1a:	b1c8      	cbz	r0, 8010f50 <ucdr_serialize_endian_uint32_t+0xd0>
 8010f1c:	2d01      	cmp	r5, #1
 8010f1e:	68a3      	ldr	r3, [r4, #8]
 8010f20:	d01c      	beq.n	8010f5c <ucdr_serialize_endian_uint32_t+0xdc>
 8010f22:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010f26:	701a      	strb	r2, [r3, #0]
 8010f28:	68a3      	ldr	r3, [r4, #8]
 8010f2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f2e:	705a      	strb	r2, [r3, #1]
 8010f30:	68a3      	ldr	r3, [r4, #8]
 8010f32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010f36:	709a      	strb	r2, [r3, #2]
 8010f38:	68a3      	ldr	r3, [r4, #8]
 8010f3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010f3e:	70da      	strb	r2, [r3, #3]
 8010f40:	68a2      	ldr	r2, [r4, #8]
 8010f42:	6923      	ldr	r3, [r4, #16]
 8010f44:	3204      	adds	r2, #4
 8010f46:	3304      	adds	r3, #4
 8010f48:	2104      	movs	r1, #4
 8010f4a:	60a2      	str	r2, [r4, #8]
 8010f4c:	6123      	str	r3, [r4, #16]
 8010f4e:	7561      	strb	r1, [r4, #21]
 8010f50:	7da0      	ldrb	r0, [r4, #22]
 8010f52:	f080 0001 	eor.w	r0, r0, #1
 8010f56:	b003      	add	sp, #12
 8010f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f5c:	9a01      	ldr	r2, [sp, #4]
 8010f5e:	601a      	str	r2, [r3, #0]
 8010f60:	e7ee      	b.n	8010f40 <ucdr_serialize_endian_uint32_t+0xc0>
 8010f62:	68a2      	ldr	r2, [r4, #8]
 8010f64:	6923      	ldr	r3, [r4, #16]
 8010f66:	7da0      	ldrb	r0, [r4, #22]
 8010f68:	f884 8015 	strb.w	r8, [r4, #21]
 8010f6c:	1bd2      	subs	r2, r2, r7
 8010f6e:	1bdb      	subs	r3, r3, r7
 8010f70:	f080 0001 	eor.w	r0, r0, #1
 8010f74:	60a2      	str	r2, [r4, #8]
 8010f76:	6123      	str	r3, [r4, #16]
 8010f78:	b003      	add	sp, #12
 8010f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f7e:	68a3      	ldr	r3, [r4, #8]
 8010f80:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f84:	701a      	strb	r2, [r3, #0]
 8010f86:	68a3      	ldr	r3, [r4, #8]
 8010f88:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010f8c:	701a      	strb	r2, [r3, #0]
 8010f8e:	68a3      	ldr	r3, [r4, #8]
 8010f90:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010f94:	701a      	strb	r2, [r3, #0]
 8010f96:	e7ad      	b.n	8010ef4 <ucdr_serialize_endian_uint32_t+0x74>
 8010f98:	ad01      	add	r5, sp, #4
 8010f9a:	4629      	mov	r1, r5
 8010f9c:	463a      	mov	r2, r7
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	f009 fb81 	bl	801a6a6 <memcpy>
 8010fa4:	68a0      	ldr	r0, [r4, #8]
 8010fa6:	464a      	mov	r2, r9
 8010fa8:	19e9      	adds	r1, r5, r7
 8010faa:	f009 fb7c 	bl	801a6a6 <memcpy>
 8010fae:	e7a1      	b.n	8010ef4 <ucdr_serialize_endian_uint32_t+0x74>

08010fb0 <ucdr_deserialize_uint32_t>:
 8010fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fb4:	460d      	mov	r5, r1
 8010fb6:	2104      	movs	r1, #4
 8010fb8:	4604      	mov	r4, r0
 8010fba:	f000 fc69 	bl	8011890 <ucdr_buffer_alignment>
 8010fbe:	4601      	mov	r1, r0
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010fc6:	f000 fca7 	bl	8011918 <ucdr_advance_buffer>
 8010fca:	4620      	mov	r0, r4
 8010fcc:	2104      	movs	r1, #4
 8010fce:	f000 fc01 	bl	80117d4 <ucdr_check_buffer_available_for>
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	d138      	bne.n	8011048 <ucdr_deserialize_uint32_t+0x98>
 8010fd6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010fda:	42b7      	cmp	r7, r6
 8010fdc:	d92f      	bls.n	801103e <ucdr_deserialize_uint32_t+0x8e>
 8010fde:	6922      	ldr	r2, [r4, #16]
 8010fe0:	60a7      	str	r7, [r4, #8]
 8010fe2:	1bbf      	subs	r7, r7, r6
 8010fe4:	443a      	add	r2, r7
 8010fe6:	f1c7 0904 	rsb	r9, r7, #4
 8010fea:	6122      	str	r2, [r4, #16]
 8010fec:	4649      	mov	r1, r9
 8010fee:	4620      	mov	r0, r4
 8010ff0:	f000 fbfc 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	d046      	beq.n	8011086 <ucdr_deserialize_uint32_t+0xd6>
 8010ff8:	7d23      	ldrb	r3, [r4, #20]
 8010ffa:	2b01      	cmp	r3, #1
 8010ffc:	d05c      	beq.n	80110b8 <ucdr_deserialize_uint32_t+0x108>
 8010ffe:	78f3      	ldrb	r3, [r6, #3]
 8011000:	702b      	strb	r3, [r5, #0]
 8011002:	2f00      	cmp	r7, #0
 8011004:	d04c      	beq.n	80110a0 <ucdr_deserialize_uint32_t+0xf0>
 8011006:	78b3      	ldrb	r3, [r6, #2]
 8011008:	706b      	strb	r3, [r5, #1]
 801100a:	2f01      	cmp	r7, #1
 801100c:	f105 0302 	add.w	r3, r5, #2
 8011010:	d04a      	beq.n	80110a8 <ucdr_deserialize_uint32_t+0xf8>
 8011012:	7873      	ldrb	r3, [r6, #1]
 8011014:	70ab      	strb	r3, [r5, #2]
 8011016:	2f02      	cmp	r7, #2
 8011018:	f105 0303 	add.w	r3, r5, #3
 801101c:	d048      	beq.n	80110b0 <ucdr_deserialize_uint32_t+0x100>
 801101e:	7833      	ldrb	r3, [r6, #0]
 8011020:	70eb      	strb	r3, [r5, #3]
 8011022:	6923      	ldr	r3, [r4, #16]
 8011024:	68a2      	ldr	r2, [r4, #8]
 8011026:	7da0      	ldrb	r0, [r4, #22]
 8011028:	2104      	movs	r1, #4
 801102a:	3304      	adds	r3, #4
 801102c:	1bdb      	subs	r3, r3, r7
 801102e:	444a      	add	r2, r9
 8011030:	7561      	strb	r1, [r4, #21]
 8011032:	6123      	str	r3, [r4, #16]
 8011034:	60a2      	str	r2, [r4, #8]
 8011036:	f080 0001 	eor.w	r0, r0, #1
 801103a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801103e:	2104      	movs	r1, #4
 8011040:	4620      	mov	r0, r4
 8011042:	f000 fbd3 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8011046:	b1b0      	cbz	r0, 8011076 <ucdr_deserialize_uint32_t+0xc6>
 8011048:	7d23      	ldrb	r3, [r4, #20]
 801104a:	2b01      	cmp	r3, #1
 801104c:	68a3      	ldr	r3, [r4, #8]
 801104e:	d017      	beq.n	8011080 <ucdr_deserialize_uint32_t+0xd0>
 8011050:	78db      	ldrb	r3, [r3, #3]
 8011052:	702b      	strb	r3, [r5, #0]
 8011054:	68a3      	ldr	r3, [r4, #8]
 8011056:	789b      	ldrb	r3, [r3, #2]
 8011058:	706b      	strb	r3, [r5, #1]
 801105a:	68a3      	ldr	r3, [r4, #8]
 801105c:	785b      	ldrb	r3, [r3, #1]
 801105e:	70ab      	strb	r3, [r5, #2]
 8011060:	68a3      	ldr	r3, [r4, #8]
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	70eb      	strb	r3, [r5, #3]
 8011066:	68a2      	ldr	r2, [r4, #8]
 8011068:	6923      	ldr	r3, [r4, #16]
 801106a:	3204      	adds	r2, #4
 801106c:	3304      	adds	r3, #4
 801106e:	2104      	movs	r1, #4
 8011070:	60a2      	str	r2, [r4, #8]
 8011072:	6123      	str	r3, [r4, #16]
 8011074:	7561      	strb	r1, [r4, #21]
 8011076:	7da0      	ldrb	r0, [r4, #22]
 8011078:	f080 0001 	eor.w	r0, r0, #1
 801107c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	602b      	str	r3, [r5, #0]
 8011084:	e7ef      	b.n	8011066 <ucdr_deserialize_uint32_t+0xb6>
 8011086:	68a2      	ldr	r2, [r4, #8]
 8011088:	6923      	ldr	r3, [r4, #16]
 801108a:	7da0      	ldrb	r0, [r4, #22]
 801108c:	f884 8015 	strb.w	r8, [r4, #21]
 8011090:	1bd2      	subs	r2, r2, r7
 8011092:	1bdb      	subs	r3, r3, r7
 8011094:	60a2      	str	r2, [r4, #8]
 8011096:	6123      	str	r3, [r4, #16]
 8011098:	f080 0001 	eor.w	r0, r0, #1
 801109c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110a0:	68a3      	ldr	r3, [r4, #8]
 80110a2:	789b      	ldrb	r3, [r3, #2]
 80110a4:	706b      	strb	r3, [r5, #1]
 80110a6:	1cab      	adds	r3, r5, #2
 80110a8:	68a2      	ldr	r2, [r4, #8]
 80110aa:	7852      	ldrb	r2, [r2, #1]
 80110ac:	f803 2b01 	strb.w	r2, [r3], #1
 80110b0:	68a2      	ldr	r2, [r4, #8]
 80110b2:	7812      	ldrb	r2, [r2, #0]
 80110b4:	701a      	strb	r2, [r3, #0]
 80110b6:	e7b4      	b.n	8011022 <ucdr_deserialize_uint32_t+0x72>
 80110b8:	4631      	mov	r1, r6
 80110ba:	463a      	mov	r2, r7
 80110bc:	4628      	mov	r0, r5
 80110be:	f009 faf2 	bl	801a6a6 <memcpy>
 80110c2:	68a1      	ldr	r1, [r4, #8]
 80110c4:	464a      	mov	r2, r9
 80110c6:	19e8      	adds	r0, r5, r7
 80110c8:	f009 faed 	bl	801a6a6 <memcpy>
 80110cc:	e7a9      	b.n	8011022 <ucdr_deserialize_uint32_t+0x72>
 80110ce:	bf00      	nop

080110d0 <ucdr_deserialize_endian_uint32_t>:
 80110d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110d4:	460e      	mov	r6, r1
 80110d6:	2104      	movs	r1, #4
 80110d8:	4604      	mov	r4, r0
 80110da:	4615      	mov	r5, r2
 80110dc:	f000 fbd8 	bl	8011890 <ucdr_buffer_alignment>
 80110e0:	4601      	mov	r1, r0
 80110e2:	4620      	mov	r0, r4
 80110e4:	f894 9015 	ldrb.w	r9, [r4, #21]
 80110e8:	f000 fc16 	bl	8011918 <ucdr_advance_buffer>
 80110ec:	4620      	mov	r0, r4
 80110ee:	2104      	movs	r1, #4
 80110f0:	f000 fb70 	bl	80117d4 <ucdr_check_buffer_available_for>
 80110f4:	2800      	cmp	r0, #0
 80110f6:	d13c      	bne.n	8011172 <ucdr_deserialize_endian_uint32_t+0xa2>
 80110f8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80110fc:	42bb      	cmp	r3, r7
 80110fe:	d933      	bls.n	8011168 <ucdr_deserialize_endian_uint32_t+0x98>
 8011100:	6922      	ldr	r2, [r4, #16]
 8011102:	60a3      	str	r3, [r4, #8]
 8011104:	eba3 0807 	sub.w	r8, r3, r7
 8011108:	4442      	add	r2, r8
 801110a:	f1c8 0a04 	rsb	sl, r8, #4
 801110e:	6122      	str	r2, [r4, #16]
 8011110:	4651      	mov	r1, sl
 8011112:	4620      	mov	r0, r4
 8011114:	f000 fb6a 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8011118:	2800      	cmp	r0, #0
 801111a:	d048      	beq.n	80111ae <ucdr_deserialize_endian_uint32_t+0xde>
 801111c:	2e01      	cmp	r6, #1
 801111e:	d061      	beq.n	80111e4 <ucdr_deserialize_endian_uint32_t+0x114>
 8011120:	78fb      	ldrb	r3, [r7, #3]
 8011122:	702b      	strb	r3, [r5, #0]
 8011124:	f1b8 0f00 	cmp.w	r8, #0
 8011128:	d050      	beq.n	80111cc <ucdr_deserialize_endian_uint32_t+0xfc>
 801112a:	78bb      	ldrb	r3, [r7, #2]
 801112c:	706b      	strb	r3, [r5, #1]
 801112e:	f1b8 0f01 	cmp.w	r8, #1
 8011132:	f105 0302 	add.w	r3, r5, #2
 8011136:	d04d      	beq.n	80111d4 <ucdr_deserialize_endian_uint32_t+0x104>
 8011138:	787b      	ldrb	r3, [r7, #1]
 801113a:	70ab      	strb	r3, [r5, #2]
 801113c:	f1b8 0f02 	cmp.w	r8, #2
 8011140:	f105 0303 	add.w	r3, r5, #3
 8011144:	d04a      	beq.n	80111dc <ucdr_deserialize_endian_uint32_t+0x10c>
 8011146:	783b      	ldrb	r3, [r7, #0]
 8011148:	70eb      	strb	r3, [r5, #3]
 801114a:	6923      	ldr	r3, [r4, #16]
 801114c:	68a2      	ldr	r2, [r4, #8]
 801114e:	7da0      	ldrb	r0, [r4, #22]
 8011150:	2104      	movs	r1, #4
 8011152:	3304      	adds	r3, #4
 8011154:	eba3 0308 	sub.w	r3, r3, r8
 8011158:	4452      	add	r2, sl
 801115a:	7561      	strb	r1, [r4, #21]
 801115c:	6123      	str	r3, [r4, #16]
 801115e:	60a2      	str	r2, [r4, #8]
 8011160:	f080 0001 	eor.w	r0, r0, #1
 8011164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011168:	2104      	movs	r1, #4
 801116a:	4620      	mov	r0, r4
 801116c:	f000 fb3e 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8011170:	b1a8      	cbz	r0, 801119e <ucdr_deserialize_endian_uint32_t+0xce>
 8011172:	2e01      	cmp	r6, #1
 8011174:	68a3      	ldr	r3, [r4, #8]
 8011176:	d017      	beq.n	80111a8 <ucdr_deserialize_endian_uint32_t+0xd8>
 8011178:	78db      	ldrb	r3, [r3, #3]
 801117a:	702b      	strb	r3, [r5, #0]
 801117c:	68a3      	ldr	r3, [r4, #8]
 801117e:	789b      	ldrb	r3, [r3, #2]
 8011180:	706b      	strb	r3, [r5, #1]
 8011182:	68a3      	ldr	r3, [r4, #8]
 8011184:	785b      	ldrb	r3, [r3, #1]
 8011186:	70ab      	strb	r3, [r5, #2]
 8011188:	68a3      	ldr	r3, [r4, #8]
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	70eb      	strb	r3, [r5, #3]
 801118e:	68a2      	ldr	r2, [r4, #8]
 8011190:	6923      	ldr	r3, [r4, #16]
 8011192:	3204      	adds	r2, #4
 8011194:	3304      	adds	r3, #4
 8011196:	2104      	movs	r1, #4
 8011198:	60a2      	str	r2, [r4, #8]
 801119a:	6123      	str	r3, [r4, #16]
 801119c:	7561      	strb	r1, [r4, #21]
 801119e:	7da0      	ldrb	r0, [r4, #22]
 80111a0:	f080 0001 	eor.w	r0, r0, #1
 80111a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	602b      	str	r3, [r5, #0]
 80111ac:	e7ef      	b.n	801118e <ucdr_deserialize_endian_uint32_t+0xbe>
 80111ae:	68a2      	ldr	r2, [r4, #8]
 80111b0:	6923      	ldr	r3, [r4, #16]
 80111b2:	7da0      	ldrb	r0, [r4, #22]
 80111b4:	f884 9015 	strb.w	r9, [r4, #21]
 80111b8:	eba2 0208 	sub.w	r2, r2, r8
 80111bc:	eba3 0308 	sub.w	r3, r3, r8
 80111c0:	60a2      	str	r2, [r4, #8]
 80111c2:	6123      	str	r3, [r4, #16]
 80111c4:	f080 0001 	eor.w	r0, r0, #1
 80111c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111cc:	68a3      	ldr	r3, [r4, #8]
 80111ce:	789b      	ldrb	r3, [r3, #2]
 80111d0:	706b      	strb	r3, [r5, #1]
 80111d2:	1cab      	adds	r3, r5, #2
 80111d4:	68a2      	ldr	r2, [r4, #8]
 80111d6:	7852      	ldrb	r2, [r2, #1]
 80111d8:	f803 2b01 	strb.w	r2, [r3], #1
 80111dc:	68a2      	ldr	r2, [r4, #8]
 80111de:	7812      	ldrb	r2, [r2, #0]
 80111e0:	701a      	strb	r2, [r3, #0]
 80111e2:	e7b2      	b.n	801114a <ucdr_deserialize_endian_uint32_t+0x7a>
 80111e4:	4639      	mov	r1, r7
 80111e6:	4642      	mov	r2, r8
 80111e8:	4628      	mov	r0, r5
 80111ea:	f009 fa5c 	bl	801a6a6 <memcpy>
 80111ee:	68a1      	ldr	r1, [r4, #8]
 80111f0:	4652      	mov	r2, sl
 80111f2:	eb05 0008 	add.w	r0, r5, r8
 80111f6:	f009 fa56 	bl	801a6a6 <memcpy>
 80111fa:	e7a6      	b.n	801114a <ucdr_deserialize_endian_uint32_t+0x7a>

080111fc <ucdr_serialize_uint64_t>:
 80111fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011200:	2108      	movs	r1, #8
 8011202:	b082      	sub	sp, #8
 8011204:	4604      	mov	r4, r0
 8011206:	e9cd 2300 	strd	r2, r3, [sp]
 801120a:	f000 fb41 	bl	8011890 <ucdr_buffer_alignment>
 801120e:	4601      	mov	r1, r0
 8011210:	4620      	mov	r0, r4
 8011212:	7d67      	ldrb	r7, [r4, #21]
 8011214:	f000 fb80 	bl	8011918 <ucdr_advance_buffer>
 8011218:	4620      	mov	r0, r4
 801121a:	2108      	movs	r1, #8
 801121c:	f000 fada 	bl	80117d4 <ucdr_check_buffer_available_for>
 8011220:	2800      	cmp	r0, #0
 8011222:	d14e      	bne.n	80112c2 <ucdr_serialize_uint64_t+0xc6>
 8011224:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8011228:	42b5      	cmp	r5, r6
 801122a:	d945      	bls.n	80112b8 <ucdr_serialize_uint64_t+0xbc>
 801122c:	6923      	ldr	r3, [r4, #16]
 801122e:	60a5      	str	r5, [r4, #8]
 8011230:	1bad      	subs	r5, r5, r6
 8011232:	442b      	add	r3, r5
 8011234:	f1c5 0808 	rsb	r8, r5, #8
 8011238:	6123      	str	r3, [r4, #16]
 801123a:	4641      	mov	r1, r8
 801123c:	4620      	mov	r0, r4
 801123e:	f000 fad5 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8011242:	2800      	cmp	r0, #0
 8011244:	d074      	beq.n	8011330 <ucdr_serialize_uint64_t+0x134>
 8011246:	7d23      	ldrb	r3, [r4, #20]
 8011248:	2b01      	cmp	r3, #1
 801124a:	f000 809b 	beq.w	8011384 <ucdr_serialize_uint64_t+0x188>
 801124e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011252:	7033      	strb	r3, [r6, #0]
 8011254:	2d00      	cmp	r5, #0
 8011256:	d078      	beq.n	801134a <ucdr_serialize_uint64_t+0x14e>
 8011258:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801125c:	7073      	strb	r3, [r6, #1]
 801125e:	2d01      	cmp	r5, #1
 8011260:	d077      	beq.n	8011352 <ucdr_serialize_uint64_t+0x156>
 8011262:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011266:	70b3      	strb	r3, [r6, #2]
 8011268:	2d02      	cmp	r5, #2
 801126a:	d076      	beq.n	801135a <ucdr_serialize_uint64_t+0x15e>
 801126c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011270:	70f3      	strb	r3, [r6, #3]
 8011272:	2d03      	cmp	r5, #3
 8011274:	d075      	beq.n	8011362 <ucdr_serialize_uint64_t+0x166>
 8011276:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801127a:	7133      	strb	r3, [r6, #4]
 801127c:	2d04      	cmp	r5, #4
 801127e:	d074      	beq.n	801136a <ucdr_serialize_uint64_t+0x16e>
 8011280:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011284:	7173      	strb	r3, [r6, #5]
 8011286:	2d05      	cmp	r5, #5
 8011288:	d073      	beq.n	8011372 <ucdr_serialize_uint64_t+0x176>
 801128a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801128e:	71b3      	strb	r3, [r6, #6]
 8011290:	2d06      	cmp	r5, #6
 8011292:	d072      	beq.n	801137a <ucdr_serialize_uint64_t+0x17e>
 8011294:	f89d 3000 	ldrb.w	r3, [sp]
 8011298:	71f3      	strb	r3, [r6, #7]
 801129a:	6923      	ldr	r3, [r4, #16]
 801129c:	68a2      	ldr	r2, [r4, #8]
 801129e:	7da0      	ldrb	r0, [r4, #22]
 80112a0:	3308      	adds	r3, #8
 80112a2:	1b5d      	subs	r5, r3, r5
 80112a4:	4442      	add	r2, r8
 80112a6:	2308      	movs	r3, #8
 80112a8:	f080 0001 	eor.w	r0, r0, #1
 80112ac:	6125      	str	r5, [r4, #16]
 80112ae:	60a2      	str	r2, [r4, #8]
 80112b0:	7563      	strb	r3, [r4, #21]
 80112b2:	b002      	add	sp, #8
 80112b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112b8:	2108      	movs	r1, #8
 80112ba:	4620      	mov	r0, r4
 80112bc:	f000 fa96 	bl	80117ec <ucdr_check_final_buffer_behavior>
 80112c0:	b350      	cbz	r0, 8011318 <ucdr_serialize_uint64_t+0x11c>
 80112c2:	7d23      	ldrb	r3, [r4, #20]
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d02d      	beq.n	8011324 <ucdr_serialize_uint64_t+0x128>
 80112c8:	68a3      	ldr	r3, [r4, #8]
 80112ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80112ce:	701a      	strb	r2, [r3, #0]
 80112d0:	68a3      	ldr	r3, [r4, #8]
 80112d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80112d6:	705a      	strb	r2, [r3, #1]
 80112d8:	68a3      	ldr	r3, [r4, #8]
 80112da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80112de:	709a      	strb	r2, [r3, #2]
 80112e0:	68a3      	ldr	r3, [r4, #8]
 80112e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80112e6:	70da      	strb	r2, [r3, #3]
 80112e8:	68a3      	ldr	r3, [r4, #8]
 80112ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80112ee:	711a      	strb	r2, [r3, #4]
 80112f0:	68a3      	ldr	r3, [r4, #8]
 80112f2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80112f6:	715a      	strb	r2, [r3, #5]
 80112f8:	68a3      	ldr	r3, [r4, #8]
 80112fa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80112fe:	719a      	strb	r2, [r3, #6]
 8011300:	68a3      	ldr	r3, [r4, #8]
 8011302:	f89d 2000 	ldrb.w	r2, [sp]
 8011306:	71da      	strb	r2, [r3, #7]
 8011308:	68a2      	ldr	r2, [r4, #8]
 801130a:	6923      	ldr	r3, [r4, #16]
 801130c:	3208      	adds	r2, #8
 801130e:	3308      	adds	r3, #8
 8011310:	2108      	movs	r1, #8
 8011312:	60a2      	str	r2, [r4, #8]
 8011314:	6123      	str	r3, [r4, #16]
 8011316:	7561      	strb	r1, [r4, #21]
 8011318:	7da0      	ldrb	r0, [r4, #22]
 801131a:	f080 0001 	eor.w	r0, r0, #1
 801131e:	b002      	add	sp, #8
 8011320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011324:	466b      	mov	r3, sp
 8011326:	cb03      	ldmia	r3!, {r0, r1}
 8011328:	68a3      	ldr	r3, [r4, #8]
 801132a:	6018      	str	r0, [r3, #0]
 801132c:	6059      	str	r1, [r3, #4]
 801132e:	e7eb      	b.n	8011308 <ucdr_serialize_uint64_t+0x10c>
 8011330:	68a2      	ldr	r2, [r4, #8]
 8011332:	6923      	ldr	r3, [r4, #16]
 8011334:	7da0      	ldrb	r0, [r4, #22]
 8011336:	7567      	strb	r7, [r4, #21]
 8011338:	1b52      	subs	r2, r2, r5
 801133a:	f080 0001 	eor.w	r0, r0, #1
 801133e:	1b5d      	subs	r5, r3, r5
 8011340:	60a2      	str	r2, [r4, #8]
 8011342:	6125      	str	r5, [r4, #16]
 8011344:	b002      	add	sp, #8
 8011346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801134a:	68a3      	ldr	r3, [r4, #8]
 801134c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011350:	701a      	strb	r2, [r3, #0]
 8011352:	68a3      	ldr	r3, [r4, #8]
 8011354:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011358:	701a      	strb	r2, [r3, #0]
 801135a:	68a3      	ldr	r3, [r4, #8]
 801135c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011360:	701a      	strb	r2, [r3, #0]
 8011362:	68a3      	ldr	r3, [r4, #8]
 8011364:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011368:	701a      	strb	r2, [r3, #0]
 801136a:	68a3      	ldr	r3, [r4, #8]
 801136c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011370:	701a      	strb	r2, [r3, #0]
 8011372:	68a3      	ldr	r3, [r4, #8]
 8011374:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011378:	701a      	strb	r2, [r3, #0]
 801137a:	68a3      	ldr	r3, [r4, #8]
 801137c:	f89d 2000 	ldrb.w	r2, [sp]
 8011380:	701a      	strb	r2, [r3, #0]
 8011382:	e78a      	b.n	801129a <ucdr_serialize_uint64_t+0x9e>
 8011384:	4630      	mov	r0, r6
 8011386:	466e      	mov	r6, sp
 8011388:	4631      	mov	r1, r6
 801138a:	462a      	mov	r2, r5
 801138c:	f009 f98b 	bl	801a6a6 <memcpy>
 8011390:	68a0      	ldr	r0, [r4, #8]
 8011392:	4642      	mov	r2, r8
 8011394:	1971      	adds	r1, r6, r5
 8011396:	f009 f986 	bl	801a6a6 <memcpy>
 801139a:	e77e      	b.n	801129a <ucdr_serialize_uint64_t+0x9e>

0801139c <ucdr_serialize_int16_t>:
 801139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a0:	b082      	sub	sp, #8
 80113a2:	460b      	mov	r3, r1
 80113a4:	2102      	movs	r1, #2
 80113a6:	4604      	mov	r4, r0
 80113a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80113ac:	f000 fa70 	bl	8011890 <ucdr_buffer_alignment>
 80113b0:	4601      	mov	r1, r0
 80113b2:	4620      	mov	r0, r4
 80113b4:	7d67      	ldrb	r7, [r4, #21]
 80113b6:	f000 faaf 	bl	8011918 <ucdr_advance_buffer>
 80113ba:	4620      	mov	r0, r4
 80113bc:	2102      	movs	r1, #2
 80113be:	f000 fa09 	bl	80117d4 <ucdr_check_buffer_available_for>
 80113c2:	bb78      	cbnz	r0, 8011424 <ucdr_serialize_int16_t+0x88>
 80113c4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80113c8:	42b5      	cmp	r5, r6
 80113ca:	d926      	bls.n	801141a <ucdr_serialize_int16_t+0x7e>
 80113cc:	6922      	ldr	r2, [r4, #16]
 80113ce:	60a5      	str	r5, [r4, #8]
 80113d0:	1bad      	subs	r5, r5, r6
 80113d2:	442a      	add	r2, r5
 80113d4:	f1c5 0802 	rsb	r8, r5, #2
 80113d8:	6122      	str	r2, [r4, #16]
 80113da:	4641      	mov	r1, r8
 80113dc:	4620      	mov	r0, r4
 80113de:	f000 fa05 	bl	80117ec <ucdr_check_final_buffer_behavior>
 80113e2:	2800      	cmp	r0, #0
 80113e4:	d03b      	beq.n	801145e <ucdr_serialize_int16_t+0xc2>
 80113e6:	7d23      	ldrb	r3, [r4, #20]
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d04a      	beq.n	8011482 <ucdr_serialize_int16_t+0xe6>
 80113ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80113f0:	7033      	strb	r3, [r6, #0]
 80113f2:	2d00      	cmp	r5, #0
 80113f4:	d040      	beq.n	8011478 <ucdr_serialize_int16_t+0xdc>
 80113f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80113fa:	7073      	strb	r3, [r6, #1]
 80113fc:	6923      	ldr	r3, [r4, #16]
 80113fe:	68a2      	ldr	r2, [r4, #8]
 8011400:	7da0      	ldrb	r0, [r4, #22]
 8011402:	3302      	adds	r3, #2
 8011404:	1b5b      	subs	r3, r3, r5
 8011406:	4442      	add	r2, r8
 8011408:	2102      	movs	r1, #2
 801140a:	f080 0001 	eor.w	r0, r0, #1
 801140e:	6123      	str	r3, [r4, #16]
 8011410:	60a2      	str	r2, [r4, #8]
 8011412:	7561      	strb	r1, [r4, #21]
 8011414:	b002      	add	sp, #8
 8011416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801141a:	2102      	movs	r1, #2
 801141c:	4620      	mov	r0, r4
 801141e:	f000 f9e5 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8011422:	b190      	cbz	r0, 801144a <ucdr_serialize_int16_t+0xae>
 8011424:	7d23      	ldrb	r3, [r4, #20]
 8011426:	2b01      	cmp	r3, #1
 8011428:	68a3      	ldr	r3, [r4, #8]
 801142a:	d014      	beq.n	8011456 <ucdr_serialize_int16_t+0xba>
 801142c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011430:	701a      	strb	r2, [r3, #0]
 8011432:	68a3      	ldr	r3, [r4, #8]
 8011434:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011438:	705a      	strb	r2, [r3, #1]
 801143a:	68a2      	ldr	r2, [r4, #8]
 801143c:	6923      	ldr	r3, [r4, #16]
 801143e:	3202      	adds	r2, #2
 8011440:	3302      	adds	r3, #2
 8011442:	2102      	movs	r1, #2
 8011444:	60a2      	str	r2, [r4, #8]
 8011446:	6123      	str	r3, [r4, #16]
 8011448:	7561      	strb	r1, [r4, #21]
 801144a:	7da0      	ldrb	r0, [r4, #22]
 801144c:	f080 0001 	eor.w	r0, r0, #1
 8011450:	b002      	add	sp, #8
 8011452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011456:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801145a:	801a      	strh	r2, [r3, #0]
 801145c:	e7ed      	b.n	801143a <ucdr_serialize_int16_t+0x9e>
 801145e:	68a2      	ldr	r2, [r4, #8]
 8011460:	6923      	ldr	r3, [r4, #16]
 8011462:	7da0      	ldrb	r0, [r4, #22]
 8011464:	7567      	strb	r7, [r4, #21]
 8011466:	1b52      	subs	r2, r2, r5
 8011468:	1b5b      	subs	r3, r3, r5
 801146a:	f080 0001 	eor.w	r0, r0, #1
 801146e:	60a2      	str	r2, [r4, #8]
 8011470:	6123      	str	r3, [r4, #16]
 8011472:	b002      	add	sp, #8
 8011474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011478:	68a3      	ldr	r3, [r4, #8]
 801147a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801147e:	701a      	strb	r2, [r3, #0]
 8011480:	e7bc      	b.n	80113fc <ucdr_serialize_int16_t+0x60>
 8011482:	4630      	mov	r0, r6
 8011484:	f10d 0606 	add.w	r6, sp, #6
 8011488:	4631      	mov	r1, r6
 801148a:	462a      	mov	r2, r5
 801148c:	f009 f90b 	bl	801a6a6 <memcpy>
 8011490:	68a0      	ldr	r0, [r4, #8]
 8011492:	4642      	mov	r2, r8
 8011494:	1971      	adds	r1, r6, r5
 8011496:	f009 f906 	bl	801a6a6 <memcpy>
 801149a:	e7af      	b.n	80113fc <ucdr_serialize_int16_t+0x60>

0801149c <ucdr_deserialize_int16_t>:
 801149c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114a0:	460d      	mov	r5, r1
 80114a2:	2102      	movs	r1, #2
 80114a4:	4604      	mov	r4, r0
 80114a6:	f000 f9f3 	bl	8011890 <ucdr_buffer_alignment>
 80114aa:	4601      	mov	r1, r0
 80114ac:	4620      	mov	r0, r4
 80114ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 80114b2:	f000 fa31 	bl	8011918 <ucdr_advance_buffer>
 80114b6:	4620      	mov	r0, r4
 80114b8:	2102      	movs	r1, #2
 80114ba:	f000 f98b 	bl	80117d4 <ucdr_check_buffer_available_for>
 80114be:	bb60      	cbnz	r0, 801151a <ucdr_deserialize_int16_t+0x7e>
 80114c0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80114c4:	42be      	cmp	r6, r7
 80114c6:	d923      	bls.n	8011510 <ucdr_deserialize_int16_t+0x74>
 80114c8:	6922      	ldr	r2, [r4, #16]
 80114ca:	60a6      	str	r6, [r4, #8]
 80114cc:	1bf6      	subs	r6, r6, r7
 80114ce:	4432      	add	r2, r6
 80114d0:	f1c6 0902 	rsb	r9, r6, #2
 80114d4:	6122      	str	r2, [r4, #16]
 80114d6:	4649      	mov	r1, r9
 80114d8:	4620      	mov	r0, r4
 80114da:	f000 f987 	bl	80117ec <ucdr_check_final_buffer_behavior>
 80114de:	2800      	cmp	r0, #0
 80114e0:	d034      	beq.n	801154c <ucdr_deserialize_int16_t+0xb0>
 80114e2:	7d23      	ldrb	r3, [r4, #20]
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d042      	beq.n	801156e <ucdr_deserialize_int16_t+0xd2>
 80114e8:	787b      	ldrb	r3, [r7, #1]
 80114ea:	702b      	strb	r3, [r5, #0]
 80114ec:	2e00      	cmp	r6, #0
 80114ee:	d03a      	beq.n	8011566 <ucdr_deserialize_int16_t+0xca>
 80114f0:	783b      	ldrb	r3, [r7, #0]
 80114f2:	706b      	strb	r3, [r5, #1]
 80114f4:	6923      	ldr	r3, [r4, #16]
 80114f6:	68a2      	ldr	r2, [r4, #8]
 80114f8:	7da0      	ldrb	r0, [r4, #22]
 80114fa:	2102      	movs	r1, #2
 80114fc:	3302      	adds	r3, #2
 80114fe:	1b9b      	subs	r3, r3, r6
 8011500:	444a      	add	r2, r9
 8011502:	7561      	strb	r1, [r4, #21]
 8011504:	6123      	str	r3, [r4, #16]
 8011506:	60a2      	str	r2, [r4, #8]
 8011508:	f080 0001 	eor.w	r0, r0, #1
 801150c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011510:	2102      	movs	r1, #2
 8011512:	4620      	mov	r0, r4
 8011514:	f000 f96a 	bl	80117ec <ucdr_check_final_buffer_behavior>
 8011518:	b180      	cbz	r0, 801153c <ucdr_deserialize_int16_t+0xa0>
 801151a:	7d23      	ldrb	r3, [r4, #20]
 801151c:	2b01      	cmp	r3, #1
 801151e:	68a3      	ldr	r3, [r4, #8]
 8011520:	d011      	beq.n	8011546 <ucdr_deserialize_int16_t+0xaa>
 8011522:	785b      	ldrb	r3, [r3, #1]
 8011524:	702b      	strb	r3, [r5, #0]
 8011526:	68a3      	ldr	r3, [r4, #8]
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	706b      	strb	r3, [r5, #1]
 801152c:	68a2      	ldr	r2, [r4, #8]
 801152e:	6923      	ldr	r3, [r4, #16]
 8011530:	3202      	adds	r2, #2
 8011532:	3302      	adds	r3, #2
 8011534:	2102      	movs	r1, #2
 8011536:	60a2      	str	r2, [r4, #8]
 8011538:	6123      	str	r3, [r4, #16]
 801153a:	7561      	strb	r1, [r4, #21]
 801153c:	7da0      	ldrb	r0, [r4, #22]
 801153e:	f080 0001 	eor.w	r0, r0, #1
 8011542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011546:	881b      	ldrh	r3, [r3, #0]
 8011548:	802b      	strh	r3, [r5, #0]
 801154a:	e7ef      	b.n	801152c <ucdr_deserialize_int16_t+0x90>
 801154c:	68a2      	ldr	r2, [r4, #8]
 801154e:	6923      	ldr	r3, [r4, #16]
 8011550:	7da0      	ldrb	r0, [r4, #22]
 8011552:	f884 8015 	strb.w	r8, [r4, #21]
 8011556:	1b92      	subs	r2, r2, r6
 8011558:	1b9b      	subs	r3, r3, r6
 801155a:	60a2      	str	r2, [r4, #8]
 801155c:	6123      	str	r3, [r4, #16]
 801155e:	f080 0001 	eor.w	r0, r0, #1
 8011562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011566:	68a3      	ldr	r3, [r4, #8]
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	706b      	strb	r3, [r5, #1]
 801156c:	e7c2      	b.n	80114f4 <ucdr_deserialize_int16_t+0x58>
 801156e:	4639      	mov	r1, r7
 8011570:	4632      	mov	r2, r6
 8011572:	4628      	mov	r0, r5
 8011574:	f009 f897 	bl	801a6a6 <memcpy>
 8011578:	68a1      	ldr	r1, [r4, #8]
 801157a:	464a      	mov	r2, r9
 801157c:	19a8      	adds	r0, r5, r6
 801157e:	f009 f892 	bl	801a6a6 <memcpy>
 8011582:	e7b7      	b.n	80114f4 <ucdr_deserialize_int16_t+0x58>

08011584 <ucdr_serialize_int32_t>:
 8011584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011588:	b082      	sub	sp, #8
 801158a:	4604      	mov	r4, r0
 801158c:	9101      	str	r1, [sp, #4]
 801158e:	2104      	movs	r1, #4
 8011590:	f000 f97e 	bl	8011890 <ucdr_buffer_alignment>
 8011594:	4601      	mov	r1, r0
 8011596:	4620      	mov	r0, r4
 8011598:	7d67      	ldrb	r7, [r4, #21]
 801159a:	f000 f9bd 	bl	8011918 <ucdr_advance_buffer>
 801159e:	4620      	mov	r0, r4
 80115a0:	2104      	movs	r1, #4
 80115a2:	f000 f917 	bl	80117d4 <ucdr_check_buffer_available_for>
 80115a6:	2800      	cmp	r0, #0
 80115a8:	d139      	bne.n	801161e <ucdr_serialize_int32_t+0x9a>
 80115aa:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 80115ae:	42ae      	cmp	r6, r5
 80115b0:	d930      	bls.n	8011614 <ucdr_serialize_int32_t+0x90>
 80115b2:	6922      	ldr	r2, [r4, #16]
 80115b4:	60a6      	str	r6, [r4, #8]
 80115b6:	1b76      	subs	r6, r6, r5
 80115b8:	4432      	add	r2, r6
 80115ba:	f1c6 0804 	rsb	r8, r6, #4
 80115be:	6122      	str	r2, [r4, #16]
 80115c0:	4641      	mov	r1, r8
 80115c2:	4620      	mov	r0, r4
 80115c4:	f000 f912 	bl	80117ec <ucdr_check_final_buffer_behavior>
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d04c      	beq.n	8011666 <ucdr_serialize_int32_t+0xe2>
 80115cc:	7d23      	ldrb	r3, [r4, #20]
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d063      	beq.n	801169a <ucdr_serialize_int32_t+0x116>
 80115d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80115d6:	702b      	strb	r3, [r5, #0]
 80115d8:	2e00      	cmp	r6, #0
 80115da:	d051      	beq.n	8011680 <ucdr_serialize_int32_t+0xfc>
 80115dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80115e0:	706b      	strb	r3, [r5, #1]
 80115e2:	2e01      	cmp	r6, #1
 80115e4:	d050      	beq.n	8011688 <ucdr_serialize_int32_t+0x104>
 80115e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80115ea:	70ab      	strb	r3, [r5, #2]
 80115ec:	2e02      	cmp	r6, #2
 80115ee:	d04f      	beq.n	8011690 <ucdr_serialize_int32_t+0x10c>
 80115f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80115f4:	70eb      	strb	r3, [r5, #3]
 80115f6:	6923      	ldr	r3, [r4, #16]
 80115f8:	68a2      	ldr	r2, [r4, #8]
 80115fa:	7da0      	ldrb	r0, [r4, #22]
 80115fc:	3304      	adds	r3, #4
 80115fe:	1b9b      	subs	r3, r3, r6
 8011600:	4442      	add	r2, r8
 8011602:	2104      	movs	r1, #4
 8011604:	f080 0001 	eor.w	r0, r0, #1
 8011608:	6123      	str	r3, [r4, #16]
 801160a:	60a2      	str	r2, [r4, #8]
 801160c:	7561      	strb	r1, [r4, #21]
 801160e:	b002      	add	sp, #8
 8011610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011614:	2104      	movs	r1, #4
 8011616:	4620      	mov	r0, r4
 8011618:	f000 f8e8 	bl	80117ec <ucdr_check_final_buffer_behavior>
 801161c:	b1d0      	cbz	r0, 8011654 <ucdr_serialize_int32_t+0xd0>
 801161e:	7d23      	ldrb	r3, [r4, #20]
 8011620:	2b01      	cmp	r3, #1
 8011622:	68a3      	ldr	r3, [r4, #8]
 8011624:	d01c      	beq.n	8011660 <ucdr_serialize_int32_t+0xdc>
 8011626:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801162a:	701a      	strb	r2, [r3, #0]
 801162c:	68a3      	ldr	r3, [r4, #8]
 801162e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011632:	705a      	strb	r2, [r3, #1]
 8011634:	68a3      	ldr	r3, [r4, #8]
 8011636:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801163a:	709a      	strb	r2, [r3, #2]
 801163c:	68a3      	ldr	r3, [r4, #8]
 801163e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011642:	70da      	strb	r2, [r3, #3]
 8011644:	68a2      	ldr	r2, [r4, #8]
 8011646:	6923      	ldr	r3, [r4, #16]
 8011648:	3204      	adds	r2, #4
 801164a:	3304      	adds	r3, #4
 801164c:	2104      	movs	r1, #4
 801164e:	60a2      	str	r2, [r4, #8]
 8011650:	6123      	str	r3, [r4, #16]
 8011652:	7561      	strb	r1, [r4, #21]
 8011654:	7da0      	ldrb	r0, [r4, #22]
 8011656:	f080 0001 	eor.w	r0, r0, #1
 801165a:	b002      	add	sp, #8
 801165c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011660:	9a01      	ldr	r2, [sp, #4]
 8011662:	601a      	str	r2, [r3, #0]
 8011664:	e7ee      	b.n	8011644 <ucdr_serialize_int32_t+0xc0>
 8011666:	68a2      	ldr	r2, [r4, #8]
 8011668:	6923      	ldr	r3, [r4, #16]
 801166a:	7da0      	ldrb	r0, [r4, #22]
 801166c:	7567      	strb	r7, [r4, #21]
 801166e:	1b92      	subs	r2, r2, r6
 8011670:	1b9b      	subs	r3, r3, r6
 8011672:	f080 0001 	eor.w	r0, r0, #1
 8011676:	60a2      	str	r2, [r4, #8]
 8011678:	6123      	str	r3, [r4, #16]
 801167a:	b002      	add	sp, #8
 801167c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011680:	68a3      	ldr	r3, [r4, #8]
 8011682:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011686:	701a      	strb	r2, [r3, #0]
 8011688:	68a3      	ldr	r3, [r4, #8]
 801168a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801168e:	701a      	strb	r2, [r3, #0]
 8011690:	68a3      	ldr	r3, [r4, #8]
 8011692:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011696:	701a      	strb	r2, [r3, #0]
 8011698:	e7ad      	b.n	80115f6 <ucdr_serialize_int32_t+0x72>
 801169a:	4628      	mov	r0, r5
 801169c:	ad01      	add	r5, sp, #4
 801169e:	4629      	mov	r1, r5
 80116a0:	4632      	mov	r2, r6
 80116a2:	f009 f800 	bl	801a6a6 <memcpy>
 80116a6:	68a0      	ldr	r0, [r4, #8]
 80116a8:	4642      	mov	r2, r8
 80116aa:	19a9      	adds	r1, r5, r6
 80116ac:	f008 fffb 	bl	801a6a6 <memcpy>
 80116b0:	e7a1      	b.n	80115f6 <ucdr_serialize_int32_t+0x72>
 80116b2:	bf00      	nop

080116b4 <ucdr_deserialize_int32_t>:
 80116b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116b8:	460d      	mov	r5, r1
 80116ba:	2104      	movs	r1, #4
 80116bc:	4604      	mov	r4, r0
 80116be:	f000 f8e7 	bl	8011890 <ucdr_buffer_alignment>
 80116c2:	4601      	mov	r1, r0
 80116c4:	4620      	mov	r0, r4
 80116c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80116ca:	f000 f925 	bl	8011918 <ucdr_advance_buffer>
 80116ce:	4620      	mov	r0, r4
 80116d0:	2104      	movs	r1, #4
 80116d2:	f000 f87f 	bl	80117d4 <ucdr_check_buffer_available_for>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d138      	bne.n	801174c <ucdr_deserialize_int32_t+0x98>
 80116da:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80116de:	42b7      	cmp	r7, r6
 80116e0:	d92f      	bls.n	8011742 <ucdr_deserialize_int32_t+0x8e>
 80116e2:	6922      	ldr	r2, [r4, #16]
 80116e4:	60a7      	str	r7, [r4, #8]
 80116e6:	1bbf      	subs	r7, r7, r6
 80116e8:	443a      	add	r2, r7
 80116ea:	f1c7 0904 	rsb	r9, r7, #4
 80116ee:	6122      	str	r2, [r4, #16]
 80116f0:	4649      	mov	r1, r9
 80116f2:	4620      	mov	r0, r4
 80116f4:	f000 f87a 	bl	80117ec <ucdr_check_final_buffer_behavior>
 80116f8:	2800      	cmp	r0, #0
 80116fa:	d046      	beq.n	801178a <ucdr_deserialize_int32_t+0xd6>
 80116fc:	7d23      	ldrb	r3, [r4, #20]
 80116fe:	2b01      	cmp	r3, #1
 8011700:	d05c      	beq.n	80117bc <ucdr_deserialize_int32_t+0x108>
 8011702:	78f3      	ldrb	r3, [r6, #3]
 8011704:	702b      	strb	r3, [r5, #0]
 8011706:	2f00      	cmp	r7, #0
 8011708:	d04c      	beq.n	80117a4 <ucdr_deserialize_int32_t+0xf0>
 801170a:	78b3      	ldrb	r3, [r6, #2]
 801170c:	706b      	strb	r3, [r5, #1]
 801170e:	2f01      	cmp	r7, #1
 8011710:	f105 0302 	add.w	r3, r5, #2
 8011714:	d04a      	beq.n	80117ac <ucdr_deserialize_int32_t+0xf8>
 8011716:	7873      	ldrb	r3, [r6, #1]
 8011718:	70ab      	strb	r3, [r5, #2]
 801171a:	2f02      	cmp	r7, #2
 801171c:	f105 0303 	add.w	r3, r5, #3
 8011720:	d048      	beq.n	80117b4 <ucdr_deserialize_int32_t+0x100>
 8011722:	7833      	ldrb	r3, [r6, #0]
 8011724:	70eb      	strb	r3, [r5, #3]
 8011726:	6923      	ldr	r3, [r4, #16]
 8011728:	68a2      	ldr	r2, [r4, #8]
 801172a:	7da0      	ldrb	r0, [r4, #22]
 801172c:	2104      	movs	r1, #4
 801172e:	3304      	adds	r3, #4
 8011730:	1bdb      	subs	r3, r3, r7
 8011732:	444a      	add	r2, r9
 8011734:	7561      	strb	r1, [r4, #21]
 8011736:	6123      	str	r3, [r4, #16]
 8011738:	60a2      	str	r2, [r4, #8]
 801173a:	f080 0001 	eor.w	r0, r0, #1
 801173e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011742:	2104      	movs	r1, #4
 8011744:	4620      	mov	r0, r4
 8011746:	f000 f851 	bl	80117ec <ucdr_check_final_buffer_behavior>
 801174a:	b1b0      	cbz	r0, 801177a <ucdr_deserialize_int32_t+0xc6>
 801174c:	7d23      	ldrb	r3, [r4, #20]
 801174e:	2b01      	cmp	r3, #1
 8011750:	68a3      	ldr	r3, [r4, #8]
 8011752:	d017      	beq.n	8011784 <ucdr_deserialize_int32_t+0xd0>
 8011754:	78db      	ldrb	r3, [r3, #3]
 8011756:	702b      	strb	r3, [r5, #0]
 8011758:	68a3      	ldr	r3, [r4, #8]
 801175a:	789b      	ldrb	r3, [r3, #2]
 801175c:	706b      	strb	r3, [r5, #1]
 801175e:	68a3      	ldr	r3, [r4, #8]
 8011760:	785b      	ldrb	r3, [r3, #1]
 8011762:	70ab      	strb	r3, [r5, #2]
 8011764:	68a3      	ldr	r3, [r4, #8]
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	70eb      	strb	r3, [r5, #3]
 801176a:	68a2      	ldr	r2, [r4, #8]
 801176c:	6923      	ldr	r3, [r4, #16]
 801176e:	3204      	adds	r2, #4
 8011770:	3304      	adds	r3, #4
 8011772:	2104      	movs	r1, #4
 8011774:	60a2      	str	r2, [r4, #8]
 8011776:	6123      	str	r3, [r4, #16]
 8011778:	7561      	strb	r1, [r4, #21]
 801177a:	7da0      	ldrb	r0, [r4, #22]
 801177c:	f080 0001 	eor.w	r0, r0, #1
 8011780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	602b      	str	r3, [r5, #0]
 8011788:	e7ef      	b.n	801176a <ucdr_deserialize_int32_t+0xb6>
 801178a:	68a2      	ldr	r2, [r4, #8]
 801178c:	6923      	ldr	r3, [r4, #16]
 801178e:	7da0      	ldrb	r0, [r4, #22]
 8011790:	f884 8015 	strb.w	r8, [r4, #21]
 8011794:	1bd2      	subs	r2, r2, r7
 8011796:	1bdb      	subs	r3, r3, r7
 8011798:	60a2      	str	r2, [r4, #8]
 801179a:	6123      	str	r3, [r4, #16]
 801179c:	f080 0001 	eor.w	r0, r0, #1
 80117a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117a4:	68a3      	ldr	r3, [r4, #8]
 80117a6:	789b      	ldrb	r3, [r3, #2]
 80117a8:	706b      	strb	r3, [r5, #1]
 80117aa:	1cab      	adds	r3, r5, #2
 80117ac:	68a2      	ldr	r2, [r4, #8]
 80117ae:	7852      	ldrb	r2, [r2, #1]
 80117b0:	f803 2b01 	strb.w	r2, [r3], #1
 80117b4:	68a2      	ldr	r2, [r4, #8]
 80117b6:	7812      	ldrb	r2, [r2, #0]
 80117b8:	701a      	strb	r2, [r3, #0]
 80117ba:	e7b4      	b.n	8011726 <ucdr_deserialize_int32_t+0x72>
 80117bc:	4631      	mov	r1, r6
 80117be:	463a      	mov	r2, r7
 80117c0:	4628      	mov	r0, r5
 80117c2:	f008 ff70 	bl	801a6a6 <memcpy>
 80117c6:	68a1      	ldr	r1, [r4, #8]
 80117c8:	464a      	mov	r2, r9
 80117ca:	19e8      	adds	r0, r5, r7
 80117cc:	f008 ff6b 	bl	801a6a6 <memcpy>
 80117d0:	e7a9      	b.n	8011726 <ucdr_deserialize_int32_t+0x72>
 80117d2:	bf00      	nop

080117d4 <ucdr_check_buffer_available_for>:
 80117d4:	7d83      	ldrb	r3, [r0, #22]
 80117d6:	b93b      	cbnz	r3, 80117e8 <ucdr_check_buffer_available_for+0x14>
 80117d8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80117dc:	4419      	add	r1, r3
 80117de:	4288      	cmp	r0, r1
 80117e0:	bf34      	ite	cc
 80117e2:	2000      	movcc	r0, #0
 80117e4:	2001      	movcs	r0, #1
 80117e6:	4770      	bx	lr
 80117e8:	2000      	movs	r0, #0
 80117ea:	4770      	bx	lr

080117ec <ucdr_check_final_buffer_behavior>:
 80117ec:	7d83      	ldrb	r3, [r0, #22]
 80117ee:	b943      	cbnz	r3, 8011802 <ucdr_check_final_buffer_behavior+0x16>
 80117f0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80117f4:	4291      	cmp	r1, r2
 80117f6:	b510      	push	{r4, lr}
 80117f8:	4604      	mov	r4, r0
 80117fa:	d205      	bcs.n	8011808 <ucdr_check_final_buffer_behavior+0x1c>
 80117fc:	2301      	movs	r3, #1
 80117fe:	4618      	mov	r0, r3
 8011800:	bd10      	pop	{r4, pc}
 8011802:	2300      	movs	r3, #0
 8011804:	4618      	mov	r0, r3
 8011806:	4770      	bx	lr
 8011808:	6982      	ldr	r2, [r0, #24]
 801180a:	b13a      	cbz	r2, 801181c <ucdr_check_final_buffer_behavior+0x30>
 801180c:	69c1      	ldr	r1, [r0, #28]
 801180e:	4790      	blx	r2
 8011810:	f080 0301 	eor.w	r3, r0, #1
 8011814:	b2db      	uxtb	r3, r3
 8011816:	75a0      	strb	r0, [r4, #22]
 8011818:	4618      	mov	r0, r3
 801181a:	bd10      	pop	{r4, pc}
 801181c:	2001      	movs	r0, #1
 801181e:	75a0      	strb	r0, [r4, #22]
 8011820:	e7fa      	b.n	8011818 <ucdr_check_final_buffer_behavior+0x2c>
 8011822:	bf00      	nop

08011824 <ucdr_set_on_full_buffer_callback>:
 8011824:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011828:	4770      	bx	lr
 801182a:	bf00      	nop

0801182c <ucdr_init_buffer_origin_offset_endian>:
 801182c:	b430      	push	{r4, r5}
 801182e:	9c02      	ldr	r4, [sp, #8]
 8011830:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8011834:	6001      	str	r1, [r0, #0]
 8011836:	440a      	add	r2, r1
 8011838:	60c3      	str	r3, [r0, #12]
 801183a:	4421      	add	r1, r4
 801183c:	441c      	add	r4, r3
 801183e:	2300      	movs	r3, #0
 8011840:	6104      	str	r4, [r0, #16]
 8011842:	7505      	strb	r5, [r0, #20]
 8011844:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8011848:	bc30      	pop	{r4, r5}
 801184a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801184e:	7543      	strb	r3, [r0, #21]
 8011850:	7583      	strb	r3, [r0, #22]
 8011852:	4770      	bx	lr

08011854 <ucdr_init_buffer_origin_offset>:
 8011854:	b510      	push	{r4, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	9c04      	ldr	r4, [sp, #16]
 801185a:	9400      	str	r4, [sp, #0]
 801185c:	2401      	movs	r4, #1
 801185e:	9401      	str	r4, [sp, #4]
 8011860:	f7ff ffe4 	bl	801182c <ucdr_init_buffer_origin_offset_endian>
 8011864:	b002      	add	sp, #8
 8011866:	bd10      	pop	{r4, pc}

08011868 <ucdr_init_buffer_origin>:
 8011868:	b510      	push	{r4, lr}
 801186a:	b082      	sub	sp, #8
 801186c:	2400      	movs	r4, #0
 801186e:	9400      	str	r4, [sp, #0]
 8011870:	f7ff fff0 	bl	8011854 <ucdr_init_buffer_origin_offset>
 8011874:	b002      	add	sp, #8
 8011876:	bd10      	pop	{r4, pc}

08011878 <ucdr_init_buffer>:
 8011878:	2300      	movs	r3, #0
 801187a:	f7ff bff5 	b.w	8011868 <ucdr_init_buffer_origin>
 801187e:	bf00      	nop

08011880 <ucdr_alignment>:
 8011880:	fbb0 f3f1 	udiv	r3, r0, r1
 8011884:	fb03 0011 	mls	r0, r3, r1, r0
 8011888:	1a08      	subs	r0, r1, r0
 801188a:	3901      	subs	r1, #1
 801188c:	4008      	ands	r0, r1
 801188e:	4770      	bx	lr

08011890 <ucdr_buffer_alignment>:
 8011890:	7d43      	ldrb	r3, [r0, #21]
 8011892:	428b      	cmp	r3, r1
 8011894:	d208      	bcs.n	80118a8 <ucdr_buffer_alignment+0x18>
 8011896:	6903      	ldr	r3, [r0, #16]
 8011898:	fbb3 f0f1 	udiv	r0, r3, r1
 801189c:	fb01 3010 	mls	r0, r1, r0, r3
 80118a0:	1a08      	subs	r0, r1, r0
 80118a2:	3901      	subs	r1, #1
 80118a4:	4008      	ands	r0, r1
 80118a6:	4770      	bx	lr
 80118a8:	2000      	movs	r0, #0
 80118aa:	4770      	bx	lr

080118ac <ucdr_align_to>:
 80118ac:	b570      	push	{r4, r5, r6, lr}
 80118ae:	4604      	mov	r4, r0
 80118b0:	460e      	mov	r6, r1
 80118b2:	f7ff ffed 	bl	8011890 <ucdr_buffer_alignment>
 80118b6:	68a5      	ldr	r5, [r4, #8]
 80118b8:	6863      	ldr	r3, [r4, #4]
 80118ba:	6922      	ldr	r2, [r4, #16]
 80118bc:	7566      	strb	r6, [r4, #21]
 80118be:	4405      	add	r5, r0
 80118c0:	42ab      	cmp	r3, r5
 80118c2:	4410      	add	r0, r2
 80118c4:	bf28      	it	cs
 80118c6:	462b      	movcs	r3, r5
 80118c8:	6120      	str	r0, [r4, #16]
 80118ca:	60a3      	str	r3, [r4, #8]
 80118cc:	bd70      	pop	{r4, r5, r6, pc}
 80118ce:	bf00      	nop

080118d0 <ucdr_buffer_length>:
 80118d0:	6882      	ldr	r2, [r0, #8]
 80118d2:	6800      	ldr	r0, [r0, #0]
 80118d4:	1a10      	subs	r0, r2, r0
 80118d6:	4770      	bx	lr

080118d8 <ucdr_buffer_remaining>:
 80118d8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80118dc:	1a10      	subs	r0, r2, r0
 80118de:	4770      	bx	lr

080118e0 <ucdr_check_final_buffer_behavior_array>:
 80118e0:	b538      	push	{r3, r4, r5, lr}
 80118e2:	7d83      	ldrb	r3, [r0, #22]
 80118e4:	b963      	cbnz	r3, 8011900 <ucdr_check_final_buffer_behavior_array+0x20>
 80118e6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	4604      	mov	r4, r0
 80118ee:	460d      	mov	r5, r1
 80118f0:	d308      	bcc.n	8011904 <ucdr_check_final_buffer_behavior_array+0x24>
 80118f2:	b139      	cbz	r1, 8011904 <ucdr_check_final_buffer_behavior_array+0x24>
 80118f4:	6983      	ldr	r3, [r0, #24]
 80118f6:	b163      	cbz	r3, 8011912 <ucdr_check_final_buffer_behavior_array+0x32>
 80118f8:	69c1      	ldr	r1, [r0, #28]
 80118fa:	4798      	blx	r3
 80118fc:	75a0      	strb	r0, [r4, #22]
 80118fe:	b108      	cbz	r0, 8011904 <ucdr_check_final_buffer_behavior_array+0x24>
 8011900:	2000      	movs	r0, #0
 8011902:	bd38      	pop	{r3, r4, r5, pc}
 8011904:	4620      	mov	r0, r4
 8011906:	f7ff ffe7 	bl	80118d8 <ucdr_buffer_remaining>
 801190a:	42a8      	cmp	r0, r5
 801190c:	bf28      	it	cs
 801190e:	4628      	movcs	r0, r5
 8011910:	bd38      	pop	{r3, r4, r5, pc}
 8011912:	2301      	movs	r3, #1
 8011914:	7583      	strb	r3, [r0, #22]
 8011916:	e7f3      	b.n	8011900 <ucdr_check_final_buffer_behavior_array+0x20>

08011918 <ucdr_advance_buffer>:
 8011918:	b538      	push	{r3, r4, r5, lr}
 801191a:	4604      	mov	r4, r0
 801191c:	460d      	mov	r5, r1
 801191e:	f7ff ff59 	bl	80117d4 <ucdr_check_buffer_available_for>
 8011922:	b178      	cbz	r0, 8011944 <ucdr_advance_buffer+0x2c>
 8011924:	68a3      	ldr	r3, [r4, #8]
 8011926:	6921      	ldr	r1, [r4, #16]
 8011928:	442b      	add	r3, r5
 801192a:	60a3      	str	r3, [r4, #8]
 801192c:	2301      	movs	r3, #1
 801192e:	4429      	add	r1, r5
 8011930:	7563      	strb	r3, [r4, #21]
 8011932:	6121      	str	r1, [r4, #16]
 8011934:	bd38      	pop	{r3, r4, r5, pc}
 8011936:	68a2      	ldr	r2, [r4, #8]
 8011938:	6923      	ldr	r3, [r4, #16]
 801193a:	4402      	add	r2, r0
 801193c:	4403      	add	r3, r0
 801193e:	1a2d      	subs	r5, r5, r0
 8011940:	60a2      	str	r2, [r4, #8]
 8011942:	6123      	str	r3, [r4, #16]
 8011944:	2201      	movs	r2, #1
 8011946:	4629      	mov	r1, r5
 8011948:	4620      	mov	r0, r4
 801194a:	f7ff ffc9 	bl	80118e0 <ucdr_check_final_buffer_behavior_array>
 801194e:	2800      	cmp	r0, #0
 8011950:	d1f1      	bne.n	8011936 <ucdr_advance_buffer+0x1e>
 8011952:	2301      	movs	r3, #1
 8011954:	7563      	strb	r3, [r4, #21]
 8011956:	bd38      	pop	{r3, r4, r5, pc}

08011958 <uxr_buffer_delete_entity>:
 8011958:	b530      	push	{r4, r5, lr}
 801195a:	b08f      	sub	sp, #60	; 0x3c
 801195c:	2403      	movs	r4, #3
 801195e:	2500      	movs	r5, #0
 8011960:	e9cd 4500 	strd	r4, r5, [sp]
 8011964:	9202      	str	r2, [sp, #8]
 8011966:	ab06      	add	r3, sp, #24
 8011968:	2204      	movs	r2, #4
 801196a:	9103      	str	r1, [sp, #12]
 801196c:	4604      	mov	r4, r0
 801196e:	f001 fa85 	bl	8012e7c <uxr_prepare_stream_to_write_submessage>
 8011972:	b918      	cbnz	r0, 801197c <uxr_buffer_delete_entity+0x24>
 8011974:	4604      	mov	r4, r0
 8011976:	4620      	mov	r0, r4
 8011978:	b00f      	add	sp, #60	; 0x3c
 801197a:	bd30      	pop	{r4, r5, pc}
 801197c:	9902      	ldr	r1, [sp, #8]
 801197e:	aa05      	add	r2, sp, #20
 8011980:	4620      	mov	r0, r4
 8011982:	f001 fbb5 	bl	80130f0 <uxr_init_base_object_request>
 8011986:	a905      	add	r1, sp, #20
 8011988:	4604      	mov	r4, r0
 801198a:	a806      	add	r0, sp, #24
 801198c:	f002 fdf0 	bl	8014570 <uxr_serialize_DELETE_Payload>
 8011990:	4620      	mov	r0, r4
 8011992:	b00f      	add	sp, #60	; 0x3c
 8011994:	bd30      	pop	{r4, r5, pc}
 8011996:	bf00      	nop

08011998 <uxr_common_create_entity>:
 8011998:	b530      	push	{r4, r5, lr}
 801199a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801199e:	b08d      	sub	sp, #52	; 0x34
 80119a0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80119a4:	2d01      	cmp	r5, #1
 80119a6:	bf0c      	ite	eq
 80119a8:	f003 0201 	andeq.w	r2, r3, #1
 80119ac:	2200      	movne	r2, #0
 80119ae:	330e      	adds	r3, #14
 80119b0:	4604      	mov	r4, r0
 80119b2:	441a      	add	r2, r3
 80119b4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80119b8:	9001      	str	r0, [sp, #4]
 80119ba:	2101      	movs	r1, #1
 80119bc:	9100      	str	r1, [sp, #0]
 80119be:	b292      	uxth	r2, r2
 80119c0:	9903      	ldr	r1, [sp, #12]
 80119c2:	ab04      	add	r3, sp, #16
 80119c4:	4620      	mov	r0, r4
 80119c6:	f001 fa59 	bl	8012e7c <uxr_prepare_stream_to_write_submessage>
 80119ca:	b918      	cbnz	r0, 80119d4 <uxr_common_create_entity+0x3c>
 80119cc:	4604      	mov	r4, r0
 80119ce:	4620      	mov	r0, r4
 80119d0:	b00d      	add	sp, #52	; 0x34
 80119d2:	bd30      	pop	{r4, r5, pc}
 80119d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80119d6:	9902      	ldr	r1, [sp, #8]
 80119d8:	4620      	mov	r0, r4
 80119da:	f001 fb89 	bl	80130f0 <uxr_init_base_object_request>
 80119de:	9911      	ldr	r1, [sp, #68]	; 0x44
 80119e0:	4604      	mov	r4, r0
 80119e2:	a804      	add	r0, sp, #16
 80119e4:	f002 fd18 	bl	8014418 <uxr_serialize_CREATE_Payload>
 80119e8:	4620      	mov	r0, r4
 80119ea:	b00d      	add	sp, #52	; 0x34
 80119ec:	bd30      	pop	{r4, r5, pc}
 80119ee:	bf00      	nop

080119f0 <uxr_buffer_create_participant_bin>:
 80119f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119f2:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 80119f6:	ac11      	add	r4, sp, #68	; 0x44
 80119f8:	9103      	str	r1, [sp, #12]
 80119fa:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 80119fc:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 8011a00:	2103      	movs	r1, #3
 8011a02:	7221      	strb	r1, [r4, #8]
 8011a04:	2301      	movs	r3, #1
 8011a06:	2100      	movs	r1, #0
 8011a08:	7123      	strb	r3, [r4, #4]
 8011a0a:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 8011a0e:	9202      	str	r2, [sp, #8]
 8011a10:	4605      	mov	r5, r0
 8011a12:	f88d 1014 	strb.w	r1, [sp, #20]
 8011a16:	b1ce      	cbz	r6, 8011a4c <uxr_buffer_create_participant_bin+0x5c>
 8011a18:	f88d 301c 	strb.w	r3, [sp, #28]
 8011a1c:	9608      	str	r6, [sp, #32]
 8011a1e:	a809      	add	r0, sp, #36	; 0x24
 8011a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a24:	a915      	add	r1, sp, #84	; 0x54
 8011a26:	f7ff ff27 	bl	8011878 <ucdr_init_buffer>
 8011a2a:	a905      	add	r1, sp, #20
 8011a2c:	a809      	add	r0, sp, #36	; 0x24
 8011a2e:	f002 f8bb 	bl	8013ba8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011a32:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011a34:	9401      	str	r4, [sp, #4]
 8011a36:	b283      	uxth	r3, r0
 8011a38:	9700      	str	r7, [sp, #0]
 8011a3a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011a3e:	60e0      	str	r0, [r4, #12]
 8011a40:	4628      	mov	r0, r5
 8011a42:	f7ff ffa9 	bl	8011998 <uxr_common_create_entity>
 8011a46:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8011a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a4c:	f88d 601c 	strb.w	r6, [sp, #28]
 8011a50:	e7e5      	b.n	8011a1e <uxr_buffer_create_participant_bin+0x2e>
 8011a52:	bf00      	nop

08011a54 <uxr_buffer_create_topic_bin>:
 8011a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a56:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011a5a:	ac13      	add	r4, sp, #76	; 0x4c
 8011a5c:	4605      	mov	r5, r0
 8011a5e:	9105      	str	r1, [sp, #20]
 8011a60:	4618      	mov	r0, r3
 8011a62:	a997      	add	r1, sp, #604	; 0x25c
 8011a64:	2602      	movs	r6, #2
 8011a66:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011a6a:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 8011a6e:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 8011a72:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 8011a74:	f000 f994 	bl	8011da0 <uxr_object_id_to_raw>
 8011a78:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 8011a7a:	9206      	str	r2, [sp, #24]
 8011a7c:	2303      	movs	r3, #3
 8011a7e:	2101      	movs	r1, #1
 8011a80:	7223      	strb	r3, [r4, #8]
 8011a82:	a80b      	add	r0, sp, #44	; 0x2c
 8011a84:	2300      	movs	r3, #0
 8011a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a8a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011a8e:	a917      	add	r1, sp, #92	; 0x5c
 8011a90:	f88d 301c 	strb.w	r3, [sp, #28]
 8011a94:	960a      	str	r6, [sp, #40]	; 0x28
 8011a96:	f7ff feef 	bl	8011878 <ucdr_init_buffer>
 8011a9a:	a906      	add	r1, sp, #24
 8011a9c:	a80b      	add	r0, sp, #44	; 0x2c
 8011a9e:	f002 f8a5 	bl	8013bec <uxr_serialize_OBJK_Topic_Binary>
 8011aa2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011aa4:	9401      	str	r4, [sp, #4]
 8011aa6:	9700      	str	r7, [sp, #0]
 8011aa8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011aac:	4628      	mov	r0, r5
 8011aae:	b2b3      	uxth	r3, r6
 8011ab0:	60e6      	str	r6, [r4, #12]
 8011ab2:	f7ff ff71 	bl	8011998 <uxr_common_create_entity>
 8011ab6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011aba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011abc <uxr_buffer_create_publisher_bin>:
 8011abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011abe:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011ac2:	ac0e      	add	r4, sp, #56	; 0x38
 8011ac4:	4605      	mov	r5, r0
 8011ac6:	9105      	str	r1, [sp, #20]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	2603      	movs	r6, #3
 8011acc:	a992      	add	r1, sp, #584	; 0x248
 8011ace:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011ad2:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011ad6:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011ada:	f000 f961 	bl	8011da0 <uxr_object_id_to_raw>
 8011ade:	2300      	movs	r3, #0
 8011ae0:	a806      	add	r0, sp, #24
 8011ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ae6:	a912      	add	r1, sp, #72	; 0x48
 8011ae8:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011aec:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011af0:	7226      	strb	r6, [r4, #8]
 8011af2:	f7ff fec1 	bl	8011878 <ucdr_init_buffer>
 8011af6:	a993      	add	r1, sp, #588	; 0x24c
 8011af8:	a806      	add	r0, sp, #24
 8011afa:	f002 f92b 	bl	8013d54 <uxr_serialize_OBJK_Publisher_Binary>
 8011afe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011b00:	9700      	str	r7, [sp, #0]
 8011b02:	9401      	str	r4, [sp, #4]
 8011b04:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011b08:	4628      	mov	r0, r5
 8011b0a:	b2b3      	uxth	r3, r6
 8011b0c:	60e6      	str	r6, [r4, #12]
 8011b0e:	f7ff ff43 	bl	8011998 <uxr_common_create_entity>
 8011b12:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b18 <uxr_buffer_create_subscriber_bin>:
 8011b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b1a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011b1e:	ac0e      	add	r4, sp, #56	; 0x38
 8011b20:	4605      	mov	r5, r0
 8011b22:	9105      	str	r1, [sp, #20]
 8011b24:	4618      	mov	r0, r3
 8011b26:	a992      	add	r1, sp, #584	; 0x248
 8011b28:	2604      	movs	r6, #4
 8011b2a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011b2e:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011b32:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011b36:	f000 f933 	bl	8011da0 <uxr_object_id_to_raw>
 8011b3a:	2103      	movs	r1, #3
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	a806      	add	r0, sp, #24
 8011b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b44:	7221      	strb	r1, [r4, #8]
 8011b46:	a912      	add	r1, sp, #72	; 0x48
 8011b48:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011b4c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011b50:	f7ff fe92 	bl	8011878 <ucdr_init_buffer>
 8011b54:	a993      	add	r1, sp, #588	; 0x24c
 8011b56:	a806      	add	r0, sp, #24
 8011b58:	f002 f9ac 	bl	8013eb4 <uxr_serialize_OBJK_Subscriber_Binary>
 8011b5c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011b5e:	9700      	str	r7, [sp, #0]
 8011b60:	9401      	str	r4, [sp, #4]
 8011b62:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011b66:	4628      	mov	r0, r5
 8011b68:	b2b3      	uxth	r3, r6
 8011b6a:	60e6      	str	r6, [r4, #12]
 8011b6c:	f7ff ff14 	bl	8011998 <uxr_common_create_entity>
 8011b70:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b76:	bf00      	nop

08011b78 <uxr_buffer_create_datawriter_bin>:
 8011b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b7c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011b80:	ac1d      	add	r4, sp, #116	; 0x74
 8011b82:	2505      	movs	r5, #5
 8011b84:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011b88:	9105      	str	r1, [sp, #20]
 8011b8a:	4606      	mov	r6, r0
 8011b8c:	a9a1      	add	r1, sp, #644	; 0x284
 8011b8e:	4618      	mov	r0, r3
 8011b90:	7125      	strb	r5, [r4, #4]
 8011b92:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8011b96:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8011b9a:	2703      	movs	r7, #3
 8011b9c:	f000 f900 	bl	8011da0 <uxr_object_id_to_raw>
 8011ba0:	a90e      	add	r1, sp, #56	; 0x38
 8011ba2:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8011ba4:	7227      	strb	r7, [r4, #8]
 8011ba6:	f000 f8fb 	bl	8011da0 <uxr_object_id_to_raw>
 8011baa:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011bae:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 8011bb2:	3d00      	subs	r5, #0
 8011bb4:	f04f 0300 	mov.w	r3, #0
 8011bb8:	bf18      	it	ne
 8011bba:	2501      	movne	r5, #1
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011bc2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8011bc6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011bca:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011bce:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011bd2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011bd6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011bda:	bb89      	cbnz	r1, 8011c40 <uxr_buffer_create_datawriter_bin+0xc8>
 8011bdc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011be0:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011be4:	f04f 0c13 	mov.w	ip, #19
 8011be8:	250b      	movs	r5, #11
 8011bea:	2221      	movs	r2, #33	; 0x21
 8011bec:	2111      	movs	r1, #17
 8011bee:	2009      	movs	r0, #9
 8011bf0:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8011bf4:	b923      	cbnz	r3, 8011c00 <uxr_buffer_create_datawriter_bin+0x88>
 8011bf6:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011bfa:	4672      	mov	r2, lr
 8011bfc:	4661      	mov	r1, ip
 8011bfe:	4628      	mov	r0, r5
 8011c00:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8011c04:	2b01      	cmp	r3, #1
 8011c06:	d025      	beq.n	8011c54 <uxr_buffer_create_datawriter_bin+0xdc>
 8011c08:	2b03      	cmp	r3, #3
 8011c0a:	d029      	beq.n	8011c60 <uxr_buffer_create_datawriter_bin+0xe8>
 8011c0c:	b32b      	cbz	r3, 8011c5a <uxr_buffer_create_datawriter_bin+0xe2>
 8011c0e:	a806      	add	r0, sp, #24
 8011c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c14:	a921      	add	r1, sp, #132	; 0x84
 8011c16:	f7ff fe2f 	bl	8011878 <ucdr_init_buffer>
 8011c1a:	a90e      	add	r1, sp, #56	; 0x38
 8011c1c:	a806      	add	r0, sp, #24
 8011c1e:	f002 f9fb 	bl	8014018 <uxr_serialize_OBJK_DataWriter_Binary>
 8011c22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011c24:	9401      	str	r4, [sp, #4]
 8011c26:	b283      	uxth	r3, r0
 8011c28:	f8cd 8000 	str.w	r8, [sp]
 8011c2c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011c30:	60e0      	str	r0, [r4, #12]
 8011c32:	4630      	mov	r0, r6
 8011c34:	f7ff feb0 	bl	8011998 <uxr_common_create_entity>
 8011c38:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c40:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011c44:	f04f 0c12 	mov.w	ip, #18
 8011c48:	250a      	movs	r5, #10
 8011c4a:	2220      	movs	r2, #32
 8011c4c:	2110      	movs	r1, #16
 8011c4e:	2008      	movs	r0, #8
 8011c50:	2702      	movs	r7, #2
 8011c52:	e7cd      	b.n	8011bf0 <uxr_buffer_create_datawriter_bin+0x78>
 8011c54:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011c58:	e7d9      	b.n	8011c0e <uxr_buffer_create_datawriter_bin+0x96>
 8011c5a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011c5e:	e7d6      	b.n	8011c0e <uxr_buffer_create_datawriter_bin+0x96>
 8011c60:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011c64:	e7d3      	b.n	8011c0e <uxr_buffer_create_datawriter_bin+0x96>
 8011c66:	bf00      	nop

08011c68 <uxr_buffer_create_datareader_bin>:
 8011c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c6c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8011c70:	ac1f      	add	r4, sp, #124	; 0x7c
 8011c72:	2506      	movs	r5, #6
 8011c74:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011c78:	9105      	str	r1, [sp, #20]
 8011c7a:	4606      	mov	r6, r0
 8011c7c:	a9a3      	add	r1, sp, #652	; 0x28c
 8011c7e:	4618      	mov	r0, r3
 8011c80:	7125      	strb	r5, [r4, #4]
 8011c82:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8011c86:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8011c8a:	2703      	movs	r7, #3
 8011c8c:	f000 f888 	bl	8011da0 <uxr_object_id_to_raw>
 8011c90:	a90e      	add	r1, sp, #56	; 0x38
 8011c92:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8011c94:	7227      	strb	r7, [r4, #8]
 8011c96:	f000 f883 	bl	8011da0 <uxr_object_id_to_raw>
 8011c9a:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011c9e:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 8011ca2:	3d00      	subs	r5, #0
 8011ca4:	f04f 0300 	mov.w	r3, #0
 8011ca8:	bf18      	it	ne
 8011caa:	2501      	movne	r5, #1
 8011cac:	2201      	movs	r2, #1
 8011cae:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011cb2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8011cb6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8011cba:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011cbe:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011cc2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011cc6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011cca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011cce:	bb89      	cbnz	r1, 8011d34 <uxr_buffer_create_datareader_bin+0xcc>
 8011cd0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011cd4:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011cd8:	f04f 0c13 	mov.w	ip, #19
 8011cdc:	250b      	movs	r5, #11
 8011cde:	2221      	movs	r2, #33	; 0x21
 8011ce0:	2111      	movs	r1, #17
 8011ce2:	2009      	movs	r0, #9
 8011ce4:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8011ce8:	b923      	cbnz	r3, 8011cf4 <uxr_buffer_create_datareader_bin+0x8c>
 8011cea:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011cee:	4672      	mov	r2, lr
 8011cf0:	4661      	mov	r1, ip
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8011cf8:	2b01      	cmp	r3, #1
 8011cfa:	d025      	beq.n	8011d48 <uxr_buffer_create_datareader_bin+0xe0>
 8011cfc:	2b03      	cmp	r3, #3
 8011cfe:	d029      	beq.n	8011d54 <uxr_buffer_create_datareader_bin+0xec>
 8011d00:	b32b      	cbz	r3, 8011d4e <uxr_buffer_create_datareader_bin+0xe6>
 8011d02:	a806      	add	r0, sp, #24
 8011d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d08:	a923      	add	r1, sp, #140	; 0x8c
 8011d0a:	f7ff fdb5 	bl	8011878 <ucdr_init_buffer>
 8011d0e:	a90e      	add	r1, sp, #56	; 0x38
 8011d10:	a806      	add	r0, sp, #24
 8011d12:	f002 f945 	bl	8013fa0 <uxr_serialize_OBJK_DataReader_Binary>
 8011d16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011d18:	9401      	str	r4, [sp, #4]
 8011d1a:	b283      	uxth	r3, r0
 8011d1c:	f8cd 8000 	str.w	r8, [sp]
 8011d20:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011d24:	60e0      	str	r0, [r4, #12]
 8011d26:	4630      	mov	r0, r6
 8011d28:	f7ff fe36 	bl	8011998 <uxr_common_create_entity>
 8011d2c:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d34:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011d38:	f04f 0c12 	mov.w	ip, #18
 8011d3c:	250a      	movs	r5, #10
 8011d3e:	2220      	movs	r2, #32
 8011d40:	2110      	movs	r1, #16
 8011d42:	2008      	movs	r0, #8
 8011d44:	2702      	movs	r7, #2
 8011d46:	e7cd      	b.n	8011ce4 <uxr_buffer_create_datareader_bin+0x7c>
 8011d48:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011d4c:	e7d9      	b.n	8011d02 <uxr_buffer_create_datareader_bin+0x9a>
 8011d4e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011d52:	e7d6      	b.n	8011d02 <uxr_buffer_create_datareader_bin+0x9a>
 8011d54:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011d58:	e7d3      	b.n	8011d02 <uxr_buffer_create_datareader_bin+0x9a>
 8011d5a:	bf00      	nop

08011d5c <uxr_object_id>:
 8011d5c:	b082      	sub	sp, #8
 8011d5e:	2300      	movs	r3, #0
 8011d60:	f88d 1006 	strb.w	r1, [sp, #6]
 8011d64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011d68:	f360 030f 	bfi	r3, r0, #0, #16
 8011d6c:	f362 431f 	bfi	r3, r2, #16, #16
 8011d70:	4618      	mov	r0, r3
 8011d72:	b002      	add	sp, #8
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop

08011d78 <uxr_object_id_from_raw>:
 8011d78:	7843      	ldrb	r3, [r0, #1]
 8011d7a:	7801      	ldrb	r1, [r0, #0]
 8011d7c:	b082      	sub	sp, #8
 8011d7e:	f003 000f 	and.w	r0, r3, #15
 8011d82:	f88d 0006 	strb.w	r0, [sp, #6]
 8011d86:	091b      	lsrs	r3, r3, #4
 8011d88:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8011d92:	f363 020f 	bfi	r2, r3, #0, #16
 8011d96:	f361 421f 	bfi	r2, r1, #16, #16
 8011d9a:	4610      	mov	r0, r2
 8011d9c:	b002      	add	sp, #8
 8011d9e:	4770      	bx	lr

08011da0 <uxr_object_id_to_raw>:
 8011da0:	4602      	mov	r2, r0
 8011da2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011da6:	b082      	sub	sp, #8
 8011da8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8011dac:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8011db0:	700a      	strb	r2, [r1, #0]
 8011db2:	704b      	strb	r3, [r1, #1]
 8011db4:	b002      	add	sp, #8
 8011db6:	4770      	bx	lr

08011db8 <uxr_buffer_request_data>:
 8011db8:	b530      	push	{r4, r5, lr}
 8011dba:	b095      	sub	sp, #84	; 0x54
 8011dbc:	4604      	mov	r4, r0
 8011dbe:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8011dc0:	9105      	str	r1, [sp, #20]
 8011dc2:	2d00      	cmp	r5, #0
 8011dc4:	bf14      	ite	ne
 8011dc6:	2101      	movne	r1, #1
 8011dc8:	2100      	moveq	r1, #0
 8011dca:	9204      	str	r2, [sp, #16]
 8011dcc:	f04f 0200 	mov.w	r2, #0
 8011dd0:	9303      	str	r3, [sp, #12]
 8011dd2:	f88d 301c 	strb.w	r3, [sp, #28]
 8011dd6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011dda:	f88d 201d 	strb.w	r2, [sp, #29]
 8011dde:	f88d 201e 	strb.w	r2, [sp, #30]
 8011de2:	d021      	beq.n	8011e28 <uxr_buffer_request_data+0x70>
 8011de4:	686a      	ldr	r2, [r5, #4]
 8011de6:	682b      	ldr	r3, [r5, #0]
 8011de8:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 8011dec:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8011df0:	2210      	movs	r2, #16
 8011df2:	2000      	movs	r0, #0
 8011df4:	2108      	movs	r1, #8
 8011df6:	e9cd 1000 	strd	r1, r0, [sp]
 8011dfa:	ab0c      	add	r3, sp, #48	; 0x30
 8011dfc:	9905      	ldr	r1, [sp, #20]
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f001 f83c 	bl	8012e7c <uxr_prepare_stream_to_write_submessage>
 8011e04:	b918      	cbnz	r0, 8011e0e <uxr_buffer_request_data+0x56>
 8011e06:	4604      	mov	r4, r0
 8011e08:	4620      	mov	r0, r4
 8011e0a:	b015      	add	sp, #84	; 0x54
 8011e0c:	bd30      	pop	{r4, r5, pc}
 8011e0e:	9904      	ldr	r1, [sp, #16]
 8011e10:	aa06      	add	r2, sp, #24
 8011e12:	4620      	mov	r0, r4
 8011e14:	f001 f96c 	bl	80130f0 <uxr_init_base_object_request>
 8011e18:	a906      	add	r1, sp, #24
 8011e1a:	4604      	mov	r4, r0
 8011e1c:	a80c      	add	r0, sp, #48	; 0x30
 8011e1e:	f002 fc51 	bl	80146c4 <uxr_serialize_READ_DATA_Payload>
 8011e22:	4620      	mov	r0, r4
 8011e24:	b015      	add	sp, #84	; 0x54
 8011e26:	bd30      	pop	{r4, r5, pc}
 8011e28:	2208      	movs	r2, #8
 8011e2a:	e7e2      	b.n	8011df2 <uxr_buffer_request_data+0x3a>

08011e2c <uxr_buffer_cancel_data>:
 8011e2c:	b530      	push	{r4, r5, lr}
 8011e2e:	b095      	sub	sp, #84	; 0x54
 8011e30:	2400      	movs	r4, #0
 8011e32:	2308      	movs	r3, #8
 8011e34:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8011e38:	9300      	str	r3, [sp, #0]
 8011e3a:	9205      	str	r2, [sp, #20]
 8011e3c:	2501      	movs	r5, #1
 8011e3e:	ab0c      	add	r3, sp, #48	; 0x30
 8011e40:	2210      	movs	r2, #16
 8011e42:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011e46:	f88d 401e 	strb.w	r4, [sp, #30]
 8011e4a:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 8011e4e:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 8011e52:	9103      	str	r1, [sp, #12]
 8011e54:	4604      	mov	r4, r0
 8011e56:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8011e5a:	f001 f80f 	bl	8012e7c <uxr_prepare_stream_to_write_submessage>
 8011e5e:	b918      	cbnz	r0, 8011e68 <uxr_buffer_cancel_data+0x3c>
 8011e60:	4604      	mov	r4, r0
 8011e62:	4620      	mov	r0, r4
 8011e64:	b015      	add	sp, #84	; 0x54
 8011e66:	bd30      	pop	{r4, r5, pc}
 8011e68:	9905      	ldr	r1, [sp, #20]
 8011e6a:	aa06      	add	r2, sp, #24
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f001 f93f 	bl	80130f0 <uxr_init_base_object_request>
 8011e72:	a906      	add	r1, sp, #24
 8011e74:	4604      	mov	r4, r0
 8011e76:	a80c      	add	r0, sp, #48	; 0x30
 8011e78:	f002 fc24 	bl	80146c4 <uxr_serialize_READ_DATA_Payload>
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	b015      	add	sp, #84	; 0x54
 8011e80:	bd30      	pop	{r4, r5, pc}
 8011e82:	bf00      	nop

08011e84 <read_submessage_format>:
 8011e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e88:	b095      	sub	sp, #84	; 0x54
 8011e8a:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8011e8e:	b113      	cbz	r3, 8011e96 <read_submessage_format+0x12>
 8011e90:	b015      	add	sp, #84	; 0x54
 8011e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e96:	460c      	mov	r4, r1
 8011e98:	4616      	mov	r6, r2
 8011e9a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011e9e:	461d      	mov	r5, r3
 8011ea0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011ea2:	9304      	str	r3, [sp, #16]
 8011ea4:	1a52      	subs	r2, r2, r1
 8011ea6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011ea8:	9305      	str	r3, [sp, #20]
 8011eaa:	4607      	mov	r7, r0
 8011eac:	a80c      	add	r0, sp, #48	; 0x30
 8011eae:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8011eb2:	f7ff fce1 	bl	8011878 <ucdr_init_buffer>
 8011eb6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011eba:	a80c      	add	r0, sp, #48	; 0x30
 8011ebc:	f7ff fcb2 	bl	8011824 <ucdr_set_on_full_buffer_callback>
 8011ec0:	69e3      	ldr	r3, [r4, #28]
 8011ec2:	b193      	cbz	r3, 8011eea <read_submessage_format+0x66>
 8011ec4:	f1b8 0f07 	cmp.w	r8, #7
 8011ec8:	751d      	strb	r5, [r3, #20]
 8011eca:	d03e      	beq.n	8011f4a <read_submessage_format+0xc6>
 8011ecc:	f1b8 0f08 	cmp.w	r8, #8
 8011ed0:	d02c      	beq.n	8011f2c <read_submessage_format+0xa8>
 8011ed2:	f1b8 0f06 	cmp.w	r8, #6
 8011ed6:	d011      	beq.n	8011efc <read_submessage_format+0x78>
 8011ed8:	2201      	movs	r2, #1
 8011eda:	751a      	strb	r2, [r3, #20]
 8011edc:	4631      	mov	r1, r6
 8011ede:	4620      	mov	r0, r4
 8011ee0:	f7ff fd1a 	bl	8011918 <ucdr_advance_buffer>
 8011ee4:	b015      	add	sp, #84	; 0x54
 8011ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011eea:	f1b8 0f07 	cmp.w	r8, #7
 8011eee:	d02c      	beq.n	8011f4a <read_submessage_format+0xc6>
 8011ef0:	f1b8 0f08 	cmp.w	r8, #8
 8011ef4:	d01a      	beq.n	8011f2c <read_submessage_format+0xa8>
 8011ef6:	f1b8 0f06 	cmp.w	r8, #6
 8011efa:	d1ef      	bne.n	8011edc <read_submessage_format+0x58>
 8011efc:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8011f00:	b18d      	cbz	r5, 8011f26 <read_submessage_format+0xa2>
 8011f02:	2306      	movs	r3, #6
 8011f04:	f88d 3016 	strb.w	r3, [sp, #22]
 8011f08:	aa0c      	add	r2, sp, #48	; 0x30
 8011f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011f0e:	9302      	str	r3, [sp, #8]
 8011f10:	9200      	str	r2, [sp, #0]
 8011f12:	9b04      	ldr	r3, [sp, #16]
 8011f14:	9905      	ldr	r1, [sp, #20]
 8011f16:	9601      	str	r6, [sp, #4]
 8011f18:	464a      	mov	r2, r9
 8011f1a:	4638      	mov	r0, r7
 8011f1c:	47a8      	blx	r5
 8011f1e:	2301      	movs	r3, #1
 8011f20:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8011f24:	69e3      	ldr	r3, [r4, #28]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d1d6      	bne.n	8011ed8 <read_submessage_format+0x54>
 8011f2a:	e7d7      	b.n	8011edc <read_submessage_format+0x58>
 8011f2c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011f30:	2a00      	cmp	r2, #0
 8011f32:	d0f8      	beq.n	8011f26 <read_submessage_format+0xa2>
 8011f34:	a906      	add	r1, sp, #24
 8011f36:	a80c      	add	r0, sp, #48	; 0x30
 8011f38:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011f3a:	f002 fc89 	bl	8014850 <uxr_deserialize_SampleIdentity>
 8011f3e:	2800      	cmp	r0, #0
 8011f40:	d13c      	bne.n	8011fbc <read_submessage_format+0x138>
 8011f42:	69e3      	ldr	r3, [r4, #28]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d1c7      	bne.n	8011ed8 <read_submessage_format+0x54>
 8011f48:	e7c8      	b.n	8011edc <read_submessage_format+0x58>
 8011f4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8011f4e:	b132      	cbz	r2, 8011f5e <read_submessage_format+0xda>
 8011f50:	a906      	add	r1, sp, #24
 8011f52:	a80c      	add	r0, sp, #48	; 0x30
 8011f54:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011f56:	f002 f939 	bl	80141cc <uxr_deserialize_BaseObjectRequest>
 8011f5a:	b930      	cbnz	r0, 8011f6a <read_submessage_format+0xe6>
 8011f5c:	69e3      	ldr	r3, [r4, #28]
 8011f5e:	68a2      	ldr	r2, [r4, #8]
 8011f60:	4432      	add	r2, r6
 8011f62:	60a2      	str	r2, [r4, #8]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d1b7      	bne.n	8011ed8 <read_submessage_format+0x54>
 8011f68:	e7b8      	b.n	8011edc <read_submessage_format+0x58>
 8011f6a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8011f6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f70:	1a52      	subs	r2, r2, r1
 8011f72:	a80c      	add	r0, sp, #48	; 0x30
 8011f74:	1aed      	subs	r5, r5, r3
 8011f76:	f7ff fc7f 	bl	8011878 <ucdr_init_buffer>
 8011f7a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011f7e:	a80c      	add	r0, sp, #48	; 0x30
 8011f80:	f7ff fc50 	bl	8011824 <ucdr_set_on_full_buffer_callback>
 8011f84:	4435      	add	r5, r6
 8011f86:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011f8a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011f8e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8011f92:	9002      	str	r0, [sp, #8]
 8011f94:	2207      	movs	r2, #7
 8011f96:	f88d 2016 	strb.w	r2, [sp, #22]
 8011f9a:	b2ad      	uxth	r5, r5
 8011f9c:	aa0c      	add	r2, sp, #48	; 0x30
 8011f9e:	9200      	str	r2, [sp, #0]
 8011fa0:	9501      	str	r5, [sp, #4]
 8011fa2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	9905      	ldr	r1, [sp, #20]
 8011faa:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 8011fae:	464a      	mov	r2, r9
 8011fb0:	4638      	mov	r0, r7
 8011fb2:	47a8      	blx	r5
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8011fba:	e7cf      	b.n	8011f5c <read_submessage_format+0xd8>
 8011fbc:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8011fc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011fc2:	1a52      	subs	r2, r2, r1
 8011fc4:	a80c      	add	r0, sp, #48	; 0x30
 8011fc6:	1aed      	subs	r5, r5, r3
 8011fc8:	f7ff fc56 	bl	8011878 <ucdr_init_buffer>
 8011fcc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011fd0:	a80c      	add	r0, sp, #48	; 0x30
 8011fd2:	f7ff fc27 	bl	8011824 <ucdr_set_on_full_buffer_callback>
 8011fd6:	4435      	add	r5, r6
 8011fd8:	2308      	movs	r3, #8
 8011fda:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8011fde:	f88d 3016 	strb.w	r3, [sp, #22]
 8011fe2:	b2ad      	uxth	r5, r5
 8011fe4:	ab0c      	add	r3, sp, #48	; 0x30
 8011fe6:	9300      	str	r3, [sp, #0]
 8011fe8:	9002      	str	r0, [sp, #8]
 8011fea:	9501      	str	r5, [sp, #4]
 8011fec:	ab06      	add	r3, sp, #24
 8011fee:	9905      	ldr	r1, [sp, #20]
 8011ff0:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 8011ff4:	464a      	mov	r2, r9
 8011ff6:	4638      	mov	r0, r7
 8011ff8:	47a8      	blx	r5
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8012000:	e79f      	b.n	8011f42 <read_submessage_format+0xbe>
 8012002:	bf00      	nop

08012004 <on_get_fragmentation_info>:
 8012004:	b500      	push	{lr}
 8012006:	b08b      	sub	sp, #44	; 0x2c
 8012008:	4601      	mov	r1, r0
 801200a:	2204      	movs	r2, #4
 801200c:	a802      	add	r0, sp, #8
 801200e:	f7ff fc33 	bl	8011878 <ucdr_init_buffer>
 8012012:	f10d 0305 	add.w	r3, sp, #5
 8012016:	a802      	add	r0, sp, #8
 8012018:	f10d 0206 	add.w	r2, sp, #6
 801201c:	a901      	add	r1, sp, #4
 801201e:	f001 f9eb 	bl	80133f8 <uxr_read_submessage_header>
 8012022:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012026:	2b0d      	cmp	r3, #13
 8012028:	d003      	beq.n	8012032 <on_get_fragmentation_info+0x2e>
 801202a:	2000      	movs	r0, #0
 801202c:	b00b      	add	sp, #44	; 0x2c
 801202e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012032:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012036:	f013 0f02 	tst.w	r3, #2
 801203a:	bf14      	ite	ne
 801203c:	2002      	movne	r0, #2
 801203e:	2001      	moveq	r0, #1
 8012040:	b00b      	add	sp, #44	; 0x2c
 8012042:	f85d fb04 	ldr.w	pc, [sp], #4
 8012046:	bf00      	nop

08012048 <read_submessage_get_info>:
 8012048:	b570      	push	{r4, r5, r6, lr}
 801204a:	2500      	movs	r5, #0
 801204c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8012050:	4604      	mov	r4, r0
 8012052:	f44f 7224 	mov.w	r2, #656	; 0x290
 8012056:	460e      	mov	r6, r1
 8012058:	a810      	add	r0, sp, #64	; 0x40
 801205a:	4629      	mov	r1, r5
 801205c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8012060:	f008 fa02 	bl	801a468 <memset>
 8012064:	a903      	add	r1, sp, #12
 8012066:	4630      	mov	r0, r6
 8012068:	f002 fa6e 	bl	8014548 <uxr_deserialize_GET_INFO_Payload>
 801206c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012070:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8012074:	4620      	mov	r0, r4
 8012076:	f001 f833 	bl	80130e0 <uxr_session_header_offset>
 801207a:	462b      	mov	r3, r5
 801207c:	9000      	str	r0, [sp, #0]
 801207e:	a905      	add	r1, sp, #20
 8012080:	a808      	add	r0, sp, #32
 8012082:	220c      	movs	r2, #12
 8012084:	f7ff fbe6 	bl	8011854 <ucdr_init_buffer_origin_offset>
 8012088:	a910      	add	r1, sp, #64	; 0x40
 801208a:	a808      	add	r0, sp, #32
 801208c:	f002 face 	bl	801462c <uxr_serialize_INFO_Payload>
 8012090:	9b08      	ldr	r3, [sp, #32]
 8012092:	462a      	mov	r2, r5
 8012094:	4629      	mov	r1, r5
 8012096:	4620      	mov	r0, r4
 8012098:	f000 ffca 	bl	8013030 <uxr_stamp_session_header>
 801209c:	a808      	add	r0, sp, #32
 801209e:	f7ff fc17 	bl	80118d0 <ucdr_buffer_length>
 80120a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80120a4:	4602      	mov	r2, r0
 80120a6:	a905      	add	r1, sp, #20
 80120a8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80120ac:	47a0      	blx	r4
 80120ae:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80120b2:	bd70      	pop	{r4, r5, r6, pc}

080120b4 <write_submessage_acknack.isra.0>:
 80120b4:	b570      	push	{r4, r5, r6, lr}
 80120b6:	b092      	sub	sp, #72	; 0x48
 80120b8:	4605      	mov	r5, r0
 80120ba:	460e      	mov	r6, r1
 80120bc:	4614      	mov	r4, r2
 80120be:	f001 f80f 	bl	80130e0 <uxr_session_header_offset>
 80120c2:	a905      	add	r1, sp, #20
 80120c4:	9000      	str	r0, [sp, #0]
 80120c6:	2300      	movs	r3, #0
 80120c8:	a80a      	add	r0, sp, #40	; 0x28
 80120ca:	2211      	movs	r2, #17
 80120cc:	f7ff fbc2 	bl	8011854 <ucdr_init_buffer_origin_offset>
 80120d0:	2218      	movs	r2, #24
 80120d2:	fb02 5404 	mla	r4, r2, r4, r5
 80120d6:	2300      	movs	r3, #0
 80120d8:	2205      	movs	r2, #5
 80120da:	3450      	adds	r4, #80	; 0x50
 80120dc:	a80a      	add	r0, sp, #40	; 0x28
 80120de:	210a      	movs	r1, #10
 80120e0:	f001 f970 	bl	80133c4 <uxr_buffer_submessage_header>
 80120e4:	a903      	add	r1, sp, #12
 80120e6:	4620      	mov	r0, r4
 80120e8:	f006 fa84 	bl	80185f4 <uxr_compute_acknack>
 80120ec:	a903      	add	r1, sp, #12
 80120ee:	ba43      	rev16	r3, r0
 80120f0:	a80a      	add	r0, sp, #40	; 0x28
 80120f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80120f6:	f88d 6010 	strb.w	r6, [sp, #16]
 80120fa:	f002 fb07 	bl	801470c <uxr_serialize_ACKNACK_Payload>
 80120fe:	2200      	movs	r2, #0
 8012100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012102:	4611      	mov	r1, r2
 8012104:	4628      	mov	r0, r5
 8012106:	f000 ff93 	bl	8013030 <uxr_stamp_session_header>
 801210a:	a80a      	add	r0, sp, #40	; 0x28
 801210c:	f7ff fbe0 	bl	80118d0 <ucdr_buffer_length>
 8012110:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8012112:	4602      	mov	r2, r0
 8012114:	a905      	add	r1, sp, #20
 8012116:	e9d3 0400 	ldrd	r0, r4, [r3]
 801211a:	47a0      	blx	r4
 801211c:	b012      	add	sp, #72	; 0x48
 801211e:	bd70      	pop	{r4, r5, r6, pc}

08012120 <uxr_init_session>:
 8012120:	b5d0      	push	{r4, r6, r7, lr}
 8012122:	2300      	movs	r3, #0
 8012124:	2600      	movs	r6, #0
 8012126:	2700      	movs	r7, #0
 8012128:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 801212c:	4604      	mov	r4, r0
 801212e:	6701      	str	r1, [r0, #112]	; 0x70
 8012130:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 8012134:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8012138:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 801213c:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8012140:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8012144:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8012148:	2181      	movs	r1, #129	; 0x81
 801214a:	f000 fedb 	bl	8012f04 <uxr_init_session_info>
 801214e:	f104 0008 	add.w	r0, r4, #8
 8012152:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8012156:	f001 b851 	b.w	80131fc <uxr_init_stream_storage>
 801215a:	bf00      	nop

0801215c <uxr_set_status_callback>:
 801215c:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8012160:	4770      	bx	lr
 8012162:	bf00      	nop

08012164 <uxr_set_topic_callback>:
 8012164:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8012168:	4770      	bx	lr
 801216a:	bf00      	nop

0801216c <uxr_set_request_callback>:
 801216c:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop

08012174 <uxr_set_reply_callback>:
 8012174:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8012178:	4770      	bx	lr
 801217a:	bf00      	nop

0801217c <uxr_create_output_best_effort_stream>:
 801217c:	b510      	push	{r4, lr}
 801217e:	b084      	sub	sp, #16
 8012180:	e9cd 2100 	strd	r2, r1, [sp]
 8012184:	4604      	mov	r4, r0
 8012186:	f000 ffab 	bl	80130e0 <uxr_session_header_offset>
 801218a:	e9dd 2100 	ldrd	r2, r1, [sp]
 801218e:	4603      	mov	r3, r0
 8012190:	f104 0008 	add.w	r0, r4, #8
 8012194:	b004      	add	sp, #16
 8012196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801219a:	f001 b879 	b.w	8013290 <uxr_add_output_best_effort_buffer>
 801219e:	bf00      	nop

080121a0 <uxr_create_output_reliable_stream>:
 80121a0:	b530      	push	{r4, r5, lr}
 80121a2:	b089      	sub	sp, #36	; 0x24
 80121a4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80121a8:	9303      	str	r3, [sp, #12]
 80121aa:	4604      	mov	r4, r0
 80121ac:	f000 ff98 	bl	80130e0 <uxr_session_header_offset>
 80121b0:	4605      	mov	r5, r0
 80121b2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80121b6:	9905      	ldr	r1, [sp, #20]
 80121b8:	9500      	str	r5, [sp, #0]
 80121ba:	f104 0008 	add.w	r0, r4, #8
 80121be:	f001 f879 	bl	80132b4 <uxr_add_output_reliable_buffer>
 80121c2:	2200      	movs	r2, #0
 80121c4:	b2c3      	uxtb	r3, r0
 80121c6:	f363 0207 	bfi	r2, r3, #0, #8
 80121ca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80121ce:	f363 220f 	bfi	r2, r3, #8, #8
 80121d2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80121d6:	f363 4217 	bfi	r2, r3, #16, #8
 80121da:	0e03      	lsrs	r3, r0, #24
 80121dc:	f363 621f 	bfi	r2, r3, #24, #8
 80121e0:	4610      	mov	r0, r2
 80121e2:	b009      	add	sp, #36	; 0x24
 80121e4:	bd30      	pop	{r4, r5, pc}
 80121e6:	bf00      	nop

080121e8 <uxr_create_input_best_effort_stream>:
 80121e8:	b082      	sub	sp, #8
 80121ea:	3008      	adds	r0, #8
 80121ec:	b002      	add	sp, #8
 80121ee:	f001 b87b 	b.w	80132e8 <uxr_add_input_best_effort_buffer>
 80121f2:	bf00      	nop

080121f4 <uxr_create_input_reliable_stream>:
 80121f4:	b510      	push	{r4, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	4c0b      	ldr	r4, [pc, #44]	; (8012228 <uxr_create_input_reliable_stream+0x34>)
 80121fa:	9400      	str	r4, [sp, #0]
 80121fc:	3008      	adds	r0, #8
 80121fe:	f001 f889 	bl	8013314 <uxr_add_input_reliable_buffer>
 8012202:	2200      	movs	r2, #0
 8012204:	b2c3      	uxtb	r3, r0
 8012206:	f363 0207 	bfi	r2, r3, #0, #8
 801220a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801220e:	f363 220f 	bfi	r2, r3, #8, #8
 8012212:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012216:	f363 4217 	bfi	r2, r3, #16, #8
 801221a:	0e03      	lsrs	r3, r0, #24
 801221c:	f363 621f 	bfi	r2, r3, #24, #8
 8012220:	4610      	mov	r0, r2
 8012222:	b004      	add	sp, #16
 8012224:	bd10      	pop	{r4, pc}
 8012226:	bf00      	nop
 8012228:	08012005 	.word	0x08012005

0801222c <uxr_epoch_nanos>:
 801222c:	b510      	push	{r4, lr}
 801222e:	4604      	mov	r4, r0
 8012230:	f001 f92a 	bl	8013488 <uxr_nanos>
 8012234:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8012238:	1ac0      	subs	r0, r0, r3
 801223a:	eb61 0102 	sbc.w	r1, r1, r2
 801223e:	bd10      	pop	{r4, pc}

08012240 <uxr_flash_output_streams>:
 8012240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012244:	7e03      	ldrb	r3, [r0, #24]
 8012246:	b084      	sub	sp, #16
 8012248:	4604      	mov	r4, r0
 801224a:	b1fb      	cbz	r3, 801228c <uxr_flash_output_streams+0x4c>
 801224c:	f04f 0900 	mov.w	r9, #0
 8012250:	4648      	mov	r0, r9
 8012252:	f10d 0802 	add.w	r8, sp, #2
 8012256:	af03      	add	r7, sp, #12
 8012258:	ae02      	add	r6, sp, #8
 801225a:	2201      	movs	r2, #1
 801225c:	4611      	mov	r1, r2
 801225e:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012262:	f000 ff75 	bl	8013150 <uxr_stream_id>
 8012266:	3508      	adds	r5, #8
 8012268:	4684      	mov	ip, r0
 801226a:	4643      	mov	r3, r8
 801226c:	4628      	mov	r0, r5
 801226e:	463a      	mov	r2, r7
 8012270:	4631      	mov	r1, r6
 8012272:	f8cd c004 	str.w	ip, [sp, #4]
 8012276:	f006 fa45 	bl	8018704 <uxr_prepare_best_effort_buffer_to_send>
 801227a:	2800      	cmp	r0, #0
 801227c:	d13d      	bne.n	80122fa <uxr_flash_output_streams+0xba>
 801227e:	7e23      	ldrb	r3, [r4, #24]
 8012280:	f109 0901 	add.w	r9, r9, #1
 8012284:	fa5f f089 	uxtb.w	r0, r9
 8012288:	4283      	cmp	r3, r0
 801228a:	d8e6      	bhi.n	801225a <uxr_flash_output_streams+0x1a>
 801228c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012290:	b383      	cbz	r3, 80122f4 <uxr_flash_output_streams+0xb4>
 8012292:	f04f 0900 	mov.w	r9, #0
 8012296:	4648      	mov	r0, r9
 8012298:	f10d 0802 	add.w	r8, sp, #2
 801229c:	af03      	add	r7, sp, #12
 801229e:	ae02      	add	r6, sp, #8
 80122a0:	2201      	movs	r2, #1
 80122a2:	2102      	movs	r1, #2
 80122a4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80122a8:	f000 ff52 	bl	8013150 <uxr_stream_id>
 80122ac:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80122b0:	3520      	adds	r5, #32
 80122b2:	9001      	str	r0, [sp, #4]
 80122b4:	e00c      	b.n	80122d0 <uxr_flash_output_streams+0x90>
 80122b6:	9b02      	ldr	r3, [sp, #8]
 80122b8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80122bc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80122c0:	f000 feb6 	bl	8013030 <uxr_stamp_session_header>
 80122c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80122c6:	9a03      	ldr	r2, [sp, #12]
 80122c8:	9902      	ldr	r1, [sp, #8]
 80122ca:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80122ce:	47d0      	blx	sl
 80122d0:	4643      	mov	r3, r8
 80122d2:	463a      	mov	r2, r7
 80122d4:	4631      	mov	r1, r6
 80122d6:	4628      	mov	r0, r5
 80122d8:	f006 fc1c 	bl	8018b14 <uxr_prepare_next_reliable_buffer_to_send>
 80122dc:	4603      	mov	r3, r0
 80122de:	4620      	mov	r0, r4
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d1e8      	bne.n	80122b6 <uxr_flash_output_streams+0x76>
 80122e4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80122e8:	f109 0901 	add.w	r9, r9, #1
 80122ec:	fa5f f089 	uxtb.w	r0, r9
 80122f0:	4283      	cmp	r3, r0
 80122f2:	d8d5      	bhi.n	80122a0 <uxr_flash_output_streams+0x60>
 80122f4:	b004      	add	sp, #16
 80122f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122fa:	9b02      	ldr	r3, [sp, #8]
 80122fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012300:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012304:	4620      	mov	r0, r4
 8012306:	f000 fe93 	bl	8013030 <uxr_stamp_session_header>
 801230a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801230c:	9a03      	ldr	r2, [sp, #12]
 801230e:	9902      	ldr	r1, [sp, #8]
 8012310:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012314:	47a8      	blx	r5
 8012316:	f109 0901 	add.w	r9, r9, #1
 801231a:	7e23      	ldrb	r3, [r4, #24]
 801231c:	fa5f f089 	uxtb.w	r0, r9
 8012320:	4283      	cmp	r3, r0
 8012322:	d89a      	bhi.n	801225a <uxr_flash_output_streams+0x1a>
 8012324:	e7b2      	b.n	801228c <uxr_flash_output_streams+0x4c>
 8012326:	bf00      	nop

08012328 <read_submessage_info>:
 8012328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801232c:	460d      	mov	r5, r1
 801232e:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8012332:	4669      	mov	r1, sp
 8012334:	4607      	mov	r7, r0
 8012336:	4628      	mov	r0, r5
 8012338:	f002 f80c 	bl	8014354 <uxr_deserialize_BaseObjectReply>
 801233c:	a902      	add	r1, sp, #8
 801233e:	4604      	mov	r4, r0
 8012340:	4628      	mov	r0, r5
 8012342:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8012346:	f7fe fad3 	bl	80108f0 <ucdr_deserialize_bool>
 801234a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801234e:	4004      	ands	r4, r0
 8012350:	b2e4      	uxtb	r4, r4
 8012352:	b95b      	cbnz	r3, 801236c <read_submessage_info+0x44>
 8012354:	a987      	add	r1, sp, #540	; 0x21c
 8012356:	4628      	mov	r0, r5
 8012358:	f7fe faca 	bl	80108f0 <ucdr_deserialize_bool>
 801235c:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8012360:	4606      	mov	r6, r0
 8012362:	b94b      	cbnz	r3, 8012378 <read_submessage_info+0x50>
 8012364:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8012368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801236c:	a903      	add	r1, sp, #12
 801236e:	4628      	mov	r0, r5
 8012370:	f001 fe7e 	bl	8014070 <uxr_deserialize_ObjectVariant>
 8012374:	4004      	ands	r4, r0
 8012376:	e7ed      	b.n	8012354 <read_submessage_info+0x2c>
 8012378:	a988      	add	r1, sp, #544	; 0x220
 801237a:	4628      	mov	r0, r5
 801237c:	f7fe fae8 	bl	8010950 <ucdr_deserialize_uint8_t>
 8012380:	4234      	tst	r4, r6
 8012382:	d0ef      	beq.n	8012364 <read_submessage_info+0x3c>
 8012384:	2800      	cmp	r0, #0
 8012386:	d0ed      	beq.n	8012364 <read_submessage_info+0x3c>
 8012388:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 801238c:	2b0d      	cmp	r3, #13
 801238e:	d1e9      	bne.n	8012364 <read_submessage_info+0x3c>
 8012390:	4628      	mov	r0, r5
 8012392:	a98a      	add	r1, sp, #552	; 0x228
 8012394:	f7ff f882 	bl	801149c <ucdr_deserialize_int16_t>
 8012398:	b140      	cbz	r0, 80123ac <read_submessage_info+0x84>
 801239a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801239e:	2b00      	cmp	r3, #0
 80123a0:	dd07      	ble.n	80123b2 <read_submessage_info+0x8a>
 80123a2:	f1b8 0f00 	cmp.w	r8, #0
 80123a6:	bf14      	ite	ne
 80123a8:	2001      	movne	r0, #1
 80123aa:	2002      	moveq	r0, #2
 80123ac:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 80123b0:	e7d8      	b.n	8012364 <read_submessage_info+0x3c>
 80123b2:	2000      	movs	r0, #0
 80123b4:	e7fa      	b.n	80123ac <read_submessage_info+0x84>
 80123b6:	bf00      	nop

080123b8 <read_submessage_list>:
 80123b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123bc:	b098      	sub	sp, #96	; 0x60
 80123be:	f8df 9304 	ldr.w	r9, [pc, #772]	; 80126c4 <read_submessage_list+0x30c>
 80123c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80123c4:	4604      	mov	r4, r0
 80123c6:	4688      	mov	r8, r1
 80123c8:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 80123cc:	aa0e      	add	r2, sp, #56	; 0x38
 80123ce:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80123d2:	4640      	mov	r0, r8
 80123d4:	f001 f810 	bl	80133f8 <uxr_read_submessage_header>
 80123d8:	2800      	cmp	r0, #0
 80123da:	f000 813d 	beq.w	8012658 <read_submessage_list+0x2a0>
 80123de:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80123e2:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 80123e6:	3b02      	subs	r3, #2
 80123e8:	2b0d      	cmp	r3, #13
 80123ea:	d8ed      	bhi.n	80123c8 <read_submessage_list+0x10>
 80123ec:	a101      	add	r1, pc, #4	; (adr r1, 80123f4 <read_submessage_list+0x3c>)
 80123ee:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80123f2:	bf00      	nop
 80123f4:	0801264f 	.word	0x0801264f
 80123f8:	080123c9 	.word	0x080123c9
 80123fc:	0801263f 	.word	0x0801263f
 8012400:	080125e3 	.word	0x080125e3
 8012404:	080125d9 	.word	0x080125d9
 8012408:	080123c9 	.word	0x080123c9
 801240c:	080123c9 	.word	0x080123c9
 8012410:	0801253b 	.word	0x0801253b
 8012414:	080124cd 	.word	0x080124cd
 8012418:	0801248b 	.word	0x0801248b
 801241c:	080123c9 	.word	0x080123c9
 8012420:	080123c9 	.word	0x080123c9
 8012424:	080123c9 	.word	0x080123c9
 8012428:	0801242d 	.word	0x0801242d
 801242c:	a912      	add	r1, sp, #72	; 0x48
 801242e:	4640      	mov	r0, r8
 8012430:	f002 f9bc 	bl	80147ac <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012434:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8012438:	2d00      	cmp	r5, #0
 801243a:	f000 8115 	beq.w	8012668 <read_submessage_list+0x2b0>
 801243e:	f001 f823 	bl	8013488 <uxr_nanos>
 8012442:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012444:	460b      	mov	r3, r1
 8012446:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012448:	2700      	movs	r7, #0
 801244a:	fbc9 6701 	smlal	r6, r7, r9, r1
 801244e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012452:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012454:	4602      	mov	r2, r0
 8012456:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012458:	460e      	mov	r6, r1
 801245a:	2700      	movs	r7, #0
 801245c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8012460:	9106      	str	r1, [sp, #24]
 8012462:	fbc9 6700 	smlal	r6, r7, r9, r0
 8012466:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012468:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801246c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801246e:	2700      	movs	r7, #0
 8012470:	4608      	mov	r0, r1
 8012472:	4639      	mov	r1, r7
 8012474:	fbc9 0106 	smlal	r0, r1, r9, r6
 8012478:	e9cd 0100 	strd	r0, r1, [sp]
 801247c:	4620      	mov	r0, r4
 801247e:	47a8      	blx	r5
 8012480:	f04f 0301 	mov.w	r3, #1
 8012484:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8012488:	e79e      	b.n	80123c8 <read_submessage_list+0x10>
 801248a:	a912      	add	r1, sp, #72	; 0x48
 801248c:	4640      	mov	r0, r8
 801248e:	f002 f97b 	bl	8014788 <uxr_deserialize_HEARTBEAT_Payload>
 8012492:	2100      	movs	r1, #0
 8012494:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8012498:	f000 fe84 	bl	80131a4 <uxr_stream_id_from_raw>
 801249c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80124a0:	4603      	mov	r3, r0
 80124a2:	4629      	mov	r1, r5
 80124a4:	f104 0008 	add.w	r0, r4, #8
 80124a8:	9311      	str	r3, [sp, #68]	; 0x44
 80124aa:	f000 ff69 	bl	8013380 <uxr_get_input_reliable_stream>
 80124ae:	2800      	cmp	r0, #0
 80124b0:	d08a      	beq.n	80123c8 <read_submessage_list+0x10>
 80124b2:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 80124b6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 80124ba:	f006 f88f 	bl	80185dc <uxr_process_heartbeat>
 80124be:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 80124c2:	462a      	mov	r2, r5
 80124c4:	4620      	mov	r0, r4
 80124c6:	f7ff fdf5 	bl	80120b4 <write_submessage_acknack.isra.0>
 80124ca:	e77d      	b.n	80123c8 <read_submessage_list+0x10>
 80124cc:	a912      	add	r1, sp, #72	; 0x48
 80124ce:	4640      	mov	r0, r8
 80124d0:	f002 f932 	bl	8014738 <uxr_deserialize_ACKNACK_Payload>
 80124d4:	2100      	movs	r1, #0
 80124d6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80124da:	f000 fe63 	bl	80131a4 <uxr_stream_id_from_raw>
 80124de:	4603      	mov	r3, r0
 80124e0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80124e4:	f104 0008 	add.w	r0, r4, #8
 80124e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80124ea:	f000 ff33 	bl	8013354 <uxr_get_output_reliable_stream>
 80124ee:	4605      	mov	r5, r0
 80124f0:	2800      	cmp	r0, #0
 80124f2:	f43f af69 	beq.w	80123c8 <read_submessage_list+0x10>
 80124f6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80124fa:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 80124fe:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8012502:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012506:	b289      	uxth	r1, r1
 8012508:	f006 fbac 	bl	8018c64 <uxr_process_acknack>
 801250c:	4628      	mov	r0, r5
 801250e:	f006 fb6f 	bl	8018bf0 <uxr_begin_output_nack_buffer_it>
 8012512:	af10      	add	r7, sp, #64	; 0x40
 8012514:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8012518:	e005      	b.n	8012526 <read_submessage_list+0x16e>
 801251a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801251c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801251e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012520:	e9d3 0600 	ldrd	r0, r6, [r3]
 8012524:	47b0      	blx	r6
 8012526:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 801252a:	aa11      	add	r2, sp, #68	; 0x44
 801252c:	4639      	mov	r1, r7
 801252e:	4628      	mov	r0, r5
 8012530:	f006 fb60 	bl	8018bf4 <uxr_next_reliable_nack_buffer_to_send>
 8012534:	2800      	cmp	r0, #0
 8012536:	d1f0      	bne.n	801251a <read_submessage_list+0x162>
 8012538:	e746      	b.n	80123c8 <read_submessage_list+0x10>
 801253a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801253e:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8012542:	af10      	add	r7, sp, #64	; 0x40
 8012544:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8012548:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 801254c:	4639      	mov	r1, r7
 801254e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8012552:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 8012556:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801255a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 801255e:	4640      	mov	r0, r8
 8012560:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8012564:	f001 fe32 	bl	80141cc <uxr_deserialize_BaseObjectRequest>
 8012568:	4638      	mov	r0, r7
 801256a:	a911      	add	r1, sp, #68	; 0x44
 801256c:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8012570:	f000 fddc 	bl	801312c <uxr_parse_base_object_request>
 8012574:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8012578:	9911      	ldr	r1, [sp, #68]	; 0x44
 801257a:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 801257e:	9112      	str	r1, [sp, #72]	; 0x48
 8012580:	3d04      	subs	r5, #4
 8012582:	f006 060e 	and.w	r6, r6, #14
 8012586:	b2ad      	uxth	r5, r5
 8012588:	f1ba 0f00 	cmp.w	sl, #0
 801258c:	d006      	beq.n	801259c <read_submessage_list+0x1e4>
 801258e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012592:	9300      	str	r3, [sp, #0]
 8012594:	463a      	mov	r2, r7
 8012596:	2300      	movs	r3, #0
 8012598:	4620      	mov	r0, r4
 801259a:	47d0      	blx	sl
 801259c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801259e:	b168      	cbz	r0, 80125bc <read_submessage_list+0x204>
 80125a0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80125a2:	2300      	movs	r3, #0
 80125a4:	3902      	subs	r1, #2
 80125a6:	e002      	b.n	80125ae <read_submessage_list+0x1f6>
 80125a8:	3301      	adds	r3, #1
 80125aa:	4283      	cmp	r3, r0
 80125ac:	d006      	beq.n	80125bc <read_submessage_list+0x204>
 80125ae:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 80125b2:	42ba      	cmp	r2, r7
 80125b4:	d1f8      	bne.n	80125a8 <read_submessage_list+0x1f0>
 80125b6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80125b8:	2100      	movs	r1, #0
 80125ba:	54d1      	strb	r1, [r2, r3]
 80125bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80125be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80125c0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80125c4:	9302      	str	r3, [sp, #8]
 80125c6:	e9cd 1000 	strd	r1, r0, [sp]
 80125ca:	4633      	mov	r3, r6
 80125cc:	462a      	mov	r2, r5
 80125ce:	4641      	mov	r1, r8
 80125d0:	4620      	mov	r0, r4
 80125d2:	f7ff fc57 	bl	8011e84 <read_submessage_format>
 80125d6:	e6f7      	b.n	80123c8 <read_submessage_list+0x10>
 80125d8:	4641      	mov	r1, r8
 80125da:	4620      	mov	r0, r4
 80125dc:	f7ff fea4 	bl	8012328 <read_submessage_info>
 80125e0:	e6f2      	b.n	80123c8 <read_submessage_list+0x10>
 80125e2:	2a00      	cmp	r2, #0
 80125e4:	d03b      	beq.n	801265e <read_submessage_list+0x2a6>
 80125e6:	a912      	add	r1, sp, #72	; 0x48
 80125e8:	4640      	mov	r0, r8
 80125ea:	f002 f801 	bl	80145f0 <uxr_deserialize_STATUS_Payload>
 80125ee:	a910      	add	r1, sp, #64	; 0x40
 80125f0:	aa0f      	add	r2, sp, #60	; 0x3c
 80125f2:	a812      	add	r0, sp, #72	; 0x48
 80125f4:	f000 fd9a 	bl	801312c <uxr_parse_base_object_request>
 80125f8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80125fc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80125fe:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8012602:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8012606:	9111      	str	r1, [sp, #68]	; 0x44
 8012608:	b135      	cbz	r5, 8012618 <read_submessage_list+0x260>
 801260a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801260e:	9300      	str	r3, [sp, #0]
 8012610:	4632      	mov	r2, r6
 8012612:	463b      	mov	r3, r7
 8012614:	4620      	mov	r0, r4
 8012616:	47a8      	blx	r5
 8012618:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801261a:	2b00      	cmp	r3, #0
 801261c:	f43f aed4 	beq.w	80123c8 <read_submessage_list+0x10>
 8012620:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8012622:	2100      	movs	r1, #0
 8012624:	3802      	subs	r0, #2
 8012626:	e003      	b.n	8012630 <read_submessage_list+0x278>
 8012628:	3101      	adds	r1, #1
 801262a:	4299      	cmp	r1, r3
 801262c:	f43f aecc 	beq.w	80123c8 <read_submessage_list+0x10>
 8012630:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8012634:	42b2      	cmp	r2, r6
 8012636:	d1f7      	bne.n	8012628 <read_submessage_list+0x270>
 8012638:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801263a:	545f      	strb	r7, [r3, r1]
 801263c:	e6c4      	b.n	80123c8 <read_submessage_list+0x10>
 801263e:	2a00      	cmp	r2, #0
 8012640:	f47f aec2 	bne.w	80123c8 <read_submessage_list+0x10>
 8012644:	4641      	mov	r1, r8
 8012646:	4620      	mov	r0, r4
 8012648:	f000 fcb4 	bl	8012fb4 <uxr_read_create_session_status>
 801264c:	e6bc      	b.n	80123c8 <read_submessage_list+0x10>
 801264e:	4641      	mov	r1, r8
 8012650:	4620      	mov	r0, r4
 8012652:	f7ff fcf9 	bl	8012048 <read_submessage_get_info>
 8012656:	e6b7      	b.n	80123c8 <read_submessage_list+0x10>
 8012658:	b018      	add	sp, #96	; 0x60
 801265a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801265e:	4641      	mov	r1, r8
 8012660:	4620      	mov	r0, r4
 8012662:	f000 fcb3 	bl	8012fcc <uxr_read_delete_session_status>
 8012666:	e6af      	b.n	80123c8 <read_submessage_list+0x10>
 8012668:	f000 ff0e 	bl	8013488 <uxr_nanos>
 801266c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801266e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012670:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012672:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012674:	2700      	movs	r7, #0
 8012676:	fbc9 6703 	smlal	r6, r7, r9, r3
 801267a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801267c:	eb16 0c00 	adds.w	ip, r6, r0
 8012680:	4618      	mov	r0, r3
 8012682:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012684:	eb47 0e01 	adc.w	lr, r7, r1
 8012688:	461e      	mov	r6, r3
 801268a:	2100      	movs	r1, #0
 801268c:	2700      	movs	r7, #0
 801268e:	fbc9 0105 	smlal	r0, r1, r9, r5
 8012692:	fbc9 6702 	smlal	r6, r7, r9, r2
 8012696:	1983      	adds	r3, r0, r6
 8012698:	eb41 0207 	adc.w	r2, r1, r7
 801269c:	ebbc 0303 	subs.w	r3, ip, r3
 80126a0:	9308      	str	r3, [sp, #32]
 80126a2:	eb6e 0302 	sbc.w	r3, lr, r2
 80126a6:	9309      	str	r3, [sp, #36]	; 0x24
 80126a8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80126ac:	0fd3      	lsrs	r3, r2, #31
 80126ae:	18c9      	adds	r1, r1, r3
 80126b0:	f142 0200 	adc.w	r2, r2, #0
 80126b4:	084b      	lsrs	r3, r1, #1
 80126b6:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80126ba:	1052      	asrs	r2, r2, #1
 80126bc:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 80126c0:	e6de      	b.n	8012480 <read_submessage_list+0xc8>
 80126c2:	bf00      	nop
 80126c4:	3b9aca00 	.word	0x3b9aca00

080126c8 <listen_message_reliably>:
 80126c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126cc:	1e0b      	subs	r3, r1, #0
 80126ce:	b09d      	sub	sp, #116	; 0x74
 80126d0:	bfb8      	it	lt
 80126d2:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80126d6:	9305      	str	r3, [sp, #20]
 80126d8:	4607      	mov	r7, r0
 80126da:	f000 feb9 	bl	8013450 <uxr_millis>
 80126de:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80126e2:	4681      	mov	r9, r0
 80126e4:	2a00      	cmp	r2, #0
 80126e6:	f000 8095 	beq.w	8012814 <listen_message_reliably+0x14c>
 80126ea:	2600      	movs	r6, #0
 80126ec:	f04f 33ff 	mov.w	r3, #4294967295
 80126f0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80126f4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80126f8:	4630      	mov	r0, r6
 80126fa:	4688      	mov	r8, r1
 80126fc:	46ca      	mov	sl, r9
 80126fe:	e00f      	b.n	8012720 <listen_message_reliably+0x58>
 8012700:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012704:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012708:	42a2      	cmp	r2, r4
 801270a:	eb73 0105 	sbcs.w	r1, r3, r5
 801270e:	bfb8      	it	lt
 8012710:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 8012714:	3601      	adds	r6, #1
 8012716:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801271a:	b2f0      	uxtb	r0, r6
 801271c:	4283      	cmp	r3, r0
 801271e:	d951      	bls.n	80127c4 <listen_message_reliably+0xfc>
 8012720:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012724:	2201      	movs	r2, #1
 8012726:	2102      	movs	r1, #2
 8012728:	f000 fd12 	bl	8013150 <uxr_stream_id>
 801272c:	00e4      	lsls	r4, r4, #3
 801272e:	f104 0520 	add.w	r5, r4, #32
 8012732:	443d      	add	r5, r7
 8012734:	4601      	mov	r1, r0
 8012736:	4643      	mov	r3, r8
 8012738:	4652      	mov	r2, sl
 801273a:	4628      	mov	r0, r5
 801273c:	9109      	str	r1, [sp, #36]	; 0x24
 801273e:	f006 fa2b 	bl	8018b98 <uxr_update_output_stream_heartbeat_timestamp>
 8012742:	193b      	adds	r3, r7, r4
 8012744:	2800      	cmp	r0, #0
 8012746:	d0db      	beq.n	8012700 <listen_message_reliably+0x38>
 8012748:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 801274c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8012750:	4638      	mov	r0, r7
 8012752:	f000 fcc5 	bl	80130e0 <uxr_session_header_offset>
 8012756:	3501      	adds	r5, #1
 8012758:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 801275c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8012760:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8012764:	9000      	str	r0, [sp, #0]
 8012766:	2300      	movs	r3, #0
 8012768:	4658      	mov	r0, fp
 801276a:	2211      	movs	r2, #17
 801276c:	a90c      	add	r1, sp, #48	; 0x30
 801276e:	f7ff f871 	bl	8011854 <ucdr_init_buffer_origin_offset>
 8012772:	2300      	movs	r3, #0
 8012774:	2205      	movs	r2, #5
 8012776:	210b      	movs	r1, #11
 8012778:	4658      	mov	r0, fp
 801277a:	f000 fe23 	bl	80133c4 <uxr_buffer_submessage_header>
 801277e:	8968      	ldrh	r0, [r5, #10]
 8012780:	2101      	movs	r1, #1
 8012782:	f006 fac7 	bl	8018d14 <uxr_seq_num_add>
 8012786:	892a      	ldrh	r2, [r5, #8]
 8012788:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801278c:	4603      	mov	r3, r0
 801278e:	a90a      	add	r1, sp, #40	; 0x28
 8012790:	4658      	mov	r0, fp
 8012792:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8012796:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 801279a:	f001 ffe1 	bl	8014760 <uxr_serialize_HEARTBEAT_Payload>
 801279e:	2200      	movs	r2, #0
 80127a0:	4611      	mov	r1, r2
 80127a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80127a4:	4638      	mov	r0, r7
 80127a6:	f000 fc43 	bl	8013030 <uxr_stamp_session_header>
 80127aa:	4658      	mov	r0, fp
 80127ac:	f7ff f890 	bl	80118d0 <ucdr_buffer_length>
 80127b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80127b2:	4602      	mov	r2, r0
 80127b4:	a90c      	add	r1, sp, #48	; 0x30
 80127b6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80127ba:	443c      	add	r4, r7
 80127bc:	47a8      	blx	r5
 80127be:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80127c2:	e79f      	b.n	8012704 <listen_message_reliably+0x3c>
 80127c4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80127c8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80127cc:	f04f 31ff 	mov.w	r1, #4294967295
 80127d0:	4294      	cmp	r4, r2
 80127d2:	bf08      	it	eq
 80127d4:	428b      	cmpeq	r3, r1
 80127d6:	d01d      	beq.n	8012814 <listen_message_reliably+0x14c>
 80127d8:	eba3 030a 	sub.w	r3, r3, sl
 80127dc:	9905      	ldr	r1, [sp, #20]
 80127de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	bf08      	it	eq
 80127e4:	2301      	moveq	r3, #1
 80127e6:	4299      	cmp	r1, r3
 80127e8:	bfa8      	it	ge
 80127ea:	4619      	movge	r1, r3
 80127ec:	6894      	ldr	r4, [r2, #8]
 80127ee:	6810      	ldr	r0, [r2, #0]
 80127f0:	4689      	mov	r9, r1
 80127f2:	460b      	mov	r3, r1
 80127f4:	aa08      	add	r2, sp, #32
 80127f6:	a907      	add	r1, sp, #28
 80127f8:	47a0      	blx	r4
 80127fa:	b968      	cbnz	r0, 8012818 <listen_message_reliably+0x150>
 80127fc:	9b05      	ldr	r3, [sp, #20]
 80127fe:	eba3 0309 	sub.w	r3, r3, r9
 8012802:	2b00      	cmp	r3, #0
 8012804:	9305      	str	r3, [sp, #20]
 8012806:	f73f af68 	bgt.w	80126da <listen_message_reliably+0x12>
 801280a:	4604      	mov	r4, r0
 801280c:	4620      	mov	r0, r4
 801280e:	b01d      	add	sp, #116	; 0x74
 8012810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012814:	9b05      	ldr	r3, [sp, #20]
 8012816:	e7e1      	b.n	80127dc <listen_message_reliably+0x114>
 8012818:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801281c:	4604      	mov	r4, r0
 801281e:	a80c      	add	r0, sp, #48	; 0x30
 8012820:	f7ff f82a 	bl	8011878 <ucdr_init_buffer>
 8012824:	2500      	movs	r5, #0
 8012826:	a90c      	add	r1, sp, #48	; 0x30
 8012828:	f10d 031a 	add.w	r3, sp, #26
 801282c:	aa06      	add	r2, sp, #24
 801282e:	4638      	mov	r0, r7
 8012830:	f88d 5018 	strb.w	r5, [sp, #24]
 8012834:	f000 fc12 	bl	801305c <uxr_read_session_header>
 8012838:	b918      	cbnz	r0, 8012842 <listen_message_reliably+0x17a>
 801283a:	4620      	mov	r0, r4
 801283c:	b01d      	add	sp, #116	; 0x74
 801283e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012842:	4629      	mov	r1, r5
 8012844:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012848:	f000 fcac 	bl	80131a4 <uxr_stream_id_from_raw>
 801284c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012850:	2e01      	cmp	r6, #1
 8012852:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8012856:	900a      	str	r0, [sp, #40]	; 0x28
 8012858:	fa5f fa80 	uxtb.w	sl, r0
 801285c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8012860:	d04b      	beq.n	80128fa <listen_message_reliably+0x232>
 8012862:	2e02      	cmp	r6, #2
 8012864:	d00f      	beq.n	8012886 <listen_message_reliably+0x1be>
 8012866:	2e00      	cmp	r6, #0
 8012868:	d1e7      	bne.n	801283a <listen_message_reliably+0x172>
 801286a:	4631      	mov	r1, r6
 801286c:	4630      	mov	r0, r6
 801286e:	f000 fc99 	bl	80131a4 <uxr_stream_id_from_raw>
 8012872:	a90c      	add	r1, sp, #48	; 0x30
 8012874:	4602      	mov	r2, r0
 8012876:	4638      	mov	r0, r7
 8012878:	920a      	str	r2, [sp, #40]	; 0x28
 801287a:	f7ff fd9d 	bl	80123b8 <read_submessage_list>
 801287e:	4620      	mov	r0, r4
 8012880:	b01d      	add	sp, #116	; 0x74
 8012882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012886:	4629      	mov	r1, r5
 8012888:	f107 0008 	add.w	r0, r7, #8
 801288c:	f000 fd78 	bl	8013380 <uxr_get_input_reliable_stream>
 8012890:	4680      	mov	r8, r0
 8012892:	b348      	cbz	r0, 80128e8 <listen_message_reliably+0x220>
 8012894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012896:	9202      	str	r2, [sp, #8]
 8012898:	a80c      	add	r0, sp, #48	; 0x30
 801289a:	f7ff f81d 	bl	80118d8 <ucdr_buffer_remaining>
 801289e:	4603      	mov	r3, r0
 80128a0:	f10d 0019 	add.w	r0, sp, #25
 80128a4:	9000      	str	r0, [sp, #0]
 80128a6:	9a02      	ldr	r2, [sp, #8]
 80128a8:	4649      	mov	r1, r9
 80128aa:	4640      	mov	r0, r8
 80128ac:	f005 fd98 	bl	80183e0 <uxr_receive_reliable_message>
 80128b0:	b1d0      	cbz	r0, 80128e8 <listen_message_reliably+0x220>
 80128b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d037      	beq.n	801292a <listen_message_reliably+0x262>
 80128ba:	ae14      	add	r6, sp, #80	; 0x50
 80128bc:	f04f 0902 	mov.w	r9, #2
 80128c0:	e008      	b.n	80128d4 <listen_message_reliably+0x20c>
 80128c2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80128c6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80128ca:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80128ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128d0:	f7ff fd72 	bl	80123b8 <read_submessage_list>
 80128d4:	4631      	mov	r1, r6
 80128d6:	2204      	movs	r2, #4
 80128d8:	4640      	mov	r0, r8
 80128da:	f005 fe01 	bl	80184e0 <uxr_next_input_reliable_buffer_available>
 80128de:	4603      	mov	r3, r0
 80128e0:	4631      	mov	r1, r6
 80128e2:	4638      	mov	r0, r7
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d1ec      	bne.n	80128c2 <listen_message_reliably+0x1fa>
 80128e8:	4638      	mov	r0, r7
 80128ea:	462a      	mov	r2, r5
 80128ec:	4651      	mov	r1, sl
 80128ee:	f7ff fbe1 	bl	80120b4 <write_submessage_acknack.isra.0>
 80128f2:	4620      	mov	r0, r4
 80128f4:	b01d      	add	sp, #116	; 0x74
 80128f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128fa:	4629      	mov	r1, r5
 80128fc:	f107 0008 	add.w	r0, r7, #8
 8012900:	f000 fd34 	bl	801336c <uxr_get_input_best_effort_stream>
 8012904:	2800      	cmp	r0, #0
 8012906:	d098      	beq.n	801283a <listen_message_reliably+0x172>
 8012908:	4649      	mov	r1, r9
 801290a:	f005 fce5 	bl	80182d8 <uxr_receive_best_effort_message>
 801290e:	2800      	cmp	r0, #0
 8012910:	d093      	beq.n	801283a <listen_message_reliably+0x172>
 8012912:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8012916:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801291a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801291e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012920:	a90c      	add	r1, sp, #48	; 0x30
 8012922:	4638      	mov	r0, r7
 8012924:	f7ff fd48 	bl	80123b8 <read_submessage_list>
 8012928:	e787      	b.n	801283a <listen_message_reliably+0x172>
 801292a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 801292e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8012932:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8012936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012938:	a90c      	add	r1, sp, #48	; 0x30
 801293a:	4638      	mov	r0, r7
 801293c:	f7ff fd3c 	bl	80123b8 <read_submessage_list>
 8012940:	e7bb      	b.n	80128ba <listen_message_reliably+0x1f2>
 8012942:	bf00      	nop

08012944 <uxr_run_session_timeout>:
 8012944:	b570      	push	{r4, r5, r6, lr}
 8012946:	4604      	mov	r4, r0
 8012948:	460d      	mov	r5, r1
 801294a:	f000 fd81 	bl	8013450 <uxr_millis>
 801294e:	4606      	mov	r6, r0
 8012950:	4620      	mov	r0, r4
 8012952:	f7ff fc75 	bl	8012240 <uxr_flash_output_streams>
 8012956:	4629      	mov	r1, r5
 8012958:	4620      	mov	r0, r4
 801295a:	f7ff feb5 	bl	80126c8 <listen_message_reliably>
 801295e:	f000 fd77 	bl	8013450 <uxr_millis>
 8012962:	1b83      	subs	r3, r0, r6
 8012964:	1ae9      	subs	r1, r5, r3
 8012966:	2900      	cmp	r1, #0
 8012968:	dcf6      	bgt.n	8012958 <uxr_run_session_timeout+0x14>
 801296a:	f104 0008 	add.w	r0, r4, #8
 801296e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012972:	f000 bd11 	b.w	8013398 <uxr_output_streams_confirmed>
 8012976:	bf00      	nop

08012978 <uxr_run_session_until_data>:
 8012978:	b570      	push	{r4, r5, r6, lr}
 801297a:	4604      	mov	r4, r0
 801297c:	460d      	mov	r5, r1
 801297e:	f000 fd67 	bl	8013450 <uxr_millis>
 8012982:	4606      	mov	r6, r0
 8012984:	4620      	mov	r0, r4
 8012986:	f7ff fc5b 	bl	8012240 <uxr_flash_output_streams>
 801298a:	2300      	movs	r3, #0
 801298c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8012990:	4629      	mov	r1, r5
 8012992:	e005      	b.n	80129a0 <uxr_run_session_until_data+0x28>
 8012994:	f000 fd5c 	bl	8013450 <uxr_millis>
 8012998:	1b83      	subs	r3, r0, r6
 801299a:	1ae9      	subs	r1, r5, r3
 801299c:	2900      	cmp	r1, #0
 801299e:	dd07      	ble.n	80129b0 <uxr_run_session_until_data+0x38>
 80129a0:	4620      	mov	r0, r4
 80129a2:	f7ff fe91 	bl	80126c8 <listen_message_reliably>
 80129a6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80129aa:	2800      	cmp	r0, #0
 80129ac:	d0f2      	beq.n	8012994 <uxr_run_session_until_data+0x1c>
 80129ae:	bd70      	pop	{r4, r5, r6, pc}
 80129b0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80129b4:	bd70      	pop	{r4, r5, r6, pc}
 80129b6:	bf00      	nop

080129b8 <uxr_run_session_until_confirm_delivery>:
 80129b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129bc:	4606      	mov	r6, r0
 80129be:	460d      	mov	r5, r1
 80129c0:	f000 fd46 	bl	8013450 <uxr_millis>
 80129c4:	4607      	mov	r7, r0
 80129c6:	4630      	mov	r0, r6
 80129c8:	f7ff fc3a 	bl	8012240 <uxr_flash_output_streams>
 80129cc:	2d00      	cmp	r5, #0
 80129ce:	f106 0808 	add.w	r8, r6, #8
 80129d2:	bfa8      	it	ge
 80129d4:	462c      	movge	r4, r5
 80129d6:	da07      	bge.n	80129e8 <uxr_run_session_until_confirm_delivery+0x30>
 80129d8:	e00e      	b.n	80129f8 <uxr_run_session_until_confirm_delivery+0x40>
 80129da:	f7ff fe75 	bl	80126c8 <listen_message_reliably>
 80129de:	f000 fd37 	bl	8013450 <uxr_millis>
 80129e2:	1bc3      	subs	r3, r0, r7
 80129e4:	1aec      	subs	r4, r5, r3
 80129e6:	d407      	bmi.n	80129f8 <uxr_run_session_until_confirm_delivery+0x40>
 80129e8:	4640      	mov	r0, r8
 80129ea:	f000 fcd5 	bl	8013398 <uxr_output_streams_confirmed>
 80129ee:	4603      	mov	r3, r0
 80129f0:	4621      	mov	r1, r4
 80129f2:	4630      	mov	r0, r6
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d0f0      	beq.n	80129da <uxr_run_session_until_confirm_delivery+0x22>
 80129f8:	4640      	mov	r0, r8
 80129fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129fe:	f000 bccb 	b.w	8013398 <uxr_output_streams_confirmed>
 8012a02:	bf00      	nop

08012a04 <uxr_run_session_until_all_status>:
 8012a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a08:	9d08      	ldr	r5, [sp, #32]
 8012a0a:	460f      	mov	r7, r1
 8012a0c:	4692      	mov	sl, r2
 8012a0e:	461c      	mov	r4, r3
 8012a10:	4606      	mov	r6, r0
 8012a12:	f7ff fc15 	bl	8012240 <uxr_flash_output_streams>
 8012a16:	b125      	cbz	r5, 8012a22 <uxr_run_session_until_all_status+0x1e>
 8012a18:	462a      	mov	r2, r5
 8012a1a:	21ff      	movs	r1, #255	; 0xff
 8012a1c:	4620      	mov	r0, r4
 8012a1e:	f007 fd23 	bl	801a468 <memset>
 8012a22:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 8012a26:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012a28:	f000 fd12 	bl	8013450 <uxr_millis>
 8012a2c:	f104 39ff 	add.w	r9, r4, #4294967295
 8012a30:	f1aa 0a02 	sub.w	sl, sl, #2
 8012a34:	4680      	mov	r8, r0
 8012a36:	4639      	mov	r1, r7
 8012a38:	4630      	mov	r0, r6
 8012a3a:	f7ff fe45 	bl	80126c8 <listen_message_reliably>
 8012a3e:	f000 fd07 	bl	8013450 <uxr_millis>
 8012a42:	eba0 0008 	sub.w	r0, r0, r8
 8012a46:	1a39      	subs	r1, r7, r0
 8012a48:	b33d      	cbz	r5, 8012a9a <uxr_run_session_until_all_status+0x96>
 8012a4a:	46cc      	mov	ip, r9
 8012a4c:	464a      	mov	r2, r9
 8012a4e:	2301      	movs	r3, #1
 8012a50:	e002      	b.n	8012a58 <uxr_run_session_until_all_status+0x54>
 8012a52:	42ab      	cmp	r3, r5
 8012a54:	d20c      	bcs.n	8012a70 <uxr_run_session_until_all_status+0x6c>
 8012a56:	3301      	adds	r3, #1
 8012a58:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8012a5c:	2cff      	cmp	r4, #255	; 0xff
 8012a5e:	d1f8      	bne.n	8012a52 <uxr_run_session_until_all_status+0x4e>
 8012a60:	42ab      	cmp	r3, r5
 8012a62:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8012a66:	d213      	bcs.n	8012a90 <uxr_run_session_until_all_status+0x8c>
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	d0f4      	beq.n	8012a56 <uxr_run_session_until_all_status+0x52>
 8012a6c:	2900      	cmp	r1, #0
 8012a6e:	dce3      	bgt.n	8012a38 <uxr_run_session_until_all_status+0x34>
 8012a70:	2300      	movs	r3, #0
 8012a72:	444d      	add	r5, r9
 8012a74:	67f3      	str	r3, [r6, #124]	; 0x7c
 8012a76:	e001      	b.n	8012a7c <uxr_run_session_until_all_status+0x78>
 8012a78:	2b01      	cmp	r3, #1
 8012a7a:	d812      	bhi.n	8012aa2 <uxr_run_session_until_all_status+0x9e>
 8012a7c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8012a80:	4565      	cmp	r5, ip
 8012a82:	d1f9      	bne.n	8012a78 <uxr_run_session_until_all_status+0x74>
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	bf8c      	ite	hi
 8012a88:	2000      	movhi	r0, #0
 8012a8a:	2001      	movls	r0, #1
 8012a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a90:	2900      	cmp	r1, #0
 8012a92:	dded      	ble.n	8012a70 <uxr_run_session_until_all_status+0x6c>
 8012a94:	2800      	cmp	r0, #0
 8012a96:	d1cf      	bne.n	8012a38 <uxr_run_session_until_all_status+0x34>
 8012a98:	e7ea      	b.n	8012a70 <uxr_run_session_until_all_status+0x6c>
 8012a9a:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012a9c:	2001      	movs	r0, #1
 8012a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aa2:	2000      	movs	r0, #0
 8012aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012aa8 <uxr_create_session>:
 8012aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aac:	ed2d 8b02 	vpush	{d8}
 8012ab0:	f100 0808 	add.w	r8, r0, #8
 8012ab4:	b0a9      	sub	sp, #164	; 0xa4
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	4640      	mov	r0, r8
 8012aba:	f000 fba9 	bl	8013210 <uxr_reset_stream_storage>
 8012abe:	4620      	mov	r0, r4
 8012ac0:	f000 fb0e 	bl	80130e0 <uxr_session_header_offset>
 8012ac4:	a909      	add	r1, sp, #36	; 0x24
 8012ac6:	9000      	str	r0, [sp, #0]
 8012ac8:	2300      	movs	r3, #0
 8012aca:	a810      	add	r0, sp, #64	; 0x40
 8012acc:	221c      	movs	r2, #28
 8012ace:	f7fe fec1 	bl	8011854 <ucdr_init_buffer_origin_offset>
 8012ad2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012ad4:	8a1a      	ldrh	r2, [r3, #16]
 8012ad6:	3a04      	subs	r2, #4
 8012ad8:	b292      	uxth	r2, r2
 8012ada:	4620      	mov	r0, r4
 8012adc:	a910      	add	r1, sp, #64	; 0x40
 8012ade:	f000 fa23 	bl	8012f28 <uxr_buffer_create_session>
 8012ae2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	f000 fa8f 	bl	8013008 <uxr_stamp_create_session_header>
 8012aea:	a810      	add	r0, sp, #64	; 0x40
 8012aec:	f7fe fef0 	bl	80118d0 <ucdr_buffer_length>
 8012af0:	23ff      	movs	r3, #255	; 0xff
 8012af2:	ee08 0a10 	vmov	s16, r0
 8012af6:	7163      	strb	r3, [r4, #5]
 8012af8:	f04f 090a 	mov.w	r9, #10
 8012afc:	46c2      	mov	sl, r8
 8012afe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012b00:	ee18 2a10 	vmov	r2, s16
 8012b04:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012b08:	a909      	add	r1, sp, #36	; 0x24
 8012b0a:	47a8      	blx	r5
 8012b0c:	f000 fca0 	bl	8013450 <uxr_millis>
 8012b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012b14:	9002      	str	r0, [sp, #8]
 8012b16:	e00c      	b.n	8012b32 <uxr_create_session+0x8a>
 8012b18:	f000 fc9a 	bl	8013450 <uxr_millis>
 8012b1c:	9b02      	ldr	r3, [sp, #8]
 8012b1e:	7962      	ldrb	r2, [r4, #5]
 8012b20:	1ac0      	subs	r0, r0, r3
 8012b22:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	f340 8094 	ble.w	8012c54 <uxr_create_session+0x1ac>
 8012b2c:	2aff      	cmp	r2, #255	; 0xff
 8012b2e:	f040 8097 	bne.w	8012c60 <uxr_create_session+0x1b8>
 8012b32:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012b34:	a905      	add	r1, sp, #20
 8012b36:	6895      	ldr	r5, [r2, #8]
 8012b38:	6810      	ldr	r0, [r2, #0]
 8012b3a:	aa06      	add	r2, sp, #24
 8012b3c:	47a8      	blx	r5
 8012b3e:	2800      	cmp	r0, #0
 8012b40:	d0ea      	beq.n	8012b18 <uxr_create_session+0x70>
 8012b42:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8012b46:	a818      	add	r0, sp, #96	; 0x60
 8012b48:	f7fe fe96 	bl	8011878 <ucdr_init_buffer>
 8012b4c:	2500      	movs	r5, #0
 8012b4e:	f10d 0312 	add.w	r3, sp, #18
 8012b52:	aa04      	add	r2, sp, #16
 8012b54:	a918      	add	r1, sp, #96	; 0x60
 8012b56:	4620      	mov	r0, r4
 8012b58:	f88d 5010 	strb.w	r5, [sp, #16]
 8012b5c:	f000 fa7e 	bl	801305c <uxr_read_session_header>
 8012b60:	2800      	cmp	r0, #0
 8012b62:	d0d9      	beq.n	8012b18 <uxr_create_session+0x70>
 8012b64:	4629      	mov	r1, r5
 8012b66:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8012b6a:	f000 fb1b 	bl	80131a4 <uxr_stream_id_from_raw>
 8012b6e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012b72:	2f01      	cmp	r7, #1
 8012b74:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012b78:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8012b7c:	fa5f f880 	uxtb.w	r8, r0
 8012b80:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8012b84:	d04d      	beq.n	8012c22 <uxr_create_session+0x17a>
 8012b86:	2f02      	cmp	r7, #2
 8012b88:	d00c      	beq.n	8012ba4 <uxr_create_session+0xfc>
 8012b8a:	2f00      	cmp	r7, #0
 8012b8c:	d1c4      	bne.n	8012b18 <uxr_create_session+0x70>
 8012b8e:	4639      	mov	r1, r7
 8012b90:	4638      	mov	r0, r7
 8012b92:	f000 fb07 	bl	80131a4 <uxr_stream_id_from_raw>
 8012b96:	a918      	add	r1, sp, #96	; 0x60
 8012b98:	4602      	mov	r2, r0
 8012b9a:	4620      	mov	r0, r4
 8012b9c:	9208      	str	r2, [sp, #32]
 8012b9e:	f7ff fc0b 	bl	80123b8 <read_submessage_list>
 8012ba2:	e7b9      	b.n	8012b18 <uxr_create_session+0x70>
 8012ba4:	4629      	mov	r1, r5
 8012ba6:	4650      	mov	r0, sl
 8012ba8:	f000 fbea 	bl	8013380 <uxr_get_input_reliable_stream>
 8012bac:	4606      	mov	r6, r0
 8012bae:	b390      	cbz	r0, 8012c16 <uxr_create_session+0x16e>
 8012bb0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012bb2:	9203      	str	r2, [sp, #12]
 8012bb4:	a818      	add	r0, sp, #96	; 0x60
 8012bb6:	f7fe fe8f 	bl	80118d8 <ucdr_buffer_remaining>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	f10d 0011 	add.w	r0, sp, #17
 8012bc0:	9000      	str	r0, [sp, #0]
 8012bc2:	9a03      	ldr	r2, [sp, #12]
 8012bc4:	4659      	mov	r1, fp
 8012bc6:	4630      	mov	r0, r6
 8012bc8:	f005 fc0a 	bl	80183e0 <uxr_receive_reliable_message>
 8012bcc:	b318      	cbz	r0, 8012c16 <uxr_create_session+0x16e>
 8012bce:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8012bd2:	b9b3      	cbnz	r3, 8012c02 <uxr_create_session+0x15a>
 8012bd4:	f88d 8020 	strb.w	r8, [sp, #32]
 8012bd8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012bdc:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8012be0:	9a08      	ldr	r2, [sp, #32]
 8012be2:	a918      	add	r1, sp, #96	; 0x60
 8012be4:	4620      	mov	r0, r4
 8012be6:	f7ff fbe7 	bl	80123b8 <read_submessage_list>
 8012bea:	e00a      	b.n	8012c02 <uxr_create_session+0x15a>
 8012bec:	f04f 0302 	mov.w	r3, #2
 8012bf0:	f88d 8020 	strb.w	r8, [sp, #32]
 8012bf4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012bf8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8012bfc:	9a08      	ldr	r2, [sp, #32]
 8012bfe:	f7ff fbdb 	bl	80123b8 <read_submessage_list>
 8012c02:	a920      	add	r1, sp, #128	; 0x80
 8012c04:	2204      	movs	r2, #4
 8012c06:	4630      	mov	r0, r6
 8012c08:	f005 fc6a 	bl	80184e0 <uxr_next_input_reliable_buffer_available>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	a920      	add	r1, sp, #128	; 0x80
 8012c10:	4620      	mov	r0, r4
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d1ea      	bne.n	8012bec <uxr_create_session+0x144>
 8012c16:	462a      	mov	r2, r5
 8012c18:	4641      	mov	r1, r8
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	f7ff fa4a 	bl	80120b4 <write_submessage_acknack.isra.0>
 8012c20:	e77a      	b.n	8012b18 <uxr_create_session+0x70>
 8012c22:	4629      	mov	r1, r5
 8012c24:	4650      	mov	r0, sl
 8012c26:	f000 fba1 	bl	801336c <uxr_get_input_best_effort_stream>
 8012c2a:	2800      	cmp	r0, #0
 8012c2c:	f43f af74 	beq.w	8012b18 <uxr_create_session+0x70>
 8012c30:	4659      	mov	r1, fp
 8012c32:	f005 fb51 	bl	80182d8 <uxr_receive_best_effort_message>
 8012c36:	2800      	cmp	r0, #0
 8012c38:	f43f af6e 	beq.w	8012b18 <uxr_create_session+0x70>
 8012c3c:	f88d 8020 	strb.w	r8, [sp, #32]
 8012c40:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012c44:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8012c48:	9a08      	ldr	r2, [sp, #32]
 8012c4a:	a918      	add	r1, sp, #96	; 0x60
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f7ff fbb3 	bl	80123b8 <read_submessage_list>
 8012c52:	e761      	b.n	8012b18 <uxr_create_session+0x70>
 8012c54:	f1b9 0901 	subs.w	r9, r9, #1
 8012c58:	d002      	beq.n	8012c60 <uxr_create_session+0x1b8>
 8012c5a:	2aff      	cmp	r2, #255	; 0xff
 8012c5c:	f43f af4f 	beq.w	8012afe <uxr_create_session+0x56>
 8012c60:	b12a      	cbz	r2, 8012c6e <uxr_create_session+0x1c6>
 8012c62:	2000      	movs	r0, #0
 8012c64:	b029      	add	sp, #164	; 0xa4
 8012c66:	ecbd 8b02 	vpop	{d8}
 8012c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6e:	4650      	mov	r0, sl
 8012c70:	f000 face 	bl	8013210 <uxr_reset_stream_storage>
 8012c74:	2001      	movs	r0, #1
 8012c76:	b029      	add	sp, #164	; 0xa4
 8012c78:	ecbd 8b02 	vpop	{d8}
 8012c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012c80 <wait_session_status>:
 8012c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c84:	4604      	mov	r4, r0
 8012c86:	b09d      	sub	sp, #116	; 0x74
 8012c88:	20ff      	movs	r0, #255	; 0xff
 8012c8a:	7160      	strb	r0, [r4, #5]
 8012c8c:	9304      	str	r3, [sp, #16]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	f000 80b8 	beq.w	8012e04 <wait_session_status+0x184>
 8012c94:	2300      	movs	r3, #0
 8012c96:	468b      	mov	fp, r1
 8012c98:	4692      	mov	sl, r2
 8012c9a:	9303      	str	r3, [sp, #12]
 8012c9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012c9e:	4652      	mov	r2, sl
 8012ca0:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012ca4:	4659      	mov	r1, fp
 8012ca6:	47a8      	blx	r5
 8012ca8:	f000 fbd2 	bl	8013450 <uxr_millis>
 8012cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012cb0:	4605      	mov	r5, r0
 8012cb2:	e009      	b.n	8012cc8 <wait_session_status+0x48>
 8012cb4:	f000 fbcc 	bl	8013450 <uxr_millis>
 8012cb8:	1b40      	subs	r0, r0, r5
 8012cba:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	dd42      	ble.n	8012d48 <wait_session_status+0xc8>
 8012cc2:	7960      	ldrb	r0, [r4, #5]
 8012cc4:	28ff      	cmp	r0, #255	; 0xff
 8012cc6:	d148      	bne.n	8012d5a <wait_session_status+0xda>
 8012cc8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012cca:	a908      	add	r1, sp, #32
 8012ccc:	6896      	ldr	r6, [r2, #8]
 8012cce:	6810      	ldr	r0, [r2, #0]
 8012cd0:	aa09      	add	r2, sp, #36	; 0x24
 8012cd2:	47b0      	blx	r6
 8012cd4:	2800      	cmp	r0, #0
 8012cd6:	d0ed      	beq.n	8012cb4 <wait_session_status+0x34>
 8012cd8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012cdc:	a80c      	add	r0, sp, #48	; 0x30
 8012cde:	f7fe fdcb 	bl	8011878 <ucdr_init_buffer>
 8012ce2:	2600      	movs	r6, #0
 8012ce4:	f10d 031e 	add.w	r3, sp, #30
 8012ce8:	aa07      	add	r2, sp, #28
 8012cea:	a90c      	add	r1, sp, #48	; 0x30
 8012cec:	4620      	mov	r0, r4
 8012cee:	f88d 601c 	strb.w	r6, [sp, #28]
 8012cf2:	f000 f9b3 	bl	801305c <uxr_read_session_header>
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d0dc      	beq.n	8012cb4 <wait_session_status+0x34>
 8012cfa:	4631      	mov	r1, r6
 8012cfc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012d00:	f000 fa50 	bl	80131a4 <uxr_stream_id_from_raw>
 8012d04:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012d08:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012d0c:	9302      	str	r3, [sp, #8]
 8012d0e:	2f01      	cmp	r7, #1
 8012d10:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8012d14:	fa5f f880 	uxtb.w	r8, r0
 8012d18:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012d1c:	d058      	beq.n	8012dd0 <wait_session_status+0x150>
 8012d1e:	2f02      	cmp	r7, #2
 8012d20:	d021      	beq.n	8012d66 <wait_session_status+0xe6>
 8012d22:	2f00      	cmp	r7, #0
 8012d24:	d1c6      	bne.n	8012cb4 <wait_session_status+0x34>
 8012d26:	4639      	mov	r1, r7
 8012d28:	4638      	mov	r0, r7
 8012d2a:	f000 fa3b 	bl	80131a4 <uxr_stream_id_from_raw>
 8012d2e:	a90c      	add	r1, sp, #48	; 0x30
 8012d30:	4602      	mov	r2, r0
 8012d32:	4620      	mov	r0, r4
 8012d34:	920b      	str	r2, [sp, #44]	; 0x2c
 8012d36:	f7ff fb3f 	bl	80123b8 <read_submessage_list>
 8012d3a:	f000 fb89 	bl	8013450 <uxr_millis>
 8012d3e:	1b40      	subs	r0, r0, r5
 8012d40:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	dcbc      	bgt.n	8012cc2 <wait_session_status+0x42>
 8012d48:	9b03      	ldr	r3, [sp, #12]
 8012d4a:	9a04      	ldr	r2, [sp, #16]
 8012d4c:	7960      	ldrb	r0, [r4, #5]
 8012d4e:	3301      	adds	r3, #1
 8012d50:	429a      	cmp	r2, r3
 8012d52:	9303      	str	r3, [sp, #12]
 8012d54:	d001      	beq.n	8012d5a <wait_session_status+0xda>
 8012d56:	28ff      	cmp	r0, #255	; 0xff
 8012d58:	d0a0      	beq.n	8012c9c <wait_session_status+0x1c>
 8012d5a:	38ff      	subs	r0, #255	; 0xff
 8012d5c:	bf18      	it	ne
 8012d5e:	2001      	movne	r0, #1
 8012d60:	b01d      	add	sp, #116	; 0x74
 8012d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d66:	4631      	mov	r1, r6
 8012d68:	f104 0008 	add.w	r0, r4, #8
 8012d6c:	f000 fb08 	bl	8013380 <uxr_get_input_reliable_stream>
 8012d70:	4681      	mov	r9, r0
 8012d72:	b338      	cbz	r0, 8012dc4 <wait_session_status+0x144>
 8012d74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d76:	9205      	str	r2, [sp, #20]
 8012d78:	a80c      	add	r0, sp, #48	; 0x30
 8012d7a:	f7fe fdad 	bl	80118d8 <ucdr_buffer_remaining>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	f10d 001d 	add.w	r0, sp, #29
 8012d84:	9000      	str	r0, [sp, #0]
 8012d86:	9a05      	ldr	r2, [sp, #20]
 8012d88:	9902      	ldr	r1, [sp, #8]
 8012d8a:	4648      	mov	r0, r9
 8012d8c:	f005 fb28 	bl	80183e0 <uxr_receive_reliable_message>
 8012d90:	b1c0      	cbz	r0, 8012dc4 <wait_session_status+0x144>
 8012d92:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012d96:	b95b      	cbnz	r3, 8012db0 <wait_session_status+0x130>
 8012d98:	e03c      	b.n	8012e14 <wait_session_status+0x194>
 8012d9a:	f04f 0302 	mov.w	r3, #2
 8012d9e:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012da2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012da6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8012daa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012dac:	f7ff fb04 	bl	80123b8 <read_submessage_list>
 8012db0:	a914      	add	r1, sp, #80	; 0x50
 8012db2:	2204      	movs	r2, #4
 8012db4:	4648      	mov	r0, r9
 8012db6:	f005 fb93 	bl	80184e0 <uxr_next_input_reliable_buffer_available>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	a914      	add	r1, sp, #80	; 0x50
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d1ea      	bne.n	8012d9a <wait_session_status+0x11a>
 8012dc4:	4632      	mov	r2, r6
 8012dc6:	4641      	mov	r1, r8
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f7ff f973 	bl	80120b4 <write_submessage_acknack.isra.0>
 8012dce:	e771      	b.n	8012cb4 <wait_session_status+0x34>
 8012dd0:	4631      	mov	r1, r6
 8012dd2:	f104 0008 	add.w	r0, r4, #8
 8012dd6:	f000 fac9 	bl	801336c <uxr_get_input_best_effort_stream>
 8012dda:	2800      	cmp	r0, #0
 8012ddc:	f43f af6a 	beq.w	8012cb4 <wait_session_status+0x34>
 8012de0:	9902      	ldr	r1, [sp, #8]
 8012de2:	f005 fa79 	bl	80182d8 <uxr_receive_best_effort_message>
 8012de6:	2800      	cmp	r0, #0
 8012de8:	f43f af64 	beq.w	8012cb4 <wait_session_status+0x34>
 8012dec:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012df0:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012df4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012df8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012dfa:	a90c      	add	r1, sp, #48	; 0x30
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	f7ff fadb 	bl	80123b8 <read_submessage_list>
 8012e02:	e757      	b.n	8012cb4 <wait_session_status+0x34>
 8012e04:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012e06:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012e0a:	47a0      	blx	r4
 8012e0c:	2001      	movs	r0, #1
 8012e0e:	b01d      	add	sp, #116	; 0x74
 8012e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e14:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012e18:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012e1c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012e20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e22:	a90c      	add	r1, sp, #48	; 0x30
 8012e24:	4620      	mov	r0, r4
 8012e26:	f7ff fac7 	bl	80123b8 <read_submessage_list>
 8012e2a:	e7c1      	b.n	8012db0 <wait_session_status+0x130>

08012e2c <uxr_delete_session_retries>:
 8012e2c:	b530      	push	{r4, r5, lr}
 8012e2e:	b08f      	sub	sp, #60	; 0x3c
 8012e30:	4604      	mov	r4, r0
 8012e32:	460d      	mov	r5, r1
 8012e34:	f000 f954 	bl	80130e0 <uxr_session_header_offset>
 8012e38:	2300      	movs	r3, #0
 8012e3a:	2210      	movs	r2, #16
 8012e3c:	9000      	str	r0, [sp, #0]
 8012e3e:	a902      	add	r1, sp, #8
 8012e40:	a806      	add	r0, sp, #24
 8012e42:	f7fe fd07 	bl	8011854 <ucdr_init_buffer_origin_offset>
 8012e46:	a906      	add	r1, sp, #24
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f000 f897 	bl	8012f7c <uxr_buffer_delete_session>
 8012e4e:	2200      	movs	r2, #0
 8012e50:	4611      	mov	r1, r2
 8012e52:	9b06      	ldr	r3, [sp, #24]
 8012e54:	4620      	mov	r0, r4
 8012e56:	f000 f8eb 	bl	8013030 <uxr_stamp_session_header>
 8012e5a:	a806      	add	r0, sp, #24
 8012e5c:	f7fe fd38 	bl	80118d0 <ucdr_buffer_length>
 8012e60:	462b      	mov	r3, r5
 8012e62:	4602      	mov	r2, r0
 8012e64:	a902      	add	r1, sp, #8
 8012e66:	4620      	mov	r0, r4
 8012e68:	f7ff ff0a 	bl	8012c80 <wait_session_status>
 8012e6c:	b118      	cbz	r0, 8012e76 <uxr_delete_session_retries+0x4a>
 8012e6e:	7960      	ldrb	r0, [r4, #5]
 8012e70:	fab0 f080 	clz	r0, r0
 8012e74:	0940      	lsrs	r0, r0, #5
 8012e76:	b00f      	add	sp, #60	; 0x3c
 8012e78:	bd30      	pop	{r4, r5, pc}
 8012e7a:	bf00      	nop

08012e7c <uxr_prepare_stream_to_write_submessage>:
 8012e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e80:	b082      	sub	sp, #8
 8012e82:	4682      	mov	sl, r0
 8012e84:	4610      	mov	r0, r2
 8012e86:	4615      	mov	r5, r2
 8012e88:	461e      	mov	r6, r3
 8012e8a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8012e8e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8012e92:	9101      	str	r1, [sp, #4]
 8012e94:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012e98:	f000 fad4 	bl	8013444 <uxr_submessage_padding>
 8012e9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012ea0:	f105 0904 	add.w	r9, r5, #4
 8012ea4:	2b01      	cmp	r3, #1
 8012ea6:	4481      	add	r9, r0
 8012ea8:	d01d      	beq.n	8012ee6 <uxr_prepare_stream_to_write_submessage+0x6a>
 8012eaa:	2b02      	cmp	r3, #2
 8012eac:	d116      	bne.n	8012edc <uxr_prepare_stream_to_write_submessage+0x60>
 8012eae:	4621      	mov	r1, r4
 8012eb0:	f10a 0008 	add.w	r0, sl, #8
 8012eb4:	f000 fa4e 	bl	8013354 <uxr_get_output_reliable_stream>
 8012eb8:	4604      	mov	r4, r0
 8012eba:	b158      	cbz	r0, 8012ed4 <uxr_prepare_stream_to_write_submessage+0x58>
 8012ebc:	4649      	mov	r1, r9
 8012ebe:	4632      	mov	r2, r6
 8012ec0:	f005 fcc4 	bl	801884c <uxr_prepare_reliable_buffer_to_write>
 8012ec4:	4604      	mov	r4, r0
 8012ec6:	b12c      	cbz	r4, 8012ed4 <uxr_prepare_stream_to_write_submessage+0x58>
 8012ec8:	4643      	mov	r3, r8
 8012eca:	b2aa      	uxth	r2, r5
 8012ecc:	4639      	mov	r1, r7
 8012ece:	4630      	mov	r0, r6
 8012ed0:	f000 fa78 	bl	80133c4 <uxr_buffer_submessage_header>
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	b002      	add	sp, #8
 8012ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012edc:	2400      	movs	r4, #0
 8012ede:	4620      	mov	r0, r4
 8012ee0:	b002      	add	sp, #8
 8012ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ee6:	4621      	mov	r1, r4
 8012ee8:	f10a 0008 	add.w	r0, sl, #8
 8012eec:	f000 fa2a 	bl	8013344 <uxr_get_output_best_effort_stream>
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	2800      	cmp	r0, #0
 8012ef4:	d0ee      	beq.n	8012ed4 <uxr_prepare_stream_to_write_submessage+0x58>
 8012ef6:	4649      	mov	r1, r9
 8012ef8:	4632      	mov	r2, r6
 8012efa:	f005 fbe3 	bl	80186c4 <uxr_prepare_best_effort_buffer_to_write>
 8012efe:	4604      	mov	r4, r0
 8012f00:	e7e1      	b.n	8012ec6 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012f02:	bf00      	nop

08012f04 <uxr_init_session_info>:
 8012f04:	b470      	push	{r4, r5, r6}
 8012f06:	7102      	strb	r2, [r0, #4]
 8012f08:	0e16      	lsrs	r6, r2, #24
 8012f0a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8012f0e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8012f12:	23ff      	movs	r3, #255	; 0xff
 8012f14:	2209      	movs	r2, #9
 8012f16:	7046      	strb	r6, [r0, #1]
 8012f18:	7085      	strb	r5, [r0, #2]
 8012f1a:	70c4      	strb	r4, [r0, #3]
 8012f1c:	7001      	strb	r1, [r0, #0]
 8012f1e:	bc70      	pop	{r4, r5, r6}
 8012f20:	80c2      	strh	r2, [r0, #6]
 8012f22:	7143      	strb	r3, [r0, #5]
 8012f24:	4770      	bx	lr
 8012f26:	bf00      	nop

08012f28 <uxr_buffer_create_session>:
 8012f28:	b570      	push	{r4, r5, r6, lr}
 8012f2a:	b088      	sub	sp, #32
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	4d12      	ldr	r5, [pc, #72]	; (8012f78 <uxr_buffer_create_session+0x50>)
 8012f30:	9307      	str	r3, [sp, #28]
 8012f32:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012f36:	7802      	ldrb	r2, [r0, #0]
 8012f38:	9303      	str	r3, [sp, #12]
 8012f3a:	460c      	mov	r4, r1
 8012f3c:	f88d 200c 	strb.w	r2, [sp, #12]
 8012f40:	2101      	movs	r1, #1
 8012f42:	682a      	ldr	r2, [r5, #0]
 8012f44:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8012f48:	88ad      	ldrh	r5, [r5, #4]
 8012f4a:	80c1      	strh	r1, [r0, #6]
 8012f4c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012f50:	9200      	str	r2, [sp, #0]
 8012f52:	4619      	mov	r1, r3
 8012f54:	2210      	movs	r2, #16
 8012f56:	4620      	mov	r0, r4
 8012f58:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012f5c:	9306      	str	r3, [sp, #24]
 8012f5e:	f88d 300d 	strb.w	r3, [sp, #13]
 8012f62:	9602      	str	r6, [sp, #8]
 8012f64:	f8ad 5006 	strh.w	r5, [sp, #6]
 8012f68:	f000 fa2c 	bl	80133c4 <uxr_buffer_submessage_header>
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	4669      	mov	r1, sp
 8012f70:	f001 fa50 	bl	8014414 <uxr_serialize_CREATE_CLIENT_Payload>
 8012f74:	b008      	add	sp, #32
 8012f76:	bd70      	pop	{r4, r5, r6, pc}
 8012f78:	0801b750 	.word	0x0801b750

08012f7c <uxr_buffer_delete_session>:
 8012f7c:	b530      	push	{r4, r5, lr}
 8012f7e:	4b0c      	ldr	r3, [pc, #48]	; (8012fb0 <uxr_buffer_delete_session+0x34>)
 8012f80:	b083      	sub	sp, #12
 8012f82:	891b      	ldrh	r3, [r3, #8]
 8012f84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012f88:	2202      	movs	r2, #2
 8012f8a:	460c      	mov	r4, r1
 8012f8c:	80c2      	strh	r2, [r0, #6]
 8012f8e:	2300      	movs	r3, #0
 8012f90:	2204      	movs	r2, #4
 8012f92:	4608      	mov	r0, r1
 8012f94:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012f98:	2103      	movs	r1, #3
 8012f9a:	f8ad 5004 	strh.w	r5, [sp, #4]
 8012f9e:	f000 fa11 	bl	80133c4 <uxr_buffer_submessage_header>
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	a901      	add	r1, sp, #4
 8012fa6:	f001 fae3 	bl	8014570 <uxr_serialize_DELETE_Payload>
 8012faa:	b003      	add	sp, #12
 8012fac:	bd30      	pop	{r4, r5, pc}
 8012fae:	bf00      	nop
 8012fb0:	0801b750 	.word	0x0801b750

08012fb4 <uxr_read_create_session_status>:
 8012fb4:	b510      	push	{r4, lr}
 8012fb6:	b088      	sub	sp, #32
 8012fb8:	4604      	mov	r4, r0
 8012fba:	4608      	mov	r0, r1
 8012fbc:	a901      	add	r1, sp, #4
 8012fbe:	f001 fae7 	bl	8014590 <uxr_deserialize_STATUS_AGENT_Payload>
 8012fc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012fc6:	7163      	strb	r3, [r4, #5]
 8012fc8:	b008      	add	sp, #32
 8012fca:	bd10      	pop	{r4, pc}

08012fcc <uxr_read_delete_session_status>:
 8012fcc:	b510      	push	{r4, lr}
 8012fce:	4604      	mov	r4, r0
 8012fd0:	b084      	sub	sp, #16
 8012fd2:	4608      	mov	r0, r1
 8012fd4:	a902      	add	r1, sp, #8
 8012fd6:	f001 fb0b 	bl	80145f0 <uxr_deserialize_STATUS_Payload>
 8012fda:	88e3      	ldrh	r3, [r4, #6]
 8012fdc:	2b02      	cmp	r3, #2
 8012fde:	d001      	beq.n	8012fe4 <uxr_read_delete_session_status+0x18>
 8012fe0:	b004      	add	sp, #16
 8012fe2:	bd10      	pop	{r4, pc}
 8012fe4:	f10d 000a 	add.w	r0, sp, #10
 8012fe8:	f7fe fec6 	bl	8011d78 <uxr_object_id_from_raw>
 8012fec:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012ff0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012ff4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012ff8:	b29b      	uxth	r3, r3
 8012ffa:	2b02      	cmp	r3, #2
 8012ffc:	bf04      	itt	eq
 8012ffe:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8013002:	7163      	strbeq	r3, [r4, #5]
 8013004:	b004      	add	sp, #16
 8013006:	bd10      	pop	{r4, pc}

08013008 <uxr_stamp_create_session_header>:
 8013008:	b510      	push	{r4, lr}
 801300a:	4604      	mov	r4, r0
 801300c:	b08a      	sub	sp, #40	; 0x28
 801300e:	a802      	add	r0, sp, #8
 8013010:	2208      	movs	r2, #8
 8013012:	f7fe fc31 	bl	8011878 <ucdr_init_buffer>
 8013016:	f814 1b01 	ldrb.w	r1, [r4], #1
 801301a:	9400      	str	r4, [sp, #0]
 801301c:	2300      	movs	r3, #0
 801301e:	a802      	add	r0, sp, #8
 8013020:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8013024:	461a      	mov	r2, r3
 8013026:	f000 fbcb 	bl	80137c0 <uxr_serialize_message_header>
 801302a:	b00a      	add	sp, #40	; 0x28
 801302c:	bd10      	pop	{r4, pc}
 801302e:	bf00      	nop

08013030 <uxr_stamp_session_header>:
 8013030:	b570      	push	{r4, r5, r6, lr}
 8013032:	4604      	mov	r4, r0
 8013034:	b08c      	sub	sp, #48	; 0x30
 8013036:	460d      	mov	r5, r1
 8013038:	4616      	mov	r6, r2
 801303a:	4619      	mov	r1, r3
 801303c:	a804      	add	r0, sp, #16
 801303e:	2208      	movs	r2, #8
 8013040:	9603      	str	r6, [sp, #12]
 8013042:	f7fe fc19 	bl	8011878 <ucdr_init_buffer>
 8013046:	f814 1b01 	ldrb.w	r1, [r4], #1
 801304a:	9b03      	ldr	r3, [sp, #12]
 801304c:	9400      	str	r4, [sp, #0]
 801304e:	462a      	mov	r2, r5
 8013050:	a804      	add	r0, sp, #16
 8013052:	f000 fbb5 	bl	80137c0 <uxr_serialize_message_header>
 8013056:	b00c      	add	sp, #48	; 0x30
 8013058:	bd70      	pop	{r4, r5, r6, pc}
 801305a:	bf00      	nop

0801305c <uxr_read_session_header>:
 801305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013060:	4607      	mov	r7, r0
 8013062:	b084      	sub	sp, #16
 8013064:	4608      	mov	r0, r1
 8013066:	460c      	mov	r4, r1
 8013068:	4615      	mov	r5, r2
 801306a:	461e      	mov	r6, r3
 801306c:	f7fe fc34 	bl	80118d8 <ucdr_buffer_remaining>
 8013070:	2808      	cmp	r0, #8
 8013072:	d803      	bhi.n	801307c <uxr_read_session_header+0x20>
 8013074:	2000      	movs	r0, #0
 8013076:	b004      	add	sp, #16
 8013078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801307c:	f10d 080c 	add.w	r8, sp, #12
 8013080:	4633      	mov	r3, r6
 8013082:	462a      	mov	r2, r5
 8013084:	4620      	mov	r0, r4
 8013086:	f8cd 8000 	str.w	r8, [sp]
 801308a:	f10d 010b 	add.w	r1, sp, #11
 801308e:	f000 fbb5 	bl	80137fc <uxr_deserialize_message_header>
 8013092:	783a      	ldrb	r2, [r7, #0]
 8013094:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013098:	4293      	cmp	r3, r2
 801309a:	d1eb      	bne.n	8013074 <uxr_read_session_header+0x18>
 801309c:	061b      	lsls	r3, r3, #24
 801309e:	d41c      	bmi.n	80130da <uxr_read_session_header+0x7e>
 80130a0:	f898 2000 	ldrb.w	r2, [r8]
 80130a4:	787b      	ldrb	r3, [r7, #1]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d003      	beq.n	80130b2 <uxr_read_session_header+0x56>
 80130aa:	2001      	movs	r0, #1
 80130ac:	f080 0001 	eor.w	r0, r0, #1
 80130b0:	e7e1      	b.n	8013076 <uxr_read_session_header+0x1a>
 80130b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80130b6:	78bb      	ldrb	r3, [r7, #2]
 80130b8:	429a      	cmp	r2, r3
 80130ba:	f107 0102 	add.w	r1, r7, #2
 80130be:	d1f4      	bne.n	80130aa <uxr_read_session_header+0x4e>
 80130c0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80130c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d1ee      	bne.n	80130aa <uxr_read_session_header+0x4e>
 80130cc:	784b      	ldrb	r3, [r1, #1]
 80130ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d1e9      	bne.n	80130aa <uxr_read_session_header+0x4e>
 80130d6:	2000      	movs	r0, #0
 80130d8:	e7e8      	b.n	80130ac <uxr_read_session_header+0x50>
 80130da:	2001      	movs	r0, #1
 80130dc:	e7cb      	b.n	8013076 <uxr_read_session_header+0x1a>
 80130de:	bf00      	nop

080130e0 <uxr_session_header_offset>:
 80130e0:	f990 3000 	ldrsb.w	r3, [r0]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	bfac      	ite	ge
 80130e8:	2008      	movge	r0, #8
 80130ea:	2004      	movlt	r0, #4
 80130ec:	4770      	bx	lr
 80130ee:	bf00      	nop

080130f0 <uxr_init_base_object_request>:
 80130f0:	b530      	push	{r4, r5, lr}
 80130f2:	88c3      	ldrh	r3, [r0, #6]
 80130f4:	b083      	sub	sp, #12
 80130f6:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80130fa:	9101      	str	r1, [sp, #4]
 80130fc:	f1a3 010a 	sub.w	r1, r3, #10
 8013100:	b289      	uxth	r1, r1
 8013102:	42a1      	cmp	r1, r4
 8013104:	d80e      	bhi.n	8013124 <uxr_init_base_object_request+0x34>
 8013106:	3301      	adds	r3, #1
 8013108:	b29c      	uxth	r4, r3
 801310a:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801310e:	b2db      	uxtb	r3, r3
 8013110:	80c4      	strh	r4, [r0, #6]
 8013112:	1c91      	adds	r1, r2, #2
 8013114:	9801      	ldr	r0, [sp, #4]
 8013116:	7015      	strb	r5, [r2, #0]
 8013118:	7053      	strb	r3, [r2, #1]
 801311a:	f7fe fe41 	bl	8011da0 <uxr_object_id_to_raw>
 801311e:	4620      	mov	r0, r4
 8013120:	b003      	add	sp, #12
 8013122:	bd30      	pop	{r4, r5, pc}
 8013124:	230a      	movs	r3, #10
 8013126:	461c      	mov	r4, r3
 8013128:	2500      	movs	r5, #0
 801312a:	e7f1      	b.n	8013110 <uxr_init_base_object_request+0x20>

0801312c <uxr_parse_base_object_request>:
 801312c:	b570      	push	{r4, r5, r6, lr}
 801312e:	4604      	mov	r4, r0
 8013130:	3002      	adds	r0, #2
 8013132:	460d      	mov	r5, r1
 8013134:	4616      	mov	r6, r2
 8013136:	f7fe fe1f 	bl	8011d78 <uxr_object_id_from_raw>
 801313a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801313e:	8028      	strh	r0, [r5, #0]
 8013140:	806b      	strh	r3, [r5, #2]
 8013142:	7822      	ldrb	r2, [r4, #0]
 8013144:	7863      	ldrb	r3, [r4, #1]
 8013146:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801314a:	8033      	strh	r3, [r6, #0]
 801314c:	bd70      	pop	{r4, r5, r6, pc}
 801314e:	bf00      	nop

08013150 <uxr_stream_id>:
 8013150:	b410      	push	{r4}
 8013152:	2901      	cmp	r1, #1
 8013154:	b083      	sub	sp, #12
 8013156:	d01f      	beq.n	8013198 <uxr_stream_id+0x48>
 8013158:	2902      	cmp	r1, #2
 801315a:	f04f 0400 	mov.w	r4, #0
 801315e:	d01e      	beq.n	801319e <uxr_stream_id+0x4e>
 8013160:	2300      	movs	r3, #0
 8013162:	f364 0307 	bfi	r3, r4, #0, #8
 8013166:	f360 230f 	bfi	r3, r0, #8, #8
 801316a:	f361 4317 	bfi	r3, r1, #16, #8
 801316e:	f362 631f 	bfi	r3, r2, #24, #8
 8013172:	b2da      	uxtb	r2, r3
 8013174:	2000      	movs	r0, #0
 8013176:	f362 0007 	bfi	r0, r2, #0, #8
 801317a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801317e:	f362 200f 	bfi	r0, r2, #8, #8
 8013182:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013186:	f362 4017 	bfi	r0, r2, #16, #8
 801318a:	0e1b      	lsrs	r3, r3, #24
 801318c:	f363 601f 	bfi	r0, r3, #24, #8
 8013190:	b003      	add	sp, #12
 8013192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013196:	4770      	bx	lr
 8013198:	1c44      	adds	r4, r0, #1
 801319a:	b2e4      	uxtb	r4, r4
 801319c:	e7e0      	b.n	8013160 <uxr_stream_id+0x10>
 801319e:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 80131a2:	e7dd      	b.n	8013160 <uxr_stream_id+0x10>

080131a4 <uxr_stream_id_from_raw>:
 80131a4:	b410      	push	{r4}
 80131a6:	b083      	sub	sp, #12
 80131a8:	b128      	cbz	r0, 80131b6 <uxr_stream_id_from_raw+0x12>
 80131aa:	0603      	lsls	r3, r0, #24
 80131ac:	d421      	bmi.n	80131f2 <uxr_stream_id_from_raw+0x4e>
 80131ae:	1e42      	subs	r2, r0, #1
 80131b0:	b2d2      	uxtb	r2, r2
 80131b2:	2401      	movs	r4, #1
 80131b4:	e001      	b.n	80131ba <uxr_stream_id_from_raw+0x16>
 80131b6:	4604      	mov	r4, r0
 80131b8:	4602      	mov	r2, r0
 80131ba:	2300      	movs	r3, #0
 80131bc:	f360 0307 	bfi	r3, r0, #0, #8
 80131c0:	f362 230f 	bfi	r3, r2, #8, #8
 80131c4:	f364 4317 	bfi	r3, r4, #16, #8
 80131c8:	f361 631f 	bfi	r3, r1, #24, #8
 80131cc:	b2da      	uxtb	r2, r3
 80131ce:	2000      	movs	r0, #0
 80131d0:	f362 0007 	bfi	r0, r2, #0, #8
 80131d4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80131d8:	f362 200f 	bfi	r0, r2, #8, #8
 80131dc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80131e0:	f362 4017 	bfi	r0, r2, #16, #8
 80131e4:	0e1b      	lsrs	r3, r3, #24
 80131e6:	f363 601f 	bfi	r0, r3, #24, #8
 80131ea:	b003      	add	sp, #12
 80131ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131f0:	4770      	bx	lr
 80131f2:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80131f6:	2402      	movs	r4, #2
 80131f8:	e7df      	b.n	80131ba <uxr_stream_id_from_raw+0x16>
 80131fa:	bf00      	nop

080131fc <uxr_init_stream_storage>:
 80131fc:	2300      	movs	r3, #0
 80131fe:	7403      	strb	r3, [r0, #16]
 8013200:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8013204:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8013208:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 801320c:	4770      	bx	lr
 801320e:	bf00      	nop

08013210 <uxr_reset_stream_storage>:
 8013210:	b570      	push	{r4, r5, r6, lr}
 8013212:	7c03      	ldrb	r3, [r0, #16]
 8013214:	4604      	mov	r4, r0
 8013216:	b153      	cbz	r3, 801322e <uxr_reset_stream_storage+0x1e>
 8013218:	4606      	mov	r6, r0
 801321a:	2500      	movs	r5, #0
 801321c:	4630      	mov	r0, r6
 801321e:	f005 fa4b 	bl	80186b8 <uxr_reset_output_best_effort_stream>
 8013222:	7c23      	ldrb	r3, [r4, #16]
 8013224:	3501      	adds	r5, #1
 8013226:	42ab      	cmp	r3, r5
 8013228:	f106 0610 	add.w	r6, r6, #16
 801322c:	d8f6      	bhi.n	801321c <uxr_reset_stream_storage+0xc>
 801322e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013232:	b163      	cbz	r3, 801324e <uxr_reset_stream_storage+0x3e>
 8013234:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013238:	2500      	movs	r5, #0
 801323a:	4630      	mov	r0, r6
 801323c:	f005 f848 	bl	80182d0 <uxr_reset_input_best_effort_stream>
 8013240:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013244:	3501      	adds	r5, #1
 8013246:	42ab      	cmp	r3, r5
 8013248:	f106 0602 	add.w	r6, r6, #2
 801324c:	d8f5      	bhi.n	801323a <uxr_reset_stream_storage+0x2a>
 801324e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013252:	b163      	cbz	r3, 801326e <uxr_reset_stream_storage+0x5e>
 8013254:	f104 0618 	add.w	r6, r4, #24
 8013258:	2500      	movs	r5, #0
 801325a:	4630      	mov	r0, r6
 801325c:	f005 facc 	bl	80187f8 <uxr_reset_output_reliable_stream>
 8013260:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013264:	3501      	adds	r5, #1
 8013266:	42ab      	cmp	r3, r5
 8013268:	f106 0628 	add.w	r6, r6, #40	; 0x28
 801326c:	d8f5      	bhi.n	801325a <uxr_reset_stream_storage+0x4a>
 801326e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8013272:	b163      	cbz	r3, 801328e <uxr_reset_stream_storage+0x7e>
 8013274:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8013278:	2500      	movs	r5, #0
 801327a:	4630      	mov	r0, r6
 801327c:	f005 f890 	bl	80183a0 <uxr_reset_input_reliable_stream>
 8013280:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8013284:	3501      	adds	r5, #1
 8013286:	42ab      	cmp	r3, r5
 8013288:	f106 0618 	add.w	r6, r6, #24
 801328c:	d8f5      	bhi.n	801327a <uxr_reset_stream_storage+0x6a>
 801328e:	bd70      	pop	{r4, r5, r6, pc}

08013290 <uxr_add_output_best_effort_buffer>:
 8013290:	b530      	push	{r4, r5, lr}
 8013292:	7c04      	ldrb	r4, [r0, #16]
 8013294:	1c65      	adds	r5, r4, #1
 8013296:	b083      	sub	sp, #12
 8013298:	7405      	strb	r5, [r0, #16]
 801329a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801329e:	f005 f9ff 	bl	80186a0 <uxr_init_output_best_effort_stream>
 80132a2:	2201      	movs	r2, #1
 80132a4:	4620      	mov	r0, r4
 80132a6:	4611      	mov	r1, r2
 80132a8:	b003      	add	sp, #12
 80132aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132ae:	f7ff bf4f 	b.w	8013150 <uxr_stream_id>
 80132b2:	bf00      	nop

080132b4 <uxr_add_output_reliable_buffer>:
 80132b4:	b570      	push	{r4, r5, r6, lr}
 80132b6:	b084      	sub	sp, #16
 80132b8:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80132bc:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80132c0:	9600      	str	r6, [sp, #0]
 80132c2:	2528      	movs	r5, #40	; 0x28
 80132c4:	1c66      	adds	r6, r4, #1
 80132c6:	fb05 0504 	mla	r5, r5, r4, r0
 80132ca:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 80132ce:	f105 0018 	add.w	r0, r5, #24
 80132d2:	f005 fa5f 	bl	8018794 <uxr_init_output_reliable_stream>
 80132d6:	4620      	mov	r0, r4
 80132d8:	2201      	movs	r2, #1
 80132da:	2102      	movs	r1, #2
 80132dc:	b004      	add	sp, #16
 80132de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132e2:	f7ff bf35 	b.w	8013150 <uxr_stream_id>
 80132e6:	bf00      	nop

080132e8 <uxr_add_input_best_effort_buffer>:
 80132e8:	b510      	push	{r4, lr}
 80132ea:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80132ee:	1c62      	adds	r2, r4, #1
 80132f0:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80132f4:	b082      	sub	sp, #8
 80132f6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80132fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80132fe:	f004 ffe3 	bl	80182c8 <uxr_init_input_best_effort_stream>
 8013302:	4620      	mov	r0, r4
 8013304:	2200      	movs	r2, #0
 8013306:	2101      	movs	r1, #1
 8013308:	b002      	add	sp, #8
 801330a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801330e:	f7ff bf1f 	b.w	8013150 <uxr_stream_id>
 8013312:	bf00      	nop

08013314 <uxr_add_input_reliable_buffer>:
 8013314:	b570      	push	{r4, r5, r6, lr}
 8013316:	b084      	sub	sp, #16
 8013318:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 801331c:	9e08      	ldr	r6, [sp, #32]
 801331e:	9600      	str	r6, [sp, #0]
 8013320:	2518      	movs	r5, #24
 8013322:	1c66      	adds	r6, r4, #1
 8013324:	fb05 0504 	mla	r5, r5, r4, r0
 8013328:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 801332c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8013330:	f005 f812 	bl	8018358 <uxr_init_input_reliable_stream>
 8013334:	4620      	mov	r0, r4
 8013336:	2200      	movs	r2, #0
 8013338:	2102      	movs	r1, #2
 801333a:	b004      	add	sp, #16
 801333c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013340:	f7ff bf06 	b.w	8013150 <uxr_stream_id>

08013344 <uxr_get_output_best_effort_stream>:
 8013344:	7c03      	ldrb	r3, [r0, #16]
 8013346:	428b      	cmp	r3, r1
 8013348:	bf8c      	ite	hi
 801334a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801334e:	2000      	movls	r0, #0
 8013350:	4770      	bx	lr
 8013352:	bf00      	nop

08013354 <uxr_get_output_reliable_stream>:
 8013354:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013358:	428b      	cmp	r3, r1
 801335a:	bf83      	ittte	hi
 801335c:	2328      	movhi	r3, #40	; 0x28
 801335e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8013362:	f101 0018 	addhi.w	r0, r1, #24
 8013366:	2000      	movls	r0, #0
 8013368:	4770      	bx	lr
 801336a:	bf00      	nop

0801336c <uxr_get_input_best_effort_stream>:
 801336c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8013370:	428b      	cmp	r3, r1
 8013372:	bf86      	itte	hi
 8013374:	3121      	addhi	r1, #33	; 0x21
 8013376:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801337a:	2000      	movls	r0, #0
 801337c:	4770      	bx	lr
 801337e:	bf00      	nop

08013380 <uxr_get_input_reliable_stream>:
 8013380:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8013384:	428b      	cmp	r3, r1
 8013386:	bf83      	ittte	hi
 8013388:	2318      	movhi	r3, #24
 801338a:	fb03 0101 	mlahi	r1, r3, r1, r0
 801338e:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 8013392:	2000      	movls	r0, #0
 8013394:	4770      	bx	lr
 8013396:	bf00      	nop

08013398 <uxr_output_streams_confirmed>:
 8013398:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801339c:	b183      	cbz	r3, 80133c0 <uxr_output_streams_confirmed+0x28>
 801339e:	b570      	push	{r4, r5, r6, lr}
 80133a0:	4606      	mov	r6, r0
 80133a2:	f100 0518 	add.w	r5, r0, #24
 80133a6:	2400      	movs	r4, #0
 80133a8:	e001      	b.n	80133ae <uxr_output_streams_confirmed+0x16>
 80133aa:	3528      	adds	r5, #40	; 0x28
 80133ac:	b138      	cbz	r0, 80133be <uxr_output_streams_confirmed+0x26>
 80133ae:	4628      	mov	r0, r5
 80133b0:	f005 fc86 	bl	8018cc0 <uxr_is_output_up_to_date>
 80133b4:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80133b8:	3401      	adds	r4, #1
 80133ba:	42a3      	cmp	r3, r4
 80133bc:	d8f5      	bhi.n	80133aa <uxr_output_streams_confirmed+0x12>
 80133be:	bd70      	pop	{r4, r5, r6, pc}
 80133c0:	2001      	movs	r0, #1
 80133c2:	4770      	bx	lr

080133c4 <uxr_buffer_submessage_header>:
 80133c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133c6:	4604      	mov	r4, r0
 80133c8:	460e      	mov	r6, r1
 80133ca:	2104      	movs	r1, #4
 80133cc:	4615      	mov	r5, r2
 80133ce:	461f      	mov	r7, r3
 80133d0:	f7fe fa6c 	bl	80118ac <ucdr_align_to>
 80133d4:	2301      	movs	r3, #1
 80133d6:	ea47 0203 	orr.w	r2, r7, r3
 80133da:	4631      	mov	r1, r6
 80133dc:	7523      	strb	r3, [r4, #20]
 80133de:	4620      	mov	r0, r4
 80133e0:	462b      	mov	r3, r5
 80133e2:	f000 fa2b 	bl	801383c <uxr_serialize_submessage_header>
 80133e6:	4620      	mov	r0, r4
 80133e8:	f7fe fa76 	bl	80118d8 <ucdr_buffer_remaining>
 80133ec:	42a8      	cmp	r0, r5
 80133ee:	bf34      	ite	cc
 80133f0:	2000      	movcc	r0, #0
 80133f2:	2001      	movcs	r0, #1
 80133f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133f6:	bf00      	nop

080133f8 <uxr_read_submessage_header>:
 80133f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133fc:	4604      	mov	r4, r0
 80133fe:	460d      	mov	r5, r1
 8013400:	2104      	movs	r1, #4
 8013402:	4616      	mov	r6, r2
 8013404:	4698      	mov	r8, r3
 8013406:	f7fe fa51 	bl	80118ac <ucdr_align_to>
 801340a:	4620      	mov	r0, r4
 801340c:	f7fe fa64 	bl	80118d8 <ucdr_buffer_remaining>
 8013410:	2803      	cmp	r0, #3
 8013412:	bf8c      	ite	hi
 8013414:	2701      	movhi	r7, #1
 8013416:	2700      	movls	r7, #0
 8013418:	d802      	bhi.n	8013420 <uxr_read_submessage_header+0x28>
 801341a:	4638      	mov	r0, r7
 801341c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013420:	4633      	mov	r3, r6
 8013422:	4642      	mov	r2, r8
 8013424:	4620      	mov	r0, r4
 8013426:	4629      	mov	r1, r5
 8013428:	f000 fa1c 	bl	8013864 <uxr_deserialize_submessage_header>
 801342c:	f898 3000 	ldrb.w	r3, [r8]
 8013430:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8013434:	f003 0301 	and.w	r3, r3, #1
 8013438:	f888 2000 	strb.w	r2, [r8]
 801343c:	7523      	strb	r3, [r4, #20]
 801343e:	4638      	mov	r0, r7
 8013440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013444 <uxr_submessage_padding>:
 8013444:	f010 0003 	ands.w	r0, r0, #3
 8013448:	bf18      	it	ne
 801344a:	f1c0 0004 	rsbne	r0, r0, #4
 801344e:	4770      	bx	lr

08013450 <uxr_millis>:
 8013450:	b510      	push	{r4, lr}
 8013452:	b084      	sub	sp, #16
 8013454:	4669      	mov	r1, sp
 8013456:	2001      	movs	r0, #1
 8013458:	f7f0 f9be 	bl	80037d8 <clock_gettime>
 801345c:	e9dd 2400 	ldrd	r2, r4, [sp]
 8013460:	4907      	ldr	r1, [pc, #28]	; (8013480 <uxr_millis+0x30>)
 8013462:	9802      	ldr	r0, [sp, #8]
 8013464:	fba2 2301 	umull	r2, r3, r2, r1
 8013468:	fb01 3304 	mla	r3, r1, r4, r3
 801346c:	4604      	mov	r4, r0
 801346e:	1810      	adds	r0, r2, r0
 8013470:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8013474:	4a03      	ldr	r2, [pc, #12]	; (8013484 <uxr_millis+0x34>)
 8013476:	2300      	movs	r3, #0
 8013478:	f7ed fbc0 	bl	8000bfc <__aeabi_ldivmod>
 801347c:	b004      	add	sp, #16
 801347e:	bd10      	pop	{r4, pc}
 8013480:	3b9aca00 	.word	0x3b9aca00
 8013484:	000f4240 	.word	0x000f4240

08013488 <uxr_nanos>:
 8013488:	b510      	push	{r4, lr}
 801348a:	b084      	sub	sp, #16
 801348c:	4669      	mov	r1, sp
 801348e:	2001      	movs	r0, #1
 8013490:	f7f0 f9a2 	bl	80037d8 <clock_gettime>
 8013494:	e9dd 2400 	ldrd	r2, r4, [sp]
 8013498:	4905      	ldr	r1, [pc, #20]	; (80134b0 <uxr_nanos+0x28>)
 801349a:	9802      	ldr	r0, [sp, #8]
 801349c:	fba2 2301 	umull	r2, r3, r2, r1
 80134a0:	fb01 3304 	mla	r3, r1, r4, r3
 80134a4:	4604      	mov	r4, r0
 80134a6:	1810      	adds	r0, r2, r0
 80134a8:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 80134ac:	b004      	add	sp, #16
 80134ae:	bd10      	pop	{r4, pc}
 80134b0:	3b9aca00 	.word	0x3b9aca00

080134b4 <on_full_output_buffer_fragmented>:
 80134b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134b8:	460c      	mov	r4, r1
 80134ba:	b08a      	sub	sp, #40	; 0x28
 80134bc:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80134c0:	4606      	mov	r6, r0
 80134c2:	f104 0008 	add.w	r0, r4, #8
 80134c6:	f7ff ff45 	bl	8013354 <uxr_get_output_reliable_stream>
 80134ca:	4605      	mov	r5, r0
 80134cc:	f005 fc02 	bl	8018cd4 <get_available_free_slots>
 80134d0:	b968      	cbnz	r0, 80134ee <on_full_output_buffer_fragmented+0x3a>
 80134d2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80134d6:	4620      	mov	r0, r4
 80134d8:	4798      	blx	r3
 80134da:	b918      	cbnz	r0, 80134e4 <on_full_output_buffer_fragmented+0x30>
 80134dc:	2001      	movs	r0, #1
 80134de:	b00a      	add	sp, #40	; 0x28
 80134e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134e4:	4628      	mov	r0, r5
 80134e6:	f005 fbf5 	bl	8018cd4 <get_available_free_slots>
 80134ea:	2800      	cmp	r0, #0
 80134ec:	d0f6      	beq.n	80134dc <on_full_output_buffer_fragmented+0x28>
 80134ee:	8928      	ldrh	r0, [r5, #8]
 80134f0:	89eb      	ldrh	r3, [r5, #14]
 80134f2:	7b2a      	ldrb	r2, [r5, #12]
 80134f4:	fbb3 f1f0 	udiv	r1, r3, r0
 80134f8:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 80134fc:	fb00 3111 	mls	r1, r0, r1, r3
 8013500:	b28b      	uxth	r3, r1
 8013502:	32fc      	adds	r2, #252	; 0xfc
 8013504:	6869      	ldr	r1, [r5, #4]
 8013506:	fbb1 f1f0 	udiv	r1, r1, r0
 801350a:	1f0f      	subs	r7, r1, #4
 801350c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8013510:	fb01 f103 	mul.w	r1, r1, r3
 8013514:	443a      	add	r2, r7
 8013516:	682b      	ldr	r3, [r5, #0]
 8013518:	fa1f f882 	uxth.w	r8, r2
 801351c:	3104      	adds	r1, #4
 801351e:	4419      	add	r1, r3
 8013520:	eba0 0008 	sub.w	r0, r0, r8
 8013524:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8013528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801352c:	9300      	str	r3, [sp, #0]
 801352e:	463a      	mov	r2, r7
 8013530:	2300      	movs	r3, #0
 8013532:	a802      	add	r0, sp, #8
 8013534:	f7fe f98e 	bl	8011854 <ucdr_init_buffer_origin_offset>
 8013538:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801353c:	f102 0308 	add.w	r3, r2, #8
 8013540:	42bb      	cmp	r3, r7
 8013542:	d927      	bls.n	8013594 <on_full_output_buffer_fragmented+0xe0>
 8013544:	4642      	mov	r2, r8
 8013546:	2300      	movs	r3, #0
 8013548:	210d      	movs	r1, #13
 801354a:	a802      	add	r0, sp, #8
 801354c:	f7ff ff3a 	bl	80133c4 <uxr_buffer_submessage_header>
 8013550:	8928      	ldrh	r0, [r5, #8]
 8013552:	89eb      	ldrh	r3, [r5, #14]
 8013554:	fbb3 f1f0 	udiv	r1, r3, r0
 8013558:	fb00 3111 	mls	r1, r0, r1, r3
 801355c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013560:	b289      	uxth	r1, r1
 8013562:	fbb3 f3f0 	udiv	r3, r3, r0
 8013566:	fb03 f301 	mul.w	r3, r3, r1
 801356a:	50d7      	str	r7, [r2, r3]
 801356c:	89e8      	ldrh	r0, [r5, #14]
 801356e:	2101      	movs	r1, #1
 8013570:	f005 fbd0 	bl	8018d14 <uxr_seq_num_add>
 8013574:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8013578:	81e8      	strh	r0, [r5, #14]
 801357a:	1a52      	subs	r2, r2, r1
 801357c:	4630      	mov	r0, r6
 801357e:	f7fe f97b 	bl	8011878 <ucdr_init_buffer>
 8013582:	4630      	mov	r0, r6
 8013584:	490f      	ldr	r1, [pc, #60]	; (80135c4 <on_full_output_buffer_fragmented+0x110>)
 8013586:	4622      	mov	r2, r4
 8013588:	f7fe f94c 	bl	8011824 <ucdr_set_on_full_buffer_callback>
 801358c:	2000      	movs	r0, #0
 801358e:	b00a      	add	sp, #40	; 0x28
 8013590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013594:	b292      	uxth	r2, r2
 8013596:	2302      	movs	r3, #2
 8013598:	210d      	movs	r1, #13
 801359a:	a802      	add	r0, sp, #8
 801359c:	f7ff ff12 	bl	80133c4 <uxr_buffer_submessage_header>
 80135a0:	8928      	ldrh	r0, [r5, #8]
 80135a2:	89eb      	ldrh	r3, [r5, #14]
 80135a4:	fbb3 f2f0 	udiv	r2, r3, r0
 80135a8:	fb00 3212 	mls	r2, r0, r2, r3
 80135ac:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80135b0:	686b      	ldr	r3, [r5, #4]
 80135b2:	fbb3 f3f0 	udiv	r3, r3, r0
 80135b6:	b292      	uxth	r2, r2
 80135b8:	6828      	ldr	r0, [r5, #0]
 80135ba:	fb03 f302 	mul.w	r3, r3, r2
 80135be:	3108      	adds	r1, #8
 80135c0:	50c1      	str	r1, [r0, r3]
 80135c2:	e7d3      	b.n	801356c <on_full_output_buffer_fragmented+0xb8>
 80135c4:	080134b5 	.word	0x080134b5

080135c8 <uxr_prepare_output_stream>:
 80135c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135ca:	b087      	sub	sp, #28
 80135cc:	2407      	movs	r4, #7
 80135ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80135d0:	9202      	str	r2, [sp, #8]
 80135d2:	2500      	movs	r5, #0
 80135d4:	1d32      	adds	r2, r6, #4
 80135d6:	e9cd 4500 	strd	r4, r5, [sp]
 80135da:	9103      	str	r1, [sp, #12]
 80135dc:	461c      	mov	r4, r3
 80135de:	4606      	mov	r6, r0
 80135e0:	f7ff fc4c 	bl	8012e7c <uxr_prepare_stream_to_write_submessage>
 80135e4:	f080 0201 	eor.w	r2, r0, #1
 80135e8:	b2d2      	uxtb	r2, r2
 80135ea:	75a2      	strb	r2, [r4, #22]
 80135ec:	b112      	cbz	r2, 80135f4 <uxr_prepare_output_stream+0x2c>
 80135ee:	4628      	mov	r0, r5
 80135f0:	b007      	add	sp, #28
 80135f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135f4:	aa05      	add	r2, sp, #20
 80135f6:	9902      	ldr	r1, [sp, #8]
 80135f8:	4630      	mov	r0, r6
 80135fa:	f7ff fd79 	bl	80130f0 <uxr_init_base_object_request>
 80135fe:	a905      	add	r1, sp, #20
 8013600:	4605      	mov	r5, r0
 8013602:	4620      	mov	r0, r4
 8013604:	f001 f872 	bl	80146ec <uxr_serialize_WRITE_DATA_Payload_Data>
 8013608:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801360c:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8013610:	1a52      	subs	r2, r2, r1
 8013612:	4620      	mov	r0, r4
 8013614:	f7fe f930 	bl	8011878 <ucdr_init_buffer>
 8013618:	4620      	mov	r0, r4
 801361a:	463a      	mov	r2, r7
 801361c:	4631      	mov	r1, r6
 801361e:	f7fe f901 	bl	8011824 <ucdr_set_on_full_buffer_callback>
 8013622:	4628      	mov	r0, r5
 8013624:	b007      	add	sp, #28
 8013626:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013628 <uxr_prepare_output_stream_fragmented>:
 8013628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801362c:	b093      	sub	sp, #76	; 0x4c
 801362e:	4605      	mov	r5, r0
 8013630:	9107      	str	r1, [sp, #28]
 8013632:	3008      	adds	r0, #8
 8013634:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013638:	9303      	str	r3, [sp, #12]
 801363a:	9206      	str	r2, [sp, #24]
 801363c:	f7ff fe8a 	bl	8013354 <uxr_get_output_reliable_stream>
 8013640:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013644:	2b01      	cmp	r3, #1
 8013646:	f000 8094 	beq.w	8013772 <uxr_prepare_output_stream_fragmented+0x14a>
 801364a:	4604      	mov	r4, r0
 801364c:	2800      	cmp	r0, #0
 801364e:	f000 8090 	beq.w	8013772 <uxr_prepare_output_stream_fragmented+0x14a>
 8013652:	f005 fb3f 	bl	8018cd4 <get_available_free_slots>
 8013656:	2800      	cmp	r0, #0
 8013658:	f000 8086 	beq.w	8013768 <uxr_prepare_output_stream_fragmented+0x140>
 801365c:	8922      	ldrh	r2, [r4, #8]
 801365e:	89e7      	ldrh	r7, [r4, #14]
 8013660:	fbb7 f8f2 	udiv	r8, r7, r2
 8013664:	e9d4 3100 	ldrd	r3, r1, [r4]
 8013668:	fb02 7818 	mls	r8, r2, r8, r7
 801366c:	fa1f f888 	uxth.w	r8, r8
 8013670:	fbb1 f2f2 	udiv	r2, r1, r2
 8013674:	fb02 f808 	mul.w	r8, r2, r8
 8013678:	f108 0804 	add.w	r8, r8, #4
 801367c:	4498      	add	r8, r3
 801367e:	7b23      	ldrb	r3, [r4, #12]
 8013680:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8013684:	9204      	str	r2, [sp, #16]
 8013686:	4553      	cmp	r3, sl
 8013688:	f1a2 0b04 	sub.w	fp, r2, #4
 801368c:	d37d      	bcc.n	801378a <uxr_prepare_output_stream_fragmented+0x162>
 801368e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8013690:	f8cd a000 	str.w	sl, [sp]
 8013694:	f1ab 0904 	sub.w	r9, fp, #4
 8013698:	eba9 0903 	sub.w	r9, r9, r3
 801369c:	3608      	adds	r6, #8
 801369e:	a80a      	add	r0, sp, #40	; 0x28
 80136a0:	2300      	movs	r3, #0
 80136a2:	465a      	mov	r2, fp
 80136a4:	4641      	mov	r1, r8
 80136a6:	fa1f f989 	uxth.w	r9, r9
 80136aa:	9605      	str	r6, [sp, #20]
 80136ac:	f7fe f8d2 	bl	8011854 <ucdr_init_buffer_origin_offset>
 80136b0:	455e      	cmp	r6, fp
 80136b2:	bf34      	ite	cc
 80136b4:	2302      	movcc	r3, #2
 80136b6:	2300      	movcs	r3, #0
 80136b8:	464a      	mov	r2, r9
 80136ba:	210d      	movs	r1, #13
 80136bc:	a80a      	add	r0, sp, #40	; 0x28
 80136be:	f7ff fe81 	bl	80133c4 <uxr_buffer_submessage_header>
 80136c2:	8920      	ldrh	r0, [r4, #8]
 80136c4:	fbb7 f3f0 	udiv	r3, r7, r0
 80136c8:	e9d4 2100 	ldrd	r2, r1, [r4]
 80136cc:	fb00 7313 	mls	r3, r0, r3, r7
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	fbb1 f1f0 	udiv	r1, r1, r0
 80136d6:	fb03 f301 	mul.w	r3, r3, r1
 80136da:	4638      	mov	r0, r7
 80136dc:	f842 b003 	str.w	fp, [r2, r3]
 80136e0:	2101      	movs	r1, #1
 80136e2:	f005 fb17 	bl	8018d14 <uxr_seq_num_add>
 80136e6:	9b04      	ldr	r3, [sp, #16]
 80136e8:	9e03      	ldr	r6, [sp, #12]
 80136ea:	f1a3 0208 	sub.w	r2, r3, #8
 80136ee:	f10a 0104 	add.w	r1, sl, #4
 80136f2:	4607      	mov	r7, r0
 80136f4:	eba2 020a 	sub.w	r2, r2, sl
 80136f8:	4441      	add	r1, r8
 80136fa:	4630      	mov	r0, r6
 80136fc:	f7fe f8bc 	bl	8011878 <ucdr_init_buffer>
 8013700:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013702:	81e7      	strh	r7, [r4, #14]
 8013704:	1d1a      	adds	r2, r3, #4
 8013706:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801370a:	bf28      	it	cs
 801370c:	2200      	movcs	r2, #0
 801370e:	b292      	uxth	r2, r2
 8013710:	2300      	movs	r3, #0
 8013712:	2107      	movs	r1, #7
 8013714:	4630      	mov	r0, r6
 8013716:	f7ff fe55 	bl	80133c4 <uxr_buffer_submessage_header>
 801371a:	9906      	ldr	r1, [sp, #24]
 801371c:	aa09      	add	r2, sp, #36	; 0x24
 801371e:	4628      	mov	r0, r5
 8013720:	f7ff fce6 	bl	80130f0 <uxr_init_base_object_request>
 8013724:	4604      	mov	r4, r0
 8013726:	b328      	cbz	r0, 8013774 <uxr_prepare_output_stream_fragmented+0x14c>
 8013728:	9e03      	ldr	r6, [sp, #12]
 801372a:	a909      	add	r1, sp, #36	; 0x24
 801372c:	4630      	mov	r0, r6
 801372e:	f000 ffdd 	bl	80146ec <uxr_serialize_WRITE_DATA_Payload_Data>
 8013732:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8013736:	4630      	mov	r0, r6
 8013738:	1a52      	subs	r2, r2, r1
 801373a:	f7fe f89d 	bl	8011878 <ucdr_init_buffer>
 801373e:	9a05      	ldr	r2, [sp, #20]
 8013740:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8013744:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013746:	9b07      	ldr	r3, [sp, #28]
 8013748:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 801374c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801374e:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 8013752:	4630      	mov	r0, r6
 8013754:	4919      	ldr	r1, [pc, #100]	; (80137bc <uxr_prepare_output_stream_fragmented+0x194>)
 8013756:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801375a:	462a      	mov	r2, r5
 801375c:	f7fe f862 	bl	8011824 <ucdr_set_on_full_buffer_callback>
 8013760:	4620      	mov	r0, r4
 8013762:	b013      	add	sp, #76	; 0x4c
 8013764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013768:	991e      	ldr	r1, [sp, #120]	; 0x78
 801376a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801376c:	4628      	mov	r0, r5
 801376e:	4798      	blx	r3
 8013770:	b920      	cbnz	r0, 801377c <uxr_prepare_output_stream_fragmented+0x154>
 8013772:	2400      	movs	r4, #0
 8013774:	4620      	mov	r0, r4
 8013776:	b013      	add	sp, #76	; 0x4c
 8013778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801377c:	4620      	mov	r0, r4
 801377e:	f005 faa9 	bl	8018cd4 <get_available_free_slots>
 8013782:	2800      	cmp	r0, #0
 8013784:	f47f af6a 	bne.w	801365c <uxr_prepare_output_stream_fragmented+0x34>
 8013788:	e7f3      	b.n	8013772 <uxr_prepare_output_stream_fragmented+0x14a>
 801378a:	4638      	mov	r0, r7
 801378c:	2101      	movs	r1, #1
 801378e:	f005 fac1 	bl	8018d14 <uxr_seq_num_add>
 8013792:	8922      	ldrh	r2, [r4, #8]
 8013794:	fbb0 f8f2 	udiv	r8, r0, r2
 8013798:	fb02 0818 	mls	r8, r2, r8, r0
 801379c:	fa1f f888 	uxth.w	r8, r8
 80137a0:	6863      	ldr	r3, [r4, #4]
 80137a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80137a6:	6822      	ldr	r2, [r4, #0]
 80137a8:	fb08 f803 	mul.w	r8, r8, r3
 80137ac:	f108 0804 	add.w	r8, r8, #4
 80137b0:	4490      	add	r8, r2
 80137b2:	7b23      	ldrb	r3, [r4, #12]
 80137b4:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80137b8:	4607      	mov	r7, r0
 80137ba:	e768      	b.n	801368e <uxr_prepare_output_stream_fragmented+0x66>
 80137bc:	080134b5 	.word	0x080134b5

080137c0 <uxr_serialize_message_header>:
 80137c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137c2:	b083      	sub	sp, #12
 80137c4:	4616      	mov	r6, r2
 80137c6:	4604      	mov	r4, r0
 80137c8:	9301      	str	r3, [sp, #4]
 80137ca:	460d      	mov	r5, r1
 80137cc:	9f08      	ldr	r7, [sp, #32]
 80137ce:	f7fd f8a9 	bl	8010924 <ucdr_serialize_uint8_t>
 80137d2:	4631      	mov	r1, r6
 80137d4:	4620      	mov	r0, r4
 80137d6:	f7fd f8a5 	bl	8010924 <ucdr_serialize_uint8_t>
 80137da:	9a01      	ldr	r2, [sp, #4]
 80137dc:	4620      	mov	r0, r4
 80137de:	2101      	movs	r1, #1
 80137e0:	f7fd f94c 	bl	8010a7c <ucdr_serialize_endian_uint16_t>
 80137e4:	062b      	lsls	r3, r5, #24
 80137e6:	d501      	bpl.n	80137ec <uxr_serialize_message_header+0x2c>
 80137e8:	b003      	add	sp, #12
 80137ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137ec:	4639      	mov	r1, r7
 80137ee:	4620      	mov	r0, r4
 80137f0:	2204      	movs	r2, #4
 80137f2:	b003      	add	sp, #12
 80137f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80137f8:	f004 bb6e 	b.w	8017ed8 <ucdr_serialize_array_uint8_t>

080137fc <uxr_deserialize_message_header>:
 80137fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137fe:	b083      	sub	sp, #12
 8013800:	4616      	mov	r6, r2
 8013802:	4604      	mov	r4, r0
 8013804:	9301      	str	r3, [sp, #4]
 8013806:	460d      	mov	r5, r1
 8013808:	9f08      	ldr	r7, [sp, #32]
 801380a:	f7fd f8a1 	bl	8010950 <ucdr_deserialize_uint8_t>
 801380e:	4631      	mov	r1, r6
 8013810:	4620      	mov	r0, r4
 8013812:	f7fd f89d 	bl	8010950 <ucdr_deserialize_uint8_t>
 8013816:	9a01      	ldr	r2, [sp, #4]
 8013818:	4620      	mov	r0, r4
 801381a:	2101      	movs	r1, #1
 801381c:	f7fd fa22 	bl	8010c64 <ucdr_deserialize_endian_uint16_t>
 8013820:	f995 3000 	ldrsb.w	r3, [r5]
 8013824:	2b00      	cmp	r3, #0
 8013826:	da01      	bge.n	801382c <uxr_deserialize_message_header+0x30>
 8013828:	b003      	add	sp, #12
 801382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801382c:	4639      	mov	r1, r7
 801382e:	4620      	mov	r0, r4
 8013830:	2204      	movs	r2, #4
 8013832:	b003      	add	sp, #12
 8013834:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013838:	f004 bbb2 	b.w	8017fa0 <ucdr_deserialize_array_uint8_t>

0801383c <uxr_serialize_submessage_header>:
 801383c:	b530      	push	{r4, r5, lr}
 801383e:	b083      	sub	sp, #12
 8013840:	4615      	mov	r5, r2
 8013842:	4604      	mov	r4, r0
 8013844:	9301      	str	r3, [sp, #4]
 8013846:	f7fd f86d 	bl	8010924 <ucdr_serialize_uint8_t>
 801384a:	4629      	mov	r1, r5
 801384c:	4620      	mov	r0, r4
 801384e:	f7fd f869 	bl	8010924 <ucdr_serialize_uint8_t>
 8013852:	9a01      	ldr	r2, [sp, #4]
 8013854:	4620      	mov	r0, r4
 8013856:	2101      	movs	r1, #1
 8013858:	b003      	add	sp, #12
 801385a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801385e:	f7fd b90d 	b.w	8010a7c <ucdr_serialize_endian_uint16_t>
 8013862:	bf00      	nop

08013864 <uxr_deserialize_submessage_header>:
 8013864:	b530      	push	{r4, r5, lr}
 8013866:	b083      	sub	sp, #12
 8013868:	4615      	mov	r5, r2
 801386a:	4604      	mov	r4, r0
 801386c:	9301      	str	r3, [sp, #4]
 801386e:	f7fd f86f 	bl	8010950 <ucdr_deserialize_uint8_t>
 8013872:	4629      	mov	r1, r5
 8013874:	4620      	mov	r0, r4
 8013876:	f7fd f86b 	bl	8010950 <ucdr_deserialize_uint8_t>
 801387a:	9a01      	ldr	r2, [sp, #4]
 801387c:	4620      	mov	r0, r4
 801387e:	2101      	movs	r1, #1
 8013880:	b003      	add	sp, #12
 8013882:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013886:	f7fd b9ed 	b.w	8010c64 <ucdr_deserialize_endian_uint16_t>
 801388a:	bf00      	nop

0801388c <uxr_serialize_CLIENT_Representation>:
 801388c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013890:	2204      	movs	r2, #4
 8013892:	460c      	mov	r4, r1
 8013894:	4605      	mov	r5, r0
 8013896:	f004 fb1f 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 801389a:	1d21      	adds	r1, r4, #4
 801389c:	4607      	mov	r7, r0
 801389e:	2202      	movs	r2, #2
 80138a0:	4628      	mov	r0, r5
 80138a2:	f004 fb19 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 80138a6:	1da1      	adds	r1, r4, #6
 80138a8:	4007      	ands	r7, r0
 80138aa:	2202      	movs	r2, #2
 80138ac:	4628      	mov	r0, r5
 80138ae:	f004 fb13 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 80138b2:	fa5f f887 	uxtb.w	r8, r7
 80138b6:	2204      	movs	r2, #4
 80138b8:	4607      	mov	r7, r0
 80138ba:	f104 0108 	add.w	r1, r4, #8
 80138be:	4628      	mov	r0, r5
 80138c0:	f004 fb0a 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 80138c4:	ea08 0707 	and.w	r7, r8, r7
 80138c8:	7b21      	ldrb	r1, [r4, #12]
 80138ca:	4680      	mov	r8, r0
 80138cc:	4628      	mov	r0, r5
 80138ce:	f7fd f829 	bl	8010924 <ucdr_serialize_uint8_t>
 80138d2:	ea08 0807 	and.w	r8, r8, r7
 80138d6:	7b61      	ldrb	r1, [r4, #13]
 80138d8:	4607      	mov	r7, r0
 80138da:	4628      	mov	r0, r5
 80138dc:	f7fc fff2 	bl	80108c4 <ucdr_serialize_bool>
 80138e0:	7b63      	ldrb	r3, [r4, #13]
 80138e2:	ea08 0707 	and.w	r7, r8, r7
 80138e6:	ea07 0600 	and.w	r6, r7, r0
 80138ea:	b933      	cbnz	r3, 80138fa <uxr_serialize_CLIENT_Representation+0x6e>
 80138ec:	8ba1      	ldrh	r1, [r4, #28]
 80138ee:	4628      	mov	r0, r5
 80138f0:	f7fd f844 	bl	801097c <ucdr_serialize_uint16_t>
 80138f4:	4030      	ands	r0, r6
 80138f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138fa:	6921      	ldr	r1, [r4, #16]
 80138fc:	4628      	mov	r0, r5
 80138fe:	f7fd fa27 	bl	8010d50 <ucdr_serialize_uint32_t>
 8013902:	6923      	ldr	r3, [r4, #16]
 8013904:	b1cb      	cbz	r3, 801393a <uxr_serialize_CLIENT_Representation+0xae>
 8013906:	b1d0      	cbz	r0, 801393e <uxr_serialize_CLIENT_Representation+0xb2>
 8013908:	46a0      	mov	r8, r4
 801390a:	f04f 0900 	mov.w	r9, #0
 801390e:	e002      	b.n	8013916 <uxr_serialize_CLIENT_Representation+0x8a>
 8013910:	f108 0808 	add.w	r8, r8, #8
 8013914:	b198      	cbz	r0, 801393e <uxr_serialize_CLIENT_Representation+0xb2>
 8013916:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801391a:	4628      	mov	r0, r5
 801391c:	f004 fbfc 	bl	8018118 <ucdr_serialize_string>
 8013920:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013924:	4607      	mov	r7, r0
 8013926:	4628      	mov	r0, r5
 8013928:	f004 fbf6 	bl	8018118 <ucdr_serialize_string>
 801392c:	6923      	ldr	r3, [r4, #16]
 801392e:	f109 0901 	add.w	r9, r9, #1
 8013932:	4038      	ands	r0, r7
 8013934:	4599      	cmp	r9, r3
 8013936:	b2c0      	uxtb	r0, r0
 8013938:	d3ea      	bcc.n	8013910 <uxr_serialize_CLIENT_Representation+0x84>
 801393a:	4006      	ands	r6, r0
 801393c:	e7d6      	b.n	80138ec <uxr_serialize_CLIENT_Representation+0x60>
 801393e:	2600      	movs	r6, #0
 8013940:	e7d4      	b.n	80138ec <uxr_serialize_CLIENT_Representation+0x60>
 8013942:	bf00      	nop

08013944 <uxr_deserialize_CLIENT_Representation>:
 8013944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013948:	2204      	movs	r2, #4
 801394a:	460c      	mov	r4, r1
 801394c:	4605      	mov	r5, r0
 801394e:	f004 fb27 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 8013952:	1d21      	adds	r1, r4, #4
 8013954:	4607      	mov	r7, r0
 8013956:	2202      	movs	r2, #2
 8013958:	4628      	mov	r0, r5
 801395a:	f004 fb21 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 801395e:	1da1      	adds	r1, r4, #6
 8013960:	4007      	ands	r7, r0
 8013962:	2202      	movs	r2, #2
 8013964:	4628      	mov	r0, r5
 8013966:	f004 fb1b 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 801396a:	fa5f f887 	uxtb.w	r8, r7
 801396e:	2204      	movs	r2, #4
 8013970:	4607      	mov	r7, r0
 8013972:	f104 0108 	add.w	r1, r4, #8
 8013976:	4628      	mov	r0, r5
 8013978:	f004 fb12 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 801397c:	ea08 0707 	and.w	r7, r8, r7
 8013980:	f104 010c 	add.w	r1, r4, #12
 8013984:	4680      	mov	r8, r0
 8013986:	4628      	mov	r0, r5
 8013988:	f7fc ffe2 	bl	8010950 <ucdr_deserialize_uint8_t>
 801398c:	ea08 0807 	and.w	r8, r8, r7
 8013990:	f104 010d 	add.w	r1, r4, #13
 8013994:	4607      	mov	r7, r0
 8013996:	4628      	mov	r0, r5
 8013998:	f7fc ffaa 	bl	80108f0 <ucdr_deserialize_bool>
 801399c:	7b63      	ldrb	r3, [r4, #13]
 801399e:	ea08 0707 	and.w	r7, r8, r7
 80139a2:	ea07 0600 	and.w	r6, r7, r0
 80139a6:	b93b      	cbnz	r3, 80139b8 <uxr_deserialize_CLIENT_Representation+0x74>
 80139a8:	f104 011c 	add.w	r1, r4, #28
 80139ac:	4628      	mov	r0, r5
 80139ae:	f7fd f8e5 	bl	8010b7c <ucdr_deserialize_uint16_t>
 80139b2:	4030      	ands	r0, r6
 80139b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139b8:	f104 0110 	add.w	r1, r4, #16
 80139bc:	4628      	mov	r0, r5
 80139be:	f7fd faf7 	bl	8010fb0 <ucdr_deserialize_uint32_t>
 80139c2:	6923      	ldr	r3, [r4, #16]
 80139c4:	2b01      	cmp	r3, #1
 80139c6:	d903      	bls.n	80139d0 <uxr_deserialize_CLIENT_Representation+0x8c>
 80139c8:	2301      	movs	r3, #1
 80139ca:	75ab      	strb	r3, [r5, #22]
 80139cc:	2600      	movs	r6, #0
 80139ce:	e7eb      	b.n	80139a8 <uxr_deserialize_CLIENT_Representation+0x64>
 80139d0:	b1fb      	cbz	r3, 8013a12 <uxr_deserialize_CLIENT_Representation+0xce>
 80139d2:	2800      	cmp	r0, #0
 80139d4:	d0fa      	beq.n	80139cc <uxr_deserialize_CLIENT_Representation+0x88>
 80139d6:	46a0      	mov	r8, r4
 80139d8:	f04f 0900 	mov.w	r9, #0
 80139dc:	e003      	b.n	80139e6 <uxr_deserialize_CLIENT_Representation+0xa2>
 80139de:	f108 0808 	add.w	r8, r8, #8
 80139e2:	2800      	cmp	r0, #0
 80139e4:	d0f2      	beq.n	80139cc <uxr_deserialize_CLIENT_Representation+0x88>
 80139e6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80139ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80139ee:	4628      	mov	r0, r5
 80139f0:	f004 fba2 	bl	8018138 <ucdr_deserialize_string>
 80139f4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80139f8:	4607      	mov	r7, r0
 80139fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80139fe:	4628      	mov	r0, r5
 8013a00:	f004 fb9a 	bl	8018138 <ucdr_deserialize_string>
 8013a04:	6923      	ldr	r3, [r4, #16]
 8013a06:	f109 0901 	add.w	r9, r9, #1
 8013a0a:	4038      	ands	r0, r7
 8013a0c:	4599      	cmp	r9, r3
 8013a0e:	b2c0      	uxtb	r0, r0
 8013a10:	d3e5      	bcc.n	80139de <uxr_deserialize_CLIENT_Representation+0x9a>
 8013a12:	4006      	ands	r6, r0
 8013a14:	e7c8      	b.n	80139a8 <uxr_deserialize_CLIENT_Representation+0x64>
 8013a16:	bf00      	nop

08013a18 <uxr_serialize_AGENT_Representation>:
 8013a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a1c:	2204      	movs	r2, #4
 8013a1e:	460c      	mov	r4, r1
 8013a20:	4605      	mov	r5, r0
 8013a22:	f004 fa59 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8013a26:	1d21      	adds	r1, r4, #4
 8013a28:	4606      	mov	r6, r0
 8013a2a:	2202      	movs	r2, #2
 8013a2c:	4628      	mov	r0, r5
 8013a2e:	f004 fa53 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8013a32:	1da1      	adds	r1, r4, #6
 8013a34:	4006      	ands	r6, r0
 8013a36:	2202      	movs	r2, #2
 8013a38:	4628      	mov	r0, r5
 8013a3a:	f004 fa4d 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8013a3e:	b2f6      	uxtb	r6, r6
 8013a40:	4603      	mov	r3, r0
 8013a42:	7a21      	ldrb	r1, [r4, #8]
 8013a44:	4628      	mov	r0, r5
 8013a46:	401e      	ands	r6, r3
 8013a48:	f7fc ff3c 	bl	80108c4 <ucdr_serialize_bool>
 8013a4c:	7a23      	ldrb	r3, [r4, #8]
 8013a4e:	ea00 0706 	and.w	r7, r0, r6
 8013a52:	b913      	cbnz	r3, 8013a5a <uxr_serialize_AGENT_Representation+0x42>
 8013a54:	4638      	mov	r0, r7
 8013a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a5a:	68e1      	ldr	r1, [r4, #12]
 8013a5c:	4628      	mov	r0, r5
 8013a5e:	f7fd f977 	bl	8010d50 <ucdr_serialize_uint32_t>
 8013a62:	68e3      	ldr	r3, [r4, #12]
 8013a64:	b313      	cbz	r3, 8013aac <uxr_serialize_AGENT_Representation+0x94>
 8013a66:	b1e8      	cbz	r0, 8013aa4 <uxr_serialize_AGENT_Representation+0x8c>
 8013a68:	46a0      	mov	r8, r4
 8013a6a:	f04f 0900 	mov.w	r9, #0
 8013a6e:	e002      	b.n	8013a76 <uxr_serialize_AGENT_Representation+0x5e>
 8013a70:	f108 0808 	add.w	r8, r8, #8
 8013a74:	b1b3      	cbz	r3, 8013aa4 <uxr_serialize_AGENT_Representation+0x8c>
 8013a76:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a7a:	4628      	mov	r0, r5
 8013a7c:	f004 fb4c 	bl	8018118 <ucdr_serialize_string>
 8013a80:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013a84:	4606      	mov	r6, r0
 8013a86:	4628      	mov	r0, r5
 8013a88:	f004 fb46 	bl	8018118 <ucdr_serialize_string>
 8013a8c:	68e2      	ldr	r2, [r4, #12]
 8013a8e:	f109 0901 	add.w	r9, r9, #1
 8013a92:	ea06 0300 	and.w	r3, r6, r0
 8013a96:	4591      	cmp	r9, r2
 8013a98:	b2db      	uxtb	r3, r3
 8013a9a:	d3e9      	bcc.n	8013a70 <uxr_serialize_AGENT_Representation+0x58>
 8013a9c:	401f      	ands	r7, r3
 8013a9e:	4638      	mov	r0, r7
 8013aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013aa4:	2700      	movs	r7, #0
 8013aa6:	4638      	mov	r0, r7
 8013aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013aac:	4007      	ands	r7, r0
 8013aae:	e7d1      	b.n	8013a54 <uxr_serialize_AGENT_Representation+0x3c>

08013ab0 <uxr_serialize_ObjectVariant.part.0>:
 8013ab0:	b570      	push	{r4, r5, r6, lr}
 8013ab2:	780b      	ldrb	r3, [r1, #0]
 8013ab4:	3b01      	subs	r3, #1
 8013ab6:	460c      	mov	r4, r1
 8013ab8:	4605      	mov	r5, r0
 8013aba:	2b0d      	cmp	r3, #13
 8013abc:	d869      	bhi.n	8013b92 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013abe:	e8df f003 	tbb	[pc, r3]
 8013ac2:	074a      	.short	0x074a
 8013ac4:	07073030 	.word	0x07073030
 8013ac8:	21680707 	.word	0x21680707
 8013acc:	45632121 	.word	0x45632121
 8013ad0:	7909      	ldrb	r1, [r1, #4]
 8013ad2:	f7fc ff27 	bl	8010924 <ucdr_serialize_uint8_t>
 8013ad6:	4606      	mov	r6, r0
 8013ad8:	b158      	cbz	r0, 8013af2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013ada:	7923      	ldrb	r3, [r4, #4]
 8013adc:	2b02      	cmp	r3, #2
 8013ade:	d003      	beq.n	8013ae8 <uxr_serialize_ObjectVariant.part.0+0x38>
 8013ae0:	2b03      	cmp	r3, #3
 8013ae2:	d029      	beq.n	8013b38 <uxr_serialize_ObjectVariant.part.0+0x88>
 8013ae4:	2b01      	cmp	r3, #1
 8013ae6:	d104      	bne.n	8013af2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013ae8:	68a1      	ldr	r1, [r4, #8]
 8013aea:	4628      	mov	r0, r5
 8013aec:	f004 fb14 	bl	8018118 <ucdr_serialize_string>
 8013af0:	4606      	mov	r6, r0
 8013af2:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8013af6:	4628      	mov	r0, r5
 8013af8:	2202      	movs	r2, #2
 8013afa:	f004 f9ed 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8013afe:	4030      	ands	r0, r6
 8013b00:	b2c0      	uxtb	r0, r0
 8013b02:	bd70      	pop	{r4, r5, r6, pc}
 8013b04:	7909      	ldrb	r1, [r1, #4]
 8013b06:	f7fc ff0d 	bl	8010924 <ucdr_serialize_uint8_t>
 8013b0a:	b1e8      	cbz	r0, 8013b48 <uxr_serialize_ObjectVariant.part.0+0x98>
 8013b0c:	7923      	ldrb	r3, [r4, #4]
 8013b0e:	2b01      	cmp	r3, #1
 8013b10:	d001      	beq.n	8013b16 <uxr_serialize_ObjectVariant.part.0+0x66>
 8013b12:	2b02      	cmp	r3, #2
 8013b14:	d13d      	bne.n	8013b92 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013b16:	68a1      	ldr	r1, [r4, #8]
 8013b18:	4628      	mov	r0, r5
 8013b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b1e:	f004 bafb 	b.w	8018118 <ucdr_serialize_string>
 8013b22:	7909      	ldrb	r1, [r1, #4]
 8013b24:	f7fc fefe 	bl	8010924 <ucdr_serialize_uint8_t>
 8013b28:	4606      	mov	r6, r0
 8013b2a:	2800      	cmp	r0, #0
 8013b2c:	d0e1      	beq.n	8013af2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b2e:	7923      	ldrb	r3, [r4, #4]
 8013b30:	2b02      	cmp	r3, #2
 8013b32:	d0d9      	beq.n	8013ae8 <uxr_serialize_ObjectVariant.part.0+0x38>
 8013b34:	2b03      	cmp	r3, #3
 8013b36:	d1dc      	bne.n	8013af2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b38:	68a2      	ldr	r2, [r4, #8]
 8013b3a:	f104 010c 	add.w	r1, r4, #12
 8013b3e:	4628      	mov	r0, r5
 8013b40:	f004 fabe 	bl	80180c0 <ucdr_serialize_sequence_uint8_t>
 8013b44:	4606      	mov	r6, r0
 8013b46:	e7d4      	b.n	8013af2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b48:	2000      	movs	r0, #0
 8013b4a:	bd70      	pop	{r4, r5, r6, pc}
 8013b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b50:	3104      	adds	r1, #4
 8013b52:	f7ff be9b 	b.w	801388c <uxr_serialize_CLIENT_Representation>
 8013b56:	7909      	ldrb	r1, [r1, #4]
 8013b58:	f7fc fee4 	bl	8010924 <ucdr_serialize_uint8_t>
 8013b5c:	4606      	mov	r6, r0
 8013b5e:	b158      	cbz	r0, 8013b78 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013b60:	7923      	ldrb	r3, [r4, #4]
 8013b62:	2b02      	cmp	r3, #2
 8013b64:	d003      	beq.n	8013b6e <uxr_serialize_ObjectVariant.part.0+0xbe>
 8013b66:	2b03      	cmp	r3, #3
 8013b68:	d015      	beq.n	8013b96 <uxr_serialize_ObjectVariant.part.0+0xe6>
 8013b6a:	2b01      	cmp	r3, #1
 8013b6c:	d104      	bne.n	8013b78 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013b6e:	68a1      	ldr	r1, [r4, #8]
 8013b70:	4628      	mov	r0, r5
 8013b72:	f004 fad1 	bl	8018118 <ucdr_serialize_string>
 8013b76:	4606      	mov	r6, r0
 8013b78:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8013b7c:	4628      	mov	r0, r5
 8013b7e:	f7fd fc0d 	bl	801139c <ucdr_serialize_int16_t>
 8013b82:	4030      	ands	r0, r6
 8013b84:	b2c0      	uxtb	r0, r0
 8013b86:	bd70      	pop	{r4, r5, r6, pc}
 8013b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b8c:	3104      	adds	r1, #4
 8013b8e:	f7ff bf43 	b.w	8013a18 <uxr_serialize_AGENT_Representation>
 8013b92:	2001      	movs	r0, #1
 8013b94:	bd70      	pop	{r4, r5, r6, pc}
 8013b96:	68a2      	ldr	r2, [r4, #8]
 8013b98:	f104 010c 	add.w	r1, r4, #12
 8013b9c:	4628      	mov	r0, r5
 8013b9e:	f004 fa8f 	bl	80180c0 <ucdr_serialize_sequence_uint8_t>
 8013ba2:	4606      	mov	r6, r0
 8013ba4:	e7e8      	b.n	8013b78 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013ba6:	bf00      	nop

08013ba8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013ba8:	b570      	push	{r4, r5, r6, lr}
 8013baa:	460d      	mov	r5, r1
 8013bac:	7809      	ldrb	r1, [r1, #0]
 8013bae:	4606      	mov	r6, r0
 8013bb0:	f7fc fe88 	bl	80108c4 <ucdr_serialize_bool>
 8013bb4:	782b      	ldrb	r3, [r5, #0]
 8013bb6:	4604      	mov	r4, r0
 8013bb8:	b94b      	cbnz	r3, 8013bce <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013bba:	7a29      	ldrb	r1, [r5, #8]
 8013bbc:	4630      	mov	r0, r6
 8013bbe:	f7fc fe81 	bl	80108c4 <ucdr_serialize_bool>
 8013bc2:	7a2b      	ldrb	r3, [r5, #8]
 8013bc4:	4004      	ands	r4, r0
 8013bc6:	b2e4      	uxtb	r4, r4
 8013bc8:	b943      	cbnz	r3, 8013bdc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013bca:	4620      	mov	r0, r4
 8013bcc:	bd70      	pop	{r4, r5, r6, pc}
 8013bce:	6869      	ldr	r1, [r5, #4]
 8013bd0:	4630      	mov	r0, r6
 8013bd2:	f004 faa1 	bl	8018118 <ucdr_serialize_string>
 8013bd6:	4004      	ands	r4, r0
 8013bd8:	b2e4      	uxtb	r4, r4
 8013bda:	e7ee      	b.n	8013bba <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013bdc:	68e9      	ldr	r1, [r5, #12]
 8013bde:	4630      	mov	r0, r6
 8013be0:	f004 fa9a 	bl	8018118 <ucdr_serialize_string>
 8013be4:	4004      	ands	r4, r0
 8013be6:	4620      	mov	r0, r4
 8013be8:	bd70      	pop	{r4, r5, r6, pc}
 8013bea:	bf00      	nop

08013bec <uxr_serialize_OBJK_Topic_Binary>:
 8013bec:	b570      	push	{r4, r5, r6, lr}
 8013bee:	460d      	mov	r5, r1
 8013bf0:	6809      	ldr	r1, [r1, #0]
 8013bf2:	4606      	mov	r6, r0
 8013bf4:	f004 fa90 	bl	8018118 <ucdr_serialize_string>
 8013bf8:	7929      	ldrb	r1, [r5, #4]
 8013bfa:	4604      	mov	r4, r0
 8013bfc:	4630      	mov	r0, r6
 8013bfe:	f7fc fe61 	bl	80108c4 <ucdr_serialize_bool>
 8013c02:	792b      	ldrb	r3, [r5, #4]
 8013c04:	4004      	ands	r4, r0
 8013c06:	b2e4      	uxtb	r4, r4
 8013c08:	b943      	cbnz	r3, 8013c1c <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013c0a:	7b29      	ldrb	r1, [r5, #12]
 8013c0c:	4630      	mov	r0, r6
 8013c0e:	f7fc fe59 	bl	80108c4 <ucdr_serialize_bool>
 8013c12:	7b2b      	ldrb	r3, [r5, #12]
 8013c14:	4004      	ands	r4, r0
 8013c16:	b93b      	cbnz	r3, 8013c28 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013c18:	4620      	mov	r0, r4
 8013c1a:	bd70      	pop	{r4, r5, r6, pc}
 8013c1c:	68a9      	ldr	r1, [r5, #8]
 8013c1e:	4630      	mov	r0, r6
 8013c20:	f004 fa7a 	bl	8018118 <ucdr_serialize_string>
 8013c24:	4004      	ands	r4, r0
 8013c26:	e7f0      	b.n	8013c0a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013c28:	6929      	ldr	r1, [r5, #16]
 8013c2a:	4630      	mov	r0, r6
 8013c2c:	f004 fa74 	bl	8018118 <ucdr_serialize_string>
 8013c30:	4004      	ands	r4, r0
 8013c32:	b2e4      	uxtb	r4, r4
 8013c34:	4620      	mov	r0, r4
 8013c36:	bd70      	pop	{r4, r5, r6, pc}

08013c38 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c3c:	460c      	mov	r4, r1
 8013c3e:	7809      	ldrb	r1, [r1, #0]
 8013c40:	4606      	mov	r6, r0
 8013c42:	f7fc fe3f 	bl	80108c4 <ucdr_serialize_bool>
 8013c46:	7823      	ldrb	r3, [r4, #0]
 8013c48:	4605      	mov	r5, r0
 8013c4a:	b96b      	cbnz	r3, 8013c68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013c4c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013c50:	4630      	mov	r0, r6
 8013c52:	f7fc fe37 	bl	80108c4 <ucdr_serialize_bool>
 8013c56:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013c5a:	4005      	ands	r5, r0
 8013c5c:	b2ed      	uxtb	r5, r5
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d169      	bne.n	8013d36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013c62:	4628      	mov	r0, r5
 8013c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c68:	6861      	ldr	r1, [r4, #4]
 8013c6a:	4630      	mov	r0, r6
 8013c6c:	f7fd f870 	bl	8010d50 <ucdr_serialize_uint32_t>
 8013c70:	6863      	ldr	r3, [r4, #4]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d06b      	beq.n	8013d4e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013c76:	2800      	cmp	r0, #0
 8013c78:	d067      	beq.n	8013d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c7a:	68a1      	ldr	r1, [r4, #8]
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	f004 fa4b 	bl	8018118 <ucdr_serialize_string>
 8013c82:	6863      	ldr	r3, [r4, #4]
 8013c84:	2b01      	cmp	r3, #1
 8013c86:	d953      	bls.n	8013d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c88:	2800      	cmp	r0, #0
 8013c8a:	d05e      	beq.n	8013d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c8c:	68e1      	ldr	r1, [r4, #12]
 8013c8e:	4630      	mov	r0, r6
 8013c90:	f004 fa42 	bl	8018118 <ucdr_serialize_string>
 8013c94:	6863      	ldr	r3, [r4, #4]
 8013c96:	2b02      	cmp	r3, #2
 8013c98:	d94a      	bls.n	8013d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013c9a:	2800      	cmp	r0, #0
 8013c9c:	d055      	beq.n	8013d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013c9e:	6921      	ldr	r1, [r4, #16]
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	f004 fa39 	bl	8018118 <ucdr_serialize_string>
 8013ca6:	6863      	ldr	r3, [r4, #4]
 8013ca8:	2b03      	cmp	r3, #3
 8013caa:	d941      	bls.n	8013d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cac:	2800      	cmp	r0, #0
 8013cae:	d04c      	beq.n	8013d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cb0:	6961      	ldr	r1, [r4, #20]
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	f004 fa30 	bl	8018118 <ucdr_serialize_string>
 8013cb8:	6863      	ldr	r3, [r4, #4]
 8013cba:	2b04      	cmp	r3, #4
 8013cbc:	d938      	bls.n	8013d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cbe:	2800      	cmp	r0, #0
 8013cc0:	d043      	beq.n	8013d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cc2:	69a1      	ldr	r1, [r4, #24]
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	f004 fa27 	bl	8018118 <ucdr_serialize_string>
 8013cca:	6863      	ldr	r3, [r4, #4]
 8013ccc:	2b05      	cmp	r3, #5
 8013cce:	d92f      	bls.n	8013d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d03a      	beq.n	8013d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cd4:	69e1      	ldr	r1, [r4, #28]
 8013cd6:	4630      	mov	r0, r6
 8013cd8:	f004 fa1e 	bl	8018118 <ucdr_serialize_string>
 8013cdc:	6863      	ldr	r3, [r4, #4]
 8013cde:	2b06      	cmp	r3, #6
 8013ce0:	d926      	bls.n	8013d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013ce2:	b390      	cbz	r0, 8013d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ce4:	6a21      	ldr	r1, [r4, #32]
 8013ce6:	4630      	mov	r0, r6
 8013ce8:	f004 fa16 	bl	8018118 <ucdr_serialize_string>
 8013cec:	6863      	ldr	r3, [r4, #4]
 8013cee:	2b07      	cmp	r3, #7
 8013cf0:	d91e      	bls.n	8013d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cf2:	b350      	cbz	r0, 8013d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	f004 fa0e 	bl	8018118 <ucdr_serialize_string>
 8013cfc:	6863      	ldr	r3, [r4, #4]
 8013cfe:	2b08      	cmp	r3, #8
 8013d00:	d916      	bls.n	8013d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d02:	b310      	cbz	r0, 8013d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d04:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013d06:	4630      	mov	r0, r6
 8013d08:	f004 fa06 	bl	8018118 <ucdr_serialize_string>
 8013d0c:	6863      	ldr	r3, [r4, #4]
 8013d0e:	2b09      	cmp	r3, #9
 8013d10:	d90e      	bls.n	8013d30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d12:	b1d0      	cbz	r0, 8013d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d14:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013d18:	2709      	movs	r7, #9
 8013d1a:	e000      	b.n	8013d1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013d1c:	b1a8      	cbz	r0, 8013d4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d1e:	f858 1b04 	ldr.w	r1, [r8], #4
 8013d22:	4630      	mov	r0, r6
 8013d24:	f004 f9f8 	bl	8018118 <ucdr_serialize_string>
 8013d28:	6862      	ldr	r2, [r4, #4]
 8013d2a:	3701      	adds	r7, #1
 8013d2c:	4297      	cmp	r7, r2
 8013d2e:	d3f5      	bcc.n	8013d1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013d30:	4005      	ands	r5, r0
 8013d32:	b2ed      	uxtb	r5, r5
 8013d34:	e78a      	b.n	8013c4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013d36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013d38:	4630      	mov	r0, r6
 8013d3a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013d3e:	f004 f9bf 	bl	80180c0 <ucdr_serialize_sequence_uint8_t>
 8013d42:	4005      	ands	r5, r0
 8013d44:	4628      	mov	r0, r5
 8013d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d4a:	2500      	movs	r5, #0
 8013d4c:	e77e      	b.n	8013c4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013d4e:	4028      	ands	r0, r5
 8013d50:	b2c5      	uxtb	r5, r0
 8013d52:	e77b      	b.n	8013c4c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013d54 <uxr_serialize_OBJK_Publisher_Binary>:
 8013d54:	b570      	push	{r4, r5, r6, lr}
 8013d56:	460d      	mov	r5, r1
 8013d58:	7809      	ldrb	r1, [r1, #0]
 8013d5a:	4606      	mov	r6, r0
 8013d5c:	f7fc fdb2 	bl	80108c4 <ucdr_serialize_bool>
 8013d60:	782b      	ldrb	r3, [r5, #0]
 8013d62:	4604      	mov	r4, r0
 8013d64:	b94b      	cbnz	r3, 8013d7a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013d66:	7a29      	ldrb	r1, [r5, #8]
 8013d68:	4630      	mov	r0, r6
 8013d6a:	f7fc fdab 	bl	80108c4 <ucdr_serialize_bool>
 8013d6e:	7a2b      	ldrb	r3, [r5, #8]
 8013d70:	4004      	ands	r4, r0
 8013d72:	b2e4      	uxtb	r4, r4
 8013d74:	b943      	cbnz	r3, 8013d88 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013d76:	4620      	mov	r0, r4
 8013d78:	bd70      	pop	{r4, r5, r6, pc}
 8013d7a:	6869      	ldr	r1, [r5, #4]
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f004 f9cb 	bl	8018118 <ucdr_serialize_string>
 8013d82:	4004      	ands	r4, r0
 8013d84:	b2e4      	uxtb	r4, r4
 8013d86:	e7ee      	b.n	8013d66 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013d88:	f105 010c 	add.w	r1, r5, #12
 8013d8c:	4630      	mov	r0, r6
 8013d8e:	f7ff ff53 	bl	8013c38 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013d92:	4004      	ands	r4, r0
 8013d94:	4620      	mov	r0, r4
 8013d96:	bd70      	pop	{r4, r5, r6, pc}

08013d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d9c:	460c      	mov	r4, r1
 8013d9e:	7809      	ldrb	r1, [r1, #0]
 8013da0:	4606      	mov	r6, r0
 8013da2:	f7fc fd8f 	bl	80108c4 <ucdr_serialize_bool>
 8013da6:	7823      	ldrb	r3, [r4, #0]
 8013da8:	4605      	mov	r5, r0
 8013daa:	b96b      	cbnz	r3, 8013dc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013dac:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013db0:	4630      	mov	r0, r6
 8013db2:	f7fc fd87 	bl	80108c4 <ucdr_serialize_bool>
 8013db6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013dba:	4005      	ands	r5, r0
 8013dbc:	b2ed      	uxtb	r5, r5
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d169      	bne.n	8013e96 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013dc2:	4628      	mov	r0, r5
 8013dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dc8:	6861      	ldr	r1, [r4, #4]
 8013dca:	4630      	mov	r0, r6
 8013dcc:	f7fc ffc0 	bl	8010d50 <ucdr_serialize_uint32_t>
 8013dd0:	6863      	ldr	r3, [r4, #4]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d06b      	beq.n	8013eae <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8013dd6:	2800      	cmp	r0, #0
 8013dd8:	d067      	beq.n	8013eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013dda:	68a1      	ldr	r1, [r4, #8]
 8013ddc:	4630      	mov	r0, r6
 8013dde:	f004 f99b 	bl	8018118 <ucdr_serialize_string>
 8013de2:	6863      	ldr	r3, [r4, #4]
 8013de4:	2b01      	cmp	r3, #1
 8013de6:	d953      	bls.n	8013e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013de8:	2800      	cmp	r0, #0
 8013dea:	d05e      	beq.n	8013eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013dec:	68e1      	ldr	r1, [r4, #12]
 8013dee:	4630      	mov	r0, r6
 8013df0:	f004 f992 	bl	8018118 <ucdr_serialize_string>
 8013df4:	6863      	ldr	r3, [r4, #4]
 8013df6:	2b02      	cmp	r3, #2
 8013df8:	d94a      	bls.n	8013e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013dfa:	2800      	cmp	r0, #0
 8013dfc:	d055      	beq.n	8013eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013dfe:	6921      	ldr	r1, [r4, #16]
 8013e00:	4630      	mov	r0, r6
 8013e02:	f004 f989 	bl	8018118 <ucdr_serialize_string>
 8013e06:	6863      	ldr	r3, [r4, #4]
 8013e08:	2b03      	cmp	r3, #3
 8013e0a:	d941      	bls.n	8013e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e0c:	2800      	cmp	r0, #0
 8013e0e:	d04c      	beq.n	8013eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e10:	6961      	ldr	r1, [r4, #20]
 8013e12:	4630      	mov	r0, r6
 8013e14:	f004 f980 	bl	8018118 <ucdr_serialize_string>
 8013e18:	6863      	ldr	r3, [r4, #4]
 8013e1a:	2b04      	cmp	r3, #4
 8013e1c:	d938      	bls.n	8013e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e1e:	2800      	cmp	r0, #0
 8013e20:	d043      	beq.n	8013eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e22:	69a1      	ldr	r1, [r4, #24]
 8013e24:	4630      	mov	r0, r6
 8013e26:	f004 f977 	bl	8018118 <ucdr_serialize_string>
 8013e2a:	6863      	ldr	r3, [r4, #4]
 8013e2c:	2b05      	cmp	r3, #5
 8013e2e:	d92f      	bls.n	8013e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e30:	2800      	cmp	r0, #0
 8013e32:	d03a      	beq.n	8013eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e34:	69e1      	ldr	r1, [r4, #28]
 8013e36:	4630      	mov	r0, r6
 8013e38:	f004 f96e 	bl	8018118 <ucdr_serialize_string>
 8013e3c:	6863      	ldr	r3, [r4, #4]
 8013e3e:	2b06      	cmp	r3, #6
 8013e40:	d926      	bls.n	8013e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e42:	b390      	cbz	r0, 8013eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e44:	6a21      	ldr	r1, [r4, #32]
 8013e46:	4630      	mov	r0, r6
 8013e48:	f004 f966 	bl	8018118 <ucdr_serialize_string>
 8013e4c:	6863      	ldr	r3, [r4, #4]
 8013e4e:	2b07      	cmp	r3, #7
 8013e50:	d91e      	bls.n	8013e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e52:	b350      	cbz	r0, 8013eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013e56:	4630      	mov	r0, r6
 8013e58:	f004 f95e 	bl	8018118 <ucdr_serialize_string>
 8013e5c:	6863      	ldr	r3, [r4, #4]
 8013e5e:	2b08      	cmp	r3, #8
 8013e60:	d916      	bls.n	8013e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e62:	b310      	cbz	r0, 8013eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e64:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013e66:	4630      	mov	r0, r6
 8013e68:	f004 f956 	bl	8018118 <ucdr_serialize_string>
 8013e6c:	6863      	ldr	r3, [r4, #4]
 8013e6e:	2b09      	cmp	r3, #9
 8013e70:	d90e      	bls.n	8013e90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e72:	b1d0      	cbz	r0, 8013eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e74:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013e78:	2709      	movs	r7, #9
 8013e7a:	e000      	b.n	8013e7e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013e7c:	b1a8      	cbz	r0, 8013eaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e7e:	f858 1b04 	ldr.w	r1, [r8], #4
 8013e82:	4630      	mov	r0, r6
 8013e84:	f004 f948 	bl	8018118 <ucdr_serialize_string>
 8013e88:	6862      	ldr	r2, [r4, #4]
 8013e8a:	3701      	adds	r7, #1
 8013e8c:	4297      	cmp	r7, r2
 8013e8e:	d3f5      	bcc.n	8013e7c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013e90:	4005      	ands	r5, r0
 8013e92:	b2ed      	uxtb	r5, r5
 8013e94:	e78a      	b.n	8013dac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013e96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013e98:	4630      	mov	r0, r6
 8013e9a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013e9e:	f004 f90f 	bl	80180c0 <ucdr_serialize_sequence_uint8_t>
 8013ea2:	4005      	ands	r5, r0
 8013ea4:	4628      	mov	r0, r5
 8013ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eaa:	2500      	movs	r5, #0
 8013eac:	e77e      	b.n	8013dac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013eae:	4028      	ands	r0, r5
 8013eb0:	b2c5      	uxtb	r5, r0
 8013eb2:	e77b      	b.n	8013dac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013eb4 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013eb4:	b570      	push	{r4, r5, r6, lr}
 8013eb6:	460d      	mov	r5, r1
 8013eb8:	7809      	ldrb	r1, [r1, #0]
 8013eba:	4606      	mov	r6, r0
 8013ebc:	f7fc fd02 	bl	80108c4 <ucdr_serialize_bool>
 8013ec0:	782b      	ldrb	r3, [r5, #0]
 8013ec2:	4604      	mov	r4, r0
 8013ec4:	b94b      	cbnz	r3, 8013eda <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8013ec6:	7a29      	ldrb	r1, [r5, #8]
 8013ec8:	4630      	mov	r0, r6
 8013eca:	f7fc fcfb 	bl	80108c4 <ucdr_serialize_bool>
 8013ece:	7a2b      	ldrb	r3, [r5, #8]
 8013ed0:	4004      	ands	r4, r0
 8013ed2:	b2e4      	uxtb	r4, r4
 8013ed4:	b943      	cbnz	r3, 8013ee8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	bd70      	pop	{r4, r5, r6, pc}
 8013eda:	6869      	ldr	r1, [r5, #4]
 8013edc:	4630      	mov	r0, r6
 8013ede:	f004 f91b 	bl	8018118 <ucdr_serialize_string>
 8013ee2:	4004      	ands	r4, r0
 8013ee4:	b2e4      	uxtb	r4, r4
 8013ee6:	e7ee      	b.n	8013ec6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013ee8:	f105 010c 	add.w	r1, r5, #12
 8013eec:	4630      	mov	r0, r6
 8013eee:	f7ff ff53 	bl	8013d98 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013ef2:	4004      	ands	r4, r0
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	bd70      	pop	{r4, r5, r6, pc}

08013ef8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013ef8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013efc:	4688      	mov	r8, r1
 8013efe:	8809      	ldrh	r1, [r1, #0]
 8013f00:	4681      	mov	r9, r0
 8013f02:	f7fc fd3b 	bl	801097c <ucdr_serialize_uint16_t>
 8013f06:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013f0a:	4606      	mov	r6, r0
 8013f0c:	4648      	mov	r0, r9
 8013f0e:	f7fc fcd9 	bl	80108c4 <ucdr_serialize_bool>
 8013f12:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013f16:	4030      	ands	r0, r6
 8013f18:	b2c5      	uxtb	r5, r0
 8013f1a:	b9eb      	cbnz	r3, 8013f58 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013f1c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013f20:	4648      	mov	r0, r9
 8013f22:	f7fc fccf 	bl	80108c4 <ucdr_serialize_bool>
 8013f26:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013f2a:	4005      	ands	r5, r0
 8013f2c:	bb7b      	cbnz	r3, 8013f8e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013f2e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013f32:	4648      	mov	r0, r9
 8013f34:	f7fc fcc6 	bl	80108c4 <ucdr_serialize_bool>
 8013f38:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013f3c:	4005      	ands	r5, r0
 8013f3e:	b9f3      	cbnz	r3, 8013f7e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013f40:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013f44:	4648      	mov	r0, r9
 8013f46:	f7fc fcbd 	bl	80108c4 <ucdr_serialize_bool>
 8013f4a:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013f4e:	4005      	ands	r5, r0
 8013f50:	b94b      	cbnz	r3, 8013f66 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013f52:	4628      	mov	r0, r5
 8013f54:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013f58:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013f5c:	4648      	mov	r0, r9
 8013f5e:	f7fc fd0d 	bl	801097c <ucdr_serialize_uint16_t>
 8013f62:	4005      	ands	r5, r0
 8013f64:	e7da      	b.n	8013f1c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013f66:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013f6a:	4648      	mov	r0, r9
 8013f6c:	f108 011c 	add.w	r1, r8, #28
 8013f70:	f004 f8a6 	bl	80180c0 <ucdr_serialize_sequence_uint8_t>
 8013f74:	4028      	ands	r0, r5
 8013f76:	b2c5      	uxtb	r5, r0
 8013f78:	4628      	mov	r0, r5
 8013f7a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013f7e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013f82:	4648      	mov	r0, r9
 8013f84:	f7fc fee4 	bl	8010d50 <ucdr_serialize_uint32_t>
 8013f88:	4028      	ands	r0, r5
 8013f8a:	b2c5      	uxtb	r5, r0
 8013f8c:	e7d8      	b.n	8013f40 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013f8e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013f92:	4648      	mov	r0, r9
 8013f94:	f7fc fedc 	bl	8010d50 <ucdr_serialize_uint32_t>
 8013f98:	4028      	ands	r0, r5
 8013f9a:	b2c5      	uxtb	r5, r0
 8013f9c:	e7c7      	b.n	8013f2e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013f9e:	bf00      	nop

08013fa0 <uxr_serialize_OBJK_DataReader_Binary>:
 8013fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fa2:	2202      	movs	r2, #2
 8013fa4:	460c      	mov	r4, r1
 8013fa6:	4606      	mov	r6, r0
 8013fa8:	f003 ff96 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8013fac:	78a1      	ldrb	r1, [r4, #2]
 8013fae:	4605      	mov	r5, r0
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	f7fc fc87 	bl	80108c4 <ucdr_serialize_bool>
 8013fb6:	78a3      	ldrb	r3, [r4, #2]
 8013fb8:	4005      	ands	r5, r0
 8013fba:	b2ed      	uxtb	r5, r5
 8013fbc:	b90b      	cbnz	r3, 8013fc2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8013fbe:	4628      	mov	r0, r5
 8013fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fc2:	f104 0108 	add.w	r1, r4, #8
 8013fc6:	4630      	mov	r0, r6
 8013fc8:	f7ff ff96 	bl	8013ef8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013fcc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013fd0:	4607      	mov	r7, r0
 8013fd2:	4630      	mov	r0, r6
 8013fd4:	f7fc fc76 	bl	80108c4 <ucdr_serialize_bool>
 8013fd8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013fdc:	4038      	ands	r0, r7
 8013fde:	b2c7      	uxtb	r7, r0
 8013fe0:	b95b      	cbnz	r3, 8013ffa <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8013fe2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8013fe6:	4630      	mov	r0, r6
 8013fe8:	f7fc fc6c 	bl	80108c4 <ucdr_serialize_bool>
 8013fec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013ff0:	4007      	ands	r7, r0
 8013ff2:	b94b      	cbnz	r3, 8014008 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8013ff4:	403d      	ands	r5, r7
 8013ff6:	4628      	mov	r0, r5
 8013ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ffa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8013ffe:	4630      	mov	r0, r6
 8014000:	f7fd f8fc 	bl	80111fc <ucdr_serialize_uint64_t>
 8014004:	4007      	ands	r7, r0
 8014006:	e7ec      	b.n	8013fe2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8014008:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801400a:	4630      	mov	r0, r6
 801400c:	f004 f884 	bl	8018118 <ucdr_serialize_string>
 8014010:	4007      	ands	r7, r0
 8014012:	b2ff      	uxtb	r7, r7
 8014014:	e7ee      	b.n	8013ff4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8014016:	bf00      	nop

08014018 <uxr_serialize_OBJK_DataWriter_Binary>:
 8014018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801401a:	2202      	movs	r2, #2
 801401c:	460d      	mov	r5, r1
 801401e:	4606      	mov	r6, r0
 8014020:	f003 ff5a 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8014024:	78a9      	ldrb	r1, [r5, #2]
 8014026:	4604      	mov	r4, r0
 8014028:	4630      	mov	r0, r6
 801402a:	f7fc fc4b 	bl	80108c4 <ucdr_serialize_bool>
 801402e:	78ab      	ldrb	r3, [r5, #2]
 8014030:	4004      	ands	r4, r0
 8014032:	b2e4      	uxtb	r4, r4
 8014034:	b90b      	cbnz	r3, 801403a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8014036:	4620      	mov	r0, r4
 8014038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801403a:	f105 0108 	add.w	r1, r5, #8
 801403e:	4630      	mov	r0, r6
 8014040:	f7ff ff5a 	bl	8013ef8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014044:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8014048:	4607      	mov	r7, r0
 801404a:	4630      	mov	r0, r6
 801404c:	f7fc fc3a 	bl	80108c4 <ucdr_serialize_bool>
 8014050:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8014054:	4007      	ands	r7, r0
 8014056:	b2ff      	uxtb	r7, r7
 8014058:	b913      	cbnz	r3, 8014060 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801405a:	403c      	ands	r4, r7
 801405c:	4620      	mov	r0, r4
 801405e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014060:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8014064:	4630      	mov	r0, r6
 8014066:	f7fd f8c9 	bl	80111fc <ucdr_serialize_uint64_t>
 801406a:	4007      	ands	r7, r0
 801406c:	e7f5      	b.n	801405a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801406e:	bf00      	nop

08014070 <uxr_deserialize_ObjectVariant>:
 8014070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014072:	4605      	mov	r5, r0
 8014074:	460e      	mov	r6, r1
 8014076:	f7fc fc6b 	bl	8010950 <ucdr_deserialize_uint8_t>
 801407a:	b320      	cbz	r0, 80140c6 <uxr_deserialize_ObjectVariant+0x56>
 801407c:	7833      	ldrb	r3, [r6, #0]
 801407e:	3b01      	subs	r3, #1
 8014080:	4604      	mov	r4, r0
 8014082:	2b0d      	cmp	r3, #13
 8014084:	d81d      	bhi.n	80140c2 <uxr_deserialize_ObjectVariant+0x52>
 8014086:	e8df f003 	tbb	[pc, r3]
 801408a:	2107      	.short	0x2107
 801408c:	21214b4b 	.word	0x21214b4b
 8014090:	381c2121 	.word	0x381c2121
 8014094:	876a3838 	.word	0x876a3838
 8014098:	1d31      	adds	r1, r6, #4
 801409a:	4628      	mov	r0, r5
 801409c:	f7fc fc58 	bl	8010950 <ucdr_deserialize_uint8_t>
 80140a0:	4607      	mov	r7, r0
 80140a2:	b138      	cbz	r0, 80140b4 <uxr_deserialize_ObjectVariant+0x44>
 80140a4:	7933      	ldrb	r3, [r6, #4]
 80140a6:	2b02      	cmp	r3, #2
 80140a8:	d07c      	beq.n	80141a4 <uxr_deserialize_ObjectVariant+0x134>
 80140aa:	2b03      	cmp	r3, #3
 80140ac:	f000 8082 	beq.w	80141b4 <uxr_deserialize_ObjectVariant+0x144>
 80140b0:	2b01      	cmp	r3, #1
 80140b2:	d077      	beq.n	80141a4 <uxr_deserialize_ObjectVariant+0x134>
 80140b4:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80140b8:	4628      	mov	r0, r5
 80140ba:	f7fd f9ef 	bl	801149c <ucdr_deserialize_int16_t>
 80140be:	4038      	ands	r0, r7
 80140c0:	b2c4      	uxtb	r4, r0
 80140c2:	4620      	mov	r0, r4
 80140c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140c6:	2400      	movs	r4, #0
 80140c8:	4620      	mov	r0, r4
 80140ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140cc:	1d31      	adds	r1, r6, #4
 80140ce:	4628      	mov	r0, r5
 80140d0:	f7fc fc3e 	bl	8010950 <ucdr_deserialize_uint8_t>
 80140d4:	4607      	mov	r7, r0
 80140d6:	b130      	cbz	r0, 80140e6 <uxr_deserialize_ObjectVariant+0x76>
 80140d8:	7933      	ldrb	r3, [r6, #4]
 80140da:	2b02      	cmp	r3, #2
 80140dc:	d037      	beq.n	801414e <uxr_deserialize_ObjectVariant+0xde>
 80140de:	2b03      	cmp	r3, #3
 80140e0:	d02a      	beq.n	8014138 <uxr_deserialize_ObjectVariant+0xc8>
 80140e2:	2b01      	cmp	r3, #1
 80140e4:	d033      	beq.n	801414e <uxr_deserialize_ObjectVariant+0xde>
 80140e6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80140ea:	4628      	mov	r0, r5
 80140ec:	2202      	movs	r2, #2
 80140ee:	f003 ff57 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 80140f2:	4038      	ands	r0, r7
 80140f4:	b2c4      	uxtb	r4, r0
 80140f6:	4620      	mov	r0, r4
 80140f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140fa:	1d31      	adds	r1, r6, #4
 80140fc:	4628      	mov	r0, r5
 80140fe:	f7fc fc27 	bl	8010950 <ucdr_deserialize_uint8_t>
 8014102:	2800      	cmp	r0, #0
 8014104:	d0df      	beq.n	80140c6 <uxr_deserialize_ObjectVariant+0x56>
 8014106:	7933      	ldrb	r3, [r6, #4]
 8014108:	2b01      	cmp	r3, #1
 801410a:	d001      	beq.n	8014110 <uxr_deserialize_ObjectVariant+0xa0>
 801410c:	2b02      	cmp	r3, #2
 801410e:	d1d8      	bne.n	80140c2 <uxr_deserialize_ObjectVariant+0x52>
 8014110:	68b1      	ldr	r1, [r6, #8]
 8014112:	4628      	mov	r0, r5
 8014114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014118:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801411c:	f004 b80c 	b.w	8018138 <ucdr_deserialize_string>
 8014120:	1d31      	adds	r1, r6, #4
 8014122:	4628      	mov	r0, r5
 8014124:	f7fc fc14 	bl	8010950 <ucdr_deserialize_uint8_t>
 8014128:	4607      	mov	r7, r0
 801412a:	2800      	cmp	r0, #0
 801412c:	d0db      	beq.n	80140e6 <uxr_deserialize_ObjectVariant+0x76>
 801412e:	7933      	ldrb	r3, [r6, #4]
 8014130:	2b02      	cmp	r3, #2
 8014132:	d00c      	beq.n	801414e <uxr_deserialize_ObjectVariant+0xde>
 8014134:	2b03      	cmp	r3, #3
 8014136:	d1d6      	bne.n	80140e6 <uxr_deserialize_ObjectVariant+0x76>
 8014138:	f106 0308 	add.w	r3, r6, #8
 801413c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014140:	f106 010c 	add.w	r1, r6, #12
 8014144:	4628      	mov	r0, r5
 8014146:	f003 ffcd 	bl	80180e4 <ucdr_deserialize_sequence_uint8_t>
 801414a:	4607      	mov	r7, r0
 801414c:	e7cb      	b.n	80140e6 <uxr_deserialize_ObjectVariant+0x76>
 801414e:	68b1      	ldr	r1, [r6, #8]
 8014150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014154:	4628      	mov	r0, r5
 8014156:	f003 ffef 	bl	8018138 <ucdr_deserialize_string>
 801415a:	4607      	mov	r7, r0
 801415c:	e7c3      	b.n	80140e6 <uxr_deserialize_ObjectVariant+0x76>
 801415e:	2204      	movs	r2, #4
 8014160:	18b1      	adds	r1, r6, r2
 8014162:	4628      	mov	r0, r5
 8014164:	f003 ff1c 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 8014168:	2202      	movs	r2, #2
 801416a:	4604      	mov	r4, r0
 801416c:	f106 0108 	add.w	r1, r6, #8
 8014170:	4628      	mov	r0, r5
 8014172:	f003 ff15 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 8014176:	2202      	movs	r2, #2
 8014178:	4004      	ands	r4, r0
 801417a:	f106 010a 	add.w	r1, r6, #10
 801417e:	4628      	mov	r0, r5
 8014180:	f003 ff0e 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 8014184:	b2e4      	uxtb	r4, r4
 8014186:	4603      	mov	r3, r0
 8014188:	f106 010c 	add.w	r1, r6, #12
 801418c:	4628      	mov	r0, r5
 801418e:	401c      	ands	r4, r3
 8014190:	f7fc fbae 	bl	80108f0 <ucdr_deserialize_bool>
 8014194:	4004      	ands	r4, r0
 8014196:	e794      	b.n	80140c2 <uxr_deserialize_ObjectVariant+0x52>
 8014198:	1d31      	adds	r1, r6, #4
 801419a:	4628      	mov	r0, r5
 801419c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80141a0:	f7ff bbd0 	b.w	8013944 <uxr_deserialize_CLIENT_Representation>
 80141a4:	68b1      	ldr	r1, [r6, #8]
 80141a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141aa:	4628      	mov	r0, r5
 80141ac:	f003 ffc4 	bl	8018138 <ucdr_deserialize_string>
 80141b0:	4607      	mov	r7, r0
 80141b2:	e77f      	b.n	80140b4 <uxr_deserialize_ObjectVariant+0x44>
 80141b4:	f106 0308 	add.w	r3, r6, #8
 80141b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141bc:	f106 010c 	add.w	r1, r6, #12
 80141c0:	4628      	mov	r0, r5
 80141c2:	f003 ff8f 	bl	80180e4 <ucdr_deserialize_sequence_uint8_t>
 80141c6:	4607      	mov	r7, r0
 80141c8:	e774      	b.n	80140b4 <uxr_deserialize_ObjectVariant+0x44>
 80141ca:	bf00      	nop

080141cc <uxr_deserialize_BaseObjectRequest>:
 80141cc:	b570      	push	{r4, r5, r6, lr}
 80141ce:	2202      	movs	r2, #2
 80141d0:	4605      	mov	r5, r0
 80141d2:	460e      	mov	r6, r1
 80141d4:	f003 fee4 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 80141d8:	1cb1      	adds	r1, r6, #2
 80141da:	4604      	mov	r4, r0
 80141dc:	2202      	movs	r2, #2
 80141de:	4628      	mov	r0, r5
 80141e0:	f003 fede 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 80141e4:	4020      	ands	r0, r4
 80141e6:	b2c0      	uxtb	r0, r0
 80141e8:	bd70      	pop	{r4, r5, r6, pc}
 80141ea:	bf00      	nop

080141ec <uxr_serialize_AGENT_ActivityInfo>:
 80141ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141f0:	460e      	mov	r6, r1
 80141f2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80141f6:	4607      	mov	r7, r0
 80141f8:	f7fd f8d0 	bl	801139c <ucdr_serialize_int16_t>
 80141fc:	6871      	ldr	r1, [r6, #4]
 80141fe:	4680      	mov	r8, r0
 8014200:	4638      	mov	r0, r7
 8014202:	f7fc fda5 	bl	8010d50 <ucdr_serialize_uint32_t>
 8014206:	6873      	ldr	r3, [r6, #4]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d06a      	beq.n	80142e2 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 801420c:	b318      	cbz	r0, 8014256 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 801420e:	f106 0904 	add.w	r9, r6, #4
 8014212:	2500      	movs	r5, #0
 8014214:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8014218:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 801421c:	7a21      	ldrb	r1, [r4, #8]
 801421e:	4638      	mov	r0, r7
 8014220:	f7fc fb80 	bl	8010924 <ucdr_serialize_uint8_t>
 8014224:	2800      	cmp	r0, #0
 8014226:	d051      	beq.n	80142cc <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8014228:	7a23      	ldrb	r3, [r4, #8]
 801422a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801422e:	00c9      	lsls	r1, r1, #3
 8014230:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8014234:	2b03      	cmp	r3, #3
 8014236:	d859      	bhi.n	80142ec <uxr_serialize_AGENT_ActivityInfo+0x100>
 8014238:	e8df f003 	tbb	[pc, r3]
 801423c:	02122436 	.word	0x02122436
 8014240:	4449      	add	r1, r9
 8014242:	4638      	mov	r0, r7
 8014244:	6889      	ldr	r1, [r1, #8]
 8014246:	f003 ff67 	bl	8018118 <ucdr_serialize_string>
 801424a:	6873      	ldr	r3, [r6, #4]
 801424c:	3501      	adds	r5, #1
 801424e:	429d      	cmp	r5, r3
 8014250:	d240      	bcs.n	80142d4 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 8014252:	2800      	cmp	r0, #0
 8014254:	d1de      	bne.n	8014214 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8014256:	f04f 0800 	mov.w	r8, #0
 801425a:	4640      	mov	r0, r8
 801425c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014260:	3108      	adds	r1, #8
 8014262:	4449      	add	r1, r9
 8014264:	2210      	movs	r2, #16
 8014266:	4638      	mov	r0, r7
 8014268:	f003 fe36 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 801426c:	44aa      	add	sl, r5
 801426e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014272:	4604      	mov	r4, r0
 8014274:	f8da 101c 	ldr.w	r1, [sl, #28]
 8014278:	4638      	mov	r0, r7
 801427a:	f7fc fd69 	bl	8010d50 <ucdr_serialize_uint32_t>
 801427e:	4020      	ands	r0, r4
 8014280:	b2c0      	uxtb	r0, r0
 8014282:	e7e2      	b.n	801424a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8014284:	3108      	adds	r1, #8
 8014286:	4449      	add	r1, r9
 8014288:	2204      	movs	r2, #4
 801428a:	4638      	mov	r0, r7
 801428c:	f003 fe24 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8014290:	44aa      	add	sl, r5
 8014292:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014296:	4604      	mov	r4, r0
 8014298:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 801429c:	4638      	mov	r0, r7
 801429e:	f7fc fb6d 	bl	801097c <ucdr_serialize_uint16_t>
 80142a2:	4020      	ands	r0, r4
 80142a4:	b2c0      	uxtb	r0, r0
 80142a6:	e7d0      	b.n	801424a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80142a8:	3108      	adds	r1, #8
 80142aa:	4449      	add	r1, r9
 80142ac:	2202      	movs	r2, #2
 80142ae:	4638      	mov	r0, r7
 80142b0:	f003 fe12 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 80142b4:	44aa      	add	sl, r5
 80142b6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80142ba:	4604      	mov	r4, r0
 80142bc:	f89a 100e 	ldrb.w	r1, [sl, #14]
 80142c0:	4638      	mov	r0, r7
 80142c2:	f7fc fb2f 	bl	8010924 <ucdr_serialize_uint8_t>
 80142c6:	4020      	ands	r0, r4
 80142c8:	b2c0      	uxtb	r0, r0
 80142ca:	e7be      	b.n	801424a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80142cc:	6873      	ldr	r3, [r6, #4]
 80142ce:	3501      	adds	r5, #1
 80142d0:	429d      	cmp	r5, r3
 80142d2:	d3c0      	bcc.n	8014256 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 80142d4:	ea08 0000 	and.w	r0, r8, r0
 80142d8:	fa5f f880 	uxtb.w	r8, r0
 80142dc:	4640      	mov	r0, r8
 80142de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142e2:	ea08 0800 	and.w	r8, r8, r0
 80142e6:	fa5f f888 	uxtb.w	r8, r8
 80142ea:	e7b6      	b.n	801425a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 80142ec:	6873      	ldr	r3, [r6, #4]
 80142ee:	3501      	adds	r5, #1
 80142f0:	42ab      	cmp	r3, r5
 80142f2:	f104 0418 	add.w	r4, r4, #24
 80142f6:	d891      	bhi.n	801421c <uxr_serialize_AGENT_ActivityInfo+0x30>
 80142f8:	e7af      	b.n	801425a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 80142fa:	bf00      	nop

080142fc <uxr_serialize_ActivityInfoVariant>:
 80142fc:	b570      	push	{r4, r5, r6, lr}
 80142fe:	460d      	mov	r5, r1
 8014300:	7809      	ldrb	r1, [r1, #0]
 8014302:	4606      	mov	r6, r0
 8014304:	f7fc fb0e 	bl	8010924 <ucdr_serialize_uint8_t>
 8014308:	b130      	cbz	r0, 8014318 <uxr_serialize_ActivityInfoVariant+0x1c>
 801430a:	782b      	ldrb	r3, [r5, #0]
 801430c:	2b06      	cmp	r3, #6
 801430e:	d019      	beq.n	8014344 <uxr_serialize_ActivityInfoVariant+0x48>
 8014310:	2b0d      	cmp	r3, #13
 8014312:	d010      	beq.n	8014336 <uxr_serialize_ActivityInfoVariant+0x3a>
 8014314:	2b05      	cmp	r3, #5
 8014316:	d000      	beq.n	801431a <uxr_serialize_ActivityInfoVariant+0x1e>
 8014318:	bd70      	pop	{r4, r5, r6, pc}
 801431a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801431e:	4630      	mov	r0, r6
 8014320:	f7fd f83c 	bl	801139c <ucdr_serialize_int16_t>
 8014324:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8014328:	4604      	mov	r4, r0
 801432a:	4630      	mov	r0, r6
 801432c:	f7fc ff66 	bl	80111fc <ucdr_serialize_uint64_t>
 8014330:	4020      	ands	r0, r4
 8014332:	b2c0      	uxtb	r0, r0
 8014334:	bd70      	pop	{r4, r5, r6, pc}
 8014336:	f105 0108 	add.w	r1, r5, #8
 801433a:	4630      	mov	r0, r6
 801433c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014340:	f7ff bf54 	b.w	80141ec <uxr_serialize_AGENT_ActivityInfo>
 8014344:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014348:	4630      	mov	r0, r6
 801434a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801434e:	f7fd b825 	b.w	801139c <ucdr_serialize_int16_t>
 8014352:	bf00      	nop

08014354 <uxr_deserialize_BaseObjectReply>:
 8014354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014358:	2202      	movs	r2, #2
 801435a:	4606      	mov	r6, r0
 801435c:	460f      	mov	r7, r1
 801435e:	f003 fe1f 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 8014362:	2202      	movs	r2, #2
 8014364:	1cb9      	adds	r1, r7, #2
 8014366:	4605      	mov	r5, r0
 8014368:	4630      	mov	r0, r6
 801436a:	f003 fe19 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 801436e:	1d39      	adds	r1, r7, #4
 8014370:	4680      	mov	r8, r0
 8014372:	4630      	mov	r0, r6
 8014374:	f7fc faec 	bl	8010950 <ucdr_deserialize_uint8_t>
 8014378:	1d79      	adds	r1, r7, #5
 801437a:	4604      	mov	r4, r0
 801437c:	4630      	mov	r0, r6
 801437e:	f7fc fae7 	bl	8010950 <ucdr_deserialize_uint8_t>
 8014382:	ea05 0508 	and.w	r5, r5, r8
 8014386:	402c      	ands	r4, r5
 8014388:	4020      	ands	r0, r4
 801438a:	b2c0      	uxtb	r0, r0
 801438c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014390 <uxr_serialize_ReadSpecification>:
 8014390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014394:	460e      	mov	r6, r1
 8014396:	7809      	ldrb	r1, [r1, #0]
 8014398:	4607      	mov	r7, r0
 801439a:	f7fc fac3 	bl	8010924 <ucdr_serialize_uint8_t>
 801439e:	7871      	ldrb	r1, [r6, #1]
 80143a0:	4604      	mov	r4, r0
 80143a2:	4638      	mov	r0, r7
 80143a4:	f7fc fabe 	bl	8010924 <ucdr_serialize_uint8_t>
 80143a8:	78b1      	ldrb	r1, [r6, #2]
 80143aa:	4004      	ands	r4, r0
 80143ac:	4638      	mov	r0, r7
 80143ae:	f7fc fa89 	bl	80108c4 <ucdr_serialize_bool>
 80143b2:	78b3      	ldrb	r3, [r6, #2]
 80143b4:	b2e4      	uxtb	r4, r4
 80143b6:	4004      	ands	r4, r0
 80143b8:	b94b      	cbnz	r3, 80143ce <uxr_serialize_ReadSpecification+0x3e>
 80143ba:	7a31      	ldrb	r1, [r6, #8]
 80143bc:	4638      	mov	r0, r7
 80143be:	f7fc fa81 	bl	80108c4 <ucdr_serialize_bool>
 80143c2:	7a33      	ldrb	r3, [r6, #8]
 80143c4:	4004      	ands	r4, r0
 80143c6:	b943      	cbnz	r3, 80143da <uxr_serialize_ReadSpecification+0x4a>
 80143c8:	4620      	mov	r0, r4
 80143ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ce:	6871      	ldr	r1, [r6, #4]
 80143d0:	4638      	mov	r0, r7
 80143d2:	f003 fea1 	bl	8018118 <ucdr_serialize_string>
 80143d6:	4004      	ands	r4, r0
 80143d8:	e7ef      	b.n	80143ba <uxr_serialize_ReadSpecification+0x2a>
 80143da:	8971      	ldrh	r1, [r6, #10]
 80143dc:	4638      	mov	r0, r7
 80143de:	f7fc facd 	bl	801097c <ucdr_serialize_uint16_t>
 80143e2:	89b1      	ldrh	r1, [r6, #12]
 80143e4:	4605      	mov	r5, r0
 80143e6:	4638      	mov	r0, r7
 80143e8:	f7fc fac8 	bl	801097c <ucdr_serialize_uint16_t>
 80143ec:	89f1      	ldrh	r1, [r6, #14]
 80143ee:	4005      	ands	r5, r0
 80143f0:	4638      	mov	r0, r7
 80143f2:	f7fc fac3 	bl	801097c <ucdr_serialize_uint16_t>
 80143f6:	8a31      	ldrh	r1, [r6, #16]
 80143f8:	4680      	mov	r8, r0
 80143fa:	4638      	mov	r0, r7
 80143fc:	f7fc fabe 	bl	801097c <ucdr_serialize_uint16_t>
 8014400:	b2ed      	uxtb	r5, r5
 8014402:	4025      	ands	r5, r4
 8014404:	ea08 0505 	and.w	r5, r8, r5
 8014408:	ea00 0405 	and.w	r4, r0, r5
 801440c:	4620      	mov	r0, r4
 801440e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014412:	bf00      	nop

08014414 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014414:	f7ff ba3a 	b.w	801388c <uxr_serialize_CLIENT_Representation>

08014418 <uxr_serialize_CREATE_Payload>:
 8014418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801441a:	2202      	movs	r2, #2
 801441c:	4606      	mov	r6, r0
 801441e:	460d      	mov	r5, r1
 8014420:	f003 fd5a 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8014424:	1ca9      	adds	r1, r5, #2
 8014426:	4604      	mov	r4, r0
 8014428:	2202      	movs	r2, #2
 801442a:	4630      	mov	r0, r6
 801442c:	f003 fd54 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8014430:	7929      	ldrb	r1, [r5, #4]
 8014432:	4607      	mov	r7, r0
 8014434:	4630      	mov	r0, r6
 8014436:	f7fc fa75 	bl	8010924 <ucdr_serialize_uint8_t>
 801443a:	b328      	cbz	r0, 8014488 <uxr_serialize_CREATE_Payload+0x70>
 801443c:	792b      	ldrb	r3, [r5, #4]
 801443e:	403c      	ands	r4, r7
 8014440:	3b01      	subs	r3, #1
 8014442:	b2e4      	uxtb	r4, r4
 8014444:	2b0d      	cmp	r3, #13
 8014446:	d81d      	bhi.n	8014484 <uxr_serialize_CREATE_Payload+0x6c>
 8014448:	e8df f003 	tbb	[pc, r3]
 801444c:	32320753 	.word	0x32320753
 8014450:	07070707 	.word	0x07070707
 8014454:	2121211c 	.word	0x2121211c
 8014458:	684c      	.short	0x684c
 801445a:	7a29      	ldrb	r1, [r5, #8]
 801445c:	4630      	mov	r0, r6
 801445e:	f7fc fa61 	bl	8010924 <ucdr_serialize_uint8_t>
 8014462:	4607      	mov	r7, r0
 8014464:	b130      	cbz	r0, 8014474 <uxr_serialize_CREATE_Payload+0x5c>
 8014466:	7a2b      	ldrb	r3, [r5, #8]
 8014468:	2b02      	cmp	r3, #2
 801446a:	d035      	beq.n	80144d8 <uxr_serialize_CREATE_Payload+0xc0>
 801446c:	2b03      	cmp	r3, #3
 801446e:	d02b      	beq.n	80144c8 <uxr_serialize_CREATE_Payload+0xb0>
 8014470:	2b01      	cmp	r3, #1
 8014472:	d031      	beq.n	80144d8 <uxr_serialize_CREATE_Payload+0xc0>
 8014474:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8014478:	4630      	mov	r0, r6
 801447a:	2202      	movs	r2, #2
 801447c:	f003 fd2c 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8014480:	4038      	ands	r0, r7
 8014482:	4004      	ands	r4, r0
 8014484:	4620      	mov	r0, r4
 8014486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014488:	2400      	movs	r4, #0
 801448a:	4620      	mov	r0, r4
 801448c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801448e:	7a29      	ldrb	r1, [r5, #8]
 8014490:	4630      	mov	r0, r6
 8014492:	f7fc fa47 	bl	8010924 <ucdr_serialize_uint8_t>
 8014496:	2800      	cmp	r0, #0
 8014498:	d0f6      	beq.n	8014488 <uxr_serialize_CREATE_Payload+0x70>
 801449a:	7a2b      	ldrb	r3, [r5, #8]
 801449c:	2b01      	cmp	r3, #1
 801449e:	d001      	beq.n	80144a4 <uxr_serialize_CREATE_Payload+0x8c>
 80144a0:	2b02      	cmp	r3, #2
 80144a2:	d1ef      	bne.n	8014484 <uxr_serialize_CREATE_Payload+0x6c>
 80144a4:	68e9      	ldr	r1, [r5, #12]
 80144a6:	4630      	mov	r0, r6
 80144a8:	f003 fe36 	bl	8018118 <ucdr_serialize_string>
 80144ac:	4004      	ands	r4, r0
 80144ae:	e7e9      	b.n	8014484 <uxr_serialize_CREATE_Payload+0x6c>
 80144b0:	7a29      	ldrb	r1, [r5, #8]
 80144b2:	4630      	mov	r0, r6
 80144b4:	f7fc fa36 	bl	8010924 <ucdr_serialize_uint8_t>
 80144b8:	4607      	mov	r7, r0
 80144ba:	2800      	cmp	r0, #0
 80144bc:	d0da      	beq.n	8014474 <uxr_serialize_CREATE_Payload+0x5c>
 80144be:	7a2b      	ldrb	r3, [r5, #8]
 80144c0:	2b02      	cmp	r3, #2
 80144c2:	d009      	beq.n	80144d8 <uxr_serialize_CREATE_Payload+0xc0>
 80144c4:	2b03      	cmp	r3, #3
 80144c6:	d1d5      	bne.n	8014474 <uxr_serialize_CREATE_Payload+0x5c>
 80144c8:	68ea      	ldr	r2, [r5, #12]
 80144ca:	f105 0110 	add.w	r1, r5, #16
 80144ce:	4630      	mov	r0, r6
 80144d0:	f003 fdf6 	bl	80180c0 <ucdr_serialize_sequence_uint8_t>
 80144d4:	4607      	mov	r7, r0
 80144d6:	e7cd      	b.n	8014474 <uxr_serialize_CREATE_Payload+0x5c>
 80144d8:	68e9      	ldr	r1, [r5, #12]
 80144da:	4630      	mov	r0, r6
 80144dc:	f003 fe1c 	bl	8018118 <ucdr_serialize_string>
 80144e0:	4607      	mov	r7, r0
 80144e2:	e7c7      	b.n	8014474 <uxr_serialize_CREATE_Payload+0x5c>
 80144e4:	f105 0108 	add.w	r1, r5, #8
 80144e8:	4630      	mov	r0, r6
 80144ea:	f7ff fa95 	bl	8013a18 <uxr_serialize_AGENT_Representation>
 80144ee:	4004      	ands	r4, r0
 80144f0:	e7c8      	b.n	8014484 <uxr_serialize_CREATE_Payload+0x6c>
 80144f2:	7a29      	ldrb	r1, [r5, #8]
 80144f4:	4630      	mov	r0, r6
 80144f6:	f7fc fa15 	bl	8010924 <ucdr_serialize_uint8_t>
 80144fa:	4607      	mov	r7, r0
 80144fc:	b130      	cbz	r0, 801450c <uxr_serialize_CREATE_Payload+0xf4>
 80144fe:	7a2b      	ldrb	r3, [r5, #8]
 8014500:	2b02      	cmp	r3, #2
 8014502:	d012      	beq.n	801452a <uxr_serialize_CREATE_Payload+0x112>
 8014504:	2b03      	cmp	r3, #3
 8014506:	d016      	beq.n	8014536 <uxr_serialize_CREATE_Payload+0x11e>
 8014508:	2b01      	cmp	r3, #1
 801450a:	d00e      	beq.n	801452a <uxr_serialize_CREATE_Payload+0x112>
 801450c:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8014510:	4630      	mov	r0, r6
 8014512:	f7fc ff43 	bl	801139c <ucdr_serialize_int16_t>
 8014516:	4038      	ands	r0, r7
 8014518:	4004      	ands	r4, r0
 801451a:	e7b3      	b.n	8014484 <uxr_serialize_CREATE_Payload+0x6c>
 801451c:	f105 0108 	add.w	r1, r5, #8
 8014520:	4630      	mov	r0, r6
 8014522:	f7ff f9b3 	bl	801388c <uxr_serialize_CLIENT_Representation>
 8014526:	4004      	ands	r4, r0
 8014528:	e7ac      	b.n	8014484 <uxr_serialize_CREATE_Payload+0x6c>
 801452a:	68e9      	ldr	r1, [r5, #12]
 801452c:	4630      	mov	r0, r6
 801452e:	f003 fdf3 	bl	8018118 <ucdr_serialize_string>
 8014532:	4607      	mov	r7, r0
 8014534:	e7ea      	b.n	801450c <uxr_serialize_CREATE_Payload+0xf4>
 8014536:	68ea      	ldr	r2, [r5, #12]
 8014538:	f105 0110 	add.w	r1, r5, #16
 801453c:	4630      	mov	r0, r6
 801453e:	f003 fdbf 	bl	80180c0 <ucdr_serialize_sequence_uint8_t>
 8014542:	4607      	mov	r7, r0
 8014544:	e7e2      	b.n	801450c <uxr_serialize_CREATE_Payload+0xf4>
 8014546:	bf00      	nop

08014548 <uxr_deserialize_GET_INFO_Payload>:
 8014548:	b570      	push	{r4, r5, r6, lr}
 801454a:	2202      	movs	r2, #2
 801454c:	4605      	mov	r5, r0
 801454e:	460e      	mov	r6, r1
 8014550:	f003 fd26 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 8014554:	1cb1      	adds	r1, r6, #2
 8014556:	2202      	movs	r2, #2
 8014558:	4604      	mov	r4, r0
 801455a:	4628      	mov	r0, r5
 801455c:	f003 fd20 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 8014560:	1d31      	adds	r1, r6, #4
 8014562:	4004      	ands	r4, r0
 8014564:	4628      	mov	r0, r5
 8014566:	f7fc fd23 	bl	8010fb0 <ucdr_deserialize_uint32_t>
 801456a:	b2e4      	uxtb	r4, r4
 801456c:	4020      	ands	r0, r4
 801456e:	bd70      	pop	{r4, r5, r6, pc}

08014570 <uxr_serialize_DELETE_Payload>:
 8014570:	b570      	push	{r4, r5, r6, lr}
 8014572:	2202      	movs	r2, #2
 8014574:	4605      	mov	r5, r0
 8014576:	460e      	mov	r6, r1
 8014578:	f003 fcae 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 801457c:	1cb1      	adds	r1, r6, #2
 801457e:	4604      	mov	r4, r0
 8014580:	2202      	movs	r2, #2
 8014582:	4628      	mov	r0, r5
 8014584:	f003 fca8 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8014588:	4020      	ands	r0, r4
 801458a:	b2c0      	uxtb	r0, r0
 801458c:	bd70      	pop	{r4, r5, r6, pc}
 801458e:	bf00      	nop

08014590 <uxr_deserialize_STATUS_AGENT_Payload>:
 8014590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014594:	4606      	mov	r6, r0
 8014596:	460f      	mov	r7, r1
 8014598:	f7fc f9da 	bl	8010950 <ucdr_deserialize_uint8_t>
 801459c:	1c79      	adds	r1, r7, #1
 801459e:	4605      	mov	r5, r0
 80145a0:	4630      	mov	r0, r6
 80145a2:	f7fc f9d5 	bl	8010950 <ucdr_deserialize_uint8_t>
 80145a6:	1d39      	adds	r1, r7, #4
 80145a8:	4681      	mov	r9, r0
 80145aa:	2204      	movs	r2, #4
 80145ac:	4630      	mov	r0, r6
 80145ae:	f003 fcf7 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 80145b2:	f107 0108 	add.w	r1, r7, #8
 80145b6:	4604      	mov	r4, r0
 80145b8:	2202      	movs	r2, #2
 80145ba:	4630      	mov	r0, r6
 80145bc:	f003 fcf0 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 80145c0:	f107 010a 	add.w	r1, r7, #10
 80145c4:	4680      	mov	r8, r0
 80145c6:	2202      	movs	r2, #2
 80145c8:	4630      	mov	r0, r6
 80145ca:	f003 fce9 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 80145ce:	ea05 0509 	and.w	r5, r5, r9
 80145d2:	b2ed      	uxtb	r5, r5
 80145d4:	402c      	ands	r4, r5
 80145d6:	f107 010c 	add.w	r1, r7, #12
 80145da:	4605      	mov	r5, r0
 80145dc:	4630      	mov	r0, r6
 80145de:	f7fc f987 	bl	80108f0 <ucdr_deserialize_bool>
 80145e2:	ea08 0404 	and.w	r4, r8, r4
 80145e6:	4025      	ands	r5, r4
 80145e8:	4028      	ands	r0, r5
 80145ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145ee:	bf00      	nop

080145f0 <uxr_deserialize_STATUS_Payload>:
 80145f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145f4:	2202      	movs	r2, #2
 80145f6:	4606      	mov	r6, r0
 80145f8:	460f      	mov	r7, r1
 80145fa:	f003 fcd1 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 80145fe:	2202      	movs	r2, #2
 8014600:	1cb9      	adds	r1, r7, #2
 8014602:	4605      	mov	r5, r0
 8014604:	4630      	mov	r0, r6
 8014606:	f003 fccb 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 801460a:	1d39      	adds	r1, r7, #4
 801460c:	4680      	mov	r8, r0
 801460e:	4630      	mov	r0, r6
 8014610:	f7fc f99e 	bl	8010950 <ucdr_deserialize_uint8_t>
 8014614:	1d79      	adds	r1, r7, #5
 8014616:	4604      	mov	r4, r0
 8014618:	4630      	mov	r0, r6
 801461a:	f7fc f999 	bl	8010950 <ucdr_deserialize_uint8_t>
 801461e:	ea05 0508 	and.w	r5, r5, r8
 8014622:	402c      	ands	r4, r5
 8014624:	4020      	ands	r0, r4
 8014626:	b2c0      	uxtb	r0, r0
 8014628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801462c <uxr_serialize_INFO_Payload>:
 801462c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014630:	2202      	movs	r2, #2
 8014632:	460c      	mov	r4, r1
 8014634:	4605      	mov	r5, r0
 8014636:	f003 fc4f 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 801463a:	2202      	movs	r2, #2
 801463c:	4680      	mov	r8, r0
 801463e:	1ca1      	adds	r1, r4, #2
 8014640:	4628      	mov	r0, r5
 8014642:	f003 fc49 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8014646:	7921      	ldrb	r1, [r4, #4]
 8014648:	4607      	mov	r7, r0
 801464a:	4628      	mov	r0, r5
 801464c:	f7fc f96a 	bl	8010924 <ucdr_serialize_uint8_t>
 8014650:	7961      	ldrb	r1, [r4, #5]
 8014652:	4606      	mov	r6, r0
 8014654:	4628      	mov	r0, r5
 8014656:	f7fc f965 	bl	8010924 <ucdr_serialize_uint8_t>
 801465a:	ea08 0807 	and.w	r8, r8, r7
 801465e:	ea06 0608 	and.w	r6, r6, r8
 8014662:	4006      	ands	r6, r0
 8014664:	7a21      	ldrb	r1, [r4, #8]
 8014666:	4628      	mov	r0, r5
 8014668:	f7fc f92c 	bl	80108c4 <ucdr_serialize_bool>
 801466c:	7a23      	ldrb	r3, [r4, #8]
 801466e:	b2f7      	uxtb	r7, r6
 8014670:	4606      	mov	r6, r0
 8014672:	b96b      	cbnz	r3, 8014690 <uxr_serialize_INFO_Payload+0x64>
 8014674:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8014678:	4628      	mov	r0, r5
 801467a:	f7fc f923 	bl	80108c4 <ucdr_serialize_bool>
 801467e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8014682:	4030      	ands	r0, r6
 8014684:	b2c6      	uxtb	r6, r0
 8014686:	b983      	cbnz	r3, 80146aa <uxr_serialize_INFO_Payload+0x7e>
 8014688:	ea06 0007 	and.w	r0, r6, r7
 801468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014690:	7b21      	ldrb	r1, [r4, #12]
 8014692:	4628      	mov	r0, r5
 8014694:	f7fc f946 	bl	8010924 <ucdr_serialize_uint8_t>
 8014698:	b188      	cbz	r0, 80146be <uxr_serialize_INFO_Payload+0x92>
 801469a:	f104 010c 	add.w	r1, r4, #12
 801469e:	4628      	mov	r0, r5
 80146a0:	f7ff fa06 	bl	8013ab0 <uxr_serialize_ObjectVariant.part.0>
 80146a4:	4030      	ands	r0, r6
 80146a6:	b2c6      	uxtb	r6, r0
 80146a8:	e7e4      	b.n	8014674 <uxr_serialize_INFO_Payload+0x48>
 80146aa:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80146ae:	4628      	mov	r0, r5
 80146b0:	f7ff fe24 	bl	80142fc <uxr_serialize_ActivityInfoVariant>
 80146b4:	4006      	ands	r6, r0
 80146b6:	ea06 0007 	and.w	r0, r6, r7
 80146ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146be:	4606      	mov	r6, r0
 80146c0:	e7d8      	b.n	8014674 <uxr_serialize_INFO_Payload+0x48>
 80146c2:	bf00      	nop

080146c4 <uxr_serialize_READ_DATA_Payload>:
 80146c4:	b570      	push	{r4, r5, r6, lr}
 80146c6:	2202      	movs	r2, #2
 80146c8:	4605      	mov	r5, r0
 80146ca:	460e      	mov	r6, r1
 80146cc:	f003 fc04 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 80146d0:	1cb1      	adds	r1, r6, #2
 80146d2:	2202      	movs	r2, #2
 80146d4:	4604      	mov	r4, r0
 80146d6:	4628      	mov	r0, r5
 80146d8:	f003 fbfe 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 80146dc:	1d31      	adds	r1, r6, #4
 80146de:	4004      	ands	r4, r0
 80146e0:	4628      	mov	r0, r5
 80146e2:	f7ff fe55 	bl	8014390 <uxr_serialize_ReadSpecification>
 80146e6:	b2e4      	uxtb	r4, r4
 80146e8:	4020      	ands	r0, r4
 80146ea:	bd70      	pop	{r4, r5, r6, pc}

080146ec <uxr_serialize_WRITE_DATA_Payload_Data>:
 80146ec:	b570      	push	{r4, r5, r6, lr}
 80146ee:	2202      	movs	r2, #2
 80146f0:	4605      	mov	r5, r0
 80146f2:	460e      	mov	r6, r1
 80146f4:	f003 fbf0 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 80146f8:	1cb1      	adds	r1, r6, #2
 80146fa:	4604      	mov	r4, r0
 80146fc:	2202      	movs	r2, #2
 80146fe:	4628      	mov	r0, r5
 8014700:	f003 fbea 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8014704:	4020      	ands	r0, r4
 8014706:	b2c0      	uxtb	r0, r0
 8014708:	bd70      	pop	{r4, r5, r6, pc}
 801470a:	bf00      	nop

0801470c <uxr_serialize_ACKNACK_Payload>:
 801470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801470e:	460f      	mov	r7, r1
 8014710:	460e      	mov	r6, r1
 8014712:	f837 1b02 	ldrh.w	r1, [r7], #2
 8014716:	4605      	mov	r5, r0
 8014718:	f7fc f930 	bl	801097c <ucdr_serialize_uint16_t>
 801471c:	4639      	mov	r1, r7
 801471e:	2202      	movs	r2, #2
 8014720:	4604      	mov	r4, r0
 8014722:	4628      	mov	r0, r5
 8014724:	f003 fbd8 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8014728:	7931      	ldrb	r1, [r6, #4]
 801472a:	4004      	ands	r4, r0
 801472c:	4628      	mov	r0, r5
 801472e:	f7fc f8f9 	bl	8010924 <ucdr_serialize_uint8_t>
 8014732:	b2e4      	uxtb	r4, r4
 8014734:	4020      	ands	r0, r4
 8014736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014738 <uxr_deserialize_ACKNACK_Payload>:
 8014738:	b570      	push	{r4, r5, r6, lr}
 801473a:	4605      	mov	r5, r0
 801473c:	460e      	mov	r6, r1
 801473e:	f7fc fa1d 	bl	8010b7c <ucdr_deserialize_uint16_t>
 8014742:	1cb1      	adds	r1, r6, #2
 8014744:	2202      	movs	r2, #2
 8014746:	4604      	mov	r4, r0
 8014748:	4628      	mov	r0, r5
 801474a:	f003 fc29 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 801474e:	1d31      	adds	r1, r6, #4
 8014750:	4004      	ands	r4, r0
 8014752:	4628      	mov	r0, r5
 8014754:	f7fc f8fc 	bl	8010950 <ucdr_deserialize_uint8_t>
 8014758:	b2e4      	uxtb	r4, r4
 801475a:	4020      	ands	r0, r4
 801475c:	bd70      	pop	{r4, r5, r6, pc}
 801475e:	bf00      	nop

08014760 <uxr_serialize_HEARTBEAT_Payload>:
 8014760:	b570      	push	{r4, r5, r6, lr}
 8014762:	460d      	mov	r5, r1
 8014764:	8809      	ldrh	r1, [r1, #0]
 8014766:	4606      	mov	r6, r0
 8014768:	f7fc f908 	bl	801097c <ucdr_serialize_uint16_t>
 801476c:	8869      	ldrh	r1, [r5, #2]
 801476e:	4604      	mov	r4, r0
 8014770:	4630      	mov	r0, r6
 8014772:	f7fc f903 	bl	801097c <ucdr_serialize_uint16_t>
 8014776:	7929      	ldrb	r1, [r5, #4]
 8014778:	4004      	ands	r4, r0
 801477a:	4630      	mov	r0, r6
 801477c:	f7fc f8d2 	bl	8010924 <ucdr_serialize_uint8_t>
 8014780:	b2e4      	uxtb	r4, r4
 8014782:	4020      	ands	r0, r4
 8014784:	bd70      	pop	{r4, r5, r6, pc}
 8014786:	bf00      	nop

08014788 <uxr_deserialize_HEARTBEAT_Payload>:
 8014788:	b570      	push	{r4, r5, r6, lr}
 801478a:	4605      	mov	r5, r0
 801478c:	460e      	mov	r6, r1
 801478e:	f7fc f9f5 	bl	8010b7c <ucdr_deserialize_uint16_t>
 8014792:	1cb1      	adds	r1, r6, #2
 8014794:	4604      	mov	r4, r0
 8014796:	4628      	mov	r0, r5
 8014798:	f7fc f9f0 	bl	8010b7c <ucdr_deserialize_uint16_t>
 801479c:	1d31      	adds	r1, r6, #4
 801479e:	4004      	ands	r4, r0
 80147a0:	4628      	mov	r0, r5
 80147a2:	f7fc f8d5 	bl	8010950 <ucdr_deserialize_uint8_t>
 80147a6:	b2e4      	uxtb	r4, r4
 80147a8:	4020      	ands	r0, r4
 80147aa:	bd70      	pop	{r4, r5, r6, pc}

080147ac <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80147ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147b0:	4605      	mov	r5, r0
 80147b2:	460e      	mov	r6, r1
 80147b4:	f7fc ff7e 	bl	80116b4 <ucdr_deserialize_int32_t>
 80147b8:	1d31      	adds	r1, r6, #4
 80147ba:	4607      	mov	r7, r0
 80147bc:	4628      	mov	r0, r5
 80147be:	f7fc fbf7 	bl	8010fb0 <ucdr_deserialize_uint32_t>
 80147c2:	f106 0108 	add.w	r1, r6, #8
 80147c6:	4680      	mov	r8, r0
 80147c8:	4628      	mov	r0, r5
 80147ca:	f7fc ff73 	bl	80116b4 <ucdr_deserialize_int32_t>
 80147ce:	f106 010c 	add.w	r1, r6, #12
 80147d2:	4604      	mov	r4, r0
 80147d4:	4628      	mov	r0, r5
 80147d6:	f7fc fbeb 	bl	8010fb0 <ucdr_deserialize_uint32_t>
 80147da:	ea07 0708 	and.w	r7, r7, r8
 80147de:	403c      	ands	r4, r7
 80147e0:	f106 0110 	add.w	r1, r6, #16
 80147e4:	4004      	ands	r4, r0
 80147e6:	4628      	mov	r0, r5
 80147e8:	f7fc ff64 	bl	80116b4 <ucdr_deserialize_int32_t>
 80147ec:	f106 0114 	add.w	r1, r6, #20
 80147f0:	4603      	mov	r3, r0
 80147f2:	4628      	mov	r0, r5
 80147f4:	461d      	mov	r5, r3
 80147f6:	f7fc fbdb 	bl	8010fb0 <ucdr_deserialize_uint32_t>
 80147fa:	b2e4      	uxtb	r4, r4
 80147fc:	402c      	ands	r4, r5
 80147fe:	4020      	ands	r0, r4
 8014800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014804 <uxr_serialize_SampleIdentity>:
 8014804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014808:	220c      	movs	r2, #12
 801480a:	4604      	mov	r4, r0
 801480c:	460d      	mov	r5, r1
 801480e:	f003 fb63 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8014812:	2203      	movs	r2, #3
 8014814:	f105 010c 	add.w	r1, r5, #12
 8014818:	4607      	mov	r7, r0
 801481a:	4620      	mov	r0, r4
 801481c:	f003 fb5c 	bl	8017ed8 <ucdr_serialize_array_uint8_t>
 8014820:	7be9      	ldrb	r1, [r5, #15]
 8014822:	4680      	mov	r8, r0
 8014824:	4620      	mov	r0, r4
 8014826:	f7fc f87d 	bl	8010924 <ucdr_serialize_uint8_t>
 801482a:	6929      	ldr	r1, [r5, #16]
 801482c:	4606      	mov	r6, r0
 801482e:	4620      	mov	r0, r4
 8014830:	f7fc fea8 	bl	8011584 <ucdr_serialize_int32_t>
 8014834:	6969      	ldr	r1, [r5, #20]
 8014836:	4603      	mov	r3, r0
 8014838:	4620      	mov	r0, r4
 801483a:	ea07 0708 	and.w	r7, r7, r8
 801483e:	461c      	mov	r4, r3
 8014840:	f7fc fa86 	bl	8010d50 <ucdr_serialize_uint32_t>
 8014844:	403e      	ands	r6, r7
 8014846:	4034      	ands	r4, r6
 8014848:	4020      	ands	r0, r4
 801484a:	b2c0      	uxtb	r0, r0
 801484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014850 <uxr_deserialize_SampleIdentity>:
 8014850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014854:	220c      	movs	r2, #12
 8014856:	4604      	mov	r4, r0
 8014858:	460d      	mov	r5, r1
 801485a:	f003 fba1 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 801485e:	2203      	movs	r2, #3
 8014860:	f105 010c 	add.w	r1, r5, #12
 8014864:	4607      	mov	r7, r0
 8014866:	4620      	mov	r0, r4
 8014868:	f003 fb9a 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 801486c:	f105 010f 	add.w	r1, r5, #15
 8014870:	4680      	mov	r8, r0
 8014872:	4620      	mov	r0, r4
 8014874:	f7fc f86c 	bl	8010950 <ucdr_deserialize_uint8_t>
 8014878:	f105 0110 	add.w	r1, r5, #16
 801487c:	4606      	mov	r6, r0
 801487e:	4620      	mov	r0, r4
 8014880:	f7fc ff18 	bl	80116b4 <ucdr_deserialize_int32_t>
 8014884:	f105 0114 	add.w	r1, r5, #20
 8014888:	4603      	mov	r3, r0
 801488a:	4620      	mov	r0, r4
 801488c:	ea07 0708 	and.w	r7, r7, r8
 8014890:	461c      	mov	r4, r3
 8014892:	f7fc fb8d 	bl	8010fb0 <ucdr_deserialize_uint32_t>
 8014896:	403e      	ands	r6, r7
 8014898:	4034      	ands	r4, r6
 801489a:	4020      	ands	r0, r4
 801489c:	b2c0      	uxtb	r0, r0
 801489e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148a2:	bf00      	nop

080148a4 <rcl_client_get_rmw_handle>:
 80148a4:	b110      	cbz	r0, 80148ac <rcl_client_get_rmw_handle+0x8>
 80148a6:	6800      	ldr	r0, [r0, #0]
 80148a8:	b100      	cbz	r0, 80148ac <rcl_client_get_rmw_handle+0x8>
 80148aa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80148ac:	4770      	bx	lr
 80148ae:	bf00      	nop

080148b0 <rcl_take_response>:
 80148b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148b2:	460e      	mov	r6, r1
 80148b4:	460c      	mov	r4, r1
 80148b6:	4607      	mov	r7, r0
 80148b8:	4694      	mov	ip, r2
 80148ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80148bc:	b08d      	sub	sp, #52	; 0x34
 80148be:	ad06      	add	r5, sp, #24
 80148c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80148c2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80148c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80148ca:	b337      	cbz	r7, 801491a <rcl_take_response+0x6a>
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	b323      	cbz	r3, 801491a <rcl_take_response+0x6a>
 80148d0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80148d2:	b310      	cbz	r0, 801491a <rcl_take_response+0x6a>
 80148d4:	4662      	mov	r2, ip
 80148d6:	b31a      	cbz	r2, 8014920 <rcl_take_response+0x70>
 80148d8:	2300      	movs	r3, #0
 80148da:	2600      	movs	r6, #0
 80148dc:	2700      	movs	r7, #0
 80148de:	f88d 3007 	strb.w	r3, [sp, #7]
 80148e2:	a902      	add	r1, sp, #8
 80148e4:	f10d 0307 	add.w	r3, sp, #7
 80148e8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80148ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80148f0:	f003 f83a 	bl	8017968 <rmw_take_response>
 80148f4:	4606      	mov	r6, r0
 80148f6:	b9a8      	cbnz	r0, 8014924 <rcl_take_response+0x74>
 80148f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80148fc:	f240 13f5 	movw	r3, #501	; 0x1f5
 8014900:	2a00      	cmp	r2, #0
 8014902:	bf08      	it	eq
 8014904:	461e      	moveq	r6, r3
 8014906:	ad06      	add	r5, sp, #24
 8014908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801490a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801490c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014910:	e884 0003 	stmia.w	r4, {r0, r1}
 8014914:	4630      	mov	r0, r6
 8014916:	b00d      	add	sp, #52	; 0x34
 8014918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801491a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801491e:	e7f2      	b.n	8014906 <rcl_take_response+0x56>
 8014920:	260b      	movs	r6, #11
 8014922:	e7f0      	b.n	8014906 <rcl_take_response+0x56>
 8014924:	2601      	movs	r6, #1
 8014926:	e7ee      	b.n	8014906 <rcl_take_response+0x56>

08014928 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014928:	280b      	cmp	r0, #11
 801492a:	dc0d      	bgt.n	8014948 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801492c:	2800      	cmp	r0, #0
 801492e:	db09      	blt.n	8014944 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014930:	280b      	cmp	r0, #11
 8014932:	d807      	bhi.n	8014944 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014934:	e8df f000 	tbb	[pc, r0]
 8014938:	07060607 	.word	0x07060607
 801493c:	06060606 	.word	0x06060606
 8014940:	07070606 	.word	0x07070606
 8014944:	2001      	movs	r0, #1
 8014946:	4770      	bx	lr
 8014948:	28cb      	cmp	r0, #203	; 0xcb
 801494a:	bf18      	it	ne
 801494c:	2001      	movne	r0, #1
 801494e:	4770      	bx	lr

08014950 <rcl_get_zero_initialized_context>:
 8014950:	4a03      	ldr	r2, [pc, #12]	; (8014960 <rcl_get_zero_initialized_context+0x10>)
 8014952:	4603      	mov	r3, r0
 8014954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014958:	e883 0003 	stmia.w	r3, {r0, r1}
 801495c:	4618      	mov	r0, r3
 801495e:	4770      	bx	lr
 8014960:	0801b9d4 	.word	0x0801b9d4

08014964 <rcl_context_is_valid>:
 8014964:	b118      	cbz	r0, 801496e <rcl_context_is_valid+0xa>
 8014966:	6840      	ldr	r0, [r0, #4]
 8014968:	3800      	subs	r0, #0
 801496a:	bf18      	it	ne
 801496c:	2001      	movne	r0, #1
 801496e:	4770      	bx	lr

08014970 <__cleanup_context>:
 8014970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014974:	4606      	mov	r6, r0
 8014976:	6800      	ldr	r0, [r0, #0]
 8014978:	2300      	movs	r3, #0
 801497a:	6073      	str	r3, [r6, #4]
 801497c:	2800      	cmp	r0, #0
 801497e:	d04d      	beq.n	8014a1c <__cleanup_context+0xac>
 8014980:	6947      	ldr	r7, [r0, #20]
 8014982:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014986:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801498a:	b137      	cbz	r7, 801499a <__cleanup_context+0x2a>
 801498c:	3014      	adds	r0, #20
 801498e:	f000 fb1d 	bl	8014fcc <rcl_init_options_fini>
 8014992:	4607      	mov	r7, r0
 8014994:	2800      	cmp	r0, #0
 8014996:	d148      	bne.n	8014a2a <__cleanup_context+0xba>
 8014998:	6830      	ldr	r0, [r6, #0]
 801499a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801499c:	b143      	cbz	r3, 80149b0 <__cleanup_context+0x40>
 801499e:	3028      	adds	r0, #40	; 0x28
 80149a0:	f002 fd5e 	bl	8017460 <rmw_context_fini>
 80149a4:	b118      	cbz	r0, 80149ae <__cleanup_context+0x3e>
 80149a6:	2f00      	cmp	r7, #0
 80149a8:	d042      	beq.n	8014a30 <__cleanup_context+0xc0>
 80149aa:	f7fa feb3 	bl	800f714 <rcutils_reset_error>
 80149ae:	6830      	ldr	r0, [r6, #0]
 80149b0:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80149b4:	f1bc 0f00 	cmp.w	ip, #0
 80149b8:	d01c      	beq.n	80149f4 <__cleanup_context+0x84>
 80149ba:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80149be:	2a01      	cmp	r2, #1
 80149c0:	f173 0100 	sbcs.w	r1, r3, #0
 80149c4:	db12      	blt.n	80149ec <__cleanup_context+0x7c>
 80149c6:	2400      	movs	r4, #0
 80149c8:	2500      	movs	r5, #0
 80149ca:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 80149ce:	4649      	mov	r1, r9
 80149d0:	b1c0      	cbz	r0, 8014a04 <__cleanup_context+0x94>
 80149d2:	47c0      	blx	r8
 80149d4:	6831      	ldr	r1, [r6, #0]
 80149d6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80149da:	3401      	adds	r4, #1
 80149dc:	f145 0500 	adc.w	r5, r5, #0
 80149e0:	4294      	cmp	r4, r2
 80149e2:	f8d1 c020 	ldr.w	ip, [r1, #32]
 80149e6:	eb75 0103 	sbcs.w	r1, r5, r3
 80149ea:	dbee      	blt.n	80149ca <__cleanup_context+0x5a>
 80149ec:	4660      	mov	r0, ip
 80149ee:	4649      	mov	r1, r9
 80149f0:	47c0      	blx	r8
 80149f2:	6830      	ldr	r0, [r6, #0]
 80149f4:	4649      	mov	r1, r9
 80149f6:	47c0      	blx	r8
 80149f8:	2300      	movs	r3, #0
 80149fa:	e9c6 3300 	strd	r3, r3, [r6]
 80149fe:	4638      	mov	r0, r7
 8014a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a04:	3401      	adds	r4, #1
 8014a06:	f145 0500 	adc.w	r5, r5, #0
 8014a0a:	4294      	cmp	r4, r2
 8014a0c:	eb75 0103 	sbcs.w	r1, r5, r3
 8014a10:	dbdb      	blt.n	80149ca <__cleanup_context+0x5a>
 8014a12:	4660      	mov	r0, ip
 8014a14:	4649      	mov	r1, r9
 8014a16:	47c0      	blx	r8
 8014a18:	6830      	ldr	r0, [r6, #0]
 8014a1a:	e7eb      	b.n	80149f4 <__cleanup_context+0x84>
 8014a1c:	4607      	mov	r7, r0
 8014a1e:	2300      	movs	r3, #0
 8014a20:	e9c6 3300 	strd	r3, r3, [r6]
 8014a24:	4638      	mov	r0, r7
 8014a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a2a:	f7fa fe73 	bl	800f714 <rcutils_reset_error>
 8014a2e:	e7b3      	b.n	8014998 <__cleanup_context+0x28>
 8014a30:	f7ff ff7a 	bl	8014928 <rcl_convert_rmw_ret_to_rcl_ret>
 8014a34:	4607      	mov	r7, r0
 8014a36:	e7b8      	b.n	80149aa <__cleanup_context+0x3a>

08014a38 <rcl_expand_topic_name>:
 8014a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a3c:	b08b      	sub	sp, #44	; 0x2c
 8014a3e:	9306      	str	r3, [sp, #24]
 8014a40:	2800      	cmp	r0, #0
 8014a42:	f000 80d2 	beq.w	8014bea <rcl_expand_topic_name+0x1b2>
 8014a46:	460e      	mov	r6, r1
 8014a48:	2900      	cmp	r1, #0
 8014a4a:	f000 80ce 	beq.w	8014bea <rcl_expand_topic_name+0x1b2>
 8014a4e:	4617      	mov	r7, r2
 8014a50:	2a00      	cmp	r2, #0
 8014a52:	f000 80ca 	beq.w	8014bea <rcl_expand_topic_name+0x1b2>
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	f000 80c7 	beq.w	8014bea <rcl_expand_topic_name+0x1b2>
 8014a5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	f000 80c3 	beq.w	8014bea <rcl_expand_topic_name+0x1b2>
 8014a64:	a909      	add	r1, sp, #36	; 0x24
 8014a66:	2200      	movs	r2, #0
 8014a68:	4680      	mov	r8, r0
 8014a6a:	f001 f899 	bl	8015ba0 <rcl_validate_topic_name>
 8014a6e:	4604      	mov	r4, r0
 8014a70:	2800      	cmp	r0, #0
 8014a72:	f040 80b6 	bne.w	8014be2 <rcl_expand_topic_name+0x1aa>
 8014a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	f040 80bf 	bne.w	8014bfc <rcl_expand_topic_name+0x1c4>
 8014a7e:	4602      	mov	r2, r0
 8014a80:	a909      	add	r1, sp, #36	; 0x24
 8014a82:	4630      	mov	r0, r6
 8014a84:	f002 fa0e 	bl	8016ea4 <rmw_validate_node_name>
 8014a88:	2800      	cmp	r0, #0
 8014a8a:	f040 80b3 	bne.w	8014bf4 <rcl_expand_topic_name+0x1bc>
 8014a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a90:	2a00      	cmp	r2, #0
 8014a92:	f040 80b8 	bne.w	8014c06 <rcl_expand_topic_name+0x1ce>
 8014a96:	a909      	add	r1, sp, #36	; 0x24
 8014a98:	4638      	mov	r0, r7
 8014a9a:	f002 f9e5 	bl	8016e68 <rmw_validate_namespace>
 8014a9e:	2800      	cmp	r0, #0
 8014aa0:	f040 80a8 	bne.w	8014bf4 <rcl_expand_topic_name+0x1bc>
 8014aa4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014aa6:	2c00      	cmp	r4, #0
 8014aa8:	f040 80f6 	bne.w	8014c98 <rcl_expand_topic_name+0x260>
 8014aac:	217b      	movs	r1, #123	; 0x7b
 8014aae:	4640      	mov	r0, r8
 8014ab0:	f005 fce2 	bl	801a478 <strchr>
 8014ab4:	f898 3000 	ldrb.w	r3, [r8]
 8014ab8:	2b2f      	cmp	r3, #47	; 0x2f
 8014aba:	4605      	mov	r5, r0
 8014abc:	f000 80c4 	beq.w	8014c48 <rcl_expand_topic_name+0x210>
 8014ac0:	2b7e      	cmp	r3, #126	; 0x7e
 8014ac2:	d16f      	bne.n	8014ba4 <rcl_expand_topic_name+0x16c>
 8014ac4:	4638      	mov	r0, r7
 8014ac6:	f7eb fb95 	bl	80001f4 <strlen>
 8014aca:	4b87      	ldr	r3, [pc, #540]	; (8014ce8 <rcl_expand_topic_name+0x2b0>)
 8014acc:	4987      	ldr	r1, [pc, #540]	; (8014cec <rcl_expand_topic_name+0x2b4>)
 8014ace:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ad0:	9604      	str	r6, [sp, #16]
 8014ad2:	2801      	cmp	r0, #1
 8014ad4:	bf0c      	ite	eq
 8014ad6:	4618      	moveq	r0, r3
 8014ad8:	4608      	movne	r0, r1
 8014ada:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014ade:	e9cd 2300 	strd	r2, r3, [sp]
 8014ae2:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014ae6:	f108 0101 	add.w	r1, r8, #1
 8014aea:	9105      	str	r1, [sp, #20]
 8014aec:	ab14      	add	r3, sp, #80	; 0x50
 8014aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014af0:	f001 ffe8 	bl	8016ac4 <rcutils_format_string_limit>
 8014af4:	4682      	mov	sl, r0
 8014af6:	2800      	cmp	r0, #0
 8014af8:	f000 80d0 	beq.w	8014c9c <rcl_expand_topic_name+0x264>
 8014afc:	2d00      	cmp	r5, #0
 8014afe:	f000 80aa 	beq.w	8014c56 <rcl_expand_topic_name+0x21e>
 8014b02:	217b      	movs	r1, #123	; 0x7b
 8014b04:	f005 fcb8 	bl	801a478 <strchr>
 8014b08:	46d1      	mov	r9, sl
 8014b0a:	4605      	mov	r5, r0
 8014b0c:	9407      	str	r4, [sp, #28]
 8014b0e:	46d3      	mov	fp, sl
 8014b10:	464c      	mov	r4, r9
 8014b12:	2d00      	cmp	r5, #0
 8014b14:	f000 80c7 	beq.w	8014ca6 <rcl_expand_topic_name+0x26e>
 8014b18:	217d      	movs	r1, #125	; 0x7d
 8014b1a:	4620      	mov	r0, r4
 8014b1c:	f005 fcac 	bl	801a478 <strchr>
 8014b20:	eba0 0905 	sub.w	r9, r0, r5
 8014b24:	f109 0a01 	add.w	sl, r9, #1
 8014b28:	4871      	ldr	r0, [pc, #452]	; (8014cf0 <rcl_expand_topic_name+0x2b8>)
 8014b2a:	4652      	mov	r2, sl
 8014b2c:	4629      	mov	r1, r5
 8014b2e:	f005 fcb0 	bl	801a492 <strncmp>
 8014b32:	2800      	cmp	r0, #0
 8014b34:	f000 808d 	beq.w	8014c52 <rcl_expand_topic_name+0x21a>
 8014b38:	486e      	ldr	r0, [pc, #440]	; (8014cf4 <rcl_expand_topic_name+0x2bc>)
 8014b3a:	4652      	mov	r2, sl
 8014b3c:	4629      	mov	r1, r5
 8014b3e:	f005 fca8 	bl	801a492 <strncmp>
 8014b42:	b130      	cbz	r0, 8014b52 <rcl_expand_topic_name+0x11a>
 8014b44:	486c      	ldr	r0, [pc, #432]	; (8014cf8 <rcl_expand_topic_name+0x2c0>)
 8014b46:	4652      	mov	r2, sl
 8014b48:	4629      	mov	r1, r5
 8014b4a:	f005 fca2 	bl	801a492 <strncmp>
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	d15b      	bne.n	8014c0a <rcl_expand_topic_name+0x1d2>
 8014b52:	46b9      	mov	r9, r7
 8014b54:	ab16      	add	r3, sp, #88	; 0x58
 8014b56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b5a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014b5e:	ab14      	add	r3, sp, #80	; 0x50
 8014b60:	4628      	mov	r0, r5
 8014b62:	cb0c      	ldmia	r3, {r2, r3}
 8014b64:	4651      	mov	r1, sl
 8014b66:	f002 f8f9 	bl	8016d5c <rcutils_strndup>
 8014b6a:	4605      	mov	r5, r0
 8014b6c:	2800      	cmp	r0, #0
 8014b6e:	f000 80a4 	beq.w	8014cba <rcl_expand_topic_name+0x282>
 8014b72:	464a      	mov	r2, r9
 8014b74:	4620      	mov	r0, r4
 8014b76:	ab14      	add	r3, sp, #80	; 0x50
 8014b78:	4629      	mov	r1, r5
 8014b7a:	f001 fff5 	bl	8016b68 <rcutils_repl_str>
 8014b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b80:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b82:	4604      	mov	r4, r0
 8014b84:	4628      	mov	r0, r5
 8014b86:	4798      	blx	r3
 8014b88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014b8c:	4658      	mov	r0, fp
 8014b8e:	4798      	blx	r3
 8014b90:	2c00      	cmp	r4, #0
 8014b92:	f000 8083 	beq.w	8014c9c <rcl_expand_topic_name+0x264>
 8014b96:	217b      	movs	r1, #123	; 0x7b
 8014b98:	4620      	mov	r0, r4
 8014b9a:	f005 fc6d 	bl	801a478 <strchr>
 8014b9e:	46a3      	mov	fp, r4
 8014ba0:	4605      	mov	r5, r0
 8014ba2:	e7b6      	b.n	8014b12 <rcl_expand_topic_name+0xda>
 8014ba4:	2800      	cmp	r0, #0
 8014ba6:	d151      	bne.n	8014c4c <rcl_expand_topic_name+0x214>
 8014ba8:	4638      	mov	r0, r7
 8014baa:	f7eb fb23 	bl	80001f4 <strlen>
 8014bae:	4b53      	ldr	r3, [pc, #332]	; (8014cfc <rcl_expand_topic_name+0x2c4>)
 8014bb0:	4a53      	ldr	r2, [pc, #332]	; (8014d00 <rcl_expand_topic_name+0x2c8>)
 8014bb2:	f8cd 8010 	str.w	r8, [sp, #16]
 8014bb6:	2801      	cmp	r0, #1
 8014bb8:	bf0c      	ite	eq
 8014bba:	4618      	moveq	r0, r3
 8014bbc:	4610      	movne	r0, r2
 8014bbe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014bc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014bc4:	e9cd 3200 	strd	r3, r2, [sp]
 8014bc8:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014bcc:	ab14      	add	r3, sp, #80	; 0x50
 8014bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014bd0:	f001 ff78 	bl	8016ac4 <rcutils_format_string_limit>
 8014bd4:	4682      	mov	sl, r0
 8014bd6:	4653      	mov	r3, sl
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d05f      	beq.n	8014c9c <rcl_expand_topic_name+0x264>
 8014bdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014bde:	f8c3 a000 	str.w	sl, [r3]
 8014be2:	4620      	mov	r0, r4
 8014be4:	b00b      	add	sp, #44	; 0x2c
 8014be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bea:	240b      	movs	r4, #11
 8014bec:	4620      	mov	r0, r4
 8014bee:	b00b      	add	sp, #44	; 0x2c
 8014bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bf4:	f7ff fe98 	bl	8014928 <rcl_convert_rmw_ret_to_rcl_ret>
 8014bf8:	4604      	mov	r4, r0
 8014bfa:	e7f2      	b.n	8014be2 <rcl_expand_topic_name+0x1aa>
 8014bfc:	2467      	movs	r4, #103	; 0x67
 8014bfe:	4620      	mov	r0, r4
 8014c00:	b00b      	add	sp, #44	; 0x2c
 8014c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c06:	24c9      	movs	r4, #201	; 0xc9
 8014c08:	e7eb      	b.n	8014be2 <rcl_expand_topic_name+0x1aa>
 8014c0a:	f109 32ff 	add.w	r2, r9, #4294967295
 8014c0e:	9806      	ldr	r0, [sp, #24]
 8014c10:	1c69      	adds	r1, r5, #1
 8014c12:	f7fa fe95 	bl	800f940 <rcutils_string_map_getn>
 8014c16:	4681      	mov	r9, r0
 8014c18:	2800      	cmp	r0, #0
 8014c1a:	d19b      	bne.n	8014b54 <rcl_expand_topic_name+0x11c>
 8014c1c:	aa16      	add	r2, sp, #88	; 0x58
 8014c1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014c20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014c22:	f8c3 9000 	str.w	r9, [r3]
 8014c26:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014c2a:	ab14      	add	r3, sp, #80	; 0x50
 8014c2c:	cb0c      	ldmia	r3, {r2, r3}
 8014c2e:	4651      	mov	r1, sl
 8014c30:	4628      	mov	r0, r5
 8014c32:	f002 f893 	bl	8016d5c <rcutils_strndup>
 8014c36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c38:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c3a:	4798      	blx	r3
 8014c3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c40:	4658      	mov	r0, fp
 8014c42:	4798      	blx	r3
 8014c44:	2469      	movs	r4, #105	; 0x69
 8014c46:	e7cc      	b.n	8014be2 <rcl_expand_topic_name+0x1aa>
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	d03e      	beq.n	8014cca <rcl_expand_topic_name+0x292>
 8014c4c:	46c1      	mov	r9, r8
 8014c4e:	46a2      	mov	sl, r4
 8014c50:	e75c      	b.n	8014b0c <rcl_expand_topic_name+0xd4>
 8014c52:	46b1      	mov	r9, r6
 8014c54:	e77e      	b.n	8014b54 <rcl_expand_topic_name+0x11c>
 8014c56:	f89a 3000 	ldrb.w	r3, [sl]
 8014c5a:	2b2f      	cmp	r3, #47	; 0x2f
 8014c5c:	d0be      	beq.n	8014bdc <rcl_expand_topic_name+0x1a4>
 8014c5e:	4638      	mov	r0, r7
 8014c60:	f7eb fac8 	bl	80001f4 <strlen>
 8014c64:	4b25      	ldr	r3, [pc, #148]	; (8014cfc <rcl_expand_topic_name+0x2c4>)
 8014c66:	4926      	ldr	r1, [pc, #152]	; (8014d00 <rcl_expand_topic_name+0x2c8>)
 8014c68:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014c6a:	f8cd a010 	str.w	sl, [sp, #16]
 8014c6e:	2801      	cmp	r0, #1
 8014c70:	bf0c      	ite	eq
 8014c72:	4618      	moveq	r0, r3
 8014c74:	4608      	movne	r0, r1
 8014c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c7a:	e9cd 2300 	strd	r2, r3, [sp]
 8014c7e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014c82:	ab14      	add	r3, sp, #80	; 0x50
 8014c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014c86:	f001 ff1d 	bl	8016ac4 <rcutils_format_string_limit>
 8014c8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014c8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c8e:	4603      	mov	r3, r0
 8014c90:	4650      	mov	r0, sl
 8014c92:	469a      	mov	sl, r3
 8014c94:	4790      	blx	r2
 8014c96:	e79e      	b.n	8014bd6 <rcl_expand_topic_name+0x19e>
 8014c98:	24ca      	movs	r4, #202	; 0xca
 8014c9a:	e7a2      	b.n	8014be2 <rcl_expand_topic_name+0x1aa>
 8014c9c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	6013      	str	r3, [r2, #0]
 8014ca2:	240a      	movs	r4, #10
 8014ca4:	e79d      	b.n	8014be2 <rcl_expand_topic_name+0x1aa>
 8014ca6:	465b      	mov	r3, fp
 8014ca8:	9c07      	ldr	r4, [sp, #28]
 8014caa:	46da      	mov	sl, fp
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d1d2      	bne.n	8014c56 <rcl_expand_topic_name+0x21e>
 8014cb0:	f898 3000 	ldrb.w	r3, [r8]
 8014cb4:	2b2f      	cmp	r3, #47	; 0x2f
 8014cb6:	d091      	beq.n	8014bdc <rcl_expand_topic_name+0x1a4>
 8014cb8:	e776      	b.n	8014ba8 <rcl_expand_topic_name+0x170>
 8014cba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014cbc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014cbe:	601d      	str	r5, [r3, #0]
 8014cc0:	4658      	mov	r0, fp
 8014cc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014cc4:	4798      	blx	r3
 8014cc6:	240a      	movs	r4, #10
 8014cc8:	e78b      	b.n	8014be2 <rcl_expand_topic_name+0x1aa>
 8014cca:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8014cce:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014cd2:	ab14      	add	r3, sp, #80	; 0x50
 8014cd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014cd6:	4640      	mov	r0, r8
 8014cd8:	f002 f81e 	bl	8016d18 <rcutils_strdup>
 8014cdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014cde:	2800      	cmp	r0, #0
 8014ce0:	bf08      	it	eq
 8014ce2:	240a      	moveq	r4, #10
 8014ce4:	6018      	str	r0, [r3, #0]
 8014ce6:	e77c      	b.n	8014be2 <rcl_expand_topic_name+0x1aa>
 8014ce8:	0801b9a0 	.word	0x0801b9a0
 8014cec:	0801b9dc 	.word	0x0801b9dc
 8014cf0:	0801b9ec 	.word	0x0801b9ec
 8014cf4:	0801b9f4 	.word	0x0801b9f4
 8014cf8:	0801b9fc 	.word	0x0801b9fc
 8014cfc:	0801b9b0 	.word	0x0801b9b0
 8014d00:	0801b9e4 	.word	0x0801b9e4

08014d04 <rcl_get_default_topic_name_substitutions>:
 8014d04:	2800      	cmp	r0, #0
 8014d06:	bf0c      	ite	eq
 8014d08:	200b      	moveq	r0, #11
 8014d0a:	2000      	movne	r0, #0
 8014d0c:	4770      	bx	lr
 8014d0e:	bf00      	nop

08014d10 <rcl_init>:
 8014d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d14:	1e07      	subs	r7, r0, #0
 8014d16:	b09f      	sub	sp, #124	; 0x7c
 8014d18:	4688      	mov	r8, r1
 8014d1a:	4692      	mov	sl, r2
 8014d1c:	4699      	mov	r9, r3
 8014d1e:	f340 8097 	ble.w	8014e50 <rcl_init+0x140>
 8014d22:	2900      	cmp	r1, #0
 8014d24:	f000 8097 	beq.w	8014e56 <rcl_init+0x146>
 8014d28:	1f0d      	subs	r5, r1, #4
 8014d2a:	2400      	movs	r4, #0
 8014d2c:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8014d30:	3401      	adds	r4, #1
 8014d32:	2e00      	cmp	r6, #0
 8014d34:	f000 808f 	beq.w	8014e56 <rcl_init+0x146>
 8014d38:	42a7      	cmp	r7, r4
 8014d3a:	d1f7      	bne.n	8014d2c <rcl_init+0x1c>
 8014d3c:	f1ba 0f00 	cmp.w	sl, #0
 8014d40:	f000 8089 	beq.w	8014e56 <rcl_init+0x146>
 8014d44:	f8da 4000 	ldr.w	r4, [sl]
 8014d48:	2c00      	cmp	r4, #0
 8014d4a:	f000 8084 	beq.w	8014e56 <rcl_init+0x146>
 8014d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d50:	ad19      	add	r5, sp, #100	; 0x64
 8014d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d54:	6823      	ldr	r3, [r4, #0]
 8014d56:	602b      	str	r3, [r5, #0]
 8014d58:	a819      	add	r0, sp, #100	; 0x64
 8014d5a:	f7fa fcb7 	bl	800f6cc <rcutils_allocator_is_valid>
 8014d5e:	2800      	cmp	r0, #0
 8014d60:	d079      	beq.n	8014e56 <rcl_init+0x146>
 8014d62:	f1b9 0f00 	cmp.w	r9, #0
 8014d66:	d076      	beq.n	8014e56 <rcl_init+0x146>
 8014d68:	f8d9 3000 	ldr.w	r3, [r9]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d177      	bne.n	8014e60 <rcl_init+0x150>
 8014d70:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8014d74:	2178      	movs	r1, #120	; 0x78
 8014d76:	2001      	movs	r0, #1
 8014d78:	4798      	blx	r3
 8014d7a:	4604      	mov	r4, r0
 8014d7c:	f8c9 0000 	str.w	r0, [r9]
 8014d80:	2800      	cmp	r0, #0
 8014d82:	f000 80ba 	beq.w	8014efa <rcl_init+0x1ea>
 8014d86:	a802      	add	r0, sp, #8
 8014d88:	f002 f804 	bl	8016d94 <rmw_get_zero_initialized_context>
 8014d8c:	a902      	add	r1, sp, #8
 8014d8e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014d92:	2250      	movs	r2, #80	; 0x50
 8014d94:	ac19      	add	r4, sp, #100	; 0x64
 8014d96:	f005 fc86 	bl	801a6a6 <memcpy>
 8014d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d9c:	f8d9 5000 	ldr.w	r5, [r9]
 8014da0:	6826      	ldr	r6, [r4, #0]
 8014da2:	462c      	mov	r4, r5
 8014da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014da6:	f105 0114 	add.w	r1, r5, #20
 8014daa:	6026      	str	r6, [r4, #0]
 8014dac:	4650      	mov	r0, sl
 8014dae:	f000 f931 	bl	8015014 <rcl_init_options_copy>
 8014db2:	4606      	mov	r6, r0
 8014db4:	2800      	cmp	r0, #0
 8014db6:	d144      	bne.n	8014e42 <rcl_init+0x132>
 8014db8:	f8d9 a000 	ldr.w	sl, [r9]
 8014dbc:	463c      	mov	r4, r7
 8014dbe:	17fd      	asrs	r5, r7, #31
 8014dc0:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8014dc4:	f8ca 0020 	str.w	r0, [sl, #32]
 8014dc8:	2f00      	cmp	r7, #0
 8014dca:	d050      	beq.n	8014e6e <rcl_init+0x15e>
 8014dcc:	f1b8 0f00 	cmp.w	r8, #0
 8014dd0:	d04d      	beq.n	8014e6e <rcl_init+0x15e>
 8014dd2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8014dd6:	4638      	mov	r0, r7
 8014dd8:	2104      	movs	r1, #4
 8014dda:	4798      	blx	r3
 8014ddc:	f8ca 0020 	str.w	r0, [sl, #32]
 8014de0:	f8d9 a000 	ldr.w	sl, [r9]
 8014de4:	f8da 3020 	ldr.w	r3, [sl, #32]
 8014de8:	46d3      	mov	fp, sl
 8014dea:	b34b      	cbz	r3, 8014e40 <rcl_init+0x130>
 8014dec:	2f01      	cmp	r7, #1
 8014dee:	f175 0300 	sbcs.w	r3, r5, #0
 8014df2:	db3c      	blt.n	8014e6e <rcl_init+0x15e>
 8014df4:	f1a8 0804 	sub.w	r8, r8, #4
 8014df8:	2600      	movs	r6, #0
 8014dfa:	2700      	movs	r7, #0
 8014dfc:	e00c      	b.n	8014e18 <rcl_init+0x108>
 8014dfe:	f8d8 1000 	ldr.w	r1, [r8]
 8014e02:	f005 fc50 	bl	801a6a6 <memcpy>
 8014e06:	3601      	adds	r6, #1
 8014e08:	f147 0700 	adc.w	r7, r7, #0
 8014e0c:	42bd      	cmp	r5, r7
 8014e0e:	bf08      	it	eq
 8014e10:	42b4      	cmpeq	r4, r6
 8014e12:	d02a      	beq.n	8014e6a <rcl_init+0x15a>
 8014e14:	f8d9 b000 	ldr.w	fp, [r9]
 8014e18:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8014e1c:	f7eb f9ea 	bl	80001f4 <strlen>
 8014e20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e22:	991d      	ldr	r1, [sp, #116]	; 0x74
 8014e24:	f8db a020 	ldr.w	sl, [fp, #32]
 8014e28:	9001      	str	r0, [sp, #4]
 8014e2a:	4798      	blx	r3
 8014e2c:	f8d9 1000 	ldr.w	r1, [r9]
 8014e30:	9a01      	ldr	r2, [sp, #4]
 8014e32:	6a09      	ldr	r1, [r1, #32]
 8014e34:	00b3      	lsls	r3, r6, #2
 8014e36:	f84a 0003 	str.w	r0, [sl, r3]
 8014e3a:	58c8      	ldr	r0, [r1, r3]
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	d1de      	bne.n	8014dfe <rcl_init+0xee>
 8014e40:	260a      	movs	r6, #10
 8014e42:	4648      	mov	r0, r9
 8014e44:	f7ff fd94 	bl	8014970 <__cleanup_context>
 8014e48:	4630      	mov	r0, r6
 8014e4a:	b01f      	add	sp, #124	; 0x7c
 8014e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e50:	2900      	cmp	r1, #0
 8014e52:	f43f af73 	beq.w	8014d3c <rcl_init+0x2c>
 8014e56:	260b      	movs	r6, #11
 8014e58:	4630      	mov	r0, r6
 8014e5a:	b01f      	add	sp, #124	; 0x7c
 8014e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e60:	2664      	movs	r6, #100	; 0x64
 8014e62:	4630      	mov	r0, r6
 8014e64:	b01f      	add	sp, #124	; 0x7c
 8014e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e6a:	f8d9 a000 	ldr.w	sl, [r9]
 8014e6e:	4a2c      	ldr	r2, [pc, #176]	; (8014f20 <rcl_init+0x210>)
 8014e70:	6813      	ldr	r3, [r2, #0]
 8014e72:	3301      	adds	r3, #1
 8014e74:	d03b      	beq.n	8014eee <rcl_init+0x1de>
 8014e76:	6013      	str	r3, [r2, #0]
 8014e78:	4619      	mov	r1, r3
 8014e7a:	2000      	movs	r0, #0
 8014e7c:	f8da 4014 	ldr.w	r4, [sl, #20]
 8014e80:	f8c9 3004 	str.w	r3, [r9, #4]
 8014e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e86:	3301      	adds	r3, #1
 8014e88:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8014e8c:	d039      	beq.n	8014f02 <rcl_init+0x1f2>
 8014e8e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8014e92:	b94b      	cbnz	r3, 8014ea8 <rcl_init+0x198>
 8014e94:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8014e98:	f000 f962 	bl	8015160 <rcl_get_localhost_only>
 8014e9c:	4606      	mov	r6, r0
 8014e9e:	2800      	cmp	r0, #0
 8014ea0:	d1cf      	bne.n	8014e42 <rcl_init+0x132>
 8014ea2:	f8d9 3000 	ldr.w	r3, [r9]
 8014ea6:	695c      	ldr	r4, [r3, #20]
 8014ea8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014eaa:	aa18      	add	r2, sp, #96	; 0x60
 8014eac:	a917      	add	r1, sp, #92	; 0x5c
 8014eae:	f000 fe65 	bl	8015b7c <rcl_validate_enclave_name>
 8014eb2:	4606      	mov	r6, r0
 8014eb4:	2800      	cmp	r0, #0
 8014eb6:	d1c4      	bne.n	8014e42 <rcl_init+0x132>
 8014eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014eba:	bb03      	cbnz	r3, 8014efe <rcl_init+0x1ee>
 8014ebc:	f8d9 1000 	ldr.w	r1, [r9]
 8014ec0:	694b      	ldr	r3, [r1, #20]
 8014ec2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014ec4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8014ec8:	f000 fbb8 	bl	801563c <rcl_get_security_options_from_environment>
 8014ecc:	4606      	mov	r6, r0
 8014ece:	2800      	cmp	r0, #0
 8014ed0:	d1b7      	bne.n	8014e42 <rcl_init+0x132>
 8014ed2:	f8d9 1000 	ldr.w	r1, [r9]
 8014ed6:	6948      	ldr	r0, [r1, #20]
 8014ed8:	3128      	adds	r1, #40	; 0x28
 8014eda:	3018      	adds	r0, #24
 8014edc:	f002 f988 	bl	80171f0 <rmw_init>
 8014ee0:	4606      	mov	r6, r0
 8014ee2:	2800      	cmp	r0, #0
 8014ee4:	d0b8      	beq.n	8014e58 <rcl_init+0x148>
 8014ee6:	f7ff fd1f 	bl	8014928 <rcl_convert_rmw_ret_to_rcl_ret>
 8014eea:	4606      	mov	r6, r0
 8014eec:	e7a9      	b.n	8014e42 <rcl_init+0x132>
 8014eee:	2401      	movs	r4, #1
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	4621      	mov	r1, r4
 8014ef4:	6014      	str	r4, [r2, #0]
 8014ef6:	4623      	mov	r3, r4
 8014ef8:	e7c0      	b.n	8014e7c <rcl_init+0x16c>
 8014efa:	260a      	movs	r6, #10
 8014efc:	e7ac      	b.n	8014e58 <rcl_init+0x148>
 8014efe:	2601      	movs	r6, #1
 8014f00:	e79f      	b.n	8014e42 <rcl_init+0x132>
 8014f02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014f06:	f004 fba3 	bl	8019650 <rcl_get_default_domain_id>
 8014f0a:	4606      	mov	r6, r0
 8014f0c:	2800      	cmp	r0, #0
 8014f0e:	d198      	bne.n	8014e42 <rcl_init+0x132>
 8014f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f12:	3301      	adds	r3, #1
 8014f14:	f8d9 3000 	ldr.w	r3, [r9]
 8014f18:	bf08      	it	eq
 8014f1a:	6260      	streq	r0, [r4, #36]	; 0x24
 8014f1c:	695c      	ldr	r4, [r3, #20]
 8014f1e:	e7b6      	b.n	8014e8e <rcl_init+0x17e>
 8014f20:	20009c50 	.word	0x20009c50

08014f24 <rcl_get_zero_initialized_init_options>:
 8014f24:	2000      	movs	r0, #0
 8014f26:	4770      	bx	lr

08014f28 <rcl_init_options_init>:
 8014f28:	b084      	sub	sp, #16
 8014f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f2c:	b091      	sub	sp, #68	; 0x44
 8014f2e:	af17      	add	r7, sp, #92	; 0x5c
 8014f30:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8014f34:	2800      	cmp	r0, #0
 8014f36:	d044      	beq.n	8014fc2 <rcl_init_options_init+0x9a>
 8014f38:	6803      	ldr	r3, [r0, #0]
 8014f3a:	4606      	mov	r6, r0
 8014f3c:	b133      	cbz	r3, 8014f4c <rcl_init_options_init+0x24>
 8014f3e:	2464      	movs	r4, #100	; 0x64
 8014f40:	4620      	mov	r0, r4
 8014f42:	b011      	add	sp, #68	; 0x44
 8014f44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014f48:	b004      	add	sp, #16
 8014f4a:	4770      	bx	lr
 8014f4c:	4638      	mov	r0, r7
 8014f4e:	f7fa fbbd 	bl	800f6cc <rcutils_allocator_is_valid>
 8014f52:	2800      	cmp	r0, #0
 8014f54:	d035      	beq.n	8014fc2 <rcl_init_options_init+0x9a>
 8014f56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f58:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014f5a:	2050      	movs	r0, #80	; 0x50
 8014f5c:	4798      	blx	r3
 8014f5e:	4604      	mov	r4, r0
 8014f60:	6030      	str	r0, [r6, #0]
 8014f62:	2800      	cmp	r0, #0
 8014f64:	d02f      	beq.n	8014fc6 <rcl_init_options_init+0x9e>
 8014f66:	46bc      	mov	ip, r7
 8014f68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014f6c:	4625      	mov	r5, r4
 8014f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014f70:	f8dc 3000 	ldr.w	r3, [ip]
 8014f74:	602b      	str	r3, [r5, #0]
 8014f76:	a802      	add	r0, sp, #8
 8014f78:	ad02      	add	r5, sp, #8
 8014f7a:	f001 ff13 	bl	8016da4 <rmw_get_zero_initialized_init_options>
 8014f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f80:	3418      	adds	r4, #24
 8014f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014f90:	6833      	ldr	r3, [r6, #0]
 8014f92:	e884 0003 	stmia.w	r4, {r0, r1}
 8014f96:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8014f9a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014f9e:	f103 0018 	add.w	r0, r3, #24
 8014fa2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8014fa6:	f002 f849 	bl	801703c <rmw_init_options_init>
 8014faa:	4604      	mov	r4, r0
 8014fac:	2800      	cmp	r0, #0
 8014fae:	d0c7      	beq.n	8014f40 <rcl_init_options_init+0x18>
 8014fb0:	6830      	ldr	r0, [r6, #0]
 8014fb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014fb4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014fb6:	4798      	blx	r3
 8014fb8:	4620      	mov	r0, r4
 8014fba:	f7ff fcb5 	bl	8014928 <rcl_convert_rmw_ret_to_rcl_ret>
 8014fbe:	4604      	mov	r4, r0
 8014fc0:	e7be      	b.n	8014f40 <rcl_init_options_init+0x18>
 8014fc2:	240b      	movs	r4, #11
 8014fc4:	e7bc      	b.n	8014f40 <rcl_init_options_init+0x18>
 8014fc6:	240a      	movs	r4, #10
 8014fc8:	e7ba      	b.n	8014f40 <rcl_init_options_init+0x18>
 8014fca:	bf00      	nop

08014fcc <rcl_init_options_fini>:
 8014fcc:	b570      	push	{r4, r5, r6, lr}
 8014fce:	b086      	sub	sp, #24
 8014fd0:	b1c0      	cbz	r0, 8015004 <rcl_init_options_fini+0x38>
 8014fd2:	6804      	ldr	r4, [r0, #0]
 8014fd4:	4606      	mov	r6, r0
 8014fd6:	b1ac      	cbz	r4, 8015004 <rcl_init_options_fini+0x38>
 8014fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014fda:	ad01      	add	r5, sp, #4
 8014fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014fde:	6823      	ldr	r3, [r4, #0]
 8014fe0:	602b      	str	r3, [r5, #0]
 8014fe2:	a801      	add	r0, sp, #4
 8014fe4:	f7fa fb72 	bl	800f6cc <rcutils_allocator_is_valid>
 8014fe8:	b160      	cbz	r0, 8015004 <rcl_init_options_fini+0x38>
 8014fea:	6830      	ldr	r0, [r6, #0]
 8014fec:	3018      	adds	r0, #24
 8014fee:	f002 f8bf 	bl	8017170 <rmw_init_options_fini>
 8014ff2:	4604      	mov	r4, r0
 8014ff4:	b950      	cbnz	r0, 801500c <rcl_init_options_fini+0x40>
 8014ff6:	6830      	ldr	r0, [r6, #0]
 8014ff8:	9b02      	ldr	r3, [sp, #8]
 8014ffa:	9905      	ldr	r1, [sp, #20]
 8014ffc:	4798      	blx	r3
 8014ffe:	4620      	mov	r0, r4
 8015000:	b006      	add	sp, #24
 8015002:	bd70      	pop	{r4, r5, r6, pc}
 8015004:	240b      	movs	r4, #11
 8015006:	4620      	mov	r0, r4
 8015008:	b006      	add	sp, #24
 801500a:	bd70      	pop	{r4, r5, r6, pc}
 801500c:	f7ff fc8c 	bl	8014928 <rcl_convert_rmw_ret_to_rcl_ret>
 8015010:	4604      	mov	r4, r0
 8015012:	e7f8      	b.n	8015006 <rcl_init_options_fini+0x3a>

08015014 <rcl_init_options_copy>:
 8015014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015018:	b096      	sub	sp, #88	; 0x58
 801501a:	2800      	cmp	r0, #0
 801501c:	d063      	beq.n	80150e6 <rcl_init_options_copy+0xd2>
 801501e:	6806      	ldr	r6, [r0, #0]
 8015020:	4605      	mov	r5, r0
 8015022:	2e00      	cmp	r6, #0
 8015024:	d05f      	beq.n	80150e6 <rcl_init_options_copy+0xd2>
 8015026:	460c      	mov	r4, r1
 8015028:	2900      	cmp	r1, #0
 801502a:	d05c      	beq.n	80150e6 <rcl_init_options_copy+0xd2>
 801502c:	680b      	ldr	r3, [r1, #0]
 801502e:	b123      	cbz	r3, 801503a <rcl_init_options_copy+0x26>
 8015030:	2664      	movs	r6, #100	; 0x64
 8015032:	4630      	mov	r0, r6
 8015034:	b016      	add	sp, #88	; 0x58
 8015036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801503a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801503c:	af11      	add	r7, sp, #68	; 0x44
 801503e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015040:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8015044:	6833      	ldr	r3, [r6, #0]
 8015046:	603b      	str	r3, [r7, #0]
 8015048:	4640      	mov	r0, r8
 801504a:	f7fa fb3f 	bl	800f6cc <rcutils_allocator_is_valid>
 801504e:	2800      	cmp	r0, #0
 8015050:	d049      	beq.n	80150e6 <rcl_init_options_copy+0xd2>
 8015052:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015054:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015056:	2050      	movs	r0, #80	; 0x50
 8015058:	4798      	blx	r3
 801505a:	4606      	mov	r6, r0
 801505c:	6020      	str	r0, [r4, #0]
 801505e:	2800      	cmp	r0, #0
 8015060:	d077      	beq.n	8015152 <rcl_init_options_copy+0x13e>
 8015062:	46c4      	mov	ip, r8
 8015064:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015068:	4637      	mov	r7, r6
 801506a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801506c:	f8dc 3000 	ldr.w	r3, [ip]
 8015070:	603b      	str	r3, [r7, #0]
 8015072:	a802      	add	r0, sp, #8
 8015074:	af02      	add	r7, sp, #8
 8015076:	f001 fe95 	bl	8016da4 <rmw_get_zero_initialized_init_options>
 801507a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801507c:	3618      	adds	r6, #24
 801507e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015080:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015082:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015084:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015086:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015088:	e897 0003 	ldmia.w	r7, {r0, r1}
 801508c:	ab16      	add	r3, sp, #88	; 0x58
 801508e:	e886 0003 	stmia.w	r6, {r0, r1}
 8015092:	e913 0003 	ldmdb	r3, {r0, r1}
 8015096:	6823      	ldr	r3, [r4, #0]
 8015098:	e88d 0003 	stmia.w	sp, {r0, r1}
 801509c:	f103 0018 	add.w	r0, r3, #24
 80150a0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80150a4:	f001 ffca 	bl	801703c <rmw_init_options_init>
 80150a8:	4606      	mov	r6, r0
 80150aa:	bb08      	cbnz	r0, 80150f0 <rcl_init_options_copy+0xdc>
 80150ac:	682f      	ldr	r7, [r5, #0]
 80150ae:	f8d4 c000 	ldr.w	ip, [r4]
 80150b2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150b4:	4666      	mov	r6, ip
 80150b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	6033      	str	r3, [r6, #0]
 80150bc:	f10c 0018 	add.w	r0, ip, #24
 80150c0:	f002 f856 	bl	8017170 <rmw_init_options_fini>
 80150c4:	4607      	mov	r7, r0
 80150c6:	b1f0      	cbz	r0, 8015106 <rcl_init_options_copy+0xf2>
 80150c8:	f7fa fb0e 	bl	800f6e8 <rcutils_get_error_string>
 80150cc:	f7fa fb22 	bl	800f714 <rcutils_reset_error>
 80150d0:	4620      	mov	r0, r4
 80150d2:	f7ff ff7b 	bl	8014fcc <rcl_init_options_fini>
 80150d6:	4606      	mov	r6, r0
 80150d8:	2800      	cmp	r0, #0
 80150da:	d1aa      	bne.n	8015032 <rcl_init_options_copy+0x1e>
 80150dc:	4638      	mov	r0, r7
 80150de:	f7ff fc23 	bl	8014928 <rcl_convert_rmw_ret_to_rcl_ret>
 80150e2:	4606      	mov	r6, r0
 80150e4:	e7a5      	b.n	8015032 <rcl_init_options_copy+0x1e>
 80150e6:	260b      	movs	r6, #11
 80150e8:	4630      	mov	r0, r6
 80150ea:	b016      	add	sp, #88	; 0x58
 80150ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80150f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80150f4:	6820      	ldr	r0, [r4, #0]
 80150f6:	4798      	blx	r3
 80150f8:	4630      	mov	r0, r6
 80150fa:	f7ff fc15 	bl	8014928 <rcl_convert_rmw_ret_to_rcl_ret>
 80150fe:	4606      	mov	r6, r0
 8015100:	2800      	cmp	r0, #0
 8015102:	d0d3      	beq.n	80150ac <rcl_init_options_copy+0x98>
 8015104:	e795      	b.n	8015032 <rcl_init_options_copy+0x1e>
 8015106:	a802      	add	r0, sp, #8
 8015108:	ae02      	add	r6, sp, #8
 801510a:	6827      	ldr	r7, [r4, #0]
 801510c:	f001 fe4a 	bl	8016da4 <rmw_get_zero_initialized_init_options>
 8015110:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015112:	3718      	adds	r7, #24
 8015114:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015116:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015118:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801511a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801511c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801511e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015122:	682a      	ldr	r2, [r5, #0]
 8015124:	6823      	ldr	r3, [r4, #0]
 8015126:	e887 0003 	stmia.w	r7, {r0, r1}
 801512a:	f102 0018 	add.w	r0, r2, #24
 801512e:	f103 0118 	add.w	r1, r3, #24
 8015132:	f001 ffdb 	bl	80170ec <rmw_init_options_copy>
 8015136:	4606      	mov	r6, r0
 8015138:	2800      	cmp	r0, #0
 801513a:	f43f af7a 	beq.w	8015032 <rcl_init_options_copy+0x1e>
 801513e:	f7fa fad3 	bl	800f6e8 <rcutils_get_error_string>
 8015142:	f7fa fae7 	bl	800f714 <rcutils_reset_error>
 8015146:	4620      	mov	r0, r4
 8015148:	f7ff ff40 	bl	8014fcc <rcl_init_options_fini>
 801514c:	b118      	cbz	r0, 8015156 <rcl_init_options_copy+0x142>
 801514e:	4606      	mov	r6, r0
 8015150:	e76f      	b.n	8015032 <rcl_init_options_copy+0x1e>
 8015152:	260a      	movs	r6, #10
 8015154:	e76d      	b.n	8015032 <rcl_init_options_copy+0x1e>
 8015156:	4630      	mov	r0, r6
 8015158:	f7ff fbe6 	bl	8014928 <rcl_convert_rmw_ret_to_rcl_ret>
 801515c:	4606      	mov	r6, r0
 801515e:	e768      	b.n	8015032 <rcl_init_options_copy+0x1e>

08015160 <rcl_get_localhost_only>:
 8015160:	b510      	push	{r4, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	2300      	movs	r3, #0
 8015166:	9301      	str	r3, [sp, #4]
 8015168:	b1b8      	cbz	r0, 801519a <rcl_get_localhost_only+0x3a>
 801516a:	4604      	mov	r4, r0
 801516c:	a901      	add	r1, sp, #4
 801516e:	480c      	ldr	r0, [pc, #48]	; (80151a0 <rcl_get_localhost_only+0x40>)
 8015170:	f001 fce2 	bl	8016b38 <rcutils_get_env>
 8015174:	b110      	cbz	r0, 801517c <rcl_get_localhost_only+0x1c>
 8015176:	2001      	movs	r0, #1
 8015178:	b002      	add	sp, #8
 801517a:	bd10      	pop	{r4, pc}
 801517c:	9b01      	ldr	r3, [sp, #4]
 801517e:	b113      	cbz	r3, 8015186 <rcl_get_localhost_only+0x26>
 8015180:	781a      	ldrb	r2, [r3, #0]
 8015182:	2a31      	cmp	r2, #49	; 0x31
 8015184:	d004      	beq.n	8015190 <rcl_get_localhost_only+0x30>
 8015186:	2302      	movs	r3, #2
 8015188:	2000      	movs	r0, #0
 801518a:	7023      	strb	r3, [r4, #0]
 801518c:	b002      	add	sp, #8
 801518e:	bd10      	pop	{r4, pc}
 8015190:	785b      	ldrb	r3, [r3, #1]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d1f7      	bne.n	8015186 <rcl_get_localhost_only+0x26>
 8015196:	2301      	movs	r3, #1
 8015198:	e7f6      	b.n	8015188 <rcl_get_localhost_only+0x28>
 801519a:	200b      	movs	r0, #11
 801519c:	b002      	add	sp, #8
 801519e:	bd10      	pop	{r4, pc}
 80151a0:	0801ba08 	.word	0x0801ba08

080151a4 <rcl_get_zero_initialized_node>:
 80151a4:	4a03      	ldr	r2, [pc, #12]	; (80151b4 <rcl_get_zero_initialized_node+0x10>)
 80151a6:	4603      	mov	r3, r0
 80151a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80151b0:	4618      	mov	r0, r3
 80151b2:	4770      	bx	lr
 80151b4:	0801ba28 	.word	0x0801ba28

080151b8 <rcl_node_init>:
 80151b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151bc:	b09b      	sub	sp, #108	; 0x6c
 80151be:	4604      	mov	r4, r0
 80151c0:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 80151c4:	f04f 0c00 	mov.w	ip, #0
 80151c8:	a815      	add	r0, sp, #84	; 0x54
 80151ca:	460e      	mov	r6, r1
 80151cc:	4615      	mov	r5, r2
 80151ce:	461f      	mov	r7, r3
 80151d0:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80151d4:	f004 faf8 	bl	80197c8 <rcl_guard_condition_get_default_options>
 80151d8:	f1b8 0f00 	cmp.w	r8, #0
 80151dc:	f000 80fd 	beq.w	80153da <rcl_node_init+0x222>
 80151e0:	f108 0b04 	add.w	fp, r8, #4
 80151e4:	4658      	mov	r0, fp
 80151e6:	f7fa fa71 	bl	800f6cc <rcutils_allocator_is_valid>
 80151ea:	2800      	cmp	r0, #0
 80151ec:	f000 80f5 	beq.w	80153da <rcl_node_init+0x222>
 80151f0:	2e00      	cmp	r6, #0
 80151f2:	f000 80f2 	beq.w	80153da <rcl_node_init+0x222>
 80151f6:	2d00      	cmp	r5, #0
 80151f8:	f000 80ef 	beq.w	80153da <rcl_node_init+0x222>
 80151fc:	2c00      	cmp	r4, #0
 80151fe:	f000 80ec 	beq.w	80153da <rcl_node_init+0x222>
 8015202:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015206:	f1b9 0f00 	cmp.w	r9, #0
 801520a:	f040 8112 	bne.w	8015432 <rcl_node_init+0x27a>
 801520e:	2f00      	cmp	r7, #0
 8015210:	f000 80e3 	beq.w	80153da <rcl_node_init+0x222>
 8015214:	4638      	mov	r0, r7
 8015216:	f7ff fba5 	bl	8014964 <rcl_context_is_valid>
 801521a:	4682      	mov	sl, r0
 801521c:	2800      	cmp	r0, #0
 801521e:	f000 80e2 	beq.w	80153e6 <rcl_node_init+0x22e>
 8015222:	464a      	mov	r2, r9
 8015224:	a914      	add	r1, sp, #80	; 0x50
 8015226:	4630      	mov	r0, r6
 8015228:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 801522c:	f001 fe3a 	bl	8016ea4 <rmw_validate_node_name>
 8015230:	4681      	mov	r9, r0
 8015232:	2800      	cmp	r0, #0
 8015234:	f040 80d3 	bne.w	80153de <rcl_node_init+0x226>
 8015238:	9814      	ldr	r0, [sp, #80]	; 0x50
 801523a:	2800      	cmp	r0, #0
 801523c:	f040 8105 	bne.w	801544a <rcl_node_init+0x292>
 8015240:	4628      	mov	r0, r5
 8015242:	f7ea ffd7 	bl	80001f4 <strlen>
 8015246:	2800      	cmp	r0, #0
 8015248:	f040 80d0 	bne.w	80153ec <rcl_node_init+0x234>
 801524c:	4d8e      	ldr	r5, [pc, #568]	; (8015488 <rcl_node_init+0x2d0>)
 801524e:	a914      	add	r1, sp, #80	; 0x50
 8015250:	2200      	movs	r2, #0
 8015252:	4628      	mov	r0, r5
 8015254:	f001 fe08 	bl	8016e68 <rmw_validate_namespace>
 8015258:	4681      	mov	r9, r0
 801525a:	2800      	cmp	r0, #0
 801525c:	f040 80bf 	bne.w	80153de <rcl_node_init+0x226>
 8015260:	4682      	mov	sl, r0
 8015262:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015264:	2b00      	cmp	r3, #0
 8015266:	f040 80f5 	bne.w	8015454 <rcl_node_init+0x29c>
 801526a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801526e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015272:	9307      	str	r3, [sp, #28]
 8015274:	2030      	movs	r0, #48	; 0x30
 8015276:	4790      	blx	r2
 8015278:	4681      	mov	r9, r0
 801527a:	6060      	str	r0, [r4, #4]
 801527c:	2800      	cmp	r0, #0
 801527e:	f000 80de 	beq.w	801543e <rcl_node_init+0x286>
 8015282:	9b07      	ldr	r3, [sp, #28]
 8015284:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8015288:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 801528c:	a80a      	add	r0, sp, #40	; 0x28
 801528e:	f7f9 faad 	bl	800e7ec <rcl_node_get_default_options>
 8015292:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8015296:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801529a:	46cc      	mov	ip, r9
 801529c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152a0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80152a4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80152a8:	6861      	ldr	r1, [r4, #4]
 80152aa:	6027      	str	r7, [r4, #0]
 80152ac:	4640      	mov	r0, r8
 80152ae:	f7f9 fab9 	bl	800e824 <rcl_node_options_copy>
 80152b2:	2800      	cmp	r0, #0
 80152b4:	d167      	bne.n	8015386 <rcl_node_init+0x1ce>
 80152b6:	4628      	mov	r0, r5
 80152b8:	f7ea ff9c 	bl	80001f4 <strlen>
 80152bc:	4428      	add	r0, r5
 80152be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80152c2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80152c6:	2b2f      	cmp	r3, #47	; 0x2f
 80152c8:	bf08      	it	eq
 80152ca:	4970      	ldreq	r1, [pc, #448]	; (801548c <rcl_node_init+0x2d4>)
 80152cc:	f8db 3010 	ldr.w	r3, [fp, #16]
 80152d0:	bf18      	it	ne
 80152d2:	496f      	ldrne	r1, [pc, #444]	; (8015490 <rcl_node_init+0x2d8>)
 80152d4:	9604      	str	r6, [sp, #16]
 80152d6:	e9cd 1502 	strd	r1, r5, [sp, #8]
 80152da:	e9cd 3200 	strd	r3, r2, [sp]
 80152de:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80152e2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80152e6:	f001 fbed 	bl	8016ac4 <rcutils_format_string_limit>
 80152ea:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 80152ee:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80152f2:	f8d9 3000 	ldr.w	r3, [r9]
 80152f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80152f8:	1c59      	adds	r1, r3, #1
 80152fa:	f000 80b7 	beq.w	801546c <rcl_node_init+0x2b4>
 80152fe:	683a      	ldr	r2, [r7, #0]
 8015300:	f8c9 301c 	str.w	r3, [r9, #28]
 8015304:	6952      	ldr	r2, [r2, #20]
 8015306:	6821      	ldr	r1, [r4, #0]
 8015308:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 801530c:	6808      	ldr	r0, [r1, #0]
 801530e:	f1a2 0201 	sub.w	r2, r2, #1
 8015312:	fab2 f282 	clz	r2, r2
 8015316:	0952      	lsrs	r2, r2, #5
 8015318:	9200      	str	r2, [sp, #0]
 801531a:	4631      	mov	r1, r6
 801531c:	3028      	adds	r0, #40	; 0x28
 801531e:	462a      	mov	r2, r5
 8015320:	f002 f9ce 	bl	80176c0 <rmw_create_node>
 8015324:	6863      	ldr	r3, [r4, #4]
 8015326:	f8c9 0020 	str.w	r0, [r9, #32]
 801532a:	6a18      	ldr	r0, [r3, #32]
 801532c:	b368      	cbz	r0, 801538a <rcl_node_init+0x1d2>
 801532e:	f002 fa59 	bl	80177e4 <rmw_node_get_graph_guard_condition>
 8015332:	4681      	mov	r9, r0
 8015334:	b338      	cbz	r0, 8015386 <rcl_node_init+0x1ce>
 8015336:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801533a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801533e:	6866      	ldr	r6, [r4, #4]
 8015340:	2008      	movs	r0, #8
 8015342:	4798      	blx	r3
 8015344:	6863      	ldr	r3, [r4, #4]
 8015346:	6270      	str	r0, [r6, #36]	; 0x24
 8015348:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 801534a:	b1f6      	cbz	r6, 801538a <rcl_node_init+0x1d2>
 801534c:	a808      	add	r0, sp, #32
 801534e:	f004 f9b3 	bl	80196b8 <rcl_get_zero_initialized_guard_condition>
 8015352:	a808      	add	r0, sp, #32
 8015354:	c803      	ldmia	r0, {r0, r1}
 8015356:	e886 0003 	stmia.w	r6, {r0, r1}
 801535a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801535e:	ae15      	add	r6, sp, #84	; 0x54
 8015360:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015362:	f8db 3000 	ldr.w	r3, [fp]
 8015366:	6033      	str	r3, [r6, #0]
 8015368:	ab1a      	add	r3, sp, #104	; 0x68
 801536a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801536e:	6866      	ldr	r6, [r4, #4]
 8015370:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8015372:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015376:	4649      	mov	r1, r9
 8015378:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801537a:	4630      	mov	r0, r6
 801537c:	463a      	mov	r2, r7
 801537e:	f004 f9a5 	bl	80196cc <rcl_guard_condition_init_from_rmw>
 8015382:	4681      	mov	r9, r0
 8015384:	b328      	cbz	r0, 80153d2 <rcl_node_init+0x21a>
 8015386:	6863      	ldr	r3, [r4, #4]
 8015388:	b1f3      	cbz	r3, 80153c8 <rcl_node_init+0x210>
 801538a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801538c:	b128      	cbz	r0, 801539a <rcl_node_init+0x1e2>
 801538e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015392:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015396:	4798      	blx	r3
 8015398:	6863      	ldr	r3, [r4, #4]
 801539a:	6a18      	ldr	r0, [r3, #32]
 801539c:	b110      	cbz	r0, 80153a4 <rcl_node_init+0x1ec>
 801539e:	f002 f9a7 	bl	80176f0 <rmw_destroy_node>
 80153a2:	6863      	ldr	r3, [r4, #4]
 80153a4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80153a6:	b148      	cbz	r0, 80153bc <rcl_node_init+0x204>
 80153a8:	f004 f9e8 	bl	801977c <rcl_guard_condition_fini>
 80153ac:	6862      	ldr	r2, [r4, #4]
 80153ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153b2:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80153b4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80153b8:	4798      	blx	r3
 80153ba:	6863      	ldr	r3, [r4, #4]
 80153bc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80153c0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80153c4:	4618      	mov	r0, r3
 80153c6:	4790      	blx	r2
 80153c8:	2300      	movs	r3, #0
 80153ca:	e9c4 3300 	strd	r3, r3, [r4]
 80153ce:	f04f 0901 	mov.w	r9, #1
 80153d2:	f1ba 0f00 	cmp.w	sl, #0
 80153d6:	d125      	bne.n	8015424 <rcl_node_init+0x26c>
 80153d8:	e001      	b.n	80153de <rcl_node_init+0x226>
 80153da:	f04f 090b 	mov.w	r9, #11
 80153de:	4648      	mov	r0, r9
 80153e0:	b01b      	add	sp, #108	; 0x6c
 80153e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153e6:	f04f 0965 	mov.w	r9, #101	; 0x65
 80153ea:	e7f8      	b.n	80153de <rcl_node_init+0x226>
 80153ec:	782b      	ldrb	r3, [r5, #0]
 80153ee:	2b2f      	cmp	r3, #47	; 0x2f
 80153f0:	f43f af2d 	beq.w	801524e <rcl_node_init+0x96>
 80153f4:	4927      	ldr	r1, [pc, #156]	; (8015494 <rcl_node_init+0x2dc>)
 80153f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80153fa:	9300      	str	r3, [sp, #0]
 80153fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015400:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015404:	9503      	str	r5, [sp, #12]
 8015406:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801540a:	f001 fb5b 	bl	8016ac4 <rcutils_format_string_limit>
 801540e:	4605      	mov	r5, r0
 8015410:	b348      	cbz	r0, 8015466 <rcl_node_init+0x2ae>
 8015412:	2200      	movs	r2, #0
 8015414:	a914      	add	r1, sp, #80	; 0x50
 8015416:	9214      	str	r2, [sp, #80]	; 0x50
 8015418:	f001 fd26 	bl	8016e68 <rmw_validate_namespace>
 801541c:	4681      	mov	r9, r0
 801541e:	2800      	cmp	r0, #0
 8015420:	f43f af1f 	beq.w	8015262 <rcl_node_init+0xaa>
 8015424:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015428:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801542c:	4628      	mov	r0, r5
 801542e:	4798      	blx	r3
 8015430:	e7d5      	b.n	80153de <rcl_node_init+0x226>
 8015432:	f04f 0964 	mov.w	r9, #100	; 0x64
 8015436:	4648      	mov	r0, r9
 8015438:	b01b      	add	sp, #108	; 0x6c
 801543a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801543e:	f04f 090a 	mov.w	r9, #10
 8015442:	f1ba 0f00 	cmp.w	sl, #0
 8015446:	d1ed      	bne.n	8015424 <rcl_node_init+0x26c>
 8015448:	e7c9      	b.n	80153de <rcl_node_init+0x226>
 801544a:	f001 fd7d 	bl	8016f48 <rmw_node_name_validation_result_string>
 801544e:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8015452:	e7c4      	b.n	80153de <rcl_node_init+0x226>
 8015454:	4618      	mov	r0, r3
 8015456:	f001 fd19 	bl	8016e8c <rmw_namespace_validation_result_string>
 801545a:	f04f 09ca 	mov.w	r9, #202	; 0xca
 801545e:	f1ba 0f00 	cmp.w	sl, #0
 8015462:	d1df      	bne.n	8015424 <rcl_node_init+0x26c>
 8015464:	e7bb      	b.n	80153de <rcl_node_init+0x226>
 8015466:	f04f 090a 	mov.w	r9, #10
 801546a:	e7b8      	b.n	80153de <rcl_node_init+0x226>
 801546c:	a813      	add	r0, sp, #76	; 0x4c
 801546e:	f004 f8ef 	bl	8019650 <rcl_get_default_domain_id>
 8015472:	2800      	cmp	r0, #0
 8015474:	d187      	bne.n	8015386 <rcl_node_init+0x1ce>
 8015476:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015478:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801547c:	1c5a      	adds	r2, r3, #1
 801547e:	bf04      	itt	eq
 8015480:	9013      	streq	r0, [sp, #76]	; 0x4c
 8015482:	4603      	moveq	r3, r0
 8015484:	e73b      	b.n	80152fe <rcl_node_init+0x146>
 8015486:	bf00      	nop
 8015488:	0801ba20 	.word	0x0801ba20
 801548c:	0801b9b0 	.word	0x0801b9b0
 8015490:	0801b9e4 	.word	0x0801b9e4
 8015494:	0801ba24 	.word	0x0801ba24

08015498 <rcl_node_is_valid>:
 8015498:	b130      	cbz	r0, 80154a8 <rcl_node_is_valid+0x10>
 801549a:	6843      	ldr	r3, [r0, #4]
 801549c:	b123      	cbz	r3, 80154a8 <rcl_node_is_valid+0x10>
 801549e:	6a1b      	ldr	r3, [r3, #32]
 80154a0:	b113      	cbz	r3, 80154a8 <rcl_node_is_valid+0x10>
 80154a2:	6800      	ldr	r0, [r0, #0]
 80154a4:	f7ff ba5e 	b.w	8014964 <rcl_context_is_valid>
 80154a8:	2000      	movs	r0, #0
 80154aa:	4770      	bx	lr

080154ac <rcl_node_get_name>:
 80154ac:	b120      	cbz	r0, 80154b8 <rcl_node_get_name+0xc>
 80154ae:	6840      	ldr	r0, [r0, #4]
 80154b0:	b110      	cbz	r0, 80154b8 <rcl_node_get_name+0xc>
 80154b2:	6a00      	ldr	r0, [r0, #32]
 80154b4:	b100      	cbz	r0, 80154b8 <rcl_node_get_name+0xc>
 80154b6:	6880      	ldr	r0, [r0, #8]
 80154b8:	4770      	bx	lr
 80154ba:	bf00      	nop

080154bc <rcl_node_get_namespace>:
 80154bc:	b120      	cbz	r0, 80154c8 <rcl_node_get_namespace+0xc>
 80154be:	6840      	ldr	r0, [r0, #4]
 80154c0:	b110      	cbz	r0, 80154c8 <rcl_node_get_namespace+0xc>
 80154c2:	6a00      	ldr	r0, [r0, #32]
 80154c4:	b100      	cbz	r0, 80154c8 <rcl_node_get_namespace+0xc>
 80154c6:	68c0      	ldr	r0, [r0, #12]
 80154c8:	4770      	bx	lr
 80154ca:	bf00      	nop

080154cc <rcl_node_get_options>:
 80154cc:	b128      	cbz	r0, 80154da <rcl_node_get_options+0xe>
 80154ce:	6840      	ldr	r0, [r0, #4]
 80154d0:	b118      	cbz	r0, 80154da <rcl_node_get_options+0xe>
 80154d2:	6a03      	ldr	r3, [r0, #32]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	bf08      	it	eq
 80154d8:	2000      	moveq	r0, #0
 80154da:	4770      	bx	lr

080154dc <rcl_node_get_rmw_handle>:
 80154dc:	b110      	cbz	r0, 80154e4 <rcl_node_get_rmw_handle+0x8>
 80154de:	6840      	ldr	r0, [r0, #4]
 80154e0:	b100      	cbz	r0, 80154e4 <rcl_node_get_rmw_handle+0x8>
 80154e2:	6a00      	ldr	r0, [r0, #32]
 80154e4:	4770      	bx	lr
 80154e6:	bf00      	nop

080154e8 <exact_match_lookup>:
 80154e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154ea:	f102 0708 	add.w	r7, r2, #8
 80154ee:	460b      	mov	r3, r1
 80154f0:	4614      	mov	r4, r2
 80154f2:	4606      	mov	r6, r0
 80154f4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80154f8:	b085      	sub	sp, #20
 80154fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80154fe:	4618      	mov	r0, r3
 8015500:	4918      	ldr	r1, [pc, #96]	; (8015564 <exact_match_lookup+0x7c>)
 8015502:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015506:	f001 facf 	bl	8016aa8 <rcutils_join_path>
 801550a:	7833      	ldrb	r3, [r6, #0]
 801550c:	2b2f      	cmp	r3, #47	; 0x2f
 801550e:	4605      	mov	r5, r0
 8015510:	d021      	beq.n	8015556 <exact_match_lookup+0x6e>
 8015512:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8015516:	e88d 0003 	stmia.w	sp, {r0, r1}
 801551a:	1c70      	adds	r0, r6, #1
 801551c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015520:	f001 fac8 	bl	8016ab4 <rcutils_to_native_path>
 8015524:	4606      	mov	r6, r0
 8015526:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801552a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801552e:	4631      	mov	r1, r6
 8015530:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015534:	4628      	mov	r0, r5
 8015536:	f001 fab7 	bl	8016aa8 <rcutils_join_path>
 801553a:	6862      	ldr	r2, [r4, #4]
 801553c:	6921      	ldr	r1, [r4, #16]
 801553e:	4603      	mov	r3, r0
 8015540:	4630      	mov	r0, r6
 8015542:	461e      	mov	r6, r3
 8015544:	4790      	blx	r2
 8015546:	4628      	mov	r0, r5
 8015548:	6863      	ldr	r3, [r4, #4]
 801554a:	6921      	ldr	r1, [r4, #16]
 801554c:	4798      	blx	r3
 801554e:	4635      	mov	r5, r6
 8015550:	4628      	mov	r0, r5
 8015552:	b005      	add	sp, #20
 8015554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015556:	7873      	ldrb	r3, [r6, #1]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d1da      	bne.n	8015512 <exact_match_lookup+0x2a>
 801555c:	4628      	mov	r0, r5
 801555e:	b005      	add	sp, #20
 8015560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015562:	bf00      	nop
 8015564:	0801ba6c 	.word	0x0801ba6c

08015568 <rcl_get_secure_root>:
 8015568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801556c:	b085      	sub	sp, #20
 801556e:	b168      	cbz	r0, 801558c <rcl_get_secure_root+0x24>
 8015570:	4607      	mov	r7, r0
 8015572:	4608      	mov	r0, r1
 8015574:	460c      	mov	r4, r1
 8015576:	f7fa f8a9 	bl	800f6cc <rcutils_allocator_is_valid>
 801557a:	b138      	cbz	r0, 801558c <rcl_get_secure_root+0x24>
 801557c:	2300      	movs	r3, #0
 801557e:	482d      	ldr	r0, [pc, #180]	; (8015634 <rcl_get_secure_root+0xcc>)
 8015580:	9303      	str	r3, [sp, #12]
 8015582:	a903      	add	r1, sp, #12
 8015584:	f001 fad8 	bl	8016b38 <rcutils_get_env>
 8015588:	4605      	mov	r5, r0
 801558a:	b120      	cbz	r0, 8015596 <rcl_get_secure_root+0x2e>
 801558c:	2500      	movs	r5, #0
 801558e:	4628      	mov	r0, r5
 8015590:	b005      	add	sp, #20
 8015592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015596:	9b03      	ldr	r3, [sp, #12]
 8015598:	781a      	ldrb	r2, [r3, #0]
 801559a:	2a00      	cmp	r2, #0
 801559c:	d0f6      	beq.n	801558c <rcl_get_secure_root+0x24>
 801559e:	f104 090c 	add.w	r9, r4, #12
 80155a2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80155a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80155aa:	4618      	mov	r0, r3
 80155ac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80155b0:	f001 fbb2 	bl	8016d18 <rcutils_strdup>
 80155b4:	4680      	mov	r8, r0
 80155b6:	2800      	cmp	r0, #0
 80155b8:	d0e8      	beq.n	801558c <rcl_get_secure_root+0x24>
 80155ba:	481f      	ldr	r0, [pc, #124]	; (8015638 <rcl_get_secure_root+0xd0>)
 80155bc:	9503      	str	r5, [sp, #12]
 80155be:	a903      	add	r1, sp, #12
 80155c0:	f001 faba 	bl	8016b38 <rcutils_get_env>
 80155c4:	b160      	cbz	r0, 80155e0 <rcl_get_secure_root+0x78>
 80155c6:	2600      	movs	r6, #0
 80155c8:	6863      	ldr	r3, [r4, #4]
 80155ca:	6921      	ldr	r1, [r4, #16]
 80155cc:	4630      	mov	r0, r6
 80155ce:	4798      	blx	r3
 80155d0:	4640      	mov	r0, r8
 80155d2:	6863      	ldr	r3, [r4, #4]
 80155d4:	6921      	ldr	r1, [r4, #16]
 80155d6:	4798      	blx	r3
 80155d8:	4628      	mov	r0, r5
 80155da:	b005      	add	sp, #20
 80155dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80155e0:	9b03      	ldr	r3, [sp, #12]
 80155e2:	781e      	ldrb	r6, [r3, #0]
 80155e4:	b1f6      	cbz	r6, 8015624 <rcl_get_secure_root+0xbc>
 80155e6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80155ea:	e88d 0003 	stmia.w	sp, {r0, r1}
 80155ee:	4618      	mov	r0, r3
 80155f0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80155f4:	f001 fb90 	bl	8016d18 <rcutils_strdup>
 80155f8:	4606      	mov	r6, r0
 80155fa:	2800      	cmp	r0, #0
 80155fc:	d0e3      	beq.n	80155c6 <rcl_get_secure_root+0x5e>
 80155fe:	4622      	mov	r2, r4
 8015600:	4641      	mov	r1, r8
 8015602:	f7ff ff71 	bl	80154e8 <exact_match_lookup>
 8015606:	4605      	mov	r5, r0
 8015608:	2d00      	cmp	r5, #0
 801560a:	d0dd      	beq.n	80155c8 <rcl_get_secure_root+0x60>
 801560c:	4628      	mov	r0, r5
 801560e:	f001 fa49 	bl	8016aa4 <rcutils_is_directory>
 8015612:	4607      	mov	r7, r0
 8015614:	2800      	cmp	r0, #0
 8015616:	d1d7      	bne.n	80155c8 <rcl_get_secure_root+0x60>
 8015618:	4628      	mov	r0, r5
 801561a:	6863      	ldr	r3, [r4, #4]
 801561c:	6921      	ldr	r1, [r4, #16]
 801561e:	4798      	blx	r3
 8015620:	463d      	mov	r5, r7
 8015622:	e7d1      	b.n	80155c8 <rcl_get_secure_root+0x60>
 8015624:	4638      	mov	r0, r7
 8015626:	4622      	mov	r2, r4
 8015628:	4641      	mov	r1, r8
 801562a:	f7ff ff5d 	bl	80154e8 <exact_match_lookup>
 801562e:	4605      	mov	r5, r0
 8015630:	e7ea      	b.n	8015608 <rcl_get_secure_root+0xa0>
 8015632:	bf00      	nop
 8015634:	0801ba78 	.word	0x0801ba78
 8015638:	0801ba90 	.word	0x0801ba90

0801563c <rcl_get_security_options_from_environment>:
 801563c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015640:	b082      	sub	sp, #8
 8015642:	4607      	mov	r7, r0
 8015644:	4688      	mov	r8, r1
 8015646:	2400      	movs	r4, #0
 8015648:	481d      	ldr	r0, [pc, #116]	; (80156c0 <rcl_get_security_options_from_environment+0x84>)
 801564a:	9401      	str	r4, [sp, #4]
 801564c:	a901      	add	r1, sp, #4
 801564e:	4616      	mov	r6, r2
 8015650:	f001 fa72 	bl	8016b38 <rcutils_get_env>
 8015654:	b120      	cbz	r0, 8015660 <rcl_get_security_options_from_environment+0x24>
 8015656:	2501      	movs	r5, #1
 8015658:	4628      	mov	r0, r5
 801565a:	b002      	add	sp, #8
 801565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015660:	4918      	ldr	r1, [pc, #96]	; (80156c4 <rcl_get_security_options_from_environment+0x88>)
 8015662:	4604      	mov	r4, r0
 8015664:	9801      	ldr	r0, [sp, #4]
 8015666:	f7ea fdbb 	bl	80001e0 <strcmp>
 801566a:	4605      	mov	r5, r0
 801566c:	b9c8      	cbnz	r0, 80156a2 <rcl_get_security_options_from_environment+0x66>
 801566e:	9001      	str	r0, [sp, #4]
 8015670:	b1ee      	cbz	r6, 80156ae <rcl_get_security_options_from_environment+0x72>
 8015672:	4815      	ldr	r0, [pc, #84]	; (80156c8 <rcl_get_security_options_from_environment+0x8c>)
 8015674:	a901      	add	r1, sp, #4
 8015676:	f001 fa5f 	bl	8016b38 <rcutils_get_env>
 801567a:	2800      	cmp	r0, #0
 801567c:	d1eb      	bne.n	8015656 <rcl_get_security_options_from_environment+0x1a>
 801567e:	4913      	ldr	r1, [pc, #76]	; (80156cc <rcl_get_security_options_from_environment+0x90>)
 8015680:	9801      	ldr	r0, [sp, #4]
 8015682:	f7ea fdad 	bl	80001e0 <strcmp>
 8015686:	fab0 f080 	clz	r0, r0
 801568a:	0940      	lsrs	r0, r0, #5
 801568c:	7030      	strb	r0, [r6, #0]
 801568e:	4641      	mov	r1, r8
 8015690:	4638      	mov	r0, r7
 8015692:	f7ff ff69 	bl	8015568 <rcl_get_secure_root>
 8015696:	b160      	cbz	r0, 80156b2 <rcl_get_security_options_from_environment+0x76>
 8015698:	6070      	str	r0, [r6, #4]
 801569a:	4628      	mov	r0, r5
 801569c:	b002      	add	sp, #8
 801569e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156a2:	4625      	mov	r5, r4
 80156a4:	4628      	mov	r0, r5
 80156a6:	7034      	strb	r4, [r6, #0]
 80156a8:	b002      	add	sp, #8
 80156aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ae:	250b      	movs	r5, #11
 80156b0:	e7d2      	b.n	8015658 <rcl_get_security_options_from_environment+0x1c>
 80156b2:	7835      	ldrb	r5, [r6, #0]
 80156b4:	f1a5 0501 	sub.w	r5, r5, #1
 80156b8:	fab5 f585 	clz	r5, r5
 80156bc:	096d      	lsrs	r5, r5, #5
 80156be:	e7cb      	b.n	8015658 <rcl_get_security_options_from_environment+0x1c>
 80156c0:	0801ba30 	.word	0x0801ba30
 80156c4:	0801ba44 	.word	0x0801ba44
 80156c8:	0801ba4c 	.word	0x0801ba4c
 80156cc:	0801ba64 	.word	0x0801ba64

080156d0 <rcl_service_get_rmw_handle>:
 80156d0:	b110      	cbz	r0, 80156d8 <rcl_service_get_rmw_handle+0x8>
 80156d2:	6800      	ldr	r0, [r0, #0]
 80156d4:	b100      	cbz	r0, 80156d8 <rcl_service_get_rmw_handle+0x8>
 80156d6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80156d8:	4770      	bx	lr
 80156da:	bf00      	nop

080156dc <rcl_take_request>:
 80156dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156de:	460e      	mov	r6, r1
 80156e0:	460c      	mov	r4, r1
 80156e2:	4607      	mov	r7, r0
 80156e4:	4694      	mov	ip, r2
 80156e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80156e8:	b08d      	sub	sp, #52	; 0x34
 80156ea:	ad06      	add	r5, sp, #24
 80156ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80156ee:	e896 0003 	ldmia.w	r6, {r0, r1}
 80156f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80156f6:	b1e7      	cbz	r7, 8015732 <rcl_take_request+0x56>
 80156f8:	683b      	ldr	r3, [r7, #0]
 80156fa:	b1d3      	cbz	r3, 8015732 <rcl_take_request+0x56>
 80156fc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80156fe:	b1c0      	cbz	r0, 8015732 <rcl_take_request+0x56>
 8015700:	4662      	mov	r2, ip
 8015702:	b30a      	cbz	r2, 8015748 <rcl_take_request+0x6c>
 8015704:	2500      	movs	r5, #0
 8015706:	f10d 0307 	add.w	r3, sp, #7
 801570a:	a902      	add	r1, sp, #8
 801570c:	f88d 5007 	strb.w	r5, [sp, #7]
 8015710:	f002 f86e 	bl	80177f0 <rmw_take_request>
 8015714:	4606      	mov	r6, r0
 8015716:	b178      	cbz	r0, 8015738 <rcl_take_request+0x5c>
 8015718:	280a      	cmp	r0, #10
 801571a:	bf18      	it	ne
 801571c:	2601      	movne	r6, #1
 801571e:	ad06      	add	r5, sp, #24
 8015720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015724:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015728:	e884 0003 	stmia.w	r4, {r0, r1}
 801572c:	4630      	mov	r0, r6
 801572e:	b00d      	add	sp, #52	; 0x34
 8015730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015732:	f44f 7616 	mov.w	r6, #600	; 0x258
 8015736:	e7f2      	b.n	801571e <rcl_take_request+0x42>
 8015738:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801573c:	f240 2359 	movw	r3, #601	; 0x259
 8015740:	2a00      	cmp	r2, #0
 8015742:	bf08      	it	eq
 8015744:	461e      	moveq	r6, r3
 8015746:	e7ea      	b.n	801571e <rcl_take_request+0x42>
 8015748:	260b      	movs	r6, #11
 801574a:	e7e8      	b.n	801571e <rcl_take_request+0x42>

0801574c <rcl_send_response>:
 801574c:	b160      	cbz	r0, 8015768 <rcl_send_response+0x1c>
 801574e:	6800      	ldr	r0, [r0, #0]
 8015750:	b150      	cbz	r0, 8015768 <rcl_send_response+0x1c>
 8015752:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015754:	b140      	cbz	r0, 8015768 <rcl_send_response+0x1c>
 8015756:	b151      	cbz	r1, 801576e <rcl_send_response+0x22>
 8015758:	b510      	push	{r4, lr}
 801575a:	b152      	cbz	r2, 8015772 <rcl_send_response+0x26>
 801575c:	f002 f8a6 	bl	80178ac <rmw_send_response>
 8015760:	3800      	subs	r0, #0
 8015762:	bf18      	it	ne
 8015764:	2001      	movne	r0, #1
 8015766:	bd10      	pop	{r4, pc}
 8015768:	f44f 7016 	mov.w	r0, #600	; 0x258
 801576c:	4770      	bx	lr
 801576e:	200b      	movs	r0, #11
 8015770:	4770      	bx	lr
 8015772:	200b      	movs	r0, #11
 8015774:	bd10      	pop	{r4, pc}
 8015776:	bf00      	nop

08015778 <rcl_get_system_time>:
 8015778:	4608      	mov	r0, r1
 801577a:	f7fa b913 	b.w	800f9a4 <rcutils_system_time_now>
 801577e:	bf00      	nop

08015780 <rcl_get_steady_time>:
 8015780:	4608      	mov	r0, r1
 8015782:	f7fa b937 	b.w	800f9f4 <rcutils_steady_time_now>
 8015786:	bf00      	nop

08015788 <rcl_get_ros_time>:
 8015788:	7a03      	ldrb	r3, [r0, #8]
 801578a:	b510      	push	{r4, lr}
 801578c:	460c      	mov	r4, r1
 801578e:	b133      	cbz	r3, 801579e <rcl_get_ros_time+0x16>
 8015790:	2105      	movs	r1, #5
 8015792:	f001 f8e5 	bl	8016960 <__atomic_load_8>
 8015796:	e9c4 0100 	strd	r0, r1, [r4]
 801579a:	2000      	movs	r0, #0
 801579c:	bd10      	pop	{r4, pc}
 801579e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157a2:	4608      	mov	r0, r1
 80157a4:	f7fa b8fe 	b.w	800f9a4 <rcutils_system_time_now>

080157a8 <rcl_clock_init>:
 80157a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157ac:	4606      	mov	r6, r0
 80157ae:	4610      	mov	r0, r2
 80157b0:	4614      	mov	r4, r2
 80157b2:	460d      	mov	r5, r1
 80157b4:	f7f9 ff8a 	bl	800f6cc <rcutils_allocator_is_valid>
 80157b8:	b128      	cbz	r0, 80157c6 <rcl_clock_init+0x1e>
 80157ba:	2e03      	cmp	r6, #3
 80157bc:	d803      	bhi.n	80157c6 <rcl_clock_init+0x1e>
 80157be:	e8df f006 	tbb	[pc, r6]
 80157c2:	2c1b      	.short	0x2c1b
 80157c4:	0554      	.short	0x0554
 80157c6:	200b      	movs	r0, #11
 80157c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157cc:	2d00      	cmp	r5, #0
 80157ce:	d0fa      	beq.n	80157c6 <rcl_clock_init+0x1e>
 80157d0:	2c00      	cmp	r4, #0
 80157d2:	d0f8      	beq.n	80157c6 <rcl_clock_init+0x1e>
 80157d4:	2600      	movs	r6, #0
 80157d6:	702e      	strb	r6, [r5, #0]
 80157d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80157da:	f105 0714 	add.w	r7, r5, #20
 80157de:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80157e2:	612e      	str	r6, [r5, #16]
 80157e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80157e6:	6823      	ldr	r3, [r4, #0]
 80157e8:	603b      	str	r3, [r7, #0]
 80157ea:	2303      	movs	r3, #3
 80157ec:	4a2b      	ldr	r2, [pc, #172]	; (801589c <rcl_clock_init+0xf4>)
 80157ee:	702b      	strb	r3, [r5, #0]
 80157f0:	4630      	mov	r0, r6
 80157f2:	60ea      	str	r2, [r5, #12]
 80157f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157f8:	2d00      	cmp	r5, #0
 80157fa:	d0e4      	beq.n	80157c6 <rcl_clock_init+0x1e>
 80157fc:	2600      	movs	r6, #0
 80157fe:	702e      	strb	r6, [r5, #0]
 8015800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015802:	f105 0714 	add.w	r7, r5, #20
 8015806:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801580a:	e9c5 6603 	strd	r6, r6, [r5, #12]
 801580e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015810:	6823      	ldr	r3, [r4, #0]
 8015812:	603b      	str	r3, [r7, #0]
 8015814:	4630      	mov	r0, r6
 8015816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801581a:	2d00      	cmp	r5, #0
 801581c:	d0d3      	beq.n	80157c6 <rcl_clock_init+0x1e>
 801581e:	2c00      	cmp	r4, #0
 8015820:	d0d1      	beq.n	80157c6 <rcl_clock_init+0x1e>
 8015822:	2600      	movs	r6, #0
 8015824:	702e      	strb	r6, [r5, #0]
 8015826:	46a4      	mov	ip, r4
 8015828:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801582c:	f105 0714 	add.w	r7, r5, #20
 8015830:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015834:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8015838:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801583a:	f8dc 3000 	ldr.w	r3, [ip]
 801583e:	603b      	str	r3, [r7, #0]
 8015840:	6921      	ldr	r1, [r4, #16]
 8015842:	6823      	ldr	r3, [r4, #0]
 8015844:	2010      	movs	r0, #16
 8015846:	4798      	blx	r3
 8015848:	4603      	mov	r3, r0
 801584a:	6128      	str	r0, [r5, #16]
 801584c:	b318      	cbz	r0, 8015896 <rcl_clock_init+0xee>
 801584e:	f04f 0800 	mov.w	r8, #0
 8015852:	f04f 0900 	mov.w	r9, #0
 8015856:	7206      	strb	r6, [r0, #8]
 8015858:	e9c3 8900 	strd	r8, r9, [r3]
 801585c:	2301      	movs	r3, #1
 801585e:	4a10      	ldr	r2, [pc, #64]	; (80158a0 <rcl_clock_init+0xf8>)
 8015860:	702b      	strb	r3, [r5, #0]
 8015862:	4630      	mov	r0, r6
 8015864:	60ea      	str	r2, [r5, #12]
 8015866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801586a:	2d00      	cmp	r5, #0
 801586c:	d0ab      	beq.n	80157c6 <rcl_clock_init+0x1e>
 801586e:	2c00      	cmp	r4, #0
 8015870:	d0a9      	beq.n	80157c6 <rcl_clock_init+0x1e>
 8015872:	2600      	movs	r6, #0
 8015874:	702e      	strb	r6, [r5, #0]
 8015876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015878:	f105 0714 	add.w	r7, r5, #20
 801587c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015880:	612e      	str	r6, [r5, #16]
 8015882:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015884:	6823      	ldr	r3, [r4, #0]
 8015886:	603b      	str	r3, [r7, #0]
 8015888:	2302      	movs	r3, #2
 801588a:	4a06      	ldr	r2, [pc, #24]	; (80158a4 <rcl_clock_init+0xfc>)
 801588c:	702b      	strb	r3, [r5, #0]
 801588e:	4630      	mov	r0, r6
 8015890:	60ea      	str	r2, [r5, #12]
 8015892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015896:	200a      	movs	r0, #10
 8015898:	e796      	b.n	80157c8 <rcl_clock_init+0x20>
 801589a:	bf00      	nop
 801589c:	08015781 	.word	0x08015781
 80158a0:	08015789 	.word	0x08015789
 80158a4:	08015779 	.word	0x08015779

080158a8 <rcl_clock_get_now>:
 80158a8:	b140      	cbz	r0, 80158bc <rcl_clock_get_now+0x14>
 80158aa:	b139      	cbz	r1, 80158bc <rcl_clock_get_now+0x14>
 80158ac:	7803      	ldrb	r3, [r0, #0]
 80158ae:	b11b      	cbz	r3, 80158b8 <rcl_clock_get_now+0x10>
 80158b0:	68c3      	ldr	r3, [r0, #12]
 80158b2:	b10b      	cbz	r3, 80158b8 <rcl_clock_get_now+0x10>
 80158b4:	6900      	ldr	r0, [r0, #16]
 80158b6:	4718      	bx	r3
 80158b8:	2001      	movs	r0, #1
 80158ba:	4770      	bx	lr
 80158bc:	200b      	movs	r0, #11
 80158be:	4770      	bx	lr

080158c0 <rcl_timer_call>:
 80158c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158c4:	b08b      	sub	sp, #44	; 0x2c
 80158c6:	2800      	cmp	r0, #0
 80158c8:	d06e      	beq.n	80159a8 <rcl_timer_call+0xe8>
 80158ca:	6803      	ldr	r3, [r0, #0]
 80158cc:	f3bf 8f5b 	dmb	ish
 80158d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80158d4:	f3bf 8f5b 	dmb	ish
 80158d8:	4604      	mov	r4, r0
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d159      	bne.n	8015992 <rcl_timer_call+0xd2>
 80158de:	6803      	ldr	r3, [r0, #0]
 80158e0:	a908      	add	r1, sp, #32
 80158e2:	6818      	ldr	r0, [r3, #0]
 80158e4:	f7ff ffe0 	bl	80158a8 <rcl_clock_get_now>
 80158e8:	4605      	mov	r5, r0
 80158ea:	2800      	cmp	r0, #0
 80158ec:	d14d      	bne.n	801598a <rcl_timer_call+0xca>
 80158ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80158f2:	2a00      	cmp	r2, #0
 80158f4:	f173 0100 	sbcs.w	r1, r3, #0
 80158f8:	db51      	blt.n	801599e <rcl_timer_call+0xde>
 80158fa:	6820      	ldr	r0, [r4, #0]
 80158fc:	2605      	movs	r6, #5
 80158fe:	9600      	str	r6, [sp, #0]
 8015900:	3020      	adds	r0, #32
 8015902:	f001 f895 	bl	8016a30 <__atomic_exchange_8>
 8015906:	6822      	ldr	r2, [r4, #0]
 8015908:	f3bf 8f5b 	dmb	ish
 801590c:	4682      	mov	sl, r0
 801590e:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8015912:	f3bf 8f5b 	dmb	ish
 8015916:	6820      	ldr	r0, [r4, #0]
 8015918:	460b      	mov	r3, r1
 801591a:	3028      	adds	r0, #40	; 0x28
 801591c:	4631      	mov	r1, r6
 801591e:	9305      	str	r3, [sp, #20]
 8015920:	f001 f81e 	bl	8016960 <__atomic_load_8>
 8015924:	4603      	mov	r3, r0
 8015926:	6820      	ldr	r0, [r4, #0]
 8015928:	460a      	mov	r2, r1
 801592a:	3018      	adds	r0, #24
 801592c:	4631      	mov	r1, r6
 801592e:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8015932:	f001 f815 	bl	8016960 <__atomic_load_8>
 8015936:	9b04      	ldr	r3, [sp, #16]
 8015938:	9a03      	ldr	r2, [sp, #12]
 801593a:	4606      	mov	r6, r0
 801593c:	460f      	mov	r7, r1
 801593e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015942:	eb13 0806 	adds.w	r8, r3, r6
 8015946:	eb42 0907 	adc.w	r9, r2, r7
 801594a:	4580      	cmp	r8, r0
 801594c:	eb79 0301 	sbcs.w	r3, r9, r1
 8015950:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015954:	460a      	mov	r2, r1
 8015956:	da04      	bge.n	8015962 <rcl_timer_call+0xa2>
 8015958:	ea56 0307 	orrs.w	r3, r6, r7
 801595c:	d129      	bne.n	80159b2 <rcl_timer_call+0xf2>
 801595e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8015962:	6820      	ldr	r0, [r4, #0]
 8015964:	2105      	movs	r1, #5
 8015966:	4642      	mov	r2, r8
 8015968:	464b      	mov	r3, r9
 801596a:	3028      	adds	r0, #40	; 0x28
 801596c:	9100      	str	r1, [sp, #0]
 801596e:	f001 f82b 	bl	80169c8 <__atomic_store_8>
 8015972:	f1bb 0f00 	cmp.w	fp, #0
 8015976:	d008      	beq.n	801598a <rcl_timer_call+0xca>
 8015978:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801597c:	9905      	ldr	r1, [sp, #20]
 801597e:	ebb2 020a 	subs.w	r2, r2, sl
 8015982:	4620      	mov	r0, r4
 8015984:	eb63 0301 	sbc.w	r3, r3, r1
 8015988:	47d8      	blx	fp
 801598a:	4628      	mov	r0, r5
 801598c:	b00b      	add	sp, #44	; 0x2c
 801598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015992:	f240 3521 	movw	r5, #801	; 0x321
 8015996:	4628      	mov	r0, r5
 8015998:	b00b      	add	sp, #44	; 0x2c
 801599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801599e:	2501      	movs	r5, #1
 80159a0:	4628      	mov	r0, r5
 80159a2:	b00b      	add	sp, #44	; 0x2c
 80159a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159a8:	250b      	movs	r5, #11
 80159aa:	4628      	mov	r0, r5
 80159ac:	b00b      	add	sp, #44	; 0x2c
 80159ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159b2:	ebb0 0008 	subs.w	r0, r0, r8
 80159b6:	eb62 0109 	sbc.w	r1, r2, r9
 80159ba:	f110 30ff 	adds.w	r0, r0, #4294967295
 80159be:	463b      	mov	r3, r7
 80159c0:	f141 31ff 	adc.w	r1, r1, #4294967295
 80159c4:	4632      	mov	r2, r6
 80159c6:	f7eb f919 	bl	8000bfc <__aeabi_ldivmod>
 80159ca:	1c43      	adds	r3, r0, #1
 80159cc:	f141 0100 	adc.w	r1, r1, #0
 80159d0:	fb00 7007 	mla	r0, r0, r7, r7
 80159d4:	fb06 0001 	mla	r0, r6, r1, r0
 80159d8:	fba3 6706 	umull	r6, r7, r3, r6
 80159dc:	4407      	add	r7, r0
 80159de:	eb18 0806 	adds.w	r8, r8, r6
 80159e2:	eb49 0907 	adc.w	r9, r9, r7
 80159e6:	e7bc      	b.n	8015962 <rcl_timer_call+0xa2>

080159e8 <rcl_timer_is_ready>:
 80159e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159ec:	b082      	sub	sp, #8
 80159ee:	b310      	cbz	r0, 8015a36 <rcl_timer_is_ready+0x4e>
 80159f0:	4688      	mov	r8, r1
 80159f2:	b301      	cbz	r1, 8015a36 <rcl_timer_is_ready+0x4e>
 80159f4:	6803      	ldr	r3, [r0, #0]
 80159f6:	4604      	mov	r4, r0
 80159f8:	4669      	mov	r1, sp
 80159fa:	6818      	ldr	r0, [r3, #0]
 80159fc:	f7ff ff54 	bl	80158a8 <rcl_clock_get_now>
 8015a00:	4605      	mov	r5, r0
 8015a02:	b118      	cbz	r0, 8015a0c <rcl_timer_is_ready+0x24>
 8015a04:	4628      	mov	r0, r5
 8015a06:	b002      	add	sp, #8
 8015a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a0c:	6820      	ldr	r0, [r4, #0]
 8015a0e:	2105      	movs	r1, #5
 8015a10:	3028      	adds	r0, #40	; 0x28
 8015a12:	f000 ffa5 	bl	8016960 <__atomic_load_8>
 8015a16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015a1a:	1ac6      	subs	r6, r0, r3
 8015a1c:	eb61 0702 	sbc.w	r7, r1, r2
 8015a20:	2e01      	cmp	r6, #1
 8015a22:	f177 0300 	sbcs.w	r3, r7, #0
 8015a26:	db0b      	blt.n	8015a40 <rcl_timer_is_ready+0x58>
 8015a28:	462b      	mov	r3, r5
 8015a2a:	4628      	mov	r0, r5
 8015a2c:	f888 3000 	strb.w	r3, [r8]
 8015a30:	b002      	add	sp, #8
 8015a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a36:	250b      	movs	r5, #11
 8015a38:	4628      	mov	r0, r5
 8015a3a:	b002      	add	sp, #8
 8015a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a40:	6823      	ldr	r3, [r4, #0]
 8015a42:	f3bf 8f5b 	dmb	ish
 8015a46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015a4a:	f3bf 8f5b 	dmb	ish
 8015a4e:	fab3 f383 	clz	r3, r3
 8015a52:	095b      	lsrs	r3, r3, #5
 8015a54:	e7e9      	b.n	8015a2a <rcl_timer_is_ready+0x42>
 8015a56:	bf00      	nop

08015a58 <rcl_timer_get_time_until_next_call>:
 8015a58:	b570      	push	{r4, r5, r6, lr}
 8015a5a:	b082      	sub	sp, #8
 8015a5c:	b1d8      	cbz	r0, 8015a96 <rcl_timer_get_time_until_next_call+0x3e>
 8015a5e:	460d      	mov	r5, r1
 8015a60:	b1c9      	cbz	r1, 8015a96 <rcl_timer_get_time_until_next_call+0x3e>
 8015a62:	6803      	ldr	r3, [r0, #0]
 8015a64:	4604      	mov	r4, r0
 8015a66:	4669      	mov	r1, sp
 8015a68:	6818      	ldr	r0, [r3, #0]
 8015a6a:	f7ff ff1d 	bl	80158a8 <rcl_clock_get_now>
 8015a6e:	4606      	mov	r6, r0
 8015a70:	b110      	cbz	r0, 8015a78 <rcl_timer_get_time_until_next_call+0x20>
 8015a72:	4630      	mov	r0, r6
 8015a74:	b002      	add	sp, #8
 8015a76:	bd70      	pop	{r4, r5, r6, pc}
 8015a78:	6820      	ldr	r0, [r4, #0]
 8015a7a:	2105      	movs	r1, #5
 8015a7c:	3028      	adds	r0, #40	; 0x28
 8015a7e:	f000 ff6f 	bl	8016960 <__atomic_load_8>
 8015a82:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015a86:	1ac0      	subs	r0, r0, r3
 8015a88:	eb61 0102 	sbc.w	r1, r1, r2
 8015a8c:	e9c5 0100 	strd	r0, r1, [r5]
 8015a90:	4630      	mov	r0, r6
 8015a92:	b002      	add	sp, #8
 8015a94:	bd70      	pop	{r4, r5, r6, pc}
 8015a96:	260b      	movs	r6, #11
 8015a98:	4630      	mov	r0, r6
 8015a9a:	b002      	add	sp, #8
 8015a9c:	bd70      	pop	{r4, r5, r6, pc}
 8015a9e:	bf00      	nop

08015aa0 <rcl_timer_is_canceled>:
 8015aa0:	b168      	cbz	r0, 8015abe <rcl_timer_is_canceled+0x1e>
 8015aa2:	b161      	cbz	r1, 8015abe <rcl_timer_is_canceled+0x1e>
 8015aa4:	6803      	ldr	r3, [r0, #0]
 8015aa6:	f3bf 8f5b 	dmb	ish
 8015aaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015aae:	f3bf 8f5b 	dmb	ish
 8015ab2:	3b00      	subs	r3, #0
 8015ab4:	bf18      	it	ne
 8015ab6:	2301      	movne	r3, #1
 8015ab8:	700b      	strb	r3, [r1, #0]
 8015aba:	2000      	movs	r0, #0
 8015abc:	4770      	bx	lr
 8015abe:	200b      	movs	r0, #11
 8015ac0:	4770      	bx	lr
 8015ac2:	bf00      	nop

08015ac4 <rcl_timer_get_guard_condition>:
 8015ac4:	b130      	cbz	r0, 8015ad4 <rcl_timer_get_guard_condition+0x10>
 8015ac6:	6800      	ldr	r0, [r0, #0]
 8015ac8:	b120      	cbz	r0, 8015ad4 <rcl_timer_get_guard_condition+0x10>
 8015aca:	68c3      	ldr	r3, [r0, #12]
 8015acc:	b10b      	cbz	r3, 8015ad2 <rcl_timer_get_guard_condition+0xe>
 8015ace:	3008      	adds	r0, #8
 8015ad0:	4770      	bx	lr
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	4770      	bx	lr
 8015ad6:	bf00      	nop

08015ad8 <rcl_validate_enclave_name_with_size>:
 8015ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ada:	b0c3      	sub	sp, #268	; 0x10c
 8015adc:	b1d0      	cbz	r0, 8015b14 <rcl_validate_enclave_name_with_size+0x3c>
 8015ade:	4615      	mov	r5, r2
 8015ae0:	b1c2      	cbz	r2, 8015b14 <rcl_validate_enclave_name_with_size+0x3c>
 8015ae2:	461f      	mov	r7, r3
 8015ae4:	466a      	mov	r2, sp
 8015ae6:	ab01      	add	r3, sp, #4
 8015ae8:	460e      	mov	r6, r1
 8015aea:	f001 f96f 	bl	8016dcc <rmw_validate_namespace_with_size>
 8015aee:	4604      	mov	r4, r0
 8015af0:	b9e0      	cbnz	r0, 8015b2c <rcl_validate_enclave_name_with_size+0x54>
 8015af2:	9b00      	ldr	r3, [sp, #0]
 8015af4:	b923      	cbnz	r3, 8015b00 <rcl_validate_enclave_name_with_size+0x28>
 8015af6:	2300      	movs	r3, #0
 8015af8:	602b      	str	r3, [r5, #0]
 8015afa:	4620      	mov	r0, r4
 8015afc:	b043      	add	sp, #268	; 0x10c
 8015afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b00:	2b07      	cmp	r3, #7
 8015b02:	d00b      	beq.n	8015b1c <rcl_validate_enclave_name_with_size+0x44>
 8015b04:	1e5a      	subs	r2, r3, #1
 8015b06:	2a05      	cmp	r2, #5
 8015b08:	d82e      	bhi.n	8015b68 <rcl_validate_enclave_name_with_size+0x90>
 8015b0a:	e8df f002 	tbb	[pc, r2]
 8015b0e:	211e      	.short	0x211e
 8015b10:	152a2724 	.word	0x152a2724
 8015b14:	240b      	movs	r4, #11
 8015b16:	4620      	mov	r0, r4
 8015b18:	b043      	add	sp, #268	; 0x10c
 8015b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b1c:	2eff      	cmp	r6, #255	; 0xff
 8015b1e:	d9ea      	bls.n	8015af6 <rcl_validate_enclave_name_with_size+0x1e>
 8015b20:	602b      	str	r3, [r5, #0]
 8015b22:	2f00      	cmp	r7, #0
 8015b24:	d0e9      	beq.n	8015afa <rcl_validate_enclave_name_with_size+0x22>
 8015b26:	23fe      	movs	r3, #254	; 0xfe
 8015b28:	603b      	str	r3, [r7, #0]
 8015b2a:	e7e6      	b.n	8015afa <rcl_validate_enclave_name_with_size+0x22>
 8015b2c:	f7fe fefc 	bl	8014928 <rcl_convert_rmw_ret_to_rcl_ret>
 8015b30:	4604      	mov	r4, r0
 8015b32:	4620      	mov	r0, r4
 8015b34:	b043      	add	sp, #268	; 0x10c
 8015b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b38:	2306      	movs	r3, #6
 8015b3a:	602b      	str	r3, [r5, #0]
 8015b3c:	2f00      	cmp	r7, #0
 8015b3e:	d0dc      	beq.n	8015afa <rcl_validate_enclave_name_with_size+0x22>
 8015b40:	9b01      	ldr	r3, [sp, #4]
 8015b42:	603b      	str	r3, [r7, #0]
 8015b44:	4620      	mov	r0, r4
 8015b46:	b043      	add	sp, #268	; 0x10c
 8015b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	602b      	str	r3, [r5, #0]
 8015b4e:	e7f5      	b.n	8015b3c <rcl_validate_enclave_name_with_size+0x64>
 8015b50:	2302      	movs	r3, #2
 8015b52:	602b      	str	r3, [r5, #0]
 8015b54:	e7f2      	b.n	8015b3c <rcl_validate_enclave_name_with_size+0x64>
 8015b56:	2303      	movs	r3, #3
 8015b58:	602b      	str	r3, [r5, #0]
 8015b5a:	e7ef      	b.n	8015b3c <rcl_validate_enclave_name_with_size+0x64>
 8015b5c:	2304      	movs	r3, #4
 8015b5e:	602b      	str	r3, [r5, #0]
 8015b60:	e7ec      	b.n	8015b3c <rcl_validate_enclave_name_with_size+0x64>
 8015b62:	2305      	movs	r3, #5
 8015b64:	602b      	str	r3, [r5, #0]
 8015b66:	e7e9      	b.n	8015b3c <rcl_validate_enclave_name_with_size+0x64>
 8015b68:	4a03      	ldr	r2, [pc, #12]	; (8015b78 <rcl_validate_enclave_name_with_size+0xa0>)
 8015b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015b6e:	a802      	add	r0, sp, #8
 8015b70:	f001 f8a6 	bl	8016cc0 <rcutils_snprintf>
 8015b74:	2401      	movs	r4, #1
 8015b76:	e7c0      	b.n	8015afa <rcl_validate_enclave_name_with_size+0x22>
 8015b78:	0801bab0 	.word	0x0801bab0

08015b7c <rcl_validate_enclave_name>:
 8015b7c:	b168      	cbz	r0, 8015b9a <rcl_validate_enclave_name+0x1e>
 8015b7e:	b570      	push	{r4, r5, r6, lr}
 8015b80:	460d      	mov	r5, r1
 8015b82:	4616      	mov	r6, r2
 8015b84:	4604      	mov	r4, r0
 8015b86:	f7ea fb35 	bl	80001f4 <strlen>
 8015b8a:	4633      	mov	r3, r6
 8015b8c:	4601      	mov	r1, r0
 8015b8e:	462a      	mov	r2, r5
 8015b90:	4620      	mov	r0, r4
 8015b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b96:	f7ff bf9f 	b.w	8015ad8 <rcl_validate_enclave_name_with_size>
 8015b9a:	200b      	movs	r0, #11
 8015b9c:	4770      	bx	lr
 8015b9e:	bf00      	nop

08015ba0 <rcl_validate_topic_name>:
 8015ba0:	2800      	cmp	r0, #0
 8015ba2:	f000 808b 	beq.w	8015cbc <rcl_validate_topic_name+0x11c>
 8015ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015baa:	460e      	mov	r6, r1
 8015bac:	2900      	cmp	r1, #0
 8015bae:	f000 808c 	beq.w	8015cca <rcl_validate_topic_name+0x12a>
 8015bb2:	4617      	mov	r7, r2
 8015bb4:	4605      	mov	r5, r0
 8015bb6:	f7ea fb1d 	bl	80001f4 <strlen>
 8015bba:	b1b0      	cbz	r0, 8015bea <rcl_validate_topic_name+0x4a>
 8015bbc:	f895 9000 	ldrb.w	r9, [r5]
 8015bc0:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8015d70 <rcl_validate_topic_name+0x1d0>
 8015bc4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015bc8:	f013 0304 	ands.w	r3, r3, #4
 8015bcc:	d178      	bne.n	8015cc0 <rcl_validate_topic_name+0x120>
 8015bce:	f100 38ff 	add.w	r8, r0, #4294967295
 8015bd2:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015bd6:	2a2f      	cmp	r2, #47	; 0x2f
 8015bd8:	d10e      	bne.n	8015bf8 <rcl_validate_topic_name+0x58>
 8015bda:	2202      	movs	r2, #2
 8015bdc:	6032      	str	r2, [r6, #0]
 8015bde:	b36f      	cbz	r7, 8015c3c <rcl_validate_topic_name+0x9c>
 8015be0:	f8c7 8000 	str.w	r8, [r7]
 8015be4:	4618      	mov	r0, r3
 8015be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bea:	2301      	movs	r3, #1
 8015bec:	6033      	str	r3, [r6, #0]
 8015bee:	b32f      	cbz	r7, 8015c3c <rcl_validate_topic_name+0x9c>
 8015bf0:	2000      	movs	r0, #0
 8015bf2:	6038      	str	r0, [r7, #0]
 8015bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bf8:	461c      	mov	r4, r3
 8015bfa:	4619      	mov	r1, r3
 8015bfc:	f105 3aff 	add.w	sl, r5, #4294967295
 8015c00:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015c04:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015c08:	f1be 0f09 	cmp.w	lr, #9
 8015c0c:	d946      	bls.n	8015c9c <rcl_validate_topic_name+0xfc>
 8015c0e:	f022 0e20 	bic.w	lr, r2, #32
 8015c12:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8015c16:	f1be 0f19 	cmp.w	lr, #25
 8015c1a:	d93f      	bls.n	8015c9c <rcl_validate_topic_name+0xfc>
 8015c1c:	2a5f      	cmp	r2, #95	; 0x5f
 8015c1e:	d014      	beq.n	8015c4a <rcl_validate_topic_name+0xaa>
 8015c20:	2a2f      	cmp	r2, #47	; 0x2f
 8015c22:	d05b      	beq.n	8015cdc <rcl_validate_topic_name+0x13c>
 8015c24:	2a7e      	cmp	r2, #126	; 0x7e
 8015c26:	d052      	beq.n	8015cce <rcl_validate_topic_name+0x12e>
 8015c28:	2a7b      	cmp	r2, #123	; 0x7b
 8015c2a:	d00a      	beq.n	8015c42 <rcl_validate_topic_name+0xa2>
 8015c2c:	2a7d      	cmp	r2, #125	; 0x7d
 8015c2e:	d16f      	bne.n	8015d10 <rcl_validate_topic_name+0x170>
 8015c30:	2c00      	cmp	r4, #0
 8015c32:	d15e      	bne.n	8015cf2 <rcl_validate_topic_name+0x152>
 8015c34:	2305      	movs	r3, #5
 8015c36:	6033      	str	r3, [r6, #0]
 8015c38:	b107      	cbz	r7, 8015c3c <rcl_validate_topic_name+0x9c>
 8015c3a:	6039      	str	r1, [r7, #0]
 8015c3c:	2000      	movs	r0, #0
 8015c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c42:	2c00      	cmp	r4, #0
 8015c44:	d14c      	bne.n	8015ce0 <rcl_validate_topic_name+0x140>
 8015c46:	460b      	mov	r3, r1
 8015c48:	2401      	movs	r4, #1
 8015c4a:	3101      	adds	r1, #1
 8015c4c:	4288      	cmp	r0, r1
 8015c4e:	d1d7      	bne.n	8015c00 <rcl_validate_topic_name+0x60>
 8015c50:	2c00      	cmp	r4, #0
 8015c52:	d156      	bne.n	8015d02 <rcl_validate_topic_name+0x162>
 8015c54:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8015c58:	4620      	mov	r0, r4
 8015c5a:	d061      	beq.n	8015d20 <rcl_validate_topic_name+0x180>
 8015c5c:	f108 0e01 	add.w	lr, r8, #1
 8015c60:	e007      	b.n	8015c72 <rcl_validate_topic_name+0xd2>
 8015c62:	2801      	cmp	r0, #1
 8015c64:	d047      	beq.n	8015cf6 <rcl_validate_topic_name+0x156>
 8015c66:	461a      	mov	r2, r3
 8015c68:	4291      	cmp	r1, r2
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	f105 0501 	add.w	r5, r5, #1
 8015c70:	d944      	bls.n	8015cfc <rcl_validate_topic_name+0x15c>
 8015c72:	4580      	cmp	r8, r0
 8015c74:	f100 0301 	add.w	r3, r0, #1
 8015c78:	d037      	beq.n	8015cea <rcl_validate_topic_name+0x14a>
 8015c7a:	782a      	ldrb	r2, [r5, #0]
 8015c7c:	2a2f      	cmp	r2, #47	; 0x2f
 8015c7e:	d1f0      	bne.n	8015c62 <rcl_validate_topic_name+0xc2>
 8015c80:	786b      	ldrb	r3, [r5, #1]
 8015c82:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8015c86:	1c43      	adds	r3, r0, #1
 8015c88:	0760      	lsls	r0, r4, #29
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	d5ec      	bpl.n	8015c68 <rcl_validate_topic_name+0xc8>
 8015c8e:	2304      	movs	r3, #4
 8015c90:	6033      	str	r3, [r6, #0]
 8015c92:	2f00      	cmp	r7, #0
 8015c94:	d0d2      	beq.n	8015c3c <rcl_validate_topic_name+0x9c>
 8015c96:	603a      	str	r2, [r7, #0]
 8015c98:	2000      	movs	r0, #0
 8015c9a:	e7ab      	b.n	8015bf4 <rcl_validate_topic_name+0x54>
 8015c9c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015ca0:	0752      	lsls	r2, r2, #29
 8015ca2:	d5d2      	bpl.n	8015c4a <rcl_validate_topic_name+0xaa>
 8015ca4:	2c00      	cmp	r4, #0
 8015ca6:	d0d0      	beq.n	8015c4a <rcl_validate_topic_name+0xaa>
 8015ca8:	2900      	cmp	r1, #0
 8015caa:	d0ce      	beq.n	8015c4a <rcl_validate_topic_name+0xaa>
 8015cac:	1e4a      	subs	r2, r1, #1
 8015cae:	429a      	cmp	r2, r3
 8015cb0:	d1cb      	bne.n	8015c4a <rcl_validate_topic_name+0xaa>
 8015cb2:	2309      	movs	r3, #9
 8015cb4:	6033      	str	r3, [r6, #0]
 8015cb6:	2f00      	cmp	r7, #0
 8015cb8:	d1bf      	bne.n	8015c3a <rcl_validate_topic_name+0x9a>
 8015cba:	e7bf      	b.n	8015c3c <rcl_validate_topic_name+0x9c>
 8015cbc:	200b      	movs	r0, #11
 8015cbe:	4770      	bx	lr
 8015cc0:	2304      	movs	r3, #4
 8015cc2:	6033      	str	r3, [r6, #0]
 8015cc4:	2f00      	cmp	r7, #0
 8015cc6:	d193      	bne.n	8015bf0 <rcl_validate_topic_name+0x50>
 8015cc8:	e7b8      	b.n	8015c3c <rcl_validate_topic_name+0x9c>
 8015cca:	200b      	movs	r0, #11
 8015ccc:	e792      	b.n	8015bf4 <rcl_validate_topic_name+0x54>
 8015cce:	2900      	cmp	r1, #0
 8015cd0:	d0bb      	beq.n	8015c4a <rcl_validate_topic_name+0xaa>
 8015cd2:	2306      	movs	r3, #6
 8015cd4:	6033      	str	r3, [r6, #0]
 8015cd6:	2f00      	cmp	r7, #0
 8015cd8:	d1af      	bne.n	8015c3a <rcl_validate_topic_name+0x9a>
 8015cda:	e7af      	b.n	8015c3c <rcl_validate_topic_name+0x9c>
 8015cdc:	2c00      	cmp	r4, #0
 8015cde:	d0b4      	beq.n	8015c4a <rcl_validate_topic_name+0xaa>
 8015ce0:	2308      	movs	r3, #8
 8015ce2:	6033      	str	r3, [r6, #0]
 8015ce4:	2f00      	cmp	r7, #0
 8015ce6:	d1a8      	bne.n	8015c3a <rcl_validate_topic_name+0x9a>
 8015ce8:	e7a8      	b.n	8015c3c <rcl_validate_topic_name+0x9c>
 8015cea:	4672      	mov	r2, lr
 8015cec:	f108 0301 	add.w	r3, r8, #1
 8015cf0:	e7ba      	b.n	8015c68 <rcl_validate_topic_name+0xc8>
 8015cf2:	2400      	movs	r4, #0
 8015cf4:	e7a9      	b.n	8015c4a <rcl_validate_topic_name+0xaa>
 8015cf6:	2202      	movs	r2, #2
 8015cf8:	4613      	mov	r3, r2
 8015cfa:	e7b5      	b.n	8015c68 <rcl_validate_topic_name+0xc8>
 8015cfc:	2000      	movs	r0, #0
 8015cfe:	6030      	str	r0, [r6, #0]
 8015d00:	e778      	b.n	8015bf4 <rcl_validate_topic_name+0x54>
 8015d02:	2205      	movs	r2, #5
 8015d04:	6032      	str	r2, [r6, #0]
 8015d06:	2f00      	cmp	r7, #0
 8015d08:	d098      	beq.n	8015c3c <rcl_validate_topic_name+0x9c>
 8015d0a:	603b      	str	r3, [r7, #0]
 8015d0c:	2000      	movs	r0, #0
 8015d0e:	e771      	b.n	8015bf4 <rcl_validate_topic_name+0x54>
 8015d10:	2c00      	cmp	r4, #0
 8015d12:	bf14      	ite	ne
 8015d14:	2308      	movne	r3, #8
 8015d16:	2303      	moveq	r3, #3
 8015d18:	6033      	str	r3, [r6, #0]
 8015d1a:	2f00      	cmp	r7, #0
 8015d1c:	d18d      	bne.n	8015c3a <rcl_validate_topic_name+0x9a>
 8015d1e:	e78d      	b.n	8015c3c <rcl_validate_topic_name+0x9c>
 8015d20:	f108 0401 	add.w	r4, r8, #1
 8015d24:	e007      	b.n	8015d36 <rcl_validate_topic_name+0x196>
 8015d26:	2801      	cmp	r0, #1
 8015d28:	d019      	beq.n	8015d5e <rcl_validate_topic_name+0x1be>
 8015d2a:	461a      	mov	r2, r3
 8015d2c:	4291      	cmp	r1, r2
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f105 0501 	add.w	r5, r5, #1
 8015d34:	d9e2      	bls.n	8015cfc <rcl_validate_topic_name+0x15c>
 8015d36:	4580      	cmp	r8, r0
 8015d38:	f100 0301 	add.w	r3, r0, #1
 8015d3c:	d00b      	beq.n	8015d56 <rcl_validate_topic_name+0x1b6>
 8015d3e:	782a      	ldrb	r2, [r5, #0]
 8015d40:	2a2f      	cmp	r2, #47	; 0x2f
 8015d42:	d1f0      	bne.n	8015d26 <rcl_validate_topic_name+0x186>
 8015d44:	786b      	ldrb	r3, [r5, #1]
 8015d46:	f81c e003 	ldrb.w	lr, [ip, r3]
 8015d4a:	1c43      	adds	r3, r0, #1
 8015d4c:	f01e 0f04 	tst.w	lr, #4
 8015d50:	461a      	mov	r2, r3
 8015d52:	d0eb      	beq.n	8015d2c <rcl_validate_topic_name+0x18c>
 8015d54:	e79b      	b.n	8015c8e <rcl_validate_topic_name+0xee>
 8015d56:	4622      	mov	r2, r4
 8015d58:	f108 0301 	add.w	r3, r8, #1
 8015d5c:	e7e6      	b.n	8015d2c <rcl_validate_topic_name+0x18c>
 8015d5e:	2307      	movs	r3, #7
 8015d60:	6033      	str	r3, [r6, #0]
 8015d62:	2f00      	cmp	r7, #0
 8015d64:	f43f af6a 	beq.w	8015c3c <rcl_validate_topic_name+0x9c>
 8015d68:	6038      	str	r0, [r7, #0]
 8015d6a:	2000      	movs	r0, #0
 8015d6c:	e742      	b.n	8015bf4 <rcl_validate_topic_name+0x54>
 8015d6e:	bf00      	nop
 8015d70:	0801c138 	.word	0x0801c138

08015d74 <rcl_get_zero_initialized_wait_set>:
 8015d74:	b470      	push	{r4, r5, r6}
 8015d76:	4d07      	ldr	r5, [pc, #28]	; (8015d94 <rcl_get_zero_initialized_wait_set+0x20>)
 8015d78:	4606      	mov	r6, r0
 8015d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d7c:	4634      	mov	r4, r6
 8015d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015d88:	682b      	ldr	r3, [r5, #0]
 8015d8a:	6023      	str	r3, [r4, #0]
 8015d8c:	4630      	mov	r0, r6
 8015d8e:	bc70      	pop	{r4, r5, r6}
 8015d90:	4770      	bx	lr
 8015d92:	bf00      	nop
 8015d94:	0801bb10 	.word	0x0801bb10

08015d98 <rcl_wait_set_is_valid>:
 8015d98:	b118      	cbz	r0, 8015da2 <rcl_wait_set_is_valid+0xa>
 8015d9a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015d9c:	3800      	subs	r0, #0
 8015d9e:	bf18      	it	ne
 8015da0:	2001      	movne	r0, #1
 8015da2:	4770      	bx	lr

08015da4 <rcl_wait_set_fini>:
 8015da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015da8:	b082      	sub	sp, #8
 8015daa:	2800      	cmp	r0, #0
 8015dac:	f000 8095 	beq.w	8015eda <rcl_wait_set_fini+0x136>
 8015db0:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8015db2:	4604      	mov	r4, r0
 8015db4:	2e00      	cmp	r6, #0
 8015db6:	f000 808c 	beq.w	8015ed2 <rcl_wait_set_fini+0x12e>
 8015dba:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8015dbc:	f002 f806 	bl	8017dcc <rmw_destroy_wait_set>
 8015dc0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015dc2:	1e06      	subs	r6, r0, #0
 8015dc4:	bf18      	it	ne
 8015dc6:	f44f 7661 	movne.w	r6, #900	; 0x384
 8015dca:	2d00      	cmp	r5, #0
 8015dcc:	f000 8081 	beq.w	8015ed2 <rcl_wait_set_fini+0x12e>
 8015dd0:	6820      	ldr	r0, [r4, #0]
 8015dd2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015dd6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015dd8:	2700      	movs	r7, #0
 8015dda:	6067      	str	r7, [r4, #4]
 8015ddc:	602f      	str	r7, [r5, #0]
 8015dde:	b120      	cbz	r0, 8015dea <rcl_wait_set_fini+0x46>
 8015de0:	9101      	str	r1, [sp, #4]
 8015de2:	47c0      	blx	r8
 8015de4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015de6:	9901      	ldr	r1, [sp, #4]
 8015de8:	6027      	str	r7, [r4, #0]
 8015dea:	68a8      	ldr	r0, [r5, #8]
 8015dec:	b120      	cbz	r0, 8015df8 <rcl_wait_set_fini+0x54>
 8015dee:	47c0      	blx	r8
 8015df0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015df2:	2300      	movs	r3, #0
 8015df4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015df8:	68a0      	ldr	r0, [r4, #8]
 8015dfa:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015dfc:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015dfe:	f04f 0800 	mov.w	r8, #0
 8015e02:	f8c4 800c 	str.w	r8, [r4, #12]
 8015e06:	f8c5 800c 	str.w	r8, [r5, #12]
 8015e0a:	b128      	cbz	r0, 8015e18 <rcl_wait_set_fini+0x74>
 8015e0c:	47b8      	blx	r7
 8015e0e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e10:	f8c4 8008 	str.w	r8, [r4, #8]
 8015e14:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e16:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e18:	6968      	ldr	r0, [r5, #20]
 8015e1a:	f04f 0800 	mov.w	r8, #0
 8015e1e:	f8c5 8010 	str.w	r8, [r5, #16]
 8015e22:	b128      	cbz	r0, 8015e30 <rcl_wait_set_fini+0x8c>
 8015e24:	47b8      	blx	r7
 8015e26:	f8c5 8014 	str.w	r8, [r5, #20]
 8015e2a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e2c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e2e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e30:	6920      	ldr	r0, [r4, #16]
 8015e32:	f04f 0800 	mov.w	r8, #0
 8015e36:	f8c4 8014 	str.w	r8, [r4, #20]
 8015e3a:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8015e3e:	b128      	cbz	r0, 8015e4c <rcl_wait_set_fini+0xa8>
 8015e40:	47b8      	blx	r7
 8015e42:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e44:	f8c4 8010 	str.w	r8, [r4, #16]
 8015e48:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e4a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e4c:	69a0      	ldr	r0, [r4, #24]
 8015e4e:	f04f 0800 	mov.w	r8, #0
 8015e52:	f8c4 801c 	str.w	r8, [r4, #28]
 8015e56:	f8c5 8018 	str.w	r8, [r5, #24]
 8015e5a:	b128      	cbz	r0, 8015e68 <rcl_wait_set_fini+0xc4>
 8015e5c:	9101      	str	r1, [sp, #4]
 8015e5e:	47b8      	blx	r7
 8015e60:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e62:	9901      	ldr	r1, [sp, #4]
 8015e64:	f8c4 8018 	str.w	r8, [r4, #24]
 8015e68:	6a28      	ldr	r0, [r5, #32]
 8015e6a:	b120      	cbz	r0, 8015e76 <rcl_wait_set_fini+0xd2>
 8015e6c:	47b8      	blx	r7
 8015e6e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e70:	2300      	movs	r3, #0
 8015e72:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015e76:	6a20      	ldr	r0, [r4, #32]
 8015e78:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015e7c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e7e:	2700      	movs	r7, #0
 8015e80:	6267      	str	r7, [r4, #36]	; 0x24
 8015e82:	626f      	str	r7, [r5, #36]	; 0x24
 8015e84:	b120      	cbz	r0, 8015e90 <rcl_wait_set_fini+0xec>
 8015e86:	9101      	str	r1, [sp, #4]
 8015e88:	47c0      	blx	r8
 8015e8a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e8c:	9901      	ldr	r1, [sp, #4]
 8015e8e:	6227      	str	r7, [r4, #32]
 8015e90:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8015e92:	b120      	cbz	r0, 8015e9e <rcl_wait_set_fini+0xfa>
 8015e94:	47c0      	blx	r8
 8015e96:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e98:	2300      	movs	r3, #0
 8015e9a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8015e9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015ea0:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015ea4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015ea6:	2700      	movs	r7, #0
 8015ea8:	62e7      	str	r7, [r4, #44]	; 0x2c
 8015eaa:	632f      	str	r7, [r5, #48]	; 0x30
 8015eac:	b120      	cbz	r0, 8015eb8 <rcl_wait_set_fini+0x114>
 8015eae:	9101      	str	r1, [sp, #4]
 8015eb0:	47c0      	blx	r8
 8015eb2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015eb4:	9901      	ldr	r1, [sp, #4]
 8015eb6:	62a7      	str	r7, [r4, #40]	; 0x28
 8015eb8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8015eba:	b120      	cbz	r0, 8015ec6 <rcl_wait_set_fini+0x122>
 8015ebc:	47c0      	blx	r8
 8015ebe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8015ec6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015ec8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015eca:	4628      	mov	r0, r5
 8015ecc:	4798      	blx	r3
 8015ece:	2300      	movs	r3, #0
 8015ed0:	6323      	str	r3, [r4, #48]	; 0x30
 8015ed2:	4630      	mov	r0, r6
 8015ed4:	b002      	add	sp, #8
 8015ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eda:	260b      	movs	r6, #11
 8015edc:	4630      	mov	r0, r6
 8015ede:	b002      	add	sp, #8
 8015ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015ee4 <rcl_wait_set_add_subscription>:
 8015ee4:	b320      	cbz	r0, 8015f30 <rcl_wait_set_add_subscription+0x4c>
 8015ee6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015ee8:	b570      	push	{r4, r5, r6, lr}
 8015eea:	4604      	mov	r4, r0
 8015eec:	b1d3      	cbz	r3, 8015f24 <rcl_wait_set_add_subscription+0x40>
 8015eee:	b319      	cbz	r1, 8015f38 <rcl_wait_set_add_subscription+0x54>
 8015ef0:	681d      	ldr	r5, [r3, #0]
 8015ef2:	6860      	ldr	r0, [r4, #4]
 8015ef4:	4285      	cmp	r5, r0
 8015ef6:	d218      	bcs.n	8015f2a <rcl_wait_set_add_subscription+0x46>
 8015ef8:	6820      	ldr	r0, [r4, #0]
 8015efa:	1c6e      	adds	r6, r5, #1
 8015efc:	601e      	str	r6, [r3, #0]
 8015efe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015f02:	b102      	cbz	r2, 8015f06 <rcl_wait_set_add_subscription+0x22>
 8015f04:	6015      	str	r5, [r2, #0]
 8015f06:	4608      	mov	r0, r1
 8015f08:	f7f8 ff60 	bl	800edcc <rcl_subscription_get_rmw_handle>
 8015f0c:	b190      	cbz	r0, 8015f34 <rcl_wait_set_add_subscription+0x50>
 8015f0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015f10:	6842      	ldr	r2, [r0, #4]
 8015f12:	689b      	ldr	r3, [r3, #8]
 8015f14:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015f1a:	6853      	ldr	r3, [r2, #4]
 8015f1c:	3301      	adds	r3, #1
 8015f1e:	6053      	str	r3, [r2, #4]
 8015f20:	2000      	movs	r0, #0
 8015f22:	bd70      	pop	{r4, r5, r6, pc}
 8015f24:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015f28:	bd70      	pop	{r4, r5, r6, pc}
 8015f2a:	f240 3086 	movw	r0, #902	; 0x386
 8015f2e:	bd70      	pop	{r4, r5, r6, pc}
 8015f30:	200b      	movs	r0, #11
 8015f32:	4770      	bx	lr
 8015f34:	2001      	movs	r0, #1
 8015f36:	bd70      	pop	{r4, r5, r6, pc}
 8015f38:	200b      	movs	r0, #11
 8015f3a:	bd70      	pop	{r4, r5, r6, pc}

08015f3c <rcl_wait_set_clear>:
 8015f3c:	2800      	cmp	r0, #0
 8015f3e:	d073      	beq.n	8016028 <rcl_wait_set_clear+0xec>
 8015f40:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015f42:	b510      	push	{r4, lr}
 8015f44:	4604      	mov	r4, r0
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d070      	beq.n	801602c <rcl_wait_set_clear+0xf0>
 8015f4a:	6800      	ldr	r0, [r0, #0]
 8015f4c:	b138      	cbz	r0, 8015f5e <rcl_wait_set_clear+0x22>
 8015f4e:	6862      	ldr	r2, [r4, #4]
 8015f50:	2100      	movs	r1, #0
 8015f52:	0092      	lsls	r2, r2, #2
 8015f54:	f004 fa88 	bl	801a468 <memset>
 8015f58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	601a      	str	r2, [r3, #0]
 8015f5e:	68a0      	ldr	r0, [r4, #8]
 8015f60:	b138      	cbz	r0, 8015f72 <rcl_wait_set_clear+0x36>
 8015f62:	68e2      	ldr	r2, [r4, #12]
 8015f64:	2100      	movs	r1, #0
 8015f66:	0092      	lsls	r2, r2, #2
 8015f68:	f004 fa7e 	bl	801a468 <memset>
 8015f6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015f6e:	2200      	movs	r2, #0
 8015f70:	60da      	str	r2, [r3, #12]
 8015f72:	69a0      	ldr	r0, [r4, #24]
 8015f74:	b138      	cbz	r0, 8015f86 <rcl_wait_set_clear+0x4a>
 8015f76:	69e2      	ldr	r2, [r4, #28]
 8015f78:	2100      	movs	r1, #0
 8015f7a:	0092      	lsls	r2, r2, #2
 8015f7c:	f004 fa74 	bl	801a468 <memset>
 8015f80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015f82:	2200      	movs	r2, #0
 8015f84:	619a      	str	r2, [r3, #24]
 8015f86:	6a20      	ldr	r0, [r4, #32]
 8015f88:	b138      	cbz	r0, 8015f9a <rcl_wait_set_clear+0x5e>
 8015f8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015f8c:	2100      	movs	r1, #0
 8015f8e:	0092      	lsls	r2, r2, #2
 8015f90:	f004 fa6a 	bl	801a468 <memset>
 8015f94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015f96:	2200      	movs	r2, #0
 8015f98:	625a      	str	r2, [r3, #36]	; 0x24
 8015f9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015f9c:	b138      	cbz	r0, 8015fae <rcl_wait_set_clear+0x72>
 8015f9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015fa0:	2100      	movs	r1, #0
 8015fa2:	0092      	lsls	r2, r2, #2
 8015fa4:	f004 fa60 	bl	801a468 <memset>
 8015fa8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015faa:	2200      	movs	r2, #0
 8015fac:	631a      	str	r2, [r3, #48]	; 0x30
 8015fae:	6920      	ldr	r0, [r4, #16]
 8015fb0:	b138      	cbz	r0, 8015fc2 <rcl_wait_set_clear+0x86>
 8015fb2:	6962      	ldr	r2, [r4, #20]
 8015fb4:	2100      	movs	r1, #0
 8015fb6:	0092      	lsls	r2, r2, #2
 8015fb8:	f004 fa56 	bl	801a468 <memset>
 8015fbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8015fc2:	6898      	ldr	r0, [r3, #8]
 8015fc4:	b138      	cbz	r0, 8015fd6 <rcl_wait_set_clear+0x9a>
 8015fc6:	685a      	ldr	r2, [r3, #4]
 8015fc8:	2100      	movs	r1, #0
 8015fca:	0092      	lsls	r2, r2, #2
 8015fcc:	f004 fa4c 	bl	801a468 <memset>
 8015fd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	605a      	str	r2, [r3, #4]
 8015fd6:	6958      	ldr	r0, [r3, #20]
 8015fd8:	b138      	cbz	r0, 8015fea <rcl_wait_set_clear+0xae>
 8015fda:	691a      	ldr	r2, [r3, #16]
 8015fdc:	2100      	movs	r1, #0
 8015fde:	0092      	lsls	r2, r2, #2
 8015fe0:	f004 fa42 	bl	801a468 <memset>
 8015fe4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	611a      	str	r2, [r3, #16]
 8015fea:	6a18      	ldr	r0, [r3, #32]
 8015fec:	b138      	cbz	r0, 8015ffe <rcl_wait_set_clear+0xc2>
 8015fee:	69da      	ldr	r2, [r3, #28]
 8015ff0:	2100      	movs	r1, #0
 8015ff2:	0092      	lsls	r2, r2, #2
 8015ff4:	f004 fa38 	bl	801a468 <memset>
 8015ff8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	61da      	str	r2, [r3, #28]
 8015ffe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016000:	b138      	cbz	r0, 8016012 <rcl_wait_set_clear+0xd6>
 8016002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016004:	2100      	movs	r1, #0
 8016006:	0092      	lsls	r2, r2, #2
 8016008:	f004 fa2e 	bl	801a468 <memset>
 801600c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801600e:	2200      	movs	r2, #0
 8016010:	629a      	str	r2, [r3, #40]	; 0x28
 8016012:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016014:	b138      	cbz	r0, 8016026 <rcl_wait_set_clear+0xea>
 8016016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016018:	2100      	movs	r1, #0
 801601a:	0092      	lsls	r2, r2, #2
 801601c:	f004 fa24 	bl	801a468 <memset>
 8016020:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016022:	2000      	movs	r0, #0
 8016024:	6358      	str	r0, [r3, #52]	; 0x34
 8016026:	bd10      	pop	{r4, pc}
 8016028:	200b      	movs	r0, #11
 801602a:	4770      	bx	lr
 801602c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016030:	bd10      	pop	{r4, pc}
 8016032:	bf00      	nop

08016034 <rcl_wait_set_resize>:
 8016034:	2800      	cmp	r0, #0
 8016036:	f000 81a6 	beq.w	8016386 <rcl_wait_set_resize+0x352>
 801603a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801603e:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8016042:	b083      	sub	sp, #12
 8016044:	4604      	mov	r4, r0
 8016046:	f1ba 0f00 	cmp.w	sl, #0
 801604a:	f000 819e 	beq.w	801638a <rcl_wait_set_resize+0x356>
 801604e:	461e      	mov	r6, r3
 8016050:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8016054:	f04f 0800 	mov.w	r8, #0
 8016058:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 801605c:	9300      	str	r3, [sp, #0]
 801605e:	f8c0 8004 	str.w	r8, [r0, #4]
 8016062:	460f      	mov	r7, r1
 8016064:	4615      	mov	r5, r2
 8016066:	f8ca 8000 	str.w	r8, [sl]
 801606a:	2900      	cmp	r1, #0
 801606c:	f000 80c9 	beq.w	8016202 <rcl_wait_set_resize+0x1ce>
 8016070:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8016074:	6800      	ldr	r0, [r0, #0]
 8016076:	4651      	mov	r1, sl
 8016078:	464a      	mov	r2, r9
 801607a:	4798      	blx	r3
 801607c:	6020      	str	r0, [r4, #0]
 801607e:	2800      	cmp	r0, #0
 8016080:	f000 80d8 	beq.w	8016234 <rcl_wait_set_resize+0x200>
 8016084:	4652      	mov	r2, sl
 8016086:	4641      	mov	r1, r8
 8016088:	f004 f9ee 	bl	801a468 <memset>
 801608c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801608e:	6067      	str	r7, [r4, #4]
 8016090:	6898      	ldr	r0, [r3, #8]
 8016092:	f8c3 8004 	str.w	r8, [r3, #4]
 8016096:	9301      	str	r3, [sp, #4]
 8016098:	464a      	mov	r2, r9
 801609a:	9b00      	ldr	r3, [sp, #0]
 801609c:	4651      	mov	r1, sl
 801609e:	4798      	blx	r3
 80160a0:	9b01      	ldr	r3, [sp, #4]
 80160a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80160a4:	6098      	str	r0, [r3, #8]
 80160a6:	6897      	ldr	r7, [r2, #8]
 80160a8:	2f00      	cmp	r7, #0
 80160aa:	f000 80be 	beq.w	801622a <rcl_wait_set_resize+0x1f6>
 80160ae:	4652      	mov	r2, sl
 80160b0:	4641      	mov	r1, r8
 80160b2:	4638      	mov	r0, r7
 80160b4:	f004 f9d8 	bl	801a468 <memset>
 80160b8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80160bc:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80160c0:	2700      	movs	r7, #0
 80160c2:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 80160c6:	60e7      	str	r7, [r4, #12]
 80160c8:	f8ca 700c 	str.w	r7, [sl, #12]
 80160cc:	2d00      	cmp	r5, #0
 80160ce:	f040 80b5 	bne.w	801623c <rcl_wait_set_resize+0x208>
 80160d2:	68a0      	ldr	r0, [r4, #8]
 80160d4:	b130      	cbz	r0, 80160e4 <rcl_wait_set_resize+0xb0>
 80160d6:	4641      	mov	r1, r8
 80160d8:	4790      	blx	r2
 80160da:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80160de:	60a5      	str	r5, [r4, #8]
 80160e0:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80160e4:	2700      	movs	r7, #0
 80160e6:	19ad      	adds	r5, r5, r6
 80160e8:	f8ca 7010 	str.w	r7, [sl, #16]
 80160ec:	f040 80be 	bne.w	801626c <rcl_wait_set_resize+0x238>
 80160f0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80160f4:	b148      	cbz	r0, 801610a <rcl_wait_set_resize+0xd6>
 80160f6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80160fa:	4641      	mov	r1, r8
 80160fc:	4798      	blx	r3
 80160fe:	f8ca 5014 	str.w	r5, [sl, #20]
 8016102:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016106:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801610a:	2500      	movs	r5, #0
 801610c:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8016110:	6165      	str	r5, [r4, #20]
 8016112:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8016116:	2e00      	cmp	r6, #0
 8016118:	f040 80bf 	bne.w	801629a <rcl_wait_set_resize+0x266>
 801611c:	6920      	ldr	r0, [r4, #16]
 801611e:	b140      	cbz	r0, 8016132 <rcl_wait_set_resize+0xfe>
 8016120:	4641      	mov	r1, r8
 8016122:	47c8      	blx	r9
 8016124:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016128:	6126      	str	r6, [r4, #16]
 801612a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801612e:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016134:	2500      	movs	r5, #0
 8016136:	61e5      	str	r5, [r4, #28]
 8016138:	f8ca 5018 	str.w	r5, [sl, #24]
 801613c:	2b00      	cmp	r3, #0
 801613e:	f040 80c1 	bne.w	80162c4 <rcl_wait_set_resize+0x290>
 8016142:	69a0      	ldr	r0, [r4, #24]
 8016144:	b128      	cbz	r0, 8016152 <rcl_wait_set_resize+0x11e>
 8016146:	4641      	mov	r1, r8
 8016148:	47c8      	blx	r9
 801614a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801614c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016150:	61a3      	str	r3, [r4, #24]
 8016152:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016156:	b130      	cbz	r0, 8016166 <rcl_wait_set_resize+0x132>
 8016158:	4641      	mov	r1, r8
 801615a:	47c8      	blx	r9
 801615c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016160:	2300      	movs	r3, #0
 8016162:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8016166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016168:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 801616c:	2600      	movs	r6, #0
 801616e:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 8016172:	6266      	str	r6, [r4, #36]	; 0x24
 8016174:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8016178:	2b00      	cmp	r3, #0
 801617a:	f000 80c8 	beq.w	801630e <rcl_wait_set_resize+0x2da>
 801617e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016182:	6a20      	ldr	r0, [r4, #32]
 8016184:	4651      	mov	r1, sl
 8016186:	463a      	mov	r2, r7
 8016188:	47c8      	blx	r9
 801618a:	6220      	str	r0, [r4, #32]
 801618c:	2800      	cmp	r0, #0
 801618e:	d051      	beq.n	8016234 <rcl_wait_set_resize+0x200>
 8016190:	4652      	mov	r2, sl
 8016192:	4631      	mov	r1, r6
 8016194:	f004 f968 	bl	801a468 <memset>
 8016198:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801619a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801619c:	6263      	str	r3, [r4, #36]	; 0x24
 801619e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80161a0:	62ae      	str	r6, [r5, #40]	; 0x28
 80161a2:	463a      	mov	r2, r7
 80161a4:	4651      	mov	r1, sl
 80161a6:	47c8      	blx	r9
 80161a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80161aa:	62e8      	str	r0, [r5, #44]	; 0x2c
 80161ac:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80161ae:	2d00      	cmp	r5, #0
 80161b0:	f000 8105 	beq.w	80163be <rcl_wait_set_resize+0x38a>
 80161b4:	4652      	mov	r2, sl
 80161b6:	4631      	mov	r1, r6
 80161b8:	4628      	mov	r0, r5
 80161ba:	f004 f955 	bl	801a468 <memset>
 80161be:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80161c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161c4:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 80161c8:	2500      	movs	r5, #0
 80161ca:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 80161ce:	62e5      	str	r5, [r4, #44]	; 0x2c
 80161d0:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	f040 80af 	bne.w	8016338 <rcl_wait_set_resize+0x304>
 80161da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80161dc:	b128      	cbz	r0, 80161ea <rcl_wait_set_resize+0x1b6>
 80161de:	4631      	mov	r1, r6
 80161e0:	47b8      	blx	r7
 80161e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161e4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80161e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80161ea:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80161ee:	b310      	cbz	r0, 8016236 <rcl_wait_set_resize+0x202>
 80161f0:	4631      	mov	r1, r6
 80161f2:	47b8      	blx	r7
 80161f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80161f6:	2000      	movs	r0, #0
 80161f8:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 80161fc:	b003      	add	sp, #12
 80161fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016202:	6800      	ldr	r0, [r0, #0]
 8016204:	b120      	cbz	r0, 8016210 <rcl_wait_set_resize+0x1dc>
 8016206:	4649      	mov	r1, r9
 8016208:	47d8      	blx	fp
 801620a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801620e:	6027      	str	r7, [r4, #0]
 8016210:	f8da 0008 	ldr.w	r0, [sl, #8]
 8016214:	2800      	cmp	r0, #0
 8016216:	f43f af51 	beq.w	80160bc <rcl_wait_set_resize+0x88>
 801621a:	4649      	mov	r1, r9
 801621c:	47d8      	blx	fp
 801621e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016222:	2300      	movs	r3, #0
 8016224:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8016228:	e748      	b.n	80160bc <rcl_wait_set_resize+0x88>
 801622a:	6820      	ldr	r0, [r4, #0]
 801622c:	4649      	mov	r1, r9
 801622e:	47d8      	blx	fp
 8016230:	e9c4 7700 	strd	r7, r7, [r4]
 8016234:	200a      	movs	r0, #10
 8016236:	b003      	add	sp, #12
 8016238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801623c:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8016240:	68a0      	ldr	r0, [r4, #8]
 8016242:	4642      	mov	r2, r8
 8016244:	4649      	mov	r1, r9
 8016246:	4798      	blx	r3
 8016248:	60a0      	str	r0, [r4, #8]
 801624a:	2800      	cmp	r0, #0
 801624c:	d0f2      	beq.n	8016234 <rcl_wait_set_resize+0x200>
 801624e:	4639      	mov	r1, r7
 8016250:	464a      	mov	r2, r9
 8016252:	f004 f909 	bl	801a468 <memset>
 8016256:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801625a:	60e5      	str	r5, [r4, #12]
 801625c:	2700      	movs	r7, #0
 801625e:	19ad      	adds	r5, r5, r6
 8016260:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016264:	f8ca 7010 	str.w	r7, [sl, #16]
 8016268:	f43f af42 	beq.w	80160f0 <rcl_wait_set_resize+0xbc>
 801626c:	00ad      	lsls	r5, r5, #2
 801626e:	4642      	mov	r2, r8
 8016270:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8016274:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016278:	4629      	mov	r1, r5
 801627a:	4798      	blx	r3
 801627c:	4680      	mov	r8, r0
 801627e:	f8ca 0014 	str.w	r0, [sl, #20]
 8016282:	2800      	cmp	r0, #0
 8016284:	f000 8084 	beq.w	8016390 <rcl_wait_set_resize+0x35c>
 8016288:	462a      	mov	r2, r5
 801628a:	4639      	mov	r1, r7
 801628c:	f004 f8ec 	bl	801a468 <memset>
 8016290:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016294:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016298:	e737      	b.n	801610a <rcl_wait_set_resize+0xd6>
 801629a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801629e:	6920      	ldr	r0, [r4, #16]
 80162a0:	4642      	mov	r2, r8
 80162a2:	4649      	mov	r1, r9
 80162a4:	47b8      	blx	r7
 80162a6:	6120      	str	r0, [r4, #16]
 80162a8:	2800      	cmp	r0, #0
 80162aa:	d0c3      	beq.n	8016234 <rcl_wait_set_resize+0x200>
 80162ac:	464a      	mov	r2, r9
 80162ae:	4629      	mov	r1, r5
 80162b0:	f004 f8da 	bl	801a468 <memset>
 80162b4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80162b8:	6166      	str	r6, [r4, #20]
 80162ba:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80162be:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80162c2:	e736      	b.n	8016132 <rcl_wait_set_resize+0xfe>
 80162c4:	009e      	lsls	r6, r3, #2
 80162c6:	69a0      	ldr	r0, [r4, #24]
 80162c8:	4631      	mov	r1, r6
 80162ca:	4642      	mov	r2, r8
 80162cc:	47b8      	blx	r7
 80162ce:	61a0      	str	r0, [r4, #24]
 80162d0:	2800      	cmp	r0, #0
 80162d2:	d0af      	beq.n	8016234 <rcl_wait_set_resize+0x200>
 80162d4:	4632      	mov	r2, r6
 80162d6:	4629      	mov	r1, r5
 80162d8:	f004 f8c6 	bl	801a468 <memset>
 80162dc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80162e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162e2:	61e3      	str	r3, [r4, #28]
 80162e4:	f8da 0020 	ldr.w	r0, [sl, #32]
 80162e8:	f8ca 501c 	str.w	r5, [sl, #28]
 80162ec:	4642      	mov	r2, r8
 80162ee:	4631      	mov	r1, r6
 80162f0:	47b8      	blx	r7
 80162f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162f4:	f8ca 0020 	str.w	r0, [sl, #32]
 80162f8:	6a1f      	ldr	r7, [r3, #32]
 80162fa:	2f00      	cmp	r7, #0
 80162fc:	d058      	beq.n	80163b0 <rcl_wait_set_resize+0x37c>
 80162fe:	4632      	mov	r2, r6
 8016300:	4629      	mov	r1, r5
 8016302:	4638      	mov	r0, r7
 8016304:	f004 f8b0 	bl	801a468 <memset>
 8016308:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801630c:	e72b      	b.n	8016166 <rcl_wait_set_resize+0x132>
 801630e:	6a20      	ldr	r0, [r4, #32]
 8016310:	b128      	cbz	r0, 801631e <rcl_wait_set_resize+0x2ea>
 8016312:	4639      	mov	r1, r7
 8016314:	47c0      	blx	r8
 8016316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016318:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801631c:	6223      	str	r3, [r4, #32]
 801631e:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8016322:	2800      	cmp	r0, #0
 8016324:	f43f af4d 	beq.w	80161c2 <rcl_wait_set_resize+0x18e>
 8016328:	4639      	mov	r1, r7
 801632a:	47c0      	blx	r8
 801632c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016330:	2300      	movs	r3, #0
 8016332:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 8016336:	e744      	b.n	80161c2 <rcl_wait_set_resize+0x18e>
 8016338:	ea4f 0883 	mov.w	r8, r3, lsl #2
 801633c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801633e:	4641      	mov	r1, r8
 8016340:	4632      	mov	r2, r6
 8016342:	47c8      	blx	r9
 8016344:	62a0      	str	r0, [r4, #40]	; 0x28
 8016346:	2800      	cmp	r0, #0
 8016348:	f43f af74 	beq.w	8016234 <rcl_wait_set_resize+0x200>
 801634c:	4642      	mov	r2, r8
 801634e:	4629      	mov	r1, r5
 8016350:	f004 f88a 	bl	801a468 <memset>
 8016354:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801635a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801635c:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8016360:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8016364:	4632      	mov	r2, r6
 8016366:	4641      	mov	r1, r8
 8016368:	47c8      	blx	r9
 801636a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801636c:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8016370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016372:	b35b      	cbz	r3, 80163cc <rcl_wait_set_resize+0x398>
 8016374:	4642      	mov	r2, r8
 8016376:	4618      	mov	r0, r3
 8016378:	4629      	mov	r1, r5
 801637a:	f004 f875 	bl	801a468 <memset>
 801637e:	4628      	mov	r0, r5
 8016380:	b003      	add	sp, #12
 8016382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016386:	200b      	movs	r0, #11
 8016388:	4770      	bx	lr
 801638a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801638e:	e752      	b.n	8016236 <rcl_wait_set_resize+0x202>
 8016390:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016392:	68a0      	ldr	r0, [r4, #8]
 8016394:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016396:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8016398:	4790      	blx	r2
 801639a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801639c:	6920      	ldr	r0, [r4, #16]
 801639e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80163a0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80163a2:	e9c4 8802 	strd	r8, r8, [r4, #8]
 80163a6:	4790      	blx	r2
 80163a8:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80163ac:	200a      	movs	r0, #10
 80163ae:	e742      	b.n	8016236 <rcl_wait_set_resize+0x202>
 80163b0:	69a0      	ldr	r0, [r4, #24]
 80163b2:	4641      	mov	r1, r8
 80163b4:	47c8      	blx	r9
 80163b6:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80163ba:	200a      	movs	r0, #10
 80163bc:	e73b      	b.n	8016236 <rcl_wait_set_resize+0x202>
 80163be:	6a20      	ldr	r0, [r4, #32]
 80163c0:	4639      	mov	r1, r7
 80163c2:	47c0      	blx	r8
 80163c4:	e9c4 5508 	strd	r5, r5, [r4, #32]
 80163c8:	200a      	movs	r0, #10
 80163ca:	e734      	b.n	8016236 <rcl_wait_set_resize+0x202>
 80163cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80163ce:	9300      	str	r3, [sp, #0]
 80163d0:	4631      	mov	r1, r6
 80163d2:	47b8      	blx	r7
 80163d4:	9b00      	ldr	r3, [sp, #0]
 80163d6:	200a      	movs	r0, #10
 80163d8:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80163dc:	e72b      	b.n	8016236 <rcl_wait_set_resize+0x202>
 80163de:	bf00      	nop

080163e0 <rcl_wait_set_init>:
 80163e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163e4:	b084      	sub	sp, #16
 80163e6:	4604      	mov	r4, r0
 80163e8:	a810      	add	r0, sp, #64	; 0x40
 80163ea:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80163ee:	460f      	mov	r7, r1
 80163f0:	4690      	mov	r8, r2
 80163f2:	4699      	mov	r9, r3
 80163f4:	f7f9 f96a 	bl	800f6cc <rcutils_allocator_is_valid>
 80163f8:	2800      	cmp	r0, #0
 80163fa:	d06b      	beq.n	80164d4 <rcl_wait_set_init+0xf4>
 80163fc:	2c00      	cmp	r4, #0
 80163fe:	d069      	beq.n	80164d4 <rcl_wait_set_init+0xf4>
 8016400:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016402:	b125      	cbz	r5, 801640e <rcl_wait_set_init+0x2e>
 8016404:	2564      	movs	r5, #100	; 0x64
 8016406:	4628      	mov	r0, r5
 8016408:	b004      	add	sp, #16
 801640a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801640e:	f1ba 0f00 	cmp.w	sl, #0
 8016412:	d05f      	beq.n	80164d4 <rcl_wait_set_init+0xf4>
 8016414:	4650      	mov	r0, sl
 8016416:	f7fe faa5 	bl	8014964 <rcl_context_is_valid>
 801641a:	2800      	cmp	r0, #0
 801641c:	d067      	beq.n	80164ee <rcl_wait_set_init+0x10e>
 801641e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016420:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016422:	205c      	movs	r0, #92	; 0x5c
 8016424:	4798      	blx	r3
 8016426:	6320      	str	r0, [r4, #48]	; 0x30
 8016428:	2800      	cmp	r0, #0
 801642a:	d062      	beq.n	80164f2 <rcl_wait_set_init+0x112>
 801642c:	225c      	movs	r2, #92	; 0x5c
 801642e:	4629      	mov	r1, r5
 8016430:	f004 f81a 	bl	801a468 <memset>
 8016434:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8016438:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801643c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801643e:	f8dc e000 	ldr.w	lr, [ip]
 8016442:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8016446:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 801644a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801644e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8016452:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8016456:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 801645a:	60b5      	str	r5, [r6, #8]
 801645c:	6075      	str	r5, [r6, #4]
 801645e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016462:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8016466:	1899      	adds	r1, r3, r2
 8016468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801646a:	f8da 0000 	ldr.w	r0, [sl]
 801646e:	f8cc e000 	str.w	lr, [ip]
 8016472:	4419      	add	r1, r3
 8016474:	4441      	add	r1, r8
 8016476:	3028      	adds	r0, #40	; 0x28
 8016478:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801647c:	f001 fc9c 	bl	8017db8 <rmw_create_wait_set>
 8016480:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016482:	63f0      	str	r0, [r6, #60]	; 0x3c
 8016484:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8016486:	b350      	cbz	r0, 80164de <rcl_wait_set_init+0xfe>
 8016488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801648a:	9302      	str	r3, [sp, #8]
 801648c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801648e:	9301      	str	r3, [sp, #4]
 8016490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016492:	9300      	str	r3, [sp, #0]
 8016494:	4642      	mov	r2, r8
 8016496:	464b      	mov	r3, r9
 8016498:	4639      	mov	r1, r7
 801649a:	4620      	mov	r0, r4
 801649c:	f7ff fdca 	bl	8016034 <rcl_wait_set_resize>
 80164a0:	4605      	mov	r5, r0
 80164a2:	2800      	cmp	r0, #0
 80164a4:	d0af      	beq.n	8016406 <rcl_wait_set_init+0x26>
 80164a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80164a8:	bb2b      	cbnz	r3, 80164f6 <rcl_wait_set_init+0x116>
 80164aa:	2600      	movs	r6, #0
 80164ac:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80164b0:	9600      	str	r6, [sp, #0]
 80164b2:	4633      	mov	r3, r6
 80164b4:	4632      	mov	r2, r6
 80164b6:	4631      	mov	r1, r6
 80164b8:	4620      	mov	r0, r4
 80164ba:	f7ff fdbb 	bl	8016034 <rcl_wait_set_resize>
 80164be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d0a0      	beq.n	8016406 <rcl_wait_set_init+0x26>
 80164c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80164c6:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80164c8:	4798      	blx	r3
 80164ca:	4628      	mov	r0, r5
 80164cc:	6326      	str	r6, [r4, #48]	; 0x30
 80164ce:	b004      	add	sp, #16
 80164d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164d4:	250b      	movs	r5, #11
 80164d6:	4628      	mov	r0, r5
 80164d8:	b004      	add	sp, #16
 80164da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164de:	2501      	movs	r5, #1
 80164e0:	f001 fc74 	bl	8017dcc <rmw_destroy_wait_set>
 80164e4:	2800      	cmp	r0, #0
 80164e6:	bf18      	it	ne
 80164e8:	f44f 7561 	movne.w	r5, #900	; 0x384
 80164ec:	e7dd      	b.n	80164aa <rcl_wait_set_init+0xca>
 80164ee:	2565      	movs	r5, #101	; 0x65
 80164f0:	e789      	b.n	8016406 <rcl_wait_set_init+0x26>
 80164f2:	250a      	movs	r5, #10
 80164f4:	e787      	b.n	8016406 <rcl_wait_set_init+0x26>
 80164f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80164f8:	e7f2      	b.n	80164e0 <rcl_wait_set_init+0x100>
 80164fa:	bf00      	nop

080164fc <rcl_wait_set_add_guard_condition>:
 80164fc:	b320      	cbz	r0, 8016548 <rcl_wait_set_add_guard_condition+0x4c>
 80164fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016500:	b570      	push	{r4, r5, r6, lr}
 8016502:	4604      	mov	r4, r0
 8016504:	b1d3      	cbz	r3, 801653c <rcl_wait_set_add_guard_condition+0x40>
 8016506:	b319      	cbz	r1, 8016550 <rcl_wait_set_add_guard_condition+0x54>
 8016508:	68dd      	ldr	r5, [r3, #12]
 801650a:	68e0      	ldr	r0, [r4, #12]
 801650c:	4285      	cmp	r5, r0
 801650e:	d218      	bcs.n	8016542 <rcl_wait_set_add_guard_condition+0x46>
 8016510:	68a0      	ldr	r0, [r4, #8]
 8016512:	1c6e      	adds	r6, r5, #1
 8016514:	60de      	str	r6, [r3, #12]
 8016516:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801651a:	b102      	cbz	r2, 801651e <rcl_wait_set_add_guard_condition+0x22>
 801651c:	6015      	str	r5, [r2, #0]
 801651e:	4608      	mov	r0, r1
 8016520:	f003 f96c 	bl	80197fc <rcl_guard_condition_get_rmw_handle>
 8016524:	b190      	cbz	r0, 801654c <rcl_wait_set_add_guard_condition+0x50>
 8016526:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016528:	6842      	ldr	r2, [r0, #4]
 801652a:	695b      	ldr	r3, [r3, #20]
 801652c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016530:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016532:	6913      	ldr	r3, [r2, #16]
 8016534:	3301      	adds	r3, #1
 8016536:	6113      	str	r3, [r2, #16]
 8016538:	2000      	movs	r0, #0
 801653a:	bd70      	pop	{r4, r5, r6, pc}
 801653c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016540:	bd70      	pop	{r4, r5, r6, pc}
 8016542:	f240 3086 	movw	r0, #902	; 0x386
 8016546:	bd70      	pop	{r4, r5, r6, pc}
 8016548:	200b      	movs	r0, #11
 801654a:	4770      	bx	lr
 801654c:	2001      	movs	r0, #1
 801654e:	bd70      	pop	{r4, r5, r6, pc}
 8016550:	200b      	movs	r0, #11
 8016552:	bd70      	pop	{r4, r5, r6, pc}

08016554 <rcl_wait_set_add_timer>:
 8016554:	b340      	cbz	r0, 80165a8 <rcl_wait_set_add_timer+0x54>
 8016556:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016558:	b570      	push	{r4, r5, r6, lr}
 801655a:	4604      	mov	r4, r0
 801655c:	b1f3      	cbz	r3, 801659c <rcl_wait_set_add_timer+0x48>
 801655e:	b329      	cbz	r1, 80165ac <rcl_wait_set_add_timer+0x58>
 8016560:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8016562:	6965      	ldr	r5, [r4, #20]
 8016564:	42a8      	cmp	r0, r5
 8016566:	d21c      	bcs.n	80165a2 <rcl_wait_set_add_timer+0x4e>
 8016568:	6925      	ldr	r5, [r4, #16]
 801656a:	1c46      	adds	r6, r0, #1
 801656c:	641e      	str	r6, [r3, #64]	; 0x40
 801656e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8016572:	b102      	cbz	r2, 8016576 <rcl_wait_set_add_timer+0x22>
 8016574:	6010      	str	r0, [r2, #0]
 8016576:	4608      	mov	r0, r1
 8016578:	f7ff faa4 	bl	8015ac4 <rcl_timer_get_guard_condition>
 801657c:	b168      	cbz	r0, 801659a <rcl_wait_set_add_timer+0x46>
 801657e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016580:	68e3      	ldr	r3, [r4, #12]
 8016582:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8016584:	3b01      	subs	r3, #1
 8016586:	441d      	add	r5, r3
 8016588:	f003 f938 	bl	80197fc <rcl_guard_condition_get_rmw_handle>
 801658c:	b180      	cbz	r0, 80165b0 <rcl_wait_set_add_timer+0x5c>
 801658e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016590:	6842      	ldr	r2, [r0, #4]
 8016592:	695b      	ldr	r3, [r3, #20]
 8016594:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016598:	2000      	movs	r0, #0
 801659a:	bd70      	pop	{r4, r5, r6, pc}
 801659c:	f44f 7061 	mov.w	r0, #900	; 0x384
 80165a0:	bd70      	pop	{r4, r5, r6, pc}
 80165a2:	f240 3086 	movw	r0, #902	; 0x386
 80165a6:	bd70      	pop	{r4, r5, r6, pc}
 80165a8:	200b      	movs	r0, #11
 80165aa:	4770      	bx	lr
 80165ac:	200b      	movs	r0, #11
 80165ae:	bd70      	pop	{r4, r5, r6, pc}
 80165b0:	2001      	movs	r0, #1
 80165b2:	bd70      	pop	{r4, r5, r6, pc}

080165b4 <rcl_wait_set_add_client>:
 80165b4:	b320      	cbz	r0, 8016600 <rcl_wait_set_add_client+0x4c>
 80165b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80165b8:	b570      	push	{r4, r5, r6, lr}
 80165ba:	4604      	mov	r4, r0
 80165bc:	b1d3      	cbz	r3, 80165f4 <rcl_wait_set_add_client+0x40>
 80165be:	b319      	cbz	r1, 8016608 <rcl_wait_set_add_client+0x54>
 80165c0:	699d      	ldr	r5, [r3, #24]
 80165c2:	69e0      	ldr	r0, [r4, #28]
 80165c4:	4285      	cmp	r5, r0
 80165c6:	d218      	bcs.n	80165fa <rcl_wait_set_add_client+0x46>
 80165c8:	69a0      	ldr	r0, [r4, #24]
 80165ca:	1c6e      	adds	r6, r5, #1
 80165cc:	619e      	str	r6, [r3, #24]
 80165ce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80165d2:	b102      	cbz	r2, 80165d6 <rcl_wait_set_add_client+0x22>
 80165d4:	6015      	str	r5, [r2, #0]
 80165d6:	4608      	mov	r0, r1
 80165d8:	f7fe f964 	bl	80148a4 <rcl_client_get_rmw_handle>
 80165dc:	b190      	cbz	r0, 8016604 <rcl_wait_set_add_client+0x50>
 80165de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80165e0:	6842      	ldr	r2, [r0, #4]
 80165e2:	6a1b      	ldr	r3, [r3, #32]
 80165e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80165e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80165ea:	69d3      	ldr	r3, [r2, #28]
 80165ec:	3301      	adds	r3, #1
 80165ee:	61d3      	str	r3, [r2, #28]
 80165f0:	2000      	movs	r0, #0
 80165f2:	bd70      	pop	{r4, r5, r6, pc}
 80165f4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80165f8:	bd70      	pop	{r4, r5, r6, pc}
 80165fa:	f240 3086 	movw	r0, #902	; 0x386
 80165fe:	bd70      	pop	{r4, r5, r6, pc}
 8016600:	200b      	movs	r0, #11
 8016602:	4770      	bx	lr
 8016604:	2001      	movs	r0, #1
 8016606:	bd70      	pop	{r4, r5, r6, pc}
 8016608:	200b      	movs	r0, #11
 801660a:	bd70      	pop	{r4, r5, r6, pc}

0801660c <rcl_wait_set_add_service>:
 801660c:	b320      	cbz	r0, 8016658 <rcl_wait_set_add_service+0x4c>
 801660e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016610:	b570      	push	{r4, r5, r6, lr}
 8016612:	4604      	mov	r4, r0
 8016614:	b1d3      	cbz	r3, 801664c <rcl_wait_set_add_service+0x40>
 8016616:	b319      	cbz	r1, 8016660 <rcl_wait_set_add_service+0x54>
 8016618:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801661a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801661c:	4285      	cmp	r5, r0
 801661e:	d218      	bcs.n	8016652 <rcl_wait_set_add_service+0x46>
 8016620:	6a20      	ldr	r0, [r4, #32]
 8016622:	1c6e      	adds	r6, r5, #1
 8016624:	625e      	str	r6, [r3, #36]	; 0x24
 8016626:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801662a:	b102      	cbz	r2, 801662e <rcl_wait_set_add_service+0x22>
 801662c:	6015      	str	r5, [r2, #0]
 801662e:	4608      	mov	r0, r1
 8016630:	f7ff f84e 	bl	80156d0 <rcl_service_get_rmw_handle>
 8016634:	b190      	cbz	r0, 801665c <rcl_wait_set_add_service+0x50>
 8016636:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016638:	6842      	ldr	r2, [r0, #4]
 801663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801663c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016640:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016642:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8016644:	3301      	adds	r3, #1
 8016646:	6293      	str	r3, [r2, #40]	; 0x28
 8016648:	2000      	movs	r0, #0
 801664a:	bd70      	pop	{r4, r5, r6, pc}
 801664c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016650:	bd70      	pop	{r4, r5, r6, pc}
 8016652:	f240 3086 	movw	r0, #902	; 0x386
 8016656:	bd70      	pop	{r4, r5, r6, pc}
 8016658:	200b      	movs	r0, #11
 801665a:	4770      	bx	lr
 801665c:	2001      	movs	r0, #1
 801665e:	bd70      	pop	{r4, r5, r6, pc}
 8016660:	200b      	movs	r0, #11
 8016662:	bd70      	pop	{r4, r5, r6, pc}
 8016664:	0000      	movs	r0, r0
	...

08016668 <rcl_wait>:
 8016668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801666c:	b08f      	sub	sp, #60	; 0x3c
 801666e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016672:	2800      	cmp	r0, #0
 8016674:	f000 814c 	beq.w	8016910 <rcl_wait+0x2a8>
 8016678:	6b05      	ldr	r5, [r0, #48]	; 0x30
 801667a:	4604      	mov	r4, r0
 801667c:	2d00      	cmp	r5, #0
 801667e:	f000 80bc 	beq.w	80167fa <rcl_wait+0x192>
 8016682:	6843      	ldr	r3, [r0, #4]
 8016684:	b973      	cbnz	r3, 80166a4 <rcl_wait+0x3c>
 8016686:	68e3      	ldr	r3, [r4, #12]
 8016688:	b963      	cbnz	r3, 80166a4 <rcl_wait+0x3c>
 801668a:	6963      	ldr	r3, [r4, #20]
 801668c:	b953      	cbnz	r3, 80166a4 <rcl_wait+0x3c>
 801668e:	69e3      	ldr	r3, [r4, #28]
 8016690:	b943      	cbnz	r3, 80166a4 <rcl_wait+0x3c>
 8016692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016694:	b933      	cbnz	r3, 80166a4 <rcl_wait+0x3c>
 8016696:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016698:	b923      	cbnz	r3, 80166a4 <rcl_wait+0x3c>
 801669a:	f240 3085 	movw	r0, #901	; 0x385
 801669e:	b00f      	add	sp, #60	; 0x3c
 80166a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80166a8:	2a01      	cmp	r2, #1
 80166aa:	f173 0300 	sbcs.w	r3, r3, #0
 80166ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80166b0:	db56      	blt.n	8016760 <rcl_wait+0xf8>
 80166b2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80166b6:	2900      	cmp	r1, #0
 80166b8:	f000 8149 	beq.w	801694e <rcl_wait+0x2e6>
 80166bc:	2300      	movs	r3, #0
 80166be:	9307      	str	r3, [sp, #28]
 80166c0:	469b      	mov	fp, r3
 80166c2:	f04f 0800 	mov.w	r8, #0
 80166c6:	f04f 0900 	mov.w	r9, #0
 80166ca:	e00d      	b.n	80166e8 <rcl_wait+0x80>
 80166cc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80166ce:	6922      	ldr	r2, [r4, #16]
 80166d0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80166d2:	f842 000a 	str.w	r0, [r2, sl]
 80166d6:	f118 0801 	adds.w	r8, r8, #1
 80166da:	f149 0900 	adc.w	r9, r9, #0
 80166de:	2300      	movs	r3, #0
 80166e0:	4599      	cmp	r9, r3
 80166e2:	bf08      	it	eq
 80166e4:	4588      	cmpeq	r8, r1
 80166e6:	d243      	bcs.n	8016770 <rcl_wait+0x108>
 80166e8:	6922      	ldr	r2, [r4, #16]
 80166ea:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80166ee:	f852 000a 	ldr.w	r0, [r2, sl]
 80166f2:	2800      	cmp	r0, #0
 80166f4:	d0ef      	beq.n	80166d6 <rcl_wait+0x6e>
 80166f6:	68e2      	ldr	r2, [r4, #12]
 80166f8:	6969      	ldr	r1, [r5, #20]
 80166fa:	4442      	add	r2, r8
 80166fc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8016700:	b13b      	cbz	r3, 8016712 <rcl_wait+0xaa>
 8016702:	692a      	ldr	r2, [r5, #16]
 8016704:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016708:	6921      	ldr	r1, [r4, #16]
 801670a:	3201      	adds	r2, #1
 801670c:	f851 000a 	ldr.w	r0, [r1, sl]
 8016710:	612a      	str	r2, [r5, #16]
 8016712:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8016716:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 801671a:	f7ff f9c1 	bl	8015aa0 <rcl_timer_is_canceled>
 801671e:	2800      	cmp	r0, #0
 8016720:	d1bd      	bne.n	801669e <rcl_wait+0x36>
 8016722:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8016726:	2a00      	cmp	r2, #0
 8016728:	d1d0      	bne.n	80166cc <rcl_wait+0x64>
 801672a:	6922      	ldr	r2, [r4, #16]
 801672c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016730:	f852 000a 	ldr.w	r0, [r2, sl]
 8016734:	a90a      	add	r1, sp, #40	; 0x28
 8016736:	f04f 32ff 	mov.w	r2, #4294967295
 801673a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801673e:	f7ff f98b 	bl	8015a58 <rcl_timer_get_time_until_next_call>
 8016742:	2800      	cmp	r0, #0
 8016744:	d1ab      	bne.n	801669e <rcl_wait+0x36>
 8016746:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801674a:	42b2      	cmp	r2, r6
 801674c:	eb73 0107 	sbcs.w	r1, r3, r7
 8016750:	da03      	bge.n	801675a <rcl_wait+0xf2>
 8016752:	461f      	mov	r7, r3
 8016754:	2301      	movs	r3, #1
 8016756:	4616      	mov	r6, r2
 8016758:	9307      	str	r3, [sp, #28]
 801675a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801675c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801675e:	e7ba      	b.n	80166d6 <rcl_wait+0x6e>
 8016760:	2900      	cmp	r1, #0
 8016762:	f000 80de 	beq.w	8016922 <rcl_wait+0x2ba>
 8016766:	f04f 36ff 	mov.w	r6, #4294967295
 801676a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801676e:	e7a5      	b.n	80166bc <rcl_wait+0x54>
 8016770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016774:	4313      	orrs	r3, r2
 8016776:	d145      	bne.n	8016804 <rcl_wait+0x19c>
 8016778:	2300      	movs	r3, #0
 801677a:	2200      	movs	r2, #0
 801677c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016780:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016784:	ab0a      	add	r3, sp, #40	; 0x28
 8016786:	9302      	str	r3, [sp, #8]
 8016788:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801678a:	9301      	str	r3, [sp, #4]
 801678c:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8016790:	9300      	str	r3, [sp, #0]
 8016792:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8016796:	f105 031c 	add.w	r3, r5, #28
 801679a:	f105 0110 	add.w	r1, r5, #16
 801679e:	1d28      	adds	r0, r5, #4
 80167a0:	f001 f98a 	bl	8017ab8 <rmw_wait>
 80167a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80167a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80167a8:	4680      	mov	r8, r0
 80167aa:	b30a      	cbz	r2, 80167f0 <rcl_wait+0x188>
 80167ac:	2500      	movs	r5, #0
 80167ae:	462f      	mov	r7, r5
 80167b0:	e004      	b.n	80167bc <rcl_wait+0x154>
 80167b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80167b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80167b6:	3501      	adds	r5, #1
 80167b8:	42aa      	cmp	r2, r5
 80167ba:	d919      	bls.n	80167f0 <rcl_wait+0x188>
 80167bc:	6922      	ldr	r2, [r4, #16]
 80167be:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80167c2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80167c6:	00ae      	lsls	r6, r5, #2
 80167c8:	2800      	cmp	r0, #0
 80167ca:	d0f3      	beq.n	80167b4 <rcl_wait+0x14c>
 80167cc:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 80167d0:	f7ff f90a 	bl	80159e8 <rcl_timer_is_ready>
 80167d4:	2800      	cmp	r0, #0
 80167d6:	f47f af62 	bne.w	801669e <rcl_wait+0x36>
 80167da:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80167de:	2a00      	cmp	r2, #0
 80167e0:	d1e7      	bne.n	80167b2 <rcl_wait+0x14a>
 80167e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80167e4:	6921      	ldr	r1, [r4, #16]
 80167e6:	518a      	str	r2, [r1, r6]
 80167e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80167ea:	3501      	adds	r5, #1
 80167ec:	42aa      	cmp	r2, r5
 80167ee:	d8e5      	bhi.n	80167bc <rcl_wait+0x154>
 80167f0:	f038 0002 	bics.w	r0, r8, #2
 80167f4:	d029      	beq.n	801684a <rcl_wait+0x1e2>
 80167f6:	2001      	movs	r0, #1
 80167f8:	e751      	b.n	801669e <rcl_wait+0x36>
 80167fa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80167fe:	b00f      	add	sp, #60	; 0x3c
 8016800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016808:	2a01      	cmp	r2, #1
 801680a:	f173 0300 	sbcs.w	r3, r3, #0
 801680e:	f2c0 8083 	blt.w	8016918 <rcl_wait+0x2b0>
 8016812:	2e00      	cmp	r6, #0
 8016814:	f177 0300 	sbcs.w	r3, r7, #0
 8016818:	bfbc      	itt	lt
 801681a:	2600      	movlt	r6, #0
 801681c:	2700      	movlt	r7, #0
 801681e:	a34e      	add	r3, pc, #312	; (adr r3, 8016958 <rcl_wait+0x2f0>)
 8016820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016824:	4630      	mov	r0, r6
 8016826:	4639      	mov	r1, r7
 8016828:	f7ea f9e8 	bl	8000bfc <__aeabi_ldivmod>
 801682c:	a34a      	add	r3, pc, #296	; (adr r3, 8016958 <rcl_wait+0x2f0>)
 801682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016832:	4680      	mov	r8, r0
 8016834:	4689      	mov	r9, r1
 8016836:	4630      	mov	r0, r6
 8016838:	4639      	mov	r1, r7
 801683a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801683e:	f7ea f9dd 	bl	8000bfc <__aeabi_ldivmod>
 8016842:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016846:	ab0a      	add	r3, sp, #40	; 0x28
 8016848:	e79d      	b.n	8016786 <rcl_wait+0x11e>
 801684a:	6866      	ldr	r6, [r4, #4]
 801684c:	4602      	mov	r2, r0
 801684e:	b91e      	cbnz	r6, 8016858 <rcl_wait+0x1f0>
 8016850:	e00d      	b.n	801686e <rcl_wait+0x206>
 8016852:	3201      	adds	r2, #1
 8016854:	42b2      	cmp	r2, r6
 8016856:	d00a      	beq.n	801686e <rcl_wait+0x206>
 8016858:	6899      	ldr	r1, [r3, #8]
 801685a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801685e:	2900      	cmp	r1, #0
 8016860:	d1f7      	bne.n	8016852 <rcl_wait+0x1ea>
 8016862:	6825      	ldr	r5, [r4, #0]
 8016864:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016868:	3201      	adds	r2, #1
 801686a:	42b2      	cmp	r2, r6
 801686c:	d1f4      	bne.n	8016858 <rcl_wait+0x1f0>
 801686e:	68e6      	ldr	r6, [r4, #12]
 8016870:	2200      	movs	r2, #0
 8016872:	b91e      	cbnz	r6, 801687c <rcl_wait+0x214>
 8016874:	e00d      	b.n	8016892 <rcl_wait+0x22a>
 8016876:	3201      	adds	r2, #1
 8016878:	42b2      	cmp	r2, r6
 801687a:	d00a      	beq.n	8016892 <rcl_wait+0x22a>
 801687c:	6959      	ldr	r1, [r3, #20]
 801687e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016882:	2900      	cmp	r1, #0
 8016884:	d1f7      	bne.n	8016876 <rcl_wait+0x20e>
 8016886:	68a5      	ldr	r5, [r4, #8]
 8016888:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801688c:	3201      	adds	r2, #1
 801688e:	42b2      	cmp	r2, r6
 8016890:	d1f4      	bne.n	801687c <rcl_wait+0x214>
 8016892:	69e6      	ldr	r6, [r4, #28]
 8016894:	2200      	movs	r2, #0
 8016896:	b91e      	cbnz	r6, 80168a0 <rcl_wait+0x238>
 8016898:	e00d      	b.n	80168b6 <rcl_wait+0x24e>
 801689a:	3201      	adds	r2, #1
 801689c:	42b2      	cmp	r2, r6
 801689e:	d00a      	beq.n	80168b6 <rcl_wait+0x24e>
 80168a0:	6a19      	ldr	r1, [r3, #32]
 80168a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80168a6:	2900      	cmp	r1, #0
 80168a8:	d1f7      	bne.n	801689a <rcl_wait+0x232>
 80168aa:	69a5      	ldr	r5, [r4, #24]
 80168ac:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80168b0:	3201      	adds	r2, #1
 80168b2:	42b2      	cmp	r2, r6
 80168b4:	d1f4      	bne.n	80168a0 <rcl_wait+0x238>
 80168b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80168b8:	2200      	movs	r2, #0
 80168ba:	b91e      	cbnz	r6, 80168c4 <rcl_wait+0x25c>
 80168bc:	e00d      	b.n	80168da <rcl_wait+0x272>
 80168be:	3201      	adds	r2, #1
 80168c0:	4296      	cmp	r6, r2
 80168c2:	d00a      	beq.n	80168da <rcl_wait+0x272>
 80168c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80168c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80168ca:	2900      	cmp	r1, #0
 80168cc:	d1f7      	bne.n	80168be <rcl_wait+0x256>
 80168ce:	6a25      	ldr	r5, [r4, #32]
 80168d0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80168d4:	3201      	adds	r2, #1
 80168d6:	4296      	cmp	r6, r2
 80168d8:	d1f4      	bne.n	80168c4 <rcl_wait+0x25c>
 80168da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80168dc:	2200      	movs	r2, #0
 80168de:	b91e      	cbnz	r6, 80168e8 <rcl_wait+0x280>
 80168e0:	e00d      	b.n	80168fe <rcl_wait+0x296>
 80168e2:	3201      	adds	r2, #1
 80168e4:	42b2      	cmp	r2, r6
 80168e6:	d00a      	beq.n	80168fe <rcl_wait+0x296>
 80168e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80168ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80168ee:	2900      	cmp	r1, #0
 80168f0:	d1f7      	bne.n	80168e2 <rcl_wait+0x27a>
 80168f2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80168f4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80168f8:	3201      	adds	r2, #1
 80168fa:	42b2      	cmp	r2, r6
 80168fc:	d1f4      	bne.n	80168e8 <rcl_wait+0x280>
 80168fe:	f1b8 0f02 	cmp.w	r8, #2
 8016902:	f47f aecc 	bne.w	801669e <rcl_wait+0x36>
 8016906:	9b07      	ldr	r3, [sp, #28]
 8016908:	2b00      	cmp	r3, #0
 801690a:	bf08      	it	eq
 801690c:	2002      	moveq	r0, #2
 801690e:	e6c6      	b.n	801669e <rcl_wait+0x36>
 8016910:	200b      	movs	r0, #11
 8016912:	b00f      	add	sp, #60	; 0x3c
 8016914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016918:	9b07      	ldr	r3, [sp, #28]
 801691a:	2b00      	cmp	r3, #0
 801691c:	f47f af79 	bne.w	8016812 <rcl_wait+0x1aa>
 8016920:	e731      	b.n	8016786 <rcl_wait+0x11e>
 8016922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016926:	4313      	orrs	r3, r2
 8016928:	bf08      	it	eq
 801692a:	9107      	streq	r1, [sp, #28]
 801692c:	f43f af24 	beq.w	8016778 <rcl_wait+0x110>
 8016930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016934:	f04f 36ff 	mov.w	r6, #4294967295
 8016938:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801693c:	2a01      	cmp	r2, #1
 801693e:	f173 0300 	sbcs.w	r3, r3, #0
 8016942:	f04f 0300 	mov.w	r3, #0
 8016946:	9307      	str	r3, [sp, #28]
 8016948:	f6bf af63 	bge.w	8016812 <rcl_wait+0x1aa>
 801694c:	e71b      	b.n	8016786 <rcl_wait+0x11e>
 801694e:	4632      	mov	r2, r6
 8016950:	463b      	mov	r3, r7
 8016952:	e7f3      	b.n	801693c <rcl_wait+0x2d4>
 8016954:	f3af 8000 	nop.w
 8016958:	3b9aca00 	.word	0x3b9aca00
 801695c:	00000000 	.word	0x00000000

08016960 <__atomic_load_8>:
 8016960:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016964:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8016968:	4b14      	ldr	r3, [pc, #80]	; (80169bc <__atomic_load_8+0x5c>)
 801696a:	4a15      	ldr	r2, [pc, #84]	; (80169c0 <__atomic_load_8+0x60>)
 801696c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016970:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016974:	fb03 f301 	mul.w	r3, r3, r1
 8016978:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 801697c:	fba2 1203 	umull	r1, r2, r2, r3
 8016980:	0912      	lsrs	r2, r2, #4
 8016982:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8016986:	b430      	push	{r4, r5}
 8016988:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 801698c:	4c0d      	ldr	r4, [pc, #52]	; (80169c4 <__atomic_load_8+0x64>)
 801698e:	1a9b      	subs	r3, r3, r2
 8016990:	18e1      	adds	r1, r4, r3
 8016992:	f04f 0501 	mov.w	r5, #1
 8016996:	e8d1 2f4f 	ldrexb	r2, [r1]
 801699a:	e8c1 5f4c 	strexb	ip, r5, [r1]
 801699e:	f1bc 0f00 	cmp.w	ip, #0
 80169a2:	d1f8      	bne.n	8016996 <__atomic_load_8+0x36>
 80169a4:	f3bf 8f5b 	dmb	ish
 80169a8:	b2d2      	uxtb	r2, r2
 80169aa:	2a00      	cmp	r2, #0
 80169ac:	d1f3      	bne.n	8016996 <__atomic_load_8+0x36>
 80169ae:	e9d0 0100 	ldrd	r0, r1, [r0]
 80169b2:	f3bf 8f5b 	dmb	ish
 80169b6:	54e2      	strb	r2, [r4, r3]
 80169b8:	bc30      	pop	{r4, r5}
 80169ba:	4770      	bx	lr
 80169bc:	27d4eb2d 	.word	0x27d4eb2d
 80169c0:	b21642c9 	.word	0xb21642c9
 80169c4:	20009c54 	.word	0x20009c54

080169c8 <__atomic_store_8>:
 80169c8:	b4f0      	push	{r4, r5, r6, r7}
 80169ca:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 80169ce:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 80169d2:	4914      	ldr	r1, [pc, #80]	; (8016a24 <__atomic_store_8+0x5c>)
 80169d4:	4c14      	ldr	r4, [pc, #80]	; (8016a28 <__atomic_store_8+0x60>)
 80169d6:	4e15      	ldr	r6, [pc, #84]	; (8016a2c <__atomic_store_8+0x64>)
 80169d8:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80169dc:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 80169e0:	fb01 f105 	mul.w	r1, r1, r5
 80169e4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80169e8:	fba4 5401 	umull	r5, r4, r4, r1
 80169ec:	0924      	lsrs	r4, r4, #4
 80169ee:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80169f2:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 80169f6:	1b09      	subs	r1, r1, r4
 80169f8:	1875      	adds	r5, r6, r1
 80169fa:	f04f 0701 	mov.w	r7, #1
 80169fe:	e8d5 4f4f 	ldrexb	r4, [r5]
 8016a02:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8016a06:	f1bc 0f00 	cmp.w	ip, #0
 8016a0a:	d1f8      	bne.n	80169fe <__atomic_store_8+0x36>
 8016a0c:	f3bf 8f5b 	dmb	ish
 8016a10:	b2e4      	uxtb	r4, r4
 8016a12:	2c00      	cmp	r4, #0
 8016a14:	d1f3      	bne.n	80169fe <__atomic_store_8+0x36>
 8016a16:	e9c0 2300 	strd	r2, r3, [r0]
 8016a1a:	f3bf 8f5b 	dmb	ish
 8016a1e:	5474      	strb	r4, [r6, r1]
 8016a20:	bcf0      	pop	{r4, r5, r6, r7}
 8016a22:	4770      	bx	lr
 8016a24:	27d4eb2d 	.word	0x27d4eb2d
 8016a28:	b21642c9 	.word	0xb21642c9
 8016a2c:	20009c54 	.word	0x20009c54

08016a30 <__atomic_exchange_8>:
 8016a30:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8016a34:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016a38:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016a3c:	4c16      	ldr	r4, [pc, #88]	; (8016a98 <__atomic_exchange_8+0x68>)
 8016a3e:	4917      	ldr	r1, [pc, #92]	; (8016a9c <__atomic_exchange_8+0x6c>)
 8016a40:	4e17      	ldr	r6, [pc, #92]	; (8016aa0 <__atomic_exchange_8+0x70>)
 8016a42:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016a46:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016a4a:	fb04 f505 	mul.w	r5, r4, r5
 8016a4e:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8016a52:	fba1 4105 	umull	r4, r1, r1, r5
 8016a56:	0909      	lsrs	r1, r1, #4
 8016a58:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8016a5c:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8016a60:	1a6c      	subs	r4, r5, r1
 8016a62:	1931      	adds	r1, r6, r4
 8016a64:	f04f 0701 	mov.w	r7, #1
 8016a68:	e8d1 5f4f 	ldrexb	r5, [r1]
 8016a6c:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8016a70:	f1bc 0f00 	cmp.w	ip, #0
 8016a74:	d1f8      	bne.n	8016a68 <__atomic_exchange_8+0x38>
 8016a76:	f3bf 8f5b 	dmb	ish
 8016a7a:	b2ed      	uxtb	r5, r5
 8016a7c:	2d00      	cmp	r5, #0
 8016a7e:	d1f3      	bne.n	8016a68 <__atomic_exchange_8+0x38>
 8016a80:	e9d0 8900 	ldrd	r8, r9, [r0]
 8016a84:	e9c0 2300 	strd	r2, r3, [r0]
 8016a88:	f3bf 8f5b 	dmb	ish
 8016a8c:	5535      	strb	r5, [r6, r4]
 8016a8e:	4640      	mov	r0, r8
 8016a90:	4649      	mov	r1, r9
 8016a92:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8016a96:	4770      	bx	lr
 8016a98:	27d4eb2d 	.word	0x27d4eb2d
 8016a9c:	b21642c9 	.word	0xb21642c9
 8016aa0:	20009c54 	.word	0x20009c54

08016aa4 <rcutils_is_directory>:
 8016aa4:	2000      	movs	r0, #0
 8016aa6:	4770      	bx	lr

08016aa8 <rcutils_join_path>:
 8016aa8:	b082      	sub	sp, #8
 8016aaa:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016aae:	2000      	movs	r0, #0
 8016ab0:	b002      	add	sp, #8
 8016ab2:	4770      	bx	lr

08016ab4 <rcutils_to_native_path>:
 8016ab4:	b084      	sub	sp, #16
 8016ab6:	a801      	add	r0, sp, #4
 8016ab8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016abc:	b004      	add	sp, #16
 8016abe:	2000      	movs	r0, #0
 8016ac0:	4770      	bx	lr
 8016ac2:	bf00      	nop

08016ac4 <rcutils_format_string_limit>:
 8016ac4:	b40f      	push	{r0, r1, r2, r3}
 8016ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ac8:	b083      	sub	sp, #12
 8016aca:	ac08      	add	r4, sp, #32
 8016acc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016ace:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016ad2:	b34e      	cbz	r6, 8016b28 <rcutils_format_string_limit+0x64>
 8016ad4:	a808      	add	r0, sp, #32
 8016ad6:	f7f8 fdf9 	bl	800f6cc <rcutils_allocator_is_valid>
 8016ada:	b328      	cbz	r0, 8016b28 <rcutils_format_string_limit+0x64>
 8016adc:	2100      	movs	r1, #0
 8016ade:	ab0f      	add	r3, sp, #60	; 0x3c
 8016ae0:	4608      	mov	r0, r1
 8016ae2:	4632      	mov	r2, r6
 8016ae4:	e9cd 3300 	strd	r3, r3, [sp]
 8016ae8:	f000 f904 	bl	8016cf4 <rcutils_vsnprintf>
 8016aec:	1c43      	adds	r3, r0, #1
 8016aee:	4605      	mov	r5, r0
 8016af0:	d01a      	beq.n	8016b28 <rcutils_format_string_limit+0x64>
 8016af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016af4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016af6:	1c47      	adds	r7, r0, #1
 8016af8:	429f      	cmp	r7, r3
 8016afa:	bf84      	itt	hi
 8016afc:	461f      	movhi	r7, r3
 8016afe:	f103 35ff 	addhi.w	r5, r3, #4294967295
 8016b02:	4638      	mov	r0, r7
 8016b04:	9b08      	ldr	r3, [sp, #32]
 8016b06:	4798      	blx	r3
 8016b08:	4604      	mov	r4, r0
 8016b0a:	b168      	cbz	r0, 8016b28 <rcutils_format_string_limit+0x64>
 8016b0c:	9b01      	ldr	r3, [sp, #4]
 8016b0e:	4632      	mov	r2, r6
 8016b10:	4639      	mov	r1, r7
 8016b12:	f000 f8ef 	bl	8016cf4 <rcutils_vsnprintf>
 8016b16:	2800      	cmp	r0, #0
 8016b18:	db02      	blt.n	8016b20 <rcutils_format_string_limit+0x5c>
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	5563      	strb	r3, [r4, r5]
 8016b1e:	e004      	b.n	8016b2a <rcutils_format_string_limit+0x66>
 8016b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016b24:	4620      	mov	r0, r4
 8016b26:	4798      	blx	r3
 8016b28:	2400      	movs	r4, #0
 8016b2a:	4620      	mov	r0, r4
 8016b2c:	b003      	add	sp, #12
 8016b2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016b32:	b004      	add	sp, #16
 8016b34:	4770      	bx	lr
 8016b36:	bf00      	nop

08016b38 <rcutils_get_env>:
 8016b38:	b168      	cbz	r0, 8016b56 <rcutils_get_env+0x1e>
 8016b3a:	b510      	push	{r4, lr}
 8016b3c:	460c      	mov	r4, r1
 8016b3e:	b129      	cbz	r1, 8016b4c <rcutils_get_env+0x14>
 8016b40:	f002 ff8c 	bl	8019a5c <getenv>
 8016b44:	b120      	cbz	r0, 8016b50 <rcutils_get_env+0x18>
 8016b46:	6020      	str	r0, [r4, #0]
 8016b48:	2000      	movs	r0, #0
 8016b4a:	bd10      	pop	{r4, pc}
 8016b4c:	4803      	ldr	r0, [pc, #12]	; (8016b5c <rcutils_get_env+0x24>)
 8016b4e:	bd10      	pop	{r4, pc}
 8016b50:	4b03      	ldr	r3, [pc, #12]	; (8016b60 <rcutils_get_env+0x28>)
 8016b52:	6023      	str	r3, [r4, #0]
 8016b54:	bd10      	pop	{r4, pc}
 8016b56:	4803      	ldr	r0, [pc, #12]	; (8016b64 <rcutils_get_env+0x2c>)
 8016b58:	4770      	bx	lr
 8016b5a:	bf00      	nop
 8016b5c:	0801bb60 	.word	0x0801bb60
 8016b60:	0801bc84 	.word	0x0801bc84
 8016b64:	0801bb44 	.word	0x0801bb44

08016b68 <rcutils_repl_str>:
 8016b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b6c:	ed2d 8b02 	vpush	{d8}
 8016b70:	b087      	sub	sp, #28
 8016b72:	4680      	mov	r8, r0
 8016b74:	4608      	mov	r0, r1
 8016b76:	f8cd 8000 	str.w	r8, [sp]
 8016b7a:	ee08 2a10 	vmov	s16, r2
 8016b7e:	468a      	mov	sl, r1
 8016b80:	4699      	mov	r9, r3
 8016b82:	f7e9 fb37 	bl	80001f4 <strlen>
 8016b86:	2600      	movs	r6, #0
 8016b88:	4647      	mov	r7, r8
 8016b8a:	9001      	str	r0, [sp, #4]
 8016b8c:	46b3      	mov	fp, r6
 8016b8e:	2510      	movs	r5, #16
 8016b90:	46b0      	mov	r8, r6
 8016b92:	e01d      	b.n	8016bd0 <rcutils_repl_str+0x68>
 8016b94:	f10b 0b01 	add.w	fp, fp, #1
 8016b98:	455e      	cmp	r6, fp
 8016b9a:	d211      	bcs.n	8016bc0 <rcutils_repl_str+0x58>
 8016b9c:	442e      	add	r6, r5
 8016b9e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016ba2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016ba6:	00b1      	lsls	r1, r6, #2
 8016ba8:	4798      	blx	r3
 8016baa:	2800      	cmp	r0, #0
 8016bac:	f000 8084 	beq.w	8016cb8 <rcutils_repl_str+0x150>
 8016bb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016bb4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8016bb8:	bf28      	it	cs
 8016bba:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8016bbe:	4680      	mov	r8, r0
 8016bc0:	9a00      	ldr	r2, [sp, #0]
 8016bc2:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016bc6:	1aa2      	subs	r2, r4, r2
 8016bc8:	f843 2c04 	str.w	r2, [r3, #-4]
 8016bcc:	9b01      	ldr	r3, [sp, #4]
 8016bce:	18e7      	adds	r7, r4, r3
 8016bd0:	4651      	mov	r1, sl
 8016bd2:	4638      	mov	r0, r7
 8016bd4:	f003 fc6f 	bl	801a4b6 <strstr>
 8016bd8:	4604      	mov	r4, r0
 8016bda:	4640      	mov	r0, r8
 8016bdc:	2c00      	cmp	r4, #0
 8016bde:	d1d9      	bne.n	8016b94 <rcutils_repl_str+0x2c>
 8016be0:	46b8      	mov	r8, r7
 8016be2:	4607      	mov	r7, r0
 8016be4:	4640      	mov	r0, r8
 8016be6:	f7e9 fb05 	bl	80001f4 <strlen>
 8016bea:	9b00      	ldr	r3, [sp, #0]
 8016bec:	eba8 0303 	sub.w	r3, r8, r3
 8016bf0:	181d      	adds	r5, r3, r0
 8016bf2:	9504      	str	r5, [sp, #16]
 8016bf4:	f1bb 0f00 	cmp.w	fp, #0
 8016bf8:	d03d      	beq.n	8016c76 <rcutils_repl_str+0x10e>
 8016bfa:	ee18 0a10 	vmov	r0, s16
 8016bfe:	f7e9 faf9 	bl	80001f4 <strlen>
 8016c02:	9b01      	ldr	r3, [sp, #4]
 8016c04:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016c08:	1ac3      	subs	r3, r0, r3
 8016c0a:	fb0b 5303 	mla	r3, fp, r3, r5
 8016c0e:	9305      	str	r3, [sp, #20]
 8016c10:	4606      	mov	r6, r0
 8016c12:	1c58      	adds	r0, r3, #1
 8016c14:	f8d9 3000 	ldr.w	r3, [r9]
 8016c18:	4798      	blx	r3
 8016c1a:	9003      	str	r0, [sp, #12]
 8016c1c:	2800      	cmp	r0, #0
 8016c1e:	d04c      	beq.n	8016cba <rcutils_repl_str+0x152>
 8016c20:	683a      	ldr	r2, [r7, #0]
 8016c22:	9900      	ldr	r1, [sp, #0]
 8016c24:	f003 fd3f 	bl	801a6a6 <memcpy>
 8016c28:	9b03      	ldr	r3, [sp, #12]
 8016c2a:	683d      	ldr	r5, [r7, #0]
 8016c2c:	ee18 8a10 	vmov	r8, s16
 8016c30:	441d      	add	r5, r3
 8016c32:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016c36:	9302      	str	r3, [sp, #8]
 8016c38:	46ba      	mov	sl, r7
 8016c3a:	4632      	mov	r2, r6
 8016c3c:	4641      	mov	r1, r8
 8016c3e:	4628      	mov	r0, r5
 8016c40:	f003 fd31 	bl	801a6a6 <memcpy>
 8016c44:	9b01      	ldr	r3, [sp, #4]
 8016c46:	f85a 2b04 	ldr.w	r2, [sl], #4
 8016c4a:	441a      	add	r2, r3
 8016c4c:	9b00      	ldr	r3, [sp, #0]
 8016c4e:	1899      	adds	r1, r3, r2
 8016c50:	9b02      	ldr	r3, [sp, #8]
 8016c52:	4435      	add	r5, r6
 8016c54:	429c      	cmp	r4, r3
 8016c56:	4628      	mov	r0, r5
 8016c58:	d025      	beq.n	8016ca6 <rcutils_repl_str+0x13e>
 8016c5a:	f8da 3000 	ldr.w	r3, [sl]
 8016c5e:	3401      	adds	r4, #1
 8016c60:	1a9a      	subs	r2, r3, r2
 8016c62:	4415      	add	r5, r2
 8016c64:	f003 fd1f 	bl	801a6a6 <memcpy>
 8016c68:	455c      	cmp	r4, fp
 8016c6a:	d3e6      	bcc.n	8016c3a <rcutils_repl_str+0xd2>
 8016c6c:	9a03      	ldr	r2, [sp, #12]
 8016c6e:	9905      	ldr	r1, [sp, #20]
 8016c70:	2300      	movs	r3, #0
 8016c72:	5453      	strb	r3, [r2, r1]
 8016c74:	e00b      	b.n	8016c8e <rcutils_repl_str+0x126>
 8016c76:	4628      	mov	r0, r5
 8016c78:	f8d9 3000 	ldr.w	r3, [r9]
 8016c7c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016c80:	3001      	adds	r0, #1
 8016c82:	4798      	blx	r3
 8016c84:	9003      	str	r0, [sp, #12]
 8016c86:	b110      	cbz	r0, 8016c8e <rcutils_repl_str+0x126>
 8016c88:	9900      	ldr	r1, [sp, #0]
 8016c8a:	f003 fd04 	bl	801a696 <strcpy>
 8016c8e:	4638      	mov	r0, r7
 8016c90:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016c94:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016c98:	4798      	blx	r3
 8016c9a:	9803      	ldr	r0, [sp, #12]
 8016c9c:	b007      	add	sp, #28
 8016c9e:	ecbd 8b02 	vpop	{d8}
 8016ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ca6:	9b04      	ldr	r3, [sp, #16]
 8016ca8:	3401      	adds	r4, #1
 8016caa:	1a9a      	subs	r2, r3, r2
 8016cac:	4415      	add	r5, r2
 8016cae:	f003 fcfa 	bl	801a6a6 <memcpy>
 8016cb2:	455c      	cmp	r4, fp
 8016cb4:	d3c1      	bcc.n	8016c3a <rcutils_repl_str+0xd2>
 8016cb6:	e7d9      	b.n	8016c6c <rcutils_repl_str+0x104>
 8016cb8:	4647      	mov	r7, r8
 8016cba:	2300      	movs	r3, #0
 8016cbc:	9303      	str	r3, [sp, #12]
 8016cbe:	e7e6      	b.n	8016c8e <rcutils_repl_str+0x126>

08016cc0 <rcutils_snprintf>:
 8016cc0:	b40c      	push	{r2, r3}
 8016cc2:	b530      	push	{r4, r5, lr}
 8016cc4:	b083      	sub	sp, #12
 8016cc6:	ab06      	add	r3, sp, #24
 8016cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ccc:	9301      	str	r3, [sp, #4]
 8016cce:	b152      	cbz	r2, 8016ce6 <rcutils_snprintf+0x26>
 8016cd0:	b138      	cbz	r0, 8016ce2 <rcutils_snprintf+0x22>
 8016cd2:	b141      	cbz	r1, 8016ce6 <rcutils_snprintf+0x26>
 8016cd4:	f003 fb0a 	bl	801a2ec <vsniprintf>
 8016cd8:	b003      	add	sp, #12
 8016cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016cde:	b002      	add	sp, #8
 8016ce0:	4770      	bx	lr
 8016ce2:	2900      	cmp	r1, #0
 8016ce4:	d0f6      	beq.n	8016cd4 <rcutils_snprintf+0x14>
 8016ce6:	f003 fca9 	bl	801a63c <__errno>
 8016cea:	2316      	movs	r3, #22
 8016cec:	6003      	str	r3, [r0, #0]
 8016cee:	f04f 30ff 	mov.w	r0, #4294967295
 8016cf2:	e7f1      	b.n	8016cd8 <rcutils_snprintf+0x18>

08016cf4 <rcutils_vsnprintf>:
 8016cf4:	b570      	push	{r4, r5, r6, lr}
 8016cf6:	b13a      	cbz	r2, 8016d08 <rcutils_vsnprintf+0x14>
 8016cf8:	b120      	cbz	r0, 8016d04 <rcutils_vsnprintf+0x10>
 8016cfa:	b129      	cbz	r1, 8016d08 <rcutils_vsnprintf+0x14>
 8016cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d00:	f003 baf4 	b.w	801a2ec <vsniprintf>
 8016d04:	2900      	cmp	r1, #0
 8016d06:	d0f9      	beq.n	8016cfc <rcutils_vsnprintf+0x8>
 8016d08:	f003 fc98 	bl	801a63c <__errno>
 8016d0c:	2316      	movs	r3, #22
 8016d0e:	6003      	str	r3, [r0, #0]
 8016d10:	f04f 30ff 	mov.w	r0, #4294967295
 8016d14:	bd70      	pop	{r4, r5, r6, pc}
 8016d16:	bf00      	nop

08016d18 <rcutils_strdup>:
 8016d18:	b084      	sub	sp, #16
 8016d1a:	b570      	push	{r4, r5, r6, lr}
 8016d1c:	b082      	sub	sp, #8
 8016d1e:	ac07      	add	r4, sp, #28
 8016d20:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016d24:	4605      	mov	r5, r0
 8016d26:	b1b0      	cbz	r0, 8016d56 <rcutils_strdup+0x3e>
 8016d28:	f7e9 fa64 	bl	80001f4 <strlen>
 8016d2c:	1c42      	adds	r2, r0, #1
 8016d2e:	9b07      	ldr	r3, [sp, #28]
 8016d30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d32:	9201      	str	r2, [sp, #4]
 8016d34:	4606      	mov	r6, r0
 8016d36:	4610      	mov	r0, r2
 8016d38:	4798      	blx	r3
 8016d3a:	4604      	mov	r4, r0
 8016d3c:	b128      	cbz	r0, 8016d4a <rcutils_strdup+0x32>
 8016d3e:	9a01      	ldr	r2, [sp, #4]
 8016d40:	4629      	mov	r1, r5
 8016d42:	f003 fcb0 	bl	801a6a6 <memcpy>
 8016d46:	2300      	movs	r3, #0
 8016d48:	55a3      	strb	r3, [r4, r6]
 8016d4a:	4620      	mov	r0, r4
 8016d4c:	b002      	add	sp, #8
 8016d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d52:	b004      	add	sp, #16
 8016d54:	4770      	bx	lr
 8016d56:	4604      	mov	r4, r0
 8016d58:	e7f7      	b.n	8016d4a <rcutils_strdup+0x32>
 8016d5a:	bf00      	nop

08016d5c <rcutils_strndup>:
 8016d5c:	b082      	sub	sp, #8
 8016d5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d60:	460e      	mov	r6, r1
 8016d62:	a906      	add	r1, sp, #24
 8016d64:	e881 000c 	stmia.w	r1, {r2, r3}
 8016d68:	4605      	mov	r5, r0
 8016d6a:	b180      	cbz	r0, 8016d8e <rcutils_strndup+0x32>
 8016d6c:	1c77      	adds	r7, r6, #1
 8016d6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016d70:	4638      	mov	r0, r7
 8016d72:	4790      	blx	r2
 8016d74:	4604      	mov	r4, r0
 8016d76:	b128      	cbz	r0, 8016d84 <rcutils_strndup+0x28>
 8016d78:	463a      	mov	r2, r7
 8016d7a:	4629      	mov	r1, r5
 8016d7c:	f003 fc93 	bl	801a6a6 <memcpy>
 8016d80:	2300      	movs	r3, #0
 8016d82:	55a3      	strb	r3, [r4, r6]
 8016d84:	4620      	mov	r0, r4
 8016d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016d8a:	b002      	add	sp, #8
 8016d8c:	4770      	bx	lr
 8016d8e:	4604      	mov	r4, r0
 8016d90:	e7f8      	b.n	8016d84 <rcutils_strndup+0x28>
 8016d92:	bf00      	nop

08016d94 <rmw_get_zero_initialized_context>:
 8016d94:	b510      	push	{r4, lr}
 8016d96:	2250      	movs	r2, #80	; 0x50
 8016d98:	4604      	mov	r4, r0
 8016d9a:	2100      	movs	r1, #0
 8016d9c:	f003 fb64 	bl	801a468 <memset>
 8016da0:	4620      	mov	r0, r4
 8016da2:	bd10      	pop	{r4, pc}

08016da4 <rmw_get_zero_initialized_init_options>:
 8016da4:	b510      	push	{r4, lr}
 8016da6:	2238      	movs	r2, #56	; 0x38
 8016da8:	4604      	mov	r4, r0
 8016daa:	2100      	movs	r1, #0
 8016dac:	f003 fb5c 	bl	801a468 <memset>
 8016db0:	f104 0010 	add.w	r0, r4, #16
 8016db4:	f000 f806 	bl	8016dc4 <rmw_get_default_security_options>
 8016db8:	f04f 33ff 	mov.w	r3, #4294967295
 8016dbc:	60e3      	str	r3, [r4, #12]
 8016dbe:	4620      	mov	r0, r4
 8016dc0:	bd10      	pop	{r4, pc}
 8016dc2:	bf00      	nop

08016dc4 <rmw_get_default_security_options>:
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	7002      	strb	r2, [r0, #0]
 8016dc8:	6042      	str	r2, [r0, #4]
 8016dca:	4770      	bx	lr

08016dcc <rmw_validate_namespace_with_size>:
 8016dcc:	b340      	cbz	r0, 8016e20 <rmw_validate_namespace_with_size+0x54>
 8016dce:	b5d0      	push	{r4, r6, r7, lr}
 8016dd0:	4614      	mov	r4, r2
 8016dd2:	b0c2      	sub	sp, #264	; 0x108
 8016dd4:	b332      	cbz	r2, 8016e24 <rmw_validate_namespace_with_size+0x58>
 8016dd6:	2901      	cmp	r1, #1
 8016dd8:	460f      	mov	r7, r1
 8016dda:	461e      	mov	r6, r3
 8016ddc:	d102      	bne.n	8016de4 <rmw_validate_namespace_with_size+0x18>
 8016dde:	7803      	ldrb	r3, [r0, #0]
 8016de0:	2b2f      	cmp	r3, #47	; 0x2f
 8016de2:	d019      	beq.n	8016e18 <rmw_validate_namespace_with_size+0x4c>
 8016de4:	aa01      	add	r2, sp, #4
 8016de6:	4669      	mov	r1, sp
 8016de8:	f7f8 fe44 	bl	800fa74 <rmw_validate_full_topic_name>
 8016dec:	b990      	cbnz	r0, 8016e14 <rmw_validate_namespace_with_size+0x48>
 8016dee:	9b00      	ldr	r3, [sp, #0]
 8016df0:	b14b      	cbz	r3, 8016e06 <rmw_validate_namespace_with_size+0x3a>
 8016df2:	2b07      	cmp	r3, #7
 8016df4:	d007      	beq.n	8016e06 <rmw_validate_namespace_with_size+0x3a>
 8016df6:	1e5a      	subs	r2, r3, #1
 8016df8:	2a05      	cmp	r2, #5
 8016dfa:	d82b      	bhi.n	8016e54 <rmw_validate_namespace_with_size+0x88>
 8016dfc:	e8df f002 	tbb	[pc, r2]
 8016e00:	24211e1b 	.word	0x24211e1b
 8016e04:	1427      	.short	0x1427
 8016e06:	2ff5      	cmp	r7, #245	; 0xf5
 8016e08:	d906      	bls.n	8016e18 <rmw_validate_namespace_with_size+0x4c>
 8016e0a:	2307      	movs	r3, #7
 8016e0c:	6023      	str	r3, [r4, #0]
 8016e0e:	b10e      	cbz	r6, 8016e14 <rmw_validate_namespace_with_size+0x48>
 8016e10:	23f4      	movs	r3, #244	; 0xf4
 8016e12:	6033      	str	r3, [r6, #0]
 8016e14:	b042      	add	sp, #264	; 0x108
 8016e16:	bdd0      	pop	{r4, r6, r7, pc}
 8016e18:	2000      	movs	r0, #0
 8016e1a:	6020      	str	r0, [r4, #0]
 8016e1c:	b042      	add	sp, #264	; 0x108
 8016e1e:	bdd0      	pop	{r4, r6, r7, pc}
 8016e20:	200b      	movs	r0, #11
 8016e22:	4770      	bx	lr
 8016e24:	200b      	movs	r0, #11
 8016e26:	e7f5      	b.n	8016e14 <rmw_validate_namespace_with_size+0x48>
 8016e28:	2306      	movs	r3, #6
 8016e2a:	6023      	str	r3, [r4, #0]
 8016e2c:	2e00      	cmp	r6, #0
 8016e2e:	d0f1      	beq.n	8016e14 <rmw_validate_namespace_with_size+0x48>
 8016e30:	9b01      	ldr	r3, [sp, #4]
 8016e32:	6033      	str	r3, [r6, #0]
 8016e34:	e7ee      	b.n	8016e14 <rmw_validate_namespace_with_size+0x48>
 8016e36:	2301      	movs	r3, #1
 8016e38:	6023      	str	r3, [r4, #0]
 8016e3a:	e7f7      	b.n	8016e2c <rmw_validate_namespace_with_size+0x60>
 8016e3c:	2302      	movs	r3, #2
 8016e3e:	6023      	str	r3, [r4, #0]
 8016e40:	e7f4      	b.n	8016e2c <rmw_validate_namespace_with_size+0x60>
 8016e42:	2303      	movs	r3, #3
 8016e44:	6023      	str	r3, [r4, #0]
 8016e46:	e7f1      	b.n	8016e2c <rmw_validate_namespace_with_size+0x60>
 8016e48:	2304      	movs	r3, #4
 8016e4a:	6023      	str	r3, [r4, #0]
 8016e4c:	e7ee      	b.n	8016e2c <rmw_validate_namespace_with_size+0x60>
 8016e4e:	2305      	movs	r3, #5
 8016e50:	6023      	str	r3, [r4, #0]
 8016e52:	e7eb      	b.n	8016e2c <rmw_validate_namespace_with_size+0x60>
 8016e54:	4a03      	ldr	r2, [pc, #12]	; (8016e64 <rmw_validate_namespace_with_size+0x98>)
 8016e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016e5a:	a802      	add	r0, sp, #8
 8016e5c:	f7ff ff30 	bl	8016cc0 <rcutils_snprintf>
 8016e60:	2001      	movs	r0, #1
 8016e62:	e7d7      	b.n	8016e14 <rmw_validate_namespace_with_size+0x48>
 8016e64:	0801bb7c 	.word	0x0801bb7c

08016e68 <rmw_validate_namespace>:
 8016e68:	b168      	cbz	r0, 8016e86 <rmw_validate_namespace+0x1e>
 8016e6a:	b570      	push	{r4, r5, r6, lr}
 8016e6c:	460d      	mov	r5, r1
 8016e6e:	4616      	mov	r6, r2
 8016e70:	4604      	mov	r4, r0
 8016e72:	f7e9 f9bf 	bl	80001f4 <strlen>
 8016e76:	4633      	mov	r3, r6
 8016e78:	4601      	mov	r1, r0
 8016e7a:	462a      	mov	r2, r5
 8016e7c:	4620      	mov	r0, r4
 8016e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e82:	f7ff bfa3 	b.w	8016dcc <rmw_validate_namespace_with_size>
 8016e86:	200b      	movs	r0, #11
 8016e88:	4770      	bx	lr
 8016e8a:	bf00      	nop

08016e8c <rmw_namespace_validation_result_string>:
 8016e8c:	2807      	cmp	r0, #7
 8016e8e:	bf9a      	itte	ls
 8016e90:	4b02      	ldrls	r3, [pc, #8]	; (8016e9c <rmw_namespace_validation_result_string+0x10>)
 8016e92:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016e96:	4802      	ldrhi	r0, [pc, #8]	; (8016ea0 <rmw_namespace_validation_result_string+0x14>)
 8016e98:	4770      	bx	lr
 8016e9a:	bf00      	nop
 8016e9c:	0801bd74 	.word	0x0801bd74
 8016ea0:	0801bbcc 	.word	0x0801bbcc

08016ea4 <rmw_validate_node_name>:
 8016ea4:	2800      	cmp	r0, #0
 8016ea6:	d03b      	beq.n	8016f20 <rmw_validate_node_name+0x7c>
 8016ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eac:	460f      	mov	r7, r1
 8016eae:	2900      	cmp	r1, #0
 8016eb0:	d038      	beq.n	8016f24 <rmw_validate_node_name+0x80>
 8016eb2:	4615      	mov	r5, r2
 8016eb4:	4604      	mov	r4, r0
 8016eb6:	f7e9 f99d 	bl	80001f4 <strlen>
 8016eba:	b1e0      	cbz	r0, 8016ef6 <rmw_validate_node_name+0x52>
 8016ebc:	1e63      	subs	r3, r4, #1
 8016ebe:	eb03 0e00 	add.w	lr, r3, r0
 8016ec2:	f1c4 0c01 	rsb	ip, r4, #1
 8016ec6:	eb0c 0803 	add.w	r8, ip, r3
 8016eca:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8016ece:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8016ed2:	f026 0220 	bic.w	r2, r6, #32
 8016ed6:	2909      	cmp	r1, #9
 8016ed8:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8016edc:	d913      	bls.n	8016f06 <rmw_validate_node_name+0x62>
 8016ede:	2a19      	cmp	r2, #25
 8016ee0:	d911      	bls.n	8016f06 <rmw_validate_node_name+0x62>
 8016ee2:	2e5f      	cmp	r6, #95	; 0x5f
 8016ee4:	d00f      	beq.n	8016f06 <rmw_validate_node_name+0x62>
 8016ee6:	2302      	movs	r3, #2
 8016ee8:	603b      	str	r3, [r7, #0]
 8016eea:	b10d      	cbz	r5, 8016ef0 <rmw_validate_node_name+0x4c>
 8016eec:	f8c5 8000 	str.w	r8, [r5]
 8016ef0:	2000      	movs	r0, #0
 8016ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	603b      	str	r3, [r7, #0]
 8016efa:	2d00      	cmp	r5, #0
 8016efc:	d0f8      	beq.n	8016ef0 <rmw_validate_node_name+0x4c>
 8016efe:	2000      	movs	r0, #0
 8016f00:	6028      	str	r0, [r5, #0]
 8016f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f06:	4573      	cmp	r3, lr
 8016f08:	d1dd      	bne.n	8016ec6 <rmw_validate_node_name+0x22>
 8016f0a:	7822      	ldrb	r2, [r4, #0]
 8016f0c:	4b0d      	ldr	r3, [pc, #52]	; (8016f44 <rmw_validate_node_name+0xa0>)
 8016f0e:	5cd3      	ldrb	r3, [r2, r3]
 8016f10:	f013 0304 	ands.w	r3, r3, #4
 8016f14:	d110      	bne.n	8016f38 <rmw_validate_node_name+0x94>
 8016f16:	28ff      	cmp	r0, #255	; 0xff
 8016f18:	d806      	bhi.n	8016f28 <rmw_validate_node_name+0x84>
 8016f1a:	603b      	str	r3, [r7, #0]
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	e7e8      	b.n	8016ef2 <rmw_validate_node_name+0x4e>
 8016f20:	200b      	movs	r0, #11
 8016f22:	4770      	bx	lr
 8016f24:	200b      	movs	r0, #11
 8016f26:	e7e4      	b.n	8016ef2 <rmw_validate_node_name+0x4e>
 8016f28:	2204      	movs	r2, #4
 8016f2a:	603a      	str	r2, [r7, #0]
 8016f2c:	2d00      	cmp	r5, #0
 8016f2e:	d0df      	beq.n	8016ef0 <rmw_validate_node_name+0x4c>
 8016f30:	22fe      	movs	r2, #254	; 0xfe
 8016f32:	4618      	mov	r0, r3
 8016f34:	602a      	str	r2, [r5, #0]
 8016f36:	e7dc      	b.n	8016ef2 <rmw_validate_node_name+0x4e>
 8016f38:	2303      	movs	r3, #3
 8016f3a:	603b      	str	r3, [r7, #0]
 8016f3c:	2d00      	cmp	r5, #0
 8016f3e:	d1de      	bne.n	8016efe <rmw_validate_node_name+0x5a>
 8016f40:	e7d6      	b.n	8016ef0 <rmw_validate_node_name+0x4c>
 8016f42:	bf00      	nop
 8016f44:	0801c138 	.word	0x0801c138

08016f48 <rmw_node_name_validation_result_string>:
 8016f48:	2804      	cmp	r0, #4
 8016f4a:	bf9a      	itte	ls
 8016f4c:	4b02      	ldrls	r3, [pc, #8]	; (8016f58 <rmw_node_name_validation_result_string+0x10>)
 8016f4e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016f52:	4802      	ldrhi	r0, [pc, #8]	; (8016f5c <rmw_node_name_validation_result_string+0x14>)
 8016f54:	4770      	bx	lr
 8016f56:	bf00      	nop
 8016f58:	0801be80 	.word	0x0801be80
 8016f5c:	0801bd94 	.word	0x0801bd94

08016f60 <get_memory>:
 8016f60:	4603      	mov	r3, r0
 8016f62:	6840      	ldr	r0, [r0, #4]
 8016f64:	b158      	cbz	r0, 8016f7e <get_memory+0x1e>
 8016f66:	6882      	ldr	r2, [r0, #8]
 8016f68:	605a      	str	r2, [r3, #4]
 8016f6a:	b10a      	cbz	r2, 8016f70 <get_memory+0x10>
 8016f6c:	2100      	movs	r1, #0
 8016f6e:	6051      	str	r1, [r2, #4]
 8016f70:	681a      	ldr	r2, [r3, #0]
 8016f72:	6082      	str	r2, [r0, #8]
 8016f74:	b102      	cbz	r2, 8016f78 <get_memory+0x18>
 8016f76:	6050      	str	r0, [r2, #4]
 8016f78:	2200      	movs	r2, #0
 8016f7a:	6042      	str	r2, [r0, #4]
 8016f7c:	6018      	str	r0, [r3, #0]
 8016f7e:	4770      	bx	lr

08016f80 <put_memory>:
 8016f80:	684b      	ldr	r3, [r1, #4]
 8016f82:	b10b      	cbz	r3, 8016f88 <put_memory+0x8>
 8016f84:	688a      	ldr	r2, [r1, #8]
 8016f86:	609a      	str	r2, [r3, #8]
 8016f88:	688a      	ldr	r2, [r1, #8]
 8016f8a:	b102      	cbz	r2, 8016f8e <put_memory+0xe>
 8016f8c:	6053      	str	r3, [r2, #4]
 8016f8e:	6803      	ldr	r3, [r0, #0]
 8016f90:	428b      	cmp	r3, r1
 8016f92:	6843      	ldr	r3, [r0, #4]
 8016f94:	bf08      	it	eq
 8016f96:	6002      	streq	r2, [r0, #0]
 8016f98:	608b      	str	r3, [r1, #8]
 8016f9a:	b103      	cbz	r3, 8016f9e <put_memory+0x1e>
 8016f9c:	6059      	str	r1, [r3, #4]
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	604b      	str	r3, [r1, #4]
 8016fa2:	6041      	str	r1, [r0, #4]
 8016fa4:	4770      	bx	lr
 8016fa6:	bf00      	nop

08016fa8 <rmw_destroy_client>:
 8016fa8:	b570      	push	{r4, r5, r6, lr}
 8016faa:	b128      	cbz	r0, 8016fb8 <rmw_destroy_client+0x10>
 8016fac:	4604      	mov	r4, r0
 8016fae:	6800      	ldr	r0, [r0, #0]
 8016fb0:	460d      	mov	r5, r1
 8016fb2:	f7f9 fc3d 	bl	8010830 <is_uxrce_rmw_identifier_valid>
 8016fb6:	b910      	cbnz	r0, 8016fbe <rmw_destroy_client+0x16>
 8016fb8:	2401      	movs	r4, #1
 8016fba:	4620      	mov	r0, r4
 8016fbc:	bd70      	pop	{r4, r5, r6, pc}
 8016fbe:	6863      	ldr	r3, [r4, #4]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d0f9      	beq.n	8016fb8 <rmw_destroy_client+0x10>
 8016fc4:	2d00      	cmp	r5, #0
 8016fc6:	d0f7      	beq.n	8016fb8 <rmw_destroy_client+0x10>
 8016fc8:	6828      	ldr	r0, [r5, #0]
 8016fca:	f7f9 fc31 	bl	8010830 <is_uxrce_rmw_identifier_valid>
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	d0f2      	beq.n	8016fb8 <rmw_destroy_client+0x10>
 8016fd2:	686e      	ldr	r6, [r5, #4]
 8016fd4:	2e00      	cmp	r6, #0
 8016fd6:	d0ef      	beq.n	8016fb8 <rmw_destroy_client+0x10>
 8016fd8:	6864      	ldr	r4, [r4, #4]
 8016fda:	6932      	ldr	r2, [r6, #16]
 8016fdc:	6920      	ldr	r0, [r4, #16]
 8016fde:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016fe2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016fe6:	6819      	ldr	r1, [r3, #0]
 8016fe8:	f7fa ff20 	bl	8011e2c <uxr_buffer_cancel_data>
 8016fec:	4602      	mov	r2, r0
 8016fee:	6920      	ldr	r0, [r4, #16]
 8016ff0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016ff4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016ff8:	f7f9 fb9a 	bl	8010730 <run_xrce_session>
 8016ffc:	6920      	ldr	r0, [r4, #16]
 8016ffe:	6932      	ldr	r2, [r6, #16]
 8017000:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017004:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017008:	6819      	ldr	r1, [r3, #0]
 801700a:	f7fa fca5 	bl	8011958 <uxr_buffer_delete_entity>
 801700e:	4602      	mov	r2, r0
 8017010:	6920      	ldr	r0, [r4, #16]
 8017012:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017016:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801701a:	f7f9 fb89 	bl	8010730 <run_xrce_session>
 801701e:	2800      	cmp	r0, #0
 8017020:	4628      	mov	r0, r5
 8017022:	bf14      	ite	ne
 8017024:	2400      	movne	r4, #0
 8017026:	2402      	moveq	r4, #2
 8017028:	f7f9 fa72 	bl	8010510 <rmw_uxrce_fini_client_memory>
 801702c:	e7c5      	b.n	8016fba <rmw_destroy_client+0x12>
 801702e:	bf00      	nop

08017030 <rmw_get_implementation_identifier>:
 8017030:	4b01      	ldr	r3, [pc, #4]	; (8017038 <rmw_get_implementation_identifier+0x8>)
 8017032:	6818      	ldr	r0, [r3, #0]
 8017034:	4770      	bx	lr
 8017036:	bf00      	nop
 8017038:	0801beac 	.word	0x0801beac

0801703c <rmw_init_options_init>:
 801703c:	b084      	sub	sp, #16
 801703e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017042:	ad09      	add	r5, sp, #36	; 0x24
 8017044:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8017048:	b130      	cbz	r0, 8017058 <rmw_init_options_init+0x1c>
 801704a:	4604      	mov	r4, r0
 801704c:	4628      	mov	r0, r5
 801704e:	f7f8 fb3d 	bl	800f6cc <rcutils_allocator_is_valid>
 8017052:	b108      	cbz	r0, 8017058 <rmw_init_options_init+0x1c>
 8017054:	68a3      	ldr	r3, [r4, #8]
 8017056:	b123      	cbz	r3, 8017062 <rmw_init_options_init+0x26>
 8017058:	200b      	movs	r0, #11
 801705a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801705e:	b004      	add	sp, #16
 8017060:	4770      	bx	lr
 8017062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017064:	4f1c      	ldr	r7, [pc, #112]	; (80170d8 <rmw_init_options_init+0x9c>)
 8017066:	682e      	ldr	r6, [r5, #0]
 8017068:	683d      	ldr	r5, [r7, #0]
 801706a:	60a5      	str	r5, [r4, #8]
 801706c:	f04f 0800 	mov.w	r8, #0
 8017070:	f04f 0900 	mov.w	r9, #0
 8017074:	f104 0520 	add.w	r5, r4, #32
 8017078:	e9c4 8900 	strd	r8, r9, [r4]
 801707c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801707e:	4b17      	ldr	r3, [pc, #92]	; (80170dc <rmw_init_options_init+0xa0>)
 8017080:	4817      	ldr	r0, [pc, #92]	; (80170e0 <rmw_init_options_init+0xa4>)
 8017082:	602e      	str	r6, [r5, #0]
 8017084:	4917      	ldr	r1, [pc, #92]	; (80170e4 <rmw_init_options_init+0xa8>)
 8017086:	61e3      	str	r3, [r4, #28]
 8017088:	2203      	movs	r2, #3
 801708a:	f7f9 f991 	bl	80103b0 <rmw_uxrce_init_init_options_impl_memory>
 801708e:	4814      	ldr	r0, [pc, #80]	; (80170e0 <rmw_init_options_init+0xa4>)
 8017090:	f7ff ff66 	bl	8016f60 <get_memory>
 8017094:	b1e8      	cbz	r0, 80170d2 <rmw_init_options_init+0x96>
 8017096:	4a14      	ldr	r2, [pc, #80]	; (80170e8 <rmw_init_options_init+0xac>)
 8017098:	68c3      	ldr	r3, [r0, #12]
 801709a:	6851      	ldr	r1, [r2, #4]
 801709c:	7810      	ldrb	r0, [r2, #0]
 801709e:	6363      	str	r3, [r4, #52]	; 0x34
 80170a0:	7418      	strb	r0, [r3, #16]
 80170a2:	6159      	str	r1, [r3, #20]
 80170a4:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 80170a8:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 80170ac:	e9c3 5006 	strd	r5, r0, [r3, #24]
 80170b0:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80170b4:	f7fc f9e8 	bl	8013488 <uxr_nanos>
 80170b8:	f002 fdd4 	bl	8019c64 <srand>
 80170bc:	f002 fe00 	bl	8019cc0 <rand>
 80170c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80170c2:	6298      	str	r0, [r3, #40]	; 0x28
 80170c4:	2800      	cmp	r0, #0
 80170c6:	d0f9      	beq.n	80170bc <rmw_init_options_init+0x80>
 80170c8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170cc:	2000      	movs	r0, #0
 80170ce:	b004      	add	sp, #16
 80170d0:	4770      	bx	lr
 80170d2:	2001      	movs	r0, #1
 80170d4:	e7c1      	b.n	801705a <rmw_init_options_init+0x1e>
 80170d6:	bf00      	nop
 80170d8:	0801beac 	.word	0x0801beac
 80170dc:	0801ba20 	.word	0x0801ba20
 80170e0:	2000d1e4 	.word	0x2000d1e4
 80170e4:	2000ce38 	.word	0x2000ce38
 80170e8:	20009ec8 	.word	0x20009ec8

080170ec <rmw_init_options_copy>:
 80170ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ee:	b158      	cbz	r0, 8017108 <rmw_init_options_copy+0x1c>
 80170f0:	460e      	mov	r6, r1
 80170f2:	b149      	cbz	r1, 8017108 <rmw_init_options_copy+0x1c>
 80170f4:	4604      	mov	r4, r0
 80170f6:	6880      	ldr	r0, [r0, #8]
 80170f8:	b120      	cbz	r0, 8017104 <rmw_init_options_copy+0x18>
 80170fa:	4b1b      	ldr	r3, [pc, #108]	; (8017168 <rmw_init_options_copy+0x7c>)
 80170fc:	6819      	ldr	r1, [r3, #0]
 80170fe:	f7e9 f86f 	bl	80001e0 <strcmp>
 8017102:	bb60      	cbnz	r0, 801715e <rmw_init_options_copy+0x72>
 8017104:	68b3      	ldr	r3, [r6, #8]
 8017106:	b113      	cbz	r3, 801710e <rmw_init_options_copy+0x22>
 8017108:	230b      	movs	r3, #11
 801710a:	4618      	mov	r0, r3
 801710c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801710e:	4623      	mov	r3, r4
 8017110:	4632      	mov	r2, r6
 8017112:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8017116:	681d      	ldr	r5, [r3, #0]
 8017118:	6858      	ldr	r0, [r3, #4]
 801711a:	6899      	ldr	r1, [r3, #8]
 801711c:	68df      	ldr	r7, [r3, #12]
 801711e:	60d7      	str	r7, [r2, #12]
 8017120:	3310      	adds	r3, #16
 8017122:	4563      	cmp	r3, ip
 8017124:	6015      	str	r5, [r2, #0]
 8017126:	6050      	str	r0, [r2, #4]
 8017128:	6091      	str	r1, [r2, #8]
 801712a:	f102 0210 	add.w	r2, r2, #16
 801712e:	d1f2      	bne.n	8017116 <rmw_init_options_copy+0x2a>
 8017130:	6819      	ldr	r1, [r3, #0]
 8017132:	685b      	ldr	r3, [r3, #4]
 8017134:	480d      	ldr	r0, [pc, #52]	; (801716c <rmw_init_options_copy+0x80>)
 8017136:	6053      	str	r3, [r2, #4]
 8017138:	6011      	str	r1, [r2, #0]
 801713a:	f7ff ff11 	bl	8016f60 <get_memory>
 801713e:	b188      	cbz	r0, 8017164 <rmw_init_options_copy+0x78>
 8017140:	68c5      	ldr	r5, [r0, #12]
 8017142:	6375      	str	r5, [r6, #52]	; 0x34
 8017144:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8017146:	3610      	adds	r6, #16
 8017148:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801714a:	f105 0410 	add.w	r4, r5, #16
 801714e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017150:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8017154:	2300      	movs	r3, #0
 8017156:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801715a:	4618      	mov	r0, r3
 801715c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801715e:	230c      	movs	r3, #12
 8017160:	4618      	mov	r0, r3
 8017162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017164:	2301      	movs	r3, #1
 8017166:	e7d0      	b.n	801710a <rmw_init_options_copy+0x1e>
 8017168:	0801beac 	.word	0x0801beac
 801716c:	2000d1e4 	.word	0x2000d1e4

08017170 <rmw_init_options_fini>:
 8017170:	2800      	cmp	r0, #0
 8017172:	d036      	beq.n	80171e2 <rmw_init_options_fini+0x72>
 8017174:	b530      	push	{r4, r5, lr}
 8017176:	4604      	mov	r4, r0
 8017178:	b08f      	sub	sp, #60	; 0x3c
 801717a:	3020      	adds	r0, #32
 801717c:	f7f8 faa6 	bl	800f6cc <rcutils_allocator_is_valid>
 8017180:	b328      	cbz	r0, 80171ce <rmw_init_options_fini+0x5e>
 8017182:	68a0      	ldr	r0, [r4, #8]
 8017184:	b120      	cbz	r0, 8017190 <rmw_init_options_fini+0x20>
 8017186:	4b18      	ldr	r3, [pc, #96]	; (80171e8 <rmw_init_options_fini+0x78>)
 8017188:	6819      	ldr	r1, [r3, #0]
 801718a:	f7e9 f829 	bl	80001e0 <strcmp>
 801718e:	bb30      	cbnz	r0, 80171de <rmw_init_options_fini+0x6e>
 8017190:	4b16      	ldr	r3, [pc, #88]	; (80171ec <rmw_init_options_fini+0x7c>)
 8017192:	6819      	ldr	r1, [r3, #0]
 8017194:	b1f9      	cbz	r1, 80171d6 <rmw_init_options_fini+0x66>
 8017196:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017198:	e001      	b.n	801719e <rmw_init_options_fini+0x2e>
 801719a:	6889      	ldr	r1, [r1, #8]
 801719c:	b1d9      	cbz	r1, 80171d6 <rmw_init_options_fini+0x66>
 801719e:	68cb      	ldr	r3, [r1, #12]
 80171a0:	429a      	cmp	r2, r3
 80171a2:	d1fa      	bne.n	801719a <rmw_init_options_fini+0x2a>
 80171a4:	4811      	ldr	r0, [pc, #68]	; (80171ec <rmw_init_options_fini+0x7c>)
 80171a6:	f7ff feeb 	bl	8016f80 <put_memory>
 80171aa:	466d      	mov	r5, sp
 80171ac:	4668      	mov	r0, sp
 80171ae:	f7ff fdf9 	bl	8016da4 <rmw_get_zero_initialized_init_options>
 80171b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80171c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80171c6:	2300      	movs	r3, #0
 80171c8:	4618      	mov	r0, r3
 80171ca:	b00f      	add	sp, #60	; 0x3c
 80171cc:	bd30      	pop	{r4, r5, pc}
 80171ce:	230b      	movs	r3, #11
 80171d0:	4618      	mov	r0, r3
 80171d2:	b00f      	add	sp, #60	; 0x3c
 80171d4:	bd30      	pop	{r4, r5, pc}
 80171d6:	2301      	movs	r3, #1
 80171d8:	4618      	mov	r0, r3
 80171da:	b00f      	add	sp, #60	; 0x3c
 80171dc:	bd30      	pop	{r4, r5, pc}
 80171de:	230c      	movs	r3, #12
 80171e0:	e7f2      	b.n	80171c8 <rmw_init_options_fini+0x58>
 80171e2:	230b      	movs	r3, #11
 80171e4:	4618      	mov	r0, r3
 80171e6:	4770      	bx	lr
 80171e8:	0801beac 	.word	0x0801beac
 80171ec:	2000d1e4 	.word	0x2000d1e4

080171f0 <rmw_init>:
 80171f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171f4:	b082      	sub	sp, #8
 80171f6:	2800      	cmp	r0, #0
 80171f8:	f000 80d6 	beq.w	80173a8 <rmw_init+0x1b8>
 80171fc:	460e      	mov	r6, r1
 80171fe:	2900      	cmp	r1, #0
 8017200:	f000 80d2 	beq.w	80173a8 <rmw_init+0x1b8>
 8017204:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017206:	4605      	mov	r5, r0
 8017208:	2b00      	cmp	r3, #0
 801720a:	f000 80cd 	beq.w	80173a8 <rmw_init+0x1b8>
 801720e:	4b79      	ldr	r3, [pc, #484]	; (80173f4 <rmw_init+0x204>)
 8017210:	6880      	ldr	r0, [r0, #8]
 8017212:	f8d3 9000 	ldr.w	r9, [r3]
 8017216:	b128      	cbz	r0, 8017224 <rmw_init+0x34>
 8017218:	4649      	mov	r1, r9
 801721a:	f7e8 ffe1 	bl	80001e0 <strcmp>
 801721e:	2800      	cmp	r0, #0
 8017220:	f040 80cc 	bne.w	80173bc <rmw_init+0x1cc>
 8017224:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017228:	68eb      	ldr	r3, [r5, #12]
 801722a:	61f3      	str	r3, [r6, #28]
 801722c:	e9c6 0100 	strd	r0, r1, [r6]
 8017230:	2201      	movs	r2, #1
 8017232:	4971      	ldr	r1, [pc, #452]	; (80173f8 <rmw_init+0x208>)
 8017234:	4871      	ldr	r0, [pc, #452]	; (80173fc <rmw_init+0x20c>)
 8017236:	f8c6 9008 	str.w	r9, [r6, #8]
 801723a:	f7f9 f861 	bl	8010300 <rmw_uxrce_init_session_memory>
 801723e:	4870      	ldr	r0, [pc, #448]	; (8017400 <rmw_init+0x210>)
 8017240:	4970      	ldr	r1, [pc, #448]	; (8017404 <rmw_init+0x214>)
 8017242:	2204      	movs	r2, #4
 8017244:	f7f9 f896 	bl	8010374 <rmw_uxrce_init_static_input_buffer_memory>
 8017248:	486c      	ldr	r0, [pc, #432]	; (80173fc <rmw_init+0x20c>)
 801724a:	f7ff fe89 	bl	8016f60 <get_memory>
 801724e:	2800      	cmp	r0, #0
 8017250:	f000 80af 	beq.w	80173b2 <rmw_init+0x1c2>
 8017254:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8017256:	68c4      	ldr	r4, [r0, #12]
 8017258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801725a:	7c39      	ldrb	r1, [r7, #16]
 801725c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017260:	9001      	str	r0, [sp, #4]
 8017262:	6a38      	ldr	r0, [r7, #32]
 8017264:	9000      	str	r0, [sp, #0]
 8017266:	f104 0a10 	add.w	sl, r4, #16
 801726a:	4650      	mov	r0, sl
 801726c:	f000 ffe8 	bl	8018240 <uxr_set_custom_transport_callbacks>
 8017270:	f241 5294 	movw	r2, #5524	; 0x1594
 8017274:	f241 5398 	movw	r3, #5528	; 0x1598
 8017278:	f04f 0800 	mov.w	r8, #0
 801727c:	f241 509c 	movw	r0, #5532	; 0x159c
 8017280:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 8017284:	f844 8002 	str.w	r8, [r4, r2]
 8017288:	f844 8003 	str.w	r8, [r4, r3]
 801728c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017290:	f504 735e 	add.w	r3, r4, #888	; 0x378
 8017294:	f844 8000 	str.w	r8, [r4, r0]
 8017298:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 801729c:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80172a0:	4859      	ldr	r0, [pc, #356]	; (8017408 <rmw_init+0x218>)
 80172a2:	f8c1 8000 	str.w	r8, [r1]
 80172a6:	2201      	movs	r2, #1
 80172a8:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 80172ac:	4957      	ldr	r1, [pc, #348]	; (801740c <rmw_init+0x21c>)
 80172ae:	64b4      	str	r4, [r6, #72]	; 0x48
 80172b0:	f7f9 f80c 	bl	80102cc <rmw_uxrce_init_node_memory>
 80172b4:	4956      	ldr	r1, [pc, #344]	; (8017410 <rmw_init+0x220>)
 80172b6:	4857      	ldr	r0, [pc, #348]	; (8017414 <rmw_init+0x224>)
 80172b8:	2205      	movs	r2, #5
 80172ba:	f7f8 ffed 	bl	8010298 <rmw_uxrce_init_subscription_memory>
 80172be:	4956      	ldr	r1, [pc, #344]	; (8017418 <rmw_init+0x228>)
 80172c0:	4856      	ldr	r0, [pc, #344]	; (801741c <rmw_init+0x22c>)
 80172c2:	220a      	movs	r2, #10
 80172c4:	f7f8 ffce 	bl	8010264 <rmw_uxrce_init_publisher_memory>
 80172c8:	4955      	ldr	r1, [pc, #340]	; (8017420 <rmw_init+0x230>)
 80172ca:	4856      	ldr	r0, [pc, #344]	; (8017424 <rmw_init+0x234>)
 80172cc:	2201      	movs	r2, #1
 80172ce:	f7f8 ff95 	bl	80101fc <rmw_uxrce_init_service_memory>
 80172d2:	4955      	ldr	r1, [pc, #340]	; (8017428 <rmw_init+0x238>)
 80172d4:	4855      	ldr	r0, [pc, #340]	; (801742c <rmw_init+0x23c>)
 80172d6:	2201      	movs	r2, #1
 80172d8:	f7f8 ffaa 	bl	8010230 <rmw_uxrce_init_client_memory>
 80172dc:	4954      	ldr	r1, [pc, #336]	; (8017430 <rmw_init+0x240>)
 80172de:	4855      	ldr	r0, [pc, #340]	; (8017434 <rmw_init+0x244>)
 80172e0:	220f      	movs	r2, #15
 80172e2:	f7f9 f82b 	bl	801033c <rmw_uxrce_init_topic_memory>
 80172e6:	4954      	ldr	r1, [pc, #336]	; (8017438 <rmw_init+0x248>)
 80172e8:	4854      	ldr	r0, [pc, #336]	; (801743c <rmw_init+0x24c>)
 80172ea:	2203      	movs	r2, #3
 80172ec:	f7f9 f860 	bl	80103b0 <rmw_uxrce_init_init_options_impl_memory>
 80172f0:	4953      	ldr	r1, [pc, #332]	; (8017440 <rmw_init+0x250>)
 80172f2:	4854      	ldr	r0, [pc, #336]	; (8017444 <rmw_init+0x254>)
 80172f4:	2204      	movs	r2, #4
 80172f6:	f7f9 f875 	bl	80103e4 <rmw_uxrce_init_wait_set_memory>
 80172fa:	4953      	ldr	r1, [pc, #332]	; (8017448 <rmw_init+0x258>)
 80172fc:	4853      	ldr	r0, [pc, #332]	; (801744c <rmw_init+0x25c>)
 80172fe:	2204      	movs	r2, #4
 8017300:	f7f9 f88c 	bl	801041c <rmw_uxrce_init_guard_condition_memory>
 8017304:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8017306:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8017308:	4642      	mov	r2, r8
 801730a:	f000 fbbd 	bl	8017a88 <rmw_uxrce_transport_init>
 801730e:	4607      	mov	r7, r0
 8017310:	2800      	cmp	r0, #0
 8017312:	d158      	bne.n	80173c6 <rmw_init+0x1d6>
 8017314:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8017316:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 801731a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801731c:	4628      	mov	r0, r5
 801731e:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8017322:	f7fa fefd 	bl	8012120 <uxr_init_session>
 8017326:	494a      	ldr	r1, [pc, #296]	; (8017450 <rmw_init+0x260>)
 8017328:	4622      	mov	r2, r4
 801732a:	4628      	mov	r0, r5
 801732c:	f7fa ff1a 	bl	8012164 <uxr_set_topic_callback>
 8017330:	4948      	ldr	r1, [pc, #288]	; (8017454 <rmw_init+0x264>)
 8017332:	463a      	mov	r2, r7
 8017334:	4628      	mov	r0, r5
 8017336:	f7fa ff11 	bl	801215c <uxr_set_status_callback>
 801733a:	4947      	ldr	r1, [pc, #284]	; (8017458 <rmw_init+0x268>)
 801733c:	463a      	mov	r2, r7
 801733e:	4628      	mov	r0, r5
 8017340:	f7fa ff14 	bl	801216c <uxr_set_request_callback>
 8017344:	4945      	ldr	r1, [pc, #276]	; (801745c <rmw_init+0x26c>)
 8017346:	463a      	mov	r2, r7
 8017348:	4628      	mov	r0, r5
 801734a:	f7fa ff13 	bl	8012174 <uxr_set_reply_callback>
 801734e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017352:	2304      	movs	r3, #4
 8017354:	0092      	lsls	r2, r2, #2
 8017356:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801735a:	4628      	mov	r0, r5
 801735c:	f7fa ff4a 	bl	80121f4 <uxr_create_input_reliable_stream>
 8017360:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017364:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8017368:	0092      	lsls	r2, r2, #2
 801736a:	2304      	movs	r3, #4
 801736c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8017370:	4628      	mov	r0, r5
 8017372:	f7fa ff15 	bl	80121a0 <uxr_create_output_reliable_stream>
 8017376:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 801737a:	4628      	mov	r0, r5
 801737c:	f7fa ff34 	bl	80121e8 <uxr_create_input_best_effort_stream>
 8017380:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8017384:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8017388:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801738c:	4628      	mov	r0, r5
 801738e:	3114      	adds	r1, #20
 8017390:	f7fa fef4 	bl	801217c <uxr_create_output_best_effort_stream>
 8017394:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8017398:	4628      	mov	r0, r5
 801739a:	f7fb fb85 	bl	8012aa8 <uxr_create_session>
 801739e:	b1f8      	cbz	r0, 80173e0 <rmw_init+0x1f0>
 80173a0:	4638      	mov	r0, r7
 80173a2:	b002      	add	sp, #8
 80173a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173a8:	270b      	movs	r7, #11
 80173aa:	4638      	mov	r0, r7
 80173ac:	b002      	add	sp, #8
 80173ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173b2:	2701      	movs	r7, #1
 80173b4:	4638      	mov	r0, r7
 80173b6:	b002      	add	sp, #8
 80173b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173bc:	270c      	movs	r7, #12
 80173be:	4638      	mov	r0, r7
 80173c0:	b002      	add	sp, #8
 80173c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173c6:	4650      	mov	r0, sl
 80173c8:	f000 ff7a 	bl	80182c0 <uxr_close_custom_transport>
 80173cc:	480b      	ldr	r0, [pc, #44]	; (80173fc <rmw_init+0x20c>)
 80173ce:	4621      	mov	r1, r4
 80173d0:	f7ff fdd6 	bl	8016f80 <put_memory>
 80173d4:	4638      	mov	r0, r7
 80173d6:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 80173da:	b002      	add	sp, #8
 80173dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173e0:	4650      	mov	r0, sl
 80173e2:	f000 ff6d 	bl	80182c0 <uxr_close_custom_transport>
 80173e6:	4805      	ldr	r0, [pc, #20]	; (80173fc <rmw_init+0x20c>)
 80173e8:	4621      	mov	r1, r4
 80173ea:	f7ff fdc9 	bl	8016f80 <put_memory>
 80173ee:	64b7      	str	r7, [r6, #72]	; 0x48
 80173f0:	2701      	movs	r7, #1
 80173f2:	e7d5      	b.n	80173a0 <rmw_init+0x1b0>
 80173f4:	0801beac 	.word	0x0801beac
 80173f8:	2000d2c0 	.word	0x2000d2c0
 80173fc:	2000d090 	.word	0x2000d090
 8017400:	20009ee8 	.word	0x20009ee8
 8017404:	2000acc8 	.word	0x2000acc8
 8017408:	2000cebc 	.word	0x2000cebc
 801740c:	2000d0a0 	.word	0x2000d0a0
 8017410:	2000a7f0 	.word	0x2000a7f0
 8017414:	2000d154 	.word	0x2000d154
 8017418:	20009f08 	.word	0x20009f08
 801741c:	20009ef8 	.word	0x20009ef8
 8017420:	2000d1f8 	.word	0x2000d1f8
 8017424:	2000d144 	.word	0x2000d144
 8017428:	2000ac00 	.word	0x2000ac00
 801742c:	2000a778 	.word	0x2000a778
 8017430:	2000cecc 	.word	0x2000cecc
 8017434:	2000d080 	.word	0x2000d080
 8017438:	2000ce38 	.word	0x2000ce38
 801743c:	2000d1e4 	.word	0x2000d1e4
 8017440:	2000cdc8 	.word	0x2000cdc8
 8017444:	2000e868 	.word	0x2000e868
 8017448:	2000d164 	.word	0x2000d164
 801744c:	2000d070 	.word	0x2000d070
 8017450:	08019811 	.word	0x08019811
 8017454:	08019809 	.word	0x08019809
 8017458:	080198a5 	.word	0x080198a5
 801745c:	0801993d 	.word	0x0801993d

08017460 <rmw_context_fini>:
 8017460:	4b17      	ldr	r3, [pc, #92]	; (80174c0 <rmw_context_fini+0x60>)
 8017462:	b570      	push	{r4, r5, r6, lr}
 8017464:	681c      	ldr	r4, [r3, #0]
 8017466:	4605      	mov	r5, r0
 8017468:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801746a:	b33c      	cbz	r4, 80174bc <rmw_context_fini+0x5c>
 801746c:	2600      	movs	r6, #0
 801746e:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 8017472:	691a      	ldr	r2, [r3, #16]
 8017474:	4282      	cmp	r2, r0
 8017476:	d018      	beq.n	80174aa <rmw_context_fini+0x4a>
 8017478:	2c00      	cmp	r4, #0
 801747a:	d1f8      	bne.n	801746e <rmw_context_fini+0xe>
 801747c:	b188      	cbz	r0, 80174a2 <rmw_context_fini+0x42>
 801747e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017482:	789b      	ldrb	r3, [r3, #2]
 8017484:	2b01      	cmp	r3, #1
 8017486:	bf14      	ite	ne
 8017488:	210a      	movne	r1, #10
 801748a:	2100      	moveq	r1, #0
 801748c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017490:	f7fb fccc 	bl	8012e2c <uxr_delete_session_retries>
 8017494:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8017496:	f7f8 ffdb 	bl	8010450 <rmw_uxrce_fini_session_memory>
 801749a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801749c:	3010      	adds	r0, #16
 801749e:	f000 ff0f 	bl	80182c0 <uxr_close_custom_transport>
 80174a2:	2300      	movs	r3, #0
 80174a4:	4630      	mov	r0, r6
 80174a6:	64ab      	str	r3, [r5, #72]	; 0x48
 80174a8:	bd70      	pop	{r4, r5, r6, pc}
 80174aa:	f103 0018 	add.w	r0, r3, #24
 80174ae:	f000 f91f 	bl	80176f0 <rmw_destroy_node>
 80174b2:	4606      	mov	r6, r0
 80174b4:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 80174b6:	2c00      	cmp	r4, #0
 80174b8:	d1d9      	bne.n	801746e <rmw_context_fini+0xe>
 80174ba:	e7df      	b.n	801747c <rmw_context_fini+0x1c>
 80174bc:	4626      	mov	r6, r4
 80174be:	e7dd      	b.n	801747c <rmw_context_fini+0x1c>
 80174c0:	2000cebc 	.word	0x2000cebc

080174c4 <create_topic>:
 80174c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174c8:	4605      	mov	r5, r0
 80174ca:	b084      	sub	sp, #16
 80174cc:	482b      	ldr	r0, [pc, #172]	; (801757c <create_topic+0xb8>)
 80174ce:	460f      	mov	r7, r1
 80174d0:	4616      	mov	r6, r2
 80174d2:	f7ff fd45 	bl	8016f60 <get_memory>
 80174d6:	4604      	mov	r4, r0
 80174d8:	2800      	cmp	r0, #0
 80174da:	d036      	beq.n	801754a <create_topic+0x86>
 80174dc:	692a      	ldr	r2, [r5, #16]
 80174de:	68c4      	ldr	r4, [r0, #12]
 80174e0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8017584 <create_topic+0xc0>
 80174e4:	61a5      	str	r5, [r4, #24]
 80174e6:	f241 5396 	movw	r3, #5526	; 0x1596
 80174ea:	6166      	str	r6, [r4, #20]
 80174ec:	5ad0      	ldrh	r0, [r2, r3]
 80174ee:	1c41      	adds	r1, r0, #1
 80174f0:	52d1      	strh	r1, [r2, r3]
 80174f2:	2102      	movs	r1, #2
 80174f4:	f7fa fc32 	bl	8011d5c <uxr_object_id>
 80174f8:	4641      	mov	r1, r8
 80174fa:	6120      	str	r0, [r4, #16]
 80174fc:	223c      	movs	r2, #60	; 0x3c
 80174fe:	4638      	mov	r0, r7
 8017500:	f7f9 f97c 	bl	80107fc <generate_topic_name>
 8017504:	4607      	mov	r7, r0
 8017506:	b320      	cbz	r0, 8017552 <create_topic+0x8e>
 8017508:	4f1d      	ldr	r7, [pc, #116]	; (8017580 <create_topic+0xbc>)
 801750a:	4630      	mov	r0, r6
 801750c:	4639      	mov	r1, r7
 801750e:	2264      	movs	r2, #100	; 0x64
 8017510:	f7f9 f944 	bl	801079c <generate_type_name>
 8017514:	4606      	mov	r6, r0
 8017516:	b320      	cbz	r0, 8017562 <create_topic+0x9e>
 8017518:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 801751c:	2106      	movs	r1, #6
 801751e:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8017522:	9701      	str	r7, [sp, #4]
 8017524:	f8cd 8000 	str.w	r8, [sp]
 8017528:	9102      	str	r1, [sp, #8]
 801752a:	6811      	ldr	r1, [r2, #0]
 801752c:	6922      	ldr	r2, [r4, #16]
 801752e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017532:	f7fa fa8f 	bl	8011a54 <uxr_buffer_create_topic_bin>
 8017536:	4602      	mov	r2, r0
 8017538:	6928      	ldr	r0, [r5, #16]
 801753a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801753e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8017542:	f7f9 f8f5 	bl	8010730 <run_xrce_session>
 8017546:	4605      	mov	r5, r0
 8017548:	b198      	cbz	r0, 8017572 <create_topic+0xae>
 801754a:	4620      	mov	r0, r4
 801754c:	b004      	add	sp, #16
 801754e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017552:	4620      	mov	r0, r4
 8017554:	f7f8 fff2 	bl	801053c <rmw_uxrce_fini_topic_memory>
 8017558:	463c      	mov	r4, r7
 801755a:	4620      	mov	r0, r4
 801755c:	b004      	add	sp, #16
 801755e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017562:	4620      	mov	r0, r4
 8017564:	f7f8 ffea 	bl	801053c <rmw_uxrce_fini_topic_memory>
 8017568:	4634      	mov	r4, r6
 801756a:	4620      	mov	r0, r4
 801756c:	b004      	add	sp, #16
 801756e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017572:	4620      	mov	r0, r4
 8017574:	f7f8 ffe2 	bl	801053c <rmw_uxrce_fini_topic_memory>
 8017578:	462c      	mov	r4, r5
 801757a:	e7e6      	b.n	801754a <create_topic+0x86>
 801757c:	2000d080 	.word	0x2000d080
 8017580:	20009ca8 	.word	0x20009ca8
 8017584:	20009c6c 	.word	0x20009c6c

08017588 <destroy_topic>:
 8017588:	b538      	push	{r3, r4, r5, lr}
 801758a:	6985      	ldr	r5, [r0, #24]
 801758c:	b1d5      	cbz	r5, 80175c4 <destroy_topic+0x3c>
 801758e:	4604      	mov	r4, r0
 8017590:	6928      	ldr	r0, [r5, #16]
 8017592:	6922      	ldr	r2, [r4, #16]
 8017594:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017598:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801759c:	6819      	ldr	r1, [r3, #0]
 801759e:	f7fa f9db 	bl	8011958 <uxr_buffer_delete_entity>
 80175a2:	4602      	mov	r2, r0
 80175a4:	6928      	ldr	r0, [r5, #16]
 80175a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80175aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80175ae:	f7f9 f8bf 	bl	8010730 <run_xrce_session>
 80175b2:	2800      	cmp	r0, #0
 80175b4:	4620      	mov	r0, r4
 80175b6:	bf14      	ite	ne
 80175b8:	2400      	movne	r4, #0
 80175ba:	2402      	moveq	r4, #2
 80175bc:	f7f8 ffbe 	bl	801053c <rmw_uxrce_fini_topic_memory>
 80175c0:	4620      	mov	r0, r4
 80175c2:	bd38      	pop	{r3, r4, r5, pc}
 80175c4:	2401      	movs	r4, #1
 80175c6:	4620      	mov	r0, r4
 80175c8:	bd38      	pop	{r3, r4, r5, pc}
 80175ca:	bf00      	nop

080175cc <create_node>:
 80175cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175d0:	b083      	sub	sp, #12
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d05f      	beq.n	8017696 <create_node+0xca>
 80175d6:	4606      	mov	r6, r0
 80175d8:	4835      	ldr	r0, [pc, #212]	; (80176b0 <create_node+0xe4>)
 80175da:	460f      	mov	r7, r1
 80175dc:	4690      	mov	r8, r2
 80175de:	461d      	mov	r5, r3
 80175e0:	f7ff fcbe 	bl	8016f60 <get_memory>
 80175e4:	2800      	cmp	r0, #0
 80175e6:	d056      	beq.n	8017696 <create_node+0xca>
 80175e8:	68c4      	ldr	r4, [r0, #12]
 80175ea:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80175ec:	6123      	str	r3, [r4, #16]
 80175ee:	f7ff fd1f 	bl	8017030 <rmw_get_implementation_identifier>
 80175f2:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80175f6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80175fa:	f8c4 9020 	str.w	r9, [r4, #32]
 80175fe:	4630      	mov	r0, r6
 8017600:	f7e8 fdf8 	bl	80001f4 <strlen>
 8017604:	1c42      	adds	r2, r0, #1
 8017606:	2a3c      	cmp	r2, #60	; 0x3c
 8017608:	f104 0518 	add.w	r5, r4, #24
 801760c:	d840      	bhi.n	8017690 <create_node+0xc4>
 801760e:	4648      	mov	r0, r9
 8017610:	4631      	mov	r1, r6
 8017612:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8017616:	f003 f846 	bl	801a6a6 <memcpy>
 801761a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 801761e:	4638      	mov	r0, r7
 8017620:	f7e8 fde8 	bl	80001f4 <strlen>
 8017624:	1c42      	adds	r2, r0, #1
 8017626:	2a3c      	cmp	r2, #60	; 0x3c
 8017628:	d832      	bhi.n	8017690 <create_node+0xc4>
 801762a:	4639      	mov	r1, r7
 801762c:	4648      	mov	r0, r9
 801762e:	f003 f83a 	bl	801a6a6 <memcpy>
 8017632:	f241 5394 	movw	r3, #5524	; 0x1594
 8017636:	6922      	ldr	r2, [r4, #16]
 8017638:	5ad0      	ldrh	r0, [r2, r3]
 801763a:	2101      	movs	r1, #1
 801763c:	eb00 0c01 	add.w	ip, r0, r1
 8017640:	f822 c003 	strh.w	ip, [r2, r3]
 8017644:	f7fa fb8a 	bl	8011d5c <uxr_object_id>
 8017648:	6160      	str	r0, [r4, #20]
 801764a:	783b      	ldrb	r3, [r7, #0]
 801764c:	2b2f      	cmp	r3, #47	; 0x2f
 801764e:	d127      	bne.n	80176a0 <create_node+0xd4>
 8017650:	787b      	ldrb	r3, [r7, #1]
 8017652:	bb2b      	cbnz	r3, 80176a0 <create_node+0xd4>
 8017654:	4a17      	ldr	r2, [pc, #92]	; (80176b4 <create_node+0xe8>)
 8017656:	4818      	ldr	r0, [pc, #96]	; (80176b8 <create_node+0xec>)
 8017658:	4633      	mov	r3, r6
 801765a:	213c      	movs	r1, #60	; 0x3c
 801765c:	f002 fda4 	bl	801a1a8 <sniprintf>
 8017660:	6920      	ldr	r0, [r4, #16]
 8017662:	4b15      	ldr	r3, [pc, #84]	; (80176b8 <create_node+0xec>)
 8017664:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8017668:	9300      	str	r3, [sp, #0]
 801766a:	2306      	movs	r3, #6
 801766c:	9301      	str	r3, [sp, #4]
 801766e:	6811      	ldr	r1, [r2, #0]
 8017670:	6962      	ldr	r2, [r4, #20]
 8017672:	fa1f f388 	uxth.w	r3, r8
 8017676:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801767a:	f7fa f9b9 	bl	80119f0 <uxr_buffer_create_participant_bin>
 801767e:	4602      	mov	r2, r0
 8017680:	6920      	ldr	r0, [r4, #16]
 8017682:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8017686:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801768a:	f7f9 f851 	bl	8010730 <run_xrce_session>
 801768e:	b918      	cbnz	r0, 8017698 <create_node+0xcc>
 8017690:	4628      	mov	r0, r5
 8017692:	f7f8 fee3 	bl	801045c <rmw_uxrce_fini_node_memory>
 8017696:	2500      	movs	r5, #0
 8017698:	4628      	mov	r0, r5
 801769a:	b003      	add	sp, #12
 801769c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176a0:	4a06      	ldr	r2, [pc, #24]	; (80176bc <create_node+0xf0>)
 80176a2:	9600      	str	r6, [sp, #0]
 80176a4:	463b      	mov	r3, r7
 80176a6:	213c      	movs	r1, #60	; 0x3c
 80176a8:	4803      	ldr	r0, [pc, #12]	; (80176b8 <create_node+0xec>)
 80176aa:	f002 fd7d 	bl	801a1a8 <sniprintf>
 80176ae:	e7d7      	b.n	8017660 <create_node+0x94>
 80176b0:	2000cebc 	.word	0x2000cebc
 80176b4:	0801b9a4 	.word	0x0801b9a4
 80176b8:	20009d0c 	.word	0x20009d0c
 80176bc:	0801b9e4 	.word	0x0801b9e4

080176c0 <rmw_create_node>:
 80176c0:	b199      	cbz	r1, 80176ea <rmw_create_node+0x2a>
 80176c2:	b430      	push	{r4, r5}
 80176c4:	4615      	mov	r5, r2
 80176c6:	461a      	mov	r2, r3
 80176c8:	780b      	ldrb	r3, [r1, #0]
 80176ca:	460c      	mov	r4, r1
 80176cc:	b153      	cbz	r3, 80176e4 <rmw_create_node+0x24>
 80176ce:	b14d      	cbz	r5, 80176e4 <rmw_create_node+0x24>
 80176d0:	782b      	ldrb	r3, [r5, #0]
 80176d2:	b13b      	cbz	r3, 80176e4 <rmw_create_node+0x24>
 80176d4:	b902      	cbnz	r2, 80176d8 <rmw_create_node+0x18>
 80176d6:	69c2      	ldr	r2, [r0, #28]
 80176d8:	4603      	mov	r3, r0
 80176da:	4629      	mov	r1, r5
 80176dc:	4620      	mov	r0, r4
 80176de:	bc30      	pop	{r4, r5}
 80176e0:	f7ff bf74 	b.w	80175cc <create_node>
 80176e4:	2000      	movs	r0, #0
 80176e6:	bc30      	pop	{r4, r5}
 80176e8:	4770      	bx	lr
 80176ea:	2000      	movs	r0, #0
 80176ec:	4770      	bx	lr
 80176ee:	bf00      	nop

080176f0 <rmw_destroy_node>:
 80176f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176f2:	2800      	cmp	r0, #0
 80176f4:	d066      	beq.n	80177c4 <rmw_destroy_node+0xd4>
 80176f6:	4607      	mov	r7, r0
 80176f8:	6800      	ldr	r0, [r0, #0]
 80176fa:	b128      	cbz	r0, 8017708 <rmw_destroy_node+0x18>
 80176fc:	4b34      	ldr	r3, [pc, #208]	; (80177d0 <rmw_destroy_node+0xe0>)
 80176fe:	6819      	ldr	r1, [r3, #0]
 8017700:	f7e8 fd6e 	bl	80001e0 <strcmp>
 8017704:	2800      	cmp	r0, #0
 8017706:	d15d      	bne.n	80177c4 <rmw_destroy_node+0xd4>
 8017708:	687c      	ldr	r4, [r7, #4]
 801770a:	2c00      	cmp	r4, #0
 801770c:	d05a      	beq.n	80177c4 <rmw_destroy_node+0xd4>
 801770e:	4b31      	ldr	r3, [pc, #196]	; (80177d4 <rmw_destroy_node+0xe4>)
 8017710:	681d      	ldr	r5, [r3, #0]
 8017712:	2d00      	cmp	r5, #0
 8017714:	d059      	beq.n	80177ca <rmw_destroy_node+0xda>
 8017716:	2600      	movs	r6, #0
 8017718:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 801771c:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8017720:	429c      	cmp	r4, r3
 8017722:	d047      	beq.n	80177b4 <rmw_destroy_node+0xc4>
 8017724:	2d00      	cmp	r5, #0
 8017726:	d1f7      	bne.n	8017718 <rmw_destroy_node+0x28>
 8017728:	4b2b      	ldr	r3, [pc, #172]	; (80177d8 <rmw_destroy_node+0xe8>)
 801772a:	681d      	ldr	r5, [r3, #0]
 801772c:	b15d      	cbz	r5, 8017746 <rmw_destroy_node+0x56>
 801772e:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8017732:	6a0b      	ldr	r3, [r1, #32]
 8017734:	429c      	cmp	r4, r3
 8017736:	d1f9      	bne.n	801772c <rmw_destroy_node+0x3c>
 8017738:	317c      	adds	r1, #124	; 0x7c
 801773a:	4638      	mov	r0, r7
 801773c:	f7f8 fcac 	bl	8010098 <rmw_destroy_subscription>
 8017740:	4606      	mov	r6, r0
 8017742:	2d00      	cmp	r5, #0
 8017744:	d1f3      	bne.n	801772e <rmw_destroy_node+0x3e>
 8017746:	4b25      	ldr	r3, [pc, #148]	; (80177dc <rmw_destroy_node+0xec>)
 8017748:	681d      	ldr	r5, [r3, #0]
 801774a:	b15d      	cbz	r5, 8017764 <rmw_destroy_node+0x74>
 801774c:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8017750:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8017752:	429c      	cmp	r4, r3
 8017754:	d1f9      	bne.n	801774a <rmw_destroy_node+0x5a>
 8017756:	317c      	adds	r1, #124	; 0x7c
 8017758:	4638      	mov	r0, r7
 801775a:	f000 f951 	bl	8017a00 <rmw_destroy_service>
 801775e:	4606      	mov	r6, r0
 8017760:	2d00      	cmp	r5, #0
 8017762:	d1f3      	bne.n	801774c <rmw_destroy_node+0x5c>
 8017764:	4b1e      	ldr	r3, [pc, #120]	; (80177e0 <rmw_destroy_node+0xf0>)
 8017766:	681d      	ldr	r5, [r3, #0]
 8017768:	b15d      	cbz	r5, 8017782 <rmw_destroy_node+0x92>
 801776a:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 801776e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8017770:	429c      	cmp	r4, r3
 8017772:	d1f9      	bne.n	8017768 <rmw_destroy_node+0x78>
 8017774:	317c      	adds	r1, #124	; 0x7c
 8017776:	4638      	mov	r0, r7
 8017778:	f7ff fc16 	bl	8016fa8 <rmw_destroy_client>
 801777c:	4606      	mov	r6, r0
 801777e:	2d00      	cmp	r5, #0
 8017780:	d1f3      	bne.n	801776a <rmw_destroy_node+0x7a>
 8017782:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8017786:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801778a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801778e:	6819      	ldr	r1, [r3, #0]
 8017790:	f7fa f8e2 	bl	8011958 <uxr_buffer_delete_entity>
 8017794:	4602      	mov	r2, r0
 8017796:	6920      	ldr	r0, [r4, #16]
 8017798:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801779c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80177a0:	f7f8 ffc6 	bl	8010730 <run_xrce_session>
 80177a4:	2800      	cmp	r0, #0
 80177a6:	bf08      	it	eq
 80177a8:	2602      	moveq	r6, #2
 80177aa:	4638      	mov	r0, r7
 80177ac:	f7f8 fe56 	bl	801045c <rmw_uxrce_fini_node_memory>
 80177b0:	4630      	mov	r0, r6
 80177b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177b4:	3184      	adds	r1, #132	; 0x84
 80177b6:	4638      	mov	r0, r7
 80177b8:	f7f8 fb3c 	bl	800fe34 <rmw_destroy_publisher>
 80177bc:	4606      	mov	r6, r0
 80177be:	2d00      	cmp	r5, #0
 80177c0:	d1aa      	bne.n	8017718 <rmw_destroy_node+0x28>
 80177c2:	e7b1      	b.n	8017728 <rmw_destroy_node+0x38>
 80177c4:	2601      	movs	r6, #1
 80177c6:	4630      	mov	r0, r6
 80177c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177ca:	462e      	mov	r6, r5
 80177cc:	e7ac      	b.n	8017728 <rmw_destroy_node+0x38>
 80177ce:	bf00      	nop
 80177d0:	0801beac 	.word	0x0801beac
 80177d4:	20009ef8 	.word	0x20009ef8
 80177d8:	2000d154 	.word	0x2000d154
 80177dc:	2000d144 	.word	0x2000d144
 80177e0:	2000a778 	.word	0x2000a778

080177e4 <rmw_node_get_graph_guard_condition>:
 80177e4:	6843      	ldr	r3, [r0, #4]
 80177e6:	6918      	ldr	r0, [r3, #16]
 80177e8:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80177ec:	4770      	bx	lr
 80177ee:	bf00      	nop

080177f0 <rmw_take_request>:
 80177f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80177f4:	4605      	mov	r5, r0
 80177f6:	6800      	ldr	r0, [r0, #0]
 80177f8:	b089      	sub	sp, #36	; 0x24
 80177fa:	460c      	mov	r4, r1
 80177fc:	4690      	mov	r8, r2
 80177fe:	461e      	mov	r6, r3
 8017800:	b128      	cbz	r0, 801780e <rmw_take_request+0x1e>
 8017802:	4b28      	ldr	r3, [pc, #160]	; (80178a4 <rmw_take_request+0xb4>)
 8017804:	6819      	ldr	r1, [r3, #0]
 8017806:	f7e8 fceb 	bl	80001e0 <strcmp>
 801780a:	2800      	cmp	r0, #0
 801780c:	d146      	bne.n	801789c <rmw_take_request+0xac>
 801780e:	b10e      	cbz	r6, 8017814 <rmw_take_request+0x24>
 8017810:	2300      	movs	r3, #0
 8017812:	7033      	strb	r3, [r6, #0]
 8017814:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017818:	f7f8 ff12 	bl	8010640 <rmw_uxrce_clean_expired_static_input_buffer>
 801781c:	4648      	mov	r0, r9
 801781e:	f7f8 fee5 	bl	80105ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8017822:	4607      	mov	r7, r0
 8017824:	b3b0      	cbz	r0, 8017894 <rmw_take_request+0xa4>
 8017826:	68c5      	ldr	r5, [r0, #12]
 8017828:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 801782c:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 8017830:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8017834:	7423      	strb	r3, [r4, #16]
 8017836:	e9c4 1208 	strd	r1, r2, [r4, #32]
 801783a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 801783e:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8017842:	74e2      	strb	r2, [r4, #19]
 8017844:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017848:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 801784c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8017850:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8017854:	61e1      	str	r1, [r4, #28]
 8017856:	6162      	str	r2, [r4, #20]
 8017858:	61a3      	str	r3, [r4, #24]
 801785a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801785e:	689b      	ldr	r3, [r3, #8]
 8017860:	4798      	blx	r3
 8017862:	6844      	ldr	r4, [r0, #4]
 8017864:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8017868:	f105 0110 	add.w	r1, r5, #16
 801786c:	4668      	mov	r0, sp
 801786e:	f7fa f803 	bl	8011878 <ucdr_init_buffer>
 8017872:	68e3      	ldr	r3, [r4, #12]
 8017874:	4641      	mov	r1, r8
 8017876:	4668      	mov	r0, sp
 8017878:	4798      	blx	r3
 801787a:	4639      	mov	r1, r7
 801787c:	4604      	mov	r4, r0
 801787e:	480a      	ldr	r0, [pc, #40]	; (80178a8 <rmw_take_request+0xb8>)
 8017880:	f7ff fb7e 	bl	8016f80 <put_memory>
 8017884:	b106      	cbz	r6, 8017888 <rmw_take_request+0x98>
 8017886:	7034      	strb	r4, [r6, #0]
 8017888:	f084 0001 	eor.w	r0, r4, #1
 801788c:	b2c0      	uxtb	r0, r0
 801788e:	b009      	add	sp, #36	; 0x24
 8017890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017894:	2001      	movs	r0, #1
 8017896:	b009      	add	sp, #36	; 0x24
 8017898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801789c:	200c      	movs	r0, #12
 801789e:	b009      	add	sp, #36	; 0x24
 80178a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178a4:	0801beac 	.word	0x0801beac
 80178a8:	20009ee8 	.word	0x20009ee8

080178ac <rmw_send_response>:
 80178ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178ae:	4605      	mov	r5, r0
 80178b0:	6800      	ldr	r0, [r0, #0]
 80178b2:	b091      	sub	sp, #68	; 0x44
 80178b4:	460c      	mov	r4, r1
 80178b6:	4617      	mov	r7, r2
 80178b8:	b128      	cbz	r0, 80178c6 <rmw_send_response+0x1a>
 80178ba:	4b2a      	ldr	r3, [pc, #168]	; (8017964 <rmw_send_response+0xb8>)
 80178bc:	6819      	ldr	r1, [r3, #0]
 80178be:	f7e8 fc8f 	bl	80001e0 <strcmp>
 80178c2:	2800      	cmp	r0, #0
 80178c4:	d143      	bne.n	801794e <rmw_send_response+0xa2>
 80178c6:	4623      	mov	r3, r4
 80178c8:	4626      	mov	r6, r4
 80178ca:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80178ce:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 80178d2:	6859      	ldr	r1, [r3, #4]
 80178d4:	686d      	ldr	r5, [r5, #4]
 80178d6:	689a      	ldr	r2, [r3, #8]
 80178d8:	78b3      	ldrb	r3, [r6, #2]
 80178da:	f894 c000 	ldrb.w	ip, [r4]
 80178de:	6966      	ldr	r6, [r4, #20]
 80178e0:	f88d 3016 	strb.w	r3, [sp, #22]
 80178e4:	ab02      	add	r3, sp, #8
 80178e6:	f8ad e014 	strh.w	lr, [sp, #20]
 80178ea:	f88d c017 	strb.w	ip, [sp, #23]
 80178ee:	9606      	str	r6, [sp, #24]
 80178f0:	c307      	stmia	r3!, {r0, r1, r2}
 80178f2:	696b      	ldr	r3, [r5, #20]
 80178f4:	6922      	ldr	r2, [r4, #16]
 80178f6:	9207      	str	r2, [sp, #28]
 80178f8:	68db      	ldr	r3, [r3, #12]
 80178fa:	6fae      	ldr	r6, [r5, #120]	; 0x78
 80178fc:	4798      	blx	r3
 80178fe:	4603      	mov	r3, r0
 8017900:	4638      	mov	r0, r7
 8017902:	685c      	ldr	r4, [r3, #4]
 8017904:	6923      	ldr	r3, [r4, #16]
 8017906:	4798      	blx	r3
 8017908:	6933      	ldr	r3, [r6, #16]
 801790a:	3018      	adds	r0, #24
 801790c:	9000      	str	r0, [sp, #0]
 801790e:	692a      	ldr	r2, [r5, #16]
 8017910:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8017912:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8017916:	ab08      	add	r3, sp, #32
 8017918:	f7fb fe56 	bl	80135c8 <uxr_prepare_output_stream>
 801791c:	b910      	cbnz	r0, 8017924 <rmw_send_response+0x78>
 801791e:	2001      	movs	r0, #1
 8017920:	b011      	add	sp, #68	; 0x44
 8017922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017924:	a902      	add	r1, sp, #8
 8017926:	a808      	add	r0, sp, #32
 8017928:	f7fc ff6c 	bl	8014804 <uxr_serialize_SampleIdentity>
 801792c:	68a3      	ldr	r3, [r4, #8]
 801792e:	a908      	add	r1, sp, #32
 8017930:	4638      	mov	r0, r7
 8017932:	4798      	blx	r3
 8017934:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8017938:	6930      	ldr	r0, [r6, #16]
 801793a:	2b01      	cmp	r3, #1
 801793c:	d00a      	beq.n	8017954 <rmw_send_response+0xa8>
 801793e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8017940:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017944:	f7fb f838 	bl	80129b8 <uxr_run_session_until_confirm_delivery>
 8017948:	2000      	movs	r0, #0
 801794a:	b011      	add	sp, #68	; 0x44
 801794c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801794e:	200c      	movs	r0, #12
 8017950:	b011      	add	sp, #68	; 0x44
 8017952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017954:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017958:	f7fa fc72 	bl	8012240 <uxr_flash_output_streams>
 801795c:	2000      	movs	r0, #0
 801795e:	b011      	add	sp, #68	; 0x44
 8017960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017962:	bf00      	nop
 8017964:	0801beac 	.word	0x0801beac

08017968 <rmw_take_response>:
 8017968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801796c:	4604      	mov	r4, r0
 801796e:	6800      	ldr	r0, [r0, #0]
 8017970:	b089      	sub	sp, #36	; 0x24
 8017972:	4688      	mov	r8, r1
 8017974:	4617      	mov	r7, r2
 8017976:	461d      	mov	r5, r3
 8017978:	b120      	cbz	r0, 8017984 <rmw_take_response+0x1c>
 801797a:	4b1f      	ldr	r3, [pc, #124]	; (80179f8 <rmw_take_response+0x90>)
 801797c:	6819      	ldr	r1, [r3, #0]
 801797e:	f7e8 fc2f 	bl	80001e0 <strcmp>
 8017982:	bb88      	cbnz	r0, 80179e8 <rmw_take_response+0x80>
 8017984:	b10d      	cbz	r5, 801798a <rmw_take_response+0x22>
 8017986:	2300      	movs	r3, #0
 8017988:	702b      	strb	r3, [r5, #0]
 801798a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801798e:	f7f8 fe57 	bl	8010640 <rmw_uxrce_clean_expired_static_input_buffer>
 8017992:	4648      	mov	r0, r9
 8017994:	f7f8 fe2a 	bl	80105ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8017998:	4606      	mov	r6, r0
 801799a:	b348      	cbz	r0, 80179f0 <rmw_take_response+0x88>
 801799c:	68c4      	ldr	r4, [r0, #12]
 801799e:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80179a2:	f604 0328 	addw	r3, r4, #2088	; 0x828
 80179a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179aa:	68c9      	ldr	r1, [r1, #12]
 80179ac:	e9c8 2308 	strd	r2, r3, [r8, #32]
 80179b0:	4788      	blx	r1
 80179b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80179b6:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80179ba:	f104 0110 	add.w	r1, r4, #16
 80179be:	4668      	mov	r0, sp
 80179c0:	f7f9 ff5a 	bl	8011878 <ucdr_init_buffer>
 80179c4:	4639      	mov	r1, r7
 80179c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80179ca:	4668      	mov	r0, sp
 80179cc:	4798      	blx	r3
 80179ce:	4631      	mov	r1, r6
 80179d0:	4604      	mov	r4, r0
 80179d2:	480a      	ldr	r0, [pc, #40]	; (80179fc <rmw_take_response+0x94>)
 80179d4:	f7ff fad4 	bl	8016f80 <put_memory>
 80179d8:	b105      	cbz	r5, 80179dc <rmw_take_response+0x74>
 80179da:	702c      	strb	r4, [r5, #0]
 80179dc:	f084 0001 	eor.w	r0, r4, #1
 80179e0:	b2c0      	uxtb	r0, r0
 80179e2:	b009      	add	sp, #36	; 0x24
 80179e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179e8:	200c      	movs	r0, #12
 80179ea:	b009      	add	sp, #36	; 0x24
 80179ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179f0:	2001      	movs	r0, #1
 80179f2:	b009      	add	sp, #36	; 0x24
 80179f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179f8:	0801beac 	.word	0x0801beac
 80179fc:	20009ee8 	.word	0x20009ee8

08017a00 <rmw_destroy_service>:
 8017a00:	b570      	push	{r4, r5, r6, lr}
 8017a02:	b128      	cbz	r0, 8017a10 <rmw_destroy_service+0x10>
 8017a04:	4604      	mov	r4, r0
 8017a06:	6800      	ldr	r0, [r0, #0]
 8017a08:	460d      	mov	r5, r1
 8017a0a:	f7f8 ff11 	bl	8010830 <is_uxrce_rmw_identifier_valid>
 8017a0e:	b910      	cbnz	r0, 8017a16 <rmw_destroy_service+0x16>
 8017a10:	2401      	movs	r4, #1
 8017a12:	4620      	mov	r0, r4
 8017a14:	bd70      	pop	{r4, r5, r6, pc}
 8017a16:	6863      	ldr	r3, [r4, #4]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d0f9      	beq.n	8017a10 <rmw_destroy_service+0x10>
 8017a1c:	2d00      	cmp	r5, #0
 8017a1e:	d0f7      	beq.n	8017a10 <rmw_destroy_service+0x10>
 8017a20:	6828      	ldr	r0, [r5, #0]
 8017a22:	f7f8 ff05 	bl	8010830 <is_uxrce_rmw_identifier_valid>
 8017a26:	2800      	cmp	r0, #0
 8017a28:	d0f2      	beq.n	8017a10 <rmw_destroy_service+0x10>
 8017a2a:	686e      	ldr	r6, [r5, #4]
 8017a2c:	2e00      	cmp	r6, #0
 8017a2e:	d0ef      	beq.n	8017a10 <rmw_destroy_service+0x10>
 8017a30:	6864      	ldr	r4, [r4, #4]
 8017a32:	6932      	ldr	r2, [r6, #16]
 8017a34:	6920      	ldr	r0, [r4, #16]
 8017a36:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017a3a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017a3e:	6819      	ldr	r1, [r3, #0]
 8017a40:	f7fa f9f4 	bl	8011e2c <uxr_buffer_cancel_data>
 8017a44:	4602      	mov	r2, r0
 8017a46:	6920      	ldr	r0, [r4, #16]
 8017a48:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017a4c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017a50:	f7f8 fe6e 	bl	8010730 <run_xrce_session>
 8017a54:	6920      	ldr	r0, [r4, #16]
 8017a56:	6932      	ldr	r2, [r6, #16]
 8017a58:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017a5c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017a60:	6819      	ldr	r1, [r3, #0]
 8017a62:	f7f9 ff79 	bl	8011958 <uxr_buffer_delete_entity>
 8017a66:	4602      	mov	r2, r0
 8017a68:	6920      	ldr	r0, [r4, #16]
 8017a6a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017a6e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017a72:	f7f8 fe5d 	bl	8010730 <run_xrce_session>
 8017a76:	2800      	cmp	r0, #0
 8017a78:	4628      	mov	r0, r5
 8017a7a:	bf14      	ite	ne
 8017a7c:	2400      	movne	r4, #0
 8017a7e:	2402      	moveq	r4, #2
 8017a80:	f7f8 fd30 	bl	80104e4 <rmw_uxrce_fini_service_memory>
 8017a84:	e7c5      	b.n	8017a12 <rmw_destroy_service+0x12>
 8017a86:	bf00      	nop

08017a88 <rmw_uxrce_transport_init>:
 8017a88:	b508      	push	{r3, lr}
 8017a8a:	b108      	cbz	r0, 8017a90 <rmw_uxrce_transport_init+0x8>
 8017a8c:	f100 0210 	add.w	r2, r0, #16
 8017a90:	b139      	cbz	r1, 8017aa2 <rmw_uxrce_transport_init+0x1a>
 8017a92:	6949      	ldr	r1, [r1, #20]
 8017a94:	4610      	mov	r0, r2
 8017a96:	f000 fbdf 	bl	8018258 <uxr_init_custom_transport>
 8017a9a:	f080 0001 	eor.w	r0, r0, #1
 8017a9e:	b2c0      	uxtb	r0, r0
 8017aa0:	bd08      	pop	{r3, pc}
 8017aa2:	4b04      	ldr	r3, [pc, #16]	; (8017ab4 <rmw_uxrce_transport_init+0x2c>)
 8017aa4:	4610      	mov	r0, r2
 8017aa6:	6859      	ldr	r1, [r3, #4]
 8017aa8:	f000 fbd6 	bl	8018258 <uxr_init_custom_transport>
 8017aac:	f080 0001 	eor.w	r0, r0, #1
 8017ab0:	b2c0      	uxtb	r0, r0
 8017ab2:	bd08      	pop	{r3, pc}
 8017ab4:	20009ec8 	.word	0x20009ec8

08017ab8 <rmw_wait>:
 8017ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017abc:	460f      	mov	r7, r1
 8017abe:	4606      	mov	r6, r0
 8017ac0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017ac2:	469a      	mov	sl, r3
 8017ac4:	4615      	mov	r5, r2
 8017ac6:	2a00      	cmp	r2, #0
 8017ac8:	f000 8122 	beq.w	8017d10 <rmw_wait+0x258>
 8017acc:	2900      	cmp	r1, #0
 8017ace:	f000 812a 	beq.w	8017d26 <rmw_wait+0x26e>
 8017ad2:	e9d1 2300 	ldrd	r2, r3, [r1]
 8017ad6:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8017ada:	015c      	lsls	r4, r3, #5
 8017adc:	ebbb 0b02 	subs.w	fp, fp, r2
 8017ae0:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8017ae4:	eb64 0403 	sbc.w	r4, r4, r3
 8017ae8:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8017aec:	00a4      	lsls	r4, r4, #2
 8017aee:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8017af2:	eb10 0b02 	adds.w	fp, r0, r2
 8017af6:	eb43 0404 	adc.w	r4, r3, r4
 8017afa:	4aad      	ldr	r2, [pc, #692]	; (8017db0 <rmw_wait+0x2f8>)
 8017afc:	2300      	movs	r3, #0
 8017afe:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8017b02:	f7e9 f8cb 	bl	8000c9c <__aeabi_uldivmod>
 8017b06:	00e4      	lsls	r4, r4, #3
 8017b08:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8017b0c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8017b10:	eb1b 0800 	adds.w	r8, fp, r0
 8017b14:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017b18:	eb44 0901 	adc.w	r9, r4, r1
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	4542      	cmp	r2, r8
 8017b20:	eb73 0109 	sbcs.w	r1, r3, r9
 8017b24:	f2c0 80f2 	blt.w	8017d0c <rmw_wait+0x254>
 8017b28:	f7f8 fd8a 	bl	8010640 <rmw_uxrce_clean_expired_static_input_buffer>
 8017b2c:	4ba1      	ldr	r3, [pc, #644]	; (8017db4 <rmw_wait+0x2fc>)
 8017b2e:	681c      	ldr	r4, [r3, #0]
 8017b30:	b144      	cbz	r4, 8017b44 <rmw_wait+0x8c>
 8017b32:	4623      	mov	r3, r4
 8017b34:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8017b38:	2100      	movs	r1, #0
 8017b3a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8017b3e:	5411      	strb	r1, [r2, r0]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d1fa      	bne.n	8017b3a <rmw_wait+0x82>
 8017b44:	b185      	cbz	r5, 8017b68 <rmw_wait+0xb0>
 8017b46:	6829      	ldr	r1, [r5, #0]
 8017b48:	b171      	cbz	r1, 8017b68 <rmw_wait+0xb0>
 8017b4a:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8017b4e:	2300      	movs	r3, #0
 8017b50:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017b54:	2001      	movs	r0, #1
 8017b56:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017b5a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017b5c:	3301      	adds	r3, #1
 8017b5e:	6912      	ldr	r2, [r2, #16]
 8017b60:	4299      	cmp	r1, r3
 8017b62:	f802 000c 	strb.w	r0, [r2, ip]
 8017b66:	d1f6      	bne.n	8017b56 <rmw_wait+0x9e>
 8017b68:	f1ba 0f00 	cmp.w	sl, #0
 8017b6c:	d011      	beq.n	8017b92 <rmw_wait+0xda>
 8017b6e:	f8da 1000 	ldr.w	r1, [sl]
 8017b72:	b171      	cbz	r1, 8017b92 <rmw_wait+0xda>
 8017b74:	f8da e004 	ldr.w	lr, [sl, #4]
 8017b78:	2300      	movs	r3, #0
 8017b7a:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017b7e:	2001      	movs	r0, #1
 8017b80:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017b84:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017b86:	3301      	adds	r3, #1
 8017b88:	6912      	ldr	r2, [r2, #16]
 8017b8a:	4299      	cmp	r1, r3
 8017b8c:	f802 000c 	strb.w	r0, [r2, ip]
 8017b90:	d1f6      	bne.n	8017b80 <rmw_wait+0xc8>
 8017b92:	b186      	cbz	r6, 8017bb6 <rmw_wait+0xfe>
 8017b94:	6831      	ldr	r1, [r6, #0]
 8017b96:	b171      	cbz	r1, 8017bb6 <rmw_wait+0xfe>
 8017b98:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017ba2:	2001      	movs	r0, #1
 8017ba4:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017ba8:	6a12      	ldr	r2, [r2, #32]
 8017baa:	3301      	adds	r3, #1
 8017bac:	6912      	ldr	r2, [r2, #16]
 8017bae:	4299      	cmp	r1, r3
 8017bb0:	f802 000c 	strb.w	r0, [r2, ip]
 8017bb4:	d1f6      	bne.n	8017ba4 <rmw_wait+0xec>
 8017bb6:	b34c      	cbz	r4, 8017c0c <rmw_wait+0x154>
 8017bb8:	4622      	mov	r2, r4
 8017bba:	2300      	movs	r3, #0
 8017bbc:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8017bc0:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8017bc4:	5c09      	ldrb	r1, [r1, r0]
 8017bc6:	440b      	add	r3, r1
 8017bc8:	b2db      	uxtb	r3, r3
 8017bca:	2a00      	cmp	r2, #0
 8017bcc:	d1f8      	bne.n	8017bc0 <rmw_wait+0x108>
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	f000 8082 	beq.w	8017cd8 <rmw_wait+0x220>
 8017bd4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8017bd8:	d00d      	beq.n	8017bf6 <rmw_wait+0x13e>
 8017bda:	ee07 8a90 	vmov	s15, r8
 8017bde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017be2:	ee07 3a90 	vmov	s15, r3
 8017be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017bee:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017bf2:	ee17 8a90 	vmov	r8, s15
 8017bf6:	f241 59a4 	movw	r9, #5540	; 0x15a4
 8017bfa:	68e0      	ldr	r0, [r4, #12]
 8017bfc:	f810 3009 	ldrb.w	r3, [r0, r9]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	f040 8093 	bne.w	8017d2c <rmw_wait+0x274>
 8017c06:	68a4      	ldr	r4, [r4, #8]
 8017c08:	2c00      	cmp	r4, #0
 8017c0a:	d1f6      	bne.n	8017bfa <rmw_wait+0x142>
 8017c0c:	2d00      	cmp	r5, #0
 8017c0e:	f000 80ac 	beq.w	8017d6a <rmw_wait+0x2b2>
 8017c12:	682b      	ldr	r3, [r5, #0]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	f000 8093 	beq.w	8017d40 <rmw_wait+0x288>
 8017c1a:	2400      	movs	r4, #0
 8017c1c:	46a0      	mov	r8, r4
 8017c1e:	686b      	ldr	r3, [r5, #4]
 8017c20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c24:	f7f8 fce2 	bl	80105ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c28:	2800      	cmp	r0, #0
 8017c2a:	d05f      	beq.n	8017cec <rmw_wait+0x234>
 8017c2c:	682b      	ldr	r3, [r5, #0]
 8017c2e:	3401      	adds	r4, #1
 8017c30:	42a3      	cmp	r3, r4
 8017c32:	f04f 0801 	mov.w	r8, #1
 8017c36:	d8f2      	bhi.n	8017c1e <rmw_wait+0x166>
 8017c38:	f1ba 0f00 	cmp.w	sl, #0
 8017c3c:	d012      	beq.n	8017c64 <rmw_wait+0x1ac>
 8017c3e:	f8da 3000 	ldr.w	r3, [sl]
 8017c42:	b17b      	cbz	r3, 8017c64 <rmw_wait+0x1ac>
 8017c44:	2400      	movs	r4, #0
 8017c46:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017c4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c4e:	f7f8 fccd 	bl	80105ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c52:	2800      	cmp	r0, #0
 8017c54:	d052      	beq.n	8017cfc <rmw_wait+0x244>
 8017c56:	f8da 3000 	ldr.w	r3, [sl]
 8017c5a:	3401      	adds	r4, #1
 8017c5c:	42a3      	cmp	r3, r4
 8017c5e:	f04f 0801 	mov.w	r8, #1
 8017c62:	d8f0      	bhi.n	8017c46 <rmw_wait+0x18e>
 8017c64:	b1e6      	cbz	r6, 8017ca0 <rmw_wait+0x1e8>
 8017c66:	6833      	ldr	r3, [r6, #0]
 8017c68:	b1d3      	cbz	r3, 8017ca0 <rmw_wait+0x1e8>
 8017c6a:	2400      	movs	r4, #0
 8017c6c:	6873      	ldr	r3, [r6, #4]
 8017c6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c72:	f7f8 fcbb 	bl	80105ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c76:	b160      	cbz	r0, 8017c92 <rmw_wait+0x1da>
 8017c78:	6833      	ldr	r3, [r6, #0]
 8017c7a:	3401      	adds	r4, #1
 8017c7c:	42a3      	cmp	r3, r4
 8017c7e:	d96c      	bls.n	8017d5a <rmw_wait+0x2a2>
 8017c80:	6873      	ldr	r3, [r6, #4]
 8017c82:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c86:	f04f 0801 	mov.w	r8, #1
 8017c8a:	f7f8 fcaf 	bl	80105ec <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c8e:	2800      	cmp	r0, #0
 8017c90:	d1f2      	bne.n	8017c78 <rmw_wait+0x1c0>
 8017c92:	e9d6 3200 	ldrd	r3, r2, [r6]
 8017c96:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017c9a:	3401      	adds	r4, #1
 8017c9c:	42a3      	cmp	r3, r4
 8017c9e:	d8e5      	bhi.n	8017c6c <rmw_wait+0x1b4>
 8017ca0:	b1a7      	cbz	r7, 8017ccc <rmw_wait+0x214>
 8017ca2:	683c      	ldr	r4, [r7, #0]
 8017ca4:	b194      	cbz	r4, 8017ccc <rmw_wait+0x214>
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	461d      	mov	r5, r3
 8017caa:	e004      	b.n	8017cb6 <rmw_wait+0x1fe>
 8017cac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	42a3      	cmp	r3, r4
 8017cb4:	d00a      	beq.n	8017ccc <rmw_wait+0x214>
 8017cb6:	6878      	ldr	r0, [r7, #4]
 8017cb8:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017cbc:	7c0a      	ldrb	r2, [r1, #16]
 8017cbe:	2a00      	cmp	r2, #0
 8017cc0:	d0f4      	beq.n	8017cac <rmw_wait+0x1f4>
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	42a3      	cmp	r3, r4
 8017cc6:	740d      	strb	r5, [r1, #16]
 8017cc8:	4690      	mov	r8, r2
 8017cca:	d1f4      	bne.n	8017cb6 <rmw_wait+0x1fe>
 8017ccc:	f1b8 0f00 	cmp.w	r8, #0
 8017cd0:	d040      	beq.n	8017d54 <rmw_wait+0x29c>
 8017cd2:	2000      	movs	r0, #0
 8017cd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cd8:	68e0      	ldr	r0, [r4, #12]
 8017cda:	2100      	movs	r1, #0
 8017cdc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017ce0:	f7fa fe30 	bl	8012944 <uxr_run_session_timeout>
 8017ce4:	68a4      	ldr	r4, [r4, #8]
 8017ce6:	2c00      	cmp	r4, #0
 8017ce8:	d1f6      	bne.n	8017cd8 <rmw_wait+0x220>
 8017cea:	e78f      	b.n	8017c0c <rmw_wait+0x154>
 8017cec:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017cf0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017cf4:	3401      	adds	r4, #1
 8017cf6:	42a3      	cmp	r3, r4
 8017cf8:	d891      	bhi.n	8017c1e <rmw_wait+0x166>
 8017cfa:	e79d      	b.n	8017c38 <rmw_wait+0x180>
 8017cfc:	e9da 3200 	ldrd	r3, r2, [sl]
 8017d00:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017d04:	3401      	adds	r4, #1
 8017d06:	429c      	cmp	r4, r3
 8017d08:	d39d      	bcc.n	8017c46 <rmw_wait+0x18e>
 8017d0a:	e7ab      	b.n	8017c64 <rmw_wait+0x1ac>
 8017d0c:	4690      	mov	r8, r2
 8017d0e:	e70b      	b.n	8017b28 <rmw_wait+0x70>
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	f47f aedb 	bne.w	8017acc <rmw_wait+0x14>
 8017d16:	2800      	cmp	r0, #0
 8017d18:	f47f aed8 	bne.w	8017acc <rmw_wait+0x14>
 8017d1c:	2f00      	cmp	r7, #0
 8017d1e:	d0d8      	beq.n	8017cd2 <rmw_wait+0x21a>
 8017d20:	2900      	cmp	r1, #0
 8017d22:	f47f aed6 	bne.w	8017ad2 <rmw_wait+0x1a>
 8017d26:	f04f 38ff 	mov.w	r8, #4294967295
 8017d2a:	e6fd      	b.n	8017b28 <rmw_wait+0x70>
 8017d2c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017d30:	4641      	mov	r1, r8
 8017d32:	f7fa fe21 	bl	8012978 <uxr_run_session_until_data>
 8017d36:	68a4      	ldr	r4, [r4, #8]
 8017d38:	2c00      	cmp	r4, #0
 8017d3a:	f47f af5e 	bne.w	8017bfa <rmw_wait+0x142>
 8017d3e:	e765      	b.n	8017c0c <rmw_wait+0x154>
 8017d40:	f1ba 0f00 	cmp.w	sl, #0
 8017d44:	d11e      	bne.n	8017d84 <rmw_wait+0x2cc>
 8017d46:	b35e      	cbz	r6, 8017da0 <rmw_wait+0x2e8>
 8017d48:	6833      	ldr	r3, [r6, #0]
 8017d4a:	46d0      	mov	r8, sl
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d18c      	bne.n	8017c6a <rmw_wait+0x1b2>
 8017d50:	2f00      	cmp	r7, #0
 8017d52:	d1a6      	bne.n	8017ca2 <rmw_wait+0x1ea>
 8017d54:	2002      	movs	r0, #2
 8017d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d5a:	2f00      	cmp	r7, #0
 8017d5c:	d0b9      	beq.n	8017cd2 <rmw_wait+0x21a>
 8017d5e:	683c      	ldr	r4, [r7, #0]
 8017d60:	f04f 0801 	mov.w	r8, #1
 8017d64:	2c00      	cmp	r4, #0
 8017d66:	d19e      	bne.n	8017ca6 <rmw_wait+0x1ee>
 8017d68:	e7b3      	b.n	8017cd2 <rmw_wait+0x21a>
 8017d6a:	f1ba 0f00 	cmp.w	sl, #0
 8017d6e:	d0ea      	beq.n	8017d46 <rmw_wait+0x28e>
 8017d70:	f8da 3000 	ldr.w	r3, [sl]
 8017d74:	46a8      	mov	r8, r5
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	f47f af64 	bne.w	8017c44 <rmw_wait+0x18c>
 8017d7c:	2e00      	cmp	r6, #0
 8017d7e:	f47f af72 	bne.w	8017c66 <rmw_wait+0x1ae>
 8017d82:	e009      	b.n	8017d98 <rmw_wait+0x2e0>
 8017d84:	f8da 2000 	ldr.w	r2, [sl]
 8017d88:	4698      	mov	r8, r3
 8017d8a:	2a00      	cmp	r2, #0
 8017d8c:	f47f af5a 	bne.w	8017c44 <rmw_wait+0x18c>
 8017d90:	4690      	mov	r8, r2
 8017d92:	2e00      	cmp	r6, #0
 8017d94:	f47f af67 	bne.w	8017c66 <rmw_wait+0x1ae>
 8017d98:	46b0      	mov	r8, r6
 8017d9a:	2f00      	cmp	r7, #0
 8017d9c:	d181      	bne.n	8017ca2 <rmw_wait+0x1ea>
 8017d9e:	e7d9      	b.n	8017d54 <rmw_wait+0x29c>
 8017da0:	2f00      	cmp	r7, #0
 8017da2:	d0d7      	beq.n	8017d54 <rmw_wait+0x29c>
 8017da4:	683c      	ldr	r4, [r7, #0]
 8017da6:	46b0      	mov	r8, r6
 8017da8:	2c00      	cmp	r4, #0
 8017daa:	f47f af7c 	bne.w	8017ca6 <rmw_wait+0x1ee>
 8017dae:	e7d1      	b.n	8017d54 <rmw_wait+0x29c>
 8017db0:	000f4240 	.word	0x000f4240
 8017db4:	2000d090 	.word	0x2000d090

08017db8 <rmw_create_wait_set>:
 8017db8:	b508      	push	{r3, lr}
 8017dba:	4803      	ldr	r0, [pc, #12]	; (8017dc8 <rmw_create_wait_set+0x10>)
 8017dbc:	f7ff f8d0 	bl	8016f60 <get_memory>
 8017dc0:	b108      	cbz	r0, 8017dc6 <rmw_create_wait_set+0xe>
 8017dc2:	68c0      	ldr	r0, [r0, #12]
 8017dc4:	3010      	adds	r0, #16
 8017dc6:	bd08      	pop	{r3, pc}
 8017dc8:	2000e868 	.word	0x2000e868

08017dcc <rmw_destroy_wait_set>:
 8017dcc:	b508      	push	{r3, lr}
 8017dce:	4b08      	ldr	r3, [pc, #32]	; (8017df0 <rmw_destroy_wait_set+0x24>)
 8017dd0:	6819      	ldr	r1, [r3, #0]
 8017dd2:	b911      	cbnz	r1, 8017dda <rmw_destroy_wait_set+0xe>
 8017dd4:	e00a      	b.n	8017dec <rmw_destroy_wait_set+0x20>
 8017dd6:	6889      	ldr	r1, [r1, #8]
 8017dd8:	b141      	cbz	r1, 8017dec <rmw_destroy_wait_set+0x20>
 8017dda:	68cb      	ldr	r3, [r1, #12]
 8017ddc:	3310      	adds	r3, #16
 8017dde:	4298      	cmp	r0, r3
 8017de0:	d1f9      	bne.n	8017dd6 <rmw_destroy_wait_set+0xa>
 8017de2:	4803      	ldr	r0, [pc, #12]	; (8017df0 <rmw_destroy_wait_set+0x24>)
 8017de4:	f7ff f8cc 	bl	8016f80 <put_memory>
 8017de8:	2000      	movs	r0, #0
 8017dea:	bd08      	pop	{r3, pc}
 8017dec:	2001      	movs	r0, #1
 8017dee:	bd08      	pop	{r3, pc}
 8017df0:	2000e868 	.word	0x2000e868

08017df4 <rmw_uros_epoch_nanos>:
 8017df4:	4b05      	ldr	r3, [pc, #20]	; (8017e0c <rmw_uros_epoch_nanos+0x18>)
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	b123      	cbz	r3, 8017e04 <rmw_uros_epoch_nanos+0x10>
 8017dfa:	68d8      	ldr	r0, [r3, #12]
 8017dfc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017e00:	f7fa ba14 	b.w	801222c <uxr_epoch_nanos>
 8017e04:	2000      	movs	r0, #0
 8017e06:	2100      	movs	r1, #0
 8017e08:	4770      	bx	lr
 8017e0a:	bf00      	nop
 8017e0c:	2000d090 	.word	0x2000d090

08017e10 <ucdr_serialize_endian_array_char>:
 8017e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e14:	4619      	mov	r1, r3
 8017e16:	461e      	mov	r6, r3
 8017e18:	4690      	mov	r8, r2
 8017e1a:	4604      	mov	r4, r0
 8017e1c:	f7f9 fcda 	bl	80117d4 <ucdr_check_buffer_available_for>
 8017e20:	b9e0      	cbnz	r0, 8017e5c <ucdr_serialize_endian_array_char+0x4c>
 8017e22:	4637      	mov	r7, r6
 8017e24:	e009      	b.n	8017e3a <ucdr_serialize_endian_array_char+0x2a>
 8017e26:	68a0      	ldr	r0, [r4, #8]
 8017e28:	f002 fc3d 	bl	801a6a6 <memcpy>
 8017e2c:	68a2      	ldr	r2, [r4, #8]
 8017e2e:	6923      	ldr	r3, [r4, #16]
 8017e30:	442a      	add	r2, r5
 8017e32:	442b      	add	r3, r5
 8017e34:	1b7f      	subs	r7, r7, r5
 8017e36:	60a2      	str	r2, [r4, #8]
 8017e38:	6123      	str	r3, [r4, #16]
 8017e3a:	2201      	movs	r2, #1
 8017e3c:	4639      	mov	r1, r7
 8017e3e:	4620      	mov	r0, r4
 8017e40:	f7f9 fd4e 	bl	80118e0 <ucdr_check_final_buffer_behavior_array>
 8017e44:	1bf1      	subs	r1, r6, r7
 8017e46:	4441      	add	r1, r8
 8017e48:	4605      	mov	r5, r0
 8017e4a:	4602      	mov	r2, r0
 8017e4c:	2800      	cmp	r0, #0
 8017e4e:	d1ea      	bne.n	8017e26 <ucdr_serialize_endian_array_char+0x16>
 8017e50:	2301      	movs	r3, #1
 8017e52:	7da0      	ldrb	r0, [r4, #22]
 8017e54:	7563      	strb	r3, [r4, #21]
 8017e56:	4058      	eors	r0, r3
 8017e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e5c:	4632      	mov	r2, r6
 8017e5e:	68a0      	ldr	r0, [r4, #8]
 8017e60:	4641      	mov	r1, r8
 8017e62:	f002 fc20 	bl	801a6a6 <memcpy>
 8017e66:	68a2      	ldr	r2, [r4, #8]
 8017e68:	6923      	ldr	r3, [r4, #16]
 8017e6a:	4432      	add	r2, r6
 8017e6c:	4433      	add	r3, r6
 8017e6e:	60a2      	str	r2, [r4, #8]
 8017e70:	6123      	str	r3, [r4, #16]
 8017e72:	e7ed      	b.n	8017e50 <ucdr_serialize_endian_array_char+0x40>

08017e74 <ucdr_deserialize_endian_array_char>:
 8017e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e78:	4619      	mov	r1, r3
 8017e7a:	461e      	mov	r6, r3
 8017e7c:	4690      	mov	r8, r2
 8017e7e:	4604      	mov	r4, r0
 8017e80:	f7f9 fca8 	bl	80117d4 <ucdr_check_buffer_available_for>
 8017e84:	b9e0      	cbnz	r0, 8017ec0 <ucdr_deserialize_endian_array_char+0x4c>
 8017e86:	4637      	mov	r7, r6
 8017e88:	e009      	b.n	8017e9e <ucdr_deserialize_endian_array_char+0x2a>
 8017e8a:	68a1      	ldr	r1, [r4, #8]
 8017e8c:	f002 fc0b 	bl	801a6a6 <memcpy>
 8017e90:	68a2      	ldr	r2, [r4, #8]
 8017e92:	6923      	ldr	r3, [r4, #16]
 8017e94:	442a      	add	r2, r5
 8017e96:	442b      	add	r3, r5
 8017e98:	1b7f      	subs	r7, r7, r5
 8017e9a:	60a2      	str	r2, [r4, #8]
 8017e9c:	6123      	str	r3, [r4, #16]
 8017e9e:	2201      	movs	r2, #1
 8017ea0:	4639      	mov	r1, r7
 8017ea2:	4620      	mov	r0, r4
 8017ea4:	f7f9 fd1c 	bl	80118e0 <ucdr_check_final_buffer_behavior_array>
 8017ea8:	4605      	mov	r5, r0
 8017eaa:	1bf0      	subs	r0, r6, r7
 8017eac:	4440      	add	r0, r8
 8017eae:	462a      	mov	r2, r5
 8017eb0:	2d00      	cmp	r5, #0
 8017eb2:	d1ea      	bne.n	8017e8a <ucdr_deserialize_endian_array_char+0x16>
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	7da0      	ldrb	r0, [r4, #22]
 8017eb8:	7563      	strb	r3, [r4, #21]
 8017eba:	4058      	eors	r0, r3
 8017ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ec0:	4632      	mov	r2, r6
 8017ec2:	68a1      	ldr	r1, [r4, #8]
 8017ec4:	4640      	mov	r0, r8
 8017ec6:	f002 fbee 	bl	801a6a6 <memcpy>
 8017eca:	68a2      	ldr	r2, [r4, #8]
 8017ecc:	6923      	ldr	r3, [r4, #16]
 8017ece:	4432      	add	r2, r6
 8017ed0:	4433      	add	r3, r6
 8017ed2:	60a2      	str	r2, [r4, #8]
 8017ed4:	6123      	str	r3, [r4, #16]
 8017ed6:	e7ed      	b.n	8017eb4 <ucdr_deserialize_endian_array_char+0x40>

08017ed8 <ucdr_serialize_array_uint8_t>:
 8017ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017edc:	4688      	mov	r8, r1
 8017ede:	4611      	mov	r1, r2
 8017ee0:	4616      	mov	r6, r2
 8017ee2:	4604      	mov	r4, r0
 8017ee4:	f7f9 fc76 	bl	80117d4 <ucdr_check_buffer_available_for>
 8017ee8:	b9e0      	cbnz	r0, 8017f24 <ucdr_serialize_array_uint8_t+0x4c>
 8017eea:	4637      	mov	r7, r6
 8017eec:	e009      	b.n	8017f02 <ucdr_serialize_array_uint8_t+0x2a>
 8017eee:	68a0      	ldr	r0, [r4, #8]
 8017ef0:	f002 fbd9 	bl	801a6a6 <memcpy>
 8017ef4:	68a2      	ldr	r2, [r4, #8]
 8017ef6:	6923      	ldr	r3, [r4, #16]
 8017ef8:	442a      	add	r2, r5
 8017efa:	442b      	add	r3, r5
 8017efc:	1b7f      	subs	r7, r7, r5
 8017efe:	60a2      	str	r2, [r4, #8]
 8017f00:	6123      	str	r3, [r4, #16]
 8017f02:	2201      	movs	r2, #1
 8017f04:	4639      	mov	r1, r7
 8017f06:	4620      	mov	r0, r4
 8017f08:	f7f9 fcea 	bl	80118e0 <ucdr_check_final_buffer_behavior_array>
 8017f0c:	1bf1      	subs	r1, r6, r7
 8017f0e:	4441      	add	r1, r8
 8017f10:	4605      	mov	r5, r0
 8017f12:	4602      	mov	r2, r0
 8017f14:	2800      	cmp	r0, #0
 8017f16:	d1ea      	bne.n	8017eee <ucdr_serialize_array_uint8_t+0x16>
 8017f18:	2301      	movs	r3, #1
 8017f1a:	7da0      	ldrb	r0, [r4, #22]
 8017f1c:	7563      	strb	r3, [r4, #21]
 8017f1e:	4058      	eors	r0, r3
 8017f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f24:	4632      	mov	r2, r6
 8017f26:	68a0      	ldr	r0, [r4, #8]
 8017f28:	4641      	mov	r1, r8
 8017f2a:	f002 fbbc 	bl	801a6a6 <memcpy>
 8017f2e:	68a3      	ldr	r3, [r4, #8]
 8017f30:	6922      	ldr	r2, [r4, #16]
 8017f32:	4433      	add	r3, r6
 8017f34:	4432      	add	r2, r6
 8017f36:	60a3      	str	r3, [r4, #8]
 8017f38:	6122      	str	r2, [r4, #16]
 8017f3a:	e7ed      	b.n	8017f18 <ucdr_serialize_array_uint8_t+0x40>

08017f3c <ucdr_serialize_endian_array_uint8_t>:
 8017f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f40:	4619      	mov	r1, r3
 8017f42:	461e      	mov	r6, r3
 8017f44:	4690      	mov	r8, r2
 8017f46:	4604      	mov	r4, r0
 8017f48:	f7f9 fc44 	bl	80117d4 <ucdr_check_buffer_available_for>
 8017f4c:	b9e0      	cbnz	r0, 8017f88 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017f4e:	4637      	mov	r7, r6
 8017f50:	e009      	b.n	8017f66 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8017f52:	68a0      	ldr	r0, [r4, #8]
 8017f54:	f002 fba7 	bl	801a6a6 <memcpy>
 8017f58:	68a2      	ldr	r2, [r4, #8]
 8017f5a:	6923      	ldr	r3, [r4, #16]
 8017f5c:	442a      	add	r2, r5
 8017f5e:	442b      	add	r3, r5
 8017f60:	1b7f      	subs	r7, r7, r5
 8017f62:	60a2      	str	r2, [r4, #8]
 8017f64:	6123      	str	r3, [r4, #16]
 8017f66:	2201      	movs	r2, #1
 8017f68:	4639      	mov	r1, r7
 8017f6a:	4620      	mov	r0, r4
 8017f6c:	f7f9 fcb8 	bl	80118e0 <ucdr_check_final_buffer_behavior_array>
 8017f70:	1bf1      	subs	r1, r6, r7
 8017f72:	4441      	add	r1, r8
 8017f74:	4605      	mov	r5, r0
 8017f76:	4602      	mov	r2, r0
 8017f78:	2800      	cmp	r0, #0
 8017f7a:	d1ea      	bne.n	8017f52 <ucdr_serialize_endian_array_uint8_t+0x16>
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	7da0      	ldrb	r0, [r4, #22]
 8017f80:	7563      	strb	r3, [r4, #21]
 8017f82:	4058      	eors	r0, r3
 8017f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f88:	4632      	mov	r2, r6
 8017f8a:	68a0      	ldr	r0, [r4, #8]
 8017f8c:	4641      	mov	r1, r8
 8017f8e:	f002 fb8a 	bl	801a6a6 <memcpy>
 8017f92:	68a2      	ldr	r2, [r4, #8]
 8017f94:	6923      	ldr	r3, [r4, #16]
 8017f96:	4432      	add	r2, r6
 8017f98:	4433      	add	r3, r6
 8017f9a:	60a2      	str	r2, [r4, #8]
 8017f9c:	6123      	str	r3, [r4, #16]
 8017f9e:	e7ed      	b.n	8017f7c <ucdr_serialize_endian_array_uint8_t+0x40>

08017fa0 <ucdr_deserialize_array_uint8_t>:
 8017fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fa4:	4688      	mov	r8, r1
 8017fa6:	4611      	mov	r1, r2
 8017fa8:	4616      	mov	r6, r2
 8017faa:	4604      	mov	r4, r0
 8017fac:	f7f9 fc12 	bl	80117d4 <ucdr_check_buffer_available_for>
 8017fb0:	b9e0      	cbnz	r0, 8017fec <ucdr_deserialize_array_uint8_t+0x4c>
 8017fb2:	4637      	mov	r7, r6
 8017fb4:	e009      	b.n	8017fca <ucdr_deserialize_array_uint8_t+0x2a>
 8017fb6:	68a1      	ldr	r1, [r4, #8]
 8017fb8:	f002 fb75 	bl	801a6a6 <memcpy>
 8017fbc:	68a2      	ldr	r2, [r4, #8]
 8017fbe:	6923      	ldr	r3, [r4, #16]
 8017fc0:	442a      	add	r2, r5
 8017fc2:	442b      	add	r3, r5
 8017fc4:	1b7f      	subs	r7, r7, r5
 8017fc6:	60a2      	str	r2, [r4, #8]
 8017fc8:	6123      	str	r3, [r4, #16]
 8017fca:	2201      	movs	r2, #1
 8017fcc:	4639      	mov	r1, r7
 8017fce:	4620      	mov	r0, r4
 8017fd0:	f7f9 fc86 	bl	80118e0 <ucdr_check_final_buffer_behavior_array>
 8017fd4:	4605      	mov	r5, r0
 8017fd6:	1bf0      	subs	r0, r6, r7
 8017fd8:	4440      	add	r0, r8
 8017fda:	462a      	mov	r2, r5
 8017fdc:	2d00      	cmp	r5, #0
 8017fde:	d1ea      	bne.n	8017fb6 <ucdr_deserialize_array_uint8_t+0x16>
 8017fe0:	2301      	movs	r3, #1
 8017fe2:	7da0      	ldrb	r0, [r4, #22]
 8017fe4:	7563      	strb	r3, [r4, #21]
 8017fe6:	4058      	eors	r0, r3
 8017fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fec:	4632      	mov	r2, r6
 8017fee:	68a1      	ldr	r1, [r4, #8]
 8017ff0:	4640      	mov	r0, r8
 8017ff2:	f002 fb58 	bl	801a6a6 <memcpy>
 8017ff6:	68a3      	ldr	r3, [r4, #8]
 8017ff8:	6922      	ldr	r2, [r4, #16]
 8017ffa:	4433      	add	r3, r6
 8017ffc:	4432      	add	r2, r6
 8017ffe:	60a3      	str	r3, [r4, #8]
 8018000:	6122      	str	r2, [r4, #16]
 8018002:	e7ed      	b.n	8017fe0 <ucdr_deserialize_array_uint8_t+0x40>

08018004 <ucdr_deserialize_endian_array_uint8_t>:
 8018004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018008:	4619      	mov	r1, r3
 801800a:	461e      	mov	r6, r3
 801800c:	4690      	mov	r8, r2
 801800e:	4604      	mov	r4, r0
 8018010:	f7f9 fbe0 	bl	80117d4 <ucdr_check_buffer_available_for>
 8018014:	b9e0      	cbnz	r0, 8018050 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8018016:	4637      	mov	r7, r6
 8018018:	e009      	b.n	801802e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801801a:	68a1      	ldr	r1, [r4, #8]
 801801c:	f002 fb43 	bl	801a6a6 <memcpy>
 8018020:	68a2      	ldr	r2, [r4, #8]
 8018022:	6923      	ldr	r3, [r4, #16]
 8018024:	442a      	add	r2, r5
 8018026:	442b      	add	r3, r5
 8018028:	1b7f      	subs	r7, r7, r5
 801802a:	60a2      	str	r2, [r4, #8]
 801802c:	6123      	str	r3, [r4, #16]
 801802e:	2201      	movs	r2, #1
 8018030:	4639      	mov	r1, r7
 8018032:	4620      	mov	r0, r4
 8018034:	f7f9 fc54 	bl	80118e0 <ucdr_check_final_buffer_behavior_array>
 8018038:	4605      	mov	r5, r0
 801803a:	1bf0      	subs	r0, r6, r7
 801803c:	4440      	add	r0, r8
 801803e:	462a      	mov	r2, r5
 8018040:	2d00      	cmp	r5, #0
 8018042:	d1ea      	bne.n	801801a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8018044:	2301      	movs	r3, #1
 8018046:	7da0      	ldrb	r0, [r4, #22]
 8018048:	7563      	strb	r3, [r4, #21]
 801804a:	4058      	eors	r0, r3
 801804c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018050:	4632      	mov	r2, r6
 8018052:	68a1      	ldr	r1, [r4, #8]
 8018054:	4640      	mov	r0, r8
 8018056:	f002 fb26 	bl	801a6a6 <memcpy>
 801805a:	68a2      	ldr	r2, [r4, #8]
 801805c:	6923      	ldr	r3, [r4, #16]
 801805e:	4432      	add	r2, r6
 8018060:	4433      	add	r3, r6
 8018062:	60a2      	str	r2, [r4, #8]
 8018064:	6123      	str	r3, [r4, #16]
 8018066:	e7ed      	b.n	8018044 <ucdr_deserialize_endian_array_uint8_t+0x40>

08018068 <ucdr_serialize_sequence_char>:
 8018068:	b570      	push	{r4, r5, r6, lr}
 801806a:	460e      	mov	r6, r1
 801806c:	4615      	mov	r5, r2
 801806e:	7d01      	ldrb	r1, [r0, #20]
 8018070:	4604      	mov	r4, r0
 8018072:	f7f8 ff05 	bl	8010e80 <ucdr_serialize_endian_uint32_t>
 8018076:	b90d      	cbnz	r5, 801807c <ucdr_serialize_sequence_char+0x14>
 8018078:	2001      	movs	r0, #1
 801807a:	bd70      	pop	{r4, r5, r6, pc}
 801807c:	7d21      	ldrb	r1, [r4, #20]
 801807e:	462b      	mov	r3, r5
 8018080:	4632      	mov	r2, r6
 8018082:	4620      	mov	r0, r4
 8018084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018088:	f7ff bec2 	b.w	8017e10 <ucdr_serialize_endian_array_char>

0801808c <ucdr_deserialize_sequence_char>:
 801808c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018090:	461d      	mov	r5, r3
 8018092:	4616      	mov	r6, r2
 8018094:	460f      	mov	r7, r1
 8018096:	461a      	mov	r2, r3
 8018098:	7d01      	ldrb	r1, [r0, #20]
 801809a:	4604      	mov	r4, r0
 801809c:	f7f9 f818 	bl	80110d0 <ucdr_deserialize_endian_uint32_t>
 80180a0:	682b      	ldr	r3, [r5, #0]
 80180a2:	429e      	cmp	r6, r3
 80180a4:	bf3c      	itt	cc
 80180a6:	2201      	movcc	r2, #1
 80180a8:	75a2      	strbcc	r2, [r4, #22]
 80180aa:	b913      	cbnz	r3, 80180b2 <ucdr_deserialize_sequence_char+0x26>
 80180ac:	2001      	movs	r0, #1
 80180ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180b2:	7d21      	ldrb	r1, [r4, #20]
 80180b4:	463a      	mov	r2, r7
 80180b6:	4620      	mov	r0, r4
 80180b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180bc:	f7ff beda 	b.w	8017e74 <ucdr_deserialize_endian_array_char>

080180c0 <ucdr_serialize_sequence_uint8_t>:
 80180c0:	b570      	push	{r4, r5, r6, lr}
 80180c2:	460e      	mov	r6, r1
 80180c4:	4615      	mov	r5, r2
 80180c6:	7d01      	ldrb	r1, [r0, #20]
 80180c8:	4604      	mov	r4, r0
 80180ca:	f7f8 fed9 	bl	8010e80 <ucdr_serialize_endian_uint32_t>
 80180ce:	b90d      	cbnz	r5, 80180d4 <ucdr_serialize_sequence_uint8_t+0x14>
 80180d0:	2001      	movs	r0, #1
 80180d2:	bd70      	pop	{r4, r5, r6, pc}
 80180d4:	7d21      	ldrb	r1, [r4, #20]
 80180d6:	462b      	mov	r3, r5
 80180d8:	4632      	mov	r2, r6
 80180da:	4620      	mov	r0, r4
 80180dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180e0:	f7ff bf2c 	b.w	8017f3c <ucdr_serialize_endian_array_uint8_t>

080180e4 <ucdr_deserialize_sequence_uint8_t>:
 80180e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180e8:	461d      	mov	r5, r3
 80180ea:	4616      	mov	r6, r2
 80180ec:	460f      	mov	r7, r1
 80180ee:	461a      	mov	r2, r3
 80180f0:	7d01      	ldrb	r1, [r0, #20]
 80180f2:	4604      	mov	r4, r0
 80180f4:	f7f8 ffec 	bl	80110d0 <ucdr_deserialize_endian_uint32_t>
 80180f8:	682b      	ldr	r3, [r5, #0]
 80180fa:	429e      	cmp	r6, r3
 80180fc:	bf3c      	itt	cc
 80180fe:	2201      	movcc	r2, #1
 8018100:	75a2      	strbcc	r2, [r4, #22]
 8018102:	b913      	cbnz	r3, 801810a <ucdr_deserialize_sequence_uint8_t+0x26>
 8018104:	2001      	movs	r0, #1
 8018106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801810a:	7d21      	ldrb	r1, [r4, #20]
 801810c:	463a      	mov	r2, r7
 801810e:	4620      	mov	r0, r4
 8018110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018114:	f7ff bf76 	b.w	8018004 <ucdr_deserialize_endian_array_uint8_t>

08018118 <ucdr_serialize_string>:
 8018118:	b510      	push	{r4, lr}
 801811a:	b082      	sub	sp, #8
 801811c:	4604      	mov	r4, r0
 801811e:	4608      	mov	r0, r1
 8018120:	9101      	str	r1, [sp, #4]
 8018122:	f7e8 f867 	bl	80001f4 <strlen>
 8018126:	9901      	ldr	r1, [sp, #4]
 8018128:	4602      	mov	r2, r0
 801812a:	3201      	adds	r2, #1
 801812c:	4620      	mov	r0, r4
 801812e:	b002      	add	sp, #8
 8018130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018134:	f7ff bf98 	b.w	8018068 <ucdr_serialize_sequence_char>

08018138 <ucdr_deserialize_string>:
 8018138:	b500      	push	{lr}
 801813a:	b083      	sub	sp, #12
 801813c:	ab01      	add	r3, sp, #4
 801813e:	f7ff ffa5 	bl	801808c <ucdr_deserialize_sequence_char>
 8018142:	b003      	add	sp, #12
 8018144:	f85d fb04 	ldr.w	pc, [sp], #4

08018148 <get_custom_error>:
 8018148:	4b01      	ldr	r3, [pc, #4]	; (8018150 <get_custom_error+0x8>)
 801814a:	7818      	ldrb	r0, [r3, #0]
 801814c:	4770      	bx	lr
 801814e:	bf00      	nop
 8018150:	20009d48 	.word	0x20009d48

08018154 <recv_custom_msg>:
 8018154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018158:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801815c:	b089      	sub	sp, #36	; 0x24
 801815e:	2600      	movs	r6, #0
 8018160:	4604      	mov	r4, r0
 8018162:	9305      	str	r3, [sp, #20]
 8018164:	468a      	mov	sl, r1
 8018166:	4693      	mov	fp, r2
 8018168:	f88d 601e 	strb.w	r6, [sp, #30]
 801816c:	b325      	cbz	r5, 80181b8 <recv_custom_msg+0x64>
 801816e:	f200 2902 	addw	r9, r0, #514	; 0x202
 8018172:	f10d 081f 	add.w	r8, sp, #31
 8018176:	af05      	add	r7, sp, #20
 8018178:	f10d 061e 	add.w	r6, sp, #30
 801817c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8018180:	e002      	b.n	8018188 <recv_custom_msg+0x34>
 8018182:	9b05      	ldr	r3, [sp, #20]
 8018184:	2b00      	cmp	r3, #0
 8018186:	dd0f      	ble.n	80181a8 <recv_custom_msg+0x54>
 8018188:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801818c:	e9cd 5600 	strd	r5, r6, [sp]
 8018190:	4623      	mov	r3, r4
 8018192:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8018196:	4622      	mov	r2, r4
 8018198:	4648      	mov	r0, r9
 801819a:	f000 ffc9 	bl	8019130 <uxr_read_framed_msg>
 801819e:	2800      	cmp	r0, #0
 80181a0:	d0ef      	beq.n	8018182 <recv_custom_msg+0x2e>
 80181a2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80181a6:	b1b3      	cbz	r3, 80181d6 <recv_custom_msg+0x82>
 80181a8:	4b0f      	ldr	r3, [pc, #60]	; (80181e8 <recv_custom_msg+0x94>)
 80181aa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80181ae:	701a      	strb	r2, [r3, #0]
 80181b0:	2000      	movs	r0, #0
 80181b2:	b009      	add	sp, #36	; 0x24
 80181b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181b8:	f10d 021f 	add.w	r2, sp, #31
 80181bc:	9200      	str	r2, [sp, #0]
 80181be:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80181c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80181c6:	4601      	mov	r1, r0
 80181c8:	47a8      	blx	r5
 80181ca:	2800      	cmp	r0, #0
 80181cc:	d0ec      	beq.n	80181a8 <recv_custom_msg+0x54>
 80181ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d1e8      	bne.n	80181a8 <recv_custom_msg+0x54>
 80181d6:	f8cb 0000 	str.w	r0, [fp]
 80181da:	2001      	movs	r0, #1
 80181dc:	f8ca 4000 	str.w	r4, [sl]
 80181e0:	b009      	add	sp, #36	; 0x24
 80181e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181e6:	bf00      	nop
 80181e8:	20009d48 	.word	0x20009d48

080181ec <send_custom_msg>:
 80181ec:	b570      	push	{r4, r5, r6, lr}
 80181ee:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80181f2:	b086      	sub	sp, #24
 80181f4:	4616      	mov	r6, r2
 80181f6:	b975      	cbnz	r5, 8018216 <send_custom_msg+0x2a>
 80181f8:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 80181fc:	f10d 0317 	add.w	r3, sp, #23
 8018200:	47a0      	blx	r4
 8018202:	b108      	cbz	r0, 8018208 <send_custom_msg+0x1c>
 8018204:	42b0      	cmp	r0, r6
 8018206:	d015      	beq.n	8018234 <send_custom_msg+0x48>
 8018208:	4b0c      	ldr	r3, [pc, #48]	; (801823c <send_custom_msg+0x50>)
 801820a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801820e:	701a      	strb	r2, [r3, #0]
 8018210:	2000      	movs	r0, #0
 8018212:	b006      	add	sp, #24
 8018214:	bd70      	pop	{r4, r5, r6, pc}
 8018216:	460b      	mov	r3, r1
 8018218:	2200      	movs	r2, #0
 801821a:	f10d 0117 	add.w	r1, sp, #23
 801821e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8018222:	9600      	str	r6, [sp, #0]
 8018224:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8018228:	4602      	mov	r2, r0
 801822a:	f200 2002 	addw	r0, r0, #514	; 0x202
 801822e:	f000 fd97 	bl	8018d60 <uxr_write_framed_msg>
 8018232:	e7e6      	b.n	8018202 <send_custom_msg+0x16>
 8018234:	2001      	movs	r0, #1
 8018236:	b006      	add	sp, #24
 8018238:	bd70      	pop	{r4, r5, r6, pc}
 801823a:	bf00      	nop
 801823c:	20009d48 	.word	0x20009d48

08018240 <uxr_set_custom_transport_callbacks>:
 8018240:	b430      	push	{r4, r5}
 8018242:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8018246:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801824a:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 801824e:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8018252:	bc30      	pop	{r4, r5}
 8018254:	4770      	bx	lr
 8018256:	bf00      	nop

08018258 <uxr_init_custom_transport>:
 8018258:	b538      	push	{r3, r4, r5, lr}
 801825a:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801825e:	b303      	cbz	r3, 80182a2 <uxr_init_custom_transport+0x4a>
 8018260:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8018264:	4604      	mov	r4, r0
 8018266:	b1e2      	cbz	r2, 80182a2 <uxr_init_custom_transport+0x4a>
 8018268:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 801826c:	b1ca      	cbz	r2, 80182a2 <uxr_init_custom_transport+0x4a>
 801826e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8018272:	b1b2      	cbz	r2, 80182a2 <uxr_init_custom_transport+0x4a>
 8018274:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8018278:	4798      	blx	r3
 801827a:	4605      	mov	r5, r0
 801827c:	b188      	cbz	r0, 80182a2 <uxr_init_custom_transport+0x4a>
 801827e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8018282:	b98b      	cbnz	r3, 80182a8 <uxr_init_custom_transport+0x50>
 8018284:	480b      	ldr	r0, [pc, #44]	; (80182b4 <uxr_init_custom_transport+0x5c>)
 8018286:	490c      	ldr	r1, [pc, #48]	; (80182b8 <uxr_init_custom_transport+0x60>)
 8018288:	4a0c      	ldr	r2, [pc, #48]	; (80182bc <uxr_init_custom_transport+0x64>)
 801828a:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 801828e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018292:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 8018296:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801829a:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801829e:	4628      	mov	r0, r5
 80182a0:	bd38      	pop	{r3, r4, r5, pc}
 80182a2:	2500      	movs	r5, #0
 80182a4:	4628      	mov	r0, r5
 80182a6:	bd38      	pop	{r3, r4, r5, pc}
 80182a8:	2100      	movs	r1, #0
 80182aa:	f204 2002 	addw	r0, r4, #514	; 0x202
 80182ae:	f000 fd51 	bl	8018d54 <uxr_init_framing_io>
 80182b2:	e7e7      	b.n	8018284 <uxr_init_custom_transport+0x2c>
 80182b4:	080181ed 	.word	0x080181ed
 80182b8:	08018155 	.word	0x08018155
 80182bc:	08018149 	.word	0x08018149

080182c0 <uxr_close_custom_transport>:
 80182c0:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80182c4:	4718      	bx	r3
 80182c6:	bf00      	nop

080182c8 <uxr_init_input_best_effort_stream>:
 80182c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182cc:	8003      	strh	r3, [r0, #0]
 80182ce:	4770      	bx	lr

080182d0 <uxr_reset_input_best_effort_stream>:
 80182d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182d4:	8003      	strh	r3, [r0, #0]
 80182d6:	4770      	bx	lr

080182d8 <uxr_receive_best_effort_message>:
 80182d8:	b538      	push	{r3, r4, r5, lr}
 80182da:	4604      	mov	r4, r0
 80182dc:	8800      	ldrh	r0, [r0, #0]
 80182de:	460d      	mov	r5, r1
 80182e0:	f000 fd20 	bl	8018d24 <uxr_seq_num_cmp>
 80182e4:	4603      	mov	r3, r0
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80182ec:	bfb8      	it	lt
 80182ee:	8025      	strhlt	r5, [r4, #0]
 80182f0:	bd38      	pop	{r3, r4, r5, pc}
 80182f2:	bf00      	nop

080182f4 <on_full_input_buffer>:
 80182f4:	b570      	push	{r4, r5, r6, lr}
 80182f6:	6802      	ldr	r2, [r0, #0]
 80182f8:	460d      	mov	r5, r1
 80182fa:	6809      	ldr	r1, [r1, #0]
 80182fc:	686c      	ldr	r4, [r5, #4]
 80182fe:	1a53      	subs	r3, r2, r1
 8018300:	4606      	mov	r6, r0
 8018302:	8928      	ldrh	r0, [r5, #8]
 8018304:	fbb4 f4f0 	udiv	r4, r4, r0
 8018308:	fbb3 f3f4 	udiv	r3, r3, r4
 801830c:	3301      	adds	r3, #1
 801830e:	b29b      	uxth	r3, r3
 8018310:	fbb3 f2f0 	udiv	r2, r3, r0
 8018314:	fb00 3312 	mls	r3, r0, r2, r3
 8018318:	b29b      	uxth	r3, r3
 801831a:	fb04 f403 	mul.w	r4, r4, r3
 801831e:	1d23      	adds	r3, r4, #4
 8018320:	440b      	add	r3, r1
 8018322:	7d28      	ldrb	r0, [r5, #20]
 8018324:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8018328:	b110      	cbz	r0, 8018330 <on_full_input_buffer+0x3c>
 801832a:	2000      	movs	r0, #0
 801832c:	f843 0c04 	str.w	r0, [r3, #-4]
 8018330:	2a03      	cmp	r2, #3
 8018332:	d801      	bhi.n	8018338 <on_full_input_buffer+0x44>
 8018334:	2001      	movs	r0, #1
 8018336:	bd70      	pop	{r4, r5, r6, pc}
 8018338:	3408      	adds	r4, #8
 801833a:	6933      	ldr	r3, [r6, #16]
 801833c:	4421      	add	r1, r4
 801833e:	4630      	mov	r0, r6
 8018340:	3a04      	subs	r2, #4
 8018342:	f7f9 fa91 	bl	8011868 <ucdr_init_buffer_origin>
 8018346:	4630      	mov	r0, r6
 8018348:	4902      	ldr	r1, [pc, #8]	; (8018354 <on_full_input_buffer+0x60>)
 801834a:	462a      	mov	r2, r5
 801834c:	f7f9 fa6a 	bl	8011824 <ucdr_set_on_full_buffer_callback>
 8018350:	2000      	movs	r0, #0
 8018352:	bd70      	pop	{r4, r5, r6, pc}
 8018354:	080182f5 	.word	0x080182f5

08018358 <uxr_init_input_reliable_stream>:
 8018358:	b470      	push	{r4, r5, r6}
 801835a:	9c03      	ldr	r4, [sp, #12]
 801835c:	6001      	str	r1, [r0, #0]
 801835e:	2600      	movs	r6, #0
 8018360:	8103      	strh	r3, [r0, #8]
 8018362:	6042      	str	r2, [r0, #4]
 8018364:	6104      	str	r4, [r0, #16]
 8018366:	7506      	strb	r6, [r0, #20]
 8018368:	b1ab      	cbz	r3, 8018396 <uxr_init_input_reliable_stream+0x3e>
 801836a:	600e      	str	r6, [r1, #0]
 801836c:	8901      	ldrh	r1, [r0, #8]
 801836e:	2901      	cmp	r1, #1
 8018370:	d911      	bls.n	8018396 <uxr_init_input_reliable_stream+0x3e>
 8018372:	2201      	movs	r2, #1
 8018374:	e9d0 5400 	ldrd	r5, r4, [r0]
 8018378:	fbb2 f3f1 	udiv	r3, r2, r1
 801837c:	fb01 2313 	mls	r3, r1, r3, r2
 8018380:	b29b      	uxth	r3, r3
 8018382:	fbb4 f1f1 	udiv	r1, r4, r1
 8018386:	fb03 f301 	mul.w	r3, r3, r1
 801838a:	3201      	adds	r2, #1
 801838c:	50ee      	str	r6, [r5, r3]
 801838e:	8901      	ldrh	r1, [r0, #8]
 8018390:	b292      	uxth	r2, r2
 8018392:	4291      	cmp	r1, r2
 8018394:	d8ee      	bhi.n	8018374 <uxr_init_input_reliable_stream+0x1c>
 8018396:	f04f 33ff 	mov.w	r3, #4294967295
 801839a:	bc70      	pop	{r4, r5, r6}
 801839c:	60c3      	str	r3, [r0, #12]
 801839e:	4770      	bx	lr

080183a0 <uxr_reset_input_reliable_stream>:
 80183a0:	8902      	ldrh	r2, [r0, #8]
 80183a2:	b1ca      	cbz	r2, 80183d8 <uxr_reset_input_reliable_stream+0x38>
 80183a4:	b470      	push	{r4, r5, r6}
 80183a6:	2400      	movs	r4, #0
 80183a8:	4621      	mov	r1, r4
 80183aa:	4626      	mov	r6, r4
 80183ac:	fbb1 f3f2 	udiv	r3, r1, r2
 80183b0:	fb02 1313 	mls	r3, r2, r3, r1
 80183b4:	e9d0 5100 	ldrd	r5, r1, [r0]
 80183b8:	b29b      	uxth	r3, r3
 80183ba:	fbb1 f2f2 	udiv	r2, r1, r2
 80183be:	fb03 f302 	mul.w	r3, r3, r2
 80183c2:	3401      	adds	r4, #1
 80183c4:	50ee      	str	r6, [r5, r3]
 80183c6:	8902      	ldrh	r2, [r0, #8]
 80183c8:	b2a1      	uxth	r1, r4
 80183ca:	428a      	cmp	r2, r1
 80183cc:	d8ee      	bhi.n	80183ac <uxr_reset_input_reliable_stream+0xc>
 80183ce:	f04f 33ff 	mov.w	r3, #4294967295
 80183d2:	bc70      	pop	{r4, r5, r6}
 80183d4:	60c3      	str	r3, [r0, #12]
 80183d6:	4770      	bx	lr
 80183d8:	f04f 33ff 	mov.w	r3, #4294967295
 80183dc:	60c3      	str	r3, [r0, #12]
 80183de:	4770      	bx	lr

080183e0 <uxr_receive_reliable_message>:
 80183e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183e4:	4604      	mov	r4, r0
 80183e6:	460d      	mov	r5, r1
 80183e8:	8901      	ldrh	r1, [r0, #8]
 80183ea:	8980      	ldrh	r0, [r0, #12]
 80183ec:	4690      	mov	r8, r2
 80183ee:	461f      	mov	r7, r3
 80183f0:	f000 fc90 	bl	8018d14 <uxr_seq_num_add>
 80183f4:	4629      	mov	r1, r5
 80183f6:	4606      	mov	r6, r0
 80183f8:	89a0      	ldrh	r0, [r4, #12]
 80183fa:	f000 fc93 	bl	8018d24 <uxr_seq_num_cmp>
 80183fe:	2800      	cmp	r0, #0
 8018400:	db0a      	blt.n	8018418 <uxr_receive_reliable_message+0x38>
 8018402:	2600      	movs	r6, #0
 8018404:	89e0      	ldrh	r0, [r4, #14]
 8018406:	4629      	mov	r1, r5
 8018408:	f000 fc8c 	bl	8018d24 <uxr_seq_num_cmp>
 801840c:	2800      	cmp	r0, #0
 801840e:	bfb8      	it	lt
 8018410:	81e5      	strhlt	r5, [r4, #14]
 8018412:	4630      	mov	r0, r6
 8018414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018418:	4630      	mov	r0, r6
 801841a:	4629      	mov	r1, r5
 801841c:	f000 fc82 	bl	8018d24 <uxr_seq_num_cmp>
 8018420:	2800      	cmp	r0, #0
 8018422:	dbee      	blt.n	8018402 <uxr_receive_reliable_message+0x22>
 8018424:	6923      	ldr	r3, [r4, #16]
 8018426:	4640      	mov	r0, r8
 8018428:	4798      	blx	r3
 801842a:	2101      	movs	r1, #1
 801842c:	4681      	mov	r9, r0
 801842e:	89a0      	ldrh	r0, [r4, #12]
 8018430:	f000 fc70 	bl	8018d14 <uxr_seq_num_add>
 8018434:	f1b9 0f00 	cmp.w	r9, #0
 8018438:	d101      	bne.n	801843e <uxr_receive_reliable_message+0x5e>
 801843a:	4285      	cmp	r5, r0
 801843c:	d049      	beq.n	80184d2 <uxr_receive_reliable_message+0xf2>
 801843e:	8921      	ldrh	r1, [r4, #8]
 8018440:	fbb5 f3f1 	udiv	r3, r5, r1
 8018444:	fb01 5313 	mls	r3, r1, r3, r5
 8018448:	b29b      	uxth	r3, r3
 801844a:	6862      	ldr	r2, [r4, #4]
 801844c:	6820      	ldr	r0, [r4, #0]
 801844e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018452:	fb03 f302 	mul.w	r3, r3, r2
 8018456:	3304      	adds	r3, #4
 8018458:	4418      	add	r0, r3
 801845a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d1cf      	bne.n	8018402 <uxr_receive_reliable_message+0x22>
 8018462:	4641      	mov	r1, r8
 8018464:	463a      	mov	r2, r7
 8018466:	f002 f91e 	bl	801a6a6 <memcpy>
 801846a:	8921      	ldrh	r1, [r4, #8]
 801846c:	fbb5 f3f1 	udiv	r3, r5, r1
 8018470:	fb01 5313 	mls	r3, r1, r3, r5
 8018474:	b29b      	uxth	r3, r3
 8018476:	6862      	ldr	r2, [r4, #4]
 8018478:	fbb2 f2f1 	udiv	r2, r2, r1
 801847c:	6821      	ldr	r1, [r4, #0]
 801847e:	fb03 f302 	mul.w	r3, r3, r2
 8018482:	2201      	movs	r2, #1
 8018484:	50cf      	str	r7, [r1, r3]
 8018486:	9b08      	ldr	r3, [sp, #32]
 8018488:	701a      	strb	r2, [r3, #0]
 801848a:	f1b9 0f00 	cmp.w	r9, #0
 801848e:	d0b8      	beq.n	8018402 <uxr_receive_reliable_message+0x22>
 8018490:	89a6      	ldrh	r6, [r4, #12]
 8018492:	e001      	b.n	8018498 <uxr_receive_reliable_message+0xb8>
 8018494:	2801      	cmp	r0, #1
 8018496:	d1b4      	bne.n	8018402 <uxr_receive_reliable_message+0x22>
 8018498:	4630      	mov	r0, r6
 801849a:	2101      	movs	r1, #1
 801849c:	f000 fc3a 	bl	8018d14 <uxr_seq_num_add>
 80184a0:	8921      	ldrh	r1, [r4, #8]
 80184a2:	fbb0 f3f1 	udiv	r3, r0, r1
 80184a6:	fb01 0313 	mls	r3, r1, r3, r0
 80184aa:	b29b      	uxth	r3, r3
 80184ac:	6862      	ldr	r2, [r4, #4]
 80184ae:	fbb2 f2f1 	udiv	r2, r2, r1
 80184b2:	4606      	mov	r6, r0
 80184b4:	fb03 f302 	mul.w	r3, r3, r2
 80184b8:	6820      	ldr	r0, [r4, #0]
 80184ba:	3304      	adds	r3, #4
 80184bc:	4418      	add	r0, r3
 80184be:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d09d      	beq.n	8018402 <uxr_receive_reliable_message+0x22>
 80184c6:	6923      	ldr	r3, [r4, #16]
 80184c8:	4798      	blx	r3
 80184ca:	2802      	cmp	r0, #2
 80184cc:	d1e2      	bne.n	8018494 <uxr_receive_reliable_message+0xb4>
 80184ce:	2601      	movs	r6, #1
 80184d0:	e798      	b.n	8018404 <uxr_receive_reliable_message+0x24>
 80184d2:	9b08      	ldr	r3, [sp, #32]
 80184d4:	81a5      	strh	r5, [r4, #12]
 80184d6:	2601      	movs	r6, #1
 80184d8:	f883 9000 	strb.w	r9, [r3]
 80184dc:	e792      	b.n	8018404 <uxr_receive_reliable_message+0x24>
 80184de:	bf00      	nop

080184e0 <uxr_next_input_reliable_buffer_available>:
 80184e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184e4:	4604      	mov	r4, r0
 80184e6:	460e      	mov	r6, r1
 80184e8:	8980      	ldrh	r0, [r0, #12]
 80184ea:	2101      	movs	r1, #1
 80184ec:	4617      	mov	r7, r2
 80184ee:	f000 fc11 	bl	8018d14 <uxr_seq_num_add>
 80184f2:	8921      	ldrh	r1, [r4, #8]
 80184f4:	fbb0 f3f1 	udiv	r3, r0, r1
 80184f8:	fb01 0313 	mls	r3, r1, r3, r0
 80184fc:	b29b      	uxth	r3, r3
 80184fe:	6862      	ldr	r2, [r4, #4]
 8018500:	fbb2 f2f1 	udiv	r2, r2, r1
 8018504:	fb03 f302 	mul.w	r3, r3, r2
 8018508:	6822      	ldr	r2, [r4, #0]
 801850a:	3304      	adds	r3, #4
 801850c:	eb02 0803 	add.w	r8, r2, r3
 8018510:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8018514:	f1b9 0f00 	cmp.w	r9, #0
 8018518:	d025      	beq.n	8018566 <uxr_next_input_reliable_buffer_available+0x86>
 801851a:	6923      	ldr	r3, [r4, #16]
 801851c:	4605      	mov	r5, r0
 801851e:	4640      	mov	r0, r8
 8018520:	4798      	blx	r3
 8018522:	4682      	mov	sl, r0
 8018524:	b310      	cbz	r0, 801856c <uxr_next_input_reliable_buffer_available+0x8c>
 8018526:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801852a:	e005      	b.n	8018538 <uxr_next_input_reliable_buffer_available+0x58>
 801852c:	6923      	ldr	r3, [r4, #16]
 801852e:	4798      	blx	r3
 8018530:	2802      	cmp	r0, #2
 8018532:	d032      	beq.n	801859a <uxr_next_input_reliable_buffer_available+0xba>
 8018534:	2801      	cmp	r0, #1
 8018536:	d116      	bne.n	8018566 <uxr_next_input_reliable_buffer_available+0x86>
 8018538:	4650      	mov	r0, sl
 801853a:	2101      	movs	r1, #1
 801853c:	f000 fbea 	bl	8018d14 <uxr_seq_num_add>
 8018540:	8921      	ldrh	r1, [r4, #8]
 8018542:	fbb0 f3f1 	udiv	r3, r0, r1
 8018546:	fb01 0313 	mls	r3, r1, r3, r0
 801854a:	b29b      	uxth	r3, r3
 801854c:	6862      	ldr	r2, [r4, #4]
 801854e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018552:	4682      	mov	sl, r0
 8018554:	fb03 f302 	mul.w	r3, r3, r2
 8018558:	6820      	ldr	r0, [r4, #0]
 801855a:	3304      	adds	r3, #4
 801855c:	4418      	add	r0, r3
 801855e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d1e2      	bne.n	801852c <uxr_next_input_reliable_buffer_available+0x4c>
 8018566:	2000      	movs	r0, #0
 8018568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801856c:	464a      	mov	r2, r9
 801856e:	4641      	mov	r1, r8
 8018570:	4630      	mov	r0, r6
 8018572:	f7f9 f981 	bl	8011878 <ucdr_init_buffer>
 8018576:	8921      	ldrh	r1, [r4, #8]
 8018578:	fbb5 f3f1 	udiv	r3, r5, r1
 801857c:	fb01 5313 	mls	r3, r1, r3, r5
 8018580:	b29b      	uxth	r3, r3
 8018582:	6862      	ldr	r2, [r4, #4]
 8018584:	fbb2 f2f1 	udiv	r2, r2, r1
 8018588:	6821      	ldr	r1, [r4, #0]
 801858a:	fb03 f302 	mul.w	r3, r3, r2
 801858e:	2001      	movs	r0, #1
 8018590:	f841 a003 	str.w	sl, [r1, r3]
 8018594:	81a5      	strh	r5, [r4, #12]
 8018596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801859a:	8922      	ldrh	r2, [r4, #8]
 801859c:	fbb5 f0f2 	udiv	r0, r5, r2
 80185a0:	fb02 5510 	mls	r5, r2, r0, r5
 80185a4:	b2ad      	uxth	r5, r5
 80185a6:	6863      	ldr	r3, [r4, #4]
 80185a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80185ac:	fb05 f503 	mul.w	r5, r5, r3
 80185b0:	6823      	ldr	r3, [r4, #0]
 80185b2:	2000      	movs	r0, #0
 80185b4:	5158      	str	r0, [r3, r5]
 80185b6:	eba9 0207 	sub.w	r2, r9, r7
 80185ba:	eb08 0107 	add.w	r1, r8, r7
 80185be:	4630      	mov	r0, r6
 80185c0:	f7f9 f95a 	bl	8011878 <ucdr_init_buffer>
 80185c4:	4630      	mov	r0, r6
 80185c6:	4904      	ldr	r1, [pc, #16]	; (80185d8 <uxr_next_input_reliable_buffer_available+0xf8>)
 80185c8:	4622      	mov	r2, r4
 80185ca:	f7f9 f92b 	bl	8011824 <ucdr_set_on_full_buffer_callback>
 80185ce:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80185d2:	2001      	movs	r0, #1
 80185d4:	e7c8      	b.n	8018568 <uxr_next_input_reliable_buffer_available+0x88>
 80185d6:	bf00      	nop
 80185d8:	080182f5 	.word	0x080182f5

080185dc <uxr_process_heartbeat>:
 80185dc:	b538      	push	{r3, r4, r5, lr}
 80185de:	4611      	mov	r1, r2
 80185e0:	4604      	mov	r4, r0
 80185e2:	89c0      	ldrh	r0, [r0, #14]
 80185e4:	4615      	mov	r5, r2
 80185e6:	f000 fb9d 	bl	8018d24 <uxr_seq_num_cmp>
 80185ea:	2800      	cmp	r0, #0
 80185ec:	bfb8      	it	lt
 80185ee:	81e5      	strhlt	r5, [r4, #14]
 80185f0:	bd38      	pop	{r3, r4, r5, pc}
 80185f2:	bf00      	nop

080185f4 <uxr_compute_acknack>:
 80185f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185f8:	8903      	ldrh	r3, [r0, #8]
 80185fa:	8986      	ldrh	r6, [r0, #12]
 80185fc:	4604      	mov	r4, r0
 80185fe:	460d      	mov	r5, r1
 8018600:	b1d3      	cbz	r3, 8018638 <uxr_compute_acknack+0x44>
 8018602:	4630      	mov	r0, r6
 8018604:	2701      	movs	r7, #1
 8018606:	e003      	b.n	8018610 <uxr_compute_acknack+0x1c>
 8018608:	4567      	cmp	r7, ip
 801860a:	d215      	bcs.n	8018638 <uxr_compute_acknack+0x44>
 801860c:	89a0      	ldrh	r0, [r4, #12]
 801860e:	3701      	adds	r7, #1
 8018610:	b2b9      	uxth	r1, r7
 8018612:	f000 fb7f 	bl	8018d14 <uxr_seq_num_add>
 8018616:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801861a:	fbb0 f2fc 	udiv	r2, r0, ip
 801861e:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018622:	fb0c 0212 	mls	r2, ip, r2, r0
 8018626:	b292      	uxth	r2, r2
 8018628:	fbb3 f3fc 	udiv	r3, r3, ip
 801862c:	fb02 1303 	mla	r3, r2, r3, r1
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d1e8      	bne.n	8018608 <uxr_compute_acknack+0x14>
 8018636:	4606      	mov	r6, r0
 8018638:	802e      	strh	r6, [r5, #0]
 801863a:	4630      	mov	r0, r6
 801863c:	2101      	movs	r1, #1
 801863e:	89e6      	ldrh	r6, [r4, #14]
 8018640:	f000 fb6c 	bl	8018d1c <uxr_seq_num_sub>
 8018644:	4601      	mov	r1, r0
 8018646:	4630      	mov	r0, r6
 8018648:	f000 fb68 	bl	8018d1c <uxr_seq_num_sub>
 801864c:	4606      	mov	r6, r0
 801864e:	b318      	cbz	r0, 8018698 <uxr_compute_acknack+0xa4>
 8018650:	f04f 0900 	mov.w	r9, #0
 8018654:	464f      	mov	r7, r9
 8018656:	f04f 0801 	mov.w	r8, #1
 801865a:	fa1f f189 	uxth.w	r1, r9
 801865e:	8828      	ldrh	r0, [r5, #0]
 8018660:	f000 fb58 	bl	8018d14 <uxr_seq_num_add>
 8018664:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018668:	6822      	ldr	r2, [r4, #0]
 801866a:	fbb0 f1fc 	udiv	r1, r0, ip
 801866e:	fb01 011c 	mls	r1, r1, ip, r0
 8018672:	b289      	uxth	r1, r1
 8018674:	6863      	ldr	r3, [r4, #4]
 8018676:	fbb3 f3fc 	udiv	r3, r3, ip
 801867a:	fb01 2303 	mla	r3, r1, r3, r2
 801867e:	fa08 f209 	lsl.w	r2, r8, r9
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	f109 0901 	add.w	r9, r9, #1
 8018688:	b90b      	cbnz	r3, 801868e <uxr_compute_acknack+0x9a>
 801868a:	4317      	orrs	r7, r2
 801868c:	b2bf      	uxth	r7, r7
 801868e:	454e      	cmp	r6, r9
 8018690:	d1e3      	bne.n	801865a <uxr_compute_acknack+0x66>
 8018692:	4638      	mov	r0, r7
 8018694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018698:	4607      	mov	r7, r0
 801869a:	4638      	mov	r0, r7
 801869c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080186a0 <uxr_init_output_best_effort_stream>:
 80186a0:	b410      	push	{r4}
 80186a2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80186a6:	81c4      	strh	r4, [r0, #14]
 80186a8:	e9c0 1300 	strd	r1, r3, [r0]
 80186ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186b0:	7303      	strb	r3, [r0, #12]
 80186b2:	6082      	str	r2, [r0, #8]
 80186b4:	4770      	bx	lr
 80186b6:	bf00      	nop

080186b8 <uxr_reset_output_best_effort_stream>:
 80186b8:	7b02      	ldrb	r2, [r0, #12]
 80186ba:	6042      	str	r2, [r0, #4]
 80186bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186c0:	81c3      	strh	r3, [r0, #14]
 80186c2:	4770      	bx	lr

080186c4 <uxr_prepare_best_effort_buffer_to_write>:
 80186c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186c6:	4604      	mov	r4, r0
 80186c8:	b083      	sub	sp, #12
 80186ca:	6840      	ldr	r0, [r0, #4]
 80186cc:	460d      	mov	r5, r1
 80186ce:	4616      	mov	r6, r2
 80186d0:	f7fa feb8 	bl	8013444 <uxr_submessage_padding>
 80186d4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80186d8:	4410      	add	r0, r2
 80186da:	1942      	adds	r2, r0, r5
 80186dc:	4293      	cmp	r3, r2
 80186de:	bf2c      	ite	cs
 80186e0:	2701      	movcs	r7, #1
 80186e2:	2700      	movcc	r7, #0
 80186e4:	d202      	bcs.n	80186ec <uxr_prepare_best_effort_buffer_to_write+0x28>
 80186e6:	4638      	mov	r0, r7
 80186e8:	b003      	add	sp, #12
 80186ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186ec:	9000      	str	r0, [sp, #0]
 80186ee:	6821      	ldr	r1, [r4, #0]
 80186f0:	4630      	mov	r0, r6
 80186f2:	2300      	movs	r3, #0
 80186f4:	f7f9 f8ae 	bl	8011854 <ucdr_init_buffer_origin_offset>
 80186f8:	6861      	ldr	r1, [r4, #4]
 80186fa:	4638      	mov	r0, r7
 80186fc:	4429      	add	r1, r5
 80186fe:	6061      	str	r1, [r4, #4]
 8018700:	b003      	add	sp, #12
 8018702:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018704 <uxr_prepare_best_effort_buffer_to_send>:
 8018704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018708:	6845      	ldr	r5, [r0, #4]
 801870a:	4604      	mov	r4, r0
 801870c:	7b00      	ldrb	r0, [r0, #12]
 801870e:	4285      	cmp	r5, r0
 8018710:	bf8c      	ite	hi
 8018712:	2701      	movhi	r7, #1
 8018714:	2700      	movls	r7, #0
 8018716:	d802      	bhi.n	801871e <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8018718:	4638      	mov	r0, r7
 801871a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801871e:	4688      	mov	r8, r1
 8018720:	89e0      	ldrh	r0, [r4, #14]
 8018722:	2101      	movs	r1, #1
 8018724:	4615      	mov	r5, r2
 8018726:	461e      	mov	r6, r3
 8018728:	f000 faf4 	bl	8018d14 <uxr_seq_num_add>
 801872c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018730:	81e0      	strh	r0, [r4, #14]
 8018732:	8030      	strh	r0, [r6, #0]
 8018734:	f8c8 2000 	str.w	r2, [r8]
 8018738:	602b      	str	r3, [r5, #0]
 801873a:	7b23      	ldrb	r3, [r4, #12]
 801873c:	6063      	str	r3, [r4, #4]
 801873e:	4638      	mov	r0, r7
 8018740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018744 <on_full_output_buffer>:
 8018744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018746:	6802      	ldr	r2, [r0, #0]
 8018748:	460d      	mov	r5, r1
 801874a:	6809      	ldr	r1, [r1, #0]
 801874c:	892f      	ldrh	r7, [r5, #8]
 801874e:	686c      	ldr	r4, [r5, #4]
 8018750:	fbb4 f4f7 	udiv	r4, r4, r7
 8018754:	1a53      	subs	r3, r2, r1
 8018756:	fbb3 f3f4 	udiv	r3, r3, r4
 801875a:	3301      	adds	r3, #1
 801875c:	b29b      	uxth	r3, r3
 801875e:	fbb3 f2f7 	udiv	r2, r3, r7
 8018762:	fb07 3312 	mls	r3, r7, r2, r3
 8018766:	b29b      	uxth	r3, r3
 8018768:	fb04 f403 	mul.w	r4, r4, r3
 801876c:	7b2f      	ldrb	r7, [r5, #12]
 801876e:	590a      	ldr	r2, [r1, r4]
 8018770:	6903      	ldr	r3, [r0, #16]
 8018772:	443c      	add	r4, r7
 8018774:	3408      	adds	r4, #8
 8018776:	1bd2      	subs	r2, r2, r7
 8018778:	4606      	mov	r6, r0
 801877a:	4421      	add	r1, r4
 801877c:	3a04      	subs	r2, #4
 801877e:	f7f9 f873 	bl	8011868 <ucdr_init_buffer_origin>
 8018782:	4630      	mov	r0, r6
 8018784:	4902      	ldr	r1, [pc, #8]	; (8018790 <on_full_output_buffer+0x4c>)
 8018786:	462a      	mov	r2, r5
 8018788:	f7f9 f84c 	bl	8011824 <ucdr_set_on_full_buffer_callback>
 801878c:	2000      	movs	r0, #0
 801878e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018790:	08018745 	.word	0x08018745

08018794 <uxr_init_output_reliable_stream>:
 8018794:	b430      	push	{r4, r5}
 8018796:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801879a:	6001      	str	r1, [r0, #0]
 801879c:	8103      	strh	r3, [r0, #8]
 801879e:	6042      	str	r2, [r0, #4]
 80187a0:	7304      	strb	r4, [r0, #12]
 80187a2:	b1b3      	cbz	r3, 80187d2 <uxr_init_output_reliable_stream+0x3e>
 80187a4:	600c      	str	r4, [r1, #0]
 80187a6:	8901      	ldrh	r1, [r0, #8]
 80187a8:	2901      	cmp	r1, #1
 80187aa:	d912      	bls.n	80187d2 <uxr_init_output_reliable_stream+0x3e>
 80187ac:	2201      	movs	r2, #1
 80187ae:	e9d0 5400 	ldrd	r5, r4, [r0]
 80187b2:	fbb2 f3f1 	udiv	r3, r2, r1
 80187b6:	fb01 2313 	mls	r3, r1, r3, r2
 80187ba:	b29b      	uxth	r3, r3
 80187bc:	fbb4 f1f1 	udiv	r1, r4, r1
 80187c0:	fb03 f301 	mul.w	r3, r3, r1
 80187c4:	7b01      	ldrb	r1, [r0, #12]
 80187c6:	50e9      	str	r1, [r5, r3]
 80187c8:	3201      	adds	r2, #1
 80187ca:	8901      	ldrh	r1, [r0, #8]
 80187cc:	b292      	uxth	r2, r2
 80187ce:	4291      	cmp	r1, r2
 80187d0:	d8ed      	bhi.n	80187ae <uxr_init_output_reliable_stream+0x1a>
 80187d2:	f04f 32ff 	mov.w	r2, #4294967295
 80187d6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80187da:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80187de:	4b05      	ldr	r3, [pc, #20]	; (80187f4 <uxr_init_output_reliable_stream+0x60>)
 80187e0:	f8c0 300e 	str.w	r3, [r0, #14]
 80187e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80187e8:	2300      	movs	r3, #0
 80187ea:	bc30      	pop	{r4, r5}
 80187ec:	8242      	strh	r2, [r0, #18]
 80187ee:	8403      	strh	r3, [r0, #32]
 80187f0:	4770      	bx	lr
 80187f2:	bf00      	nop
 80187f4:	ffff0000 	.word	0xffff0000

080187f8 <uxr_reset_output_reliable_stream>:
 80187f8:	8902      	ldrh	r2, [r0, #8]
 80187fa:	b430      	push	{r4, r5}
 80187fc:	b19a      	cbz	r2, 8018826 <uxr_reset_output_reliable_stream+0x2e>
 80187fe:	2400      	movs	r4, #0
 8018800:	4621      	mov	r1, r4
 8018802:	fbb1 f3f2 	udiv	r3, r1, r2
 8018806:	fb02 1313 	mls	r3, r2, r3, r1
 801880a:	e9d0 5100 	ldrd	r5, r1, [r0]
 801880e:	b29b      	uxth	r3, r3
 8018810:	fbb1 f2f2 	udiv	r2, r1, r2
 8018814:	fb03 f302 	mul.w	r3, r3, r2
 8018818:	7b02      	ldrb	r2, [r0, #12]
 801881a:	50ea      	str	r2, [r5, r3]
 801881c:	3401      	adds	r4, #1
 801881e:	8902      	ldrh	r2, [r0, #8]
 8018820:	b2a1      	uxth	r1, r4
 8018822:	428a      	cmp	r2, r1
 8018824:	d8ed      	bhi.n	8018802 <uxr_reset_output_reliable_stream+0xa>
 8018826:	f04f 32ff 	mov.w	r2, #4294967295
 801882a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801882e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018832:	4b05      	ldr	r3, [pc, #20]	; (8018848 <uxr_reset_output_reliable_stream+0x50>)
 8018834:	f8c0 300e 	str.w	r3, [r0, #14]
 8018838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801883c:	2300      	movs	r3, #0
 801883e:	bc30      	pop	{r4, r5}
 8018840:	8242      	strh	r2, [r0, #18]
 8018842:	8403      	strh	r3, [r0, #32]
 8018844:	4770      	bx	lr
 8018846:	bf00      	nop
 8018848:	ffff0000 	.word	0xffff0000

0801884c <uxr_prepare_reliable_buffer_to_write>:
 801884c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018850:	89c5      	ldrh	r5, [r0, #14]
 8018852:	4604      	mov	r4, r0
 8018854:	8900      	ldrh	r0, [r0, #8]
 8018856:	fbb5 f3f0 	udiv	r3, r5, r0
 801885a:	4688      	mov	r8, r1
 801885c:	e9d4 1600 	ldrd	r1, r6, [r4]
 8018860:	fb00 5313 	mls	r3, r0, r3, r5
 8018864:	b29b      	uxth	r3, r3
 8018866:	fbb6 f0f0 	udiv	r0, r6, r0
 801886a:	fb00 f303 	mul.w	r3, r0, r3
 801886e:	3304      	adds	r3, #4
 8018870:	18cb      	adds	r3, r1, r3
 8018872:	b091      	sub	sp, #68	; 0x44
 8018874:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8018878:	9004      	str	r0, [sp, #16]
 801887a:	2104      	movs	r1, #4
 801887c:	4630      	mov	r0, r6
 801887e:	9305      	str	r3, [sp, #20]
 8018880:	9206      	str	r2, [sp, #24]
 8018882:	f7f8 fffd 	bl	8011880 <ucdr_alignment>
 8018886:	1833      	adds	r3, r6, r0
 8018888:	9804      	ldr	r0, [sp, #16]
 801888a:	9303      	str	r3, [sp, #12]
 801888c:	eb03 0708 	add.w	r7, r3, r8
 8018890:	1f06      	subs	r6, r0, #4
 8018892:	42b7      	cmp	r7, r6
 8018894:	f240 80dc 	bls.w	8018a50 <uxr_prepare_reliable_buffer_to_write+0x204>
 8018898:	f894 e00c 	ldrb.w	lr, [r4, #12]
 801889c:	eb0e 0308 	add.w	r3, lr, r8
 80188a0:	42b3      	cmp	r3, r6
 80188a2:	f240 80c2 	bls.w	8018a2a <uxr_prepare_reliable_buffer_to_write+0x1de>
 80188a6:	9b03      	ldr	r3, [sp, #12]
 80188a8:	3304      	adds	r3, #4
 80188aa:	42b3      	cmp	r3, r6
 80188ac:	f080 8112 	bcs.w	8018ad4 <uxr_prepare_reliable_buffer_to_write+0x288>
 80188b0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80188b4:	f1bc 0f00 	cmp.w	ip, #0
 80188b8:	f000 8127 	beq.w	8018b0a <uxr_prepare_reliable_buffer_to_write+0x2be>
 80188bc:	e9d4 7300 	ldrd	r7, r3, [r4]
 80188c0:	2100      	movs	r1, #0
 80188c2:	4608      	mov	r0, r1
 80188c4:	460a      	mov	r2, r1
 80188c6:	fbb3 f9fc 	udiv	r9, r3, ip
 80188ca:	fbb2 f3fc 	udiv	r3, r2, ip
 80188ce:	fb0c 2313 	mls	r3, ip, r3, r2
 80188d2:	b29b      	uxth	r3, r3
 80188d4:	fb09 7303 	mla	r3, r9, r3, r7
 80188d8:	3101      	adds	r1, #1
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	459e      	cmp	lr, r3
 80188de:	bf08      	it	eq
 80188e0:	3001      	addeq	r0, #1
 80188e2:	b28a      	uxth	r2, r1
 80188e4:	bf08      	it	eq
 80188e6:	b280      	uxtheq	r0, r0
 80188e8:	4562      	cmp	r2, ip
 80188ea:	d3ee      	bcc.n	80188ca <uxr_prepare_reliable_buffer_to_write+0x7e>
 80188ec:	9b03      	ldr	r3, [sp, #12]
 80188ee:	1f37      	subs	r7, r6, #4
 80188f0:	b2bf      	uxth	r7, r7
 80188f2:	eba7 0903 	sub.w	r9, r7, r3
 80188f6:	fa1f f989 	uxth.w	r9, r9
 80188fa:	eba7 070e 	sub.w	r7, r7, lr
 80188fe:	b2bf      	uxth	r7, r7
 8018900:	eba8 0809 	sub.w	r8, r8, r9
 8018904:	fbb8 faf7 	udiv	sl, r8, r7
 8018908:	fb07 831a 	mls	r3, r7, sl, r8
 801890c:	9707      	str	r7, [sp, #28]
 801890e:	2b00      	cmp	r3, #0
 8018910:	f040 80bf 	bne.w	8018a92 <uxr_prepare_reliable_buffer_to_write+0x246>
 8018914:	fa1f fa8a 	uxth.w	sl, sl
 8018918:	4582      	cmp	sl, r0
 801891a:	f200 8095 	bhi.w	8018a48 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 801891e:	f10d 0b20 	add.w	fp, sp, #32
 8018922:	f1ba 0f00 	cmp.w	sl, #0
 8018926:	d03a      	beq.n	801899e <uxr_prepare_reliable_buffer_to_write+0x152>
 8018928:	f04f 0800 	mov.w	r8, #0
 801892c:	f10d 0b20 	add.w	fp, sp, #32
 8018930:	e000      	b.n	8018934 <uxr_prepare_reliable_buffer_to_write+0xe8>
 8018932:	46b9      	mov	r9, r7
 8018934:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018938:	fbb5 f1fc 	udiv	r1, r5, ip
 801893c:	fb0c 5111 	mls	r1, ip, r1, r5
 8018940:	b289      	uxth	r1, r1
 8018942:	fbb2 f2fc 	udiv	r2, r2, ip
 8018946:	fb01 f102 	mul.w	r1, r1, r2
 801894a:	3104      	adds	r1, #4
 801894c:	4419      	add	r1, r3
 801894e:	4632      	mov	r2, r6
 8018950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018954:	9300      	str	r3, [sp, #0]
 8018956:	4658      	mov	r0, fp
 8018958:	2300      	movs	r3, #0
 801895a:	f7f8 ff7b 	bl	8011854 <ucdr_init_buffer_origin_offset>
 801895e:	464a      	mov	r2, r9
 8018960:	2300      	movs	r3, #0
 8018962:	210d      	movs	r1, #13
 8018964:	4658      	mov	r0, fp
 8018966:	f7fa fd2d 	bl	80133c4 <uxr_buffer_submessage_header>
 801896a:	8920      	ldrh	r0, [r4, #8]
 801896c:	fbb5 f3f0 	udiv	r3, r5, r0
 8018970:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018974:	fb00 5313 	mls	r3, r0, r3, r5
 8018978:	b29b      	uxth	r3, r3
 801897a:	fbb1 f1f0 	udiv	r1, r1, r0
 801897e:	fb03 f301 	mul.w	r3, r3, r1
 8018982:	4628      	mov	r0, r5
 8018984:	50d6      	str	r6, [r2, r3]
 8018986:	2101      	movs	r1, #1
 8018988:	f000 f9c4 	bl	8018d14 <uxr_seq_num_add>
 801898c:	f108 0801 	add.w	r8, r8, #1
 8018990:	fa1f f388 	uxth.w	r3, r8
 8018994:	459a      	cmp	sl, r3
 8018996:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801899a:	4605      	mov	r5, r0
 801899c:	d8c9      	bhi.n	8018932 <uxr_prepare_reliable_buffer_to_write+0xe6>
 801899e:	fbb5 f1fc 	udiv	r1, r5, ip
 80189a2:	fb0c 5111 	mls	r1, ip, r1, r5
 80189a6:	b289      	uxth	r1, r1
 80189a8:	6863      	ldr	r3, [r4, #4]
 80189aa:	fbb3 fcfc 	udiv	ip, r3, ip
 80189ae:	6823      	ldr	r3, [r4, #0]
 80189b0:	fb01 f10c 	mul.w	r1, r1, ip
 80189b4:	3104      	adds	r1, #4
 80189b6:	4419      	add	r1, r3
 80189b8:	4632      	mov	r2, r6
 80189ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189be:	9300      	str	r3, [sp, #0]
 80189c0:	4658      	mov	r0, fp
 80189c2:	2300      	movs	r3, #0
 80189c4:	f7f8 ff46 	bl	8011854 <ucdr_init_buffer_origin_offset>
 80189c8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80189cc:	4658      	mov	r0, fp
 80189ce:	fa1f f288 	uxth.w	r2, r8
 80189d2:	2302      	movs	r3, #2
 80189d4:	210d      	movs	r1, #13
 80189d6:	f7fa fcf5 	bl	80133c4 <uxr_buffer_submessage_header>
 80189da:	e9d4 3200 	ldrd	r3, r2, [r4]
 80189de:	8921      	ldrh	r1, [r4, #8]
 80189e0:	9f03      	ldr	r7, [sp, #12]
 80189e2:	9307      	str	r3, [sp, #28]
 80189e4:	9b05      	ldr	r3, [sp, #20]
 80189e6:	7b26      	ldrb	r6, [r4, #12]
 80189e8:	fbb5 f0f1 	udiv	r0, r5, r1
 80189ec:	fbb2 f2f1 	udiv	r2, r2, r1
 80189f0:	fb01 5010 	mls	r0, r1, r0, r5
 80189f4:	1d39      	adds	r1, r7, #4
 80189f6:	440b      	add	r3, r1
 80189f8:	b280      	uxth	r0, r0
 80189fa:	fb00 f002 	mul.w	r0, r0, r2
 80189fe:	4619      	mov	r1, r3
 8018a00:	3604      	adds	r6, #4
 8018a02:	9b07      	ldr	r3, [sp, #28]
 8018a04:	9a04      	ldr	r2, [sp, #16]
 8018a06:	4446      	add	r6, r8
 8018a08:	501e      	str	r6, [r3, r0]
 8018a0a:	9e06      	ldr	r6, [sp, #24]
 8018a0c:	3a08      	subs	r2, #8
 8018a0e:	1bd2      	subs	r2, r2, r7
 8018a10:	4630      	mov	r0, r6
 8018a12:	f7f8 ff31 	bl	8011878 <ucdr_init_buffer>
 8018a16:	4630      	mov	r0, r6
 8018a18:	493d      	ldr	r1, [pc, #244]	; (8018b10 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8018a1a:	4622      	mov	r2, r4
 8018a1c:	f7f8 ff02 	bl	8011824 <ucdr_set_on_full_buffer_callback>
 8018a20:	2001      	movs	r0, #1
 8018a22:	81e5      	strh	r5, [r4, #14]
 8018a24:	b011      	add	sp, #68	; 0x44
 8018a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a2a:	2101      	movs	r1, #1
 8018a2c:	89e0      	ldrh	r0, [r4, #14]
 8018a2e:	f000 f971 	bl	8018d14 <uxr_seq_num_add>
 8018a32:	8921      	ldrh	r1, [r4, #8]
 8018a34:	4605      	mov	r5, r0
 8018a36:	8a60      	ldrh	r0, [r4, #18]
 8018a38:	f000 f96c 	bl	8018d14 <uxr_seq_num_add>
 8018a3c:	4601      	mov	r1, r0
 8018a3e:	4628      	mov	r0, r5
 8018a40:	f000 f970 	bl	8018d24 <uxr_seq_num_cmp>
 8018a44:	2800      	cmp	r0, #0
 8018a46:	dd2a      	ble.n	8018a9e <uxr_prepare_reliable_buffer_to_write+0x252>
 8018a48:	2000      	movs	r0, #0
 8018a4a:	b011      	add	sp, #68	; 0x44
 8018a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a50:	8921      	ldrh	r1, [r4, #8]
 8018a52:	8a60      	ldrh	r0, [r4, #18]
 8018a54:	f000 f95e 	bl	8018d14 <uxr_seq_num_add>
 8018a58:	4601      	mov	r1, r0
 8018a5a:	4628      	mov	r0, r5
 8018a5c:	f000 f962 	bl	8018d24 <uxr_seq_num_cmp>
 8018a60:	2800      	cmp	r0, #0
 8018a62:	dcf1      	bgt.n	8018a48 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8018a64:	8921      	ldrh	r1, [r4, #8]
 8018a66:	fbb5 f3f1 	udiv	r3, r5, r1
 8018a6a:	e9d4 4200 	ldrd	r4, r2, [r4]
 8018a6e:	fb01 5313 	mls	r3, r1, r3, r5
 8018a72:	b29b      	uxth	r3, r3
 8018a74:	fbb2 f2f1 	udiv	r2, r2, r1
 8018a78:	fb03 f302 	mul.w	r3, r3, r2
 8018a7c:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8018a80:	50e7      	str	r7, [r4, r3]
 8018a82:	9b03      	ldr	r3, [sp, #12]
 8018a84:	9300      	str	r3, [sp, #0]
 8018a86:	463a      	mov	r2, r7
 8018a88:	2300      	movs	r3, #0
 8018a8a:	f7f8 fee3 	bl	8011854 <ucdr_init_buffer_origin_offset>
 8018a8e:	2001      	movs	r0, #1
 8018a90:	e7db      	b.n	8018a4a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8018a92:	f10a 0a01 	add.w	sl, sl, #1
 8018a96:	fa1f fa8a 	uxth.w	sl, sl
 8018a9a:	9307      	str	r3, [sp, #28]
 8018a9c:	e73c      	b.n	8018918 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8018a9e:	8920      	ldrh	r0, [r4, #8]
 8018aa0:	fbb5 f3f0 	udiv	r3, r5, r0
 8018aa4:	fb00 5313 	mls	r3, r0, r3, r5
 8018aa8:	b29b      	uxth	r3, r3
 8018aaa:	6862      	ldr	r2, [r4, #4]
 8018aac:	6821      	ldr	r1, [r4, #0]
 8018aae:	fbb2 f0f0 	udiv	r0, r2, r0
 8018ab2:	fb03 f300 	mul.w	r3, r3, r0
 8018ab6:	7b22      	ldrb	r2, [r4, #12]
 8018ab8:	9806      	ldr	r0, [sp, #24]
 8018aba:	3304      	adds	r3, #4
 8018abc:	4419      	add	r1, r3
 8018abe:	4442      	add	r2, r8
 8018ac0:	f841 2c04 	str.w	r2, [r1, #-4]
 8018ac4:	7b23      	ldrb	r3, [r4, #12]
 8018ac6:	9300      	str	r3, [sp, #0]
 8018ac8:	2300      	movs	r3, #0
 8018aca:	f7f8 fec3 	bl	8011854 <ucdr_init_buffer_origin_offset>
 8018ace:	81e5      	strh	r5, [r4, #14]
 8018ad0:	2001      	movs	r0, #1
 8018ad2:	e7ba      	b.n	8018a4a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8018ad4:	4628      	mov	r0, r5
 8018ad6:	2101      	movs	r1, #1
 8018ad8:	f000 f91c 	bl	8018d14 <uxr_seq_num_add>
 8018adc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018ae0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018ae4:	fbb3 f1fc 	udiv	r1, r3, ip
 8018ae8:	fbb0 f3fc 	udiv	r3, r0, ip
 8018aec:	fb0c 0313 	mls	r3, ip, r3, r0
 8018af0:	b29b      	uxth	r3, r3
 8018af2:	fb03 f301 	mul.w	r3, r3, r1
 8018af6:	3304      	adds	r3, #4
 8018af8:	18d3      	adds	r3, r2, r3
 8018afa:	9305      	str	r3, [sp, #20]
 8018afc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018b00:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8018b04:	9303      	str	r3, [sp, #12]
 8018b06:	4605      	mov	r5, r0
 8018b08:	e6d4      	b.n	80188b4 <uxr_prepare_reliable_buffer_to_write+0x68>
 8018b0a:	4660      	mov	r0, ip
 8018b0c:	e6ee      	b.n	80188ec <uxr_prepare_reliable_buffer_to_write+0xa0>
 8018b0e:	bf00      	nop
 8018b10:	08018745 	.word	0x08018745

08018b14 <uxr_prepare_next_reliable_buffer_to_send>:
 8018b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b18:	4605      	mov	r5, r0
 8018b1a:	4688      	mov	r8, r1
 8018b1c:	8a00      	ldrh	r0, [r0, #16]
 8018b1e:	2101      	movs	r1, #1
 8018b20:	4617      	mov	r7, r2
 8018b22:	461e      	mov	r6, r3
 8018b24:	f000 f8f6 	bl	8018d14 <uxr_seq_num_add>
 8018b28:	8030      	strh	r0, [r6, #0]
 8018b2a:	892a      	ldrh	r2, [r5, #8]
 8018b2c:	fbb0 f3f2 	udiv	r3, r0, r2
 8018b30:	fb02 0413 	mls	r4, r2, r3, r0
 8018b34:	b2a4      	uxth	r4, r4
 8018b36:	686b      	ldr	r3, [r5, #4]
 8018b38:	fbb3 f2f2 	udiv	r2, r3, r2
 8018b3c:	682b      	ldr	r3, [r5, #0]
 8018b3e:	89e9      	ldrh	r1, [r5, #14]
 8018b40:	fb04 f402 	mul.w	r4, r4, r2
 8018b44:	3404      	adds	r4, #4
 8018b46:	4423      	add	r3, r4
 8018b48:	f8c8 3000 	str.w	r3, [r8]
 8018b4c:	682b      	ldr	r3, [r5, #0]
 8018b4e:	441c      	add	r4, r3
 8018b50:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018b54:	603b      	str	r3, [r7, #0]
 8018b56:	f000 f8e5 	bl	8018d24 <uxr_seq_num_cmp>
 8018b5a:	2800      	cmp	r0, #0
 8018b5c:	dd02      	ble.n	8018b64 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8018b5e:	2000      	movs	r0, #0
 8018b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b64:	683a      	ldr	r2, [r7, #0]
 8018b66:	7b2b      	ldrb	r3, [r5, #12]
 8018b68:	429a      	cmp	r2, r3
 8018b6a:	d9f8      	bls.n	8018b5e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018b6c:	8a69      	ldrh	r1, [r5, #18]
 8018b6e:	8a28      	ldrh	r0, [r5, #16]
 8018b70:	f000 f8d4 	bl	8018d1c <uxr_seq_num_sub>
 8018b74:	892b      	ldrh	r3, [r5, #8]
 8018b76:	4283      	cmp	r3, r0
 8018b78:	d0f1      	beq.n	8018b5e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018b7a:	8830      	ldrh	r0, [r6, #0]
 8018b7c:	89eb      	ldrh	r3, [r5, #14]
 8018b7e:	8228      	strh	r0, [r5, #16]
 8018b80:	4298      	cmp	r0, r3
 8018b82:	d002      	beq.n	8018b8a <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8018b84:	2001      	movs	r0, #1
 8018b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b8a:	2101      	movs	r1, #1
 8018b8c:	f000 f8c2 	bl	8018d14 <uxr_seq_num_add>
 8018b90:	81e8      	strh	r0, [r5, #14]
 8018b92:	2001      	movs	r0, #1
 8018b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018b98 <uxr_update_output_stream_heartbeat_timestamp>:
 8018b98:	b5d0      	push	{r4, r6, r7, lr}
 8018b9a:	8a01      	ldrh	r1, [r0, #16]
 8018b9c:	4604      	mov	r4, r0
 8018b9e:	8a40      	ldrh	r0, [r0, #18]
 8018ba0:	4616      	mov	r6, r2
 8018ba2:	461f      	mov	r7, r3
 8018ba4:	f000 f8be 	bl	8018d24 <uxr_seq_num_cmp>
 8018ba8:	2800      	cmp	r0, #0
 8018baa:	db07      	blt.n	8018bbc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018bac:	f04f 32ff 	mov.w	r2, #4294967295
 8018bb0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018bb4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018bb8:	2000      	movs	r0, #0
 8018bba:	bdd0      	pop	{r4, r6, r7, pc}
 8018bbc:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018bc0:	b948      	cbnz	r0, 8018bd6 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8018bc2:	2301      	movs	r3, #1
 8018bc4:	f884 3020 	strb.w	r3, [r4, #32]
 8018bc8:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8018bcc:	f147 0200 	adc.w	r2, r7, #0
 8018bd0:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8018bd4:	bdd0      	pop	{r4, r6, r7, pc}
 8018bd6:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018bda:	4296      	cmp	r6, r2
 8018bdc:	eb77 0303 	sbcs.w	r3, r7, r3
 8018be0:	bfa5      	ittet	ge
 8018be2:	3001      	addge	r0, #1
 8018be4:	f884 0020 	strbge.w	r0, [r4, #32]
 8018be8:	2000      	movlt	r0, #0
 8018bea:	2001      	movge	r0, #1
 8018bec:	e7ec      	b.n	8018bc8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018bee:	bf00      	nop

08018bf0 <uxr_begin_output_nack_buffer_it>:
 8018bf0:	8a40      	ldrh	r0, [r0, #18]
 8018bf2:	4770      	bx	lr

08018bf4 <uxr_next_reliable_nack_buffer_to_send>:
 8018bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bf8:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8018bfc:	f1b9 0f00 	cmp.w	r9, #0
 8018c00:	d011      	beq.n	8018c26 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8018c02:	4605      	mov	r5, r0
 8018c04:	8818      	ldrh	r0, [r3, #0]
 8018c06:	460f      	mov	r7, r1
 8018c08:	4690      	mov	r8, r2
 8018c0a:	461e      	mov	r6, r3
 8018c0c:	2101      	movs	r1, #1
 8018c0e:	f000 f881 	bl	8018d14 <uxr_seq_num_add>
 8018c12:	8030      	strh	r0, [r6, #0]
 8018c14:	8a29      	ldrh	r1, [r5, #16]
 8018c16:	f000 f885 	bl	8018d24 <uxr_seq_num_cmp>
 8018c1a:	2800      	cmp	r0, #0
 8018c1c:	dd06      	ble.n	8018c2c <uxr_next_reliable_nack_buffer_to_send+0x38>
 8018c1e:	f04f 0900 	mov.w	r9, #0
 8018c22:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8018c26:	4648      	mov	r0, r9
 8018c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c2c:	892a      	ldrh	r2, [r5, #8]
 8018c2e:	8830      	ldrh	r0, [r6, #0]
 8018c30:	fbb0 f4f2 	udiv	r4, r0, r2
 8018c34:	fb02 0414 	mls	r4, r2, r4, r0
 8018c38:	b2a4      	uxth	r4, r4
 8018c3a:	686b      	ldr	r3, [r5, #4]
 8018c3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8018c40:	682b      	ldr	r3, [r5, #0]
 8018c42:	fb04 f402 	mul.w	r4, r4, r2
 8018c46:	3404      	adds	r4, #4
 8018c48:	4423      	add	r3, r4
 8018c4a:	603b      	str	r3, [r7, #0]
 8018c4c:	682b      	ldr	r3, [r5, #0]
 8018c4e:	441c      	add	r4, r3
 8018c50:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018c54:	f8c8 3000 	str.w	r3, [r8]
 8018c58:	7b2a      	ldrb	r2, [r5, #12]
 8018c5a:	429a      	cmp	r2, r3
 8018c5c:	d0d6      	beq.n	8018c0c <uxr_next_reliable_nack_buffer_to_send+0x18>
 8018c5e:	4648      	mov	r0, r9
 8018c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018c64 <uxr_process_acknack>:
 8018c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c66:	4604      	mov	r4, r0
 8018c68:	460e      	mov	r6, r1
 8018c6a:	4610      	mov	r0, r2
 8018c6c:	2101      	movs	r1, #1
 8018c6e:	f000 f855 	bl	8018d1c <uxr_seq_num_sub>
 8018c72:	8a61      	ldrh	r1, [r4, #18]
 8018c74:	f000 f852 	bl	8018d1c <uxr_seq_num_sub>
 8018c78:	b1c0      	cbz	r0, 8018cac <uxr_process_acknack+0x48>
 8018c7a:	4605      	mov	r5, r0
 8018c7c:	2700      	movs	r7, #0
 8018c7e:	2101      	movs	r1, #1
 8018c80:	8a60      	ldrh	r0, [r4, #18]
 8018c82:	f000 f847 	bl	8018d14 <uxr_seq_num_add>
 8018c86:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018c8a:	fbb0 f3fc 	udiv	r3, r0, ip
 8018c8e:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018c92:	fb0c 0313 	mls	r3, ip, r3, r0
 8018c96:	b29b      	uxth	r3, r3
 8018c98:	fbb1 f1fc 	udiv	r1, r1, ip
 8018c9c:	3701      	adds	r7, #1
 8018c9e:	fb03 f301 	mul.w	r3, r3, r1
 8018ca2:	42bd      	cmp	r5, r7
 8018ca4:	7b21      	ldrb	r1, [r4, #12]
 8018ca6:	8260      	strh	r0, [r4, #18]
 8018ca8:	50d1      	str	r1, [r2, r3]
 8018caa:	d1e8      	bne.n	8018c7e <uxr_process_acknack+0x1a>
 8018cac:	3e00      	subs	r6, #0
 8018cae:	f04f 0300 	mov.w	r3, #0
 8018cb2:	bf18      	it	ne
 8018cb4:	2601      	movne	r6, #1
 8018cb6:	f884 3020 	strb.w	r3, [r4, #32]
 8018cba:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8018cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018cc0 <uxr_is_output_up_to_date>:
 8018cc0:	8a01      	ldrh	r1, [r0, #16]
 8018cc2:	8a40      	ldrh	r0, [r0, #18]
 8018cc4:	b508      	push	{r3, lr}
 8018cc6:	f000 f82d 	bl	8018d24 <uxr_seq_num_cmp>
 8018cca:	fab0 f080 	clz	r0, r0
 8018cce:	0940      	lsrs	r0, r0, #5
 8018cd0:	bd08      	pop	{r3, pc}
 8018cd2:	bf00      	nop

08018cd4 <get_available_free_slots>:
 8018cd4:	8901      	ldrh	r1, [r0, #8]
 8018cd6:	b1d9      	cbz	r1, 8018d10 <get_available_free_slots+0x3c>
 8018cd8:	b4f0      	push	{r4, r5, r6, r7}
 8018cda:	2400      	movs	r4, #0
 8018cdc:	6845      	ldr	r5, [r0, #4]
 8018cde:	6807      	ldr	r7, [r0, #0]
 8018ce0:	7b06      	ldrb	r6, [r0, #12]
 8018ce2:	fbb5 f5f1 	udiv	r5, r5, r1
 8018ce6:	4620      	mov	r0, r4
 8018ce8:	4622      	mov	r2, r4
 8018cea:	fbb2 f3f1 	udiv	r3, r2, r1
 8018cee:	fb01 2313 	mls	r3, r1, r3, r2
 8018cf2:	b29b      	uxth	r3, r3
 8018cf4:	fb05 7303 	mla	r3, r5, r3, r7
 8018cf8:	3401      	adds	r4, #1
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	429e      	cmp	r6, r3
 8018cfe:	bf08      	it	eq
 8018d00:	3001      	addeq	r0, #1
 8018d02:	b2a2      	uxth	r2, r4
 8018d04:	bf08      	it	eq
 8018d06:	b280      	uxtheq	r0, r0
 8018d08:	428a      	cmp	r2, r1
 8018d0a:	d3ee      	bcc.n	8018cea <get_available_free_slots+0x16>
 8018d0c:	bcf0      	pop	{r4, r5, r6, r7}
 8018d0e:	4770      	bx	lr
 8018d10:	4608      	mov	r0, r1
 8018d12:	4770      	bx	lr

08018d14 <uxr_seq_num_add>:
 8018d14:	4408      	add	r0, r1
 8018d16:	b280      	uxth	r0, r0
 8018d18:	4770      	bx	lr
 8018d1a:	bf00      	nop

08018d1c <uxr_seq_num_sub>:
 8018d1c:	1a40      	subs	r0, r0, r1
 8018d1e:	b280      	uxth	r0, r0
 8018d20:	4770      	bx	lr
 8018d22:	bf00      	nop

08018d24 <uxr_seq_num_cmp>:
 8018d24:	4288      	cmp	r0, r1
 8018d26:	d011      	beq.n	8018d4c <uxr_seq_num_cmp+0x28>
 8018d28:	d309      	bcc.n	8018d3e <uxr_seq_num_cmp+0x1a>
 8018d2a:	4288      	cmp	r0, r1
 8018d2c:	d910      	bls.n	8018d50 <uxr_seq_num_cmp+0x2c>
 8018d2e:	1a40      	subs	r0, r0, r1
 8018d30:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8018d34:	bfd4      	ite	le
 8018d36:	2001      	movle	r0, #1
 8018d38:	f04f 30ff 	movgt.w	r0, #4294967295
 8018d3c:	4770      	bx	lr
 8018d3e:	1a0b      	subs	r3, r1, r0
 8018d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018d44:	daf1      	bge.n	8018d2a <uxr_seq_num_cmp+0x6>
 8018d46:	f04f 30ff 	mov.w	r0, #4294967295
 8018d4a:	4770      	bx	lr
 8018d4c:	2000      	movs	r0, #0
 8018d4e:	4770      	bx	lr
 8018d50:	2001      	movs	r0, #1
 8018d52:	4770      	bx	lr

08018d54 <uxr_init_framing_io>:
 8018d54:	2300      	movs	r3, #0
 8018d56:	7041      	strb	r1, [r0, #1]
 8018d58:	7003      	strb	r3, [r0, #0]
 8018d5a:	8583      	strh	r3, [r0, #44]	; 0x2c
 8018d5c:	4770      	bx	lr
 8018d5e:	bf00      	nop

08018d60 <uxr_write_framed_msg>:
 8018d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d64:	7845      	ldrb	r5, [r0, #1]
 8018d66:	b085      	sub	sp, #20
 8018d68:	4604      	mov	r4, r0
 8018d6a:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8018d6e:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8018d72:	f1bc 0f01 	cmp.w	ip, #1
 8018d76:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8018d7a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018d7e:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8018d82:	460e      	mov	r6, r1
 8018d84:	4617      	mov	r7, r2
 8018d86:	469b      	mov	fp, r3
 8018d88:	f240 8116 	bls.w	8018fb8 <uxr_write_framed_msg+0x258>
 8018d8c:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8018d90:	2302      	movs	r3, #2
 8018d92:	2a01      	cmp	r2, #1
 8018d94:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8018d98:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018d9c:	f240 8091 	bls.w	8018ec2 <uxr_write_framed_msg+0x162>
 8018da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018da2:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8018da6:	b2d9      	uxtb	r1, r3
 8018da8:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8018dac:	2203      	movs	r2, #3
 8018dae:	2b01      	cmp	r3, #1
 8018db0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018db4:	f240 809a 	bls.w	8018eec <uxr_write_framed_msg+0x18c>
 8018db8:	18a3      	adds	r3, r4, r2
 8018dba:	3201      	adds	r2, #1
 8018dbc:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8018dc0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018dc6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018dca:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8018dce:	2901      	cmp	r1, #1
 8018dd0:	eb04 0102 	add.w	r1, r4, r2
 8018dd4:	f240 8101 	bls.w	8018fda <uxr_write_framed_msg+0x27a>
 8018dd8:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8018ddc:	3201      	adds	r2, #1
 8018dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018de0:	b2d2      	uxtb	r2, r2
 8018de2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	f000 8106 	beq.w	8018ff8 <uxr_write_framed_msg+0x298>
 8018dec:	f04f 0a00 	mov.w	sl, #0
 8018df0:	46d1      	mov	r9, sl
 8018df2:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8018df6:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8018dfa:	2901      	cmp	r1, #1
 8018dfc:	f240 80a3 	bls.w	8018f46 <uxr_write_framed_msg+0x1e6>
 8018e00:	2a29      	cmp	r2, #41	; 0x29
 8018e02:	d87f      	bhi.n	8018f04 <uxr_write_framed_msg+0x1a4>
 8018e04:	18a1      	adds	r1, r4, r2
 8018e06:	3201      	adds	r2, #1
 8018e08:	b2d2      	uxtb	r2, r2
 8018e0a:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8018e0e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018e12:	ea8a 0303 	eor.w	r3, sl, r3
 8018e16:	4984      	ldr	r1, [pc, #528]	; (8019028 <uxr_write_framed_msg+0x2c8>)
 8018e18:	b2db      	uxtb	r3, r3
 8018e1a:	f109 0901 	add.w	r9, r9, #1
 8018e1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018e22:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8018e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e28:	454b      	cmp	r3, r9
 8018e2a:	d8e2      	bhi.n	8018df2 <uxr_write_framed_msg+0x92>
 8018e2c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018e30:	fa5f f98a 	uxtb.w	r9, sl
 8018e34:	9301      	str	r3, [sp, #4]
 8018e36:	f04f 0b00 	mov.w	fp, #0
 8018e3a:	f88d 900c 	strb.w	r9, [sp, #12]
 8018e3e:	f88d 300d 	strb.w	r3, [sp, #13]
 8018e42:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8018e46:	fa5f f18a 	uxtb.w	r1, sl
 8018e4a:	2901      	cmp	r1, #1
 8018e4c:	d920      	bls.n	8018e90 <uxr_write_framed_msg+0x130>
 8018e4e:	2a29      	cmp	r2, #41	; 0x29
 8018e50:	f240 808b 	bls.w	8018f6a <uxr_write_framed_msg+0x20a>
 8018e54:	2500      	movs	r5, #0
 8018e56:	e000      	b.n	8018e5a <uxr_write_framed_msg+0xfa>
 8018e58:	b160      	cbz	r0, 8018e74 <uxr_write_framed_msg+0x114>
 8018e5a:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018e5e:	1b52      	subs	r2, r2, r5
 8018e60:	4421      	add	r1, r4
 8018e62:	4643      	mov	r3, r8
 8018e64:	4638      	mov	r0, r7
 8018e66:	47b0      	blx	r6
 8018e68:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018e6c:	4405      	add	r5, r0
 8018e6e:	4295      	cmp	r5, r2
 8018e70:	d3f2      	bcc.n	8018e58 <uxr_write_framed_msg+0xf8>
 8018e72:	d003      	beq.n	8018e7c <uxr_write_framed_msg+0x11c>
 8018e74:	2000      	movs	r0, #0
 8018e76:	b005      	add	sp, #20
 8018e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e7c:	fa5f f18a 	uxtb.w	r1, sl
 8018e80:	f04f 0300 	mov.w	r3, #0
 8018e84:	2901      	cmp	r1, #1
 8018e86:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018e8a:	f04f 0200 	mov.w	r2, #0
 8018e8e:	d86c      	bhi.n	8018f6a <uxr_write_framed_msg+0x20a>
 8018e90:	1c51      	adds	r1, r2, #1
 8018e92:	b2c9      	uxtb	r1, r1
 8018e94:	2929      	cmp	r1, #41	; 0x29
 8018e96:	d8dd      	bhi.n	8018e54 <uxr_write_framed_msg+0xf4>
 8018e98:	18a0      	adds	r0, r4, r2
 8018e9a:	3202      	adds	r2, #2
 8018e9c:	f089 0920 	eor.w	r9, r9, #32
 8018ea0:	b2d2      	uxtb	r2, r2
 8018ea2:	4659      	mov	r1, fp
 8018ea4:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8018ea8:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8018eac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018eb0:	f04f 0b01 	mov.w	fp, #1
 8018eb4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018eb8:	2900      	cmp	r1, #0
 8018eba:	d162      	bne.n	8018f82 <uxr_write_framed_msg+0x222>
 8018ebc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018ec0:	e7bf      	b.n	8018e42 <uxr_write_framed_msg+0xe2>
 8018ec2:	2204      	movs	r2, #4
 8018ec4:	2503      	movs	r5, #3
 8018ec6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018ec8:	4423      	add	r3, r4
 8018eca:	b2c9      	uxtb	r1, r1
 8018ecc:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8018ed0:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8018ed4:	4425      	add	r5, r4
 8018ed6:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8018eda:	f080 0020 	eor.w	r0, r0, #32
 8018ede:	2b01      	cmp	r3, #1
 8018ee0:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8018ee4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018ee8:	f63f af66 	bhi.w	8018db8 <uxr_write_framed_msg+0x58>
 8018eec:	18a3      	adds	r3, r4, r2
 8018eee:	f081 0120 	eor.w	r1, r1, #32
 8018ef2:	3202      	adds	r2, #2
 8018ef4:	207d      	movs	r0, #125	; 0x7d
 8018ef6:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8018efa:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8018efe:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018f02:	e75f      	b.n	8018dc4 <uxr_write_framed_msg+0x64>
 8018f04:	2500      	movs	r5, #0
 8018f06:	e001      	b.n	8018f0c <uxr_write_framed_msg+0x1ac>
 8018f08:	2800      	cmp	r0, #0
 8018f0a:	d0b3      	beq.n	8018e74 <uxr_write_framed_msg+0x114>
 8018f0c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018f10:	1b52      	subs	r2, r2, r5
 8018f12:	4421      	add	r1, r4
 8018f14:	4643      	mov	r3, r8
 8018f16:	4638      	mov	r0, r7
 8018f18:	47b0      	blx	r6
 8018f1a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018f1e:	4405      	add	r5, r0
 8018f20:	4295      	cmp	r5, r2
 8018f22:	d3f1      	bcc.n	8018f08 <uxr_write_framed_msg+0x1a8>
 8018f24:	d1a6      	bne.n	8018e74 <uxr_write_framed_msg+0x114>
 8018f26:	f04f 0300 	mov.w	r3, #0
 8018f2a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f30:	454b      	cmp	r3, r9
 8018f32:	d971      	bls.n	8019018 <uxr_write_framed_msg+0x2b8>
 8018f34:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8018f38:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8018f3c:	2901      	cmp	r1, #1
 8018f3e:	f04f 0200 	mov.w	r2, #0
 8018f42:	f63f af5d 	bhi.w	8018e00 <uxr_write_framed_msg+0xa0>
 8018f46:	1c51      	adds	r1, r2, #1
 8018f48:	b2c9      	uxtb	r1, r1
 8018f4a:	2929      	cmp	r1, #41	; 0x29
 8018f4c:	d8da      	bhi.n	8018f04 <uxr_write_framed_msg+0x1a4>
 8018f4e:	18a0      	adds	r0, r4, r2
 8018f50:	3202      	adds	r2, #2
 8018f52:	b2d2      	uxtb	r2, r2
 8018f54:	f083 0120 	eor.w	r1, r3, #32
 8018f58:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8018f5c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8018f60:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8018f64:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018f68:	e753      	b.n	8018e12 <uxr_write_framed_msg+0xb2>
 8018f6a:	18a0      	adds	r0, r4, r2
 8018f6c:	3201      	adds	r2, #1
 8018f6e:	b2d2      	uxtb	r2, r2
 8018f70:	4659      	mov	r1, fp
 8018f72:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8018f76:	f04f 0b01 	mov.w	fp, #1
 8018f7a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018f7e:	2900      	cmp	r1, #0
 8018f80:	d09c      	beq.n	8018ebc <uxr_write_framed_msg+0x15c>
 8018f82:	2500      	movs	r5, #0
 8018f84:	e002      	b.n	8018f8c <uxr_write_framed_msg+0x22c>
 8018f86:	2800      	cmp	r0, #0
 8018f88:	f43f af74 	beq.w	8018e74 <uxr_write_framed_msg+0x114>
 8018f8c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018f90:	1b52      	subs	r2, r2, r5
 8018f92:	4421      	add	r1, r4
 8018f94:	4643      	mov	r3, r8
 8018f96:	4638      	mov	r0, r7
 8018f98:	47b0      	blx	r6
 8018f9a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018f9e:	4405      	add	r5, r0
 8018fa0:	4295      	cmp	r5, r2
 8018fa2:	d3f0      	bcc.n	8018f86 <uxr_write_framed_msg+0x226>
 8018fa4:	f47f af66 	bne.w	8018e74 <uxr_write_framed_msg+0x114>
 8018fa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018faa:	2300      	movs	r3, #0
 8018fac:	b290      	uxth	r0, r2
 8018fae:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018fb2:	b005      	add	sp, #20
 8018fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fb8:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8018fbc:	f085 0520 	eor.w	r5, r5, #32
 8018fc0:	2303      	movs	r3, #3
 8018fc2:	217d      	movs	r1, #125	; 0x7d
 8018fc4:	2a01      	cmp	r2, #1
 8018fc6:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8018fca:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018fce:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8018fd2:	d814      	bhi.n	8018ffe <uxr_write_framed_msg+0x29e>
 8018fd4:	2205      	movs	r2, #5
 8018fd6:	2504      	movs	r5, #4
 8018fd8:	e775      	b.n	8018ec6 <uxr_write_framed_msg+0x166>
 8018fda:	f083 0320 	eor.w	r3, r3, #32
 8018fde:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8018fe2:	3202      	adds	r2, #2
 8018fe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fe6:	b2d2      	uxtb	r2, r2
 8018fe8:	207d      	movs	r0, #125	; 0x7d
 8018fea:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8018fee:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	f47f aefa 	bne.w	8018dec <uxr_write_framed_msg+0x8c>
 8018ff8:	9301      	str	r3, [sp, #4]
 8018ffa:	4699      	mov	r9, r3
 8018ffc:	e71b      	b.n	8018e36 <uxr_write_framed_msg+0xd6>
 8018ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019000:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8019004:	b2d9      	uxtb	r1, r3
 8019006:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801900a:	2204      	movs	r2, #4
 801900c:	2b01      	cmp	r3, #1
 801900e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019012:	f63f aed1 	bhi.w	8018db8 <uxr_write_framed_msg+0x58>
 8019016:	e769      	b.n	8018eec <uxr_write_framed_msg+0x18c>
 8019018:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801901c:	fa5f f98a 	uxtb.w	r9, sl
 8019020:	9301      	str	r3, [sp, #4]
 8019022:	2200      	movs	r2, #0
 8019024:	e707      	b.n	8018e36 <uxr_write_framed_msg+0xd6>
 8019026:	bf00      	nop
 8019028:	0801beb0 	.word	0x0801beb0

0801902c <uxr_framing_read_transport>:
 801902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019030:	4604      	mov	r4, r0
 8019032:	b083      	sub	sp, #12
 8019034:	461f      	mov	r7, r3
 8019036:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 801903a:	4689      	mov	r9, r1
 801903c:	4692      	mov	sl, r2
 801903e:	f7fa fa07 	bl	8013450 <uxr_millis>
 8019042:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019046:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801904a:	42b3      	cmp	r3, r6
 801904c:	4680      	mov	r8, r0
 801904e:	d05f      	beq.n	8019110 <uxr_framing_read_transport+0xe4>
 8019050:	d81b      	bhi.n	801908a <uxr_framing_read_transport+0x5e>
 8019052:	1e75      	subs	r5, r6, #1
 8019054:	1aed      	subs	r5, r5, r3
 8019056:	b2ed      	uxtb	r5, r5
 8019058:	2600      	movs	r6, #0
 801905a:	455d      	cmp	r5, fp
 801905c:	d81e      	bhi.n	801909c <uxr_framing_read_transport+0x70>
 801905e:	19ab      	adds	r3, r5, r6
 8019060:	455b      	cmp	r3, fp
 8019062:	bf84      	itt	hi
 8019064:	ebab 0605 	subhi.w	r6, fp, r5
 8019068:	b2f6      	uxtbhi	r6, r6
 801906a:	b9e5      	cbnz	r5, 80190a6 <uxr_framing_read_transport+0x7a>
 801906c:	f04f 0b00 	mov.w	fp, #0
 8019070:	f7fa f9ee 	bl	8013450 <uxr_millis>
 8019074:	683b      	ldr	r3, [r7, #0]
 8019076:	eba0 0008 	sub.w	r0, r0, r8
 801907a:	1a1b      	subs	r3, r3, r0
 801907c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019080:	4658      	mov	r0, fp
 8019082:	603b      	str	r3, [r7, #0]
 8019084:	b003      	add	sp, #12
 8019086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801908a:	2e00      	cmp	r6, #0
 801908c:	d048      	beq.n	8019120 <uxr_framing_read_transport+0xf4>
 801908e:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8019092:	b2ed      	uxtb	r5, r5
 8019094:	3e01      	subs	r6, #1
 8019096:	455d      	cmp	r5, fp
 8019098:	b2f6      	uxtb	r6, r6
 801909a:	d9e0      	bls.n	801905e <uxr_framing_read_transport+0x32>
 801909c:	fa5f f58b 	uxtb.w	r5, fp
 80190a0:	2600      	movs	r6, #0
 80190a2:	2d00      	cmp	r5, #0
 80190a4:	d0e2      	beq.n	801906c <uxr_framing_read_transport+0x40>
 80190a6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80190aa:	3102      	adds	r1, #2
 80190ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190ae:	9300      	str	r3, [sp, #0]
 80190b0:	683b      	ldr	r3, [r7, #0]
 80190b2:	4421      	add	r1, r4
 80190b4:	462a      	mov	r2, r5
 80190b6:	4650      	mov	r0, sl
 80190b8:	47c8      	blx	r9
 80190ba:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80190be:	4a1b      	ldr	r2, [pc, #108]	; (801912c <uxr_framing_read_transport+0x100>)
 80190c0:	4403      	add	r3, r0
 80190c2:	0859      	lsrs	r1, r3, #1
 80190c4:	fba2 2101 	umull	r2, r1, r2, r1
 80190c8:	0889      	lsrs	r1, r1, #2
 80190ca:	222a      	movs	r2, #42	; 0x2a
 80190cc:	fb02 3111 	mls	r1, r2, r1, r3
 80190d0:	4683      	mov	fp, r0
 80190d2:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80190d6:	2800      	cmp	r0, #0
 80190d8:	d0c8      	beq.n	801906c <uxr_framing_read_transport+0x40>
 80190da:	42a8      	cmp	r0, r5
 80190dc:	d1c8      	bne.n	8019070 <uxr_framing_read_transport+0x44>
 80190de:	b31e      	cbz	r6, 8019128 <uxr_framing_read_transport+0xfc>
 80190e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80190e2:	9300      	str	r3, [sp, #0]
 80190e4:	3102      	adds	r1, #2
 80190e6:	4421      	add	r1, r4
 80190e8:	4632      	mov	r2, r6
 80190ea:	2300      	movs	r3, #0
 80190ec:	4650      	mov	r0, sl
 80190ee:	47c8      	blx	r9
 80190f0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80190f4:	490d      	ldr	r1, [pc, #52]	; (801912c <uxr_framing_read_transport+0x100>)
 80190f6:	181a      	adds	r2, r3, r0
 80190f8:	0853      	lsrs	r3, r2, #1
 80190fa:	fba1 1303 	umull	r1, r3, r1, r3
 80190fe:	089b      	lsrs	r3, r3, #2
 8019100:	212a      	movs	r1, #42	; 0x2a
 8019102:	fb01 2313 	mls	r3, r1, r3, r2
 8019106:	eb00 0b05 	add.w	fp, r0, r5
 801910a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801910e:	e7af      	b.n	8019070 <uxr_framing_read_transport+0x44>
 8019110:	2600      	movs	r6, #0
 8019112:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8019116:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8019118:	d9c0      	bls.n	801909c <uxr_framing_read_transport+0x70>
 801911a:	2102      	movs	r1, #2
 801911c:	2529      	movs	r5, #41	; 0x29
 801911e:	e7c5      	b.n	80190ac <uxr_framing_read_transport+0x80>
 8019120:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8019124:	b2ed      	uxtb	r5, r5
 8019126:	e798      	b.n	801905a <uxr_framing_read_transport+0x2e>
 8019128:	46ab      	mov	fp, r5
 801912a:	e7a1      	b.n	8019070 <uxr_framing_read_transport+0x44>
 801912c:	30c30c31 	.word	0x30c30c31

08019130 <uxr_read_framed_msg>:
 8019130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019134:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8019138:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 801913c:	42ae      	cmp	r6, r5
 801913e:	b083      	sub	sp, #12
 8019140:	4604      	mov	r4, r0
 8019142:	461f      	mov	r7, r3
 8019144:	4689      	mov	r9, r1
 8019146:	4692      	mov	sl, r2
 8019148:	f000 817d 	beq.w	8019446 <uxr_read_framed_msg+0x316>
 801914c:	7823      	ldrb	r3, [r4, #0]
 801914e:	4ecc      	ldr	r6, [pc, #816]	; (8019480 <uxr_read_framed_msg+0x350>)
 8019150:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8019484 <uxr_read_framed_msg+0x354>
 8019154:	2b07      	cmp	r3, #7
 8019156:	d8fd      	bhi.n	8019154 <uxr_read_framed_msg+0x24>
 8019158:	e8df f013 	tbh	[pc, r3, lsl #1]
 801915c:	00f40113 	.word	0x00f40113
 8019160:	00b700d4 	.word	0x00b700d4
 8019164:	004d008e 	.word	0x004d008e
 8019168:	00080030 	.word	0x00080030
 801916c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019170:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019174:	4298      	cmp	r0, r3
 8019176:	f000 8141 	beq.w	80193fc <uxr_read_framed_msg+0x2cc>
 801917a:	18e2      	adds	r2, r4, r3
 801917c:	7891      	ldrb	r1, [r2, #2]
 801917e:	297d      	cmp	r1, #125	; 0x7d
 8019180:	f000 81a2 	beq.w	80194c8 <uxr_read_framed_msg+0x398>
 8019184:	3301      	adds	r3, #1
 8019186:	085a      	lsrs	r2, r3, #1
 8019188:	fba6 0202 	umull	r0, r2, r6, r2
 801918c:	0892      	lsrs	r2, r2, #2
 801918e:	202a      	movs	r0, #42	; 0x2a
 8019190:	fb00 3312 	mls	r3, r0, r2, r3
 8019194:	297e      	cmp	r1, #126	; 0x7e
 8019196:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801919a:	f000 8251 	beq.w	8019640 <uxr_read_framed_msg+0x510>
 801919e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80191a0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80191a2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80191a6:	b29b      	uxth	r3, r3
 80191a8:	2100      	movs	r1, #0
 80191aa:	429a      	cmp	r2, r3
 80191ac:	86a3      	strh	r3, [r4, #52]	; 0x34
 80191ae:	7021      	strb	r1, [r4, #0]
 80191b0:	f000 8182 	beq.w	80194b8 <uxr_read_framed_msg+0x388>
 80191b4:	2000      	movs	r0, #0
 80191b6:	b003      	add	sp, #12
 80191b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191bc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80191c0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80191c4:	4298      	cmp	r0, r3
 80191c6:	f000 8128 	beq.w	801941a <uxr_read_framed_msg+0x2ea>
 80191ca:	18e2      	adds	r2, r4, r3
 80191cc:	7891      	ldrb	r1, [r2, #2]
 80191ce:	297d      	cmp	r1, #125	; 0x7d
 80191d0:	f000 8196 	beq.w	8019500 <uxr_read_framed_msg+0x3d0>
 80191d4:	3301      	adds	r3, #1
 80191d6:	085a      	lsrs	r2, r3, #1
 80191d8:	fba6 0202 	umull	r0, r2, r6, r2
 80191dc:	0892      	lsrs	r2, r2, #2
 80191de:	202a      	movs	r0, #42	; 0x2a
 80191e0:	fb00 3312 	mls	r3, r0, r2, r3
 80191e4:	297e      	cmp	r1, #126	; 0x7e
 80191e6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80191ea:	f000 8219 	beq.w	8019620 <uxr_read_framed_msg+0x4f0>
 80191ee:	2307      	movs	r3, #7
 80191f0:	86a1      	strh	r1, [r4, #52]	; 0x34
 80191f2:	7023      	strb	r3, [r4, #0]
 80191f4:	e7ae      	b.n	8019154 <uxr_read_framed_msg+0x24>
 80191f6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80191f8:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80191fa:	429d      	cmp	r5, r3
 80191fc:	d937      	bls.n	801926e <uxr_read_framed_msg+0x13e>
 80191fe:	ee07 9a90 	vmov	s15, r9
 8019202:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019206:	e01e      	b.n	8019246 <uxr_read_framed_msg+0x116>
 8019208:	f89e e002 	ldrb.w	lr, [lr, #2]
 801920c:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8019210:	f000 80d2 	beq.w	80193b8 <uxr_read_framed_msg+0x288>
 8019214:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8019218:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801921c:	f000 8214 	beq.w	8019648 <uxr_read_framed_msg+0x518>
 8019220:	f807 e003 	strb.w	lr, [r7, r3]
 8019224:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019226:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019228:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 801922a:	ea80 010e 	eor.w	r1, r0, lr
 801922e:	b2c9      	uxtb	r1, r1
 8019230:	3301      	adds	r3, #1
 8019232:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8019236:	b29b      	uxth	r3, r3
 8019238:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801923c:	42ab      	cmp	r3, r5
 801923e:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019240:	8663      	strh	r3, [r4, #50]	; 0x32
 8019242:	f080 8121 	bcs.w	8019488 <uxr_read_framed_msg+0x358>
 8019246:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 801924a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801924e:	f101 0b01 	add.w	fp, r1, #1
 8019252:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8019256:	fba6 9202 	umull	r9, r2, r6, r2
 801925a:	0892      	lsrs	r2, r2, #2
 801925c:	4288      	cmp	r0, r1
 801925e:	eb04 0e01 	add.w	lr, r4, r1
 8019262:	fb0c b212 	mls	r2, ip, r2, fp
 8019266:	d1cf      	bne.n	8019208 <uxr_read_framed_msg+0xd8>
 8019268:	ee17 9a90 	vmov	r9, s15
 801926c:	429d      	cmp	r5, r3
 801926e:	f040 8112 	bne.w	8019496 <uxr_read_framed_msg+0x366>
 8019272:	2306      	movs	r3, #6
 8019274:	7023      	strb	r3, [r4, #0]
 8019276:	e76d      	b.n	8019154 <uxr_read_framed_msg+0x24>
 8019278:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801927c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019280:	4298      	cmp	r0, r3
 8019282:	f000 80bb 	beq.w	80193fc <uxr_read_framed_msg+0x2cc>
 8019286:	18e2      	adds	r2, r4, r3
 8019288:	7891      	ldrb	r1, [r2, #2]
 801928a:	297d      	cmp	r1, #125	; 0x7d
 801928c:	f000 8153 	beq.w	8019536 <uxr_read_framed_msg+0x406>
 8019290:	3301      	adds	r3, #1
 8019292:	085a      	lsrs	r2, r3, #1
 8019294:	fba6 0202 	umull	r0, r2, r6, r2
 8019298:	0892      	lsrs	r2, r2, #2
 801929a:	202a      	movs	r0, #42	; 0x2a
 801929c:	fb00 3212 	mls	r2, r0, r2, r3
 80192a0:	297e      	cmp	r1, #126	; 0x7e
 80192a2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80192a6:	f000 81cb 	beq.w	8019640 <uxr_read_framed_msg+0x510>
 80192aa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80192ac:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80192b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80192b2:	b29b      	uxth	r3, r3
 80192b4:	2000      	movs	r0, #0
 80192b6:	428b      	cmp	r3, r1
 80192b8:	8623      	strh	r3, [r4, #48]	; 0x30
 80192ba:	8660      	strh	r0, [r4, #50]	; 0x32
 80192bc:	86e0      	strh	r0, [r4, #54]	; 0x36
 80192be:	f240 80db 	bls.w	8019478 <uxr_read_framed_msg+0x348>
 80192c2:	7020      	strb	r0, [r4, #0]
 80192c4:	b003      	add	sp, #12
 80192c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ca:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80192ce:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80192d2:	4298      	cmp	r0, r3
 80192d4:	f000 80a1 	beq.w	801941a <uxr_read_framed_msg+0x2ea>
 80192d8:	18e2      	adds	r2, r4, r3
 80192da:	7891      	ldrb	r1, [r2, #2]
 80192dc:	297d      	cmp	r1, #125	; 0x7d
 80192de:	f000 8167 	beq.w	80195b0 <uxr_read_framed_msg+0x480>
 80192e2:	3301      	adds	r3, #1
 80192e4:	085a      	lsrs	r2, r3, #1
 80192e6:	fba6 0202 	umull	r0, r2, r6, r2
 80192ea:	0892      	lsrs	r2, r2, #2
 80192ec:	202a      	movs	r0, #42	; 0x2a
 80192ee:	fb00 3312 	mls	r3, r0, r2, r3
 80192f2:	297e      	cmp	r1, #126	; 0x7e
 80192f4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80192f8:	f000 8192 	beq.w	8019620 <uxr_read_framed_msg+0x4f0>
 80192fc:	2304      	movs	r3, #4
 80192fe:	8621      	strh	r1, [r4, #48]	; 0x30
 8019300:	7023      	strb	r3, [r4, #0]
 8019302:	e727      	b.n	8019154 <uxr_read_framed_msg+0x24>
 8019304:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019308:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801930c:	4290      	cmp	r0, r2
 801930e:	f000 80b1 	beq.w	8019474 <uxr_read_framed_msg+0x344>
 8019312:	18a3      	adds	r3, r4, r2
 8019314:	7899      	ldrb	r1, [r3, #2]
 8019316:	297d      	cmp	r1, #125	; 0x7d
 8019318:	f000 8166 	beq.w	80195e8 <uxr_read_framed_msg+0x4b8>
 801931c:	3201      	adds	r2, #1
 801931e:	0850      	lsrs	r0, r2, #1
 8019320:	fba6 3000 	umull	r3, r0, r6, r0
 8019324:	0880      	lsrs	r0, r0, #2
 8019326:	232a      	movs	r3, #42	; 0x2a
 8019328:	fb03 2210 	mls	r2, r3, r0, r2
 801932c:	297e      	cmp	r1, #126	; 0x7e
 801932e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019332:	f000 8187 	beq.w	8019644 <uxr_read_framed_msg+0x514>
 8019336:	7863      	ldrb	r3, [r4, #1]
 8019338:	428b      	cmp	r3, r1
 801933a:	bf0c      	ite	eq
 801933c:	2303      	moveq	r3, #3
 801933e:	2300      	movne	r3, #0
 8019340:	7023      	strb	r3, [r4, #0]
 8019342:	e707      	b.n	8019154 <uxr_read_framed_msg+0x24>
 8019344:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019348:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801934c:	2200      	movs	r2, #0
 801934e:	4299      	cmp	r1, r3
 8019350:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8019354:	d063      	beq.n	801941e <uxr_read_framed_msg+0x2ee>
 8019356:	18e2      	adds	r2, r4, r3
 8019358:	7892      	ldrb	r2, [r2, #2]
 801935a:	2a7d      	cmp	r2, #125	; 0x7d
 801935c:	f000 8107 	beq.w	801956e <uxr_read_framed_msg+0x43e>
 8019360:	1c59      	adds	r1, r3, #1
 8019362:	084b      	lsrs	r3, r1, #1
 8019364:	fba6 0303 	umull	r0, r3, r6, r3
 8019368:	089b      	lsrs	r3, r3, #2
 801936a:	202a      	movs	r0, #42	; 0x2a
 801936c:	fb00 1313 	mls	r3, r0, r3, r1
 8019370:	2a7e      	cmp	r2, #126	; 0x7e
 8019372:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8019376:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801937a:	d050      	beq.n	801941e <uxr_read_framed_msg+0x2ee>
 801937c:	2302      	movs	r3, #2
 801937e:	7023      	strb	r3, [r4, #0]
 8019380:	e6e8      	b.n	8019154 <uxr_read_framed_msg+0x24>
 8019382:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8019386:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801938a:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801938e:	1c51      	adds	r1, r2, #1
 8019390:	084b      	lsrs	r3, r1, #1
 8019392:	fba6 5303 	umull	r5, r3, r6, r3
 8019396:	089b      	lsrs	r3, r3, #2
 8019398:	fb0c 1313 	mls	r3, ip, r3, r1
 801939c:	4596      	cmp	lr, r2
 801939e:	eb04 0002 	add.w	r0, r4, r2
 80193a2:	b2da      	uxtb	r2, r3
 80193a4:	f43f af06 	beq.w	80191b4 <uxr_read_framed_msg+0x84>
 80193a8:	7883      	ldrb	r3, [r0, #2]
 80193aa:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80193ae:	2b7e      	cmp	r3, #126	; 0x7e
 80193b0:	d1ed      	bne.n	801938e <uxr_read_framed_msg+0x25e>
 80193b2:	2301      	movs	r3, #1
 80193b4:	7023      	strb	r3, [r4, #0]
 80193b6:	e6cd      	b.n	8019154 <uxr_read_framed_msg+0x24>
 80193b8:	f101 0b01 	add.w	fp, r1, #1
 80193bc:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80193c0:	fba6 e202 	umull	lr, r2, r6, r2
 80193c4:	3102      	adds	r1, #2
 80193c6:	0892      	lsrs	r2, r2, #2
 80193c8:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 80193cc:	fb0c b212 	mls	r2, ip, r2, fp
 80193d0:	fba6 9e0e 	umull	r9, lr, r6, lr
 80193d4:	eb04 0b02 	add.w	fp, r4, r2
 80193d8:	b2d2      	uxtb	r2, r2
 80193da:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 80193de:	4290      	cmp	r0, r2
 80193e0:	fb0c 111e 	mls	r1, ip, lr, r1
 80193e4:	f43f af40 	beq.w	8019268 <uxr_read_framed_msg+0x138>
 80193e8:	f89b e002 	ldrb.w	lr, [fp, #2]
 80193ec:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80193f0:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80193f4:	d036      	beq.n	8019464 <uxr_read_framed_msg+0x334>
 80193f6:	f08e 0e20 	eor.w	lr, lr, #32
 80193fa:	e711      	b.n	8019220 <uxr_read_framed_msg+0xf0>
 80193fc:	2301      	movs	r3, #1
 80193fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019400:	4649      	mov	r1, r9
 8019402:	e9cd 2300 	strd	r2, r3, [sp]
 8019406:	4620      	mov	r0, r4
 8019408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801940a:	4652      	mov	r2, sl
 801940c:	f7ff fe0e 	bl	801902c <uxr_framing_read_transport>
 8019410:	2800      	cmp	r0, #0
 8019412:	f43f aecf 	beq.w	80191b4 <uxr_read_framed_msg+0x84>
 8019416:	7823      	ldrb	r3, [r4, #0]
 8019418:	e69c      	b.n	8019154 <uxr_read_framed_msg+0x24>
 801941a:	2302      	movs	r3, #2
 801941c:	e7ef      	b.n	80193fe <uxr_read_framed_msg+0x2ce>
 801941e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019420:	2304      	movs	r3, #4
 8019422:	e9cd 2300 	strd	r2, r3, [sp]
 8019426:	4649      	mov	r1, r9
 8019428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801942a:	4652      	mov	r2, sl
 801942c:	4620      	mov	r0, r4
 801942e:	f7ff fdfd 	bl	801902c <uxr_framing_read_transport>
 8019432:	2800      	cmp	r0, #0
 8019434:	d1ef      	bne.n	8019416 <uxr_read_framed_msg+0x2e6>
 8019436:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 801943a:	387e      	subs	r0, #126	; 0x7e
 801943c:	bf18      	it	ne
 801943e:	2001      	movne	r0, #1
 8019440:	2800      	cmp	r0, #0
 8019442:	d0e8      	beq.n	8019416 <uxr_read_framed_msg+0x2e6>
 8019444:	e6b6      	b.n	80191b4 <uxr_read_framed_msg+0x84>
 8019446:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019448:	2305      	movs	r3, #5
 801944a:	e9cd 5300 	strd	r5, r3, [sp]
 801944e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019450:	f7ff fdec 	bl	801902c <uxr_framing_read_transport>
 8019454:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019458:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801945c:	429a      	cmp	r2, r3
 801945e:	f43f aea9 	beq.w	80191b4 <uxr_read_framed_msg+0x84>
 8019462:	e673      	b.n	801914c <uxr_read_framed_msg+0x1c>
 8019464:	429d      	cmp	r5, r3
 8019466:	ee17 9a90 	vmov	r9, s15
 801946a:	f43f af02 	beq.w	8019272 <uxr_read_framed_msg+0x142>
 801946e:	2301      	movs	r3, #1
 8019470:	7023      	strb	r3, [r4, #0]
 8019472:	e66f      	b.n	8019154 <uxr_read_framed_msg+0x24>
 8019474:	2303      	movs	r3, #3
 8019476:	e7c2      	b.n	80193fe <uxr_read_framed_msg+0x2ce>
 8019478:	2305      	movs	r3, #5
 801947a:	7023      	strb	r3, [r4, #0]
 801947c:	e66a      	b.n	8019154 <uxr_read_framed_msg+0x24>
 801947e:	bf00      	nop
 8019480:	30c30c31 	.word	0x30c30c31
 8019484:	0801beb0 	.word	0x0801beb0
 8019488:	ee17 9a90 	vmov	r9, s15
 801948c:	f43f aef1 	beq.w	8019272 <uxr_read_framed_msg+0x142>
 8019490:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8019494:	d08d      	beq.n	80193b2 <uxr_read_framed_msg+0x282>
 8019496:	1aeb      	subs	r3, r5, r3
 8019498:	3302      	adds	r3, #2
 801949a:	9301      	str	r3, [sp, #4]
 801949c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801949e:	9300      	str	r3, [sp, #0]
 80194a0:	4652      	mov	r2, sl
 80194a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194a4:	4649      	mov	r1, r9
 80194a6:	4620      	mov	r0, r4
 80194a8:	f7ff fdc0 	bl	801902c <uxr_framing_read_transport>
 80194ac:	fab0 f080 	clz	r0, r0
 80194b0:	0940      	lsrs	r0, r0, #5
 80194b2:	2800      	cmp	r0, #0
 80194b4:	d0af      	beq.n	8019416 <uxr_read_framed_msg+0x2e6>
 80194b6:	e67d      	b.n	80191b4 <uxr_read_framed_msg+0x84>
 80194b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80194ba:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80194be:	7013      	strb	r3, [r2, #0]
 80194c0:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80194c2:	b003      	add	sp, #12
 80194c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194c8:	1c59      	adds	r1, r3, #1
 80194ca:	084a      	lsrs	r2, r1, #1
 80194cc:	fba6 5202 	umull	r5, r2, r6, r2
 80194d0:	0892      	lsrs	r2, r2, #2
 80194d2:	252a      	movs	r5, #42	; 0x2a
 80194d4:	fb05 1212 	mls	r2, r5, r2, r1
 80194d8:	b2d1      	uxtb	r1, r2
 80194da:	4288      	cmp	r0, r1
 80194dc:	d08e      	beq.n	80193fc <uxr_read_framed_msg+0x2cc>
 80194de:	3302      	adds	r3, #2
 80194e0:	4422      	add	r2, r4
 80194e2:	0858      	lsrs	r0, r3, #1
 80194e4:	fba6 1000 	umull	r1, r0, r6, r0
 80194e8:	7891      	ldrb	r1, [r2, #2]
 80194ea:	0882      	lsrs	r2, r0, #2
 80194ec:	fb05 3312 	mls	r3, r5, r2, r3
 80194f0:	297e      	cmp	r1, #126	; 0x7e
 80194f2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80194f6:	f000 80a3 	beq.w	8019640 <uxr_read_framed_msg+0x510>
 80194fa:	f081 0120 	eor.w	r1, r1, #32
 80194fe:	e64e      	b.n	801919e <uxr_read_framed_msg+0x6e>
 8019500:	1c59      	adds	r1, r3, #1
 8019502:	084a      	lsrs	r2, r1, #1
 8019504:	fba6 5202 	umull	r5, r2, r6, r2
 8019508:	0892      	lsrs	r2, r2, #2
 801950a:	252a      	movs	r5, #42	; 0x2a
 801950c:	fb05 1212 	mls	r2, r5, r2, r1
 8019510:	b2d1      	uxtb	r1, r2
 8019512:	4288      	cmp	r0, r1
 8019514:	d081      	beq.n	801941a <uxr_read_framed_msg+0x2ea>
 8019516:	3302      	adds	r3, #2
 8019518:	4422      	add	r2, r4
 801951a:	0858      	lsrs	r0, r3, #1
 801951c:	fba6 1000 	umull	r1, r0, r6, r0
 8019520:	7891      	ldrb	r1, [r2, #2]
 8019522:	0882      	lsrs	r2, r0, #2
 8019524:	fb05 3312 	mls	r3, r5, r2, r3
 8019528:	297e      	cmp	r1, #126	; 0x7e
 801952a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801952e:	d077      	beq.n	8019620 <uxr_read_framed_msg+0x4f0>
 8019530:	f081 0120 	eor.w	r1, r1, #32
 8019534:	e65b      	b.n	80191ee <uxr_read_framed_msg+0xbe>
 8019536:	1c59      	adds	r1, r3, #1
 8019538:	084a      	lsrs	r2, r1, #1
 801953a:	fba6 5202 	umull	r5, r2, r6, r2
 801953e:	0892      	lsrs	r2, r2, #2
 8019540:	252a      	movs	r5, #42	; 0x2a
 8019542:	fb05 1212 	mls	r2, r5, r2, r1
 8019546:	b2d1      	uxtb	r1, r2
 8019548:	4288      	cmp	r0, r1
 801954a:	f43f af57 	beq.w	80193fc <uxr_read_framed_msg+0x2cc>
 801954e:	3302      	adds	r3, #2
 8019550:	4422      	add	r2, r4
 8019552:	0858      	lsrs	r0, r3, #1
 8019554:	fba6 1000 	umull	r1, r0, r6, r0
 8019558:	7891      	ldrb	r1, [r2, #2]
 801955a:	0882      	lsrs	r2, r0, #2
 801955c:	fb05 3312 	mls	r3, r5, r2, r3
 8019560:	297e      	cmp	r1, #126	; 0x7e
 8019562:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019566:	d06b      	beq.n	8019640 <uxr_read_framed_msg+0x510>
 8019568:	f081 0120 	eor.w	r1, r1, #32
 801956c:	e69d      	b.n	80192aa <uxr_read_framed_msg+0x17a>
 801956e:	1c5d      	adds	r5, r3, #1
 8019570:	086a      	lsrs	r2, r5, #1
 8019572:	fba6 0202 	umull	r0, r2, r6, r2
 8019576:	0892      	lsrs	r2, r2, #2
 8019578:	202a      	movs	r0, #42	; 0x2a
 801957a:	fb00 5212 	mls	r2, r0, r2, r5
 801957e:	b2d5      	uxtb	r5, r2
 8019580:	42a9      	cmp	r1, r5
 8019582:	f43f af4c 	beq.w	801941e <uxr_read_framed_msg+0x2ee>
 8019586:	3302      	adds	r3, #2
 8019588:	4422      	add	r2, r4
 801958a:	0859      	lsrs	r1, r3, #1
 801958c:	fba6 5101 	umull	r5, r1, r6, r1
 8019590:	7895      	ldrb	r5, [r2, #2]
 8019592:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8019596:	088a      	lsrs	r2, r1, #2
 8019598:	fb00 3312 	mls	r3, r0, r2, r3
 801959c:	2d7e      	cmp	r5, #126	; 0x7e
 801959e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80195a2:	f43f af3c 	beq.w	801941e <uxr_read_framed_msg+0x2ee>
 80195a6:	f085 0520 	eor.w	r5, r5, #32
 80195aa:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 80195ae:	e6e5      	b.n	801937c <uxr_read_framed_msg+0x24c>
 80195b0:	1c59      	adds	r1, r3, #1
 80195b2:	084a      	lsrs	r2, r1, #1
 80195b4:	fba6 5202 	umull	r5, r2, r6, r2
 80195b8:	0892      	lsrs	r2, r2, #2
 80195ba:	252a      	movs	r5, #42	; 0x2a
 80195bc:	fb05 1212 	mls	r2, r5, r2, r1
 80195c0:	b2d1      	uxtb	r1, r2
 80195c2:	4288      	cmp	r0, r1
 80195c4:	f43f af29 	beq.w	801941a <uxr_read_framed_msg+0x2ea>
 80195c8:	3302      	adds	r3, #2
 80195ca:	4422      	add	r2, r4
 80195cc:	0858      	lsrs	r0, r3, #1
 80195ce:	fba6 1000 	umull	r1, r0, r6, r0
 80195d2:	7891      	ldrb	r1, [r2, #2]
 80195d4:	0882      	lsrs	r2, r0, #2
 80195d6:	fb05 3312 	mls	r3, r5, r2, r3
 80195da:	297e      	cmp	r1, #126	; 0x7e
 80195dc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80195e0:	d01e      	beq.n	8019620 <uxr_read_framed_msg+0x4f0>
 80195e2:	f081 0120 	eor.w	r1, r1, #32
 80195e6:	e689      	b.n	80192fc <uxr_read_framed_msg+0x1cc>
 80195e8:	1c51      	adds	r1, r2, #1
 80195ea:	084b      	lsrs	r3, r1, #1
 80195ec:	fba6 5303 	umull	r5, r3, r6, r3
 80195f0:	089b      	lsrs	r3, r3, #2
 80195f2:	252a      	movs	r5, #42	; 0x2a
 80195f4:	fb05 1313 	mls	r3, r5, r3, r1
 80195f8:	b2d9      	uxtb	r1, r3
 80195fa:	4288      	cmp	r0, r1
 80195fc:	f43f af3a 	beq.w	8019474 <uxr_read_framed_msg+0x344>
 8019600:	3202      	adds	r2, #2
 8019602:	4423      	add	r3, r4
 8019604:	0850      	lsrs	r0, r2, #1
 8019606:	789b      	ldrb	r3, [r3, #2]
 8019608:	fba6 1000 	umull	r1, r0, r6, r0
 801960c:	0880      	lsrs	r0, r0, #2
 801960e:	fb05 2210 	mls	r2, r5, r0, r2
 8019612:	2b7e      	cmp	r3, #126	; 0x7e
 8019614:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019618:	d014      	beq.n	8019644 <uxr_read_framed_msg+0x514>
 801961a:	f083 0120 	eor.w	r1, r3, #32
 801961e:	e68a      	b.n	8019336 <uxr_read_framed_msg+0x206>
 8019620:	2302      	movs	r3, #2
 8019622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019624:	4649      	mov	r1, r9
 8019626:	e9cd 2300 	strd	r2, r3, [sp]
 801962a:	4620      	mov	r0, r4
 801962c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801962e:	4652      	mov	r2, sl
 8019630:	f7ff fcfc 	bl	801902c <uxr_framing_read_transport>
 8019634:	2800      	cmp	r0, #0
 8019636:	f47f aeee 	bne.w	8019416 <uxr_read_framed_msg+0x2e6>
 801963a:	2301      	movs	r3, #1
 801963c:	7023      	strb	r3, [r4, #0]
 801963e:	e589      	b.n	8019154 <uxr_read_framed_msg+0x24>
 8019640:	2301      	movs	r3, #1
 8019642:	e7ee      	b.n	8019622 <uxr_read_framed_msg+0x4f2>
 8019644:	2303      	movs	r3, #3
 8019646:	e7ec      	b.n	8019622 <uxr_read_framed_msg+0x4f2>
 8019648:	ee17 9a90 	vmov	r9, s15
 801964c:	e6b1      	b.n	80193b2 <uxr_read_framed_msg+0x282>
 801964e:	bf00      	nop

08019650 <rcl_get_default_domain_id>:
 8019650:	b530      	push	{r4, r5, lr}
 8019652:	b083      	sub	sp, #12
 8019654:	2300      	movs	r3, #0
 8019656:	9300      	str	r3, [sp, #0]
 8019658:	b1d0      	cbz	r0, 8019690 <rcl_get_default_domain_id+0x40>
 801965a:	4604      	mov	r4, r0
 801965c:	4669      	mov	r1, sp
 801965e:	4815      	ldr	r0, [pc, #84]	; (80196b4 <rcl_get_default_domain_id+0x64>)
 8019660:	f7fd fa6a 	bl	8016b38 <rcutils_get_env>
 8019664:	4602      	mov	r2, r0
 8019666:	b110      	cbz	r0, 801966e <rcl_get_default_domain_id+0x1e>
 8019668:	2001      	movs	r0, #1
 801966a:	b003      	add	sp, #12
 801966c:	bd30      	pop	{r4, r5, pc}
 801966e:	9b00      	ldr	r3, [sp, #0]
 8019670:	b18b      	cbz	r3, 8019696 <rcl_get_default_domain_id+0x46>
 8019672:	7818      	ldrb	r0, [r3, #0]
 8019674:	2800      	cmp	r0, #0
 8019676:	d0f8      	beq.n	801966a <rcl_get_default_domain_id+0x1a>
 8019678:	4618      	mov	r0, r3
 801967a:	a901      	add	r1, sp, #4
 801967c:	9201      	str	r2, [sp, #4]
 801967e:	f000 fc07 	bl	8019e90 <strtoul>
 8019682:	4605      	mov	r5, r0
 8019684:	b150      	cbz	r0, 801969c <rcl_get_default_domain_id+0x4c>
 8019686:	1c43      	adds	r3, r0, #1
 8019688:	d00d      	beq.n	80196a6 <rcl_get_default_domain_id+0x56>
 801968a:	6025      	str	r5, [r4, #0]
 801968c:	2000      	movs	r0, #0
 801968e:	e7ec      	b.n	801966a <rcl_get_default_domain_id+0x1a>
 8019690:	200b      	movs	r0, #11
 8019692:	b003      	add	sp, #12
 8019694:	bd30      	pop	{r4, r5, pc}
 8019696:	4618      	mov	r0, r3
 8019698:	b003      	add	sp, #12
 801969a:	bd30      	pop	{r4, r5, pc}
 801969c:	9b01      	ldr	r3, [sp, #4]
 801969e:	781b      	ldrb	r3, [r3, #0]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d0f2      	beq.n	801968a <rcl_get_default_domain_id+0x3a>
 80196a4:	e7e0      	b.n	8019668 <rcl_get_default_domain_id+0x18>
 80196a6:	f000 ffc9 	bl	801a63c <__errno>
 80196aa:	6803      	ldr	r3, [r0, #0]
 80196ac:	2b22      	cmp	r3, #34	; 0x22
 80196ae:	d1ec      	bne.n	801968a <rcl_get_default_domain_id+0x3a>
 80196b0:	e7da      	b.n	8019668 <rcl_get_default_domain_id+0x18>
 80196b2:	bf00      	nop
 80196b4:	0801c0b0 	.word	0x0801c0b0

080196b8 <rcl_get_zero_initialized_guard_condition>:
 80196b8:	4a03      	ldr	r2, [pc, #12]	; (80196c8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80196ba:	4603      	mov	r3, r0
 80196bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80196c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80196c4:	4618      	mov	r0, r3
 80196c6:	4770      	bx	lr
 80196c8:	0801c0c0 	.word	0x0801c0c0

080196cc <rcl_guard_condition_init_from_rmw>:
 80196cc:	b082      	sub	sp, #8
 80196ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196d2:	b086      	sub	sp, #24
 80196d4:	ac0c      	add	r4, sp, #48	; 0x30
 80196d6:	4684      	mov	ip, r0
 80196d8:	f844 3f04 	str.w	r3, [r4, #4]!
 80196dc:	460f      	mov	r7, r1
 80196de:	4690      	mov	r8, r2
 80196e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80196e2:	ad01      	add	r5, sp, #4
 80196e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80196e6:	6823      	ldr	r3, [r4, #0]
 80196e8:	602b      	str	r3, [r5, #0]
 80196ea:	a801      	add	r0, sp, #4
 80196ec:	4664      	mov	r4, ip
 80196ee:	f7f5 ffed 	bl	800f6cc <rcutils_allocator_is_valid>
 80196f2:	b328      	cbz	r0, 8019740 <rcl_guard_condition_init_from_rmw+0x74>
 80196f4:	b324      	cbz	r4, 8019740 <rcl_guard_condition_init_from_rmw+0x74>
 80196f6:	6866      	ldr	r6, [r4, #4]
 80196f8:	b9e6      	cbnz	r6, 8019734 <rcl_guard_condition_init_from_rmw+0x68>
 80196fa:	f1b8 0f00 	cmp.w	r8, #0
 80196fe:	d01f      	beq.n	8019740 <rcl_guard_condition_init_from_rmw+0x74>
 8019700:	4640      	mov	r0, r8
 8019702:	f7fb f92f 	bl	8014964 <rcl_context_is_valid>
 8019706:	b308      	cbz	r0, 801974c <rcl_guard_condition_init_from_rmw+0x80>
 8019708:	9b01      	ldr	r3, [sp, #4]
 801970a:	9905      	ldr	r1, [sp, #20]
 801970c:	201c      	movs	r0, #28
 801970e:	4798      	blx	r3
 8019710:	4605      	mov	r5, r0
 8019712:	6060      	str	r0, [r4, #4]
 8019714:	b340      	cbz	r0, 8019768 <rcl_guard_condition_init_from_rmw+0x9c>
 8019716:	b1df      	cbz	r7, 8019750 <rcl_guard_condition_init_from_rmw+0x84>
 8019718:	6007      	str	r7, [r0, #0]
 801971a:	7106      	strb	r6, [r0, #4]
 801971c:	ac01      	add	r4, sp, #4
 801971e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019720:	3508      	adds	r5, #8
 8019722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019724:	6823      	ldr	r3, [r4, #0]
 8019726:	602b      	str	r3, [r5, #0]
 8019728:	2000      	movs	r0, #0
 801972a:	b006      	add	sp, #24
 801972c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019730:	b002      	add	sp, #8
 8019732:	4770      	bx	lr
 8019734:	2064      	movs	r0, #100	; 0x64
 8019736:	b006      	add	sp, #24
 8019738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801973c:	b002      	add	sp, #8
 801973e:	4770      	bx	lr
 8019740:	200b      	movs	r0, #11
 8019742:	b006      	add	sp, #24
 8019744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019748:	b002      	add	sp, #8
 801974a:	4770      	bx	lr
 801974c:	2065      	movs	r0, #101	; 0x65
 801974e:	e7f2      	b.n	8019736 <rcl_guard_condition_init_from_rmw+0x6a>
 8019750:	f8d8 0000 	ldr.w	r0, [r8]
 8019754:	3028      	adds	r0, #40	; 0x28
 8019756:	f000 f93b 	bl	80199d0 <rmw_create_guard_condition>
 801975a:	6028      	str	r0, [r5, #0]
 801975c:	6865      	ldr	r5, [r4, #4]
 801975e:	682e      	ldr	r6, [r5, #0]
 8019760:	b126      	cbz	r6, 801976c <rcl_guard_condition_init_from_rmw+0xa0>
 8019762:	2301      	movs	r3, #1
 8019764:	712b      	strb	r3, [r5, #4]
 8019766:	e7d9      	b.n	801971c <rcl_guard_condition_init_from_rmw+0x50>
 8019768:	200a      	movs	r0, #10
 801976a:	e7e4      	b.n	8019736 <rcl_guard_condition_init_from_rmw+0x6a>
 801976c:	4628      	mov	r0, r5
 801976e:	9b02      	ldr	r3, [sp, #8]
 8019770:	9905      	ldr	r1, [sp, #20]
 8019772:	4798      	blx	r3
 8019774:	6066      	str	r6, [r4, #4]
 8019776:	2001      	movs	r0, #1
 8019778:	e7dd      	b.n	8019736 <rcl_guard_condition_init_from_rmw+0x6a>
 801977a:	bf00      	nop

0801977c <rcl_guard_condition_fini>:
 801977c:	b570      	push	{r4, r5, r6, lr}
 801977e:	b082      	sub	sp, #8
 8019780:	b1f0      	cbz	r0, 80197c0 <rcl_guard_condition_fini+0x44>
 8019782:	4604      	mov	r4, r0
 8019784:	6840      	ldr	r0, [r0, #4]
 8019786:	b158      	cbz	r0, 80197a0 <rcl_guard_condition_fini+0x24>
 8019788:	6803      	ldr	r3, [r0, #0]
 801978a:	68c6      	ldr	r6, [r0, #12]
 801978c:	6981      	ldr	r1, [r0, #24]
 801978e:	b15b      	cbz	r3, 80197a8 <rcl_guard_condition_fini+0x2c>
 8019790:	7905      	ldrb	r5, [r0, #4]
 8019792:	b95d      	cbnz	r5, 80197ac <rcl_guard_condition_fini+0x30>
 8019794:	47b0      	blx	r6
 8019796:	2300      	movs	r3, #0
 8019798:	4628      	mov	r0, r5
 801979a:	6063      	str	r3, [r4, #4]
 801979c:	b002      	add	sp, #8
 801979e:	bd70      	pop	{r4, r5, r6, pc}
 80197a0:	4605      	mov	r5, r0
 80197a2:	4628      	mov	r0, r5
 80197a4:	b002      	add	sp, #8
 80197a6:	bd70      	pop	{r4, r5, r6, pc}
 80197a8:	461d      	mov	r5, r3
 80197aa:	e7f3      	b.n	8019794 <rcl_guard_condition_fini+0x18>
 80197ac:	4618      	mov	r0, r3
 80197ae:	9101      	str	r1, [sp, #4]
 80197b0:	f000 f922 	bl	80199f8 <rmw_destroy_guard_condition>
 80197b4:	1e05      	subs	r5, r0, #0
 80197b6:	9901      	ldr	r1, [sp, #4]
 80197b8:	6860      	ldr	r0, [r4, #4]
 80197ba:	bf18      	it	ne
 80197bc:	2501      	movne	r5, #1
 80197be:	e7e9      	b.n	8019794 <rcl_guard_condition_fini+0x18>
 80197c0:	250b      	movs	r5, #11
 80197c2:	4628      	mov	r0, r5
 80197c4:	b002      	add	sp, #8
 80197c6:	bd70      	pop	{r4, r5, r6, pc}

080197c8 <rcl_guard_condition_get_default_options>:
 80197c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197ca:	b087      	sub	sp, #28
 80197cc:	4607      	mov	r7, r0
 80197ce:	466c      	mov	r4, sp
 80197d0:	4668      	mov	r0, sp
 80197d2:	f7f5 ff6d 	bl	800f6b0 <rcutils_get_default_allocator>
 80197d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80197d8:	4d07      	ldr	r5, [pc, #28]	; (80197f8 <rcl_guard_condition_get_default_options+0x30>)
 80197da:	f8d4 c000 	ldr.w	ip, [r4]
 80197de:	462e      	mov	r6, r5
 80197e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80197e2:	462c      	mov	r4, r5
 80197e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80197e6:	463c      	mov	r4, r7
 80197e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197ea:	4638      	mov	r0, r7
 80197ec:	f8c6 c000 	str.w	ip, [r6]
 80197f0:	f8c4 c000 	str.w	ip, [r4]
 80197f4:	b007      	add	sp, #28
 80197f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197f8:	20009d4c 	.word	0x20009d4c

080197fc <rcl_guard_condition_get_rmw_handle>:
 80197fc:	b110      	cbz	r0, 8019804 <rcl_guard_condition_get_rmw_handle+0x8>
 80197fe:	6840      	ldr	r0, [r0, #4]
 8019800:	b100      	cbz	r0, 8019804 <rcl_guard_condition_get_rmw_handle+0x8>
 8019802:	6800      	ldr	r0, [r0, #0]
 8019804:	4770      	bx	lr
 8019806:	bf00      	nop

08019808 <on_status>:
 8019808:	b082      	sub	sp, #8
 801980a:	b002      	add	sp, #8
 801980c:	4770      	bx	lr
 801980e:	bf00      	nop

08019810 <on_topic>:
 8019810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019814:	4a21      	ldr	r2, [pc, #132]	; (801989c <on_topic+0x8c>)
 8019816:	b094      	sub	sp, #80	; 0x50
 8019818:	6812      	ldr	r2, [r2, #0]
 801981a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801981c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8019820:	9113      	str	r1, [sp, #76]	; 0x4c
 8019822:	9312      	str	r3, [sp, #72]	; 0x48
 8019824:	b3ba      	cbz	r2, 8019896 <on_topic+0x86>
 8019826:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801982a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801982e:	e001      	b.n	8019834 <on_topic+0x24>
 8019830:	6892      	ldr	r2, [r2, #8]
 8019832:	b382      	cbz	r2, 8019896 <on_topic+0x86>
 8019834:	68d4      	ldr	r4, [r2, #12]
 8019836:	8aa3      	ldrh	r3, [r4, #20]
 8019838:	428b      	cmp	r3, r1
 801983a:	d1f9      	bne.n	8019830 <on_topic+0x20>
 801983c:	7da3      	ldrb	r3, [r4, #22]
 801983e:	4283      	cmp	r3, r0
 8019840:	d1f6      	bne.n	8019830 <on_topic+0x20>
 8019842:	2248      	movs	r2, #72	; 0x48
 8019844:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8019848:	4668      	mov	r0, sp
 801984a:	f000 ff2c 	bl	801a6a6 <memcpy>
 801984e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8019852:	4620      	mov	r0, r4
 8019854:	f7f6 fe7e 	bl	8010554 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019858:	4607      	mov	r7, r0
 801985a:	b1e0      	cbz	r0, 8019896 <on_topic+0x86>
 801985c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019860:	462a      	mov	r2, r5
 8019862:	4630      	mov	r0, r6
 8019864:	f108 0110 	add.w	r1, r8, #16
 8019868:	f7fe fb9a 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 801986c:	b930      	cbnz	r0, 801987c <on_topic+0x6c>
 801986e:	480c      	ldr	r0, [pc, #48]	; (80198a0 <on_topic+0x90>)
 8019870:	4639      	mov	r1, r7
 8019872:	b014      	add	sp, #80	; 0x50
 8019874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019878:	f7fd bb82 	b.w	8016f80 <put_memory>
 801987c:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8019880:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8019884:	f7fe fab6 	bl	8017df4 <rmw_uros_epoch_nanos>
 8019888:	f608 0218 	addw	r2, r8, #2072	; 0x818
 801988c:	2305      	movs	r3, #5
 801988e:	e9c2 0100 	strd	r0, r1, [r2]
 8019892:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8019896:	b014      	add	sp, #80	; 0x50
 8019898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801989c:	2000d154 	.word	0x2000d154
 80198a0:	20009ee8 	.word	0x20009ee8

080198a4 <on_request>:
 80198a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80198a8:	4822      	ldr	r0, [pc, #136]	; (8019934 <on_request+0x90>)
 80198aa:	b095      	sub	sp, #84	; 0x54
 80198ac:	9113      	str	r1, [sp, #76]	; 0x4c
 80198ae:	6801      	ldr	r1, [r0, #0]
 80198b0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80198b2:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80198b6:	2900      	cmp	r1, #0
 80198b8:	d039      	beq.n	801992e <on_request+0x8a>
 80198ba:	461d      	mov	r5, r3
 80198bc:	e001      	b.n	80198c2 <on_request+0x1e>
 80198be:	6889      	ldr	r1, [r1, #8]
 80198c0:	b3a9      	cbz	r1, 801992e <on_request+0x8a>
 80198c2:	68cc      	ldr	r4, [r1, #12]
 80198c4:	8b20      	ldrh	r0, [r4, #24]
 80198c6:	4290      	cmp	r0, r2
 80198c8:	d1f9      	bne.n	80198be <on_request+0x1a>
 80198ca:	2248      	movs	r2, #72	; 0x48
 80198cc:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80198d0:	4668      	mov	r0, sp
 80198d2:	f000 fee8 	bl	801a6a6 <memcpy>
 80198d6:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80198da:	4620      	mov	r0, r4
 80198dc:	f7f6 fe3a 	bl	8010554 <rmw_uxrce_get_static_input_buffer_for_entity>
 80198e0:	4680      	mov	r8, r0
 80198e2:	b320      	cbz	r0, 801992e <on_request+0x8a>
 80198e4:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80198e8:	4632      	mov	r2, r6
 80198ea:	4638      	mov	r0, r7
 80198ec:	f109 0110 	add.w	r1, r9, #16
 80198f0:	f7fe fb56 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 80198f4:	b930      	cbnz	r0, 8019904 <on_request+0x60>
 80198f6:	4810      	ldr	r0, [pc, #64]	; (8019938 <on_request+0x94>)
 80198f8:	4641      	mov	r1, r8
 80198fa:	b015      	add	sp, #84	; 0x54
 80198fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019900:	f7fd bb3e 	b.w	8016f80 <put_memory>
 8019904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019906:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801990a:	f609 0428 	addw	r4, r9, #2088	; 0x828
 801990e:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8019912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019914:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019918:	e884 0003 	stmia.w	r4, {r0, r1}
 801991c:	f7fe fa6a 	bl	8017df4 <rmw_uros_epoch_nanos>
 8019920:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8019924:	2303      	movs	r3, #3
 8019926:	e9c2 0100 	strd	r0, r1, [r2]
 801992a:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 801992e:	b015      	add	sp, #84	; 0x54
 8019930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019934:	2000d144 	.word	0x2000d144
 8019938:	20009ee8 	.word	0x20009ee8

0801993c <on_reply>:
 801993c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019940:	4821      	ldr	r0, [pc, #132]	; (80199c8 <on_reply+0x8c>)
 8019942:	b095      	sub	sp, #84	; 0x54
 8019944:	9113      	str	r1, [sp, #76]	; 0x4c
 8019946:	6801      	ldr	r1, [r0, #0]
 8019948:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801994a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 801994e:	b3b9      	cbz	r1, 80199c0 <on_reply+0x84>
 8019950:	461d      	mov	r5, r3
 8019952:	e001      	b.n	8019958 <on_reply+0x1c>
 8019954:	6889      	ldr	r1, [r1, #8]
 8019956:	b399      	cbz	r1, 80199c0 <on_reply+0x84>
 8019958:	68cc      	ldr	r4, [r1, #12]
 801995a:	8b20      	ldrh	r0, [r4, #24]
 801995c:	4290      	cmp	r0, r2
 801995e:	d1f9      	bne.n	8019954 <on_reply+0x18>
 8019960:	2248      	movs	r2, #72	; 0x48
 8019962:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8019966:	4668      	mov	r0, sp
 8019968:	f000 fe9d 	bl	801a6a6 <memcpy>
 801996c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8019970:	4620      	mov	r0, r4
 8019972:	f7f6 fdef 	bl	8010554 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019976:	4680      	mov	r8, r0
 8019978:	b310      	cbz	r0, 80199c0 <on_reply+0x84>
 801997a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801997e:	4632      	mov	r2, r6
 8019980:	4638      	mov	r0, r7
 8019982:	f109 0110 	add.w	r1, r9, #16
 8019986:	f7fe fb0b 	bl	8017fa0 <ucdr_deserialize_array_uint8_t>
 801998a:	b930      	cbnz	r0, 801999a <on_reply+0x5e>
 801998c:	480f      	ldr	r0, [pc, #60]	; (80199cc <on_reply+0x90>)
 801998e:	4641      	mov	r1, r8
 8019990:	b015      	add	sp, #84	; 0x54
 8019992:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019996:	f7fd baf3 	b.w	8016f80 <put_memory>
 801999a:	b2aa      	uxth	r2, r5
 801999c:	2300      	movs	r3, #0
 801999e:	f609 0128 	addw	r1, r9, #2088	; 0x828
 80199a2:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80199a6:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 80199aa:	e9c1 2300 	strd	r2, r3, [r1]
 80199ae:	f7fe fa21 	bl	8017df4 <rmw_uros_epoch_nanos>
 80199b2:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80199b6:	2304      	movs	r3, #4
 80199b8:	e9c2 0100 	strd	r0, r1, [r2]
 80199bc:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80199c0:	b015      	add	sp, #84	; 0x54
 80199c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199c6:	bf00      	nop
 80199c8:	2000a778 	.word	0x2000a778
 80199cc:	20009ee8 	.word	0x20009ee8

080199d0 <rmw_create_guard_condition>:
 80199d0:	b538      	push	{r3, r4, r5, lr}
 80199d2:	4605      	mov	r5, r0
 80199d4:	4807      	ldr	r0, [pc, #28]	; (80199f4 <rmw_create_guard_condition+0x24>)
 80199d6:	f7fd fac3 	bl	8016f60 <get_memory>
 80199da:	b148      	cbz	r0, 80199f0 <rmw_create_guard_condition+0x20>
 80199dc:	68c4      	ldr	r4, [r0, #12]
 80199de:	2300      	movs	r3, #0
 80199e0:	61e5      	str	r5, [r4, #28]
 80199e2:	7423      	strb	r3, [r4, #16]
 80199e4:	f7fd fb24 	bl	8017030 <rmw_get_implementation_identifier>
 80199e8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80199ec:	f104 0014 	add.w	r0, r4, #20
 80199f0:	bd38      	pop	{r3, r4, r5, pc}
 80199f2:	bf00      	nop
 80199f4:	2000d070 	.word	0x2000d070

080199f8 <rmw_destroy_guard_condition>:
 80199f8:	b508      	push	{r3, lr}
 80199fa:	4b08      	ldr	r3, [pc, #32]	; (8019a1c <rmw_destroy_guard_condition+0x24>)
 80199fc:	6819      	ldr	r1, [r3, #0]
 80199fe:	b911      	cbnz	r1, 8019a06 <rmw_destroy_guard_condition+0xe>
 8019a00:	e00a      	b.n	8019a18 <rmw_destroy_guard_condition+0x20>
 8019a02:	6889      	ldr	r1, [r1, #8]
 8019a04:	b141      	cbz	r1, 8019a18 <rmw_destroy_guard_condition+0x20>
 8019a06:	68cb      	ldr	r3, [r1, #12]
 8019a08:	3314      	adds	r3, #20
 8019a0a:	4298      	cmp	r0, r3
 8019a0c:	d1f9      	bne.n	8019a02 <rmw_destroy_guard_condition+0xa>
 8019a0e:	4803      	ldr	r0, [pc, #12]	; (8019a1c <rmw_destroy_guard_condition+0x24>)
 8019a10:	f7fd fab6 	bl	8016f80 <put_memory>
 8019a14:	2000      	movs	r0, #0
 8019a16:	bd08      	pop	{r3, pc}
 8019a18:	2001      	movs	r0, #1
 8019a1a:	bd08      	pop	{r3, pc}
 8019a1c:	2000d070 	.word	0x2000d070

08019a20 <calloc>:
 8019a20:	4b02      	ldr	r3, [pc, #8]	; (8019a2c <calloc+0xc>)
 8019a22:	460a      	mov	r2, r1
 8019a24:	4601      	mov	r1, r0
 8019a26:	6818      	ldr	r0, [r3, #0]
 8019a28:	f000 b802 	b.w	8019a30 <_calloc_r>
 8019a2c:	200000e8 	.word	0x200000e8

08019a30 <_calloc_r>:
 8019a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a32:	fba1 2402 	umull	r2, r4, r1, r2
 8019a36:	b94c      	cbnz	r4, 8019a4c <_calloc_r+0x1c>
 8019a38:	4611      	mov	r1, r2
 8019a3a:	9201      	str	r2, [sp, #4]
 8019a3c:	f000 f886 	bl	8019b4c <_malloc_r>
 8019a40:	9a01      	ldr	r2, [sp, #4]
 8019a42:	4605      	mov	r5, r0
 8019a44:	b930      	cbnz	r0, 8019a54 <_calloc_r+0x24>
 8019a46:	4628      	mov	r0, r5
 8019a48:	b003      	add	sp, #12
 8019a4a:	bd30      	pop	{r4, r5, pc}
 8019a4c:	220c      	movs	r2, #12
 8019a4e:	6002      	str	r2, [r0, #0]
 8019a50:	2500      	movs	r5, #0
 8019a52:	e7f8      	b.n	8019a46 <_calloc_r+0x16>
 8019a54:	4621      	mov	r1, r4
 8019a56:	f000 fd07 	bl	801a468 <memset>
 8019a5a:	e7f4      	b.n	8019a46 <_calloc_r+0x16>

08019a5c <getenv>:
 8019a5c:	b507      	push	{r0, r1, r2, lr}
 8019a5e:	4b04      	ldr	r3, [pc, #16]	; (8019a70 <getenv+0x14>)
 8019a60:	4601      	mov	r1, r0
 8019a62:	aa01      	add	r2, sp, #4
 8019a64:	6818      	ldr	r0, [r3, #0]
 8019a66:	f000 f805 	bl	8019a74 <_findenv_r>
 8019a6a:	b003      	add	sp, #12
 8019a6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019a70:	200000e8 	.word	0x200000e8

08019a74 <_findenv_r>:
 8019a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a78:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8019ae8 <_findenv_r+0x74>
 8019a7c:	4607      	mov	r7, r0
 8019a7e:	4689      	mov	r9, r1
 8019a80:	4616      	mov	r6, r2
 8019a82:	f000 fe3d 	bl	801a700 <__env_lock>
 8019a86:	f8da 4000 	ldr.w	r4, [sl]
 8019a8a:	b134      	cbz	r4, 8019a9a <_findenv_r+0x26>
 8019a8c:	464b      	mov	r3, r9
 8019a8e:	4698      	mov	r8, r3
 8019a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a94:	b13a      	cbz	r2, 8019aa6 <_findenv_r+0x32>
 8019a96:	2a3d      	cmp	r2, #61	; 0x3d
 8019a98:	d1f9      	bne.n	8019a8e <_findenv_r+0x1a>
 8019a9a:	4638      	mov	r0, r7
 8019a9c:	f000 fe36 	bl	801a70c <__env_unlock>
 8019aa0:	2000      	movs	r0, #0
 8019aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aa6:	eba8 0809 	sub.w	r8, r8, r9
 8019aaa:	46a3      	mov	fp, r4
 8019aac:	f854 0b04 	ldr.w	r0, [r4], #4
 8019ab0:	2800      	cmp	r0, #0
 8019ab2:	d0f2      	beq.n	8019a9a <_findenv_r+0x26>
 8019ab4:	4642      	mov	r2, r8
 8019ab6:	4649      	mov	r1, r9
 8019ab8:	f000 fceb 	bl	801a492 <strncmp>
 8019abc:	2800      	cmp	r0, #0
 8019abe:	d1f4      	bne.n	8019aaa <_findenv_r+0x36>
 8019ac0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019ac4:	eb03 0508 	add.w	r5, r3, r8
 8019ac8:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019acc:	2b3d      	cmp	r3, #61	; 0x3d
 8019ace:	d1ec      	bne.n	8019aaa <_findenv_r+0x36>
 8019ad0:	f8da 3000 	ldr.w	r3, [sl]
 8019ad4:	ebab 0303 	sub.w	r3, fp, r3
 8019ad8:	109b      	asrs	r3, r3, #2
 8019ada:	4638      	mov	r0, r7
 8019adc:	6033      	str	r3, [r6, #0]
 8019ade:	f000 fe15 	bl	801a70c <__env_unlock>
 8019ae2:	1c68      	adds	r0, r5, #1
 8019ae4:	e7dd      	b.n	8019aa2 <_findenv_r+0x2e>
 8019ae6:	bf00      	nop
 8019ae8:	200000ec 	.word	0x200000ec

08019aec <malloc>:
 8019aec:	4b02      	ldr	r3, [pc, #8]	; (8019af8 <malloc+0xc>)
 8019aee:	4601      	mov	r1, r0
 8019af0:	6818      	ldr	r0, [r3, #0]
 8019af2:	f000 b82b 	b.w	8019b4c <_malloc_r>
 8019af6:	bf00      	nop
 8019af8:	200000e8 	.word	0x200000e8

08019afc <free>:
 8019afc:	4b02      	ldr	r3, [pc, #8]	; (8019b08 <free+0xc>)
 8019afe:	4601      	mov	r1, r0
 8019b00:	6818      	ldr	r0, [r3, #0]
 8019b02:	f000 be09 	b.w	801a718 <_free_r>
 8019b06:	bf00      	nop
 8019b08:	200000e8 	.word	0x200000e8

08019b0c <sbrk_aligned>:
 8019b0c:	b570      	push	{r4, r5, r6, lr}
 8019b0e:	4e0e      	ldr	r6, [pc, #56]	; (8019b48 <sbrk_aligned+0x3c>)
 8019b10:	460c      	mov	r4, r1
 8019b12:	6831      	ldr	r1, [r6, #0]
 8019b14:	4605      	mov	r5, r0
 8019b16:	b911      	cbnz	r1, 8019b1e <sbrk_aligned+0x12>
 8019b18:	f000 fd6e 	bl	801a5f8 <_sbrk_r>
 8019b1c:	6030      	str	r0, [r6, #0]
 8019b1e:	4621      	mov	r1, r4
 8019b20:	4628      	mov	r0, r5
 8019b22:	f000 fd69 	bl	801a5f8 <_sbrk_r>
 8019b26:	1c43      	adds	r3, r0, #1
 8019b28:	d00a      	beq.n	8019b40 <sbrk_aligned+0x34>
 8019b2a:	1cc4      	adds	r4, r0, #3
 8019b2c:	f024 0403 	bic.w	r4, r4, #3
 8019b30:	42a0      	cmp	r0, r4
 8019b32:	d007      	beq.n	8019b44 <sbrk_aligned+0x38>
 8019b34:	1a21      	subs	r1, r4, r0
 8019b36:	4628      	mov	r0, r5
 8019b38:	f000 fd5e 	bl	801a5f8 <_sbrk_r>
 8019b3c:	3001      	adds	r0, #1
 8019b3e:	d101      	bne.n	8019b44 <sbrk_aligned+0x38>
 8019b40:	f04f 34ff 	mov.w	r4, #4294967295
 8019b44:	4620      	mov	r0, r4
 8019b46:	bd70      	pop	{r4, r5, r6, pc}
 8019b48:	20009d64 	.word	0x20009d64

08019b4c <_malloc_r>:
 8019b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b50:	1ccd      	adds	r5, r1, #3
 8019b52:	f025 0503 	bic.w	r5, r5, #3
 8019b56:	3508      	adds	r5, #8
 8019b58:	2d0c      	cmp	r5, #12
 8019b5a:	bf38      	it	cc
 8019b5c:	250c      	movcc	r5, #12
 8019b5e:	2d00      	cmp	r5, #0
 8019b60:	4607      	mov	r7, r0
 8019b62:	db01      	blt.n	8019b68 <_malloc_r+0x1c>
 8019b64:	42a9      	cmp	r1, r5
 8019b66:	d905      	bls.n	8019b74 <_malloc_r+0x28>
 8019b68:	230c      	movs	r3, #12
 8019b6a:	603b      	str	r3, [r7, #0]
 8019b6c:	2600      	movs	r6, #0
 8019b6e:	4630      	mov	r0, r6
 8019b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019c48 <_malloc_r+0xfc>
 8019b78:	f000 f868 	bl	8019c4c <__malloc_lock>
 8019b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8019b80:	461c      	mov	r4, r3
 8019b82:	bb5c      	cbnz	r4, 8019bdc <_malloc_r+0x90>
 8019b84:	4629      	mov	r1, r5
 8019b86:	4638      	mov	r0, r7
 8019b88:	f7ff ffc0 	bl	8019b0c <sbrk_aligned>
 8019b8c:	1c43      	adds	r3, r0, #1
 8019b8e:	4604      	mov	r4, r0
 8019b90:	d155      	bne.n	8019c3e <_malloc_r+0xf2>
 8019b92:	f8d8 4000 	ldr.w	r4, [r8]
 8019b96:	4626      	mov	r6, r4
 8019b98:	2e00      	cmp	r6, #0
 8019b9a:	d145      	bne.n	8019c28 <_malloc_r+0xdc>
 8019b9c:	2c00      	cmp	r4, #0
 8019b9e:	d048      	beq.n	8019c32 <_malloc_r+0xe6>
 8019ba0:	6823      	ldr	r3, [r4, #0]
 8019ba2:	4631      	mov	r1, r6
 8019ba4:	4638      	mov	r0, r7
 8019ba6:	eb04 0903 	add.w	r9, r4, r3
 8019baa:	f000 fd25 	bl	801a5f8 <_sbrk_r>
 8019bae:	4581      	cmp	r9, r0
 8019bb0:	d13f      	bne.n	8019c32 <_malloc_r+0xe6>
 8019bb2:	6821      	ldr	r1, [r4, #0]
 8019bb4:	1a6d      	subs	r5, r5, r1
 8019bb6:	4629      	mov	r1, r5
 8019bb8:	4638      	mov	r0, r7
 8019bba:	f7ff ffa7 	bl	8019b0c <sbrk_aligned>
 8019bbe:	3001      	adds	r0, #1
 8019bc0:	d037      	beq.n	8019c32 <_malloc_r+0xe6>
 8019bc2:	6823      	ldr	r3, [r4, #0]
 8019bc4:	442b      	add	r3, r5
 8019bc6:	6023      	str	r3, [r4, #0]
 8019bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d038      	beq.n	8019c42 <_malloc_r+0xf6>
 8019bd0:	685a      	ldr	r2, [r3, #4]
 8019bd2:	42a2      	cmp	r2, r4
 8019bd4:	d12b      	bne.n	8019c2e <_malloc_r+0xe2>
 8019bd6:	2200      	movs	r2, #0
 8019bd8:	605a      	str	r2, [r3, #4]
 8019bda:	e00f      	b.n	8019bfc <_malloc_r+0xb0>
 8019bdc:	6822      	ldr	r2, [r4, #0]
 8019bde:	1b52      	subs	r2, r2, r5
 8019be0:	d41f      	bmi.n	8019c22 <_malloc_r+0xd6>
 8019be2:	2a0b      	cmp	r2, #11
 8019be4:	d917      	bls.n	8019c16 <_malloc_r+0xca>
 8019be6:	1961      	adds	r1, r4, r5
 8019be8:	42a3      	cmp	r3, r4
 8019bea:	6025      	str	r5, [r4, #0]
 8019bec:	bf18      	it	ne
 8019bee:	6059      	strne	r1, [r3, #4]
 8019bf0:	6863      	ldr	r3, [r4, #4]
 8019bf2:	bf08      	it	eq
 8019bf4:	f8c8 1000 	streq.w	r1, [r8]
 8019bf8:	5162      	str	r2, [r4, r5]
 8019bfa:	604b      	str	r3, [r1, #4]
 8019bfc:	4638      	mov	r0, r7
 8019bfe:	f104 060b 	add.w	r6, r4, #11
 8019c02:	f000 f829 	bl	8019c58 <__malloc_unlock>
 8019c06:	f026 0607 	bic.w	r6, r6, #7
 8019c0a:	1d23      	adds	r3, r4, #4
 8019c0c:	1af2      	subs	r2, r6, r3
 8019c0e:	d0ae      	beq.n	8019b6e <_malloc_r+0x22>
 8019c10:	1b9b      	subs	r3, r3, r6
 8019c12:	50a3      	str	r3, [r4, r2]
 8019c14:	e7ab      	b.n	8019b6e <_malloc_r+0x22>
 8019c16:	42a3      	cmp	r3, r4
 8019c18:	6862      	ldr	r2, [r4, #4]
 8019c1a:	d1dd      	bne.n	8019bd8 <_malloc_r+0x8c>
 8019c1c:	f8c8 2000 	str.w	r2, [r8]
 8019c20:	e7ec      	b.n	8019bfc <_malloc_r+0xb0>
 8019c22:	4623      	mov	r3, r4
 8019c24:	6864      	ldr	r4, [r4, #4]
 8019c26:	e7ac      	b.n	8019b82 <_malloc_r+0x36>
 8019c28:	4634      	mov	r4, r6
 8019c2a:	6876      	ldr	r6, [r6, #4]
 8019c2c:	e7b4      	b.n	8019b98 <_malloc_r+0x4c>
 8019c2e:	4613      	mov	r3, r2
 8019c30:	e7cc      	b.n	8019bcc <_malloc_r+0x80>
 8019c32:	230c      	movs	r3, #12
 8019c34:	603b      	str	r3, [r7, #0]
 8019c36:	4638      	mov	r0, r7
 8019c38:	f000 f80e 	bl	8019c58 <__malloc_unlock>
 8019c3c:	e797      	b.n	8019b6e <_malloc_r+0x22>
 8019c3e:	6025      	str	r5, [r4, #0]
 8019c40:	e7dc      	b.n	8019bfc <_malloc_r+0xb0>
 8019c42:	605b      	str	r3, [r3, #4]
 8019c44:	deff      	udf	#255	; 0xff
 8019c46:	bf00      	nop
 8019c48:	20009d60 	.word	0x20009d60

08019c4c <__malloc_lock>:
 8019c4c:	4801      	ldr	r0, [pc, #4]	; (8019c54 <__malloc_lock+0x8>)
 8019c4e:	f000 bd20 	b.w	801a692 <__retarget_lock_acquire_recursive>
 8019c52:	bf00      	nop
 8019c54:	20009ea9 	.word	0x20009ea9

08019c58 <__malloc_unlock>:
 8019c58:	4801      	ldr	r0, [pc, #4]	; (8019c60 <__malloc_unlock+0x8>)
 8019c5a:	f000 bd1b 	b.w	801a694 <__retarget_lock_release_recursive>
 8019c5e:	bf00      	nop
 8019c60:	20009ea9 	.word	0x20009ea9

08019c64 <srand>:
 8019c64:	b538      	push	{r3, r4, r5, lr}
 8019c66:	4b10      	ldr	r3, [pc, #64]	; (8019ca8 <srand+0x44>)
 8019c68:	681d      	ldr	r5, [r3, #0]
 8019c6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019c6c:	4604      	mov	r4, r0
 8019c6e:	b9b3      	cbnz	r3, 8019c9e <srand+0x3a>
 8019c70:	2018      	movs	r0, #24
 8019c72:	f7ff ff3b 	bl	8019aec <malloc>
 8019c76:	4602      	mov	r2, r0
 8019c78:	6328      	str	r0, [r5, #48]	; 0x30
 8019c7a:	b920      	cbnz	r0, 8019c86 <srand+0x22>
 8019c7c:	4b0b      	ldr	r3, [pc, #44]	; (8019cac <srand+0x48>)
 8019c7e:	480c      	ldr	r0, [pc, #48]	; (8019cb0 <srand+0x4c>)
 8019c80:	2146      	movs	r1, #70	; 0x46
 8019c82:	f000 fd1f 	bl	801a6c4 <__assert_func>
 8019c86:	490b      	ldr	r1, [pc, #44]	; (8019cb4 <srand+0x50>)
 8019c88:	4b0b      	ldr	r3, [pc, #44]	; (8019cb8 <srand+0x54>)
 8019c8a:	e9c0 1300 	strd	r1, r3, [r0]
 8019c8e:	4b0b      	ldr	r3, [pc, #44]	; (8019cbc <srand+0x58>)
 8019c90:	6083      	str	r3, [r0, #8]
 8019c92:	230b      	movs	r3, #11
 8019c94:	8183      	strh	r3, [r0, #12]
 8019c96:	2100      	movs	r1, #0
 8019c98:	2001      	movs	r0, #1
 8019c9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019c9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019ca0:	2200      	movs	r2, #0
 8019ca2:	611c      	str	r4, [r3, #16]
 8019ca4:	615a      	str	r2, [r3, #20]
 8019ca6:	bd38      	pop	{r3, r4, r5, pc}
 8019ca8:	200000e8 	.word	0x200000e8
 8019cac:	0801c0c8 	.word	0x0801c0c8
 8019cb0:	0801c0df 	.word	0x0801c0df
 8019cb4:	abcd330e 	.word	0xabcd330e
 8019cb8:	e66d1234 	.word	0xe66d1234
 8019cbc:	0005deec 	.word	0x0005deec

08019cc0 <rand>:
 8019cc0:	4b16      	ldr	r3, [pc, #88]	; (8019d1c <rand+0x5c>)
 8019cc2:	b510      	push	{r4, lr}
 8019cc4:	681c      	ldr	r4, [r3, #0]
 8019cc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019cc8:	b9b3      	cbnz	r3, 8019cf8 <rand+0x38>
 8019cca:	2018      	movs	r0, #24
 8019ccc:	f7ff ff0e 	bl	8019aec <malloc>
 8019cd0:	4602      	mov	r2, r0
 8019cd2:	6320      	str	r0, [r4, #48]	; 0x30
 8019cd4:	b920      	cbnz	r0, 8019ce0 <rand+0x20>
 8019cd6:	4b12      	ldr	r3, [pc, #72]	; (8019d20 <rand+0x60>)
 8019cd8:	4812      	ldr	r0, [pc, #72]	; (8019d24 <rand+0x64>)
 8019cda:	2152      	movs	r1, #82	; 0x52
 8019cdc:	f000 fcf2 	bl	801a6c4 <__assert_func>
 8019ce0:	4911      	ldr	r1, [pc, #68]	; (8019d28 <rand+0x68>)
 8019ce2:	4b12      	ldr	r3, [pc, #72]	; (8019d2c <rand+0x6c>)
 8019ce4:	e9c0 1300 	strd	r1, r3, [r0]
 8019ce8:	4b11      	ldr	r3, [pc, #68]	; (8019d30 <rand+0x70>)
 8019cea:	6083      	str	r3, [r0, #8]
 8019cec:	230b      	movs	r3, #11
 8019cee:	8183      	strh	r3, [r0, #12]
 8019cf0:	2100      	movs	r1, #0
 8019cf2:	2001      	movs	r0, #1
 8019cf4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019cf8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019cfa:	480e      	ldr	r0, [pc, #56]	; (8019d34 <rand+0x74>)
 8019cfc:	690b      	ldr	r3, [r1, #16]
 8019cfe:	694c      	ldr	r4, [r1, #20]
 8019d00:	4a0d      	ldr	r2, [pc, #52]	; (8019d38 <rand+0x78>)
 8019d02:	4358      	muls	r0, r3
 8019d04:	fb02 0004 	mla	r0, r2, r4, r0
 8019d08:	fba3 3202 	umull	r3, r2, r3, r2
 8019d0c:	3301      	adds	r3, #1
 8019d0e:	eb40 0002 	adc.w	r0, r0, r2
 8019d12:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019d16:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019d1a:	bd10      	pop	{r4, pc}
 8019d1c:	200000e8 	.word	0x200000e8
 8019d20:	0801c0c8 	.word	0x0801c0c8
 8019d24:	0801c0df 	.word	0x0801c0df
 8019d28:	abcd330e 	.word	0xabcd330e
 8019d2c:	e66d1234 	.word	0xe66d1234
 8019d30:	0005deec 	.word	0x0005deec
 8019d34:	5851f42d 	.word	0x5851f42d
 8019d38:	4c957f2d 	.word	0x4c957f2d

08019d3c <realloc>:
 8019d3c:	4b02      	ldr	r3, [pc, #8]	; (8019d48 <realloc+0xc>)
 8019d3e:	460a      	mov	r2, r1
 8019d40:	4601      	mov	r1, r0
 8019d42:	6818      	ldr	r0, [r3, #0]
 8019d44:	f000 b802 	b.w	8019d4c <_realloc_r>
 8019d48:	200000e8 	.word	0x200000e8

08019d4c <_realloc_r>:
 8019d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d50:	4680      	mov	r8, r0
 8019d52:	4614      	mov	r4, r2
 8019d54:	460e      	mov	r6, r1
 8019d56:	b921      	cbnz	r1, 8019d62 <_realloc_r+0x16>
 8019d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d5c:	4611      	mov	r1, r2
 8019d5e:	f7ff bef5 	b.w	8019b4c <_malloc_r>
 8019d62:	b92a      	cbnz	r2, 8019d70 <_realloc_r+0x24>
 8019d64:	f000 fcd8 	bl	801a718 <_free_r>
 8019d68:	4625      	mov	r5, r4
 8019d6a:	4628      	mov	r0, r5
 8019d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d70:	f000 fd1e 	bl	801a7b0 <_malloc_usable_size_r>
 8019d74:	4284      	cmp	r4, r0
 8019d76:	4607      	mov	r7, r0
 8019d78:	d802      	bhi.n	8019d80 <_realloc_r+0x34>
 8019d7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019d7e:	d812      	bhi.n	8019da6 <_realloc_r+0x5a>
 8019d80:	4621      	mov	r1, r4
 8019d82:	4640      	mov	r0, r8
 8019d84:	f7ff fee2 	bl	8019b4c <_malloc_r>
 8019d88:	4605      	mov	r5, r0
 8019d8a:	2800      	cmp	r0, #0
 8019d8c:	d0ed      	beq.n	8019d6a <_realloc_r+0x1e>
 8019d8e:	42bc      	cmp	r4, r7
 8019d90:	4622      	mov	r2, r4
 8019d92:	4631      	mov	r1, r6
 8019d94:	bf28      	it	cs
 8019d96:	463a      	movcs	r2, r7
 8019d98:	f000 fc85 	bl	801a6a6 <memcpy>
 8019d9c:	4631      	mov	r1, r6
 8019d9e:	4640      	mov	r0, r8
 8019da0:	f000 fcba 	bl	801a718 <_free_r>
 8019da4:	e7e1      	b.n	8019d6a <_realloc_r+0x1e>
 8019da6:	4635      	mov	r5, r6
 8019da8:	e7df      	b.n	8019d6a <_realloc_r+0x1e>
	...

08019dac <_strtoul_l.constprop.0>:
 8019dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019db0:	4f36      	ldr	r7, [pc, #216]	; (8019e8c <_strtoul_l.constprop.0+0xe0>)
 8019db2:	4686      	mov	lr, r0
 8019db4:	460d      	mov	r5, r1
 8019db6:	4628      	mov	r0, r5
 8019db8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019dbc:	5d3e      	ldrb	r6, [r7, r4]
 8019dbe:	f016 0608 	ands.w	r6, r6, #8
 8019dc2:	d1f8      	bne.n	8019db6 <_strtoul_l.constprop.0+0xa>
 8019dc4:	2c2d      	cmp	r4, #45	; 0x2d
 8019dc6:	d130      	bne.n	8019e2a <_strtoul_l.constprop.0+0x7e>
 8019dc8:	782c      	ldrb	r4, [r5, #0]
 8019dca:	2601      	movs	r6, #1
 8019dcc:	1c85      	adds	r5, r0, #2
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d057      	beq.n	8019e82 <_strtoul_l.constprop.0+0xd6>
 8019dd2:	2b10      	cmp	r3, #16
 8019dd4:	d109      	bne.n	8019dea <_strtoul_l.constprop.0+0x3e>
 8019dd6:	2c30      	cmp	r4, #48	; 0x30
 8019dd8:	d107      	bne.n	8019dea <_strtoul_l.constprop.0+0x3e>
 8019dda:	7828      	ldrb	r0, [r5, #0]
 8019ddc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019de0:	2858      	cmp	r0, #88	; 0x58
 8019de2:	d149      	bne.n	8019e78 <_strtoul_l.constprop.0+0xcc>
 8019de4:	786c      	ldrb	r4, [r5, #1]
 8019de6:	2310      	movs	r3, #16
 8019de8:	3502      	adds	r5, #2
 8019dea:	f04f 38ff 	mov.w	r8, #4294967295
 8019dee:	2700      	movs	r7, #0
 8019df0:	fbb8 f8f3 	udiv	r8, r8, r3
 8019df4:	fb03 f908 	mul.w	r9, r3, r8
 8019df8:	ea6f 0909 	mvn.w	r9, r9
 8019dfc:	4638      	mov	r0, r7
 8019dfe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019e02:	f1bc 0f09 	cmp.w	ip, #9
 8019e06:	d815      	bhi.n	8019e34 <_strtoul_l.constprop.0+0x88>
 8019e08:	4664      	mov	r4, ip
 8019e0a:	42a3      	cmp	r3, r4
 8019e0c:	dd23      	ble.n	8019e56 <_strtoul_l.constprop.0+0xaa>
 8019e0e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8019e12:	d007      	beq.n	8019e24 <_strtoul_l.constprop.0+0x78>
 8019e14:	4580      	cmp	r8, r0
 8019e16:	d31b      	bcc.n	8019e50 <_strtoul_l.constprop.0+0xa4>
 8019e18:	d101      	bne.n	8019e1e <_strtoul_l.constprop.0+0x72>
 8019e1a:	45a1      	cmp	r9, r4
 8019e1c:	db18      	blt.n	8019e50 <_strtoul_l.constprop.0+0xa4>
 8019e1e:	fb00 4003 	mla	r0, r0, r3, r4
 8019e22:	2701      	movs	r7, #1
 8019e24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019e28:	e7e9      	b.n	8019dfe <_strtoul_l.constprop.0+0x52>
 8019e2a:	2c2b      	cmp	r4, #43	; 0x2b
 8019e2c:	bf04      	itt	eq
 8019e2e:	782c      	ldrbeq	r4, [r5, #0]
 8019e30:	1c85      	addeq	r5, r0, #2
 8019e32:	e7cc      	b.n	8019dce <_strtoul_l.constprop.0+0x22>
 8019e34:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019e38:	f1bc 0f19 	cmp.w	ip, #25
 8019e3c:	d801      	bhi.n	8019e42 <_strtoul_l.constprop.0+0x96>
 8019e3e:	3c37      	subs	r4, #55	; 0x37
 8019e40:	e7e3      	b.n	8019e0a <_strtoul_l.constprop.0+0x5e>
 8019e42:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8019e46:	f1bc 0f19 	cmp.w	ip, #25
 8019e4a:	d804      	bhi.n	8019e56 <_strtoul_l.constprop.0+0xaa>
 8019e4c:	3c57      	subs	r4, #87	; 0x57
 8019e4e:	e7dc      	b.n	8019e0a <_strtoul_l.constprop.0+0x5e>
 8019e50:	f04f 37ff 	mov.w	r7, #4294967295
 8019e54:	e7e6      	b.n	8019e24 <_strtoul_l.constprop.0+0x78>
 8019e56:	1c7b      	adds	r3, r7, #1
 8019e58:	d106      	bne.n	8019e68 <_strtoul_l.constprop.0+0xbc>
 8019e5a:	2322      	movs	r3, #34	; 0x22
 8019e5c:	f8ce 3000 	str.w	r3, [lr]
 8019e60:	4638      	mov	r0, r7
 8019e62:	b932      	cbnz	r2, 8019e72 <_strtoul_l.constprop.0+0xc6>
 8019e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e68:	b106      	cbz	r6, 8019e6c <_strtoul_l.constprop.0+0xc0>
 8019e6a:	4240      	negs	r0, r0
 8019e6c:	2a00      	cmp	r2, #0
 8019e6e:	d0f9      	beq.n	8019e64 <_strtoul_l.constprop.0+0xb8>
 8019e70:	b107      	cbz	r7, 8019e74 <_strtoul_l.constprop.0+0xc8>
 8019e72:	1e69      	subs	r1, r5, #1
 8019e74:	6011      	str	r1, [r2, #0]
 8019e76:	e7f5      	b.n	8019e64 <_strtoul_l.constprop.0+0xb8>
 8019e78:	2430      	movs	r4, #48	; 0x30
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d1b5      	bne.n	8019dea <_strtoul_l.constprop.0+0x3e>
 8019e7e:	2308      	movs	r3, #8
 8019e80:	e7b3      	b.n	8019dea <_strtoul_l.constprop.0+0x3e>
 8019e82:	2c30      	cmp	r4, #48	; 0x30
 8019e84:	d0a9      	beq.n	8019dda <_strtoul_l.constprop.0+0x2e>
 8019e86:	230a      	movs	r3, #10
 8019e88:	e7af      	b.n	8019dea <_strtoul_l.constprop.0+0x3e>
 8019e8a:	bf00      	nop
 8019e8c:	0801c138 	.word	0x0801c138

08019e90 <strtoul>:
 8019e90:	4613      	mov	r3, r2
 8019e92:	460a      	mov	r2, r1
 8019e94:	4601      	mov	r1, r0
 8019e96:	4802      	ldr	r0, [pc, #8]	; (8019ea0 <strtoul+0x10>)
 8019e98:	6800      	ldr	r0, [r0, #0]
 8019e9a:	f7ff bf87 	b.w	8019dac <_strtoul_l.constprop.0>
 8019e9e:	bf00      	nop
 8019ea0:	200000e8 	.word	0x200000e8

08019ea4 <std>:
 8019ea4:	2300      	movs	r3, #0
 8019ea6:	b510      	push	{r4, lr}
 8019ea8:	4604      	mov	r4, r0
 8019eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8019eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019eb2:	6083      	str	r3, [r0, #8]
 8019eb4:	8181      	strh	r1, [r0, #12]
 8019eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8019eb8:	81c2      	strh	r2, [r0, #14]
 8019eba:	6183      	str	r3, [r0, #24]
 8019ebc:	4619      	mov	r1, r3
 8019ebe:	2208      	movs	r2, #8
 8019ec0:	305c      	adds	r0, #92	; 0x5c
 8019ec2:	f000 fad1 	bl	801a468 <memset>
 8019ec6:	4b0d      	ldr	r3, [pc, #52]	; (8019efc <std+0x58>)
 8019ec8:	6263      	str	r3, [r4, #36]	; 0x24
 8019eca:	4b0d      	ldr	r3, [pc, #52]	; (8019f00 <std+0x5c>)
 8019ecc:	62a3      	str	r3, [r4, #40]	; 0x28
 8019ece:	4b0d      	ldr	r3, [pc, #52]	; (8019f04 <std+0x60>)
 8019ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ed2:	4b0d      	ldr	r3, [pc, #52]	; (8019f08 <std+0x64>)
 8019ed4:	6323      	str	r3, [r4, #48]	; 0x30
 8019ed6:	4b0d      	ldr	r3, [pc, #52]	; (8019f0c <std+0x68>)
 8019ed8:	6224      	str	r4, [r4, #32]
 8019eda:	429c      	cmp	r4, r3
 8019edc:	d006      	beq.n	8019eec <std+0x48>
 8019ede:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8019ee2:	4294      	cmp	r4, r2
 8019ee4:	d002      	beq.n	8019eec <std+0x48>
 8019ee6:	33d0      	adds	r3, #208	; 0xd0
 8019ee8:	429c      	cmp	r4, r3
 8019eea:	d105      	bne.n	8019ef8 <std+0x54>
 8019eec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ef4:	f000 bbcc 	b.w	801a690 <__retarget_lock_init_recursive>
 8019ef8:	bd10      	pop	{r4, pc}
 8019efa:	bf00      	nop
 8019efc:	0801a211 	.word	0x0801a211
 8019f00:	0801a233 	.word	0x0801a233
 8019f04:	0801a26b 	.word	0x0801a26b
 8019f08:	0801a28f 	.word	0x0801a28f
 8019f0c:	20009d68 	.word	0x20009d68

08019f10 <stdio_exit_handler>:
 8019f10:	4a02      	ldr	r2, [pc, #8]	; (8019f1c <stdio_exit_handler+0xc>)
 8019f12:	4903      	ldr	r1, [pc, #12]	; (8019f20 <stdio_exit_handler+0x10>)
 8019f14:	4803      	ldr	r0, [pc, #12]	; (8019f24 <stdio_exit_handler+0x14>)
 8019f16:	f000 b869 	b.w	8019fec <_fwalk_sglue>
 8019f1a:	bf00      	nop
 8019f1c:	20000090 	.word	0x20000090
 8019f20:	0801b125 	.word	0x0801b125
 8019f24:	2000009c 	.word	0x2000009c

08019f28 <cleanup_stdio>:
 8019f28:	6841      	ldr	r1, [r0, #4]
 8019f2a:	4b0c      	ldr	r3, [pc, #48]	; (8019f5c <cleanup_stdio+0x34>)
 8019f2c:	4299      	cmp	r1, r3
 8019f2e:	b510      	push	{r4, lr}
 8019f30:	4604      	mov	r4, r0
 8019f32:	d001      	beq.n	8019f38 <cleanup_stdio+0x10>
 8019f34:	f001 f8f6 	bl	801b124 <_fflush_r>
 8019f38:	68a1      	ldr	r1, [r4, #8]
 8019f3a:	4b09      	ldr	r3, [pc, #36]	; (8019f60 <cleanup_stdio+0x38>)
 8019f3c:	4299      	cmp	r1, r3
 8019f3e:	d002      	beq.n	8019f46 <cleanup_stdio+0x1e>
 8019f40:	4620      	mov	r0, r4
 8019f42:	f001 f8ef 	bl	801b124 <_fflush_r>
 8019f46:	68e1      	ldr	r1, [r4, #12]
 8019f48:	4b06      	ldr	r3, [pc, #24]	; (8019f64 <cleanup_stdio+0x3c>)
 8019f4a:	4299      	cmp	r1, r3
 8019f4c:	d004      	beq.n	8019f58 <cleanup_stdio+0x30>
 8019f4e:	4620      	mov	r0, r4
 8019f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f54:	f001 b8e6 	b.w	801b124 <_fflush_r>
 8019f58:	bd10      	pop	{r4, pc}
 8019f5a:	bf00      	nop
 8019f5c:	20009d68 	.word	0x20009d68
 8019f60:	20009dd0 	.word	0x20009dd0
 8019f64:	20009e38 	.word	0x20009e38

08019f68 <global_stdio_init.part.0>:
 8019f68:	b510      	push	{r4, lr}
 8019f6a:	4b0b      	ldr	r3, [pc, #44]	; (8019f98 <global_stdio_init.part.0+0x30>)
 8019f6c:	4c0b      	ldr	r4, [pc, #44]	; (8019f9c <global_stdio_init.part.0+0x34>)
 8019f6e:	4a0c      	ldr	r2, [pc, #48]	; (8019fa0 <global_stdio_init.part.0+0x38>)
 8019f70:	601a      	str	r2, [r3, #0]
 8019f72:	4620      	mov	r0, r4
 8019f74:	2200      	movs	r2, #0
 8019f76:	2104      	movs	r1, #4
 8019f78:	f7ff ff94 	bl	8019ea4 <std>
 8019f7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019f80:	2201      	movs	r2, #1
 8019f82:	2109      	movs	r1, #9
 8019f84:	f7ff ff8e 	bl	8019ea4 <std>
 8019f88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019f8c:	2202      	movs	r2, #2
 8019f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f92:	2112      	movs	r1, #18
 8019f94:	f7ff bf86 	b.w	8019ea4 <std>
 8019f98:	20009ea0 	.word	0x20009ea0
 8019f9c:	20009d68 	.word	0x20009d68
 8019fa0:	08019f11 	.word	0x08019f11

08019fa4 <__sfp_lock_acquire>:
 8019fa4:	4801      	ldr	r0, [pc, #4]	; (8019fac <__sfp_lock_acquire+0x8>)
 8019fa6:	f000 bb74 	b.w	801a692 <__retarget_lock_acquire_recursive>
 8019faa:	bf00      	nop
 8019fac:	20009eaa 	.word	0x20009eaa

08019fb0 <__sfp_lock_release>:
 8019fb0:	4801      	ldr	r0, [pc, #4]	; (8019fb8 <__sfp_lock_release+0x8>)
 8019fb2:	f000 bb6f 	b.w	801a694 <__retarget_lock_release_recursive>
 8019fb6:	bf00      	nop
 8019fb8:	20009eaa 	.word	0x20009eaa

08019fbc <__sinit>:
 8019fbc:	b510      	push	{r4, lr}
 8019fbe:	4604      	mov	r4, r0
 8019fc0:	f7ff fff0 	bl	8019fa4 <__sfp_lock_acquire>
 8019fc4:	6a23      	ldr	r3, [r4, #32]
 8019fc6:	b11b      	cbz	r3, 8019fd0 <__sinit+0x14>
 8019fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fcc:	f7ff bff0 	b.w	8019fb0 <__sfp_lock_release>
 8019fd0:	4b04      	ldr	r3, [pc, #16]	; (8019fe4 <__sinit+0x28>)
 8019fd2:	6223      	str	r3, [r4, #32]
 8019fd4:	4b04      	ldr	r3, [pc, #16]	; (8019fe8 <__sinit+0x2c>)
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d1f5      	bne.n	8019fc8 <__sinit+0xc>
 8019fdc:	f7ff ffc4 	bl	8019f68 <global_stdio_init.part.0>
 8019fe0:	e7f2      	b.n	8019fc8 <__sinit+0xc>
 8019fe2:	bf00      	nop
 8019fe4:	08019f29 	.word	0x08019f29
 8019fe8:	20009ea0 	.word	0x20009ea0

08019fec <_fwalk_sglue>:
 8019fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ff0:	4607      	mov	r7, r0
 8019ff2:	4688      	mov	r8, r1
 8019ff4:	4614      	mov	r4, r2
 8019ff6:	2600      	movs	r6, #0
 8019ff8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019ffc:	f1b9 0901 	subs.w	r9, r9, #1
 801a000:	d505      	bpl.n	801a00e <_fwalk_sglue+0x22>
 801a002:	6824      	ldr	r4, [r4, #0]
 801a004:	2c00      	cmp	r4, #0
 801a006:	d1f7      	bne.n	8019ff8 <_fwalk_sglue+0xc>
 801a008:	4630      	mov	r0, r6
 801a00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a00e:	89ab      	ldrh	r3, [r5, #12]
 801a010:	2b01      	cmp	r3, #1
 801a012:	d907      	bls.n	801a024 <_fwalk_sglue+0x38>
 801a014:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a018:	3301      	adds	r3, #1
 801a01a:	d003      	beq.n	801a024 <_fwalk_sglue+0x38>
 801a01c:	4629      	mov	r1, r5
 801a01e:	4638      	mov	r0, r7
 801a020:	47c0      	blx	r8
 801a022:	4306      	orrs	r6, r0
 801a024:	3568      	adds	r5, #104	; 0x68
 801a026:	e7e9      	b.n	8019ffc <_fwalk_sglue+0x10>

0801a028 <iprintf>:
 801a028:	b40f      	push	{r0, r1, r2, r3}
 801a02a:	b507      	push	{r0, r1, r2, lr}
 801a02c:	4906      	ldr	r1, [pc, #24]	; (801a048 <iprintf+0x20>)
 801a02e:	ab04      	add	r3, sp, #16
 801a030:	6808      	ldr	r0, [r1, #0]
 801a032:	f853 2b04 	ldr.w	r2, [r3], #4
 801a036:	6881      	ldr	r1, [r0, #8]
 801a038:	9301      	str	r3, [sp, #4]
 801a03a:	f000 fd43 	bl	801aac4 <_vfiprintf_r>
 801a03e:	b003      	add	sp, #12
 801a040:	f85d eb04 	ldr.w	lr, [sp], #4
 801a044:	b004      	add	sp, #16
 801a046:	4770      	bx	lr
 801a048:	200000e8 	.word	0x200000e8

0801a04c <setvbuf>:
 801a04c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a050:	461d      	mov	r5, r3
 801a052:	4b54      	ldr	r3, [pc, #336]	; (801a1a4 <setvbuf+0x158>)
 801a054:	681f      	ldr	r7, [r3, #0]
 801a056:	4604      	mov	r4, r0
 801a058:	460e      	mov	r6, r1
 801a05a:	4690      	mov	r8, r2
 801a05c:	b127      	cbz	r7, 801a068 <setvbuf+0x1c>
 801a05e:	6a3b      	ldr	r3, [r7, #32]
 801a060:	b913      	cbnz	r3, 801a068 <setvbuf+0x1c>
 801a062:	4638      	mov	r0, r7
 801a064:	f7ff ffaa 	bl	8019fbc <__sinit>
 801a068:	f1b8 0f02 	cmp.w	r8, #2
 801a06c:	d006      	beq.n	801a07c <setvbuf+0x30>
 801a06e:	f1b8 0f01 	cmp.w	r8, #1
 801a072:	f200 8094 	bhi.w	801a19e <setvbuf+0x152>
 801a076:	2d00      	cmp	r5, #0
 801a078:	f2c0 8091 	blt.w	801a19e <setvbuf+0x152>
 801a07c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a07e:	07da      	lsls	r2, r3, #31
 801a080:	d405      	bmi.n	801a08e <setvbuf+0x42>
 801a082:	89a3      	ldrh	r3, [r4, #12]
 801a084:	059b      	lsls	r3, r3, #22
 801a086:	d402      	bmi.n	801a08e <setvbuf+0x42>
 801a088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a08a:	f000 fb02 	bl	801a692 <__retarget_lock_acquire_recursive>
 801a08e:	4621      	mov	r1, r4
 801a090:	4638      	mov	r0, r7
 801a092:	f001 f847 	bl	801b124 <_fflush_r>
 801a096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a098:	b141      	cbz	r1, 801a0ac <setvbuf+0x60>
 801a09a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a09e:	4299      	cmp	r1, r3
 801a0a0:	d002      	beq.n	801a0a8 <setvbuf+0x5c>
 801a0a2:	4638      	mov	r0, r7
 801a0a4:	f000 fb38 	bl	801a718 <_free_r>
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	6363      	str	r3, [r4, #52]	; 0x34
 801a0ac:	2300      	movs	r3, #0
 801a0ae:	61a3      	str	r3, [r4, #24]
 801a0b0:	6063      	str	r3, [r4, #4]
 801a0b2:	89a3      	ldrh	r3, [r4, #12]
 801a0b4:	0618      	lsls	r0, r3, #24
 801a0b6:	d503      	bpl.n	801a0c0 <setvbuf+0x74>
 801a0b8:	6921      	ldr	r1, [r4, #16]
 801a0ba:	4638      	mov	r0, r7
 801a0bc:	f000 fb2c 	bl	801a718 <_free_r>
 801a0c0:	89a3      	ldrh	r3, [r4, #12]
 801a0c2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801a0c6:	f023 0303 	bic.w	r3, r3, #3
 801a0ca:	f1b8 0f02 	cmp.w	r8, #2
 801a0ce:	81a3      	strh	r3, [r4, #12]
 801a0d0:	d05f      	beq.n	801a192 <setvbuf+0x146>
 801a0d2:	ab01      	add	r3, sp, #4
 801a0d4:	466a      	mov	r2, sp
 801a0d6:	4621      	mov	r1, r4
 801a0d8:	4638      	mov	r0, r7
 801a0da:	f001 f85d 	bl	801b198 <__swhatbuf_r>
 801a0de:	89a3      	ldrh	r3, [r4, #12]
 801a0e0:	4318      	orrs	r0, r3
 801a0e2:	81a0      	strh	r0, [r4, #12]
 801a0e4:	bb2d      	cbnz	r5, 801a132 <setvbuf+0xe6>
 801a0e6:	9d00      	ldr	r5, [sp, #0]
 801a0e8:	4628      	mov	r0, r5
 801a0ea:	f7ff fcff 	bl	8019aec <malloc>
 801a0ee:	4606      	mov	r6, r0
 801a0f0:	2800      	cmp	r0, #0
 801a0f2:	d150      	bne.n	801a196 <setvbuf+0x14a>
 801a0f4:	f8dd 9000 	ldr.w	r9, [sp]
 801a0f8:	45a9      	cmp	r9, r5
 801a0fa:	d13e      	bne.n	801a17a <setvbuf+0x12e>
 801a0fc:	f04f 35ff 	mov.w	r5, #4294967295
 801a100:	2200      	movs	r2, #0
 801a102:	60a2      	str	r2, [r4, #8]
 801a104:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801a108:	6022      	str	r2, [r4, #0]
 801a10a:	6122      	str	r2, [r4, #16]
 801a10c:	2201      	movs	r2, #1
 801a10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a112:	6162      	str	r2, [r4, #20]
 801a114:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a116:	f043 0302 	orr.w	r3, r3, #2
 801a11a:	07d1      	lsls	r1, r2, #31
 801a11c:	81a3      	strh	r3, [r4, #12]
 801a11e:	d404      	bmi.n	801a12a <setvbuf+0xde>
 801a120:	059b      	lsls	r3, r3, #22
 801a122:	d402      	bmi.n	801a12a <setvbuf+0xde>
 801a124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a126:	f000 fab5 	bl	801a694 <__retarget_lock_release_recursive>
 801a12a:	4628      	mov	r0, r5
 801a12c:	b003      	add	sp, #12
 801a12e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a132:	2e00      	cmp	r6, #0
 801a134:	d0d8      	beq.n	801a0e8 <setvbuf+0x9c>
 801a136:	6a3b      	ldr	r3, [r7, #32]
 801a138:	b913      	cbnz	r3, 801a140 <setvbuf+0xf4>
 801a13a:	4638      	mov	r0, r7
 801a13c:	f7ff ff3e 	bl	8019fbc <__sinit>
 801a140:	f1b8 0f01 	cmp.w	r8, #1
 801a144:	bf08      	it	eq
 801a146:	89a3      	ldrheq	r3, [r4, #12]
 801a148:	6026      	str	r6, [r4, #0]
 801a14a:	bf04      	itt	eq
 801a14c:	f043 0301 	orreq.w	r3, r3, #1
 801a150:	81a3      	strheq	r3, [r4, #12]
 801a152:	89a3      	ldrh	r3, [r4, #12]
 801a154:	f013 0208 	ands.w	r2, r3, #8
 801a158:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801a15c:	d01d      	beq.n	801a19a <setvbuf+0x14e>
 801a15e:	07da      	lsls	r2, r3, #31
 801a160:	bf41      	itttt	mi
 801a162:	2200      	movmi	r2, #0
 801a164:	426d      	negmi	r5, r5
 801a166:	60a2      	strmi	r2, [r4, #8]
 801a168:	61a5      	strmi	r5, [r4, #24]
 801a16a:	bf58      	it	pl
 801a16c:	60a5      	strpl	r5, [r4, #8]
 801a16e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801a170:	f015 0501 	ands.w	r5, r5, #1
 801a174:	d0d4      	beq.n	801a120 <setvbuf+0xd4>
 801a176:	2500      	movs	r5, #0
 801a178:	e7d7      	b.n	801a12a <setvbuf+0xde>
 801a17a:	4648      	mov	r0, r9
 801a17c:	f7ff fcb6 	bl	8019aec <malloc>
 801a180:	4606      	mov	r6, r0
 801a182:	2800      	cmp	r0, #0
 801a184:	d0ba      	beq.n	801a0fc <setvbuf+0xb0>
 801a186:	89a3      	ldrh	r3, [r4, #12]
 801a188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a18c:	81a3      	strh	r3, [r4, #12]
 801a18e:	464d      	mov	r5, r9
 801a190:	e7d1      	b.n	801a136 <setvbuf+0xea>
 801a192:	2500      	movs	r5, #0
 801a194:	e7b4      	b.n	801a100 <setvbuf+0xb4>
 801a196:	46a9      	mov	r9, r5
 801a198:	e7f5      	b.n	801a186 <setvbuf+0x13a>
 801a19a:	60a2      	str	r2, [r4, #8]
 801a19c:	e7e7      	b.n	801a16e <setvbuf+0x122>
 801a19e:	f04f 35ff 	mov.w	r5, #4294967295
 801a1a2:	e7c2      	b.n	801a12a <setvbuf+0xde>
 801a1a4:	200000e8 	.word	0x200000e8

0801a1a8 <sniprintf>:
 801a1a8:	b40c      	push	{r2, r3}
 801a1aa:	b530      	push	{r4, r5, lr}
 801a1ac:	4b17      	ldr	r3, [pc, #92]	; (801a20c <sniprintf+0x64>)
 801a1ae:	1e0c      	subs	r4, r1, #0
 801a1b0:	681d      	ldr	r5, [r3, #0]
 801a1b2:	b09d      	sub	sp, #116	; 0x74
 801a1b4:	da08      	bge.n	801a1c8 <sniprintf+0x20>
 801a1b6:	238b      	movs	r3, #139	; 0x8b
 801a1b8:	602b      	str	r3, [r5, #0]
 801a1ba:	f04f 30ff 	mov.w	r0, #4294967295
 801a1be:	b01d      	add	sp, #116	; 0x74
 801a1c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a1c4:	b002      	add	sp, #8
 801a1c6:	4770      	bx	lr
 801a1c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a1cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a1d0:	bf14      	ite	ne
 801a1d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a1d6:	4623      	moveq	r3, r4
 801a1d8:	9304      	str	r3, [sp, #16]
 801a1da:	9307      	str	r3, [sp, #28]
 801a1dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a1e0:	9002      	str	r0, [sp, #8]
 801a1e2:	9006      	str	r0, [sp, #24]
 801a1e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a1e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a1ea:	ab21      	add	r3, sp, #132	; 0x84
 801a1ec:	a902      	add	r1, sp, #8
 801a1ee:	4628      	mov	r0, r5
 801a1f0:	9301      	str	r3, [sp, #4]
 801a1f2:	f000 fb3f 	bl	801a874 <_svfiprintf_r>
 801a1f6:	1c43      	adds	r3, r0, #1
 801a1f8:	bfbc      	itt	lt
 801a1fa:	238b      	movlt	r3, #139	; 0x8b
 801a1fc:	602b      	strlt	r3, [r5, #0]
 801a1fe:	2c00      	cmp	r4, #0
 801a200:	d0dd      	beq.n	801a1be <sniprintf+0x16>
 801a202:	9b02      	ldr	r3, [sp, #8]
 801a204:	2200      	movs	r2, #0
 801a206:	701a      	strb	r2, [r3, #0]
 801a208:	e7d9      	b.n	801a1be <sniprintf+0x16>
 801a20a:	bf00      	nop
 801a20c:	200000e8 	.word	0x200000e8

0801a210 <__sread>:
 801a210:	b510      	push	{r4, lr}
 801a212:	460c      	mov	r4, r1
 801a214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a218:	f000 f9dc 	bl	801a5d4 <_read_r>
 801a21c:	2800      	cmp	r0, #0
 801a21e:	bfab      	itete	ge
 801a220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a222:	89a3      	ldrhlt	r3, [r4, #12]
 801a224:	181b      	addge	r3, r3, r0
 801a226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a22a:	bfac      	ite	ge
 801a22c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a22e:	81a3      	strhlt	r3, [r4, #12]
 801a230:	bd10      	pop	{r4, pc}

0801a232 <__swrite>:
 801a232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a236:	461f      	mov	r7, r3
 801a238:	898b      	ldrh	r3, [r1, #12]
 801a23a:	05db      	lsls	r3, r3, #23
 801a23c:	4605      	mov	r5, r0
 801a23e:	460c      	mov	r4, r1
 801a240:	4616      	mov	r6, r2
 801a242:	d505      	bpl.n	801a250 <__swrite+0x1e>
 801a244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a248:	2302      	movs	r3, #2
 801a24a:	2200      	movs	r2, #0
 801a24c:	f000 f9b0 	bl	801a5b0 <_lseek_r>
 801a250:	89a3      	ldrh	r3, [r4, #12]
 801a252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a25a:	81a3      	strh	r3, [r4, #12]
 801a25c:	4632      	mov	r2, r6
 801a25e:	463b      	mov	r3, r7
 801a260:	4628      	mov	r0, r5
 801a262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a266:	f000 b9d7 	b.w	801a618 <_write_r>

0801a26a <__sseek>:
 801a26a:	b510      	push	{r4, lr}
 801a26c:	460c      	mov	r4, r1
 801a26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a272:	f000 f99d 	bl	801a5b0 <_lseek_r>
 801a276:	1c43      	adds	r3, r0, #1
 801a278:	89a3      	ldrh	r3, [r4, #12]
 801a27a:	bf15      	itete	ne
 801a27c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a27e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a286:	81a3      	strheq	r3, [r4, #12]
 801a288:	bf18      	it	ne
 801a28a:	81a3      	strhne	r3, [r4, #12]
 801a28c:	bd10      	pop	{r4, pc}

0801a28e <__sclose>:
 801a28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a292:	f000 b927 	b.w	801a4e4 <_close_r>

0801a296 <_vsniprintf_r>:
 801a296:	b530      	push	{r4, r5, lr}
 801a298:	4614      	mov	r4, r2
 801a29a:	2c00      	cmp	r4, #0
 801a29c:	b09b      	sub	sp, #108	; 0x6c
 801a29e:	4605      	mov	r5, r0
 801a2a0:	461a      	mov	r2, r3
 801a2a2:	da05      	bge.n	801a2b0 <_vsniprintf_r+0x1a>
 801a2a4:	238b      	movs	r3, #139	; 0x8b
 801a2a6:	6003      	str	r3, [r0, #0]
 801a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 801a2ac:	b01b      	add	sp, #108	; 0x6c
 801a2ae:	bd30      	pop	{r4, r5, pc}
 801a2b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a2b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a2b8:	bf14      	ite	ne
 801a2ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a2be:	4623      	moveq	r3, r4
 801a2c0:	9302      	str	r3, [sp, #8]
 801a2c2:	9305      	str	r3, [sp, #20]
 801a2c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a2c8:	9100      	str	r1, [sp, #0]
 801a2ca:	9104      	str	r1, [sp, #16]
 801a2cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a2d0:	4669      	mov	r1, sp
 801a2d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a2d4:	f000 face 	bl	801a874 <_svfiprintf_r>
 801a2d8:	1c43      	adds	r3, r0, #1
 801a2da:	bfbc      	itt	lt
 801a2dc:	238b      	movlt	r3, #139	; 0x8b
 801a2de:	602b      	strlt	r3, [r5, #0]
 801a2e0:	2c00      	cmp	r4, #0
 801a2e2:	d0e3      	beq.n	801a2ac <_vsniprintf_r+0x16>
 801a2e4:	9b00      	ldr	r3, [sp, #0]
 801a2e6:	2200      	movs	r2, #0
 801a2e8:	701a      	strb	r2, [r3, #0]
 801a2ea:	e7df      	b.n	801a2ac <_vsniprintf_r+0x16>

0801a2ec <vsniprintf>:
 801a2ec:	b507      	push	{r0, r1, r2, lr}
 801a2ee:	9300      	str	r3, [sp, #0]
 801a2f0:	4613      	mov	r3, r2
 801a2f2:	460a      	mov	r2, r1
 801a2f4:	4601      	mov	r1, r0
 801a2f6:	4803      	ldr	r0, [pc, #12]	; (801a304 <vsniprintf+0x18>)
 801a2f8:	6800      	ldr	r0, [r0, #0]
 801a2fa:	f7ff ffcc 	bl	801a296 <_vsniprintf_r>
 801a2fe:	b003      	add	sp, #12
 801a300:	f85d fb04 	ldr.w	pc, [sp], #4
 801a304:	200000e8 	.word	0x200000e8

0801a308 <__swbuf_r>:
 801a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a30a:	460e      	mov	r6, r1
 801a30c:	4614      	mov	r4, r2
 801a30e:	4605      	mov	r5, r0
 801a310:	b118      	cbz	r0, 801a31a <__swbuf_r+0x12>
 801a312:	6a03      	ldr	r3, [r0, #32]
 801a314:	b90b      	cbnz	r3, 801a31a <__swbuf_r+0x12>
 801a316:	f7ff fe51 	bl	8019fbc <__sinit>
 801a31a:	69a3      	ldr	r3, [r4, #24]
 801a31c:	60a3      	str	r3, [r4, #8]
 801a31e:	89a3      	ldrh	r3, [r4, #12]
 801a320:	071a      	lsls	r2, r3, #28
 801a322:	d525      	bpl.n	801a370 <__swbuf_r+0x68>
 801a324:	6923      	ldr	r3, [r4, #16]
 801a326:	b31b      	cbz	r3, 801a370 <__swbuf_r+0x68>
 801a328:	6823      	ldr	r3, [r4, #0]
 801a32a:	6922      	ldr	r2, [r4, #16]
 801a32c:	1a98      	subs	r0, r3, r2
 801a32e:	6963      	ldr	r3, [r4, #20]
 801a330:	b2f6      	uxtb	r6, r6
 801a332:	4283      	cmp	r3, r0
 801a334:	4637      	mov	r7, r6
 801a336:	dc04      	bgt.n	801a342 <__swbuf_r+0x3a>
 801a338:	4621      	mov	r1, r4
 801a33a:	4628      	mov	r0, r5
 801a33c:	f000 fef2 	bl	801b124 <_fflush_r>
 801a340:	b9e0      	cbnz	r0, 801a37c <__swbuf_r+0x74>
 801a342:	68a3      	ldr	r3, [r4, #8]
 801a344:	3b01      	subs	r3, #1
 801a346:	60a3      	str	r3, [r4, #8]
 801a348:	6823      	ldr	r3, [r4, #0]
 801a34a:	1c5a      	adds	r2, r3, #1
 801a34c:	6022      	str	r2, [r4, #0]
 801a34e:	701e      	strb	r6, [r3, #0]
 801a350:	6962      	ldr	r2, [r4, #20]
 801a352:	1c43      	adds	r3, r0, #1
 801a354:	429a      	cmp	r2, r3
 801a356:	d004      	beq.n	801a362 <__swbuf_r+0x5a>
 801a358:	89a3      	ldrh	r3, [r4, #12]
 801a35a:	07db      	lsls	r3, r3, #31
 801a35c:	d506      	bpl.n	801a36c <__swbuf_r+0x64>
 801a35e:	2e0a      	cmp	r6, #10
 801a360:	d104      	bne.n	801a36c <__swbuf_r+0x64>
 801a362:	4621      	mov	r1, r4
 801a364:	4628      	mov	r0, r5
 801a366:	f000 fedd 	bl	801b124 <_fflush_r>
 801a36a:	b938      	cbnz	r0, 801a37c <__swbuf_r+0x74>
 801a36c:	4638      	mov	r0, r7
 801a36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a370:	4621      	mov	r1, r4
 801a372:	4628      	mov	r0, r5
 801a374:	f000 f806 	bl	801a384 <__swsetup_r>
 801a378:	2800      	cmp	r0, #0
 801a37a:	d0d5      	beq.n	801a328 <__swbuf_r+0x20>
 801a37c:	f04f 37ff 	mov.w	r7, #4294967295
 801a380:	e7f4      	b.n	801a36c <__swbuf_r+0x64>
	...

0801a384 <__swsetup_r>:
 801a384:	b538      	push	{r3, r4, r5, lr}
 801a386:	4b2a      	ldr	r3, [pc, #168]	; (801a430 <__swsetup_r+0xac>)
 801a388:	4605      	mov	r5, r0
 801a38a:	6818      	ldr	r0, [r3, #0]
 801a38c:	460c      	mov	r4, r1
 801a38e:	b118      	cbz	r0, 801a398 <__swsetup_r+0x14>
 801a390:	6a03      	ldr	r3, [r0, #32]
 801a392:	b90b      	cbnz	r3, 801a398 <__swsetup_r+0x14>
 801a394:	f7ff fe12 	bl	8019fbc <__sinit>
 801a398:	89a3      	ldrh	r3, [r4, #12]
 801a39a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a39e:	0718      	lsls	r0, r3, #28
 801a3a0:	d422      	bmi.n	801a3e8 <__swsetup_r+0x64>
 801a3a2:	06d9      	lsls	r1, r3, #27
 801a3a4:	d407      	bmi.n	801a3b6 <__swsetup_r+0x32>
 801a3a6:	2309      	movs	r3, #9
 801a3a8:	602b      	str	r3, [r5, #0]
 801a3aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a3ae:	81a3      	strh	r3, [r4, #12]
 801a3b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a3b4:	e034      	b.n	801a420 <__swsetup_r+0x9c>
 801a3b6:	0758      	lsls	r0, r3, #29
 801a3b8:	d512      	bpl.n	801a3e0 <__swsetup_r+0x5c>
 801a3ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3bc:	b141      	cbz	r1, 801a3d0 <__swsetup_r+0x4c>
 801a3be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a3c2:	4299      	cmp	r1, r3
 801a3c4:	d002      	beq.n	801a3cc <__swsetup_r+0x48>
 801a3c6:	4628      	mov	r0, r5
 801a3c8:	f000 f9a6 	bl	801a718 <_free_r>
 801a3cc:	2300      	movs	r3, #0
 801a3ce:	6363      	str	r3, [r4, #52]	; 0x34
 801a3d0:	89a3      	ldrh	r3, [r4, #12]
 801a3d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a3d6:	81a3      	strh	r3, [r4, #12]
 801a3d8:	2300      	movs	r3, #0
 801a3da:	6063      	str	r3, [r4, #4]
 801a3dc:	6923      	ldr	r3, [r4, #16]
 801a3de:	6023      	str	r3, [r4, #0]
 801a3e0:	89a3      	ldrh	r3, [r4, #12]
 801a3e2:	f043 0308 	orr.w	r3, r3, #8
 801a3e6:	81a3      	strh	r3, [r4, #12]
 801a3e8:	6923      	ldr	r3, [r4, #16]
 801a3ea:	b94b      	cbnz	r3, 801a400 <__swsetup_r+0x7c>
 801a3ec:	89a3      	ldrh	r3, [r4, #12]
 801a3ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a3f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a3f6:	d003      	beq.n	801a400 <__swsetup_r+0x7c>
 801a3f8:	4621      	mov	r1, r4
 801a3fa:	4628      	mov	r0, r5
 801a3fc:	f000 fef2 	bl	801b1e4 <__smakebuf_r>
 801a400:	89a0      	ldrh	r0, [r4, #12]
 801a402:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a406:	f010 0301 	ands.w	r3, r0, #1
 801a40a:	d00a      	beq.n	801a422 <__swsetup_r+0x9e>
 801a40c:	2300      	movs	r3, #0
 801a40e:	60a3      	str	r3, [r4, #8]
 801a410:	6963      	ldr	r3, [r4, #20]
 801a412:	425b      	negs	r3, r3
 801a414:	61a3      	str	r3, [r4, #24]
 801a416:	6923      	ldr	r3, [r4, #16]
 801a418:	b943      	cbnz	r3, 801a42c <__swsetup_r+0xa8>
 801a41a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a41e:	d1c4      	bne.n	801a3aa <__swsetup_r+0x26>
 801a420:	bd38      	pop	{r3, r4, r5, pc}
 801a422:	0781      	lsls	r1, r0, #30
 801a424:	bf58      	it	pl
 801a426:	6963      	ldrpl	r3, [r4, #20]
 801a428:	60a3      	str	r3, [r4, #8]
 801a42a:	e7f4      	b.n	801a416 <__swsetup_r+0x92>
 801a42c:	2000      	movs	r0, #0
 801a42e:	e7f7      	b.n	801a420 <__swsetup_r+0x9c>
 801a430:	200000e8 	.word	0x200000e8

0801a434 <memmove>:
 801a434:	4288      	cmp	r0, r1
 801a436:	b510      	push	{r4, lr}
 801a438:	eb01 0402 	add.w	r4, r1, r2
 801a43c:	d902      	bls.n	801a444 <memmove+0x10>
 801a43e:	4284      	cmp	r4, r0
 801a440:	4623      	mov	r3, r4
 801a442:	d807      	bhi.n	801a454 <memmove+0x20>
 801a444:	1e43      	subs	r3, r0, #1
 801a446:	42a1      	cmp	r1, r4
 801a448:	d008      	beq.n	801a45c <memmove+0x28>
 801a44a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a44e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a452:	e7f8      	b.n	801a446 <memmove+0x12>
 801a454:	4402      	add	r2, r0
 801a456:	4601      	mov	r1, r0
 801a458:	428a      	cmp	r2, r1
 801a45a:	d100      	bne.n	801a45e <memmove+0x2a>
 801a45c:	bd10      	pop	{r4, pc}
 801a45e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a466:	e7f7      	b.n	801a458 <memmove+0x24>

0801a468 <memset>:
 801a468:	4402      	add	r2, r0
 801a46a:	4603      	mov	r3, r0
 801a46c:	4293      	cmp	r3, r2
 801a46e:	d100      	bne.n	801a472 <memset+0xa>
 801a470:	4770      	bx	lr
 801a472:	f803 1b01 	strb.w	r1, [r3], #1
 801a476:	e7f9      	b.n	801a46c <memset+0x4>

0801a478 <strchr>:
 801a478:	b2c9      	uxtb	r1, r1
 801a47a:	4603      	mov	r3, r0
 801a47c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a480:	b11a      	cbz	r2, 801a48a <strchr+0x12>
 801a482:	428a      	cmp	r2, r1
 801a484:	d1f9      	bne.n	801a47a <strchr+0x2>
 801a486:	4618      	mov	r0, r3
 801a488:	4770      	bx	lr
 801a48a:	2900      	cmp	r1, #0
 801a48c:	bf18      	it	ne
 801a48e:	2300      	movne	r3, #0
 801a490:	e7f9      	b.n	801a486 <strchr+0xe>

0801a492 <strncmp>:
 801a492:	b510      	push	{r4, lr}
 801a494:	b16a      	cbz	r2, 801a4b2 <strncmp+0x20>
 801a496:	3901      	subs	r1, #1
 801a498:	1884      	adds	r4, r0, r2
 801a49a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a49e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a4a2:	429a      	cmp	r2, r3
 801a4a4:	d103      	bne.n	801a4ae <strncmp+0x1c>
 801a4a6:	42a0      	cmp	r0, r4
 801a4a8:	d001      	beq.n	801a4ae <strncmp+0x1c>
 801a4aa:	2a00      	cmp	r2, #0
 801a4ac:	d1f5      	bne.n	801a49a <strncmp+0x8>
 801a4ae:	1ad0      	subs	r0, r2, r3
 801a4b0:	bd10      	pop	{r4, pc}
 801a4b2:	4610      	mov	r0, r2
 801a4b4:	e7fc      	b.n	801a4b0 <strncmp+0x1e>

0801a4b6 <strstr>:
 801a4b6:	780a      	ldrb	r2, [r1, #0]
 801a4b8:	b570      	push	{r4, r5, r6, lr}
 801a4ba:	b96a      	cbnz	r2, 801a4d8 <strstr+0x22>
 801a4bc:	bd70      	pop	{r4, r5, r6, pc}
 801a4be:	429a      	cmp	r2, r3
 801a4c0:	d109      	bne.n	801a4d6 <strstr+0x20>
 801a4c2:	460c      	mov	r4, r1
 801a4c4:	4605      	mov	r5, r0
 801a4c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d0f6      	beq.n	801a4bc <strstr+0x6>
 801a4ce:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a4d2:	429e      	cmp	r6, r3
 801a4d4:	d0f7      	beq.n	801a4c6 <strstr+0x10>
 801a4d6:	3001      	adds	r0, #1
 801a4d8:	7803      	ldrb	r3, [r0, #0]
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d1ef      	bne.n	801a4be <strstr+0x8>
 801a4de:	4618      	mov	r0, r3
 801a4e0:	e7ec      	b.n	801a4bc <strstr+0x6>
	...

0801a4e4 <_close_r>:
 801a4e4:	b538      	push	{r3, r4, r5, lr}
 801a4e6:	4d06      	ldr	r5, [pc, #24]	; (801a500 <_close_r+0x1c>)
 801a4e8:	2300      	movs	r3, #0
 801a4ea:	4604      	mov	r4, r0
 801a4ec:	4608      	mov	r0, r1
 801a4ee:	602b      	str	r3, [r5, #0]
 801a4f0:	f7e9 fc6a 	bl	8003dc8 <_close>
 801a4f4:	1c43      	adds	r3, r0, #1
 801a4f6:	d102      	bne.n	801a4fe <_close_r+0x1a>
 801a4f8:	682b      	ldr	r3, [r5, #0]
 801a4fa:	b103      	cbz	r3, 801a4fe <_close_r+0x1a>
 801a4fc:	6023      	str	r3, [r4, #0]
 801a4fe:	bd38      	pop	{r3, r4, r5, pc}
 801a500:	20009ea4 	.word	0x20009ea4

0801a504 <_reclaim_reent>:
 801a504:	4b29      	ldr	r3, [pc, #164]	; (801a5ac <_reclaim_reent+0xa8>)
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	4283      	cmp	r3, r0
 801a50a:	b570      	push	{r4, r5, r6, lr}
 801a50c:	4604      	mov	r4, r0
 801a50e:	d04b      	beq.n	801a5a8 <_reclaim_reent+0xa4>
 801a510:	69c3      	ldr	r3, [r0, #28]
 801a512:	b143      	cbz	r3, 801a526 <_reclaim_reent+0x22>
 801a514:	68db      	ldr	r3, [r3, #12]
 801a516:	2b00      	cmp	r3, #0
 801a518:	d144      	bne.n	801a5a4 <_reclaim_reent+0xa0>
 801a51a:	69e3      	ldr	r3, [r4, #28]
 801a51c:	6819      	ldr	r1, [r3, #0]
 801a51e:	b111      	cbz	r1, 801a526 <_reclaim_reent+0x22>
 801a520:	4620      	mov	r0, r4
 801a522:	f000 f8f9 	bl	801a718 <_free_r>
 801a526:	6961      	ldr	r1, [r4, #20]
 801a528:	b111      	cbz	r1, 801a530 <_reclaim_reent+0x2c>
 801a52a:	4620      	mov	r0, r4
 801a52c:	f000 f8f4 	bl	801a718 <_free_r>
 801a530:	69e1      	ldr	r1, [r4, #28]
 801a532:	b111      	cbz	r1, 801a53a <_reclaim_reent+0x36>
 801a534:	4620      	mov	r0, r4
 801a536:	f000 f8ef 	bl	801a718 <_free_r>
 801a53a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a53c:	b111      	cbz	r1, 801a544 <_reclaim_reent+0x40>
 801a53e:	4620      	mov	r0, r4
 801a540:	f000 f8ea 	bl	801a718 <_free_r>
 801a544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a546:	b111      	cbz	r1, 801a54e <_reclaim_reent+0x4a>
 801a548:	4620      	mov	r0, r4
 801a54a:	f000 f8e5 	bl	801a718 <_free_r>
 801a54e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a550:	b111      	cbz	r1, 801a558 <_reclaim_reent+0x54>
 801a552:	4620      	mov	r0, r4
 801a554:	f000 f8e0 	bl	801a718 <_free_r>
 801a558:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a55a:	b111      	cbz	r1, 801a562 <_reclaim_reent+0x5e>
 801a55c:	4620      	mov	r0, r4
 801a55e:	f000 f8db 	bl	801a718 <_free_r>
 801a562:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a564:	b111      	cbz	r1, 801a56c <_reclaim_reent+0x68>
 801a566:	4620      	mov	r0, r4
 801a568:	f000 f8d6 	bl	801a718 <_free_r>
 801a56c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a56e:	b111      	cbz	r1, 801a576 <_reclaim_reent+0x72>
 801a570:	4620      	mov	r0, r4
 801a572:	f000 f8d1 	bl	801a718 <_free_r>
 801a576:	6a23      	ldr	r3, [r4, #32]
 801a578:	b1b3      	cbz	r3, 801a5a8 <_reclaim_reent+0xa4>
 801a57a:	4620      	mov	r0, r4
 801a57c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a580:	4718      	bx	r3
 801a582:	5949      	ldr	r1, [r1, r5]
 801a584:	b941      	cbnz	r1, 801a598 <_reclaim_reent+0x94>
 801a586:	3504      	adds	r5, #4
 801a588:	69e3      	ldr	r3, [r4, #28]
 801a58a:	2d80      	cmp	r5, #128	; 0x80
 801a58c:	68d9      	ldr	r1, [r3, #12]
 801a58e:	d1f8      	bne.n	801a582 <_reclaim_reent+0x7e>
 801a590:	4620      	mov	r0, r4
 801a592:	f000 f8c1 	bl	801a718 <_free_r>
 801a596:	e7c0      	b.n	801a51a <_reclaim_reent+0x16>
 801a598:	680e      	ldr	r6, [r1, #0]
 801a59a:	4620      	mov	r0, r4
 801a59c:	f000 f8bc 	bl	801a718 <_free_r>
 801a5a0:	4631      	mov	r1, r6
 801a5a2:	e7ef      	b.n	801a584 <_reclaim_reent+0x80>
 801a5a4:	2500      	movs	r5, #0
 801a5a6:	e7ef      	b.n	801a588 <_reclaim_reent+0x84>
 801a5a8:	bd70      	pop	{r4, r5, r6, pc}
 801a5aa:	bf00      	nop
 801a5ac:	200000e8 	.word	0x200000e8

0801a5b0 <_lseek_r>:
 801a5b0:	b538      	push	{r3, r4, r5, lr}
 801a5b2:	4d07      	ldr	r5, [pc, #28]	; (801a5d0 <_lseek_r+0x20>)
 801a5b4:	4604      	mov	r4, r0
 801a5b6:	4608      	mov	r0, r1
 801a5b8:	4611      	mov	r1, r2
 801a5ba:	2200      	movs	r2, #0
 801a5bc:	602a      	str	r2, [r5, #0]
 801a5be:	461a      	mov	r2, r3
 801a5c0:	f7e9 fc19 	bl	8003df6 <_lseek>
 801a5c4:	1c43      	adds	r3, r0, #1
 801a5c6:	d102      	bne.n	801a5ce <_lseek_r+0x1e>
 801a5c8:	682b      	ldr	r3, [r5, #0]
 801a5ca:	b103      	cbz	r3, 801a5ce <_lseek_r+0x1e>
 801a5cc:	6023      	str	r3, [r4, #0]
 801a5ce:	bd38      	pop	{r3, r4, r5, pc}
 801a5d0:	20009ea4 	.word	0x20009ea4

0801a5d4 <_read_r>:
 801a5d4:	b538      	push	{r3, r4, r5, lr}
 801a5d6:	4d07      	ldr	r5, [pc, #28]	; (801a5f4 <_read_r+0x20>)
 801a5d8:	4604      	mov	r4, r0
 801a5da:	4608      	mov	r0, r1
 801a5dc:	4611      	mov	r1, r2
 801a5de:	2200      	movs	r2, #0
 801a5e0:	602a      	str	r2, [r5, #0]
 801a5e2:	461a      	mov	r2, r3
 801a5e4:	f7e9 fc18 	bl	8003e18 <_read>
 801a5e8:	1c43      	adds	r3, r0, #1
 801a5ea:	d102      	bne.n	801a5f2 <_read_r+0x1e>
 801a5ec:	682b      	ldr	r3, [r5, #0]
 801a5ee:	b103      	cbz	r3, 801a5f2 <_read_r+0x1e>
 801a5f0:	6023      	str	r3, [r4, #0]
 801a5f2:	bd38      	pop	{r3, r4, r5, pc}
 801a5f4:	20009ea4 	.word	0x20009ea4

0801a5f8 <_sbrk_r>:
 801a5f8:	b538      	push	{r3, r4, r5, lr}
 801a5fa:	4d06      	ldr	r5, [pc, #24]	; (801a614 <_sbrk_r+0x1c>)
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	4604      	mov	r4, r0
 801a600:	4608      	mov	r0, r1
 801a602:	602b      	str	r3, [r5, #0]
 801a604:	f7ea f888 	bl	8004718 <_sbrk>
 801a608:	1c43      	adds	r3, r0, #1
 801a60a:	d102      	bne.n	801a612 <_sbrk_r+0x1a>
 801a60c:	682b      	ldr	r3, [r5, #0]
 801a60e:	b103      	cbz	r3, 801a612 <_sbrk_r+0x1a>
 801a610:	6023      	str	r3, [r4, #0]
 801a612:	bd38      	pop	{r3, r4, r5, pc}
 801a614:	20009ea4 	.word	0x20009ea4

0801a618 <_write_r>:
 801a618:	b538      	push	{r3, r4, r5, lr}
 801a61a:	4d07      	ldr	r5, [pc, #28]	; (801a638 <_write_r+0x20>)
 801a61c:	4604      	mov	r4, r0
 801a61e:	4608      	mov	r0, r1
 801a620:	4611      	mov	r1, r2
 801a622:	2200      	movs	r2, #0
 801a624:	602a      	str	r2, [r5, #0]
 801a626:	461a      	mov	r2, r3
 801a628:	f7e9 fba2 	bl	8003d70 <_write>
 801a62c:	1c43      	adds	r3, r0, #1
 801a62e:	d102      	bne.n	801a636 <_write_r+0x1e>
 801a630:	682b      	ldr	r3, [r5, #0]
 801a632:	b103      	cbz	r3, 801a636 <_write_r+0x1e>
 801a634:	6023      	str	r3, [r4, #0]
 801a636:	bd38      	pop	{r3, r4, r5, pc}
 801a638:	20009ea4 	.word	0x20009ea4

0801a63c <__errno>:
 801a63c:	4b01      	ldr	r3, [pc, #4]	; (801a644 <__errno+0x8>)
 801a63e:	6818      	ldr	r0, [r3, #0]
 801a640:	4770      	bx	lr
 801a642:	bf00      	nop
 801a644:	200000e8 	.word	0x200000e8

0801a648 <__libc_init_array>:
 801a648:	b570      	push	{r4, r5, r6, lr}
 801a64a:	4d0d      	ldr	r5, [pc, #52]	; (801a680 <__libc_init_array+0x38>)
 801a64c:	4c0d      	ldr	r4, [pc, #52]	; (801a684 <__libc_init_array+0x3c>)
 801a64e:	1b64      	subs	r4, r4, r5
 801a650:	10a4      	asrs	r4, r4, #2
 801a652:	2600      	movs	r6, #0
 801a654:	42a6      	cmp	r6, r4
 801a656:	d109      	bne.n	801a66c <__libc_init_array+0x24>
 801a658:	4d0b      	ldr	r5, [pc, #44]	; (801a688 <__libc_init_array+0x40>)
 801a65a:	4c0c      	ldr	r4, [pc, #48]	; (801a68c <__libc_init_array+0x44>)
 801a65c:	f000 fe6e 	bl	801b33c <_init>
 801a660:	1b64      	subs	r4, r4, r5
 801a662:	10a4      	asrs	r4, r4, #2
 801a664:	2600      	movs	r6, #0
 801a666:	42a6      	cmp	r6, r4
 801a668:	d105      	bne.n	801a676 <__libc_init_array+0x2e>
 801a66a:	bd70      	pop	{r4, r5, r6, pc}
 801a66c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a670:	4798      	blx	r3
 801a672:	3601      	adds	r6, #1
 801a674:	e7ee      	b.n	801a654 <__libc_init_array+0xc>
 801a676:	f855 3b04 	ldr.w	r3, [r5], #4
 801a67a:	4798      	blx	r3
 801a67c:	3601      	adds	r6, #1
 801a67e:	e7f2      	b.n	801a666 <__libc_init_array+0x1e>
 801a680:	0801c2b0 	.word	0x0801c2b0
 801a684:	0801c2b0 	.word	0x0801c2b0
 801a688:	0801c2b0 	.word	0x0801c2b0
 801a68c:	0801c2b4 	.word	0x0801c2b4

0801a690 <__retarget_lock_init_recursive>:
 801a690:	4770      	bx	lr

0801a692 <__retarget_lock_acquire_recursive>:
 801a692:	4770      	bx	lr

0801a694 <__retarget_lock_release_recursive>:
 801a694:	4770      	bx	lr

0801a696 <strcpy>:
 801a696:	4603      	mov	r3, r0
 801a698:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a69c:	f803 2b01 	strb.w	r2, [r3], #1
 801a6a0:	2a00      	cmp	r2, #0
 801a6a2:	d1f9      	bne.n	801a698 <strcpy+0x2>
 801a6a4:	4770      	bx	lr

0801a6a6 <memcpy>:
 801a6a6:	440a      	add	r2, r1
 801a6a8:	4291      	cmp	r1, r2
 801a6aa:	f100 33ff 	add.w	r3, r0, #4294967295
 801a6ae:	d100      	bne.n	801a6b2 <memcpy+0xc>
 801a6b0:	4770      	bx	lr
 801a6b2:	b510      	push	{r4, lr}
 801a6b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a6b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a6bc:	4291      	cmp	r1, r2
 801a6be:	d1f9      	bne.n	801a6b4 <memcpy+0xe>
 801a6c0:	bd10      	pop	{r4, pc}
	...

0801a6c4 <__assert_func>:
 801a6c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a6c6:	4614      	mov	r4, r2
 801a6c8:	461a      	mov	r2, r3
 801a6ca:	4b09      	ldr	r3, [pc, #36]	; (801a6f0 <__assert_func+0x2c>)
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	4605      	mov	r5, r0
 801a6d0:	68d8      	ldr	r0, [r3, #12]
 801a6d2:	b14c      	cbz	r4, 801a6e8 <__assert_func+0x24>
 801a6d4:	4b07      	ldr	r3, [pc, #28]	; (801a6f4 <__assert_func+0x30>)
 801a6d6:	9100      	str	r1, [sp, #0]
 801a6d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a6dc:	4906      	ldr	r1, [pc, #24]	; (801a6f8 <__assert_func+0x34>)
 801a6de:	462b      	mov	r3, r5
 801a6e0:	f000 fd48 	bl	801b174 <fiprintf>
 801a6e4:	f000 fddc 	bl	801b2a0 <abort>
 801a6e8:	4b04      	ldr	r3, [pc, #16]	; (801a6fc <__assert_func+0x38>)
 801a6ea:	461c      	mov	r4, r3
 801a6ec:	e7f3      	b.n	801a6d6 <__assert_func+0x12>
 801a6ee:	bf00      	nop
 801a6f0:	200000e8 	.word	0x200000e8
 801a6f4:	0801c238 	.word	0x0801c238
 801a6f8:	0801c245 	.word	0x0801c245
 801a6fc:	0801c273 	.word	0x0801c273

0801a700 <__env_lock>:
 801a700:	4801      	ldr	r0, [pc, #4]	; (801a708 <__env_lock+0x8>)
 801a702:	f7ff bfc6 	b.w	801a692 <__retarget_lock_acquire_recursive>
 801a706:	bf00      	nop
 801a708:	20009ea8 	.word	0x20009ea8

0801a70c <__env_unlock>:
 801a70c:	4801      	ldr	r0, [pc, #4]	; (801a714 <__env_unlock+0x8>)
 801a70e:	f7ff bfc1 	b.w	801a694 <__retarget_lock_release_recursive>
 801a712:	bf00      	nop
 801a714:	20009ea8 	.word	0x20009ea8

0801a718 <_free_r>:
 801a718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a71a:	2900      	cmp	r1, #0
 801a71c:	d044      	beq.n	801a7a8 <_free_r+0x90>
 801a71e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a722:	9001      	str	r0, [sp, #4]
 801a724:	2b00      	cmp	r3, #0
 801a726:	f1a1 0404 	sub.w	r4, r1, #4
 801a72a:	bfb8      	it	lt
 801a72c:	18e4      	addlt	r4, r4, r3
 801a72e:	f7ff fa8d 	bl	8019c4c <__malloc_lock>
 801a732:	4a1e      	ldr	r2, [pc, #120]	; (801a7ac <_free_r+0x94>)
 801a734:	9801      	ldr	r0, [sp, #4]
 801a736:	6813      	ldr	r3, [r2, #0]
 801a738:	b933      	cbnz	r3, 801a748 <_free_r+0x30>
 801a73a:	6063      	str	r3, [r4, #4]
 801a73c:	6014      	str	r4, [r2, #0]
 801a73e:	b003      	add	sp, #12
 801a740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a744:	f7ff ba88 	b.w	8019c58 <__malloc_unlock>
 801a748:	42a3      	cmp	r3, r4
 801a74a:	d908      	bls.n	801a75e <_free_r+0x46>
 801a74c:	6825      	ldr	r5, [r4, #0]
 801a74e:	1961      	adds	r1, r4, r5
 801a750:	428b      	cmp	r3, r1
 801a752:	bf01      	itttt	eq
 801a754:	6819      	ldreq	r1, [r3, #0]
 801a756:	685b      	ldreq	r3, [r3, #4]
 801a758:	1949      	addeq	r1, r1, r5
 801a75a:	6021      	streq	r1, [r4, #0]
 801a75c:	e7ed      	b.n	801a73a <_free_r+0x22>
 801a75e:	461a      	mov	r2, r3
 801a760:	685b      	ldr	r3, [r3, #4]
 801a762:	b10b      	cbz	r3, 801a768 <_free_r+0x50>
 801a764:	42a3      	cmp	r3, r4
 801a766:	d9fa      	bls.n	801a75e <_free_r+0x46>
 801a768:	6811      	ldr	r1, [r2, #0]
 801a76a:	1855      	adds	r5, r2, r1
 801a76c:	42a5      	cmp	r5, r4
 801a76e:	d10b      	bne.n	801a788 <_free_r+0x70>
 801a770:	6824      	ldr	r4, [r4, #0]
 801a772:	4421      	add	r1, r4
 801a774:	1854      	adds	r4, r2, r1
 801a776:	42a3      	cmp	r3, r4
 801a778:	6011      	str	r1, [r2, #0]
 801a77a:	d1e0      	bne.n	801a73e <_free_r+0x26>
 801a77c:	681c      	ldr	r4, [r3, #0]
 801a77e:	685b      	ldr	r3, [r3, #4]
 801a780:	6053      	str	r3, [r2, #4]
 801a782:	440c      	add	r4, r1
 801a784:	6014      	str	r4, [r2, #0]
 801a786:	e7da      	b.n	801a73e <_free_r+0x26>
 801a788:	d902      	bls.n	801a790 <_free_r+0x78>
 801a78a:	230c      	movs	r3, #12
 801a78c:	6003      	str	r3, [r0, #0]
 801a78e:	e7d6      	b.n	801a73e <_free_r+0x26>
 801a790:	6825      	ldr	r5, [r4, #0]
 801a792:	1961      	adds	r1, r4, r5
 801a794:	428b      	cmp	r3, r1
 801a796:	bf04      	itt	eq
 801a798:	6819      	ldreq	r1, [r3, #0]
 801a79a:	685b      	ldreq	r3, [r3, #4]
 801a79c:	6063      	str	r3, [r4, #4]
 801a79e:	bf04      	itt	eq
 801a7a0:	1949      	addeq	r1, r1, r5
 801a7a2:	6021      	streq	r1, [r4, #0]
 801a7a4:	6054      	str	r4, [r2, #4]
 801a7a6:	e7ca      	b.n	801a73e <_free_r+0x26>
 801a7a8:	b003      	add	sp, #12
 801a7aa:	bd30      	pop	{r4, r5, pc}
 801a7ac:	20009d60 	.word	0x20009d60

0801a7b0 <_malloc_usable_size_r>:
 801a7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a7b4:	1f18      	subs	r0, r3, #4
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	bfbc      	itt	lt
 801a7ba:	580b      	ldrlt	r3, [r1, r0]
 801a7bc:	18c0      	addlt	r0, r0, r3
 801a7be:	4770      	bx	lr

0801a7c0 <__ssputs_r>:
 801a7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7c4:	688e      	ldr	r6, [r1, #8]
 801a7c6:	461f      	mov	r7, r3
 801a7c8:	42be      	cmp	r6, r7
 801a7ca:	680b      	ldr	r3, [r1, #0]
 801a7cc:	4682      	mov	sl, r0
 801a7ce:	460c      	mov	r4, r1
 801a7d0:	4690      	mov	r8, r2
 801a7d2:	d82c      	bhi.n	801a82e <__ssputs_r+0x6e>
 801a7d4:	898a      	ldrh	r2, [r1, #12]
 801a7d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a7da:	d026      	beq.n	801a82a <__ssputs_r+0x6a>
 801a7dc:	6965      	ldr	r5, [r4, #20]
 801a7de:	6909      	ldr	r1, [r1, #16]
 801a7e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a7e4:	eba3 0901 	sub.w	r9, r3, r1
 801a7e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a7ec:	1c7b      	adds	r3, r7, #1
 801a7ee:	444b      	add	r3, r9
 801a7f0:	106d      	asrs	r5, r5, #1
 801a7f2:	429d      	cmp	r5, r3
 801a7f4:	bf38      	it	cc
 801a7f6:	461d      	movcc	r5, r3
 801a7f8:	0553      	lsls	r3, r2, #21
 801a7fa:	d527      	bpl.n	801a84c <__ssputs_r+0x8c>
 801a7fc:	4629      	mov	r1, r5
 801a7fe:	f7ff f9a5 	bl	8019b4c <_malloc_r>
 801a802:	4606      	mov	r6, r0
 801a804:	b360      	cbz	r0, 801a860 <__ssputs_r+0xa0>
 801a806:	6921      	ldr	r1, [r4, #16]
 801a808:	464a      	mov	r2, r9
 801a80a:	f7ff ff4c 	bl	801a6a6 <memcpy>
 801a80e:	89a3      	ldrh	r3, [r4, #12]
 801a810:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a818:	81a3      	strh	r3, [r4, #12]
 801a81a:	6126      	str	r6, [r4, #16]
 801a81c:	6165      	str	r5, [r4, #20]
 801a81e:	444e      	add	r6, r9
 801a820:	eba5 0509 	sub.w	r5, r5, r9
 801a824:	6026      	str	r6, [r4, #0]
 801a826:	60a5      	str	r5, [r4, #8]
 801a828:	463e      	mov	r6, r7
 801a82a:	42be      	cmp	r6, r7
 801a82c:	d900      	bls.n	801a830 <__ssputs_r+0x70>
 801a82e:	463e      	mov	r6, r7
 801a830:	6820      	ldr	r0, [r4, #0]
 801a832:	4632      	mov	r2, r6
 801a834:	4641      	mov	r1, r8
 801a836:	f7ff fdfd 	bl	801a434 <memmove>
 801a83a:	68a3      	ldr	r3, [r4, #8]
 801a83c:	1b9b      	subs	r3, r3, r6
 801a83e:	60a3      	str	r3, [r4, #8]
 801a840:	6823      	ldr	r3, [r4, #0]
 801a842:	4433      	add	r3, r6
 801a844:	6023      	str	r3, [r4, #0]
 801a846:	2000      	movs	r0, #0
 801a848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a84c:	462a      	mov	r2, r5
 801a84e:	f7ff fa7d 	bl	8019d4c <_realloc_r>
 801a852:	4606      	mov	r6, r0
 801a854:	2800      	cmp	r0, #0
 801a856:	d1e0      	bne.n	801a81a <__ssputs_r+0x5a>
 801a858:	6921      	ldr	r1, [r4, #16]
 801a85a:	4650      	mov	r0, sl
 801a85c:	f7ff ff5c 	bl	801a718 <_free_r>
 801a860:	230c      	movs	r3, #12
 801a862:	f8ca 3000 	str.w	r3, [sl]
 801a866:	89a3      	ldrh	r3, [r4, #12]
 801a868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a86c:	81a3      	strh	r3, [r4, #12]
 801a86e:	f04f 30ff 	mov.w	r0, #4294967295
 801a872:	e7e9      	b.n	801a848 <__ssputs_r+0x88>

0801a874 <_svfiprintf_r>:
 801a874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a878:	4698      	mov	r8, r3
 801a87a:	898b      	ldrh	r3, [r1, #12]
 801a87c:	061b      	lsls	r3, r3, #24
 801a87e:	b09d      	sub	sp, #116	; 0x74
 801a880:	4607      	mov	r7, r0
 801a882:	460d      	mov	r5, r1
 801a884:	4614      	mov	r4, r2
 801a886:	d50e      	bpl.n	801a8a6 <_svfiprintf_r+0x32>
 801a888:	690b      	ldr	r3, [r1, #16]
 801a88a:	b963      	cbnz	r3, 801a8a6 <_svfiprintf_r+0x32>
 801a88c:	2140      	movs	r1, #64	; 0x40
 801a88e:	f7ff f95d 	bl	8019b4c <_malloc_r>
 801a892:	6028      	str	r0, [r5, #0]
 801a894:	6128      	str	r0, [r5, #16]
 801a896:	b920      	cbnz	r0, 801a8a2 <_svfiprintf_r+0x2e>
 801a898:	230c      	movs	r3, #12
 801a89a:	603b      	str	r3, [r7, #0]
 801a89c:	f04f 30ff 	mov.w	r0, #4294967295
 801a8a0:	e0d0      	b.n	801aa44 <_svfiprintf_r+0x1d0>
 801a8a2:	2340      	movs	r3, #64	; 0x40
 801a8a4:	616b      	str	r3, [r5, #20]
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	9309      	str	r3, [sp, #36]	; 0x24
 801a8aa:	2320      	movs	r3, #32
 801a8ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a8b0:	f8cd 800c 	str.w	r8, [sp, #12]
 801a8b4:	2330      	movs	r3, #48	; 0x30
 801a8b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801aa5c <_svfiprintf_r+0x1e8>
 801a8ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a8be:	f04f 0901 	mov.w	r9, #1
 801a8c2:	4623      	mov	r3, r4
 801a8c4:	469a      	mov	sl, r3
 801a8c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a8ca:	b10a      	cbz	r2, 801a8d0 <_svfiprintf_r+0x5c>
 801a8cc:	2a25      	cmp	r2, #37	; 0x25
 801a8ce:	d1f9      	bne.n	801a8c4 <_svfiprintf_r+0x50>
 801a8d0:	ebba 0b04 	subs.w	fp, sl, r4
 801a8d4:	d00b      	beq.n	801a8ee <_svfiprintf_r+0x7a>
 801a8d6:	465b      	mov	r3, fp
 801a8d8:	4622      	mov	r2, r4
 801a8da:	4629      	mov	r1, r5
 801a8dc:	4638      	mov	r0, r7
 801a8de:	f7ff ff6f 	bl	801a7c0 <__ssputs_r>
 801a8e2:	3001      	adds	r0, #1
 801a8e4:	f000 80a9 	beq.w	801aa3a <_svfiprintf_r+0x1c6>
 801a8e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a8ea:	445a      	add	r2, fp
 801a8ec:	9209      	str	r2, [sp, #36]	; 0x24
 801a8ee:	f89a 3000 	ldrb.w	r3, [sl]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	f000 80a1 	beq.w	801aa3a <_svfiprintf_r+0x1c6>
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	f04f 32ff 	mov.w	r2, #4294967295
 801a8fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a902:	f10a 0a01 	add.w	sl, sl, #1
 801a906:	9304      	str	r3, [sp, #16]
 801a908:	9307      	str	r3, [sp, #28]
 801a90a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a90e:	931a      	str	r3, [sp, #104]	; 0x68
 801a910:	4654      	mov	r4, sl
 801a912:	2205      	movs	r2, #5
 801a914:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a918:	4850      	ldr	r0, [pc, #320]	; (801aa5c <_svfiprintf_r+0x1e8>)
 801a91a:	f7e5 fc79 	bl	8000210 <memchr>
 801a91e:	9a04      	ldr	r2, [sp, #16]
 801a920:	b9d8      	cbnz	r0, 801a95a <_svfiprintf_r+0xe6>
 801a922:	06d0      	lsls	r0, r2, #27
 801a924:	bf44      	itt	mi
 801a926:	2320      	movmi	r3, #32
 801a928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a92c:	0711      	lsls	r1, r2, #28
 801a92e:	bf44      	itt	mi
 801a930:	232b      	movmi	r3, #43	; 0x2b
 801a932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a936:	f89a 3000 	ldrb.w	r3, [sl]
 801a93a:	2b2a      	cmp	r3, #42	; 0x2a
 801a93c:	d015      	beq.n	801a96a <_svfiprintf_r+0xf6>
 801a93e:	9a07      	ldr	r2, [sp, #28]
 801a940:	4654      	mov	r4, sl
 801a942:	2000      	movs	r0, #0
 801a944:	f04f 0c0a 	mov.w	ip, #10
 801a948:	4621      	mov	r1, r4
 801a94a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a94e:	3b30      	subs	r3, #48	; 0x30
 801a950:	2b09      	cmp	r3, #9
 801a952:	d94d      	bls.n	801a9f0 <_svfiprintf_r+0x17c>
 801a954:	b1b0      	cbz	r0, 801a984 <_svfiprintf_r+0x110>
 801a956:	9207      	str	r2, [sp, #28]
 801a958:	e014      	b.n	801a984 <_svfiprintf_r+0x110>
 801a95a:	eba0 0308 	sub.w	r3, r0, r8
 801a95e:	fa09 f303 	lsl.w	r3, r9, r3
 801a962:	4313      	orrs	r3, r2
 801a964:	9304      	str	r3, [sp, #16]
 801a966:	46a2      	mov	sl, r4
 801a968:	e7d2      	b.n	801a910 <_svfiprintf_r+0x9c>
 801a96a:	9b03      	ldr	r3, [sp, #12]
 801a96c:	1d19      	adds	r1, r3, #4
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	9103      	str	r1, [sp, #12]
 801a972:	2b00      	cmp	r3, #0
 801a974:	bfbb      	ittet	lt
 801a976:	425b      	neglt	r3, r3
 801a978:	f042 0202 	orrlt.w	r2, r2, #2
 801a97c:	9307      	strge	r3, [sp, #28]
 801a97e:	9307      	strlt	r3, [sp, #28]
 801a980:	bfb8      	it	lt
 801a982:	9204      	strlt	r2, [sp, #16]
 801a984:	7823      	ldrb	r3, [r4, #0]
 801a986:	2b2e      	cmp	r3, #46	; 0x2e
 801a988:	d10c      	bne.n	801a9a4 <_svfiprintf_r+0x130>
 801a98a:	7863      	ldrb	r3, [r4, #1]
 801a98c:	2b2a      	cmp	r3, #42	; 0x2a
 801a98e:	d134      	bne.n	801a9fa <_svfiprintf_r+0x186>
 801a990:	9b03      	ldr	r3, [sp, #12]
 801a992:	1d1a      	adds	r2, r3, #4
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	9203      	str	r2, [sp, #12]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	bfb8      	it	lt
 801a99c:	f04f 33ff 	movlt.w	r3, #4294967295
 801a9a0:	3402      	adds	r4, #2
 801a9a2:	9305      	str	r3, [sp, #20]
 801a9a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801aa6c <_svfiprintf_r+0x1f8>
 801a9a8:	7821      	ldrb	r1, [r4, #0]
 801a9aa:	2203      	movs	r2, #3
 801a9ac:	4650      	mov	r0, sl
 801a9ae:	f7e5 fc2f 	bl	8000210 <memchr>
 801a9b2:	b138      	cbz	r0, 801a9c4 <_svfiprintf_r+0x150>
 801a9b4:	9b04      	ldr	r3, [sp, #16]
 801a9b6:	eba0 000a 	sub.w	r0, r0, sl
 801a9ba:	2240      	movs	r2, #64	; 0x40
 801a9bc:	4082      	lsls	r2, r0
 801a9be:	4313      	orrs	r3, r2
 801a9c0:	3401      	adds	r4, #1
 801a9c2:	9304      	str	r3, [sp, #16]
 801a9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9c8:	4825      	ldr	r0, [pc, #148]	; (801aa60 <_svfiprintf_r+0x1ec>)
 801a9ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a9ce:	2206      	movs	r2, #6
 801a9d0:	f7e5 fc1e 	bl	8000210 <memchr>
 801a9d4:	2800      	cmp	r0, #0
 801a9d6:	d038      	beq.n	801aa4a <_svfiprintf_r+0x1d6>
 801a9d8:	4b22      	ldr	r3, [pc, #136]	; (801aa64 <_svfiprintf_r+0x1f0>)
 801a9da:	bb1b      	cbnz	r3, 801aa24 <_svfiprintf_r+0x1b0>
 801a9dc:	9b03      	ldr	r3, [sp, #12]
 801a9de:	3307      	adds	r3, #7
 801a9e0:	f023 0307 	bic.w	r3, r3, #7
 801a9e4:	3308      	adds	r3, #8
 801a9e6:	9303      	str	r3, [sp, #12]
 801a9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9ea:	4433      	add	r3, r6
 801a9ec:	9309      	str	r3, [sp, #36]	; 0x24
 801a9ee:	e768      	b.n	801a8c2 <_svfiprintf_r+0x4e>
 801a9f0:	fb0c 3202 	mla	r2, ip, r2, r3
 801a9f4:	460c      	mov	r4, r1
 801a9f6:	2001      	movs	r0, #1
 801a9f8:	e7a6      	b.n	801a948 <_svfiprintf_r+0xd4>
 801a9fa:	2300      	movs	r3, #0
 801a9fc:	3401      	adds	r4, #1
 801a9fe:	9305      	str	r3, [sp, #20]
 801aa00:	4619      	mov	r1, r3
 801aa02:	f04f 0c0a 	mov.w	ip, #10
 801aa06:	4620      	mov	r0, r4
 801aa08:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa0c:	3a30      	subs	r2, #48	; 0x30
 801aa0e:	2a09      	cmp	r2, #9
 801aa10:	d903      	bls.n	801aa1a <_svfiprintf_r+0x1a6>
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d0c6      	beq.n	801a9a4 <_svfiprintf_r+0x130>
 801aa16:	9105      	str	r1, [sp, #20]
 801aa18:	e7c4      	b.n	801a9a4 <_svfiprintf_r+0x130>
 801aa1a:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa1e:	4604      	mov	r4, r0
 801aa20:	2301      	movs	r3, #1
 801aa22:	e7f0      	b.n	801aa06 <_svfiprintf_r+0x192>
 801aa24:	ab03      	add	r3, sp, #12
 801aa26:	9300      	str	r3, [sp, #0]
 801aa28:	462a      	mov	r2, r5
 801aa2a:	4b0f      	ldr	r3, [pc, #60]	; (801aa68 <_svfiprintf_r+0x1f4>)
 801aa2c:	a904      	add	r1, sp, #16
 801aa2e:	4638      	mov	r0, r7
 801aa30:	f3af 8000 	nop.w
 801aa34:	1c42      	adds	r2, r0, #1
 801aa36:	4606      	mov	r6, r0
 801aa38:	d1d6      	bne.n	801a9e8 <_svfiprintf_r+0x174>
 801aa3a:	89ab      	ldrh	r3, [r5, #12]
 801aa3c:	065b      	lsls	r3, r3, #25
 801aa3e:	f53f af2d 	bmi.w	801a89c <_svfiprintf_r+0x28>
 801aa42:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa44:	b01d      	add	sp, #116	; 0x74
 801aa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa4a:	ab03      	add	r3, sp, #12
 801aa4c:	9300      	str	r3, [sp, #0]
 801aa4e:	462a      	mov	r2, r5
 801aa50:	4b05      	ldr	r3, [pc, #20]	; (801aa68 <_svfiprintf_r+0x1f4>)
 801aa52:	a904      	add	r1, sp, #16
 801aa54:	4638      	mov	r0, r7
 801aa56:	f000 f9bd 	bl	801add4 <_printf_i>
 801aa5a:	e7eb      	b.n	801aa34 <_svfiprintf_r+0x1c0>
 801aa5c:	0801c274 	.word	0x0801c274
 801aa60:	0801c27e 	.word	0x0801c27e
 801aa64:	00000000 	.word	0x00000000
 801aa68:	0801a7c1 	.word	0x0801a7c1
 801aa6c:	0801c27a 	.word	0x0801c27a

0801aa70 <__sfputc_r>:
 801aa70:	6893      	ldr	r3, [r2, #8]
 801aa72:	3b01      	subs	r3, #1
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	b410      	push	{r4}
 801aa78:	6093      	str	r3, [r2, #8]
 801aa7a:	da08      	bge.n	801aa8e <__sfputc_r+0x1e>
 801aa7c:	6994      	ldr	r4, [r2, #24]
 801aa7e:	42a3      	cmp	r3, r4
 801aa80:	db01      	blt.n	801aa86 <__sfputc_r+0x16>
 801aa82:	290a      	cmp	r1, #10
 801aa84:	d103      	bne.n	801aa8e <__sfputc_r+0x1e>
 801aa86:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa8a:	f7ff bc3d 	b.w	801a308 <__swbuf_r>
 801aa8e:	6813      	ldr	r3, [r2, #0]
 801aa90:	1c58      	adds	r0, r3, #1
 801aa92:	6010      	str	r0, [r2, #0]
 801aa94:	7019      	strb	r1, [r3, #0]
 801aa96:	4608      	mov	r0, r1
 801aa98:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa9c:	4770      	bx	lr

0801aa9e <__sfputs_r>:
 801aa9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaa0:	4606      	mov	r6, r0
 801aaa2:	460f      	mov	r7, r1
 801aaa4:	4614      	mov	r4, r2
 801aaa6:	18d5      	adds	r5, r2, r3
 801aaa8:	42ac      	cmp	r4, r5
 801aaaa:	d101      	bne.n	801aab0 <__sfputs_r+0x12>
 801aaac:	2000      	movs	r0, #0
 801aaae:	e007      	b.n	801aac0 <__sfputs_r+0x22>
 801aab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aab4:	463a      	mov	r2, r7
 801aab6:	4630      	mov	r0, r6
 801aab8:	f7ff ffda 	bl	801aa70 <__sfputc_r>
 801aabc:	1c43      	adds	r3, r0, #1
 801aabe:	d1f3      	bne.n	801aaa8 <__sfputs_r+0xa>
 801aac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801aac4 <_vfiprintf_r>:
 801aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aac8:	460d      	mov	r5, r1
 801aaca:	b09d      	sub	sp, #116	; 0x74
 801aacc:	4614      	mov	r4, r2
 801aace:	4698      	mov	r8, r3
 801aad0:	4606      	mov	r6, r0
 801aad2:	b118      	cbz	r0, 801aadc <_vfiprintf_r+0x18>
 801aad4:	6a03      	ldr	r3, [r0, #32]
 801aad6:	b90b      	cbnz	r3, 801aadc <_vfiprintf_r+0x18>
 801aad8:	f7ff fa70 	bl	8019fbc <__sinit>
 801aadc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aade:	07d9      	lsls	r1, r3, #31
 801aae0:	d405      	bmi.n	801aaee <_vfiprintf_r+0x2a>
 801aae2:	89ab      	ldrh	r3, [r5, #12]
 801aae4:	059a      	lsls	r2, r3, #22
 801aae6:	d402      	bmi.n	801aaee <_vfiprintf_r+0x2a>
 801aae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aaea:	f7ff fdd2 	bl	801a692 <__retarget_lock_acquire_recursive>
 801aaee:	89ab      	ldrh	r3, [r5, #12]
 801aaf0:	071b      	lsls	r3, r3, #28
 801aaf2:	d501      	bpl.n	801aaf8 <_vfiprintf_r+0x34>
 801aaf4:	692b      	ldr	r3, [r5, #16]
 801aaf6:	b99b      	cbnz	r3, 801ab20 <_vfiprintf_r+0x5c>
 801aaf8:	4629      	mov	r1, r5
 801aafa:	4630      	mov	r0, r6
 801aafc:	f7ff fc42 	bl	801a384 <__swsetup_r>
 801ab00:	b170      	cbz	r0, 801ab20 <_vfiprintf_r+0x5c>
 801ab02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab04:	07dc      	lsls	r4, r3, #31
 801ab06:	d504      	bpl.n	801ab12 <_vfiprintf_r+0x4e>
 801ab08:	f04f 30ff 	mov.w	r0, #4294967295
 801ab0c:	b01d      	add	sp, #116	; 0x74
 801ab0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab12:	89ab      	ldrh	r3, [r5, #12]
 801ab14:	0598      	lsls	r0, r3, #22
 801ab16:	d4f7      	bmi.n	801ab08 <_vfiprintf_r+0x44>
 801ab18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab1a:	f7ff fdbb 	bl	801a694 <__retarget_lock_release_recursive>
 801ab1e:	e7f3      	b.n	801ab08 <_vfiprintf_r+0x44>
 801ab20:	2300      	movs	r3, #0
 801ab22:	9309      	str	r3, [sp, #36]	; 0x24
 801ab24:	2320      	movs	r3, #32
 801ab26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ab2a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ab2e:	2330      	movs	r3, #48	; 0x30
 801ab30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ace4 <_vfiprintf_r+0x220>
 801ab34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ab38:	f04f 0901 	mov.w	r9, #1
 801ab3c:	4623      	mov	r3, r4
 801ab3e:	469a      	mov	sl, r3
 801ab40:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab44:	b10a      	cbz	r2, 801ab4a <_vfiprintf_r+0x86>
 801ab46:	2a25      	cmp	r2, #37	; 0x25
 801ab48:	d1f9      	bne.n	801ab3e <_vfiprintf_r+0x7a>
 801ab4a:	ebba 0b04 	subs.w	fp, sl, r4
 801ab4e:	d00b      	beq.n	801ab68 <_vfiprintf_r+0xa4>
 801ab50:	465b      	mov	r3, fp
 801ab52:	4622      	mov	r2, r4
 801ab54:	4629      	mov	r1, r5
 801ab56:	4630      	mov	r0, r6
 801ab58:	f7ff ffa1 	bl	801aa9e <__sfputs_r>
 801ab5c:	3001      	adds	r0, #1
 801ab5e:	f000 80a9 	beq.w	801acb4 <_vfiprintf_r+0x1f0>
 801ab62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab64:	445a      	add	r2, fp
 801ab66:	9209      	str	r2, [sp, #36]	; 0x24
 801ab68:	f89a 3000 	ldrb.w	r3, [sl]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	f000 80a1 	beq.w	801acb4 <_vfiprintf_r+0x1f0>
 801ab72:	2300      	movs	r3, #0
 801ab74:	f04f 32ff 	mov.w	r2, #4294967295
 801ab78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ab7c:	f10a 0a01 	add.w	sl, sl, #1
 801ab80:	9304      	str	r3, [sp, #16]
 801ab82:	9307      	str	r3, [sp, #28]
 801ab84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ab88:	931a      	str	r3, [sp, #104]	; 0x68
 801ab8a:	4654      	mov	r4, sl
 801ab8c:	2205      	movs	r2, #5
 801ab8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab92:	4854      	ldr	r0, [pc, #336]	; (801ace4 <_vfiprintf_r+0x220>)
 801ab94:	f7e5 fb3c 	bl	8000210 <memchr>
 801ab98:	9a04      	ldr	r2, [sp, #16]
 801ab9a:	b9d8      	cbnz	r0, 801abd4 <_vfiprintf_r+0x110>
 801ab9c:	06d1      	lsls	r1, r2, #27
 801ab9e:	bf44      	itt	mi
 801aba0:	2320      	movmi	r3, #32
 801aba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aba6:	0713      	lsls	r3, r2, #28
 801aba8:	bf44      	itt	mi
 801abaa:	232b      	movmi	r3, #43	; 0x2b
 801abac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801abb0:	f89a 3000 	ldrb.w	r3, [sl]
 801abb4:	2b2a      	cmp	r3, #42	; 0x2a
 801abb6:	d015      	beq.n	801abe4 <_vfiprintf_r+0x120>
 801abb8:	9a07      	ldr	r2, [sp, #28]
 801abba:	4654      	mov	r4, sl
 801abbc:	2000      	movs	r0, #0
 801abbe:	f04f 0c0a 	mov.w	ip, #10
 801abc2:	4621      	mov	r1, r4
 801abc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801abc8:	3b30      	subs	r3, #48	; 0x30
 801abca:	2b09      	cmp	r3, #9
 801abcc:	d94d      	bls.n	801ac6a <_vfiprintf_r+0x1a6>
 801abce:	b1b0      	cbz	r0, 801abfe <_vfiprintf_r+0x13a>
 801abd0:	9207      	str	r2, [sp, #28]
 801abd2:	e014      	b.n	801abfe <_vfiprintf_r+0x13a>
 801abd4:	eba0 0308 	sub.w	r3, r0, r8
 801abd8:	fa09 f303 	lsl.w	r3, r9, r3
 801abdc:	4313      	orrs	r3, r2
 801abde:	9304      	str	r3, [sp, #16]
 801abe0:	46a2      	mov	sl, r4
 801abe2:	e7d2      	b.n	801ab8a <_vfiprintf_r+0xc6>
 801abe4:	9b03      	ldr	r3, [sp, #12]
 801abe6:	1d19      	adds	r1, r3, #4
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	9103      	str	r1, [sp, #12]
 801abec:	2b00      	cmp	r3, #0
 801abee:	bfbb      	ittet	lt
 801abf0:	425b      	neglt	r3, r3
 801abf2:	f042 0202 	orrlt.w	r2, r2, #2
 801abf6:	9307      	strge	r3, [sp, #28]
 801abf8:	9307      	strlt	r3, [sp, #28]
 801abfa:	bfb8      	it	lt
 801abfc:	9204      	strlt	r2, [sp, #16]
 801abfe:	7823      	ldrb	r3, [r4, #0]
 801ac00:	2b2e      	cmp	r3, #46	; 0x2e
 801ac02:	d10c      	bne.n	801ac1e <_vfiprintf_r+0x15a>
 801ac04:	7863      	ldrb	r3, [r4, #1]
 801ac06:	2b2a      	cmp	r3, #42	; 0x2a
 801ac08:	d134      	bne.n	801ac74 <_vfiprintf_r+0x1b0>
 801ac0a:	9b03      	ldr	r3, [sp, #12]
 801ac0c:	1d1a      	adds	r2, r3, #4
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	9203      	str	r2, [sp, #12]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	bfb8      	it	lt
 801ac16:	f04f 33ff 	movlt.w	r3, #4294967295
 801ac1a:	3402      	adds	r4, #2
 801ac1c:	9305      	str	r3, [sp, #20]
 801ac1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801acf4 <_vfiprintf_r+0x230>
 801ac22:	7821      	ldrb	r1, [r4, #0]
 801ac24:	2203      	movs	r2, #3
 801ac26:	4650      	mov	r0, sl
 801ac28:	f7e5 faf2 	bl	8000210 <memchr>
 801ac2c:	b138      	cbz	r0, 801ac3e <_vfiprintf_r+0x17a>
 801ac2e:	9b04      	ldr	r3, [sp, #16]
 801ac30:	eba0 000a 	sub.w	r0, r0, sl
 801ac34:	2240      	movs	r2, #64	; 0x40
 801ac36:	4082      	lsls	r2, r0
 801ac38:	4313      	orrs	r3, r2
 801ac3a:	3401      	adds	r4, #1
 801ac3c:	9304      	str	r3, [sp, #16]
 801ac3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac42:	4829      	ldr	r0, [pc, #164]	; (801ace8 <_vfiprintf_r+0x224>)
 801ac44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ac48:	2206      	movs	r2, #6
 801ac4a:	f7e5 fae1 	bl	8000210 <memchr>
 801ac4e:	2800      	cmp	r0, #0
 801ac50:	d03f      	beq.n	801acd2 <_vfiprintf_r+0x20e>
 801ac52:	4b26      	ldr	r3, [pc, #152]	; (801acec <_vfiprintf_r+0x228>)
 801ac54:	bb1b      	cbnz	r3, 801ac9e <_vfiprintf_r+0x1da>
 801ac56:	9b03      	ldr	r3, [sp, #12]
 801ac58:	3307      	adds	r3, #7
 801ac5a:	f023 0307 	bic.w	r3, r3, #7
 801ac5e:	3308      	adds	r3, #8
 801ac60:	9303      	str	r3, [sp, #12]
 801ac62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac64:	443b      	add	r3, r7
 801ac66:	9309      	str	r3, [sp, #36]	; 0x24
 801ac68:	e768      	b.n	801ab3c <_vfiprintf_r+0x78>
 801ac6a:	fb0c 3202 	mla	r2, ip, r2, r3
 801ac6e:	460c      	mov	r4, r1
 801ac70:	2001      	movs	r0, #1
 801ac72:	e7a6      	b.n	801abc2 <_vfiprintf_r+0xfe>
 801ac74:	2300      	movs	r3, #0
 801ac76:	3401      	adds	r4, #1
 801ac78:	9305      	str	r3, [sp, #20]
 801ac7a:	4619      	mov	r1, r3
 801ac7c:	f04f 0c0a 	mov.w	ip, #10
 801ac80:	4620      	mov	r0, r4
 801ac82:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ac86:	3a30      	subs	r2, #48	; 0x30
 801ac88:	2a09      	cmp	r2, #9
 801ac8a:	d903      	bls.n	801ac94 <_vfiprintf_r+0x1d0>
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d0c6      	beq.n	801ac1e <_vfiprintf_r+0x15a>
 801ac90:	9105      	str	r1, [sp, #20]
 801ac92:	e7c4      	b.n	801ac1e <_vfiprintf_r+0x15a>
 801ac94:	fb0c 2101 	mla	r1, ip, r1, r2
 801ac98:	4604      	mov	r4, r0
 801ac9a:	2301      	movs	r3, #1
 801ac9c:	e7f0      	b.n	801ac80 <_vfiprintf_r+0x1bc>
 801ac9e:	ab03      	add	r3, sp, #12
 801aca0:	9300      	str	r3, [sp, #0]
 801aca2:	462a      	mov	r2, r5
 801aca4:	4b12      	ldr	r3, [pc, #72]	; (801acf0 <_vfiprintf_r+0x22c>)
 801aca6:	a904      	add	r1, sp, #16
 801aca8:	4630      	mov	r0, r6
 801acaa:	f3af 8000 	nop.w
 801acae:	4607      	mov	r7, r0
 801acb0:	1c78      	adds	r0, r7, #1
 801acb2:	d1d6      	bne.n	801ac62 <_vfiprintf_r+0x19e>
 801acb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801acb6:	07d9      	lsls	r1, r3, #31
 801acb8:	d405      	bmi.n	801acc6 <_vfiprintf_r+0x202>
 801acba:	89ab      	ldrh	r3, [r5, #12]
 801acbc:	059a      	lsls	r2, r3, #22
 801acbe:	d402      	bmi.n	801acc6 <_vfiprintf_r+0x202>
 801acc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801acc2:	f7ff fce7 	bl	801a694 <__retarget_lock_release_recursive>
 801acc6:	89ab      	ldrh	r3, [r5, #12]
 801acc8:	065b      	lsls	r3, r3, #25
 801acca:	f53f af1d 	bmi.w	801ab08 <_vfiprintf_r+0x44>
 801acce:	9809      	ldr	r0, [sp, #36]	; 0x24
 801acd0:	e71c      	b.n	801ab0c <_vfiprintf_r+0x48>
 801acd2:	ab03      	add	r3, sp, #12
 801acd4:	9300      	str	r3, [sp, #0]
 801acd6:	462a      	mov	r2, r5
 801acd8:	4b05      	ldr	r3, [pc, #20]	; (801acf0 <_vfiprintf_r+0x22c>)
 801acda:	a904      	add	r1, sp, #16
 801acdc:	4630      	mov	r0, r6
 801acde:	f000 f879 	bl	801add4 <_printf_i>
 801ace2:	e7e4      	b.n	801acae <_vfiprintf_r+0x1ea>
 801ace4:	0801c274 	.word	0x0801c274
 801ace8:	0801c27e 	.word	0x0801c27e
 801acec:	00000000 	.word	0x00000000
 801acf0:	0801aa9f 	.word	0x0801aa9f
 801acf4:	0801c27a 	.word	0x0801c27a

0801acf8 <_printf_common>:
 801acf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acfc:	4616      	mov	r6, r2
 801acfe:	4699      	mov	r9, r3
 801ad00:	688a      	ldr	r2, [r1, #8]
 801ad02:	690b      	ldr	r3, [r1, #16]
 801ad04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ad08:	4293      	cmp	r3, r2
 801ad0a:	bfb8      	it	lt
 801ad0c:	4613      	movlt	r3, r2
 801ad0e:	6033      	str	r3, [r6, #0]
 801ad10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ad14:	4607      	mov	r7, r0
 801ad16:	460c      	mov	r4, r1
 801ad18:	b10a      	cbz	r2, 801ad1e <_printf_common+0x26>
 801ad1a:	3301      	adds	r3, #1
 801ad1c:	6033      	str	r3, [r6, #0]
 801ad1e:	6823      	ldr	r3, [r4, #0]
 801ad20:	0699      	lsls	r1, r3, #26
 801ad22:	bf42      	ittt	mi
 801ad24:	6833      	ldrmi	r3, [r6, #0]
 801ad26:	3302      	addmi	r3, #2
 801ad28:	6033      	strmi	r3, [r6, #0]
 801ad2a:	6825      	ldr	r5, [r4, #0]
 801ad2c:	f015 0506 	ands.w	r5, r5, #6
 801ad30:	d106      	bne.n	801ad40 <_printf_common+0x48>
 801ad32:	f104 0a19 	add.w	sl, r4, #25
 801ad36:	68e3      	ldr	r3, [r4, #12]
 801ad38:	6832      	ldr	r2, [r6, #0]
 801ad3a:	1a9b      	subs	r3, r3, r2
 801ad3c:	42ab      	cmp	r3, r5
 801ad3e:	dc26      	bgt.n	801ad8e <_printf_common+0x96>
 801ad40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ad44:	1e13      	subs	r3, r2, #0
 801ad46:	6822      	ldr	r2, [r4, #0]
 801ad48:	bf18      	it	ne
 801ad4a:	2301      	movne	r3, #1
 801ad4c:	0692      	lsls	r2, r2, #26
 801ad4e:	d42b      	bmi.n	801ada8 <_printf_common+0xb0>
 801ad50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ad54:	4649      	mov	r1, r9
 801ad56:	4638      	mov	r0, r7
 801ad58:	47c0      	blx	r8
 801ad5a:	3001      	adds	r0, #1
 801ad5c:	d01e      	beq.n	801ad9c <_printf_common+0xa4>
 801ad5e:	6823      	ldr	r3, [r4, #0]
 801ad60:	6922      	ldr	r2, [r4, #16]
 801ad62:	f003 0306 	and.w	r3, r3, #6
 801ad66:	2b04      	cmp	r3, #4
 801ad68:	bf02      	ittt	eq
 801ad6a:	68e5      	ldreq	r5, [r4, #12]
 801ad6c:	6833      	ldreq	r3, [r6, #0]
 801ad6e:	1aed      	subeq	r5, r5, r3
 801ad70:	68a3      	ldr	r3, [r4, #8]
 801ad72:	bf0c      	ite	eq
 801ad74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ad78:	2500      	movne	r5, #0
 801ad7a:	4293      	cmp	r3, r2
 801ad7c:	bfc4      	itt	gt
 801ad7e:	1a9b      	subgt	r3, r3, r2
 801ad80:	18ed      	addgt	r5, r5, r3
 801ad82:	2600      	movs	r6, #0
 801ad84:	341a      	adds	r4, #26
 801ad86:	42b5      	cmp	r5, r6
 801ad88:	d11a      	bne.n	801adc0 <_printf_common+0xc8>
 801ad8a:	2000      	movs	r0, #0
 801ad8c:	e008      	b.n	801ada0 <_printf_common+0xa8>
 801ad8e:	2301      	movs	r3, #1
 801ad90:	4652      	mov	r2, sl
 801ad92:	4649      	mov	r1, r9
 801ad94:	4638      	mov	r0, r7
 801ad96:	47c0      	blx	r8
 801ad98:	3001      	adds	r0, #1
 801ad9a:	d103      	bne.n	801ada4 <_printf_common+0xac>
 801ad9c:	f04f 30ff 	mov.w	r0, #4294967295
 801ada0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ada4:	3501      	adds	r5, #1
 801ada6:	e7c6      	b.n	801ad36 <_printf_common+0x3e>
 801ada8:	18e1      	adds	r1, r4, r3
 801adaa:	1c5a      	adds	r2, r3, #1
 801adac:	2030      	movs	r0, #48	; 0x30
 801adae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801adb2:	4422      	add	r2, r4
 801adb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801adb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801adbc:	3302      	adds	r3, #2
 801adbe:	e7c7      	b.n	801ad50 <_printf_common+0x58>
 801adc0:	2301      	movs	r3, #1
 801adc2:	4622      	mov	r2, r4
 801adc4:	4649      	mov	r1, r9
 801adc6:	4638      	mov	r0, r7
 801adc8:	47c0      	blx	r8
 801adca:	3001      	adds	r0, #1
 801adcc:	d0e6      	beq.n	801ad9c <_printf_common+0xa4>
 801adce:	3601      	adds	r6, #1
 801add0:	e7d9      	b.n	801ad86 <_printf_common+0x8e>
	...

0801add4 <_printf_i>:
 801add4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801add8:	7e0f      	ldrb	r7, [r1, #24]
 801adda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801addc:	2f78      	cmp	r7, #120	; 0x78
 801adde:	4691      	mov	r9, r2
 801ade0:	4680      	mov	r8, r0
 801ade2:	460c      	mov	r4, r1
 801ade4:	469a      	mov	sl, r3
 801ade6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801adea:	d807      	bhi.n	801adfc <_printf_i+0x28>
 801adec:	2f62      	cmp	r7, #98	; 0x62
 801adee:	d80a      	bhi.n	801ae06 <_printf_i+0x32>
 801adf0:	2f00      	cmp	r7, #0
 801adf2:	f000 80d4 	beq.w	801af9e <_printf_i+0x1ca>
 801adf6:	2f58      	cmp	r7, #88	; 0x58
 801adf8:	f000 80c0 	beq.w	801af7c <_printf_i+0x1a8>
 801adfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ae00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ae04:	e03a      	b.n	801ae7c <_printf_i+0xa8>
 801ae06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ae0a:	2b15      	cmp	r3, #21
 801ae0c:	d8f6      	bhi.n	801adfc <_printf_i+0x28>
 801ae0e:	a101      	add	r1, pc, #4	; (adr r1, 801ae14 <_printf_i+0x40>)
 801ae10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ae14:	0801ae6d 	.word	0x0801ae6d
 801ae18:	0801ae81 	.word	0x0801ae81
 801ae1c:	0801adfd 	.word	0x0801adfd
 801ae20:	0801adfd 	.word	0x0801adfd
 801ae24:	0801adfd 	.word	0x0801adfd
 801ae28:	0801adfd 	.word	0x0801adfd
 801ae2c:	0801ae81 	.word	0x0801ae81
 801ae30:	0801adfd 	.word	0x0801adfd
 801ae34:	0801adfd 	.word	0x0801adfd
 801ae38:	0801adfd 	.word	0x0801adfd
 801ae3c:	0801adfd 	.word	0x0801adfd
 801ae40:	0801af85 	.word	0x0801af85
 801ae44:	0801aead 	.word	0x0801aead
 801ae48:	0801af3f 	.word	0x0801af3f
 801ae4c:	0801adfd 	.word	0x0801adfd
 801ae50:	0801adfd 	.word	0x0801adfd
 801ae54:	0801afa7 	.word	0x0801afa7
 801ae58:	0801adfd 	.word	0x0801adfd
 801ae5c:	0801aead 	.word	0x0801aead
 801ae60:	0801adfd 	.word	0x0801adfd
 801ae64:	0801adfd 	.word	0x0801adfd
 801ae68:	0801af47 	.word	0x0801af47
 801ae6c:	682b      	ldr	r3, [r5, #0]
 801ae6e:	1d1a      	adds	r2, r3, #4
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	602a      	str	r2, [r5, #0]
 801ae74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ae78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ae7c:	2301      	movs	r3, #1
 801ae7e:	e09f      	b.n	801afc0 <_printf_i+0x1ec>
 801ae80:	6820      	ldr	r0, [r4, #0]
 801ae82:	682b      	ldr	r3, [r5, #0]
 801ae84:	0607      	lsls	r7, r0, #24
 801ae86:	f103 0104 	add.w	r1, r3, #4
 801ae8a:	6029      	str	r1, [r5, #0]
 801ae8c:	d501      	bpl.n	801ae92 <_printf_i+0xbe>
 801ae8e:	681e      	ldr	r6, [r3, #0]
 801ae90:	e003      	b.n	801ae9a <_printf_i+0xc6>
 801ae92:	0646      	lsls	r6, r0, #25
 801ae94:	d5fb      	bpl.n	801ae8e <_printf_i+0xba>
 801ae96:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ae9a:	2e00      	cmp	r6, #0
 801ae9c:	da03      	bge.n	801aea6 <_printf_i+0xd2>
 801ae9e:	232d      	movs	r3, #45	; 0x2d
 801aea0:	4276      	negs	r6, r6
 801aea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aea6:	485a      	ldr	r0, [pc, #360]	; (801b010 <_printf_i+0x23c>)
 801aea8:	230a      	movs	r3, #10
 801aeaa:	e012      	b.n	801aed2 <_printf_i+0xfe>
 801aeac:	682b      	ldr	r3, [r5, #0]
 801aeae:	6820      	ldr	r0, [r4, #0]
 801aeb0:	1d19      	adds	r1, r3, #4
 801aeb2:	6029      	str	r1, [r5, #0]
 801aeb4:	0605      	lsls	r5, r0, #24
 801aeb6:	d501      	bpl.n	801aebc <_printf_i+0xe8>
 801aeb8:	681e      	ldr	r6, [r3, #0]
 801aeba:	e002      	b.n	801aec2 <_printf_i+0xee>
 801aebc:	0641      	lsls	r1, r0, #25
 801aebe:	d5fb      	bpl.n	801aeb8 <_printf_i+0xe4>
 801aec0:	881e      	ldrh	r6, [r3, #0]
 801aec2:	4853      	ldr	r0, [pc, #332]	; (801b010 <_printf_i+0x23c>)
 801aec4:	2f6f      	cmp	r7, #111	; 0x6f
 801aec6:	bf0c      	ite	eq
 801aec8:	2308      	moveq	r3, #8
 801aeca:	230a      	movne	r3, #10
 801aecc:	2100      	movs	r1, #0
 801aece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801aed2:	6865      	ldr	r5, [r4, #4]
 801aed4:	60a5      	str	r5, [r4, #8]
 801aed6:	2d00      	cmp	r5, #0
 801aed8:	bfa2      	ittt	ge
 801aeda:	6821      	ldrge	r1, [r4, #0]
 801aedc:	f021 0104 	bicge.w	r1, r1, #4
 801aee0:	6021      	strge	r1, [r4, #0]
 801aee2:	b90e      	cbnz	r6, 801aee8 <_printf_i+0x114>
 801aee4:	2d00      	cmp	r5, #0
 801aee6:	d04b      	beq.n	801af80 <_printf_i+0x1ac>
 801aee8:	4615      	mov	r5, r2
 801aeea:	fbb6 f1f3 	udiv	r1, r6, r3
 801aeee:	fb03 6711 	mls	r7, r3, r1, r6
 801aef2:	5dc7      	ldrb	r7, [r0, r7]
 801aef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801aef8:	4637      	mov	r7, r6
 801aefa:	42bb      	cmp	r3, r7
 801aefc:	460e      	mov	r6, r1
 801aefe:	d9f4      	bls.n	801aeea <_printf_i+0x116>
 801af00:	2b08      	cmp	r3, #8
 801af02:	d10b      	bne.n	801af1c <_printf_i+0x148>
 801af04:	6823      	ldr	r3, [r4, #0]
 801af06:	07de      	lsls	r6, r3, #31
 801af08:	d508      	bpl.n	801af1c <_printf_i+0x148>
 801af0a:	6923      	ldr	r3, [r4, #16]
 801af0c:	6861      	ldr	r1, [r4, #4]
 801af0e:	4299      	cmp	r1, r3
 801af10:	bfde      	ittt	le
 801af12:	2330      	movle	r3, #48	; 0x30
 801af14:	f805 3c01 	strble.w	r3, [r5, #-1]
 801af18:	f105 35ff 	addle.w	r5, r5, #4294967295
 801af1c:	1b52      	subs	r2, r2, r5
 801af1e:	6122      	str	r2, [r4, #16]
 801af20:	f8cd a000 	str.w	sl, [sp]
 801af24:	464b      	mov	r3, r9
 801af26:	aa03      	add	r2, sp, #12
 801af28:	4621      	mov	r1, r4
 801af2a:	4640      	mov	r0, r8
 801af2c:	f7ff fee4 	bl	801acf8 <_printf_common>
 801af30:	3001      	adds	r0, #1
 801af32:	d14a      	bne.n	801afca <_printf_i+0x1f6>
 801af34:	f04f 30ff 	mov.w	r0, #4294967295
 801af38:	b004      	add	sp, #16
 801af3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af3e:	6823      	ldr	r3, [r4, #0]
 801af40:	f043 0320 	orr.w	r3, r3, #32
 801af44:	6023      	str	r3, [r4, #0]
 801af46:	4833      	ldr	r0, [pc, #204]	; (801b014 <_printf_i+0x240>)
 801af48:	2778      	movs	r7, #120	; 0x78
 801af4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801af4e:	6823      	ldr	r3, [r4, #0]
 801af50:	6829      	ldr	r1, [r5, #0]
 801af52:	061f      	lsls	r7, r3, #24
 801af54:	f851 6b04 	ldr.w	r6, [r1], #4
 801af58:	d402      	bmi.n	801af60 <_printf_i+0x18c>
 801af5a:	065f      	lsls	r7, r3, #25
 801af5c:	bf48      	it	mi
 801af5e:	b2b6      	uxthmi	r6, r6
 801af60:	07df      	lsls	r7, r3, #31
 801af62:	bf48      	it	mi
 801af64:	f043 0320 	orrmi.w	r3, r3, #32
 801af68:	6029      	str	r1, [r5, #0]
 801af6a:	bf48      	it	mi
 801af6c:	6023      	strmi	r3, [r4, #0]
 801af6e:	b91e      	cbnz	r6, 801af78 <_printf_i+0x1a4>
 801af70:	6823      	ldr	r3, [r4, #0]
 801af72:	f023 0320 	bic.w	r3, r3, #32
 801af76:	6023      	str	r3, [r4, #0]
 801af78:	2310      	movs	r3, #16
 801af7a:	e7a7      	b.n	801aecc <_printf_i+0xf8>
 801af7c:	4824      	ldr	r0, [pc, #144]	; (801b010 <_printf_i+0x23c>)
 801af7e:	e7e4      	b.n	801af4a <_printf_i+0x176>
 801af80:	4615      	mov	r5, r2
 801af82:	e7bd      	b.n	801af00 <_printf_i+0x12c>
 801af84:	682b      	ldr	r3, [r5, #0]
 801af86:	6826      	ldr	r6, [r4, #0]
 801af88:	6961      	ldr	r1, [r4, #20]
 801af8a:	1d18      	adds	r0, r3, #4
 801af8c:	6028      	str	r0, [r5, #0]
 801af8e:	0635      	lsls	r5, r6, #24
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	d501      	bpl.n	801af98 <_printf_i+0x1c4>
 801af94:	6019      	str	r1, [r3, #0]
 801af96:	e002      	b.n	801af9e <_printf_i+0x1ca>
 801af98:	0670      	lsls	r0, r6, #25
 801af9a:	d5fb      	bpl.n	801af94 <_printf_i+0x1c0>
 801af9c:	8019      	strh	r1, [r3, #0]
 801af9e:	2300      	movs	r3, #0
 801afa0:	6123      	str	r3, [r4, #16]
 801afa2:	4615      	mov	r5, r2
 801afa4:	e7bc      	b.n	801af20 <_printf_i+0x14c>
 801afa6:	682b      	ldr	r3, [r5, #0]
 801afa8:	1d1a      	adds	r2, r3, #4
 801afaa:	602a      	str	r2, [r5, #0]
 801afac:	681d      	ldr	r5, [r3, #0]
 801afae:	6862      	ldr	r2, [r4, #4]
 801afb0:	2100      	movs	r1, #0
 801afb2:	4628      	mov	r0, r5
 801afb4:	f7e5 f92c 	bl	8000210 <memchr>
 801afb8:	b108      	cbz	r0, 801afbe <_printf_i+0x1ea>
 801afba:	1b40      	subs	r0, r0, r5
 801afbc:	6060      	str	r0, [r4, #4]
 801afbe:	6863      	ldr	r3, [r4, #4]
 801afc0:	6123      	str	r3, [r4, #16]
 801afc2:	2300      	movs	r3, #0
 801afc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801afc8:	e7aa      	b.n	801af20 <_printf_i+0x14c>
 801afca:	6923      	ldr	r3, [r4, #16]
 801afcc:	462a      	mov	r2, r5
 801afce:	4649      	mov	r1, r9
 801afd0:	4640      	mov	r0, r8
 801afd2:	47d0      	blx	sl
 801afd4:	3001      	adds	r0, #1
 801afd6:	d0ad      	beq.n	801af34 <_printf_i+0x160>
 801afd8:	6823      	ldr	r3, [r4, #0]
 801afda:	079b      	lsls	r3, r3, #30
 801afdc:	d413      	bmi.n	801b006 <_printf_i+0x232>
 801afde:	68e0      	ldr	r0, [r4, #12]
 801afe0:	9b03      	ldr	r3, [sp, #12]
 801afe2:	4298      	cmp	r0, r3
 801afe4:	bfb8      	it	lt
 801afe6:	4618      	movlt	r0, r3
 801afe8:	e7a6      	b.n	801af38 <_printf_i+0x164>
 801afea:	2301      	movs	r3, #1
 801afec:	4632      	mov	r2, r6
 801afee:	4649      	mov	r1, r9
 801aff0:	4640      	mov	r0, r8
 801aff2:	47d0      	blx	sl
 801aff4:	3001      	adds	r0, #1
 801aff6:	d09d      	beq.n	801af34 <_printf_i+0x160>
 801aff8:	3501      	adds	r5, #1
 801affa:	68e3      	ldr	r3, [r4, #12]
 801affc:	9903      	ldr	r1, [sp, #12]
 801affe:	1a5b      	subs	r3, r3, r1
 801b000:	42ab      	cmp	r3, r5
 801b002:	dcf2      	bgt.n	801afea <_printf_i+0x216>
 801b004:	e7eb      	b.n	801afde <_printf_i+0x20a>
 801b006:	2500      	movs	r5, #0
 801b008:	f104 0619 	add.w	r6, r4, #25
 801b00c:	e7f5      	b.n	801affa <_printf_i+0x226>
 801b00e:	bf00      	nop
 801b010:	0801c285 	.word	0x0801c285
 801b014:	0801c296 	.word	0x0801c296

0801b018 <__sflush_r>:
 801b018:	898a      	ldrh	r2, [r1, #12]
 801b01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b01e:	4605      	mov	r5, r0
 801b020:	0710      	lsls	r0, r2, #28
 801b022:	460c      	mov	r4, r1
 801b024:	d458      	bmi.n	801b0d8 <__sflush_r+0xc0>
 801b026:	684b      	ldr	r3, [r1, #4]
 801b028:	2b00      	cmp	r3, #0
 801b02a:	dc05      	bgt.n	801b038 <__sflush_r+0x20>
 801b02c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b02e:	2b00      	cmp	r3, #0
 801b030:	dc02      	bgt.n	801b038 <__sflush_r+0x20>
 801b032:	2000      	movs	r0, #0
 801b034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b03a:	2e00      	cmp	r6, #0
 801b03c:	d0f9      	beq.n	801b032 <__sflush_r+0x1a>
 801b03e:	2300      	movs	r3, #0
 801b040:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b044:	682f      	ldr	r7, [r5, #0]
 801b046:	6a21      	ldr	r1, [r4, #32]
 801b048:	602b      	str	r3, [r5, #0]
 801b04a:	d032      	beq.n	801b0b2 <__sflush_r+0x9a>
 801b04c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b04e:	89a3      	ldrh	r3, [r4, #12]
 801b050:	075a      	lsls	r2, r3, #29
 801b052:	d505      	bpl.n	801b060 <__sflush_r+0x48>
 801b054:	6863      	ldr	r3, [r4, #4]
 801b056:	1ac0      	subs	r0, r0, r3
 801b058:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b05a:	b10b      	cbz	r3, 801b060 <__sflush_r+0x48>
 801b05c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b05e:	1ac0      	subs	r0, r0, r3
 801b060:	2300      	movs	r3, #0
 801b062:	4602      	mov	r2, r0
 801b064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b066:	6a21      	ldr	r1, [r4, #32]
 801b068:	4628      	mov	r0, r5
 801b06a:	47b0      	blx	r6
 801b06c:	1c43      	adds	r3, r0, #1
 801b06e:	89a3      	ldrh	r3, [r4, #12]
 801b070:	d106      	bne.n	801b080 <__sflush_r+0x68>
 801b072:	6829      	ldr	r1, [r5, #0]
 801b074:	291d      	cmp	r1, #29
 801b076:	d82b      	bhi.n	801b0d0 <__sflush_r+0xb8>
 801b078:	4a29      	ldr	r2, [pc, #164]	; (801b120 <__sflush_r+0x108>)
 801b07a:	410a      	asrs	r2, r1
 801b07c:	07d6      	lsls	r6, r2, #31
 801b07e:	d427      	bmi.n	801b0d0 <__sflush_r+0xb8>
 801b080:	2200      	movs	r2, #0
 801b082:	6062      	str	r2, [r4, #4]
 801b084:	04d9      	lsls	r1, r3, #19
 801b086:	6922      	ldr	r2, [r4, #16]
 801b088:	6022      	str	r2, [r4, #0]
 801b08a:	d504      	bpl.n	801b096 <__sflush_r+0x7e>
 801b08c:	1c42      	adds	r2, r0, #1
 801b08e:	d101      	bne.n	801b094 <__sflush_r+0x7c>
 801b090:	682b      	ldr	r3, [r5, #0]
 801b092:	b903      	cbnz	r3, 801b096 <__sflush_r+0x7e>
 801b094:	6560      	str	r0, [r4, #84]	; 0x54
 801b096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b098:	602f      	str	r7, [r5, #0]
 801b09a:	2900      	cmp	r1, #0
 801b09c:	d0c9      	beq.n	801b032 <__sflush_r+0x1a>
 801b09e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b0a2:	4299      	cmp	r1, r3
 801b0a4:	d002      	beq.n	801b0ac <__sflush_r+0x94>
 801b0a6:	4628      	mov	r0, r5
 801b0a8:	f7ff fb36 	bl	801a718 <_free_r>
 801b0ac:	2000      	movs	r0, #0
 801b0ae:	6360      	str	r0, [r4, #52]	; 0x34
 801b0b0:	e7c0      	b.n	801b034 <__sflush_r+0x1c>
 801b0b2:	2301      	movs	r3, #1
 801b0b4:	4628      	mov	r0, r5
 801b0b6:	47b0      	blx	r6
 801b0b8:	1c41      	adds	r1, r0, #1
 801b0ba:	d1c8      	bne.n	801b04e <__sflush_r+0x36>
 801b0bc:	682b      	ldr	r3, [r5, #0]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d0c5      	beq.n	801b04e <__sflush_r+0x36>
 801b0c2:	2b1d      	cmp	r3, #29
 801b0c4:	d001      	beq.n	801b0ca <__sflush_r+0xb2>
 801b0c6:	2b16      	cmp	r3, #22
 801b0c8:	d101      	bne.n	801b0ce <__sflush_r+0xb6>
 801b0ca:	602f      	str	r7, [r5, #0]
 801b0cc:	e7b1      	b.n	801b032 <__sflush_r+0x1a>
 801b0ce:	89a3      	ldrh	r3, [r4, #12]
 801b0d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b0d4:	81a3      	strh	r3, [r4, #12]
 801b0d6:	e7ad      	b.n	801b034 <__sflush_r+0x1c>
 801b0d8:	690f      	ldr	r7, [r1, #16]
 801b0da:	2f00      	cmp	r7, #0
 801b0dc:	d0a9      	beq.n	801b032 <__sflush_r+0x1a>
 801b0de:	0793      	lsls	r3, r2, #30
 801b0e0:	680e      	ldr	r6, [r1, #0]
 801b0e2:	bf08      	it	eq
 801b0e4:	694b      	ldreq	r3, [r1, #20]
 801b0e6:	600f      	str	r7, [r1, #0]
 801b0e8:	bf18      	it	ne
 801b0ea:	2300      	movne	r3, #0
 801b0ec:	eba6 0807 	sub.w	r8, r6, r7
 801b0f0:	608b      	str	r3, [r1, #8]
 801b0f2:	f1b8 0f00 	cmp.w	r8, #0
 801b0f6:	dd9c      	ble.n	801b032 <__sflush_r+0x1a>
 801b0f8:	6a21      	ldr	r1, [r4, #32]
 801b0fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b0fc:	4643      	mov	r3, r8
 801b0fe:	463a      	mov	r2, r7
 801b100:	4628      	mov	r0, r5
 801b102:	47b0      	blx	r6
 801b104:	2800      	cmp	r0, #0
 801b106:	dc06      	bgt.n	801b116 <__sflush_r+0xfe>
 801b108:	89a3      	ldrh	r3, [r4, #12]
 801b10a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b10e:	81a3      	strh	r3, [r4, #12]
 801b110:	f04f 30ff 	mov.w	r0, #4294967295
 801b114:	e78e      	b.n	801b034 <__sflush_r+0x1c>
 801b116:	4407      	add	r7, r0
 801b118:	eba8 0800 	sub.w	r8, r8, r0
 801b11c:	e7e9      	b.n	801b0f2 <__sflush_r+0xda>
 801b11e:	bf00      	nop
 801b120:	dfbffffe 	.word	0xdfbffffe

0801b124 <_fflush_r>:
 801b124:	b538      	push	{r3, r4, r5, lr}
 801b126:	690b      	ldr	r3, [r1, #16]
 801b128:	4605      	mov	r5, r0
 801b12a:	460c      	mov	r4, r1
 801b12c:	b913      	cbnz	r3, 801b134 <_fflush_r+0x10>
 801b12e:	2500      	movs	r5, #0
 801b130:	4628      	mov	r0, r5
 801b132:	bd38      	pop	{r3, r4, r5, pc}
 801b134:	b118      	cbz	r0, 801b13e <_fflush_r+0x1a>
 801b136:	6a03      	ldr	r3, [r0, #32]
 801b138:	b90b      	cbnz	r3, 801b13e <_fflush_r+0x1a>
 801b13a:	f7fe ff3f 	bl	8019fbc <__sinit>
 801b13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b142:	2b00      	cmp	r3, #0
 801b144:	d0f3      	beq.n	801b12e <_fflush_r+0xa>
 801b146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b148:	07d0      	lsls	r0, r2, #31
 801b14a:	d404      	bmi.n	801b156 <_fflush_r+0x32>
 801b14c:	0599      	lsls	r1, r3, #22
 801b14e:	d402      	bmi.n	801b156 <_fflush_r+0x32>
 801b150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b152:	f7ff fa9e 	bl	801a692 <__retarget_lock_acquire_recursive>
 801b156:	4628      	mov	r0, r5
 801b158:	4621      	mov	r1, r4
 801b15a:	f7ff ff5d 	bl	801b018 <__sflush_r>
 801b15e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b160:	07da      	lsls	r2, r3, #31
 801b162:	4605      	mov	r5, r0
 801b164:	d4e4      	bmi.n	801b130 <_fflush_r+0xc>
 801b166:	89a3      	ldrh	r3, [r4, #12]
 801b168:	059b      	lsls	r3, r3, #22
 801b16a:	d4e1      	bmi.n	801b130 <_fflush_r+0xc>
 801b16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b16e:	f7ff fa91 	bl	801a694 <__retarget_lock_release_recursive>
 801b172:	e7dd      	b.n	801b130 <_fflush_r+0xc>

0801b174 <fiprintf>:
 801b174:	b40e      	push	{r1, r2, r3}
 801b176:	b503      	push	{r0, r1, lr}
 801b178:	4601      	mov	r1, r0
 801b17a:	ab03      	add	r3, sp, #12
 801b17c:	4805      	ldr	r0, [pc, #20]	; (801b194 <fiprintf+0x20>)
 801b17e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b182:	6800      	ldr	r0, [r0, #0]
 801b184:	9301      	str	r3, [sp, #4]
 801b186:	f7ff fc9d 	bl	801aac4 <_vfiprintf_r>
 801b18a:	b002      	add	sp, #8
 801b18c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b190:	b003      	add	sp, #12
 801b192:	4770      	bx	lr
 801b194:	200000e8 	.word	0x200000e8

0801b198 <__swhatbuf_r>:
 801b198:	b570      	push	{r4, r5, r6, lr}
 801b19a:	460c      	mov	r4, r1
 801b19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1a0:	2900      	cmp	r1, #0
 801b1a2:	b096      	sub	sp, #88	; 0x58
 801b1a4:	4615      	mov	r5, r2
 801b1a6:	461e      	mov	r6, r3
 801b1a8:	da0d      	bge.n	801b1c6 <__swhatbuf_r+0x2e>
 801b1aa:	89a3      	ldrh	r3, [r4, #12]
 801b1ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b1b0:	f04f 0100 	mov.w	r1, #0
 801b1b4:	bf0c      	ite	eq
 801b1b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b1ba:	2340      	movne	r3, #64	; 0x40
 801b1bc:	2000      	movs	r0, #0
 801b1be:	6031      	str	r1, [r6, #0]
 801b1c0:	602b      	str	r3, [r5, #0]
 801b1c2:	b016      	add	sp, #88	; 0x58
 801b1c4:	bd70      	pop	{r4, r5, r6, pc}
 801b1c6:	466a      	mov	r2, sp
 801b1c8:	f000 f848 	bl	801b25c <_fstat_r>
 801b1cc:	2800      	cmp	r0, #0
 801b1ce:	dbec      	blt.n	801b1aa <__swhatbuf_r+0x12>
 801b1d0:	9901      	ldr	r1, [sp, #4]
 801b1d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b1d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b1da:	4259      	negs	r1, r3
 801b1dc:	4159      	adcs	r1, r3
 801b1de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b1e2:	e7eb      	b.n	801b1bc <__swhatbuf_r+0x24>

0801b1e4 <__smakebuf_r>:
 801b1e4:	898b      	ldrh	r3, [r1, #12]
 801b1e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b1e8:	079d      	lsls	r5, r3, #30
 801b1ea:	4606      	mov	r6, r0
 801b1ec:	460c      	mov	r4, r1
 801b1ee:	d507      	bpl.n	801b200 <__smakebuf_r+0x1c>
 801b1f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b1f4:	6023      	str	r3, [r4, #0]
 801b1f6:	6123      	str	r3, [r4, #16]
 801b1f8:	2301      	movs	r3, #1
 801b1fa:	6163      	str	r3, [r4, #20]
 801b1fc:	b002      	add	sp, #8
 801b1fe:	bd70      	pop	{r4, r5, r6, pc}
 801b200:	ab01      	add	r3, sp, #4
 801b202:	466a      	mov	r2, sp
 801b204:	f7ff ffc8 	bl	801b198 <__swhatbuf_r>
 801b208:	9900      	ldr	r1, [sp, #0]
 801b20a:	4605      	mov	r5, r0
 801b20c:	4630      	mov	r0, r6
 801b20e:	f7fe fc9d 	bl	8019b4c <_malloc_r>
 801b212:	b948      	cbnz	r0, 801b228 <__smakebuf_r+0x44>
 801b214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b218:	059a      	lsls	r2, r3, #22
 801b21a:	d4ef      	bmi.n	801b1fc <__smakebuf_r+0x18>
 801b21c:	f023 0303 	bic.w	r3, r3, #3
 801b220:	f043 0302 	orr.w	r3, r3, #2
 801b224:	81a3      	strh	r3, [r4, #12]
 801b226:	e7e3      	b.n	801b1f0 <__smakebuf_r+0xc>
 801b228:	89a3      	ldrh	r3, [r4, #12]
 801b22a:	6020      	str	r0, [r4, #0]
 801b22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b230:	81a3      	strh	r3, [r4, #12]
 801b232:	9b00      	ldr	r3, [sp, #0]
 801b234:	6163      	str	r3, [r4, #20]
 801b236:	9b01      	ldr	r3, [sp, #4]
 801b238:	6120      	str	r0, [r4, #16]
 801b23a:	b15b      	cbz	r3, 801b254 <__smakebuf_r+0x70>
 801b23c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b240:	4630      	mov	r0, r6
 801b242:	f000 f81d 	bl	801b280 <_isatty_r>
 801b246:	b128      	cbz	r0, 801b254 <__smakebuf_r+0x70>
 801b248:	89a3      	ldrh	r3, [r4, #12]
 801b24a:	f023 0303 	bic.w	r3, r3, #3
 801b24e:	f043 0301 	orr.w	r3, r3, #1
 801b252:	81a3      	strh	r3, [r4, #12]
 801b254:	89a3      	ldrh	r3, [r4, #12]
 801b256:	431d      	orrs	r5, r3
 801b258:	81a5      	strh	r5, [r4, #12]
 801b25a:	e7cf      	b.n	801b1fc <__smakebuf_r+0x18>

0801b25c <_fstat_r>:
 801b25c:	b538      	push	{r3, r4, r5, lr}
 801b25e:	4d07      	ldr	r5, [pc, #28]	; (801b27c <_fstat_r+0x20>)
 801b260:	2300      	movs	r3, #0
 801b262:	4604      	mov	r4, r0
 801b264:	4608      	mov	r0, r1
 801b266:	4611      	mov	r1, r2
 801b268:	602b      	str	r3, [r5, #0]
 801b26a:	f7e8 fdfd 	bl	8003e68 <_fstat>
 801b26e:	1c43      	adds	r3, r0, #1
 801b270:	d102      	bne.n	801b278 <_fstat_r+0x1c>
 801b272:	682b      	ldr	r3, [r5, #0]
 801b274:	b103      	cbz	r3, 801b278 <_fstat_r+0x1c>
 801b276:	6023      	str	r3, [r4, #0]
 801b278:	bd38      	pop	{r3, r4, r5, pc}
 801b27a:	bf00      	nop
 801b27c:	20009ea4 	.word	0x20009ea4

0801b280 <_isatty_r>:
 801b280:	b538      	push	{r3, r4, r5, lr}
 801b282:	4d06      	ldr	r5, [pc, #24]	; (801b29c <_isatty_r+0x1c>)
 801b284:	2300      	movs	r3, #0
 801b286:	4604      	mov	r4, r0
 801b288:	4608      	mov	r0, r1
 801b28a:	602b      	str	r3, [r5, #0]
 801b28c:	f7e8 fd5a 	bl	8003d44 <_isatty>
 801b290:	1c43      	adds	r3, r0, #1
 801b292:	d102      	bne.n	801b29a <_isatty_r+0x1a>
 801b294:	682b      	ldr	r3, [r5, #0]
 801b296:	b103      	cbz	r3, 801b29a <_isatty_r+0x1a>
 801b298:	6023      	str	r3, [r4, #0]
 801b29a:	bd38      	pop	{r3, r4, r5, pc}
 801b29c:	20009ea4 	.word	0x20009ea4

0801b2a0 <abort>:
 801b2a0:	b508      	push	{r3, lr}
 801b2a2:	2006      	movs	r0, #6
 801b2a4:	f000 f82c 	bl	801b300 <raise>
 801b2a8:	2001      	movs	r0, #1
 801b2aa:	f000 f845 	bl	801b338 <_exit>

0801b2ae <_raise_r>:
 801b2ae:	291f      	cmp	r1, #31
 801b2b0:	b538      	push	{r3, r4, r5, lr}
 801b2b2:	4604      	mov	r4, r0
 801b2b4:	460d      	mov	r5, r1
 801b2b6:	d904      	bls.n	801b2c2 <_raise_r+0x14>
 801b2b8:	2316      	movs	r3, #22
 801b2ba:	6003      	str	r3, [r0, #0]
 801b2bc:	f04f 30ff 	mov.w	r0, #4294967295
 801b2c0:	bd38      	pop	{r3, r4, r5, pc}
 801b2c2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b2c4:	b112      	cbz	r2, 801b2cc <_raise_r+0x1e>
 801b2c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b2ca:	b94b      	cbnz	r3, 801b2e0 <_raise_r+0x32>
 801b2cc:	4620      	mov	r0, r4
 801b2ce:	f000 f831 	bl	801b334 <_getpid_r>
 801b2d2:	462a      	mov	r2, r5
 801b2d4:	4601      	mov	r1, r0
 801b2d6:	4620      	mov	r0, r4
 801b2d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b2dc:	f000 b818 	b.w	801b310 <_kill_r>
 801b2e0:	2b01      	cmp	r3, #1
 801b2e2:	d00a      	beq.n	801b2fa <_raise_r+0x4c>
 801b2e4:	1c59      	adds	r1, r3, #1
 801b2e6:	d103      	bne.n	801b2f0 <_raise_r+0x42>
 801b2e8:	2316      	movs	r3, #22
 801b2ea:	6003      	str	r3, [r0, #0]
 801b2ec:	2001      	movs	r0, #1
 801b2ee:	e7e7      	b.n	801b2c0 <_raise_r+0x12>
 801b2f0:	2400      	movs	r4, #0
 801b2f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b2f6:	4628      	mov	r0, r5
 801b2f8:	4798      	blx	r3
 801b2fa:	2000      	movs	r0, #0
 801b2fc:	e7e0      	b.n	801b2c0 <_raise_r+0x12>
	...

0801b300 <raise>:
 801b300:	4b02      	ldr	r3, [pc, #8]	; (801b30c <raise+0xc>)
 801b302:	4601      	mov	r1, r0
 801b304:	6818      	ldr	r0, [r3, #0]
 801b306:	f7ff bfd2 	b.w	801b2ae <_raise_r>
 801b30a:	bf00      	nop
 801b30c:	200000e8 	.word	0x200000e8

0801b310 <_kill_r>:
 801b310:	b538      	push	{r3, r4, r5, lr}
 801b312:	4d07      	ldr	r5, [pc, #28]	; (801b330 <_kill_r+0x20>)
 801b314:	2300      	movs	r3, #0
 801b316:	4604      	mov	r4, r0
 801b318:	4608      	mov	r0, r1
 801b31a:	4611      	mov	r1, r2
 801b31c:	602b      	str	r3, [r5, #0]
 801b31e:	f7e8 fdc6 	bl	8003eae <_kill>
 801b322:	1c43      	adds	r3, r0, #1
 801b324:	d102      	bne.n	801b32c <_kill_r+0x1c>
 801b326:	682b      	ldr	r3, [r5, #0]
 801b328:	b103      	cbz	r3, 801b32c <_kill_r+0x1c>
 801b32a:	6023      	str	r3, [r4, #0]
 801b32c:	bd38      	pop	{r3, r4, r5, pc}
 801b32e:	bf00      	nop
 801b330:	20009ea4 	.word	0x20009ea4

0801b334 <_getpid_r>:
 801b334:	f7e8 bdb3 	b.w	8003e9e <_getpid>

0801b338 <_exit>:
 801b338:	e7fe      	b.n	801b338 <_exit>
	...

0801b33c <_init>:
 801b33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b33e:	bf00      	nop
 801b340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b342:	bc08      	pop	{r3}
 801b344:	469e      	mov	lr, r3
 801b346:	4770      	bx	lr

0801b348 <_fini>:
 801b348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b34a:	bf00      	nop
 801b34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b34e:	bc08      	pop	{r3}
 801b350:	469e      	mov	lr, r3
 801b352:	4770      	bx	lr
