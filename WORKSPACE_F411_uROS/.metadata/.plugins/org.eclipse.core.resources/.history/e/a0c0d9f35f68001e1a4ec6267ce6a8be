// https://github.com/lFatality/stm32_micro_ros_setup
#include "main.h"

#include "motorCommand.h"
#include "quadEncoder.h"
#include "captDistIR.h"
#include "VL53L0X.h"//
#include "groveLCD.h"

#define ARRAY_LEN 100
#define SAMPLING_PERIOD_ms 5

extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
extern DMA_HandleTypeDef hdma_usart1_rx;
extern DMA_HandleTypeDef hdma_usart1_tx;
extern DMA_HandleTypeDef hdma_usart2_rx;
extern DMA_HandleTypeDef hdma_usart2_tx;

extern I2C_HandleTypeDef hi2c1;

/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 3000 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

//#######################################################
#define STARTUP 0 //Kerhoas code
#define EX1 1
#define EX2 2
#define EX3 3 //microros send value of VL53 captor
#define EXPRINTF 4 //Just printf and scanf fonction
#define EXFINAL 5 //S7 titouan without cam call

#define SYNCHRO_EX EX2

enum {MODE_OBS, MODE_ZIG, MODE_CAM};
enum {STOP_VIT, LOW, FAST, SONIC};
enum {AVANT, GAUCHE, RECULE, DROITE, STOP, AVANT_GAUCHE, AVANT_DROITE, RECULE_GAUCHE, RECULE_DROITE};

#define NB 200
#define LCD 0
#define VL53 1
//#######################################################
#define CMD 1000
#define VITESSE_KART CMD/2
#define VITESSE_OBS CMD
#define VITESSE_CAM CMD
//#######################################################
#define Te 5

#define LKp 0.001
#define LKi (5.0/(0.1*40.0))

#define RKp 0.001
#define RKi (5.0/(0.1*40.0))
//#######################################################

// Déclaration des objets synchronisants !! Ne pas oublier de les créer
xSemaphoreHandle xSem_Supervision = NULL;
xQueueHandle q_mot_L = NULL;
xQueueHandle q_mot_R = NULL;

xQueueHandle qhMR = NULL;
xQueueHandle qhLCD = NULL;
xQueueHandle qhVl53 = NULL;

int16_t tab_speedL[NB];
int16_t tab_speedR[NB];

struct AMessage
{
	char command;
	int data;
};

void test_print_uart2(void *pvParameters);
void test_vl53(void *pvParameters);

void SystemClock_Config(void);
void microros_task(void *argument);

bool cubemx_transport_open(struct uxrCustomTransport * transport);
bool cubemx_transport_close(struct uxrCustomTransport * transport);
size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err);
size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err);

void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void microros_task(void *argument)
{
  // micro-ROS configuration
  rmw_uros_set_custom_transport(
    true,
    (void *) &huart1,
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
  freeRTOS_allocator.allocate = microros_allocate;
  freeRTOS_allocator.deallocate = microros_deallocate;
  freeRTOS_allocator.reallocate = microros_reallocate;
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
      printf("Error on default allocators (line %d)\n", __LINE__);
  }

  // micro-ROS app
  rcl_publisher_t publisher;
  std_msgs__msg__String msg;
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;

  allocator = rcl_get_default_allocator();

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);

  // create node
  rclc_node_init_default(&node, "STM32_node", "", &support);

  // create publisher
  rclc_publisher_init_default(
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
    "cubemx_publisher");

  msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
  msg.data.size = 0;
  msg.data.capacity = ARRAY_LEN;

  static int counter = 0;
  //struct Amessage pxRxedMessage;

  for(;;)
  {
#if SYNCHRO_EX == STARTUP
	  sprintf(msg.data.data, "Hello from micro-ROS #%d", counter++);
#elif SYNCHRO_EX == EX3
	  sprintf(msg.data.data, "Distance : %d", readRangeSingleMillimeters()/10);
#elif SYNCHRO_EX == EXFINAL
	  //xQueueReceive( qhMR,  &( pxRxedMessage ) , 1);
	  int mode = MODE_OBS; //pxRxedMessage.data;
	  char direction = 'f'; //pxRxedMessage.command;

	  if (mode == MODE_OBS)
		  sprintf(msg.data.data, "M:Obstacle D:%c", direction);
	  else if (mode == MODE_ZIG)
		  sprintf(msg.data.data, "M:Zigbee");
	  else if (mode == MODE_CAM)
		  sprintf(msg.data.data, "M:Camera");
#endif

	msg.data.size = strlen(msg.data.data);
    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
    if (ret != RCL_RET_OK)
    {
      printf("Error publishing (line %d)\n", __LINE__);
    }

    osDelay(10);
  }
}
//========================================================================
static void task_Motor_Left(void *pvParameters)
{
	int16_t consigne;

	float ui=0.0;
	float up;
	int err;
	int speed;
	int i=0;

	for (;;)
	{
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
		/*xQueueReceive( qhL,  &( pxRxedMessage ) , 1 );
		cmd = pxRxedMessage.data;
		if (cmd == -1)
			cmd = lastCmd;
		else
			lastCmd = cmd;*/

		speed = quadEncoder_GetSpeedL();
		err=consigne-speed;
		up=LKp*(float)err;
		ui=ui+LKp*LKi*(float)err;

		motorLeft_SetDuty(100+(int)(up+ui));

		if(i<NB)
		{
			tab_speedL[i]=speed;
			i++;
		}

		xSemaphoreGive( xSem_Supervision );
	}
}

//=========================================================================
static void task_Motor_Right(void *pvParameters)
{
	int16_t consigne;

	float ui=0.0;
	float up;
	int err;
	int speed;
	int i=0;

	for (;;)
	{
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
		/*xQueueReceive( qhR,  &( pxRxedMessage ) , 1 );
		cmd = pxRxedMessage.data;
		if (cmd == -1)
			cmd = lastCmd;
		else
			lastCmd = cmd;*/

		speed = quadEncoder_GetSpeedR();
		err=consigne-speed;
		up=RKp*(float)err;
		ui=ui+RKp*RKi*(float)err;

		motorRight_SetDuty(100+(int)(up+ui));

		if(i<NB)
		{
			tab_speedR[i]=speed;
			i++;
		}

		xSemaphoreGive( xSem_Supervision );
	}
}

//=========================================================================
#if VL53
static void task_VL53(void *pvParameters)
{
	static uint16_t dist;
	static const int SEUIL = 20;
	int obs = 0;

	for(;;)
	{
		dist = readRangeSingleMillimeters()/10;
		printf("distance %d\r\n", dist);
		if (dist < SEUIL)
			obs = 1;
		else
			obs = 0;

		xQueueSend(qhVl53, (void *)&obs, portMAX_DELAY);

		HAL_Delay(100);
	}
}
#endif

//=========================================================================
#if LCD
static void task_Grove_LCD(void *pvParameters)
{
#if SYNCHRO_EX == EXFINAL
	struct AMessage pxRxedMessage;

	for(;;){
		xQueueReceive(qhLCD, &( pxRxedMessage ), 1);
		int mode = pxRxedMessage.data;
		char direction=pxRxedMessage.command;
		groveLCD_setCursor(0,0);
		if (mode == MODE_OBS)
			groveLCD_term_printf("M:Obstacle  D:%c", direction);
		else if (mode == MODE_ZIG)
			groveLCD_term_printf("M:Zigbee        ");
		else if (mode == MODE_CAM)
			groveLCD_term_printf("M:Camera        ");

		vTaskDelay(SAMPLING_PERIOD_ms);
	}
#elif SYNCHRO_EX == STARTUP
	for (;;)
	{
		 groveLCD_setCursor(0,0);
		 groveLCD_term_printf("TEST LCD");
		 vTaskDelay(100);
	}
#endif
}
#endif

//=========================================================================
static void task_Supervision(void *pvParameters)
{
#if SYNCHRO_EX == STARTUP
	int16_t consigne_G=0;
	int16_t consigne_D=0;

	int tab_mes_ir[2];
	uint16_t mes_vl53=0;

	vTaskDelay(100);
	for (;;)
	{
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);

	    captDistIR_Get(tab_mes_ir);
	    //mes_vl53 = readRangeSingleMillimeters()/10;

	    if((tab_mes_ir[0]>2000)||(tab_mes_ir[1]>2000))
	    { // !! obstacle
	    	consigne_G=0;
	    	consigne_D=0;
	    }
	    else
	    {
	    	consigne_G=1000;
	    	consigne_D=1000;
	    }

		xQueueSend( q_mot_L, ( void * ) &consigne_G,  portMAX_DELAY );
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );

		xQueueSend( q_mot_R, ( void * ) &consigne_D,  portMAX_DELAY );
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
		vTaskDelay(SAMPLING_PERIOD_ms);
	}
#elif SYNCHRO_EX == EXFINAL
	int16_t speedLeft;
	int16_t speedRight;

	int16_t AspeedLeft = 0;
	int16_t AspeedRight = 0;

	int table[2];
	int vl53 = 0;

	static int obs = 0;
	static char dir = 'f';
	static int direction = AVANT;
	static int speed = LOW;
	static int mode = MODE_OBS;

	struct AMessage pxRxedMessage;

	for (;;)
	{
		//mode = ((rec_buf6[0] & 0xC0) >> 6);
		/*if(mode != MODE_CAM){
			one=0;
		}*/

		if (mode == MODE_ZIG)
		{
			#ifdef VL53
			xQueueReceive(qhVl53, &vl53, 1); //For VL53
			#endif

			dir = 'N';
			//direction = rec_buf6[0] & 0x0F;
			//speed = (rec_buf6[0] & 0x30) >> 4;
			switch(direction)
			{
				case STOP:
					speedLeft = 0;
					speedRight = 0;
					break;
				case AVANT:
					speedLeft = VITESSE_KART*speed;
					speedRight = VITESSE_KART*speed;
					break;
				case RECULE:
					speedLeft = -VITESSE_KART*speed;
					speedRight = -VITESSE_KART*speed;
					break;
				case DROITE:
					speedLeft = VITESSE_KART*speed;
					speedRight = -VITESSE_KART*speed;
					break;
				case GAUCHE:
					speedLeft = -VITESSE_KART*speed;
					speedRight = VITESSE_KART*speed;
					break;
				case AVANT_GAUCHE:
					speedLeft = (VITESSE_KART/2)*speed;
					speedRight = VITESSE_KART*speed;
					break;
				case AVANT_DROITE:
					speedLeft = VITESSE_KART*speed;
					speedRight = (VITESSE_KART/2)*speed;
					break;
				case RECULE_GAUCHE:
					speedLeft = -VITESSE_KART*speed;
					speedRight = (-VITESSE_KART/2)*speed;
					break;
				case RECULE_DROITE:
					speedLeft = (-VITESSE_KART/2)*speed;
					speedRight = -VITESSE_KART*speed;
					break;
				default:
					speedLeft = 0;
					speedRight = 0;
					break;
			}
			//Stop si hors porte
		}
		else if (mode == MODE_OBS)
		{
			captDistIR_Get(table);
			#if VL53
			xQueueReceive(qhVl53, &vl53, 1);

			if (vl53 != 0 || vl53 != 1)
				vl53 = 0;

			if (vl53 == 1) //Il y a un obstacle
			{
				speedLeft = 0;
				speedRight = 0;
				dir = 'S';
				obs = 1;
			}
			else
#endif
			if (table[0] > 1000 || table[1] > 1000)
			{
				if (obs > 10)
				{
					speedLeft = VITESSE_OBS;
					speedRight = -VITESSE_OBS/2;
					dir = 'G';
				}
				else
				{
					speedLeft = 0;
					speedRight = 0;

					if (table[0] > table[1] && table[0] > 1000)
					{
						dir = 'G';
						speedLeft = VITESSE_OBS/2;
						speedRight = -VITESSE_OBS/2;
						if (obs%2 == 0)
							obs++;
					}
					else if (table[0] < table[1] && table[1] > 1000)
					{
						dir = 'D';
						speedLeft = -VITESSE_OBS/2;
						speedRight = VITESSE_OBS/2;
						if (obs%2 == 1)
							obs++;
					}
				}
			}
			else
			{
				speedLeft = VITESSE_OBS;
				speedRight = VITESSE_OBS;
				dir = 'F';
				obs = 0;
			}
		}
		else if (mode == MODE_CAM)
		{
			#if VL53
			xQueueReceive(qhVl53, &vl53, 1); //For vl53
			#endif

			pxRxedMessage.data = STOP; //REPLACE BY CAM INFO WITH ROS
			switch (pxRxedMessage.data)
			{
				case AVANT:
					speedLeft = VITESSE_CAM;
					AspeedLeft = VITESSE_CAM;
					speedRight = VITESSE_CAM;
					AspeedRight = VITESSE_CAM;
					break;
				case AVANT_DROITE:
					speedLeft = VITESSE_CAM;
					AspeedLeft = VITESSE_CAM;
					speedRight = VITESSE_CAM/2;
					AspeedRight = VITESSE_CAM/2;
					break;
				case AVANT_GAUCHE:
					speedLeft = VITESSE_CAM/2;
					AspeedLeft = VITESSE_CAM/2;
					speedRight = VITESSE_CAM;
					AspeedRight = VITESSE_CAM;
					break;
				case RECULE:
					speedLeft = -VITESSE_CAM;
					AspeedLeft = -VITESSE_CAM;
					speedRight = -VITESSE_CAM;
					AspeedRight = -VITESSE_CAM;
					break;
				case RECULE_DROITE:
					speedLeft = -VITESSE_CAM/2;
					AspeedLeft = -VITESSE_CAM/2;
					speedRight = -VITESSE_CAM;
					AspeedRight = -VITESSE_CAM;
					break;
				case RECULE_GAUCHE:
					speedLeft = -VITESSE_CAM;
					AspeedLeft = -VITESSE_CAM;
					speedRight = -VITESSE_CAM/2;
					AspeedRight = -VITESSE_CAM/2;
					break;
				case STOP:
					speedLeft = 0;
					AspeedLeft = 0;
					speedRight = 0;
					AspeedRight = 0;
					break;
				default:
					speedLeft = AspeedLeft;
					speedRight = AspeedRight;
					break;
			}

			dir = 'N';
			obs = 0;
		}

		xQueueSend( q_mot_L, ( void * ) &speedLeft,  portMAX_DELAY );
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );

		xQueueSend( q_mot_R, ( void * ) &speedRight,  portMAX_DELAY );
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );

		struct AMessage pxMessage;

		pxMessage.data=mode;
		pxMessage.command=dir;
		xQueueSend( qhMR, ( void * ) &pxMessage, 1);

	#if LCD
		pxMessage.data=mode;
		pxMessage.command=dir;
		xQueueSend( qhLCD, ( void * ) &pxMessage, 1);
	#endif

		vTaskDelay(SAMPLING_PERIOD_ms);
	}
#endif
}

//=========================================================================
int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();

  RetargetInit(&huart2); //make printf and scanf work with uart2
  printf("%cc%c[2J%c[0;0HTitouan//Jeremy//Louanne\r\n", 0x1b, 0x1b, 0x1b);

  motorCommand_Init();
  quadEncoder_Init();
  captDistIR_Init();

  HAL_Delay(500);

  initVL53L0X();
  HAL_Delay(100);

  // Test Ecran LCD
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
  HAL_Delay(100);
  groveLCD_setCursor(0,0);
  groveLCD_setColor(1);
  groveLCD_term_printf("Titouan//Jeremy//Louanne");
  HAL_Delay(1000);

  osKernelInitialize();
  //defaultTaskHandle = osThreadNew(microros_task, NULL, &defaultTask_attributes);

#if SYNCHRO_EX == STARTUP
  	xTaskCreate( microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
  	xTaskCreate( task_Supervision, ( const portCHAR * ) "task Supervision", 128 /* stack size */, NULL,  27, NULL );
	xTaskCreate( task_Motor_Left, ( const portCHAR * ) "task Mot L", 128 /* stack size */, NULL,  25, NULL );
	xTaskCreate( task_Motor_Right, ( const portCHAR * ) "task Mot R", 128 /* stack size */, NULL,  26, NULL );
	#if LCD
	xTaskCreate( task_Grove_LCD, ( const portCHAR * ) "task Mot R", 128 /* stack size */, NULL,  23, NULL );
	#endif
#elif SYNCHRO_EX == EXPRINTF
	xTaskCreate(test_print_uart2, ( const portCHAR * ) "task print uart 2", 512 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EX2
	xTaskCreate(test_vl53, ( const portCHAR * ) "test_vl53", 128 /* stack size */, NULL, 24 , NULL );
#elif SYNCHRO_EX == EX3
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
#elif SYNCHRO_EX == EXFINAL
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
    xTaskCreate(task_Supervision, ( const portCHAR * ) "task Supervision", 128 /* stack size */, NULL, 27, NULL);
	xTaskCreate(task_Motor_Left, ( const portCHAR * ) "task Motor Left", 128 /* stack size */, NULL, 25, NULL);
	xTaskCreate(task_Motor_Right, ( const portCHAR * ) "task Motor Right", 128 /* stack size */, NULL, 26, NULL);

	#if VL53
	xTaskCreate(task_VL53, ( const portCHAR * ) "task VL53", 128 /* stack size */, NULL, 23, NULL);
	#endif

	#if LCD
	xTaskCreate(task_Grove_LCD, ( const portCHAR * ) "task LCD", 128 /* stack size */, NULL, 23, NULL);
	#endif
#endif

    vSemaphoreCreateBinary(xSem_Supervision);
    xSemaphoreTake( xSem_Supervision, portMAX_DELAY );

    q_mot_L = xQueueCreate(1, sizeof(int16_t));
    q_mot_R = xQueueCreate(1, sizeof(int16_t));
    qhVl53 = xQueueCreate(1, sizeof(int));

    qhMR = xQueueCreate( 1, sizeof(struct AMessage ) );
    qhLCD = xQueueCreate( 1, sizeof(struct AMessage ) );

  //rec_buf6[0] = 'T';

  osKernelStart();
  while(1)
  {

  }
}

//=========================================================================
void test_print_uart2(void *pvParameters)
{
	char buf[100] = "";
	for(;;)
	{
		printf("Veuillez saisir votre nom :\r\n");
		scanf("%s", buf);
		printf("bonjour et bienvenue %s\r\n", buf);
		vTaskDelay(SAMPLING_PERIOD_ms);
	}
}

void test_vl53(void *pvParameters)
{
	uint8_t i;
	uint16_t val;
	readRangeSingleMillimeters();

	//readReg
	//int status;

	for(;;)
	{
		//i2c1_ReadRegBuffer(0x53,0xC2,&i,1);
		//i = readReg(0xC2);
		//val = readRangeSingleMillimeters()/10;
		i2c1_WriteRegBuffer(0x52, 0xC2, &i, 1);
		i2c1_ReadRegBuffer(0x53, 0xC2, &i, 1);
		printf("Distance capteur : %d\r\n", i);
		/*
		 	if(!status)
				printf("Distance capteur : %d\r\n", i);
		 */
	}
}

//=========================================================================
/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == TIM4)
  {
    HAL_IncTick();
  }
}
//=========================================================================
void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {}
}
//=========================================================================
#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
