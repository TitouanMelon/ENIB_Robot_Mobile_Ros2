
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b26c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f38  0801b410  0801b410  0002b410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c348  0801c348  000300e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c348  0801c348  0002c348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c350  0801c350  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c350  0801c350  0002c350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c354  0801c354  0002c354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0801c358  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eaa8  200000e8  0801c440  000300e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000eb90  0801c440  0003eb90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY
 13 .debug_info   000e5c83  00000000  00000000  000301b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000182aa  00000000  00000000  00115e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004350  00000000  00000000  0012e0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016ea  00000000  00000000  00132438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a93  00000000  00000000  00133b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00075d3d  00000000  00000000  001595b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8ca1  00000000  00000000  001cf2f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00010b20  00000000  00000000  00287f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00298ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00057b45  00000000  00000000  00298b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00009b50  00000000  00000000  002f0686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e8 	.word	0x200000e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801b3f4 	.word	0x0801b3f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	0801b3f4 	.word	0x0801b3f4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_ldivmod>:
 8000bfc:	b97b      	cbnz	r3, 8000c1e <__aeabi_ldivmod+0x22>
 8000bfe:	b972      	cbnz	r2, 8000c1e <__aeabi_ldivmod+0x22>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bfbe      	ittt	lt
 8000c04:	2000      	movlt	r0, #0
 8000c06:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c0a:	e006      	blt.n	8000c1a <__aeabi_ldivmod+0x1e>
 8000c0c:	bf08      	it	eq
 8000c0e:	2800      	cmpeq	r0, #0
 8000c10:	bf1c      	itt	ne
 8000c12:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c16:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1a:	f000 b9bb 	b.w	8000f94 <__aeabi_idiv0>
 8000c1e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c22:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c26:	2900      	cmp	r1, #0
 8000c28:	db09      	blt.n	8000c3e <__aeabi_ldivmod+0x42>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db1a      	blt.n	8000c64 <__aeabi_ldivmod+0x68>
 8000c2e:	f000 f84d 	bl	8000ccc <__udivmoddi4>
 8000c32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3a:	b004      	add	sp, #16
 8000c3c:	4770      	bx	lr
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db1b      	blt.n	8000c80 <__aeabi_ldivmod+0x84>
 8000c48:	f000 f840 	bl	8000ccc <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c62:	4770      	bx	lr
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	f000 f82f 	bl	8000ccc <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4240      	negs	r0, r0
 8000c7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f821 	bl	8000ccc <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b970 	b.w	8000f94 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	460d      	mov	r5, r1
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	460f      	mov	r7, r1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d14a      	bne.n	8000d72 <__udivmoddi4+0xa6>
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	4694      	mov	ip, r2
 8000ce0:	d965      	bls.n	8000dae <__udivmoddi4+0xe2>
 8000ce2:	fab2 f382 	clz	r3, r2
 8000ce6:	b143      	cbz	r3, 8000cfa <__udivmoddi4+0x2e>
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	f1c3 0220 	rsb	r2, r3, #32
 8000cf0:	409f      	lsls	r7, r3
 8000cf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf6:	4317      	orrs	r7, r2
 8000cf8:	409c      	lsls	r4, r3
 8000cfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfe:	fa1f f58c 	uxth.w	r5, ip
 8000d02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d06:	0c22      	lsrs	r2, r4, #16
 8000d08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d10:	fb01 f005 	mul.w	r0, r1, r5
 8000d14:	4290      	cmp	r0, r2
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x62>
 8000d18:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d20:	f080 811c 	bcs.w	8000f5c <__udivmoddi4+0x290>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f240 8119 	bls.w	8000f5c <__udivmoddi4+0x290>
 8000d2a:	3902      	subs	r1, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a12      	subs	r2, r2, r0
 8000d30:	b2a4      	uxth	r4, r4
 8000d32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3e:	fb00 f505 	mul.w	r5, r0, r5
 8000d42:	42a5      	cmp	r5, r4
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x90>
 8000d46:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4e:	f080 8107 	bcs.w	8000f60 <__udivmoddi4+0x294>
 8000d52:	42a5      	cmp	r5, r4
 8000d54:	f240 8104 	bls.w	8000f60 <__udivmoddi4+0x294>
 8000d58:	4464      	add	r4, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d60:	1b64      	subs	r4, r4, r5
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11e      	cbz	r6, 8000d6e <__udivmoddi4+0xa2>
 8000d66:	40dc      	lsrs	r4, r3
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0xbc>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	f000 80ed 	beq.w	8000f56 <__udivmoddi4+0x28a>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	d149      	bne.n	8000e24 <__udivmoddi4+0x158>
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d302      	bcc.n	8000d9a <__udivmoddi4+0xce>
 8000d94:	4282      	cmp	r2, r0
 8000d96:	f200 80f8 	bhi.w	8000f8a <__udivmoddi4+0x2be>
 8000d9a:	1a84      	subs	r4, r0, r2
 8000d9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000da0:	2001      	movs	r0, #1
 8000da2:	4617      	mov	r7, r2
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d0e2      	beq.n	8000d6e <__udivmoddi4+0xa2>
 8000da8:	e9c6 4700 	strd	r4, r7, [r6]
 8000dac:	e7df      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xe6>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f382 	clz	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x210>
 8000dbc:	1a8a      	subs	r2, r1, r2
 8000dbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd0:	0c22      	lsrs	r2, r4, #16
 8000dd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd6:	fb0e f005 	mul.w	r0, lr, r5
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x124>
 8000dde:	eb1c 0202 	adds.w	r2, ip, r2
 8000de2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x122>
 8000de8:	4290      	cmp	r0, r2
 8000dea:	f200 80cb 	bhi.w	8000f84 <__udivmoddi4+0x2b8>
 8000dee:	4645      	mov	r5, r8
 8000df0:	1a12      	subs	r2, r2, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e00:	fb0e fe00 	mul.w	lr, lr, r0
 8000e04:	45a6      	cmp	lr, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x14e>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e10:	d202      	bcs.n	8000e18 <__udivmoddi4+0x14c>
 8000e12:	45a6      	cmp	lr, r4
 8000e14:	f200 80bb 	bhi.w	8000f8e <__udivmoddi4+0x2c2>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e22:	e79f      	b.n	8000d64 <__udivmoddi4+0x98>
 8000e24:	f1c1 0720 	rsb	r7, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e32:	fa05 f401 	lsl.w	r4, r5, r1
 8000e36:	fa20 f307 	lsr.w	r3, r0, r7
 8000e3a:	40fd      	lsrs	r5, r7
 8000e3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e46:	fa1f fe8c 	uxth.w	lr, ip
 8000e4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e54:	fb08 f50e 	mul.w	r5, r8, lr
 8000e58:	42a5      	cmp	r5, r4
 8000e5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b0>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e6c:	f080 8088 	bcs.w	8000f80 <__udivmoddi4+0x2b4>
 8000e70:	42a5      	cmp	r5, r4
 8000e72:	f240 8085 	bls.w	8000f80 <__udivmoddi4+0x2b4>
 8000e76:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7a:	4464      	add	r4, ip
 8000e7c:	1b64      	subs	r4, r4, r5
 8000e7e:	b29d      	uxth	r5, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1da>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e9c:	d26c      	bcs.n	8000f78 <__udivmoddi4+0x2ac>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	d96a      	bls.n	8000f78 <__udivmoddi4+0x2ac>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	4464      	add	r4, ip
 8000ea6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	46c8      	mov	r8, r9
 8000eb6:	46ae      	mov	lr, r5
 8000eb8:	d356      	bcc.n	8000f68 <__udivmoddi4+0x29c>
 8000eba:	d053      	beq.n	8000f64 <__udivmoddi4+0x298>
 8000ebc:	b156      	cbz	r6, 8000ed4 <__udivmoddi4+0x208>
 8000ebe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ec2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eca:	40ca      	lsrs	r2, r1
 8000ecc:	40cc      	lsrs	r4, r1
 8000ece:	4317      	orrs	r7, r2
 8000ed0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000edc:	f1c3 0120 	rsb	r1, r3, #32
 8000ee0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee8:	fa25 f101 	lsr.w	r1, r5, r1
 8000eec:	409d      	lsls	r5, r3
 8000eee:	432a      	orrs	r2, r5
 8000ef0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef4:	fa1f fe8c 	uxth.w	lr, ip
 8000ef8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000efc:	fb07 1510 	mls	r5, r7, r0, r1
 8000f00:	0c11      	lsrs	r1, r2, #16
 8000f02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f06:	fb00 f50e 	mul.w	r5, r0, lr
 8000f0a:	428d      	cmp	r5, r1
 8000f0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x258>
 8000f12:	eb1c 0101 	adds.w	r1, ip, r1
 8000f16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1a:	d22f      	bcs.n	8000f7c <__udivmoddi4+0x2b0>
 8000f1c:	428d      	cmp	r5, r1
 8000f1e:	d92d      	bls.n	8000f7c <__udivmoddi4+0x2b0>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	1b49      	subs	r1, r1, r5
 8000f26:	b292      	uxth	r2, r2
 8000f28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	fb05 f10e 	mul.w	r1, r5, lr
 8000f38:	4291      	cmp	r1, r2
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x282>
 8000f3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f44:	d216      	bcs.n	8000f74 <__udivmoddi4+0x2a8>
 8000f46:	4291      	cmp	r1, r2
 8000f48:	d914      	bls.n	8000f74 <__udivmoddi4+0x2a8>
 8000f4a:	3d02      	subs	r5, #2
 8000f4c:	4462      	add	r2, ip
 8000f4e:	1a52      	subs	r2, r2, r1
 8000f50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f54:	e738      	b.n	8000dc8 <__udivmoddi4+0xfc>
 8000f56:	4631      	mov	r1, r6
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e708      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	e6e6      	b.n	8000d2e <__udivmoddi4+0x62>
 8000f60:	4610      	mov	r0, r2
 8000f62:	e6fb      	b.n	8000d5c <__udivmoddi4+0x90>
 8000f64:	4548      	cmp	r0, r9
 8000f66:	d2a9      	bcs.n	8000ebc <__udivmoddi4+0x1f0>
 8000f68:	ebb9 0802 	subs.w	r8, r9, r2
 8000f6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f70:	3b01      	subs	r3, #1
 8000f72:	e7a3      	b.n	8000ebc <__udivmoddi4+0x1f0>
 8000f74:	4645      	mov	r5, r8
 8000f76:	e7ea      	b.n	8000f4e <__udivmoddi4+0x282>
 8000f78:	462b      	mov	r3, r5
 8000f7a:	e794      	b.n	8000ea6 <__udivmoddi4+0x1da>
 8000f7c:	4640      	mov	r0, r8
 8000f7e:	e7d1      	b.n	8000f24 <__udivmoddi4+0x258>
 8000f80:	46d0      	mov	r8, sl
 8000f82:	e77b      	b.n	8000e7c <__udivmoddi4+0x1b0>
 8000f84:	3d02      	subs	r5, #2
 8000f86:	4462      	add	r2, ip
 8000f88:	e732      	b.n	8000df0 <__udivmoddi4+0x124>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e70a      	b.n	8000da4 <__udivmoddi4+0xd8>
 8000f8e:	4464      	add	r4, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e742      	b.n	8000e1a <__udivmoddi4+0x14e>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeReg>:
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte);
//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	i2c1_WriteRegBuffer(0x53,reg,&value,1);
 8000fa8:	1dba      	adds	r2, r7, #6
 8000faa:	79f9      	ldrb	r1, [r7, #7]
 8000fac:	2301      	movs	r3, #1
 8000fae:	2053      	movs	r0, #83	; 0x53
 8000fb0:	f000 ff26 	bl	8001e00 <i2c1_WriteRegBuffer>

}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 8000fcc:	88bb      	ldrh	r3, [r7, #4]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer(0x53,reg,tab,2);
 8000fdc:	f107 020c 	add.w	r2, r7, #12
 8000fe0:	79f9      	ldrb	r1, [r7, #7]
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	2053      	movs	r0, #83	; 0x53
 8000fe6:	f000 ff0b 	bl	8001e00 <i2c1_WriteRegBuffer>

}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <readReg>:
		tab[0] = ((value ) & 0xFF);
		i2c1_WriteRegBuffer(0x53,reg,tab,4);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
  	i2c1_ReadRegBuffer(0x53,reg,&value,1);
 8001000:	f107 020f 	add.w	r2, r7, #15
 8001004:	79f9      	ldrb	r1, [r7, #7]
 8001006:	2301      	movs	r3, #1
 8001008:	2053      	movs	r0, #83	; 0x53
 800100a:	f000 fec7 	bl	8001d9c <i2c1_ReadRegBuffer>
  	return value;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2];
	i2c1_ReadRegBuffer(0x53,reg,tab,2);
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	79f9      	ldrb	r1, [r7, #7]
 8001028:	2302      	movs	r3, #2
 800102a:	2053      	movs	r0, #83	; 0x53
 800102c:	f000 feb6 	bl	8001d9c <i2c1_ReadRegBuffer>
  	uint16_t value= ((uint16_t)tab[0] << 8) | (uint16_t)tab[1];
 8001030:	7b3b      	ldrb	r3, [r7, #12]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21b      	sxth	r3, r3
 800103e:	81fb      	strh	r3, [r7, #14]
  	return value;
 8001040:	89fb      	ldrh	r3, [r7, #14]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t initVL53L0X( ){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  // VL53L0X_DataInit() begin

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8001050:	2100      	movs	r1, #0
 8001052:	2088      	movs	r0, #136	; 0x88
 8001054:	f7ff ffa0 	bl	8000f98 <writeReg>

  writeReg(0x80, 0x01);
 8001058:	2101      	movs	r1, #1
 800105a:	2080      	movs	r0, #128	; 0x80
 800105c:	f7ff ff9c 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 8001060:	2101      	movs	r1, #1
 8001062:	20ff      	movs	r0, #255	; 0xff
 8001064:	f7ff ff98 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 8001068:	2100      	movs	r1, #0
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff ff94 	bl	8000f98 <writeReg>
  g_stopVariable = readReg(0x91);
 8001070:	2091      	movs	r0, #145	; 0x91
 8001072:	f7ff ffbe 	bl	8000ff2 <readReg>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4bd5      	ldr	r3, [pc, #852]	; (80013d0 <initVL53L0X+0x384>)
 800107c:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 800107e:	2101      	movs	r1, #1
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ff89 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001086:	2100      	movs	r1, #0
 8001088:	20ff      	movs	r0, #255	; 0xff
 800108a:	f7ff ff85 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 800108e:	2100      	movs	r1, #0
 8001090:	2080      	movs	r0, #128	; 0x80
 8001092:	f7ff ff81 	bl	8000f98 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8001096:	2060      	movs	r0, #96	; 0x60
 8001098:	f7ff ffab 	bl	8000ff2 <readReg>
 800109c:	4603      	mov	r3, r0
 800109e:	f043 0312 	orr.w	r3, r3, #18
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	2060      	movs	r0, #96	; 0x60
 80010a8:	f7ff ff76 	bl	8000f98 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80010ac:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80010b0:	f000 f992 	bl	80013d8 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80010b4:	21ff      	movs	r1, #255	; 0xff
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff ff6e 	bl	8000f98 <writeReg>
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80010bc:	2101      	movs	r1, #1
 80010be:	20ff      	movs	r0, #255	; 0xff
 80010c0:	f7ff ff6a 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80010c4:	2100      	movs	r1, #0
 80010c6:	204f      	movs	r0, #79	; 0x4f
 80010c8:	f7ff ff66 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80010cc:	212c      	movs	r1, #44	; 0x2c
 80010ce:	204e      	movs	r0, #78	; 0x4e
 80010d0:	f7ff ff62 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 80010d4:	2100      	movs	r1, #0
 80010d6:	20ff      	movs	r0, #255	; 0xff
 80010d8:	f7ff ff5e 	bl	8000f98 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80010dc:	21b4      	movs	r1, #180	; 0xb4
 80010de:	20b6      	movs	r0, #182	; 0xb6
 80010e0:	f7ff ff5a 	bl	8000f98 <writeReg>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80010e4:	2101      	movs	r1, #1
 80010e6:	20ff      	movs	r0, #255	; 0xff
 80010e8:	f7ff ff56 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 80010ec:	2100      	movs	r1, #0
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff ff52 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80010f4:	2100      	movs	r1, #0
 80010f6:	20ff      	movs	r0, #255	; 0xff
 80010f8:	f7ff ff4e 	bl	8000f98 <writeReg>
  writeReg(0x09, 0x00);
 80010fc:	2100      	movs	r1, #0
 80010fe:	2009      	movs	r0, #9
 8001100:	f7ff ff4a 	bl	8000f98 <writeReg>
  writeReg(0x10, 0x00);
 8001104:	2100      	movs	r1, #0
 8001106:	2010      	movs	r0, #16
 8001108:	f7ff ff46 	bl	8000f98 <writeReg>
  writeReg(0x11, 0x00);
 800110c:	2100      	movs	r1, #0
 800110e:	2011      	movs	r0, #17
 8001110:	f7ff ff42 	bl	8000f98 <writeReg>

  writeReg(0x24, 0x01);
 8001114:	2101      	movs	r1, #1
 8001116:	2024      	movs	r0, #36	; 0x24
 8001118:	f7ff ff3e 	bl	8000f98 <writeReg>
  writeReg(0x25, 0xFF);
 800111c:	21ff      	movs	r1, #255	; 0xff
 800111e:	2025      	movs	r0, #37	; 0x25
 8001120:	f7ff ff3a 	bl	8000f98 <writeReg>
  writeReg(0x75, 0x00);
 8001124:	2100      	movs	r1, #0
 8001126:	2075      	movs	r0, #117	; 0x75
 8001128:	f7ff ff36 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800112c:	2101      	movs	r1, #1
 800112e:	20ff      	movs	r0, #255	; 0xff
 8001130:	f7ff ff32 	bl	8000f98 <writeReg>
  writeReg(0x4E, 0x2C);
 8001134:	212c      	movs	r1, #44	; 0x2c
 8001136:	204e      	movs	r0, #78	; 0x4e
 8001138:	f7ff ff2e 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x00);
 800113c:	2100      	movs	r1, #0
 800113e:	2048      	movs	r0, #72	; 0x48
 8001140:	f7ff ff2a 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x20);
 8001144:	2120      	movs	r1, #32
 8001146:	2030      	movs	r0, #48	; 0x30
 8001148:	f7ff ff26 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800114c:	2100      	movs	r1, #0
 800114e:	20ff      	movs	r0, #255	; 0xff
 8001150:	f7ff ff22 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x09);
 8001154:	2109      	movs	r1, #9
 8001156:	2030      	movs	r0, #48	; 0x30
 8001158:	f7ff ff1e 	bl	8000f98 <writeReg>
  writeReg(0x54, 0x00);
 800115c:	2100      	movs	r1, #0
 800115e:	2054      	movs	r0, #84	; 0x54
 8001160:	f7ff ff1a 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 8001164:	2104      	movs	r1, #4
 8001166:	2031      	movs	r0, #49	; 0x31
 8001168:	f7ff ff16 	bl	8000f98 <writeReg>
  writeReg(0x32, 0x03);
 800116c:	2103      	movs	r1, #3
 800116e:	2032      	movs	r0, #50	; 0x32
 8001170:	f7ff ff12 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x83);
 8001174:	2183      	movs	r1, #131	; 0x83
 8001176:	2040      	movs	r0, #64	; 0x40
 8001178:	f7ff ff0e 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x25);
 800117c:	2125      	movs	r1, #37	; 0x25
 800117e:	2046      	movs	r0, #70	; 0x46
 8001180:	f7ff ff0a 	bl	8000f98 <writeReg>
  writeReg(0x60, 0x00);
 8001184:	2100      	movs	r1, #0
 8001186:	2060      	movs	r0, #96	; 0x60
 8001188:	f7ff ff06 	bl	8000f98 <writeReg>
  writeReg(0x27, 0x00);
 800118c:	2100      	movs	r1, #0
 800118e:	2027      	movs	r0, #39	; 0x27
 8001190:	f7ff ff02 	bl	8000f98 <writeReg>
  writeReg(0x50, 0x06);
 8001194:	2106      	movs	r1, #6
 8001196:	2050      	movs	r0, #80	; 0x50
 8001198:	f7ff fefe 	bl	8000f98 <writeReg>
  writeReg(0x51, 0x00);
 800119c:	2100      	movs	r1, #0
 800119e:	2051      	movs	r0, #81	; 0x51
 80011a0:	f7ff fefa 	bl	8000f98 <writeReg>
  writeReg(0x52, 0x96);
 80011a4:	2196      	movs	r1, #150	; 0x96
 80011a6:	2052      	movs	r0, #82	; 0x52
 80011a8:	f7ff fef6 	bl	8000f98 <writeReg>
  writeReg(0x56, 0x08);
 80011ac:	2108      	movs	r1, #8
 80011ae:	2056      	movs	r0, #86	; 0x56
 80011b0:	f7ff fef2 	bl	8000f98 <writeReg>
  writeReg(0x57, 0x30);
 80011b4:	2130      	movs	r1, #48	; 0x30
 80011b6:	2057      	movs	r0, #87	; 0x57
 80011b8:	f7ff feee 	bl	8000f98 <writeReg>
  writeReg(0x61, 0x00);
 80011bc:	2100      	movs	r1, #0
 80011be:	2061      	movs	r0, #97	; 0x61
 80011c0:	f7ff feea 	bl	8000f98 <writeReg>
  writeReg(0x62, 0x00);
 80011c4:	2100      	movs	r1, #0
 80011c6:	2062      	movs	r0, #98	; 0x62
 80011c8:	f7ff fee6 	bl	8000f98 <writeReg>
  writeReg(0x64, 0x00);
 80011cc:	2100      	movs	r1, #0
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f7ff fee2 	bl	8000f98 <writeReg>
  writeReg(0x65, 0x00);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2065      	movs	r0, #101	; 0x65
 80011d8:	f7ff fede 	bl	8000f98 <writeReg>
  writeReg(0x66, 0xA0);
 80011dc:	21a0      	movs	r1, #160	; 0xa0
 80011de:	2066      	movs	r0, #102	; 0x66
 80011e0:	f7ff feda 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 80011e4:	2101      	movs	r1, #1
 80011e6:	20ff      	movs	r0, #255	; 0xff
 80011e8:	f7ff fed6 	bl	8000f98 <writeReg>
  writeReg(0x22, 0x32);
 80011ec:	2132      	movs	r1, #50	; 0x32
 80011ee:	2022      	movs	r0, #34	; 0x22
 80011f0:	f7ff fed2 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x14);
 80011f4:	2114      	movs	r1, #20
 80011f6:	2047      	movs	r0, #71	; 0x47
 80011f8:	f7ff fece 	bl	8000f98 <writeReg>
  writeReg(0x49, 0xFF);
 80011fc:	21ff      	movs	r1, #255	; 0xff
 80011fe:	2049      	movs	r0, #73	; 0x49
 8001200:	f7ff feca 	bl	8000f98 <writeReg>
  writeReg(0x4A, 0x00);
 8001204:	2100      	movs	r1, #0
 8001206:	204a      	movs	r0, #74	; 0x4a
 8001208:	f7ff fec6 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800120c:	2100      	movs	r1, #0
 800120e:	20ff      	movs	r0, #255	; 0xff
 8001210:	f7ff fec2 	bl	8000f98 <writeReg>
  writeReg(0x7A, 0x0A);
 8001214:	210a      	movs	r1, #10
 8001216:	207a      	movs	r0, #122	; 0x7a
 8001218:	f7ff febe 	bl	8000f98 <writeReg>
  writeReg(0x7B, 0x00);
 800121c:	2100      	movs	r1, #0
 800121e:	207b      	movs	r0, #123	; 0x7b
 8001220:	f7ff feba 	bl	8000f98 <writeReg>
  writeReg(0x78, 0x21);
 8001224:	2121      	movs	r1, #33	; 0x21
 8001226:	2078      	movs	r0, #120	; 0x78
 8001228:	f7ff feb6 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800122c:	2101      	movs	r1, #1
 800122e:	20ff      	movs	r0, #255	; 0xff
 8001230:	f7ff feb2 	bl	8000f98 <writeReg>
  writeReg(0x23, 0x34);
 8001234:	2134      	movs	r1, #52	; 0x34
 8001236:	2023      	movs	r0, #35	; 0x23
 8001238:	f7ff feae 	bl	8000f98 <writeReg>
  writeReg(0x42, 0x00);
 800123c:	2100      	movs	r1, #0
 800123e:	2042      	movs	r0, #66	; 0x42
 8001240:	f7ff feaa 	bl	8000f98 <writeReg>
  writeReg(0x44, 0xFF);
 8001244:	21ff      	movs	r1, #255	; 0xff
 8001246:	2044      	movs	r0, #68	; 0x44
 8001248:	f7ff fea6 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x26);
 800124c:	2126      	movs	r1, #38	; 0x26
 800124e:	2045      	movs	r0, #69	; 0x45
 8001250:	f7ff fea2 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x05);
 8001254:	2105      	movs	r1, #5
 8001256:	2046      	movs	r0, #70	; 0x46
 8001258:	f7ff fe9e 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x40);
 800125c:	2140      	movs	r1, #64	; 0x40
 800125e:	2040      	movs	r0, #64	; 0x40
 8001260:	f7ff fe9a 	bl	8000f98 <writeReg>
  writeReg(0x0E, 0x06);
 8001264:	2106      	movs	r1, #6
 8001266:	200e      	movs	r0, #14
 8001268:	f7ff fe96 	bl	8000f98 <writeReg>
  writeReg(0x20, 0x1A);
 800126c:	211a      	movs	r1, #26
 800126e:	2020      	movs	r0, #32
 8001270:	f7ff fe92 	bl	8000f98 <writeReg>
  writeReg(0x43, 0x40);
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	2043      	movs	r0, #67	; 0x43
 8001278:	f7ff fe8e 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800127c:	2100      	movs	r1, #0
 800127e:	20ff      	movs	r0, #255	; 0xff
 8001280:	f7ff fe8a 	bl	8000f98 <writeReg>
  writeReg(0x34, 0x03);
 8001284:	2103      	movs	r1, #3
 8001286:	2034      	movs	r0, #52	; 0x34
 8001288:	f7ff fe86 	bl	8000f98 <writeReg>
  writeReg(0x35, 0x44);
 800128c:	2144      	movs	r1, #68	; 0x44
 800128e:	2035      	movs	r0, #53	; 0x35
 8001290:	f7ff fe82 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001294:	2101      	movs	r1, #1
 8001296:	20ff      	movs	r0, #255	; 0xff
 8001298:	f7ff fe7e 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 800129c:	2104      	movs	r1, #4
 800129e:	2031      	movs	r0, #49	; 0x31
 80012a0:	f7ff fe7a 	bl	8000f98 <writeReg>
  writeReg(0x4B, 0x09);
 80012a4:	2109      	movs	r1, #9
 80012a6:	204b      	movs	r0, #75	; 0x4b
 80012a8:	f7ff fe76 	bl	8000f98 <writeReg>
  writeReg(0x4C, 0x05);
 80012ac:	2105      	movs	r1, #5
 80012ae:	204c      	movs	r0, #76	; 0x4c
 80012b0:	f7ff fe72 	bl	8000f98 <writeReg>
  writeReg(0x4D, 0x04);
 80012b4:	2104      	movs	r1, #4
 80012b6:	204d      	movs	r0, #77	; 0x4d
 80012b8:	f7ff fe6e 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80012bc:	2100      	movs	r1, #0
 80012be:	20ff      	movs	r0, #255	; 0xff
 80012c0:	f7ff fe6a 	bl	8000f98 <writeReg>
  writeReg(0x44, 0x00);
 80012c4:	2100      	movs	r1, #0
 80012c6:	2044      	movs	r0, #68	; 0x44
 80012c8:	f7ff fe66 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x20);
 80012cc:	2120      	movs	r1, #32
 80012ce:	2045      	movs	r0, #69	; 0x45
 80012d0:	f7ff fe62 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x08);
 80012d4:	2108      	movs	r1, #8
 80012d6:	2047      	movs	r0, #71	; 0x47
 80012d8:	f7ff fe5e 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x28);
 80012dc:	2128      	movs	r1, #40	; 0x28
 80012de:	2048      	movs	r0, #72	; 0x48
 80012e0:	f7ff fe5a 	bl	8000f98 <writeReg>
  writeReg(0x67, 0x00);
 80012e4:	2100      	movs	r1, #0
 80012e6:	2067      	movs	r0, #103	; 0x67
 80012e8:	f7ff fe56 	bl	8000f98 <writeReg>
  writeReg(0x70, 0x04);
 80012ec:	2104      	movs	r1, #4
 80012ee:	2070      	movs	r0, #112	; 0x70
 80012f0:	f7ff fe52 	bl	8000f98 <writeReg>
  writeReg(0x71, 0x01);
 80012f4:	2101      	movs	r1, #1
 80012f6:	2071      	movs	r0, #113	; 0x71
 80012f8:	f7ff fe4e 	bl	8000f98 <writeReg>
  writeReg(0x72, 0xFE);
 80012fc:	21fe      	movs	r1, #254	; 0xfe
 80012fe:	2072      	movs	r0, #114	; 0x72
 8001300:	f7ff fe4a 	bl	8000f98 <writeReg>
  writeReg(0x76, 0x00);
 8001304:	2100      	movs	r1, #0
 8001306:	2076      	movs	r0, #118	; 0x76
 8001308:	f7ff fe46 	bl	8000f98 <writeReg>
  writeReg(0x77, 0x00);
 800130c:	2100      	movs	r1, #0
 800130e:	2077      	movs	r0, #119	; 0x77
 8001310:	f7ff fe42 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001314:	2101      	movs	r1, #1
 8001316:	20ff      	movs	r0, #255	; 0xff
 8001318:	f7ff fe3e 	bl	8000f98 <writeReg>
  writeReg(0x0D, 0x01);
 800131c:	2101      	movs	r1, #1
 800131e:	200d      	movs	r0, #13
 8001320:	f7ff fe3a 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001324:	2100      	movs	r1, #0
 8001326:	20ff      	movs	r0, #255	; 0xff
 8001328:	f7ff fe36 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x01);
 800132c:	2101      	movs	r1, #1
 800132e:	2080      	movs	r0, #128	; 0x80
 8001330:	f7ff fe32 	bl	8000f98 <writeReg>
  writeReg(0x01, 0xF8);
 8001334:	21f8      	movs	r1, #248	; 0xf8
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff fe2e 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800133c:	2101      	movs	r1, #1
 800133e:	20ff      	movs	r0, #255	; 0xff
 8001340:	f7ff fe2a 	bl	8000f98 <writeReg>
  writeReg(0x8E, 0x01);
 8001344:	2101      	movs	r1, #1
 8001346:	208e      	movs	r0, #142	; 0x8e
 8001348:	f7ff fe26 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 800134c:	2101      	movs	r1, #1
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fe22 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001354:	2100      	movs	r1, #0
 8001356:	20ff      	movs	r0, #255	; 0xff
 8001358:	f7ff fe1e 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 800135c:	2100      	movs	r1, #0
 800135e:	2080      	movs	r0, #128	; 0x80
 8001360:	f7ff fe1a 	bl	8000f98 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001364:	2104      	movs	r1, #4
 8001366:	200a      	movs	r0, #10
 8001368:	f7ff fe16 	bl	8000f98 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 800136c:	2084      	movs	r0, #132	; 0x84
 800136e:	f7ff fe40 	bl	8000ff2 <readReg>
 8001372:	4603      	mov	r3, r0
 8001374:	f023 0310 	bic.w	r3, r3, #16
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4619      	mov	r1, r3
 800137c:	2084      	movs	r0, #132	; 0x84
 800137e:	f7ff fe0b 	bl	8000f98 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001382:	2101      	movs	r1, #1
 8001384:	200b      	movs	r0, #11
 8001386:	f7ff fe07 	bl	8000f98 <writeReg>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800138a:	21e8      	movs	r1, #232	; 0xe8
 800138c:	2001      	movs	r0, #1
 800138e:	f7ff fe03 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001392:	2101      	movs	r1, #1
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fdff 	bl	8000f98 <writeReg>
  if (performSingleRefCalibration(0x40)) { return false; }
 800139a:	2040      	movs	r0, #64	; 0x40
 800139c:	f000 f888 	bl	80014b0 <performSingleRefCalibration>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <initVL53L0X+0x35e>
 80013a6:	2300      	movs	r3, #0
 80013a8:	e010      	b.n	80013cc <initVL53L0X+0x380>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80013aa:	2102      	movs	r1, #2
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff fdf3 	bl	8000f98 <writeReg>
  if (performSingleRefCalibration(0x00)) { return false; }
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f87c 	bl	80014b0 <performSingleRefCalibration>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <initVL53L0X+0x376>
 80013be:	2300      	movs	r3, #0
 80013c0:	e004      	b.n	80013cc <initVL53L0X+0x380>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80013c2:	21e8      	movs	r1, #232	; 0xe8
 80013c4:	2001      	movs	r0, #1
 80013c6:	f7ff fde7 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return 0;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000104 	.word	0x20000104
 80013d4:	00000000 	.word	0x00000000

080013d8 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t setSignalRateLimit(float limit_Mcps)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d40a      	bmi.n	8001406 <setSignalRateLimit+0x2e>
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff f8c1 	bl	8000578 <__aeabi_f2d>
 80013f6:	a311      	add	r3, pc, #68	; (adr r3, 800143c <setSignalRateLimit+0x64>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff fba4 	bl	8000b48 <__aeabi_dcmpgt>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <setSignalRateLimit+0x32>
 8001406:	2300      	movs	r3, #0
 8001408:	e00f      	b.n	800142a <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001438 <setSignalRateLimit+0x60>
 8001412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141a:	ee17 3a90 	vmov	r3, s15
 800141e:	b29b      	uxth	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	2044      	movs	r0, #68	; 0x44
 8001424:	f7ff fdca 	bl	8000fbc <writeReg16Bit>
  return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	f3af 8000 	nop.w
 8001438:	43000000 	.word	0x43000000
 800143c:	0a3d70a4 	.word	0x0a3d70a4
 8001440:	407fffd7 	.word	0x407fffd7

08001444 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( /*statInfo_t *extraStats */) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
  writeReg(0x80, 0x01);
 800144a:	2101      	movs	r1, #1
 800144c:	2080      	movs	r0, #128	; 0x80
 800144e:	f7ff fda3 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 8001452:	2101      	movs	r1, #1
 8001454:	20ff      	movs	r0, #255	; 0xff
 8001456:	f7ff fd9f 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff fd9b 	bl	8000f98 <writeReg>
  writeReg(0x91, g_stopVariable);
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <readRangeSingleMillimeters+0x68>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4619      	mov	r1, r3
 8001468:	2091      	movs	r0, #145	; 0x91
 800146a:	f7ff fd95 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 800146e:	2101      	movs	r1, #1
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff fd91 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001476:	2100      	movs	r1, #0
 8001478:	20ff      	movs	r0, #255	; 0xff
 800147a:	f7ff fd8d 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 800147e:	2100      	movs	r1, #0
 8001480:	2080      	movs	r0, #128	; 0x80
 8001482:	f7ff fd89 	bl	8000f98 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8001486:	2101      	movs	r1, #1
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fd85 	bl	8000f98 <writeReg>

  uint16_t temp;

    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
  	  temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 800148e:	201e      	movs	r0, #30
 8001490:	f7ff fdc2 	bl	8001018 <readReg16Bit>
 8001494:	4603      	mov	r3, r0
 8001496:	80fb      	strh	r3, [r7, #6]

  	  temp+=0;

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001498:	2101      	movs	r1, #1
 800149a:	200b      	movs	r0, #11
 800149c:	f7ff fd7c 	bl	8000f98 <writeReg>
  return temp;
 80014a0:	88fb      	ldrh	r3, [r7, #6]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000104 	.word	0x20000104

080014b0 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4619      	mov	r1, r3
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fd67 	bl	8000f98 <writeReg>



  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80014ca:	2101      	movs	r1, #1
 80014cc:	200b      	movs	r0, #11
 80014ce:	f7ff fd63 	bl	8000f98 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 80014d2:	2100      	movs	r1, #0
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff fd5f 	bl	8000f98 <writeReg>

  return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <captDistIR_Init+0x5c>)
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <captDistIR_Init+0x60>)
 80014ec:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <captDistIR_Init+0x5c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <captDistIR_Init+0x5c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <captDistIR_Init+0x5c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <captDistIR_Init+0x5c>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <captDistIR_Init+0x5c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <captDistIR_Init+0x5c>)
 800150e:	2202      	movs	r2, #2
 8001510:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <captDistIR_Init+0x5c>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <captDistIR_Init+0x5c>)
 800151a:	2202      	movs	r2, #2
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <captDistIR_Init+0x5c>)
 8001520:	2200      	movs	r2, #0
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <captDistIR_Init+0x5c>)
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <captDistIR_Init+0x5c>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <captDistIR_Init+0x5c>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 8001536:	4802      	ldr	r0, [pc, #8]	; (8001540 <captDistIR_Init+0x5c>)
 8001538:	f003 fc7c 	bl	8004e34 <HAL_ADC_Init>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000108 	.word	0x20000108
 8001544:	40012000 	.word	0x40012000

08001548 <captDistIR_Get>:
//=================================================================
//			IR GET (POLL METHOD)
//=================================================================

int  captDistIR_Get(int* tab)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	sConfig.Channel      = ADC_CHANNEL_4;
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <captDistIR_Get+0x80>)
 8001552:	2204      	movs	r2, #4
 8001554:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8001556:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <captDistIR_Get+0x80>)
 8001558:	2201      	movs	r2, #1
 800155a:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <captDistIR_Get+0x80>)
 800155e:	2203      	movs	r2, #3
 8001560:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8001562:	4919      	ldr	r1, [pc, #100]	; (80015c8 <captDistIR_Get+0x80>)
 8001564:	4819      	ldr	r0, [pc, #100]	; (80015cc <captDistIR_Get+0x84>)
 8001566:	f003 fd51 	bl	800500c <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);					//Start the conversion
 800156a:	4818      	ldr	r0, [pc, #96]	; (80015cc <captDistIR_Get+0x84>)
 800156c:	f003 fc96 	bl	8004e9c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);	//Processing the conversion
 8001570:	210a      	movs	r1, #10
 8001572:	4816      	ldr	r0, [pc, #88]	; (80015cc <captDistIR_Get+0x84>)
 8001574:	f003 fcfe 	bl	8004f74 <HAL_ADC_PollForConversion>
	tab[0]=HAL_ADC_GetValue(&adcHandle); 		//Return the converted data
 8001578:	4814      	ldr	r0, [pc, #80]	; (80015cc <captDistIR_Get+0x84>)
 800157a:	f003 fd3a 	bl	8004ff2 <HAL_ADC_GetValue>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	601a      	str	r2, [r3, #0]

	sConfig.Channel      = ADC_CHANNEL_8;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <captDistIR_Get+0x80>)
 8001588:	2208      	movs	r2, #8
 800158a:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <captDistIR_Get+0x80>)
 800158e:	2201      	movs	r2, #1
 8001590:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <captDistIR_Get+0x80>)
 8001594:	2203      	movs	r2, #3
 8001596:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8001598:	490b      	ldr	r1, [pc, #44]	; (80015c8 <captDistIR_Get+0x80>)
 800159a:	480c      	ldr	r0, [pc, #48]	; (80015cc <captDistIR_Get+0x84>)
 800159c:	f003 fd36 	bl	800500c <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);						//Start the conversion
 80015a0:	480a      	ldr	r0, [pc, #40]	; (80015cc <captDistIR_Get+0x84>)
 80015a2:	f003 fc7b 	bl	8004e9c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);		//Processing the conversion
 80015a6:	210a      	movs	r1, #10
 80015a8:	4808      	ldr	r0, [pc, #32]	; (80015cc <captDistIR_Get+0x84>)
 80015aa:	f003 fce3 	bl	8004f74 <HAL_ADC_PollForConversion>
	tab[1]=HAL_ADC_GetValue(&adcHandle); 			//Return the converted data
 80015ae:	4807      	ldr	r0, [pc, #28]	; (80015cc <captDistIR_Get+0x84>)
 80015b0:	f003 fd1f 	bl	8004ff2 <HAL_ADC_GetValue>
 80015b4:	4602      	mov	r2, r0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3304      	adds	r3, #4
 80015ba:	601a      	str	r2, [r3, #0]

	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000014c 	.word	0x2000014c
 80015cc:	20000108 	.word	0x20000108

080015d0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80015dc:	f00b fbde 	bl	800cd9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80015e0:	4b58      	ldr	r3, [pc, #352]	; (8001744 <pvPortMallocMicroROS+0x174>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80015e8:	f000 f98c 	bl	8001904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80015ec:	4b56      	ldr	r3, [pc, #344]	; (8001748 <pvPortMallocMicroROS+0x178>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f040 808e 	bne.w	8001716 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01d      	beq.n	800163c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001600:	2208      	movs	r2, #8
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	2b00      	cmp	r3, #0
 8001610:	d014      	beq.n	800163c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f023 0307 	bic.w	r3, r3, #7
 8001618:	3308      	adds	r3, #8
 800161a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00a      	beq.n	800163c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800162a:	f383 8811 	msr	BASEPRI, r3
 800162e:	f3bf 8f6f 	isb	sy
 8001632:	f3bf 8f4f 	dsb	sy
 8001636:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001638:	bf00      	nop
 800163a:	e7fe      	b.n	800163a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d069      	beq.n	8001716 <pvPortMallocMicroROS+0x146>
 8001642:	4b42      	ldr	r3, [pc, #264]	; (800174c <pvPortMallocMicroROS+0x17c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	d864      	bhi.n	8001716 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800164c:	4b40      	ldr	r3, [pc, #256]	; (8001750 <pvPortMallocMicroROS+0x180>)
 800164e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001650:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <pvPortMallocMicroROS+0x180>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001656:	e004      	b.n	8001662 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	d903      	bls.n	8001674 <pvPortMallocMicroROS+0xa4>
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f1      	bne.n	8001658 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001674:	4b33      	ldr	r3, [pc, #204]	; (8001744 <pvPortMallocMicroROS+0x174>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167a:	429a      	cmp	r2, r3
 800167c:	d04b      	beq.n	8001716 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2208      	movs	r2, #8
 8001684:	4413      	add	r3, r2
 8001686:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	1ad2      	subs	r2, r2, r3
 8001698:	2308      	movs	r3, #8
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	429a      	cmp	r2, r3
 800169e:	d91f      	bls.n	80016e0 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80016a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00a      	beq.n	80016c8 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 80016b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b6:	f383 8811 	msr	BASEPRI, r3
 80016ba:	f3bf 8f6f 	isb	sy
 80016be:	f3bf 8f4f 	dsb	sy
 80016c2:	613b      	str	r3, [r7, #16]
}
 80016c4:	bf00      	nop
 80016c6:	e7fe      	b.n	80016c6 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	1ad2      	subs	r2, r2, r3
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80016da:	69b8      	ldr	r0, [r7, #24]
 80016dc:	f000 f974 	bl	80019c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <pvPortMallocMicroROS+0x17c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	4a18      	ldr	r2, [pc, #96]	; (800174c <pvPortMallocMicroROS+0x17c>)
 80016ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <pvPortMallocMicroROS+0x17c>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <pvPortMallocMicroROS+0x184>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d203      	bcs.n	8001702 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <pvPortMallocMicroROS+0x17c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <pvPortMallocMicroROS+0x184>)
 8001700:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <pvPortMallocMicroROS+0x178>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	431a      	orrs	r2, r3
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001716:	f00b fb4f 	bl	800cdb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00a      	beq.n	800173a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001728:	f383 8811 	msr	BASEPRI, r3
 800172c:	f3bf 8f6f 	isb	sy
 8001730:	f3bf 8f4f 	dsb	sy
 8001734:	60fb      	str	r3, [r7, #12]
}
 8001736:	bf00      	nop
 8001738:	e7fe      	b.n	8001738 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800173a:	69fb      	ldr	r3, [r7, #28]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20004164 	.word	0x20004164
 8001748:	20004170 	.word	0x20004170
 800174c:	20004168 	.word	0x20004168
 8001750:	2000415c 	.word	0x2000415c
 8001754:	2000416c 	.word	0x2000416c

08001758 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d048      	beq.n	80017fc <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800176a:	2308      	movs	r3, #8
 800176c:	425b      	negs	r3, r3
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4413      	add	r3, r2
 8001772:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <vPortFreeMicroROS+0xac>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10a      	bne.n	800179c <vPortFreeMicroROS+0x44>
	__asm volatile
 8001786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800178a:	f383 8811 	msr	BASEPRI, r3
 800178e:	f3bf 8f6f 	isb	sy
 8001792:	f3bf 8f4f 	dsb	sy
 8001796:	60fb      	str	r3, [r7, #12]
}
 8001798:	bf00      	nop
 800179a:	e7fe      	b.n	800179a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00a      	beq.n	80017ba <vPortFreeMicroROS+0x62>
	__asm volatile
 80017a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a8:	f383 8811 	msr	BASEPRI, r3
 80017ac:	f3bf 8f6f 	isb	sy
 80017b0:	f3bf 8f4f 	dsb	sy
 80017b4:	60bb      	str	r3, [r7, #8]
}
 80017b6:	bf00      	nop
 80017b8:	e7fe      	b.n	80017b8 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <vPortFreeMicroROS+0xac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d019      	beq.n	80017fc <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d115      	bne.n	80017fc <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <vPortFreeMicroROS+0xac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80017e0:	f00b fadc 	bl	800cd9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <vPortFreeMicroROS+0xb0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <vPortFreeMicroROS+0xb0>)
 80017f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80017f2:	6938      	ldr	r0, [r7, #16]
 80017f4:	f000 f8e8 	bl	80019c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80017f8:	f00b fade 	bl	800cdb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80017fc:	bf00      	nop
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20004170 	.word	0x20004170
 8001808:	20004168 	.word	0x20004168

0800180c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800180c:	b480      	push	{r7}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001818:	2308      	movs	r3, #8
 800181a:	425b      	negs	r3, r3
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	4413      	add	r3, r2
 8001820:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <getBlockSize+0x38>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	43db      	mvns	r3, r3
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

	return count;
 8001834:	68fb      	ldr	r3, [r7, #12]
}
 8001836:	4618      	mov	r0, r3
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20004170 	.word	0x20004170

08001848 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001852:	f00b faa3 	bl	800cd9c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001856:	6838      	ldr	r0, [r7, #0]
 8001858:	f7ff feba 	bl	80015d0 <pvPortMallocMicroROS>
 800185c:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001862:	2308      	movs	r3, #8
 8001864:	425b      	negs	r3, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <pvPortReallocMicroROS+0x70>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	43db      	mvns	r3, r3
 8001882:	4013      	ands	r3, r2
 8001884:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001886:	e007      	b.n	8001898 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	1c53      	adds	r3, r2, #1
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1c59      	adds	r1, r3, #1
 8001892:	61b9      	str	r1, [r7, #24]
 8001894:	7812      	ldrb	r2, [r2, #0]
 8001896:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	1e5a      	subs	r2, r3, #1
 800189c:	617a      	str	r2, [r7, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f2      	bne.n	8001888 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ff58 	bl	8001758 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 80018a8:	f00b fa86 	bl	800cdb8 <xTaskResumeAll>

	return newmem;
 80018ac:	693b      	ldr	r3, [r7, #16]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20004170 	.word	0x20004170

080018bc <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80018c6:	f00b fa69 	bl	800cd9c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80018d4:	6978      	ldr	r0, [r7, #20]
 80018d6:	f7ff fe7b 	bl	80015d0 <pvPortMallocMicroROS>
 80018da:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	613b      	str	r3, [r7, #16]

  	while(count--)
 80018e0:	e004      	b.n	80018ec <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	613a      	str	r2, [r7, #16]
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	1e5a      	subs	r2, r3, #1
 80018f0:	617a      	str	r2, [r7, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f5      	bne.n	80018e2 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80018f6:	f00b fa5f 	bl	800cdb8 <xTaskResumeAll>
  	return mem;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800190a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800190e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <prvHeapInit+0xac>)
 8001912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00c      	beq.n	8001938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3307      	adds	r3, #7
 8001922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f023 0307 	bic.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <prvHeapInit+0xac>)
 8001934:	4413      	add	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800193c:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <prvHeapInit+0xb0>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <prvHeapInit+0xb0>)
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	4413      	add	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001950:	2208      	movs	r2, #8
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f023 0307 	bic.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4a15      	ldr	r2, [pc, #84]	; (80019b8 <prvHeapInit+0xb4>)
 8001964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <prvHeapInit+0xb4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <prvHeapInit+0xb4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	1ad2      	subs	r2, r2, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <prvHeapInit+0xb4>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <prvHeapInit+0xb8>)
 8001992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a09      	ldr	r2, [pc, #36]	; (80019c0 <prvHeapInit+0xbc>)
 800199a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <prvHeapInit+0xc0>)
 800199e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	2000015c 	.word	0x2000015c
 80019b4:	2000415c 	.word	0x2000415c
 80019b8:	20004164 	.word	0x20004164
 80019bc:	2000416c 	.word	0x2000416c
 80019c0:	20004168 	.word	0x20004168
 80019c4:	20004170 	.word	0x20004170

080019c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <prvInsertBlockIntoFreeList+0xac>)
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e002      	b.n	80019dc <prvInsertBlockIntoFreeList+0x14>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d8f7      	bhi.n	80019d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	4413      	add	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d108      	bne.n	8001a0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	441a      	add	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	441a      	add	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d118      	bne.n	8001a50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <prvInsertBlockIntoFreeList+0xb0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d00d      	beq.n	8001a46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	441a      	add	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e008      	b.n	8001a58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <prvInsertBlockIntoFreeList+0xb0>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e003      	b.n	8001a58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d002      	beq.n	8001a66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000415c 	.word	0x2000415c
 8001a78:	20004164 	.word	0x20004164

08001a7c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a8a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a90:	4904      	ldr	r1, [pc, #16]	; (8001aa4 <cubemx_transport_open+0x28>)
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f008 fd38 	bl	800a508 <HAL_UART_Receive_DMA>
    return true;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20004174 	.word	0x20004174

08001aa8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001ab6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f008 fd55 	bl	800a568 <HAL_UART_DMAStop>
    return true;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001adc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b20      	cmp	r3, #32
 8001ae8:	d11c      	bne.n	8001b24 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6978      	ldr	r0, [r7, #20]
 8001af4:	f008 fc8a 	bl	800a40c <HAL_UART_Transmit_DMA>
 8001af8:	4603      	mov	r3, r0
 8001afa:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001afc:	e002      	b.n	8001b04 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f009 ffa2 	bl	800ba48 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001b04:	7cfb      	ldrb	r3, [r7, #19]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d105      	bne.n	8001b16 <cubemx_transport_write+0x4e>
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d1f3      	bne.n	8001afe <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001b16:	7cfb      	ldrb	r3, [r7, #19]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <cubemx_transport_write+0x58>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	e002      	b.n	8001b26 <cubemx_transport_write+0x5e>
 8001b20:	2300      	movs	r3, #0
 8001b22:	e000      	b.n	8001b26 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001b24:	2300      	movs	r3, #0
    }
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001b44:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4a:	b672      	cpsid	i
}
 8001b4c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <cubemx_transport_read+0x9c>)
 8001b5c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b5e:	b662      	cpsie	i
}
 8001b60:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f009 ff6d 	bl	800ba48 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <cubemx_transport_read+0xa0>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <cubemx_transport_read+0x9c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d103      	bne.n	8001b82 <cubemx_transport_read+0x52>
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbe3      	blt.n	8001b4a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001b86:	e011      	b.n	8001bac <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <cubemx_transport_read+0xa0>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	440b      	add	r3, r1
 8001b92:	4910      	ldr	r1, [pc, #64]	; (8001bd4 <cubemx_transport_read+0xa4>)
 8001b94:	5c8a      	ldrb	r2, [r1, r2]
 8001b96:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <cubemx_transport_read+0xa0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ba2:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <cubemx_transport_read+0xa0>)
 8001ba4:	6013      	str	r3, [r2, #0]
        wrote++;
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <cubemx_transport_read+0xa0>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <cubemx_transport_read+0x9c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d003      	beq.n	8001bc0 <cubemx_transport_read+0x90>
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d3e3      	bcc.n	8001b88 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001bc0:	69bb      	ldr	r3, [r7, #24]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20004978 	.word	0x20004978
 8001bd0:	20004974 	.word	0x20004974
 8001bd4:	20004174 	.word	0x20004174

08001bd8 <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a2c      	ldr	r2, [pc, #176]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a25      	ldr	r2, [pc, #148]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <MX_GPIO_Init+0xd0>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2120      	movs	r1, #32
 8001c62:	4812      	ldr	r0, [pc, #72]	; (8001cac <MX_GPIO_Init+0xd4>)
 8001c64:	f004 fa2c 	bl	80060c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <MX_GPIO_Init+0xd8>)
 8001c80:	f004 f89a 	bl	8005db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c84:	2320      	movs	r3, #32
 8001c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_GPIO_Init+0xd4>)
 8001c9c:	f004 f88c 	bl	8005db8 <HAL_GPIO_Init>

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020800 	.word	0x40020800

08001cb4 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc4:	d017      	beq.n	8001cf6 <HAL_GPIO_EXTI_Callback+0x42>
 8001cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cca:	dc16      	bgt.n	8001cfa <HAL_GPIO_EXTI_Callback+0x46>
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd0:	d00e      	beq.n	8001cf0 <HAL_GPIO_EXTI_Callback+0x3c>
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd6:	dc10      	bgt.n	8001cfa <HAL_GPIO_EXTI_Callback+0x46>
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d010      	beq.n	8001cfe <HAL_GPIO_EXTI_Callback+0x4a>
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	dc0c      	bgt.n	8001cfa <HAL_GPIO_EXTI_Callback+0x46>
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d002      	beq.n	8001cea <HAL_GPIO_EXTI_Callback+0x36>
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d00c      	beq.n	8001d02 <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 8001ce8:	e007      	b.n	8001cfa <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 8001cea:	f002 f835 	bl	8003d58 <quadEncoder_CallbackIndexR>
					break;
 8001cee:	e009      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8001cf0:	f002 f80c 	bl	8003d0c <quadEncoder_CallbackIndexL>
					break;
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001cf6:	bf00      	nop
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 8001cfa:	bf00      	nop
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001cfe:	bf00      	nop
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001d02:	bf00      	nop


	}
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d12:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <MX_I2C1_Init+0x54>)
 8001d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_I2C1_Init+0x58>)
 8001d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_I2C1_Init+0x50>)
 8001d4a:	f004 f9eb 	bl	8006124 <HAL_I2C_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d54:	f001 fc30 	bl	80035b8 <Error_Handler>
  }

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	2000497c 	.word	0x2000497c
 8001d60:	40005400 	.word	0x40005400
 8001d64:	000186a0 	.word	0x000186a0

08001d68 <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	4603      	mov	r3, r0
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	89f9      	ldrh	r1, [r7, #14]
 8001d7c:	2264      	movs	r2, #100	; 0x64
 8001d7e:	9200      	str	r2, [sp, #0]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <i2c1_WriteBuffer+0x30>)
 8001d84:	f004 fb12 	bl	80063ac <HAL_I2C_Master_Transmit>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	617b      	str	r3, [r7, #20]
	return status;
 8001d8c:	697b      	ldr	r3, [r7, #20]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000497c 	.word	0x2000497c

08001d9c <i2c1_ReadRegBuffer>:
}
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	60ba      	str	r2, [r7, #8]
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4603      	mov	r3, r0
 8001da8:	81fb      	strh	r3, [r7, #14]
 8001daa:	460b      	mov	r3, r1
 8001dac:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 8001dae:	7b7b      	ldrb	r3, [r7, #13]
 8001db0:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 8001db2:	f107 0213 	add.w	r2, r7, #19
 8001db6:	89f9      	ldrh	r1, [r7, #14]
 8001db8:	2364      	movs	r3, #100	; 0x64
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	480f      	ldr	r0, [pc, #60]	; (8001dfc <i2c1_ReadRegBuffer+0x60>)
 8001dc0:	f004 faf4 	bl	80063ac <HAL_I2C_Master_Transmit>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	617b      	str	r3, [r7, #20]
        if( status )
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10f      	bne.n	8001dee <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2164      	movs	r1, #100	; 0x64
 8001dd6:	fb01 f303 	mul.w	r3, r1, r3
 8001dda:	89f9      	ldrh	r1, [r7, #14]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <i2c1_ReadRegBuffer+0x60>)
 8001de4:	f004 fbe0 	bl	80065a8 <HAL_I2C_Master_Receive>
 8001de8:	4603      	mov	r3, r0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e000      	b.n	8001df0 <i2c1_ReadRegBuffer+0x54>
            break;
 8001dee:	bf00      	nop
    }while(0);
    return status;
 8001df0:	697b      	ldr	r3, [r7, #20]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000497c 	.word	0x2000497c

08001e00 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	60ba      	str	r2, [r7, #8]
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	81fb      	strh	r3, [r7, #14]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8001e12:	7b7b      	ldrb	r3, [r7, #13]
 8001e14:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f018 fc9c 	bl	801a75e <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f107 0214 	add.w	r2, r7, #20
 8001e32:	89f9      	ldrh	r1, [r7, #14]
 8001e34:	2064      	movs	r0, #100	; 0x64
 8001e36:	9000      	str	r0, [sp, #0]
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <i2c1_WriteRegBuffer+0x4c>)
 8001e3a:	f004 fab7 	bl	80063ac <HAL_I2C_Master_Transmit>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
     return status;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3728      	adds	r7, #40	; 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2000497c 	.word	0x2000497c

08001e50 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;


void MX_USART1_UART_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <MX_USART1_UART_Init+0x50>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_USART1_UART_Init+0x4c>)
 8001e88:	f008 f93f 	bl	800a10a <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e92:	f001 fb91 	bl	80035b8 <Error_Handler>
  }
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200049d0 	.word	0x200049d0
 8001ea0:	40011000 	.word	0x40011000

08001ea4 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <MX_USART2_UART_Init+0x50>)
 8001eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001eca:	220c      	movs	r2, #12
 8001ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_USART2_UART_Init+0x4c>)
 8001edc:	f008 f915 	bl	800a10a <HAL_UART_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ee6:	f001 fb67 	bl	80035b8 <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20004a14 	.word	0x20004a14
 8001ef4:	40004400 	.word	0x40004400

08001ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <MX_DMA_Init+0x88>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a1e      	ldr	r2, [pc, #120]	; (8001f80 <MX_DMA_Init+0x88>)
 8001f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <MX_DMA_Init+0x88>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <MX_DMA_Init+0x88>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <MX_DMA_Init+0x88>)
 8001f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <MX_DMA_Init+0x88>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2105      	movs	r1, #5
 8001f3a:	2010      	movs	r0, #16
 8001f3c:	f003 fb02 	bl	8005544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f40:	2010      	movs	r0, #16
 8001f42:	f003 fb1b 	bl	800557c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2105      	movs	r1, #5
 8001f4a:	2011      	movs	r0, #17
 8001f4c:	f003 fafa 	bl	8005544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f50:	2011      	movs	r0, #17
 8001f52:	f003 fb13 	bl	800557c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2105      	movs	r1, #5
 8001f5a:	203a      	movs	r0, #58	; 0x3a
 8001f5c:	f003 faf2 	bl	8005544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f60:	203a      	movs	r0, #58	; 0x3a
 8001f62:	f003 fb0b 	bl	800557c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2105      	movs	r1, #5
 8001f6a:	2046      	movs	r0, #70	; 0x46
 8001f6c:	f003 faea 	bl	8005544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001f70:	2046      	movs	r0, #70	; 0x46
 8001f72:	f003 fb03 	bl	800557c <HAL_NVIC_EnableIRQ>

}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800

08001f84 <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	461a      	mov	r2, r3
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	207c      	movs	r0, #124	; 0x7c
 8001f98:	f7ff fee6 	bl	8001d68 <i2c1_WriteBuffer>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	71bb      	strb	r3, [r7, #6]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 8001fb6:	79bb      	ldrb	r3, [r7, #6]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d906      	bls.n	8001fca <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 8001fbc:	4b33      	ldr	r3, [pc, #204]	; (800208c <groveLCD_begin+0xe8>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b31      	ldr	r3, [pc, #196]	; (800208c <groveLCD_begin+0xe8>)
 8001fc8:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 8001fca:	4a31      	ldr	r2, [pc, #196]	; (8002090 <groveLCD_begin+0xec>)
 8001fcc:	79bb      	ldrb	r3, [r7, #6]
 8001fce:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <groveLCD_begin+0xf0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 8001fd6:	797b      	ldrb	r3, [r7, #5]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <groveLCD_begin+0x4c>
 8001fdc:	79bb      	ldrb	r3, [r7, #6]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d106      	bne.n	8001ff0 <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <groveLCD_begin+0xe8>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <groveLCD_begin+0xe8>)
 8001fee:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 8001ff0:	2032      	movs	r0, #50	; 0x32
 8001ff2:	f002 fefb 	bl	8004dec <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <groveLCD_begin+0xe8>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	f043 0320 	orr.w	r3, r3, #32
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4618      	mov	r0, r3
 8002002:	f000 f89b 	bl	800213c <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 8002006:	2005      	movs	r0, #5
 8002008:	f002 fef0 	bl	8004dec <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <groveLCD_begin+0xe8>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f043 0320 	orr.w	r3, r3, #32
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f890 	bl	800213c <groveLCD_command>
    HAL_Delay(5);
 800201c:	2005      	movs	r0, #5
 800201e:	f002 fee5 	bl	8004dec <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <groveLCD_begin+0xe8>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	f043 0320 	orr.w	r3, r3, #32
 800202a:	b2db      	uxtb	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f885 	bl	800213c <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <groveLCD_begin+0xe8>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	f043 0320 	orr.w	r3, r3, #32
 800203a:	b2db      	uxtb	r3, r3
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f87d 	bl	800213c <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <groveLCD_begin+0xf4>)
 8002044:	2204      	movs	r2, #4
 8002046:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 8002048:	f000 f862 	bl	8002110 <groveLCD_display>

    // clear it off
    groveLCD_clear();
 800204c:	f000 f831 	bl	80020b2 <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <groveLCD_begin+0xf8>)
 8002052:	2202      	movs	r2, #2
 8002054:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <groveLCD_begin+0xf8>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	b2db      	uxtb	r3, r3
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f86b 	bl	800213c <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 8002066:	2100      	movs	r1, #0
 8002068:	2000      	movs	r0, #0
 800206a:	f000 f8a4 	bl	80021b6 <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 800206e:	21ff      	movs	r1, #255	; 0xff
 8002070:	2008      	movs	r0, #8
 8002072:	f000 f8a0 	bl	80021b6 <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 8002076:	2120      	movs	r1, #32
 8002078:	2001      	movs	r0, #1
 800207a:	f000 f89c 	bl	80021b6 <groveLCD_setReg>

    groveLCD_setColorWhite();
 800207e:	f000 f80f 	bl	80020a0 <groveLCD_setColorWhite>

}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20004bd8 	.word	0x20004bd8
 8002090:	20004bdb 	.word	0x20004bdb
 8002094:	20004bdc 	.word	0x20004bdc
 8002098:	20004bd9 	.word	0x20004bd9
 800209c:	20004bda 	.word	0x20004bda

080020a0 <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	22ff      	movs	r2, #255	; 0xff
 80020a6:	21ff      	movs	r1, #255	; 0xff
 80020a8:	20ff      	movs	r0, #255	; 0xff
 80020aa:	f000 f896 	bl	80021da <groveLCD_setRGB>
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80020b6:	2001      	movs	r0, #1
 80020b8:	f000 f840 	bl	800213c <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 80020bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020c0:	f002 fe94 	bl	8004dec <HAL_Delay>
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	460a      	mov	r2, r1
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	4613      	mov	r3, r2
 80020d6:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <groveLCD_setCursor+0x20>
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	e003      	b.n	80020f0 <groveLCD_setCursor+0x28>
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	733b      	strb	r3, [r7, #12]
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	2102      	movs	r1, #2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff3f 	bl	8001f84 <i2c_send_byteS>
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <groveLCD_display+0x28>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <groveLCD_display+0x28>)
 8002120:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <groveLCD_display+0x28>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f043 0308 	orr.w	r3, r3, #8
 800212a:	b2db      	uxtb	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	f000 f805 	bl	800213c <groveLCD_command>
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20004bd9 	.word	0x20004bd9

0800213c <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	733b      	strb	r3, [r7, #12]
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	2102      	movs	r1, #2
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff15 	bl	8001f84 <i2c_send_byteS>
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 800216c:	2340      	movs	r3, #64	; 0x40
 800216e:	733b      	strb	r3, [r7, #12]
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	2102      	movs	r1, #2
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff02 	bl	8001f84 <i2c_send_byteS>
    return 1; // assume sucess
 8002180:	2301      	movs	r3, #1
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 8002192:	e007      	b.n	80021a4 <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ffe2 	bl	8002162 <groveLCD_write>
		s++;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3301      	adds	r3, #1
 80021a2:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f3      	bne.n	8002194 <groveLCD_putString+0xa>
	}
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	460a      	mov	r2, r1
 80021c0:	71fb      	strb	r3, [r7, #7]
 80021c2:	4613      	mov	r3, r2
 80021c4:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 80021c6:	1dba      	adds	r2, r7, #6
 80021c8:	79f9      	ldrb	r1, [r7, #7]
 80021ca:	2301      	movs	r3, #1
 80021cc:	20c4      	movs	r0, #196	; 0xc4
 80021ce:	f7ff fe17 	bl	8001e00 <i2c1_WriteRegBuffer>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
 80021e4:	460b      	mov	r3, r1
 80021e6:	71bb      	strb	r3, [r7, #6]
 80021e8:	4613      	mov	r3, r2
 80021ea:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	4619      	mov	r1, r3
 80021f0:	2004      	movs	r0, #4
 80021f2:	f7ff ffe0 	bl	80021b6 <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 80021f6:	79bb      	ldrb	r3, [r7, #6]
 80021f8:	4619      	mov	r1, r3
 80021fa:	2003      	movs	r0, #3
 80021fc:	f7ff ffdb 	bl	80021b6 <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 8002200:	797b      	ldrb	r3, [r7, #5]
 8002202:	4619      	mov	r1, r3
 8002204:	2002      	movs	r0, #2
 8002206:	f7ff ffd6 	bl	80021b6 <groveLCD_setReg>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <groveLCD_setColor>:
    {0, 255, 0},                // green
    {0, 0, 255},                // blue
};
//=================================================================
void groveLCD_setColor(unsigned char color)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
    if(color > 3)return ;
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d81a      	bhi.n	800225a <groveLCD_setColor+0x46>
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
 8002224:	79fa      	ldrb	r2, [r7, #7]
 8002226:	490f      	ldr	r1, [pc, #60]	; (8002264 <groveLCD_setColor+0x50>)
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	440b      	add	r3, r1
 8002230:	7818      	ldrb	r0, [r3, #0]
 8002232:	79fa      	ldrb	r2, [r7, #7]
 8002234:	490b      	ldr	r1, [pc, #44]	; (8002264 <groveLCD_setColor+0x50>)
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	440b      	add	r3, r1
 800223e:	3301      	adds	r3, #1
 8002240:	7819      	ldrb	r1, [r3, #0]
 8002242:	79fa      	ldrb	r2, [r7, #7]
 8002244:	4c07      	ldr	r4, [pc, #28]	; (8002264 <groveLCD_setColor+0x50>)
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	4423      	add	r3, r4
 800224e:	3302      	adds	r3, #2
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	f7ff ffc1 	bl	80021da <groveLCD_setRGB>
 8002258:	e000      	b.n	800225c <groveLCD_setColor+0x48>
    if(color > 3)return ;
 800225a:	bf00      	nop
}
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bd90      	pop	{r4, r7, pc}
 8002262:	bf00      	nop
 8002264:	0801b7fc 	.word	0x0801b7fc

08002268 <groveLCD_term_printf>:
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 8002268:	b40f      	push	{r0, r1, r2, r3}
 800226a:	b5b0      	push	{r4, r5, r7, lr}
 800226c:	b0a4      	sub	sp, #144	; 0x90
 800226e:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8002270:	2300      	movs	r3, #0
 8002272:	677b      	str	r3, [r7, #116]	; 0x74

	va_start(ap, fmt);
 8002274:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002278:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 800227a:	e1cd      	b.n	8002618 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 800227c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b25      	cmp	r3, #37	; 0x25
 8002284:	f040 81bd 	bne.w	8002602 <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 8002288:	2300      	movs	r3, #0
 800228a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800228c:	2301      	movs	r3, #1
 800228e:	67bb      	str	r3, [r7, #120]	; 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 8002290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002294:	3301      	adds	r3, #1
 8002296:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800229a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b30      	cmp	r3, #48	; 0x30
 80022a2:	d106      	bne.n	80022b2 <groveLCD_term_printf+0x4a>
 80022a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022a8:	3301      	adds	r3, #1
 80022aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022ae:	2300      	movs	r3, #0
 80022b0:	67bb      	str	r3, [r7, #120]	; 0x78
			ch=*fmt;
 80022b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 80022bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022c0:	2b30      	cmp	r3, #48	; 0x30
 80022c2:	d92c      	bls.n	800231e <groveLCD_term_printf+0xb6>
 80022c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022c8:	2b39      	cmp	r3, #57	; 0x39
 80022ca:	d828      	bhi.n	800231e <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	673b      	str	r3, [r7, #112]	; 0x70
				while ((ch>='0') && (ch<='9')) {
 80022d0:	e012      	b.n	80022f8 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 80022d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	673a      	str	r2, [r7, #112]	; 0x70
 80022d8:	3388      	adds	r3, #136	; 0x88
 80022da:	443b      	add	r3, r7
 80022dc:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80022e0:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 80022e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022e8:	3301      	adds	r3, #1
 80022ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				while ((ch>='0') && (ch<='9')) {
 80022f8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022fc:	2b2f      	cmp	r3, #47	; 0x2f
 80022fe:	d903      	bls.n	8002308 <groveLCD_term_printf+0xa0>
 8002300:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002304:	2b39      	cmp	r3, #57	; 0x39
 8002306:	d9e4      	bls.n	80022d2 <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 8002308:	463a      	mov	r2, r7
 800230a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800230c:	4413      	add	r3, r2
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 8002312:	463b      	mov	r3, r7
 8002314:	210a      	movs	r1, #10
 8002316:	4618      	mov	r0, r3
 8002318:	f002 fba4 	bl	8004a64 <str2num>
 800231c:	67f8      	str	r0, [r7, #124]	; 0x7c
			}
			switch (ch) {
 800231e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002322:	2b25      	cmp	r3, #37	; 0x25
 8002324:	d03c      	beq.n	80023a0 <groveLCD_term_printf+0x138>
 8002326:	2b25      	cmp	r3, #37	; 0x25
 8002328:	f2c0 8164 	blt.w	80025f4 <groveLCD_term_printf+0x38c>
 800232c:	2b78      	cmp	r3, #120	; 0x78
 800232e:	f300 8161 	bgt.w	80025f4 <groveLCD_term_printf+0x38c>
 8002332:	2b63      	cmp	r3, #99	; 0x63
 8002334:	f2c0 815e 	blt.w	80025f4 <groveLCD_term_printf+0x38c>
 8002338:	3b63      	subs	r3, #99	; 0x63
 800233a:	2b15      	cmp	r3, #21
 800233c:	f200 815a 	bhi.w	80025f4 <groveLCD_term_printf+0x38c>
 8002340:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <groveLCD_term_printf+0xe0>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	080023a9 	.word	0x080023a9
 800234c:	080023d3 	.word	0x080023d3
 8002350:	080025f5 	.word	0x080025f5
 8002354:	080024d3 	.word	0x080024d3
 8002358:	080025f5 	.word	0x080025f5
 800235c:	080025f5 	.word	0x080025f5
 8002360:	080025f5 	.word	0x080025f5
 8002364:	080025f5 	.word	0x080025f5
 8002368:	080025f5 	.word	0x080025f5
 800236c:	080025f5 	.word	0x080025f5
 8002370:	080025f5 	.word	0x080025f5
 8002374:	080025f5 	.word	0x080025f5
 8002378:	08002443 	.word	0x08002443
 800237c:	0800246f 	.word	0x0800246f
 8002380:	080025f5 	.word	0x080025f5
 8002384:	080025f5 	.word	0x080025f5
 8002388:	080023c1 	.word	0x080023c1
 800238c:	080025f5 	.word	0x080025f5
 8002390:	08002417 	.word	0x08002417
 8002394:	080025f5 	.word	0x080025f5
 8002398:	080025f5 	.word	0x080025f5
 800239c:	080024a7 	.word	0x080024a7
				case '%':
					groveLCD_write('%');
 80023a0:	2025      	movs	r0, #37	; 0x25
 80023a2:	f7ff fede 	bl	8002162 <groveLCD_write>
					break;
 80023a6:	e132      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 80023a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023aa:	1d1a      	adds	r2, r3, #4
 80023ac:	64ba      	str	r2, [r7, #72]	; 0x48
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					groveLCD_write(ch);
 80023b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fed2 	bl	8002162 <groveLCD_write>
					break;
 80023be:	e126      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 80023c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c2:	1d1a      	adds	r2, r3, #4
 80023c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	66fb      	str	r3, [r7, #108]	; 0x6c
					groveLCD_putString(p);
 80023ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80023cc:	f7ff fedd 	bl	800218a <groveLCD_putString>
					break;
 80023d0:	e11d      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 80023d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d4:	1d1a      	adds	r2, r3, #4
 80023d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if ((long)ul < 0) {
 80023de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	da07      	bge.n	80023f6 <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 80023e6:	202d      	movs	r0, #45	; 0x2d
 80023e8:	f7ff febb 	bl	8002162 <groveLCD_write>
						ul = -(long)ul;
 80023ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023f0:	425b      	negs	r3, r3
 80023f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 80023f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023f8:	f107 000c 	add.w	r0, r7, #12
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002400:	220a      	movs	r2, #10
 8002402:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002406:	f002 faa9 	bl	800495c <num2str>
					groveLCD_putString(s);
 800240a:	f107 030c 	add.w	r3, r7, #12
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff febb 	bl	800218a <groveLCD_putString>
					break;
 8002414:	e0fb      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 8002416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002418:	1d1a      	adds	r2, r3, #4
 800241a:	64ba      	str	r2, [r7, #72]	; 0x48
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 10, size, sp);
 8002422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002424:	f107 000c 	add.w	r0, r7, #12
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800242c:	220a      	movs	r2, #10
 800242e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002432:	f002 fa93 	bl	800495c <num2str>
					groveLCD_putString(s);
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fea5 	bl	800218a <groveLCD_putString>
					break;
 8002440:	e0e5      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 8002442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002444:	1d1a      	adds	r2, r3, #4
 8002446:	64ba      	str	r2, [r7, #72]	; 0x48
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 8, size, sp);
 800244e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002450:	f107 000c 	add.w	r0, r7, #12
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002458:	2208      	movs	r2, #8
 800245a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800245e:	f002 fa7d 	bl	800495c <num2str>
					groveLCD_putString(s);
 8002462:	f107 030c 	add.w	r3, r7, #12
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fe8f 	bl	800218a <groveLCD_putString>
					break;
 800246c:	e0cf      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 800246e:	2030      	movs	r0, #48	; 0x30
 8002470:	f7ff fe77 	bl	8002162 <groveLCD_write>
					groveLCD_write('x');
 8002474:	2078      	movs	r0, #120	; 0x78
 8002476:	f7ff fe74 	bl	8002162 <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 800247a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800247c:	1d1a      	adds	r2, r3, #4
 800247e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 8002486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002488:	f107 000c 	add.w	r0, r7, #12
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002490:	2210      	movs	r2, #16
 8002492:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002496:	f002 fa61 	bl	800495c <num2str>
					groveLCD_putString(s);
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fe73 	bl	800218a <groveLCD_putString>
					break;
 80024a4:	e0b3      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 80024a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a8:	1d1a      	adds	r2, r3, #4
 80024aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 80024b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b4:	f107 000c 	add.w	r0, r7, #12
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024bc:	2210      	movs	r2, #16
 80024be:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80024c2:	f002 fa4b 	bl	800495c <num2str>
					groveLCD_putString(s);
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fe5d 	bl	800218a <groveLCD_putString>
					break;
 80024d0:	e09d      	b.n	800260e <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 80024d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10c      	bne.n	80024f2 <groveLCD_term_printf+0x28a>
 80024d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024da:	3307      	adds	r3, #7
 80024dc:	f023 0307 	bic.w	r3, r3, #7
 80024e0:	f103 0208 	add.w	r2, r3, #8
 80024e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80024ee:	2301      	movs	r3, #1
 80024f0:	677b      	str	r3, [r7, #116]	; 0x74
					ull = va_arg(ap, long long unsigned int);
 80024f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f4:	3307      	adds	r3, #7
 80024f6:	f023 0307 	bic.w	r3, r3, #7
 80024fa:	f103 0208 	add.w	r2, r3, #8
 80024fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 8002508:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	0fc2      	lsrs	r2, r0, #31
 8002516:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800251a:	0fcb      	lsrs	r3, r1, #31
 800251c:	4613      	mov	r3, r2
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	65fb      	str	r3, [r7, #92]	; 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 8002524:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800252a:	65bb      	str	r3, [r7, #88]	; 0x58
					float mf = (float)m ;
 800252c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002536:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf / pow(2.0,20.0);
 800253a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800253e:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002640 <groveLCD_term_printf+0x3d8>
 8002542:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002546:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf + 1.0;
 800254a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800254e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002552:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002556:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 800255a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	0dc2      	lsrs	r2, r0, #23
 8002568:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800256c:	0dcb      	lsrs	r3, r1, #23
 800256e:	4613      	mov	r3, r2
 8002570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002574:	653b      	str	r3, [r7, #80]	; 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 8002576:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	0d02      	lsrs	r2, r0, #20
 8002584:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002588:	0d0b      	lsrs	r3, r1, #20
 800258a:	4613      	mov	r3, r2
 800258c:	f003 020f 	and.w	r2, r3, #15
 8002590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002592:	4313      	orrs	r3, r2
 8002594:	653b      	str	r3, [r7, #80]	; 0x50
					e = e - 127;
 8002596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002598:	3b7f      	subs	r3, #127	; 0x7f
 800259a:	653b      	str	r3, [r7, #80]	; 0x50
					float f = mf*myPow(2.0,e);
 800259c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800259e:	f7fd ffeb 	bl	8000578 <__aeabi_f2d>
 80025a2:	4604      	mov	r4, r0
 80025a4:	460d      	mov	r5, r1
 80025a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80025a8:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8002638 <groveLCD_term_printf+0x3d0>
 80025ac:	f002 fb68 	bl	8004c80 <myPow>
 80025b0:	ec53 2b10 	vmov	r2, r3, d0
 80025b4:	4620      	mov	r0, r4
 80025b6:	4629      	mov	r1, r5
 80025b8:	f7fe f836 	bl	8000628 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f7fe faca 	bl	8000b5c <__aeabi_d2f>
 80025c8:	4603      	mov	r3, r0
 80025ca:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ groveLCD_write('-'); }
 80025cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <groveLCD_term_printf+0x370>
 80025d2:	202d      	movs	r0, #45	; 0x2d
 80025d4:	f7ff fdc5 	bl	8002162 <groveLCD_write>
					float2str((char*)s, f, 5);
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	2105      	movs	r1, #5
 80025de:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 fafc 	bl	8004be0 <float2str>
					groveLCD_putString((char*)s);
 80025e8:	f107 030c 	add.w	r3, r7, #12
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fdcc 	bl	800218a <groveLCD_putString>
					break;
 80025f2:	e00c      	b.n	800260e <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 80025f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fdb1 	bl	8002162 <groveLCD_write>
 8002600:	e005      	b.n	800260e <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 8002602:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fdaa 	bl	8002162 <groveLCD_write>
		fmt++;
 800260e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002612:	3301      	adds	r3, #1
 8002614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*fmt != '\0') {
 8002618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f47f ae2c 	bne.w	800227c <groveLCD_term_printf+0x14>
	}
	va_end(ap);
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	3788      	adds	r7, #136	; 0x88
 800262a:	46bd      	mov	sp, r7
 800262c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002630:	b004      	add	sp, #16
 8002632:	4770      	bx	lr
 8002634:	f3af 8000 	nop.w
 8002638:	00000000 	.word	0x00000000
 800263c:	40000000 	.word	0x40000000
 8002640:	49800000 	.word	0x49800000
 8002644:	00000000 	.word	0x00000000

08002648 <microros_task>:
/**
 * microros_task
 * effectue la liaison entre la RPI et la tache decision
 */
void microros_task(void *argument)
{
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b0e8      	sub	sp, #416	; 0x1a0
 800264c:	af02      	add	r7, sp, #8
 800264e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002652:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002656:	6018      	str	r0, [r3, #0]
	MicroRosPubMsg MsgToPub = {'s', 0, 0, 0};
 8002658:	2373      	movs	r3, #115	; 0x73
 800265a:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	MicroRosSubMsg SubToMsg = {0, 0, 0, 0, 0};
 8002670:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]

#if SYNCHRO_EX == EXFINAL
	/* PUBLISHER */
	//Use to publish the direction of robot in sensor mode
	rcl_publisher_t capteur_dir_pub;
	char* capteur_dir_topic = "capteur/dir";
 8002680:	4bba      	ldr	r3, [pc, #744]	; (800296c <microros_task+0x324>)
 8002682:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	std_msgs__msg__Int32 capteur_dir_msg;
	//Use to publish the actual mode of the robot
	rcl_publisher_t etat_mode_pub;
	char* etat_mode_topic = "etat/mode";
 8002686:	4bba      	ldr	r3, [pc, #744]	; (8002970 <microros_task+0x328>)
 8002688:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	std_msgs__msg__Int32 etat_mode_msg;
	//Use to publish the actual speed of the robot
	rcl_publisher_t etat_speed_pub;
	char* etat_speed_topic = "etat/speed";
 800268c:	4bb9      	ldr	r3, [pc, #740]	; (8002974 <microros_task+0x32c>)
 800268e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	std_msgs__msg__Int32 etat_speed_msg;

	/* SUBSCRIBER */
	//Use to receive the x position of object see by the camera
	rcl_subscription_t camera_x_sub;
	char* camera_x_topic = "camera/x";
 8002692:	4bb9      	ldr	r3, [pc, #740]	; (8002978 <microros_task+0x330>)
 8002694:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	std_msgs__msg__Int32 camera_x_msg;
	//Use to receive the y position of object see by the camera
	rcl_subscription_t camera_y_sub;
	char* camera_y_topic = "camera/y";
 8002698:	4bb8      	ldr	r3, [pc, #736]	; (800297c <microros_task+0x334>)
 800269a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	std_msgs__msg__Int32 camera_y_msg;
	//Use to receive the remote control in remote mode
	rcl_subscription_t telecommande_dir_sub;
	char* telecommande_dir_topic = "telecommande/dir";
 800269e:	4bb8      	ldr	r3, [pc, #736]	; (8002980 <microros_task+0x338>)
 80026a0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	std_msgs__msg__Int32 telecommande_dir_msg;
	//Use to receive the mode config
	rcl_subscription_t config_mode_sub;
	char* config_mode_topic = "config/mode";
 80026a4:	4bb7      	ldr	r3, [pc, #732]	; (8002984 <microros_task+0x33c>)
 80026a6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	std_msgs__msg__Int32 config_mode_msg;
	//Use to receive the speed config
	rcl_subscription_t config_speed_sub;
	char* config_speed_topic = "config/speed";
 80026aa:	4bb7      	ldr	r3, [pc, #732]	; (8002988 <microros_task+0x340>)
 80026ac:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	rcl_subscription_t subscriber;
	std_msgs__msg__String msg;
#endif //SYNCHRO_EX

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 80026b0:	4bb6      	ldr	r3, [pc, #728]	; (800298c <microros_task+0x344>)
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	4bb6      	ldr	r3, [pc, #728]	; (8002990 <microros_task+0x348>)
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	4bb6      	ldr	r3, [pc, #728]	; (8002994 <microros_task+0x34c>)
 80026ba:	4ab7      	ldr	r2, [pc, #732]	; (8002998 <microros_task+0x350>)
 80026bc:	49b7      	ldr	r1, [pc, #732]	; (800299c <microros_task+0x354>)
 80026be:	2001      	movs	r0, #1
 80026c0:	f00d fa84 	bl	800fbcc <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80026c4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80026c8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00c ffe7 	bl	800f6a0 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80026d2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80026d6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026da:	4ab1      	ldr	r2, [pc, #708]	; (80029a0 <microros_task+0x358>)
 80026dc:	601a      	str	r2, [r3, #0]
	freeRTOS_allocator.deallocate = microros_deallocate;
 80026de:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80026e2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026e6:	4aaf      	ldr	r2, [pc, #700]	; (80029a4 <microros_task+0x35c>)
 80026e8:	605a      	str	r2, [r3, #4]
	freeRTOS_allocator.reallocate = microros_reallocate;
 80026ea:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80026ee:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026f2:	4aad      	ldr	r2, [pc, #692]	; (80029a8 <microros_task+0x360>)
 80026f4:	609a      	str	r2, [r3, #8]
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80026f6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80026fa:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026fe:	4aab      	ldr	r2, [pc, #684]	; (80029ac <microros_task+0x364>)
 8002700:	60da      	str	r2, [r3, #12]

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002706:	4618      	mov	r0, r3
 8002708:	f00c ffd8 	bl	800f6bc <rcutils_set_default_allocator>
 800270c:	4603      	mov	r3, r0
 800270e:	f083 0301 	eor.w	r3, r3, #1
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <microros_task+0xd8>
		printf("Error on default allocators (line %d)\r\n", __LINE__);
 8002718:	21b8      	movs	r1, #184	; 0xb8
 800271a:	48a5      	ldr	r0, [pc, #660]	; (80029b0 <microros_task+0x368>)
 800271c:	f017 fce0 	bl	801a0e0 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 8002720:	463b      	mov	r3, r7
 8002722:	4618      	mov	r0, r3
 8002724:	f00c ffea 	bl	800f6fc <rcutils_get_default_allocator>
 8002728:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800272c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002730:	f507 7482 	add.w	r4, r7, #260	; 0x104
 8002734:	461d      	mov	r5, r3
 8002736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800273a:	682b      	ldr	r3, [r5, #0]
 800273c:	6023      	str	r3, [r4, #0]

	//create init_options
	CHECKMRRET(rclc_support_init(&support, 0, NULL, &allocator), "error on init support");
 800273e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002742:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	f00c feaf 	bl	800f4ac <rclc_support_init>
 800274e:	4603      	mov	r3, r0
 8002750:	4998      	ldr	r1, [pc, #608]	; (80029b4 <microros_task+0x36c>)
 8002752:	4618      	mov	r0, r3
 8002754:	f000 ff36 	bl	80035c4 <CHECKMRRET>
	// create node
	CHECKMRRET(rclc_node_init_default(&node, "STM32_node", "", &support), "error on init node");
 8002758:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800275c:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8002760:	4a95      	ldr	r2, [pc, #596]	; (80029b8 <microros_task+0x370>)
 8002762:	4996      	ldr	r1, [pc, #600]	; (80029bc <microros_task+0x374>)
 8002764:	f00c fef0 	bl	800f548 <rclc_node_init_default>
 8002768:	4603      	mov	r3, r0
 800276a:	4995      	ldr	r1, [pc, #596]	; (80029c0 <microros_task+0x378>)
 800276c:	4618      	mov	r0, r3
 800276e:	f000 ff29 	bl	80035c4 <CHECKMRRET>

#if SYNCHRO_EX == EXFINAL
	// create publisher
	createPublisher(&capteur_dir_pub, &node,
 8002772:	f00e f89b 	bl	80108ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002776:	4602      	mov	r2, r0
 8002778:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 800277c:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002780:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800278a:	f000 ff41 	bl	8003610 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		capteur_dir_topic, &capteur_dir_msg);

	createPublisher(&etat_mode_pub, &node,
 800278e:	f00e f88d 	bl	80108ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002792:	4602      	mov	r2, r0
 8002794:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8002798:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800279c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80027a6:	f000 ff33 	bl	8003610 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_mode_topic, &etat_mode_msg);

	createPublisher(&etat_speed_pub, &node,
 80027aa:	f00e f87f 	bl	80108ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80027ae:	4602      	mov	r2, r0
 80027b0:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80027b4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80027b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80027c2:	f000 ff25 	bl	8003610 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_speed_topic, &etat_speed_msg);

	//create subscriber
	createSubscriber(&camera_x_sub,&node,
 80027c6:	f00e f871 	bl	80108ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80027ca:	4602      	mov	r2, r0
 80027cc:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80027d0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80027d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80027de:	f000 ff33 	bl	8003648 <createSubscriber>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		camera_x_topic, &camera_x_msg);

	createSubscriber(&camera_y_sub,&node,
 80027e2:	f00e f863 	bl	80108ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80027e6:	4602      	mov	r2, r0
 80027e8:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80027ec:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80027f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80027fa:	f000 ff25 	bl	8003648 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			camera_y_topic, &camera_y_msg);

	createSubscriber(&telecommande_dir_sub,&node,
 80027fe:	f00e f855 	bl	80108ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002802:	4602      	mov	r2, r0
 8002804:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8002808:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800280c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002816:	f000 ff17 	bl	8003648 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			telecommande_dir_topic, &telecommande_dir_msg);

	createSubscriber(&config_mode_sub,&node,
 800281a:	f00e f847 	bl	80108ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800281e:	4602      	mov	r2, r0
 8002820:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8002824:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002828:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002832:	f000 ff09 	bl	8003648 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_mode_topic, &config_mode_msg);

	createSubscriber(&config_speed_sub,&node,
 8002836:	f00e f839 	bl	80108ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800283a:	4602      	mov	r2, r0
 800283c:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8002840:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002844:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800284e:	f000 fefb 	bl	8003648 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_speed_topic, &config_speed_msg);

	CHECKMRRET(rclc_executor_init(&executor, &support.context, 5, &allocator), "Error on init executor");
 8002852:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8002856:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800285a:	1d19      	adds	r1, r3, #4
 800285c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002860:	4613      	mov	r3, r2
 8002862:	2205      	movs	r2, #5
 8002864:	f00c fbc4 	bl	800eff0 <rclc_executor_init>
 8002868:	4603      	mov	r3, r0
 800286a:	4956      	ldr	r1, [pc, #344]	; (80029c4 <microros_task+0x37c>)
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fea9 	bl	80035c4 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_x_sub, &camera_x_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_x_sub");
 8002872:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002876:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800287a:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800287e:	2300      	movs	r3, #0
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	4b51      	ldr	r3, [pc, #324]	; (80029c8 <microros_task+0x380>)
 8002884:	f00c fc28 	bl	800f0d8 <rclc_executor_add_subscription>
 8002888:	4603      	mov	r3, r0
 800288a:	4950      	ldr	r1, [pc, #320]	; (80029cc <microros_task+0x384>)
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fe99 	bl	80035c4 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_y_sub, &camera_y_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_y_sub");
 8002892:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002896:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800289a:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800289e:	2300      	movs	r3, #0
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	4b49      	ldr	r3, [pc, #292]	; (80029c8 <microros_task+0x380>)
 80028a4:	f00c fc18 	bl	800f0d8 <rclc_executor_add_subscription>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4949      	ldr	r1, [pc, #292]	; (80029d0 <microros_task+0x388>)
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fe89 	bl	80035c4 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &telecommande_dir_sub, &telecommande_dir_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add telecommande_dir_sub");
 80028b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80028b6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80028ba:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80028be:	2300      	movs	r3, #0
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <microros_task+0x380>)
 80028c4:	f00c fc08 	bl	800f0d8 <rclc_executor_add_subscription>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4942      	ldr	r1, [pc, #264]	; (80029d4 <microros_task+0x38c>)
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fe79 	bl	80035c4 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_mode_sub, &config_mode_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_mode_sub");
 80028d2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80028d6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80028da:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80028de:	2300      	movs	r3, #0
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <microros_task+0x380>)
 80028e4:	f00c fbf8 	bl	800f0d8 <rclc_executor_add_subscription>
 80028e8:	4603      	mov	r3, r0
 80028ea:	493b      	ldr	r1, [pc, #236]	; (80029d8 <microros_task+0x390>)
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fe69 	bl	80035c4 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_speed_sub, &config_speed_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_speed_sub");
 80028f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80028f6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80028fa:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80028fe:	2300      	movs	r3, #0
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <microros_task+0x380>)
 8002904:	f00c fbe8 	bl	800f0d8 <rclc_executor_add_subscription>
 8002908:	4603      	mov	r3, r0
 800290a:	4934      	ldr	r1, [pc, #208]	; (80029dc <microros_task+0x394>)
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fe59 	bl	80035c4 <CHECKMRRET>
		if (ret != RCL_RET_OK)
			printf("Error publishing (line %d)\r\n", __LINE__);
#elif SYNCHRO_EX == TESTMR
	ret = rclc_executor_spin_some(&executor, 100*1000*1000);
#elif SYNCHRO_EX == EXFINAL
		xQueueSend(qhMR_sub, ( void * ) &SubToMsg, portMAX_DELAY);
 8002912:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <microros_task+0x398>)
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800291a:	2300      	movs	r3, #0
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	f009 fad4 	bl	800becc <xQueueGenericSend>
		xQueueReceive(qhMR_pub, &MsgToPub, portMAX_DELAY);
 8002924:	4b2f      	ldr	r3, [pc, #188]	; (80029e4 <microros_task+0x39c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	4618      	mov	r0, r3
 8002932:	f009 fc65 	bl	800c200 <xQueueReceive>

		if (MsgToPub.isGood == 1)
 8002936:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800293a:	2b01      	cmp	r3, #1
 800293c:	d154      	bne.n	80029e8 <microros_task+0x3a0>
		{
			capteur_dir_msg.data = (int)MsgToPub.dir;
 800293e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 8002942:	461a      	mov	r2, r3
 8002944:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002948:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800294c:	601a      	str	r2, [r3, #0]
			etat_mode_msg.data = MsgToPub.mode;
 800294e:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8002952:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800295a:	601a      	str	r2, [r3, #0]
			etat_speed_msg.data = MsgToPub.speed;
 800295c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8002960:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002964:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e042      	b.n	80029f2 <microros_task+0x3aa>
 800296c:	0801b41c 	.word	0x0801b41c
 8002970:	0801b428 	.word	0x0801b428
 8002974:	0801b434 	.word	0x0801b434
 8002978:	0801b440 	.word	0x0801b440
 800297c:	0801b44c 	.word	0x0801b44c
 8002980:	0801b458 	.word	0x0801b458
 8002984:	0801b46c 	.word	0x0801b46c
 8002988:	0801b478 	.word	0x0801b478
 800298c:	08001b31 	.word	0x08001b31
 8002990:	08001ac9 	.word	0x08001ac9
 8002994:	08001aa9 	.word	0x08001aa9
 8002998:	08001a7d 	.word	0x08001a7d
 800299c:	200049d0 	.word	0x200049d0
 80029a0:	0800368d 	.word	0x0800368d
 80029a4:	080036d1 	.word	0x080036d1
 80029a8:	08003709 	.word	0x08003709
 80029ac:	08003775 	.word	0x08003775
 80029b0:	0801b488 	.word	0x0801b488
 80029b4:	0801b4b0 	.word	0x0801b4b0
 80029b8:	0801b4c8 	.word	0x0801b4c8
 80029bc:	0801b4cc 	.word	0x0801b4cc
 80029c0:	0801b4d8 	.word	0x0801b4d8
 80029c4:	0801b4ec 	.word	0x0801b4ec
 80029c8:	080035ed 	.word	0x080035ed
 80029cc:	0801b504 	.word	0x0801b504
 80029d0:	0801b51c 	.word	0x0801b51c
 80029d4:	0801b534 	.word	0x0801b534
 80029d8:	0801b554 	.word	0x0801b554
 80029dc:	0801b570 	.word	0x0801b570
 80029e0:	20004bec 	.word	0x20004bec
 80029e4:	20004bf0 	.word	0x20004bf0
		}
		else
			printf("Error when receive qhMR_pub on line %d", __LINE__);
 80029e8:	f240 1117 	movw	r1, #279	; 0x117
 80029ec:	4830      	ldr	r0, [pc, #192]	; (8002ab0 <microros_task+0x468>)
 80029ee:	f017 fb77 	bl	801a0e0 <iprintf>

		CHECKMRRET(rcl_publish(&capteur_dir_pub, &capteur_dir_msg, NULL), "erreur publish capteur_dir_pub");
 80029f2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80029f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029fa:	2200      	movs	r2, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f00c f863 	bl	800eac8 <rcl_publish>
 8002a02:	4603      	mov	r3, r0
 8002a04:	492b      	ldr	r1, [pc, #172]	; (8002ab4 <microros_task+0x46c>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fddc 	bl	80035c4 <CHECKMRRET>
		CHECKMRRET(rcl_publish(&etat_mode_pub, &etat_mode_msg, NULL), "erreur publish etat_mode_pub");
 8002a0c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002a10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a14:	2200      	movs	r2, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f00c f856 	bl	800eac8 <rcl_publish>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4926      	ldr	r1, [pc, #152]	; (8002ab8 <microros_task+0x470>)
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fdcf 	bl	80035c4 <CHECKMRRET>
		CHECKMRRET(rcl_publish(&etat_speed_pub, &etat_speed_msg, NULL), "erreur publish etat_speed_pub");
 8002a26:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002a2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f00c f849 	bl	800eac8 <rcl_publish>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4920      	ldr	r1, [pc, #128]	; (8002abc <microros_task+0x474>)
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fdc2 	bl	80035c4 <CHECKMRRET>
		//printf("Receive from decision :\r\nDirection : %d\r\nMode : %d\r\nSpeed : %d\r\n", capteur_dir_msg.data, etat_mode_msg.data, etat_speed_msg.data);

		ret = rclc_executor_spin_some(&executor, 100*1000*1000);
 8002a40:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002a44:	a318      	add	r3, pc, #96	; (adr r3, 8002aa8 <microros_task+0x460>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	4608      	mov	r0, r1
 8002a4c:	f00c fcf8 	bl	800f440 <rclc_executor_spin_some>
 8002a50:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
		SubToMsg.dir = telecommande_dir_msg.data;
 8002a54:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002a58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		SubToMsg.x = camera_x_msg.data;
 8002a62:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002a66:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
		SubToMsg.y = camera_y_msg.data;
 8002a70:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002a74:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		SubToMsg.mode = config_mode_msg.data;
 8002a7e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002a82:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
		SubToMsg.speed = config_speed_msg.data;
 8002a8c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002a90:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
#endif
		osDelay(10);
 8002a9a:	200a      	movs	r0, #10
 8002a9c:	f008 ffd4 	bl	800ba48 <osDelay>
		xQueueSend(qhMR_sub, ( void * ) &SubToMsg, portMAX_DELAY);
 8002aa0:	e737      	b.n	8002912 <microros_task+0x2ca>
 8002aa2:	bf00      	nop
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	05f5e100 	.word	0x05f5e100
 8002aac:	00000000 	.word	0x00000000
 8002ab0:	0801b58c 	.word	0x0801b58c
 8002ab4:	0801b5b4 	.word	0x0801b5b4
 8002ab8:	0801b5d4 	.word	0x0801b5d4
 8002abc:	0801b5f4 	.word	0x0801b5f4

08002ac0 <task_Motor_Left>:
	}
}
//========================================================================
static void task_Motor_Left(void *pvParameters)
{
 8002ac0:	b5b0      	push	{r4, r5, r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	int16_t consigne;

	float ui=0.0;
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
	float up;
	int err;
	int speed;
	int i=0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]

	for (;;)
	{
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <task_Motor_Left+0x100>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f107 010a 	add.w	r1, r7, #10
 8002ada:	f04f 32ff 	mov.w	r2, #4294967295
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f009 fb8e 	bl	800c200 <xQueueReceive>
		if (cmd == -1)
			cmd = lastCmd;
		else
			lastCmd = cmd;*/

		speed = quadEncoder_GetSpeedL();
 8002ae4:	f001 f86e 	bl	8003bc4 <quadEncoder_GetSpeedL>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	617b      	str	r3, [r7, #20]
		err=consigne-speed;
 8002aec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002af0:	461a      	mov	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	613b      	str	r3, [r7, #16]
		up=LKp*(float)err;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b02:	ee17 0a90 	vmov	r0, s15
 8002b06:	f7fd fd37 	bl	8000578 <__aeabi_f2d>
 8002b0a:	a329      	add	r3, pc, #164	; (adr r3, 8002bb0 <task_Motor_Left+0xf0>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fd8a 	bl	8000628 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f7fe f81e 	bl	8000b5c <__aeabi_d2f>
 8002b20:	4603      	mov	r3, r0
 8002b22:	60fb      	str	r3, [r7, #12]
		ui=ui+LKp*LKi*(float)err;
 8002b24:	69f8      	ldr	r0, [r7, #28]
 8002b26:	f7fd fd27 	bl	8000578 <__aeabi_f2d>
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	460d      	mov	r5, r1
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	ee07 3a90 	vmov	s15, r3
 8002b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b38:	ee17 0a90 	vmov	r0, s15
 8002b3c:	f7fd fd1c 	bl	8000578 <__aeabi_f2d>
 8002b40:	a31d      	add	r3, pc, #116	; (adr r3, 8002bb8 <task_Motor_Left+0xf8>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f7fd fd6f 	bl	8000628 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4620      	mov	r0, r4
 8002b50:	4629      	mov	r1, r5
 8002b52:	f7fd fbb3 	bl	80002bc <__adddf3>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f7fd fffd 	bl	8000b5c <__aeabi_d2f>
 8002b62:	4603      	mov	r3, r0
 8002b64:	61fb      	str	r3, [r7, #28]

		motorLeft_SetDuty(100+(int)(up+ui));
 8002b66:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b76:	ee17 3a90 	vmov	r3, s15
 8002b7a:	3364      	adds	r3, #100	; 0x64
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 ff45 	bl	8003a0c <motorLeft_SetDuty>

		if(i<NB)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2bc7      	cmp	r3, #199	; 0xc7
 8002b86:	dc08      	bgt.n	8002b9a <task_Motor_Left+0xda>
		{
			tab_speedL[i]=speed;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	b219      	sxth	r1, r3
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <task_Motor_Left+0x104>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			i++;
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	3301      	adds	r3, #1
 8002b98:	61bb      	str	r3, [r7, #24]
		}

		xSemaphoreGive( xSem_Supervision );
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <task_Motor_Left+0x108>)
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f009 f992 	bl	800becc <xQueueGenericSend>
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
 8002ba8:	e793      	b.n	8002ad2 <task_Motor_Left+0x12>
 8002baa:	bf00      	nop
 8002bac:	f3af 8000 	nop.w
 8002bb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bb4:	3f50624d 	.word	0x3f50624d
 8002bb8:	47ae147b 	.word	0x47ae147b
 8002bbc:	3f547ae1 	.word	0x3f547ae1
 8002bc0:	20004be4 	.word	0x20004be4
 8002bc4:	20004bfc 	.word	0x20004bfc
 8002bc8:	20004be0 	.word	0x20004be0
 8002bcc:	00000000 	.word	0x00000000

08002bd0 <task_Motor_Right>:
	}
}

//=========================================================================
static void task_Motor_Right(void *pvParameters)
{
 8002bd0:	b5b0      	push	{r4, r5, r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	int16_t consigne;

	float ui=0.0;
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
	float up;
	int err;
	int speed;
	int i=0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]

	for (;;)
	{
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
 8002be2:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <task_Motor_Right+0x100>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f107 010a 	add.w	r1, r7, #10
 8002bea:	f04f 32ff 	mov.w	r2, #4294967295
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f009 fb06 	bl	800c200 <xQueueReceive>
		if (cmd == -1)
			cmd = lastCmd;
		else
			lastCmd = cmd;*/

		speed = quadEncoder_GetSpeedR();
 8002bf4:	f001 f838 	bl	8003c68 <quadEncoder_GetSpeedR>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	617b      	str	r3, [r7, #20]
		err=consigne-speed;
 8002bfc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c00:	461a      	mov	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	613b      	str	r3, [r7, #16]
		up=RKp*(float)err;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c12:	ee17 0a90 	vmov	r0, s15
 8002c16:	f7fd fcaf 	bl	8000578 <__aeabi_f2d>
 8002c1a:	a329      	add	r3, pc, #164	; (adr r3, 8002cc0 <task_Motor_Right+0xf0>)
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fd02 	bl	8000628 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7fd ff96 	bl	8000b5c <__aeabi_d2f>
 8002c30:	4603      	mov	r3, r0
 8002c32:	60fb      	str	r3, [r7, #12]
		ui=ui+RKp*RKi*(float)err;
 8002c34:	69f8      	ldr	r0, [r7, #28]
 8002c36:	f7fd fc9f 	bl	8000578 <__aeabi_f2d>
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	460d      	mov	r5, r1
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c48:	ee17 0a90 	vmov	r0, s15
 8002c4c:	f7fd fc94 	bl	8000578 <__aeabi_f2d>
 8002c50:	a31d      	add	r3, pc, #116	; (adr r3, 8002cc8 <task_Motor_Right+0xf8>)
 8002c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c56:	f7fd fce7 	bl	8000628 <__aeabi_dmul>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4620      	mov	r0, r4
 8002c60:	4629      	mov	r1, r5
 8002c62:	f7fd fb2b 	bl	80002bc <__adddf3>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f7fd ff75 	bl	8000b5c <__aeabi_d2f>
 8002c72:	4603      	mov	r3, r0
 8002c74:	61fb      	str	r3, [r7, #28]

		motorRight_SetDuty(100+(int)(up+ui));
 8002c76:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c86:	ee17 3a90 	vmov	r3, s15
 8002c8a:	3364      	adds	r3, #100	; 0x64
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fecd 	bl	8003a2c <motorRight_SetDuty>

		if(i<NB)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2bc7      	cmp	r3, #199	; 0xc7
 8002c96:	dc08      	bgt.n	8002caa <task_Motor_Right+0xda>
		{
			tab_speedR[i]=speed;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	b219      	sxth	r1, r3
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <task_Motor_Right+0x104>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			i++;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	61bb      	str	r3, [r7, #24]
		}

		xSemaphoreGive( xSem_Supervision );
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <task_Motor_Right+0x108>)
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	f009 f90a 	bl	800becc <xQueueGenericSend>
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
 8002cb8:	e793      	b.n	8002be2 <task_Motor_Right+0x12>
 8002cba:	bf00      	nop
 8002cbc:	f3af 8000 	nop.w
 8002cc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002cc4:	3f50624d 	.word	0x3f50624d
 8002cc8:	47ae147b 	.word	0x47ae147b
 8002ccc:	3f547ae1 	.word	0x3f547ae1
 8002cd0:	20004be8 	.word	0x20004be8
 8002cd4:	20004d8c 	.word	0x20004d8c
 8002cd8:	20004be0 	.word	0x20004be0

08002cdc <task_VL53>:
}

//=========================================================================
#if VL53
static void task_VL53(void *pvParameters)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	static uint16_t dist;
	static const int SEUIL = 20;
	int obs = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		dist = readRangeSingleMillimeters()/10;
 8002ce8:	f7fe fbac 	bl	8001444 <readRangeSingleMillimeters>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <task_VL53+0x54>)
 8002cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf6:	08db      	lsrs	r3, r3, #3
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <task_VL53+0x58>)
 8002cfc:	801a      	strh	r2, [r3, #0]
		if (dist < SEUIL)
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <task_VL53+0x58>)
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <task_VL53+0x5c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	da02      	bge.n	8002d12 <task_VL53+0x36>
			obs = 1;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e001      	b.n	8002d16 <task_VL53+0x3a>
		else
			obs = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]

		xQueueSend(qhVl53, (void *)&obs, portMAX_DELAY);
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <task_VL53+0x60>)
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	f107 010c 	add.w	r1, r7, #12
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	f009 f8d2 	bl	800becc <xQueueGenericSend>

		HAL_Delay(100);
 8002d28:	2064      	movs	r0, #100	; 0x64
 8002d2a:	f002 f85f 	bl	8004dec <HAL_Delay>
		dist = readRangeSingleMillimeters()/10;
 8002d2e:	e7db      	b.n	8002ce8 <task_VL53+0xc>
 8002d30:	cccccccd 	.word	0xcccccccd
 8002d34:	20004f1c 	.word	0x20004f1c
 8002d38:	0801b808 	.word	0x0801b808
 8002d3c:	20004bf8 	.word	0x20004bf8

08002d40 <task_Supervision>:
}
#endif

//=========================================================================
static void task_Supervision(void *pvParameters)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b090      	sub	sp, #64	; 0x40
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
#elif SYNCHRO_EX == EXFINAL
	int16_t speedLeft;
	int16_t speedRight;

	int sensor_ir[2];
	int sensor_vl53 = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	633b      	str	r3, [r7, #48]	; 0x30
	MicroRosSubMsg SubToMsg; //Info receive from MicroRos
	MicroRosPubMsg MsgToPub; //Info give to MicroRos

	for (;;)
	{
		xQueueReceive(qhMR_sub, &SubToMsg, portMAX_DELAY); //For vl53
 8002d4c:	4b9b      	ldr	r3, [pc, #620]	; (8002fbc <task_Supervision+0x27c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f107 011c 	add.w	r1, r7, #28
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f009 fa51 	bl	800c200 <xQueueReceive>
		//printf("%cc%c[2J%c[0;0HWe receive from MR : \n\rDirection : %d\r\nMode: %d\r\nSpeed : %d\r\nX: %d\r\nY : %d\r\n", 0x1b, 0x1b, 0x1b, SubToMsg.dir, SubToMsg.mode, SubToMsg.speed, SubToMsg.x, SubToMsg.y);

		if (mode >= 0 && mode < MODE_LAST)
 8002d5e:	4b98      	ldr	r3, [pc, #608]	; (8002fc0 <task_Supervision+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	db1a      	blt.n	8002d9c <task_Supervision+0x5c>
 8002d66:	4b96      	ldr	r3, [pc, #600]	; (8002fc0 <task_Supervision+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	dc16      	bgt.n	8002d9c <task_Supervision+0x5c>
		{
			obs = 0;
 8002d6e:	4b95      	ldr	r3, [pc, #596]	; (8002fc4 <task_Supervision+0x284>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
			dir = 'N';
 8002d74:	4b94      	ldr	r3, [pc, #592]	; (8002fc8 <task_Supervision+0x288>)
 8002d76:	224e      	movs	r2, #78	; 0x4e
 8002d78:	701a      	strb	r2, [r3, #0]
			direction = STOP;
 8002d7a:	4b94      	ldr	r3, [pc, #592]	; (8002fcc <task_Supervision+0x28c>)
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	601a      	str	r2, [r3, #0]
			speed = LOW;
 8002d80:	4b93      	ldr	r3, [pc, #588]	; (8002fd0 <task_Supervision+0x290>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
			mode = SubToMsg.mode;
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	4a8d      	ldr	r2, [pc, #564]	; (8002fc0 <task_Supervision+0x280>)
 8002d8a:	6013      	str	r3, [r2, #0]
			x = (CAMERA_X_MAX-CAMERA_X_MIN)/2;
 8002d8c:	4b91      	ldr	r3, [pc, #580]	; (8002fd4 <task_Supervision+0x294>)
 8002d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d92:	601a      	str	r2, [r3, #0]
			y = (CAMERA_Y_MAX-CAMERA_Y_MIN)/2;
 8002d94:	4b90      	ldr	r3, [pc, #576]	; (8002fd8 <task_Supervision+0x298>)
 8002d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9a:	601a      	str	r2, [r3, #0]
		}

		if (mode == MODE_ZIG)
 8002d9c:	4b88      	ldr	r3, [pc, #544]	; (8002fc0 <task_Supervision+0x280>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	f040 811d 	bne.w	8002fe0 <task_Supervision+0x2a0>
		{
			#ifdef VL53
			xQueueReceive(qhVl53, &sensor_vl53, 1); //For VL53
 8002da6:	4b8d      	ldr	r3, [pc, #564]	; (8002fdc <task_Supervision+0x29c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002dae:	2201      	movs	r2, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f009 fa25 	bl	800c200 <xQueueReceive>
			#endif

			direction = SubToMsg.dir;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	4a84      	ldr	r2, [pc, #528]	; (8002fcc <task_Supervision+0x28c>)
 8002dba:	6013      	str	r3, [r2, #0]
			speed = SubToMsg.speed;
 8002dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbe:	4a84      	ldr	r2, [pc, #528]	; (8002fd0 <task_Supervision+0x290>)
 8002dc0:	6013      	str	r3, [r2, #0]
			switch(direction)
 8002dc2:	4b82      	ldr	r3, [pc, #520]	; (8002fcc <task_Supervision+0x28c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	f200 80f3 	bhi.w	8002fb2 <task_Supervision+0x272>
 8002dcc:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <task_Supervision+0x94>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002e03 	.word	0x08002e03
 8002dd8:	08002ea5 	.word	0x08002ea5
 8002ddc:	08002e35 	.word	0x08002e35
 8002de0:	08002e6f 	.word	0x08002e6f
 8002de4:	08002df9 	.word	0x08002df9
 8002de8:	08002edb 	.word	0x08002edb
 8002dec:	08002f0d 	.word	0x08002f0d
 8002df0:	08002f3f 	.word	0x08002f3f
 8002df4:	08002f79 	.word	0x08002f79
			{
				case STOP:
					speedLeft = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002e00:	e294      	b.n	800332c <task_Supervision+0x5ec>
				case AVANT:
					speedLeft = VITESSE_KART*speed;
 8002e02:	4b73      	ldr	r3, [pc, #460]	; (8002fd0 <task_Supervision+0x290>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	0152      	lsls	r2, r2, #5
 8002e0c:	1ad2      	subs	r2, r2, r3
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = VITESSE_KART*speed;
 8002e1a:	4b6d      	ldr	r3, [pc, #436]	; (8002fd0 <task_Supervision+0x290>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	0152      	lsls	r2, r2, #5
 8002e24:	1ad2      	subs	r2, r2, r3
 8002e26:	0092      	lsls	r2, r2, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	b21b      	sxth	r3, r3
 8002e30:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002e32:	e27b      	b.n	800332c <task_Supervision+0x5ec>
				case RECULE:
					speedLeft = -VITESSE_KART*speed;
 8002e34:	4b66      	ldr	r3, [pc, #408]	; (8002fd0 <task_Supervision+0x290>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	01d2      	lsls	r2, r2, #7
 8002e3e:	1ad2      	subs	r2, r2, r3
 8002e40:	0192      	lsls	r2, r2, #6
 8002e42:	441a      	add	r2, r3
 8002e44:	0052      	lsls	r2, r2, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	b21b      	sxth	r3, r3
 8002e4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -VITESSE_KART*speed;
 8002e50:	4b5f      	ldr	r3, [pc, #380]	; (8002fd0 <task_Supervision+0x290>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	01d2      	lsls	r2, r2, #7
 8002e5a:	1ad2      	subs	r2, r2, r3
 8002e5c:	0192      	lsls	r2, r2, #6
 8002e5e:	441a      	add	r2, r3
 8002e60:	0052      	lsls	r2, r2, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	b21b      	sxth	r3, r3
 8002e6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002e6c:	e25e      	b.n	800332c <task_Supervision+0x5ec>
				case DROITE:
					speedLeft = VITESSE_KART*speed;
 8002e6e:	4b58      	ldr	r3, [pc, #352]	; (8002fd0 <task_Supervision+0x290>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	0152      	lsls	r2, r2, #5
 8002e78:	1ad2      	subs	r2, r2, r3
 8002e7a:	0092      	lsls	r2, r2, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	b21b      	sxth	r3, r3
 8002e84:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -VITESSE_KART*speed;
 8002e86:	4b52      	ldr	r3, [pc, #328]	; (8002fd0 <task_Supervision+0x290>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	01d2      	lsls	r2, r2, #7
 8002e90:	1ad2      	subs	r2, r2, r3
 8002e92:	0192      	lsls	r2, r2, #6
 8002e94:	441a      	add	r2, r3
 8002e96:	0052      	lsls	r2, r2, #1
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	b21b      	sxth	r3, r3
 8002ea0:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002ea2:	e243      	b.n	800332c <task_Supervision+0x5ec>
				case GAUCHE:
					speedLeft = -VITESSE_KART*speed;
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <task_Supervision+0x290>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	01d2      	lsls	r2, r2, #7
 8002eae:	1ad2      	subs	r2, r2, r3
 8002eb0:	0192      	lsls	r2, r2, #6
 8002eb2:	441a      	add	r2, r3
 8002eb4:	0052      	lsls	r2, r2, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	b21b      	sxth	r3, r3
 8002ebe:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = VITESSE_KART*speed;
 8002ec0:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <task_Supervision+0x290>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	0152      	lsls	r2, r2, #5
 8002eca:	1ad2      	subs	r2, r2, r3
 8002ecc:	0092      	lsls	r2, r2, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002ed8:	e228      	b.n	800332c <task_Supervision+0x5ec>
				case AVANT_GAUCHE:
					speedLeft = (VITESSE_KART/2)*speed;
 8002eda:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <task_Supervision+0x290>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	0152      	lsls	r2, r2, #5
 8002ee4:	1ad2      	subs	r2, r2, r3
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	b21b      	sxth	r3, r3
 8002ef0:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = VITESSE_KART*speed;
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <task_Supervision+0x290>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	0152      	lsls	r2, r2, #5
 8002efc:	1ad2      	subs	r2, r2, r3
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	b21b      	sxth	r3, r3
 8002f08:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002f0a:	e20f      	b.n	800332c <task_Supervision+0x5ec>
				case AVANT_DROITE:
					speedLeft = VITESSE_KART*speed;
 8002f0c:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <task_Supervision+0x290>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	0152      	lsls	r2, r2, #5
 8002f16:	1ad2      	subs	r2, r2, r3
 8002f18:	0092      	lsls	r2, r2, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	b21b      	sxth	r3, r3
 8002f22:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = (VITESSE_KART/2)*speed;
 8002f24:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <task_Supervision+0x290>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	0152      	lsls	r2, r2, #5
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	0092      	lsls	r2, r2, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	b21b      	sxth	r3, r3
 8002f3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002f3c:	e1f6      	b.n	800332c <task_Supervision+0x5ec>
				case RECULE_GAUCHE:
					speedLeft = -VITESSE_KART*speed;
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <task_Supervision+0x290>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	01d2      	lsls	r2, r2, #7
 8002f48:	1ad2      	subs	r2, r2, r3
 8002f4a:	0192      	lsls	r2, r2, #6
 8002f4c:	441a      	add	r2, r3
 8002f4e:	0052      	lsls	r2, r2, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	b21b      	sxth	r3, r3
 8002f58:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = (-VITESSE_KART/2)*speed;
 8002f5a:	4b1d      	ldr	r3, [pc, #116]	; (8002fd0 <task_Supervision+0x290>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	0212      	lsls	r2, r2, #8
 8002f64:	1ad2      	subs	r2, r2, r3
 8002f66:	0192      	lsls	r2, r2, #6
 8002f68:	441a      	add	r2, r3
 8002f6a:	0052      	lsls	r2, r2, #1
 8002f6c:	4413      	add	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	b21b      	sxth	r3, r3
 8002f74:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002f76:	e1d9      	b.n	800332c <task_Supervision+0x5ec>
				case RECULE_DROITE:
					speedLeft = (-VITESSE_KART/2)*speed;
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <task_Supervision+0x290>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	0212      	lsls	r2, r2, #8
 8002f82:	1ad2      	subs	r2, r2, r3
 8002f84:	0192      	lsls	r2, r2, #6
 8002f86:	441a      	add	r2, r3
 8002f88:	0052      	lsls	r2, r2, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	b21b      	sxth	r3, r3
 8002f92:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -VITESSE_KART*speed;
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <task_Supervision+0x290>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	01d2      	lsls	r2, r2, #7
 8002f9e:	1ad2      	subs	r2, r2, r3
 8002fa0:	0192      	lsls	r2, r2, #6
 8002fa2:	441a      	add	r2, r3
 8002fa4:	0052      	lsls	r2, r2, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	b21b      	sxth	r3, r3
 8002fae:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002fb0:	e1bc      	b.n	800332c <task_Supervision+0x5ec>
				default:
					speedLeft = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002fba:	e1b7      	b.n	800332c <task_Supervision+0x5ec>
 8002fbc:	20004bec 	.word	0x20004bec
 8002fc0:	20004f20 	.word	0x20004f20
 8002fc4:	20004f24 	.word	0x20004f24
 8002fc8:	20000000 	.word	0x20000000
 8002fcc:	20000004 	.word	0x20000004
 8002fd0:	20000008 	.word	0x20000008
 8002fd4:	20004f28 	.word	0x20004f28
 8002fd8:	20004f2c 	.word	0x20004f2c
 8002fdc:	20004bf8 	.word	0x20004bf8
			}
			//Stop si hors porte
		}
		else if (mode == MODE_OBS)
 8002fe0:	4b93      	ldr	r3, [pc, #588]	; (8003230 <task_Supervision+0x4f0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 808b 	bne.w	8003100 <task_Supervision+0x3c0>
		{
			captDistIR_Get(sensor_ir);
 8002fea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe faaa 	bl	8001548 <captDistIR_Get>
			#if VL53
			xQueueReceive(qhVl53, &sensor_vl53, 1);
 8002ff4:	4b8f      	ldr	r3, [pc, #572]	; (8003234 <task_Supervision+0x4f4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4618      	mov	r0, r3
 8003000:	f009 f8fe 	bl	800c200 <xQueueReceive>

			if (sensor_vl53 != 0 || sensor_vl53 != 1)
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <task_Supervision+0x2d0>
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	2b01      	cmp	r3, #1
 800300e:	d001      	beq.n	8003014 <task_Supervision+0x2d4>
				sensor_vl53 = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	633b      	str	r3, [r7, #48]	; 0x30

			if (sensor_vl53 == 1) //Il y a un obstacle
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	2b01      	cmp	r3, #1
 8003018:	d10a      	bne.n	8003030 <task_Supervision+0x2f0>
			{
				speedLeft = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	87bb      	strh	r3, [r7, #60]	; 0x3c
				dir = 'S';
 8003022:	4b85      	ldr	r3, [pc, #532]	; (8003238 <task_Supervision+0x4f8>)
 8003024:	2253      	movs	r2, #83	; 0x53
 8003026:	701a      	strb	r2, [r3, #0]
				obs = 1;
 8003028:	4b84      	ldr	r3, [pc, #528]	; (800323c <task_Supervision+0x4fc>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e17d      	b.n	800332c <task_Supervision+0x5ec>
			}
			else
			#endif //if VL53
			if (sensor_ir[SENSOR_LEFT] > 1000 || sensor_ir[SENSOR_RIGHT] > 1000)
 8003030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003036:	dc03      	bgt.n	8003040 <task_Supervision+0x300>
 8003038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800303e:	dd52      	ble.n	80030e6 <task_Supervision+0x3a6>
			{
				if (obs > 10)
 8003040:	4b7e      	ldr	r3, [pc, #504]	; (800323c <task_Supervision+0x4fc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b0a      	cmp	r3, #10
 8003046:	dd09      	ble.n	800305c <task_Supervision+0x31c>
				{
					speedLeft = VITESSE_OBS;
 8003048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304c:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -VITESSE_OBS/2;
 800304e:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8003052:	87bb      	strh	r3, [r7, #60]	; 0x3c
					dir = 'D';
 8003054:	4b78      	ldr	r3, [pc, #480]	; (8003238 <task_Supervision+0x4f8>)
 8003056:	2244      	movs	r2, #68	; 0x44
 8003058:	701a      	strb	r2, [r3, #0]
				if (obs > 10)
 800305a:	e166      	b.n	800332a <task_Supervision+0x5ea>
				}
				else
				{
					speedLeft = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	87bb      	strh	r3, [r7, #60]	; 0x3c

					if (sensor_ir[SENSOR_LEFT] > sensor_ir[SENSOR_RIGHT] && sensor_ir[SENSOR_LEFT] > 1000)
 8003064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	429a      	cmp	r2, r3
 800306a:	dd18      	ble.n	800309e <task_Supervision+0x35e>
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003072:	dd14      	ble.n	800309e <task_Supervision+0x35e>
					{
						dir = 'D';
 8003074:	4b70      	ldr	r3, [pc, #448]	; (8003238 <task_Supervision+0x4f8>)
 8003076:	2244      	movs	r2, #68	; 0x44
 8003078:	701a      	strb	r2, [r3, #0]
						speedLeft = VITESSE_OBS/2;
 800307a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800307e:	87fb      	strh	r3, [r7, #62]	; 0x3e
						speedRight = -VITESSE_OBS/2;
 8003080:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8003084:	87bb      	strh	r3, [r7, #60]	; 0x3c
						if (obs%2 == 0)
 8003086:	4b6d      	ldr	r3, [pc, #436]	; (800323c <task_Supervision+0x4fc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d128      	bne.n	80030e4 <task_Supervision+0x3a4>
							obs++;
 8003092:	4b6a      	ldr	r3, [pc, #424]	; (800323c <task_Supervision+0x4fc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	4a68      	ldr	r2, [pc, #416]	; (800323c <task_Supervision+0x4fc>)
 800309a:	6013      	str	r3, [r2, #0]
						if (obs%2 == 0)
 800309c:	e022      	b.n	80030e4 <task_Supervision+0x3a4>
					}
					else if (sensor_ir[SENSOR_LEFT] < sensor_ir[SENSOR_RIGHT] && sensor_ir[SENSOR_RIGHT] > 1000)
 800309e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a2:	429a      	cmp	r2, r3
 80030a4:	f280 8141 	bge.w	800332a <task_Supervision+0x5ea>
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ae:	f340 813c 	ble.w	800332a <task_Supervision+0x5ea>
					{
						dir = 'G';
 80030b2:	4b61      	ldr	r3, [pc, #388]	; (8003238 <task_Supervision+0x4f8>)
 80030b4:	2247      	movs	r2, #71	; 0x47
 80030b6:	701a      	strb	r2, [r3, #0]
						speedLeft = -VITESSE_OBS/2;
 80030b8:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80030bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
						speedRight = VITESSE_OBS/2;
 80030be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
						if (obs%2 == 1)
 80030c4:	4b5d      	ldr	r3, [pc, #372]	; (800323c <task_Supervision+0x4fc>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	bfb8      	it	lt
 80030d0:	425b      	neglt	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	f040 8129 	bne.w	800332a <task_Supervision+0x5ea>
							obs++;
 80030d8:	4b58      	ldr	r3, [pc, #352]	; (800323c <task_Supervision+0x4fc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	4a57      	ldr	r2, [pc, #348]	; (800323c <task_Supervision+0x4fc>)
 80030e0:	6013      	str	r3, [r2, #0]
				if (obs > 10)
 80030e2:	e122      	b.n	800332a <task_Supervision+0x5ea>
 80030e4:	e121      	b.n	800332a <task_Supervision+0x5ea>
					}
				}
			}
			else
			{
				speedLeft = VITESSE_OBS;
 80030e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = VITESSE_OBS;
 80030ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
				dir = 'F';
 80030f2:	4b51      	ldr	r3, [pc, #324]	; (8003238 <task_Supervision+0x4f8>)
 80030f4:	2246      	movs	r2, #70	; 0x46
 80030f6:	701a      	strb	r2, [r3, #0]
				obs = 0;
 80030f8:	4b50      	ldr	r3, [pc, #320]	; (800323c <task_Supervision+0x4fc>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e115      	b.n	800332c <task_Supervision+0x5ec>
			}
		}
		else if (mode == MODE_CAM)
 8003100:	4b4b      	ldr	r3, [pc, #300]	; (8003230 <task_Supervision+0x4f0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b02      	cmp	r3, #2
 8003106:	f040 8111 	bne.w	800332c <task_Supervision+0x5ec>
		{
			#if VL53
			xQueueReceive(qhVl53, &sensor_vl53, 1); //For vl53
 800310a:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <task_Supervision+0x4f4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003112:	2201      	movs	r2, #1
 8003114:	4618      	mov	r0, r3
 8003116:	f009 f873 	bl	800c200 <xQueueReceive>
			#endif

			x = SubToMsg.x;
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	4a48      	ldr	r2, [pc, #288]	; (8003240 <task_Supervision+0x500>)
 800311e:	6013      	str	r3, [r2, #0]
			y = SubToMsg.y;
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	4a48      	ldr	r2, [pc, #288]	; (8003244 <task_Supervision+0x504>)
 8003124:	6013      	str	r3, [r2, #0]

			if (x > CAMERA_X_MIN+CAMERA_X_TIER && x < CAMERA_X_MAX-CAMERA_X_TIER && y > CAMERA_Y_MIN && y <CAMERA_Y_MIN+CAMERA_Y_TIER) //AVANT
 8003126:	4b46      	ldr	r3, [pc, #280]	; (8003240 <task_Supervision+0x500>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 800312e:	db15      	blt.n	800315c <task_Supervision+0x41c>
 8003130:	4b43      	ldr	r3, [pc, #268]	; (8003240 <task_Supervision+0x500>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f240 22aa 	movw	r2, #682	; 0x2aa
 8003138:	4293      	cmp	r3, r2
 800313a:	dc0f      	bgt.n	800315c <task_Supervision+0x41c>
 800313c:	4b41      	ldr	r3, [pc, #260]	; (8003244 <task_Supervision+0x504>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	dd0b      	ble.n	800315c <task_Supervision+0x41c>
 8003144:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <task_Supervision+0x504>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800314c:	dc06      	bgt.n	800315c <task_Supervision+0x41c>
			{
				speedLeft = VITESSE_CAM;
 800314e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003152:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = VITESSE_CAM;
 8003154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003158:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800315a:	e0e7      	b.n	800332c <task_Supervision+0x5ec>
			}
			else if (x > CAMERA_X_MAX-CAMERA_X_TIER && x < CAMERA_X_MAX && y > CAMERA_Y_MIN && y < CAMERA_Y_MIN+CAMERA_Y_TIER) //AVANT_DROITE:
 800315c:	4b38      	ldr	r3, [pc, #224]	; (8003240 <task_Supervision+0x500>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 8003164:	db14      	blt.n	8003190 <task_Supervision+0x450>
 8003166:	4b36      	ldr	r3, [pc, #216]	; (8003240 <task_Supervision+0x500>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316e:	da0f      	bge.n	8003190 <task_Supervision+0x450>
 8003170:	4b34      	ldr	r3, [pc, #208]	; (8003244 <task_Supervision+0x504>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	dd0b      	ble.n	8003190 <task_Supervision+0x450>
 8003178:	4b32      	ldr	r3, [pc, #200]	; (8003244 <task_Supervision+0x504>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003180:	dc06      	bgt.n	8003190 <task_Supervision+0x450>
			{
				speedLeft = VITESSE_CAM;
 8003182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003186:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = VITESSE_CAM/2;
 8003188:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800318c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800318e:	e0cd      	b.n	800332c <task_Supervision+0x5ec>
			}
			else if (x > CAMERA_X_MIN && x < CAMERA_X_MIN+CAMERA_X_TIER && y > CAMERA_Y_MIN && y < CAMERA_Y_MIN+CAMERA_Y_TIER) //AVANT_GAUCHE:
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <task_Supervision+0x500>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	dd14      	ble.n	80031c2 <task_Supervision+0x482>
 8003198:	4b29      	ldr	r3, [pc, #164]	; (8003240 <task_Supervision+0x500>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80031a0:	dc0f      	bgt.n	80031c2 <task_Supervision+0x482>
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <task_Supervision+0x504>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	dd0b      	ble.n	80031c2 <task_Supervision+0x482>
 80031aa:	4b26      	ldr	r3, [pc, #152]	; (8003244 <task_Supervision+0x504>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80031b2:	dc06      	bgt.n	80031c2 <task_Supervision+0x482>
			{
				speedLeft = VITESSE_CAM/2;
 80031b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = VITESSE_CAM;
 80031ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80031c0:	e0b4      	b.n	800332c <task_Supervision+0x5ec>
			}
			else if (x > CAMERA_X_MIN+CAMERA_X_TIER && x < CAMERA_X_MAX-CAMERA_X_TIER && y > CAMERA_Y_MIN+CAMERA_Y_TIER && y <CAMERA_Y_MAX-CAMERA_Y_TIER) //STOP
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <task_Supervision+0x500>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80031ca:	db15      	blt.n	80031f8 <task_Supervision+0x4b8>
 80031cc:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <task_Supervision+0x500>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f240 22aa 	movw	r2, #682	; 0x2aa
 80031d4:	4293      	cmp	r3, r2
 80031d6:	dc0f      	bgt.n	80031f8 <task_Supervision+0x4b8>
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <task_Supervision+0x504>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80031e0:	db0a      	blt.n	80031f8 <task_Supervision+0x4b8>
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <task_Supervision+0x504>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f240 22aa 	movw	r2, #682	; 0x2aa
 80031ea:	4293      	cmp	r3, r2
 80031ec:	dc04      	bgt.n	80031f8 <task_Supervision+0x4b8>
			{
				speedLeft = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80031f6:	e099      	b.n	800332c <task_Supervision+0x5ec>
			}
			else if (x > CAMERA_X_MAX-CAMERA_X_TIER && x < CAMERA_X_MAX && y > CAMERA_Y_MIN+CAMERA_Y_TIER && y <CAMERA_Y_MAX-CAMERA_Y_TIER) //DROITE
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <task_Supervision+0x500>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 8003200:	db22      	blt.n	8003248 <task_Supervision+0x508>
 8003202:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <task_Supervision+0x500>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320a:	da1d      	bge.n	8003248 <task_Supervision+0x508>
 800320c:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <task_Supervision+0x504>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8003214:	db18      	blt.n	8003248 <task_Supervision+0x508>
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <task_Supervision+0x504>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f240 22aa 	movw	r2, #682	; 0x2aa
 800321e:	4293      	cmp	r3, r2
 8003220:	dc12      	bgt.n	8003248 <task_Supervision+0x508>
			{
				speedLeft = VITESSE_CAM;
 8003222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003226:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = -VITESSE_CAM;
 8003228:	f64f 4318 	movw	r3, #64536	; 0xfc18
 800322c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800322e:	e07d      	b.n	800332c <task_Supervision+0x5ec>
 8003230:	20004f20 	.word	0x20004f20
 8003234:	20004bf8 	.word	0x20004bf8
 8003238:	20000000 	.word	0x20000000
 800323c:	20004f24 	.word	0x20004f24
 8003240:	20004f28 	.word	0x20004f28
 8003244:	20004f2c 	.word	0x20004f2c
			}
			else if (x > CAMERA_X_MIN && x < CAMERA_X_MIN+CAMERA_X_TIER && y > CAMERA_Y_MIN+CAMERA_Y_TIER && y <CAMERA_Y_MAX-CAMERA_Y_TIER) //GAUCHE
 8003248:	4b54      	ldr	r3, [pc, #336]	; (800339c <task_Supervision+0x65c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	dd16      	ble.n	800327e <task_Supervision+0x53e>
 8003250:	4b52      	ldr	r3, [pc, #328]	; (800339c <task_Supervision+0x65c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003258:	dc11      	bgt.n	800327e <task_Supervision+0x53e>
 800325a:	4b51      	ldr	r3, [pc, #324]	; (80033a0 <task_Supervision+0x660>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8003262:	db0c      	blt.n	800327e <task_Supervision+0x53e>
 8003264:	4b4e      	ldr	r3, [pc, #312]	; (80033a0 <task_Supervision+0x660>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f240 22aa 	movw	r2, #682	; 0x2aa
 800326c:	4293      	cmp	r3, r2
 800326e:	dc06      	bgt.n	800327e <task_Supervision+0x53e>
			{
				speedLeft = -VITESSE_CAM;
 8003270:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8003274:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = VITESSE_CAM;
 8003276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800327a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800327c:	e056      	b.n	800332c <task_Supervision+0x5ec>
			}

			else if (x > CAMERA_X_MIN+CAMERA_X_TIER && x < CAMERA_X_MAX-CAMERA_X_TIER && y > CAMERA_Y_MAX-CAMERA_Y_TIER && y < CAMERA_Y_MAX) //RECULE:
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <task_Supervision+0x65c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8003286:	db16      	blt.n	80032b6 <task_Supervision+0x576>
 8003288:	4b44      	ldr	r3, [pc, #272]	; (800339c <task_Supervision+0x65c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f240 22aa 	movw	r2, #682	; 0x2aa
 8003290:	4293      	cmp	r3, r2
 8003292:	dc10      	bgt.n	80032b6 <task_Supervision+0x576>
 8003294:	4b42      	ldr	r3, [pc, #264]	; (80033a0 <task_Supervision+0x660>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 800329c:	db0b      	blt.n	80032b6 <task_Supervision+0x576>
 800329e:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <task_Supervision+0x660>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a6:	da06      	bge.n	80032b6 <task_Supervision+0x576>
			{
				speedLeft = -VITESSE_CAM;
 80032a8:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80032ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = -VITESSE_CAM;
 80032ae:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80032b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80032b4:	e03a      	b.n	800332c <task_Supervision+0x5ec>
			}
			else if (x > CAMERA_X_MAX-CAMERA_X_TIER && x < CAMERA_X_MAX && y > CAMERA_Y_MAX-CAMERA_Y_TIER && y < CAMERA_Y_MAX) //RECULE_DROITE:
 80032b6:	4b39      	ldr	r3, [pc, #228]	; (800339c <task_Supervision+0x65c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80032be:	db15      	blt.n	80032ec <task_Supervision+0x5ac>
 80032c0:	4b36      	ldr	r3, [pc, #216]	; (800339c <task_Supervision+0x65c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c8:	da10      	bge.n	80032ec <task_Supervision+0x5ac>
 80032ca:	4b35      	ldr	r3, [pc, #212]	; (80033a0 <task_Supervision+0x660>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80032d2:	db0b      	blt.n	80032ec <task_Supervision+0x5ac>
 80032d4:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <task_Supervision+0x660>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	da06      	bge.n	80032ec <task_Supervision+0x5ac>
			{
				speedLeft = -VITESSE_CAM/2;
 80032de:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80032e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = -VITESSE_CAM;
 80032e4:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80032e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80032ea:	e01f      	b.n	800332c <task_Supervision+0x5ec>
			}
			else if (x > CAMERA_X_MIN && x < CAMERA_X_MIN+CAMERA_X_TIER && y > CAMERA_Y_MAX-CAMERA_Y_TIER && y < CAMERA_Y_MAX) //RECULE_GAUCHE:
 80032ec:	4b2b      	ldr	r3, [pc, #172]	; (800339c <task_Supervision+0x65c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	dd15      	ble.n	8003320 <task_Supervision+0x5e0>
 80032f4:	4b29      	ldr	r3, [pc, #164]	; (800339c <task_Supervision+0x65c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80032fc:	dc10      	bgt.n	8003320 <task_Supervision+0x5e0>
 80032fe:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <task_Supervision+0x660>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 8003306:	db0b      	blt.n	8003320 <task_Supervision+0x5e0>
 8003308:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <task_Supervision+0x660>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003310:	da06      	bge.n	8003320 <task_Supervision+0x5e0>
			{
				speedLeft = -VITESSE_CAM;
 8003312:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8003316:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = -VITESSE_CAM/2;
 8003318:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 800331c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800331e:	e005      	b.n	800332c <task_Supervision+0x5ec>
			}
			else
			{
				speedLeft = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003328:	e000      	b.n	800332c <task_Supervision+0x5ec>
				if (obs > 10)
 800332a:	bf00      	nop
			}
		}

		xQueueSend( q_mot_L, ( void * ) &speedLeft,  portMAX_DELAY );
 800332c:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <task_Supervision+0x664>)
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	f107 013e 	add.w	r1, r7, #62	; 0x3e
 8003334:	2300      	movs	r3, #0
 8003336:	f04f 32ff 	mov.w	r2, #4294967295
 800333a:	f008 fdc7 	bl	800becc <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 800333e:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <task_Supervision+0x668>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f04f 31ff 	mov.w	r1, #4294967295
 8003346:	4618      	mov	r0, r3
 8003348:	f009 f83a 	bl	800c3c0 <xQueueSemaphoreTake>

		xQueueSend( q_mot_R, ( void * ) &speedRight,  portMAX_DELAY );
 800334c:	4b17      	ldr	r3, [pc, #92]	; (80033ac <task_Supervision+0x66c>)
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003354:	2300      	movs	r3, #0
 8003356:	f04f 32ff 	mov.w	r2, #4294967295
 800335a:	f008 fdb7 	bl	800becc <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <task_Supervision+0x668>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f04f 31ff 	mov.w	r1, #4294967295
 8003366:	4618      	mov	r0, r3
 8003368:	f009 f82a 	bl	800c3c0 <xQueueSemaphoreTake>

		MsgToPub.dir = dir;
 800336c:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <task_Supervision+0x670>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	733b      	strb	r3, [r7, #12]
		MsgToPub.mode = mode;
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <task_Supervision+0x674>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	613b      	str	r3, [r7, #16]
		MsgToPub.speed = speed;
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <task_Supervision+0x678>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	617b      	str	r3, [r7, #20]
		MsgToPub.isGood = 1;
 800337e:	2301      	movs	r3, #1
 8003380:	61bb      	str	r3, [r7, #24]
		xQueueSend(qhMR_pub, ( void * ) &MsgToPub, portMAX_DELAY);
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <task_Supervision+0x67c>)
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	f107 010c 	add.w	r1, r7, #12
 800338a:	2300      	movs	r3, #0
 800338c:	f04f 32ff 	mov.w	r2, #4294967295
 8003390:	f008 fd9c 	bl	800becc <xQueueGenericSend>
		pxMessage.data=mode;
		pxMessage.command=dir;
		xQueueSend( qhLCD, ( void * ) &pxMessage, 1);
	#endif

		vTaskDelay(SAMPLING_PERIOD_ms);
 8003394:	2005      	movs	r0, #5
 8003396:	f009 fc5d 	bl	800cc54 <vTaskDelay>
		xQueueReceive(qhMR_sub, &SubToMsg, portMAX_DELAY); //For vl53
 800339a:	e4d7      	b.n	8002d4c <task_Supervision+0xc>
 800339c:	20004f28 	.word	0x20004f28
 80033a0:	20004f2c 	.word	0x20004f2c
 80033a4:	20004be4 	.word	0x20004be4
 80033a8:	20004be0 	.word	0x20004be0
 80033ac:	20004be8 	.word	0x20004be8
 80033b0:	20000000 	.word	0x20000000
 80033b4:	20004f20 	.word	0x20004f20
 80033b8:	20000008 	.word	0x20000008
 80033bc:	20004bf0 	.word	0x20004bf0

080033c0 <main>:
#endif
}

//=========================================================================
int main(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af02      	add	r7, sp, #8
  HAL_Init();
 80033c6:	f001 fccf 	bl	8004d68 <HAL_Init>
  SystemClock_Config();
 80033ca:	f001 fa5d 	bl	8004888 <SystemClock_Config>
  MX_GPIO_Init();
 80033ce:	f7fe fc03 	bl	8001bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 80033d2:	f7fe fd91 	bl	8001ef8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80033d6:	f7fe fd65 	bl	8001ea4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80033da:	f7fe fc97 	bl	8001d0c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80033de:	f7fe fd37 	bl	8001e50 <MX_USART1_UART_Init>

  RetargetInit(&huart2); //make printf and scanf work with uart2
 80033e2:	4858      	ldr	r0, [pc, #352]	; (8003544 <main+0x184>)
 80033e4:	f000 fcde 	bl	8003da4 <RetargetInit>
  printf("%cc%c[2J%c[0;0HTitouan//Jeremy//Louanne\r\n", 0x1b, 0x1b, 0x1b);
 80033e8:	231b      	movs	r3, #27
 80033ea:	221b      	movs	r2, #27
 80033ec:	211b      	movs	r1, #27
 80033ee:	4856      	ldr	r0, [pc, #344]	; (8003548 <main+0x188>)
 80033f0:	f016 fe76 	bl	801a0e0 <iprintf>

  motorCommand_Init();
 80033f4:	f000 fab0 	bl	8003958 <motorCommand_Init>
  quadEncoder_Init();
 80033f8:	f000 fb28 	bl	8003a4c <quadEncoder_Init>
  captDistIR_Init();
 80033fc:	f7fe f872 	bl	80014e4 <captDistIR_Init>

  HAL_Delay(500);
 8003400:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003404:	f001 fcf2 	bl	8004dec <HAL_Delay>

  initVL53L0X();
 8003408:	f7fd fe20 	bl	800104c <initVL53L0X>
  HAL_Delay(100);
 800340c:	2064      	movs	r0, #100	; 0x64
 800340e:	f001 fced 	bl	8004dec <HAL_Delay>

  // Test Ecran LCD
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 8003412:	2200      	movs	r2, #0
 8003414:	2102      	movs	r1, #2
 8003416:	2010      	movs	r0, #16
 8003418:	f7fe fdc4 	bl	8001fa4 <groveLCD_begin>
  HAL_Delay(100);
 800341c:	2064      	movs	r0, #100	; 0x64
 800341e:	f001 fce5 	bl	8004dec <HAL_Delay>
  groveLCD_setCursor(0,0);
 8003422:	2100      	movs	r1, #0
 8003424:	2000      	movs	r0, #0
 8003426:	f7fe fe4f 	bl	80020c8 <groveLCD_setCursor>
  groveLCD_setColor(1);
 800342a:	2001      	movs	r0, #1
 800342c:	f7fe fef2 	bl	8002214 <groveLCD_setColor>
  groveLCD_term_printf("Titouan//Jeremy//Louanne");
 8003430:	4846      	ldr	r0, [pc, #280]	; (800354c <main+0x18c>)
 8003432:	f7fe ff19 	bl	8002268 <groveLCD_term_printf>
  HAL_Delay(1000);
 8003436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800343a:	f001 fcd7 	bl	8004dec <HAL_Delay>

  osKernelInitialize();
 800343e:	f008 fab9 	bl	800b9b4 <osKernelInitialize>
#elif SYNCHRO_EX == EX3
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
#elif SYNCHRO_EX == TESTMR
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
#elif SYNCHRO_EX == EXFINAL
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
 8003442:	2300      	movs	r3, #0
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	2318      	movs	r3, #24
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2300      	movs	r3, #0
 800344c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003450:	493f      	ldr	r1, [pc, #252]	; (8003550 <main+0x190>)
 8003452:	4840      	ldr	r0, [pc, #256]	; (8003554 <main+0x194>)
 8003454:	f009 faa3 	bl	800c99e <xTaskCreate>
    xTaskCreate(task_Supervision, ( const portCHAR * ) "task Supervision", 128 /* stack size */, NULL, 27, NULL);
 8003458:	2300      	movs	r3, #0
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	231b      	movs	r3, #27
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	2300      	movs	r3, #0
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	493c      	ldr	r1, [pc, #240]	; (8003558 <main+0x198>)
 8003466:	483d      	ldr	r0, [pc, #244]	; (800355c <main+0x19c>)
 8003468:	f009 fa99 	bl	800c99e <xTaskCreate>
	xTaskCreate(task_Motor_Left, ( const portCHAR * ) "task Motor Left", 128 /* stack size */, NULL, 25, NULL);
 800346c:	2300      	movs	r3, #0
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	2319      	movs	r3, #25
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	2300      	movs	r3, #0
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	4939      	ldr	r1, [pc, #228]	; (8003560 <main+0x1a0>)
 800347a:	483a      	ldr	r0, [pc, #232]	; (8003564 <main+0x1a4>)
 800347c:	f009 fa8f 	bl	800c99e <xTaskCreate>
	xTaskCreate(task_Motor_Right, ( const portCHAR * ) "task Motor Right", 128 /* stack size */, NULL, 26, NULL);
 8003480:	2300      	movs	r3, #0
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	231a      	movs	r3, #26
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	2300      	movs	r3, #0
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	4936      	ldr	r1, [pc, #216]	; (8003568 <main+0x1a8>)
 800348e:	4837      	ldr	r0, [pc, #220]	; (800356c <main+0x1ac>)
 8003490:	f009 fa85 	bl	800c99e <xTaskCreate>

	#if VL53
	xTaskCreate(task_VL53, ( const portCHAR * ) "task VL53", 128 /* stack size */, NULL, 23, NULL);
 8003494:	2300      	movs	r3, #0
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	2317      	movs	r3, #23
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2300      	movs	r3, #0
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	4933      	ldr	r1, [pc, #204]	; (8003570 <main+0x1b0>)
 80034a2:	4834      	ldr	r0, [pc, #208]	; (8003574 <main+0x1b4>)
 80034a4:	f009 fa7b 	bl	800c99e <xTaskCreate>
	#if LCD
	xTaskCreate(task_Grove_LCD, ( const portCHAR * ) "task LCD", 128 /* stack size */, NULL, 23, NULL);
	#endif
#endif

    vSemaphoreCreateBinary(xSem_Supervision);
 80034a8:	2203      	movs	r2, #3
 80034aa:	2100      	movs	r1, #0
 80034ac:	2001      	movs	r0, #1
 80034ae:	f008 fcaf 	bl	800be10 <xQueueGenericCreate>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4a30      	ldr	r2, [pc, #192]	; (8003578 <main+0x1b8>)
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4b2f      	ldr	r3, [pc, #188]	; (8003578 <main+0x1b8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d006      	beq.n	80034ce <main+0x10e>
 80034c0:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <main+0x1b8>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	2300      	movs	r3, #0
 80034c6:	2200      	movs	r2, #0
 80034c8:	2100      	movs	r1, #0
 80034ca:	f008 fcff 	bl	800becc <xQueueGenericSend>
    xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 80034ce:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <main+0x1b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f04f 31ff 	mov.w	r1, #4294967295
 80034d6:	4618      	mov	r0, r3
 80034d8:	f008 ff72 	bl	800c3c0 <xQueueSemaphoreTake>

    q_mot_L = xQueueCreate(1, sizeof(int16_t));
 80034dc:	2200      	movs	r2, #0
 80034de:	2102      	movs	r1, #2
 80034e0:	2001      	movs	r0, #1
 80034e2:	f008 fc95 	bl	800be10 <xQueueGenericCreate>
 80034e6:	4603      	mov	r3, r0
 80034e8:	4a24      	ldr	r2, [pc, #144]	; (800357c <main+0x1bc>)
 80034ea:	6013      	str	r3, [r2, #0]
    q_mot_R = xQueueCreate(1, sizeof(int16_t));
 80034ec:	2200      	movs	r2, #0
 80034ee:	2102      	movs	r1, #2
 80034f0:	2001      	movs	r0, #1
 80034f2:	f008 fc8d 	bl	800be10 <xQueueGenericCreate>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4a21      	ldr	r2, [pc, #132]	; (8003580 <main+0x1c0>)
 80034fa:	6013      	str	r3, [r2, #0]
    qhVl53 = xQueueCreate(1, sizeof(int));
 80034fc:	2200      	movs	r2, #0
 80034fe:	2104      	movs	r1, #4
 8003500:	2001      	movs	r0, #1
 8003502:	f008 fc85 	bl	800be10 <xQueueGenericCreate>
 8003506:	4603      	mov	r3, r0
 8003508:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <main+0x1c4>)
 800350a:	6013      	str	r3, [r2, #0]

    qhMR_sub = xQueueCreate(1, sizeof(MicroRosSubMsg));
 800350c:	2200      	movs	r2, #0
 800350e:	2114      	movs	r1, #20
 8003510:	2001      	movs	r0, #1
 8003512:	f008 fc7d 	bl	800be10 <xQueueGenericCreate>
 8003516:	4603      	mov	r3, r0
 8003518:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <main+0x1c8>)
 800351a:	6013      	str	r3, [r2, #0]
    qhMR_pub = xQueueCreate(1, sizeof(MicroRosPubMsg));
 800351c:	2200      	movs	r2, #0
 800351e:	2110      	movs	r1, #16
 8003520:	2001      	movs	r0, #1
 8003522:	f008 fc75 	bl	800be10 <xQueueGenericCreate>
 8003526:	4603      	mov	r3, r0
 8003528:	4a18      	ldr	r2, [pc, #96]	; (800358c <main+0x1cc>)
 800352a:	6013      	str	r3, [r2, #0]
    qhLCD = xQueueCreate(1, sizeof(AMessage));
 800352c:	2200      	movs	r2, #0
 800352e:	2108      	movs	r1, #8
 8003530:	2001      	movs	r0, #1
 8003532:	f008 fc6d 	bl	800be10 <xQueueGenericCreate>
 8003536:	4603      	mov	r3, r0
 8003538:	4a15      	ldr	r2, [pc, #84]	; (8003590 <main+0x1d0>)
 800353a:	6013      	str	r3, [r2, #0]

  osKernelStart();
 800353c:	f008 fa5e 	bl	800b9fc <osKernelStart>
  while(1)
 8003540:	e7fe      	b.n	8003540 <main+0x180>
 8003542:	bf00      	nop
 8003544:	20004a14 	.word	0x20004a14
 8003548:	0801b614 	.word	0x0801b614
 800354c:	0801b640 	.word	0x0801b640
 8003550:	0801b65c 	.word	0x0801b65c
 8003554:	08002649 	.word	0x08002649
 8003558:	0801b66c 	.word	0x0801b66c
 800355c:	08002d41 	.word	0x08002d41
 8003560:	0801b680 	.word	0x0801b680
 8003564:	08002ac1 	.word	0x08002ac1
 8003568:	0801b690 	.word	0x0801b690
 800356c:	08002bd1 	.word	0x08002bd1
 8003570:	0801b6a4 	.word	0x0801b6a4
 8003574:	08002cdd 	.word	0x08002cdd
 8003578:	20004be0 	.word	0x20004be0
 800357c:	20004be4 	.word	0x20004be4
 8003580:	20004be8 	.word	0x20004be8
 8003584:	20004bf8 	.word	0x20004bf8
 8003588:	20004bec 	.word	0x20004bec
 800358c:	20004bf0 	.word	0x20004bf0
 8003590:	20004bf4 	.word	0x20004bf4

08003594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80035a6:	f001 fc01 	bl	8004dac <HAL_IncTick>
  }
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40000800 	.word	0x40000800

080035b8 <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80035bc:	b672      	cpsid	i
}
 80035be:	bf00      	nop
  __disable_irq();
  while (1)
 80035c0:	e7fe      	b.n	80035c0 <Error_Handler+0x8>
	...

080035c4 <CHECKMRRET>:
#include "main.h"

#define STRING 0

void CHECKMRRET(rcl_ret_t ret, char* msg)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
	if (ret != RCL_RET_OK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <CHECKMRRET+0x1a>
		printf("Error : %d\r\nMsg : %s\r\n", (int)ret, msg);
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4803      	ldr	r0, [pc, #12]	; (80035e8 <CHECKMRRET+0x24>)
 80035da:	f016 fd81 	bl	801a0e0 <iprintf>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	0801b708 	.word	0x0801b708

080035ec <SubscriberCallbackFunction>:
	std_msgs__msg__String * msg = (std_msgs__msg__String * )msgin;
	printf("Message recue : %s\r\n", msg->data.data);
}

void SubscriberCallbackFunction(const void *msgin)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	std_msgs__msg__Int32 * msg = (std_msgs__msg__Int32 * )msgin;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	60fb      	str	r3, [r7, #12]
	printf("Message recue : %ld\r\n", msg->data);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4619      	mov	r1, r3
 80035fe:	4803      	ldr	r0, [pc, #12]	; (800360c <SubscriberCallbackFunction+0x20>)
 8003600:	f016 fd6e 	bl	801a0e0 <iprintf>
}
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	0801b738 	.word	0x0801b738

08003610 <createPublisher>:
void createPublisher(rcl_publisher_t* publisher,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
	rcl_ret_t ret = rclc_publisher_init_default(publisher, node, type_support, topic_name);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68b9      	ldr	r1, [r7, #8]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f00b ffcb 	bl	800f5c0 <rclc_publisher_init_default>
 800362a:	6178      	str	r0, [r7, #20]
	printf("Publisher %s is created with result %d\r\n", topic_name, (int)ret);
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	6839      	ldr	r1, [r7, #0]
 8003630:	4804      	ldr	r0, [pc, #16]	; (8003644 <createPublisher+0x34>)
 8003632:	f016 fd55 	bl	801a0e0 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
#endif

}
 800363c:	bf00      	nop
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	0801b750 	.word	0x0801b750

08003648 <createSubscriber>:
void createSubscriber(rcl_subscription_t* subscription,
	rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
	*subscription = rcl_get_zero_initialized_subscription();
 8003656:	f00b fa5b 	bl	800eb10 <rcl_get_zero_initialized_subscription>
 800365a:	4602      	mov	r2, r0
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	601a      	str	r2, [r3, #0]

	rcl_ret_t ret = rclc_subscription_init_default(subscription, node,
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f00b ffde 	bl	800f628 <rclc_subscription_init_default>
 800366c:	6178      	str	r0, [r7, #20]
		type_support, topic_name);
	printf("Subscription %s is created with result %d\r\n", topic_name, (int)ret);
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	4805      	ldr	r0, [pc, #20]	; (8003688 <createSubscriber+0x40>)
 8003674:	f016 fd34 	bl	801a0e0 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
#endif
}
 800367e:	bf00      	nop
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	0801b77c 	.word	0x0801b77c

0800368c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003696:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <microros_allocate+0x3c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <microros_allocate+0x3c>)
 80036a4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80036a6:	4b09      	ldr	r3, [pc, #36]	; (80036cc <microros_allocate+0x40>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <microros_allocate+0x40>)
 80036b4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd ff8a 	bl	80015d0 <pvPortMallocMicroROS>
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20004f30 	.word	0x20004f30
 80036cc:	20004f34 	.word	0x20004f34

080036d0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00c      	beq.n	80036fa <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7fe f893 	bl	800180c <getBlockSize>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4a06      	ldr	r2, [pc, #24]	; (8003704 <microros_deallocate+0x34>)
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	4b04      	ldr	r3, [pc, #16]	; (8003704 <microros_deallocate+0x34>)
 80036f2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fe f82f 	bl	8001758 <vPortFreeMicroROS>
  }
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20004f34 	.word	0x20004f34

08003708 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003714:	4b15      	ldr	r3, [pc, #84]	; (800376c <microros_reallocate+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4413      	add	r3, r2
 800371e:	461a      	mov	r2, r3
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <microros_reallocate+0x64>)
 8003722:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <microros_reallocate+0x68>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4413      	add	r3, r2
 800372e:	461a      	mov	r2, r3
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <microros_reallocate+0x68>)
 8003732:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800373a:	68b8      	ldr	r0, [r7, #8]
 800373c:	f7fd ff48 	bl	80015d0 <pvPortMallocMicroROS>
 8003740:	4603      	mov	r3, r0
 8003742:	e00e      	b.n	8003762 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7fe f861 	bl	800180c <getBlockSize>
 800374a:	4603      	mov	r3, r0
 800374c:	4a08      	ldr	r2, [pc, #32]	; (8003770 <microros_reallocate+0x68>)
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	461a      	mov	r2, r3
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <microros_reallocate+0x68>)
 8003756:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7fe f874 	bl	8001848 <pvPortReallocMicroROS>
 8003760:	4603      	mov	r3, r0
  }
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20004f30 	.word	0x20004f30
 8003770:	20004f34 	.word	0x20004f34

08003774 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	fb02 f303 	mul.w	r3, r2, r3
 8003788:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <microros_zero_allocate+0x48>)
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	4413      	add	r3, r2
 800378e:	461a      	mov	r2, r3
 8003790:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <microros_zero_allocate+0x48>)
 8003792:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	4a08      	ldr	r2, [pc, #32]	; (80037c0 <microros_zero_allocate+0x4c>)
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	4413      	add	r3, r2
 80037a2:	461a      	mov	r2, r3
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <microros_zero_allocate+0x4c>)
 80037a6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7fe f886 	bl	80018bc <pvPortCallocMicroROS>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20004f30 	.word	0x20004f30
 80037c0:	20004f34 	.word	0x20004f34
 80037c4:	00000000 	.word	0x00000000

080037c8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80037c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80037da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037de:	a320      	add	r3, pc, #128	; (adr r3, 8003860 <UTILS_NanosecondsToTimespec+0x98>)
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	f7fd fa0a 	bl	8000bfc <__aeabi_ldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80037f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037f6:	a31a      	add	r3, pc, #104	; (adr r3, 8003860 <UTILS_NanosecondsToTimespec+0x98>)
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f7fd f9fe 	bl	8000bfc <__aeabi_ldivmod>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	da20      	bge.n	800384e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4a11      	ldr	r2, [pc, #68]	; (8003858 <UTILS_NanosecondsToTimespec+0x90>)
 8003812:	fb82 1203 	smull	r1, r2, r2, r3
 8003816:	1712      	asrs	r2, r2, #28
 8003818:	17db      	asrs	r3, r3, #31
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	3301      	adds	r3, #1
 800381e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	6979      	ldr	r1, [r7, #20]
 8003828:	17c8      	asrs	r0, r1, #31
 800382a:	460c      	mov	r4, r1
 800382c:	4605      	mov	r5, r0
 800382e:	ebb2 0804 	subs.w	r8, r2, r4
 8003832:	eb63 0905 	sbc.w	r9, r3, r5
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	4906      	ldr	r1, [pc, #24]	; (800385c <UTILS_NanosecondsToTimespec+0x94>)
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	441a      	add	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	609a      	str	r2, [r3, #8]
    }
}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003858:	44b82fa1 	.word	0x44b82fa1
 800385c:	3b9aca00 	.word	0x3b9aca00
 8003860:	3b9aca00 	.word	0x3b9aca00
 8003864:	00000000 	.word	0x00000000

08003868 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800386c:	b08e      	sub	sp, #56	; 0x38
 800386e:	af00      	add	r7, sp, #0
 8003870:	6278      	str	r0, [r7, #36]	; 0x24
 8003872:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003874:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003878:	2300      	movs	r3, #0
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800388a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800388e:	4618      	mov	r0, r3
 8003890:	f009 fd12 	bl	800d2b8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	17da      	asrs	r2, r3, #31
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	61fa      	str	r2, [r7, #28]
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	69b9      	ldr	r1, [r7, #24]
 80038a6:	000b      	movs	r3, r1
 80038a8:	2200      	movs	r2, #0
 80038aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	2200      	movs	r2, #0
 80038b2:	461c      	mov	r4, r3
 80038b4:	4615      	mov	r5, r2
 80038b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038ba:	1911      	adds	r1, r2, r4
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	416b      	adcs	r3, r5
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80038c6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80038ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	f04f 0400 	mov.w	r4, #0
 80038d6:	f04f 0500 	mov.w	r5, #0
 80038da:	015d      	lsls	r5, r3, #5
 80038dc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80038e0:	0154      	lsls	r4, r2, #5
 80038e2:	4622      	mov	r2, r4
 80038e4:	462b      	mov	r3, r5
 80038e6:	ebb2 0800 	subs.w	r8, r2, r0
 80038ea:	eb63 0901 	sbc.w	r9, r3, r1
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80038fa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80038fe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003902:	4690      	mov	r8, r2
 8003904:	4699      	mov	r9, r3
 8003906:	eb18 0a00 	adds.w	sl, r8, r0
 800390a:	eb49 0b01 	adc.w	fp, r9, r1
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800391a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800391e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003922:	ebb2 040a 	subs.w	r4, r2, sl
 8003926:	603c      	str	r4, [r7, #0]
 8003928:	eb63 030b 	sbc.w	r3, r3, fp
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003932:	4623      	mov	r3, r4
 8003934:	181b      	adds	r3, r3, r0
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	462b      	mov	r3, r5
 800393a:	eb41 0303 	adc.w	r3, r1, r3
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	6a3a      	ldr	r2, [r7, #32]
 8003942:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003946:	f7ff ff3f 	bl	80037c8 <UTILS_NanosecondsToTimespec>

    return 0;
 800394a:	2300      	movs	r3, #0
 800394c:	4618      	mov	r0, r3
 800394e:	3738      	adds	r7, #56	; 0x38
 8003950:	46bd      	mov	sp, r7
 8003952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003958 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <motorCommand_Init+0x9c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a24      	ldr	r2, [pc, #144]	; (80039f8 <motorCommand_Init+0xa0>)
 8003968:	fba2 2303 	umull	r2, r3, r2, r3
 800396c:	0d9b      	lsrs	r3, r3, #22
 800396e:	3b01      	subs	r3, #1
 8003970:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <motorCommand_Init+0xa4>)
 8003974:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <motorCommand_Init+0xa8>)
 8003976:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <motorCommand_Init+0xa4>)
 800397a:	22c7      	movs	r2, #199	; 0xc7
 800397c:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 800397e:	4a1f      	ldr	r2, [pc, #124]	; (80039fc <motorCommand_Init+0xa4>)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 8003984:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <motorCommand_Init+0xa4>)
 8003986:	2200      	movs	r2, #0
 8003988:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800398a:	4b1c      	ldr	r3, [pc, #112]	; (80039fc <motorCommand_Init+0xa4>)
 800398c:	2200      	movs	r2, #0
 800398e:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8003990:	481a      	ldr	r0, [pc, #104]	; (80039fc <motorCommand_Init+0xa4>)
 8003992:	f005 fcd9 	bl	8009348 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003996:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <motorCommand_Init+0xac>)
 8003998:	2260      	movs	r2, #96	; 0x60
 800399a:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 800399c:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <motorCommand_Init+0xac>)
 800399e:	2205      	movs	r2, #5
 80039a0:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <motorCommand_Init+0xac>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <motorCommand_Init+0xac>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 80039ae:	2200      	movs	r2, #0
 80039b0:	4914      	ldr	r1, [pc, #80]	; (8003a04 <motorCommand_Init+0xac>)
 80039b2:	4812      	ldr	r0, [pc, #72]	; (80039fc <motorCommand_Init+0xa4>)
 80039b4:	f006 f87a 	bl	8009aac <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 80039b8:	2204      	movs	r2, #4
 80039ba:	4912      	ldr	r1, [pc, #72]	; (8003a04 <motorCommand_Init+0xac>)
 80039bc:	480f      	ldr	r0, [pc, #60]	; (80039fc <motorCommand_Init+0xa4>)
 80039be:	f006 f875 	bl	8009aac <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 80039c2:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <motorCommand_Init+0xa4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2264      	movs	r2, #100	; 0x64
 80039c8:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <motorCommand_Init+0xa4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2264      	movs	r2, #100	; 0x64
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 80039d2:	2100      	movs	r1, #0
 80039d4:	4809      	ldr	r0, [pc, #36]	; (80039fc <motorCommand_Init+0xa4>)
 80039d6:	f005 fd73 	bl	80094c0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 80039da:	2104      	movs	r1, #4
 80039dc:	4807      	ldr	r0, [pc, #28]	; (80039fc <motorCommand_Init+0xa4>)
 80039de:	f005 fd6f 	bl	80094c0 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2108      	movs	r1, #8
 80039e6:	4808      	ldr	r0, [pc, #32]	; (8003a08 <motorCommand_Init+0xb0>)
 80039e8:	f002 fb6a 	bl	80060c0 <HAL_GPIO_WritePin>
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	2000000c 	.word	0x2000000c
 80039f8:	6b5fca6b 	.word	0x6b5fca6b
 80039fc:	20004f38 	.word	0x20004f38
 8003a00:	40000400 	.word	0x40000400
 8003a04:	20004f80 	.word	0x20004f80
 8003a08:	40020400 	.word	0x40020400

08003a0c <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <motorLeft_SetDuty+0x1c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	20004f38 	.word	0x20004f38

08003a2c <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <motorRight_SetDuty+0x1c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	20004f38 	.word	0x20004f38

08003a4c <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 8003a52:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <quadEncoder_Init+0xdc>)
 8003a54:	4a35      	ldr	r2, [pc, #212]	; (8003b2c <quadEncoder_Init+0xe0>)
 8003a56:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 8003a58:	4b33      	ldr	r3, [pc, #204]	; (8003b28 <quadEncoder_Init+0xdc>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5e:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <quadEncoder_Init+0xdc>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 8003a64:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <quadEncoder_Init+0xdc>)
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	; (8003b28 <quadEncoder_Init+0xdc>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a72:	2303      	movs	r3, #3
 8003a74:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003a7e:	2308      	movs	r3, #8
 8003a80:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8003a82:	230f      	movs	r3, #15
 8003a84:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003a8e:	2308      	movs	r3, #8
 8003a90:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003a92:	230f      	movs	r3, #15
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4823      	ldr	r0, [pc, #140]	; (8003b28 <quadEncoder_Init+0xdc>)
 8003a9c:	f005 fdc0 	bl	8009620 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8003aa0:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <quadEncoder_Init+0xdc>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	481f      	ldr	r0, [pc, #124]	; (8003b28 <quadEncoder_Init+0xdc>)
 8003aac:	f005 fe68 	bl	8009780 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003ab0:	2104      	movs	r1, #4
 8003ab2:	481d      	ldr	r0, [pc, #116]	; (8003b28 <quadEncoder_Init+0xdc>)
 8003ab4:	f005 fe64 	bl	8009780 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <quadEncoder_Init+0xe4>)
 8003aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003abe:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <quadEncoder_Init+0xe4>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac6:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <quadEncoder_Init+0xe4>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8003acc:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <quadEncoder_Init+0xe4>)
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad4:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <quadEncoder_Init+0xe4>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ada:	2303      	movs	r3, #3
 8003adc:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003ae6:	2308      	movs	r3, #8
 8003ae8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8003aea:	230f      	movs	r3, #15
 8003aec:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8003af2:	2301      	movs	r3, #1
 8003af4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003af6:	2308      	movs	r3, #8
 8003af8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003afa:	230f      	movs	r3, #15
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	480b      	ldr	r0, [pc, #44]	; (8003b30 <quadEncoder_Init+0xe4>)
 8003b04:	f005 fd8c 	bl	8009620 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <quadEncoder_Init+0xe4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003b10:	2100      	movs	r1, #0
 8003b12:	4807      	ldr	r0, [pc, #28]	; (8003b30 <quadEncoder_Init+0xe4>)
 8003b14:	f005 fe34 	bl	8009780 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003b18:	2104      	movs	r1, #4
 8003b1a:	4805      	ldr	r0, [pc, #20]	; (8003b30 <quadEncoder_Init+0xe4>)
 8003b1c:	f005 fe30 	bl	8009780 <HAL_TIM_Encoder_Start>
}
 8003b20:	bf00      	nop
 8003b22:	3728      	adds	r7, #40	; 0x28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20004f9c 	.word	0x20004f9c
 8003b2c:	40010000 	.word	0x40010000
 8003b30:	20004fe4 	.word	0x20004fe4

08003b34 <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <quadEncoder_PosCalcL+0x40>)
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f641 129b 	movw	r2, #6555	; 0x199b
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <quadEncoder_PosCalcL+0x44>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	099b      	lsrs	r3, r3, #6
 8003b62:	461a      	mov	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	601a      	str	r2, [r3, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40010000 	.word	0x40010000
 8003b78:	10624dd3 	.word	0x10624dd3

08003b7c <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 8003b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3304      	adds	r3, #4
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f641 129b 	movw	r2, #6555	; 0x199b
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <quadEncoder_PosCalcR+0x44>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	099b      	lsrs	r3, r3, #6
 8003bac:	461a      	mov	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	10624dd3 	.word	0x10624dd3

08003bc4 <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 8003bc8:	4824      	ldr	r0, [pc, #144]	; (8003c5c <quadEncoder_GetSpeedL+0x98>)
 8003bca:	f7ff ffb3 	bl	8003b34 <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 8003bce:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <quadEncoder_GetSpeedL+0x98>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <quadEncoder_GetSpeedL+0x98>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	b21a      	sxth	r2, r3
 8003be0:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <quadEncoder_GetSpeedL+0x9c>)
 8003be2:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 8003be4:	4b1e      	ldr	r3, [pc, #120]	; (8003c60 <quadEncoder_GetSpeedL+0x9c>)
 8003be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	db10      	blt.n	8003c10 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 8003bee:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <quadEncoder_GetSpeedL+0x9c>)
 8003bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bf8:	db1a      	blt.n	8003c30 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <quadEncoder_GetSpeedL+0x9c>)
 8003bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	b21a      	sxth	r2, r3
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <quadEncoder_GetSpeedL+0x9c>)
 8003c0c:	801a      	strh	r2, [r3, #0]
 8003c0e:	e00f      	b.n	8003c30 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <quadEncoder_GetSpeedL+0x9c>)
 8003c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c16:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003c1a:	da09      	bge.n	8003c30 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 8003c1c:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <quadEncoder_GetSpeedL+0x9c>)
 8003c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b21a      	sxth	r2, r3
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <quadEncoder_GetSpeedL+0x9c>)
 8003c2e:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <quadEncoder_GetSpeedL+0x9c>)
 8003c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c36:	461a      	mov	r2, r3
 8003c38:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c3c:	fb02 f303 	mul.w	r3, r2, r3
 8003c40:	4a08      	ldr	r2, [pc, #32]	; (8003c64 <quadEncoder_GetSpeedL+0xa0>)
 8003c42:	fb82 1203 	smull	r1, r2, r2, r3
 8003c46:	1412      	asrs	r2, r2, #16
 8003c48:	17db      	asrs	r3, r3, #31
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	b21a      	sxth	r2, r3
 8003c4e:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <quadEncoder_GetSpeedL+0x9c>)
 8003c50:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 8003c52:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <quadEncoder_GetSpeedL+0x9c>)
 8003c54:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20005034 	.word	0x20005034
 8003c60:	2000503c 	.word	0x2000503c
 8003c64:	66673335 	.word	0x66673335

08003c68 <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 8003c6c:	4824      	ldr	r0, [pc, #144]	; (8003d00 <quadEncoder_GetSpeedR+0x98>)
 8003c6e:	f7ff ff85 	bl	8003b7c <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 8003c72:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <quadEncoder_GetSpeedR+0x98>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <quadEncoder_GetSpeedR+0x98>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	b21a      	sxth	r2, r3
 8003c84:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <quadEncoder_GetSpeedR+0x9c>)
 8003c86:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 8003c88:	4b1e      	ldr	r3, [pc, #120]	; (8003d04 <quadEncoder_GetSpeedR+0x9c>)
 8003c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	db10      	blt.n	8003cb4 <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 8003c92:	4b1c      	ldr	r3, [pc, #112]	; (8003d04 <quadEncoder_GetSpeedR+0x9c>)
 8003c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c9c:	db1a      	blt.n	8003cd4 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 8003c9e:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <quadEncoder_GetSpeedR+0x9c>)
 8003ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	b21a      	sxth	r2, r3
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <quadEncoder_GetSpeedR+0x9c>)
 8003cb0:	801a      	strh	r2, [r3, #0]
 8003cb2:	e00f      	b.n	8003cd4 <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 8003cb4:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <quadEncoder_GetSpeedR+0x9c>)
 8003cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cba:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003cbe:	da09      	bge.n	8003cd4 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8003cc0:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <quadEncoder_GetSpeedR+0x9c>)
 8003cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	b21a      	sxth	r2, r3
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <quadEncoder_GetSpeedR+0x9c>)
 8003cd2:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <quadEncoder_GetSpeedR+0x9c>)
 8003cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	4a08      	ldr	r2, [pc, #32]	; (8003d08 <quadEncoder_GetSpeedR+0xa0>)
 8003ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8003cea:	1412      	asrs	r2, r2, #16
 8003cec:	17db      	asrs	r3, r3, #31
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	b21a      	sxth	r2, r3
 8003cf2:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <quadEncoder_GetSpeedR+0x9c>)
 8003cf4:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 8003cf6:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <quadEncoder_GetSpeedR+0x9c>)
 8003cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20005040 	.word	0x20005040
 8003d04:	20005048 	.word	0x20005048
 8003d08:	66673335 	.word	0x66673335

08003d0c <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8003d10:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <quadEncoder_CallbackIndexL+0x44>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d105      	bne.n	8003d2a <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <quadEncoder_CallbackIndexL+0x48>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <quadEncoder_CallbackIndexL+0x48>)
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	e004      	b.n	8003d34 <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <quadEncoder_CallbackIndexL+0x48>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <quadEncoder_CallbackIndexL+0x48>)
 8003d32:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <quadEncoder_CallbackIndexL+0x44>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4804      	ldr	r0, [pc, #16]	; (8003d50 <quadEncoder_CallbackIndexL+0x44>)
 8003d40:	f005 fd1e 	bl	8009780 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003d44:	2104      	movs	r1, #4
 8003d46:	4802      	ldr	r0, [pc, #8]	; (8003d50 <quadEncoder_CallbackIndexL+0x44>)
 8003d48:	f005 fd1a 	bl	8009780 <HAL_TIM_Encoder_Start>

}
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20004f9c 	.word	0x20004f9c
 8003d54:	2000502c 	.word	0x2000502c

08003d58 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <quadEncoder_CallbackIndexR+0x44>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d105      	bne.n	8003d76 <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <quadEncoder_CallbackIndexR+0x48>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	4a0b      	ldr	r2, [pc, #44]	; (8003da0 <quadEncoder_CallbackIndexR+0x48>)
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	e004      	b.n	8003d80 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8003d76:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <quadEncoder_CallbackIndexR+0x48>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <quadEncoder_CallbackIndexR+0x48>)
 8003d7e:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <quadEncoder_CallbackIndexR+0x44>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2200      	movs	r2, #0
 8003d86:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4804      	ldr	r0, [pc, #16]	; (8003d9c <quadEncoder_CallbackIndexR+0x44>)
 8003d8c:	f005 fcf8 	bl	8009780 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003d90:	2104      	movs	r1, #4
 8003d92:	4802      	ldr	r0, [pc, #8]	; (8003d9c <quadEncoder_CallbackIndexR+0x44>)
 8003d94:	f005 fcf4 	bl	8009780 <HAL_TIM_Encoder_Start>

}
 8003d98:	bf00      	nop
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20004fe4 	.word	0x20004fe4
 8003da0:	20005030 	.word	0x20005030

08003da4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003dac:	4a07      	ldr	r2, [pc, #28]	; (8003dcc <RetargetInit+0x28>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <RetargetInit+0x2c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6898      	ldr	r0, [r3, #8]
 8003db8:	2300      	movs	r3, #0
 8003dba:	2202      	movs	r2, #2
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	f016 f9a1 	bl	801a104 <setvbuf>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	2000504c 	.word	0x2000504c
 8003dd0:	200000e0 	.word	0x200000e0

08003dd4 <_isatty>:

int _isatty(int fd) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	db04      	blt.n	8003dec <_isatty+0x18>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	dc01      	bgt.n	8003dec <_isatty+0x18>
    return 1;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e005      	b.n	8003df8 <_isatty+0x24>

  errno = EBADF;
 8003dec:	f016 fc82 	bl	801a6f4 <__errno>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2209      	movs	r2, #9
 8003df4:	601a      	str	r2, [r3, #0]
  return 0;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <_write>:

int _write(int fd, char* ptr, int len) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d002      	beq.n	8003e18 <_write+0x18>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d111      	bne.n	8003e3c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003e18:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <_write+0x54>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	f006 f9bd 	bl	800a1a4 <HAL_UART_Transmit>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <_write+0x38>
      return len;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	e008      	b.n	8003e4a <_write+0x4a>
    else
      return EIO;
 8003e38:	2305      	movs	r3, #5
 8003e3a:	e006      	b.n	8003e4a <_write+0x4a>
  }
  errno = EBADF;
 8003e3c:	f016 fc5a 	bl	801a6f4 <__errno>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2209      	movs	r2, #9
 8003e44:	601a      	str	r2, [r3, #0]
  return -1;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	2000504c 	.word	0x2000504c

08003e58 <_close>:

int _close(int fd) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	db04      	blt.n	8003e70 <_close+0x18>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	dc01      	bgt.n	8003e70 <_close+0x18>
    return 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e006      	b.n	8003e7e <_close+0x26>

  errno = EBADF;
 8003e70:	f016 fc40 	bl	801a6f4 <__errno>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2209      	movs	r2, #9
 8003e78:	601a      	str	r2, [r3, #0]
  return -1;
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003e92:	f016 fc2f 	bl	801a6f4 <__errno>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2209      	movs	r2, #9
 8003e9a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_read>:

int _read(int fd, char* ptr, int len) {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d110      	bne.n	8003edc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <_read+0x4c>)
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	f006 f9ff 	bl	800a2c8 <HAL_UART_Receive>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <_read+0x30>
      return 1;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e008      	b.n	8003eea <_read+0x42>
    else
      return EIO;
 8003ed8:	2305      	movs	r3, #5
 8003eda:	e006      	b.n	8003eea <_read+0x42>
  }
  errno = EBADF;
 8003edc:	f016 fc0a 	bl	801a6f4 <__errno>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2209      	movs	r2, #9
 8003ee4:	601a      	str	r2, [r3, #0]
  return -1;
 8003ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	2000504c 	.word	0x2000504c

08003ef8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	db08      	blt.n	8003f1a <_fstat+0x22>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	dc05      	bgt.n	8003f1a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f14:	605a      	str	r2, [r3, #4]
    return 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e005      	b.n	8003f26 <_fstat+0x2e>
  }

  errno = EBADF;
 8003f1a:	f016 fbeb 	bl	801a6f4 <__errno>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2209      	movs	r2, #9
 8003f22:	601a      	str	r2, [r3, #0]
  return 0;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <_getpid>:

int _getpid(void)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	af00      	add	r7, sp, #0
	return 1;
 8003f32:	2301      	movs	r3, #1
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <_kill>:

int _kill(int pid, int sig)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f48:	f016 fbd4 	bl	801a6f4 <__errno>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2216      	movs	r2, #22
 8003f50:	601a      	str	r2, [r3, #0]
	return -1;
 8003f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_MspInit>:
void HAL_Encoder_Timer1_MspInit(void);
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);

void HAL_MspInit(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	4b33      	ldr	r3, [pc, #204]	; (8004038 <HAL_MspInit+0xd8>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	4a32      	ldr	r2, [pc, #200]	; (8004038 <HAL_MspInit+0xd8>)
 8003f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f74:	6453      	str	r3, [r2, #68]	; 0x44
 8003f76:	4b30      	ldr	r3, [pc, #192]	; (8004038 <HAL_MspInit+0xd8>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	4b2c      	ldr	r3, [pc, #176]	; (8004038 <HAL_MspInit+0xd8>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	4a2b      	ldr	r2, [pc, #172]	; (8004038 <HAL_MspInit+0xd8>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6413      	str	r3, [r2, #64]	; 0x40
 8003f92:	4b29      	ldr	r3, [pc, #164]	; (8004038 <HAL_MspInit+0xd8>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	4b25      	ldr	r3, [pc, #148]	; (8004038 <HAL_MspInit+0xd8>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	4a24      	ldr	r2, [pc, #144]	; (8004038 <HAL_MspInit+0xd8>)
 8003fa8:	f043 0304 	orr.w	r3, r3, #4
 8003fac:	6313      	str	r3, [r2, #48]	; 0x30
 8003fae:	4b22      	ldr	r3, [pc, #136]	; (8004038 <HAL_MspInit+0xd8>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <HAL_MspInit+0xd8>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <HAL_MspInit+0xd8>)
 8003fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fca:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <HAL_MspInit+0xd8>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	607b      	str	r3, [r7, #4]
 8003fda:	4b17      	ldr	r3, [pc, #92]	; (8004038 <HAL_MspInit+0xd8>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	4a16      	ldr	r2, [pc, #88]	; (8004038 <HAL_MspInit+0xd8>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe6:	4b14      	ldr	r3, [pc, #80]	; (8004038 <HAL_MspInit+0xd8>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <HAL_MspInit+0xd8>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <HAL_MspInit+0xd8>)
 8003ffc:	f043 0302 	orr.w	r3, r3, #2
 8004000:	6313      	str	r3, [r2, #48]	; 0x30
 8004002:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <HAL_MspInit+0xd8>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800400e:	2200      	movs	r2, #0
 8004010:	210f      	movs	r1, #15
 8004012:	f06f 0001 	mvn.w	r0, #1
 8004016:	f001 fa95 	bl	8005544 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 800401a:	f000 f8a3 	bl	8004164 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 800401e:	f000 f823 	bl	8004068 <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 8004022:	f000 f861 	bl	80040e8 <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 8004026:	f000 f8fb 	bl	8004220 <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 800402a:	f000 f807 	bl	800403c <HAL_GPIO_MspInit>

}
 800402e:	bf00      	nop
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800

0800403c <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004042:	2310      	movs	r3, #16
 8004044:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // hal_gpio.h
 8004046:	2301      	movs	r3, #1
 8004048:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800404e:	2301      	movs	r3, #1
 8004050:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4803      	ldr	r0, [pc, #12]	; (8004064 <HAL_GPIO_MspInit+0x28>)
 8004058:	f001 feae 	bl	8005db8 <HAL_GPIO_Init>

}
 800405c:	bf00      	nop
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40020400 	.word	0x40020400

08004068 <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <HAL_Encoder_Timer1_MspInit+0x74>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_Encoder_Timer1_MspInit+0x74>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	6453      	str	r3, [r2, #68]	; 0x44
 800407e:	4b17      	ldr	r3, [pc, #92]	; (80040dc <HAL_Encoder_Timer1_MspInit+0x74>)
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800408a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800408e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8004090:	2302      	movs	r3, #2
 8004092:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004094:	2301      	movs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004098:	2301      	movs	r3, #1
 800409a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 800409c:	2301      	movs	r3, #1
 800409e:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	480e      	ldr	r0, [pc, #56]	; (80040e0 <HAL_Encoder_Timer1_MspInit+0x78>)
 80040a6:	f001 fe87 	bl	8005db8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ae:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80040b4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ba:	1d3b      	adds	r3, r7, #4
 80040bc:	4619      	mov	r1, r3
 80040be:	4809      	ldr	r0, [pc, #36]	; (80040e4 <HAL_Encoder_Timer1_MspInit+0x7c>)
 80040c0:	f001 fe7a 	bl	8005db8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 80040c4:	2200      	movs	r2, #0
 80040c6:	2107      	movs	r1, #7
 80040c8:	2028      	movs	r0, #40	; 0x28
 80040ca:	f001 fa3b 	bl	8005544 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80040ce:	2028      	movs	r0, #40	; 0x28
 80040d0:	f001 fa54 	bl	800557c <HAL_NVIC_EnableIRQ>
}
 80040d4:	bf00      	nop
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40023800 	.word	0x40023800
 80040e0:	40020000 	.word	0x40020000
 80040e4:	40020400 	.word	0x40020400

080040e8 <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	4b19      	ldr	r3, [pc, #100]	; (8004158 <HAL_Encoder_Timer2_MspInit+0x70>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_Encoder_Timer2_MspInit+0x70>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	6413      	str	r3, [r2, #64]	; 0x40
 80040fe:	4b16      	ldr	r3, [pc, #88]	; (8004158 <HAL_Encoder_Timer2_MspInit+0x70>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800410a:	2303      	movs	r3, #3
 800410c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 800410e:	2302      	movs	r3, #2
 8004110:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004112:	2301      	movs	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004116:	2301      	movs	r3, #1
 8004118:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 800411a:	2301      	movs	r3, #1
 800411c:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	4619      	mov	r1, r3
 8004122:	480e      	ldr	r0, [pc, #56]	; (800415c <HAL_Encoder_Timer2_MspInit+0x74>)
 8004124:	f001 fe48 	bl	8005db8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004128:	2301      	movs	r3, #1
 800412a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800412c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004130:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004136:	1d3b      	adds	r3, r7, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4809      	ldr	r0, [pc, #36]	; (8004160 <HAL_Encoder_Timer2_MspInit+0x78>)
 800413c:	f001 fe3c 	bl	8005db8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 8004140:	2200      	movs	r2, #0
 8004142:	2106      	movs	r1, #6
 8004144:	2006      	movs	r0, #6
 8004146:	f001 f9fd 	bl	8005544 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800414a:	2006      	movs	r0, #6
 800414c:	f001 fa16 	bl	800557c <HAL_NVIC_EnableIRQ>
}
 8004150:	bf00      	nop
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40023800 	.word	0x40023800
 800415c:	40020000 	.word	0x40020000
 8004160:	40020800 	.word	0x40020800

08004164 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	4b28      	ldr	r3, [pc, #160]	; (8004210 <HAL_PWM_Timer3_MspInit+0xac>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4a27      	ldr	r2, [pc, #156]	; (8004210 <HAL_PWM_Timer3_MspInit+0xac>)
 8004174:	f043 0302 	orr.w	r3, r3, #2
 8004178:	6413      	str	r3, [r2, #64]	; 0x40
 800417a:	4b25      	ldr	r3, [pc, #148]	; (8004210 <HAL_PWM_Timer3_MspInit+0xac>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004186:	2340      	movs	r3, #64	; 0x40
 8004188:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418a:	2302      	movs	r3, #2
 800418c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800418e:	2301      	movs	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004192:	2301      	movs	r3, #1
 8004194:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8004196:	2302      	movs	r3, #2
 8004198:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	4619      	mov	r1, r3
 800419e:	481d      	ldr	r0, [pc, #116]	; (8004214 <HAL_PWM_Timer3_MspInit+0xb0>)
 80041a0:	f001 fe0a 	bl	8005db8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a8:	2302      	movs	r3, #2
 80041aa:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041ac:	2301      	movs	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80041b0:	2301      	movs	r3, #1
 80041b2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80041b4:	2302      	movs	r3, #2
 80041b6:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041b8:	1d3b      	adds	r3, r7, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	4816      	ldr	r0, [pc, #88]	; (8004218 <HAL_PWM_Timer3_MspInit+0xb4>)
 80041be:	f001 fdfb 	bl	8005db8 <HAL_GPIO_Init>

	  // ENABLE MOTEUR : SORTIE LOGIQUE PB3
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041c2:	2380      	movs	r3, #128	; 0x80
 80041c4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ce:	1d3b      	adds	r3, r7, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4810      	ldr	r0, [pc, #64]	; (8004214 <HAL_PWM_Timer3_MspInit+0xb0>)
 80041d4:	f001 fdf0 	bl	8005db8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80041d8:	2201      	movs	r2, #1
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	480d      	ldr	r0, [pc, #52]	; (8004214 <HAL_PWM_Timer3_MspInit+0xb0>)
 80041de:	f001 ff6f 	bl	80060c0 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80041e2:	2308      	movs	r3, #8
 80041e4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e6:	2301      	movs	r3, #1
 80041e8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041ea:	2301      	movs	r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80041ee:	2302      	movs	r3, #2
 80041f0:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	4619      	mov	r1, r3
 80041f6:	4809      	ldr	r0, [pc, #36]	; (800421c <HAL_PWM_Timer3_MspInit+0xb8>)
 80041f8:	f001 fdde 	bl	8005db8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80041fc:	2201      	movs	r2, #1
 80041fe:	2108      	movs	r1, #8
 8004200:	4806      	ldr	r0, [pc, #24]	; (800421c <HAL_PWM_Timer3_MspInit+0xb8>)
 8004202:	f001 ff5d 	bl	80060c0 <HAL_GPIO_WritePin>
}
 8004206:	bf00      	nop
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800
 8004214:	40020000 	.word	0x40020000
 8004218:	40020800 	.word	0x40020800
 800421c:	40020400 	.word	0x40020400

08004220 <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	603b      	str	r3, [r7, #0]
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_adcir_MspInit+0x58>)
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <HAL_adcir_MspInit+0x58>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004234:	6453      	str	r3, [r2, #68]	; 0x44
 8004236:	4b10      	ldr	r3, [pc, #64]	; (8004278 <HAL_adcir_MspInit+0x58>)
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 8004242:	2310      	movs	r3, #16
 8004244:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004246:	2303      	movs	r3, #3
 8004248:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	4619      	mov	r1, r3
 8004252:	480a      	ldr	r0, [pc, #40]	; (800427c <HAL_adcir_MspInit+0x5c>)
 8004254:	f001 fdb0 	bl	8005db8 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8004258:	2301      	movs	r3, #1
 800425a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800425c:	2303      	movs	r3, #3
 800425e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004264:	1d3b      	adds	r3, r7, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4805      	ldr	r0, [pc, #20]	; (8004280 <HAL_adcir_MspInit+0x60>)
 800426a:	f001 fda5 	bl	8005db8 <HAL_GPIO_Init>

}
 800426e:	bf00      	nop
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800
 800427c:	40020000 	.word	0x40020000
 8004280:	40020400 	.word	0x40020400

08004284 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	; 0x28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800428c:	f107 0314 	add.w	r3, r7, #20
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a21      	ldr	r2, [pc, #132]	; (8004328 <HAL_I2C_MspInit+0xa4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d13c      	bne.n	8004320 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_I2C_MspInit+0xa8>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ae:	4a1f      	ldr	r2, [pc, #124]	; (800432c <HAL_I2C_MspInit+0xa8>)
 80042b0:	f043 0302 	orr.w	r3, r3, #2
 80042b4:	6313      	str	r3, [r2, #48]	; 0x30
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_I2C_MspInit+0xa8>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042c8:	2312      	movs	r3, #18
 80042ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d0:	2303      	movs	r3, #3
 80042d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042d4:	2304      	movs	r3, #4
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d8:	f107 0314 	add.w	r3, r7, #20
 80042dc:	4619      	mov	r1, r3
 80042de:	4814      	ldr	r0, [pc, #80]	; (8004330 <HAL_I2C_MspInit+0xac>)
 80042e0:	f001 fd6a 	bl	8005db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	4b10      	ldr	r3, [pc, #64]	; (800432c <HAL_I2C_MspInit+0xa8>)
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	4a0f      	ldr	r2, [pc, #60]	; (800432c <HAL_I2C_MspInit+0xa8>)
 80042ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042f2:	6413      	str	r3, [r2, #64]	; 0x40
 80042f4:	4b0d      	ldr	r3, [pc, #52]	; (800432c <HAL_I2C_MspInit+0xa8>)
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8004300:	2200      	movs	r2, #0
 8004302:	2102      	movs	r1, #2
 8004304:	2020      	movs	r0, #32
 8004306:	f001 f91d 	bl	8005544 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800430a:	2020      	movs	r0, #32
 800430c:	f001 f936 	bl	800557c <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8004310:	2200      	movs	r2, #0
 8004312:	210b      	movs	r1, #11
 8004314:	201f      	movs	r0, #31
 8004316:	f001 f915 	bl	8005544 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800431a:	201f      	movs	r0, #31
 800431c:	f001 f92e 	bl	800557c <HAL_NVIC_EnableIRQ>



  }

}
 8004320:	bf00      	nop
 8004322:	3728      	adds	r7, #40	; 0x28
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40005400 	.word	0x40005400
 800432c:	40023800 	.word	0x40023800
 8004330:	40020400 	.word	0x40020400

08004334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	; 0x30
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800433c:	f107 031c 	add.w	r3, r7, #28
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	60da      	str	r2, [r3, #12]
 800434a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4aa2      	ldr	r2, [pc, #648]	; (80045dc <HAL_UART_MspInit+0x2a8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	f040 80a5 	bne.w	80044a2 <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004358:	2300      	movs	r3, #0
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	4ba0      	ldr	r3, [pc, #640]	; (80045e0 <HAL_UART_MspInit+0x2ac>)
 800435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004360:	4a9f      	ldr	r2, [pc, #636]	; (80045e0 <HAL_UART_MspInit+0x2ac>)
 8004362:	f043 0310 	orr.w	r3, r3, #16
 8004366:	6453      	str	r3, [r2, #68]	; 0x44
 8004368:	4b9d      	ldr	r3, [pc, #628]	; (80045e0 <HAL_UART_MspInit+0x2ac>)
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	4b99      	ldr	r3, [pc, #612]	; (80045e0 <HAL_UART_MspInit+0x2ac>)
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	4a98      	ldr	r2, [pc, #608]	; (80045e0 <HAL_UART_MspInit+0x2ac>)
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	6313      	str	r3, [r2, #48]	; 0x30
 8004384:	4b96      	ldr	r3, [pc, #600]	; (80045e0 <HAL_UART_MspInit+0x2ac>)
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004396:	2302      	movs	r3, #2
 8004398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800439e:	2303      	movs	r3, #3
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043a2:	2307      	movs	r3, #7
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a6:	f107 031c 	add.w	r3, r7, #28
 80043aa:	4619      	mov	r1, r3
 80043ac:	488d      	ldr	r0, [pc, #564]	; (80045e4 <HAL_UART_MspInit+0x2b0>)
 80043ae:	f001 fd03 	bl	8005db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80043b2:	2340      	movs	r3, #64	; 0x40
 80043b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b6:	2302      	movs	r3, #2
 80043b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043be:	2303      	movs	r3, #3
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043c2:	2307      	movs	r3, #7
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043c6:	f107 031c 	add.w	r3, r7, #28
 80043ca:	4619      	mov	r1, r3
 80043cc:	4886      	ldr	r0, [pc, #536]	; (80045e8 <HAL_UART_MspInit+0x2b4>)
 80043ce:	f001 fcf3 	bl	8005db8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80043d2:	4b86      	ldr	r3, [pc, #536]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 80043d4:	4a86      	ldr	r2, [pc, #536]	; (80045f0 <HAL_UART_MspInit+0x2bc>)
 80043d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80043d8:	4b84      	ldr	r3, [pc, #528]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 80043da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043e0:	4b82      	ldr	r3, [pc, #520]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043e6:	4b81      	ldr	r3, [pc, #516]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043ec:	4b7f      	ldr	r3, [pc, #508]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 80043ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043f4:	4b7d      	ldr	r3, [pc, #500]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043fa:	4b7c      	ldr	r3, [pc, #496]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004400:	4b7a      	ldr	r3, [pc, #488]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 8004402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004406:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004408:	4b78      	ldr	r3, [pc, #480]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 800440a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800440e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004410:	4b76      	ldr	r3, [pc, #472]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 8004412:	2200      	movs	r2, #0
 8004414:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004416:	4875      	ldr	r0, [pc, #468]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 8004418:	f001 f8be 	bl	8005598 <HAL_DMA_Init>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8004422:	f7ff f8c9 	bl	80035b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a70      	ldr	r2, [pc, #448]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 800442a:	639a      	str	r2, [r3, #56]	; 0x38
 800442c:	4a6f      	ldr	r2, [pc, #444]	; (80045ec <HAL_UART_MspInit+0x2b8>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004432:	4b70      	ldr	r3, [pc, #448]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 8004434:	4a70      	ldr	r2, [pc, #448]	; (80045f8 <HAL_UART_MspInit+0x2c4>)
 8004436:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004438:	4b6e      	ldr	r3, [pc, #440]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 800443a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800443e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004440:	4b6c      	ldr	r3, [pc, #432]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 8004442:	2240      	movs	r2, #64	; 0x40
 8004444:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004446:	4b6b      	ldr	r3, [pc, #428]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 8004448:	2200      	movs	r2, #0
 800444a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800444c:	4b69      	ldr	r3, [pc, #420]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 800444e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004452:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004454:	4b67      	ldr	r3, [pc, #412]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 8004456:	2200      	movs	r2, #0
 8004458:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800445a:	4b66      	ldr	r3, [pc, #408]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 800445c:	2200      	movs	r2, #0
 800445e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004460:	4b64      	ldr	r3, [pc, #400]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 8004462:	2200      	movs	r2, #0
 8004464:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004466:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 8004468:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800446c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800446e:	4b61      	ldr	r3, [pc, #388]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 8004470:	2200      	movs	r2, #0
 8004472:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004474:	485f      	ldr	r0, [pc, #380]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 8004476:	f001 f88f 	bl	8005598 <HAL_DMA_Init>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8004480:	f7ff f89a 	bl	80035b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a5b      	ldr	r2, [pc, #364]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 8004488:	635a      	str	r2, [r3, #52]	; 0x34
 800448a:	4a5a      	ldr	r2, [pc, #360]	; (80045f4 <HAL_UART_MspInit+0x2c0>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004490:	2200      	movs	r2, #0
 8004492:	2105      	movs	r1, #5
 8004494:	2025      	movs	r0, #37	; 0x25
 8004496:	f001 f855 	bl	8005544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800449a:	2025      	movs	r0, #37	; 0x25
 800449c:	f001 f86e 	bl	800557c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80044a0:	e098      	b.n	80045d4 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a55      	ldr	r2, [pc, #340]	; (80045fc <HAL_UART_MspInit+0x2c8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	f040 8093 	bne.w	80045d4 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	4b4b      	ldr	r3, [pc, #300]	; (80045e0 <HAL_UART_MspInit+0x2ac>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	4a4a      	ldr	r2, [pc, #296]	; (80045e0 <HAL_UART_MspInit+0x2ac>)
 80044b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044bc:	6413      	str	r3, [r2, #64]	; 0x40
 80044be:	4b48      	ldr	r3, [pc, #288]	; (80045e0 <HAL_UART_MspInit+0x2ac>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	4b44      	ldr	r3, [pc, #272]	; (80045e0 <HAL_UART_MspInit+0x2ac>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	4a43      	ldr	r2, [pc, #268]	; (80045e0 <HAL_UART_MspInit+0x2ac>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	6313      	str	r3, [r2, #48]	; 0x30
 80044da:	4b41      	ldr	r3, [pc, #260]	; (80045e0 <HAL_UART_MspInit+0x2ac>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80044e6:	230c      	movs	r3, #12
 80044e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ea:	2302      	movs	r3, #2
 80044ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f2:	2303      	movs	r3, #3
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044f6:	2307      	movs	r3, #7
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044fa:	f107 031c 	add.w	r3, r7, #28
 80044fe:	4619      	mov	r1, r3
 8004500:	4838      	ldr	r0, [pc, #224]	; (80045e4 <HAL_UART_MspInit+0x2b0>)
 8004502:	f001 fc59 	bl	8005db8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004506:	4b3e      	ldr	r3, [pc, #248]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 8004508:	4a3e      	ldr	r2, [pc, #248]	; (8004604 <HAL_UART_MspInit+0x2d0>)
 800450a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800450c:	4b3c      	ldr	r3, [pc, #240]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 800450e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004512:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004514:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 8004516:	2200      	movs	r2, #0
 8004518:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800451a:	4b39      	ldr	r3, [pc, #228]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 800451c:	2200      	movs	r2, #0
 800451e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004520:	4b37      	ldr	r3, [pc, #220]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 8004522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004526:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004528:	4b35      	ldr	r3, [pc, #212]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 800452a:	2200      	movs	r2, #0
 800452c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800452e:	4b34      	ldr	r3, [pc, #208]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 8004530:	2200      	movs	r2, #0
 8004532:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004534:	4b32      	ldr	r3, [pc, #200]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 8004536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800453a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800453c:	4b30      	ldr	r3, [pc, #192]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 800453e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004542:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004544:	4b2e      	ldr	r3, [pc, #184]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 8004546:	2200      	movs	r2, #0
 8004548:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800454a:	482d      	ldr	r0, [pc, #180]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 800454c:	f001 f824 	bl	8005598 <HAL_DMA_Init>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_UART_MspInit+0x226>
      Error_Handler();
 8004556:	f7ff f82f 	bl	80035b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a28      	ldr	r2, [pc, #160]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 800455e:	639a      	str	r2, [r3, #56]	; 0x38
 8004560:	4a27      	ldr	r2, [pc, #156]	; (8004600 <HAL_UART_MspInit+0x2cc>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004566:	4b28      	ldr	r3, [pc, #160]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 8004568:	4a28      	ldr	r2, [pc, #160]	; (800460c <HAL_UART_MspInit+0x2d8>)
 800456a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800456c:	4b26      	ldr	r3, [pc, #152]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 800456e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004572:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004574:	4b24      	ldr	r3, [pc, #144]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 8004576:	2240      	movs	r2, #64	; 0x40
 8004578:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800457a:	4b23      	ldr	r3, [pc, #140]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 800457c:	2200      	movs	r2, #0
 800457e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004580:	4b21      	ldr	r3, [pc, #132]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 8004582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004586:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004588:	4b1f      	ldr	r3, [pc, #124]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 800458a:	2200      	movs	r2, #0
 800458c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800458e:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 8004590:	2200      	movs	r2, #0
 8004592:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004594:	4b1c      	ldr	r3, [pc, #112]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 8004596:	2200      	movs	r2, #0
 8004598:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800459a:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 800459c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80045a0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045a2:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80045a8:	4817      	ldr	r0, [pc, #92]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 80045aa:	f000 fff5 	bl	8005598 <HAL_DMA_Init>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80045b4:	f7ff f800 	bl	80035b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a13      	ldr	r2, [pc, #76]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 80045bc:	635a      	str	r2, [r3, #52]	; 0x34
 80045be:	4a12      	ldr	r2, [pc, #72]	; (8004608 <HAL_UART_MspInit+0x2d4>)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80045c4:	2200      	movs	r2, #0
 80045c6:	2105      	movs	r1, #5
 80045c8:	2026      	movs	r0, #38	; 0x26
 80045ca:	f000 ffbb 	bl	8005544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045ce:	2026      	movs	r0, #38	; 0x26
 80045d0:	f000 ffd4 	bl	800557c <HAL_NVIC_EnableIRQ>
}
 80045d4:	bf00      	nop
 80045d6:	3730      	adds	r7, #48	; 0x30
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40011000 	.word	0x40011000
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40020000 	.word	0x40020000
 80045e8:	40020400 	.word	0x40020400
 80045ec:	20004a58 	.word	0x20004a58
 80045f0:	40026440 	.word	0x40026440
 80045f4:	20004ab8 	.word	0x20004ab8
 80045f8:	400264b8 	.word	0x400264b8
 80045fc:	40004400 	.word	0x40004400
 8004600:	20004b18 	.word	0x20004b18
 8004604:	40026088 	.word	0x40026088
 8004608:	20004b78 	.word	0x20004b78
 800460c:	400260a0 	.word	0x400260a0

08004610 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08c      	sub	sp, #48	; 0x30
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004620:	2300      	movs	r3, #0
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <HAL_InitTick+0xd4>)
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	4a2e      	ldr	r2, [pc, #184]	; (80046e4 <HAL_InitTick+0xd4>)
 800462a:	f043 0304 	orr.w	r3, r3, #4
 800462e:	6413      	str	r3, [r2, #64]	; 0x40
 8004630:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <HAL_InitTick+0xd4>)
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800463c:	f107 020c 	add.w	r2, r7, #12
 8004640:	f107 0310 	add.w	r3, r7, #16
 8004644:	4611      	mov	r1, r2
 8004646:	4618      	mov	r0, r3
 8004648:	f004 fe4c 	bl	80092e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800464c:	f004 fe36 	bl	80092bc <HAL_RCC_GetPCLK2Freq>
 8004650:	4603      	mov	r3, r0
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	4a23      	ldr	r2, [pc, #140]	; (80046e8 <HAL_InitTick+0xd8>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	0c9b      	lsrs	r3, r3, #18
 8004660:	3b01      	subs	r3, #1
 8004662:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 8004664:	4b21      	ldr	r3, [pc, #132]	; (80046ec <HAL_InitTick+0xdc>)
 8004666:	4a22      	ldr	r2, [pc, #136]	; (80046f0 <HAL_InitTick+0xe0>)
 8004668:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800466a:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_InitTick+0xdc>)
 800466c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004670:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8004672:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <HAL_InitTick+0xdc>)
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004678:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <HAL_InitTick+0xdc>)
 800467a:	2200      	movs	r2, #0
 800467c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800467e:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <HAL_InitTick+0xdc>)
 8004680:	2200      	movs	r2, #0
 8004682:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004684:	4b19      	ldr	r3, [pc, #100]	; (80046ec <HAL_InitTick+0xdc>)
 8004686:	2200      	movs	r2, #0
 8004688:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800468a:	4818      	ldr	r0, [pc, #96]	; (80046ec <HAL_InitTick+0xdc>)
 800468c:	f004 fe5c 	bl	8009348 <HAL_TIM_Base_Init>
 8004690:	4603      	mov	r3, r0
 8004692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800469a:	2b00      	cmp	r3, #0
 800469c:	d11b      	bne.n	80046d6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800469e:	4813      	ldr	r0, [pc, #76]	; (80046ec <HAL_InitTick+0xdc>)
 80046a0:	f004 feac 	bl	80093fc <HAL_TIM_Base_Start_IT>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80046aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d111      	bne.n	80046d6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80046b2:	201e      	movs	r0, #30
 80046b4:	f000 ff62 	bl	800557c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b0f      	cmp	r3, #15
 80046bc:	d808      	bhi.n	80046d0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80046be:	2200      	movs	r2, #0
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	201e      	movs	r0, #30
 80046c4:	f000 ff3e 	bl	8005544 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046c8:	4a0a      	ldr	r2, [pc, #40]	; (80046f4 <HAL_InitTick+0xe4>)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	e002      	b.n	80046d6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80046d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3730      	adds	r7, #48	; 0x30
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40023800 	.word	0x40023800
 80046e8:	431bde83 	.word	0x431bde83
 80046ec:	20005050 	.word	0x20005050
 80046f0:	40000800 	.word	0x40000800
 80046f4:	20000024 	.word	0x20000024

080046f8 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  while (1)
 80046fc:	e7fe      	b.n	80046fc <NMI_Handler+0x4>

080046fe <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 80046fe:	b480      	push	{r7}
 8004700:	af00      	add	r7, sp, #0

  while (1)
 8004702:	e7fe      	b.n	8004702 <HardFault_Handler+0x4>

08004704 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  while (1)
 8004708:	e7fe      	b.n	8004708 <MemManage_Handler+0x4>

0800470a <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800470a:	b480      	push	{r7}
 800470c:	af00      	add	r7, sp, #0
  while (1)
 800470e:	e7fe      	b.n	800470e <BusFault_Handler+0x4>

08004710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  while (1)
 8004714:	e7fe      	b.n	8004714 <UsageFault_Handler+0x4>

08004716 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8004716:	b480      	push	{r7}
 8004718:	af00      	add	r7, sp, #0
}
 800471a:	bf00      	nop
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004728:	4802      	ldr	r0, [pc, #8]	; (8004734 <DMA1_Stream5_IRQHandler+0x10>)
 800472a:	f001 f8cd 	bl	80058c8 <HAL_DMA_IRQHandler>
}
 800472e:	bf00      	nop
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20004b18 	.word	0x20004b18

08004738 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800473c:	4802      	ldr	r0, [pc, #8]	; (8004748 <DMA1_Stream6_IRQHandler+0x10>)
 800473e:	f001 f8c3 	bl	80058c8 <HAL_DMA_IRQHandler>
}
 8004742:	bf00      	nop
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20004b78 	.word	0x20004b78

0800474c <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8004750:	4802      	ldr	r0, [pc, #8]	; (800475c <TIM4_IRQHandler+0x10>)
 8004752:	f005 f8a3 	bl	800989c <HAL_TIM_IRQHandler>
}
 8004756:	bf00      	nop
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20005050 	.word	0x20005050

08004760 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8004764:	4802      	ldr	r0, [pc, #8]	; (8004770 <USART1_IRQHandler+0x10>)
 8004766:	f005 ff7f 	bl	800a668 <HAL_UART_IRQHandler>
}
 800476a:	bf00      	nop
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	200049d0 	.word	0x200049d0

08004774 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8004778:	4802      	ldr	r0, [pc, #8]	; (8004784 <USART2_IRQHandler+0x10>)
 800477a:	f005 ff75 	bl	800a668 <HAL_UART_IRQHandler>
}
 800477e:	bf00      	nop
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20004a14 	.word	0x20004a14

08004788 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800478c:	4802      	ldr	r0, [pc, #8]	; (8004798 <DMA2_Stream2_IRQHandler+0x10>)
 800478e:	f001 f89b 	bl	80058c8 <HAL_DMA_IRQHandler>
}
 8004792:	bf00      	nop
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20004a58 	.word	0x20004a58

0800479c <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80047a0:	4802      	ldr	r0, [pc, #8]	; (80047ac <DMA2_Stream7_IRQHandler+0x10>)
 80047a2:	f001 f891 	bl	80058c8 <HAL_DMA_IRQHandler>
}
 80047a6:	bf00      	nop
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20004ab8 	.word	0x20004ab8

080047b0 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80047b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80047b8:	f001 fc9c 	bl	80060f4 <HAL_GPIO_EXTI_IRQHandler>
}
 80047bc:	bf00      	nop
 80047be:	bd80      	pop	{r7, pc}

080047c0 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80047c4:	2001      	movs	r0, #1
 80047c6:	f001 fc95 	bl	80060f4 <HAL_GPIO_EXTI_IRQHandler>
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 80047d4:	4802      	ldr	r0, [pc, #8]	; (80047e0 <I2C1_EV_IRQHandler+0x10>)
 80047d6:	f002 f90d 	bl	80069f4 <HAL_I2C_EV_IRQHandler>
}
 80047da:	bf00      	nop
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	2000497c 	.word	0x2000497c

080047e4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 80047e8:	4802      	ldr	r0, [pc, #8]	; (80047f4 <I2C1_ER_IRQHandler+0x10>)
 80047ea:	f002 fa56 	bl	8006c9a <HAL_I2C_ER_IRQHandler>
}
 80047ee:	bf00      	nop
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	2000497c 	.word	0x2000497c

080047f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004800:	4a14      	ldr	r2, [pc, #80]	; (8004854 <_sbrk+0x5c>)
 8004802:	4b15      	ldr	r3, [pc, #84]	; (8004858 <_sbrk+0x60>)
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800480c:	4b13      	ldr	r3, [pc, #76]	; (800485c <_sbrk+0x64>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004814:	4b11      	ldr	r3, [pc, #68]	; (800485c <_sbrk+0x64>)
 8004816:	4a12      	ldr	r2, [pc, #72]	; (8004860 <_sbrk+0x68>)
 8004818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <_sbrk+0x64>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	429a      	cmp	r2, r3
 8004826:	d207      	bcs.n	8004838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004828:	f015 ff64 	bl	801a6f4 <__errno>
 800482c:	4603      	mov	r3, r0
 800482e:	220c      	movs	r2, #12
 8004830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004832:	f04f 33ff 	mov.w	r3, #4294967295
 8004836:	e009      	b.n	800484c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004838:	4b08      	ldr	r3, [pc, #32]	; (800485c <_sbrk+0x64>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <_sbrk+0x64>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4413      	add	r3, r2
 8004846:	4a05      	ldr	r2, [pc, #20]	; (800485c <_sbrk+0x64>)
 8004848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800484a:	68fb      	ldr	r3, [r7, #12]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20020000 	.word	0x20020000
 8004858:	00000400 	.word	0x00000400
 800485c:	20005098 	.word	0x20005098
 8004860:	2000eb90 	.word	0x2000eb90

08004864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <SystemInit+0x20>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	4a05      	ldr	r2, [pc, #20]	; (8004884 <SystemInit+0x20>)
 8004870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b094      	sub	sp, #80	; 0x50
 800488c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800488e:	f107 0320 	add.w	r3, r7, #32
 8004892:	2230      	movs	r2, #48	; 0x30
 8004894:	2100      	movs	r1, #0
 8004896:	4618      	mov	r0, r3
 8004898:	f015 fe42 	bl	801a520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800489c:	f107 030c 	add.w	r3, r7, #12
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	609a      	str	r2, [r3, #8]
 80048a8:	60da      	str	r2, [r3, #12]
 80048aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048ac:	2300      	movs	r3, #0
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	4b28      	ldr	r3, [pc, #160]	; (8004954 <SystemClock_Config+0xcc>)
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	4a27      	ldr	r2, [pc, #156]	; (8004954 <SystemClock_Config+0xcc>)
 80048b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ba:	6413      	str	r3, [r2, #64]	; 0x40
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <SystemClock_Config+0xcc>)
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048c8:	2300      	movs	r3, #0
 80048ca:	607b      	str	r3, [r7, #4]
 80048cc:	4b22      	ldr	r3, [pc, #136]	; (8004958 <SystemClock_Config+0xd0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a21      	ldr	r2, [pc, #132]	; (8004958 <SystemClock_Config+0xd0>)
 80048d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	4b1f      	ldr	r3, [pc, #124]	; (8004958 <SystemClock_Config+0xd0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80048e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048ee:	2302      	movs	r3, #2
 80048f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80048f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80048f8:	2308      	movs	r3, #8
 80048fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80048fc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8004900:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8004902:	2306      	movs	r3, #6
 8004904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004906:	2304      	movs	r3, #4
 8004908:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800490a:	f107 0320 	add.w	r3, r7, #32
 800490e:	4618      	mov	r0, r3
 8004910:	f004 f850 	bl	80089b4 <HAL_RCC_OscConfig>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800491a:	f7fe fe4d 	bl	80035b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800491e:	230f      	movs	r3, #15
 8004920:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004922:	2302      	movs	r3, #2
 8004924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800492a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800492e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004930:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004934:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004936:	f107 030c 	add.w	r3, r7, #12
 800493a:	2102      	movs	r1, #2
 800493c:	4618      	mov	r0, r3
 800493e:	f004 fab1 	bl	8008ea4 <HAL_RCC_ClockConfig>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004948:	f7fe fe36 	bl	80035b8 <Error_Handler>
  }
}
 800494c:	bf00      	nop
 800494e:	3750      	adds	r7, #80	; 0x50
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40023800 	.word	0x40023800
 8004958:	40007000 	.word	0x40007000

0800495c <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 800495c:	b480      	push	{r7}
 800495e:	b089      	sub	sp, #36	; 0x24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	fbb3 f2f2 	udiv	r2, r3, r2
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	fb01 f202 	mul.w	r2, r1, r2
 800497c:	1a9a      	subs	r2, r3, r2
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1c59      	adds	r1, r3, #1
 8004982:	60f9      	str	r1, [r7, #12]
 8004984:	4936      	ldr	r1, [pc, #216]	; (8004a60 <num2str+0x104>)
 8004986:	5c8a      	ldrb	r2, [r1, r2]
 8004988:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e9      	bne.n	800496e <num2str+0x12>
        *s='\0';
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	e01a      	b.n	80049e4 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	4413      	add	r3, r2
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	76fb      	strb	r3, [r7, #27]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	441a      	add	r2, r3
 80049c4:	6979      	ldr	r1, [r7, #20]
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	440b      	add	r3, r1
 80049ca:	7812      	ldrb	r2, [r2, #0]
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4413      	add	r3, r2
 80049da:	7efa      	ldrb	r2, [r7, #27]
 80049dc:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3301      	adds	r3, #1
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d3df      	bcc.n	80049ae <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d22d      	bcs.n	8004a52 <num2str+0xf6>
                for (i=cnt;i==0;i--)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	e00e      	b.n	8004a1a <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	441a      	add	r2, r3
 8004a02:	69f9      	ldr	r1, [r7, #28]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	4419      	add	r1, r3
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1acb      	subs	r3, r1, r3
 8004a0c:	6979      	ldr	r1, [r7, #20]
 8004a0e:	440b      	add	r3, r1
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ed      	beq.n	80049fc <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <num2str+0xd0>
 8004a26:	2320      	movs	r3, #32
 8004a28:	76fb      	strb	r3, [r7, #27]
 8004a2a:	e001      	b.n	8004a30 <num2str+0xd4>
 8004a2c:	2330      	movs	r3, #48	; 0x30
 8004a2e:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	e007      	b.n	8004a46 <num2str+0xea>
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	7efa      	ldrb	r2, [r7, #27]
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	3301      	adds	r3, #1
 8004a44:	61fb      	str	r3, [r7, #28]
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d3f1      	bcc.n	8004a36 <num2str+0xda>
        }
}
 8004a52:	bf00      	nop
 8004a54:	3724      	adds	r7, #36	; 0x24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000010 	.word	0x20000010

08004a64 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004a7c:	e02e      	b.n	8004adc <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	2b2f      	cmp	r3, #47	; 0x2f
 8004a82:	d906      	bls.n	8004a92 <str2num+0x2e>
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	2b39      	cmp	r3, #57	; 0x39
 8004a88:	d803      	bhi.n	8004a92 <str2num+0x2e>
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	3b30      	subs	r3, #48	; 0x30
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	e018      	b.n	8004ac4 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d109      	bne.n	8004aac <str2num+0x48>
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d906      	bls.n	8004aac <str2num+0x48>
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b46      	cmp	r3, #70	; 0x46
 8004aa2:	d803      	bhi.n	8004aac <str2num+0x48>
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	3b37      	subs	r3, #55	; 0x37
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	e00b      	b.n	8004ac4 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d117      	bne.n	8004ae2 <str2num+0x7e>
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	2b60      	cmp	r3, #96	; 0x60
 8004ab6:	d914      	bls.n	8004ae2 <str2num+0x7e>
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b66      	cmp	r3, #102	; 0x66
 8004abc:	d811      	bhi.n	8004ae2 <str2num+0x7e>
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	3b57      	subs	r3, #87	; 0x57
 8004ac2:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	fb02 f303 	mul.w	r3, r2, r3
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4413      	add	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
		ch=*s++;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1cd      	bne.n	8004a7e <str2num+0x1a>
	}
	return u;
 8004ae2:	697b      	ldr	r3, [r7, #20]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004b04:	e018      	b.n	8004b38 <reverse+0x48>
    {
        temp = str[i];
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	441a      	add	r2, r3
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	440b      	add	r3, r1
 8004b1c:	7812      	ldrb	r2, [r2, #0]
 8004b1e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	4413      	add	r3, r2
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	dbe2      	blt.n	8004b06 <reverse+0x16>
    }
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
    int i = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
    while (x)
 8004b60:	e01d      	b.n	8004b9e <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4b1d      	ldr	r3, [pc, #116]	; (8004bdc <intToStr+0x8c>)
 8004b66:	fb83 1302 	smull	r1, r3, r3, r2
 8004b6a:	1099      	asrs	r1, r3, #2
 8004b6c:	17d3      	asrs	r3, r2, #31
 8004b6e:	1ac9      	subs	r1, r1, r3
 8004b70:	460b      	mov	r3, r1
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	1ad1      	subs	r1, r2, r3
 8004b7a:	b2ca      	uxtb	r2, r1
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	1c59      	adds	r1, r3, #1
 8004b80:	6179      	str	r1, [r7, #20]
 8004b82:	4619      	mov	r1, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	440b      	add	r3, r1
 8004b88:	3230      	adds	r2, #48	; 0x30
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <intToStr+0x8c>)
 8004b92:	fb82 1203 	smull	r1, r2, r2, r3
 8004b96:	1092      	asrs	r2, r2, #2
 8004b98:	17db      	asrs	r3, r3, #31
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	60fb      	str	r3, [r7, #12]
    while (x)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1de      	bne.n	8004b62 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8004ba4:	e007      	b.n	8004bb6 <intToStr+0x66>
        str[i++] = '0';
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	617a      	str	r2, [r7, #20]
 8004bac:	461a      	mov	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	2230      	movs	r2, #48	; 0x30
 8004bb4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	dbf3      	blt.n	8004ba6 <intToStr+0x56>

    reverse(str, i);
 8004bbe:	6979      	ldr	r1, [r7, #20]
 8004bc0:	68b8      	ldr	r0, [r7, #8]
 8004bc2:	f7ff ff95 	bl	8004af0 <reverse>
    str[i] = '\0';
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	4413      	add	r3, r2
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
    return i;
 8004bd0:	697b      	ldr	r3, [r7, #20]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	66666667 	.word	0x66666667

08004be0 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bec:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8004bee:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bf6:	ee17 3a90 	vmov	r3, s15
 8004bfa:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c06:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c0e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8004c12:	2200      	movs	r2, #0
 8004c14:	68f9      	ldr	r1, [r7, #12]
 8004c16:	69f8      	ldr	r0, [r7, #28]
 8004c18:	f7ff ff9a 	bl	8004b50 <intToStr>
 8004c1c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d025      	beq.n	8004c70 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	222e      	movs	r2, #46	; 0x2e
 8004c2c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8004c78 <float2str+0x98>
 8004c34:	f000 f824 	bl	8004c80 <myPow>
 8004c38:	ec53 2b10 	vmov	r2, r3, d0
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f7fb ff8c 	bl	8000b5c <__aeabi_d2f>
 8004c44:	ee07 0a10 	vmov	s14, r0
 8004c48:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c50:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8004c54:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	4619      	mov	r1, r3
 8004c68:	ee17 0a90 	vmov	r0, s15
 8004c6c:	f7ff ff70 	bl	8004b50 <intToStr>
    }
}
 8004c70:	bf00      	nop
 8004c72:	3720      	adds	r7, #32
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	00000000 	.word	0x00000000
 8004c7c:	40240000 	.word	0x40240000

08004c80 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	ed87 0b02 	vstr	d0, [r7, #8]
 8004c8a:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bfb8      	it	lt
 8004c92:	425b      	neglt	r3, r3
 8004c94:	61fb      	str	r3, [r7, #28]
    double result = 1;
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <myPow+0x90>)
 8004c9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8004ca0:	e01b      	b.n	8004cda <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d009      	beq.n	8004cc0 <myPow+0x40>
        {
            result = result * x;
 8004cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004cb4:	f7fb fcb8 	bl	8000628 <__aeabi_dmul>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	61fb      	str	r3, [r7, #28]
        x = x * x;
 8004cc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cce:	f7fb fcab 	bl	8000628 <__aeabi_dmul>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e0      	bne.n	8004ca2 <myPow+0x22>
    }

    if(n < 0)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	da09      	bge.n	8004cfa <myPow+0x7a>
    {
        return 1/result;
 8004ce6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cea:	f04f 0000 	mov.w	r0, #0
 8004cee:	4908      	ldr	r1, [pc, #32]	; (8004d10 <myPow+0x90>)
 8004cf0:	f7fb fdc4 	bl	800087c <__aeabi_ddiv>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	e001      	b.n	8004cfe <myPow+0x7e>
    }
    return result;
 8004cfa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004cfe:	ec43 2b17 	vmov	d7, r2, r3
 8004d02:	eeb0 0a47 	vmov.f32	s0, s14
 8004d06:	eef0 0a67 	vmov.f32	s1, s15
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	3ff00000 	.word	0x3ff00000

08004d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d18:	480d      	ldr	r0, [pc, #52]	; (8004d50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004d1a:	490e      	ldr	r1, [pc, #56]	; (8004d54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004d1c:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d20:	e002      	b.n	8004d28 <LoopCopyDataInit>

08004d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d26:	3304      	adds	r3, #4

08004d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d2c:	d3f9      	bcc.n	8004d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d2e:	4a0b      	ldr	r2, [pc, #44]	; (8004d5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004d30:	4c0b      	ldr	r4, [pc, #44]	; (8004d60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d34:	e001      	b.n	8004d3a <LoopFillZerobss>

08004d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d38:	3204      	adds	r2, #4

08004d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d3c:	d3fb      	bcc.n	8004d36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004d3e:	f7ff fd91 	bl	8004864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d42:	f015 fcdd 	bl	801a700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d46:	f7fe fb3b 	bl	80033c0 <main>
  bx  lr    
 8004d4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d54:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8004d58:	0801c358 	.word	0x0801c358
  ldr r2, =_sbss
 8004d5c:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8004d60:	2000eb90 	.word	0x2000eb90

08004d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d64:	e7fe      	b.n	8004d64 <ADC_IRQHandler>
	...

08004d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <HAL_Init+0x40>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a0d      	ldr	r2, [pc, #52]	; (8004da8 <HAL_Init+0x40>)
 8004d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d78:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_Init+0x40>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <HAL_Init+0x40>)
 8004d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d84:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_Init+0x40>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <HAL_Init+0x40>)
 8004d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d90:	2003      	movs	r0, #3
 8004d92:	f000 fbcc 	bl	800552e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d96:	200f      	movs	r0, #15
 8004d98:	f7ff fc3a 	bl	8004610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d9c:	f7ff f8e0 	bl	8003f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40023c00 	.word	0x40023c00

08004dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_IncTick+0x20>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <HAL_IncTick+0x24>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4413      	add	r3, r2
 8004dbc:	4a04      	ldr	r2, [pc, #16]	; (8004dd0 <HAL_IncTick+0x24>)
 8004dbe:	6013      	str	r3, [r2, #0]
}
 8004dc0:	bf00      	nop
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000028 	.word	0x20000028
 8004dd0:	2000509c 	.word	0x2000509c

08004dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <HAL_GetTick+0x14>)
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2000509c 	.word	0x2000509c

08004dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004df4:	f7ff ffee 	bl	8004dd4 <HAL_GetTick>
 8004df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d005      	beq.n	8004e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <HAL_Delay+0x44>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e12:	bf00      	nop
 8004e14:	f7ff ffde 	bl	8004dd4 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d8f7      	bhi.n	8004e14 <HAL_Delay+0x28>
  {
  }
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000028 	.word	0x20000028

08004e34 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e01b      	b.n	8004e7e <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f817 	bl	8004e86 <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f9d7 	bl	8005214 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
	...

08004e9c <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_ADC_Start+0x1a>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e053      	b.n	8004f5e <HAL_ADC_Start+0xc2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b22      	cmp	r3, #34	; 0x22
 8004ec8:	d104      	bne.n	8004ed4 <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2232      	movs	r2, #50	; 0x32
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ed2:	e003      	b.n	8004edc <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2212      	movs	r2, #18
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d010      	beq.n	8004f0c <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0201 	orr.w	r2, r2, #1
 8004ef8:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilization */
    for(; i <= 540; i++)
 8004efa:	e003      	b.n	8004f04 <HAL_ADC_Start+0x68>
    {
      __NOP();
 8004efc:	bf00      	nop
    for(; i <= 540; i++)
 8004efe:	89fb      	ldrh	r3, [r7, #14]
 8004f00:	3301      	adds	r3, #1
 8004f02:	81fb      	strh	r3, [r7, #14]
 8004f04:	89fb      	ldrh	r3, [r7, #14]
 8004f06:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8004f0a:	d9f7      	bls.n	8004efc <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004f0c:	4b17      	ldr	r3, [pc, #92]	; (8004f6c <HAL_ADC_Start+0xd0>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10c      	bne.n	8004f32 <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d119      	bne.n	8004f54 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f2e:	609a      	str	r2, [r3, #8]
 8004f30:	e010      	b.n	8004f54 <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a0e      	ldr	r2, [pc, #56]	; (8004f70 <HAL_ADC_Start+0xd4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d10b      	bne.n	8004f54 <HAL_ADC_Start+0xb8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d107      	bne.n	8004f54 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f52:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40012300 	.word	0x40012300
 8004f70:	40012000 	.word	0x40012000

08004f74 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004f82:	f7ff ff27 	bl	8004dd4 <HAL_GetTick>
 8004f86:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f88:	e018      	b.n	8004fbc <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d014      	beq.n	8004fbc <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_ADC_PollForConversion+0x34>
 8004f98:	f7ff ff1c 	bl	8004dd4 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d209      	bcs.n	8004fbc <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2203      	movs	r2, #3
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e016      	b.n	8004fea <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d1df      	bne.n	8004f8a <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b25      	cmp	r3, #37	; 0x25
 8004fd4:	d104      	bne.n	8004fe0 <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2235      	movs	r2, #53	; 0x35
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fde:	e003      	b.n	8004fe8 <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2215      	movs	r2, #21
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_ADC_ConfigChannel+0x18>
 8005020:	2302      	movs	r3, #2
 8005022:	e0ed      	b.n	8005200 <HAL_ADC_ConfigChannel+0x1f4>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b09      	cmp	r3, #9
 8005032:	d925      	bls.n	8005080 <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68d9      	ldr	r1, [r3, #12]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	461a      	mov	r2, r3
 8005042:	4613      	mov	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	4413      	add	r3, r2
 8005048:	3b1e      	subs	r3, #30
 800504a:	2207      	movs	r2, #7
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	43da      	mvns	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	400a      	ands	r2, r1
 8005058:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68d9      	ldr	r1, [r3, #12]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	4618      	mov	r0, r3
 800506c:	4603      	mov	r3, r0
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	4403      	add	r3, r0
 8005072:	3b1e      	subs	r3, #30
 8005074:	409a      	lsls	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	60da      	str	r2, [r3, #12]
 800507e:	e022      	b.n	80050c6 <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6919      	ldr	r1, [r3, #16]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	4613      	mov	r3, r2
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	4413      	add	r3, r2
 8005094:	2207      	movs	r2, #7
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43da      	mvns	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	400a      	ands	r2, r1
 80050a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6919      	ldr	r1, [r3, #16]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	4618      	mov	r0, r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	4403      	add	r3, r0
 80050bc:	409a      	lsls	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b06      	cmp	r3, #6
 80050cc:	d824      	bhi.n	8005118 <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	3b05      	subs	r3, #5
 80050e0:	221f      	movs	r2, #31
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43da      	mvns	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	400a      	ands	r2, r1
 80050ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	4618      	mov	r0, r3
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	3b05      	subs	r3, #5
 800510a:	fa00 f203 	lsl.w	r2, r0, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	635a      	str	r2, [r3, #52]	; 0x34
 8005116:	e04c      	b.n	80051b2 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b0c      	cmp	r3, #12
 800511e:	d824      	bhi.n	800516a <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	3b23      	subs	r3, #35	; 0x23
 8005132:	221f      	movs	r2, #31
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43da      	mvns	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	400a      	ands	r2, r1
 8005140:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	4618      	mov	r0, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	3b23      	subs	r3, #35	; 0x23
 800515c:	fa00 f203 	lsl.w	r2, r0, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
 8005168:	e023      	b.n	80051b2 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	3b41      	subs	r3, #65	; 0x41
 800517c:	221f      	movs	r2, #31
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43da      	mvns	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	400a      	ands	r2, r1
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	4618      	mov	r0, r3
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	3b41      	subs	r3, #65	; 0x41
 80051a6:	fa00 f203 	lsl.w	r2, r0, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a15      	ldr	r2, [pc, #84]	; (800520c <HAL_ADC_ConfigChannel+0x200>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d109      	bne.n	80051d0 <HAL_ADC_ConfigChannel+0x1c4>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b12      	cmp	r3, #18
 80051c2:	d105      	bne.n	80051d0 <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80051c4:	4b12      	ldr	r3, [pc, #72]	; (8005210 <HAL_ADC_ConfigChannel+0x204>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4a11      	ldr	r2, [pc, #68]	; (8005210 <HAL_ADC_ConfigChannel+0x204>)
 80051ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051ce:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <HAL_ADC_ConfigChannel+0x200>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d10d      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x1ea>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d003      	beq.n	80051ea <HAL_ADC_ConfigChannel+0x1de>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b11      	cmp	r3, #17
 80051e8:	d105      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x1ea>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80051ea:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_ADC_ConfigChannel+0x204>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4a08      	ldr	r2, [pc, #32]	; (8005210 <HAL_ADC_ConfigChannel+0x204>)
 80051f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051f4:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40012000 	.word	0x40012000
 8005210:	40012300 	.word	0x40012300

08005214 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800521c:	4b6c      	ldr	r3, [pc, #432]	; (80053d0 <ADC_Init+0x1bc>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4a6b      	ldr	r2, [pc, #428]	; (80053d0 <ADC_Init+0x1bc>)
 8005222:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005226:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005228:	4b69      	ldr	r3, [pc, #420]	; (80053d0 <ADC_Init+0x1bc>)
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	4967      	ldr	r1, [pc, #412]	; (80053d0 <ADC_Init+0x1bc>)
 8005232:	4313      	orrs	r3, r2
 8005234:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005244:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6859      	ldr	r1, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	021a      	lsls	r2, r3, #8
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6859      	ldr	r1, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800528a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6899      	ldr	r1, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6899      	ldr	r1, [r3, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6899      	ldr	r1, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0202 	bic.w	r2, r2, #2
 80052f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6899      	ldr	r1, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	005a      	lsls	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d01b      	beq.n	8005346 <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800531c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800532c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6859      	ldr	r1, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	3b01      	subs	r3, #1
 800533a:	035a      	lsls	r2, r3, #13
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
 8005344:	e007      	b.n	8005356 <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005354:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005364:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	3b01      	subs	r3, #1
 8005372:	051a      	lsls	r2, r3, #20
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800538a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6899      	ldr	r1, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	025a      	lsls	r2, r3, #9
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6899      	ldr	r1, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	029a      	lsls	r2, r3, #10
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	40012300 	.word	0x40012300

080053d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053e4:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <__NVIC_SetPriorityGrouping+0x44>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053f0:	4013      	ands	r3, r2
 80053f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005406:	4a04      	ldr	r2, [pc, #16]	; (8005418 <__NVIC_SetPriorityGrouping+0x44>)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	60d3      	str	r3, [r2, #12]
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	e000ed00 	.word	0xe000ed00

0800541c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005420:	4b04      	ldr	r3, [pc, #16]	; (8005434 <__NVIC_GetPriorityGrouping+0x18>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	0a1b      	lsrs	r3, r3, #8
 8005426:	f003 0307 	and.w	r3, r3, #7
}
 800542a:	4618      	mov	r0, r3
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	e000ed00 	.word	0xe000ed00

08005438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005446:	2b00      	cmp	r3, #0
 8005448:	db0b      	blt.n	8005462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	f003 021f 	and.w	r2, r3, #31
 8005450:	4907      	ldr	r1, [pc, #28]	; (8005470 <__NVIC_EnableIRQ+0x38>)
 8005452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	2001      	movs	r0, #1
 800545a:	fa00 f202 	lsl.w	r2, r0, r2
 800545e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	e000e100 	.word	0xe000e100

08005474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	6039      	str	r1, [r7, #0]
 800547e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005484:	2b00      	cmp	r3, #0
 8005486:	db0a      	blt.n	800549e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	b2da      	uxtb	r2, r3
 800548c:	490c      	ldr	r1, [pc, #48]	; (80054c0 <__NVIC_SetPriority+0x4c>)
 800548e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005492:	0112      	lsls	r2, r2, #4
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	440b      	add	r3, r1
 8005498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800549c:	e00a      	b.n	80054b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	4908      	ldr	r1, [pc, #32]	; (80054c4 <__NVIC_SetPriority+0x50>)
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	3b04      	subs	r3, #4
 80054ac:	0112      	lsls	r2, r2, #4
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	440b      	add	r3, r1
 80054b2:	761a      	strb	r2, [r3, #24]
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	e000e100 	.word	0xe000e100
 80054c4:	e000ed00 	.word	0xe000ed00

080054c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b089      	sub	sp, #36	; 0x24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f1c3 0307 	rsb	r3, r3, #7
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	bf28      	it	cs
 80054e6:	2304      	movcs	r3, #4
 80054e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	3304      	adds	r3, #4
 80054ee:	2b06      	cmp	r3, #6
 80054f0:	d902      	bls.n	80054f8 <NVIC_EncodePriority+0x30>
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	3b03      	subs	r3, #3
 80054f6:	e000      	b.n	80054fa <NVIC_EncodePriority+0x32>
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43da      	mvns	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	401a      	ands	r2, r3
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005510:	f04f 31ff 	mov.w	r1, #4294967295
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	fa01 f303 	lsl.w	r3, r1, r3
 800551a:	43d9      	mvns	r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005520:	4313      	orrs	r3, r2
         );
}
 8005522:	4618      	mov	r0, r3
 8005524:	3724      	adds	r7, #36	; 0x24
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff ff4c 	bl	80053d4 <__NVIC_SetPriorityGrouping>
}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	4603      	mov	r3, r0
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005556:	f7ff ff61 	bl	800541c <__NVIC_GetPriorityGrouping>
 800555a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	6978      	ldr	r0, [r7, #20]
 8005562:	f7ff ffb1 	bl	80054c8 <NVIC_EncodePriority>
 8005566:	4602      	mov	r2, r0
 8005568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556c:	4611      	mov	r1, r2
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff ff80 	bl	8005474 <__NVIC_SetPriority>
}
 8005574:	bf00      	nop
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff ff54 	bl	8005438 <__NVIC_EnableIRQ>
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055a4:	f7ff fc16 	bl	8004dd4 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e099      	b.n	80056e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055d4:	e00f      	b.n	80055f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055d6:	f7ff fbfd 	bl	8004dd4 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b05      	cmp	r3, #5
 80055e2:	d908      	bls.n	80055f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2203      	movs	r2, #3
 80055ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e078      	b.n	80056e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e8      	bne.n	80055d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4b38      	ldr	r3, [pc, #224]	; (80056f0 <HAL_DMA_Init+0x158>)
 8005610:	4013      	ands	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005622:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800562e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800563a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b04      	cmp	r3, #4
 800564e:	d107      	bne.n	8005660 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	4313      	orrs	r3, r2
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f023 0307 	bic.w	r3, r3, #7
 8005676:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2b04      	cmp	r3, #4
 8005688:	d117      	bne.n	80056ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00e      	beq.n	80056ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fb0f 	bl	8005cc0 <DMA_CheckFifoParam>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2240      	movs	r2, #64	; 0x40
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056b6:	2301      	movs	r3, #1
 80056b8:	e016      	b.n	80056e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fac6 	bl	8005c54 <DMA_CalcBaseAndBitshift>
 80056c8:	4603      	mov	r3, r0
 80056ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d0:	223f      	movs	r2, #63	; 0x3f
 80056d2:	409a      	lsls	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	f010803f 	.word	0xf010803f

080056f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_DMA_Start_IT+0x26>
 8005716:	2302      	movs	r3, #2
 8005718:	e040      	b.n	800579c <HAL_DMA_Start_IT+0xa8>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	d12f      	bne.n	800578e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2202      	movs	r2, #2
 8005732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fa58 	bl	8005bf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574c:	223f      	movs	r2, #63	; 0x3f
 800574e:	409a      	lsls	r2, r3
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0216 	orr.w	r2, r2, #22
 8005762:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0208 	orr.w	r2, r2, #8
 800577a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	e005      	b.n	800579a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005796:	2302      	movs	r3, #2
 8005798:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800579a:	7dfb      	ldrb	r3, [r7, #23]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80057b2:	f7ff fb0f 	bl	8004dd4 <HAL_GetTick>
 80057b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d008      	beq.n	80057d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2280      	movs	r2, #128	; 0x80
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e052      	b.n	800587c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0216 	bic.w	r2, r2, #22
 80057e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d103      	bne.n	8005806 <HAL_DMA_Abort+0x62>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0208 	bic.w	r2, r2, #8
 8005814:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005826:	e013      	b.n	8005850 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005828:	f7ff fad4 	bl	8004dd4 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b05      	cmp	r3, #5
 8005834:	d90c      	bls.n	8005850 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2203      	movs	r2, #3
 8005840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e015      	b.n	800587c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e4      	bne.n	8005828 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005862:	223f      	movs	r2, #63	; 0x3f
 8005864:	409a      	lsls	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d004      	beq.n	80058a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2280      	movs	r2, #128	; 0x80
 800589c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e00c      	b.n	80058bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2205      	movs	r2, #5
 80058a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0201 	bic.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058d4:	4b8e      	ldr	r3, [pc, #568]	; (8005b10 <HAL_DMA_IRQHandler+0x248>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a8e      	ldr	r2, [pc, #568]	; (8005b14 <HAL_DMA_IRQHandler+0x24c>)
 80058da:	fba2 2303 	umull	r2, r3, r2, r3
 80058de:	0a9b      	lsrs	r3, r3, #10
 80058e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f2:	2208      	movs	r2, #8
 80058f4:	409a      	lsls	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4013      	ands	r3, r2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01a      	beq.n	8005934 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d013      	beq.n	8005934 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0204 	bic.w	r2, r2, #4
 800591a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005920:	2208      	movs	r2, #8
 8005922:	409a      	lsls	r2, r3
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592c:	f043 0201 	orr.w	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005938:	2201      	movs	r2, #1
 800593a:	409a      	lsls	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4013      	ands	r3, r2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d012      	beq.n	800596a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005956:	2201      	movs	r2, #1
 8005958:	409a      	lsls	r2, r3
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f043 0202 	orr.w	r2, r3, #2
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596e:	2204      	movs	r2, #4
 8005970:	409a      	lsls	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4013      	ands	r3, r2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d012      	beq.n	80059a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598c:	2204      	movs	r2, #4
 800598e:	409a      	lsls	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	f043 0204 	orr.w	r2, r3, #4
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a4:	2210      	movs	r2, #16
 80059a6:	409a      	lsls	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d043      	beq.n	8005a38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d03c      	beq.n	8005a38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c2:	2210      	movs	r2, #16
 80059c4:	409a      	lsls	r2, r3
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d018      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d108      	bne.n	80059f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d024      	beq.n	8005a38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	4798      	blx	r3
 80059f6:	e01f      	b.n	8005a38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01b      	beq.n	8005a38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
 8005a08:	e016      	b.n	8005a38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d107      	bne.n	8005a28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0208 	bic.w	r2, r2, #8
 8005a26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4013      	ands	r3, r2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 808f 	beq.w	8005b68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8087 	beq.w	8005b68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5e:	2220      	movs	r2, #32
 8005a60:	409a      	lsls	r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d136      	bne.n	8005ae0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0216 	bic.w	r2, r2, #22
 8005a80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <HAL_DMA_IRQHandler+0x1da>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0208 	bic.w	r2, r2, #8
 8005ab0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab6:	223f      	movs	r2, #63	; 0x3f
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d07e      	beq.n	8005bd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
        }
        return;
 8005ade:	e079      	b.n	8005bd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d01d      	beq.n	8005b2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10d      	bne.n	8005b18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d031      	beq.n	8005b68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4798      	blx	r3
 8005b0c:	e02c      	b.n	8005b68 <HAL_DMA_IRQHandler+0x2a0>
 8005b0e:	bf00      	nop
 8005b10:	2000000c 	.word	0x2000000c
 8005b14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d023      	beq.n	8005b68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	4798      	blx	r3
 8005b28:	e01e      	b.n	8005b68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10f      	bne.n	8005b58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0210 	bic.w	r2, r2, #16
 8005b46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d032      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d022      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2205      	movs	r2, #5
 8005b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	3301      	adds	r3, #1
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d307      	bcc.n	8005bb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f2      	bne.n	8005b94 <HAL_DMA_IRQHandler+0x2cc>
 8005bae:	e000      	b.n	8005bb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005bb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	4798      	blx	r3
 8005bd2:	e000      	b.n	8005bd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005bd4:	bf00      	nop
    }
  }
}
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bea:	b2db      	uxtb	r3, r3
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d108      	bne.n	8005c38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c36:	e007      	b.n	8005c48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	60da      	str	r2, [r3, #12]
}
 8005c48:	bf00      	nop
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	3b10      	subs	r3, #16
 8005c64:	4a14      	ldr	r2, [pc, #80]	; (8005cb8 <DMA_CalcBaseAndBitshift+0x64>)
 8005c66:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6a:	091b      	lsrs	r3, r3, #4
 8005c6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c6e:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <DMA_CalcBaseAndBitshift+0x68>)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d909      	bls.n	8005c96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	1d1a      	adds	r2, r3, #4
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	659a      	str	r2, [r3, #88]	; 0x58
 8005c94:	e007      	b.n	8005ca6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c9e:	f023 0303 	bic.w	r3, r3, #3
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	aaaaaaab 	.word	0xaaaaaaab
 8005cbc:	0801b824 	.word	0x0801b824

08005cc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d11f      	bne.n	8005d1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d856      	bhi.n	8005d8e <DMA_CheckFifoParam+0xce>
 8005ce0:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <DMA_CheckFifoParam+0x28>)
 8005ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce6:	bf00      	nop
 8005ce8:	08005cf9 	.word	0x08005cf9
 8005cec:	08005d0b 	.word	0x08005d0b
 8005cf0:	08005cf9 	.word	0x08005cf9
 8005cf4:	08005d8f 	.word	0x08005d8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d046      	beq.n	8005d92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d08:	e043      	b.n	8005d92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d12:	d140      	bne.n	8005d96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d18:	e03d      	b.n	8005d96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d22:	d121      	bne.n	8005d68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d837      	bhi.n	8005d9a <DMA_CheckFifoParam+0xda>
 8005d2a:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <DMA_CheckFifoParam+0x70>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d41 	.word	0x08005d41
 8005d34:	08005d47 	.word	0x08005d47
 8005d38:	08005d41 	.word	0x08005d41
 8005d3c:	08005d59 	.word	0x08005d59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
      break;
 8005d44:	e030      	b.n	8005da8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d025      	beq.n	8005d9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d56:	e022      	b.n	8005d9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d60:	d11f      	bne.n	8005da2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d66:	e01c      	b.n	8005da2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d903      	bls.n	8005d76 <DMA_CheckFifoParam+0xb6>
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d003      	beq.n	8005d7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d74:	e018      	b.n	8005da8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	73fb      	strb	r3, [r7, #15]
      break;
 8005d7a:	e015      	b.n	8005da8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00e      	beq.n	8005da6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d8c:	e00b      	b.n	8005da6 <DMA_CheckFifoParam+0xe6>
      break;
 8005d8e:	bf00      	nop
 8005d90:	e00a      	b.n	8005da8 <DMA_CheckFifoParam+0xe8>
      break;
 8005d92:	bf00      	nop
 8005d94:	e008      	b.n	8005da8 <DMA_CheckFifoParam+0xe8>
      break;
 8005d96:	bf00      	nop
 8005d98:	e006      	b.n	8005da8 <DMA_CheckFifoParam+0xe8>
      break;
 8005d9a:	bf00      	nop
 8005d9c:	e004      	b.n	8005da8 <DMA_CheckFifoParam+0xe8>
      break;
 8005d9e:	bf00      	nop
 8005da0:	e002      	b.n	8005da8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005da2:	bf00      	nop
 8005da4:	e000      	b.n	8005da8 <DMA_CheckFifoParam+0xe8>
      break;
 8005da6:	bf00      	nop
    }
  } 
  
  return status; 
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop

08005db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b089      	sub	sp, #36	; 0x24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	e159      	b.n	8006088 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4013      	ands	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	f040 8148 	bne.w	8006082 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d005      	beq.n	8005e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d130      	bne.n	8005e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	2203      	movs	r2, #3
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e40:	2201      	movs	r2, #1
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	091b      	lsrs	r3, r3, #4
 8005e56:	f003 0201 	and.w	r2, r3, #1
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	2b03      	cmp	r3, #3
 8005e76:	d017      	beq.n	8005ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	2203      	movs	r2, #3
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f003 0303 	and.w	r3, r3, #3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d123      	bne.n	8005efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	08da      	lsrs	r2, r3, #3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3208      	adds	r2, #8
 8005ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	220f      	movs	r2, #15
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	08da      	lsrs	r2, r3, #3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3208      	adds	r2, #8
 8005ef6:	69b9      	ldr	r1, [r7, #24]
 8005ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	2203      	movs	r2, #3
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4013      	ands	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f003 0203 	and.w	r2, r3, #3
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80a2 	beq.w	8006082 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	4b57      	ldr	r3, [pc, #348]	; (80060a0 <HAL_GPIO_Init+0x2e8>)
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	4a56      	ldr	r2, [pc, #344]	; (80060a0 <HAL_GPIO_Init+0x2e8>)
 8005f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f4e:	4b54      	ldr	r3, [pc, #336]	; (80060a0 <HAL_GPIO_Init+0x2e8>)
 8005f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f5a:	4a52      	ldr	r2, [pc, #328]	; (80060a4 <HAL_GPIO_Init+0x2ec>)
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	089b      	lsrs	r3, r3, #2
 8005f60:	3302      	adds	r3, #2
 8005f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	220f      	movs	r2, #15
 8005f72:	fa02 f303 	lsl.w	r3, r2, r3
 8005f76:	43db      	mvns	r3, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a49      	ldr	r2, [pc, #292]	; (80060a8 <HAL_GPIO_Init+0x2f0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d019      	beq.n	8005fba <HAL_GPIO_Init+0x202>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a48      	ldr	r2, [pc, #288]	; (80060ac <HAL_GPIO_Init+0x2f4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_GPIO_Init+0x1fe>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a47      	ldr	r2, [pc, #284]	; (80060b0 <HAL_GPIO_Init+0x2f8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00d      	beq.n	8005fb2 <HAL_GPIO_Init+0x1fa>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a46      	ldr	r2, [pc, #280]	; (80060b4 <HAL_GPIO_Init+0x2fc>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d007      	beq.n	8005fae <HAL_GPIO_Init+0x1f6>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a45      	ldr	r2, [pc, #276]	; (80060b8 <HAL_GPIO_Init+0x300>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d101      	bne.n	8005faa <HAL_GPIO_Init+0x1f2>
 8005fa6:	2304      	movs	r3, #4
 8005fa8:	e008      	b.n	8005fbc <HAL_GPIO_Init+0x204>
 8005faa:	2307      	movs	r3, #7
 8005fac:	e006      	b.n	8005fbc <HAL_GPIO_Init+0x204>
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e004      	b.n	8005fbc <HAL_GPIO_Init+0x204>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e002      	b.n	8005fbc <HAL_GPIO_Init+0x204>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <HAL_GPIO_Init+0x204>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	f002 0203 	and.w	r2, r2, #3
 8005fc2:	0092      	lsls	r2, r2, #2
 8005fc4:	4093      	lsls	r3, r2
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fcc:	4935      	ldr	r1, [pc, #212]	; (80060a4 <HAL_GPIO_Init+0x2ec>)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	089b      	lsrs	r3, r3, #2
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fda:	4b38      	ldr	r3, [pc, #224]	; (80060bc <HAL_GPIO_Init+0x304>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ffe:	4a2f      	ldr	r2, [pc, #188]	; (80060bc <HAL_GPIO_Init+0x304>)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006004:	4b2d      	ldr	r3, [pc, #180]	; (80060bc <HAL_GPIO_Init+0x304>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	43db      	mvns	r3, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4013      	ands	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006028:	4a24      	ldr	r2, [pc, #144]	; (80060bc <HAL_GPIO_Init+0x304>)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800602e:	4b23      	ldr	r3, [pc, #140]	; (80060bc <HAL_GPIO_Init+0x304>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	43db      	mvns	r3, r3
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	4013      	ands	r3, r2
 800603c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006052:	4a1a      	ldr	r2, [pc, #104]	; (80060bc <HAL_GPIO_Init+0x304>)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006058:	4b18      	ldr	r3, [pc, #96]	; (80060bc <HAL_GPIO_Init+0x304>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	43db      	mvns	r3, r3
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	4013      	ands	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800607c:	4a0f      	ldr	r2, [pc, #60]	; (80060bc <HAL_GPIO_Init+0x304>)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3301      	adds	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2b0f      	cmp	r3, #15
 800608c:	f67f aea2 	bls.w	8005dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006090:	bf00      	nop
 8006092:	bf00      	nop
 8006094:	3724      	adds	r7, #36	; 0x24
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40013800 	.word	0x40013800
 80060a8:	40020000 	.word	0x40020000
 80060ac:	40020400 	.word	0x40020400
 80060b0:	40020800 	.word	0x40020800
 80060b4:	40020c00 	.word	0x40020c00
 80060b8:	40021000 	.word	0x40021000
 80060bc:	40013c00 	.word	0x40013c00

080060c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	807b      	strh	r3, [r7, #2]
 80060cc:	4613      	mov	r3, r2
 80060ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060d0:	787b      	ldrb	r3, [r7, #1]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060d6:	887a      	ldrh	r2, [r7, #2]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060dc:	e003      	b.n	80060e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060de:	887b      	ldrh	r3, [r7, #2]
 80060e0:	041a      	lsls	r2, r3, #16
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	619a      	str	r2, [r3, #24]
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80060fe:	4b08      	ldr	r3, [pc, #32]	; (8006120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006100:	695a      	ldr	r2, [r3, #20]
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	4013      	ands	r3, r2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d006      	beq.n	8006118 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800610a:	4a05      	ldr	r2, [pc, #20]	; (8006120 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800610c:	88fb      	ldrh	r3, [r7, #6]
 800610e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006110:	88fb      	ldrh	r3, [r7, #6]
 8006112:	4618      	mov	r0, r3
 8006114:	f7fb fdce 	bl	8001cb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40013c00 	.word	0x40013c00

08006124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e12b      	b.n	800638e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fe f89a 	bl	8004284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2224      	movs	r2, #36	; 0x24
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006176:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006186:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006188:	f003 f884 	bl	8009294 <HAL_RCC_GetPCLK1Freq>
 800618c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	4a81      	ldr	r2, [pc, #516]	; (8006398 <HAL_I2C_Init+0x274>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d807      	bhi.n	80061a8 <HAL_I2C_Init+0x84>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a80      	ldr	r2, [pc, #512]	; (800639c <HAL_I2C_Init+0x278>)
 800619c:	4293      	cmp	r3, r2
 800619e:	bf94      	ite	ls
 80061a0:	2301      	movls	r3, #1
 80061a2:	2300      	movhi	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	e006      	b.n	80061b6 <HAL_I2C_Init+0x92>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4a7d      	ldr	r2, [pc, #500]	; (80063a0 <HAL_I2C_Init+0x27c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	bf94      	ite	ls
 80061b0:	2301      	movls	r3, #1
 80061b2:	2300      	movhi	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e0e7      	b.n	800638e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4a78      	ldr	r2, [pc, #480]	; (80063a4 <HAL_I2C_Init+0x280>)
 80061c2:	fba2 2303 	umull	r2, r3, r2, r3
 80061c6:	0c9b      	lsrs	r3, r3, #18
 80061c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	4a6a      	ldr	r2, [pc, #424]	; (8006398 <HAL_I2C_Init+0x274>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d802      	bhi.n	80061f8 <HAL_I2C_Init+0xd4>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	3301      	adds	r3, #1
 80061f6:	e009      	b.n	800620c <HAL_I2C_Init+0xe8>
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	4a69      	ldr	r2, [pc, #420]	; (80063a8 <HAL_I2C_Init+0x284>)
 8006204:	fba2 2303 	umull	r2, r3, r2, r3
 8006208:	099b      	lsrs	r3, r3, #6
 800620a:	3301      	adds	r3, #1
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6812      	ldr	r2, [r2, #0]
 8006210:	430b      	orrs	r3, r1
 8006212:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800621e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	495c      	ldr	r1, [pc, #368]	; (8006398 <HAL_I2C_Init+0x274>)
 8006228:	428b      	cmp	r3, r1
 800622a:	d819      	bhi.n	8006260 <HAL_I2C_Init+0x13c>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	1e59      	subs	r1, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	fbb1 f3f3 	udiv	r3, r1, r3
 800623a:	1c59      	adds	r1, r3, #1
 800623c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006240:	400b      	ands	r3, r1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <HAL_I2C_Init+0x138>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	1e59      	subs	r1, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	fbb1 f3f3 	udiv	r3, r1, r3
 8006254:	3301      	adds	r3, #1
 8006256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800625a:	e051      	b.n	8006300 <HAL_I2C_Init+0x1dc>
 800625c:	2304      	movs	r3, #4
 800625e:	e04f      	b.n	8006300 <HAL_I2C_Init+0x1dc>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d111      	bne.n	800628c <HAL_I2C_Init+0x168>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	1e58      	subs	r0, r3, #1
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6859      	ldr	r1, [r3, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	440b      	add	r3, r1
 8006276:	fbb0 f3f3 	udiv	r3, r0, r3
 800627a:	3301      	adds	r3, #1
 800627c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006280:	2b00      	cmp	r3, #0
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	e012      	b.n	80062b2 <HAL_I2C_Init+0x18e>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	1e58      	subs	r0, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6859      	ldr	r1, [r3, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	0099      	lsls	r1, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	fbb0 f3f3 	udiv	r3, r0, r3
 80062a2:	3301      	adds	r3, #1
 80062a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bf0c      	ite	eq
 80062ac:	2301      	moveq	r3, #1
 80062ae:	2300      	movne	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_I2C_Init+0x196>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e022      	b.n	8006300 <HAL_I2C_Init+0x1dc>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10e      	bne.n	80062e0 <HAL_I2C_Init+0x1bc>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	1e58      	subs	r0, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6859      	ldr	r1, [r3, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	440b      	add	r3, r1
 80062d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80062d4:	3301      	adds	r3, #1
 80062d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062de:	e00f      	b.n	8006300 <HAL_I2C_Init+0x1dc>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1e58      	subs	r0, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	0099      	lsls	r1, r3, #2
 80062f0:	440b      	add	r3, r1
 80062f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062f6:	3301      	adds	r3, #1
 80062f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	6809      	ldr	r1, [r1, #0]
 8006304:	4313      	orrs	r3, r2
 8006306:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69da      	ldr	r2, [r3, #28]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800632e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6911      	ldr	r1, [r2, #16]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68d2      	ldr	r2, [r2, #12]
 800633a:	4311      	orrs	r1, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	430b      	orrs	r3, r1
 8006342:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	695a      	ldr	r2, [r3, #20]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2220      	movs	r2, #32
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	000186a0 	.word	0x000186a0
 800639c:	001e847f 	.word	0x001e847f
 80063a0:	003d08ff 	.word	0x003d08ff
 80063a4:	431bde83 	.word	0x431bde83
 80063a8:	10624dd3 	.word	0x10624dd3

080063ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	461a      	mov	r2, r3
 80063b8:	460b      	mov	r3, r1
 80063ba:	817b      	strh	r3, [r7, #10]
 80063bc:	4613      	mov	r3, r2
 80063be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063c0:	f7fe fd08 	bl	8004dd4 <HAL_GetTick>
 80063c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	f040 80e0 	bne.w	8006594 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	2319      	movs	r3, #25
 80063da:	2201      	movs	r2, #1
 80063dc:	4970      	ldr	r1, [pc, #448]	; (80065a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f002 f8be 	bl	8008560 <I2C_WaitOnFlagUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
 80063ec:	e0d3      	b.n	8006596 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_I2C_Master_Transmit+0x50>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e0cc      	b.n	8006596 <HAL_I2C_Master_Transmit+0x1ea>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b01      	cmp	r3, #1
 8006410:	d007      	beq.n	8006422 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0201 	orr.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006430:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2221      	movs	r2, #33	; 0x21
 8006436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2210      	movs	r2, #16
 800643e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	893a      	ldrh	r2, [r7, #8]
 8006452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006458:	b29a      	uxth	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4a50      	ldr	r2, [pc, #320]	; (80065a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006462:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006464:	8979      	ldrh	r1, [r7, #10]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	6a3a      	ldr	r2, [r7, #32]
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f001 fe80 	bl	8008170 <I2C_MasterRequestWrite>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e08d      	b.n	8006596 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800647a:	2300      	movs	r3, #0
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006490:	e066      	b.n	8006560 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	6a39      	ldr	r1, [r7, #32]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f002 f938 	bl	800870c <I2C_WaitOnTXEFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00d      	beq.n	80064be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d107      	bne.n	80064ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e06b      	b.n	8006596 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	781a      	ldrb	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d11b      	bne.n	8006534 <HAL_I2C_Master_Transmit+0x188>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006500:	2b00      	cmp	r3, #0
 8006502:	d017      	beq.n	8006534 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652c:	3b01      	subs	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	6a39      	ldr	r1, [r7, #32]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f002 f928 	bl	800878e <I2C_WaitOnBTFFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00d      	beq.n	8006560 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	2b04      	cmp	r3, #4
 800654a:	d107      	bne.n	800655c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800655a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e01a      	b.n	8006596 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006564:	2b00      	cmp	r3, #0
 8006566:	d194      	bne.n	8006492 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	e000      	b.n	8006596 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006594:	2302      	movs	r3, #2
  }
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	00100002 	.word	0x00100002
 80065a4:	ffff0000 	.word	0xffff0000

080065a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08c      	sub	sp, #48	; 0x30
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	461a      	mov	r2, r3
 80065b4:	460b      	mov	r3, r1
 80065b6:	817b      	strh	r3, [r7, #10]
 80065b8:	4613      	mov	r3, r2
 80065ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065bc:	f7fe fc0a 	bl	8004dd4 <HAL_GetTick>
 80065c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	f040 820b 	bne.w	80069e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	2319      	movs	r3, #25
 80065d6:	2201      	movs	r2, #1
 80065d8:	497c      	ldr	r1, [pc, #496]	; (80067cc <HAL_I2C_Master_Receive+0x224>)
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f001 ffc0 	bl	8008560 <I2C_WaitOnFlagUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80065e6:	2302      	movs	r3, #2
 80065e8:	e1fe      	b.n	80069e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_I2C_Master_Receive+0x50>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e1f7      	b.n	80069e8 <HAL_I2C_Master_Receive+0x440>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b01      	cmp	r3, #1
 800660c:	d007      	beq.n	800661e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0201 	orr.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800662c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2222      	movs	r2, #34	; 0x22
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2210      	movs	r2, #16
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	893a      	ldrh	r2, [r7, #8]
 800664e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a5c      	ldr	r2, [pc, #368]	; (80067d0 <HAL_I2C_Master_Receive+0x228>)
 800665e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006660:	8979      	ldrh	r1, [r7, #10]
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f001 fe04 	bl	8008274 <I2C_MasterRequestRead>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e1b8      	b.n	80069e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667a:	2b00      	cmp	r3, #0
 800667c:	d113      	bne.n	80066a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667e:	2300      	movs	r3, #0
 8006680:	623b      	str	r3, [r7, #32]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	623b      	str	r3, [r7, #32]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	623b      	str	r3, [r7, #32]
 8006692:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	e18c      	b.n	80069c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d11b      	bne.n	80066e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066be:	2300      	movs	r3, #0
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	61fb      	str	r3, [r7, #28]
 80066d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e16c      	b.n	80069c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d11b      	bne.n	8006726 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800670c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800670e:	2300      	movs	r3, #0
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	e14c      	b.n	80069c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800674c:	e138      	b.n	80069c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006752:	2b03      	cmp	r3, #3
 8006754:	f200 80f1 	bhi.w	800693a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800675c:	2b01      	cmp	r3, #1
 800675e:	d123      	bne.n	80067a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f002 f885 	bl	8008874 <I2C_WaitOnRXNEFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e139      	b.n	80069e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679c:	b29b      	uxth	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067a6:	e10b      	b.n	80069c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d14e      	bne.n	800684e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	2200      	movs	r2, #0
 80067b8:	4906      	ldr	r1, [pc, #24]	; (80067d4 <HAL_I2C_Master_Receive+0x22c>)
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f001 fed0 	bl	8008560 <I2C_WaitOnFlagUntilTimeout>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d008      	beq.n	80067d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e10e      	b.n	80069e8 <HAL_I2C_Master_Receive+0x440>
 80067ca:	bf00      	nop
 80067cc:	00100002 	.word	0x00100002
 80067d0:	ffff0000 	.word	0xffff0000
 80067d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006842:	b29b      	uxth	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800684c:	e0b8      	b.n	80069c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	2200      	movs	r2, #0
 8006856:	4966      	ldr	r1, [pc, #408]	; (80069f0 <HAL_I2C_Master_Receive+0x448>)
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f001 fe81 	bl	8008560 <I2C_WaitOnFlagUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0bf      	b.n	80069e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	b2d2      	uxtb	r2, r2
 8006884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006894:	3b01      	subs	r3, #1
 8006896:	b29a      	uxth	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	2200      	movs	r2, #0
 80068b2:	494f      	ldr	r1, [pc, #316]	; (80069f0 <HAL_I2C_Master_Receive+0x448>)
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f001 fe53 	bl	8008560 <I2C_WaitOnFlagUntilTimeout>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e091      	b.n	80069e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006938:	e042      	b.n	80069c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800693a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f001 ff98 	bl	8008874 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e04c      	b.n	80069e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800696a:	3b01      	subs	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b04      	cmp	r3, #4
 800698c:	d118      	bne.n	80069c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f47f aec2 	bne.w	800674e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	e000      	b.n	80069e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80069e6:	2302      	movs	r3, #2
  }
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3728      	adds	r7, #40	; 0x28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	00010004 	.word	0x00010004

080069f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a14:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d003      	beq.n	8006a2c <HAL_I2C_EV_IRQHandler+0x38>
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	f040 80b1 	bne.w	8006b8e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10d      	bne.n	8006a62 <HAL_I2C_EV_IRQHandler+0x6e>
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a4c:	d003      	beq.n	8006a56 <HAL_I2C_EV_IRQHandler+0x62>
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a54:	d101      	bne.n	8006a5a <HAL_I2C_EV_IRQHandler+0x66>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e000      	b.n	8006a5c <HAL_I2C_EV_IRQHandler+0x68>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	f000 8114 	beq.w	8006c8a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00b      	beq.n	8006a84 <HAL_I2C_EV_IRQHandler+0x90>
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d006      	beq.n	8006a84 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 ff81 	bl	800897e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fd5e 	bl	800753e <I2C_Master_SB>
 8006a82:	e083      	b.n	8006b8c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f003 0308 	and.w	r3, r3, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d008      	beq.n	8006aa0 <HAL_I2C_EV_IRQHandler+0xac>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fdd6 	bl	800764a <I2C_Master_ADD10>
 8006a9e:	e075      	b.n	8006b8c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d008      	beq.n	8006abc <HAL_I2C_EV_IRQHandler+0xc8>
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fdf2 	bl	800769e <I2C_Master_ADDR>
 8006aba:	e067      	b.n	8006b8c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f003 0304 	and.w	r3, r3, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d036      	beq.n	8006b34 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad4:	f000 80db 	beq.w	8006c8e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00d      	beq.n	8006afe <HAL_I2C_EV_IRQHandler+0x10a>
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <HAL_I2C_EV_IRQHandler+0x10a>
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d103      	bne.n	8006afe <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f9d6 	bl	8006ea8 <I2C_MasterTransmit_TXE>
 8006afc:	e046      	b.n	8006b8c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 80c2 	beq.w	8006c8e <HAL_I2C_EV_IRQHandler+0x29a>
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 80bc 	beq.w	8006c8e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b16:	7bbb      	ldrb	r3, [r7, #14]
 8006b18:	2b21      	cmp	r3, #33	; 0x21
 8006b1a:	d103      	bne.n	8006b24 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fa5f 	bl	8006fe0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b22:	e0b4      	b.n	8006c8e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	f040 80b1 	bne.w	8006c8e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 facd 	bl	80070cc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b32:	e0ac      	b.n	8006c8e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b42:	f000 80a4 	beq.w	8006c8e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <HAL_I2C_EV_IRQHandler+0x178>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d008      	beq.n	8006b6c <HAL_I2C_EV_IRQHandler+0x178>
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d103      	bne.n	8006b6c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fb45 	bl	80071f4 <I2C_MasterReceive_RXNE>
 8006b6a:	e00f      	b.n	8006b8c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 808b 	beq.w	8006c8e <HAL_I2C_EV_IRQHandler+0x29a>
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 8085 	beq.w	8006c8e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fbf0 	bl	800736a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b8a:	e080      	b.n	8006c8e <HAL_I2C_EV_IRQHandler+0x29a>
 8006b8c:	e07f      	b.n	8006c8e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d004      	beq.n	8006ba0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	61fb      	str	r3, [r7, #28]
 8006b9e:	e007      	b.n	8006bb0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d011      	beq.n	8006bde <HAL_I2C_EV_IRQHandler+0x1ea>
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00c      	beq.n	8006bde <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006bd4:	69b9      	ldr	r1, [r7, #24]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 ffb0 	bl	8007b3c <I2C_Slave_ADDR>
 8006bdc:	e05a      	b.n	8006c94 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	f003 0310 	and.w	r3, r3, #16
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <HAL_I2C_EV_IRQHandler+0x206>
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 ffea 	bl	8007bcc <I2C_Slave_STOPF>
 8006bf8:	e04c      	b.n	8006c94 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	2b21      	cmp	r3, #33	; 0x21
 8006bfe:	d002      	beq.n	8006c06 <HAL_I2C_EV_IRQHandler+0x212>
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
 8006c02:	2b29      	cmp	r3, #41	; 0x29
 8006c04:	d120      	bne.n	8006c48 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00d      	beq.n	8006c2c <HAL_I2C_EV_IRQHandler+0x238>
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d008      	beq.n	8006c2c <HAL_I2C_EV_IRQHandler+0x238>
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d103      	bne.n	8006c2c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fecb 	bl	80079c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c2a:	e032      	b.n	8006c92 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f003 0304 	and.w	r3, r3, #4
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d02d      	beq.n	8006c92 <HAL_I2C_EV_IRQHandler+0x29e>
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d028      	beq.n	8006c92 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fefa 	bl	8007a3a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c46:	e024      	b.n	8006c92 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00d      	beq.n	8006c6e <HAL_I2C_EV_IRQHandler+0x27a>
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d008      	beq.n	8006c6e <HAL_I2C_EV_IRQHandler+0x27a>
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 ff08 	bl	8007a7c <I2C_SlaveReceive_RXNE>
 8006c6c:	e012      	b.n	8006c94 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00d      	beq.n	8006c94 <HAL_I2C_EV_IRQHandler+0x2a0>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d008      	beq.n	8006c94 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 ff38 	bl	8007af8 <I2C_SlaveReceive_BTF>
 8006c88:	e004      	b.n	8006c94 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006c8a:	bf00      	nop
 8006c8c:	e002      	b.n	8006c94 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c8e:	bf00      	nop
 8006c90:	e000      	b.n	8006c94 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c92:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006c94:	3720      	adds	r7, #32
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b08a      	sub	sp, #40	; 0x28
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cbc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00d      	beq.n	8006ce4 <HAL_I2C_ER_IRQHandler+0x4a>
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d008      	beq.n	8006ce4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	f043 0301 	orr.w	r3, r3, #1
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ce2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00d      	beq.n	8006d0a <HAL_I2C_ER_IRQHandler+0x70>
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d008      	beq.n	8006d0a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	f043 0302 	orr.w	r3, r3, #2
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006d08:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d03e      	beq.n	8006d92 <HAL_I2C_ER_IRQHandler+0xf8>
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d039      	beq.n	8006d92 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8006d1e:	7efb      	ldrb	r3, [r7, #27]
 8006d20:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d30:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006d38:	7ebb      	ldrb	r3, [r7, #26]
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d112      	bne.n	8006d64 <HAL_I2C_ER_IRQHandler+0xca>
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10f      	bne.n	8006d64 <HAL_I2C_ER_IRQHandler+0xca>
 8006d44:	7cfb      	ldrb	r3, [r7, #19]
 8006d46:	2b21      	cmp	r3, #33	; 0x21
 8006d48:	d008      	beq.n	8006d5c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006d4a:	7cfb      	ldrb	r3, [r7, #19]
 8006d4c:	2b29      	cmp	r3, #41	; 0x29
 8006d4e:	d005      	beq.n	8006d5c <HAL_I2C_ER_IRQHandler+0xc2>
 8006d50:	7cfb      	ldrb	r3, [r7, #19]
 8006d52:	2b28      	cmp	r3, #40	; 0x28
 8006d54:	d106      	bne.n	8006d64 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b21      	cmp	r3, #33	; 0x21
 8006d5a:	d103      	bne.n	8006d64 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 f865 	bl	8007e2c <I2C_Slave_AF>
 8006d62:	e016      	b.n	8006d92 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d6c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	f043 0304 	orr.w	r3, r3, #4
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d76:	7efb      	ldrb	r3, [r7, #27]
 8006d78:	2b10      	cmp	r3, #16
 8006d7a:	d002      	beq.n	8006d82 <HAL_I2C_ER_IRQHandler+0xe8>
 8006d7c:	7efb      	ldrb	r3, [r7, #27]
 8006d7e:	2b40      	cmp	r3, #64	; 0x40
 8006d80:	d107      	bne.n	8006d92 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d90:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00d      	beq.n	8006db8 <HAL_I2C_ER_IRQHandler+0x11e>
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d008      	beq.n	8006db8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	f043 0308 	orr.w	r3, r3, #8
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006db6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d008      	beq.n	8006dd0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 f89e 	bl	8007f0c <I2C_ITError>
  }
}
 8006dd0:	bf00      	nop
 8006dd2:	3728      	adds	r7, #40	; 0x28
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	70fb      	strb	r3, [r7, #3]
 8006e34:	4613      	mov	r3, r2
 8006e36:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ebe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d150      	bne.n	8006f70 <I2C_MasterTransmit_TXE+0xc8>
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	2b21      	cmp	r3, #33	; 0x21
 8006ed2:	d14d      	bne.n	8006f70 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d01d      	beq.n	8006f16 <I2C_MasterTransmit_TXE+0x6e>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d01a      	beq.n	8006f16 <I2C_MasterTransmit_TXE+0x6e>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ee6:	d016      	beq.n	8006f16 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ef6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2211      	movs	r2, #17
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff ff62 	bl	8006dd8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f14:	e060      	b.n	8006fd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f24:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f34:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	d107      	bne.n	8006f60 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff ff7d 	bl	8006e58 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f5e:	e03b      	b.n	8006fd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff ff35 	bl	8006dd8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f6e:	e033      	b.n	8006fd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	2b21      	cmp	r3, #33	; 0x21
 8006f74:	d005      	beq.n	8006f82 <I2C_MasterTransmit_TXE+0xda>
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	d12d      	bne.n	8006fd8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b22      	cmp	r3, #34	; 0x22
 8006f80:	d12a      	bne.n	8006fd8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d108      	bne.n	8006f9e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f9a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006f9c:	e01c      	b.n	8006fd8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b40      	cmp	r3, #64	; 0x40
 8006fa8:	d103      	bne.n	8006fb2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f88e 	bl	80070cc <I2C_MemoryTransmit_TXE_BTF>
}
 8006fb0:	e012      	b.n	8006fd8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	781a      	ldrb	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006fd6:	e7ff      	b.n	8006fd8 <I2C_MasterTransmit_TXE+0x130>
 8006fd8:	bf00      	nop
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b21      	cmp	r3, #33	; 0x21
 8006ff8:	d164      	bne.n	80070c4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d012      	beq.n	800702a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	781a      	ldrb	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007028:	e04c      	b.n	80070c4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b08      	cmp	r3, #8
 800702e:	d01d      	beq.n	800706c <I2C_MasterTransmit_BTF+0x8c>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b20      	cmp	r3, #32
 8007034:	d01a      	beq.n	800706c <I2C_MasterTransmit_BTF+0x8c>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800703c:	d016      	beq.n	800706c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800704c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2211      	movs	r2, #17
 8007052:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2220      	movs	r2, #32
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff feb7 	bl	8006dd8 <HAL_I2C_MasterTxCpltCallback>
}
 800706a:	e02b      	b.n	80070c4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800707a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800708a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2220      	movs	r2, #32
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d107      	bne.n	80070b6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff fed2 	bl	8006e58 <HAL_I2C_MemTxCpltCallback>
}
 80070b4:	e006      	b.n	80070c4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff fe8a 	bl	8006dd8 <HAL_I2C_MasterTxCpltCallback>
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d11d      	bne.n	8007120 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d10b      	bne.n	8007104 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fc:	1c9a      	adds	r2, r3, #2
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007102:	e073      	b.n	80071ec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007108:	b29b      	uxth	r3, r3
 800710a:	121b      	asrs	r3, r3, #8
 800710c:	b2da      	uxtb	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800711e:	e065      	b.n	80071ec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007124:	2b01      	cmp	r3, #1
 8007126:	d10b      	bne.n	8007140 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712c:	b2da      	uxtb	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800713e:	e055      	b.n	80071ec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007144:	2b02      	cmp	r3, #2
 8007146:	d151      	bne.n	80071ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	2b22      	cmp	r3, #34	; 0x22
 800714c:	d10d      	bne.n	800716a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800715c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007168:	e040      	b.n	80071ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800716e:	b29b      	uxth	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d015      	beq.n	80071a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007174:	7bfb      	ldrb	r3, [r7, #15]
 8007176:	2b21      	cmp	r3, #33	; 0x21
 8007178:	d112      	bne.n	80071a0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	781a      	ldrb	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800719e:	e025      	b.n	80071ec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d120      	bne.n	80071ec <I2C_MemoryTransmit_TXE_BTF+0x120>
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	2b21      	cmp	r3, #33	; 0x21
 80071ae:	d11d      	bne.n	80071ec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80071be:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2220      	movs	r2, #32
 80071da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff fe36 	bl	8006e58 <HAL_I2C_MemTxCpltCallback>
}
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b22      	cmp	r3, #34	; 0x22
 8007206:	f040 80ac 	bne.w	8007362 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800720e:	b29b      	uxth	r3, r3
 8007210:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b03      	cmp	r3, #3
 8007216:	d921      	bls.n	800725c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	691a      	ldr	r2, [r3, #16]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	b2d2      	uxtb	r2, r2
 8007224:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007242:	b29b      	uxth	r3, r3
 8007244:	2b03      	cmp	r3, #3
 8007246:	f040 808c 	bne.w	8007362 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007258:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800725a:	e082      	b.n	8007362 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	2b02      	cmp	r3, #2
 8007262:	d075      	beq.n	8007350 <I2C_MasterReceive_RXNE+0x15c>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d002      	beq.n	8007270 <I2C_MasterReceive_RXNE+0x7c>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d16f      	bne.n	8007350 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 facd 	bl	8008810 <I2C_WaitOnSTOPRequestThroughIT>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d142      	bne.n	8007302 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800728a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800729a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b40      	cmp	r3, #64	; 0x40
 80072d4:	d10a      	bne.n	80072ec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7ff fdc1 	bl	8006e6c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072ea:	e03a      	b.n	8007362 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2212      	movs	r2, #18
 80072f8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff fd76 	bl	8006dec <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007300:	e02f      	b.n	8007362 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007310:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	b29a      	uxth	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff fd99 	bl	8006e80 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800734e:	e008      	b.n	8007362 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735e:	605a      	str	r2, [r3, #4]
}
 8007360:	e7ff      	b.n	8007362 <I2C_MasterReceive_RXNE+0x16e>
 8007362:	bf00      	nop
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737c:	b29b      	uxth	r3, r3
 800737e:	2b04      	cmp	r3, #4
 8007380:	d11b      	bne.n	80073ba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007390:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	691a      	ldr	r2, [r3, #16]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80073b8:	e0bd      	b.n	8007536 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d129      	bne.n	8007418 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d00a      	beq.n	80073f0 <I2C_MasterReceive_BTF+0x86>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d007      	beq.n	80073f0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	691a      	ldr	r2, [r3, #16]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	b2d2      	uxtb	r2, r2
 80073fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b01      	subs	r3, #1
 8007410:	b29a      	uxth	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007416:	e08e      	b.n	8007536 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b02      	cmp	r3, #2
 8007420:	d176      	bne.n	8007510 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d002      	beq.n	800742e <I2C_MasterReceive_BTF+0xc4>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b10      	cmp	r3, #16
 800742c:	d108      	bne.n	8007440 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e019      	b.n	8007474 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b04      	cmp	r3, #4
 8007444:	d002      	beq.n	800744c <I2C_MasterReceive_BTF+0xe2>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d108      	bne.n	800745e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	e00a      	b.n	8007474 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b10      	cmp	r3, #16
 8007462:	d007      	beq.n	8007474 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007472:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691a      	ldr	r2, [r3, #16]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007490:	b29b      	uxth	r3, r3
 8007492:	3b01      	subs	r3, #1
 8007494:	b29a      	uxth	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	691a      	ldr	r2, [r3, #16]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80074ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b40      	cmp	r3, #64	; 0x40
 80074e2:	d10a      	bne.n	80074fa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff fcba 	bl	8006e6c <HAL_I2C_MemRxCpltCallback>
}
 80074f8:	e01d      	b.n	8007536 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2212      	movs	r2, #18
 8007506:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff fc6f 	bl	8006dec <HAL_I2C_MasterRxCpltCallback>
}
 800750e:	e012      	b.n	8007536 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691a      	ldr	r2, [r3, #16]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b40      	cmp	r3, #64	; 0x40
 8007550:	d117      	bne.n	8007582 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755e:	b2db      	uxtb	r3, r3
 8007560:	461a      	mov	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800756a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800756c:	e067      	b.n	800763e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f043 0301 	orr.w	r3, r3, #1
 8007578:	b2da      	uxtb	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	611a      	str	r2, [r3, #16]
}
 8007580:	e05d      	b.n	800763e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800758a:	d133      	bne.n	80075f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b21      	cmp	r3, #33	; 0x21
 8007596:	d109      	bne.n	80075ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759c:	b2db      	uxtb	r3, r3
 800759e:	461a      	mov	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075a8:	611a      	str	r2, [r3, #16]
 80075aa:	e008      	b.n	80075be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d004      	beq.n	80075d0 <I2C_Master_SB+0x92>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d108      	bne.n	80075e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d032      	beq.n	800763e <I2C_Master_SB+0x100>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d02d      	beq.n	800763e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075f0:	605a      	str	r2, [r3, #4]
}
 80075f2:	e024      	b.n	800763e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10e      	bne.n	800761a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007600:	b29b      	uxth	r3, r3
 8007602:	11db      	asrs	r3, r3, #7
 8007604:	b2db      	uxtb	r3, r3
 8007606:	f003 0306 	and.w	r3, r3, #6
 800760a:	b2db      	uxtb	r3, r3
 800760c:	f063 030f 	orn	r3, r3, #15
 8007610:	b2da      	uxtb	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	611a      	str	r2, [r3, #16]
}
 8007618:	e011      	b.n	800763e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761e:	2b01      	cmp	r3, #1
 8007620:	d10d      	bne.n	800763e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	b29b      	uxth	r3, r3
 8007628:	11db      	asrs	r3, r3, #7
 800762a:	b2db      	uxtb	r3, r3
 800762c:	f003 0306 	and.w	r3, r3, #6
 8007630:	b2db      	uxtb	r3, r3
 8007632:	f063 030e 	orn	r3, r3, #14
 8007636:	b2da      	uxtb	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	611a      	str	r2, [r3, #16]
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	b2da      	uxtb	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007662:	2b00      	cmp	r3, #0
 8007664:	d004      	beq.n	8007670 <I2C_Master_ADD10+0x26>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766c:	2b00      	cmp	r3, #0
 800766e:	d108      	bne.n	8007682 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00c      	beq.n	8007692 <I2C_Master_ADD10+0x48>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d007      	beq.n	8007692 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007690:	605a      	str	r2, [r3, #4]
  }
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800769e:	b480      	push	{r7}
 80076a0:	b091      	sub	sp, #68	; 0x44
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b22      	cmp	r3, #34	; 0x22
 80076c6:	f040 8169 	bne.w	800799c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10f      	bne.n	80076f2 <I2C_Master_ADDR+0x54>
 80076d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80076d6:	2b40      	cmp	r3, #64	; 0x40
 80076d8:	d10b      	bne.n	80076f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076da:	2300      	movs	r3, #0
 80076dc:	633b      	str	r3, [r7, #48]	; 0x30
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	633b      	str	r3, [r7, #48]	; 0x30
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	633b      	str	r3, [r7, #48]	; 0x30
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	e160      	b.n	80079b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d11d      	bne.n	8007736 <I2C_Master_ADDR+0x98>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007702:	d118      	bne.n	8007736 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007704:	2300      	movs	r3, #0
 8007706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007718:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007728:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	651a      	str	r2, [r3, #80]	; 0x50
 8007734:	e13e      	b.n	80079b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773a:	b29b      	uxth	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d113      	bne.n	8007768 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007740:	2300      	movs	r3, #0
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	e115      	b.n	8007994 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b01      	cmp	r3, #1
 8007770:	f040 808a 	bne.w	8007888 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800777a:	d137      	bne.n	80077ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800778a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800779a:	d113      	bne.n	80077c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ac:	2300      	movs	r3, #0
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	e0e7      	b.n	8007994 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077c4:	2300      	movs	r3, #0
 80077c6:	623b      	str	r3, [r7, #32]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	623b      	str	r3, [r7, #32]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	623b      	str	r3, [r7, #32]
 80077d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	e0d3      	b.n	8007994 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d02e      	beq.n	8007850 <I2C_Master_ADDR+0x1b2>
 80077f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d02b      	beq.n	8007850 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80077f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fa:	2b12      	cmp	r3, #18
 80077fc:	d102      	bne.n	8007804 <I2C_Master_ADDR+0x166>
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	2b01      	cmp	r3, #1
 8007802:	d125      	bne.n	8007850 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	2b04      	cmp	r3, #4
 8007808:	d00e      	beq.n	8007828 <I2C_Master_ADDR+0x18a>
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	2b02      	cmp	r3, #2
 800780e:	d00b      	beq.n	8007828 <I2C_Master_ADDR+0x18a>
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	2b10      	cmp	r3, #16
 8007814:	d008      	beq.n	8007828 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e007      	b.n	8007838 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007836:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	61fb      	str	r3, [r7, #28]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	61fb      	str	r3, [r7, #28]
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	e0a1      	b.n	8007994 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800785e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007860:	2300      	movs	r3, #0
 8007862:	61bb      	str	r3, [r7, #24]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	61bb      	str	r3, [r7, #24]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	61bb      	str	r3, [r7, #24]
 8007874:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e085      	b.n	8007994 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d14d      	bne.n	800792e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	2b04      	cmp	r3, #4
 8007896:	d016      	beq.n	80078c6 <I2C_Master_ADDR+0x228>
 8007898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789a:	2b02      	cmp	r3, #2
 800789c:	d013      	beq.n	80078c6 <I2C_Master_ADDR+0x228>
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	2b10      	cmp	r3, #16
 80078a2:	d010      	beq.n	80078c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	e007      	b.n	80078d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e4:	d117      	bne.n	8007916 <I2C_Master_ADDR+0x278>
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078ec:	d00b      	beq.n	8007906 <I2C_Master_ADDR+0x268>
 80078ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d008      	beq.n	8007906 <I2C_Master_ADDR+0x268>
 80078f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f6:	2b08      	cmp	r3, #8
 80078f8:	d005      	beq.n	8007906 <I2C_Master_ADDR+0x268>
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	2b10      	cmp	r3, #16
 80078fe:	d002      	beq.n	8007906 <I2C_Master_ADDR+0x268>
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	2b20      	cmp	r3, #32
 8007904:	d107      	bne.n	8007916 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007914:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	617b      	str	r3, [r7, #20]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	e032      	b.n	8007994 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800793c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800794c:	d117      	bne.n	800797e <I2C_Master_ADDR+0x2e0>
 800794e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007950:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007954:	d00b      	beq.n	800796e <I2C_Master_ADDR+0x2d0>
 8007956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007958:	2b01      	cmp	r3, #1
 800795a:	d008      	beq.n	800796e <I2C_Master_ADDR+0x2d0>
 800795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795e:	2b08      	cmp	r3, #8
 8007960:	d005      	beq.n	800796e <I2C_Master_ADDR+0x2d0>
 8007962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007964:	2b10      	cmp	r3, #16
 8007966:	d002      	beq.n	800796e <I2C_Master_ADDR+0x2d0>
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	2b20      	cmp	r3, #32
 800796c:	d107      	bne.n	800797e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800797c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800797e:	2300      	movs	r3, #0
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800799a:	e00b      	b.n	80079b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800799c:	2300      	movs	r3, #0
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
}
 80079b2:	e7ff      	b.n	80079b4 <I2C_Master_ADDR+0x316>
 80079b4:	bf00      	nop
 80079b6:	3744      	adds	r7, #68	; 0x44
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d02b      	beq.n	8007a32 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	781a      	ldrb	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d114      	bne.n	8007a32 <I2C_SlaveTransmit_TXE+0x72>
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	2b29      	cmp	r3, #41	; 0x29
 8007a0c:	d111      	bne.n	8007a32 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a1c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2221      	movs	r2, #33	; 0x21
 8007a22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2228      	movs	r2, #40	; 0x28
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff f9e7 	bl	8006e00 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d011      	beq.n	8007a70 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	781a      	ldrb	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d02c      	beq.n	8007af0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	691a      	ldr	r2, [r3, #16]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d114      	bne.n	8007af0 <I2C_SlaveReceive_RXNE+0x74>
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aca:	d111      	bne.n	8007af0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ada:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2222      	movs	r2, #34	; 0x22
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2228      	movs	r2, #40	; 0x28
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff f992 	bl	8006e14 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007af0:	bf00      	nop
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d012      	beq.n	8007b30 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691a      	ldr	r2, [r3, #16]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	b2d2      	uxtb	r2, r2
 8007b16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b56:	2b28      	cmp	r3, #40	; 0x28
 8007b58:	d125      	bne.n	8007ba6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b68:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007b74:	2301      	movs	r3, #1
 8007b76:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d103      	bne.n	8007b8a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	81bb      	strh	r3, [r7, #12]
 8007b88:	e002      	b.n	8007b90 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007b98:	89ba      	ldrh	r2, [r7, #12]
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff f942 	bl	8006e28 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ba4:	e00e      	b.n	8007bc4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60bb      	str	r3, [r7, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	60bb      	str	r3, [r7, #8]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	60bb      	str	r3, [r7, #8]
 8007bba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007bc4:	bf00      	nop
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bda:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007bec:	2300      	movs	r3, #0
 8007bee:	60bb      	str	r3, [r7, #8]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	60bb      	str	r3, [r7, #8]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0201 	orr.w	r2, r2, #1
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c18:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c28:	d172      	bne.n	8007d10 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	2b22      	cmp	r3, #34	; 0x22
 8007c2e:	d002      	beq.n	8007c36 <I2C_Slave_STOPF+0x6a>
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	2b2a      	cmp	r3, #42	; 0x2a
 8007c34:	d135      	bne.n	8007ca2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	f043 0204 	orr.w	r2, r3, #4
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fd ffb4 	bl	8005bdc <HAL_DMA_GetState>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d049      	beq.n	8007d0e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	4a69      	ldr	r2, [pc, #420]	; (8007e24 <I2C_Slave_STOPF+0x258>)
 8007c80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fd fdfc 	bl	8005884 <HAL_DMA_Abort_IT>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d03d      	beq.n	8007d0e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ca0:	e035      	b.n	8007d0e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	f043 0204 	orr.w	r2, r3, #4
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cd4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fd ff7e 	bl	8005bdc <HAL_DMA_GetState>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d014      	beq.n	8007d10 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cea:	4a4e      	ldr	r2, [pc, #312]	; (8007e24 <I2C_Slave_STOPF+0x258>)
 8007cec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fd fdc6 	bl	8005884 <HAL_DMA_Abort_IT>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d008      	beq.n	8007d10 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
 8007d0c:	e000      	b.n	8007d10 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d0e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d03e      	beq.n	8007d98 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b04      	cmp	r3, #4
 8007d26:	d112      	bne.n	8007d4e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691a      	ldr	r2, [r3, #16]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b01      	subs	r3, #1
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d58:	2b40      	cmp	r3, #64	; 0x40
 8007d5a:	d112      	bne.n	8007d82 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691a      	ldr	r2, [r3, #16]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	b2d2      	uxtb	r2, r2
 8007d68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d90:	f043 0204 	orr.w	r2, r3, #4
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f8b3 	bl	8007f0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007da6:	e039      	b.n	8007e1c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	2b2a      	cmp	r3, #42	; 0x2a
 8007dac:	d109      	bne.n	8007dc2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2228      	movs	r2, #40	; 0x28
 8007db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7ff f829 	bl	8006e14 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b28      	cmp	r3, #40	; 0x28
 8007dcc:	d111      	bne.n	8007df2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a15      	ldr	r2, [pc, #84]	; (8007e28 <I2C_Slave_STOPF+0x25c>)
 8007dd2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7ff f82a 	bl	8006e44 <HAL_I2C_ListenCpltCallback>
}
 8007df0:	e014      	b.n	8007e1c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df6:	2b22      	cmp	r3, #34	; 0x22
 8007df8:	d002      	beq.n	8007e00 <I2C_Slave_STOPF+0x234>
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
 8007dfc:	2b22      	cmp	r3, #34	; 0x22
 8007dfe:	d10d      	bne.n	8007e1c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7fe fffc 	bl	8006e14 <HAL_I2C_SlaveRxCpltCallback>
}
 8007e1c:	bf00      	nop
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	08008411 	.word	0x08008411
 8007e28:	ffff0000 	.word	0xffff0000

08007e2c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d002      	beq.n	8007e4e <I2C_Slave_AF+0x22>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b20      	cmp	r3, #32
 8007e4c:	d129      	bne.n	8007ea2 <I2C_Slave_AF+0x76>
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	2b28      	cmp	r3, #40	; 0x28
 8007e52:	d126      	bne.n	8007ea2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a2c      	ldr	r2, [pc, #176]	; (8007f08 <I2C_Slave_AF+0xdc>)
 8007e58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e68:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e72:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e82:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7fe ffd2 	bl	8006e44 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007ea0:	e02e      	b.n	8007f00 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b21      	cmp	r3, #33	; 0x21
 8007ea6:	d126      	bne.n	8007ef6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a17      	ldr	r2, [pc, #92]	; (8007f08 <I2C_Slave_AF+0xdc>)
 8007eac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2221      	movs	r2, #33	; 0x21
 8007eb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ed2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007edc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7fe ff86 	bl	8006e00 <HAL_I2C_SlaveTxCpltCallback>
}
 8007ef4:	e004      	b.n	8007f00 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007efe:	615a      	str	r2, [r3, #20]
}
 8007f00:	bf00      	nop
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	ffff0000 	.word	0xffff0000

08007f0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b10      	cmp	r3, #16
 8007f28:	d002      	beq.n	8007f30 <I2C_ITError+0x24>
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b40      	cmp	r3, #64	; 0x40
 8007f2e:	d10a      	bne.n	8007f46 <I2C_ITError+0x3a>
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	2b22      	cmp	r3, #34	; 0x22
 8007f34:	d107      	bne.n	8007f46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f4c:	2b28      	cmp	r3, #40	; 0x28
 8007f4e:	d107      	bne.n	8007f60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2228      	movs	r2, #40	; 0x28
 8007f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f5e:	e015      	b.n	8007f8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f6e:	d00a      	beq.n	8007f86 <I2C_ITError+0x7a>
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b60      	cmp	r3, #96	; 0x60
 8007f74:	d007      	beq.n	8007f86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f9a:	d162      	bne.n	8008062 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007faa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d020      	beq.n	8007ffc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbe:	4a6a      	ldr	r2, [pc, #424]	; (8008168 <I2C_ITError+0x25c>)
 8007fc0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fd fc5c 	bl	8005884 <HAL_DMA_Abort_IT>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 8089 	beq.w	80080e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0201 	bic.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	4798      	blx	r3
 8007ffa:	e074      	b.n	80080e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008000:	4a59      	ldr	r2, [pc, #356]	; (8008168 <I2C_ITError+0x25c>)
 8008002:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008008:	4618      	mov	r0, r3
 800800a:	f7fd fc3b 	bl	8005884 <HAL_DMA_Abort_IT>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d068      	beq.n	80080e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801e:	2b40      	cmp	r3, #64	; 0x40
 8008020:	d10b      	bne.n	800803a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	691a      	ldr	r2, [r3, #16]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f022 0201 	bic.w	r2, r2, #1
 8008048:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2220      	movs	r2, #32
 800804e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800805c:	4610      	mov	r0, r2
 800805e:	4798      	blx	r3
 8008060:	e041      	b.n	80080e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b60      	cmp	r3, #96	; 0x60
 800806c:	d125      	bne.n	80080ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2220      	movs	r2, #32
 8008072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008086:	2b40      	cmp	r3, #64	; 0x40
 8008088:	d10b      	bne.n	80080a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	691a      	ldr	r2, [r3, #16]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	b2d2      	uxtb	r2, r2
 8008096:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0201 	bic.w	r2, r2, #1
 80080b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7fe feee 	bl	8006e94 <HAL_I2C_AbortCpltCallback>
 80080b8:	e015      	b.n	80080e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c4:	2b40      	cmp	r3, #64	; 0x40
 80080c6:	d10b      	bne.n	80080e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	691a      	ldr	r2, [r3, #16]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	b2d2      	uxtb	r2, r2
 80080d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7fe fecd 	bl	8006e80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10e      	bne.n	8008114 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d109      	bne.n	8008114 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008106:	2b00      	cmp	r3, #0
 8008108:	d104      	bne.n	8008114 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008122:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800812a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b04      	cmp	r3, #4
 8008136:	d113      	bne.n	8008160 <I2C_ITError+0x254>
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	2b28      	cmp	r3, #40	; 0x28
 800813c:	d110      	bne.n	8008160 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a0a      	ldr	r2, [pc, #40]	; (800816c <I2C_ITError+0x260>)
 8008142:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fe fe72 	bl	8006e44 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008160:	bf00      	nop
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	08008411 	.word	0x08008411
 800816c:	ffff0000 	.word	0xffff0000

08008170 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	607a      	str	r2, [r7, #4]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	460b      	mov	r3, r1
 800817e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b08      	cmp	r3, #8
 800818a:	d006      	beq.n	800819a <I2C_MasterRequestWrite+0x2a>
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d003      	beq.n	800819a <I2C_MasterRequestWrite+0x2a>
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008198:	d108      	bne.n	80081ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	e00b      	b.n	80081c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b0:	2b12      	cmp	r3, #18
 80081b2:	d107      	bne.n	80081c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 f9c5 	bl	8008560 <I2C_WaitOnFlagUntilTimeout>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00d      	beq.n	80081f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ea:	d103      	bne.n	80081f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e035      	b.n	8008264 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008200:	d108      	bne.n	8008214 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008202:	897b      	ldrh	r3, [r7, #10]
 8008204:	b2db      	uxtb	r3, r3
 8008206:	461a      	mov	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008210:	611a      	str	r2, [r3, #16]
 8008212:	e01b      	b.n	800824c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008214:	897b      	ldrh	r3, [r7, #10]
 8008216:	11db      	asrs	r3, r3, #7
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f003 0306 	and.w	r3, r3, #6
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f063 030f 	orn	r3, r3, #15
 8008224:	b2da      	uxtb	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	490e      	ldr	r1, [pc, #56]	; (800826c <I2C_MasterRequestWrite+0xfc>)
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 f9eb 	bl	800860e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e010      	b.n	8008264 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008242:	897b      	ldrh	r3, [r7, #10]
 8008244:	b2da      	uxtb	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	4907      	ldr	r1, [pc, #28]	; (8008270 <I2C_MasterRequestWrite+0x100>)
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 f9db 	bl	800860e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e000      	b.n	8008264 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	00010008 	.word	0x00010008
 8008270:	00010002 	.word	0x00010002

08008274 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af02      	add	r7, sp, #8
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	607a      	str	r2, [r7, #4]
 800827e:	603b      	str	r3, [r7, #0]
 8008280:	460b      	mov	r3, r1
 8008282:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008298:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b08      	cmp	r3, #8
 800829e:	d006      	beq.n	80082ae <I2C_MasterRequestRead+0x3a>
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d003      	beq.n	80082ae <I2C_MasterRequestRead+0x3a>
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082ac:	d108      	bne.n	80082c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	e00b      	b.n	80082d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c4:	2b11      	cmp	r3, #17
 80082c6:	d107      	bne.n	80082d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 f93b 	bl	8008560 <I2C_WaitOnFlagUntilTimeout>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00d      	beq.n	800830c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fe:	d103      	bne.n	8008308 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008306:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e079      	b.n	8008400 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008314:	d108      	bne.n	8008328 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008316:	897b      	ldrh	r3, [r7, #10]
 8008318:	b2db      	uxtb	r3, r3
 800831a:	f043 0301 	orr.w	r3, r3, #1
 800831e:	b2da      	uxtb	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	611a      	str	r2, [r3, #16]
 8008326:	e05f      	b.n	80083e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008328:	897b      	ldrh	r3, [r7, #10]
 800832a:	11db      	asrs	r3, r3, #7
 800832c:	b2db      	uxtb	r3, r3
 800832e:	f003 0306 	and.w	r3, r3, #6
 8008332:	b2db      	uxtb	r3, r3
 8008334:	f063 030f 	orn	r3, r3, #15
 8008338:	b2da      	uxtb	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	4930      	ldr	r1, [pc, #192]	; (8008408 <I2C_MasterRequestRead+0x194>)
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 f961 	bl	800860e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e054      	b.n	8008400 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008356:	897b      	ldrh	r3, [r7, #10]
 8008358:	b2da      	uxtb	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	4929      	ldr	r1, [pc, #164]	; (800840c <I2C_MasterRequestRead+0x198>)
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f000 f951 	bl	800860e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e044      	b.n	8008400 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008376:	2300      	movs	r3, #0
 8008378:	613b      	str	r3, [r7, #16]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	613b      	str	r3, [r7, #16]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	613b      	str	r3, [r7, #16]
 800838a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800839a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f8d9 	bl	8008560 <I2C_WaitOnFlagUntilTimeout>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00d      	beq.n	80083d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083c2:	d103      	bne.n	80083cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e017      	b.n	8008400 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80083d0:	897b      	ldrh	r3, [r7, #10]
 80083d2:	11db      	asrs	r3, r3, #7
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	f003 0306 	and.w	r3, r3, #6
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	f063 030e 	orn	r3, r3, #14
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	4907      	ldr	r1, [pc, #28]	; (800840c <I2C_MasterRequestRead+0x198>)
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 f90d 	bl	800860e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e000      	b.n	8008400 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	00010008 	.word	0x00010008
 800840c:	00010002 	.word	0x00010002

08008410 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008420:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008428:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800842a:	4b4b      	ldr	r3, [pc, #300]	; (8008558 <I2C_DMAAbort+0x148>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	08db      	lsrs	r3, r3, #3
 8008430:	4a4a      	ldr	r2, [pc, #296]	; (800855c <I2C_DMAAbort+0x14c>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	0a1a      	lsrs	r2, r3, #8
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	00da      	lsls	r2, r3, #3
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d106      	bne.n	8008458 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	f043 0220 	orr.w	r2, r3, #32
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008456:	e00a      	b.n	800846e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3b01      	subs	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800846c:	d0ea      	beq.n	8008444 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847a:	2200      	movs	r2, #0
 800847c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848a:	2200      	movs	r2, #0
 800848c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800849c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2200      	movs	r2, #0
 80084a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b0:	2200      	movs	r2, #0
 80084b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	2200      	movs	r2, #0
 80084c2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0201 	bic.w	r2, r2, #1
 80084d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b60      	cmp	r3, #96	; 0x60
 80084de:	d10e      	bne.n	80084fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2200      	movs	r2, #0
 80084f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80084f6:	6978      	ldr	r0, [r7, #20]
 80084f8:	f7fe fccc 	bl	8006e94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084fc:	e027      	b.n	800854e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80084fe:	7cfb      	ldrb	r3, [r7, #19]
 8008500:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008504:	2b28      	cmp	r3, #40	; 0x28
 8008506:	d117      	bne.n	8008538 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f042 0201 	orr.w	r2, r2, #1
 8008516:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008526:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2200      	movs	r2, #0
 800852c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2228      	movs	r2, #40	; 0x28
 8008532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008536:	e007      	b.n	8008548 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2220      	movs	r2, #32
 800853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008548:	6978      	ldr	r0, [r7, #20]
 800854a:	f7fe fc99 	bl	8006e80 <HAL_I2C_ErrorCallback>
}
 800854e:	bf00      	nop
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	2000000c 	.word	0x2000000c
 800855c:	14f8b589 	.word	0x14f8b589

08008560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	4613      	mov	r3, r2
 800856e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008570:	e025      	b.n	80085be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008578:	d021      	beq.n	80085be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800857a:	f7fc fc2b 	bl	8004dd4 <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d302      	bcc.n	8008590 <I2C_WaitOnFlagUntilTimeout+0x30>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d116      	bne.n	80085be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2220      	movs	r2, #32
 800859a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	f043 0220 	orr.w	r2, r3, #32
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e023      	b.n	8008606 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	0c1b      	lsrs	r3, r3, #16
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d10d      	bne.n	80085e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	43da      	mvns	r2, r3
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4013      	ands	r3, r2
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	bf0c      	ite	eq
 80085da:	2301      	moveq	r3, #1
 80085dc:	2300      	movne	r3, #0
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	461a      	mov	r2, r3
 80085e2:	e00c      	b.n	80085fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	43da      	mvns	r2, r3
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	4013      	ands	r3, r2
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	bf0c      	ite	eq
 80085f6:	2301      	moveq	r3, #1
 80085f8:	2300      	movne	r3, #0
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	461a      	mov	r2, r3
 80085fe:	79fb      	ldrb	r3, [r7, #7]
 8008600:	429a      	cmp	r2, r3
 8008602:	d0b6      	beq.n	8008572 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	607a      	str	r2, [r7, #4]
 800861a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800861c:	e051      	b.n	80086c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800862c:	d123      	bne.n	8008676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800863c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008646:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2220      	movs	r2, #32
 8008652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	f043 0204 	orr.w	r2, r3, #4
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e046      	b.n	8008704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867c:	d021      	beq.n	80086c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800867e:	f7fc fba9 	bl	8004dd4 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	429a      	cmp	r2, r3
 800868c:	d302      	bcc.n	8008694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d116      	bne.n	80086c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2220      	movs	r2, #32
 800869e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	f043 0220 	orr.w	r2, r3, #32
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e020      	b.n	8008704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	0c1b      	lsrs	r3, r3, #16
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d10c      	bne.n	80086e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	43da      	mvns	r2, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4013      	ands	r3, r2
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	bf14      	ite	ne
 80086de:	2301      	movne	r3, #1
 80086e0:	2300      	moveq	r3, #0
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	e00b      	b.n	80086fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	43da      	mvns	r2, r3
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	4013      	ands	r3, r2
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bf14      	ite	ne
 80086f8:	2301      	movne	r3, #1
 80086fa:	2300      	moveq	r3, #0
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d18d      	bne.n	800861e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008718:	e02d      	b.n	8008776 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 f900 	bl	8008920 <I2C_IsAcknowledgeFailed>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e02d      	b.n	8008786 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008730:	d021      	beq.n	8008776 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008732:	f7fc fb4f 	bl	8004dd4 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	429a      	cmp	r2, r3
 8008740:	d302      	bcc.n	8008748 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d116      	bne.n	8008776 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2220      	movs	r2, #32
 8008752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	f043 0220 	orr.w	r2, r3, #32
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e007      	b.n	8008786 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008780:	2b80      	cmp	r3, #128	; 0x80
 8008782:	d1ca      	bne.n	800871a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	60f8      	str	r0, [r7, #12]
 8008796:	60b9      	str	r1, [r7, #8]
 8008798:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800879a:	e02d      	b.n	80087f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 f8bf 	bl	8008920 <I2C_IsAcknowledgeFailed>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e02d      	b.n	8008808 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b2:	d021      	beq.n	80087f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087b4:	f7fc fb0e 	bl	8004dd4 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d302      	bcc.n	80087ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d116      	bne.n	80087f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2220      	movs	r2, #32
 80087d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e4:	f043 0220 	orr.w	r2, r3, #32
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e007      	b.n	8008808 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b04      	cmp	r3, #4
 8008804:	d1ca      	bne.n	800879c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008818:	2300      	movs	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800881c:	4b13      	ldr	r3, [pc, #76]	; (800886c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	08db      	lsrs	r3, r3, #3
 8008822:	4a13      	ldr	r2, [pc, #76]	; (8008870 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008824:	fba2 2303 	umull	r2, r3, r2, r3
 8008828:	0a1a      	lsrs	r2, r3, #8
 800882a:	4613      	mov	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3b01      	subs	r3, #1
 8008836:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d107      	bne.n	800884e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	f043 0220 	orr.w	r2, r3, #32
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e008      	b.n	8008860 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800885c:	d0e9      	beq.n	8008832 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	2000000c 	.word	0x2000000c
 8008870:	14f8b589 	.word	0x14f8b589

08008874 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008880:	e042      	b.n	8008908 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	f003 0310 	and.w	r3, r3, #16
 800888c:	2b10      	cmp	r3, #16
 800888e:	d119      	bne.n	80088c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f06f 0210 	mvn.w	r2, #16
 8008898:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2220      	movs	r2, #32
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e029      	b.n	8008918 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088c4:	f7fc fa86 	bl	8004dd4 <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d302      	bcc.n	80088da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d116      	bne.n	8008908 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2220      	movs	r2, #32
 80088e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f4:	f043 0220 	orr.w	r2, r3, #32
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e007      	b.n	8008918 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008912:	2b40      	cmp	r3, #64	; 0x40
 8008914:	d1b5      	bne.n	8008882 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008936:	d11b      	bne.n	8008970 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008940:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2220      	movs	r2, #32
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895c:	f043 0204 	orr.w	r2, r3, #4
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e000      	b.n	8008972 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800898e:	d103      	bne.n	8008998 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008996:	e007      	b.n	80089a8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80089a0:	d102      	bne.n	80089a8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2208      	movs	r2, #8
 80089a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e267      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d075      	beq.n	8008abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80089d2:	4b88      	ldr	r3, [pc, #544]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f003 030c 	and.w	r3, r3, #12
 80089da:	2b04      	cmp	r3, #4
 80089dc:	d00c      	beq.n	80089f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089de:	4b85      	ldr	r3, [pc, #532]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80089e6:	2b08      	cmp	r3, #8
 80089e8:	d112      	bne.n	8008a10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089ea:	4b82      	ldr	r3, [pc, #520]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089f6:	d10b      	bne.n	8008a10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089f8:	4b7e      	ldr	r3, [pc, #504]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d05b      	beq.n	8008abc <HAL_RCC_OscConfig+0x108>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d157      	bne.n	8008abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e242      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a18:	d106      	bne.n	8008a28 <HAL_RCC_OscConfig+0x74>
 8008a1a:	4b76      	ldr	r3, [pc, #472]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a75      	ldr	r2, [pc, #468]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	e01d      	b.n	8008a64 <HAL_RCC_OscConfig+0xb0>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a30:	d10c      	bne.n	8008a4c <HAL_RCC_OscConfig+0x98>
 8008a32:	4b70      	ldr	r3, [pc, #448]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a6f      	ldr	r2, [pc, #444]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	4b6d      	ldr	r3, [pc, #436]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a6c      	ldr	r2, [pc, #432]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	e00b      	b.n	8008a64 <HAL_RCC_OscConfig+0xb0>
 8008a4c:	4b69      	ldr	r3, [pc, #420]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a68      	ldr	r2, [pc, #416]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	4b66      	ldr	r3, [pc, #408]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a65      	ldr	r2, [pc, #404]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d013      	beq.n	8008a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a6c:	f7fc f9b2 	bl	8004dd4 <HAL_GetTick>
 8008a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a72:	e008      	b.n	8008a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a74:	f7fc f9ae 	bl	8004dd4 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2b64      	cmp	r3, #100	; 0x64
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e207      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a86:	4b5b      	ldr	r3, [pc, #364]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0f0      	beq.n	8008a74 <HAL_RCC_OscConfig+0xc0>
 8008a92:	e014      	b.n	8008abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a94:	f7fc f99e 	bl	8004dd4 <HAL_GetTick>
 8008a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a9a:	e008      	b.n	8008aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a9c:	f7fc f99a 	bl	8004dd4 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b64      	cmp	r3, #100	; 0x64
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e1f3      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008aae:	4b51      	ldr	r3, [pc, #324]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1f0      	bne.n	8008a9c <HAL_RCC_OscConfig+0xe8>
 8008aba:	e000      	b.n	8008abe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0302 	and.w	r3, r3, #2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d063      	beq.n	8008b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008aca:	4b4a      	ldr	r3, [pc, #296]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f003 030c 	and.w	r3, r3, #12
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00b      	beq.n	8008aee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ad6:	4b47      	ldr	r3, [pc, #284]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008ade:	2b08      	cmp	r3, #8
 8008ae0:	d11c      	bne.n	8008b1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ae2:	4b44      	ldr	r3, [pc, #272]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d116      	bne.n	8008b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008aee:	4b41      	ldr	r3, [pc, #260]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d005      	beq.n	8008b06 <HAL_RCC_OscConfig+0x152>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d001      	beq.n	8008b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e1c7      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b06:	4b3b      	ldr	r3, [pc, #236]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	4937      	ldr	r1, [pc, #220]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b1a:	e03a      	b.n	8008b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d020      	beq.n	8008b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b24:	4b34      	ldr	r3, [pc, #208]	; (8008bf8 <HAL_RCC_OscConfig+0x244>)
 8008b26:	2201      	movs	r2, #1
 8008b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2a:	f7fc f953 	bl	8004dd4 <HAL_GetTick>
 8008b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b30:	e008      	b.n	8008b44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b32:	f7fc f94f 	bl	8004dd4 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d901      	bls.n	8008b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e1a8      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b44:	4b2b      	ldr	r3, [pc, #172]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0f0      	beq.n	8008b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b50:	4b28      	ldr	r3, [pc, #160]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	4925      	ldr	r1, [pc, #148]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	600b      	str	r3, [r1, #0]
 8008b64:	e015      	b.n	8008b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b66:	4b24      	ldr	r3, [pc, #144]	; (8008bf8 <HAL_RCC_OscConfig+0x244>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b6c:	f7fc f932 	bl	8004dd4 <HAL_GetTick>
 8008b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b72:	e008      	b.n	8008b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b74:	f7fc f92e 	bl	8004dd4 <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e187      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b86:	4b1b      	ldr	r3, [pc, #108]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1f0      	bne.n	8008b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0308 	and.w	r3, r3, #8
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d036      	beq.n	8008c0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d016      	beq.n	8008bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ba6:	4b15      	ldr	r3, [pc, #84]	; (8008bfc <HAL_RCC_OscConfig+0x248>)
 8008ba8:	2201      	movs	r2, #1
 8008baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bac:	f7fc f912 	bl	8004dd4 <HAL_GetTick>
 8008bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bb2:	e008      	b.n	8008bc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bb4:	f7fc f90e 	bl	8004dd4 <HAL_GetTick>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d901      	bls.n	8008bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e167      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bc6:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <HAL_RCC_OscConfig+0x240>)
 8008bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0f0      	beq.n	8008bb4 <HAL_RCC_OscConfig+0x200>
 8008bd2:	e01b      	b.n	8008c0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bd4:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <HAL_RCC_OscConfig+0x248>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bda:	f7fc f8fb 	bl	8004dd4 <HAL_GetTick>
 8008bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008be0:	e00e      	b.n	8008c00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008be2:	f7fc f8f7 	bl	8004dd4 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d907      	bls.n	8008c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e150      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
 8008bf4:	40023800 	.word	0x40023800
 8008bf8:	42470000 	.word	0x42470000
 8008bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c00:	4b88      	ldr	r3, [pc, #544]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c04:	f003 0302 	and.w	r3, r3, #2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1ea      	bne.n	8008be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 8097 	beq.w	8008d48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c1e:	4b81      	ldr	r3, [pc, #516]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10f      	bne.n	8008c4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60bb      	str	r3, [r7, #8]
 8008c2e:	4b7d      	ldr	r3, [pc, #500]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	4a7c      	ldr	r2, [pc, #496]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c38:	6413      	str	r3, [r2, #64]	; 0x40
 8008c3a:	4b7a      	ldr	r3, [pc, #488]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c42:	60bb      	str	r3, [r7, #8]
 8008c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c46:	2301      	movs	r3, #1
 8008c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c4a:	4b77      	ldr	r3, [pc, #476]	; (8008e28 <HAL_RCC_OscConfig+0x474>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d118      	bne.n	8008c88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c56:	4b74      	ldr	r3, [pc, #464]	; (8008e28 <HAL_RCC_OscConfig+0x474>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a73      	ldr	r2, [pc, #460]	; (8008e28 <HAL_RCC_OscConfig+0x474>)
 8008c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c62:	f7fc f8b7 	bl	8004dd4 <HAL_GetTick>
 8008c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c68:	e008      	b.n	8008c7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c6a:	f7fc f8b3 	bl	8004dd4 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d901      	bls.n	8008c7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e10c      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c7c:	4b6a      	ldr	r3, [pc, #424]	; (8008e28 <HAL_RCC_OscConfig+0x474>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0f0      	beq.n	8008c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d106      	bne.n	8008c9e <HAL_RCC_OscConfig+0x2ea>
 8008c90:	4b64      	ldr	r3, [pc, #400]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c94:	4a63      	ldr	r2, [pc, #396]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008c96:	f043 0301 	orr.w	r3, r3, #1
 8008c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c9c:	e01c      	b.n	8008cd8 <HAL_RCC_OscConfig+0x324>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	2b05      	cmp	r3, #5
 8008ca4:	d10c      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x30c>
 8008ca6:	4b5f      	ldr	r3, [pc, #380]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008caa:	4a5e      	ldr	r2, [pc, #376]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008cac:	f043 0304 	orr.w	r3, r3, #4
 8008cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8008cb2:	4b5c      	ldr	r3, [pc, #368]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb6:	4a5b      	ldr	r2, [pc, #364]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008cb8:	f043 0301 	orr.w	r3, r3, #1
 8008cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8008cbe:	e00b      	b.n	8008cd8 <HAL_RCC_OscConfig+0x324>
 8008cc0:	4b58      	ldr	r3, [pc, #352]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc4:	4a57      	ldr	r2, [pc, #348]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008cc6:	f023 0301 	bic.w	r3, r3, #1
 8008cca:	6713      	str	r3, [r2, #112]	; 0x70
 8008ccc:	4b55      	ldr	r3, [pc, #340]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd0:	4a54      	ldr	r2, [pc, #336]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008cd2:	f023 0304 	bic.w	r3, r3, #4
 8008cd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d015      	beq.n	8008d0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ce0:	f7fc f878 	bl	8004dd4 <HAL_GetTick>
 8008ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ce6:	e00a      	b.n	8008cfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ce8:	f7fc f874 	bl	8004dd4 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d901      	bls.n	8008cfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e0cb      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cfe:	4b49      	ldr	r3, [pc, #292]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0ee      	beq.n	8008ce8 <HAL_RCC_OscConfig+0x334>
 8008d0a:	e014      	b.n	8008d36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d0c:	f7fc f862 	bl	8004dd4 <HAL_GetTick>
 8008d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d12:	e00a      	b.n	8008d2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d14:	f7fc f85e 	bl	8004dd4 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d901      	bls.n	8008d2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e0b5      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d2a:	4b3e      	ldr	r3, [pc, #248]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1ee      	bne.n	8008d14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d105      	bne.n	8008d48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d3c:	4b39      	ldr	r3, [pc, #228]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d40:	4a38      	ldr	r2, [pc, #224]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 80a1 	beq.w	8008e94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d52:	4b34      	ldr	r3, [pc, #208]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f003 030c 	and.w	r3, r3, #12
 8008d5a:	2b08      	cmp	r3, #8
 8008d5c:	d05c      	beq.n	8008e18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d141      	bne.n	8008dea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d66:	4b31      	ldr	r3, [pc, #196]	; (8008e2c <HAL_RCC_OscConfig+0x478>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d6c:	f7fc f832 	bl	8004dd4 <HAL_GetTick>
 8008d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d72:	e008      	b.n	8008d86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d74:	f7fc f82e 	bl	8004dd4 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d901      	bls.n	8008d86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e087      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d86:	4b27      	ldr	r3, [pc, #156]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1f0      	bne.n	8008d74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	69da      	ldr	r2, [r3, #28]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	019b      	lsls	r3, r3, #6
 8008da2:	431a      	orrs	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	085b      	lsrs	r3, r3, #1
 8008daa:	3b01      	subs	r3, #1
 8008dac:	041b      	lsls	r3, r3, #16
 8008dae:	431a      	orrs	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db4:	061b      	lsls	r3, r3, #24
 8008db6:	491b      	ldr	r1, [pc, #108]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008dbc:	4b1b      	ldr	r3, [pc, #108]	; (8008e2c <HAL_RCC_OscConfig+0x478>)
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dc2:	f7fc f807 	bl	8004dd4 <HAL_GetTick>
 8008dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dc8:	e008      	b.n	8008ddc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dca:	f7fc f803 	bl	8004dd4 <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d901      	bls.n	8008ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e05c      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ddc:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0f0      	beq.n	8008dca <HAL_RCC_OscConfig+0x416>
 8008de8:	e054      	b.n	8008e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dea:	4b10      	ldr	r3, [pc, #64]	; (8008e2c <HAL_RCC_OscConfig+0x478>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008df0:	f7fb fff0 	bl	8004dd4 <HAL_GetTick>
 8008df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008df6:	e008      	b.n	8008e0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008df8:	f7fb ffec 	bl	8004dd4 <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d901      	bls.n	8008e0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e045      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e0a:	4b06      	ldr	r3, [pc, #24]	; (8008e24 <HAL_RCC_OscConfig+0x470>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1f0      	bne.n	8008df8 <HAL_RCC_OscConfig+0x444>
 8008e16:	e03d      	b.n	8008e94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d107      	bne.n	8008e30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e038      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
 8008e24:	40023800 	.word	0x40023800
 8008e28:	40007000 	.word	0x40007000
 8008e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e30:	4b1b      	ldr	r3, [pc, #108]	; (8008ea0 <HAL_RCC_OscConfig+0x4ec>)
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d028      	beq.n	8008e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d121      	bne.n	8008e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d11a      	bne.n	8008e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008e60:	4013      	ands	r3, r2
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d111      	bne.n	8008e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e76:	085b      	lsrs	r3, r3, #1
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d107      	bne.n	8008e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d001      	beq.n	8008e94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e000      	b.n	8008e96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40023800 	.word	0x40023800

08008ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e0cc      	b.n	8009052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008eb8:	4b68      	ldr	r3, [pc, #416]	; (800905c <HAL_RCC_ClockConfig+0x1b8>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d90c      	bls.n	8008ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ec6:	4b65      	ldr	r3, [pc, #404]	; (800905c <HAL_RCC_ClockConfig+0x1b8>)
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	b2d2      	uxtb	r2, r2
 8008ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ece:	4b63      	ldr	r3, [pc, #396]	; (800905c <HAL_RCC_ClockConfig+0x1b8>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d001      	beq.n	8008ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e0b8      	b.n	8009052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0302 	and.w	r3, r3, #2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d020      	beq.n	8008f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0304 	and.w	r3, r3, #4
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d005      	beq.n	8008f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ef8:	4b59      	ldr	r3, [pc, #356]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	4a58      	ldr	r2, [pc, #352]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0308 	and.w	r3, r3, #8
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d005      	beq.n	8008f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f10:	4b53      	ldr	r3, [pc, #332]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	4a52      	ldr	r2, [pc, #328]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f1c:	4b50      	ldr	r3, [pc, #320]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	494d      	ldr	r1, [pc, #308]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d044      	beq.n	8008fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d107      	bne.n	8008f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f42:	4b47      	ldr	r3, [pc, #284]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d119      	bne.n	8008f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e07f      	b.n	8009052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d003      	beq.n	8008f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d107      	bne.n	8008f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f62:	4b3f      	ldr	r3, [pc, #252]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d109      	bne.n	8008f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e06f      	b.n	8009052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f72:	4b3b      	ldr	r3, [pc, #236]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e067      	b.n	8009052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f82:	4b37      	ldr	r3, [pc, #220]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f023 0203 	bic.w	r2, r3, #3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	4934      	ldr	r1, [pc, #208]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f94:	f7fb ff1e 	bl	8004dd4 <HAL_GetTick>
 8008f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f9a:	e00a      	b.n	8008fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f9c:	f7fb ff1a 	bl	8004dd4 <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d901      	bls.n	8008fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e04f      	b.n	8009052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fb2:	4b2b      	ldr	r3, [pc, #172]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f003 020c 	and.w	r2, r3, #12
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d1eb      	bne.n	8008f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008fc4:	4b25      	ldr	r3, [pc, #148]	; (800905c <HAL_RCC_ClockConfig+0x1b8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0307 	and.w	r3, r3, #7
 8008fcc:	683a      	ldr	r2, [r7, #0]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d20c      	bcs.n	8008fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fd2:	4b22      	ldr	r3, [pc, #136]	; (800905c <HAL_RCC_ClockConfig+0x1b8>)
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	b2d2      	uxtb	r2, r2
 8008fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fda:	4b20      	ldr	r3, [pc, #128]	; (800905c <HAL_RCC_ClockConfig+0x1b8>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0307 	and.w	r3, r3, #7
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d001      	beq.n	8008fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e032      	b.n	8009052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d008      	beq.n	800900a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ff8:	4b19      	ldr	r3, [pc, #100]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	4916      	ldr	r1, [pc, #88]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8009006:	4313      	orrs	r3, r2
 8009008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0308 	and.w	r3, r3, #8
 8009012:	2b00      	cmp	r3, #0
 8009014:	d009      	beq.n	800902a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009016:	4b12      	ldr	r3, [pc, #72]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	490e      	ldr	r1, [pc, #56]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8009026:	4313      	orrs	r3, r2
 8009028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800902a:	f000 f821 	bl	8009070 <HAL_RCC_GetSysClockFreq>
 800902e:	4602      	mov	r2, r0
 8009030:	4b0b      	ldr	r3, [pc, #44]	; (8009060 <HAL_RCC_ClockConfig+0x1bc>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	091b      	lsrs	r3, r3, #4
 8009036:	f003 030f 	and.w	r3, r3, #15
 800903a:	490a      	ldr	r1, [pc, #40]	; (8009064 <HAL_RCC_ClockConfig+0x1c0>)
 800903c:	5ccb      	ldrb	r3, [r1, r3]
 800903e:	fa22 f303 	lsr.w	r3, r2, r3
 8009042:	4a09      	ldr	r2, [pc, #36]	; (8009068 <HAL_RCC_ClockConfig+0x1c4>)
 8009044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009046:	4b09      	ldr	r3, [pc, #36]	; (800906c <HAL_RCC_ClockConfig+0x1c8>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4618      	mov	r0, r3
 800904c:	f7fb fae0 	bl	8004610 <HAL_InitTick>

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	40023c00 	.word	0x40023c00
 8009060:	40023800 	.word	0x40023800
 8009064:	0801b80c 	.word	0x0801b80c
 8009068:	2000000c 	.word	0x2000000c
 800906c:	20000024 	.word	0x20000024

08009070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009074:	b094      	sub	sp, #80	; 0x50
 8009076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	647b      	str	r3, [r7, #68]	; 0x44
 800907c:	2300      	movs	r3, #0
 800907e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009080:	2300      	movs	r3, #0
 8009082:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009084:	2300      	movs	r3, #0
 8009086:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009088:	4b79      	ldr	r3, [pc, #484]	; (8009270 <HAL_RCC_GetSysClockFreq+0x200>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f003 030c 	and.w	r3, r3, #12
 8009090:	2b08      	cmp	r3, #8
 8009092:	d00d      	beq.n	80090b0 <HAL_RCC_GetSysClockFreq+0x40>
 8009094:	2b08      	cmp	r3, #8
 8009096:	f200 80e1 	bhi.w	800925c <HAL_RCC_GetSysClockFreq+0x1ec>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <HAL_RCC_GetSysClockFreq+0x34>
 800909e:	2b04      	cmp	r3, #4
 80090a0:	d003      	beq.n	80090aa <HAL_RCC_GetSysClockFreq+0x3a>
 80090a2:	e0db      	b.n	800925c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80090a4:	4b73      	ldr	r3, [pc, #460]	; (8009274 <HAL_RCC_GetSysClockFreq+0x204>)
 80090a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80090a8:	e0db      	b.n	8009262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80090aa:	4b73      	ldr	r3, [pc, #460]	; (8009278 <HAL_RCC_GetSysClockFreq+0x208>)
 80090ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80090ae:	e0d8      	b.n	8009262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80090b0:	4b6f      	ldr	r3, [pc, #444]	; (8009270 <HAL_RCC_GetSysClockFreq+0x200>)
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80090ba:	4b6d      	ldr	r3, [pc, #436]	; (8009270 <HAL_RCC_GetSysClockFreq+0x200>)
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d063      	beq.n	800918e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090c6:	4b6a      	ldr	r3, [pc, #424]	; (8009270 <HAL_RCC_GetSysClockFreq+0x200>)
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	099b      	lsrs	r3, r3, #6
 80090cc:	2200      	movs	r2, #0
 80090ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80090d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80090d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d8:	633b      	str	r3, [r7, #48]	; 0x30
 80090da:	2300      	movs	r3, #0
 80090dc:	637b      	str	r3, [r7, #52]	; 0x34
 80090de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80090e2:	4622      	mov	r2, r4
 80090e4:	462b      	mov	r3, r5
 80090e6:	f04f 0000 	mov.w	r0, #0
 80090ea:	f04f 0100 	mov.w	r1, #0
 80090ee:	0159      	lsls	r1, r3, #5
 80090f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090f4:	0150      	lsls	r0, r2, #5
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4621      	mov	r1, r4
 80090fc:	1a51      	subs	r1, r2, r1
 80090fe:	6139      	str	r1, [r7, #16]
 8009100:	4629      	mov	r1, r5
 8009102:	eb63 0301 	sbc.w	r3, r3, r1
 8009106:	617b      	str	r3, [r7, #20]
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	f04f 0300 	mov.w	r3, #0
 8009110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009114:	4659      	mov	r1, fp
 8009116:	018b      	lsls	r3, r1, #6
 8009118:	4651      	mov	r1, sl
 800911a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800911e:	4651      	mov	r1, sl
 8009120:	018a      	lsls	r2, r1, #6
 8009122:	4651      	mov	r1, sl
 8009124:	ebb2 0801 	subs.w	r8, r2, r1
 8009128:	4659      	mov	r1, fp
 800912a:	eb63 0901 	sbc.w	r9, r3, r1
 800912e:	f04f 0200 	mov.w	r2, #0
 8009132:	f04f 0300 	mov.w	r3, #0
 8009136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800913a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800913e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009142:	4690      	mov	r8, r2
 8009144:	4699      	mov	r9, r3
 8009146:	4623      	mov	r3, r4
 8009148:	eb18 0303 	adds.w	r3, r8, r3
 800914c:	60bb      	str	r3, [r7, #8]
 800914e:	462b      	mov	r3, r5
 8009150:	eb49 0303 	adc.w	r3, r9, r3
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	f04f 0200 	mov.w	r2, #0
 800915a:	f04f 0300 	mov.w	r3, #0
 800915e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009162:	4629      	mov	r1, r5
 8009164:	024b      	lsls	r3, r1, #9
 8009166:	4621      	mov	r1, r4
 8009168:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800916c:	4621      	mov	r1, r4
 800916e:	024a      	lsls	r2, r1, #9
 8009170:	4610      	mov	r0, r2
 8009172:	4619      	mov	r1, r3
 8009174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009176:	2200      	movs	r2, #0
 8009178:	62bb      	str	r3, [r7, #40]	; 0x28
 800917a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800917c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009180:	f7f7 fd8c 	bl	8000c9c <__aeabi_uldivmod>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4613      	mov	r3, r2
 800918a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800918c:	e058      	b.n	8009240 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800918e:	4b38      	ldr	r3, [pc, #224]	; (8009270 <HAL_RCC_GetSysClockFreq+0x200>)
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	099b      	lsrs	r3, r3, #6
 8009194:	2200      	movs	r2, #0
 8009196:	4618      	mov	r0, r3
 8009198:	4611      	mov	r1, r2
 800919a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800919e:	623b      	str	r3, [r7, #32]
 80091a0:	2300      	movs	r3, #0
 80091a2:	627b      	str	r3, [r7, #36]	; 0x24
 80091a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80091a8:	4642      	mov	r2, r8
 80091aa:	464b      	mov	r3, r9
 80091ac:	f04f 0000 	mov.w	r0, #0
 80091b0:	f04f 0100 	mov.w	r1, #0
 80091b4:	0159      	lsls	r1, r3, #5
 80091b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091ba:	0150      	lsls	r0, r2, #5
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4641      	mov	r1, r8
 80091c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80091c6:	4649      	mov	r1, r9
 80091c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	f04f 0300 	mov.w	r3, #0
 80091d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80091d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80091dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80091e0:	ebb2 040a 	subs.w	r4, r2, sl
 80091e4:	eb63 050b 	sbc.w	r5, r3, fp
 80091e8:	f04f 0200 	mov.w	r2, #0
 80091ec:	f04f 0300 	mov.w	r3, #0
 80091f0:	00eb      	lsls	r3, r5, #3
 80091f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091f6:	00e2      	lsls	r2, r4, #3
 80091f8:	4614      	mov	r4, r2
 80091fa:	461d      	mov	r5, r3
 80091fc:	4643      	mov	r3, r8
 80091fe:	18e3      	adds	r3, r4, r3
 8009200:	603b      	str	r3, [r7, #0]
 8009202:	464b      	mov	r3, r9
 8009204:	eb45 0303 	adc.w	r3, r5, r3
 8009208:	607b      	str	r3, [r7, #4]
 800920a:	f04f 0200 	mov.w	r2, #0
 800920e:	f04f 0300 	mov.w	r3, #0
 8009212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009216:	4629      	mov	r1, r5
 8009218:	028b      	lsls	r3, r1, #10
 800921a:	4621      	mov	r1, r4
 800921c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009220:	4621      	mov	r1, r4
 8009222:	028a      	lsls	r2, r1, #10
 8009224:	4610      	mov	r0, r2
 8009226:	4619      	mov	r1, r3
 8009228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800922a:	2200      	movs	r2, #0
 800922c:	61bb      	str	r3, [r7, #24]
 800922e:	61fa      	str	r2, [r7, #28]
 8009230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009234:	f7f7 fd32 	bl	8000c9c <__aeabi_uldivmod>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4613      	mov	r3, r2
 800923e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009240:	4b0b      	ldr	r3, [pc, #44]	; (8009270 <HAL_RCC_GetSysClockFreq+0x200>)
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	0c1b      	lsrs	r3, r3, #16
 8009246:	f003 0303 	and.w	r3, r3, #3
 800924a:	3301      	adds	r3, #1
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009254:	fbb2 f3f3 	udiv	r3, r2, r3
 8009258:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800925a:	e002      	b.n	8009262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <HAL_RCC_GetSysClockFreq+0x204>)
 800925e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009264:	4618      	mov	r0, r3
 8009266:	3750      	adds	r7, #80	; 0x50
 8009268:	46bd      	mov	sp, r7
 800926a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800926e:	bf00      	nop
 8009270:	40023800 	.word	0x40023800
 8009274:	00f42400 	.word	0x00f42400
 8009278:	007a1200 	.word	0x007a1200

0800927c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800927c:	b480      	push	{r7}
 800927e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009280:	4b03      	ldr	r3, [pc, #12]	; (8009290 <HAL_RCC_GetHCLKFreq+0x14>)
 8009282:	681b      	ldr	r3, [r3, #0]
}
 8009284:	4618      	mov	r0, r3
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	2000000c 	.word	0x2000000c

08009294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009298:	f7ff fff0 	bl	800927c <HAL_RCC_GetHCLKFreq>
 800929c:	4602      	mov	r2, r0
 800929e:	4b05      	ldr	r3, [pc, #20]	; (80092b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	0a9b      	lsrs	r3, r3, #10
 80092a4:	f003 0307 	and.w	r3, r3, #7
 80092a8:	4903      	ldr	r1, [pc, #12]	; (80092b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092aa:	5ccb      	ldrb	r3, [r1, r3]
 80092ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	40023800 	.word	0x40023800
 80092b8:	0801b81c 	.word	0x0801b81c

080092bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80092c0:	f7ff ffdc 	bl	800927c <HAL_RCC_GetHCLKFreq>
 80092c4:	4602      	mov	r2, r0
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	0b5b      	lsrs	r3, r3, #13
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	4903      	ldr	r1, [pc, #12]	; (80092e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092d2:	5ccb      	ldrb	r3, [r1, r3]
 80092d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092d8:	4618      	mov	r0, r3
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	40023800 	.word	0x40023800
 80092e0:	0801b81c 	.word	0x0801b81c

080092e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	220f      	movs	r2, #15
 80092f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80092f4:	4b12      	ldr	r3, [pc, #72]	; (8009340 <HAL_RCC_GetClockConfig+0x5c>)
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f003 0203 	and.w	r2, r3, #3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009300:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <HAL_RCC_GetClockConfig+0x5c>)
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800930c:	4b0c      	ldr	r3, [pc, #48]	; (8009340 <HAL_RCC_GetClockConfig+0x5c>)
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009318:	4b09      	ldr	r3, [pc, #36]	; (8009340 <HAL_RCC_GetClockConfig+0x5c>)
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	08db      	lsrs	r3, r3, #3
 800931e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009326:	4b07      	ldr	r3, [pc, #28]	; (8009344 <HAL_RCC_GetClockConfig+0x60>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 0207 	and.w	r2, r3, #7
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	601a      	str	r2, [r3, #0]
}
 8009332:	bf00      	nop
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	40023800 	.word	0x40023800
 8009344:	40023c00 	.word	0x40023c00

08009348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e041      	b.n	80093de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d106      	bne.n	8009374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f839 	bl	80093e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2202      	movs	r2, #2
 8009378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	3304      	adds	r3, #4
 8009384:	4619      	mov	r1, r3
 8009386:	4610      	mov	r0, r2
 8009388:	f000 fc7a 	bl	8009c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80093ee:	bf00      	nop
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr
	...

080093fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b01      	cmp	r3, #1
 800940e:	d001      	beq.n	8009414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e044      	b.n	800949e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68da      	ldr	r2, [r3, #12]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f042 0201 	orr.w	r2, r2, #1
 800942a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a1e      	ldr	r2, [pc, #120]	; (80094ac <HAL_TIM_Base_Start_IT+0xb0>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d018      	beq.n	8009468 <HAL_TIM_Base_Start_IT+0x6c>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943e:	d013      	beq.n	8009468 <HAL_TIM_Base_Start_IT+0x6c>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a1a      	ldr	r2, [pc, #104]	; (80094b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d00e      	beq.n	8009468 <HAL_TIM_Base_Start_IT+0x6c>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a19      	ldr	r2, [pc, #100]	; (80094b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d009      	beq.n	8009468 <HAL_TIM_Base_Start_IT+0x6c>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a17      	ldr	r2, [pc, #92]	; (80094b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d004      	beq.n	8009468 <HAL_TIM_Base_Start_IT+0x6c>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a16      	ldr	r2, [pc, #88]	; (80094bc <HAL_TIM_Base_Start_IT+0xc0>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d111      	bne.n	800948c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f003 0307 	and.w	r3, r3, #7
 8009472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b06      	cmp	r3, #6
 8009478:	d010      	beq.n	800949c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f042 0201 	orr.w	r2, r2, #1
 8009488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800948a:	e007      	b.n	800949c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f042 0201 	orr.w	r2, r2, #1
 800949a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40010000 	.word	0x40010000
 80094b0:	40000400 	.word	0x40000400
 80094b4:	40000800 	.word	0x40000800
 80094b8:	40000c00 	.word	0x40000c00
 80094bc:	40014000 	.word	0x40014000

080094c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d109      	bne.n	80094e4 <HAL_TIM_PWM_Start+0x24>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b01      	cmp	r3, #1
 80094da:	bf14      	ite	ne
 80094dc:	2301      	movne	r3, #1
 80094de:	2300      	moveq	r3, #0
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	e022      	b.n	800952a <HAL_TIM_PWM_Start+0x6a>
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d109      	bne.n	80094fe <HAL_TIM_PWM_Start+0x3e>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	bf14      	ite	ne
 80094f6:	2301      	movne	r3, #1
 80094f8:	2300      	moveq	r3, #0
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	e015      	b.n	800952a <HAL_TIM_PWM_Start+0x6a>
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b08      	cmp	r3, #8
 8009502:	d109      	bne.n	8009518 <HAL_TIM_PWM_Start+0x58>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b01      	cmp	r3, #1
 800950e:	bf14      	ite	ne
 8009510:	2301      	movne	r3, #1
 8009512:	2300      	moveq	r3, #0
 8009514:	b2db      	uxtb	r3, r3
 8009516:	e008      	b.n	800952a <HAL_TIM_PWM_Start+0x6a>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b01      	cmp	r3, #1
 8009522:	bf14      	ite	ne
 8009524:	2301      	movne	r3, #1
 8009526:	2300      	moveq	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e068      	b.n	8009604 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d104      	bne.n	8009542 <HAL_TIM_PWM_Start+0x82>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009540:	e013      	b.n	800956a <HAL_TIM_PWM_Start+0xaa>
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b04      	cmp	r3, #4
 8009546:	d104      	bne.n	8009552 <HAL_TIM_PWM_Start+0x92>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009550:	e00b      	b.n	800956a <HAL_TIM_PWM_Start+0xaa>
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b08      	cmp	r3, #8
 8009556:	d104      	bne.n	8009562 <HAL_TIM_PWM_Start+0xa2>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2202      	movs	r2, #2
 800955c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009560:	e003      	b.n	800956a <HAL_TIM_PWM_Start+0xaa>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2202      	movs	r2, #2
 8009566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2201      	movs	r2, #1
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	4618      	mov	r0, r3
 8009574:	f000 fd90 	bl	800a098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a23      	ldr	r2, [pc, #140]	; (800960c <HAL_TIM_PWM_Start+0x14c>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d107      	bne.n	8009592 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009590:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a1d      	ldr	r2, [pc, #116]	; (800960c <HAL_TIM_PWM_Start+0x14c>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d018      	beq.n	80095ce <HAL_TIM_PWM_Start+0x10e>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a4:	d013      	beq.n	80095ce <HAL_TIM_PWM_Start+0x10e>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a19      	ldr	r2, [pc, #100]	; (8009610 <HAL_TIM_PWM_Start+0x150>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d00e      	beq.n	80095ce <HAL_TIM_PWM_Start+0x10e>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a17      	ldr	r2, [pc, #92]	; (8009614 <HAL_TIM_PWM_Start+0x154>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d009      	beq.n	80095ce <HAL_TIM_PWM_Start+0x10e>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a16      	ldr	r2, [pc, #88]	; (8009618 <HAL_TIM_PWM_Start+0x158>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d004      	beq.n	80095ce <HAL_TIM_PWM_Start+0x10e>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a14      	ldr	r2, [pc, #80]	; (800961c <HAL_TIM_PWM_Start+0x15c>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d111      	bne.n	80095f2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f003 0307 	and.w	r3, r3, #7
 80095d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b06      	cmp	r3, #6
 80095de:	d010      	beq.n	8009602 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 0201 	orr.w	r2, r2, #1
 80095ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095f0:	e007      	b.n	8009602 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f042 0201 	orr.w	r2, r2, #1
 8009600:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	40010000 	.word	0x40010000
 8009610:	40000400 	.word	0x40000400
 8009614:	40000800 	.word	0x40000800
 8009618:	40000c00 	.word	0x40000c00
 800961c:	40014000 	.word	0x40014000

08009620 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e097      	b.n	8009764 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d106      	bne.n	800964e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f88f 	bl	800976c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2202      	movs	r2, #2
 8009652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	6812      	ldr	r2, [r2, #0]
 8009660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009664:	f023 0307 	bic.w	r3, r3, #7
 8009668:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3304      	adds	r3, #4
 8009672:	4619      	mov	r1, r3
 8009674:	4610      	mov	r0, r2
 8009676:	f000 fb03 	bl	8009c80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	4313      	orrs	r3, r2
 800969a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096a2:	f023 0303 	bic.w	r3, r3, #3
 80096a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	021b      	lsls	r3, r3, #8
 80096b2:	4313      	orrs	r3, r2
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80096c0:	f023 030c 	bic.w	r3, r3, #12
 80096c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	021b      	lsls	r3, r3, #8
 80096dc:	4313      	orrs	r3, r2
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	011a      	lsls	r2, r3, #4
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	031b      	lsls	r3, r3, #12
 80096f0:	4313      	orrs	r3, r2
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80096fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009706:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	695b      	ldr	r3, [r3, #20]
 8009710:	011b      	lsls	r3, r3, #4
 8009712:	4313      	orrs	r3, r2
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009790:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009798:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80097a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d110      	bne.n	80097d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d102      	bne.n	80097bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80097b6:	7b7b      	ldrb	r3, [r7, #13]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d001      	beq.n	80097c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e069      	b.n	8009894 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2202      	movs	r2, #2
 80097c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2202      	movs	r2, #2
 80097cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097d0:	e031      	b.n	8009836 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b04      	cmp	r3, #4
 80097d6:	d110      	bne.n	80097fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d102      	bne.n	80097e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80097de:	7b3b      	ldrb	r3, [r7, #12]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d001      	beq.n	80097e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e055      	b.n	8009894 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2202      	movs	r2, #2
 80097ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2202      	movs	r2, #2
 80097f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097f8:	e01d      	b.n	8009836 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d108      	bne.n	8009812 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d105      	bne.n	8009812 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009806:	7b7b      	ldrb	r3, [r7, #13]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d102      	bne.n	8009812 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800980c:	7b3b      	ldrb	r3, [r7, #12]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d001      	beq.n	8009816 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e03e      	b.n	8009894 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2202      	movs	r2, #2
 800981a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2202      	movs	r2, #2
 8009822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2202      	movs	r2, #2
 800982a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2202      	movs	r2, #2
 8009832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <HAL_TIM_Encoder_Start+0xc4>
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	2b04      	cmp	r3, #4
 8009840:	d008      	beq.n	8009854 <HAL_TIM_Encoder_Start+0xd4>
 8009842:	e00f      	b.n	8009864 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2201      	movs	r2, #1
 800984a:	2100      	movs	r1, #0
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fc23 	bl	800a098 <TIM_CCxChannelCmd>
      break;
 8009852:	e016      	b.n	8009882 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2201      	movs	r2, #1
 800985a:	2104      	movs	r1, #4
 800985c:	4618      	mov	r0, r3
 800985e:	f000 fc1b 	bl	800a098 <TIM_CCxChannelCmd>
      break;
 8009862:	e00e      	b.n	8009882 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2201      	movs	r2, #1
 800986a:	2100      	movs	r1, #0
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fc13 	bl	800a098 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2201      	movs	r2, #1
 8009878:	2104      	movs	r1, #4
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fc0c 	bl	800a098 <TIM_CCxChannelCmd>
      break;
 8009880:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f042 0201 	orr.w	r2, r2, #1
 8009890:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d122      	bne.n	80098f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f003 0302 	and.w	r3, r3, #2
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d11b      	bne.n	80098f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f06f 0202 	mvn.w	r2, #2
 80098c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	f003 0303 	and.w	r3, r3, #3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f9b0 	bl	8009c44 <HAL_TIM_IC_CaptureCallback>
 80098e4:	e005      	b.n	80098f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f9a2 	bl	8009c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f9b3 	bl	8009c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	f003 0304 	and.w	r3, r3, #4
 8009902:	2b04      	cmp	r3, #4
 8009904:	d122      	bne.n	800994c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f003 0304 	and.w	r3, r3, #4
 8009910:	2b04      	cmp	r3, #4
 8009912:	d11b      	bne.n	800994c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f06f 0204 	mvn.w	r2, #4
 800991c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2202      	movs	r2, #2
 8009922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f986 	bl	8009c44 <HAL_TIM_IC_CaptureCallback>
 8009938:	e005      	b.n	8009946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f978 	bl	8009c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f989 	bl	8009c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	f003 0308 	and.w	r3, r3, #8
 8009956:	2b08      	cmp	r3, #8
 8009958:	d122      	bne.n	80099a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f003 0308 	and.w	r3, r3, #8
 8009964:	2b08      	cmp	r3, #8
 8009966:	d11b      	bne.n	80099a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f06f 0208 	mvn.w	r2, #8
 8009970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2204      	movs	r2, #4
 8009976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	f003 0303 	and.w	r3, r3, #3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f95c 	bl	8009c44 <HAL_TIM_IC_CaptureCallback>
 800998c:	e005      	b.n	800999a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f94e 	bl	8009c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f95f 	bl	8009c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	f003 0310 	and.w	r3, r3, #16
 80099aa:	2b10      	cmp	r3, #16
 80099ac:	d122      	bne.n	80099f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f003 0310 	and.w	r3, r3, #16
 80099b8:	2b10      	cmp	r3, #16
 80099ba:	d11b      	bne.n	80099f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f06f 0210 	mvn.w	r2, #16
 80099c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2208      	movs	r2, #8
 80099ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f932 	bl	8009c44 <HAL_TIM_IC_CaptureCallback>
 80099e0:	e005      	b.n	80099ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f924 	bl	8009c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f935 	bl	8009c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d10e      	bne.n	8009a20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d107      	bne.n	8009a20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f06f 0201 	mvn.w	r2, #1
 8009a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7f9 fdba 	bl	8003594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a2a:	2b80      	cmp	r3, #128	; 0x80
 8009a2c:	d10e      	bne.n	8009a4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a38:	2b80      	cmp	r3, #128	; 0x80
 8009a3a:	d107      	bne.n	8009a4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fb55 	bl	800a0f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a56:	2b40      	cmp	r3, #64	; 0x40
 8009a58:	d10e      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a64:	2b40      	cmp	r3, #64	; 0x40
 8009a66:	d107      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f8fa 	bl	8009c6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	f003 0320 	and.w	r3, r3, #32
 8009a82:	2b20      	cmp	r3, #32
 8009a84:	d10e      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f003 0320 	and.w	r3, r3, #32
 8009a90:	2b20      	cmp	r3, #32
 8009a92:	d107      	bne.n	8009aa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f06f 0220 	mvn.w	r2, #32
 8009a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fb1f 	bl	800a0e2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d101      	bne.n	8009aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e0ae      	b.n	8009c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b0c      	cmp	r3, #12
 8009ad6:	f200 809f 	bhi.w	8009c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009ada:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae0:	08009b15 	.word	0x08009b15
 8009ae4:	08009c19 	.word	0x08009c19
 8009ae8:	08009c19 	.word	0x08009c19
 8009aec:	08009c19 	.word	0x08009c19
 8009af0:	08009b55 	.word	0x08009b55
 8009af4:	08009c19 	.word	0x08009c19
 8009af8:	08009c19 	.word	0x08009c19
 8009afc:	08009c19 	.word	0x08009c19
 8009b00:	08009b97 	.word	0x08009b97
 8009b04:	08009c19 	.word	0x08009c19
 8009b08:	08009c19 	.word	0x08009c19
 8009b0c:	08009c19 	.word	0x08009c19
 8009b10:	08009bd7 	.word	0x08009bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68b9      	ldr	r1, [r7, #8]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 f930 	bl	8009d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	699a      	ldr	r2, [r3, #24]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f042 0208 	orr.w	r2, r2, #8
 8009b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	699a      	ldr	r2, [r3, #24]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f022 0204 	bic.w	r2, r2, #4
 8009b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6999      	ldr	r1, [r3, #24]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	691a      	ldr	r2, [r3, #16]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	619a      	str	r2, [r3, #24]
      break;
 8009b52:	e064      	b.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68b9      	ldr	r1, [r7, #8]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 f976 	bl	8009e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	699a      	ldr	r2, [r3, #24]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	699a      	ldr	r2, [r3, #24]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6999      	ldr	r1, [r3, #24]
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	021a      	lsls	r2, r3, #8
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	430a      	orrs	r2, r1
 8009b92:	619a      	str	r2, [r3, #24]
      break;
 8009b94:	e043      	b.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68b9      	ldr	r1, [r7, #8]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 f9c1 	bl	8009f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	69da      	ldr	r2, [r3, #28]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f042 0208 	orr.w	r2, r2, #8
 8009bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	69da      	ldr	r2, [r3, #28]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0204 	bic.w	r2, r2, #4
 8009bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	69d9      	ldr	r1, [r3, #28]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	691a      	ldr	r2, [r3, #16]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	430a      	orrs	r2, r1
 8009bd2:	61da      	str	r2, [r3, #28]
      break;
 8009bd4:	e023      	b.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68b9      	ldr	r1, [r7, #8]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fa0b 	bl	8009ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	69da      	ldr	r2, [r3, #28]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	69da      	ldr	r2, [r3, #28]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	69d9      	ldr	r1, [r3, #28]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	021a      	lsls	r2, r3, #8
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	61da      	str	r2, [r3, #28]
      break;
 8009c16:	e002      	b.n	8009c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3718      	adds	r7, #24
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a34      	ldr	r2, [pc, #208]	; (8009d64 <TIM_Base_SetConfig+0xe4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d00f      	beq.n	8009cb8 <TIM_Base_SetConfig+0x38>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c9e:	d00b      	beq.n	8009cb8 <TIM_Base_SetConfig+0x38>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a31      	ldr	r2, [pc, #196]	; (8009d68 <TIM_Base_SetConfig+0xe8>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d007      	beq.n	8009cb8 <TIM_Base_SetConfig+0x38>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a30      	ldr	r2, [pc, #192]	; (8009d6c <TIM_Base_SetConfig+0xec>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d003      	beq.n	8009cb8 <TIM_Base_SetConfig+0x38>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a2f      	ldr	r2, [pc, #188]	; (8009d70 <TIM_Base_SetConfig+0xf0>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d108      	bne.n	8009cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a25      	ldr	r2, [pc, #148]	; (8009d64 <TIM_Base_SetConfig+0xe4>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d01b      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cd8:	d017      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a22      	ldr	r2, [pc, #136]	; (8009d68 <TIM_Base_SetConfig+0xe8>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d013      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a21      	ldr	r2, [pc, #132]	; (8009d6c <TIM_Base_SetConfig+0xec>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d00f      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a20      	ldr	r2, [pc, #128]	; (8009d70 <TIM_Base_SetConfig+0xf0>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d00b      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a1f      	ldr	r2, [pc, #124]	; (8009d74 <TIM_Base_SetConfig+0xf4>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d007      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a1e      	ldr	r2, [pc, #120]	; (8009d78 <TIM_Base_SetConfig+0xf8>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d003      	beq.n	8009d0a <TIM_Base_SetConfig+0x8a>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a1d      	ldr	r2, [pc, #116]	; (8009d7c <TIM_Base_SetConfig+0xfc>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d108      	bne.n	8009d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	689a      	ldr	r2, [r3, #8]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a08      	ldr	r2, [pc, #32]	; (8009d64 <TIM_Base_SetConfig+0xe4>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d103      	bne.n	8009d50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	691a      	ldr	r2, [r3, #16]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	615a      	str	r2, [r3, #20]
}
 8009d56:	bf00      	nop
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	40010000 	.word	0x40010000
 8009d68:	40000400 	.word	0x40000400
 8009d6c:	40000800 	.word	0x40000800
 8009d70:	40000c00 	.word	0x40000c00
 8009d74:	40014000 	.word	0x40014000
 8009d78:	40014400 	.word	0x40014400
 8009d7c:	40014800 	.word	0x40014800

08009d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	f023 0201 	bic.w	r2, r3, #1
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f023 0303 	bic.w	r3, r3, #3
 8009db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f023 0302 	bic.w	r3, r3, #2
 8009dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a1c      	ldr	r2, [pc, #112]	; (8009e48 <TIM_OC1_SetConfig+0xc8>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d10c      	bne.n	8009df6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f023 0308 	bic.w	r3, r3, #8
 8009de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f023 0304 	bic.w	r3, r3, #4
 8009df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a13      	ldr	r2, [pc, #76]	; (8009e48 <TIM_OC1_SetConfig+0xc8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d111      	bne.n	8009e22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	621a      	str	r2, [r3, #32]
}
 8009e3c:	bf00      	nop
 8009e3e:	371c      	adds	r7, #28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	40010000 	.word	0x40010000

08009e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	f023 0210 	bic.w	r2, r3, #16
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	021b      	lsls	r3, r3, #8
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f023 0320 	bic.w	r3, r3, #32
 8009e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a1e      	ldr	r2, [pc, #120]	; (8009f20 <TIM_OC2_SetConfig+0xd4>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d10d      	bne.n	8009ec8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	011b      	lsls	r3, r3, #4
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a15      	ldr	r2, [pc, #84]	; (8009f20 <TIM_OC2_SetConfig+0xd4>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d113      	bne.n	8009ef8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	621a      	str	r2, [r3, #32]
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	40010000 	.word	0x40010000

08009f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 0303 	bic.w	r3, r3, #3
 8009f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	021b      	lsls	r3, r3, #8
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a1d      	ldr	r2, [pc, #116]	; (8009ff4 <TIM_OC3_SetConfig+0xd0>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d10d      	bne.n	8009f9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	021b      	lsls	r3, r3, #8
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a14      	ldr	r2, [pc, #80]	; (8009ff4 <TIM_OC3_SetConfig+0xd0>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d113      	bne.n	8009fce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	011b      	lsls	r3, r3, #4
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	621a      	str	r2, [r3, #32]
}
 8009fe8:	bf00      	nop
 8009fea:	371c      	adds	r7, #28
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	40010000 	.word	0x40010000

08009ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	021b      	lsls	r3, r3, #8
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	4313      	orrs	r3, r2
 800a03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	031b      	lsls	r3, r3, #12
 800a04a:	693a      	ldr	r2, [r7, #16]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a10      	ldr	r2, [pc, #64]	; (800a094 <TIM_OC4_SetConfig+0x9c>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d109      	bne.n	800a06c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a05e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	695b      	ldr	r3, [r3, #20]
 800a064:	019b      	lsls	r3, r3, #6
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	4313      	orrs	r3, r2
 800a06a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	621a      	str	r2, [r3, #32]
}
 800a086:	bf00      	nop
 800a088:	371c      	adds	r7, #28
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	40010000 	.word	0x40010000

0800a098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a098:	b480      	push	{r7}
 800a09a:	b087      	sub	sp, #28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	f003 031f 	and.w	r3, r3, #31
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6a1a      	ldr	r2, [r3, #32]
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	43db      	mvns	r3, r3
 800a0ba:	401a      	ands	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6a1a      	ldr	r2, [r3, #32]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	f003 031f 	and.w	r3, r3, #31
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	621a      	str	r2, [r3, #32]
}
 800a0d6:	bf00      	nop
 800a0d8:	371c      	adds	r7, #28
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b083      	sub	sp, #12
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0ea:	bf00      	nop
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b083      	sub	sp, #12
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0fe:	bf00      	nop
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b082      	sub	sp, #8
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d101      	bne.n	800a11c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e03f      	b.n	800a19c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	d106      	bne.n	800a136 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7fa f8ff 	bl	8004334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2224      	movs	r2, #36	; 0x24
 800a13a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	68da      	ldr	r2, [r3, #12]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a14c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f001 f978 	bl	800b444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	691a      	ldr	r2, [r3, #16]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a162:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	695a      	ldr	r2, [r3, #20]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a172:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68da      	ldr	r2, [r3, #12]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a182:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2220      	movs	r2, #32
 800a18e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2220      	movs	r2, #32
 800a196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b08a      	sub	sp, #40	; 0x28
 800a1a8:	af02      	add	r7, sp, #8
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	603b      	str	r3, [r7, #0]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	2b20      	cmp	r3, #32
 800a1c2:	d17c      	bne.n	800a2be <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <HAL_UART_Transmit+0x2c>
 800a1ca:	88fb      	ldrh	r3, [r7, #6]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e075      	b.n	800a2c0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <HAL_UART_Transmit+0x3e>
 800a1de:	2302      	movs	r3, #2
 800a1e0:	e06e      	b.n	800a2c0 <HAL_UART_Transmit+0x11c>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2221      	movs	r2, #33	; 0x21
 800a1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1f8:	f7fa fdec 	bl	8004dd4 <HAL_GetTick>
 800a1fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	88fa      	ldrh	r2, [r7, #6]
 800a202:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	88fa      	ldrh	r2, [r7, #6]
 800a208:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a212:	d108      	bne.n	800a226 <HAL_UART_Transmit+0x82>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d104      	bne.n	800a226 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a21c:	2300      	movs	r3, #0
 800a21e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	61bb      	str	r3, [r7, #24]
 800a224:	e003      	b.n	800a22e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a236:	e02a      	b.n	800a28e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2200      	movs	r2, #0
 800a240:	2180      	movs	r1, #128	; 0x80
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 fe2f 	bl	800aea6 <UART_WaitOnFlagUntilTimeout>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e036      	b.n	800a2c0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10b      	bne.n	800a270 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	461a      	mov	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a266:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	3302      	adds	r3, #2
 800a26c:	61bb      	str	r3, [r7, #24]
 800a26e:	e007      	b.n	800a280 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	781a      	ldrb	r2, [r3, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	3301      	adds	r3, #1
 800a27e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a284:	b29b      	uxth	r3, r3
 800a286:	3b01      	subs	r3, #1
 800a288:	b29a      	uxth	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a292:	b29b      	uxth	r3, r3
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1cf      	bne.n	800a238 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2140      	movs	r1, #64	; 0x40
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 fdff 	bl	800aea6 <UART_WaitOnFlagUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e006      	b.n	800a2c0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e000      	b.n	800a2c0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a2be:	2302      	movs	r3, #2
  }
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3720      	adds	r7, #32
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b08a      	sub	sp, #40	; 0x28
 800a2cc:	af02      	add	r7, sp, #8
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	2b20      	cmp	r3, #32
 800a2e6:	f040 808c 	bne.w	800a402 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <HAL_UART_Receive+0x2e>
 800a2f0:	88fb      	ldrh	r3, [r7, #6]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e084      	b.n	800a404 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a300:	2b01      	cmp	r3, #1
 800a302:	d101      	bne.n	800a308 <HAL_UART_Receive+0x40>
 800a304:	2302      	movs	r3, #2
 800a306:	e07d      	b.n	800a404 <HAL_UART_Receive+0x13c>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2222      	movs	r2, #34	; 0x22
 800a31a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a324:	f7fa fd56 	bl	8004dd4 <HAL_GetTick>
 800a328:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	88fa      	ldrh	r2, [r7, #6]
 800a32e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	88fa      	ldrh	r2, [r7, #6]
 800a334:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a33e:	d108      	bne.n	800a352 <HAL_UART_Receive+0x8a>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d104      	bne.n	800a352 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	61bb      	str	r3, [r7, #24]
 800a350:	e003      	b.n	800a35a <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a356:	2300      	movs	r3, #0
 800a358:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a362:	e043      	b.n	800a3ec <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2200      	movs	r2, #0
 800a36c:	2120      	movs	r1, #32
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f000 fd99 	bl	800aea6 <UART_WaitOnFlagUntilTimeout>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e042      	b.n	800a404 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10c      	bne.n	800a39e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a390:	b29a      	uxth	r2, r3
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	3302      	adds	r3, #2
 800a39a:	61bb      	str	r3, [r7, #24]
 800a39c:	e01f      	b.n	800a3de <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3a6:	d007      	beq.n	800a3b8 <HAL_UART_Receive+0xf0>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10a      	bne.n	800a3c6 <HAL_UART_Receive+0xfe>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d106      	bne.n	800a3c6 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	701a      	strb	r2, [r3, #0]
 800a3c4:	e008      	b.n	800a3d8 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1b6      	bne.n	800a364 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2220      	movs	r2, #32
 800a3fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	e000      	b.n	800a404 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a402:	2302      	movs	r3, #2
  }
}
 800a404:	4618      	mov	r0, r3
 800a406:	3720      	adds	r7, #32
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08c      	sub	sp, #48	; 0x30
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	4613      	mov	r3, r2
 800a418:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b20      	cmp	r3, #32
 800a424:	d165      	bne.n	800a4f2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d002      	beq.n	800a432 <HAL_UART_Transmit_DMA+0x26>
 800a42c:	88fb      	ldrh	r3, [r7, #6]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e05e      	b.n	800a4f4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d101      	bne.n	800a444 <HAL_UART_Transmit_DMA+0x38>
 800a440:	2302      	movs	r3, #2
 800a442:	e057      	b.n	800a4f4 <HAL_UART_Transmit_DMA+0xe8>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	88fa      	ldrh	r2, [r7, #6]
 800a456:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	88fa      	ldrh	r2, [r7, #6]
 800a45c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2221      	movs	r2, #33	; 0x21
 800a468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a470:	4a22      	ldr	r2, [pc, #136]	; (800a4fc <HAL_UART_Transmit_DMA+0xf0>)
 800a472:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a478:	4a21      	ldr	r2, [pc, #132]	; (800a500 <HAL_UART_Transmit_DMA+0xf4>)
 800a47a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a480:	4a20      	ldr	r2, [pc, #128]	; (800a504 <HAL_UART_Transmit_DMA+0xf8>)
 800a482:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a488:	2200      	movs	r2, #0
 800a48a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a48c:	f107 0308 	add.w	r3, r7, #8
 800a490:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a498:	6819      	ldr	r1, [r3, #0]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	88fb      	ldrh	r3, [r7, #6]
 800a4a4:	f7fb f926 	bl	80056f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4b0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3314      	adds	r3, #20
 800a4c0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	e853 3f00 	ldrex	r3, [r3]
 800a4c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3314      	adds	r3, #20
 800a4d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4da:	627a      	str	r2, [r7, #36]	; 0x24
 800a4dc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4de:	6a39      	ldr	r1, [r7, #32]
 800a4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e2:	e841 2300 	strex	r3, r2, [r1]
 800a4e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1e5      	bne.n	800a4ba <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	e000      	b.n	800a4f4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a4f2:	2302      	movs	r3, #2
  }
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3730      	adds	r7, #48	; 0x30
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	0800ac01 	.word	0x0800ac01
 800a500:	0800ac9b 	.word	0x0800ac9b
 800a504:	0800ae13 	.word	0x0800ae13

0800a508 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	4613      	mov	r3, r2
 800a514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b20      	cmp	r3, #32
 800a520:	d11d      	bne.n	800a55e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <HAL_UART_Receive_DMA+0x26>
 800a528:	88fb      	ldrh	r3, [r7, #6]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e016      	b.n	800a560 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d101      	bne.n	800a540 <HAL_UART_Receive_DMA+0x38>
 800a53c:	2302      	movs	r3, #2
 800a53e:	e00f      	b.n	800a560 <HAL_UART_Receive_DMA+0x58>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	461a      	mov	r2, r3
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 fd15 	bl	800af84 <UART_Start_Receive_DMA>
 800a55a:	4603      	mov	r3, r0
 800a55c:	e000      	b.n	800a560 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a55e:	2302      	movs	r3, #2
  }
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b090      	sub	sp, #64	; 0x40
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a570:	2300      	movs	r3, #0
 800a572:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a57e:	2b80      	cmp	r3, #128	; 0x80
 800a580:	bf0c      	ite	eq
 800a582:	2301      	moveq	r3, #1
 800a584:	2300      	movne	r3, #0
 800a586:	b2db      	uxtb	r3, r3
 800a588:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b21      	cmp	r3, #33	; 0x21
 800a594:	d128      	bne.n	800a5e8 <HAL_UART_DMAStop+0x80>
 800a596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d025      	beq.n	800a5e8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	3314      	adds	r3, #20
 800a5a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a6:	e853 3f00 	ldrex	r3, [r3]
 800a5aa:	623b      	str	r3, [r7, #32]
   return(result);
 800a5ac:	6a3b      	ldr	r3, [r7, #32]
 800a5ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3314      	adds	r3, #20
 800a5ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5bc:	633a      	str	r2, [r7, #48]	; 0x30
 800a5be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5c4:	e841 2300 	strex	r3, r2, [r1]
 800a5c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1e5      	bne.n	800a59c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d004      	beq.n	800a5e2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fb f8e1 	bl	80057a4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fd6c 	bl	800b0c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f2:	2b40      	cmp	r3, #64	; 0x40
 800a5f4:	bf0c      	ite	eq
 800a5f6:	2301      	moveq	r3, #1
 800a5f8:	2300      	movne	r3, #0
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b22      	cmp	r3, #34	; 0x22
 800a608:	d128      	bne.n	800a65c <HAL_UART_DMAStop+0xf4>
 800a60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d025      	beq.n	800a65c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3314      	adds	r3, #20
 800a616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	e853 3f00 	ldrex	r3, [r3]
 800a61e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a626:	637b      	str	r3, [r7, #52]	; 0x34
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3314      	adds	r3, #20
 800a62e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a630:	61fa      	str	r2, [r7, #28]
 800a632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a634:	69b9      	ldr	r1, [r7, #24]
 800a636:	69fa      	ldr	r2, [r7, #28]
 800a638:	e841 2300 	strex	r3, r2, [r1]
 800a63c:	617b      	str	r3, [r7, #20]
   return(result);
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1e5      	bne.n	800a610 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d004      	beq.n	800a656 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a650:	4618      	mov	r0, r3
 800a652:	f7fb f8a7 	bl	80057a4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fd5a 	bl	800b110 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3740      	adds	r7, #64	; 0x40
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
	...

0800a668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b0ba      	sub	sp, #232	; 0xe8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	695b      	ldr	r3, [r3, #20]
 800a68a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a68e:	2300      	movs	r3, #0
 800a690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a694:	2300      	movs	r3, #0
 800a696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a69a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a69e:	f003 030f 	and.w	r3, r3, #15
 800a6a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a6a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10f      	bne.n	800a6ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6b2:	f003 0320 	and.w	r3, r3, #32
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d009      	beq.n	800a6ce <HAL_UART_IRQHandler+0x66>
 800a6ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6be:	f003 0320 	and.w	r3, r3, #32
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fe01 	bl	800b2ce <UART_Receive_IT>
      return;
 800a6cc:	e256      	b.n	800ab7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a6ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 80de 	beq.w	800a894 <HAL_UART_IRQHandler+0x22c>
 800a6d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d106      	bne.n	800a6f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 80d1 	beq.w	800a894 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00b      	beq.n	800a716 <HAL_UART_IRQHandler+0xae>
 800a6fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a706:	2b00      	cmp	r3, #0
 800a708:	d005      	beq.n	800a716 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70e:	f043 0201 	orr.w	r2, r3, #1
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a71a:	f003 0304 	and.w	r3, r3, #4
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00b      	beq.n	800a73a <HAL_UART_IRQHandler+0xd2>
 800a722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d005      	beq.n	800a73a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a732:	f043 0202 	orr.w	r2, r3, #2
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a73e:	f003 0302 	and.w	r3, r3, #2
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00b      	beq.n	800a75e <HAL_UART_IRQHandler+0xf6>
 800a746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d005      	beq.n	800a75e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a756:	f043 0204 	orr.w	r2, r3, #4
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a762:	f003 0308 	and.w	r3, r3, #8
 800a766:	2b00      	cmp	r3, #0
 800a768:	d011      	beq.n	800a78e <HAL_UART_IRQHandler+0x126>
 800a76a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a76e:	f003 0320 	and.w	r3, r3, #32
 800a772:	2b00      	cmp	r3, #0
 800a774:	d105      	bne.n	800a782 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d005      	beq.n	800a78e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a786:	f043 0208 	orr.w	r2, r3, #8
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 81ed 	beq.w	800ab72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a79c:	f003 0320 	and.w	r3, r3, #32
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d008      	beq.n	800a7b6 <HAL_UART_IRQHandler+0x14e>
 800a7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7a8:	f003 0320 	and.w	r3, r3, #32
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fd8c 	bl	800b2ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	695b      	ldr	r3, [r3, #20]
 800a7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c0:	2b40      	cmp	r3, #64	; 0x40
 800a7c2:	bf0c      	ite	eq
 800a7c4:	2301      	moveq	r3, #1
 800a7c6:	2300      	movne	r3, #0
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d2:	f003 0308 	and.w	r3, r3, #8
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d103      	bne.n	800a7e2 <HAL_UART_IRQHandler+0x17a>
 800a7da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d04f      	beq.n	800a882 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fc94 	bl	800b110 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f2:	2b40      	cmp	r3, #64	; 0x40
 800a7f4:	d141      	bne.n	800a87a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3314      	adds	r3, #20
 800a7fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a804:	e853 3f00 	ldrex	r3, [r3]
 800a808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a80c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3314      	adds	r3, #20
 800a81e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a82e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a832:	e841 2300 	strex	r3, r2, [r1]
 800a836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a83a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1d9      	bne.n	800a7f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a846:	2b00      	cmp	r3, #0
 800a848:	d013      	beq.n	800a872 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84e:	4a7d      	ldr	r2, [pc, #500]	; (800aa44 <HAL_UART_IRQHandler+0x3dc>)
 800a850:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a856:	4618      	mov	r0, r3
 800a858:	f7fb f814 	bl	8005884 <HAL_DMA_Abort_IT>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d016      	beq.n	800a890 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a86c:	4610      	mov	r0, r2
 800a86e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a870:	e00e      	b.n	800a890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f9ae 	bl	800abd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a878:	e00a      	b.n	800a890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f9aa 	bl	800abd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a880:	e006      	b.n	800a890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f9a6 	bl	800abd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a88e:	e170      	b.n	800ab72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a890:	bf00      	nop
    return;
 800a892:	e16e      	b.n	800ab72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a898:	2b01      	cmp	r3, #1
 800a89a:	f040 814a 	bne.w	800ab32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8a2:	f003 0310 	and.w	r3, r3, #16
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f000 8143 	beq.w	800ab32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8b0:	f003 0310 	and.w	r3, r3, #16
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 813c 	beq.w	800ab32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	60bb      	str	r3, [r7, #8]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	60bb      	str	r3, [r7, #8]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	60bb      	str	r3, [r7, #8]
 800a8ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8da:	2b40      	cmp	r3, #64	; 0x40
 800a8dc:	f040 80b4 	bne.w	800aa48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a8ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 8140 	beq.w	800ab76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8fe:	429a      	cmp	r2, r3
 800a900:	f080 8139 	bcs.w	800ab76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a90a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a916:	f000 8088 	beq.w	800aa2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	330c      	adds	r3, #12
 800a920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a928:	e853 3f00 	ldrex	r3, [r3]
 800a92c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	330c      	adds	r3, #12
 800a942:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a946:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a94a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a952:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a956:	e841 2300 	strex	r3, r2, [r1]
 800a95a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a95e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1d9      	bne.n	800a91a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3314      	adds	r3, #20
 800a96c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a970:	e853 3f00 	ldrex	r3, [r3]
 800a974:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a978:	f023 0301 	bic.w	r3, r3, #1
 800a97c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3314      	adds	r3, #20
 800a986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a98a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a98e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a990:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a992:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a996:	e841 2300 	strex	r3, r2, [r1]
 800a99a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a99c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1e1      	bne.n	800a966 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3314      	adds	r3, #20
 800a9a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9ac:	e853 3f00 	ldrex	r3, [r3]
 800a9b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a9b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3314      	adds	r3, #20
 800a9c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9ce:	e841 2300 	strex	r3, r2, [r1]
 800a9d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e3      	bne.n	800a9a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	330c      	adds	r3, #12
 800a9ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9f2:	e853 3f00 	ldrex	r3, [r3]
 800a9f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a9f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9fa:	f023 0310 	bic.w	r3, r3, #16
 800a9fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	330c      	adds	r3, #12
 800aa08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aa0c:	65ba      	str	r2, [r7, #88]	; 0x58
 800aa0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa14:	e841 2300 	strex	r3, r2, [r1]
 800aa18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1e3      	bne.n	800a9e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fa febd 	bl	80057a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f8d4 	bl	800abe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa40:	e099      	b.n	800ab76 <HAL_UART_IRQHandler+0x50e>
 800aa42:	bf00      	nop
 800aa44:	0800b1d7 	.word	0x0800b1d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 808b 	beq.w	800ab7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800aa64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 8086 	beq.w	800ab7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	330c      	adds	r3, #12
 800aa74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa78:	e853 3f00 	ldrex	r3, [r3]
 800aa7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	330c      	adds	r3, #12
 800aa8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aa92:	647a      	str	r2, [r7, #68]	; 0x44
 800aa94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa9a:	e841 2300 	strex	r3, r2, [r1]
 800aa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aaa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e3      	bne.n	800aa6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3314      	adds	r3, #20
 800aaac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab0:	e853 3f00 	ldrex	r3, [r3]
 800aab4:	623b      	str	r3, [r7, #32]
   return(result);
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	f023 0301 	bic.w	r3, r3, #1
 800aabc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3314      	adds	r3, #20
 800aac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aaca:	633a      	str	r2, [r7, #48]	; 0x30
 800aacc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aad2:	e841 2300 	strex	r3, r2, [r1]
 800aad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1e3      	bne.n	800aaa6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	330c      	adds	r3, #12
 800aaf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	e853 3f00 	ldrex	r3, [r3]
 800aafa:	60fb      	str	r3, [r7, #12]
   return(result);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f023 0310 	bic.w	r3, r3, #16
 800ab02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	330c      	adds	r3, #12
 800ab0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ab10:	61fa      	str	r2, [r7, #28]
 800ab12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab14:	69b9      	ldr	r1, [r7, #24]
 800ab16:	69fa      	ldr	r2, [r7, #28]
 800ab18:	e841 2300 	strex	r3, r2, [r1]
 800ab1c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1e3      	bne.n	800aaec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f85c 	bl	800abe8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab30:	e023      	b.n	800ab7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ab32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d009      	beq.n	800ab52 <HAL_UART_IRQHandler+0x4ea>
 800ab3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d003      	beq.n	800ab52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fb57 	bl	800b1fe <UART_Transmit_IT>
    return;
 800ab50:	e014      	b.n	800ab7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ab52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00e      	beq.n	800ab7c <HAL_UART_IRQHandler+0x514>
 800ab5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d008      	beq.n	800ab7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fb97 	bl	800b29e <UART_EndTransmit_IT>
    return;
 800ab70:	e004      	b.n	800ab7c <HAL_UART_IRQHandler+0x514>
    return;
 800ab72:	bf00      	nop
 800ab74:	e002      	b.n	800ab7c <HAL_UART_IRQHandler+0x514>
      return;
 800ab76:	bf00      	nop
 800ab78:	e000      	b.n	800ab7c <HAL_UART_IRQHandler+0x514>
      return;
 800ab7a:	bf00      	nop
  }
}
 800ab7c:	37e8      	adds	r7, #232	; 0xe8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop

0800ab84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800abb4:	bf00      	nop
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b090      	sub	sp, #64	; 0x40
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d137      	bne.n	800ac8c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ac1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac1e:	2200      	movs	r2, #0
 800ac20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3314      	adds	r3, #20
 800ac28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	623b      	str	r3, [r7, #32]
   return(result);
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac38:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3314      	adds	r3, #20
 800ac40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac42:	633a      	str	r2, [r7, #48]	; 0x30
 800ac44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac4a:	e841 2300 	strex	r3, r2, [r1]
 800ac4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1e5      	bne.n	800ac22 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	330c      	adds	r3, #12
 800ac5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	e853 3f00 	ldrex	r3, [r3]
 800ac64:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ac6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	330c      	adds	r3, #12
 800ac74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac76:	61fa      	str	r2, [r7, #28]
 800ac78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7a:	69b9      	ldr	r1, [r7, #24]
 800ac7c:	69fa      	ldr	r2, [r7, #28]
 800ac7e:	e841 2300 	strex	r3, r2, [r1]
 800ac82:	617b      	str	r3, [r7, #20]
   return(result);
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1e5      	bne.n	800ac56 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac8a:	e002      	b.n	800ac92 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ac8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ac8e:	f7ff ff79 	bl	800ab84 <HAL_UART_TxCpltCallback>
}
 800ac92:	bf00      	nop
 800ac94:	3740      	adds	r7, #64	; 0x40
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f7ff ff75 	bl	800ab98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acae:	bf00      	nop
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b09c      	sub	sp, #112	; 0x70
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d172      	bne.n	800adb8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800acd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acd4:	2200      	movs	r2, #0
 800acd6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	330c      	adds	r3, #12
 800acde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ace2:	e853 3f00 	ldrex	r3, [r3]
 800ace6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ace8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acee:	66bb      	str	r3, [r7, #104]	; 0x68
 800acf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	330c      	adds	r3, #12
 800acf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800acf8:	65ba      	str	r2, [r7, #88]	; 0x58
 800acfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800acfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad00:	e841 2300 	strex	r3, r2, [r1]
 800ad04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1e5      	bne.n	800acd8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3314      	adds	r3, #20
 800ad12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	e853 3f00 	ldrex	r3, [r3]
 800ad1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1e:	f023 0301 	bic.w	r3, r3, #1
 800ad22:	667b      	str	r3, [r7, #100]	; 0x64
 800ad24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3314      	adds	r3, #20
 800ad2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad2c:	647a      	str	r2, [r7, #68]	; 0x44
 800ad2e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad34:	e841 2300 	strex	r3, r2, [r1]
 800ad38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1e5      	bne.n	800ad0c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3314      	adds	r3, #20
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4a:	e853 3f00 	ldrex	r3, [r3]
 800ad4e:	623b      	str	r3, [r7, #32]
   return(result);
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad56:	663b      	str	r3, [r7, #96]	; 0x60
 800ad58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3314      	adds	r3, #20
 800ad5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad60:	633a      	str	r2, [r7, #48]	; 0x30
 800ad62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad68:	e841 2300 	strex	r3, r2, [r1]
 800ad6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1e5      	bne.n	800ad40 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad76:	2220      	movs	r2, #32
 800ad78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d119      	bne.n	800adb8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	330c      	adds	r3, #12
 800ad8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	e853 3f00 	ldrex	r3, [r3]
 800ad92:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f023 0310 	bic.w	r3, r3, #16
 800ad9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	330c      	adds	r3, #12
 800ada2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ada4:	61fa      	str	r2, [r7, #28]
 800ada6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada8:	69b9      	ldr	r1, [r7, #24]
 800adaa:	69fa      	ldr	r2, [r7, #28]
 800adac:	e841 2300 	strex	r3, r2, [r1]
 800adb0:	617b      	str	r3, [r7, #20]
   return(result);
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1e5      	bne.n	800ad84 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d106      	bne.n	800adce <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800adc4:	4619      	mov	r1, r3
 800adc6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800adc8:	f7ff ff0e 	bl	800abe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adcc:	e002      	b.n	800add4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800adce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800add0:	f7ff feec 	bl	800abac <HAL_UART_RxCpltCallback>
}
 800add4:	bf00      	nop
 800add6:	3770      	adds	r7, #112	; 0x70
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d108      	bne.n	800ae04 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800adf6:	085b      	lsrs	r3, r3, #1
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	4619      	mov	r1, r3
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f7ff fef3 	bl	800abe8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae02:	e002      	b.n	800ae0a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f7ff fedb 	bl	800abc0 <HAL_UART_RxHalfCpltCallback>
}
 800ae0a:	bf00      	nop
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae22:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	695b      	ldr	r3, [r3, #20]
 800ae2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae2e:	2b80      	cmp	r3, #128	; 0x80
 800ae30:	bf0c      	ite	eq
 800ae32:	2301      	moveq	r3, #1
 800ae34:	2300      	movne	r3, #0
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b21      	cmp	r3, #33	; 0x21
 800ae44:	d108      	bne.n	800ae58 <UART_DMAError+0x46>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d005      	beq.n	800ae58 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ae52:	68b8      	ldr	r0, [r7, #8]
 800ae54:	f000 f934 	bl	800b0c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae62:	2b40      	cmp	r3, #64	; 0x40
 800ae64:	bf0c      	ite	eq
 800ae66:	2301      	moveq	r3, #1
 800ae68:	2300      	movne	r3, #0
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b22      	cmp	r3, #34	; 0x22
 800ae78:	d108      	bne.n	800ae8c <UART_DMAError+0x7a>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d005      	beq.n	800ae8c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	2200      	movs	r2, #0
 800ae84:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ae86:	68b8      	ldr	r0, [r7, #8]
 800ae88:	f000 f942 	bl	800b110 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae90:	f043 0210 	orr.w	r2, r3, #16
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae98:	68b8      	ldr	r0, [r7, #8]
 800ae9a:	f7ff fe9b 	bl	800abd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae9e:	bf00      	nop
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b090      	sub	sp, #64	; 0x40
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	60b9      	str	r1, [r7, #8]
 800aeb0:	603b      	str	r3, [r7, #0]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeb6:	e050      	b.n	800af5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aebe:	d04c      	beq.n	800af5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d007      	beq.n	800aed6 <UART_WaitOnFlagUntilTimeout+0x30>
 800aec6:	f7f9 ff85 	bl	8004dd4 <HAL_GetTick>
 800aeca:	4602      	mov	r2, r0
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d241      	bcs.n	800af5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	330c      	adds	r3, #12
 800aedc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aeec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	330c      	adds	r3, #12
 800aef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aef6:	637a      	str	r2, [r7, #52]	; 0x34
 800aef8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aefc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aefe:	e841 2300 	strex	r3, r2, [r1]
 800af02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1e5      	bne.n	800aed6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3314      	adds	r3, #20
 800af10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	e853 3f00 	ldrex	r3, [r3]
 800af18:	613b      	str	r3, [r7, #16]
   return(result);
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	f023 0301 	bic.w	r3, r3, #1
 800af20:	63bb      	str	r3, [r7, #56]	; 0x38
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	3314      	adds	r3, #20
 800af28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af2a:	623a      	str	r2, [r7, #32]
 800af2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2e:	69f9      	ldr	r1, [r7, #28]
 800af30:	6a3a      	ldr	r2, [r7, #32]
 800af32:	e841 2300 	strex	r3, r2, [r1]
 800af36:	61bb      	str	r3, [r7, #24]
   return(result);
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1e5      	bne.n	800af0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2220      	movs	r2, #32
 800af42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2220      	movs	r2, #32
 800af4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800af56:	2303      	movs	r3, #3
 800af58:	e00f      	b.n	800af7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	4013      	ands	r3, r2
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	429a      	cmp	r2, r3
 800af68:	bf0c      	ite	eq
 800af6a:	2301      	moveq	r3, #1
 800af6c:	2300      	movne	r3, #0
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	461a      	mov	r2, r3
 800af72:	79fb      	ldrb	r3, [r7, #7]
 800af74:	429a      	cmp	r2, r3
 800af76:	d09f      	beq.n	800aeb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3740      	adds	r7, #64	; 0x40
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
	...

0800af84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b098      	sub	sp, #96	; 0x60
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	4613      	mov	r3, r2
 800af90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	88fa      	ldrh	r2, [r7, #6]
 800af9c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2222      	movs	r2, #34	; 0x22
 800afa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb0:	4a40      	ldr	r2, [pc, #256]	; (800b0b4 <UART_Start_Receive_DMA+0x130>)
 800afb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb8:	4a3f      	ldr	r2, [pc, #252]	; (800b0b8 <UART_Start_Receive_DMA+0x134>)
 800afba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc0:	4a3e      	ldr	r2, [pc, #248]	; (800b0bc <UART_Start_Receive_DMA+0x138>)
 800afc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc8:	2200      	movs	r2, #0
 800afca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800afcc:	f107 0308 	add.w	r3, r7, #8
 800afd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3304      	adds	r3, #4
 800afdc:	4619      	mov	r1, r3
 800afde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	88fb      	ldrh	r3, [r7, #6]
 800afe4:	f7fa fb86 	bl	80056f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800afe8:	2300      	movs	r3, #0
 800afea:	613b      	str	r3, [r7, #16]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	613b      	str	r3, [r7, #16]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	613b      	str	r3, [r7, #16]
 800affc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d019      	beq.n	800b042 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	330c      	adds	r3, #12
 800b014:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b018:	e853 3f00 	ldrex	r3, [r3]
 800b01c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b024:	65bb      	str	r3, [r7, #88]	; 0x58
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	330c      	adds	r3, #12
 800b02c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b02e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b030:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b032:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b036:	e841 2300 	strex	r3, r2, [r1]
 800b03a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b03c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d1e5      	bne.n	800b00e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	3314      	adds	r3, #20
 800b048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04c:	e853 3f00 	ldrex	r3, [r3]
 800b050:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b054:	f043 0301 	orr.w	r3, r3, #1
 800b058:	657b      	str	r3, [r7, #84]	; 0x54
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	3314      	adds	r3, #20
 800b060:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b062:	63ba      	str	r2, [r7, #56]	; 0x38
 800b064:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b066:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b06a:	e841 2300 	strex	r3, r2, [r1]
 800b06e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1e5      	bne.n	800b042 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3314      	adds	r3, #20
 800b07c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	e853 3f00 	ldrex	r3, [r3]
 800b084:	617b      	str	r3, [r7, #20]
   return(result);
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b08c:	653b      	str	r3, [r7, #80]	; 0x50
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3314      	adds	r3, #20
 800b094:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b096:	627a      	str	r2, [r7, #36]	; 0x24
 800b098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09a:	6a39      	ldr	r1, [r7, #32]
 800b09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b09e:	e841 2300 	strex	r3, r2, [r1]
 800b0a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1e5      	bne.n	800b076 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3760      	adds	r7, #96	; 0x60
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	0800acb7 	.word	0x0800acb7
 800b0b8:	0800addd 	.word	0x0800addd
 800b0bc:	0800ae13 	.word	0x0800ae13

0800b0c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b089      	sub	sp, #36	; 0x24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	330c      	adds	r3, #12
 800b0ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	e853 3f00 	ldrex	r3, [r3]
 800b0d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b0de:	61fb      	str	r3, [r7, #28]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	330c      	adds	r3, #12
 800b0e6:	69fa      	ldr	r2, [r7, #28]
 800b0e8:	61ba      	str	r2, [r7, #24]
 800b0ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ec:	6979      	ldr	r1, [r7, #20]
 800b0ee:	69ba      	ldr	r2, [r7, #24]
 800b0f0:	e841 2300 	strex	r3, r2, [r1]
 800b0f4:	613b      	str	r3, [r7, #16]
   return(result);
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1e5      	bne.n	800b0c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2220      	movs	r2, #32
 800b100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b104:	bf00      	nop
 800b106:	3724      	adds	r7, #36	; 0x24
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b110:	b480      	push	{r7}
 800b112:	b095      	sub	sp, #84	; 0x54
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	330c      	adds	r3, #12
 800b11e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b122:	e853 3f00 	ldrex	r3, [r3]
 800b126:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b12e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	330c      	adds	r3, #12
 800b136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b138:	643a      	str	r2, [r7, #64]	; 0x40
 800b13a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b13e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b140:	e841 2300 	strex	r3, r2, [r1]
 800b144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1e5      	bne.n	800b118 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3314      	adds	r3, #20
 800b152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	e853 3f00 	ldrex	r3, [r3]
 800b15a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	f023 0301 	bic.w	r3, r3, #1
 800b162:	64bb      	str	r3, [r7, #72]	; 0x48
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	3314      	adds	r3, #20
 800b16a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b16c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b16e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b174:	e841 2300 	strex	r3, r2, [r1]
 800b178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1e5      	bne.n	800b14c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b184:	2b01      	cmp	r3, #1
 800b186:	d119      	bne.n	800b1bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	330c      	adds	r3, #12
 800b18e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	e853 3f00 	ldrex	r3, [r3]
 800b196:	60bb      	str	r3, [r7, #8]
   return(result);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	f023 0310 	bic.w	r3, r3, #16
 800b19e:	647b      	str	r3, [r7, #68]	; 0x44
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	330c      	adds	r3, #12
 800b1a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1a8:	61ba      	str	r2, [r7, #24]
 800b1aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ac:	6979      	ldr	r1, [r7, #20]
 800b1ae:	69ba      	ldr	r2, [r7, #24]
 800b1b0:	e841 2300 	strex	r3, r2, [r1]
 800b1b4:	613b      	str	r3, [r7, #16]
   return(result);
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1e5      	bne.n	800b188 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2220      	movs	r2, #32
 800b1c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b1ca:	bf00      	nop
 800b1cc:	3754      	adds	r7, #84	; 0x54
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b084      	sub	sp, #16
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f7ff fcef 	bl	800abd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1f6:	bf00      	nop
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b1fe:	b480      	push	{r7}
 800b200:	b085      	sub	sp, #20
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	2b21      	cmp	r3, #33	; 0x21
 800b210:	d13e      	bne.n	800b290 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b21a:	d114      	bne.n	800b246 <UART_Transmit_IT+0x48>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d110      	bne.n	800b246 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a1b      	ldr	r3, [r3, #32]
 800b228:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b238:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	1c9a      	adds	r2, r3, #2
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	621a      	str	r2, [r3, #32]
 800b244:	e008      	b.n	800b258 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	1c59      	adds	r1, r3, #1
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	6211      	str	r1, [r2, #32]
 800b250:	781a      	ldrb	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	3b01      	subs	r3, #1
 800b260:	b29b      	uxth	r3, r3
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	4619      	mov	r1, r3
 800b266:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10f      	bne.n	800b28c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68da      	ldr	r2, [r3, #12]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b27a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68da      	ldr	r2, [r3, #12]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b28a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b28c:	2300      	movs	r3, #0
 800b28e:	e000      	b.n	800b292 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b290:	2302      	movs	r3, #2
  }
}
 800b292:	4618      	mov	r0, r3
 800b294:	3714      	adds	r7, #20
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b082      	sub	sp, #8
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68da      	ldr	r2, [r3, #12]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7ff fc60 	bl	800ab84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3708      	adds	r7, #8
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b08c      	sub	sp, #48	; 0x30
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b22      	cmp	r3, #34	; 0x22
 800b2e0:	f040 80ab 	bne.w	800b43a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ec:	d117      	bne.n	800b31e <UART_Receive_IT+0x50>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d113      	bne.n	800b31e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	b29b      	uxth	r3, r3
 800b308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b310:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b316:	1c9a      	adds	r2, r3, #2
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	629a      	str	r2, [r3, #40]	; 0x28
 800b31c:	e026      	b.n	800b36c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b322:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b324:	2300      	movs	r3, #0
 800b326:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b330:	d007      	beq.n	800b342 <UART_Receive_IT+0x74>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10a      	bne.n	800b350 <UART_Receive_IT+0x82>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d106      	bne.n	800b350 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34c:	701a      	strb	r2, [r3, #0]
 800b34e:	e008      	b.n	800b362 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	b2db      	uxtb	r3, r3
 800b358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b35c:	b2da      	uxtb	r2, r3
 800b35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b360:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b366:	1c5a      	adds	r2, r3, #1
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b370:	b29b      	uxth	r3, r3
 800b372:	3b01      	subs	r3, #1
 800b374:	b29b      	uxth	r3, r3
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	4619      	mov	r1, r3
 800b37a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d15a      	bne.n	800b436 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	68da      	ldr	r2, [r3, #12]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f022 0220 	bic.w	r2, r2, #32
 800b38e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68da      	ldr	r2, [r3, #12]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b39e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	695a      	ldr	r2, [r3, #20]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f022 0201 	bic.w	r2, r2, #1
 800b3ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2220      	movs	r2, #32
 800b3b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d135      	bne.n	800b42c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	330c      	adds	r3, #12
 800b3cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	e853 3f00 	ldrex	r3, [r3]
 800b3d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	f023 0310 	bic.w	r3, r3, #16
 800b3dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	330c      	adds	r3, #12
 800b3e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3e6:	623a      	str	r2, [r7, #32]
 800b3e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ea:	69f9      	ldr	r1, [r7, #28]
 800b3ec:	6a3a      	ldr	r2, [r7, #32]
 800b3ee:	e841 2300 	strex	r3, r2, [r1]
 800b3f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1e5      	bne.n	800b3c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 0310 	and.w	r3, r3, #16
 800b404:	2b10      	cmp	r3, #16
 800b406:	d10a      	bne.n	800b41e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b408:	2300      	movs	r3, #0
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	60fb      	str	r3, [r7, #12]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7ff fbdf 	bl	800abe8 <HAL_UARTEx_RxEventCallback>
 800b42a:	e002      	b.n	800b432 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7ff fbbd 	bl	800abac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b432:	2300      	movs	r3, #0
 800b434:	e002      	b.n	800b43c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	e000      	b.n	800b43c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b43a:	2302      	movs	r3, #2
  }
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3730      	adds	r7, #48	; 0x30
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b448:	b0c0      	sub	sp, #256	; 0x100
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b460:	68d9      	ldr	r1, [r3, #12]
 800b462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	ea40 0301 	orr.w	r3, r0, r1
 800b46c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b46e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b472:	689a      	ldr	r2, [r3, #8]
 800b474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	431a      	orrs	r2, r3
 800b47c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	431a      	orrs	r2, r3
 800b484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b488:	69db      	ldr	r3, [r3, #28]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b49c:	f021 010c 	bic.w	r1, r1, #12
 800b4a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b4aa:	430b      	orrs	r3, r1
 800b4ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b4ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	695b      	ldr	r3, [r3, #20]
 800b4b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b4ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4be:	6999      	ldr	r1, [r3, #24]
 800b4c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	ea40 0301 	orr.w	r3, r0, r1
 800b4ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b4cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	4b8f      	ldr	r3, [pc, #572]	; (800b710 <UART_SetConfig+0x2cc>)
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d005      	beq.n	800b4e4 <UART_SetConfig+0xa0>
 800b4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	4b8d      	ldr	r3, [pc, #564]	; (800b714 <UART_SetConfig+0x2d0>)
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d104      	bne.n	800b4ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b4e4:	f7fd feea 	bl	80092bc <HAL_RCC_GetPCLK2Freq>
 800b4e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b4ec:	e003      	b.n	800b4f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b4ee:	f7fd fed1 	bl	8009294 <HAL_RCC_GetPCLK1Freq>
 800b4f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4fa:	69db      	ldr	r3, [r3, #28]
 800b4fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b500:	f040 810c 	bne.w	800b71c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b508:	2200      	movs	r2, #0
 800b50a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b50e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b512:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b516:	4622      	mov	r2, r4
 800b518:	462b      	mov	r3, r5
 800b51a:	1891      	adds	r1, r2, r2
 800b51c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b51e:	415b      	adcs	r3, r3
 800b520:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b522:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b526:	4621      	mov	r1, r4
 800b528:	eb12 0801 	adds.w	r8, r2, r1
 800b52c:	4629      	mov	r1, r5
 800b52e:	eb43 0901 	adc.w	r9, r3, r1
 800b532:	f04f 0200 	mov.w	r2, #0
 800b536:	f04f 0300 	mov.w	r3, #0
 800b53a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b53e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b546:	4690      	mov	r8, r2
 800b548:	4699      	mov	r9, r3
 800b54a:	4623      	mov	r3, r4
 800b54c:	eb18 0303 	adds.w	r3, r8, r3
 800b550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b554:	462b      	mov	r3, r5
 800b556:	eb49 0303 	adc.w	r3, r9, r3
 800b55a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b55e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b56a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b56e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b572:	460b      	mov	r3, r1
 800b574:	18db      	adds	r3, r3, r3
 800b576:	653b      	str	r3, [r7, #80]	; 0x50
 800b578:	4613      	mov	r3, r2
 800b57a:	eb42 0303 	adc.w	r3, r2, r3
 800b57e:	657b      	str	r3, [r7, #84]	; 0x54
 800b580:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b584:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b588:	f7f5 fb88 	bl	8000c9c <__aeabi_uldivmod>
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	4b61      	ldr	r3, [pc, #388]	; (800b718 <UART_SetConfig+0x2d4>)
 800b592:	fba3 2302 	umull	r2, r3, r3, r2
 800b596:	095b      	lsrs	r3, r3, #5
 800b598:	011c      	lsls	r4, r3, #4
 800b59a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b5a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b5ac:	4642      	mov	r2, r8
 800b5ae:	464b      	mov	r3, r9
 800b5b0:	1891      	adds	r1, r2, r2
 800b5b2:	64b9      	str	r1, [r7, #72]	; 0x48
 800b5b4:	415b      	adcs	r3, r3
 800b5b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b5bc:	4641      	mov	r1, r8
 800b5be:	eb12 0a01 	adds.w	sl, r2, r1
 800b5c2:	4649      	mov	r1, r9
 800b5c4:	eb43 0b01 	adc.w	fp, r3, r1
 800b5c8:	f04f 0200 	mov.w	r2, #0
 800b5cc:	f04f 0300 	mov.w	r3, #0
 800b5d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b5d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b5d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b5dc:	4692      	mov	sl, r2
 800b5de:	469b      	mov	fp, r3
 800b5e0:	4643      	mov	r3, r8
 800b5e2:	eb1a 0303 	adds.w	r3, sl, r3
 800b5e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b5ea:	464b      	mov	r3, r9
 800b5ec:	eb4b 0303 	adc.w	r3, fp, r3
 800b5f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b600:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b604:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b608:	460b      	mov	r3, r1
 800b60a:	18db      	adds	r3, r3, r3
 800b60c:	643b      	str	r3, [r7, #64]	; 0x40
 800b60e:	4613      	mov	r3, r2
 800b610:	eb42 0303 	adc.w	r3, r2, r3
 800b614:	647b      	str	r3, [r7, #68]	; 0x44
 800b616:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b61a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b61e:	f7f5 fb3d 	bl	8000c9c <__aeabi_uldivmod>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4611      	mov	r1, r2
 800b628:	4b3b      	ldr	r3, [pc, #236]	; (800b718 <UART_SetConfig+0x2d4>)
 800b62a:	fba3 2301 	umull	r2, r3, r3, r1
 800b62e:	095b      	lsrs	r3, r3, #5
 800b630:	2264      	movs	r2, #100	; 0x64
 800b632:	fb02 f303 	mul.w	r3, r2, r3
 800b636:	1acb      	subs	r3, r1, r3
 800b638:	00db      	lsls	r3, r3, #3
 800b63a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b63e:	4b36      	ldr	r3, [pc, #216]	; (800b718 <UART_SetConfig+0x2d4>)
 800b640:	fba3 2302 	umull	r2, r3, r3, r2
 800b644:	095b      	lsrs	r3, r3, #5
 800b646:	005b      	lsls	r3, r3, #1
 800b648:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b64c:	441c      	add	r4, r3
 800b64e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b652:	2200      	movs	r2, #0
 800b654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b658:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b65c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b660:	4642      	mov	r2, r8
 800b662:	464b      	mov	r3, r9
 800b664:	1891      	adds	r1, r2, r2
 800b666:	63b9      	str	r1, [r7, #56]	; 0x38
 800b668:	415b      	adcs	r3, r3
 800b66a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b66c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b670:	4641      	mov	r1, r8
 800b672:	1851      	adds	r1, r2, r1
 800b674:	6339      	str	r1, [r7, #48]	; 0x30
 800b676:	4649      	mov	r1, r9
 800b678:	414b      	adcs	r3, r1
 800b67a:	637b      	str	r3, [r7, #52]	; 0x34
 800b67c:	f04f 0200 	mov.w	r2, #0
 800b680:	f04f 0300 	mov.w	r3, #0
 800b684:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b688:	4659      	mov	r1, fp
 800b68a:	00cb      	lsls	r3, r1, #3
 800b68c:	4651      	mov	r1, sl
 800b68e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b692:	4651      	mov	r1, sl
 800b694:	00ca      	lsls	r2, r1, #3
 800b696:	4610      	mov	r0, r2
 800b698:	4619      	mov	r1, r3
 800b69a:	4603      	mov	r3, r0
 800b69c:	4642      	mov	r2, r8
 800b69e:	189b      	adds	r3, r3, r2
 800b6a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b6a4:	464b      	mov	r3, r9
 800b6a6:	460a      	mov	r2, r1
 800b6a8:	eb42 0303 	adc.w	r3, r2, r3
 800b6ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b6bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b6c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	18db      	adds	r3, r3, r3
 800b6c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	eb42 0303 	adc.w	r3, r2, r3
 800b6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b6d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b6da:	f7f5 fadf 	bl	8000c9c <__aeabi_uldivmod>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	4b0d      	ldr	r3, [pc, #52]	; (800b718 <UART_SetConfig+0x2d4>)
 800b6e4:	fba3 1302 	umull	r1, r3, r3, r2
 800b6e8:	095b      	lsrs	r3, r3, #5
 800b6ea:	2164      	movs	r1, #100	; 0x64
 800b6ec:	fb01 f303 	mul.w	r3, r1, r3
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	00db      	lsls	r3, r3, #3
 800b6f4:	3332      	adds	r3, #50	; 0x32
 800b6f6:	4a08      	ldr	r2, [pc, #32]	; (800b718 <UART_SetConfig+0x2d4>)
 800b6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b6fc:	095b      	lsrs	r3, r3, #5
 800b6fe:	f003 0207 	and.w	r2, r3, #7
 800b702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4422      	add	r2, r4
 800b70a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b70c:	e106      	b.n	800b91c <UART_SetConfig+0x4d8>
 800b70e:	bf00      	nop
 800b710:	40011000 	.word	0x40011000
 800b714:	40011400 	.word	0x40011400
 800b718:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b71c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b720:	2200      	movs	r2, #0
 800b722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b726:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b72a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b72e:	4642      	mov	r2, r8
 800b730:	464b      	mov	r3, r9
 800b732:	1891      	adds	r1, r2, r2
 800b734:	6239      	str	r1, [r7, #32]
 800b736:	415b      	adcs	r3, r3
 800b738:	627b      	str	r3, [r7, #36]	; 0x24
 800b73a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b73e:	4641      	mov	r1, r8
 800b740:	1854      	adds	r4, r2, r1
 800b742:	4649      	mov	r1, r9
 800b744:	eb43 0501 	adc.w	r5, r3, r1
 800b748:	f04f 0200 	mov.w	r2, #0
 800b74c:	f04f 0300 	mov.w	r3, #0
 800b750:	00eb      	lsls	r3, r5, #3
 800b752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b756:	00e2      	lsls	r2, r4, #3
 800b758:	4614      	mov	r4, r2
 800b75a:	461d      	mov	r5, r3
 800b75c:	4643      	mov	r3, r8
 800b75e:	18e3      	adds	r3, r4, r3
 800b760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b764:	464b      	mov	r3, r9
 800b766:	eb45 0303 	adc.w	r3, r5, r3
 800b76a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b76e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b77a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b77e:	f04f 0200 	mov.w	r2, #0
 800b782:	f04f 0300 	mov.w	r3, #0
 800b786:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b78a:	4629      	mov	r1, r5
 800b78c:	008b      	lsls	r3, r1, #2
 800b78e:	4621      	mov	r1, r4
 800b790:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b794:	4621      	mov	r1, r4
 800b796:	008a      	lsls	r2, r1, #2
 800b798:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b79c:	f7f5 fa7e 	bl	8000c9c <__aeabi_uldivmod>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4b60      	ldr	r3, [pc, #384]	; (800b928 <UART_SetConfig+0x4e4>)
 800b7a6:	fba3 2302 	umull	r2, r3, r3, r2
 800b7aa:	095b      	lsrs	r3, r3, #5
 800b7ac:	011c      	lsls	r4, r3, #4
 800b7ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b7b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b7bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b7c0:	4642      	mov	r2, r8
 800b7c2:	464b      	mov	r3, r9
 800b7c4:	1891      	adds	r1, r2, r2
 800b7c6:	61b9      	str	r1, [r7, #24]
 800b7c8:	415b      	adcs	r3, r3
 800b7ca:	61fb      	str	r3, [r7, #28]
 800b7cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b7d0:	4641      	mov	r1, r8
 800b7d2:	1851      	adds	r1, r2, r1
 800b7d4:	6139      	str	r1, [r7, #16]
 800b7d6:	4649      	mov	r1, r9
 800b7d8:	414b      	adcs	r3, r1
 800b7da:	617b      	str	r3, [r7, #20]
 800b7dc:	f04f 0200 	mov.w	r2, #0
 800b7e0:	f04f 0300 	mov.w	r3, #0
 800b7e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b7e8:	4659      	mov	r1, fp
 800b7ea:	00cb      	lsls	r3, r1, #3
 800b7ec:	4651      	mov	r1, sl
 800b7ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7f2:	4651      	mov	r1, sl
 800b7f4:	00ca      	lsls	r2, r1, #3
 800b7f6:	4610      	mov	r0, r2
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	4642      	mov	r2, r8
 800b7fe:	189b      	adds	r3, r3, r2
 800b800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b804:	464b      	mov	r3, r9
 800b806:	460a      	mov	r2, r1
 800b808:	eb42 0303 	adc.w	r3, r2, r3
 800b80c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	67bb      	str	r3, [r7, #120]	; 0x78
 800b81a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b81c:	f04f 0200 	mov.w	r2, #0
 800b820:	f04f 0300 	mov.w	r3, #0
 800b824:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b828:	4649      	mov	r1, r9
 800b82a:	008b      	lsls	r3, r1, #2
 800b82c:	4641      	mov	r1, r8
 800b82e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b832:	4641      	mov	r1, r8
 800b834:	008a      	lsls	r2, r1, #2
 800b836:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b83a:	f7f5 fa2f 	bl	8000c9c <__aeabi_uldivmod>
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
 800b842:	4611      	mov	r1, r2
 800b844:	4b38      	ldr	r3, [pc, #224]	; (800b928 <UART_SetConfig+0x4e4>)
 800b846:	fba3 2301 	umull	r2, r3, r3, r1
 800b84a:	095b      	lsrs	r3, r3, #5
 800b84c:	2264      	movs	r2, #100	; 0x64
 800b84e:	fb02 f303 	mul.w	r3, r2, r3
 800b852:	1acb      	subs	r3, r1, r3
 800b854:	011b      	lsls	r3, r3, #4
 800b856:	3332      	adds	r3, #50	; 0x32
 800b858:	4a33      	ldr	r2, [pc, #204]	; (800b928 <UART_SetConfig+0x4e4>)
 800b85a:	fba2 2303 	umull	r2, r3, r2, r3
 800b85e:	095b      	lsrs	r3, r3, #5
 800b860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b864:	441c      	add	r4, r3
 800b866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b86a:	2200      	movs	r2, #0
 800b86c:	673b      	str	r3, [r7, #112]	; 0x70
 800b86e:	677a      	str	r2, [r7, #116]	; 0x74
 800b870:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b874:	4642      	mov	r2, r8
 800b876:	464b      	mov	r3, r9
 800b878:	1891      	adds	r1, r2, r2
 800b87a:	60b9      	str	r1, [r7, #8]
 800b87c:	415b      	adcs	r3, r3
 800b87e:	60fb      	str	r3, [r7, #12]
 800b880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b884:	4641      	mov	r1, r8
 800b886:	1851      	adds	r1, r2, r1
 800b888:	6039      	str	r1, [r7, #0]
 800b88a:	4649      	mov	r1, r9
 800b88c:	414b      	adcs	r3, r1
 800b88e:	607b      	str	r3, [r7, #4]
 800b890:	f04f 0200 	mov.w	r2, #0
 800b894:	f04f 0300 	mov.w	r3, #0
 800b898:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b89c:	4659      	mov	r1, fp
 800b89e:	00cb      	lsls	r3, r1, #3
 800b8a0:	4651      	mov	r1, sl
 800b8a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8a6:	4651      	mov	r1, sl
 800b8a8:	00ca      	lsls	r2, r1, #3
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	4642      	mov	r2, r8
 800b8b2:	189b      	adds	r3, r3, r2
 800b8b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8b6:	464b      	mov	r3, r9
 800b8b8:	460a      	mov	r2, r1
 800b8ba:	eb42 0303 	adc.w	r3, r2, r3
 800b8be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	663b      	str	r3, [r7, #96]	; 0x60
 800b8ca:	667a      	str	r2, [r7, #100]	; 0x64
 800b8cc:	f04f 0200 	mov.w	r2, #0
 800b8d0:	f04f 0300 	mov.w	r3, #0
 800b8d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b8d8:	4649      	mov	r1, r9
 800b8da:	008b      	lsls	r3, r1, #2
 800b8dc:	4641      	mov	r1, r8
 800b8de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b8e2:	4641      	mov	r1, r8
 800b8e4:	008a      	lsls	r2, r1, #2
 800b8e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b8ea:	f7f5 f9d7 	bl	8000c9c <__aeabi_uldivmod>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4b0d      	ldr	r3, [pc, #52]	; (800b928 <UART_SetConfig+0x4e4>)
 800b8f4:	fba3 1302 	umull	r1, r3, r3, r2
 800b8f8:	095b      	lsrs	r3, r3, #5
 800b8fa:	2164      	movs	r1, #100	; 0x64
 800b8fc:	fb01 f303 	mul.w	r3, r1, r3
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	011b      	lsls	r3, r3, #4
 800b904:	3332      	adds	r3, #50	; 0x32
 800b906:	4a08      	ldr	r2, [pc, #32]	; (800b928 <UART_SetConfig+0x4e4>)
 800b908:	fba2 2303 	umull	r2, r3, r2, r3
 800b90c:	095b      	lsrs	r3, r3, #5
 800b90e:	f003 020f 	and.w	r2, r3, #15
 800b912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4422      	add	r2, r4
 800b91a:	609a      	str	r2, [r3, #8]
}
 800b91c:	bf00      	nop
 800b91e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b922:	46bd      	mov	sp, r7
 800b924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b928:	51eb851f 	.word	0x51eb851f

0800b92c <__NVIC_SetPriority>:
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	6039      	str	r1, [r7, #0]
 800b936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	db0a      	blt.n	800b956 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	b2da      	uxtb	r2, r3
 800b944:	490c      	ldr	r1, [pc, #48]	; (800b978 <__NVIC_SetPriority+0x4c>)
 800b946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b94a:	0112      	lsls	r2, r2, #4
 800b94c:	b2d2      	uxtb	r2, r2
 800b94e:	440b      	add	r3, r1
 800b950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b954:	e00a      	b.n	800b96c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	4908      	ldr	r1, [pc, #32]	; (800b97c <__NVIC_SetPriority+0x50>)
 800b95c:	79fb      	ldrb	r3, [r7, #7]
 800b95e:	f003 030f 	and.w	r3, r3, #15
 800b962:	3b04      	subs	r3, #4
 800b964:	0112      	lsls	r2, r2, #4
 800b966:	b2d2      	uxtb	r2, r2
 800b968:	440b      	add	r3, r1
 800b96a:	761a      	strb	r2, [r3, #24]
}
 800b96c:	bf00      	nop
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr
 800b978:	e000e100 	.word	0xe000e100
 800b97c:	e000ed00 	.word	0xe000ed00

0800b980 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b980:	b580      	push	{r7, lr}
 800b982:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b984:	4b05      	ldr	r3, [pc, #20]	; (800b99c <SysTick_Handler+0x1c>)
 800b986:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b988:	f001 fe1a 	bl	800d5c0 <xTaskGetSchedulerState>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d001      	beq.n	800b996 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b992:	f002 fd01 	bl	800e398 <xPortSysTickHandler>
  }
}
 800b996:	bf00      	nop
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	e000e010 	.word	0xe000e010

0800b9a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	f06f 0004 	mvn.w	r0, #4
 800b9aa:	f7ff ffbf 	bl	800b92c <__NVIC_SetPriority>
#endif
}
 800b9ae:	bf00      	nop
 800b9b0:	bd80      	pop	{r7, pc}
	...

0800b9b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9ba:	f3ef 8305 	mrs	r3, IPSR
 800b9be:	603b      	str	r3, [r7, #0]
  return(result);
 800b9c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b9c6:	f06f 0305 	mvn.w	r3, #5
 800b9ca:	607b      	str	r3, [r7, #4]
 800b9cc:	e00c      	b.n	800b9e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b9ce:	4b0a      	ldr	r3, [pc, #40]	; (800b9f8 <osKernelInitialize+0x44>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d105      	bne.n	800b9e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b9d6:	4b08      	ldr	r3, [pc, #32]	; (800b9f8 <osKernelInitialize+0x44>)
 800b9d8:	2201      	movs	r2, #1
 800b9da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	607b      	str	r3, [r7, #4]
 800b9e0:	e002      	b.n	800b9e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b9e8:	687b      	ldr	r3, [r7, #4]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	370c      	adds	r7, #12
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	200050a0 	.word	0x200050a0

0800b9fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba02:	f3ef 8305 	mrs	r3, IPSR
 800ba06:	603b      	str	r3, [r7, #0]
  return(result);
 800ba08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ba0e:	f06f 0305 	mvn.w	r3, #5
 800ba12:	607b      	str	r3, [r7, #4]
 800ba14:	e010      	b.n	800ba38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ba16:	4b0b      	ldr	r3, [pc, #44]	; (800ba44 <osKernelStart+0x48>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d109      	bne.n	800ba32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ba1e:	f7ff ffbf 	bl	800b9a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ba22:	4b08      	ldr	r3, [pc, #32]	; (800ba44 <osKernelStart+0x48>)
 800ba24:	2202      	movs	r2, #2
 800ba26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ba28:	f001 f948 	bl	800ccbc <vTaskStartScheduler>
      stat = osOK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	607b      	str	r3, [r7, #4]
 800ba30:	e002      	b.n	800ba38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ba32:	f04f 33ff 	mov.w	r3, #4294967295
 800ba36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba38:	687b      	ldr	r3, [r7, #4]
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	200050a0 	.word	0x200050a0

0800ba48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba50:	f3ef 8305 	mrs	r3, IPSR
 800ba54:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d003      	beq.n	800ba64 <osDelay+0x1c>
    stat = osErrorISR;
 800ba5c:	f06f 0305 	mvn.w	r3, #5
 800ba60:	60fb      	str	r3, [r7, #12]
 800ba62:	e007      	b.n	800ba74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ba64:	2300      	movs	r3, #0
 800ba66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d002      	beq.n	800ba74 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f001 f8f0 	bl	800cc54 <vTaskDelay>
    }
  }

  return (stat);
 800ba74:	68fb      	ldr	r3, [r7, #12]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
	...

0800ba80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4a07      	ldr	r2, [pc, #28]	; (800baac <vApplicationGetIdleTaskMemory+0x2c>)
 800ba90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	4a06      	ldr	r2, [pc, #24]	; (800bab0 <vApplicationGetIdleTaskMemory+0x30>)
 800ba96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2280      	movs	r2, #128	; 0x80
 800ba9c:	601a      	str	r2, [r3, #0]
}
 800ba9e:	bf00      	nop
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	200050a4 	.word	0x200050a4
 800bab0:	2000514c 	.word	0x2000514c

0800bab4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	4a07      	ldr	r2, [pc, #28]	; (800bae0 <vApplicationGetTimerTaskMemory+0x2c>)
 800bac4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	4a06      	ldr	r2, [pc, #24]	; (800bae4 <vApplicationGetTimerTaskMemory+0x30>)
 800baca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bad2:	601a      	str	r2, [r3, #0]
}
 800bad4:	bf00      	nop
 800bad6:	3714      	adds	r7, #20
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	2000534c 	.word	0x2000534c
 800bae4:	200053f4 	.word	0x200053f4

0800bae8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f103 0208 	add.w	r2, r3, #8
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f04f 32ff 	mov.w	r2, #4294967295
 800bb00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f103 0208 	add.w	r2, r3, #8
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f103 0208 	add.w	r2, r3, #8
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb36:	bf00      	nop
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb42:	b480      	push	{r7}
 800bb44:	b085      	sub	sp, #20
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	689a      	ldr	r2, [r3, #8]
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	1c5a      	adds	r2, r3, #1
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	601a      	str	r2, [r3, #0]
}
 800bb7e:	bf00      	nop
 800bb80:	3714      	adds	r7, #20
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b085      	sub	sp, #20
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba0:	d103      	bne.n	800bbaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	e00c      	b.n	800bbc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	3308      	adds	r3, #8
 800bbae:	60fb      	str	r3, [r7, #12]
 800bbb0:	e002      	b.n	800bbb8 <vListInsert+0x2e>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	60fb      	str	r3, [r7, #12]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d2f6      	bcs.n	800bbb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	685a      	ldr	r2, [r3, #4]
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	1c5a      	adds	r2, r3, #1
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	601a      	str	r2, [r3, #0]
}
 800bbf0:	bf00      	nop
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	6892      	ldr	r2, [r2, #8]
 800bc12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	6852      	ldr	r2, [r2, #4]
 800bc1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d103      	bne.n	800bc30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	689a      	ldr	r2, [r3, #8]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	1e5a      	subs	r2, r3, #1
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3714      	adds	r7, #20
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <xQueueGenericReset+0x2a>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	60bb      	str	r3, [r7, #8]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc7a:	f002 fafb 	bl	800e274 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc86:	68f9      	ldr	r1, [r7, #12]
 800bc88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc8a:	fb01 f303 	mul.w	r3, r1, r3
 800bc8e:	441a      	add	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2200      	movs	r2, #0
 800bc98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	68f9      	ldr	r1, [r7, #12]
 800bcae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bcb0:	fb01 f303 	mul.w	r3, r1, r3
 800bcb4:	441a      	add	r2, r3
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	22ff      	movs	r2, #255	; 0xff
 800bcbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	22ff      	movs	r2, #255	; 0xff
 800bcc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d114      	bne.n	800bcfa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d01a      	beq.n	800bd0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	3310      	adds	r3, #16
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f001 fa87 	bl	800d1f0 <xTaskRemoveFromEventList>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d012      	beq.n	800bd0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bce8:	4b0c      	ldr	r3, [pc, #48]	; (800bd1c <xQueueGenericReset+0xcc>)
 800bcea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcee:	601a      	str	r2, [r3, #0]
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	e009      	b.n	800bd0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	3310      	adds	r3, #16
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7ff fef2 	bl	800bae8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	3324      	adds	r3, #36	; 0x24
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7ff feed 	bl	800bae8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd0e:	f002 fae1 	bl	800e2d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd12:	2301      	movs	r3, #1
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	e000ed04 	.word	0xe000ed04

0800bd20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08e      	sub	sp, #56	; 0x38
 800bd24:	af02      	add	r7, sp, #8
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	607a      	str	r2, [r7, #4]
 800bd2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10a      	bne.n	800bd4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd46:	bf00      	nop
 800bd48:	e7fe      	b.n	800bd48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10a      	bne.n	800bd66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd62:	bf00      	nop
 800bd64:	e7fe      	b.n	800bd64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d002      	beq.n	800bd72 <xQueueGenericCreateStatic+0x52>
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <xQueueGenericCreateStatic+0x56>
 800bd72:	2301      	movs	r3, #1
 800bd74:	e000      	b.n	800bd78 <xQueueGenericCreateStatic+0x58>
 800bd76:	2300      	movs	r3, #0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d10a      	bne.n	800bd92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd80:	f383 8811 	msr	BASEPRI, r3
 800bd84:	f3bf 8f6f 	isb	sy
 800bd88:	f3bf 8f4f 	dsb	sy
 800bd8c:	623b      	str	r3, [r7, #32]
}
 800bd8e:	bf00      	nop
 800bd90:	e7fe      	b.n	800bd90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d102      	bne.n	800bd9e <xQueueGenericCreateStatic+0x7e>
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <xQueueGenericCreateStatic+0x82>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e000      	b.n	800bda4 <xQueueGenericCreateStatic+0x84>
 800bda2:	2300      	movs	r3, #0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10a      	bne.n	800bdbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	61fb      	str	r3, [r7, #28]
}
 800bdba:	bf00      	nop
 800bdbc:	e7fe      	b.n	800bdbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bdbe:	2350      	movs	r3, #80	; 0x50
 800bdc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	2b50      	cmp	r3, #80	; 0x50
 800bdc6:	d00a      	beq.n	800bdde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	61bb      	str	r3, [r7, #24]
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bdde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00d      	beq.n	800be06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdec:	2201      	movs	r2, #1
 800bdee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdf2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	68b9      	ldr	r1, [r7, #8]
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f000 f83f 	bl	800be84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800be08:	4618      	mov	r0, r3
 800be0a:	3730      	adds	r7, #48	; 0x30
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800be10:	b580      	push	{r7, lr}
 800be12:	b08a      	sub	sp, #40	; 0x28
 800be14:	af02      	add	r7, sp, #8
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	4613      	mov	r3, r2
 800be1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10a      	bne.n	800be3a <xQueueGenericCreate+0x2a>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	613b      	str	r3, [r7, #16]
}
 800be36:	bf00      	nop
 800be38:	e7fe      	b.n	800be38 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	fb02 f303 	mul.w	r3, r2, r3
 800be42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	3350      	adds	r3, #80	; 0x50
 800be48:	4618      	mov	r0, r3
 800be4a:	f002 fb35 	bl	800e4b8 <pvPortMalloc>
 800be4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d011      	beq.n	800be7a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	3350      	adds	r3, #80	; 0x50
 800be5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	2200      	movs	r2, #0
 800be64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be68:	79fa      	ldrb	r2, [r7, #7]
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	4613      	mov	r3, r2
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	68b9      	ldr	r1, [r7, #8]
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f000 f805 	bl	800be84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be7a:	69bb      	ldr	r3, [r7, #24]
	}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3720      	adds	r7, #32
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
 800be90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d103      	bne.n	800bea0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	69ba      	ldr	r2, [r7, #24]
 800be9c:	601a      	str	r2, [r3, #0]
 800be9e:	e002      	b.n	800bea6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800beb2:	2101      	movs	r1, #1
 800beb4:	69b8      	ldr	r0, [r7, #24]
 800beb6:	f7ff fecb 	bl	800bc50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	78fa      	ldrb	r2, [r7, #3]
 800bebe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bec2:	bf00      	nop
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
	...

0800becc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b08e      	sub	sp, #56	; 0x38
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800beda:	2300      	movs	r3, #0
 800bedc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10a      	bne.n	800befe <xQueueGenericSend+0x32>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800befa:	bf00      	nop
 800befc:	e7fe      	b.n	800befc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d103      	bne.n	800bf0c <xQueueGenericSend+0x40>
 800bf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d101      	bne.n	800bf10 <xQueueGenericSend+0x44>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e000      	b.n	800bf12 <xQueueGenericSend+0x46>
 800bf10:	2300      	movs	r3, #0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10a      	bne.n	800bf2c <xQueueGenericSend+0x60>
	__asm volatile
 800bf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf28:	bf00      	nop
 800bf2a:	e7fe      	b.n	800bf2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d103      	bne.n	800bf3a <xQueueGenericSend+0x6e>
 800bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d101      	bne.n	800bf3e <xQueueGenericSend+0x72>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e000      	b.n	800bf40 <xQueueGenericSend+0x74>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10a      	bne.n	800bf5a <xQueueGenericSend+0x8e>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	623b      	str	r3, [r7, #32]
}
 800bf56:	bf00      	nop
 800bf58:	e7fe      	b.n	800bf58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf5a:	f001 fb31 	bl	800d5c0 <xTaskGetSchedulerState>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d102      	bne.n	800bf6a <xQueueGenericSend+0x9e>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d101      	bne.n	800bf6e <xQueueGenericSend+0xa2>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e000      	b.n	800bf70 <xQueueGenericSend+0xa4>
 800bf6e:	2300      	movs	r3, #0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d10a      	bne.n	800bf8a <xQueueGenericSend+0xbe>
	__asm volatile
 800bf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf78:	f383 8811 	msr	BASEPRI, r3
 800bf7c:	f3bf 8f6f 	isb	sy
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	61fb      	str	r3, [r7, #28]
}
 800bf86:	bf00      	nop
 800bf88:	e7fe      	b.n	800bf88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf8a:	f002 f973 	bl	800e274 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d302      	bcc.n	800bfa0 <xQueueGenericSend+0xd4>
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	d129      	bne.n	800bff4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfa0:	683a      	ldr	r2, [r7, #0]
 800bfa2:	68b9      	ldr	r1, [r7, #8]
 800bfa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfa6:	f000 fb2f 	bl	800c608 <prvCopyDataToQueue>
 800bfaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d010      	beq.n	800bfd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	3324      	adds	r3, #36	; 0x24
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f001 f919 	bl	800d1f0 <xTaskRemoveFromEventList>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d013      	beq.n	800bfec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bfc4:	4b3f      	ldr	r3, [pc, #252]	; (800c0c4 <xQueueGenericSend+0x1f8>)
 800bfc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfca:	601a      	str	r2, [r3, #0]
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	f3bf 8f6f 	isb	sy
 800bfd4:	e00a      	b.n	800bfec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d007      	beq.n	800bfec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bfdc:	4b39      	ldr	r3, [pc, #228]	; (800c0c4 <xQueueGenericSend+0x1f8>)
 800bfde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfe2:	601a      	str	r2, [r3, #0]
 800bfe4:	f3bf 8f4f 	dsb	sy
 800bfe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bfec:	f002 f972 	bl	800e2d4 <vPortExitCritical>
				return pdPASS;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e063      	b.n	800c0bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d103      	bne.n	800c002 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bffa:	f002 f96b 	bl	800e2d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bffe:	2300      	movs	r3, #0
 800c000:	e05c      	b.n	800c0bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c004:	2b00      	cmp	r3, #0
 800c006:	d106      	bne.n	800c016 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c008:	f107 0314 	add.w	r3, r7, #20
 800c00c:	4618      	mov	r0, r3
 800c00e:	f001 f979 	bl	800d304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c012:	2301      	movs	r3, #1
 800c014:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c016:	f002 f95d 	bl	800e2d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c01a:	f000 febf 	bl	800cd9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c01e:	f002 f929 	bl	800e274 <vPortEnterCritical>
 800c022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c028:	b25b      	sxtb	r3, r3
 800c02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02e:	d103      	bne.n	800c038 <xQueueGenericSend+0x16c>
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c032:	2200      	movs	r2, #0
 800c034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c03e:	b25b      	sxtb	r3, r3
 800c040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c044:	d103      	bne.n	800c04e <xQueueGenericSend+0x182>
 800c046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c048:	2200      	movs	r2, #0
 800c04a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c04e:	f002 f941 	bl	800e2d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c052:	1d3a      	adds	r2, r7, #4
 800c054:	f107 0314 	add.w	r3, r7, #20
 800c058:	4611      	mov	r1, r2
 800c05a:	4618      	mov	r0, r3
 800c05c:	f001 f968 	bl	800d330 <xTaskCheckForTimeOut>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d124      	bne.n	800c0b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c066:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c068:	f000 fbc6 	bl	800c7f8 <prvIsQueueFull>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d018      	beq.n	800c0a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	3310      	adds	r3, #16
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	4611      	mov	r1, r2
 800c07a:	4618      	mov	r0, r3
 800c07c:	f001 f868 	bl	800d150 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c082:	f000 fb51 	bl	800c728 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c086:	f000 fe97 	bl	800cdb8 <xTaskResumeAll>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f47f af7c 	bne.w	800bf8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c092:	4b0c      	ldr	r3, [pc, #48]	; (800c0c4 <xQueueGenericSend+0x1f8>)
 800c094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c098:	601a      	str	r2, [r3, #0]
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	e772      	b.n	800bf8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c0a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0a6:	f000 fb3f 	bl	800c728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0aa:	f000 fe85 	bl	800cdb8 <xTaskResumeAll>
 800c0ae:	e76c      	b.n	800bf8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c0b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0b2:	f000 fb39 	bl	800c728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0b6:	f000 fe7f 	bl	800cdb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c0ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3738      	adds	r7, #56	; 0x38
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	e000ed04 	.word	0xe000ed04

0800c0c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b090      	sub	sp, #64	; 0x40
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
 800c0d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10a      	bne.n	800c0f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d103      	bne.n	800c104 <xQueueGenericSendFromISR+0x3c>
 800c0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <xQueueGenericSendFromISR+0x40>
 800c104:	2301      	movs	r3, #1
 800c106:	e000      	b.n	800c10a <xQueueGenericSendFromISR+0x42>
 800c108:	2300      	movs	r3, #0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d10a      	bne.n	800c124 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c120:	bf00      	nop
 800c122:	e7fe      	b.n	800c122 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	2b02      	cmp	r3, #2
 800c128:	d103      	bne.n	800c132 <xQueueGenericSendFromISR+0x6a>
 800c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d101      	bne.n	800c136 <xQueueGenericSendFromISR+0x6e>
 800c132:	2301      	movs	r3, #1
 800c134:	e000      	b.n	800c138 <xQueueGenericSendFromISR+0x70>
 800c136:	2300      	movs	r3, #0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10a      	bne.n	800c152 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	623b      	str	r3, [r7, #32]
}
 800c14e:	bf00      	nop
 800c150:	e7fe      	b.n	800c150 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c152:	f002 f971 	bl	800e438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c156:	f3ef 8211 	mrs	r2, BASEPRI
 800c15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	61fa      	str	r2, [r7, #28]
 800c16c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c16e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c170:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d302      	bcc.n	800c184 <xQueueGenericSendFromISR+0xbc>
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	2b02      	cmp	r3, #2
 800c182:	d12f      	bne.n	800c1e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c192:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	68b9      	ldr	r1, [r7, #8]
 800c198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c19a:	f000 fa35 	bl	800c608 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c19e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a6:	d112      	bne.n	800c1ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d016      	beq.n	800c1de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	3324      	adds	r3, #36	; 0x24
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f001 f81b 	bl	800d1f0 <xTaskRemoveFromEventList>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00e      	beq.n	800c1de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00b      	beq.n	800c1de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	601a      	str	r2, [r3, #0]
 800c1cc:	e007      	b.n	800c1de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c1ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	b25a      	sxtb	r2, r3
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c1e2:	e001      	b.n	800c1e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c1f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3740      	adds	r7, #64	; 0x40
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
	...

0800c200 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08c      	sub	sp, #48	; 0x30
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c20c:	2300      	movs	r3, #0
 800c20e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c216:	2b00      	cmp	r3, #0
 800c218:	d10a      	bne.n	800c230 <xQueueReceive+0x30>
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	623b      	str	r3, [r7, #32]
}
 800c22c:	bf00      	nop
 800c22e:	e7fe      	b.n	800c22e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d103      	bne.n	800c23e <xQueueReceive+0x3e>
 800c236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d101      	bne.n	800c242 <xQueueReceive+0x42>
 800c23e:	2301      	movs	r3, #1
 800c240:	e000      	b.n	800c244 <xQueueReceive+0x44>
 800c242:	2300      	movs	r3, #0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d10a      	bne.n	800c25e <xQueueReceive+0x5e>
	__asm volatile
 800c248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	61fb      	str	r3, [r7, #28]
}
 800c25a:	bf00      	nop
 800c25c:	e7fe      	b.n	800c25c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c25e:	f001 f9af 	bl	800d5c0 <xTaskGetSchedulerState>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d102      	bne.n	800c26e <xQueueReceive+0x6e>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d101      	bne.n	800c272 <xQueueReceive+0x72>
 800c26e:	2301      	movs	r3, #1
 800c270:	e000      	b.n	800c274 <xQueueReceive+0x74>
 800c272:	2300      	movs	r3, #0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10a      	bne.n	800c28e <xQueueReceive+0x8e>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	61bb      	str	r3, [r7, #24]
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c28e:	f001 fff1 	bl	800e274 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c296:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d01f      	beq.n	800c2de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c29e:	68b9      	ldr	r1, [r7, #8]
 800c2a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2a2:	f000 fa1b 	bl	800c6dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a8:	1e5a      	subs	r2, r3, #1
 800c2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b0:	691b      	ldr	r3, [r3, #16]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00f      	beq.n	800c2d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b8:	3310      	adds	r3, #16
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 ff98 	bl	800d1f0 <xTaskRemoveFromEventList>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d007      	beq.n	800c2d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c2c6:	4b3d      	ldr	r3, [pc, #244]	; (800c3bc <xQueueReceive+0x1bc>)
 800c2c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2cc:	601a      	str	r2, [r3, #0]
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c2d6:	f001 fffd 	bl	800e2d4 <vPortExitCritical>
				return pdPASS;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e069      	b.n	800c3b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d103      	bne.n	800c2ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2e4:	f001 fff6 	bl	800e2d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	e062      	b.n	800c3b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d106      	bne.n	800c300 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2f2:	f107 0310 	add.w	r3, r7, #16
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f001 f804 	bl	800d304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c300:	f001 ffe8 	bl	800e2d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c304:	f000 fd4a 	bl	800cd9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c308:	f001 ffb4 	bl	800e274 <vPortEnterCritical>
 800c30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c312:	b25b      	sxtb	r3, r3
 800c314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c318:	d103      	bne.n	800c322 <xQueueReceive+0x122>
 800c31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31c:	2200      	movs	r2, #0
 800c31e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c328:	b25b      	sxtb	r3, r3
 800c32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c32e:	d103      	bne.n	800c338 <xQueueReceive+0x138>
 800c330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c332:	2200      	movs	r2, #0
 800c334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c338:	f001 ffcc 	bl	800e2d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c33c:	1d3a      	adds	r2, r7, #4
 800c33e:	f107 0310 	add.w	r3, r7, #16
 800c342:	4611      	mov	r1, r2
 800c344:	4618      	mov	r0, r3
 800c346:	f000 fff3 	bl	800d330 <xTaskCheckForTimeOut>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d123      	bne.n	800c398 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c352:	f000 fa3b 	bl	800c7cc <prvIsQueueEmpty>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d017      	beq.n	800c38c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35e:	3324      	adds	r3, #36	; 0x24
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	4611      	mov	r1, r2
 800c364:	4618      	mov	r0, r3
 800c366:	f000 fef3 	bl	800d150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c36a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c36c:	f000 f9dc 	bl	800c728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c370:	f000 fd22 	bl	800cdb8 <xTaskResumeAll>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d189      	bne.n	800c28e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c37a:	4b10      	ldr	r3, [pc, #64]	; (800c3bc <xQueueReceive+0x1bc>)
 800c37c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	e780      	b.n	800c28e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c38c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c38e:	f000 f9cb 	bl	800c728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c392:	f000 fd11 	bl	800cdb8 <xTaskResumeAll>
 800c396:	e77a      	b.n	800c28e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c39a:	f000 f9c5 	bl	800c728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c39e:	f000 fd0b 	bl	800cdb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3a4:	f000 fa12 	bl	800c7cc <prvIsQueueEmpty>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f43f af6f 	beq.w	800c28e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c3b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3730      	adds	r7, #48	; 0x30
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	e000ed04 	.word	0xe000ed04

0800c3c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b08e      	sub	sp, #56	; 0x38
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10a      	bne.n	800c3f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	623b      	str	r3, [r7, #32]
}
 800c3ee:	bf00      	nop
 800c3f0:	e7fe      	b.n	800c3f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00a      	beq.n	800c410 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fe:	f383 8811 	msr	BASEPRI, r3
 800c402:	f3bf 8f6f 	isb	sy
 800c406:	f3bf 8f4f 	dsb	sy
 800c40a:	61fb      	str	r3, [r7, #28]
}
 800c40c:	bf00      	nop
 800c40e:	e7fe      	b.n	800c40e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c410:	f001 f8d6 	bl	800d5c0 <xTaskGetSchedulerState>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d102      	bne.n	800c420 <xQueueSemaphoreTake+0x60>
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <xQueueSemaphoreTake+0x64>
 800c420:	2301      	movs	r3, #1
 800c422:	e000      	b.n	800c426 <xQueueSemaphoreTake+0x66>
 800c424:	2300      	movs	r3, #0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10a      	bne.n	800c440 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42e:	f383 8811 	msr	BASEPRI, r3
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	f3bf 8f4f 	dsb	sy
 800c43a:	61bb      	str	r3, [r7, #24]
}
 800c43c:	bf00      	nop
 800c43e:	e7fe      	b.n	800c43e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c440:	f001 ff18 	bl	800e274 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c448:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d024      	beq.n	800c49a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c452:	1e5a      	subs	r2, r3, #1
 800c454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c456:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d104      	bne.n	800c46a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c460:	f001 fa24 	bl	800d8ac <pvTaskIncrementMutexHeldCount>
 800c464:	4602      	mov	r2, r0
 800c466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c468:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00f      	beq.n	800c492 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c474:	3310      	adds	r3, #16
 800c476:	4618      	mov	r0, r3
 800c478:	f000 feba 	bl	800d1f0 <xTaskRemoveFromEventList>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d007      	beq.n	800c492 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c482:	4b54      	ldr	r3, [pc, #336]	; (800c5d4 <xQueueSemaphoreTake+0x214>)
 800c484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c488:	601a      	str	r2, [r3, #0]
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c492:	f001 ff1f 	bl	800e2d4 <vPortExitCritical>
				return pdPASS;
 800c496:	2301      	movs	r3, #1
 800c498:	e097      	b.n	800c5ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d111      	bne.n	800c4c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00a      	beq.n	800c4bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	617b      	str	r3, [r7, #20]
}
 800c4b8:	bf00      	nop
 800c4ba:	e7fe      	b.n	800c4ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c4bc:	f001 ff0a 	bl	800e2d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	e082      	b.n	800c5ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d106      	bne.n	800c4d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4ca:	f107 030c 	add.w	r3, r7, #12
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f000 ff18 	bl	800d304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4d8:	f001 fefc 	bl	800e2d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4dc:	f000 fc5e 	bl	800cd9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4e0:	f001 fec8 	bl	800e274 <vPortEnterCritical>
 800c4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4ea:	b25b      	sxtb	r3, r3
 800c4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f0:	d103      	bne.n	800c4fa <xQueueSemaphoreTake+0x13a>
 800c4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c500:	b25b      	sxtb	r3, r3
 800c502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c506:	d103      	bne.n	800c510 <xQueueSemaphoreTake+0x150>
 800c508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50a:	2200      	movs	r2, #0
 800c50c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c510:	f001 fee0 	bl	800e2d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c514:	463a      	mov	r2, r7
 800c516:	f107 030c 	add.w	r3, r7, #12
 800c51a:	4611      	mov	r1, r2
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 ff07 	bl	800d330 <xTaskCheckForTimeOut>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d132      	bne.n	800c58e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c52a:	f000 f94f 	bl	800c7cc <prvIsQueueEmpty>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d026      	beq.n	800c582 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d109      	bne.n	800c550 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c53c:	f001 fe9a 	bl	800e274 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	4618      	mov	r0, r3
 800c546:	f001 f859 	bl	800d5fc <xTaskPriorityInherit>
 800c54a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c54c:	f001 fec2 	bl	800e2d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c552:	3324      	adds	r3, #36	; 0x24
 800c554:	683a      	ldr	r2, [r7, #0]
 800c556:	4611      	mov	r1, r2
 800c558:	4618      	mov	r0, r3
 800c55a:	f000 fdf9 	bl	800d150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c55e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c560:	f000 f8e2 	bl	800c728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c564:	f000 fc28 	bl	800cdb8 <xTaskResumeAll>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f47f af68 	bne.w	800c440 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c570:	4b18      	ldr	r3, [pc, #96]	; (800c5d4 <xQueueSemaphoreTake+0x214>)
 800c572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	e75e      	b.n	800c440 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c584:	f000 f8d0 	bl	800c728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c588:	f000 fc16 	bl	800cdb8 <xTaskResumeAll>
 800c58c:	e758      	b.n	800c440 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c58e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c590:	f000 f8ca 	bl	800c728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c594:	f000 fc10 	bl	800cdb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c59a:	f000 f917 	bl	800c7cc <prvIsQueueEmpty>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f43f af4d 	beq.w	800c440 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d00d      	beq.n	800c5c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c5ac:	f001 fe62 	bl	800e274 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c5b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5b2:	f000 f811 	bl	800c5d8 <prvGetDisinheritPriorityAfterTimeout>
 800c5b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f001 f8f2 	bl	800d7a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c5c4:	f001 fe86 	bl	800e2d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c5c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3738      	adds	r7, #56	; 0x38
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	e000ed04 	.word	0xe000ed04

0800c5d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d006      	beq.n	800c5f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c5f2:	60fb      	str	r3, [r7, #12]
 800c5f4:	e001      	b.n	800c5fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
	}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b086      	sub	sp, #24
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c614:	2300      	movs	r3, #0
 800c616:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10d      	bne.n	800c642 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d14d      	bne.n	800c6ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	4618      	mov	r0, r3
 800c634:	f001 f84a 	bl	800d6cc <xTaskPriorityDisinherit>
 800c638:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2200      	movs	r2, #0
 800c63e:	609a      	str	r2, [r3, #8]
 800c640:	e043      	b.n	800c6ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d119      	bne.n	800c67c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6858      	ldr	r0, [r3, #4]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c650:	461a      	mov	r2, r3
 800c652:	68b9      	ldr	r1, [r7, #8]
 800c654:	f00e f883 	bl	801a75e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c660:	441a      	add	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	685a      	ldr	r2, [r3, #4]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d32b      	bcc.n	800c6ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	605a      	str	r2, [r3, #4]
 800c67a:	e026      	b.n	800c6ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	68d8      	ldr	r0, [r3, #12]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c684:	461a      	mov	r2, r3
 800c686:	68b9      	ldr	r1, [r7, #8]
 800c688:	f00e f869 	bl	801a75e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	68da      	ldr	r2, [r3, #12]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c694:	425b      	negs	r3, r3
 800c696:	441a      	add	r2, r3
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	68da      	ldr	r2, [r3, #12]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d207      	bcs.n	800c6b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	689a      	ldr	r2, [r3, #8]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b0:	425b      	negs	r3, r3
 800c6b2:	441a      	add	r2, r3
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b02      	cmp	r3, #2
 800c6bc:	d105      	bne.n	800c6ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d002      	beq.n	800c6ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	1c5a      	adds	r2, r3, #1
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c6d2:	697b      	ldr	r3, [r7, #20]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d018      	beq.n	800c720 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	68da      	ldr	r2, [r3, #12]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f6:	441a      	add	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	68da      	ldr	r2, [r3, #12]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	429a      	cmp	r2, r3
 800c706:	d303      	bcc.n	800c710 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	68d9      	ldr	r1, [r3, #12]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c718:	461a      	mov	r2, r3
 800c71a:	6838      	ldr	r0, [r7, #0]
 800c71c:	f00e f81f 	bl	801a75e <memcpy>
	}
}
 800c720:	bf00      	nop
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c730:	f001 fda0 	bl	800e274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c73a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c73c:	e011      	b.n	800c762 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c742:	2b00      	cmp	r3, #0
 800c744:	d012      	beq.n	800c76c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	3324      	adds	r3, #36	; 0x24
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 fd50 	bl	800d1f0 <xTaskRemoveFromEventList>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d001      	beq.n	800c75a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c756:	f000 fe4d 	bl	800d3f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c75a:	7bfb      	ldrb	r3, [r7, #15]
 800c75c:	3b01      	subs	r3, #1
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c766:	2b00      	cmp	r3, #0
 800c768:	dce9      	bgt.n	800c73e <prvUnlockQueue+0x16>
 800c76a:	e000      	b.n	800c76e <prvUnlockQueue+0x46>
					break;
 800c76c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	22ff      	movs	r2, #255	; 0xff
 800c772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c776:	f001 fdad 	bl	800e2d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c77a:	f001 fd7b 	bl	800e274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c786:	e011      	b.n	800c7ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d012      	beq.n	800c7b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3310      	adds	r3, #16
 800c794:	4618      	mov	r0, r3
 800c796:	f000 fd2b 	bl	800d1f0 <xTaskRemoveFromEventList>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d001      	beq.n	800c7a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c7a0:	f000 fe28 	bl	800d3f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c7a4:	7bbb      	ldrb	r3, [r7, #14]
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	dce9      	bgt.n	800c788 <prvUnlockQueue+0x60>
 800c7b4:	e000      	b.n	800c7b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c7b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	22ff      	movs	r2, #255	; 0xff
 800c7bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c7c0:	f001 fd88 	bl	800e2d4 <vPortExitCritical>
}
 800c7c4:	bf00      	nop
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7d4:	f001 fd4e 	bl	800e274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d102      	bne.n	800c7e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	e001      	b.n	800c7ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7ea:	f001 fd73 	bl	800e2d4 <vPortExitCritical>

	return xReturn;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3710      	adds	r7, #16
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c800:	f001 fd38 	bl	800e274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d102      	bne.n	800c816 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c810:	2301      	movs	r3, #1
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	e001      	b.n	800c81a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c816:	2300      	movs	r3, #0
 800c818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c81a:	f001 fd5b 	bl	800e2d4 <vPortExitCritical>

	return xReturn;
 800c81e:	68fb      	ldr	r3, [r7, #12]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c832:	2300      	movs	r3, #0
 800c834:	60fb      	str	r3, [r7, #12]
 800c836:	e014      	b.n	800c862 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c838:	4a0f      	ldr	r2, [pc, #60]	; (800c878 <vQueueAddToRegistry+0x50>)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d10b      	bne.n	800c85c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c844:	490c      	ldr	r1, [pc, #48]	; (800c878 <vQueueAddToRegistry+0x50>)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c84e:	4a0a      	ldr	r2, [pc, #40]	; (800c878 <vQueueAddToRegistry+0x50>)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	00db      	lsls	r3, r3, #3
 800c854:	4413      	add	r3, r2
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c85a:	e006      	b.n	800c86a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	3301      	adds	r3, #1
 800c860:	60fb      	str	r3, [r7, #12]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2b07      	cmp	r3, #7
 800c866:	d9e7      	bls.n	800c838 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c868:	bf00      	nop
 800c86a:	bf00      	nop
 800c86c:	3714      	adds	r7, #20
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	200057f4 	.word	0x200057f4

0800c87c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c88c:	f001 fcf2 	bl	800e274 <vPortEnterCritical>
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c896:	b25b      	sxtb	r3, r3
 800c898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c89c:	d103      	bne.n	800c8a6 <vQueueWaitForMessageRestricted+0x2a>
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8ac:	b25b      	sxtb	r3, r3
 800c8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8b2:	d103      	bne.n	800c8bc <vQueueWaitForMessageRestricted+0x40>
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8bc:	f001 fd0a 	bl	800e2d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d106      	bne.n	800c8d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	3324      	adds	r3, #36	; 0x24
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	68b9      	ldr	r1, [r7, #8]
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 fc61 	bl	800d198 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c8d6:	6978      	ldr	r0, [r7, #20]
 800c8d8:	f7ff ff26 	bl	800c728 <prvUnlockQueue>
	}
 800c8dc:	bf00      	nop
 800c8de:	3718      	adds	r7, #24
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b08e      	sub	sp, #56	; 0x38
 800c8e8:	af04      	add	r7, sp, #16
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10a      	bne.n	800c90e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	623b      	str	r3, [r7, #32]
}
 800c90a:	bf00      	nop
 800c90c:	e7fe      	b.n	800c90c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10a      	bne.n	800c92a <xTaskCreateStatic+0x46>
	__asm volatile
 800c914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c918:	f383 8811 	msr	BASEPRI, r3
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	61fb      	str	r3, [r7, #28]
}
 800c926:	bf00      	nop
 800c928:	e7fe      	b.n	800c928 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c92a:	23a8      	movs	r3, #168	; 0xa8
 800c92c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2ba8      	cmp	r3, #168	; 0xa8
 800c932:	d00a      	beq.n	800c94a <xTaskCreateStatic+0x66>
	__asm volatile
 800c934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	61bb      	str	r3, [r7, #24]
}
 800c946:	bf00      	nop
 800c948:	e7fe      	b.n	800c948 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c94a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d01e      	beq.n	800c990 <xTaskCreateStatic+0xac>
 800c952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c954:	2b00      	cmp	r3, #0
 800c956:	d01b      	beq.n	800c990 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c960:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c964:	2202      	movs	r2, #2
 800c966:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c96a:	2300      	movs	r3, #0
 800c96c:	9303      	str	r3, [sp, #12]
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	9302      	str	r3, [sp, #8]
 800c972:	f107 0314 	add.w	r3, r7, #20
 800c976:	9301      	str	r3, [sp, #4]
 800c978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	68b9      	ldr	r1, [r7, #8]
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f000 f850 	bl	800ca28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c98a:	f000 f8f3 	bl	800cb74 <prvAddNewTaskToReadyList>
 800c98e:	e001      	b.n	800c994 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c990:	2300      	movs	r3, #0
 800c992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c994:	697b      	ldr	r3, [r7, #20]
	}
 800c996:	4618      	mov	r0, r3
 800c998:	3728      	adds	r7, #40	; 0x28
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b08c      	sub	sp, #48	; 0x30
 800c9a2:	af04      	add	r7, sp, #16
 800c9a4:	60f8      	str	r0, [r7, #12]
 800c9a6:	60b9      	str	r1, [r7, #8]
 800c9a8:	603b      	str	r3, [r7, #0]
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c9ae:	88fb      	ldrh	r3, [r7, #6]
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f001 fd80 	bl	800e4b8 <pvPortMalloc>
 800c9b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00e      	beq.n	800c9de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c9c0:	20a8      	movs	r0, #168	; 0xa8
 800c9c2:	f001 fd79 	bl	800e4b8 <pvPortMalloc>
 800c9c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d003      	beq.n	800c9d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	631a      	str	r2, [r3, #48]	; 0x30
 800c9d4:	e005      	b.n	800c9e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c9d6:	6978      	ldr	r0, [r7, #20]
 800c9d8:	f001 fe3a 	bl	800e650 <vPortFree>
 800c9dc:	e001      	b.n	800c9e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d017      	beq.n	800ca18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c9e8:	69fb      	ldr	r3, [r7, #28]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c9f0:	88fa      	ldrh	r2, [r7, #6]
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	9303      	str	r3, [sp, #12]
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	9302      	str	r3, [sp, #8]
 800c9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fc:	9301      	str	r3, [sp, #4]
 800c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	68b9      	ldr	r1, [r7, #8]
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f000 f80e 	bl	800ca28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca0c:	69f8      	ldr	r0, [r7, #28]
 800ca0e:	f000 f8b1 	bl	800cb74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca12:	2301      	movs	r3, #1
 800ca14:	61bb      	str	r3, [r7, #24]
 800ca16:	e002      	b.n	800ca1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca18:	f04f 33ff 	mov.w	r3, #4294967295
 800ca1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca1e:	69bb      	ldr	r3, [r7, #24]
	}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3720      	adds	r7, #32
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b088      	sub	sp, #32
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
 800ca34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	461a      	mov	r2, r3
 800ca40:	21a5      	movs	r1, #165	; 0xa5
 800ca42:	f00d fd6d 	bl	801a520 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ca46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ca50:	3b01      	subs	r3, #1
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4413      	add	r3, r2
 800ca56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	f023 0307 	bic.w	r3, r3, #7
 800ca5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	f003 0307 	and.w	r3, r3, #7
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00a      	beq.n	800ca80 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ca6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	617b      	str	r3, [r7, #20]
}
 800ca7c:	bf00      	nop
 800ca7e:	e7fe      	b.n	800ca7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d01f      	beq.n	800cac6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca86:	2300      	movs	r3, #0
 800ca88:	61fb      	str	r3, [r7, #28]
 800ca8a:	e012      	b.n	800cab2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	4413      	add	r3, r2
 800ca92:	7819      	ldrb	r1, [r3, #0]
 800ca94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	4413      	add	r3, r2
 800ca9a:	3334      	adds	r3, #52	; 0x34
 800ca9c:	460a      	mov	r2, r1
 800ca9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	4413      	add	r3, r2
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d006      	beq.n	800caba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	3301      	adds	r3, #1
 800cab0:	61fb      	str	r3, [r7, #28]
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	2b0f      	cmp	r3, #15
 800cab6:	d9e9      	bls.n	800ca8c <prvInitialiseNewTask+0x64>
 800cab8:	e000      	b.n	800cabc <prvInitialiseNewTask+0x94>
			{
				break;
 800caba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabe:	2200      	movs	r2, #0
 800cac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cac4:	e003      	b.n	800cace <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac8:	2200      	movs	r2, #0
 800caca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad0:	2b37      	cmp	r3, #55	; 0x37
 800cad2:	d901      	bls.n	800cad8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cad4:	2337      	movs	r3, #55	; 0x37
 800cad6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cadc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cae2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae6:	2200      	movs	r2, #0
 800cae8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800caea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caec:	3304      	adds	r3, #4
 800caee:	4618      	mov	r0, r3
 800caf0:	f7ff f81a 	bl	800bb28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800caf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf6:	3318      	adds	r3, #24
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7ff f815 	bl	800bb28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb16:	2200      	movs	r2, #0
 800cb18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb26:	3354      	adds	r3, #84	; 0x54
 800cb28:	224c      	movs	r2, #76	; 0x4c
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f00d fcf7 	bl	801a520 <memset>
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	4a0c      	ldr	r2, [pc, #48]	; (800cb68 <prvInitialiseNewTask+0x140>)
 800cb36:	659a      	str	r2, [r3, #88]	; 0x58
 800cb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3a:	4a0c      	ldr	r2, [pc, #48]	; (800cb6c <prvInitialiseNewTask+0x144>)
 800cb3c:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	4a0b      	ldr	r2, [pc, #44]	; (800cb70 <prvInitialiseNewTask+0x148>)
 800cb42:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	68f9      	ldr	r1, [r7, #12]
 800cb48:	69b8      	ldr	r0, [r7, #24]
 800cb4a:	f001 fa65 	bl	800e018 <pxPortInitialiseStack>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d002      	beq.n	800cb60 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb60:	bf00      	nop
 800cb62:	3720      	adds	r7, #32
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	2000a080 	.word	0x2000a080
 800cb6c:	2000a0e8 	.word	0x2000a0e8
 800cb70:	2000a150 	.word	0x2000a150

0800cb74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cb7c:	f001 fb7a 	bl	800e274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb80:	4b2d      	ldr	r3, [pc, #180]	; (800cc38 <prvAddNewTaskToReadyList+0xc4>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3301      	adds	r3, #1
 800cb86:	4a2c      	ldr	r2, [pc, #176]	; (800cc38 <prvAddNewTaskToReadyList+0xc4>)
 800cb88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb8a:	4b2c      	ldr	r3, [pc, #176]	; (800cc3c <prvAddNewTaskToReadyList+0xc8>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d109      	bne.n	800cba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb92:	4a2a      	ldr	r2, [pc, #168]	; (800cc3c <prvAddNewTaskToReadyList+0xc8>)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb98:	4b27      	ldr	r3, [pc, #156]	; (800cc38 <prvAddNewTaskToReadyList+0xc4>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d110      	bne.n	800cbc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cba0:	f000 fc4c 	bl	800d43c <prvInitialiseTaskLists>
 800cba4:	e00d      	b.n	800cbc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cba6:	4b26      	ldr	r3, [pc, #152]	; (800cc40 <prvAddNewTaskToReadyList+0xcc>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d109      	bne.n	800cbc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cbae:	4b23      	ldr	r3, [pc, #140]	; (800cc3c <prvAddNewTaskToReadyList+0xc8>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d802      	bhi.n	800cbc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cbbc:	4a1f      	ldr	r2, [pc, #124]	; (800cc3c <prvAddNewTaskToReadyList+0xc8>)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cbc2:	4b20      	ldr	r3, [pc, #128]	; (800cc44 <prvAddNewTaskToReadyList+0xd0>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	4a1e      	ldr	r2, [pc, #120]	; (800cc44 <prvAddNewTaskToReadyList+0xd0>)
 800cbca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cbcc:	4b1d      	ldr	r3, [pc, #116]	; (800cc44 <prvAddNewTaskToReadyList+0xd0>)
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd8:	4b1b      	ldr	r3, [pc, #108]	; (800cc48 <prvAddNewTaskToReadyList+0xd4>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d903      	bls.n	800cbe8 <prvAddNewTaskToReadyList+0x74>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe4:	4a18      	ldr	r2, [pc, #96]	; (800cc48 <prvAddNewTaskToReadyList+0xd4>)
 800cbe6:	6013      	str	r3, [r2, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbec:	4613      	mov	r3, r2
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	4413      	add	r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4a15      	ldr	r2, [pc, #84]	; (800cc4c <prvAddNewTaskToReadyList+0xd8>)
 800cbf6:	441a      	add	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	f7fe ff9f 	bl	800bb42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc04:	f001 fb66 	bl	800e2d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc08:	4b0d      	ldr	r3, [pc, #52]	; (800cc40 <prvAddNewTaskToReadyList+0xcc>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00e      	beq.n	800cc2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc10:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <prvAddNewTaskToReadyList+0xc8>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d207      	bcs.n	800cc2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc1e:	4b0c      	ldr	r3, [pc, #48]	; (800cc50 <prvAddNewTaskToReadyList+0xdc>)
 800cc20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc2e:	bf00      	nop
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20005d08 	.word	0x20005d08
 800cc3c:	20005834 	.word	0x20005834
 800cc40:	20005d14 	.word	0x20005d14
 800cc44:	20005d24 	.word	0x20005d24
 800cc48:	20005d10 	.word	0x20005d10
 800cc4c:	20005838 	.word	0x20005838
 800cc50:	e000ed04 	.word	0xe000ed04

0800cc54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d017      	beq.n	800cc96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cc66:	4b13      	ldr	r3, [pc, #76]	; (800ccb4 <vTaskDelay+0x60>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00a      	beq.n	800cc84 <vTaskDelay+0x30>
	__asm volatile
 800cc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc72:	f383 8811 	msr	BASEPRI, r3
 800cc76:	f3bf 8f6f 	isb	sy
 800cc7a:	f3bf 8f4f 	dsb	sy
 800cc7e:	60bb      	str	r3, [r7, #8]
}
 800cc80:	bf00      	nop
 800cc82:	e7fe      	b.n	800cc82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc84:	f000 f88a 	bl	800cd9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc88:	2100      	movs	r1, #0
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fe22 	bl	800d8d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc90:	f000 f892 	bl	800cdb8 <xTaskResumeAll>
 800cc94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d107      	bne.n	800ccac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cc9c:	4b06      	ldr	r3, [pc, #24]	; (800ccb8 <vTaskDelay+0x64>)
 800cc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cca2:	601a      	str	r2, [r3, #0]
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ccac:	bf00      	nop
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	20005d30 	.word	0x20005d30
 800ccb8:	e000ed04 	.word	0xe000ed04

0800ccbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08a      	sub	sp, #40	; 0x28
 800ccc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ccca:	463a      	mov	r2, r7
 800cccc:	1d39      	adds	r1, r7, #4
 800ccce:	f107 0308 	add.w	r3, r7, #8
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fe fed4 	bl	800ba80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	9202      	str	r2, [sp, #8]
 800cce0:	9301      	str	r3, [sp, #4]
 800cce2:	2300      	movs	r3, #0
 800cce4:	9300      	str	r3, [sp, #0]
 800cce6:	2300      	movs	r3, #0
 800cce8:	460a      	mov	r2, r1
 800ccea:	4924      	ldr	r1, [pc, #144]	; (800cd7c <vTaskStartScheduler+0xc0>)
 800ccec:	4824      	ldr	r0, [pc, #144]	; (800cd80 <vTaskStartScheduler+0xc4>)
 800ccee:	f7ff fdf9 	bl	800c8e4 <xTaskCreateStatic>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	4a23      	ldr	r2, [pc, #140]	; (800cd84 <vTaskStartScheduler+0xc8>)
 800ccf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ccf8:	4b22      	ldr	r3, [pc, #136]	; (800cd84 <vTaskStartScheduler+0xc8>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd00:	2301      	movs	r3, #1
 800cd02:	617b      	str	r3, [r7, #20]
 800cd04:	e001      	b.n	800cd0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd06:	2300      	movs	r3, #0
 800cd08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d102      	bne.n	800cd16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cd10:	f000 fe34 	bl	800d97c <xTimerCreateTimerTask>
 800cd14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d11b      	bne.n	800cd54 <vTaskStartScheduler+0x98>
	__asm volatile
 800cd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd20:	f383 8811 	msr	BASEPRI, r3
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	f3bf 8f4f 	dsb	sy
 800cd2c:	613b      	str	r3, [r7, #16]
}
 800cd2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd30:	4b15      	ldr	r3, [pc, #84]	; (800cd88 <vTaskStartScheduler+0xcc>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	3354      	adds	r3, #84	; 0x54
 800cd36:	4a15      	ldr	r2, [pc, #84]	; (800cd8c <vTaskStartScheduler+0xd0>)
 800cd38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cd3a:	4b15      	ldr	r3, [pc, #84]	; (800cd90 <vTaskStartScheduler+0xd4>)
 800cd3c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cd42:	4b14      	ldr	r3, [pc, #80]	; (800cd94 <vTaskStartScheduler+0xd8>)
 800cd44:	2201      	movs	r2, #1
 800cd46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cd48:	4b13      	ldr	r3, [pc, #76]	; (800cd98 <vTaskStartScheduler+0xdc>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd4e:	f001 f9ef 	bl	800e130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd52:	e00e      	b.n	800cd72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd5a:	d10a      	bne.n	800cd72 <vTaskStartScheduler+0xb6>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	60fb      	str	r3, [r7, #12]
}
 800cd6e:	bf00      	nop
 800cd70:	e7fe      	b.n	800cd70 <vTaskStartScheduler+0xb4>
}
 800cd72:	bf00      	nop
 800cd74:	3718      	adds	r7, #24
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	0801b7a8 	.word	0x0801b7a8
 800cd80:	0800d40d 	.word	0x0800d40d
 800cd84:	20005d2c 	.word	0x20005d2c
 800cd88:	20005834 	.word	0x20005834
 800cd8c:	200000e0 	.word	0x200000e0
 800cd90:	20005d28 	.word	0x20005d28
 800cd94:	20005d14 	.word	0x20005d14
 800cd98:	20005d0c 	.word	0x20005d0c

0800cd9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cda0:	4b04      	ldr	r3, [pc, #16]	; (800cdb4 <vTaskSuspendAll+0x18>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3301      	adds	r3, #1
 800cda6:	4a03      	ldr	r2, [pc, #12]	; (800cdb4 <vTaskSuspendAll+0x18>)
 800cda8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cdaa:	bf00      	nop
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr
 800cdb4:	20005d30 	.word	0x20005d30

0800cdb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cdc6:	4b42      	ldr	r3, [pc, #264]	; (800ced0 <xTaskResumeAll+0x118>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10a      	bne.n	800cde4 <xTaskResumeAll+0x2c>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	603b      	str	r3, [r7, #0]
}
 800cde0:	bf00      	nop
 800cde2:	e7fe      	b.n	800cde2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cde4:	f001 fa46 	bl	800e274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cde8:	4b39      	ldr	r3, [pc, #228]	; (800ced0 <xTaskResumeAll+0x118>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	3b01      	subs	r3, #1
 800cdee:	4a38      	ldr	r2, [pc, #224]	; (800ced0 <xTaskResumeAll+0x118>)
 800cdf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdf2:	4b37      	ldr	r3, [pc, #220]	; (800ced0 <xTaskResumeAll+0x118>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d162      	bne.n	800cec0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cdfa:	4b36      	ldr	r3, [pc, #216]	; (800ced4 <xTaskResumeAll+0x11c>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d05e      	beq.n	800cec0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce02:	e02f      	b.n	800ce64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce04:	4b34      	ldr	r3, [pc, #208]	; (800ced8 <xTaskResumeAll+0x120>)
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	3318      	adds	r3, #24
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fe fef3 	bl	800bbfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	3304      	adds	r3, #4
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fe feee 	bl	800bbfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce24:	4b2d      	ldr	r3, [pc, #180]	; (800cedc <xTaskResumeAll+0x124>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d903      	bls.n	800ce34 <xTaskResumeAll+0x7c>
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce30:	4a2a      	ldr	r2, [pc, #168]	; (800cedc <xTaskResumeAll+0x124>)
 800ce32:	6013      	str	r3, [r2, #0]
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce38:	4613      	mov	r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	4413      	add	r3, r2
 800ce3e:	009b      	lsls	r3, r3, #2
 800ce40:	4a27      	ldr	r2, [pc, #156]	; (800cee0 <xTaskResumeAll+0x128>)
 800ce42:	441a      	add	r2, r3
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	3304      	adds	r3, #4
 800ce48:	4619      	mov	r1, r3
 800ce4a:	4610      	mov	r0, r2
 800ce4c:	f7fe fe79 	bl	800bb42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce54:	4b23      	ldr	r3, [pc, #140]	; (800cee4 <xTaskResumeAll+0x12c>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d302      	bcc.n	800ce64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ce5e:	4b22      	ldr	r3, [pc, #136]	; (800cee8 <xTaskResumeAll+0x130>)
 800ce60:	2201      	movs	r2, #1
 800ce62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce64:	4b1c      	ldr	r3, [pc, #112]	; (800ced8 <xTaskResumeAll+0x120>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1cb      	bne.n	800ce04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d001      	beq.n	800ce76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce72:	f000 fb85 	bl	800d580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce76:	4b1d      	ldr	r3, [pc, #116]	; (800ceec <xTaskResumeAll+0x134>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d010      	beq.n	800cea4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce82:	f000 f847 	bl	800cf14 <xTaskIncrementTick>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d002      	beq.n	800ce92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ce8c:	4b16      	ldr	r3, [pc, #88]	; (800cee8 <xTaskResumeAll+0x130>)
 800ce8e:	2201      	movs	r2, #1
 800ce90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3b01      	subs	r3, #1
 800ce96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1f1      	bne.n	800ce82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ce9e:	4b13      	ldr	r3, [pc, #76]	; (800ceec <xTaskResumeAll+0x134>)
 800cea0:	2200      	movs	r2, #0
 800cea2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cea4:	4b10      	ldr	r3, [pc, #64]	; (800cee8 <xTaskResumeAll+0x130>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d009      	beq.n	800cec0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ceac:	2301      	movs	r3, #1
 800ceae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ceb0:	4b0f      	ldr	r3, [pc, #60]	; (800cef0 <xTaskResumeAll+0x138>)
 800ceb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb6:	601a      	str	r2, [r3, #0]
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cec0:	f001 fa08 	bl	800e2d4 <vPortExitCritical>

	return xAlreadyYielded;
 800cec4:	68bb      	ldr	r3, [r7, #8]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	20005d30 	.word	0x20005d30
 800ced4:	20005d08 	.word	0x20005d08
 800ced8:	20005cc8 	.word	0x20005cc8
 800cedc:	20005d10 	.word	0x20005d10
 800cee0:	20005838 	.word	0x20005838
 800cee4:	20005834 	.word	0x20005834
 800cee8:	20005d1c 	.word	0x20005d1c
 800ceec:	20005d18 	.word	0x20005d18
 800cef0:	e000ed04 	.word	0xe000ed04

0800cef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cefa:	4b05      	ldr	r3, [pc, #20]	; (800cf10 <xTaskGetTickCount+0x1c>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf00:	687b      	ldr	r3, [r7, #4]
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	370c      	adds	r7, #12
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	20005d0c 	.word	0x20005d0c

0800cf14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b086      	sub	sp, #24
 800cf18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf1e:	4b4f      	ldr	r3, [pc, #316]	; (800d05c <xTaskIncrementTick+0x148>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	f040 808f 	bne.w	800d046 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf28:	4b4d      	ldr	r3, [pc, #308]	; (800d060 <xTaskIncrementTick+0x14c>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf30:	4a4b      	ldr	r2, [pc, #300]	; (800d060 <xTaskIncrementTick+0x14c>)
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d120      	bne.n	800cf7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cf3c:	4b49      	ldr	r3, [pc, #292]	; (800d064 <xTaskIncrementTick+0x150>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00a      	beq.n	800cf5c <xTaskIncrementTick+0x48>
	__asm volatile
 800cf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4a:	f383 8811 	msr	BASEPRI, r3
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	603b      	str	r3, [r7, #0]
}
 800cf58:	bf00      	nop
 800cf5a:	e7fe      	b.n	800cf5a <xTaskIncrementTick+0x46>
 800cf5c:	4b41      	ldr	r3, [pc, #260]	; (800d064 <xTaskIncrementTick+0x150>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	60fb      	str	r3, [r7, #12]
 800cf62:	4b41      	ldr	r3, [pc, #260]	; (800d068 <xTaskIncrementTick+0x154>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a3f      	ldr	r2, [pc, #252]	; (800d064 <xTaskIncrementTick+0x150>)
 800cf68:	6013      	str	r3, [r2, #0]
 800cf6a:	4a3f      	ldr	r2, [pc, #252]	; (800d068 <xTaskIncrementTick+0x154>)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6013      	str	r3, [r2, #0]
 800cf70:	4b3e      	ldr	r3, [pc, #248]	; (800d06c <xTaskIncrementTick+0x158>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	3301      	adds	r3, #1
 800cf76:	4a3d      	ldr	r2, [pc, #244]	; (800d06c <xTaskIncrementTick+0x158>)
 800cf78:	6013      	str	r3, [r2, #0]
 800cf7a:	f000 fb01 	bl	800d580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf7e:	4b3c      	ldr	r3, [pc, #240]	; (800d070 <xTaskIncrementTick+0x15c>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	693a      	ldr	r2, [r7, #16]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d349      	bcc.n	800d01c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf88:	4b36      	ldr	r3, [pc, #216]	; (800d064 <xTaskIncrementTick+0x150>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d104      	bne.n	800cf9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf92:	4b37      	ldr	r3, [pc, #220]	; (800d070 <xTaskIncrementTick+0x15c>)
 800cf94:	f04f 32ff 	mov.w	r2, #4294967295
 800cf98:	601a      	str	r2, [r3, #0]
					break;
 800cf9a:	e03f      	b.n	800d01c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf9c:	4b31      	ldr	r3, [pc, #196]	; (800d064 <xTaskIncrementTick+0x150>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cfac:	693a      	ldr	r2, [r7, #16]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d203      	bcs.n	800cfbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cfb4:	4a2e      	ldr	r2, [pc, #184]	; (800d070 <xTaskIncrementTick+0x15c>)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cfba:	e02f      	b.n	800d01c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe fe1b 	bl	800bbfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d004      	beq.n	800cfd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	3318      	adds	r3, #24
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe fe12 	bl	800bbfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfdc:	4b25      	ldr	r3, [pc, #148]	; (800d074 <xTaskIncrementTick+0x160>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d903      	bls.n	800cfec <xTaskIncrementTick+0xd8>
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe8:	4a22      	ldr	r2, [pc, #136]	; (800d074 <xTaskIncrementTick+0x160>)
 800cfea:	6013      	str	r3, [r2, #0]
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff0:	4613      	mov	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4a1f      	ldr	r2, [pc, #124]	; (800d078 <xTaskIncrementTick+0x164>)
 800cffa:	441a      	add	r2, r3
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	3304      	adds	r3, #4
 800d000:	4619      	mov	r1, r3
 800d002:	4610      	mov	r0, r2
 800d004:	f7fe fd9d 	bl	800bb42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d00c:	4b1b      	ldr	r3, [pc, #108]	; (800d07c <xTaskIncrementTick+0x168>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d012:	429a      	cmp	r2, r3
 800d014:	d3b8      	bcc.n	800cf88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d016:	2301      	movs	r3, #1
 800d018:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d01a:	e7b5      	b.n	800cf88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d01c:	4b17      	ldr	r3, [pc, #92]	; (800d07c <xTaskIncrementTick+0x168>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d022:	4915      	ldr	r1, [pc, #84]	; (800d078 <xTaskIncrementTick+0x164>)
 800d024:	4613      	mov	r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4413      	add	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	440b      	add	r3, r1
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b01      	cmp	r3, #1
 800d032:	d901      	bls.n	800d038 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d034:	2301      	movs	r3, #1
 800d036:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d038:	4b11      	ldr	r3, [pc, #68]	; (800d080 <xTaskIncrementTick+0x16c>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d007      	beq.n	800d050 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d040:	2301      	movs	r3, #1
 800d042:	617b      	str	r3, [r7, #20]
 800d044:	e004      	b.n	800d050 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d046:	4b0f      	ldr	r3, [pc, #60]	; (800d084 <xTaskIncrementTick+0x170>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3301      	adds	r3, #1
 800d04c:	4a0d      	ldr	r2, [pc, #52]	; (800d084 <xTaskIncrementTick+0x170>)
 800d04e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d050:	697b      	ldr	r3, [r7, #20]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3718      	adds	r7, #24
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	20005d30 	.word	0x20005d30
 800d060:	20005d0c 	.word	0x20005d0c
 800d064:	20005cc0 	.word	0x20005cc0
 800d068:	20005cc4 	.word	0x20005cc4
 800d06c:	20005d20 	.word	0x20005d20
 800d070:	20005d28 	.word	0x20005d28
 800d074:	20005d10 	.word	0x20005d10
 800d078:	20005838 	.word	0x20005838
 800d07c:	20005834 	.word	0x20005834
 800d080:	20005d1c 	.word	0x20005d1c
 800d084:	20005d18 	.word	0x20005d18

0800d088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d08e:	4b2a      	ldr	r3, [pc, #168]	; (800d138 <vTaskSwitchContext+0xb0>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d003      	beq.n	800d09e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d096:	4b29      	ldr	r3, [pc, #164]	; (800d13c <vTaskSwitchContext+0xb4>)
 800d098:	2201      	movs	r2, #1
 800d09a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d09c:	e046      	b.n	800d12c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d09e:	4b27      	ldr	r3, [pc, #156]	; (800d13c <vTaskSwitchContext+0xb4>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0a4:	4b26      	ldr	r3, [pc, #152]	; (800d140 <vTaskSwitchContext+0xb8>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	60fb      	str	r3, [r7, #12]
 800d0aa:	e010      	b.n	800d0ce <vTaskSwitchContext+0x46>
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10a      	bne.n	800d0c8 <vTaskSwitchContext+0x40>
	__asm volatile
 800d0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b6:	f383 8811 	msr	BASEPRI, r3
 800d0ba:	f3bf 8f6f 	isb	sy
 800d0be:	f3bf 8f4f 	dsb	sy
 800d0c2:	607b      	str	r3, [r7, #4]
}
 800d0c4:	bf00      	nop
 800d0c6:	e7fe      	b.n	800d0c6 <vTaskSwitchContext+0x3e>
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	60fb      	str	r3, [r7, #12]
 800d0ce:	491d      	ldr	r1, [pc, #116]	; (800d144 <vTaskSwitchContext+0xbc>)
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	440b      	add	r3, r1
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d0e4      	beq.n	800d0ac <vTaskSwitchContext+0x24>
 800d0e2:	68fa      	ldr	r2, [r7, #12]
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4413      	add	r3, r2
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	4a15      	ldr	r2, [pc, #84]	; (800d144 <vTaskSwitchContext+0xbc>)
 800d0ee:	4413      	add	r3, r2
 800d0f0:	60bb      	str	r3, [r7, #8]
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	605a      	str	r2, [r3, #4]
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	685a      	ldr	r2, [r3, #4]
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	3308      	adds	r3, #8
 800d104:	429a      	cmp	r2, r3
 800d106:	d104      	bne.n	800d112 <vTaskSwitchContext+0x8a>
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	685a      	ldr	r2, [r3, #4]
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	605a      	str	r2, [r3, #4]
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	4a0b      	ldr	r2, [pc, #44]	; (800d148 <vTaskSwitchContext+0xc0>)
 800d11a:	6013      	str	r3, [r2, #0]
 800d11c:	4a08      	ldr	r2, [pc, #32]	; (800d140 <vTaskSwitchContext+0xb8>)
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d122:	4b09      	ldr	r3, [pc, #36]	; (800d148 <vTaskSwitchContext+0xc0>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	3354      	adds	r3, #84	; 0x54
 800d128:	4a08      	ldr	r2, [pc, #32]	; (800d14c <vTaskSwitchContext+0xc4>)
 800d12a:	6013      	str	r3, [r2, #0]
}
 800d12c:	bf00      	nop
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr
 800d138:	20005d30 	.word	0x20005d30
 800d13c:	20005d1c 	.word	0x20005d1c
 800d140:	20005d10 	.word	0x20005d10
 800d144:	20005838 	.word	0x20005838
 800d148:	20005834 	.word	0x20005834
 800d14c:	200000e0 	.word	0x200000e0

0800d150 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10a      	bne.n	800d176 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d164:	f383 8811 	msr	BASEPRI, r3
 800d168:	f3bf 8f6f 	isb	sy
 800d16c:	f3bf 8f4f 	dsb	sy
 800d170:	60fb      	str	r3, [r7, #12]
}
 800d172:	bf00      	nop
 800d174:	e7fe      	b.n	800d174 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d176:	4b07      	ldr	r3, [pc, #28]	; (800d194 <vTaskPlaceOnEventList+0x44>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	3318      	adds	r3, #24
 800d17c:	4619      	mov	r1, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7fe fd03 	bl	800bb8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d184:	2101      	movs	r1, #1
 800d186:	6838      	ldr	r0, [r7, #0]
 800d188:	f000 fba4 	bl	800d8d4 <prvAddCurrentTaskToDelayedList>
}
 800d18c:	bf00      	nop
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	20005834 	.word	0x20005834

0800d198 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10a      	bne.n	800d1c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	617b      	str	r3, [r7, #20]
}
 800d1bc:	bf00      	nop
 800d1be:	e7fe      	b.n	800d1be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1c0:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <vTaskPlaceOnEventListRestricted+0x54>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3318      	adds	r3, #24
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	68f8      	ldr	r0, [r7, #12]
 800d1ca:	f7fe fcba 	bl	800bb42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d1da:	6879      	ldr	r1, [r7, #4]
 800d1dc:	68b8      	ldr	r0, [r7, #8]
 800d1de:	f000 fb79 	bl	800d8d4 <prvAddCurrentTaskToDelayedList>
	}
 800d1e2:	bf00      	nop
 800d1e4:	3718      	adds	r7, #24
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	20005834 	.word	0x20005834

0800d1f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d10a      	bne.n	800d21c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20a:	f383 8811 	msr	BASEPRI, r3
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	60fb      	str	r3, [r7, #12]
}
 800d218:	bf00      	nop
 800d21a:	e7fe      	b.n	800d21a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	3318      	adds	r3, #24
 800d220:	4618      	mov	r0, r3
 800d222:	f7fe fceb 	bl	800bbfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d226:	4b1e      	ldr	r3, [pc, #120]	; (800d2a0 <xTaskRemoveFromEventList+0xb0>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d11d      	bne.n	800d26a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	3304      	adds	r3, #4
 800d232:	4618      	mov	r0, r3
 800d234:	f7fe fce2 	bl	800bbfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d23c:	4b19      	ldr	r3, [pc, #100]	; (800d2a4 <xTaskRemoveFromEventList+0xb4>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	429a      	cmp	r2, r3
 800d242:	d903      	bls.n	800d24c <xTaskRemoveFromEventList+0x5c>
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d248:	4a16      	ldr	r2, [pc, #88]	; (800d2a4 <xTaskRemoveFromEventList+0xb4>)
 800d24a:	6013      	str	r3, [r2, #0]
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d250:	4613      	mov	r3, r2
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	4413      	add	r3, r2
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	4a13      	ldr	r2, [pc, #76]	; (800d2a8 <xTaskRemoveFromEventList+0xb8>)
 800d25a:	441a      	add	r2, r3
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	3304      	adds	r3, #4
 800d260:	4619      	mov	r1, r3
 800d262:	4610      	mov	r0, r2
 800d264:	f7fe fc6d 	bl	800bb42 <vListInsertEnd>
 800d268:	e005      	b.n	800d276 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	3318      	adds	r3, #24
 800d26e:	4619      	mov	r1, r3
 800d270:	480e      	ldr	r0, [pc, #56]	; (800d2ac <xTaskRemoveFromEventList+0xbc>)
 800d272:	f7fe fc66 	bl	800bb42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d27a:	4b0d      	ldr	r3, [pc, #52]	; (800d2b0 <xTaskRemoveFromEventList+0xc0>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d280:	429a      	cmp	r2, r3
 800d282:	d905      	bls.n	800d290 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d284:	2301      	movs	r3, #1
 800d286:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d288:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <xTaskRemoveFromEventList+0xc4>)
 800d28a:	2201      	movs	r2, #1
 800d28c:	601a      	str	r2, [r3, #0]
 800d28e:	e001      	b.n	800d294 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d290:	2300      	movs	r3, #0
 800d292:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d294:	697b      	ldr	r3, [r7, #20]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	20005d30 	.word	0x20005d30
 800d2a4:	20005d10 	.word	0x20005d10
 800d2a8:	20005838 	.word	0x20005838
 800d2ac:	20005cc8 	.word	0x20005cc8
 800d2b0:	20005834 	.word	0x20005834
 800d2b4:	20005d1c 	.word	0x20005d1c

0800d2b8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d10a      	bne.n	800d2dc <vTaskSetTimeOutState+0x24>
	__asm volatile
 800d2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ca:	f383 8811 	msr	BASEPRI, r3
 800d2ce:	f3bf 8f6f 	isb	sy
 800d2d2:	f3bf 8f4f 	dsb	sy
 800d2d6:	60fb      	str	r3, [r7, #12]
}
 800d2d8:	bf00      	nop
 800d2da:	e7fe      	b.n	800d2da <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d2dc:	f000 ffca 	bl	800e274 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d2e0:	4b06      	ldr	r3, [pc, #24]	; (800d2fc <vTaskSetTimeOutState+0x44>)
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d2e8:	4b05      	ldr	r3, [pc, #20]	; (800d300 <vTaskSetTimeOutState+0x48>)
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d2f0:	f000 fff0 	bl	800e2d4 <vPortExitCritical>
}
 800d2f4:	bf00      	nop
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	20005d20 	.word	0x20005d20
 800d300:	20005d0c 	.word	0x20005d0c

0800d304 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d30c:	4b06      	ldr	r3, [pc, #24]	; (800d328 <vTaskInternalSetTimeOutState+0x24>)
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d314:	4b05      	ldr	r3, [pc, #20]	; (800d32c <vTaskInternalSetTimeOutState+0x28>)
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	605a      	str	r2, [r3, #4]
}
 800d31c:	bf00      	nop
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr
 800d328:	20005d20 	.word	0x20005d20
 800d32c:	20005d0c 	.word	0x20005d0c

0800d330 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10a      	bne.n	800d356 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d344:	f383 8811 	msr	BASEPRI, r3
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	613b      	str	r3, [r7, #16]
}
 800d352:	bf00      	nop
 800d354:	e7fe      	b.n	800d354 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d10a      	bne.n	800d372 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d360:	f383 8811 	msr	BASEPRI, r3
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	f3bf 8f4f 	dsb	sy
 800d36c:	60fb      	str	r3, [r7, #12]
}
 800d36e:	bf00      	nop
 800d370:	e7fe      	b.n	800d370 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d372:	f000 ff7f 	bl	800e274 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d376:	4b1d      	ldr	r3, [pc, #116]	; (800d3ec <xTaskCheckForTimeOut+0xbc>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	69ba      	ldr	r2, [r7, #24]
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d38e:	d102      	bne.n	800d396 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d390:	2300      	movs	r3, #0
 800d392:	61fb      	str	r3, [r7, #28]
 800d394:	e023      	b.n	800d3de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	4b15      	ldr	r3, [pc, #84]	; (800d3f0 <xTaskCheckForTimeOut+0xc0>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d007      	beq.n	800d3b2 <xTaskCheckForTimeOut+0x82>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	69ba      	ldr	r2, [r7, #24]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d302      	bcc.n	800d3b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	61fb      	str	r3, [r7, #28]
 800d3b0:	e015      	b.n	800d3de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	697a      	ldr	r2, [r7, #20]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d20b      	bcs.n	800d3d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	1ad2      	subs	r2, r2, r3
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f7ff ff9b 	bl	800d304 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	61fb      	str	r3, [r7, #28]
 800d3d2:	e004      	b.n	800d3de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d3de:	f000 ff79 	bl	800e2d4 <vPortExitCritical>

	return xReturn;
 800d3e2:	69fb      	ldr	r3, [r7, #28]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3720      	adds	r7, #32
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	20005d0c 	.word	0x20005d0c
 800d3f0:	20005d20 	.word	0x20005d20

0800d3f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d3f8:	4b03      	ldr	r3, [pc, #12]	; (800d408 <vTaskMissedYield+0x14>)
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	601a      	str	r2, [r3, #0]
}
 800d3fe:	bf00      	nop
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr
 800d408:	20005d1c 	.word	0x20005d1c

0800d40c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d414:	f000 f852 	bl	800d4bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d418:	4b06      	ldr	r3, [pc, #24]	; (800d434 <prvIdleTask+0x28>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d9f9      	bls.n	800d414 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d420:	4b05      	ldr	r3, [pc, #20]	; (800d438 <prvIdleTask+0x2c>)
 800d422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d430:	e7f0      	b.n	800d414 <prvIdleTask+0x8>
 800d432:	bf00      	nop
 800d434:	20005838 	.word	0x20005838
 800d438:	e000ed04 	.word	0xe000ed04

0800d43c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d442:	2300      	movs	r3, #0
 800d444:	607b      	str	r3, [r7, #4]
 800d446:	e00c      	b.n	800d462 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	4613      	mov	r3, r2
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	4413      	add	r3, r2
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	4a12      	ldr	r2, [pc, #72]	; (800d49c <prvInitialiseTaskLists+0x60>)
 800d454:	4413      	add	r3, r2
 800d456:	4618      	mov	r0, r3
 800d458:	f7fe fb46 	bl	800bae8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	3301      	adds	r3, #1
 800d460:	607b      	str	r3, [r7, #4]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b37      	cmp	r3, #55	; 0x37
 800d466:	d9ef      	bls.n	800d448 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d468:	480d      	ldr	r0, [pc, #52]	; (800d4a0 <prvInitialiseTaskLists+0x64>)
 800d46a:	f7fe fb3d 	bl	800bae8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d46e:	480d      	ldr	r0, [pc, #52]	; (800d4a4 <prvInitialiseTaskLists+0x68>)
 800d470:	f7fe fb3a 	bl	800bae8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d474:	480c      	ldr	r0, [pc, #48]	; (800d4a8 <prvInitialiseTaskLists+0x6c>)
 800d476:	f7fe fb37 	bl	800bae8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d47a:	480c      	ldr	r0, [pc, #48]	; (800d4ac <prvInitialiseTaskLists+0x70>)
 800d47c:	f7fe fb34 	bl	800bae8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d480:	480b      	ldr	r0, [pc, #44]	; (800d4b0 <prvInitialiseTaskLists+0x74>)
 800d482:	f7fe fb31 	bl	800bae8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d486:	4b0b      	ldr	r3, [pc, #44]	; (800d4b4 <prvInitialiseTaskLists+0x78>)
 800d488:	4a05      	ldr	r2, [pc, #20]	; (800d4a0 <prvInitialiseTaskLists+0x64>)
 800d48a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d48c:	4b0a      	ldr	r3, [pc, #40]	; (800d4b8 <prvInitialiseTaskLists+0x7c>)
 800d48e:	4a05      	ldr	r2, [pc, #20]	; (800d4a4 <prvInitialiseTaskLists+0x68>)
 800d490:	601a      	str	r2, [r3, #0]
}
 800d492:	bf00      	nop
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	20005838 	.word	0x20005838
 800d4a0:	20005c98 	.word	0x20005c98
 800d4a4:	20005cac 	.word	0x20005cac
 800d4a8:	20005cc8 	.word	0x20005cc8
 800d4ac:	20005cdc 	.word	0x20005cdc
 800d4b0:	20005cf4 	.word	0x20005cf4
 800d4b4:	20005cc0 	.word	0x20005cc0
 800d4b8:	20005cc4 	.word	0x20005cc4

0800d4bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4c2:	e019      	b.n	800d4f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d4c4:	f000 fed6 	bl	800e274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4c8:	4b10      	ldr	r3, [pc, #64]	; (800d50c <prvCheckTasksWaitingTermination+0x50>)
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	3304      	adds	r3, #4
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fe fb91 	bl	800bbfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d4da:	4b0d      	ldr	r3, [pc, #52]	; (800d510 <prvCheckTasksWaitingTermination+0x54>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	4a0b      	ldr	r2, [pc, #44]	; (800d510 <prvCheckTasksWaitingTermination+0x54>)
 800d4e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4e4:	4b0b      	ldr	r3, [pc, #44]	; (800d514 <prvCheckTasksWaitingTermination+0x58>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	4a0a      	ldr	r2, [pc, #40]	; (800d514 <prvCheckTasksWaitingTermination+0x58>)
 800d4ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d4ee:	f000 fef1 	bl	800e2d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 f810 	bl	800d518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4f8:	4b06      	ldr	r3, [pc, #24]	; (800d514 <prvCheckTasksWaitingTermination+0x58>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d1e1      	bne.n	800d4c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d500:	bf00      	nop
 800d502:	bf00      	nop
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	20005cdc 	.word	0x20005cdc
 800d510:	20005d08 	.word	0x20005d08
 800d514:	20005cf0 	.word	0x20005cf0

0800d518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3354      	adds	r3, #84	; 0x54
 800d524:	4618      	mov	r0, r3
 800d526:	f00d f849 	bl	801a5bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d530:	2b00      	cmp	r3, #0
 800d532:	d108      	bne.n	800d546 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d538:	4618      	mov	r0, r3
 800d53a:	f001 f889 	bl	800e650 <vPortFree>
				vPortFree( pxTCB );
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f001 f886 	bl	800e650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d544:	e018      	b.n	800d578 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d103      	bne.n	800d558 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f001 f87d 	bl	800e650 <vPortFree>
	}
 800d556:	e00f      	b.n	800d578 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d55e:	2b02      	cmp	r3, #2
 800d560:	d00a      	beq.n	800d578 <prvDeleteTCB+0x60>
	__asm volatile
 800d562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	60fb      	str	r3, [r7, #12]
}
 800d574:	bf00      	nop
 800d576:	e7fe      	b.n	800d576 <prvDeleteTCB+0x5e>
	}
 800d578:	bf00      	nop
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d580:	b480      	push	{r7}
 800d582:	b083      	sub	sp, #12
 800d584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d586:	4b0c      	ldr	r3, [pc, #48]	; (800d5b8 <prvResetNextTaskUnblockTime+0x38>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d104      	bne.n	800d59a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d590:	4b0a      	ldr	r3, [pc, #40]	; (800d5bc <prvResetNextTaskUnblockTime+0x3c>)
 800d592:	f04f 32ff 	mov.w	r2, #4294967295
 800d596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d598:	e008      	b.n	800d5ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d59a:	4b07      	ldr	r3, [pc, #28]	; (800d5b8 <prvResetNextTaskUnblockTime+0x38>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	4a04      	ldr	r2, [pc, #16]	; (800d5bc <prvResetNextTaskUnblockTime+0x3c>)
 800d5aa:	6013      	str	r3, [r2, #0]
}
 800d5ac:	bf00      	nop
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr
 800d5b8:	20005cc0 	.word	0x20005cc0
 800d5bc:	20005d28 	.word	0x20005d28

0800d5c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b083      	sub	sp, #12
 800d5c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d5c6:	4b0b      	ldr	r3, [pc, #44]	; (800d5f4 <xTaskGetSchedulerState+0x34>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d102      	bne.n	800d5d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	607b      	str	r3, [r7, #4]
 800d5d2:	e008      	b.n	800d5e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5d4:	4b08      	ldr	r3, [pc, #32]	; (800d5f8 <xTaskGetSchedulerState+0x38>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d102      	bne.n	800d5e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d5dc:	2302      	movs	r3, #2
 800d5de:	607b      	str	r3, [r7, #4]
 800d5e0:	e001      	b.n	800d5e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d5e6:	687b      	ldr	r3, [r7, #4]
	}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr
 800d5f4:	20005d14 	.word	0x20005d14
 800d5f8:	20005d30 	.word	0x20005d30

0800d5fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d608:	2300      	movs	r3, #0
 800d60a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d051      	beq.n	800d6b6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d616:	4b2a      	ldr	r3, [pc, #168]	; (800d6c0 <xTaskPriorityInherit+0xc4>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d241      	bcs.n	800d6a4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	699b      	ldr	r3, [r3, #24]
 800d624:	2b00      	cmp	r3, #0
 800d626:	db06      	blt.n	800d636 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d628:	4b25      	ldr	r3, [pc, #148]	; (800d6c0 <xTaskPriorityInherit+0xc4>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	6959      	ldr	r1, [r3, #20]
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d63e:	4613      	mov	r3, r2
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	4413      	add	r3, r2
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4a1f      	ldr	r2, [pc, #124]	; (800d6c4 <xTaskPriorityInherit+0xc8>)
 800d648:	4413      	add	r3, r2
 800d64a:	4299      	cmp	r1, r3
 800d64c:	d122      	bne.n	800d694 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	3304      	adds	r3, #4
 800d652:	4618      	mov	r0, r3
 800d654:	f7fe fad2 	bl	800bbfc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d658:	4b19      	ldr	r3, [pc, #100]	; (800d6c0 <xTaskPriorityInherit+0xc4>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d666:	4b18      	ldr	r3, [pc, #96]	; (800d6c8 <xTaskPriorityInherit+0xcc>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d903      	bls.n	800d676 <xTaskPriorityInherit+0x7a>
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d672:	4a15      	ldr	r2, [pc, #84]	; (800d6c8 <xTaskPriorityInherit+0xcc>)
 800d674:	6013      	str	r3, [r2, #0]
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d67a:	4613      	mov	r3, r2
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	4413      	add	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	4a10      	ldr	r2, [pc, #64]	; (800d6c4 <xTaskPriorityInherit+0xc8>)
 800d684:	441a      	add	r2, r3
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	3304      	adds	r3, #4
 800d68a:	4619      	mov	r1, r3
 800d68c:	4610      	mov	r0, r2
 800d68e:	f7fe fa58 	bl	800bb42 <vListInsertEnd>
 800d692:	e004      	b.n	800d69e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d694:	4b0a      	ldr	r3, [pc, #40]	; (800d6c0 <xTaskPriorityInherit+0xc4>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	60fb      	str	r3, [r7, #12]
 800d6a2:	e008      	b.n	800d6b6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6a8:	4b05      	ldr	r3, [pc, #20]	; (800d6c0 <xTaskPriorityInherit+0xc4>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d201      	bcs.n	800d6b6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
	}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3710      	adds	r7, #16
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	20005834 	.word	0x20005834
 800d6c4:	20005838 	.word	0x20005838
 800d6c8:	20005d10 	.word	0x20005d10

0800d6cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b086      	sub	sp, #24
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d056      	beq.n	800d790 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d6e2:	4b2e      	ldr	r3, [pc, #184]	; (800d79c <xTaskPriorityDisinherit+0xd0>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	693a      	ldr	r2, [r7, #16]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d00a      	beq.n	800d702 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	60fb      	str	r3, [r7, #12]
}
 800d6fe:	bf00      	nop
 800d700:	e7fe      	b.n	800d700 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10a      	bne.n	800d720 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	60bb      	str	r3, [r7, #8]
}
 800d71c:	bf00      	nop
 800d71e:	e7fe      	b.n	800d71e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d724:	1e5a      	subs	r2, r3, #1
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d732:	429a      	cmp	r2, r3
 800d734:	d02c      	beq.n	800d790 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d128      	bne.n	800d790 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	3304      	adds	r3, #4
 800d742:	4618      	mov	r0, r3
 800d744:	f7fe fa5a 	bl	800bbfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d754:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d760:	4b0f      	ldr	r3, [pc, #60]	; (800d7a0 <xTaskPriorityDisinherit+0xd4>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	429a      	cmp	r2, r3
 800d766:	d903      	bls.n	800d770 <xTaskPriorityDisinherit+0xa4>
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76c:	4a0c      	ldr	r2, [pc, #48]	; (800d7a0 <xTaskPriorityDisinherit+0xd4>)
 800d76e:	6013      	str	r3, [r2, #0]
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d774:	4613      	mov	r3, r2
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	4413      	add	r3, r2
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4a09      	ldr	r2, [pc, #36]	; (800d7a4 <xTaskPriorityDisinherit+0xd8>)
 800d77e:	441a      	add	r2, r3
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	3304      	adds	r3, #4
 800d784:	4619      	mov	r1, r3
 800d786:	4610      	mov	r0, r2
 800d788:	f7fe f9db 	bl	800bb42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d78c:	2301      	movs	r3, #1
 800d78e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d790:	697b      	ldr	r3, [r7, #20]
	}
 800d792:	4618      	mov	r0, r3
 800d794:	3718      	adds	r7, #24
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	20005834 	.word	0x20005834
 800d7a0:	20005d10 	.word	0x20005d10
 800d7a4:	20005838 	.word	0x20005838

0800d7a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b088      	sub	sp, #32
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d06a      	beq.n	800d896 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10a      	bne.n	800d7de <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	60fb      	str	r3, [r7, #12]
}
 800d7da:	bf00      	nop
 800d7dc:	e7fe      	b.n	800d7dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d7de:	69bb      	ldr	r3, [r7, #24]
 800d7e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7e2:	683a      	ldr	r2, [r7, #0]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d902      	bls.n	800d7ee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	61fb      	str	r3, [r7, #28]
 800d7ec:	e002      	b.n	800d7f4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7f2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f8:	69fa      	ldr	r2, [r7, #28]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d04b      	beq.n	800d896 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d7fe:	69bb      	ldr	r3, [r7, #24]
 800d800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d802:	697a      	ldr	r2, [r7, #20]
 800d804:	429a      	cmp	r2, r3
 800d806:	d146      	bne.n	800d896 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d808:	4b25      	ldr	r3, [pc, #148]	; (800d8a0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	69ba      	ldr	r2, [r7, #24]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d10a      	bne.n	800d828 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	60bb      	str	r3, [r7, #8]
}
 800d824:	bf00      	nop
 800d826:	e7fe      	b.n	800d826 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	69fa      	ldr	r2, [r7, #28]
 800d832:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	699b      	ldr	r3, [r3, #24]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	db04      	blt.n	800d846 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	6959      	ldr	r1, [r3, #20]
 800d84a:	693a      	ldr	r2, [r7, #16]
 800d84c:	4613      	mov	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4413      	add	r3, r2
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	4a13      	ldr	r2, [pc, #76]	; (800d8a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d856:	4413      	add	r3, r2
 800d858:	4299      	cmp	r1, r3
 800d85a:	d11c      	bne.n	800d896 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d85c:	69bb      	ldr	r3, [r7, #24]
 800d85e:	3304      	adds	r3, #4
 800d860:	4618      	mov	r0, r3
 800d862:	f7fe f9cb 	bl	800bbfc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d86a:	4b0f      	ldr	r3, [pc, #60]	; (800d8a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d903      	bls.n	800d87a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d876:	4a0c      	ldr	r2, [pc, #48]	; (800d8a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d878:	6013      	str	r3, [r2, #0]
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d87e:	4613      	mov	r3, r2
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	4413      	add	r3, r2
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	4a07      	ldr	r2, [pc, #28]	; (800d8a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d888:	441a      	add	r2, r3
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	3304      	adds	r3, #4
 800d88e:	4619      	mov	r1, r3
 800d890:	4610      	mov	r0, r2
 800d892:	f7fe f956 	bl	800bb42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d896:	bf00      	nop
 800d898:	3720      	adds	r7, #32
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	20005834 	.word	0x20005834
 800d8a4:	20005838 	.word	0x20005838
 800d8a8:	20005d10 	.word	0x20005d10

0800d8ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d8ac:	b480      	push	{r7}
 800d8ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d8b0:	4b07      	ldr	r3, [pc, #28]	; (800d8d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d004      	beq.n	800d8c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d8b8:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8be:	3201      	adds	r2, #1
 800d8c0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d8c2:	4b03      	ldr	r3, [pc, #12]	; (800d8d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
	}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr
 800d8d0:	20005834 	.word	0x20005834

0800d8d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d8de:	4b21      	ldr	r3, [pc, #132]	; (800d964 <prvAddCurrentTaskToDelayedList+0x90>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8e4:	4b20      	ldr	r3, [pc, #128]	; (800d968 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	3304      	adds	r3, #4
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fe f986 	bl	800bbfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f6:	d10a      	bne.n	800d90e <prvAddCurrentTaskToDelayedList+0x3a>
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d007      	beq.n	800d90e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8fe:	4b1a      	ldr	r3, [pc, #104]	; (800d968 <prvAddCurrentTaskToDelayedList+0x94>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	3304      	adds	r3, #4
 800d904:	4619      	mov	r1, r3
 800d906:	4819      	ldr	r0, [pc, #100]	; (800d96c <prvAddCurrentTaskToDelayedList+0x98>)
 800d908:	f7fe f91b 	bl	800bb42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d90c:	e026      	b.n	800d95c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	4413      	add	r3, r2
 800d914:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d916:	4b14      	ldr	r3, [pc, #80]	; (800d968 <prvAddCurrentTaskToDelayedList+0x94>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d91e:	68ba      	ldr	r2, [r7, #8]
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	429a      	cmp	r2, r3
 800d924:	d209      	bcs.n	800d93a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d926:	4b12      	ldr	r3, [pc, #72]	; (800d970 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	4b0f      	ldr	r3, [pc, #60]	; (800d968 <prvAddCurrentTaskToDelayedList+0x94>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	3304      	adds	r3, #4
 800d930:	4619      	mov	r1, r3
 800d932:	4610      	mov	r0, r2
 800d934:	f7fe f929 	bl	800bb8a <vListInsert>
}
 800d938:	e010      	b.n	800d95c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d93a:	4b0e      	ldr	r3, [pc, #56]	; (800d974 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	4b0a      	ldr	r3, [pc, #40]	; (800d968 <prvAddCurrentTaskToDelayedList+0x94>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	3304      	adds	r3, #4
 800d944:	4619      	mov	r1, r3
 800d946:	4610      	mov	r0, r2
 800d948:	f7fe f91f 	bl	800bb8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d94c:	4b0a      	ldr	r3, [pc, #40]	; (800d978 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	68ba      	ldr	r2, [r7, #8]
 800d952:	429a      	cmp	r2, r3
 800d954:	d202      	bcs.n	800d95c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d956:	4a08      	ldr	r2, [pc, #32]	; (800d978 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	6013      	str	r3, [r2, #0]
}
 800d95c:	bf00      	nop
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	20005d0c 	.word	0x20005d0c
 800d968:	20005834 	.word	0x20005834
 800d96c:	20005cf4 	.word	0x20005cf4
 800d970:	20005cc4 	.word	0x20005cc4
 800d974:	20005cc0 	.word	0x20005cc0
 800d978:	20005d28 	.word	0x20005d28

0800d97c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b08a      	sub	sp, #40	; 0x28
 800d980:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d982:	2300      	movs	r3, #0
 800d984:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d986:	f000 fb07 	bl	800df98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d98a:	4b1c      	ldr	r3, [pc, #112]	; (800d9fc <xTimerCreateTimerTask+0x80>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d021      	beq.n	800d9d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d992:	2300      	movs	r3, #0
 800d994:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d996:	2300      	movs	r3, #0
 800d998:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d99a:	1d3a      	adds	r2, r7, #4
 800d99c:	f107 0108 	add.w	r1, r7, #8
 800d9a0:	f107 030c 	add.w	r3, r7, #12
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7fe f885 	bl	800bab4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d9aa:	6879      	ldr	r1, [r7, #4]
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	68fa      	ldr	r2, [r7, #12]
 800d9b0:	9202      	str	r2, [sp, #8]
 800d9b2:	9301      	str	r3, [sp, #4]
 800d9b4:	2302      	movs	r3, #2
 800d9b6:	9300      	str	r3, [sp, #0]
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	460a      	mov	r2, r1
 800d9bc:	4910      	ldr	r1, [pc, #64]	; (800da00 <xTimerCreateTimerTask+0x84>)
 800d9be:	4811      	ldr	r0, [pc, #68]	; (800da04 <xTimerCreateTimerTask+0x88>)
 800d9c0:	f7fe ff90 	bl	800c8e4 <xTaskCreateStatic>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	4a10      	ldr	r2, [pc, #64]	; (800da08 <xTimerCreateTimerTask+0x8c>)
 800d9c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d9ca:	4b0f      	ldr	r3, [pc, #60]	; (800da08 <xTimerCreateTimerTask+0x8c>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d001      	beq.n	800d9d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d10a      	bne.n	800d9f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e0:	f383 8811 	msr	BASEPRI, r3
 800d9e4:	f3bf 8f6f 	isb	sy
 800d9e8:	f3bf 8f4f 	dsb	sy
 800d9ec:	613b      	str	r3, [r7, #16]
}
 800d9ee:	bf00      	nop
 800d9f0:	e7fe      	b.n	800d9f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d9f2:	697b      	ldr	r3, [r7, #20]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	20005d64 	.word	0x20005d64
 800da00:	0801b7b0 	.word	0x0801b7b0
 800da04:	0800db41 	.word	0x0800db41
 800da08:	20005d68 	.word	0x20005d68

0800da0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b08a      	sub	sp, #40	; 0x28
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]
 800da18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800da1a:	2300      	movs	r3, #0
 800da1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10a      	bne.n	800da3a <xTimerGenericCommand+0x2e>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	623b      	str	r3, [r7, #32]
}
 800da36:	bf00      	nop
 800da38:	e7fe      	b.n	800da38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da3a:	4b1a      	ldr	r3, [pc, #104]	; (800daa4 <xTimerGenericCommand+0x98>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d02a      	beq.n	800da98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	2b05      	cmp	r3, #5
 800da52:	dc18      	bgt.n	800da86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da54:	f7ff fdb4 	bl	800d5c0 <xTaskGetSchedulerState>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	d109      	bne.n	800da72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da5e:	4b11      	ldr	r3, [pc, #68]	; (800daa4 <xTimerGenericCommand+0x98>)
 800da60:	6818      	ldr	r0, [r3, #0]
 800da62:	f107 0110 	add.w	r1, r7, #16
 800da66:	2300      	movs	r3, #0
 800da68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da6a:	f7fe fa2f 	bl	800becc <xQueueGenericSend>
 800da6e:	6278      	str	r0, [r7, #36]	; 0x24
 800da70:	e012      	b.n	800da98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800da72:	4b0c      	ldr	r3, [pc, #48]	; (800daa4 <xTimerGenericCommand+0x98>)
 800da74:	6818      	ldr	r0, [r3, #0]
 800da76:	f107 0110 	add.w	r1, r7, #16
 800da7a:	2300      	movs	r3, #0
 800da7c:	2200      	movs	r2, #0
 800da7e:	f7fe fa25 	bl	800becc <xQueueGenericSend>
 800da82:	6278      	str	r0, [r7, #36]	; 0x24
 800da84:	e008      	b.n	800da98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800da86:	4b07      	ldr	r3, [pc, #28]	; (800daa4 <xTimerGenericCommand+0x98>)
 800da88:	6818      	ldr	r0, [r3, #0]
 800da8a:	f107 0110 	add.w	r1, r7, #16
 800da8e:	2300      	movs	r3, #0
 800da90:	683a      	ldr	r2, [r7, #0]
 800da92:	f7fe fb19 	bl	800c0c8 <xQueueGenericSendFromISR>
 800da96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3728      	adds	r7, #40	; 0x28
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	20005d64 	.word	0x20005d64

0800daa8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b088      	sub	sp, #32
 800daac:	af02      	add	r7, sp, #8
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dab2:	4b22      	ldr	r3, [pc, #136]	; (800db3c <prvProcessExpiredTimer+0x94>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68db      	ldr	r3, [r3, #12]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	3304      	adds	r3, #4
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7fe f89b 	bl	800bbfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dacc:	f003 0304 	and.w	r3, r3, #4
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d022      	beq.n	800db1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	699a      	ldr	r2, [r3, #24]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	18d1      	adds	r1, r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	6978      	ldr	r0, [r7, #20]
 800dae2:	f000 f8d1 	bl	800dc88 <prvInsertTimerInActiveList>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d01f      	beq.n	800db2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800daec:	2300      	movs	r3, #0
 800daee:	9300      	str	r3, [sp, #0]
 800daf0:	2300      	movs	r3, #0
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	2100      	movs	r1, #0
 800daf6:	6978      	ldr	r0, [r7, #20]
 800daf8:	f7ff ff88 	bl	800da0c <xTimerGenericCommand>
 800dafc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d113      	bne.n	800db2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	60fb      	str	r3, [r7, #12]
}
 800db16:	bf00      	nop
 800db18:	e7fe      	b.n	800db18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db20:	f023 0301 	bic.w	r3, r3, #1
 800db24:	b2da      	uxtb	r2, r3
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	6a1b      	ldr	r3, [r3, #32]
 800db30:	6978      	ldr	r0, [r7, #20]
 800db32:	4798      	blx	r3
}
 800db34:	bf00      	nop
 800db36:	3718      	adds	r7, #24
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	20005d5c 	.word	0x20005d5c

0800db40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db48:	f107 0308 	add.w	r3, r7, #8
 800db4c:	4618      	mov	r0, r3
 800db4e:	f000 f857 	bl	800dc00 <prvGetNextExpireTime>
 800db52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	4619      	mov	r1, r3
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f000 f803 	bl	800db64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800db5e:	f000 f8d5 	bl	800dd0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db62:	e7f1      	b.n	800db48 <prvTimerTask+0x8>

0800db64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800db6e:	f7ff f915 	bl	800cd9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db72:	f107 0308 	add.w	r3, r7, #8
 800db76:	4618      	mov	r0, r3
 800db78:	f000 f866 	bl	800dc48 <prvSampleTimeNow>
 800db7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d130      	bne.n	800dbe6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10a      	bne.n	800dba0 <prvProcessTimerOrBlockTask+0x3c>
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d806      	bhi.n	800dba0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800db92:	f7ff f911 	bl	800cdb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800db96:	68f9      	ldr	r1, [r7, #12]
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f7ff ff85 	bl	800daa8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800db9e:	e024      	b.n	800dbea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d008      	beq.n	800dbb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dba6:	4b13      	ldr	r3, [pc, #76]	; (800dbf4 <prvProcessTimerOrBlockTask+0x90>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d101      	bne.n	800dbb4 <prvProcessTimerOrBlockTask+0x50>
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e000      	b.n	800dbb6 <prvProcessTimerOrBlockTask+0x52>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dbb8:	4b0f      	ldr	r3, [pc, #60]	; (800dbf8 <prvProcessTimerOrBlockTask+0x94>)
 800dbba:	6818      	ldr	r0, [r3, #0]
 800dbbc:	687a      	ldr	r2, [r7, #4]
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	1ad3      	subs	r3, r2, r3
 800dbc2:	683a      	ldr	r2, [r7, #0]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	f7fe fe59 	bl	800c87c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dbca:	f7ff f8f5 	bl	800cdb8 <xTaskResumeAll>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d10a      	bne.n	800dbea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dbd4:	4b09      	ldr	r3, [pc, #36]	; (800dbfc <prvProcessTimerOrBlockTask+0x98>)
 800dbd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbda:	601a      	str	r2, [r3, #0]
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	f3bf 8f6f 	isb	sy
}
 800dbe4:	e001      	b.n	800dbea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dbe6:	f7ff f8e7 	bl	800cdb8 <xTaskResumeAll>
}
 800dbea:	bf00      	nop
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	20005d60 	.word	0x20005d60
 800dbf8:	20005d64 	.word	0x20005d64
 800dbfc:	e000ed04 	.word	0xe000ed04

0800dc00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc00:	b480      	push	{r7}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dc08:	4b0e      	ldr	r3, [pc, #56]	; (800dc44 <prvGetNextExpireTime+0x44>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d101      	bne.n	800dc16 <prvGetNextExpireTime+0x16>
 800dc12:	2201      	movs	r2, #1
 800dc14:	e000      	b.n	800dc18 <prvGetNextExpireTime+0x18>
 800dc16:	2200      	movs	r2, #0
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d105      	bne.n	800dc30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc24:	4b07      	ldr	r3, [pc, #28]	; (800dc44 <prvGetNextExpireTime+0x44>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	60fb      	str	r3, [r7, #12]
 800dc2e:	e001      	b.n	800dc34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dc30:	2300      	movs	r3, #0
 800dc32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc34:	68fb      	ldr	r3, [r7, #12]
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3714      	adds	r7, #20
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	20005d5c 	.word	0x20005d5c

0800dc48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc50:	f7ff f950 	bl	800cef4 <xTaskGetTickCount>
 800dc54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc56:	4b0b      	ldr	r3, [pc, #44]	; (800dc84 <prvSampleTimeNow+0x3c>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	68fa      	ldr	r2, [r7, #12]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d205      	bcs.n	800dc6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dc60:	f000 f936 	bl	800ded0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2201      	movs	r2, #1
 800dc68:	601a      	str	r2, [r3, #0]
 800dc6a:	e002      	b.n	800dc72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dc72:	4a04      	ldr	r2, [pc, #16]	; (800dc84 <prvSampleTimeNow+0x3c>)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dc78:	68fb      	ldr	r3, [r7, #12]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	20005d6c 	.word	0x20005d6c

0800dc88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b086      	sub	sp, #24
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
 800dc94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dc96:	2300      	movs	r3, #0
 800dc98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dca6:	68ba      	ldr	r2, [r7, #8]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d812      	bhi.n	800dcd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	1ad2      	subs	r2, r2, r3
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	699b      	ldr	r3, [r3, #24]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d302      	bcc.n	800dcc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	617b      	str	r3, [r7, #20]
 800dcc0:	e01b      	b.n	800dcfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dcc2:	4b10      	ldr	r3, [pc, #64]	; (800dd04 <prvInsertTimerInActiveList+0x7c>)
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	3304      	adds	r3, #4
 800dcca:	4619      	mov	r1, r3
 800dccc:	4610      	mov	r0, r2
 800dcce:	f7fd ff5c 	bl	800bb8a <vListInsert>
 800dcd2:	e012      	b.n	800dcfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d206      	bcs.n	800dcea <prvInsertTimerInActiveList+0x62>
 800dcdc:	68ba      	ldr	r2, [r7, #8]
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d302      	bcc.n	800dcea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dce4:	2301      	movs	r3, #1
 800dce6:	617b      	str	r3, [r7, #20]
 800dce8:	e007      	b.n	800dcfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dcea:	4b07      	ldr	r3, [pc, #28]	; (800dd08 <prvInsertTimerInActiveList+0x80>)
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	4610      	mov	r0, r2
 800dcf6:	f7fd ff48 	bl	800bb8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dcfa:	697b      	ldr	r3, [r7, #20]
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3718      	adds	r7, #24
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	20005d60 	.word	0x20005d60
 800dd08:	20005d5c 	.word	0x20005d5c

0800dd0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b08e      	sub	sp, #56	; 0x38
 800dd10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd12:	e0ca      	b.n	800deaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	da18      	bge.n	800dd4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dd1a:	1d3b      	adds	r3, r7, #4
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d10a      	bne.n	800dd3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd2a:	f383 8811 	msr	BASEPRI, r3
 800dd2e:	f3bf 8f6f 	isb	sy
 800dd32:	f3bf 8f4f 	dsb	sy
 800dd36:	61fb      	str	r3, [r7, #28]
}
 800dd38:	bf00      	nop
 800dd3a:	e7fe      	b.n	800dd3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd42:	6850      	ldr	r0, [r2, #4]
 800dd44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd46:	6892      	ldr	r2, [r2, #8]
 800dd48:	4611      	mov	r1, r2
 800dd4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f2c0 80ab 	blt.w	800deaa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5a:	695b      	ldr	r3, [r3, #20]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d004      	beq.n	800dd6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	3304      	adds	r3, #4
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7fd ff49 	bl	800bbfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd6a:	463b      	mov	r3, r7
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7ff ff6b 	bl	800dc48 <prvSampleTimeNow>
 800dd72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b09      	cmp	r3, #9
 800dd78:	f200 8096 	bhi.w	800dea8 <prvProcessReceivedCommands+0x19c>
 800dd7c:	a201      	add	r2, pc, #4	; (adr r2, 800dd84 <prvProcessReceivedCommands+0x78>)
 800dd7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd82:	bf00      	nop
 800dd84:	0800ddad 	.word	0x0800ddad
 800dd88:	0800ddad 	.word	0x0800ddad
 800dd8c:	0800ddad 	.word	0x0800ddad
 800dd90:	0800de21 	.word	0x0800de21
 800dd94:	0800de35 	.word	0x0800de35
 800dd98:	0800de7f 	.word	0x0800de7f
 800dd9c:	0800ddad 	.word	0x0800ddad
 800dda0:	0800ddad 	.word	0x0800ddad
 800dda4:	0800de21 	.word	0x0800de21
 800dda8:	0800de35 	.word	0x0800de35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ddac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddb2:	f043 0301 	orr.w	r3, r3, #1
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ddbe:	68ba      	ldr	r2, [r7, #8]
 800ddc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc2:	699b      	ldr	r3, [r3, #24]
 800ddc4:	18d1      	adds	r1, r2, r3
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddcc:	f7ff ff5c 	bl	800dc88 <prvInsertTimerInActiveList>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d069      	beq.n	800deaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd8:	6a1b      	ldr	r3, [r3, #32]
 800ddda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dddc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dde4:	f003 0304 	and.w	r3, r3, #4
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d05e      	beq.n	800deaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ddec:	68ba      	ldr	r2, [r7, #8]
 800ddee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf0:	699b      	ldr	r3, [r3, #24]
 800ddf2:	441a      	add	r2, r3
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddfe:	f7ff fe05 	bl	800da0c <xTimerGenericCommand>
 800de02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de04:	6a3b      	ldr	r3, [r7, #32]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d14f      	bne.n	800deaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800de0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	61bb      	str	r3, [r7, #24]
}
 800de1c:	bf00      	nop
 800de1e:	e7fe      	b.n	800de1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de26:	f023 0301 	bic.w	r3, r3, #1
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800de32:	e03a      	b.n	800deaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de3a:	f043 0301 	orr.w	r3, r3, #1
 800de3e:	b2da      	uxtb	r2, r3
 800de40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800de46:	68ba      	ldr	r2, [r7, #8]
 800de48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800de4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4e:	699b      	ldr	r3, [r3, #24]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d10a      	bne.n	800de6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800de54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de58:	f383 8811 	msr	BASEPRI, r3
 800de5c:	f3bf 8f6f 	isb	sy
 800de60:	f3bf 8f4f 	dsb	sy
 800de64:	617b      	str	r3, [r7, #20]
}
 800de66:	bf00      	nop
 800de68:	e7fe      	b.n	800de68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800de6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6c:	699a      	ldr	r2, [r3, #24]
 800de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de70:	18d1      	adds	r1, r2, r3
 800de72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de78:	f7ff ff06 	bl	800dc88 <prvInsertTimerInActiveList>
					break;
 800de7c:	e015      	b.n	800deaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800de7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de84:	f003 0302 	and.w	r3, r3, #2
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d103      	bne.n	800de94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800de8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de8e:	f000 fbdf 	bl	800e650 <vPortFree>
 800de92:	e00a      	b.n	800deaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de9a:	f023 0301 	bic.w	r3, r3, #1
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dea6:	e000      	b.n	800deaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800dea8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800deaa:	4b08      	ldr	r3, [pc, #32]	; (800decc <prvProcessReceivedCommands+0x1c0>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	1d39      	adds	r1, r7, #4
 800deb0:	2200      	movs	r2, #0
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fe f9a4 	bl	800c200 <xQueueReceive>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	f47f af2a 	bne.w	800dd14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dec0:	bf00      	nop
 800dec2:	bf00      	nop
 800dec4:	3730      	adds	r7, #48	; 0x30
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	20005d64 	.word	0x20005d64

0800ded0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b088      	sub	sp, #32
 800ded4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ded6:	e048      	b.n	800df6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ded8:	4b2d      	ldr	r3, [pc, #180]	; (800df90 <prvSwitchTimerLists+0xc0>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dee2:	4b2b      	ldr	r3, [pc, #172]	; (800df90 <prvSwitchTimerLists+0xc0>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	3304      	adds	r3, #4
 800def0:	4618      	mov	r0, r3
 800def2:	f7fd fe83 	bl	800bbfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	6a1b      	ldr	r3, [r3, #32]
 800defa:	68f8      	ldr	r0, [r7, #12]
 800defc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df04:	f003 0304 	and.w	r3, r3, #4
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d02e      	beq.n	800df6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	699b      	ldr	r3, [r3, #24]
 800df10:	693a      	ldr	r2, [r7, #16]
 800df12:	4413      	add	r3, r2
 800df14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800df16:	68ba      	ldr	r2, [r7, #8]
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d90e      	bls.n	800df3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	68fa      	ldr	r2, [r7, #12]
 800df28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df2a:	4b19      	ldr	r3, [pc, #100]	; (800df90 <prvSwitchTimerLists+0xc0>)
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	3304      	adds	r3, #4
 800df32:	4619      	mov	r1, r3
 800df34:	4610      	mov	r0, r2
 800df36:	f7fd fe28 	bl	800bb8a <vListInsert>
 800df3a:	e016      	b.n	800df6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df3c:	2300      	movs	r3, #0
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	2300      	movs	r3, #0
 800df42:	693a      	ldr	r2, [r7, #16]
 800df44:	2100      	movs	r1, #0
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	f7ff fd60 	bl	800da0c <xTimerGenericCommand>
 800df4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10a      	bne.n	800df6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800df54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	603b      	str	r3, [r7, #0]
}
 800df66:	bf00      	nop
 800df68:	e7fe      	b.n	800df68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df6a:	4b09      	ldr	r3, [pc, #36]	; (800df90 <prvSwitchTimerLists+0xc0>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1b1      	bne.n	800ded8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800df74:	4b06      	ldr	r3, [pc, #24]	; (800df90 <prvSwitchTimerLists+0xc0>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800df7a:	4b06      	ldr	r3, [pc, #24]	; (800df94 <prvSwitchTimerLists+0xc4>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a04      	ldr	r2, [pc, #16]	; (800df90 <prvSwitchTimerLists+0xc0>)
 800df80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800df82:	4a04      	ldr	r2, [pc, #16]	; (800df94 <prvSwitchTimerLists+0xc4>)
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	6013      	str	r3, [r2, #0]
}
 800df88:	bf00      	nop
 800df8a:	3718      	adds	r7, #24
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	20005d5c 	.word	0x20005d5c
 800df94:	20005d60 	.word	0x20005d60

0800df98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b082      	sub	sp, #8
 800df9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800df9e:	f000 f969 	bl	800e274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dfa2:	4b15      	ldr	r3, [pc, #84]	; (800dff8 <prvCheckForValidListAndQueue+0x60>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d120      	bne.n	800dfec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dfaa:	4814      	ldr	r0, [pc, #80]	; (800dffc <prvCheckForValidListAndQueue+0x64>)
 800dfac:	f7fd fd9c 	bl	800bae8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dfb0:	4813      	ldr	r0, [pc, #76]	; (800e000 <prvCheckForValidListAndQueue+0x68>)
 800dfb2:	f7fd fd99 	bl	800bae8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dfb6:	4b13      	ldr	r3, [pc, #76]	; (800e004 <prvCheckForValidListAndQueue+0x6c>)
 800dfb8:	4a10      	ldr	r2, [pc, #64]	; (800dffc <prvCheckForValidListAndQueue+0x64>)
 800dfba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dfbc:	4b12      	ldr	r3, [pc, #72]	; (800e008 <prvCheckForValidListAndQueue+0x70>)
 800dfbe:	4a10      	ldr	r2, [pc, #64]	; (800e000 <prvCheckForValidListAndQueue+0x68>)
 800dfc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	4b11      	ldr	r3, [pc, #68]	; (800e00c <prvCheckForValidListAndQueue+0x74>)
 800dfc8:	4a11      	ldr	r2, [pc, #68]	; (800e010 <prvCheckForValidListAndQueue+0x78>)
 800dfca:	2110      	movs	r1, #16
 800dfcc:	200a      	movs	r0, #10
 800dfce:	f7fd fea7 	bl	800bd20 <xQueueGenericCreateStatic>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	4a08      	ldr	r2, [pc, #32]	; (800dff8 <prvCheckForValidListAndQueue+0x60>)
 800dfd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dfd8:	4b07      	ldr	r3, [pc, #28]	; (800dff8 <prvCheckForValidListAndQueue+0x60>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d005      	beq.n	800dfec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dfe0:	4b05      	ldr	r3, [pc, #20]	; (800dff8 <prvCheckForValidListAndQueue+0x60>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	490b      	ldr	r1, [pc, #44]	; (800e014 <prvCheckForValidListAndQueue+0x7c>)
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fe fc1e 	bl	800c828 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfec:	f000 f972 	bl	800e2d4 <vPortExitCritical>
}
 800dff0:	bf00      	nop
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	20005d64 	.word	0x20005d64
 800dffc:	20005d34 	.word	0x20005d34
 800e000:	20005d48 	.word	0x20005d48
 800e004:	20005d5c 	.word	0x20005d5c
 800e008:	20005d60 	.word	0x20005d60
 800e00c:	20005e10 	.word	0x20005e10
 800e010:	20005d70 	.word	0x20005d70
 800e014:	0801b7b8 	.word	0x0801b7b8

0800e018 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e018:	b480      	push	{r7}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	3b04      	subs	r3, #4
 800e028:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	3b04      	subs	r3, #4
 800e036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	f023 0201 	bic.w	r2, r3, #1
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	3b04      	subs	r3, #4
 800e046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e048:	4a0c      	ldr	r2, [pc, #48]	; (800e07c <pxPortInitialiseStack+0x64>)
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	3b14      	subs	r3, #20
 800e052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	3b04      	subs	r3, #4
 800e05e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f06f 0202 	mvn.w	r2, #2
 800e066:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	3b20      	subs	r3, #32
 800e06c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e06e:	68fb      	ldr	r3, [r7, #12]
}
 800e070:	4618      	mov	r0, r3
 800e072:	3714      	adds	r7, #20
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr
 800e07c:	0800e081 	.word	0x0800e081

0800e080 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e080:	b480      	push	{r7}
 800e082:	b085      	sub	sp, #20
 800e084:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e086:	2300      	movs	r3, #0
 800e088:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e08a:	4b12      	ldr	r3, [pc, #72]	; (800e0d4 <prvTaskExitError+0x54>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e092:	d00a      	beq.n	800e0aa <prvTaskExitError+0x2a>
	__asm volatile
 800e094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e098:	f383 8811 	msr	BASEPRI, r3
 800e09c:	f3bf 8f6f 	isb	sy
 800e0a0:	f3bf 8f4f 	dsb	sy
 800e0a4:	60fb      	str	r3, [r7, #12]
}
 800e0a6:	bf00      	nop
 800e0a8:	e7fe      	b.n	800e0a8 <prvTaskExitError+0x28>
	__asm volatile
 800e0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ae:	f383 8811 	msr	BASEPRI, r3
 800e0b2:	f3bf 8f6f 	isb	sy
 800e0b6:	f3bf 8f4f 	dsb	sy
 800e0ba:	60bb      	str	r3, [r7, #8]
}
 800e0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e0be:	bf00      	nop
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d0fc      	beq.n	800e0c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e0c6:	bf00      	nop
 800e0c8:	bf00      	nop
 800e0ca:	3714      	adds	r7, #20
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr
 800e0d4:	2000002c 	.word	0x2000002c
	...

0800e0e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e0e0:	4b07      	ldr	r3, [pc, #28]	; (800e100 <pxCurrentTCBConst2>)
 800e0e2:	6819      	ldr	r1, [r3, #0]
 800e0e4:	6808      	ldr	r0, [r1, #0]
 800e0e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ea:	f380 8809 	msr	PSP, r0
 800e0ee:	f3bf 8f6f 	isb	sy
 800e0f2:	f04f 0000 	mov.w	r0, #0
 800e0f6:	f380 8811 	msr	BASEPRI, r0
 800e0fa:	4770      	bx	lr
 800e0fc:	f3af 8000 	nop.w

0800e100 <pxCurrentTCBConst2>:
 800e100:	20005834 	.word	0x20005834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e104:	bf00      	nop
 800e106:	bf00      	nop

0800e108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e108:	4808      	ldr	r0, [pc, #32]	; (800e12c <prvPortStartFirstTask+0x24>)
 800e10a:	6800      	ldr	r0, [r0, #0]
 800e10c:	6800      	ldr	r0, [r0, #0]
 800e10e:	f380 8808 	msr	MSP, r0
 800e112:	f04f 0000 	mov.w	r0, #0
 800e116:	f380 8814 	msr	CONTROL, r0
 800e11a:	b662      	cpsie	i
 800e11c:	b661      	cpsie	f
 800e11e:	f3bf 8f4f 	dsb	sy
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	df00      	svc	0
 800e128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e12a:	bf00      	nop
 800e12c:	e000ed08 	.word	0xe000ed08

0800e130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e136:	4b46      	ldr	r3, [pc, #280]	; (800e250 <xPortStartScheduler+0x120>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a46      	ldr	r2, [pc, #280]	; (800e254 <xPortStartScheduler+0x124>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d10a      	bne.n	800e156 <xPortStartScheduler+0x26>
	__asm volatile
 800e140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	613b      	str	r3, [r7, #16]
}
 800e152:	bf00      	nop
 800e154:	e7fe      	b.n	800e154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e156:	4b3e      	ldr	r3, [pc, #248]	; (800e250 <xPortStartScheduler+0x120>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a3f      	ldr	r2, [pc, #252]	; (800e258 <xPortStartScheduler+0x128>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d10a      	bne.n	800e176 <xPortStartScheduler+0x46>
	__asm volatile
 800e160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e164:	f383 8811 	msr	BASEPRI, r3
 800e168:	f3bf 8f6f 	isb	sy
 800e16c:	f3bf 8f4f 	dsb	sy
 800e170:	60fb      	str	r3, [r7, #12]
}
 800e172:	bf00      	nop
 800e174:	e7fe      	b.n	800e174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e176:	4b39      	ldr	r3, [pc, #228]	; (800e25c <xPortStartScheduler+0x12c>)
 800e178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	22ff      	movs	r2, #255	; 0xff
 800e186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e190:	78fb      	ldrb	r3, [r7, #3]
 800e192:	b2db      	uxtb	r3, r3
 800e194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	4b31      	ldr	r3, [pc, #196]	; (800e260 <xPortStartScheduler+0x130>)
 800e19c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e19e:	4b31      	ldr	r3, [pc, #196]	; (800e264 <xPortStartScheduler+0x134>)
 800e1a0:	2207      	movs	r2, #7
 800e1a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1a4:	e009      	b.n	800e1ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e1a6:	4b2f      	ldr	r3, [pc, #188]	; (800e264 <xPortStartScheduler+0x134>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	4a2d      	ldr	r2, [pc, #180]	; (800e264 <xPortStartScheduler+0x134>)
 800e1ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e1b0:	78fb      	ldrb	r3, [r7, #3]
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	005b      	lsls	r3, r3, #1
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e1ba:	78fb      	ldrb	r3, [r7, #3]
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1c2:	2b80      	cmp	r3, #128	; 0x80
 800e1c4:	d0ef      	beq.n	800e1a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e1c6:	4b27      	ldr	r3, [pc, #156]	; (800e264 <xPortStartScheduler+0x134>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f1c3 0307 	rsb	r3, r3, #7
 800e1ce:	2b04      	cmp	r3, #4
 800e1d0:	d00a      	beq.n	800e1e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d6:	f383 8811 	msr	BASEPRI, r3
 800e1da:	f3bf 8f6f 	isb	sy
 800e1de:	f3bf 8f4f 	dsb	sy
 800e1e2:	60bb      	str	r3, [r7, #8]
}
 800e1e4:	bf00      	nop
 800e1e6:	e7fe      	b.n	800e1e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e1e8:	4b1e      	ldr	r3, [pc, #120]	; (800e264 <xPortStartScheduler+0x134>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	021b      	lsls	r3, r3, #8
 800e1ee:	4a1d      	ldr	r2, [pc, #116]	; (800e264 <xPortStartScheduler+0x134>)
 800e1f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e1f2:	4b1c      	ldr	r3, [pc, #112]	; (800e264 <xPortStartScheduler+0x134>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e1fa:	4a1a      	ldr	r2, [pc, #104]	; (800e264 <xPortStartScheduler+0x134>)
 800e1fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	b2da      	uxtb	r2, r3
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e206:	4b18      	ldr	r3, [pc, #96]	; (800e268 <xPortStartScheduler+0x138>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a17      	ldr	r2, [pc, #92]	; (800e268 <xPortStartScheduler+0x138>)
 800e20c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e212:	4b15      	ldr	r3, [pc, #84]	; (800e268 <xPortStartScheduler+0x138>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4a14      	ldr	r2, [pc, #80]	; (800e268 <xPortStartScheduler+0x138>)
 800e218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e21c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e21e:	f000 f8dd 	bl	800e3dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e222:	4b12      	ldr	r3, [pc, #72]	; (800e26c <xPortStartScheduler+0x13c>)
 800e224:	2200      	movs	r2, #0
 800e226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e228:	f000 f8fc 	bl	800e424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e22c:	4b10      	ldr	r3, [pc, #64]	; (800e270 <xPortStartScheduler+0x140>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a0f      	ldr	r2, [pc, #60]	; (800e270 <xPortStartScheduler+0x140>)
 800e232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e238:	f7ff ff66 	bl	800e108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e23c:	f7fe ff24 	bl	800d088 <vTaskSwitchContext>
	prvTaskExitError();
 800e240:	f7ff ff1e 	bl	800e080 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e244:	2300      	movs	r3, #0
}
 800e246:	4618      	mov	r0, r3
 800e248:	3718      	adds	r7, #24
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	e000ed00 	.word	0xe000ed00
 800e254:	410fc271 	.word	0x410fc271
 800e258:	410fc270 	.word	0x410fc270
 800e25c:	e000e400 	.word	0xe000e400
 800e260:	20005e60 	.word	0x20005e60
 800e264:	20005e64 	.word	0x20005e64
 800e268:	e000ed20 	.word	0xe000ed20
 800e26c:	2000002c 	.word	0x2000002c
 800e270:	e000ef34 	.word	0xe000ef34

0800e274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
	__asm volatile
 800e27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27e:	f383 8811 	msr	BASEPRI, r3
 800e282:	f3bf 8f6f 	isb	sy
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	607b      	str	r3, [r7, #4]
}
 800e28c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e28e:	4b0f      	ldr	r3, [pc, #60]	; (800e2cc <vPortEnterCritical+0x58>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	3301      	adds	r3, #1
 800e294:	4a0d      	ldr	r2, [pc, #52]	; (800e2cc <vPortEnterCritical+0x58>)
 800e296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e298:	4b0c      	ldr	r3, [pc, #48]	; (800e2cc <vPortEnterCritical+0x58>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d10f      	bne.n	800e2c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e2a0:	4b0b      	ldr	r3, [pc, #44]	; (800e2d0 <vPortEnterCritical+0x5c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00a      	beq.n	800e2c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ae:	f383 8811 	msr	BASEPRI, r3
 800e2b2:	f3bf 8f6f 	isb	sy
 800e2b6:	f3bf 8f4f 	dsb	sy
 800e2ba:	603b      	str	r3, [r7, #0]
}
 800e2bc:	bf00      	nop
 800e2be:	e7fe      	b.n	800e2be <vPortEnterCritical+0x4a>
	}
}
 800e2c0:	bf00      	nop
 800e2c2:	370c      	adds	r7, #12
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr
 800e2cc:	2000002c 	.word	0x2000002c
 800e2d0:	e000ed04 	.word	0xe000ed04

0800e2d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e2da:	4b12      	ldr	r3, [pc, #72]	; (800e324 <vPortExitCritical+0x50>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d10a      	bne.n	800e2f8 <vPortExitCritical+0x24>
	__asm volatile
 800e2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e6:	f383 8811 	msr	BASEPRI, r3
 800e2ea:	f3bf 8f6f 	isb	sy
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	607b      	str	r3, [r7, #4]
}
 800e2f4:	bf00      	nop
 800e2f6:	e7fe      	b.n	800e2f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e2f8:	4b0a      	ldr	r3, [pc, #40]	; (800e324 <vPortExitCritical+0x50>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	4a09      	ldr	r2, [pc, #36]	; (800e324 <vPortExitCritical+0x50>)
 800e300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e302:	4b08      	ldr	r3, [pc, #32]	; (800e324 <vPortExitCritical+0x50>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d105      	bne.n	800e316 <vPortExitCritical+0x42>
 800e30a:	2300      	movs	r3, #0
 800e30c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	f383 8811 	msr	BASEPRI, r3
}
 800e314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e316:	bf00      	nop
 800e318:	370c      	adds	r7, #12
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	2000002c 	.word	0x2000002c
	...

0800e330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e330:	f3ef 8009 	mrs	r0, PSP
 800e334:	f3bf 8f6f 	isb	sy
 800e338:	4b15      	ldr	r3, [pc, #84]	; (800e390 <pxCurrentTCBConst>)
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	f01e 0f10 	tst.w	lr, #16
 800e340:	bf08      	it	eq
 800e342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34a:	6010      	str	r0, [r2, #0]
 800e34c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e350:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e354:	f380 8811 	msr	BASEPRI, r0
 800e358:	f3bf 8f4f 	dsb	sy
 800e35c:	f3bf 8f6f 	isb	sy
 800e360:	f7fe fe92 	bl	800d088 <vTaskSwitchContext>
 800e364:	f04f 0000 	mov.w	r0, #0
 800e368:	f380 8811 	msr	BASEPRI, r0
 800e36c:	bc09      	pop	{r0, r3}
 800e36e:	6819      	ldr	r1, [r3, #0]
 800e370:	6808      	ldr	r0, [r1, #0]
 800e372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e376:	f01e 0f10 	tst.w	lr, #16
 800e37a:	bf08      	it	eq
 800e37c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e380:	f380 8809 	msr	PSP, r0
 800e384:	f3bf 8f6f 	isb	sy
 800e388:	4770      	bx	lr
 800e38a:	bf00      	nop
 800e38c:	f3af 8000 	nop.w

0800e390 <pxCurrentTCBConst>:
 800e390:	20005834 	.word	0x20005834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e394:	bf00      	nop
 800e396:	bf00      	nop

0800e398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
	__asm volatile
 800e39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a2:	f383 8811 	msr	BASEPRI, r3
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	f3bf 8f4f 	dsb	sy
 800e3ae:	607b      	str	r3, [r7, #4]
}
 800e3b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e3b2:	f7fe fdaf 	bl	800cf14 <xTaskIncrementTick>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d003      	beq.n	800e3c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e3bc:	4b06      	ldr	r3, [pc, #24]	; (800e3d8 <xPortSysTickHandler+0x40>)
 800e3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3c2:	601a      	str	r2, [r3, #0]
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	f383 8811 	msr	BASEPRI, r3
}
 800e3ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e3d0:	bf00      	nop
 800e3d2:	3708      	adds	r7, #8
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	e000ed04 	.word	0xe000ed04

0800e3dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e3dc:	b480      	push	{r7}
 800e3de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e3e0:	4b0b      	ldr	r3, [pc, #44]	; (800e410 <vPortSetupTimerInterrupt+0x34>)
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e3e6:	4b0b      	ldr	r3, [pc, #44]	; (800e414 <vPortSetupTimerInterrupt+0x38>)
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e3ec:	4b0a      	ldr	r3, [pc, #40]	; (800e418 <vPortSetupTimerInterrupt+0x3c>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a0a      	ldr	r2, [pc, #40]	; (800e41c <vPortSetupTimerInterrupt+0x40>)
 800e3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3f6:	099b      	lsrs	r3, r3, #6
 800e3f8:	4a09      	ldr	r2, [pc, #36]	; (800e420 <vPortSetupTimerInterrupt+0x44>)
 800e3fa:	3b01      	subs	r3, #1
 800e3fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e3fe:	4b04      	ldr	r3, [pc, #16]	; (800e410 <vPortSetupTimerInterrupt+0x34>)
 800e400:	2207      	movs	r2, #7
 800e402:	601a      	str	r2, [r3, #0]
}
 800e404:	bf00      	nop
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr
 800e40e:	bf00      	nop
 800e410:	e000e010 	.word	0xe000e010
 800e414:	e000e018 	.word	0xe000e018
 800e418:	2000000c 	.word	0x2000000c
 800e41c:	10624dd3 	.word	0x10624dd3
 800e420:	e000e014 	.word	0xe000e014

0800e424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e434 <vPortEnableVFP+0x10>
 800e428:	6801      	ldr	r1, [r0, #0]
 800e42a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e42e:	6001      	str	r1, [r0, #0]
 800e430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e432:	bf00      	nop
 800e434:	e000ed88 	.word	0xe000ed88

0800e438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e43e:	f3ef 8305 	mrs	r3, IPSR
 800e442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2b0f      	cmp	r3, #15
 800e448:	d914      	bls.n	800e474 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e44a:	4a17      	ldr	r2, [pc, #92]	; (800e4a8 <vPortValidateInterruptPriority+0x70>)
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	4413      	add	r3, r2
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e454:	4b15      	ldr	r3, [pc, #84]	; (800e4ac <vPortValidateInterruptPriority+0x74>)
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	7afa      	ldrb	r2, [r7, #11]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d20a      	bcs.n	800e474 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e462:	f383 8811 	msr	BASEPRI, r3
 800e466:	f3bf 8f6f 	isb	sy
 800e46a:	f3bf 8f4f 	dsb	sy
 800e46e:	607b      	str	r3, [r7, #4]
}
 800e470:	bf00      	nop
 800e472:	e7fe      	b.n	800e472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e474:	4b0e      	ldr	r3, [pc, #56]	; (800e4b0 <vPortValidateInterruptPriority+0x78>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e47c:	4b0d      	ldr	r3, [pc, #52]	; (800e4b4 <vPortValidateInterruptPriority+0x7c>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	429a      	cmp	r2, r3
 800e482:	d90a      	bls.n	800e49a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e488:	f383 8811 	msr	BASEPRI, r3
 800e48c:	f3bf 8f6f 	isb	sy
 800e490:	f3bf 8f4f 	dsb	sy
 800e494:	603b      	str	r3, [r7, #0]
}
 800e496:	bf00      	nop
 800e498:	e7fe      	b.n	800e498 <vPortValidateInterruptPriority+0x60>
	}
 800e49a:	bf00      	nop
 800e49c:	3714      	adds	r7, #20
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr
 800e4a6:	bf00      	nop
 800e4a8:	e000e3f0 	.word	0xe000e3f0
 800e4ac:	20005e60 	.word	0x20005e60
 800e4b0:	e000ed0c 	.word	0xe000ed0c
 800e4b4:	20005e64 	.word	0x20005e64

0800e4b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b08a      	sub	sp, #40	; 0x28
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e4c4:	f7fe fc6a 	bl	800cd9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e4c8:	4b5b      	ldr	r3, [pc, #364]	; (800e638 <pvPortMalloc+0x180>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d101      	bne.n	800e4d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e4d0:	f000 f920 	bl	800e714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e4d4:	4b59      	ldr	r3, [pc, #356]	; (800e63c <pvPortMalloc+0x184>)
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4013      	ands	r3, r2
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	f040 8093 	bne.w	800e608 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d01d      	beq.n	800e524 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e4e8:	2208      	movs	r2, #8
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f003 0307 	and.w	r3, r3, #7
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d014      	beq.n	800e524 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f023 0307 	bic.w	r3, r3, #7
 800e500:	3308      	adds	r3, #8
 800e502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f003 0307 	and.w	r3, r3, #7
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00a      	beq.n	800e524 <pvPortMalloc+0x6c>
	__asm volatile
 800e50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e512:	f383 8811 	msr	BASEPRI, r3
 800e516:	f3bf 8f6f 	isb	sy
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	617b      	str	r3, [r7, #20]
}
 800e520:	bf00      	nop
 800e522:	e7fe      	b.n	800e522 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d06e      	beq.n	800e608 <pvPortMalloc+0x150>
 800e52a:	4b45      	ldr	r3, [pc, #276]	; (800e640 <pvPortMalloc+0x188>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	429a      	cmp	r2, r3
 800e532:	d869      	bhi.n	800e608 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e534:	4b43      	ldr	r3, [pc, #268]	; (800e644 <pvPortMalloc+0x18c>)
 800e536:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e538:	4b42      	ldr	r3, [pc, #264]	; (800e644 <pvPortMalloc+0x18c>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e53e:	e004      	b.n	800e54a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e542:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	429a      	cmp	r2, r3
 800e552:	d903      	bls.n	800e55c <pvPortMalloc+0xa4>
 800e554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1f1      	bne.n	800e540 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e55c:	4b36      	ldr	r3, [pc, #216]	; (800e638 <pvPortMalloc+0x180>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e562:	429a      	cmp	r2, r3
 800e564:	d050      	beq.n	800e608 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e566:	6a3b      	ldr	r3, [r7, #32]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2208      	movs	r2, #8
 800e56c:	4413      	add	r3, r2
 800e56e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	6a3b      	ldr	r3, [r7, #32]
 800e576:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57a:	685a      	ldr	r2, [r3, #4]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	1ad2      	subs	r2, r2, r3
 800e580:	2308      	movs	r3, #8
 800e582:	005b      	lsls	r3, r3, #1
 800e584:	429a      	cmp	r2, r3
 800e586:	d91f      	bls.n	800e5c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4413      	add	r3, r2
 800e58e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	f003 0307 	and.w	r3, r3, #7
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00a      	beq.n	800e5b0 <pvPortMalloc+0xf8>
	__asm volatile
 800e59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	613b      	str	r3, [r7, #16]
}
 800e5ac:	bf00      	nop
 800e5ae:	e7fe      	b.n	800e5ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b2:	685a      	ldr	r2, [r3, #4]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	1ad2      	subs	r2, r2, r3
 800e5b8:	69bb      	ldr	r3, [r7, #24]
 800e5ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e5c2:	69b8      	ldr	r0, [r7, #24]
 800e5c4:	f000 f908 	bl	800e7d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e5c8:	4b1d      	ldr	r3, [pc, #116]	; (800e640 <pvPortMalloc+0x188>)
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	4a1b      	ldr	r2, [pc, #108]	; (800e640 <pvPortMalloc+0x188>)
 800e5d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e5d6:	4b1a      	ldr	r3, [pc, #104]	; (800e640 <pvPortMalloc+0x188>)
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	4b1b      	ldr	r3, [pc, #108]	; (800e648 <pvPortMalloc+0x190>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d203      	bcs.n	800e5ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e5e2:	4b17      	ldr	r3, [pc, #92]	; (800e640 <pvPortMalloc+0x188>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a18      	ldr	r2, [pc, #96]	; (800e648 <pvPortMalloc+0x190>)
 800e5e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ec:	685a      	ldr	r2, [r3, #4]
 800e5ee:	4b13      	ldr	r3, [pc, #76]	; (800e63c <pvPortMalloc+0x184>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	431a      	orrs	r2, r3
 800e5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e5fe:	4b13      	ldr	r3, [pc, #76]	; (800e64c <pvPortMalloc+0x194>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	3301      	adds	r3, #1
 800e604:	4a11      	ldr	r2, [pc, #68]	; (800e64c <pvPortMalloc+0x194>)
 800e606:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e608:	f7fe fbd6 	bl	800cdb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	f003 0307 	and.w	r3, r3, #7
 800e612:	2b00      	cmp	r3, #0
 800e614:	d00a      	beq.n	800e62c <pvPortMalloc+0x174>
	__asm volatile
 800e616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61a:	f383 8811 	msr	BASEPRI, r3
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	60fb      	str	r3, [r7, #12]
}
 800e628:	bf00      	nop
 800e62a:	e7fe      	b.n	800e62a <pvPortMalloc+0x172>
	return pvReturn;
 800e62c:	69fb      	ldr	r3, [r7, #28]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3728      	adds	r7, #40	; 0x28
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	20009e70 	.word	0x20009e70
 800e63c:	20009e84 	.word	0x20009e84
 800e640:	20009e74 	.word	0x20009e74
 800e644:	20009e68 	.word	0x20009e68
 800e648:	20009e78 	.word	0x20009e78
 800e64c:	20009e7c 	.word	0x20009e7c

0800e650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b086      	sub	sp, #24
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d04d      	beq.n	800e6fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e662:	2308      	movs	r3, #8
 800e664:	425b      	negs	r3, r3
 800e666:	697a      	ldr	r2, [r7, #20]
 800e668:	4413      	add	r3, r2
 800e66a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	685a      	ldr	r2, [r3, #4]
 800e674:	4b24      	ldr	r3, [pc, #144]	; (800e708 <vPortFree+0xb8>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4013      	ands	r3, r2
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d10a      	bne.n	800e694 <vPortFree+0x44>
	__asm volatile
 800e67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e682:	f383 8811 	msr	BASEPRI, r3
 800e686:	f3bf 8f6f 	isb	sy
 800e68a:	f3bf 8f4f 	dsb	sy
 800e68e:	60fb      	str	r3, [r7, #12]
}
 800e690:	bf00      	nop
 800e692:	e7fe      	b.n	800e692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d00a      	beq.n	800e6b2 <vPortFree+0x62>
	__asm volatile
 800e69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a0:	f383 8811 	msr	BASEPRI, r3
 800e6a4:	f3bf 8f6f 	isb	sy
 800e6a8:	f3bf 8f4f 	dsb	sy
 800e6ac:	60bb      	str	r3, [r7, #8]
}
 800e6ae:	bf00      	nop
 800e6b0:	e7fe      	b.n	800e6b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	685a      	ldr	r2, [r3, #4]
 800e6b6:	4b14      	ldr	r3, [pc, #80]	; (800e708 <vPortFree+0xb8>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4013      	ands	r3, r2
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d01e      	beq.n	800e6fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d11a      	bne.n	800e6fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	685a      	ldr	r2, [r3, #4]
 800e6cc:	4b0e      	ldr	r3, [pc, #56]	; (800e708 <vPortFree+0xb8>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	43db      	mvns	r3, r3
 800e6d2:	401a      	ands	r2, r3
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e6d8:	f7fe fb60 	bl	800cd9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	685a      	ldr	r2, [r3, #4]
 800e6e0:	4b0a      	ldr	r3, [pc, #40]	; (800e70c <vPortFree+0xbc>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4413      	add	r3, r2
 800e6e6:	4a09      	ldr	r2, [pc, #36]	; (800e70c <vPortFree+0xbc>)
 800e6e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e6ea:	6938      	ldr	r0, [r7, #16]
 800e6ec:	f000 f874 	bl	800e7d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e6f0:	4b07      	ldr	r3, [pc, #28]	; (800e710 <vPortFree+0xc0>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	4a06      	ldr	r2, [pc, #24]	; (800e710 <vPortFree+0xc0>)
 800e6f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e6fa:	f7fe fb5d 	bl	800cdb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e6fe:	bf00      	nop
 800e700:	3718      	adds	r7, #24
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20009e84 	.word	0x20009e84
 800e70c:	20009e74 	.word	0x20009e74
 800e710:	20009e80 	.word	0x20009e80

0800e714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e714:	b480      	push	{r7}
 800e716:	b085      	sub	sp, #20
 800e718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e71a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e71e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e720:	4b27      	ldr	r3, [pc, #156]	; (800e7c0 <prvHeapInit+0xac>)
 800e722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f003 0307 	and.w	r3, r3, #7
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00c      	beq.n	800e748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	3307      	adds	r3, #7
 800e732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f023 0307 	bic.w	r3, r3, #7
 800e73a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	1ad3      	subs	r3, r2, r3
 800e742:	4a1f      	ldr	r2, [pc, #124]	; (800e7c0 <prvHeapInit+0xac>)
 800e744:	4413      	add	r3, r2
 800e746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e74c:	4a1d      	ldr	r2, [pc, #116]	; (800e7c4 <prvHeapInit+0xb0>)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e752:	4b1c      	ldr	r3, [pc, #112]	; (800e7c4 <prvHeapInit+0xb0>)
 800e754:	2200      	movs	r2, #0
 800e756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	68ba      	ldr	r2, [r7, #8]
 800e75c:	4413      	add	r3, r2
 800e75e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e760:	2208      	movs	r2, #8
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	1a9b      	subs	r3, r3, r2
 800e766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f023 0307 	bic.w	r3, r3, #7
 800e76e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	4a15      	ldr	r2, [pc, #84]	; (800e7c8 <prvHeapInit+0xb4>)
 800e774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e776:	4b14      	ldr	r3, [pc, #80]	; (800e7c8 <prvHeapInit+0xb4>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2200      	movs	r2, #0
 800e77c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e77e:	4b12      	ldr	r3, [pc, #72]	; (800e7c8 <prvHeapInit+0xb4>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2200      	movs	r2, #0
 800e784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	1ad2      	subs	r2, r2, r3
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e794:	4b0c      	ldr	r3, [pc, #48]	; (800e7c8 <prvHeapInit+0xb4>)
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	4a0a      	ldr	r2, [pc, #40]	; (800e7cc <prvHeapInit+0xb8>)
 800e7a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	4a09      	ldr	r2, [pc, #36]	; (800e7d0 <prvHeapInit+0xbc>)
 800e7aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e7ac:	4b09      	ldr	r3, [pc, #36]	; (800e7d4 <prvHeapInit+0xc0>)
 800e7ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e7b2:	601a      	str	r2, [r3, #0]
}
 800e7b4:	bf00      	nop
 800e7b6:	3714      	adds	r7, #20
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	20005e68 	.word	0x20005e68
 800e7c4:	20009e68 	.word	0x20009e68
 800e7c8:	20009e70 	.word	0x20009e70
 800e7cc:	20009e78 	.word	0x20009e78
 800e7d0:	20009e74 	.word	0x20009e74
 800e7d4:	20009e84 	.word	0x20009e84

0800e7d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b085      	sub	sp, #20
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7e0:	4b28      	ldr	r3, [pc, #160]	; (800e884 <prvInsertBlockIntoFreeList+0xac>)
 800e7e2:	60fb      	str	r3, [r7, #12]
 800e7e4:	e002      	b.n	800e7ec <prvInsertBlockIntoFreeList+0x14>
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	60fb      	str	r3, [r7, #12]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d8f7      	bhi.n	800e7e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	68ba      	ldr	r2, [r7, #8]
 800e800:	4413      	add	r3, r2
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	429a      	cmp	r2, r3
 800e806:	d108      	bne.n	800e81a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	685a      	ldr	r2, [r3, #4]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	441a      	add	r2, r3
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	68ba      	ldr	r2, [r7, #8]
 800e824:	441a      	add	r2, r3
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d118      	bne.n	800e860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	4b15      	ldr	r3, [pc, #84]	; (800e888 <prvInsertBlockIntoFreeList+0xb0>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	429a      	cmp	r2, r3
 800e838:	d00d      	beq.n	800e856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	685a      	ldr	r2, [r3, #4]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	441a      	add	r2, r3
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	601a      	str	r2, [r3, #0]
 800e854:	e008      	b.n	800e868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e856:	4b0c      	ldr	r3, [pc, #48]	; (800e888 <prvInsertBlockIntoFreeList+0xb0>)
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	601a      	str	r2, [r3, #0]
 800e85e:	e003      	b.n	800e868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d002      	beq.n	800e876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e876:	bf00      	nop
 800e878:	3714      	adds	r7, #20
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop
 800e884:	20009e68 	.word	0x20009e68
 800e888:	20009e70 	.word	0x20009e70

0800e88c <rcl_get_zero_initialized_publisher>:
 800e88c:	4b01      	ldr	r3, [pc, #4]	; (800e894 <rcl_get_zero_initialized_publisher+0x8>)
 800e88e:	6818      	ldr	r0, [r3, #0]
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop
 800e894:	0801b82c 	.word	0x0801b82c

0800e898 <rcl_publisher_init>:
 800e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89c:	b091      	sub	sp, #68	; 0x44
 800e89e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e8a0:	b3d7      	cbz	r7, 800e918 <rcl_publisher_init+0x80>
 800e8a2:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	4648      	mov	r0, r9
 800e8aa:	4688      	mov	r8, r1
 800e8ac:	4616      	mov	r6, r2
 800e8ae:	461d      	mov	r5, r3
 800e8b0:	f000 ff32 	bl	800f718 <rcutils_allocator_is_valid>
 800e8b4:	b380      	cbz	r0, 800e918 <rcl_publisher_init+0x80>
 800e8b6:	b37c      	cbz	r4, 800e918 <rcl_publisher_init+0x80>
 800e8b8:	f8d4 a000 	ldr.w	sl, [r4]
 800e8bc:	f1ba 0f00 	cmp.w	sl, #0
 800e8c0:	d004      	beq.n	800e8cc <rcl_publisher_init+0x34>
 800e8c2:	2564      	movs	r5, #100	; 0x64
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	b011      	add	sp, #68	; 0x44
 800e8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8cc:	4640      	mov	r0, r8
 800e8ce:	f006 fe07 	bl	80154e0 <rcl_node_is_valid>
 800e8d2:	b330      	cbz	r0, 800e922 <rcl_publisher_init+0x8a>
 800e8d4:	b306      	cbz	r6, 800e918 <rcl_publisher_init+0x80>
 800e8d6:	b1fd      	cbz	r5, 800e918 <rcl_publisher_init+0x80>
 800e8d8:	46ce      	mov	lr, r9
 800e8da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e8de:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800e8e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e8e6:	f8de 3000 	ldr.w	r3, [lr]
 800e8ea:	f8cc 3000 	str.w	r3, [ip]
 800e8ee:	f000 ff4f 	bl	800f790 <rcutils_get_zero_initialized_string_map>
 800e8f2:	ab10      	add	r3, sp, #64	; 0x40
 800e8f4:	4684      	mov	ip, r0
 800e8f6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e8fa:	f8cd c020 	str.w	ip, [sp, #32]
 800e8fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e902:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800e906:	4651      	mov	r1, sl
 800e908:	a808      	add	r0, sp, #32
 800e90a:	f000 ffbb 	bl	800f884 <rcutils_string_map_init>
 800e90e:	b150      	cbz	r0, 800e926 <rcl_publisher_init+0x8e>
 800e910:	280a      	cmp	r0, #10
 800e912:	d013      	beq.n	800e93c <rcl_publisher_init+0xa4>
 800e914:	2501      	movs	r5, #1
 800e916:	e7d5      	b.n	800e8c4 <rcl_publisher_init+0x2c>
 800e918:	250b      	movs	r5, #11
 800e91a:	4628      	mov	r0, r5
 800e91c:	b011      	add	sp, #68	; 0x44
 800e91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e922:	25c8      	movs	r5, #200	; 0xc8
 800e924:	e7ce      	b.n	800e8c4 <rcl_publisher_init+0x2c>
 800e926:	a808      	add	r0, sp, #32
 800e928:	f006 fa10 	bl	8014d4c <rcl_get_default_topic_name_substitutions>
 800e92c:	4682      	mov	sl, r0
 800e92e:	b138      	cbz	r0, 800e940 <rcl_publisher_init+0xa8>
 800e930:	a808      	add	r0, sp, #32
 800e932:	f000 ffe7 	bl	800f904 <rcutils_string_map_fini>
 800e936:	f1ba 0f0a 	cmp.w	sl, #10
 800e93a:	d1eb      	bne.n	800e914 <rcl_publisher_init+0x7c>
 800e93c:	250a      	movs	r5, #10
 800e93e:	e7c1      	b.n	800e8c4 <rcl_publisher_init+0x2c>
 800e940:	4640      	mov	r0, r8
 800e942:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e946:	f006 fdd5 	bl	80154f4 <rcl_node_get_name>
 800e94a:	4682      	mov	sl, r0
 800e94c:	4640      	mov	r0, r8
 800e94e:	f006 fdd9 	bl	8015504 <rcl_node_get_namespace>
 800e952:	4686      	mov	lr, r0
 800e954:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e958:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800e95c:	46ec      	mov	ip, sp
 800e95e:	f8cd b014 	str.w	fp, [sp, #20]
 800e962:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e966:	f8d9 3000 	ldr.w	r3, [r9]
 800e96a:	f8cc 3000 	str.w	r3, [ip]
 800e96e:	4628      	mov	r0, r5
 800e970:	4651      	mov	r1, sl
 800e972:	4672      	mov	r2, lr
 800e974:	ab08      	add	r3, sp, #32
 800e976:	f006 f883 	bl	8014a80 <rcl_expand_topic_name>
 800e97a:	4605      	mov	r5, r0
 800e97c:	a808      	add	r0, sp, #32
 800e97e:	f000 ffc1 	bl	800f904 <rcutils_string_map_fini>
 800e982:	b920      	cbnz	r0, 800e98e <rcl_publisher_init+0xf6>
 800e984:	b15d      	cbz	r5, 800e99e <rcl_publisher_init+0x106>
 800e986:	2d67      	cmp	r5, #103	; 0x67
 800e988:	d002      	beq.n	800e990 <rcl_publisher_init+0xf8>
 800e98a:	2d69      	cmp	r5, #105	; 0x69
 800e98c:	d05f      	beq.n	800ea4e <rcl_publisher_init+0x1b6>
 800e98e:	2501      	movs	r5, #1
 800e990:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e992:	2800      	cmp	r0, #0
 800e994:	d096      	beq.n	800e8c4 <rcl_publisher_init+0x2c>
 800e996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e998:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e99a:	4798      	blx	r3
 800e99c:	e792      	b.n	800e8c4 <rcl_publisher_init+0x2c>
 800e99e:	4640      	mov	r0, r8
 800e9a0:	f006 fdb8 	bl	8015514 <rcl_node_get_options>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	d0f2      	beq.n	800e98e <rcl_publisher_init+0xf6>
 800e9a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9aa:	f7f1 fc23 	bl	80001f4 <strlen>
 800e9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9b0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e9b2:	3001      	adds	r0, #1
 800e9b4:	4798      	blx	r3
 800e9b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9b8:	9107      	str	r1, [sp, #28]
 800e9ba:	4681      	mov	r9, r0
 800e9bc:	4608      	mov	r0, r1
 800e9be:	f7f1 fc19 	bl	80001f4 <strlen>
 800e9c2:	9907      	ldr	r1, [sp, #28]
 800e9c4:	1c42      	adds	r2, r0, #1
 800e9c6:	4648      	mov	r0, r9
 800e9c8:	f00b fec9 	bl	801a75e <memcpy>
 800e9cc:	462a      	mov	r2, r5
 800e9ce:	4648      	mov	r0, r9
 800e9d0:	a90a      	add	r1, sp, #40	; 0x28
 800e9d2:	f001 f875 	bl	800fac0 <rmw_validate_full_topic_name>
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d137      	bne.n	800ea4a <rcl_publisher_init+0x1b2>
 800e9da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d138      	bne.n	800ea52 <rcl_publisher_init+0x1ba>
 800e9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e9e4:	20c0      	movs	r0, #192	; 0xc0
 800e9e6:	4798      	blx	r3
 800e9e8:	6020      	str	r0, [r4, #0]
 800e9ea:	b3a0      	cbz	r0, 800ea56 <rcl_publisher_init+0x1be>
 800e9ec:	4640      	mov	r0, r8
 800e9ee:	f006 fd99 	bl	8015524 <rcl_node_get_rmw_handle>
 800e9f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	4631      	mov	r1, r6
 800e9fa:	463b      	mov	r3, r7
 800e9fc:	464a      	mov	r2, r9
 800e9fe:	6825      	ldr	r5, [r4, #0]
 800ea00:	f001 f95e 	bl	800fcc0 <rmw_create_publisher>
 800ea04:	6821      	ldr	r1, [r4, #0]
 800ea06:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800ea0a:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800ea0e:	b388      	cbz	r0, 800ea74 <rcl_publisher_init+0x1dc>
 800ea10:	3168      	adds	r1, #104	; 0x68
 800ea12:	f001 fa33 	bl	800fe7c <rmw_publisher_get_actual_qos>
 800ea16:	6823      	ldr	r3, [r4, #0]
 800ea18:	4605      	mov	r5, r0
 800ea1a:	b9f0      	cbnz	r0, 800ea5a <rcl_publisher_init+0x1c2>
 800ea1c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800ea20:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800ea24:	4618      	mov	r0, r3
 800ea26:	2268      	movs	r2, #104	; 0x68
 800ea28:	4639      	mov	r1, r7
 800ea2a:	f00b fe98 	bl	801a75e <memcpy>
 800ea2e:	f8d8 2000 	ldr.w	r2, [r8]
 800ea32:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800ea36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea38:	b110      	cbz	r0, 800ea40 <rcl_publisher_init+0x1a8>
 800ea3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea3c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea3e:	4798      	blx	r3
 800ea40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea42:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea44:	4648      	mov	r0, r9
 800ea46:	4798      	blx	r3
 800ea48:	e73c      	b.n	800e8c4 <rcl_publisher_init+0x2c>
 800ea4a:	2501      	movs	r5, #1
 800ea4c:	e7f3      	b.n	800ea36 <rcl_publisher_init+0x19e>
 800ea4e:	2567      	movs	r5, #103	; 0x67
 800ea50:	e79e      	b.n	800e990 <rcl_publisher_init+0xf8>
 800ea52:	2567      	movs	r5, #103	; 0x67
 800ea54:	e7ef      	b.n	800ea36 <rcl_publisher_init+0x19e>
 800ea56:	250a      	movs	r5, #10
 800ea58:	e7ed      	b.n	800ea36 <rcl_publisher_init+0x19e>
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d0f5      	beq.n	800ea4a <rcl_publisher_init+0x1b2>
 800ea5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ea62:	b13b      	cbz	r3, 800ea74 <rcl_publisher_init+0x1dc>
 800ea64:	4640      	mov	r0, r8
 800ea66:	f006 fd5d 	bl	8015524 <rcl_node_get_rmw_handle>
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ea70:	f001 fa06 	bl	800fe80 <rmw_destroy_publisher>
 800ea74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea76:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea78:	6820      	ldr	r0, [r4, #0]
 800ea7a:	4798      	blx	r3
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	6023      	str	r3, [r4, #0]
 800ea80:	2501      	movs	r5, #1
 800ea82:	e7d8      	b.n	800ea36 <rcl_publisher_init+0x19e>

0800ea84 <rcl_publisher_get_default_options>:
 800ea84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea86:	4f0e      	ldr	r7, [pc, #56]	; (800eac0 <rcl_publisher_get_default_options+0x3c>)
 800ea88:	490e      	ldr	r1, [pc, #56]	; (800eac4 <rcl_publisher_get_default_options+0x40>)
 800ea8a:	b087      	sub	sp, #28
 800ea8c:	4606      	mov	r6, r0
 800ea8e:	2250      	movs	r2, #80	; 0x50
 800ea90:	4638      	mov	r0, r7
 800ea92:	f00b fe64 	bl	801a75e <memcpy>
 800ea96:	466c      	mov	r4, sp
 800ea98:	4668      	mov	r0, sp
 800ea9a:	f000 fe2f 	bl	800f6fc <rcutils_get_default_allocator>
 800ea9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eaa0:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800eaa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eaa6:	6823      	ldr	r3, [r4, #0]
 800eaa8:	602b      	str	r3, [r5, #0]
 800eaaa:	f000 fff1 	bl	800fa90 <rmw_get_default_publisher_options>
 800eaae:	4639      	mov	r1, r7
 800eab0:	6678      	str	r0, [r7, #100]	; 0x64
 800eab2:	2268      	movs	r2, #104	; 0x68
 800eab4:	4630      	mov	r0, r6
 800eab6:	f00b fe52 	bl	801a75e <memcpy>
 800eaba:	4630      	mov	r0, r6
 800eabc:	b007      	add	sp, #28
 800eabe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eac0:	20009e88 	.word	0x20009e88
 800eac4:	0801b830 	.word	0x0801b830

0800eac8 <rcl_publish>:
 800eac8:	b1f8      	cbz	r0, 800eb0a <rcl_publish+0x42>
 800eaca:	6803      	ldr	r3, [r0, #0]
 800eacc:	b570      	push	{r4, r5, r6, lr}
 800eace:	4604      	mov	r4, r0
 800ead0:	b1b3      	cbz	r3, 800eb00 <rcl_publish+0x38>
 800ead2:	4616      	mov	r6, r2
 800ead4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800ead8:	b192      	cbz	r2, 800eb00 <rcl_publish+0x38>
 800eada:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800eade:	460d      	mov	r5, r1
 800eae0:	f005 ff64 	bl	80149ac <rcl_context_is_valid>
 800eae4:	b160      	cbz	r0, 800eb00 <rcl_publish+0x38>
 800eae6:	6823      	ldr	r3, [r4, #0]
 800eae8:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800eaec:	b140      	cbz	r0, 800eb00 <rcl_publish+0x38>
 800eaee:	b155      	cbz	r5, 800eb06 <rcl_publish+0x3e>
 800eaf0:	4632      	mov	r2, r6
 800eaf2:	4629      	mov	r1, r5
 800eaf4:	f001 f884 	bl	800fc00 <rmw_publish>
 800eaf8:	3800      	subs	r0, #0
 800eafa:	bf18      	it	ne
 800eafc:	2001      	movne	r0, #1
 800eafe:	bd70      	pop	{r4, r5, r6, pc}
 800eb00:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800eb04:	bd70      	pop	{r4, r5, r6, pc}
 800eb06:	200b      	movs	r0, #11
 800eb08:	bd70      	pop	{r4, r5, r6, pc}
 800eb0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800eb0e:	4770      	bx	lr

0800eb10 <rcl_get_zero_initialized_subscription>:
 800eb10:	4b01      	ldr	r3, [pc, #4]	; (800eb18 <rcl_get_zero_initialized_subscription+0x8>)
 800eb12:	6818      	ldr	r0, [r3, #0]
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop
 800eb18:	0801b880 	.word	0x0801b880

0800eb1c <rcl_subscription_init>:
 800eb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb20:	b091      	sub	sp, #68	; 0x44
 800eb22:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800eb24:	b1d7      	cbz	r7, 800eb5c <rcl_subscription_init+0x40>
 800eb26:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800eb2a:	4604      	mov	r4, r0
 800eb2c:	4648      	mov	r0, r9
 800eb2e:	4688      	mov	r8, r1
 800eb30:	4616      	mov	r6, r2
 800eb32:	461d      	mov	r5, r3
 800eb34:	f000 fdf0 	bl	800f718 <rcutils_allocator_is_valid>
 800eb38:	b180      	cbz	r0, 800eb5c <rcl_subscription_init+0x40>
 800eb3a:	b17c      	cbz	r4, 800eb5c <rcl_subscription_init+0x40>
 800eb3c:	4640      	mov	r0, r8
 800eb3e:	f006 fccf 	bl	80154e0 <rcl_node_is_valid>
 800eb42:	b380      	cbz	r0, 800eba6 <rcl_subscription_init+0x8a>
 800eb44:	b156      	cbz	r6, 800eb5c <rcl_subscription_init+0x40>
 800eb46:	b14d      	cbz	r5, 800eb5c <rcl_subscription_init+0x40>
 800eb48:	f8d4 a000 	ldr.w	sl, [r4]
 800eb4c:	f1ba 0f00 	cmp.w	sl, #0
 800eb50:	d009      	beq.n	800eb66 <rcl_subscription_init+0x4a>
 800eb52:	2564      	movs	r5, #100	; 0x64
 800eb54:	4628      	mov	r0, r5
 800eb56:	b011      	add	sp, #68	; 0x44
 800eb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb5c:	250b      	movs	r5, #11
 800eb5e:	4628      	mov	r0, r5
 800eb60:	b011      	add	sp, #68	; 0x44
 800eb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb66:	46ce      	mov	lr, r9
 800eb68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb6c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800eb70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb74:	f8de 3000 	ldr.w	r3, [lr]
 800eb78:	f8cc 3000 	str.w	r3, [ip]
 800eb7c:	f000 fe08 	bl	800f790 <rcutils_get_zero_initialized_string_map>
 800eb80:	ab10      	add	r3, sp, #64	; 0x40
 800eb82:	4684      	mov	ip, r0
 800eb84:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800eb88:	f8cd c020 	str.w	ip, [sp, #32]
 800eb8c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eb90:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800eb94:	4651      	mov	r1, sl
 800eb96:	a808      	add	r0, sp, #32
 800eb98:	f000 fe74 	bl	800f884 <rcutils_string_map_init>
 800eb9c:	b140      	cbz	r0, 800ebb0 <rcl_subscription_init+0x94>
 800eb9e:	280a      	cmp	r0, #10
 800eba0:	d011      	beq.n	800ebc6 <rcl_subscription_init+0xaa>
 800eba2:	2501      	movs	r5, #1
 800eba4:	e7db      	b.n	800eb5e <rcl_subscription_init+0x42>
 800eba6:	25c8      	movs	r5, #200	; 0xc8
 800eba8:	4628      	mov	r0, r5
 800ebaa:	b011      	add	sp, #68	; 0x44
 800ebac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb0:	a808      	add	r0, sp, #32
 800ebb2:	f006 f8cb 	bl	8014d4c <rcl_get_default_topic_name_substitutions>
 800ebb6:	4682      	mov	sl, r0
 800ebb8:	b138      	cbz	r0, 800ebca <rcl_subscription_init+0xae>
 800ebba:	a808      	add	r0, sp, #32
 800ebbc:	f000 fea2 	bl	800f904 <rcutils_string_map_fini>
 800ebc0:	f1ba 0f0a 	cmp.w	sl, #10
 800ebc4:	d1ed      	bne.n	800eba2 <rcl_subscription_init+0x86>
 800ebc6:	250a      	movs	r5, #10
 800ebc8:	e7c9      	b.n	800eb5e <rcl_subscription_init+0x42>
 800ebca:	4640      	mov	r0, r8
 800ebcc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ebd0:	f006 fc90 	bl	80154f4 <rcl_node_get_name>
 800ebd4:	4682      	mov	sl, r0
 800ebd6:	4640      	mov	r0, r8
 800ebd8:	f006 fc94 	bl	8015504 <rcl_node_get_namespace>
 800ebdc:	4686      	mov	lr, r0
 800ebde:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ebe2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800ebe6:	46ec      	mov	ip, sp
 800ebe8:	f8cd b014 	str.w	fp, [sp, #20]
 800ebec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebf0:	f8d9 3000 	ldr.w	r3, [r9]
 800ebf4:	f8cc 3000 	str.w	r3, [ip]
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	4651      	mov	r1, sl
 800ebfc:	4672      	mov	r2, lr
 800ebfe:	ab08      	add	r3, sp, #32
 800ec00:	f005 ff3e 	bl	8014a80 <rcl_expand_topic_name>
 800ec04:	4605      	mov	r5, r0
 800ec06:	a808      	add	r0, sp, #32
 800ec08:	f000 fe7c 	bl	800f904 <rcutils_string_map_fini>
 800ec0c:	b920      	cbnz	r0, 800ec18 <rcl_subscription_init+0xfc>
 800ec0e:	b15d      	cbz	r5, 800ec28 <rcl_subscription_init+0x10c>
 800ec10:	2d67      	cmp	r5, #103	; 0x67
 800ec12:	d002      	beq.n	800ec1a <rcl_subscription_init+0xfe>
 800ec14:	2d69      	cmp	r5, #105	; 0x69
 800ec16:	d05a      	beq.n	800ecce <rcl_subscription_init+0x1b2>
 800ec18:	2501      	movs	r5, #1
 800ec1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	d09e      	beq.n	800eb5e <rcl_subscription_init+0x42>
 800ec20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec24:	4798      	blx	r3
 800ec26:	e79a      	b.n	800eb5e <rcl_subscription_init+0x42>
 800ec28:	4640      	mov	r0, r8
 800ec2a:	f006 fc73 	bl	8015514 <rcl_node_get_options>
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	d0f2      	beq.n	800ec18 <rcl_subscription_init+0xfc>
 800ec32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec34:	f7f1 fade 	bl	80001f4 <strlen>
 800ec38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec3a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec3c:	3001      	adds	r0, #1
 800ec3e:	4798      	blx	r3
 800ec40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec42:	9107      	str	r1, [sp, #28]
 800ec44:	4681      	mov	r9, r0
 800ec46:	4608      	mov	r0, r1
 800ec48:	f7f1 fad4 	bl	80001f4 <strlen>
 800ec4c:	9907      	ldr	r1, [sp, #28]
 800ec4e:	1c42      	adds	r2, r0, #1
 800ec50:	4648      	mov	r0, r9
 800ec52:	f00b fd84 	bl	801a75e <memcpy>
 800ec56:	462a      	mov	r2, r5
 800ec58:	4648      	mov	r0, r9
 800ec5a:	a90a      	add	r1, sp, #40	; 0x28
 800ec5c:	f000 ff30 	bl	800fac0 <rmw_validate_full_topic_name>
 800ec60:	2800      	cmp	r0, #0
 800ec62:	d132      	bne.n	800ecca <rcl_subscription_init+0x1ae>
 800ec64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d133      	bne.n	800ecd2 <rcl_subscription_init+0x1b6>
 800ec6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec6c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec6e:	20c8      	movs	r0, #200	; 0xc8
 800ec70:	4798      	blx	r3
 800ec72:	6020      	str	r0, [r4, #0]
 800ec74:	b378      	cbz	r0, 800ecd6 <rcl_subscription_init+0x1ba>
 800ec76:	4640      	mov	r0, r8
 800ec78:	f006 fc54 	bl	8015524 <rcl_node_get_rmw_handle>
 800ec7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ec80:	9300      	str	r3, [sp, #0]
 800ec82:	4631      	mov	r1, r6
 800ec84:	463b      	mov	r3, r7
 800ec86:	464a      	mov	r2, r9
 800ec88:	6825      	ldr	r5, [r4, #0]
 800ec8a:	f001 f949 	bl	800ff20 <rmw_create_subscription>
 800ec8e:	6821      	ldr	r1, [r4, #0]
 800ec90:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800ec94:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800ec98:	b368      	cbz	r0, 800ecf6 <rcl_subscription_init+0x1da>
 800ec9a:	3170      	adds	r1, #112	; 0x70
 800ec9c:	f001 fa20 	bl	80100e0 <rmw_subscription_get_actual_qos>
 800eca0:	4605      	mov	r5, r0
 800eca2:	b9d0      	cbnz	r0, 800ecda <rcl_subscription_init+0x1be>
 800eca4:	6820      	ldr	r0, [r4, #0]
 800eca6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ecaa:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800ecae:	2270      	movs	r2, #112	; 0x70
 800ecb0:	4639      	mov	r1, r7
 800ecb2:	f00b fd54 	bl	801a75e <memcpy>
 800ecb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecb8:	b110      	cbz	r0, 800ecc0 <rcl_subscription_init+0x1a4>
 800ecba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecbc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ecbe:	4798      	blx	r3
 800ecc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecc2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ecc4:	4648      	mov	r0, r9
 800ecc6:	4798      	blx	r3
 800ecc8:	e749      	b.n	800eb5e <rcl_subscription_init+0x42>
 800ecca:	2501      	movs	r5, #1
 800eccc:	e7f3      	b.n	800ecb6 <rcl_subscription_init+0x19a>
 800ecce:	2567      	movs	r5, #103	; 0x67
 800ecd0:	e7a3      	b.n	800ec1a <rcl_subscription_init+0xfe>
 800ecd2:	2567      	movs	r5, #103	; 0x67
 800ecd4:	e7ef      	b.n	800ecb6 <rcl_subscription_init+0x19a>
 800ecd6:	250a      	movs	r5, #10
 800ecd8:	e7ed      	b.n	800ecb6 <rcl_subscription_init+0x19a>
 800ecda:	6823      	ldr	r3, [r4, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d0f4      	beq.n	800ecca <rcl_subscription_init+0x1ae>
 800ece0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ece4:	b13b      	cbz	r3, 800ecf6 <rcl_subscription_init+0x1da>
 800ece6:	4640      	mov	r0, r8
 800ece8:	f006 fc1c 	bl	8015524 <rcl_node_get_rmw_handle>
 800ecec:	6823      	ldr	r3, [r4, #0]
 800ecee:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800ecf2:	f001 f9f7 	bl	80100e4 <rmw_destroy_subscription>
 800ecf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecf8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ecfa:	6820      	ldr	r0, [r4, #0]
 800ecfc:	4798      	blx	r3
 800ecfe:	2300      	movs	r3, #0
 800ed00:	6023      	str	r3, [r4, #0]
 800ed02:	2501      	movs	r5, #1
 800ed04:	e7d7      	b.n	800ecb6 <rcl_subscription_init+0x19a>
 800ed06:	bf00      	nop

0800ed08 <rcl_subscription_get_default_options>:
 800ed08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed0c:	4f12      	ldr	r7, [pc, #72]	; (800ed58 <rcl_subscription_get_default_options+0x50>)
 800ed0e:	4913      	ldr	r1, [pc, #76]	; (800ed5c <rcl_subscription_get_default_options+0x54>)
 800ed10:	b088      	sub	sp, #32
 800ed12:	4606      	mov	r6, r0
 800ed14:	2250      	movs	r2, #80	; 0x50
 800ed16:	4638      	mov	r0, r7
 800ed18:	f00b fd21 	bl	801a75e <memcpy>
 800ed1c:	ac02      	add	r4, sp, #8
 800ed1e:	a802      	add	r0, sp, #8
 800ed20:	f000 fcec 	bl	800f6fc <rcutils_get_default_allocator>
 800ed24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed26:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ed2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed2c:	46e8      	mov	r8, sp
 800ed2e:	6823      	ldr	r3, [r4, #0]
 800ed30:	602b      	str	r3, [r5, #0]
 800ed32:	4640      	mov	r0, r8
 800ed34:	f000 feae 	bl	800fa94 <rmw_get_default_subscription_options>
 800ed38:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ed3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ed40:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed44:	2270      	movs	r2, #112	; 0x70
 800ed46:	4639      	mov	r1, r7
 800ed48:	4630      	mov	r0, r6
 800ed4a:	f00b fd08 	bl	801a75e <memcpy>
 800ed4e:	4630      	mov	r0, r6
 800ed50:	b008      	add	sp, #32
 800ed52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed56:	bf00      	nop
 800ed58:	20009ef0 	.word	0x20009ef0
 800ed5c:	0801b888 	.word	0x0801b888

0800ed60 <rcl_take>:
 800ed60:	2800      	cmp	r0, #0
 800ed62:	d03f      	beq.n	800ede4 <rcl_take+0x84>
 800ed64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed68:	4617      	mov	r7, r2
 800ed6a:	6802      	ldr	r2, [r0, #0]
 800ed6c:	b09d      	sub	sp, #116	; 0x74
 800ed6e:	4606      	mov	r6, r0
 800ed70:	b382      	cbz	r2, 800edd4 <rcl_take+0x74>
 800ed72:	4699      	mov	r9, r3
 800ed74:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800ed78:	b363      	cbz	r3, 800edd4 <rcl_take+0x74>
 800ed7a:	4688      	mov	r8, r1
 800ed7c:	b381      	cbz	r1, 800ede0 <rcl_take+0x80>
 800ed7e:	2f00      	cmp	r7, #0
 800ed80:	d034      	beq.n	800edec <rcl_take+0x8c>
 800ed82:	a802      	add	r0, sp, #8
 800ed84:	ac02      	add	r4, sp, #8
 800ed86:	f000 fe89 	bl	800fa9c <rmw_get_zero_initialized_message_info>
 800ed8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed8c:	463d      	mov	r5, r7
 800ed8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ed98:	6834      	ldr	r4, [r6, #0]
 800ed9a:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800ed9e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800eda2:	2400      	movs	r4, #0
 800eda4:	463b      	mov	r3, r7
 800eda6:	4630      	mov	r0, r6
 800eda8:	f8cd 9000 	str.w	r9, [sp]
 800edac:	4641      	mov	r1, r8
 800edae:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800edb2:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800edb6:	f001 f9f3 	bl	80101a0 <rmw_take_with_info>
 800edba:	4603      	mov	r3, r0
 800edbc:	b9c0      	cbnz	r0, 800edf0 <rcl_take+0x90>
 800edbe:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800edc2:	f240 1291 	movw	r2, #401	; 0x191
 800edc6:	2900      	cmp	r1, #0
 800edc8:	bf08      	it	eq
 800edca:	4613      	moveq	r3, r2
 800edcc:	4618      	mov	r0, r3
 800edce:	b01d      	add	sp, #116	; 0x74
 800edd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edd4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800edd8:	4618      	mov	r0, r3
 800edda:	b01d      	add	sp, #116	; 0x74
 800eddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ede0:	230b      	movs	r3, #11
 800ede2:	e7f3      	b.n	800edcc <rcl_take+0x6c>
 800ede4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ede8:	4618      	mov	r0, r3
 800edea:	4770      	bx	lr
 800edec:	af10      	add	r7, sp, #64	; 0x40
 800edee:	e7c8      	b.n	800ed82 <rcl_take+0x22>
 800edf0:	f005 fdbe 	bl	8014970 <rcl_convert_rmw_ret_to_rcl_ret>
 800edf4:	4603      	mov	r3, r0
 800edf6:	e7e9      	b.n	800edcc <rcl_take+0x6c>

0800edf8 <rcl_subscription_get_rmw_handle>:
 800edf8:	b118      	cbz	r0, 800ee02 <rcl_subscription_get_rmw_handle+0xa>
 800edfa:	6800      	ldr	r0, [r0, #0]
 800edfc:	b108      	cbz	r0, 800ee02 <rcl_subscription_get_rmw_handle+0xa>
 800edfe:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800ee02:	4770      	bx	lr

0800ee04 <_rclc_check_for_new_data>:
 800ee04:	b1e0      	cbz	r0, 800ee40 <_rclc_check_for_new_data+0x3c>
 800ee06:	7803      	ldrb	r3, [r0, #0]
 800ee08:	2b08      	cmp	r3, #8
 800ee0a:	d81b      	bhi.n	800ee44 <_rclc_check_for_new_data+0x40>
 800ee0c:	e8df f003 	tbb	[pc, r3]
 800ee10:	12161010 	.word	0x12161010
 800ee14:	05050512 	.word	0x05050512
 800ee18:	14          	.byte	0x14
 800ee19:	00          	.byte	0x00
 800ee1a:	6a0b      	ldr	r3, [r1, #32]
 800ee1c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ee1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee22:	3b00      	subs	r3, #0
 800ee24:	bf18      	it	ne
 800ee26:	2301      	movne	r3, #1
 800ee28:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ee2c:	2000      	movs	r0, #0
 800ee2e:	4770      	bx	lr
 800ee30:	680b      	ldr	r3, [r1, #0]
 800ee32:	e7f3      	b.n	800ee1c <_rclc_check_for_new_data+0x18>
 800ee34:	698b      	ldr	r3, [r1, #24]
 800ee36:	e7f1      	b.n	800ee1c <_rclc_check_for_new_data+0x18>
 800ee38:	688b      	ldr	r3, [r1, #8]
 800ee3a:	e7ef      	b.n	800ee1c <_rclc_check_for_new_data+0x18>
 800ee3c:	690b      	ldr	r3, [r1, #16]
 800ee3e:	e7ed      	b.n	800ee1c <_rclc_check_for_new_data+0x18>
 800ee40:	200b      	movs	r0, #11
 800ee42:	4770      	bx	lr
 800ee44:	2300      	movs	r3, #0
 800ee46:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ee4a:	2001      	movs	r0, #1
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop

0800ee50 <_rclc_take_new_data>:
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d049      	beq.n	800eee8 <_rclc_take_new_data+0x98>
 800ee54:	b510      	push	{r4, lr}
 800ee56:	7803      	ldrb	r3, [r0, #0]
 800ee58:	b08e      	sub	sp, #56	; 0x38
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	2b08      	cmp	r3, #8
 800ee5e:	d84a      	bhi.n	800eef6 <_rclc_take_new_data+0xa6>
 800ee60:	e8df f003 	tbb	[pc, r3]
 800ee64:	2b121515 	.word	0x2b121515
 800ee68:	0505052b 	.word	0x0505052b
 800ee6c:	12          	.byte	0x12
 800ee6d:	00          	.byte	0x00
 800ee6e:	6a0b      	ldr	r3, [r1, #32]
 800ee70:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ee72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee76:	b13b      	cbz	r3, 800ee88 <_rclc_take_new_data+0x38>
 800ee78:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ee7c:	f104 0110 	add.w	r1, r4, #16
 800ee80:	f006 fc8a 	bl	8015798 <rcl_take_request>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d131      	bne.n	800eeec <_rclc_take_new_data+0x9c>
 800ee88:	2000      	movs	r0, #0
 800ee8a:	b00e      	add	sp, #56	; 0x38
 800ee8c:	bd10      	pop	{r4, pc}
 800ee8e:	680b      	ldr	r3, [r1, #0]
 800ee90:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ee92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d0f6      	beq.n	800ee88 <_rclc_take_new_data+0x38>
 800ee9a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ee9e:	2300      	movs	r3, #0
 800eea0:	aa02      	add	r2, sp, #8
 800eea2:	f7ff ff5d 	bl	800ed60 <rcl_take>
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d0ef      	beq.n	800ee8a <_rclc_take_new_data+0x3a>
 800eeaa:	f240 1391 	movw	r3, #401	; 0x191
 800eeae:	4298      	cmp	r0, r3
 800eeb0:	d115      	bne.n	800eede <_rclc_take_new_data+0x8e>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800eeb8:	e7e7      	b.n	800ee8a <_rclc_take_new_data+0x3a>
 800eeba:	698b      	ldr	r3, [r1, #24]
 800eebc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d0e0      	beq.n	800ee88 <_rclc_take_new_data+0x38>
 800eec6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800eeca:	f104 0110 	add.w	r1, r4, #16
 800eece:	f005 fd13 	bl	80148f8 <rcl_take_response>
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d0d8      	beq.n	800ee88 <_rclc_take_new_data+0x38>
 800eed6:	f240 13f5 	movw	r3, #501	; 0x1f5
 800eeda:	4298      	cmp	r0, r3
 800eedc:	d0d5      	beq.n	800ee8a <_rclc_take_new_data+0x3a>
 800eede:	9001      	str	r0, [sp, #4]
 800eee0:	f000 fc3e 	bl	800f760 <rcutils_reset_error>
 800eee4:	9801      	ldr	r0, [sp, #4]
 800eee6:	e7d0      	b.n	800ee8a <_rclc_take_new_data+0x3a>
 800eee8:	200b      	movs	r0, #11
 800eeea:	4770      	bx	lr
 800eeec:	f240 2359 	movw	r3, #601	; 0x259
 800eef0:	4298      	cmp	r0, r3
 800eef2:	d0de      	beq.n	800eeb2 <_rclc_take_new_data+0x62>
 800eef4:	e7f3      	b.n	800eede <_rclc_take_new_data+0x8e>
 800eef6:	2001      	movs	r0, #1
 800eef8:	e7c7      	b.n	800ee8a <_rclc_take_new_data+0x3a>
 800eefa:	bf00      	nop

0800eefc <rclc_executor_trigger_any>:
 800eefc:	b170      	cbz	r0, 800ef1c <rclc_executor_trigger_any+0x20>
 800eefe:	b179      	cbz	r1, 800ef20 <rclc_executor_trigger_any+0x24>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2200      	movs	r2, #0
 800ef04:	e005      	b.n	800ef12 <rclc_executor_trigger_any+0x16>
 800ef06:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800ef0a:	3340      	adds	r3, #64	; 0x40
 800ef0c:	b930      	cbnz	r0, 800ef1c <rclc_executor_trigger_any+0x20>
 800ef0e:	4291      	cmp	r1, r2
 800ef10:	d005      	beq.n	800ef1e <rclc_executor_trigger_any+0x22>
 800ef12:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800ef16:	3201      	adds	r2, #1
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d1f4      	bne.n	800ef06 <rclc_executor_trigger_any+0xa>
 800ef1c:	4770      	bx	lr
 800ef1e:	4770      	bx	lr
 800ef20:	4608      	mov	r0, r1
 800ef22:	e7fb      	b.n	800ef1c <rclc_executor_trigger_any+0x20>

0800ef24 <_rclc_execute.part.0>:
 800ef24:	b530      	push	{r4, r5, lr}
 800ef26:	7803      	ldrb	r3, [r0, #0]
 800ef28:	b083      	sub	sp, #12
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	2b08      	cmp	r3, #8
 800ef2e:	d85b      	bhi.n	800efe8 <_rclc_execute.part.0+0xc4>
 800ef30:	e8df f003 	tbb	[pc, r3]
 800ef34:	3036271f 	.word	0x3036271f
 800ef38:	0505053f 	.word	0x0505053f
 800ef3c:	1a          	.byte	0x1a
 800ef3d:	00          	.byte	0x00
 800ef3e:	2b06      	cmp	r3, #6
 800ef40:	d049      	beq.n	800efd6 <_rclc_execute.part.0+0xb2>
 800ef42:	2b07      	cmp	r3, #7
 800ef44:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef46:	d140      	bne.n	800efca <_rclc_execute.part.0+0xa6>
 800ef48:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800ef4c:	6880      	ldr	r0, [r0, #8]
 800ef4e:	4798      	blx	r3
 800ef50:	f104 0110 	add.w	r1, r4, #16
 800ef54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ef56:	6860      	ldr	r0, [r4, #4]
 800ef58:	f006 fc56 	bl	8015808 <rcl_send_response>
 800ef5c:	b138      	cbz	r0, 800ef6e <_rclc_execute.part.0+0x4a>
 800ef5e:	9001      	str	r0, [sp, #4]
 800ef60:	f000 fbfe 	bl	800f760 <rcutils_reset_error>
 800ef64:	9801      	ldr	r0, [sp, #4]
 800ef66:	e002      	b.n	800ef6e <_rclc_execute.part.0+0x4a>
 800ef68:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef6a:	4798      	blx	r3
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	b003      	add	sp, #12
 800ef70:	bd30      	pop	{r4, r5, pc}
 800ef72:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800ef76:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef78:	b96d      	cbnz	r5, 800ef96 <_rclc_execute.part.0+0x72>
 800ef7a:	4628      	mov	r0, r5
 800ef7c:	4798      	blx	r3
 800ef7e:	4628      	mov	r0, r5
 800ef80:	e7f5      	b.n	800ef6e <_rclc_execute.part.0+0x4a>
 800ef82:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800ef86:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800ef8a:	b1d5      	cbz	r5, 800efc2 <_rclc_execute.part.0+0x9e>
 800ef8c:	6880      	ldr	r0, [r0, #8]
 800ef8e:	4798      	blx	r3
 800ef90:	2000      	movs	r0, #0
 800ef92:	e7ec      	b.n	800ef6e <_rclc_execute.part.0+0x4a>
 800ef94:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef96:	68a0      	ldr	r0, [r4, #8]
 800ef98:	4798      	blx	r3
 800ef9a:	2000      	movs	r0, #0
 800ef9c:	b003      	add	sp, #12
 800ef9e:	bd30      	pop	{r4, r5, pc}
 800efa0:	6840      	ldr	r0, [r0, #4]
 800efa2:	f006 fceb 	bl	801597c <rcl_timer_call>
 800efa6:	f240 3321 	movw	r3, #801	; 0x321
 800efaa:	4298      	cmp	r0, r3
 800efac:	d1d6      	bne.n	800ef5c <_rclc_execute.part.0+0x38>
 800efae:	2000      	movs	r0, #0
 800efb0:	e7dd      	b.n	800ef6e <_rclc_execute.part.0+0x4a>
 800efb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800efb4:	6880      	ldr	r0, [r0, #8]
 800efb6:	f104 0110 	add.w	r1, r4, #16
 800efba:	4798      	blx	r3
 800efbc:	2000      	movs	r0, #0
 800efbe:	b003      	add	sp, #12
 800efc0:	bd30      	pop	{r4, r5, pc}
 800efc2:	4628      	mov	r0, r5
 800efc4:	4798      	blx	r3
 800efc6:	4628      	mov	r0, r5
 800efc8:	e7d1      	b.n	800ef6e <_rclc_execute.part.0+0x4a>
 800efca:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800efcc:	6880      	ldr	r0, [r0, #8]
 800efce:	4798      	blx	r3
 800efd0:	f104 0110 	add.w	r1, r4, #16
 800efd4:	e7be      	b.n	800ef54 <_rclc_execute.part.0+0x30>
 800efd6:	f100 0110 	add.w	r1, r0, #16
 800efda:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800efdc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800efde:	6880      	ldr	r0, [r0, #8]
 800efe0:	9101      	str	r1, [sp, #4]
 800efe2:	4798      	blx	r3
 800efe4:	9901      	ldr	r1, [sp, #4]
 800efe6:	e7b5      	b.n	800ef54 <_rclc_execute.part.0+0x30>
 800efe8:	2001      	movs	r0, #1
 800efea:	e7c0      	b.n	800ef6e <_rclc_execute.part.0+0x4a>
 800efec:	0000      	movs	r0, r0
	...

0800eff0 <rclc_executor_init>:
 800eff0:	2800      	cmp	r0, #0
 800eff2:	d063      	beq.n	800f0bc <rclc_executor_init+0xcc>
 800eff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff8:	460f      	mov	r7, r1
 800effa:	b0ae      	sub	sp, #184	; 0xb8
 800effc:	2900      	cmp	r1, #0
 800effe:	d055      	beq.n	800f0ac <rclc_executor_init+0xbc>
 800f000:	4605      	mov	r5, r0
 800f002:	4618      	mov	r0, r3
 800f004:	4616      	mov	r6, r2
 800f006:	4698      	mov	r8, r3
 800f008:	f000 fb86 	bl	800f718 <rcutils_allocator_is_valid>
 800f00c:	2800      	cmp	r0, #0
 800f00e:	d04d      	beq.n	800f0ac <rclc_executor_init+0xbc>
 800f010:	2e00      	cmp	r6, #0
 800f012:	d04b      	beq.n	800f0ac <rclc_executor_init+0xbc>
 800f014:	492e      	ldr	r1, [pc, #184]	; (800f0d0 <rclc_executor_init+0xe0>)
 800f016:	2280      	movs	r2, #128	; 0x80
 800f018:	a80e      	add	r0, sp, #56	; 0x38
 800f01a:	f00b fba0 	bl	801a75e <memcpy>
 800f01e:	2400      	movs	r4, #0
 800f020:	a90e      	add	r1, sp, #56	; 0x38
 800f022:	2280      	movs	r2, #128	; 0x80
 800f024:	4628      	mov	r0, r5
 800f026:	f00b fb9a 	bl	801a75e <memcpy>
 800f02a:	602f      	str	r7, [r5, #0]
 800f02c:	4668      	mov	r0, sp
 800f02e:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800f032:	466f      	mov	r7, sp
 800f034:	f006 fefc 	bl	8015e30 <rcl_get_zero_initialized_wait_set>
 800f038:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f03a:	f105 0c14 	add.w	ip, r5, #20
 800f03e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f042:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f044:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f048:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f04a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f04e:	a31e      	add	r3, pc, #120	; (adr r3, 800f0c8 <rclc_executor_init+0xd8>)
 800f050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f054:	6839      	ldr	r1, [r7, #0]
 800f056:	f8cc 1000 	str.w	r1, [ip]
 800f05a:	f8d8 7000 	ldr.w	r7, [r8]
 800f05e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f062:	f8c5 8010 	str.w	r8, [r5, #16]
 800f066:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800f06a:	01b0      	lsls	r0, r6, #6
 800f06c:	47b8      	blx	r7
 800f06e:	6068      	str	r0, [r5, #4]
 800f070:	b908      	cbnz	r0, 800f076 <rclc_executor_init+0x86>
 800f072:	e025      	b.n	800f0c0 <rclc_executor_init+0xd0>
 800f074:	6868      	ldr	r0, [r5, #4]
 800f076:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f07a:	4631      	mov	r1, r6
 800f07c:	3401      	adds	r4, #1
 800f07e:	f000 fa01 	bl	800f484 <rclc_executor_handle_init>
 800f082:	42a6      	cmp	r6, r4
 800f084:	d1f6      	bne.n	800f074 <rclc_executor_init+0x84>
 800f086:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800f08a:	f000 f9ef 	bl	800f46c <rclc_executor_handle_counters_zero_init>
 800f08e:	686b      	ldr	r3, [r5, #4]
 800f090:	4a10      	ldr	r2, [pc, #64]	; (800f0d4 <rclc_executor_init+0xe4>)
 800f092:	672a      	str	r2, [r5, #112]	; 0x70
 800f094:	2000      	movs	r0, #0
 800f096:	6768      	str	r0, [r5, #116]	; 0x74
 800f098:	b163      	cbz	r3, 800f0b4 <rclc_executor_init+0xc4>
 800f09a:	692b      	ldr	r3, [r5, #16]
 800f09c:	b153      	cbz	r3, 800f0b4 <rclc_executor_init+0xc4>
 800f09e:	68ab      	ldr	r3, [r5, #8]
 800f0a0:	b143      	cbz	r3, 800f0b4 <rclc_executor_init+0xc4>
 800f0a2:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800f0a6:	b02e      	add	sp, #184	; 0xb8
 800f0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ac:	200b      	movs	r0, #11
 800f0ae:	b02e      	add	sp, #184	; 0xb8
 800f0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	b02e      	add	sp, #184	; 0xb8
 800f0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0bc:	200b      	movs	r0, #11
 800f0be:	4770      	bx	lr
 800f0c0:	200a      	movs	r0, #10
 800f0c2:	e7f4      	b.n	800f0ae <rclc_executor_init+0xbe>
 800f0c4:	f3af 8000 	nop.w
 800f0c8:	3b9aca00 	.word	0x3b9aca00
 800f0cc:	00000000 	.word	0x00000000
 800f0d0:	0801b8d8 	.word	0x0801b8d8
 800f0d4:	0800eefd 	.word	0x0800eefd

0800f0d8 <rclc_executor_add_subscription>:
 800f0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0dc:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800f0e0:	b358      	cbz	r0, 800f13a <rclc_executor_add_subscription+0x62>
 800f0e2:	b351      	cbz	r1, 800f13a <rclc_executor_add_subscription+0x62>
 800f0e4:	b34a      	cbz	r2, 800f13a <rclc_executor_add_subscription+0x62>
 800f0e6:	b343      	cbz	r3, 800f13a <rclc_executor_add_subscription+0x62>
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800f0ee:	4285      	cmp	r5, r0
 800f0f0:	d302      	bcc.n	800f0f8 <rclc_executor_add_subscription+0x20>
 800f0f2:	2001      	movs	r0, #1
 800f0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0f8:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800f0fc:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800f100:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800f104:	f04f 0c00 	mov.w	ip, #0
 800f108:	f80e c008 	strb.w	ip, [lr, r8]
 800f10c:	2001      	movs	r0, #1
 800f10e:	3501      	adds	r5, #1
 800f110:	f104 0814 	add.w	r8, r4, #20
 800f114:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800f118:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800f11c:	6333      	str	r3, [r6, #48]	; 0x30
 800f11e:	7077      	strb	r7, [r6, #1]
 800f120:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800f124:	4640      	mov	r0, r8
 800f126:	60e5      	str	r5, [r4, #12]
 800f128:	f006 fe94 	bl	8015e54 <rcl_wait_set_is_valid>
 800f12c:	b940      	cbnz	r0, 800f140 <rclc_executor_add_subscription+0x68>
 800f12e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f130:	3301      	adds	r3, #1
 800f132:	64a3      	str	r3, [r4, #72]	; 0x48
 800f134:	2000      	movs	r0, #0
 800f136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f13a:	200b      	movs	r0, #11
 800f13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f140:	4640      	mov	r0, r8
 800f142:	f006 fe8d 	bl	8015e60 <rcl_wait_set_fini>
 800f146:	2800      	cmp	r0, #0
 800f148:	d0f1      	beq.n	800f12e <rclc_executor_add_subscription+0x56>
 800f14a:	e7d3      	b.n	800f0f4 <rclc_executor_add_subscription+0x1c>

0800f14c <rclc_executor_prepare>:
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d03d      	beq.n	800f1cc <rclc_executor_prepare+0x80>
 800f150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f154:	f100 0814 	add.w	r8, r0, #20
 800f158:	b09a      	sub	sp, #104	; 0x68
 800f15a:	4604      	mov	r4, r0
 800f15c:	4640      	mov	r0, r8
 800f15e:	f006 fe79 	bl	8015e54 <rcl_wait_set_is_valid>
 800f162:	b118      	cbz	r0, 800f16c <rclc_executor_prepare+0x20>
 800f164:	2000      	movs	r0, #0
 800f166:	b01a      	add	sp, #104	; 0x68
 800f168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f16c:	4640      	mov	r0, r8
 800f16e:	f006 fe77 	bl	8015e60 <rcl_wait_set_fini>
 800f172:	2800      	cmp	r0, #0
 800f174:	d127      	bne.n	800f1c6 <rclc_executor_prepare+0x7a>
 800f176:	a80c      	add	r0, sp, #48	; 0x30
 800f178:	ad0c      	add	r5, sp, #48	; 0x30
 800f17a:	f006 fe59 	bl	8015e30 <rcl_get_zero_initialized_wait_set>
 800f17e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f180:	4646      	mov	r6, r8
 800f182:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f186:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f18a:	6927      	ldr	r7, [r4, #16]
 800f18c:	682d      	ldr	r5, [r5, #0]
 800f18e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f190:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f192:	6035      	str	r5, [r6, #0]
 800f194:	ad04      	add	r5, sp, #16
 800f196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f198:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800f19c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f19e:	6826      	ldr	r6, [r4, #0]
 800f1a0:	6838      	ldr	r0, [r7, #0]
 800f1a2:	6028      	str	r0, [r5, #0]
 800f1a4:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800f1a8:	e9cd 3200 	strd	r3, r2, [sp]
 800f1ac:	4640      	mov	r0, r8
 800f1ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f1b0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f1b2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f1b4:	f007 f972 	bl	801649c <rcl_wait_set_init>
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	d0d4      	beq.n	800f166 <rclc_executor_prepare+0x1a>
 800f1bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800f1be:	f000 facf 	bl	800f760 <rcutils_reset_error>
 800f1c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f1c4:	e7cf      	b.n	800f166 <rclc_executor_prepare+0x1a>
 800f1c6:	f000 facb 	bl	800f760 <rcutils_reset_error>
 800f1ca:	e7d4      	b.n	800f176 <rclc_executor_prepare+0x2a>
 800f1cc:	200b      	movs	r0, #11
 800f1ce:	4770      	bx	lr

0800f1d0 <rclc_executor_spin_some.part.0>:
 800f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d4:	f100 0814 	add.w	r8, r0, #20
 800f1d8:	b083      	sub	sp, #12
 800f1da:	4692      	mov	sl, r2
 800f1dc:	4699      	mov	r9, r3
 800f1de:	4605      	mov	r5, r0
 800f1e0:	f7ff ffb4 	bl	800f14c <rclc_executor_prepare>
 800f1e4:	4640      	mov	r0, r8
 800f1e6:	f006 ff07 	bl	8015ff8 <rcl_wait_set_clear>
 800f1ea:	4607      	mov	r7, r0
 800f1ec:	2800      	cmp	r0, #0
 800f1ee:	f040 80be 	bne.w	800f36e <rclc_executor_spin_some.part.0+0x19e>
 800f1f2:	68ab      	ldr	r3, [r5, #8]
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	b1eb      	cbz	r3, 800f234 <rclc_executor_spin_some.part.0+0x64>
 800f1f8:	686e      	ldr	r6, [r5, #4]
 800f1fa:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800f1fe:	01a2      	lsls	r2, r4, #6
 800f200:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800f204:	b1b3      	cbz	r3, 800f234 <rclc_executor_spin_some.part.0+0x64>
 800f206:	5cb3      	ldrb	r3, [r6, r2]
 800f208:	2b08      	cmp	r3, #8
 800f20a:	f200 80a9 	bhi.w	800f360 <rclc_executor_spin_some.part.0+0x190>
 800f20e:	e8df f003 	tbb	[pc, r3]
 800f212:	8989      	.short	0x8989
 800f214:	057b7b93 	.word	0x057b7b93
 800f218:	0505      	.short	0x0505
 800f21a:	9d          	.byte	0x9d
 800f21b:	00          	.byte	0x00
 800f21c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f220:	4640      	mov	r0, r8
 800f222:	6849      	ldr	r1, [r1, #4]
 800f224:	f007 fa50 	bl	80166c8 <rcl_wait_set_add_service>
 800f228:	2800      	cmp	r0, #0
 800f22a:	d175      	bne.n	800f318 <rclc_executor_spin_some.part.0+0x148>
 800f22c:	68ab      	ldr	r3, [r5, #8]
 800f22e:	3401      	adds	r4, #1
 800f230:	429c      	cmp	r4, r3
 800f232:	d3e1      	bcc.n	800f1f8 <rclc_executor_spin_some.part.0+0x28>
 800f234:	464b      	mov	r3, r9
 800f236:	4652      	mov	r2, sl
 800f238:	4640      	mov	r0, r8
 800f23a:	f007 fa71 	bl	8016720 <rcl_wait>
 800f23e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800f242:	2b00      	cmp	r3, #0
 800f244:	f000 809b 	beq.w	800f37e <rclc_executor_spin_some.part.0+0x1ae>
 800f248:	2b01      	cmp	r3, #1
 800f24a:	f040 8089 	bne.w	800f360 <rclc_executor_spin_some.part.0+0x190>
 800f24e:	68ab      	ldr	r3, [r5, #8]
 800f250:	2b00      	cmp	r3, #0
 800f252:	f000 80ef 	beq.w	800f434 <rclc_executor_spin_some.part.0+0x264>
 800f256:	2400      	movs	r4, #0
 800f258:	4626      	mov	r6, r4
 800f25a:	f240 1991 	movw	r9, #401	; 0x191
 800f25e:	e00a      	b.n	800f276 <rclc_executor_spin_some.part.0+0xa6>
 800f260:	f7ff fdd0 	bl	800ee04 <_rclc_check_for_new_data>
 800f264:	4604      	mov	r4, r0
 800f266:	b110      	cbz	r0, 800f26e <rclc_executor_spin_some.part.0+0x9e>
 800f268:	4548      	cmp	r0, r9
 800f26a:	f040 8086 	bne.w	800f37a <rclc_executor_spin_some.part.0+0x1aa>
 800f26e:	68ab      	ldr	r3, [r5, #8]
 800f270:	429e      	cmp	r6, r3
 800f272:	f080 80db 	bcs.w	800f42c <rclc_executor_spin_some.part.0+0x25c>
 800f276:	686a      	ldr	r2, [r5, #4]
 800f278:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f27c:	4641      	mov	r1, r8
 800f27e:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800f282:	3601      	adds	r6, #1
 800f284:	f1bc 0f00 	cmp.w	ip, #0
 800f288:	d1ea      	bne.n	800f260 <rclc_executor_spin_some.part.0+0x90>
 800f28a:	4619      	mov	r1, r3
 800f28c:	4610      	mov	r0, r2
 800f28e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800f292:	4798      	blx	r3
 800f294:	2800      	cmp	r0, #0
 800f296:	d070      	beq.n	800f37a <rclc_executor_spin_some.part.0+0x1aa>
 800f298:	68aa      	ldr	r2, [r5, #8]
 800f29a:	2a00      	cmp	r2, #0
 800f29c:	d06d      	beq.n	800f37a <rclc_executor_spin_some.part.0+0x1aa>
 800f29e:	2600      	movs	r6, #0
 800f2a0:	f240 1991 	movw	r9, #401	; 0x191
 800f2a4:	e008      	b.n	800f2b8 <rclc_executor_spin_some.part.0+0xe8>
 800f2a6:	f7ff fdd3 	bl	800ee50 <_rclc_take_new_data>
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	b108      	cbz	r0, 800f2b2 <rclc_executor_spin_some.part.0+0xe2>
 800f2ae:	4548      	cmp	r0, r9
 800f2b0:	d163      	bne.n	800f37a <rclc_executor_spin_some.part.0+0x1aa>
 800f2b2:	68aa      	ldr	r2, [r5, #8]
 800f2b4:	4296      	cmp	r6, r2
 800f2b6:	d208      	bcs.n	800f2ca <rclc_executor_spin_some.part.0+0xfa>
 800f2b8:	6868      	ldr	r0, [r5, #4]
 800f2ba:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800f2be:	4641      	mov	r1, r8
 800f2c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f2c4:	3601      	adds	r6, #1
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d1ed      	bne.n	800f2a6 <rclc_executor_spin_some.part.0+0xd6>
 800f2ca:	2600      	movs	r6, #0
 800f2cc:	b932      	cbnz	r2, 800f2dc <rclc_executor_spin_some.part.0+0x10c>
 800f2ce:	e054      	b.n	800f37a <rclc_executor_spin_some.part.0+0x1aa>
 800f2d0:	2901      	cmp	r1, #1
 800f2d2:	d012      	beq.n	800f2fa <rclc_executor_spin_some.part.0+0x12a>
 800f2d4:	3601      	adds	r6, #1
 800f2d6:	4296      	cmp	r6, r2
 800f2d8:	d245      	bcs.n	800f366 <rclc_executor_spin_some.part.0+0x196>
 800f2da:	2400      	movs	r4, #0
 800f2dc:	686b      	ldr	r3, [r5, #4]
 800f2de:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800f2e8:	2900      	cmp	r1, #0
 800f2ea:	d046      	beq.n	800f37a <rclc_executor_spin_some.part.0+0x1aa>
 800f2ec:	7859      	ldrb	r1, [r3, #1]
 800f2ee:	2900      	cmp	r1, #0
 800f2f0:	d1ee      	bne.n	800f2d0 <rclc_executor_spin_some.part.0+0x100>
 800f2f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d0ec      	beq.n	800f2d4 <rclc_executor_spin_some.part.0+0x104>
 800f2fa:	f7ff fe13 	bl	800ef24 <_rclc_execute.part.0>
 800f2fe:	2800      	cmp	r0, #0
 800f300:	f040 8096 	bne.w	800f430 <rclc_executor_spin_some.part.0+0x260>
 800f304:	68aa      	ldr	r2, [r5, #8]
 800f306:	e7e5      	b.n	800f2d4 <rclc_executor_spin_some.part.0+0x104>
 800f308:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f30c:	4640      	mov	r0, r8
 800f30e:	6849      	ldr	r1, [r1, #4]
 800f310:	f007 f9ae 	bl	8016670 <rcl_wait_set_add_client>
 800f314:	2800      	cmp	r0, #0
 800f316:	d089      	beq.n	800f22c <rclc_executor_spin_some.part.0+0x5c>
 800f318:	9001      	str	r0, [sp, #4]
 800f31a:	f000 fa21 	bl	800f760 <rcutils_reset_error>
 800f31e:	9801      	ldr	r0, [sp, #4]
 800f320:	4607      	mov	r7, r0
 800f322:	e020      	b.n	800f366 <rclc_executor_spin_some.part.0+0x196>
 800f324:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f328:	4640      	mov	r0, r8
 800f32a:	6849      	ldr	r1, [r1, #4]
 800f32c:	f006 fe38 	bl	8015fa0 <rcl_wait_set_add_subscription>
 800f330:	2800      	cmp	r0, #0
 800f332:	f43f af7b 	beq.w	800f22c <rclc_executor_spin_some.part.0+0x5c>
 800f336:	e7ef      	b.n	800f318 <rclc_executor_spin_some.part.0+0x148>
 800f338:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f33c:	4640      	mov	r0, r8
 800f33e:	6849      	ldr	r1, [r1, #4]
 800f340:	f007 f966 	bl	8016610 <rcl_wait_set_add_timer>
 800f344:	2800      	cmp	r0, #0
 800f346:	f43f af71 	beq.w	800f22c <rclc_executor_spin_some.part.0+0x5c>
 800f34a:	e7e5      	b.n	800f318 <rclc_executor_spin_some.part.0+0x148>
 800f34c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f350:	4640      	mov	r0, r8
 800f352:	6849      	ldr	r1, [r1, #4]
 800f354:	f007 f930 	bl	80165b8 <rcl_wait_set_add_guard_condition>
 800f358:	2800      	cmp	r0, #0
 800f35a:	f43f af67 	beq.w	800f22c <rclc_executor_spin_some.part.0+0x5c>
 800f35e:	e7db      	b.n	800f318 <rclc_executor_spin_some.part.0+0x148>
 800f360:	f000 f9fe 	bl	800f760 <rcutils_reset_error>
 800f364:	2701      	movs	r7, #1
 800f366:	4638      	mov	r0, r7
 800f368:	b003      	add	sp, #12
 800f36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36e:	f000 f9f7 	bl	800f760 <rcutils_reset_error>
 800f372:	4638      	mov	r0, r7
 800f374:	b003      	add	sp, #12
 800f376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37a:	4627      	mov	r7, r4
 800f37c:	e7f3      	b.n	800f366 <rclc_executor_spin_some.part.0+0x196>
 800f37e:	68ab      	ldr	r3, [r5, #8]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d05a      	beq.n	800f43a <rclc_executor_spin_some.part.0+0x26a>
 800f384:	2400      	movs	r4, #0
 800f386:	4626      	mov	r6, r4
 800f388:	f240 1991 	movw	r9, #401	; 0x191
 800f38c:	e008      	b.n	800f3a0 <rclc_executor_spin_some.part.0+0x1d0>
 800f38e:	f7ff fd39 	bl	800ee04 <_rclc_check_for_new_data>
 800f392:	4604      	mov	r4, r0
 800f394:	b108      	cbz	r0, 800f39a <rclc_executor_spin_some.part.0+0x1ca>
 800f396:	4548      	cmp	r0, r9
 800f398:	d1ef      	bne.n	800f37a <rclc_executor_spin_some.part.0+0x1aa>
 800f39a:	68ab      	ldr	r3, [r5, #8]
 800f39c:	429e      	cmp	r6, r3
 800f39e:	d243      	bcs.n	800f428 <rclc_executor_spin_some.part.0+0x258>
 800f3a0:	686a      	ldr	r2, [r5, #4]
 800f3a2:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f3a6:	4641      	mov	r1, r8
 800f3a8:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800f3ac:	3601      	adds	r6, #1
 800f3ae:	f1bc 0f00 	cmp.w	ip, #0
 800f3b2:	d1ec      	bne.n	800f38e <rclc_executor_spin_some.part.0+0x1be>
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	4610      	mov	r0, r2
 800f3b8:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800f3bc:	4798      	blx	r3
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d0db      	beq.n	800f37a <rclc_executor_spin_some.part.0+0x1aa>
 800f3c2:	68ab      	ldr	r3, [r5, #8]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d0d8      	beq.n	800f37a <rclc_executor_spin_some.part.0+0x1aa>
 800f3c8:	f04f 0a00 	mov.w	sl, #0
 800f3cc:	f240 1691 	movw	r6, #401	; 0x191
 800f3d0:	f240 2959 	movw	r9, #601	; 0x259
 800f3d4:	e00b      	b.n	800f3ee <rclc_executor_spin_some.part.0+0x21e>
 800f3d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800f3da:	b113      	cbz	r3, 800f3e2 <rclc_executor_spin_some.part.0+0x212>
 800f3dc:	f7ff fda2 	bl	800ef24 <_rclc_execute.part.0>
 800f3e0:	bb30      	cbnz	r0, 800f430 <rclc_executor_spin_some.part.0+0x260>
 800f3e2:	68ab      	ldr	r3, [r5, #8]
 800f3e4:	f10a 0a01 	add.w	sl, sl, #1
 800f3e8:	459a      	cmp	sl, r3
 800f3ea:	d2bc      	bcs.n	800f366 <rclc_executor_spin_some.part.0+0x196>
 800f3ec:	2400      	movs	r4, #0
 800f3ee:	6868      	ldr	r0, [r5, #4]
 800f3f0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f3f4:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f3f8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d0bc      	beq.n	800f37a <rclc_executor_spin_some.part.0+0x1aa>
 800f400:	4641      	mov	r1, r8
 800f402:	f7ff fd25 	bl	800ee50 <_rclc_take_new_data>
 800f406:	b118      	cbz	r0, 800f410 <rclc_executor_spin_some.part.0+0x240>
 800f408:	42b0      	cmp	r0, r6
 800f40a:	d001      	beq.n	800f410 <rclc_executor_spin_some.part.0+0x240>
 800f40c:	4548      	cmp	r0, r9
 800f40e:	d10f      	bne.n	800f430 <rclc_executor_spin_some.part.0+0x260>
 800f410:	6868      	ldr	r0, [r5, #4]
 800f412:	eb10 000b 	adds.w	r0, r0, fp
 800f416:	d005      	beq.n	800f424 <rclc_executor_spin_some.part.0+0x254>
 800f418:	7843      	ldrb	r3, [r0, #1]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d0db      	beq.n	800f3d6 <rclc_executor_spin_some.part.0+0x206>
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d1df      	bne.n	800f3e2 <rclc_executor_spin_some.part.0+0x212>
 800f422:	e7db      	b.n	800f3dc <rclc_executor_spin_some.part.0+0x20c>
 800f424:	270b      	movs	r7, #11
 800f426:	e79e      	b.n	800f366 <rclc_executor_spin_some.part.0+0x196>
 800f428:	686a      	ldr	r2, [r5, #4]
 800f42a:	e7c3      	b.n	800f3b4 <rclc_executor_spin_some.part.0+0x1e4>
 800f42c:	686a      	ldr	r2, [r5, #4]
 800f42e:	e72c      	b.n	800f28a <rclc_executor_spin_some.part.0+0xba>
 800f430:	4607      	mov	r7, r0
 800f432:	e798      	b.n	800f366 <rclc_executor_spin_some.part.0+0x196>
 800f434:	686a      	ldr	r2, [r5, #4]
 800f436:	461c      	mov	r4, r3
 800f438:	e727      	b.n	800f28a <rclc_executor_spin_some.part.0+0xba>
 800f43a:	686a      	ldr	r2, [r5, #4]
 800f43c:	461c      	mov	r4, r3
 800f43e:	e7b9      	b.n	800f3b4 <rclc_executor_spin_some.part.0+0x1e4>

0800f440 <rclc_executor_spin_some>:
 800f440:	b190      	cbz	r0, 800f468 <rclc_executor_spin_some+0x28>
 800f442:	b570      	push	{r4, r5, r6, lr}
 800f444:	4604      	mov	r4, r0
 800f446:	6800      	ldr	r0, [r0, #0]
 800f448:	4616      	mov	r6, r2
 800f44a:	461d      	mov	r5, r3
 800f44c:	f005 faae 	bl	80149ac <rcl_context_is_valid>
 800f450:	b130      	cbz	r0, 800f460 <rclc_executor_spin_some+0x20>
 800f452:	4632      	mov	r2, r6
 800f454:	462b      	mov	r3, r5
 800f456:	4620      	mov	r0, r4
 800f458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f45c:	f7ff beb8 	b.w	800f1d0 <rclc_executor_spin_some.part.0>
 800f460:	f000 f97e 	bl	800f760 <rcutils_reset_error>
 800f464:	2001      	movs	r0, #1
 800f466:	bd70      	pop	{r4, r5, r6, pc}
 800f468:	200b      	movs	r0, #11
 800f46a:	4770      	bx	lr

0800f46c <rclc_executor_handle_counters_zero_init>:
 800f46c:	b140      	cbz	r0, 800f480 <rclc_executor_handle_counters_zero_init+0x14>
 800f46e:	2300      	movs	r3, #0
 800f470:	6003      	str	r3, [r0, #0]
 800f472:	6043      	str	r3, [r0, #4]
 800f474:	6083      	str	r3, [r0, #8]
 800f476:	60c3      	str	r3, [r0, #12]
 800f478:	6103      	str	r3, [r0, #16]
 800f47a:	6143      	str	r3, [r0, #20]
 800f47c:	4618      	mov	r0, r3
 800f47e:	4770      	bx	lr
 800f480:	200b      	movs	r0, #11
 800f482:	4770      	bx	lr

0800f484 <rclc_executor_handle_init>:
 800f484:	b178      	cbz	r0, 800f4a6 <rclc_executor_handle_init+0x22>
 800f486:	b430      	push	{r4, r5}
 800f488:	4603      	mov	r3, r0
 800f48a:	2209      	movs	r2, #9
 800f48c:	2000      	movs	r0, #0
 800f48e:	2400      	movs	r4, #0
 800f490:	2500      	movs	r5, #0
 800f492:	801a      	strh	r2, [r3, #0]
 800f494:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800f498:	bc30      	pop	{r4, r5}
 800f49a:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800f49e:	6359      	str	r1, [r3, #52]	; 0x34
 800f4a0:	6318      	str	r0, [r3, #48]	; 0x30
 800f4a2:	8718      	strh	r0, [r3, #56]	; 0x38
 800f4a4:	4770      	bx	lr
 800f4a6:	200b      	movs	r0, #11
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop

0800f4ac <rclc_support_init>:
 800f4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4b0:	b086      	sub	sp, #24
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	d042      	beq.n	800f53c <rclc_support_init+0x90>
 800f4b6:	461c      	mov	r4, r3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d03f      	beq.n	800f53c <rclc_support_init+0x90>
 800f4bc:	460f      	mov	r7, r1
 800f4be:	4690      	mov	r8, r2
 800f4c0:	4606      	mov	r6, r0
 800f4c2:	f005 fd53 	bl	8014f6c <rcl_get_zero_initialized_init_options>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800f4cc:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f4d0:	9305      	str	r3, [sp, #20]
 800f4d2:	a805      	add	r0, sp, #20
 800f4d4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f4d8:	f005 fd4a 	bl	8014f70 <rcl_init_options_init>
 800f4dc:	4605      	mov	r5, r0
 800f4de:	bb38      	cbnz	r0, 800f530 <rclc_support_init+0x84>
 800f4e0:	f005 fd44 	bl	8014f6c <rcl_get_zero_initialized_init_options>
 800f4e4:	4631      	mov	r1, r6
 800f4e6:	6030      	str	r0, [r6, #0]
 800f4e8:	a805      	add	r0, sp, #20
 800f4ea:	f005 fdb7 	bl	801505c <rcl_init_options_copy>
 800f4ee:	4605      	mov	r5, r0
 800f4f0:	b9c0      	cbnz	r0, 800f524 <rclc_support_init+0x78>
 800f4f2:	ad02      	add	r5, sp, #8
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	f005 fa4f 	bl	8014998 <rcl_get_zero_initialized_context>
 800f4fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f4fe:	1d33      	adds	r3, r6, #4
 800f500:	e883 0003 	stmia.w	r3, {r0, r1}
 800f504:	4632      	mov	r2, r6
 800f506:	4641      	mov	r1, r8
 800f508:	4638      	mov	r0, r7
 800f50a:	f005 fc25 	bl	8014d58 <rcl_init>
 800f50e:	4605      	mov	r5, r0
 800f510:	b940      	cbnz	r0, 800f524 <rclc_support_init+0x78>
 800f512:	60f4      	str	r4, [r6, #12]
 800f514:	4622      	mov	r2, r4
 800f516:	f106 0110 	add.w	r1, r6, #16
 800f51a:	2003      	movs	r0, #3
 800f51c:	f006 f9a2 	bl	8015864 <rcl_clock_init>
 800f520:	4605      	mov	r5, r0
 800f522:	b108      	cbz	r0, 800f528 <rclc_support_init+0x7c>
 800f524:	f000 f91c 	bl	800f760 <rcutils_reset_error>
 800f528:	a805      	add	r0, sp, #20
 800f52a:	f005 fd73 	bl	8015014 <rcl_init_options_fini>
 800f52e:	b108      	cbz	r0, 800f534 <rclc_support_init+0x88>
 800f530:	f000 f916 	bl	800f760 <rcutils_reset_error>
 800f534:	4628      	mov	r0, r5
 800f536:	b006      	add	sp, #24
 800f538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f53c:	250b      	movs	r5, #11
 800f53e:	4628      	mov	r0, r5
 800f540:	b006      	add	sp, #24
 800f542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f546:	bf00      	nop

0800f548 <rclc_node_init_default>:
 800f548:	b3b8      	cbz	r0, 800f5ba <rclc_node_init_default+0x72>
 800f54a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f54e:	460d      	mov	r5, r1
 800f550:	b08f      	sub	sp, #60	; 0x3c
 800f552:	b329      	cbz	r1, 800f5a0 <rclc_node_init_default+0x58>
 800f554:	4616      	mov	r6, r2
 800f556:	b31a      	cbz	r2, 800f5a0 <rclc_node_init_default+0x58>
 800f558:	461f      	mov	r7, r3
 800f55a:	b30b      	cbz	r3, 800f5a0 <rclc_node_init_default+0x58>
 800f55c:	f10d 0810 	add.w	r8, sp, #16
 800f560:	4604      	mov	r4, r0
 800f562:	4640      	mov	r0, r8
 800f564:	f005 fe42 	bl	80151ec <rcl_get_zero_initialized_node>
 800f568:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f56c:	f10d 091c 	add.w	r9, sp, #28
 800f570:	e884 0003 	stmia.w	r4, {r0, r1}
 800f574:	4648      	mov	r0, r9
 800f576:	f005 ffdb 	bl	8015530 <rcl_node_get_default_options>
 800f57a:	4640      	mov	r0, r8
 800f57c:	f005 fe36 	bl	80151ec <rcl_get_zero_initialized_node>
 800f580:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f584:	1d3b      	adds	r3, r7, #4
 800f586:	f8cd 9000 	str.w	r9, [sp]
 800f58a:	4632      	mov	r2, r6
 800f58c:	e884 0003 	stmia.w	r4, {r0, r1}
 800f590:	4629      	mov	r1, r5
 800f592:	4620      	mov	r0, r4
 800f594:	f005 fe34 	bl	8015200 <rcl_node_init>
 800f598:	b930      	cbnz	r0, 800f5a8 <rclc_node_init_default+0x60>
 800f59a:	b00f      	add	sp, #60	; 0x3c
 800f59c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5a0:	200b      	movs	r0, #11
 800f5a2:	b00f      	add	sp, #60	; 0x3c
 800f5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5a8:	9003      	str	r0, [sp, #12]
 800f5aa:	f000 f8d9 	bl	800f760 <rcutils_reset_error>
 800f5ae:	f000 f8d7 	bl	800f760 <rcutils_reset_error>
 800f5b2:	9803      	ldr	r0, [sp, #12]
 800f5b4:	b00f      	add	sp, #60	; 0x3c
 800f5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5ba:	200b      	movs	r0, #11
 800f5bc:	4770      	bx	lr
 800f5be:	bf00      	nop

0800f5c0 <rclc_publisher_init_default>:
 800f5c0:	b368      	cbz	r0, 800f61e <rclc_publisher_init_default+0x5e>
 800f5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c6:	460d      	mov	r5, r1
 800f5c8:	b09e      	sub	sp, #120	; 0x78
 800f5ca:	b321      	cbz	r1, 800f616 <rclc_publisher_init_default+0x56>
 800f5cc:	4616      	mov	r6, r2
 800f5ce:	b312      	cbz	r2, 800f616 <rclc_publisher_init_default+0x56>
 800f5d0:	461f      	mov	r7, r3
 800f5d2:	b303      	cbz	r3, 800f616 <rclc_publisher_init_default+0x56>
 800f5d4:	4604      	mov	r4, r0
 800f5d6:	f7ff f959 	bl	800e88c <rcl_get_zero_initialized_publisher>
 800f5da:	f10d 0810 	add.w	r8, sp, #16
 800f5de:	6020      	str	r0, [r4, #0]
 800f5e0:	4640      	mov	r0, r8
 800f5e2:	f7ff fa4f 	bl	800ea84 <rcl_publisher_get_default_options>
 800f5e6:	490f      	ldr	r1, [pc, #60]	; (800f624 <rclc_publisher_init_default+0x64>)
 800f5e8:	2250      	movs	r2, #80	; 0x50
 800f5ea:	4640      	mov	r0, r8
 800f5ec:	f00b f8b7 	bl	801a75e <memcpy>
 800f5f0:	f8cd 8000 	str.w	r8, [sp]
 800f5f4:	463b      	mov	r3, r7
 800f5f6:	4632      	mov	r2, r6
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	f7ff f94c 	bl	800e898 <rcl_publisher_init>
 800f600:	b910      	cbnz	r0, 800f608 <rclc_publisher_init_default+0x48>
 800f602:	b01e      	add	sp, #120	; 0x78
 800f604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f608:	9003      	str	r0, [sp, #12]
 800f60a:	f000 f8a9 	bl	800f760 <rcutils_reset_error>
 800f60e:	9803      	ldr	r0, [sp, #12]
 800f610:	b01e      	add	sp, #120	; 0x78
 800f612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f616:	200b      	movs	r0, #11
 800f618:	b01e      	add	sp, #120	; 0x78
 800f61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f61e:	200b      	movs	r0, #11
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	0801b958 	.word	0x0801b958

0800f628 <rclc_subscription_init_default>:
 800f628:	b368      	cbz	r0, 800f686 <rclc_subscription_init_default+0x5e>
 800f62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f62e:	460d      	mov	r5, r1
 800f630:	b0a0      	sub	sp, #128	; 0x80
 800f632:	b321      	cbz	r1, 800f67e <rclc_subscription_init_default+0x56>
 800f634:	4616      	mov	r6, r2
 800f636:	b312      	cbz	r2, 800f67e <rclc_subscription_init_default+0x56>
 800f638:	461f      	mov	r7, r3
 800f63a:	b303      	cbz	r3, 800f67e <rclc_subscription_init_default+0x56>
 800f63c:	4604      	mov	r4, r0
 800f63e:	f7ff fa67 	bl	800eb10 <rcl_get_zero_initialized_subscription>
 800f642:	f10d 0810 	add.w	r8, sp, #16
 800f646:	6020      	str	r0, [r4, #0]
 800f648:	4640      	mov	r0, r8
 800f64a:	f7ff fb5d 	bl	800ed08 <rcl_subscription_get_default_options>
 800f64e:	490f      	ldr	r1, [pc, #60]	; (800f68c <rclc_subscription_init_default+0x64>)
 800f650:	2250      	movs	r2, #80	; 0x50
 800f652:	4640      	mov	r0, r8
 800f654:	f00b f883 	bl	801a75e <memcpy>
 800f658:	f8cd 8000 	str.w	r8, [sp]
 800f65c:	463b      	mov	r3, r7
 800f65e:	4632      	mov	r2, r6
 800f660:	4629      	mov	r1, r5
 800f662:	4620      	mov	r0, r4
 800f664:	f7ff fa5a 	bl	800eb1c <rcl_subscription_init>
 800f668:	b910      	cbnz	r0, 800f670 <rclc_subscription_init_default+0x48>
 800f66a:	b020      	add	sp, #128	; 0x80
 800f66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f670:	9003      	str	r0, [sp, #12]
 800f672:	f000 f875 	bl	800f760 <rcutils_reset_error>
 800f676:	9803      	ldr	r0, [sp, #12]
 800f678:	b020      	add	sp, #128	; 0x80
 800f67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f67e:	200b      	movs	r0, #11
 800f680:	b020      	add	sp, #128	; 0x80
 800f682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f686:	200b      	movs	r0, #11
 800f688:	4770      	bx	lr
 800f68a:	bf00      	nop
 800f68c:	0801b9a8 	.word	0x0801b9a8

0800f690 <__default_zero_allocate>:
 800f690:	f00a ba22 	b.w	8019ad8 <calloc>

0800f694 <__default_reallocate>:
 800f694:	f00a bbae 	b.w	8019df4 <realloc>

0800f698 <__default_deallocate>:
 800f698:	f00a ba8c 	b.w	8019bb4 <free>

0800f69c <__default_allocate>:
 800f69c:	f00a ba82 	b.w	8019ba4 <malloc>

0800f6a0 <rcutils_get_zero_initialized_allocator>:
 800f6a0:	b470      	push	{r4, r5, r6}
 800f6a2:	4d05      	ldr	r5, [pc, #20]	; (800f6b8 <rcutils_get_zero_initialized_allocator+0x18>)
 800f6a4:	4606      	mov	r6, r0
 800f6a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f6a8:	4634      	mov	r4, r6
 800f6aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6ac:	682b      	ldr	r3, [r5, #0]
 800f6ae:	6023      	str	r3, [r4, #0]
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	bc70      	pop	{r4, r5, r6}
 800f6b4:	4770      	bx	lr
 800f6b6:	bf00      	nop
 800f6b8:	0801b9f8 	.word	0x0801b9f8

0800f6bc <rcutils_set_default_allocator>:
 800f6bc:	b1a0      	cbz	r0, 800f6e8 <rcutils_set_default_allocator+0x2c>
 800f6be:	6801      	ldr	r1, [r0, #0]
 800f6c0:	b199      	cbz	r1, 800f6ea <rcutils_set_default_allocator+0x2e>
 800f6c2:	b430      	push	{r4, r5}
 800f6c4:	6844      	ldr	r4, [r0, #4]
 800f6c6:	b194      	cbz	r4, 800f6ee <rcutils_set_default_allocator+0x32>
 800f6c8:	68c5      	ldr	r5, [r0, #12]
 800f6ca:	b15d      	cbz	r5, 800f6e4 <rcutils_set_default_allocator+0x28>
 800f6cc:	6883      	ldr	r3, [r0, #8]
 800f6ce:	b18b      	cbz	r3, 800f6f4 <rcutils_set_default_allocator+0x38>
 800f6d0:	4a09      	ldr	r2, [pc, #36]	; (800f6f8 <rcutils_set_default_allocator+0x3c>)
 800f6d2:	e9c2 1400 	strd	r1, r4, [r2]
 800f6d6:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800f6da:	2000      	movs	r0, #0
 800f6dc:	6110      	str	r0, [r2, #16]
 800f6de:	2001      	movs	r0, #1
 800f6e0:	bc30      	pop	{r4, r5}
 800f6e2:	4770      	bx	lr
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	e7fb      	b.n	800f6e0 <rcutils_set_default_allocator+0x24>
 800f6e8:	4770      	bx	lr
 800f6ea:	4608      	mov	r0, r1
 800f6ec:	4770      	bx	lr
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	bc30      	pop	{r4, r5}
 800f6f2:	4770      	bx	lr
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	e7f3      	b.n	800f6e0 <rcutils_set_default_allocator+0x24>
 800f6f8:	20000030 	.word	0x20000030

0800f6fc <rcutils_get_default_allocator>:
 800f6fc:	b470      	push	{r4, r5, r6}
 800f6fe:	4d05      	ldr	r5, [pc, #20]	; (800f714 <rcutils_get_default_allocator+0x18>)
 800f700:	4606      	mov	r6, r0
 800f702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f704:	4634      	mov	r4, r6
 800f706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f708:	682b      	ldr	r3, [r5, #0]
 800f70a:	6023      	str	r3, [r4, #0]
 800f70c:	4630      	mov	r0, r6
 800f70e:	bc70      	pop	{r4, r5, r6}
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop
 800f714:	20000030 	.word	0x20000030

0800f718 <rcutils_allocator_is_valid>:
 800f718:	b158      	cbz	r0, 800f732 <rcutils_allocator_is_valid+0x1a>
 800f71a:	6803      	ldr	r3, [r0, #0]
 800f71c:	b143      	cbz	r3, 800f730 <rcutils_allocator_is_valid+0x18>
 800f71e:	6843      	ldr	r3, [r0, #4]
 800f720:	b133      	cbz	r3, 800f730 <rcutils_allocator_is_valid+0x18>
 800f722:	68c3      	ldr	r3, [r0, #12]
 800f724:	b123      	cbz	r3, 800f730 <rcutils_allocator_is_valid+0x18>
 800f726:	6880      	ldr	r0, [r0, #8]
 800f728:	3800      	subs	r0, #0
 800f72a:	bf18      	it	ne
 800f72c:	2001      	movne	r0, #1
 800f72e:	4770      	bx	lr
 800f730:	4618      	mov	r0, r3
 800f732:	4770      	bx	lr

0800f734 <rcutils_get_error_string>:
 800f734:	4b06      	ldr	r3, [pc, #24]	; (800f750 <rcutils_get_error_string+0x1c>)
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	b13b      	cbz	r3, 800f74a <rcutils_get_error_string+0x16>
 800f73a:	4b06      	ldr	r3, [pc, #24]	; (800f754 <rcutils_get_error_string+0x20>)
 800f73c:	781a      	ldrb	r2, [r3, #0]
 800f73e:	b90a      	cbnz	r2, 800f744 <rcutils_get_error_string+0x10>
 800f740:	2201      	movs	r2, #1
 800f742:	701a      	strb	r2, [r3, #0]
 800f744:	4b04      	ldr	r3, [pc, #16]	; (800f758 <rcutils_get_error_string+0x24>)
 800f746:	7818      	ldrb	r0, [r3, #0]
 800f748:	4770      	bx	lr
 800f74a:	4b04      	ldr	r3, [pc, #16]	; (800f75c <rcutils_get_error_string+0x28>)
 800f74c:	7818      	ldrb	r0, [r3, #0]
 800f74e:	4770      	bx	lr
 800f750:	20009f60 	.word	0x20009f60
 800f754:	20009f61 	.word	0x20009f61
 800f758:	2000a1c8 	.word	0x2000a1c8
 800f75c:	0801ba0c 	.word	0x0801ba0c

0800f760 <rcutils_reset_error>:
 800f760:	b4d0      	push	{r4, r6, r7}
 800f762:	4a07      	ldr	r2, [pc, #28]	; (800f780 <rcutils_reset_error+0x20>)
 800f764:	4807      	ldr	r0, [pc, #28]	; (800f784 <rcutils_reset_error+0x24>)
 800f766:	4c08      	ldr	r4, [pc, #32]	; (800f788 <rcutils_reset_error+0x28>)
 800f768:	4908      	ldr	r1, [pc, #32]	; (800f78c <rcutils_reset_error+0x2c>)
 800f76a:	2300      	movs	r3, #0
 800f76c:	2600      	movs	r6, #0
 800f76e:	2700      	movs	r7, #0
 800f770:	8013      	strh	r3, [r2, #0]
 800f772:	7003      	strb	r3, [r0, #0]
 800f774:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800f778:	7023      	strb	r3, [r4, #0]
 800f77a:	700b      	strb	r3, [r1, #0]
 800f77c:	bcd0      	pop	{r4, r6, r7}
 800f77e:	4770      	bx	lr
 800f780:	2000a1d0 	.word	0x2000a1d0
 800f784:	2000a1c8 	.word	0x2000a1c8
 800f788:	20009f61 	.word	0x20009f61
 800f78c:	20009f60 	.word	0x20009f60

0800f790 <rcutils_get_zero_initialized_string_map>:
 800f790:	4b01      	ldr	r3, [pc, #4]	; (800f798 <rcutils_get_zero_initialized_string_map+0x8>)
 800f792:	2000      	movs	r0, #0
 800f794:	6018      	str	r0, [r3, #0]
 800f796:	4770      	bx	lr
 800f798:	20009f64 	.word	0x20009f64

0800f79c <rcutils_string_map_reserve>:
 800f79c:	2800      	cmp	r0, #0
 800f79e:	d061      	beq.n	800f864 <rcutils_string_map_reserve+0xc8>
 800f7a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7a4:	6805      	ldr	r5, [r0, #0]
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	460c      	mov	r4, r1
 800f7aa:	4606      	mov	r6, r0
 800f7ac:	b12d      	cbz	r5, 800f7ba <rcutils_string_map_reserve+0x1e>
 800f7ae:	68eb      	ldr	r3, [r5, #12]
 800f7b0:	42a3      	cmp	r3, r4
 800f7b2:	d906      	bls.n	800f7c2 <rcutils_string_map_reserve+0x26>
 800f7b4:	461c      	mov	r4, r3
 800f7b6:	2d00      	cmp	r5, #0
 800f7b8:	d1f9      	bne.n	800f7ae <rcutils_string_map_reserve+0x12>
 800f7ba:	201f      	movs	r0, #31
 800f7bc:	b003      	add	sp, #12
 800f7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7c2:	68ab      	ldr	r3, [r5, #8]
 800f7c4:	42a3      	cmp	r3, r4
 800f7c6:	d049      	beq.n	800f85c <rcutils_string_map_reserve+0xc0>
 800f7c8:	6a2f      	ldr	r7, [r5, #32]
 800f7ca:	2c00      	cmp	r4, #0
 800f7cc:	d035      	beq.n	800f83a <rcutils_string_map_reserve+0x9e>
 800f7ce:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f7d2:	d245      	bcs.n	800f860 <rcutils_string_map_reserve+0xc4>
 800f7d4:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800f7d8:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800f7dc:	6828      	ldr	r0, [r5, #0]
 800f7de:	4641      	mov	r1, r8
 800f7e0:	463a      	mov	r2, r7
 800f7e2:	47c8      	blx	r9
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	d03b      	beq.n	800f860 <rcutils_string_map_reserve+0xc4>
 800f7e8:	6833      	ldr	r3, [r6, #0]
 800f7ea:	463a      	mov	r2, r7
 800f7ec:	6018      	str	r0, [r3, #0]
 800f7ee:	4641      	mov	r1, r8
 800f7f0:	6858      	ldr	r0, [r3, #4]
 800f7f2:	47c8      	blx	r9
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	d033      	beq.n	800f860 <rcutils_string_map_reserve+0xc4>
 800f7f8:	6835      	ldr	r5, [r6, #0]
 800f7fa:	68ab      	ldr	r3, [r5, #8]
 800f7fc:	6068      	str	r0, [r5, #4]
 800f7fe:	42a3      	cmp	r3, r4
 800f800:	d227      	bcs.n	800f852 <rcutils_string_map_reserve+0xb6>
 800f802:	682a      	ldr	r2, [r5, #0]
 800f804:	eb00 0108 	add.w	r1, r0, r8
 800f808:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800f80c:	428f      	cmp	r7, r1
 800f80e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f812:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f816:	d203      	bcs.n	800f820 <rcutils_string_map_reserve+0x84>
 800f818:	eb02 0108 	add.w	r1, r2, r8
 800f81c:	428e      	cmp	r6, r1
 800f81e:	d323      	bcc.n	800f868 <rcutils_string_map_reserve+0xcc>
 800f820:	1ae3      	subs	r3, r4, r3
 800f822:	009a      	lsls	r2, r3, #2
 800f824:	4638      	mov	r0, r7
 800f826:	2100      	movs	r1, #0
 800f828:	9201      	str	r2, [sp, #4]
 800f82a:	f00a fe79 	bl	801a520 <memset>
 800f82e:	9a01      	ldr	r2, [sp, #4]
 800f830:	4630      	mov	r0, r6
 800f832:	2100      	movs	r1, #0
 800f834:	f00a fe74 	bl	801a520 <memset>
 800f838:	e00b      	b.n	800f852 <rcutils_string_map_reserve+0xb6>
 800f83a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800f83e:	6828      	ldr	r0, [r5, #0]
 800f840:	4639      	mov	r1, r7
 800f842:	47c0      	blx	r8
 800f844:	6833      	ldr	r3, [r6, #0]
 800f846:	4639      	mov	r1, r7
 800f848:	6858      	ldr	r0, [r3, #4]
 800f84a:	601c      	str	r4, [r3, #0]
 800f84c:	47c0      	blx	r8
 800f84e:	6835      	ldr	r5, [r6, #0]
 800f850:	606c      	str	r4, [r5, #4]
 800f852:	2000      	movs	r0, #0
 800f854:	60ac      	str	r4, [r5, #8]
 800f856:	b003      	add	sp, #12
 800f858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f85c:	2000      	movs	r0, #0
 800f85e:	e7ad      	b.n	800f7bc <rcutils_string_map_reserve+0x20>
 800f860:	200a      	movs	r0, #10
 800f862:	e7ab      	b.n	800f7bc <rcutils_string_map_reserve+0x20>
 800f864:	200b      	movs	r0, #11
 800f866:	4770      	bx	lr
 800f868:	1f13      	subs	r3, r2, #4
 800f86a:	f1ac 0c04 	sub.w	ip, ip, #4
 800f86e:	4498      	add	r8, r3
 800f870:	4460      	add	r0, ip
 800f872:	4462      	add	r2, ip
 800f874:	2300      	movs	r3, #0
 800f876:	f842 3f04 	str.w	r3, [r2, #4]!
 800f87a:	4542      	cmp	r2, r8
 800f87c:	f840 3f04 	str.w	r3, [r0, #4]!
 800f880:	d1f9      	bne.n	800f876 <rcutils_string_map_reserve+0xda>
 800f882:	e7e6      	b.n	800f852 <rcutils_string_map_reserve+0xb6>

0800f884 <rcutils_string_map_init>:
 800f884:	b082      	sub	sp, #8
 800f886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f888:	460e      	mov	r6, r1
 800f88a:	a906      	add	r1, sp, #24
 800f88c:	e881 000c 	stmia.w	r1, {r2, r3}
 800f890:	b380      	cbz	r0, 800f8f4 <rcutils_string_map_init+0x70>
 800f892:	6807      	ldr	r7, [r0, #0]
 800f894:	4604      	mov	r4, r0
 800f896:	b12f      	cbz	r7, 800f8a4 <rcutils_string_map_init+0x20>
 800f898:	251e      	movs	r5, #30
 800f89a:	4628      	mov	r0, r5
 800f89c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f8a0:	b002      	add	sp, #8
 800f8a2:	4770      	bx	lr
 800f8a4:	a806      	add	r0, sp, #24
 800f8a6:	f7ff ff37 	bl	800f718 <rcutils_allocator_is_valid>
 800f8aa:	b318      	cbz	r0, 800f8f4 <rcutils_string_map_init+0x70>
 800f8ac:	9b06      	ldr	r3, [sp, #24]
 800f8ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f8b0:	2024      	movs	r0, #36	; 0x24
 800f8b2:	4798      	blx	r3
 800f8b4:	4605      	mov	r5, r0
 800f8b6:	6020      	str	r0, [r4, #0]
 800f8b8:	b310      	cbz	r0, 800f900 <rcutils_string_map_init+0x7c>
 800f8ba:	f10d 0e18 	add.w	lr, sp, #24
 800f8be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8c2:	f105 0c10 	add.w	ip, r5, #16
 800f8c6:	e9c5 7700 	strd	r7, r7, [r5]
 800f8ca:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800f8ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8d2:	f8de 3000 	ldr.w	r3, [lr]
 800f8d6:	f8cc 3000 	str.w	r3, [ip]
 800f8da:	4631      	mov	r1, r6
 800f8dc:	4620      	mov	r0, r4
 800f8de:	f7ff ff5d 	bl	800f79c <rcutils_string_map_reserve>
 800f8e2:	4605      	mov	r5, r0
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	d0d8      	beq.n	800f89a <rcutils_string_map_init+0x16>
 800f8e8:	9b07      	ldr	r3, [sp, #28]
 800f8ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f8ec:	6820      	ldr	r0, [r4, #0]
 800f8ee:	4798      	blx	r3
 800f8f0:	6027      	str	r7, [r4, #0]
 800f8f2:	e7d2      	b.n	800f89a <rcutils_string_map_init+0x16>
 800f8f4:	250b      	movs	r5, #11
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f8fc:	b002      	add	sp, #8
 800f8fe:	4770      	bx	lr
 800f900:	250a      	movs	r5, #10
 800f902:	e7ca      	b.n	800f89a <rcutils_string_map_init+0x16>

0800f904 <rcutils_string_map_fini>:
 800f904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f908:	b082      	sub	sp, #8
 800f90a:	2800      	cmp	r0, #0
 800f90c:	d039      	beq.n	800f982 <rcutils_string_map_fini+0x7e>
 800f90e:	6804      	ldr	r4, [r0, #0]
 800f910:	4606      	mov	r6, r0
 800f912:	2c00      	cmp	r4, #0
 800f914:	d031      	beq.n	800f97a <rcutils_string_map_fini+0x76>
 800f916:	68a3      	ldr	r3, [r4, #8]
 800f918:	b323      	cbz	r3, 800f964 <rcutils_string_map_fini+0x60>
 800f91a:	2500      	movs	r5, #0
 800f91c:	6822      	ldr	r2, [r4, #0]
 800f91e:	46a8      	mov	r8, r5
 800f920:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f924:	b1d8      	cbz	r0, 800f95e <rcutils_string_map_fini+0x5a>
 800f926:	6a21      	ldr	r1, [r4, #32]
 800f928:	6967      	ldr	r7, [r4, #20]
 800f92a:	9101      	str	r1, [sp, #4]
 800f92c:	47b8      	blx	r7
 800f92e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f932:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f936:	9901      	ldr	r1, [sp, #4]
 800f938:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f93c:	47b8      	blx	r7
 800f93e:	68e3      	ldr	r3, [r4, #12]
 800f940:	6862      	ldr	r2, [r4, #4]
 800f942:	3b01      	subs	r3, #1
 800f944:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f948:	60e3      	str	r3, [r4, #12]
 800f94a:	6834      	ldr	r4, [r6, #0]
 800f94c:	68a3      	ldr	r3, [r4, #8]
 800f94e:	3501      	adds	r5, #1
 800f950:	429d      	cmp	r5, r3
 800f952:	d207      	bcs.n	800f964 <rcutils_string_map_fini+0x60>
 800f954:	6822      	ldr	r2, [r4, #0]
 800f956:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d1e3      	bne.n	800f926 <rcutils_string_map_fini+0x22>
 800f95e:	3501      	adds	r5, #1
 800f960:	429d      	cmp	r5, r3
 800f962:	d3dd      	bcc.n	800f920 <rcutils_string_map_fini+0x1c>
 800f964:	2100      	movs	r1, #0
 800f966:	4630      	mov	r0, r6
 800f968:	f7ff ff18 	bl	800f79c <rcutils_string_map_reserve>
 800f96c:	4604      	mov	r4, r0
 800f96e:	b920      	cbnz	r0, 800f97a <rcutils_string_map_fini+0x76>
 800f970:	6830      	ldr	r0, [r6, #0]
 800f972:	6943      	ldr	r3, [r0, #20]
 800f974:	6a01      	ldr	r1, [r0, #32]
 800f976:	4798      	blx	r3
 800f978:	6034      	str	r4, [r6, #0]
 800f97a:	4620      	mov	r0, r4
 800f97c:	b002      	add	sp, #8
 800f97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f982:	240b      	movs	r4, #11
 800f984:	4620      	mov	r0, r4
 800f986:	b002      	add	sp, #8
 800f988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f98c <rcutils_string_map_getn>:
 800f98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f990:	b082      	sub	sp, #8
 800f992:	b308      	cbz	r0, 800f9d8 <rcutils_string_map_getn+0x4c>
 800f994:	6804      	ldr	r4, [r0, #0]
 800f996:	b304      	cbz	r4, 800f9da <rcutils_string_map_getn+0x4e>
 800f998:	460d      	mov	r5, r1
 800f99a:	b1e9      	cbz	r1, 800f9d8 <rcutils_string_map_getn+0x4c>
 800f99c:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800f9a0:	6827      	ldr	r7, [r4, #0]
 800f9a2:	f1b9 0f00 	cmp.w	r9, #0
 800f9a6:	d017      	beq.n	800f9d8 <rcutils_string_map_getn+0x4c>
 800f9a8:	4690      	mov	r8, r2
 800f9aa:	3f04      	subs	r7, #4
 800f9ac:	2600      	movs	r6, #0
 800f9ae:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800f9b2:	9101      	str	r1, [sp, #4]
 800f9b4:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800f9b8:	4608      	mov	r0, r1
 800f9ba:	3601      	adds	r6, #1
 800f9bc:	b151      	cbz	r1, 800f9d4 <rcutils_string_map_getn+0x48>
 800f9be:	f7f0 fc19 	bl	80001f4 <strlen>
 800f9c2:	4540      	cmp	r0, r8
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	9901      	ldr	r1, [sp, #4]
 800f9c8:	bf38      	it	cc
 800f9ca:	4642      	movcc	r2, r8
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	f00a fdbc 	bl	801a54a <strncmp>
 800f9d2:	b130      	cbz	r0, 800f9e2 <rcutils_string_map_getn+0x56>
 800f9d4:	45b1      	cmp	r9, r6
 800f9d6:	d1ea      	bne.n	800f9ae <rcutils_string_map_getn+0x22>
 800f9d8:	2400      	movs	r4, #0
 800f9da:	4620      	mov	r0, r4
 800f9dc:	b002      	add	sp, #8
 800f9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9e2:	6863      	ldr	r3, [r4, #4]
 800f9e4:	f853 400a 	ldr.w	r4, [r3, sl]
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	b002      	add	sp, #8
 800f9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f9f0 <rcutils_system_time_now>:
 800f9f0:	b310      	cbz	r0, 800fa38 <rcutils_system_time_now+0x48>
 800f9f2:	b570      	push	{r4, r5, r6, lr}
 800f9f4:	b084      	sub	sp, #16
 800f9f6:	4669      	mov	r1, sp
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	2001      	movs	r0, #1
 800f9fc:	f7f3 ff34 	bl	8003868 <clock_gettime>
 800fa00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa04:	2800      	cmp	r0, #0
 800fa06:	f171 0300 	sbcs.w	r3, r1, #0
 800fa0a:	db12      	blt.n	800fa32 <rcutils_system_time_now+0x42>
 800fa0c:	9d02      	ldr	r5, [sp, #8]
 800fa0e:	2d00      	cmp	r5, #0
 800fa10:	db0c      	blt.n	800fa2c <rcutils_system_time_now+0x3c>
 800fa12:	4e0a      	ldr	r6, [pc, #40]	; (800fa3c <rcutils_system_time_now+0x4c>)
 800fa14:	fba0 2306 	umull	r2, r3, r0, r6
 800fa18:	1952      	adds	r2, r2, r5
 800fa1a:	fb06 3301 	mla	r3, r6, r1, r3
 800fa1e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800fa22:	2000      	movs	r0, #0
 800fa24:	e9c4 2300 	strd	r2, r3, [r4]
 800fa28:	b004      	add	sp, #16
 800fa2a:	bd70      	pop	{r4, r5, r6, pc}
 800fa2c:	ea50 0301 	orrs.w	r3, r0, r1
 800fa30:	d1ef      	bne.n	800fa12 <rcutils_system_time_now+0x22>
 800fa32:	2002      	movs	r0, #2
 800fa34:	b004      	add	sp, #16
 800fa36:	bd70      	pop	{r4, r5, r6, pc}
 800fa38:	200b      	movs	r0, #11
 800fa3a:	4770      	bx	lr
 800fa3c:	3b9aca00 	.word	0x3b9aca00

0800fa40 <rcutils_steady_time_now>:
 800fa40:	b310      	cbz	r0, 800fa88 <rcutils_steady_time_now+0x48>
 800fa42:	b570      	push	{r4, r5, r6, lr}
 800fa44:	b084      	sub	sp, #16
 800fa46:	4669      	mov	r1, sp
 800fa48:	4604      	mov	r4, r0
 800fa4a:	2000      	movs	r0, #0
 800fa4c:	f7f3 ff0c 	bl	8003868 <clock_gettime>
 800fa50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa54:	2800      	cmp	r0, #0
 800fa56:	f171 0300 	sbcs.w	r3, r1, #0
 800fa5a:	db12      	blt.n	800fa82 <rcutils_steady_time_now+0x42>
 800fa5c:	9d02      	ldr	r5, [sp, #8]
 800fa5e:	2d00      	cmp	r5, #0
 800fa60:	db0c      	blt.n	800fa7c <rcutils_steady_time_now+0x3c>
 800fa62:	4e0a      	ldr	r6, [pc, #40]	; (800fa8c <rcutils_steady_time_now+0x4c>)
 800fa64:	fba0 2306 	umull	r2, r3, r0, r6
 800fa68:	1952      	adds	r2, r2, r5
 800fa6a:	fb06 3301 	mla	r3, r6, r1, r3
 800fa6e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800fa72:	2000      	movs	r0, #0
 800fa74:	e9c4 2300 	strd	r2, r3, [r4]
 800fa78:	b004      	add	sp, #16
 800fa7a:	bd70      	pop	{r4, r5, r6, pc}
 800fa7c:	ea50 0301 	orrs.w	r3, r0, r1
 800fa80:	d1ef      	bne.n	800fa62 <rcutils_steady_time_now+0x22>
 800fa82:	2002      	movs	r0, #2
 800fa84:	b004      	add	sp, #16
 800fa86:	bd70      	pop	{r4, r5, r6, pc}
 800fa88:	200b      	movs	r0, #11
 800fa8a:	4770      	bx	lr
 800fa8c:	3b9aca00 	.word	0x3b9aca00

0800fa90 <rmw_get_default_publisher_options>:
 800fa90:	2000      	movs	r0, #0
 800fa92:	4770      	bx	lr

0800fa94 <rmw_get_default_subscription_options>:
 800fa94:	2200      	movs	r2, #0
 800fa96:	6002      	str	r2, [r0, #0]
 800fa98:	7102      	strb	r2, [r0, #4]
 800fa9a:	4770      	bx	lr

0800fa9c <rmw_get_zero_initialized_message_info>:
 800fa9c:	b470      	push	{r4, r5, r6}
 800fa9e:	4d07      	ldr	r5, [pc, #28]	; (800fabc <rmw_get_zero_initialized_message_info+0x20>)
 800faa0:	4606      	mov	r6, r0
 800faa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faa4:	4634      	mov	r4, r6
 800faa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800faa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800faac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fab0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fab4:	4630      	mov	r0, r6
 800fab6:	bc70      	pop	{r4, r5, r6}
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	0801b7c0 	.word	0x0801b7c0

0800fac0 <rmw_validate_full_topic_name>:
 800fac0:	2800      	cmp	r0, #0
 800fac2:	d062      	beq.n	800fb8a <rmw_validate_full_topic_name+0xca>
 800fac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fac8:	460d      	mov	r5, r1
 800faca:	2900      	cmp	r1, #0
 800facc:	d05f      	beq.n	800fb8e <rmw_validate_full_topic_name+0xce>
 800face:	4616      	mov	r6, r2
 800fad0:	4604      	mov	r4, r0
 800fad2:	f7f0 fb8f 	bl	80001f4 <strlen>
 800fad6:	b148      	cbz	r0, 800faec <rmw_validate_full_topic_name+0x2c>
 800fad8:	7823      	ldrb	r3, [r4, #0]
 800fada:	2b2f      	cmp	r3, #47	; 0x2f
 800fadc:	d00d      	beq.n	800fafa <rmw_validate_full_topic_name+0x3a>
 800fade:	2302      	movs	r3, #2
 800fae0:	602b      	str	r3, [r5, #0]
 800fae2:	b13e      	cbz	r6, 800faf4 <rmw_validate_full_topic_name+0x34>
 800fae4:	2000      	movs	r0, #0
 800fae6:	6030      	str	r0, [r6, #0]
 800fae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faec:	2301      	movs	r3, #1
 800faee:	602b      	str	r3, [r5, #0]
 800faf0:	2e00      	cmp	r6, #0
 800faf2:	d1f7      	bne.n	800fae4 <rmw_validate_full_topic_name+0x24>
 800faf4:	2000      	movs	r0, #0
 800faf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fafa:	1e47      	subs	r7, r0, #1
 800fafc:	5de3      	ldrb	r3, [r4, r7]
 800fafe:	2b2f      	cmp	r3, #47	; 0x2f
 800fb00:	d047      	beq.n	800fb92 <rmw_validate_full_topic_name+0xd2>
 800fb02:	1e63      	subs	r3, r4, #1
 800fb04:	eb03 0900 	add.w	r9, r3, r0
 800fb08:	f1c4 0e01 	rsb	lr, r4, #1
 800fb0c:	eb0e 0803 	add.w	r8, lr, r3
 800fb10:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800fb14:	f021 0220 	bic.w	r2, r1, #32
 800fb18:	3a41      	subs	r2, #65	; 0x41
 800fb1a:	2a19      	cmp	r2, #25
 800fb1c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800fb20:	d90c      	bls.n	800fb3c <rmw_validate_full_topic_name+0x7c>
 800fb22:	295f      	cmp	r1, #95	; 0x5f
 800fb24:	d00a      	beq.n	800fb3c <rmw_validate_full_topic_name+0x7c>
 800fb26:	f1bc 0f0a 	cmp.w	ip, #10
 800fb2a:	d907      	bls.n	800fb3c <rmw_validate_full_topic_name+0x7c>
 800fb2c:	2304      	movs	r3, #4
 800fb2e:	602b      	str	r3, [r5, #0]
 800fb30:	2e00      	cmp	r6, #0
 800fb32:	d0df      	beq.n	800faf4 <rmw_validate_full_topic_name+0x34>
 800fb34:	f8c6 8000 	str.w	r8, [r6]
 800fb38:	2000      	movs	r0, #0
 800fb3a:	e7d5      	b.n	800fae8 <rmw_validate_full_topic_name+0x28>
 800fb3c:	454b      	cmp	r3, r9
 800fb3e:	d1e5      	bne.n	800fb0c <rmw_validate_full_topic_name+0x4c>
 800fb40:	f8df e084 	ldr.w	lr, [pc, #132]	; 800fbc8 <rmw_validate_full_topic_name+0x108>
 800fb44:	2300      	movs	r3, #0
 800fb46:	f107 0801 	add.w	r8, r7, #1
 800fb4a:	e005      	b.n	800fb58 <rmw_validate_full_topic_name+0x98>
 800fb4c:	4611      	mov	r1, r2
 800fb4e:	4288      	cmp	r0, r1
 800fb50:	4613      	mov	r3, r2
 800fb52:	f104 0401 	add.w	r4, r4, #1
 800fb56:	d925      	bls.n	800fba4 <rmw_validate_full_topic_name+0xe4>
 800fb58:	429f      	cmp	r7, r3
 800fb5a:	f103 0201 	add.w	r2, r3, #1
 800fb5e:	d01e      	beq.n	800fb9e <rmw_validate_full_topic_name+0xde>
 800fb60:	7821      	ldrb	r1, [r4, #0]
 800fb62:	292f      	cmp	r1, #47	; 0x2f
 800fb64:	d1f2      	bne.n	800fb4c <rmw_validate_full_topic_name+0x8c>
 800fb66:	f894 c001 	ldrb.w	ip, [r4, #1]
 800fb6a:	1c5a      	adds	r2, r3, #1
 800fb6c:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800fb70:	4611      	mov	r1, r2
 800fb72:	d024      	beq.n	800fbbe <rmw_validate_full_topic_name+0xfe>
 800fb74:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800fb78:	075b      	lsls	r3, r3, #29
 800fb7a:	d5e8      	bpl.n	800fb4e <rmw_validate_full_topic_name+0x8e>
 800fb7c:	2306      	movs	r3, #6
 800fb7e:	602b      	str	r3, [r5, #0]
 800fb80:	2e00      	cmp	r6, #0
 800fb82:	d0b7      	beq.n	800faf4 <rmw_validate_full_topic_name+0x34>
 800fb84:	6032      	str	r2, [r6, #0]
 800fb86:	2000      	movs	r0, #0
 800fb88:	e7ae      	b.n	800fae8 <rmw_validate_full_topic_name+0x28>
 800fb8a:	200b      	movs	r0, #11
 800fb8c:	4770      	bx	lr
 800fb8e:	200b      	movs	r0, #11
 800fb90:	e7aa      	b.n	800fae8 <rmw_validate_full_topic_name+0x28>
 800fb92:	2303      	movs	r3, #3
 800fb94:	602b      	str	r3, [r5, #0]
 800fb96:	2e00      	cmp	r6, #0
 800fb98:	d0ac      	beq.n	800faf4 <rmw_validate_full_topic_name+0x34>
 800fb9a:	6037      	str	r7, [r6, #0]
 800fb9c:	e7aa      	b.n	800faf4 <rmw_validate_full_topic_name+0x34>
 800fb9e:	4641      	mov	r1, r8
 800fba0:	1c7a      	adds	r2, r7, #1
 800fba2:	e7d4      	b.n	800fb4e <rmw_validate_full_topic_name+0x8e>
 800fba4:	28f7      	cmp	r0, #247	; 0xf7
 800fba6:	d802      	bhi.n	800fbae <rmw_validate_full_topic_name+0xee>
 800fba8:	2000      	movs	r0, #0
 800fbaa:	6028      	str	r0, [r5, #0]
 800fbac:	e79c      	b.n	800fae8 <rmw_validate_full_topic_name+0x28>
 800fbae:	2307      	movs	r3, #7
 800fbb0:	602b      	str	r3, [r5, #0]
 800fbb2:	2e00      	cmp	r6, #0
 800fbb4:	d09e      	beq.n	800faf4 <rmw_validate_full_topic_name+0x34>
 800fbb6:	23f6      	movs	r3, #246	; 0xf6
 800fbb8:	6033      	str	r3, [r6, #0]
 800fbba:	2000      	movs	r0, #0
 800fbbc:	e794      	b.n	800fae8 <rmw_validate_full_topic_name+0x28>
 800fbbe:	2305      	movs	r3, #5
 800fbc0:	602b      	str	r3, [r5, #0]
 800fbc2:	2e00      	cmp	r6, #0
 800fbc4:	d1de      	bne.n	800fb84 <rmw_validate_full_topic_name+0xc4>
 800fbc6:	e795      	b.n	800faf4 <rmw_validate_full_topic_name+0x34>
 800fbc8:	0801c1d8 	.word	0x0801c1d8

0800fbcc <rmw_uros_set_custom_transport>:
 800fbcc:	b470      	push	{r4, r5, r6}
 800fbce:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800fbd2:	b162      	cbz	r2, 800fbee <rmw_uros_set_custom_transport+0x22>
 800fbd4:	b15b      	cbz	r3, 800fbee <rmw_uros_set_custom_transport+0x22>
 800fbd6:	b155      	cbz	r5, 800fbee <rmw_uros_set_custom_transport+0x22>
 800fbd8:	b14e      	cbz	r6, 800fbee <rmw_uros_set_custom_transport+0x22>
 800fbda:	4c06      	ldr	r4, [pc, #24]	; (800fbf4 <rmw_uros_set_custom_transport+0x28>)
 800fbdc:	7020      	strb	r0, [r4, #0]
 800fbde:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800fbe2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fbe6:	6166      	str	r6, [r4, #20]
 800fbe8:	2000      	movs	r0, #0
 800fbea:	bc70      	pop	{r4, r5, r6}
 800fbec:	4770      	bx	lr
 800fbee:	200b      	movs	r0, #11
 800fbf0:	bc70      	pop	{r4, r5, r6}
 800fbf2:	4770      	bx	lr
 800fbf4:	2000a1e0 	.word	0x2000a1e0

0800fbf8 <flush_session>:
 800fbf8:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800fbfa:	f002 bf01 	b.w	8012a00 <uxr_run_session_until_confirm_delivery>
 800fbfe:	bf00      	nop

0800fc00 <rmw_publish>:
 800fc00:	2800      	cmp	r0, #0
 800fc02:	d053      	beq.n	800fcac <rmw_publish+0xac>
 800fc04:	b570      	push	{r4, r5, r6, lr}
 800fc06:	460d      	mov	r5, r1
 800fc08:	b08e      	sub	sp, #56	; 0x38
 800fc0a:	2900      	cmp	r1, #0
 800fc0c:	d04b      	beq.n	800fca6 <rmw_publish+0xa6>
 800fc0e:	4604      	mov	r4, r0
 800fc10:	6800      	ldr	r0, [r0, #0]
 800fc12:	f000 fe31 	bl	8010878 <is_uxrce_rmw_identifier_valid>
 800fc16:	2800      	cmp	r0, #0
 800fc18:	d045      	beq.n	800fca6 <rmw_publish+0xa6>
 800fc1a:	6866      	ldr	r6, [r4, #4]
 800fc1c:	2e00      	cmp	r6, #0
 800fc1e:	d042      	beq.n	800fca6 <rmw_publish+0xa6>
 800fc20:	69b4      	ldr	r4, [r6, #24]
 800fc22:	4628      	mov	r0, r5
 800fc24:	6923      	ldr	r3, [r4, #16]
 800fc26:	4798      	blx	r3
 800fc28:	69f3      	ldr	r3, [r6, #28]
 800fc2a:	9005      	str	r0, [sp, #20]
 800fc2c:	b113      	cbz	r3, 800fc34 <rmw_publish+0x34>
 800fc2e:	a805      	add	r0, sp, #20
 800fc30:	4798      	blx	r3
 800fc32:	9805      	ldr	r0, [sp, #20]
 800fc34:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fc38:	691b      	ldr	r3, [r3, #16]
 800fc3a:	9000      	str	r0, [sp, #0]
 800fc3c:	6972      	ldr	r2, [r6, #20]
 800fc3e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800fc40:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800fc44:	ab06      	add	r3, sp, #24
 800fc46:	f003 fce3 	bl	8013610 <uxr_prepare_output_stream>
 800fc4a:	b1d8      	cbz	r0, 800fc84 <rmw_publish+0x84>
 800fc4c:	68a3      	ldr	r3, [r4, #8]
 800fc4e:	4628      	mov	r0, r5
 800fc50:	a906      	add	r1, sp, #24
 800fc52:	4798      	blx	r3
 800fc54:	6a33      	ldr	r3, [r6, #32]
 800fc56:	4604      	mov	r4, r0
 800fc58:	b10b      	cbz	r3, 800fc5e <rmw_publish+0x5e>
 800fc5a:	a806      	add	r0, sp, #24
 800fc5c:	4798      	blx	r3
 800fc5e:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800fc62:	2b01      	cmp	r3, #1
 800fc64:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fc68:	d022      	beq.n	800fcb0 <rmw_publish+0xb0>
 800fc6a:	6918      	ldr	r0, [r3, #16]
 800fc6c:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800fc6e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fc72:	f002 fec5 	bl	8012a00 <uxr_run_session_until_confirm_delivery>
 800fc76:	4020      	ands	r0, r4
 800fc78:	b2c4      	uxtb	r4, r0
 800fc7a:	f084 0001 	eor.w	r0, r4, #1
 800fc7e:	b2c0      	uxtb	r0, r0
 800fc80:	b00e      	add	sp, #56	; 0x38
 800fc82:	bd70      	pop	{r4, r5, r6, pc}
 800fc84:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fc88:	4a0c      	ldr	r2, [pc, #48]	; (800fcbc <rmw_publish+0xbc>)
 800fc8a:	6918      	ldr	r0, [r3, #16]
 800fc8c:	9b05      	ldr	r3, [sp, #20]
 800fc8e:	9300      	str	r3, [sp, #0]
 800fc90:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800fc94:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fc98:	6972      	ldr	r2, [r6, #20]
 800fc9a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800fc9c:	ab06      	add	r3, sp, #24
 800fc9e:	f003 fce7 	bl	8013670 <uxr_prepare_output_stream_fragmented>
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d1d2      	bne.n	800fc4c <rmw_publish+0x4c>
 800fca6:	2001      	movs	r0, #1
 800fca8:	b00e      	add	sp, #56	; 0x38
 800fcaa:	bd70      	pop	{r4, r5, r6, pc}
 800fcac:	2001      	movs	r0, #1
 800fcae:	4770      	bx	lr
 800fcb0:	6918      	ldr	r0, [r3, #16]
 800fcb2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fcb6:	f002 fae7 	bl	8012288 <uxr_flash_output_streams>
 800fcba:	e7de      	b.n	800fc7a <rmw_publish+0x7a>
 800fcbc:	0800fbf9 	.word	0x0800fbf9

0800fcc0 <rmw_create_publisher>:
 800fcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc4:	b087      	sub	sp, #28
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	f000 80cc 	beq.w	800fe64 <rmw_create_publisher+0x1a4>
 800fccc:	460e      	mov	r6, r1
 800fcce:	2900      	cmp	r1, #0
 800fcd0:	f000 80c8 	beq.w	800fe64 <rmw_create_publisher+0x1a4>
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	6800      	ldr	r0, [r0, #0]
 800fcd8:	4615      	mov	r5, r2
 800fcda:	4698      	mov	r8, r3
 800fcdc:	f000 fdcc 	bl	8010878 <is_uxrce_rmw_identifier_valid>
 800fce0:	2800      	cmp	r0, #0
 800fce2:	f000 80bf 	beq.w	800fe64 <rmw_create_publisher+0x1a4>
 800fce6:	2d00      	cmp	r5, #0
 800fce8:	f000 80bc 	beq.w	800fe64 <rmw_create_publisher+0x1a4>
 800fcec:	782b      	ldrb	r3, [r5, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f000 80b8 	beq.w	800fe64 <rmw_create_publisher+0x1a4>
 800fcf4:	f1b8 0f00 	cmp.w	r8, #0
 800fcf8:	f000 80b4 	beq.w	800fe64 <rmw_create_publisher+0x1a4>
 800fcfc:	485c      	ldr	r0, [pc, #368]	; (800fe70 <rmw_create_publisher+0x1b0>)
 800fcfe:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fd02:	f007 f989 	bl	8017018 <get_memory>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	f000 80ac 	beq.w	800fe64 <rmw_create_publisher+0x1a4>
 800fd0c:	68c4      	ldr	r4, [r0, #12]
 800fd0e:	2300      	movs	r3, #0
 800fd10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800fd14:	f007 f9e8 	bl	80170e8 <rmw_get_implementation_identifier>
 800fd18:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800fd1c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800fd20:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800fd24:	4628      	mov	r0, r5
 800fd26:	f7f0 fa65 	bl	80001f4 <strlen>
 800fd2a:	3001      	adds	r0, #1
 800fd2c:	283c      	cmp	r0, #60	; 0x3c
 800fd2e:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800fd32:	f200 8094 	bhi.w	800fe5e <rmw_create_publisher+0x19e>
 800fd36:	4a4f      	ldr	r2, [pc, #316]	; (800fe74 <rmw_create_publisher+0x1b4>)
 800fd38:	462b      	mov	r3, r5
 800fd3a:	213c      	movs	r1, #60	; 0x3c
 800fd3c:	4650      	mov	r0, sl
 800fd3e:	f00a fa8f 	bl	801a260 <sniprintf>
 800fd42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd46:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800fd4a:	4641      	mov	r1, r8
 800fd4c:	2250      	movs	r2, #80	; 0x50
 800fd4e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800fd52:	f00a fd04 	bl	801a75e <memcpy>
 800fd56:	f898 3008 	ldrb.w	r3, [r8, #8]
 800fd5a:	4947      	ldr	r1, [pc, #284]	; (800fe78 <rmw_create_publisher+0x1b8>)
 800fd5c:	2b02      	cmp	r3, #2
 800fd5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd62:	bf0c      	ite	eq
 800fd64:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800fd68:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800fd6c:	67a3      	str	r3, [r4, #120]	; 0x78
 800fd6e:	2300      	movs	r3, #0
 800fd70:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fd74:	4630      	mov	r0, r6
 800fd76:	f000 fd8d 	bl	8010894 <get_message_typesupport_handle>
 800fd7a:	2800      	cmp	r0, #0
 800fd7c:	d06f      	beq.n	800fe5e <rmw_create_publisher+0x19e>
 800fd7e:	6842      	ldr	r2, [r0, #4]
 800fd80:	61a2      	str	r2, [r4, #24]
 800fd82:	2a00      	cmp	r2, #0
 800fd84:	d06b      	beq.n	800fe5e <rmw_create_publisher+0x19e>
 800fd86:	4629      	mov	r1, r5
 800fd88:	4643      	mov	r3, r8
 800fd8a:	4648      	mov	r0, r9
 800fd8c:	f007 fbf6 	bl	801757c <create_topic>
 800fd90:	6260      	str	r0, [r4, #36]	; 0x24
 800fd92:	2800      	cmp	r0, #0
 800fd94:	d063      	beq.n	800fe5e <rmw_create_publisher+0x19e>
 800fd96:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fd9a:	f241 5398 	movw	r3, #5528	; 0x1598
 800fd9e:	2103      	movs	r1, #3
 800fda0:	5ad0      	ldrh	r0, [r2, r3]
 800fda2:	1c45      	adds	r5, r0, #1
 800fda4:	52d5      	strh	r5, [r2, r3]
 800fda6:	f001 fffd 	bl	8011da4 <uxr_object_id>
 800fdaa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fdae:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800fdb2:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800fdb6:	6912      	ldr	r2, [r2, #16]
 800fdb8:	6120      	str	r0, [r4, #16]
 800fdba:	f04f 0a06 	mov.w	sl, #6
 800fdbe:	f8cd a000 	str.w	sl, [sp]
 800fdc2:	6819      	ldr	r1, [r3, #0]
 800fdc4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fdc8:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800fdcc:	6922      	ldr	r2, [r4, #16]
 800fdce:	f001 fe99 	bl	8011b04 <uxr_buffer_create_publisher_bin>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fdd8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800fddc:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fde0:	f000 fcca 	bl	8010778 <run_xrce_session>
 800fde4:	b3b8      	cbz	r0, 800fe56 <rmw_create_publisher+0x196>
 800fde6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fdea:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800fdee:	f241 539a 	movw	r3, #5530	; 0x159a
 800fdf2:	2105      	movs	r1, #5
 800fdf4:	5ad0      	ldrh	r0, [r2, r3]
 800fdf6:	1c45      	adds	r5, r0, #1
 800fdf8:	52d5      	strh	r5, [r2, r3]
 800fdfa:	f001 ffd3 	bl	8011da4 <uxr_object_id>
 800fdfe:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800fe02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe06:	6915      	ldr	r5, [r2, #16]
 800fe08:	6160      	str	r0, [r4, #20]
 800fe0a:	ae04      	add	r6, sp, #16
 800fe0c:	4641      	mov	r1, r8
 800fe0e:	4630      	mov	r0, r6
 800fe10:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800fe14:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800fe18:	f000 fcca 	bl	80107b0 <convert_qos_profile>
 800fe1c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fe20:	f8cd a00c 	str.w	sl, [sp, #12]
 800fe24:	9001      	str	r0, [sp, #4]
 800fe26:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fe2a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fe2e:	9300      	str	r3, [sp, #0]
 800fe30:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800fe34:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800fe38:	f8d8 1000 	ldr.w	r1, [r8]
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	f001 febf 	bl	8011bc0 <uxr_buffer_create_datawriter_bin>
 800fe42:	4602      	mov	r2, r0
 800fe44:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fe48:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800fe4c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fe50:	f000 fc92 	bl	8010778 <run_xrce_session>
 800fe54:	b938      	cbnz	r0, 800fe66 <rmw_create_publisher+0x1a6>
 800fe56:	4806      	ldr	r0, [pc, #24]	; (800fe70 <rmw_create_publisher+0x1b0>)
 800fe58:	4621      	mov	r1, r4
 800fe5a:	f007 f8ed 	bl	8017038 <put_memory>
 800fe5e:	4638      	mov	r0, r7
 800fe60:	f000 fb3a 	bl	80104d8 <rmw_uxrce_fini_publisher_memory>
 800fe64:	2700      	movs	r7, #0
 800fe66:	4638      	mov	r0, r7
 800fe68:	b007      	add	sp, #28
 800fe6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe6e:	bf00      	nop
 800fe70:	2000a210 	.word	0x2000a210
 800fe74:	0801ba44 	.word	0x0801ba44
 800fe78:	0801ba10 	.word	0x0801ba10

0800fe7c <rmw_publisher_get_actual_qos>:
 800fe7c:	2000      	movs	r0, #0
 800fe7e:	4770      	bx	lr

0800fe80 <rmw_destroy_publisher>:
 800fe80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe82:	b128      	cbz	r0, 800fe90 <rmw_destroy_publisher+0x10>
 800fe84:	4604      	mov	r4, r0
 800fe86:	6800      	ldr	r0, [r0, #0]
 800fe88:	460d      	mov	r5, r1
 800fe8a:	f000 fcf5 	bl	8010878 <is_uxrce_rmw_identifier_valid>
 800fe8e:	b910      	cbnz	r0, 800fe96 <rmw_destroy_publisher+0x16>
 800fe90:	2401      	movs	r4, #1
 800fe92:	4620      	mov	r0, r4
 800fe94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe96:	6863      	ldr	r3, [r4, #4]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d0f9      	beq.n	800fe90 <rmw_destroy_publisher+0x10>
 800fe9c:	2d00      	cmp	r5, #0
 800fe9e:	d0f7      	beq.n	800fe90 <rmw_destroy_publisher+0x10>
 800fea0:	6828      	ldr	r0, [r5, #0]
 800fea2:	f000 fce9 	bl	8010878 <is_uxrce_rmw_identifier_valid>
 800fea6:	2800      	cmp	r0, #0
 800fea8:	d0f2      	beq.n	800fe90 <rmw_destroy_publisher+0x10>
 800feaa:	686c      	ldr	r4, [r5, #4]
 800feac:	2c00      	cmp	r4, #0
 800feae:	d0ef      	beq.n	800fe90 <rmw_destroy_publisher+0x10>
 800feb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800feb2:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800feb6:	f007 fbc3 	bl	8017640 <destroy_topic>
 800feba:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800febe:	6962      	ldr	r2, [r4, #20]
 800fec0:	6918      	ldr	r0, [r3, #16]
 800fec2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800fec6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800feca:	6819      	ldr	r1, [r3, #0]
 800fecc:	f001 fd68 	bl	80119a0 <uxr_buffer_delete_entity>
 800fed0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800fed4:	6922      	ldr	r2, [r4, #16]
 800fed6:	4603      	mov	r3, r0
 800fed8:	6908      	ldr	r0, [r1, #16]
 800feda:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fede:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fee2:	6809      	ldr	r1, [r1, #0]
 800fee4:	461c      	mov	r4, r3
 800fee6:	f001 fd5b 	bl	80119a0 <uxr_buffer_delete_entity>
 800feea:	4606      	mov	r6, r0
 800feec:	6938      	ldr	r0, [r7, #16]
 800feee:	4622      	mov	r2, r4
 800fef0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800fef4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fef8:	f000 fc3e 	bl	8010778 <run_xrce_session>
 800fefc:	4604      	mov	r4, r0
 800fefe:	6938      	ldr	r0, [r7, #16]
 800ff00:	4632      	mov	r2, r6
 800ff02:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ff06:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ff0a:	f000 fc35 	bl	8010778 <run_xrce_session>
 800ff0e:	b12c      	cbz	r4, 800ff1c <rmw_destroy_publisher+0x9c>
 800ff10:	b120      	cbz	r0, 800ff1c <rmw_destroy_publisher+0x9c>
 800ff12:	2400      	movs	r4, #0
 800ff14:	4628      	mov	r0, r5
 800ff16:	f000 fadf 	bl	80104d8 <rmw_uxrce_fini_publisher_memory>
 800ff1a:	e7ba      	b.n	800fe92 <rmw_destroy_publisher+0x12>
 800ff1c:	2402      	movs	r4, #2
 800ff1e:	e7f9      	b.n	800ff14 <rmw_destroy_publisher+0x94>

0800ff20 <rmw_create_subscription>:
 800ff20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff24:	b08d      	sub	sp, #52	; 0x34
 800ff26:	2800      	cmp	r0, #0
 800ff28:	f000 80cf 	beq.w	80100ca <rmw_create_subscription+0x1aa>
 800ff2c:	460e      	mov	r6, r1
 800ff2e:	2900      	cmp	r1, #0
 800ff30:	f000 80cb 	beq.w	80100ca <rmw_create_subscription+0x1aa>
 800ff34:	4604      	mov	r4, r0
 800ff36:	6800      	ldr	r0, [r0, #0]
 800ff38:	4615      	mov	r5, r2
 800ff3a:	4698      	mov	r8, r3
 800ff3c:	f000 fc9c 	bl	8010878 <is_uxrce_rmw_identifier_valid>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	f000 80c2 	beq.w	80100ca <rmw_create_subscription+0x1aa>
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	f000 80bf 	beq.w	80100ca <rmw_create_subscription+0x1aa>
 800ff4c:	782b      	ldrb	r3, [r5, #0]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	f000 80bb 	beq.w	80100ca <rmw_create_subscription+0x1aa>
 800ff54:	f1b8 0f00 	cmp.w	r8, #0
 800ff58:	f000 80b7 	beq.w	80100ca <rmw_create_subscription+0x1aa>
 800ff5c:	485d      	ldr	r0, [pc, #372]	; (80100d4 <rmw_create_subscription+0x1b4>)
 800ff5e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ff62:	f007 f859 	bl	8017018 <get_memory>
 800ff66:	4604      	mov	r4, r0
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	f000 80af 	beq.w	80100cc <rmw_create_subscription+0x1ac>
 800ff6e:	68c7      	ldr	r7, [r0, #12]
 800ff70:	2300      	movs	r3, #0
 800ff72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ff76:	f007 f8b7 	bl	80170e8 <rmw_get_implementation_identifier>
 800ff7a:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800ff7e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ff80:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800ff84:	4628      	mov	r0, r5
 800ff86:	f7f0 f935 	bl	80001f4 <strlen>
 800ff8a:	3001      	adds	r0, #1
 800ff8c:	283c      	cmp	r0, #60	; 0x3c
 800ff8e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800ff92:	f200 8097 	bhi.w	80100c4 <rmw_create_subscription+0x1a4>
 800ff96:	4a50      	ldr	r2, [pc, #320]	; (80100d8 <rmw_create_subscription+0x1b8>)
 800ff98:	462b      	mov	r3, r5
 800ff9a:	213c      	movs	r1, #60	; 0x3c
 800ff9c:	4650      	mov	r0, sl
 800ff9e:	f00a f95f 	bl	801a260 <sniprintf>
 800ffa2:	4641      	mov	r1, r8
 800ffa4:	f8c7 9020 	str.w	r9, [r7, #32]
 800ffa8:	2250      	movs	r2, #80	; 0x50
 800ffaa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ffae:	f00a fbd6 	bl	801a75e <memcpy>
 800ffb2:	494a      	ldr	r1, [pc, #296]	; (80100dc <rmw_create_subscription+0x1bc>)
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	f000 fc6d 	bl	8010894 <get_message_typesupport_handle>
 800ffba:	2800      	cmp	r0, #0
 800ffbc:	f000 8082 	beq.w	80100c4 <rmw_create_subscription+0x1a4>
 800ffc0:	6842      	ldr	r2, [r0, #4]
 800ffc2:	61ba      	str	r2, [r7, #24]
 800ffc4:	2a00      	cmp	r2, #0
 800ffc6:	d07d      	beq.n	80100c4 <rmw_create_subscription+0x1a4>
 800ffc8:	4629      	mov	r1, r5
 800ffca:	4643      	mov	r3, r8
 800ffcc:	4648      	mov	r0, r9
 800ffce:	f007 fad5 	bl	801757c <create_topic>
 800ffd2:	61f8      	str	r0, [r7, #28]
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	d075      	beq.n	80100c4 <rmw_create_subscription+0x1a4>
 800ffd8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ffdc:	f241 539c 	movw	r3, #5532	; 0x159c
 800ffe0:	2104      	movs	r1, #4
 800ffe2:	5ad0      	ldrh	r0, [r2, r3]
 800ffe4:	1c45      	adds	r5, r0, #1
 800ffe6:	52d5      	strh	r5, [r2, r3]
 800ffe8:	f001 fedc 	bl	8011da4 <uxr_object_id>
 800ffec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fff0:	6138      	str	r0, [r7, #16]
 800fff2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800fff6:	2606      	movs	r6, #6
 800fff8:	9600      	str	r6, [sp, #0]
 800fffa:	6811      	ldr	r1, [r2, #0]
 800fffc:	693a      	ldr	r2, [r7, #16]
 800fffe:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010002:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010006:	f001 fdab 	bl	8011b60 <uxr_buffer_create_subscriber_bin>
 801000a:	4602      	mov	r2, r0
 801000c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010010:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010014:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010018:	f000 fbae 	bl	8010778 <run_xrce_session>
 801001c:	2800      	cmp	r0, #0
 801001e:	d04d      	beq.n	80100bc <rmw_create_subscription+0x19c>
 8010020:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010024:	f241 539e 	movw	r3, #5534	; 0x159e
 8010028:	4631      	mov	r1, r6
 801002a:	5ad0      	ldrh	r0, [r2, r3]
 801002c:	1c45      	adds	r5, r0, #1
 801002e:	52d5      	strh	r5, [r2, r3]
 8010030:	f001 feb8 	bl	8011da4 <uxr_object_id>
 8010034:	ad08      	add	r5, sp, #32
 8010036:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	6178      	str	r0, [r7, #20]
 801003e:	4641      	mov	r1, r8
 8010040:	4628      	mov	r0, r5
 8010042:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8010046:	9305      	str	r3, [sp, #20]
 8010048:	f000 fbb2 	bl	80107b0 <convert_qos_profile>
 801004c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010050:	9b05      	ldr	r3, [sp, #20]
 8010052:	9001      	str	r0, [sp, #4]
 8010054:	9603      	str	r6, [sp, #12]
 8010056:	f8ad 1008 	strh.w	r1, [sp, #8]
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8010062:	f8db 1000 	ldr.w	r1, [fp]
 8010066:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 801006a:	f001 fe21 	bl	8011cb0 <uxr_buffer_create_datareader_bin>
 801006e:	4602      	mov	r2, r0
 8010070:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010074:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010078:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801007c:	f000 fb7c 	bl	8010778 <run_xrce_session>
 8010080:	b1e0      	cbz	r0, 80100bc <rmw_create_subscription+0x19c>
 8010082:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8010086:	f898 3008 	ldrb.w	r3, [r8, #8]
 801008a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801008e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010092:	2200      	movs	r2, #0
 8010094:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8010098:	2b02      	cmp	r3, #2
 801009a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801009e:	bf0c      	ite	eq
 80100a0:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80100a4:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 80100a8:	9307      	str	r3, [sp, #28]
 80100aa:	aa0a      	add	r2, sp, #40	; 0x28
 80100ac:	9200      	str	r2, [sp, #0]
 80100ae:	697a      	ldr	r2, [r7, #20]
 80100b0:	6809      	ldr	r1, [r1, #0]
 80100b2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80100b6:	f001 fea3 	bl	8011e00 <uxr_buffer_request_data>
 80100ba:	e007      	b.n	80100cc <rmw_create_subscription+0x1ac>
 80100bc:	4805      	ldr	r0, [pc, #20]	; (80100d4 <rmw_create_subscription+0x1b4>)
 80100be:	4639      	mov	r1, r7
 80100c0:	f006 ffba 	bl	8017038 <put_memory>
 80100c4:	4620      	mov	r0, r4
 80100c6:	f000 fa1d 	bl	8010504 <rmw_uxrce_fini_subscription_memory>
 80100ca:	2400      	movs	r4, #0
 80100cc:	4620      	mov	r0, r4
 80100ce:	b00d      	add	sp, #52	; 0x34
 80100d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100d4:	2000d46c 	.word	0x2000d46c
 80100d8:	0801ba44 	.word	0x0801ba44
 80100dc:	0801ba10 	.word	0x0801ba10

080100e0 <rmw_subscription_get_actual_qos>:
 80100e0:	2000      	movs	r0, #0
 80100e2:	4770      	bx	lr

080100e4 <rmw_destroy_subscription>:
 80100e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e6:	b128      	cbz	r0, 80100f4 <rmw_destroy_subscription+0x10>
 80100e8:	4604      	mov	r4, r0
 80100ea:	6800      	ldr	r0, [r0, #0]
 80100ec:	460d      	mov	r5, r1
 80100ee:	f000 fbc3 	bl	8010878 <is_uxrce_rmw_identifier_valid>
 80100f2:	b910      	cbnz	r0, 80100fa <rmw_destroy_subscription+0x16>
 80100f4:	2401      	movs	r4, #1
 80100f6:	4620      	mov	r0, r4
 80100f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100fa:	6863      	ldr	r3, [r4, #4]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d0f9      	beq.n	80100f4 <rmw_destroy_subscription+0x10>
 8010100:	2d00      	cmp	r5, #0
 8010102:	d0f7      	beq.n	80100f4 <rmw_destroy_subscription+0x10>
 8010104:	6828      	ldr	r0, [r5, #0]
 8010106:	f000 fbb7 	bl	8010878 <is_uxrce_rmw_identifier_valid>
 801010a:	2800      	cmp	r0, #0
 801010c:	d0f2      	beq.n	80100f4 <rmw_destroy_subscription+0x10>
 801010e:	686c      	ldr	r4, [r5, #4]
 8010110:	2c00      	cmp	r4, #0
 8010112:	d0ef      	beq.n	80100f4 <rmw_destroy_subscription+0x10>
 8010114:	6a26      	ldr	r6, [r4, #32]
 8010116:	6962      	ldr	r2, [r4, #20]
 8010118:	6930      	ldr	r0, [r6, #16]
 801011a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801011e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010122:	6819      	ldr	r1, [r3, #0]
 8010124:	f001 fea6 	bl	8011e74 <uxr_buffer_cancel_data>
 8010128:	4602      	mov	r2, r0
 801012a:	6930      	ldr	r0, [r6, #16]
 801012c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010130:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010134:	f000 fb20 	bl	8010778 <run_xrce_session>
 8010138:	69e0      	ldr	r0, [r4, #28]
 801013a:	f007 fa81 	bl	8017640 <destroy_topic>
 801013e:	6a23      	ldr	r3, [r4, #32]
 8010140:	6962      	ldr	r2, [r4, #20]
 8010142:	6918      	ldr	r0, [r3, #16]
 8010144:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010148:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801014c:	6819      	ldr	r1, [r3, #0]
 801014e:	f001 fc27 	bl	80119a0 <uxr_buffer_delete_entity>
 8010152:	6a21      	ldr	r1, [r4, #32]
 8010154:	6922      	ldr	r2, [r4, #16]
 8010156:	4603      	mov	r3, r0
 8010158:	6908      	ldr	r0, [r1, #16]
 801015a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801015e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010162:	6809      	ldr	r1, [r1, #0]
 8010164:	461c      	mov	r4, r3
 8010166:	f001 fc1b 	bl	80119a0 <uxr_buffer_delete_entity>
 801016a:	4607      	mov	r7, r0
 801016c:	6930      	ldr	r0, [r6, #16]
 801016e:	4622      	mov	r2, r4
 8010170:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010174:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010178:	f000 fafe 	bl	8010778 <run_xrce_session>
 801017c:	4604      	mov	r4, r0
 801017e:	6930      	ldr	r0, [r6, #16]
 8010180:	463a      	mov	r2, r7
 8010182:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010186:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801018a:	f000 faf5 	bl	8010778 <run_xrce_session>
 801018e:	b12c      	cbz	r4, 801019c <rmw_destroy_subscription+0xb8>
 8010190:	b120      	cbz	r0, 801019c <rmw_destroy_subscription+0xb8>
 8010192:	2400      	movs	r4, #0
 8010194:	4628      	mov	r0, r5
 8010196:	f000 f9b5 	bl	8010504 <rmw_uxrce_fini_subscription_memory>
 801019a:	e7ac      	b.n	80100f6 <rmw_destroy_subscription+0x12>
 801019c:	2402      	movs	r4, #2
 801019e:	e7f9      	b.n	8010194 <rmw_destroy_subscription+0xb0>

080101a0 <rmw_take_with_info>:
 80101a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101a2:	4604      	mov	r4, r0
 80101a4:	6800      	ldr	r0, [r0, #0]
 80101a6:	b089      	sub	sp, #36	; 0x24
 80101a8:	460f      	mov	r7, r1
 80101aa:	4615      	mov	r5, r2
 80101ac:	b128      	cbz	r0, 80101ba <rmw_take_with_info+0x1a>
 80101ae:	4b24      	ldr	r3, [pc, #144]	; (8010240 <rmw_take_with_info+0xa0>)
 80101b0:	6819      	ldr	r1, [r3, #0]
 80101b2:	f7f0 f815 	bl	80001e0 <strcmp>
 80101b6:	2800      	cmp	r0, #0
 80101b8:	d13e      	bne.n	8010238 <rmw_take_with_info+0x98>
 80101ba:	b305      	cbz	r5, 80101fe <rmw_take_with_info+0x5e>
 80101bc:	6864      	ldr	r4, [r4, #4]
 80101be:	2300      	movs	r3, #0
 80101c0:	702b      	strb	r3, [r5, #0]
 80101c2:	f000 fa61 	bl	8010688 <rmw_uxrce_clean_expired_static_input_buffer>
 80101c6:	4620      	mov	r0, r4
 80101c8:	f000 fa36 	bl	8010638 <rmw_uxrce_find_static_input_buffer_by_owner>
 80101cc:	4606      	mov	r6, r0
 80101ce:	b1f0      	cbz	r0, 801020e <rmw_take_with_info+0x6e>
 80101d0:	68c1      	ldr	r1, [r0, #12]
 80101d2:	4668      	mov	r0, sp
 80101d4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80101d8:	3110      	adds	r1, #16
 80101da:	f001 fb71 	bl	80118c0 <ucdr_init_buffer>
 80101de:	69a3      	ldr	r3, [r4, #24]
 80101e0:	4639      	mov	r1, r7
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	4668      	mov	r0, sp
 80101e6:	4798      	blx	r3
 80101e8:	4631      	mov	r1, r6
 80101ea:	4604      	mov	r4, r0
 80101ec:	4815      	ldr	r0, [pc, #84]	; (8010244 <rmw_take_with_info+0xa4>)
 80101ee:	f006 ff23 	bl	8017038 <put_memory>
 80101f2:	702c      	strb	r4, [r5, #0]
 80101f4:	f084 0001 	eor.w	r0, r4, #1
 80101f8:	b2c0      	uxtb	r0, r0
 80101fa:	b009      	add	sp, #36	; 0x24
 80101fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101fe:	6864      	ldr	r4, [r4, #4]
 8010200:	f000 fa42 	bl	8010688 <rmw_uxrce_clean_expired_static_input_buffer>
 8010204:	4620      	mov	r0, r4
 8010206:	f000 fa17 	bl	8010638 <rmw_uxrce_find_static_input_buffer_by_owner>
 801020a:	4605      	mov	r5, r0
 801020c:	b910      	cbnz	r0, 8010214 <rmw_take_with_info+0x74>
 801020e:	2001      	movs	r0, #1
 8010210:	b009      	add	sp, #36	; 0x24
 8010212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010214:	68e9      	ldr	r1, [r5, #12]
 8010216:	4668      	mov	r0, sp
 8010218:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801021c:	3110      	adds	r1, #16
 801021e:	f001 fb4f 	bl	80118c0 <ucdr_init_buffer>
 8010222:	69a3      	ldr	r3, [r4, #24]
 8010224:	4639      	mov	r1, r7
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	4668      	mov	r0, sp
 801022a:	4798      	blx	r3
 801022c:	4629      	mov	r1, r5
 801022e:	4604      	mov	r4, r0
 8010230:	4804      	ldr	r0, [pc, #16]	; (8010244 <rmw_take_with_info+0xa4>)
 8010232:	f006 ff01 	bl	8017038 <put_memory>
 8010236:	e7dd      	b.n	80101f4 <rmw_take_with_info+0x54>
 8010238:	200c      	movs	r0, #12
 801023a:	b009      	add	sp, #36	; 0x24
 801023c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801023e:	bf00      	nop
 8010240:	0801bf4c 	.word	0x0801bf4c
 8010244:	2000a200 	.word	0x2000a200

08010248 <rmw_uxrce_init_service_memory>:
 8010248:	b1b2      	cbz	r2, 8010278 <rmw_uxrce_init_service_memory+0x30>
 801024a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801024c:	7a07      	ldrb	r7, [r0, #8]
 801024e:	4605      	mov	r5, r0
 8010250:	b98f      	cbnz	r7, 8010276 <rmw_uxrce_init_service_memory+0x2e>
 8010252:	e9c0 7700 	strd	r7, r7, [r0]
 8010256:	460c      	mov	r4, r1
 8010258:	23c8      	movs	r3, #200	; 0xc8
 801025a:	2101      	movs	r1, #1
 801025c:	fb03 4602 	mla	r6, r3, r2, r4
 8010260:	60c3      	str	r3, [r0, #12]
 8010262:	7201      	strb	r1, [r0, #8]
 8010264:	4621      	mov	r1, r4
 8010266:	4628      	mov	r0, r5
 8010268:	f006 fee6 	bl	8017038 <put_memory>
 801026c:	60e4      	str	r4, [r4, #12]
 801026e:	f804 7bc8 	strb.w	r7, [r4], #200
 8010272:	42a6      	cmp	r6, r4
 8010274:	d1f6      	bne.n	8010264 <rmw_uxrce_init_service_memory+0x1c>
 8010276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010278:	4770      	bx	lr
 801027a:	bf00      	nop

0801027c <rmw_uxrce_init_client_memory>:
 801027c:	b1b2      	cbz	r2, 80102ac <rmw_uxrce_init_client_memory+0x30>
 801027e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010280:	7a07      	ldrb	r7, [r0, #8]
 8010282:	4605      	mov	r5, r0
 8010284:	b98f      	cbnz	r7, 80102aa <rmw_uxrce_init_client_memory+0x2e>
 8010286:	e9c0 7700 	strd	r7, r7, [r0]
 801028a:	460c      	mov	r4, r1
 801028c:	23c8      	movs	r3, #200	; 0xc8
 801028e:	2101      	movs	r1, #1
 8010290:	fb03 4602 	mla	r6, r3, r2, r4
 8010294:	60c3      	str	r3, [r0, #12]
 8010296:	7201      	strb	r1, [r0, #8]
 8010298:	4621      	mov	r1, r4
 801029a:	4628      	mov	r0, r5
 801029c:	f006 fecc 	bl	8017038 <put_memory>
 80102a0:	60e4      	str	r4, [r4, #12]
 80102a2:	f804 7bc8 	strb.w	r7, [r4], #200
 80102a6:	42a6      	cmp	r6, r4
 80102a8:	d1f6      	bne.n	8010298 <rmw_uxrce_init_client_memory+0x1c>
 80102aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102ac:	4770      	bx	lr
 80102ae:	bf00      	nop

080102b0 <rmw_uxrce_init_publisher_memory>:
 80102b0:	b1b2      	cbz	r2, 80102e0 <rmw_uxrce_init_publisher_memory+0x30>
 80102b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102b4:	7a07      	ldrb	r7, [r0, #8]
 80102b6:	4605      	mov	r5, r0
 80102b8:	b98f      	cbnz	r7, 80102de <rmw_uxrce_init_publisher_memory+0x2e>
 80102ba:	e9c0 7700 	strd	r7, r7, [r0]
 80102be:	460c      	mov	r4, r1
 80102c0:	23d8      	movs	r3, #216	; 0xd8
 80102c2:	2101      	movs	r1, #1
 80102c4:	fb03 4602 	mla	r6, r3, r2, r4
 80102c8:	60c3      	str	r3, [r0, #12]
 80102ca:	7201      	strb	r1, [r0, #8]
 80102cc:	4621      	mov	r1, r4
 80102ce:	4628      	mov	r0, r5
 80102d0:	f006 feb2 	bl	8017038 <put_memory>
 80102d4:	60e4      	str	r4, [r4, #12]
 80102d6:	f804 7bd8 	strb.w	r7, [r4], #216
 80102da:	42a6      	cmp	r6, r4
 80102dc:	d1f6      	bne.n	80102cc <rmw_uxrce_init_publisher_memory+0x1c>
 80102de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop

080102e4 <rmw_uxrce_init_subscription_memory>:
 80102e4:	b1b2      	cbz	r2, 8010314 <rmw_uxrce_init_subscription_memory+0x30>
 80102e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102e8:	7a07      	ldrb	r7, [r0, #8]
 80102ea:	4605      	mov	r5, r0
 80102ec:	b98f      	cbnz	r7, 8010312 <rmw_uxrce_init_subscription_memory+0x2e>
 80102ee:	e9c0 7700 	strd	r7, r7, [r0]
 80102f2:	460c      	mov	r4, r1
 80102f4:	23d0      	movs	r3, #208	; 0xd0
 80102f6:	2101      	movs	r1, #1
 80102f8:	fb03 4602 	mla	r6, r3, r2, r4
 80102fc:	60c3      	str	r3, [r0, #12]
 80102fe:	7201      	strb	r1, [r0, #8]
 8010300:	4621      	mov	r1, r4
 8010302:	4628      	mov	r0, r5
 8010304:	f006 fe98 	bl	8017038 <put_memory>
 8010308:	60e4      	str	r4, [r4, #12]
 801030a:	f804 7bd0 	strb.w	r7, [r4], #208
 801030e:	42a6      	cmp	r6, r4
 8010310:	d1f6      	bne.n	8010300 <rmw_uxrce_init_subscription_memory+0x1c>
 8010312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010314:	4770      	bx	lr
 8010316:	bf00      	nop

08010318 <rmw_uxrce_init_node_memory>:
 8010318:	b1b2      	cbz	r2, 8010348 <rmw_uxrce_init_node_memory+0x30>
 801031a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801031c:	7a07      	ldrb	r7, [r0, #8]
 801031e:	4605      	mov	r5, r0
 8010320:	b98f      	cbnz	r7, 8010346 <rmw_uxrce_init_node_memory+0x2e>
 8010322:	e9c0 7700 	strd	r7, r7, [r0]
 8010326:	460c      	mov	r4, r1
 8010328:	23a4      	movs	r3, #164	; 0xa4
 801032a:	2101      	movs	r1, #1
 801032c:	fb03 4602 	mla	r6, r3, r2, r4
 8010330:	60c3      	str	r3, [r0, #12]
 8010332:	7201      	strb	r1, [r0, #8]
 8010334:	4621      	mov	r1, r4
 8010336:	4628      	mov	r0, r5
 8010338:	f006 fe7e 	bl	8017038 <put_memory>
 801033c:	60e4      	str	r4, [r4, #12]
 801033e:	f804 7ba4 	strb.w	r7, [r4], #164
 8010342:	42a6      	cmp	r6, r4
 8010344:	d1f6      	bne.n	8010334 <rmw_uxrce_init_node_memory+0x1c>
 8010346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010348:	4770      	bx	lr
 801034a:	bf00      	nop

0801034c <rmw_uxrce_init_session_memory>:
 801034c:	b1d2      	cbz	r2, 8010384 <rmw_uxrce_init_session_memory+0x38>
 801034e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010352:	7a07      	ldrb	r7, [r0, #8]
 8010354:	4605      	mov	r5, r0
 8010356:	b99f      	cbnz	r7, 8010380 <rmw_uxrce_init_session_memory+0x34>
 8010358:	e9c0 7700 	strd	r7, r7, [r0]
 801035c:	f241 53a8 	movw	r3, #5544	; 0x15a8
 8010360:	460c      	mov	r4, r1
 8010362:	2101      	movs	r1, #1
 8010364:	fb03 4602 	mla	r6, r3, r2, r4
 8010368:	60c3      	str	r3, [r0, #12]
 801036a:	4698      	mov	r8, r3
 801036c:	7201      	strb	r1, [r0, #8]
 801036e:	4621      	mov	r1, r4
 8010370:	4628      	mov	r0, r5
 8010372:	f006 fe61 	bl	8017038 <put_memory>
 8010376:	60e4      	str	r4, [r4, #12]
 8010378:	7027      	strb	r7, [r4, #0]
 801037a:	4444      	add	r4, r8
 801037c:	42a6      	cmp	r6, r4
 801037e:	d1f6      	bne.n	801036e <rmw_uxrce_init_session_memory+0x22>
 8010380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010384:	4770      	bx	lr
 8010386:	bf00      	nop

08010388 <rmw_uxrce_init_topic_memory>:
 8010388:	b1c2      	cbz	r2, 80103bc <rmw_uxrce_init_topic_memory+0x34>
 801038a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801038c:	7a07      	ldrb	r7, [r0, #8]
 801038e:	4606      	mov	r6, r0
 8010390:	b99f      	cbnz	r7, 80103ba <rmw_uxrce_init_topic_memory+0x32>
 8010392:	e9c0 7700 	strd	r7, r7, [r0]
 8010396:	460c      	mov	r4, r1
 8010398:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801039c:	2101      	movs	r1, #1
 801039e:	231c      	movs	r3, #28
 80103a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80103a4:	7201      	strb	r1, [r0, #8]
 80103a6:	60c3      	str	r3, [r0, #12]
 80103a8:	4621      	mov	r1, r4
 80103aa:	4630      	mov	r0, r6
 80103ac:	f006 fe44 	bl	8017038 <put_memory>
 80103b0:	60e4      	str	r4, [r4, #12]
 80103b2:	f804 7b1c 	strb.w	r7, [r4], #28
 80103b6:	42a5      	cmp	r5, r4
 80103b8:	d1f6      	bne.n	80103a8 <rmw_uxrce_init_topic_memory+0x20>
 80103ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop

080103c0 <rmw_uxrce_init_static_input_buffer_memory>:
 80103c0:	b1d2      	cbz	r2, 80103f8 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 80103c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103c4:	7a07      	ldrb	r7, [r0, #8]
 80103c6:	4606      	mov	r6, r0
 80103c8:	b9af      	cbnz	r7, 80103f6 <rmw_uxrce_init_static_input_buffer_memory+0x36>
 80103ca:	e9c0 7700 	strd	r7, r7, [r0]
 80103ce:	460c      	mov	r4, r1
 80103d0:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 80103d4:	2101      	movs	r1, #1
 80103d6:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80103da:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 80103de:	7201      	strb	r1, [r0, #8]
 80103e0:	60c3      	str	r3, [r0, #12]
 80103e2:	4621      	mov	r1, r4
 80103e4:	4630      	mov	r0, r6
 80103e6:	f006 fe27 	bl	8017038 <put_memory>
 80103ea:	60e4      	str	r4, [r4, #12]
 80103ec:	7027      	strb	r7, [r4, #0]
 80103ee:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 80103f2:	42a5      	cmp	r5, r4
 80103f4:	d1f5      	bne.n	80103e2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80103f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103f8:	4770      	bx	lr
 80103fa:	bf00      	nop

080103fc <rmw_uxrce_init_init_options_impl_memory>:
 80103fc:	b1b2      	cbz	r2, 801042c <rmw_uxrce_init_init_options_impl_memory+0x30>
 80103fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010400:	7a07      	ldrb	r7, [r0, #8]
 8010402:	4605      	mov	r5, r0
 8010404:	b98f      	cbnz	r7, 801042a <rmw_uxrce_init_init_options_impl_memory+0x2e>
 8010406:	e9c0 7700 	strd	r7, r7, [r0]
 801040a:	460c      	mov	r4, r1
 801040c:	232c      	movs	r3, #44	; 0x2c
 801040e:	2101      	movs	r1, #1
 8010410:	fb03 4602 	mla	r6, r3, r2, r4
 8010414:	60c3      	str	r3, [r0, #12]
 8010416:	7201      	strb	r1, [r0, #8]
 8010418:	4621      	mov	r1, r4
 801041a:	4628      	mov	r0, r5
 801041c:	f006 fe0c 	bl	8017038 <put_memory>
 8010420:	60e4      	str	r4, [r4, #12]
 8010422:	f804 7b2c 	strb.w	r7, [r4], #44
 8010426:	42a6      	cmp	r6, r4
 8010428:	d1f6      	bne.n	8010418 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 801042a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801042c:	4770      	bx	lr
 801042e:	bf00      	nop

08010430 <rmw_uxrce_init_wait_set_memory>:
 8010430:	b1c2      	cbz	r2, 8010464 <rmw_uxrce_init_wait_set_memory+0x34>
 8010432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010434:	7a07      	ldrb	r7, [r0, #8]
 8010436:	4606      	mov	r6, r0
 8010438:	b99f      	cbnz	r7, 8010462 <rmw_uxrce_init_wait_set_memory+0x32>
 801043a:	e9c0 7700 	strd	r7, r7, [r0]
 801043e:	460c      	mov	r4, r1
 8010440:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010444:	2101      	movs	r1, #1
 8010446:	231c      	movs	r3, #28
 8010448:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801044c:	7201      	strb	r1, [r0, #8]
 801044e:	60c3      	str	r3, [r0, #12]
 8010450:	4621      	mov	r1, r4
 8010452:	4630      	mov	r0, r6
 8010454:	f006 fdf0 	bl	8017038 <put_memory>
 8010458:	60e4      	str	r4, [r4, #12]
 801045a:	f804 7b1c 	strb.w	r7, [r4], #28
 801045e:	42a5      	cmp	r5, r4
 8010460:	d1f6      	bne.n	8010450 <rmw_uxrce_init_wait_set_memory+0x20>
 8010462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop

08010468 <rmw_uxrce_init_guard_condition_memory>:
 8010468:	b1b2      	cbz	r2, 8010498 <rmw_uxrce_init_guard_condition_memory+0x30>
 801046a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046c:	7a07      	ldrb	r7, [r0, #8]
 801046e:	4605      	mov	r5, r0
 8010470:	b98f      	cbnz	r7, 8010496 <rmw_uxrce_init_guard_condition_memory+0x2e>
 8010472:	e9c0 7700 	strd	r7, r7, [r0]
 8010476:	460c      	mov	r4, r1
 8010478:	2320      	movs	r3, #32
 801047a:	2101      	movs	r1, #1
 801047c:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 8010480:	7201      	strb	r1, [r0, #8]
 8010482:	60c3      	str	r3, [r0, #12]
 8010484:	4621      	mov	r1, r4
 8010486:	4628      	mov	r0, r5
 8010488:	f006 fdd6 	bl	8017038 <put_memory>
 801048c:	60e4      	str	r4, [r4, #12]
 801048e:	f804 7b20 	strb.w	r7, [r4], #32
 8010492:	42a6      	cmp	r6, r4
 8010494:	d1f6      	bne.n	8010484 <rmw_uxrce_init_guard_condition_memory+0x1c>
 8010496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010498:	4770      	bx	lr
 801049a:	bf00      	nop

0801049c <rmw_uxrce_fini_session_memory>:
 801049c:	4601      	mov	r1, r0
 801049e:	4801      	ldr	r0, [pc, #4]	; (80104a4 <rmw_uxrce_fini_session_memory+0x8>)
 80104a0:	f006 bdca 	b.w	8017038 <put_memory>
 80104a4:	2000d3a8 	.word	0x2000d3a8

080104a8 <rmw_uxrce_fini_node_memory>:
 80104a8:	b538      	push	{r3, r4, r5, lr}
 80104aa:	4604      	mov	r4, r0
 80104ac:	6800      	ldr	r0, [r0, #0]
 80104ae:	b128      	cbz	r0, 80104bc <rmw_uxrce_fini_node_memory+0x14>
 80104b0:	4b07      	ldr	r3, [pc, #28]	; (80104d0 <rmw_uxrce_fini_node_memory+0x28>)
 80104b2:	6819      	ldr	r1, [r3, #0]
 80104b4:	f7ef fe94 	bl	80001e0 <strcmp>
 80104b8:	b940      	cbnz	r0, 80104cc <rmw_uxrce_fini_node_memory+0x24>
 80104ba:	6020      	str	r0, [r4, #0]
 80104bc:	6861      	ldr	r1, [r4, #4]
 80104be:	b129      	cbz	r1, 80104cc <rmw_uxrce_fini_node_memory+0x24>
 80104c0:	2500      	movs	r5, #0
 80104c2:	4804      	ldr	r0, [pc, #16]	; (80104d4 <rmw_uxrce_fini_node_memory+0x2c>)
 80104c4:	610d      	str	r5, [r1, #16]
 80104c6:	f006 fdb7 	bl	8017038 <put_memory>
 80104ca:	6065      	str	r5, [r4, #4]
 80104cc:	bd38      	pop	{r3, r4, r5, pc}
 80104ce:	bf00      	nop
 80104d0:	0801bf4c 	.word	0x0801bf4c
 80104d4:	2000d1d4 	.word	0x2000d1d4

080104d8 <rmw_uxrce_fini_publisher_memory>:
 80104d8:	b510      	push	{r4, lr}
 80104da:	4604      	mov	r4, r0
 80104dc:	6800      	ldr	r0, [r0, #0]
 80104de:	b128      	cbz	r0, 80104ec <rmw_uxrce_fini_publisher_memory+0x14>
 80104e0:	4b06      	ldr	r3, [pc, #24]	; (80104fc <rmw_uxrce_fini_publisher_memory+0x24>)
 80104e2:	6819      	ldr	r1, [r3, #0]
 80104e4:	f7ef fe7c 	bl	80001e0 <strcmp>
 80104e8:	b938      	cbnz	r0, 80104fa <rmw_uxrce_fini_publisher_memory+0x22>
 80104ea:	6020      	str	r0, [r4, #0]
 80104ec:	6861      	ldr	r1, [r4, #4]
 80104ee:	b121      	cbz	r1, 80104fa <rmw_uxrce_fini_publisher_memory+0x22>
 80104f0:	4803      	ldr	r0, [pc, #12]	; (8010500 <rmw_uxrce_fini_publisher_memory+0x28>)
 80104f2:	f006 fda1 	bl	8017038 <put_memory>
 80104f6:	2300      	movs	r3, #0
 80104f8:	6063      	str	r3, [r4, #4]
 80104fa:	bd10      	pop	{r4, pc}
 80104fc:	0801bf4c 	.word	0x0801bf4c
 8010500:	2000a210 	.word	0x2000a210

08010504 <rmw_uxrce_fini_subscription_memory>:
 8010504:	b510      	push	{r4, lr}
 8010506:	4604      	mov	r4, r0
 8010508:	6800      	ldr	r0, [r0, #0]
 801050a:	b128      	cbz	r0, 8010518 <rmw_uxrce_fini_subscription_memory+0x14>
 801050c:	4b06      	ldr	r3, [pc, #24]	; (8010528 <rmw_uxrce_fini_subscription_memory+0x24>)
 801050e:	6819      	ldr	r1, [r3, #0]
 8010510:	f7ef fe66 	bl	80001e0 <strcmp>
 8010514:	b938      	cbnz	r0, 8010526 <rmw_uxrce_fini_subscription_memory+0x22>
 8010516:	6020      	str	r0, [r4, #0]
 8010518:	6861      	ldr	r1, [r4, #4]
 801051a:	b121      	cbz	r1, 8010526 <rmw_uxrce_fini_subscription_memory+0x22>
 801051c:	4803      	ldr	r0, [pc, #12]	; (801052c <rmw_uxrce_fini_subscription_memory+0x28>)
 801051e:	f006 fd8b 	bl	8017038 <put_memory>
 8010522:	2300      	movs	r3, #0
 8010524:	6063      	str	r3, [r4, #4]
 8010526:	bd10      	pop	{r4, pc}
 8010528:	0801bf4c 	.word	0x0801bf4c
 801052c:	2000d46c 	.word	0x2000d46c

08010530 <rmw_uxrce_fini_service_memory>:
 8010530:	b510      	push	{r4, lr}
 8010532:	4604      	mov	r4, r0
 8010534:	6800      	ldr	r0, [r0, #0]
 8010536:	b128      	cbz	r0, 8010544 <rmw_uxrce_fini_service_memory+0x14>
 8010538:	4b06      	ldr	r3, [pc, #24]	; (8010554 <rmw_uxrce_fini_service_memory+0x24>)
 801053a:	6819      	ldr	r1, [r3, #0]
 801053c:	f7ef fe50 	bl	80001e0 <strcmp>
 8010540:	b938      	cbnz	r0, 8010552 <rmw_uxrce_fini_service_memory+0x22>
 8010542:	6020      	str	r0, [r4, #0]
 8010544:	6861      	ldr	r1, [r4, #4]
 8010546:	b121      	cbz	r1, 8010552 <rmw_uxrce_fini_service_memory+0x22>
 8010548:	4803      	ldr	r0, [pc, #12]	; (8010558 <rmw_uxrce_fini_service_memory+0x28>)
 801054a:	f006 fd75 	bl	8017038 <put_memory>
 801054e:	2300      	movs	r3, #0
 8010550:	6063      	str	r3, [r4, #4]
 8010552:	bd10      	pop	{r4, pc}
 8010554:	0801bf4c 	.word	0x0801bf4c
 8010558:	2000d45c 	.word	0x2000d45c

0801055c <rmw_uxrce_fini_client_memory>:
 801055c:	b510      	push	{r4, lr}
 801055e:	4604      	mov	r4, r0
 8010560:	6800      	ldr	r0, [r0, #0]
 8010562:	b128      	cbz	r0, 8010570 <rmw_uxrce_fini_client_memory+0x14>
 8010564:	4b06      	ldr	r3, [pc, #24]	; (8010580 <rmw_uxrce_fini_client_memory+0x24>)
 8010566:	6819      	ldr	r1, [r3, #0]
 8010568:	f7ef fe3a 	bl	80001e0 <strcmp>
 801056c:	b938      	cbnz	r0, 801057e <rmw_uxrce_fini_client_memory+0x22>
 801056e:	6020      	str	r0, [r4, #0]
 8010570:	6861      	ldr	r1, [r4, #4]
 8010572:	b121      	cbz	r1, 801057e <rmw_uxrce_fini_client_memory+0x22>
 8010574:	4803      	ldr	r0, [pc, #12]	; (8010584 <rmw_uxrce_fini_client_memory+0x28>)
 8010576:	f006 fd5f 	bl	8017038 <put_memory>
 801057a:	2300      	movs	r3, #0
 801057c:	6063      	str	r3, [r4, #4]
 801057e:	bd10      	pop	{r4, pc}
 8010580:	0801bf4c 	.word	0x0801bf4c
 8010584:	2000aa90 	.word	0x2000aa90

08010588 <rmw_uxrce_fini_topic_memory>:
 8010588:	b510      	push	{r4, lr}
 801058a:	4601      	mov	r1, r0
 801058c:	4604      	mov	r4, r0
 801058e:	4803      	ldr	r0, [pc, #12]	; (801059c <rmw_uxrce_fini_topic_memory+0x14>)
 8010590:	f006 fd52 	bl	8017038 <put_memory>
 8010594:	2300      	movs	r3, #0
 8010596:	61a3      	str	r3, [r4, #24]
 8010598:	bd10      	pop	{r4, pc}
 801059a:	bf00      	nop
 801059c:	2000d398 	.word	0x2000d398

080105a0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80105a0:	b082      	sub	sp, #8
 80105a2:	b4f0      	push	{r4, r5, r6, r7}
 80105a4:	4923      	ldr	r1, [pc, #140]	; (8010634 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 80105a6:	ac04      	add	r4, sp, #16
 80105a8:	e884 000c 	stmia.w	r4, {r2, r3}
 80105ac:	680d      	ldr	r5, [r1, #0]
 80105ae:	9c05      	ldr	r4, [sp, #20]
 80105b0:	2d00      	cmp	r5, #0
 80105b2:	d03d      	beq.n	8010630 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 80105b4:	462b      	mov	r3, r5
 80105b6:	2100      	movs	r1, #0
 80105b8:	68da      	ldr	r2, [r3, #12]
 80105ba:	689b      	ldr	r3, [r3, #8]
 80105bc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 80105c0:	4290      	cmp	r0, r2
 80105c2:	bf08      	it	eq
 80105c4:	3101      	addeq	r1, #1
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d1f6      	bne.n	80105b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80105ca:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80105ce:	2b02      	cmp	r3, #2
 80105d0:	d026      	beq.n	8010620 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 80105d2:	d906      	bls.n	80105e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 80105d4:	2b03      	cmp	r3, #3
 80105d6:	d004      	beq.n	80105e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 80105d8:	2100      	movs	r1, #0
 80105da:	bcf0      	pop	{r4, r5, r6, r7}
 80105dc:	4608      	mov	r0, r1
 80105de:	b002      	add	sp, #8
 80105e0:	4770      	bx	lr
 80105e2:	b304      	cbz	r4, 8010626 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80105e4:	428c      	cmp	r4, r1
 80105e6:	d81e      	bhi.n	8010626 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80105e8:	2d00      	cmp	r5, #0
 80105ea:	d0f5      	beq.n	80105d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80105ec:	2100      	movs	r1, #0
 80105ee:	f04f 36ff 	mov.w	r6, #4294967295
 80105f2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80105f6:	e002      	b.n	80105fe <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 80105f8:	68ad      	ldr	r5, [r5, #8]
 80105fa:	2d00      	cmp	r5, #0
 80105fc:	d0ed      	beq.n	80105da <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 80105fe:	68eb      	ldr	r3, [r5, #12]
 8010600:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8010604:	4290      	cmp	r0, r2
 8010606:	d1f7      	bne.n	80105f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010608:	f603 0318 	addw	r3, r3, #2072	; 0x818
 801060c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010610:	42b2      	cmp	r2, r6
 8010612:	eb73 0407 	sbcs.w	r4, r3, r7
 8010616:	daef      	bge.n	80105f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010618:	4616      	mov	r6, r2
 801061a:	461f      	mov	r7, r3
 801061c:	4629      	mov	r1, r5
 801061e:	e7eb      	b.n	80105f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010620:	b10c      	cbz	r4, 8010626 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010622:	428c      	cmp	r4, r1
 8010624:	d9d8      	bls.n	80105d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010626:	bcf0      	pop	{r4, r5, r6, r7}
 8010628:	4802      	ldr	r0, [pc, #8]	; (8010634 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 801062a:	b002      	add	sp, #8
 801062c:	f006 bcf4 	b.w	8017018 <get_memory>
 8010630:	4629      	mov	r1, r5
 8010632:	e7ca      	b.n	80105ca <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010634:	2000a200 	.word	0x2000a200

08010638 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010638:	4b12      	ldr	r3, [pc, #72]	; (8010684 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	b1fb      	cbz	r3, 801067e <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 801063e:	b4f0      	push	{r4, r5, r6, r7}
 8010640:	f04f 0c00 	mov.w	ip, #0
 8010644:	f04f 34ff 	mov.w	r4, #4294967295
 8010648:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801064c:	e001      	b.n	8010652 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 801064e:	689b      	ldr	r3, [r3, #8]
 8010650:	b193      	cbz	r3, 8010678 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 8010652:	68da      	ldr	r2, [r3, #12]
 8010654:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8010658:	4288      	cmp	r0, r1
 801065a:	d1f8      	bne.n	801064e <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 801065c:	f602 0218 	addw	r2, r2, #2072	; 0x818
 8010660:	e9d2 6700 	ldrd	r6, r7, [r2]
 8010664:	42a6      	cmp	r6, r4
 8010666:	eb77 0205 	sbcs.w	r2, r7, r5
 801066a:	daf0      	bge.n	801064e <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 801066c:	469c      	mov	ip, r3
 801066e:	689b      	ldr	r3, [r3, #8]
 8010670:	4634      	mov	r4, r6
 8010672:	463d      	mov	r5, r7
 8010674:	2b00      	cmp	r3, #0
 8010676:	d1ec      	bne.n	8010652 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8010678:	4660      	mov	r0, ip
 801067a:	bcf0      	pop	{r4, r5, r6, r7}
 801067c:	4770      	bx	lr
 801067e:	4618      	mov	r0, r3
 8010680:	4770      	bx	lr
 8010682:	bf00      	nop
 8010684:	2000a200 	.word	0x2000a200

08010688 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068c:	4e38      	ldr	r6, [pc, #224]	; (8010770 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 801068e:	f8d6 8000 	ldr.w	r8, [r6]
 8010692:	b083      	sub	sp, #12
 8010694:	f007 fc0a 	bl	8017eac <rmw_uros_epoch_nanos>
 8010698:	f1b8 0f00 	cmp.w	r8, #0
 801069c:	d05f      	beq.n	801075e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 801069e:	46b1      	mov	r9, r6
 80106a0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80106a4:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 80106a8:	2b04      	cmp	r3, #4
 80106aa:	4682      	mov	sl, r0
 80106ac:	468b      	mov	fp, r1
 80106ae:	d02d      	beq.n	801070c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 80106b0:	2b05      	cmp	r3, #5
 80106b2:	d041      	beq.n	8010738 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 80106b4:	2b03      	cmp	r3, #3
 80106b6:	d029      	beq.n	801070c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 80106b8:	2200      	movs	r2, #0
 80106ba:	2300      	movs	r3, #0
 80106bc:	e9cd 2300 	strd	r2, r3, [sp]
 80106c0:	2001      	movs	r0, #1
 80106c2:	2100      	movs	r1, #0
 80106c4:	9b00      	ldr	r3, [sp, #0]
 80106c6:	f606 0618 	addw	r6, r6, #2072	; 0x818
 80106ca:	e9d6 6700 	ldrd	r6, r7, [r6]
 80106ce:	18c2      	adds	r2, r0, r3
 80106d0:	9b01      	ldr	r3, [sp, #4]
 80106d2:	eb41 0303 	adc.w	r3, r1, r3
 80106d6:	1994      	adds	r4, r2, r6
 80106d8:	eb43 0507 	adc.w	r5, r3, r7
 80106dc:	4554      	cmp	r4, sl
 80106de:	eb75 020b 	sbcs.w	r2, r5, fp
 80106e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80106e6:	db03      	blt.n	80106f0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 80106e8:	45b2      	cmp	sl, r6
 80106ea:	eb7b 0207 	sbcs.w	r2, fp, r7
 80106ee:	da05      	bge.n	80106fc <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 80106f0:	4641      	mov	r1, r8
 80106f2:	4648      	mov	r0, r9
 80106f4:	9300      	str	r3, [sp, #0]
 80106f6:	f006 fc9f 	bl	8017038 <put_memory>
 80106fa:	9b00      	ldr	r3, [sp, #0]
 80106fc:	b37b      	cbz	r3, 801075e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 80106fe:	4698      	mov	r8, r3
 8010700:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010704:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8010708:	2b04      	cmp	r3, #4
 801070a:	d1d1      	bne.n	80106b0 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 801070c:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8010710:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 8010714:	e9cd 2300 	strd	r2, r3, [sp]
 8010718:	4313      	orrs	r3, r2
 801071a:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 801071e:	d015      	beq.n	801074c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8010720:	9a01      	ldr	r2, [sp, #4]
 8010722:	4b14      	ldr	r3, [pc, #80]	; (8010774 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 8010724:	fb03 f702 	mul.w	r7, r3, r2
 8010728:	9a00      	ldr	r2, [sp, #0]
 801072a:	fba2 2303 	umull	r2, r3, r2, r3
 801072e:	e9cd 2300 	strd	r2, r3, [sp]
 8010732:	443b      	add	r3, r7
 8010734:	9301      	str	r3, [sp, #4]
 8010736:	e7c5      	b.n	80106c4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010738:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 801073c:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 8010740:	e9cd 2300 	strd	r2, r3, [sp]
 8010744:	4313      	orrs	r3, r2
 8010746:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 801074a:	d1e9      	bne.n	8010720 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 801074c:	ea50 0301 	orrs.w	r3, r0, r1
 8010750:	bf02      	ittt	eq
 8010752:	a305      	addeq	r3, pc, #20	; (adr r3, 8010768 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 8010754:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 8010758:	e9cd 2300 	strdeq	r2, r3, [sp]
 801075c:	e7b2      	b.n	80106c4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 801075e:	b003      	add	sp, #12
 8010760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010764:	f3af 8000 	nop.w
 8010768:	fc23ac00 	.word	0xfc23ac00
 801076c:	00000006 	.word	0x00000006
 8010770:	2000a200 	.word	0x2000a200
 8010774:	3b9aca00 	.word	0x3b9aca00

08010778 <run_xrce_session>:
 8010778:	b510      	push	{r4, lr}
 801077a:	788c      	ldrb	r4, [r1, #2]
 801077c:	b086      	sub	sp, #24
 801077e:	2c01      	cmp	r4, #1
 8010780:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010784:	d00c      	beq.n	80107a0 <run_xrce_session+0x28>
 8010786:	4619      	mov	r1, r3
 8010788:	2301      	movs	r3, #1
 801078a:	9300      	str	r3, [sp, #0]
 801078c:	f10d 020e 	add.w	r2, sp, #14
 8010790:	f10d 0317 	add.w	r3, sp, #23
 8010794:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010798:	f002 f958 	bl	8012a4c <uxr_run_session_until_all_status>
 801079c:	b006      	add	sp, #24
 801079e:	bd10      	pop	{r4, pc}
 80107a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80107a4:	f001 fd70 	bl	8012288 <uxr_flash_output_streams>
 80107a8:	4620      	mov	r0, r4
 80107aa:	b006      	add	sp, #24
 80107ac:	bd10      	pop	{r4, pc}
 80107ae:	bf00      	nop

080107b0 <convert_qos_profile>:
 80107b0:	b430      	push	{r4, r5}
 80107b2:	7a0d      	ldrb	r5, [r1, #8]
 80107b4:	780c      	ldrb	r4, [r1, #0]
 80107b6:	7a4a      	ldrb	r2, [r1, #9]
 80107b8:	8889      	ldrh	r1, [r1, #4]
 80107ba:	8081      	strh	r1, [r0, #4]
 80107bc:	f1a5 0502 	sub.w	r5, r5, #2
 80107c0:	f1a4 0402 	sub.w	r4, r4, #2
 80107c4:	2a02      	cmp	r2, #2
 80107c6:	fab5 f585 	clz	r5, r5
 80107ca:	fab4 f484 	clz	r4, r4
 80107ce:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80107d2:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80107d6:	bf18      	it	ne
 80107d8:	2200      	movne	r2, #0
 80107da:	7045      	strb	r5, [r0, #1]
 80107dc:	7084      	strb	r4, [r0, #2]
 80107de:	7002      	strb	r2, [r0, #0]
 80107e0:	bc30      	pop	{r4, r5}
 80107e2:	4770      	bx	lr

080107e4 <generate_type_name>:
 80107e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107e6:	2300      	movs	r3, #0
 80107e8:	700b      	strb	r3, [r1, #0]
 80107ea:	6803      	ldr	r3, [r0, #0]
 80107ec:	b087      	sub	sp, #28
 80107ee:	4614      	mov	r4, r2
 80107f0:	b1d3      	cbz	r3, 8010828 <generate_type_name+0x44>
 80107f2:	4d0f      	ldr	r5, [pc, #60]	; (8010830 <generate_type_name+0x4c>)
 80107f4:	462f      	mov	r7, r5
 80107f6:	4a0f      	ldr	r2, [pc, #60]	; (8010834 <generate_type_name+0x50>)
 80107f8:	4e0f      	ldr	r6, [pc, #60]	; (8010838 <generate_type_name+0x54>)
 80107fa:	6840      	ldr	r0, [r0, #4]
 80107fc:	9004      	str	r0, [sp, #16]
 80107fe:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8010802:	4608      	mov	r0, r1
 8010804:	9205      	str	r2, [sp, #20]
 8010806:	9503      	str	r5, [sp, #12]
 8010808:	4a0c      	ldr	r2, [pc, #48]	; (801083c <generate_type_name+0x58>)
 801080a:	9700      	str	r7, [sp, #0]
 801080c:	4621      	mov	r1, r4
 801080e:	f009 fd27 	bl	801a260 <sniprintf>
 8010812:	2800      	cmp	r0, #0
 8010814:	db05      	blt.n	8010822 <generate_type_name+0x3e>
 8010816:	4284      	cmp	r4, r0
 8010818:	bfd4      	ite	le
 801081a:	2000      	movle	r0, #0
 801081c:	2001      	movgt	r0, #1
 801081e:	b007      	add	sp, #28
 8010820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010822:	2000      	movs	r0, #0
 8010824:	b007      	add	sp, #28
 8010826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010828:	4b05      	ldr	r3, [pc, #20]	; (8010840 <generate_type_name+0x5c>)
 801082a:	4d01      	ldr	r5, [pc, #4]	; (8010830 <generate_type_name+0x4c>)
 801082c:	461f      	mov	r7, r3
 801082e:	e7e2      	b.n	80107f6 <generate_type_name+0x12>
 8010830:	0801ba34 	.word	0x0801ba34
 8010834:	0801ba48 	.word	0x0801ba48
 8010838:	0801ba4c 	.word	0x0801ba4c
 801083c:	0801ba38 	.word	0x0801ba38
 8010840:	0801bd24 	.word	0x0801bd24

08010844 <generate_topic_name>:
 8010844:	b510      	push	{r4, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	4b09      	ldr	r3, [pc, #36]	; (8010870 <generate_topic_name+0x2c>)
 801084a:	9000      	str	r0, [sp, #0]
 801084c:	4614      	mov	r4, r2
 801084e:	4608      	mov	r0, r1
 8010850:	4611      	mov	r1, r2
 8010852:	4a08      	ldr	r2, [pc, #32]	; (8010874 <generate_topic_name+0x30>)
 8010854:	f009 fd04 	bl	801a260 <sniprintf>
 8010858:	2800      	cmp	r0, #0
 801085a:	db05      	blt.n	8010868 <generate_topic_name+0x24>
 801085c:	4284      	cmp	r4, r0
 801085e:	bfd4      	ite	le
 8010860:	2000      	movle	r0, #0
 8010862:	2001      	movgt	r0, #1
 8010864:	b002      	add	sp, #8
 8010866:	bd10      	pop	{r4, pc}
 8010868:	2000      	movs	r0, #0
 801086a:	b002      	add	sp, #8
 801086c:	bd10      	pop	{r4, pc}
 801086e:	bf00      	nop
 8010870:	0801ba58 	.word	0x0801ba58
 8010874:	0801ba50 	.word	0x0801ba50

08010878 <is_uxrce_rmw_identifier_valid>:
 8010878:	b510      	push	{r4, lr}
 801087a:	4604      	mov	r4, r0
 801087c:	b140      	cbz	r0, 8010890 <is_uxrce_rmw_identifier_valid+0x18>
 801087e:	f006 fc33 	bl	80170e8 <rmw_get_implementation_identifier>
 8010882:	4601      	mov	r1, r0
 8010884:	4620      	mov	r0, r4
 8010886:	f7ef fcab 	bl	80001e0 <strcmp>
 801088a:	fab0 f080 	clz	r0, r0
 801088e:	0940      	lsrs	r0, r0, #5
 8010890:	bd10      	pop	{r4, pc}
 8010892:	bf00      	nop

08010894 <get_message_typesupport_handle>:
 8010894:	6883      	ldr	r3, [r0, #8]
 8010896:	4718      	bx	r3

08010898 <get_message_typesupport_handle_function>:
 8010898:	b510      	push	{r4, lr}
 801089a:	4604      	mov	r4, r0
 801089c:	6800      	ldr	r0, [r0, #0]
 801089e:	f7ef fc9f 	bl	80001e0 <strcmp>
 80108a2:	2800      	cmp	r0, #0
 80108a4:	bf0c      	ite	eq
 80108a6:	4620      	moveq	r0, r4
 80108a8:	2000      	movne	r0, #0
 80108aa:	bd10      	pop	{r4, pc}

080108ac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80108ac:	f000 b82a 	b.w	8010904 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>

080108b0 <_Int32__max_serialized_size>:
 80108b0:	b508      	push	{r3, lr}
 80108b2:	2104      	movs	r1, #4
 80108b4:	2000      	movs	r0, #0
 80108b6:	f001 f807 	bl	80118c8 <ucdr_alignment>
 80108ba:	3004      	adds	r0, #4
 80108bc:	bd08      	pop	{r3, pc}
 80108be:	bf00      	nop

080108c0 <_Int32__cdr_deserialize>:
 80108c0:	b109      	cbz	r1, 80108c6 <_Int32__cdr_deserialize+0x6>
 80108c2:	f000 bf1b 	b.w	80116fc <ucdr_deserialize_int32_t>
 80108c6:	4608      	mov	r0, r1
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop

080108cc <get_serialized_size_std_msgs__msg__Int32>:
 80108cc:	b130      	cbz	r0, 80108dc <get_serialized_size_std_msgs__msg__Int32+0x10>
 80108ce:	b508      	push	{r3, lr}
 80108d0:	4608      	mov	r0, r1
 80108d2:	2104      	movs	r1, #4
 80108d4:	f000 fff8 	bl	80118c8 <ucdr_alignment>
 80108d8:	3004      	adds	r0, #4
 80108da:	bd08      	pop	{r3, pc}
 80108dc:	4770      	bx	lr
 80108de:	bf00      	nop

080108e0 <_Int32__cdr_serialize>:
 80108e0:	460a      	mov	r2, r1
 80108e2:	b118      	cbz	r0, 80108ec <_Int32__cdr_serialize+0xc>
 80108e4:	6801      	ldr	r1, [r0, #0]
 80108e6:	4610      	mov	r0, r2
 80108e8:	f000 be70 	b.w	80115cc <ucdr_serialize_int32_t>
 80108ec:	4770      	bx	lr
 80108ee:	bf00      	nop

080108f0 <_Int32__get_serialized_size>:
 80108f0:	b130      	cbz	r0, 8010900 <_Int32__get_serialized_size+0x10>
 80108f2:	b508      	push	{r3, lr}
 80108f4:	2104      	movs	r1, #4
 80108f6:	2000      	movs	r0, #0
 80108f8:	f000 ffe6 	bl	80118c8 <ucdr_alignment>
 80108fc:	3004      	adds	r0, #4
 80108fe:	bd08      	pop	{r3, pc}
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop

08010904 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010904:	4800      	ldr	r0, [pc, #0]	; (8010908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8010906:	4770      	bx	lr
 8010908:	20000044 	.word	0x20000044

0801090c <ucdr_serialize_bool>:
 801090c:	b538      	push	{r3, r4, r5, lr}
 801090e:	460d      	mov	r5, r1
 8010910:	2101      	movs	r1, #1
 8010912:	4604      	mov	r4, r0
 8010914:	f000 ff8e 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010918:	b148      	cbz	r0, 801092e <ucdr_serialize_bool+0x22>
 801091a:	68a3      	ldr	r3, [r4, #8]
 801091c:	701d      	strb	r5, [r3, #0]
 801091e:	68a2      	ldr	r2, [r4, #8]
 8010920:	6923      	ldr	r3, [r4, #16]
 8010922:	3201      	adds	r2, #1
 8010924:	3301      	adds	r3, #1
 8010926:	2101      	movs	r1, #1
 8010928:	60a2      	str	r2, [r4, #8]
 801092a:	6123      	str	r3, [r4, #16]
 801092c:	7561      	strb	r1, [r4, #21]
 801092e:	7da0      	ldrb	r0, [r4, #22]
 8010930:	f080 0001 	eor.w	r0, r0, #1
 8010934:	bd38      	pop	{r3, r4, r5, pc}
 8010936:	bf00      	nop

08010938 <ucdr_deserialize_bool>:
 8010938:	b538      	push	{r3, r4, r5, lr}
 801093a:	460d      	mov	r5, r1
 801093c:	2101      	movs	r1, #1
 801093e:	4604      	mov	r4, r0
 8010940:	f000 ff78 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010944:	b168      	cbz	r0, 8010962 <ucdr_deserialize_bool+0x2a>
 8010946:	68a2      	ldr	r2, [r4, #8]
 8010948:	6923      	ldr	r3, [r4, #16]
 801094a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801094e:	3900      	subs	r1, #0
 8010950:	f103 0301 	add.w	r3, r3, #1
 8010954:	bf18      	it	ne
 8010956:	2101      	movne	r1, #1
 8010958:	2001      	movs	r0, #1
 801095a:	7029      	strb	r1, [r5, #0]
 801095c:	60a2      	str	r2, [r4, #8]
 801095e:	6123      	str	r3, [r4, #16]
 8010960:	7560      	strb	r0, [r4, #21]
 8010962:	7da0      	ldrb	r0, [r4, #22]
 8010964:	f080 0001 	eor.w	r0, r0, #1
 8010968:	bd38      	pop	{r3, r4, r5, pc}
 801096a:	bf00      	nop

0801096c <ucdr_serialize_uint8_t>:
 801096c:	b538      	push	{r3, r4, r5, lr}
 801096e:	460d      	mov	r5, r1
 8010970:	2101      	movs	r1, #1
 8010972:	4604      	mov	r4, r0
 8010974:	f000 ff5e 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010978:	b148      	cbz	r0, 801098e <ucdr_serialize_uint8_t+0x22>
 801097a:	68a3      	ldr	r3, [r4, #8]
 801097c:	701d      	strb	r5, [r3, #0]
 801097e:	68a2      	ldr	r2, [r4, #8]
 8010980:	6923      	ldr	r3, [r4, #16]
 8010982:	3201      	adds	r2, #1
 8010984:	3301      	adds	r3, #1
 8010986:	2101      	movs	r1, #1
 8010988:	60a2      	str	r2, [r4, #8]
 801098a:	6123      	str	r3, [r4, #16]
 801098c:	7561      	strb	r1, [r4, #21]
 801098e:	7da0      	ldrb	r0, [r4, #22]
 8010990:	f080 0001 	eor.w	r0, r0, #1
 8010994:	bd38      	pop	{r3, r4, r5, pc}
 8010996:	bf00      	nop

08010998 <ucdr_deserialize_uint8_t>:
 8010998:	b538      	push	{r3, r4, r5, lr}
 801099a:	460d      	mov	r5, r1
 801099c:	2101      	movs	r1, #1
 801099e:	4604      	mov	r4, r0
 80109a0:	f000 ff48 	bl	8011834 <ucdr_check_final_buffer_behavior>
 80109a4:	b150      	cbz	r0, 80109bc <ucdr_deserialize_uint8_t+0x24>
 80109a6:	68a3      	ldr	r3, [r4, #8]
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	702b      	strb	r3, [r5, #0]
 80109ac:	68a2      	ldr	r2, [r4, #8]
 80109ae:	6923      	ldr	r3, [r4, #16]
 80109b0:	3201      	adds	r2, #1
 80109b2:	3301      	adds	r3, #1
 80109b4:	2101      	movs	r1, #1
 80109b6:	60a2      	str	r2, [r4, #8]
 80109b8:	6123      	str	r3, [r4, #16]
 80109ba:	7561      	strb	r1, [r4, #21]
 80109bc:	7da0      	ldrb	r0, [r4, #22]
 80109be:	f080 0001 	eor.w	r0, r0, #1
 80109c2:	bd38      	pop	{r3, r4, r5, pc}

080109c4 <ucdr_serialize_uint16_t>:
 80109c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c8:	b082      	sub	sp, #8
 80109ca:	460b      	mov	r3, r1
 80109cc:	2102      	movs	r1, #2
 80109ce:	4604      	mov	r4, r0
 80109d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80109d4:	f000 ff80 	bl	80118d8 <ucdr_buffer_alignment>
 80109d8:	4601      	mov	r1, r0
 80109da:	4620      	mov	r0, r4
 80109dc:	7d67      	ldrb	r7, [r4, #21]
 80109de:	f000 ffbf 	bl	8011960 <ucdr_advance_buffer>
 80109e2:	4620      	mov	r0, r4
 80109e4:	2102      	movs	r1, #2
 80109e6:	f000 ff19 	bl	801181c <ucdr_check_buffer_available_for>
 80109ea:	bb78      	cbnz	r0, 8010a4c <ucdr_serialize_uint16_t+0x88>
 80109ec:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80109f0:	42b5      	cmp	r5, r6
 80109f2:	d926      	bls.n	8010a42 <ucdr_serialize_uint16_t+0x7e>
 80109f4:	6922      	ldr	r2, [r4, #16]
 80109f6:	60a5      	str	r5, [r4, #8]
 80109f8:	1bad      	subs	r5, r5, r6
 80109fa:	442a      	add	r2, r5
 80109fc:	f1c5 0802 	rsb	r8, r5, #2
 8010a00:	6122      	str	r2, [r4, #16]
 8010a02:	4641      	mov	r1, r8
 8010a04:	4620      	mov	r0, r4
 8010a06:	f000 ff15 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010a0a:	2800      	cmp	r0, #0
 8010a0c:	d03b      	beq.n	8010a86 <ucdr_serialize_uint16_t+0xc2>
 8010a0e:	7d23      	ldrb	r3, [r4, #20]
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	d04a      	beq.n	8010aaa <ucdr_serialize_uint16_t+0xe6>
 8010a14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010a18:	7033      	strb	r3, [r6, #0]
 8010a1a:	2d00      	cmp	r5, #0
 8010a1c:	d040      	beq.n	8010aa0 <ucdr_serialize_uint16_t+0xdc>
 8010a1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010a22:	7073      	strb	r3, [r6, #1]
 8010a24:	6923      	ldr	r3, [r4, #16]
 8010a26:	68a2      	ldr	r2, [r4, #8]
 8010a28:	7da0      	ldrb	r0, [r4, #22]
 8010a2a:	3302      	adds	r3, #2
 8010a2c:	1b5b      	subs	r3, r3, r5
 8010a2e:	4442      	add	r2, r8
 8010a30:	2102      	movs	r1, #2
 8010a32:	f080 0001 	eor.w	r0, r0, #1
 8010a36:	6123      	str	r3, [r4, #16]
 8010a38:	60a2      	str	r2, [r4, #8]
 8010a3a:	7561      	strb	r1, [r4, #21]
 8010a3c:	b002      	add	sp, #8
 8010a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a42:	2102      	movs	r1, #2
 8010a44:	4620      	mov	r0, r4
 8010a46:	f000 fef5 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010a4a:	b190      	cbz	r0, 8010a72 <ucdr_serialize_uint16_t+0xae>
 8010a4c:	7d23      	ldrb	r3, [r4, #20]
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	68a3      	ldr	r3, [r4, #8]
 8010a52:	d014      	beq.n	8010a7e <ucdr_serialize_uint16_t+0xba>
 8010a54:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010a58:	701a      	strb	r2, [r3, #0]
 8010a5a:	68a3      	ldr	r3, [r4, #8]
 8010a5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010a60:	705a      	strb	r2, [r3, #1]
 8010a62:	68a2      	ldr	r2, [r4, #8]
 8010a64:	6923      	ldr	r3, [r4, #16]
 8010a66:	3202      	adds	r2, #2
 8010a68:	3302      	adds	r3, #2
 8010a6a:	2102      	movs	r1, #2
 8010a6c:	60a2      	str	r2, [r4, #8]
 8010a6e:	6123      	str	r3, [r4, #16]
 8010a70:	7561      	strb	r1, [r4, #21]
 8010a72:	7da0      	ldrb	r0, [r4, #22]
 8010a74:	f080 0001 	eor.w	r0, r0, #1
 8010a78:	b002      	add	sp, #8
 8010a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a7e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010a82:	801a      	strh	r2, [r3, #0]
 8010a84:	e7ed      	b.n	8010a62 <ucdr_serialize_uint16_t+0x9e>
 8010a86:	68a2      	ldr	r2, [r4, #8]
 8010a88:	6923      	ldr	r3, [r4, #16]
 8010a8a:	7da0      	ldrb	r0, [r4, #22]
 8010a8c:	7567      	strb	r7, [r4, #21]
 8010a8e:	1b52      	subs	r2, r2, r5
 8010a90:	1b5b      	subs	r3, r3, r5
 8010a92:	f080 0001 	eor.w	r0, r0, #1
 8010a96:	60a2      	str	r2, [r4, #8]
 8010a98:	6123      	str	r3, [r4, #16]
 8010a9a:	b002      	add	sp, #8
 8010a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aa0:	68a3      	ldr	r3, [r4, #8]
 8010aa2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010aa6:	701a      	strb	r2, [r3, #0]
 8010aa8:	e7bc      	b.n	8010a24 <ucdr_serialize_uint16_t+0x60>
 8010aaa:	4630      	mov	r0, r6
 8010aac:	f10d 0606 	add.w	r6, sp, #6
 8010ab0:	4631      	mov	r1, r6
 8010ab2:	462a      	mov	r2, r5
 8010ab4:	f009 fe53 	bl	801a75e <memcpy>
 8010ab8:	68a0      	ldr	r0, [r4, #8]
 8010aba:	4642      	mov	r2, r8
 8010abc:	1971      	adds	r1, r6, r5
 8010abe:	f009 fe4e 	bl	801a75e <memcpy>
 8010ac2:	e7af      	b.n	8010a24 <ucdr_serialize_uint16_t+0x60>

08010ac4 <ucdr_serialize_endian_uint16_t>:
 8010ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ac8:	b083      	sub	sp, #12
 8010aca:	460d      	mov	r5, r1
 8010acc:	2102      	movs	r1, #2
 8010ace:	4604      	mov	r4, r0
 8010ad0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010ad4:	f000 ff00 	bl	80118d8 <ucdr_buffer_alignment>
 8010ad8:	4601      	mov	r1, r0
 8010ada:	4620      	mov	r0, r4
 8010adc:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010ae0:	f000 ff3e 	bl	8011960 <ucdr_advance_buffer>
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	2102      	movs	r1, #2
 8010ae8:	f000 fe98 	bl	801181c <ucdr_check_buffer_available_for>
 8010aec:	bb70      	cbnz	r0, 8010b4c <ucdr_serialize_endian_uint16_t+0x88>
 8010aee:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010af2:	42be      	cmp	r6, r7
 8010af4:	d925      	bls.n	8010b42 <ucdr_serialize_endian_uint16_t+0x7e>
 8010af6:	6922      	ldr	r2, [r4, #16]
 8010af8:	60a6      	str	r6, [r4, #8]
 8010afa:	1bf6      	subs	r6, r6, r7
 8010afc:	4432      	add	r2, r6
 8010afe:	f1c6 0902 	rsb	r9, r6, #2
 8010b02:	6122      	str	r2, [r4, #16]
 8010b04:	4649      	mov	r1, r9
 8010b06:	4620      	mov	r0, r4
 8010b08:	f000 fe94 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	d039      	beq.n	8010b84 <ucdr_serialize_endian_uint16_t+0xc0>
 8010b10:	2d01      	cmp	r5, #1
 8010b12:	d04a      	beq.n	8010baa <ucdr_serialize_endian_uint16_t+0xe6>
 8010b14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010b18:	703b      	strb	r3, [r7, #0]
 8010b1a:	2e00      	cmp	r6, #0
 8010b1c:	d040      	beq.n	8010ba0 <ucdr_serialize_endian_uint16_t+0xdc>
 8010b1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010b22:	707b      	strb	r3, [r7, #1]
 8010b24:	6923      	ldr	r3, [r4, #16]
 8010b26:	68a2      	ldr	r2, [r4, #8]
 8010b28:	7da0      	ldrb	r0, [r4, #22]
 8010b2a:	3302      	adds	r3, #2
 8010b2c:	1b9b      	subs	r3, r3, r6
 8010b2e:	444a      	add	r2, r9
 8010b30:	2102      	movs	r1, #2
 8010b32:	f080 0001 	eor.w	r0, r0, #1
 8010b36:	6123      	str	r3, [r4, #16]
 8010b38:	60a2      	str	r2, [r4, #8]
 8010b3a:	7561      	strb	r1, [r4, #21]
 8010b3c:	b003      	add	sp, #12
 8010b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b42:	2102      	movs	r1, #2
 8010b44:	4620      	mov	r0, r4
 8010b46:	f000 fe75 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010b4a:	b188      	cbz	r0, 8010b70 <ucdr_serialize_endian_uint16_t+0xac>
 8010b4c:	2d01      	cmp	r5, #1
 8010b4e:	68a3      	ldr	r3, [r4, #8]
 8010b50:	d014      	beq.n	8010b7c <ucdr_serialize_endian_uint16_t+0xb8>
 8010b52:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010b56:	701a      	strb	r2, [r3, #0]
 8010b58:	68a3      	ldr	r3, [r4, #8]
 8010b5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010b5e:	705a      	strb	r2, [r3, #1]
 8010b60:	68a2      	ldr	r2, [r4, #8]
 8010b62:	6923      	ldr	r3, [r4, #16]
 8010b64:	3202      	adds	r2, #2
 8010b66:	3302      	adds	r3, #2
 8010b68:	2102      	movs	r1, #2
 8010b6a:	60a2      	str	r2, [r4, #8]
 8010b6c:	6123      	str	r3, [r4, #16]
 8010b6e:	7561      	strb	r1, [r4, #21]
 8010b70:	7da0      	ldrb	r0, [r4, #22]
 8010b72:	f080 0001 	eor.w	r0, r0, #1
 8010b76:	b003      	add	sp, #12
 8010b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010b80:	801a      	strh	r2, [r3, #0]
 8010b82:	e7ed      	b.n	8010b60 <ucdr_serialize_endian_uint16_t+0x9c>
 8010b84:	68a2      	ldr	r2, [r4, #8]
 8010b86:	6923      	ldr	r3, [r4, #16]
 8010b88:	7da0      	ldrb	r0, [r4, #22]
 8010b8a:	f884 8015 	strb.w	r8, [r4, #21]
 8010b8e:	1b92      	subs	r2, r2, r6
 8010b90:	1b9b      	subs	r3, r3, r6
 8010b92:	f080 0001 	eor.w	r0, r0, #1
 8010b96:	60a2      	str	r2, [r4, #8]
 8010b98:	6123      	str	r3, [r4, #16]
 8010b9a:	b003      	add	sp, #12
 8010b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ba0:	68a3      	ldr	r3, [r4, #8]
 8010ba2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010ba6:	701a      	strb	r2, [r3, #0]
 8010ba8:	e7bc      	b.n	8010b24 <ucdr_serialize_endian_uint16_t+0x60>
 8010baa:	f10d 0506 	add.w	r5, sp, #6
 8010bae:	4629      	mov	r1, r5
 8010bb0:	4632      	mov	r2, r6
 8010bb2:	4638      	mov	r0, r7
 8010bb4:	f009 fdd3 	bl	801a75e <memcpy>
 8010bb8:	68a0      	ldr	r0, [r4, #8]
 8010bba:	464a      	mov	r2, r9
 8010bbc:	19a9      	adds	r1, r5, r6
 8010bbe:	f009 fdce 	bl	801a75e <memcpy>
 8010bc2:	e7af      	b.n	8010b24 <ucdr_serialize_endian_uint16_t+0x60>

08010bc4 <ucdr_deserialize_uint16_t>:
 8010bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bc8:	460d      	mov	r5, r1
 8010bca:	2102      	movs	r1, #2
 8010bcc:	4604      	mov	r4, r0
 8010bce:	f000 fe83 	bl	80118d8 <ucdr_buffer_alignment>
 8010bd2:	4601      	mov	r1, r0
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010bda:	f000 fec1 	bl	8011960 <ucdr_advance_buffer>
 8010bde:	4620      	mov	r0, r4
 8010be0:	2102      	movs	r1, #2
 8010be2:	f000 fe1b 	bl	801181c <ucdr_check_buffer_available_for>
 8010be6:	bb60      	cbnz	r0, 8010c42 <ucdr_deserialize_uint16_t+0x7e>
 8010be8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010bec:	42be      	cmp	r6, r7
 8010bee:	d923      	bls.n	8010c38 <ucdr_deserialize_uint16_t+0x74>
 8010bf0:	6922      	ldr	r2, [r4, #16]
 8010bf2:	60a6      	str	r6, [r4, #8]
 8010bf4:	1bf6      	subs	r6, r6, r7
 8010bf6:	4432      	add	r2, r6
 8010bf8:	f1c6 0902 	rsb	r9, r6, #2
 8010bfc:	6122      	str	r2, [r4, #16]
 8010bfe:	4649      	mov	r1, r9
 8010c00:	4620      	mov	r0, r4
 8010c02:	f000 fe17 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	d034      	beq.n	8010c74 <ucdr_deserialize_uint16_t+0xb0>
 8010c0a:	7d23      	ldrb	r3, [r4, #20]
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d042      	beq.n	8010c96 <ucdr_deserialize_uint16_t+0xd2>
 8010c10:	787b      	ldrb	r3, [r7, #1]
 8010c12:	702b      	strb	r3, [r5, #0]
 8010c14:	2e00      	cmp	r6, #0
 8010c16:	d03a      	beq.n	8010c8e <ucdr_deserialize_uint16_t+0xca>
 8010c18:	783b      	ldrb	r3, [r7, #0]
 8010c1a:	706b      	strb	r3, [r5, #1]
 8010c1c:	6923      	ldr	r3, [r4, #16]
 8010c1e:	68a2      	ldr	r2, [r4, #8]
 8010c20:	7da0      	ldrb	r0, [r4, #22]
 8010c22:	2102      	movs	r1, #2
 8010c24:	3302      	adds	r3, #2
 8010c26:	1b9b      	subs	r3, r3, r6
 8010c28:	444a      	add	r2, r9
 8010c2a:	7561      	strb	r1, [r4, #21]
 8010c2c:	6123      	str	r3, [r4, #16]
 8010c2e:	60a2      	str	r2, [r4, #8]
 8010c30:	f080 0001 	eor.w	r0, r0, #1
 8010c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c38:	2102      	movs	r1, #2
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f000 fdfa 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010c40:	b180      	cbz	r0, 8010c64 <ucdr_deserialize_uint16_t+0xa0>
 8010c42:	7d23      	ldrb	r3, [r4, #20]
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	68a3      	ldr	r3, [r4, #8]
 8010c48:	d011      	beq.n	8010c6e <ucdr_deserialize_uint16_t+0xaa>
 8010c4a:	785b      	ldrb	r3, [r3, #1]
 8010c4c:	702b      	strb	r3, [r5, #0]
 8010c4e:	68a3      	ldr	r3, [r4, #8]
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	706b      	strb	r3, [r5, #1]
 8010c54:	68a2      	ldr	r2, [r4, #8]
 8010c56:	6923      	ldr	r3, [r4, #16]
 8010c58:	3202      	adds	r2, #2
 8010c5a:	3302      	adds	r3, #2
 8010c5c:	2102      	movs	r1, #2
 8010c5e:	60a2      	str	r2, [r4, #8]
 8010c60:	6123      	str	r3, [r4, #16]
 8010c62:	7561      	strb	r1, [r4, #21]
 8010c64:	7da0      	ldrb	r0, [r4, #22]
 8010c66:	f080 0001 	eor.w	r0, r0, #1
 8010c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c6e:	881b      	ldrh	r3, [r3, #0]
 8010c70:	802b      	strh	r3, [r5, #0]
 8010c72:	e7ef      	b.n	8010c54 <ucdr_deserialize_uint16_t+0x90>
 8010c74:	68a2      	ldr	r2, [r4, #8]
 8010c76:	6923      	ldr	r3, [r4, #16]
 8010c78:	7da0      	ldrb	r0, [r4, #22]
 8010c7a:	f884 8015 	strb.w	r8, [r4, #21]
 8010c7e:	1b92      	subs	r2, r2, r6
 8010c80:	1b9b      	subs	r3, r3, r6
 8010c82:	60a2      	str	r2, [r4, #8]
 8010c84:	6123      	str	r3, [r4, #16]
 8010c86:	f080 0001 	eor.w	r0, r0, #1
 8010c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c8e:	68a3      	ldr	r3, [r4, #8]
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	706b      	strb	r3, [r5, #1]
 8010c94:	e7c2      	b.n	8010c1c <ucdr_deserialize_uint16_t+0x58>
 8010c96:	4639      	mov	r1, r7
 8010c98:	4632      	mov	r2, r6
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	f009 fd5f 	bl	801a75e <memcpy>
 8010ca0:	68a1      	ldr	r1, [r4, #8]
 8010ca2:	464a      	mov	r2, r9
 8010ca4:	19a8      	adds	r0, r5, r6
 8010ca6:	f009 fd5a 	bl	801a75e <memcpy>
 8010caa:	e7b7      	b.n	8010c1c <ucdr_deserialize_uint16_t+0x58>

08010cac <ucdr_deserialize_endian_uint16_t>:
 8010cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb0:	460e      	mov	r6, r1
 8010cb2:	2102      	movs	r1, #2
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	4615      	mov	r5, r2
 8010cb8:	f000 fe0e 	bl	80118d8 <ucdr_buffer_alignment>
 8010cbc:	4601      	mov	r1, r0
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010cc4:	f000 fe4c 	bl	8011960 <ucdr_advance_buffer>
 8010cc8:	4620      	mov	r0, r4
 8010cca:	2102      	movs	r1, #2
 8010ccc:	f000 fda6 	bl	801181c <ucdr_check_buffer_available_for>
 8010cd0:	bb70      	cbnz	r0, 8010d30 <ucdr_deserialize_endian_uint16_t+0x84>
 8010cd2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8010cd6:	4547      	cmp	r7, r8
 8010cd8:	d925      	bls.n	8010d26 <ucdr_deserialize_endian_uint16_t+0x7a>
 8010cda:	6922      	ldr	r2, [r4, #16]
 8010cdc:	60a7      	str	r7, [r4, #8]
 8010cde:	eba7 0708 	sub.w	r7, r7, r8
 8010ce2:	443a      	add	r2, r7
 8010ce4:	f1c7 0a02 	rsb	sl, r7, #2
 8010ce8:	6122      	str	r2, [r4, #16]
 8010cea:	4651      	mov	r1, sl
 8010cec:	4620      	mov	r0, r4
 8010cee:	f000 fda1 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	d034      	beq.n	8010d60 <ucdr_deserialize_endian_uint16_t+0xb4>
 8010cf6:	2e01      	cmp	r6, #1
 8010cf8:	d043      	beq.n	8010d82 <ucdr_deserialize_endian_uint16_t+0xd6>
 8010cfa:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010cfe:	702b      	strb	r3, [r5, #0]
 8010d00:	2f00      	cmp	r7, #0
 8010d02:	d03a      	beq.n	8010d7a <ucdr_deserialize_endian_uint16_t+0xce>
 8010d04:	f898 3000 	ldrb.w	r3, [r8]
 8010d08:	706b      	strb	r3, [r5, #1]
 8010d0a:	6923      	ldr	r3, [r4, #16]
 8010d0c:	68a2      	ldr	r2, [r4, #8]
 8010d0e:	7da0      	ldrb	r0, [r4, #22]
 8010d10:	2102      	movs	r1, #2
 8010d12:	3302      	adds	r3, #2
 8010d14:	1bdb      	subs	r3, r3, r7
 8010d16:	4452      	add	r2, sl
 8010d18:	7561      	strb	r1, [r4, #21]
 8010d1a:	6123      	str	r3, [r4, #16]
 8010d1c:	60a2      	str	r2, [r4, #8]
 8010d1e:	f080 0001 	eor.w	r0, r0, #1
 8010d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d26:	2102      	movs	r1, #2
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f000 fd83 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010d2e:	b178      	cbz	r0, 8010d50 <ucdr_deserialize_endian_uint16_t+0xa4>
 8010d30:	2e01      	cmp	r6, #1
 8010d32:	68a3      	ldr	r3, [r4, #8]
 8010d34:	d011      	beq.n	8010d5a <ucdr_deserialize_endian_uint16_t+0xae>
 8010d36:	785b      	ldrb	r3, [r3, #1]
 8010d38:	702b      	strb	r3, [r5, #0]
 8010d3a:	68a3      	ldr	r3, [r4, #8]
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	706b      	strb	r3, [r5, #1]
 8010d40:	68a2      	ldr	r2, [r4, #8]
 8010d42:	6923      	ldr	r3, [r4, #16]
 8010d44:	3202      	adds	r2, #2
 8010d46:	3302      	adds	r3, #2
 8010d48:	2102      	movs	r1, #2
 8010d4a:	60a2      	str	r2, [r4, #8]
 8010d4c:	6123      	str	r3, [r4, #16]
 8010d4e:	7561      	strb	r1, [r4, #21]
 8010d50:	7da0      	ldrb	r0, [r4, #22]
 8010d52:	f080 0001 	eor.w	r0, r0, #1
 8010d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d5a:	881b      	ldrh	r3, [r3, #0]
 8010d5c:	802b      	strh	r3, [r5, #0]
 8010d5e:	e7ef      	b.n	8010d40 <ucdr_deserialize_endian_uint16_t+0x94>
 8010d60:	68a2      	ldr	r2, [r4, #8]
 8010d62:	6923      	ldr	r3, [r4, #16]
 8010d64:	7da0      	ldrb	r0, [r4, #22]
 8010d66:	f884 9015 	strb.w	r9, [r4, #21]
 8010d6a:	1bd2      	subs	r2, r2, r7
 8010d6c:	1bdb      	subs	r3, r3, r7
 8010d6e:	60a2      	str	r2, [r4, #8]
 8010d70:	6123      	str	r3, [r4, #16]
 8010d72:	f080 0001 	eor.w	r0, r0, #1
 8010d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d7a:	68a3      	ldr	r3, [r4, #8]
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	706b      	strb	r3, [r5, #1]
 8010d80:	e7c3      	b.n	8010d0a <ucdr_deserialize_endian_uint16_t+0x5e>
 8010d82:	4641      	mov	r1, r8
 8010d84:	463a      	mov	r2, r7
 8010d86:	4628      	mov	r0, r5
 8010d88:	f009 fce9 	bl	801a75e <memcpy>
 8010d8c:	68a1      	ldr	r1, [r4, #8]
 8010d8e:	4652      	mov	r2, sl
 8010d90:	19e8      	adds	r0, r5, r7
 8010d92:	f009 fce4 	bl	801a75e <memcpy>
 8010d96:	e7b8      	b.n	8010d0a <ucdr_deserialize_endian_uint16_t+0x5e>

08010d98 <ucdr_serialize_uint32_t>:
 8010d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d9c:	b082      	sub	sp, #8
 8010d9e:	4604      	mov	r4, r0
 8010da0:	9101      	str	r1, [sp, #4]
 8010da2:	2104      	movs	r1, #4
 8010da4:	f000 fd98 	bl	80118d8 <ucdr_buffer_alignment>
 8010da8:	4601      	mov	r1, r0
 8010daa:	4620      	mov	r0, r4
 8010dac:	7d67      	ldrb	r7, [r4, #21]
 8010dae:	f000 fdd7 	bl	8011960 <ucdr_advance_buffer>
 8010db2:	4620      	mov	r0, r4
 8010db4:	2104      	movs	r1, #4
 8010db6:	f000 fd31 	bl	801181c <ucdr_check_buffer_available_for>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d139      	bne.n	8010e32 <ucdr_serialize_uint32_t+0x9a>
 8010dbe:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8010dc2:	42ae      	cmp	r6, r5
 8010dc4:	d930      	bls.n	8010e28 <ucdr_serialize_uint32_t+0x90>
 8010dc6:	6922      	ldr	r2, [r4, #16]
 8010dc8:	60a6      	str	r6, [r4, #8]
 8010dca:	1b76      	subs	r6, r6, r5
 8010dcc:	4432      	add	r2, r6
 8010dce:	f1c6 0804 	rsb	r8, r6, #4
 8010dd2:	6122      	str	r2, [r4, #16]
 8010dd4:	4641      	mov	r1, r8
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	f000 fd2c 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	d04c      	beq.n	8010e7a <ucdr_serialize_uint32_t+0xe2>
 8010de0:	7d23      	ldrb	r3, [r4, #20]
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d063      	beq.n	8010eae <ucdr_serialize_uint32_t+0x116>
 8010de6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010dea:	702b      	strb	r3, [r5, #0]
 8010dec:	2e00      	cmp	r6, #0
 8010dee:	d051      	beq.n	8010e94 <ucdr_serialize_uint32_t+0xfc>
 8010df0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010df4:	706b      	strb	r3, [r5, #1]
 8010df6:	2e01      	cmp	r6, #1
 8010df8:	d050      	beq.n	8010e9c <ucdr_serialize_uint32_t+0x104>
 8010dfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010dfe:	70ab      	strb	r3, [r5, #2]
 8010e00:	2e02      	cmp	r6, #2
 8010e02:	d04f      	beq.n	8010ea4 <ucdr_serialize_uint32_t+0x10c>
 8010e04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010e08:	70eb      	strb	r3, [r5, #3]
 8010e0a:	6923      	ldr	r3, [r4, #16]
 8010e0c:	68a2      	ldr	r2, [r4, #8]
 8010e0e:	7da0      	ldrb	r0, [r4, #22]
 8010e10:	3304      	adds	r3, #4
 8010e12:	1b9b      	subs	r3, r3, r6
 8010e14:	4442      	add	r2, r8
 8010e16:	2104      	movs	r1, #4
 8010e18:	f080 0001 	eor.w	r0, r0, #1
 8010e1c:	6123      	str	r3, [r4, #16]
 8010e1e:	60a2      	str	r2, [r4, #8]
 8010e20:	7561      	strb	r1, [r4, #21]
 8010e22:	b002      	add	sp, #8
 8010e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e28:	2104      	movs	r1, #4
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f000 fd02 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010e30:	b1d0      	cbz	r0, 8010e68 <ucdr_serialize_uint32_t+0xd0>
 8010e32:	7d23      	ldrb	r3, [r4, #20]
 8010e34:	2b01      	cmp	r3, #1
 8010e36:	68a3      	ldr	r3, [r4, #8]
 8010e38:	d01c      	beq.n	8010e74 <ucdr_serialize_uint32_t+0xdc>
 8010e3a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010e3e:	701a      	strb	r2, [r3, #0]
 8010e40:	68a3      	ldr	r3, [r4, #8]
 8010e42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e46:	705a      	strb	r2, [r3, #1]
 8010e48:	68a3      	ldr	r3, [r4, #8]
 8010e4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010e4e:	709a      	strb	r2, [r3, #2]
 8010e50:	68a3      	ldr	r3, [r4, #8]
 8010e52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010e56:	70da      	strb	r2, [r3, #3]
 8010e58:	68a2      	ldr	r2, [r4, #8]
 8010e5a:	6923      	ldr	r3, [r4, #16]
 8010e5c:	3204      	adds	r2, #4
 8010e5e:	3304      	adds	r3, #4
 8010e60:	2104      	movs	r1, #4
 8010e62:	60a2      	str	r2, [r4, #8]
 8010e64:	6123      	str	r3, [r4, #16]
 8010e66:	7561      	strb	r1, [r4, #21]
 8010e68:	7da0      	ldrb	r0, [r4, #22]
 8010e6a:	f080 0001 	eor.w	r0, r0, #1
 8010e6e:	b002      	add	sp, #8
 8010e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e74:	9a01      	ldr	r2, [sp, #4]
 8010e76:	601a      	str	r2, [r3, #0]
 8010e78:	e7ee      	b.n	8010e58 <ucdr_serialize_uint32_t+0xc0>
 8010e7a:	68a2      	ldr	r2, [r4, #8]
 8010e7c:	6923      	ldr	r3, [r4, #16]
 8010e7e:	7da0      	ldrb	r0, [r4, #22]
 8010e80:	7567      	strb	r7, [r4, #21]
 8010e82:	1b92      	subs	r2, r2, r6
 8010e84:	1b9b      	subs	r3, r3, r6
 8010e86:	f080 0001 	eor.w	r0, r0, #1
 8010e8a:	60a2      	str	r2, [r4, #8]
 8010e8c:	6123      	str	r3, [r4, #16]
 8010e8e:	b002      	add	sp, #8
 8010e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e94:	68a3      	ldr	r3, [r4, #8]
 8010e96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e9a:	701a      	strb	r2, [r3, #0]
 8010e9c:	68a3      	ldr	r3, [r4, #8]
 8010e9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010ea2:	701a      	strb	r2, [r3, #0]
 8010ea4:	68a3      	ldr	r3, [r4, #8]
 8010ea6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010eaa:	701a      	strb	r2, [r3, #0]
 8010eac:	e7ad      	b.n	8010e0a <ucdr_serialize_uint32_t+0x72>
 8010eae:	4628      	mov	r0, r5
 8010eb0:	ad01      	add	r5, sp, #4
 8010eb2:	4629      	mov	r1, r5
 8010eb4:	4632      	mov	r2, r6
 8010eb6:	f009 fc52 	bl	801a75e <memcpy>
 8010eba:	68a0      	ldr	r0, [r4, #8]
 8010ebc:	4642      	mov	r2, r8
 8010ebe:	19a9      	adds	r1, r5, r6
 8010ec0:	f009 fc4d 	bl	801a75e <memcpy>
 8010ec4:	e7a1      	b.n	8010e0a <ucdr_serialize_uint32_t+0x72>
 8010ec6:	bf00      	nop

08010ec8 <ucdr_serialize_endian_uint32_t>:
 8010ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ecc:	b083      	sub	sp, #12
 8010ece:	460d      	mov	r5, r1
 8010ed0:	2104      	movs	r1, #4
 8010ed2:	4604      	mov	r4, r0
 8010ed4:	9201      	str	r2, [sp, #4]
 8010ed6:	f000 fcff 	bl	80118d8 <ucdr_buffer_alignment>
 8010eda:	4601      	mov	r1, r0
 8010edc:	4620      	mov	r0, r4
 8010ede:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010ee2:	f000 fd3d 	bl	8011960 <ucdr_advance_buffer>
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	2104      	movs	r1, #4
 8010eea:	f000 fc97 	bl	801181c <ucdr_check_buffer_available_for>
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	d138      	bne.n	8010f64 <ucdr_serialize_endian_uint32_t+0x9c>
 8010ef2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010ef6:	42b7      	cmp	r7, r6
 8010ef8:	d92f      	bls.n	8010f5a <ucdr_serialize_endian_uint32_t+0x92>
 8010efa:	6922      	ldr	r2, [r4, #16]
 8010efc:	60a7      	str	r7, [r4, #8]
 8010efe:	1bbf      	subs	r7, r7, r6
 8010f00:	443a      	add	r2, r7
 8010f02:	f1c7 0904 	rsb	r9, r7, #4
 8010f06:	6122      	str	r2, [r4, #16]
 8010f08:	4649      	mov	r1, r9
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	f000 fc92 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010f10:	2800      	cmp	r0, #0
 8010f12:	d04a      	beq.n	8010faa <ucdr_serialize_endian_uint32_t+0xe2>
 8010f14:	2d01      	cmp	r5, #1
 8010f16:	d063      	beq.n	8010fe0 <ucdr_serialize_endian_uint32_t+0x118>
 8010f18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010f1c:	7033      	strb	r3, [r6, #0]
 8010f1e:	2f00      	cmp	r7, #0
 8010f20:	d051      	beq.n	8010fc6 <ucdr_serialize_endian_uint32_t+0xfe>
 8010f22:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010f26:	7073      	strb	r3, [r6, #1]
 8010f28:	2f01      	cmp	r7, #1
 8010f2a:	d050      	beq.n	8010fce <ucdr_serialize_endian_uint32_t+0x106>
 8010f2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010f30:	70b3      	strb	r3, [r6, #2]
 8010f32:	2f02      	cmp	r7, #2
 8010f34:	d04f      	beq.n	8010fd6 <ucdr_serialize_endian_uint32_t+0x10e>
 8010f36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010f3a:	70f3      	strb	r3, [r6, #3]
 8010f3c:	6923      	ldr	r3, [r4, #16]
 8010f3e:	68a2      	ldr	r2, [r4, #8]
 8010f40:	7da0      	ldrb	r0, [r4, #22]
 8010f42:	3304      	adds	r3, #4
 8010f44:	1bdb      	subs	r3, r3, r7
 8010f46:	444a      	add	r2, r9
 8010f48:	2104      	movs	r1, #4
 8010f4a:	f080 0001 	eor.w	r0, r0, #1
 8010f4e:	6123      	str	r3, [r4, #16]
 8010f50:	60a2      	str	r2, [r4, #8]
 8010f52:	7561      	strb	r1, [r4, #21]
 8010f54:	b003      	add	sp, #12
 8010f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f5a:	2104      	movs	r1, #4
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	f000 fc69 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8010f62:	b1c8      	cbz	r0, 8010f98 <ucdr_serialize_endian_uint32_t+0xd0>
 8010f64:	2d01      	cmp	r5, #1
 8010f66:	68a3      	ldr	r3, [r4, #8]
 8010f68:	d01c      	beq.n	8010fa4 <ucdr_serialize_endian_uint32_t+0xdc>
 8010f6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010f6e:	701a      	strb	r2, [r3, #0]
 8010f70:	68a3      	ldr	r3, [r4, #8]
 8010f72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f76:	705a      	strb	r2, [r3, #1]
 8010f78:	68a3      	ldr	r3, [r4, #8]
 8010f7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010f7e:	709a      	strb	r2, [r3, #2]
 8010f80:	68a3      	ldr	r3, [r4, #8]
 8010f82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010f86:	70da      	strb	r2, [r3, #3]
 8010f88:	68a2      	ldr	r2, [r4, #8]
 8010f8a:	6923      	ldr	r3, [r4, #16]
 8010f8c:	3204      	adds	r2, #4
 8010f8e:	3304      	adds	r3, #4
 8010f90:	2104      	movs	r1, #4
 8010f92:	60a2      	str	r2, [r4, #8]
 8010f94:	6123      	str	r3, [r4, #16]
 8010f96:	7561      	strb	r1, [r4, #21]
 8010f98:	7da0      	ldrb	r0, [r4, #22]
 8010f9a:	f080 0001 	eor.w	r0, r0, #1
 8010f9e:	b003      	add	sp, #12
 8010fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fa4:	9a01      	ldr	r2, [sp, #4]
 8010fa6:	601a      	str	r2, [r3, #0]
 8010fa8:	e7ee      	b.n	8010f88 <ucdr_serialize_endian_uint32_t+0xc0>
 8010faa:	68a2      	ldr	r2, [r4, #8]
 8010fac:	6923      	ldr	r3, [r4, #16]
 8010fae:	7da0      	ldrb	r0, [r4, #22]
 8010fb0:	f884 8015 	strb.w	r8, [r4, #21]
 8010fb4:	1bd2      	subs	r2, r2, r7
 8010fb6:	1bdb      	subs	r3, r3, r7
 8010fb8:	f080 0001 	eor.w	r0, r0, #1
 8010fbc:	60a2      	str	r2, [r4, #8]
 8010fbe:	6123      	str	r3, [r4, #16]
 8010fc0:	b003      	add	sp, #12
 8010fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fc6:	68a3      	ldr	r3, [r4, #8]
 8010fc8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010fcc:	701a      	strb	r2, [r3, #0]
 8010fce:	68a3      	ldr	r3, [r4, #8]
 8010fd0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010fd4:	701a      	strb	r2, [r3, #0]
 8010fd6:	68a3      	ldr	r3, [r4, #8]
 8010fd8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010fdc:	701a      	strb	r2, [r3, #0]
 8010fde:	e7ad      	b.n	8010f3c <ucdr_serialize_endian_uint32_t+0x74>
 8010fe0:	ad01      	add	r5, sp, #4
 8010fe2:	4629      	mov	r1, r5
 8010fe4:	463a      	mov	r2, r7
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	f009 fbb9 	bl	801a75e <memcpy>
 8010fec:	68a0      	ldr	r0, [r4, #8]
 8010fee:	464a      	mov	r2, r9
 8010ff0:	19e9      	adds	r1, r5, r7
 8010ff2:	f009 fbb4 	bl	801a75e <memcpy>
 8010ff6:	e7a1      	b.n	8010f3c <ucdr_serialize_endian_uint32_t+0x74>

08010ff8 <ucdr_deserialize_uint32_t>:
 8010ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ffc:	460d      	mov	r5, r1
 8010ffe:	2104      	movs	r1, #4
 8011000:	4604      	mov	r4, r0
 8011002:	f000 fc69 	bl	80118d8 <ucdr_buffer_alignment>
 8011006:	4601      	mov	r1, r0
 8011008:	4620      	mov	r0, r4
 801100a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801100e:	f000 fca7 	bl	8011960 <ucdr_advance_buffer>
 8011012:	4620      	mov	r0, r4
 8011014:	2104      	movs	r1, #4
 8011016:	f000 fc01 	bl	801181c <ucdr_check_buffer_available_for>
 801101a:	2800      	cmp	r0, #0
 801101c:	d138      	bne.n	8011090 <ucdr_deserialize_uint32_t+0x98>
 801101e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011022:	42b7      	cmp	r7, r6
 8011024:	d92f      	bls.n	8011086 <ucdr_deserialize_uint32_t+0x8e>
 8011026:	6922      	ldr	r2, [r4, #16]
 8011028:	60a7      	str	r7, [r4, #8]
 801102a:	1bbf      	subs	r7, r7, r6
 801102c:	443a      	add	r2, r7
 801102e:	f1c7 0904 	rsb	r9, r7, #4
 8011032:	6122      	str	r2, [r4, #16]
 8011034:	4649      	mov	r1, r9
 8011036:	4620      	mov	r0, r4
 8011038:	f000 fbfc 	bl	8011834 <ucdr_check_final_buffer_behavior>
 801103c:	2800      	cmp	r0, #0
 801103e:	d046      	beq.n	80110ce <ucdr_deserialize_uint32_t+0xd6>
 8011040:	7d23      	ldrb	r3, [r4, #20]
 8011042:	2b01      	cmp	r3, #1
 8011044:	d05c      	beq.n	8011100 <ucdr_deserialize_uint32_t+0x108>
 8011046:	78f3      	ldrb	r3, [r6, #3]
 8011048:	702b      	strb	r3, [r5, #0]
 801104a:	2f00      	cmp	r7, #0
 801104c:	d04c      	beq.n	80110e8 <ucdr_deserialize_uint32_t+0xf0>
 801104e:	78b3      	ldrb	r3, [r6, #2]
 8011050:	706b      	strb	r3, [r5, #1]
 8011052:	2f01      	cmp	r7, #1
 8011054:	f105 0302 	add.w	r3, r5, #2
 8011058:	d04a      	beq.n	80110f0 <ucdr_deserialize_uint32_t+0xf8>
 801105a:	7873      	ldrb	r3, [r6, #1]
 801105c:	70ab      	strb	r3, [r5, #2]
 801105e:	2f02      	cmp	r7, #2
 8011060:	f105 0303 	add.w	r3, r5, #3
 8011064:	d048      	beq.n	80110f8 <ucdr_deserialize_uint32_t+0x100>
 8011066:	7833      	ldrb	r3, [r6, #0]
 8011068:	70eb      	strb	r3, [r5, #3]
 801106a:	6923      	ldr	r3, [r4, #16]
 801106c:	68a2      	ldr	r2, [r4, #8]
 801106e:	7da0      	ldrb	r0, [r4, #22]
 8011070:	2104      	movs	r1, #4
 8011072:	3304      	adds	r3, #4
 8011074:	1bdb      	subs	r3, r3, r7
 8011076:	444a      	add	r2, r9
 8011078:	7561      	strb	r1, [r4, #21]
 801107a:	6123      	str	r3, [r4, #16]
 801107c:	60a2      	str	r2, [r4, #8]
 801107e:	f080 0001 	eor.w	r0, r0, #1
 8011082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011086:	2104      	movs	r1, #4
 8011088:	4620      	mov	r0, r4
 801108a:	f000 fbd3 	bl	8011834 <ucdr_check_final_buffer_behavior>
 801108e:	b1b0      	cbz	r0, 80110be <ucdr_deserialize_uint32_t+0xc6>
 8011090:	7d23      	ldrb	r3, [r4, #20]
 8011092:	2b01      	cmp	r3, #1
 8011094:	68a3      	ldr	r3, [r4, #8]
 8011096:	d017      	beq.n	80110c8 <ucdr_deserialize_uint32_t+0xd0>
 8011098:	78db      	ldrb	r3, [r3, #3]
 801109a:	702b      	strb	r3, [r5, #0]
 801109c:	68a3      	ldr	r3, [r4, #8]
 801109e:	789b      	ldrb	r3, [r3, #2]
 80110a0:	706b      	strb	r3, [r5, #1]
 80110a2:	68a3      	ldr	r3, [r4, #8]
 80110a4:	785b      	ldrb	r3, [r3, #1]
 80110a6:	70ab      	strb	r3, [r5, #2]
 80110a8:	68a3      	ldr	r3, [r4, #8]
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	70eb      	strb	r3, [r5, #3]
 80110ae:	68a2      	ldr	r2, [r4, #8]
 80110b0:	6923      	ldr	r3, [r4, #16]
 80110b2:	3204      	adds	r2, #4
 80110b4:	3304      	adds	r3, #4
 80110b6:	2104      	movs	r1, #4
 80110b8:	60a2      	str	r2, [r4, #8]
 80110ba:	6123      	str	r3, [r4, #16]
 80110bc:	7561      	strb	r1, [r4, #21]
 80110be:	7da0      	ldrb	r0, [r4, #22]
 80110c0:	f080 0001 	eor.w	r0, r0, #1
 80110c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	602b      	str	r3, [r5, #0]
 80110cc:	e7ef      	b.n	80110ae <ucdr_deserialize_uint32_t+0xb6>
 80110ce:	68a2      	ldr	r2, [r4, #8]
 80110d0:	6923      	ldr	r3, [r4, #16]
 80110d2:	7da0      	ldrb	r0, [r4, #22]
 80110d4:	f884 8015 	strb.w	r8, [r4, #21]
 80110d8:	1bd2      	subs	r2, r2, r7
 80110da:	1bdb      	subs	r3, r3, r7
 80110dc:	60a2      	str	r2, [r4, #8]
 80110de:	6123      	str	r3, [r4, #16]
 80110e0:	f080 0001 	eor.w	r0, r0, #1
 80110e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110e8:	68a3      	ldr	r3, [r4, #8]
 80110ea:	789b      	ldrb	r3, [r3, #2]
 80110ec:	706b      	strb	r3, [r5, #1]
 80110ee:	1cab      	adds	r3, r5, #2
 80110f0:	68a2      	ldr	r2, [r4, #8]
 80110f2:	7852      	ldrb	r2, [r2, #1]
 80110f4:	f803 2b01 	strb.w	r2, [r3], #1
 80110f8:	68a2      	ldr	r2, [r4, #8]
 80110fa:	7812      	ldrb	r2, [r2, #0]
 80110fc:	701a      	strb	r2, [r3, #0]
 80110fe:	e7b4      	b.n	801106a <ucdr_deserialize_uint32_t+0x72>
 8011100:	4631      	mov	r1, r6
 8011102:	463a      	mov	r2, r7
 8011104:	4628      	mov	r0, r5
 8011106:	f009 fb2a 	bl	801a75e <memcpy>
 801110a:	68a1      	ldr	r1, [r4, #8]
 801110c:	464a      	mov	r2, r9
 801110e:	19e8      	adds	r0, r5, r7
 8011110:	f009 fb25 	bl	801a75e <memcpy>
 8011114:	e7a9      	b.n	801106a <ucdr_deserialize_uint32_t+0x72>
 8011116:	bf00      	nop

08011118 <ucdr_deserialize_endian_uint32_t>:
 8011118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801111c:	460e      	mov	r6, r1
 801111e:	2104      	movs	r1, #4
 8011120:	4604      	mov	r4, r0
 8011122:	4615      	mov	r5, r2
 8011124:	f000 fbd8 	bl	80118d8 <ucdr_buffer_alignment>
 8011128:	4601      	mov	r1, r0
 801112a:	4620      	mov	r0, r4
 801112c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8011130:	f000 fc16 	bl	8011960 <ucdr_advance_buffer>
 8011134:	4620      	mov	r0, r4
 8011136:	2104      	movs	r1, #4
 8011138:	f000 fb70 	bl	801181c <ucdr_check_buffer_available_for>
 801113c:	2800      	cmp	r0, #0
 801113e:	d13c      	bne.n	80111ba <ucdr_deserialize_endian_uint32_t+0xa2>
 8011140:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011144:	42bb      	cmp	r3, r7
 8011146:	d933      	bls.n	80111b0 <ucdr_deserialize_endian_uint32_t+0x98>
 8011148:	6922      	ldr	r2, [r4, #16]
 801114a:	60a3      	str	r3, [r4, #8]
 801114c:	eba3 0807 	sub.w	r8, r3, r7
 8011150:	4442      	add	r2, r8
 8011152:	f1c8 0a04 	rsb	sl, r8, #4
 8011156:	6122      	str	r2, [r4, #16]
 8011158:	4651      	mov	r1, sl
 801115a:	4620      	mov	r0, r4
 801115c:	f000 fb6a 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8011160:	2800      	cmp	r0, #0
 8011162:	d048      	beq.n	80111f6 <ucdr_deserialize_endian_uint32_t+0xde>
 8011164:	2e01      	cmp	r6, #1
 8011166:	d061      	beq.n	801122c <ucdr_deserialize_endian_uint32_t+0x114>
 8011168:	78fb      	ldrb	r3, [r7, #3]
 801116a:	702b      	strb	r3, [r5, #0]
 801116c:	f1b8 0f00 	cmp.w	r8, #0
 8011170:	d050      	beq.n	8011214 <ucdr_deserialize_endian_uint32_t+0xfc>
 8011172:	78bb      	ldrb	r3, [r7, #2]
 8011174:	706b      	strb	r3, [r5, #1]
 8011176:	f1b8 0f01 	cmp.w	r8, #1
 801117a:	f105 0302 	add.w	r3, r5, #2
 801117e:	d04d      	beq.n	801121c <ucdr_deserialize_endian_uint32_t+0x104>
 8011180:	787b      	ldrb	r3, [r7, #1]
 8011182:	70ab      	strb	r3, [r5, #2]
 8011184:	f1b8 0f02 	cmp.w	r8, #2
 8011188:	f105 0303 	add.w	r3, r5, #3
 801118c:	d04a      	beq.n	8011224 <ucdr_deserialize_endian_uint32_t+0x10c>
 801118e:	783b      	ldrb	r3, [r7, #0]
 8011190:	70eb      	strb	r3, [r5, #3]
 8011192:	6923      	ldr	r3, [r4, #16]
 8011194:	68a2      	ldr	r2, [r4, #8]
 8011196:	7da0      	ldrb	r0, [r4, #22]
 8011198:	2104      	movs	r1, #4
 801119a:	3304      	adds	r3, #4
 801119c:	eba3 0308 	sub.w	r3, r3, r8
 80111a0:	4452      	add	r2, sl
 80111a2:	7561      	strb	r1, [r4, #21]
 80111a4:	6123      	str	r3, [r4, #16]
 80111a6:	60a2      	str	r2, [r4, #8]
 80111a8:	f080 0001 	eor.w	r0, r0, #1
 80111ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111b0:	2104      	movs	r1, #4
 80111b2:	4620      	mov	r0, r4
 80111b4:	f000 fb3e 	bl	8011834 <ucdr_check_final_buffer_behavior>
 80111b8:	b1a8      	cbz	r0, 80111e6 <ucdr_deserialize_endian_uint32_t+0xce>
 80111ba:	2e01      	cmp	r6, #1
 80111bc:	68a3      	ldr	r3, [r4, #8]
 80111be:	d017      	beq.n	80111f0 <ucdr_deserialize_endian_uint32_t+0xd8>
 80111c0:	78db      	ldrb	r3, [r3, #3]
 80111c2:	702b      	strb	r3, [r5, #0]
 80111c4:	68a3      	ldr	r3, [r4, #8]
 80111c6:	789b      	ldrb	r3, [r3, #2]
 80111c8:	706b      	strb	r3, [r5, #1]
 80111ca:	68a3      	ldr	r3, [r4, #8]
 80111cc:	785b      	ldrb	r3, [r3, #1]
 80111ce:	70ab      	strb	r3, [r5, #2]
 80111d0:	68a3      	ldr	r3, [r4, #8]
 80111d2:	781b      	ldrb	r3, [r3, #0]
 80111d4:	70eb      	strb	r3, [r5, #3]
 80111d6:	68a2      	ldr	r2, [r4, #8]
 80111d8:	6923      	ldr	r3, [r4, #16]
 80111da:	3204      	adds	r2, #4
 80111dc:	3304      	adds	r3, #4
 80111de:	2104      	movs	r1, #4
 80111e0:	60a2      	str	r2, [r4, #8]
 80111e2:	6123      	str	r3, [r4, #16]
 80111e4:	7561      	strb	r1, [r4, #21]
 80111e6:	7da0      	ldrb	r0, [r4, #22]
 80111e8:	f080 0001 	eor.w	r0, r0, #1
 80111ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	602b      	str	r3, [r5, #0]
 80111f4:	e7ef      	b.n	80111d6 <ucdr_deserialize_endian_uint32_t+0xbe>
 80111f6:	68a2      	ldr	r2, [r4, #8]
 80111f8:	6923      	ldr	r3, [r4, #16]
 80111fa:	7da0      	ldrb	r0, [r4, #22]
 80111fc:	f884 9015 	strb.w	r9, [r4, #21]
 8011200:	eba2 0208 	sub.w	r2, r2, r8
 8011204:	eba3 0308 	sub.w	r3, r3, r8
 8011208:	60a2      	str	r2, [r4, #8]
 801120a:	6123      	str	r3, [r4, #16]
 801120c:	f080 0001 	eor.w	r0, r0, #1
 8011210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011214:	68a3      	ldr	r3, [r4, #8]
 8011216:	789b      	ldrb	r3, [r3, #2]
 8011218:	706b      	strb	r3, [r5, #1]
 801121a:	1cab      	adds	r3, r5, #2
 801121c:	68a2      	ldr	r2, [r4, #8]
 801121e:	7852      	ldrb	r2, [r2, #1]
 8011220:	f803 2b01 	strb.w	r2, [r3], #1
 8011224:	68a2      	ldr	r2, [r4, #8]
 8011226:	7812      	ldrb	r2, [r2, #0]
 8011228:	701a      	strb	r2, [r3, #0]
 801122a:	e7b2      	b.n	8011192 <ucdr_deserialize_endian_uint32_t+0x7a>
 801122c:	4639      	mov	r1, r7
 801122e:	4642      	mov	r2, r8
 8011230:	4628      	mov	r0, r5
 8011232:	f009 fa94 	bl	801a75e <memcpy>
 8011236:	68a1      	ldr	r1, [r4, #8]
 8011238:	4652      	mov	r2, sl
 801123a:	eb05 0008 	add.w	r0, r5, r8
 801123e:	f009 fa8e 	bl	801a75e <memcpy>
 8011242:	e7a6      	b.n	8011192 <ucdr_deserialize_endian_uint32_t+0x7a>

08011244 <ucdr_serialize_uint64_t>:
 8011244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011248:	2108      	movs	r1, #8
 801124a:	b082      	sub	sp, #8
 801124c:	4604      	mov	r4, r0
 801124e:	e9cd 2300 	strd	r2, r3, [sp]
 8011252:	f000 fb41 	bl	80118d8 <ucdr_buffer_alignment>
 8011256:	4601      	mov	r1, r0
 8011258:	4620      	mov	r0, r4
 801125a:	7d67      	ldrb	r7, [r4, #21]
 801125c:	f000 fb80 	bl	8011960 <ucdr_advance_buffer>
 8011260:	4620      	mov	r0, r4
 8011262:	2108      	movs	r1, #8
 8011264:	f000 fada 	bl	801181c <ucdr_check_buffer_available_for>
 8011268:	2800      	cmp	r0, #0
 801126a:	d14e      	bne.n	801130a <ucdr_serialize_uint64_t+0xc6>
 801126c:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8011270:	42b5      	cmp	r5, r6
 8011272:	d945      	bls.n	8011300 <ucdr_serialize_uint64_t+0xbc>
 8011274:	6923      	ldr	r3, [r4, #16]
 8011276:	60a5      	str	r5, [r4, #8]
 8011278:	1bad      	subs	r5, r5, r6
 801127a:	442b      	add	r3, r5
 801127c:	f1c5 0808 	rsb	r8, r5, #8
 8011280:	6123      	str	r3, [r4, #16]
 8011282:	4641      	mov	r1, r8
 8011284:	4620      	mov	r0, r4
 8011286:	f000 fad5 	bl	8011834 <ucdr_check_final_buffer_behavior>
 801128a:	2800      	cmp	r0, #0
 801128c:	d074      	beq.n	8011378 <ucdr_serialize_uint64_t+0x134>
 801128e:	7d23      	ldrb	r3, [r4, #20]
 8011290:	2b01      	cmp	r3, #1
 8011292:	f000 809b 	beq.w	80113cc <ucdr_serialize_uint64_t+0x188>
 8011296:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801129a:	7033      	strb	r3, [r6, #0]
 801129c:	2d00      	cmp	r5, #0
 801129e:	d078      	beq.n	8011392 <ucdr_serialize_uint64_t+0x14e>
 80112a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80112a4:	7073      	strb	r3, [r6, #1]
 80112a6:	2d01      	cmp	r5, #1
 80112a8:	d077      	beq.n	801139a <ucdr_serialize_uint64_t+0x156>
 80112aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80112ae:	70b3      	strb	r3, [r6, #2]
 80112b0:	2d02      	cmp	r5, #2
 80112b2:	d076      	beq.n	80113a2 <ucdr_serialize_uint64_t+0x15e>
 80112b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80112b8:	70f3      	strb	r3, [r6, #3]
 80112ba:	2d03      	cmp	r5, #3
 80112bc:	d075      	beq.n	80113aa <ucdr_serialize_uint64_t+0x166>
 80112be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80112c2:	7133      	strb	r3, [r6, #4]
 80112c4:	2d04      	cmp	r5, #4
 80112c6:	d074      	beq.n	80113b2 <ucdr_serialize_uint64_t+0x16e>
 80112c8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80112cc:	7173      	strb	r3, [r6, #5]
 80112ce:	2d05      	cmp	r5, #5
 80112d0:	d073      	beq.n	80113ba <ucdr_serialize_uint64_t+0x176>
 80112d2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80112d6:	71b3      	strb	r3, [r6, #6]
 80112d8:	2d06      	cmp	r5, #6
 80112da:	d072      	beq.n	80113c2 <ucdr_serialize_uint64_t+0x17e>
 80112dc:	f89d 3000 	ldrb.w	r3, [sp]
 80112e0:	71f3      	strb	r3, [r6, #7]
 80112e2:	6923      	ldr	r3, [r4, #16]
 80112e4:	68a2      	ldr	r2, [r4, #8]
 80112e6:	7da0      	ldrb	r0, [r4, #22]
 80112e8:	3308      	adds	r3, #8
 80112ea:	1b5d      	subs	r5, r3, r5
 80112ec:	4442      	add	r2, r8
 80112ee:	2308      	movs	r3, #8
 80112f0:	f080 0001 	eor.w	r0, r0, #1
 80112f4:	6125      	str	r5, [r4, #16]
 80112f6:	60a2      	str	r2, [r4, #8]
 80112f8:	7563      	strb	r3, [r4, #21]
 80112fa:	b002      	add	sp, #8
 80112fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011300:	2108      	movs	r1, #8
 8011302:	4620      	mov	r0, r4
 8011304:	f000 fa96 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8011308:	b350      	cbz	r0, 8011360 <ucdr_serialize_uint64_t+0x11c>
 801130a:	7d23      	ldrb	r3, [r4, #20]
 801130c:	2b01      	cmp	r3, #1
 801130e:	d02d      	beq.n	801136c <ucdr_serialize_uint64_t+0x128>
 8011310:	68a3      	ldr	r3, [r4, #8]
 8011312:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011316:	701a      	strb	r2, [r3, #0]
 8011318:	68a3      	ldr	r3, [r4, #8]
 801131a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801131e:	705a      	strb	r2, [r3, #1]
 8011320:	68a3      	ldr	r3, [r4, #8]
 8011322:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011326:	709a      	strb	r2, [r3, #2]
 8011328:	68a3      	ldr	r3, [r4, #8]
 801132a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801132e:	70da      	strb	r2, [r3, #3]
 8011330:	68a3      	ldr	r3, [r4, #8]
 8011332:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011336:	711a      	strb	r2, [r3, #4]
 8011338:	68a3      	ldr	r3, [r4, #8]
 801133a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801133e:	715a      	strb	r2, [r3, #5]
 8011340:	68a3      	ldr	r3, [r4, #8]
 8011342:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011346:	719a      	strb	r2, [r3, #6]
 8011348:	68a3      	ldr	r3, [r4, #8]
 801134a:	f89d 2000 	ldrb.w	r2, [sp]
 801134e:	71da      	strb	r2, [r3, #7]
 8011350:	68a2      	ldr	r2, [r4, #8]
 8011352:	6923      	ldr	r3, [r4, #16]
 8011354:	3208      	adds	r2, #8
 8011356:	3308      	adds	r3, #8
 8011358:	2108      	movs	r1, #8
 801135a:	60a2      	str	r2, [r4, #8]
 801135c:	6123      	str	r3, [r4, #16]
 801135e:	7561      	strb	r1, [r4, #21]
 8011360:	7da0      	ldrb	r0, [r4, #22]
 8011362:	f080 0001 	eor.w	r0, r0, #1
 8011366:	b002      	add	sp, #8
 8011368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801136c:	466b      	mov	r3, sp
 801136e:	cb03      	ldmia	r3!, {r0, r1}
 8011370:	68a3      	ldr	r3, [r4, #8]
 8011372:	6018      	str	r0, [r3, #0]
 8011374:	6059      	str	r1, [r3, #4]
 8011376:	e7eb      	b.n	8011350 <ucdr_serialize_uint64_t+0x10c>
 8011378:	68a2      	ldr	r2, [r4, #8]
 801137a:	6923      	ldr	r3, [r4, #16]
 801137c:	7da0      	ldrb	r0, [r4, #22]
 801137e:	7567      	strb	r7, [r4, #21]
 8011380:	1b52      	subs	r2, r2, r5
 8011382:	f080 0001 	eor.w	r0, r0, #1
 8011386:	1b5d      	subs	r5, r3, r5
 8011388:	60a2      	str	r2, [r4, #8]
 801138a:	6125      	str	r5, [r4, #16]
 801138c:	b002      	add	sp, #8
 801138e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011392:	68a3      	ldr	r3, [r4, #8]
 8011394:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011398:	701a      	strb	r2, [r3, #0]
 801139a:	68a3      	ldr	r3, [r4, #8]
 801139c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80113a0:	701a      	strb	r2, [r3, #0]
 80113a2:	68a3      	ldr	r3, [r4, #8]
 80113a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80113a8:	701a      	strb	r2, [r3, #0]
 80113aa:	68a3      	ldr	r3, [r4, #8]
 80113ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80113b0:	701a      	strb	r2, [r3, #0]
 80113b2:	68a3      	ldr	r3, [r4, #8]
 80113b4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80113b8:	701a      	strb	r2, [r3, #0]
 80113ba:	68a3      	ldr	r3, [r4, #8]
 80113bc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80113c0:	701a      	strb	r2, [r3, #0]
 80113c2:	68a3      	ldr	r3, [r4, #8]
 80113c4:	f89d 2000 	ldrb.w	r2, [sp]
 80113c8:	701a      	strb	r2, [r3, #0]
 80113ca:	e78a      	b.n	80112e2 <ucdr_serialize_uint64_t+0x9e>
 80113cc:	4630      	mov	r0, r6
 80113ce:	466e      	mov	r6, sp
 80113d0:	4631      	mov	r1, r6
 80113d2:	462a      	mov	r2, r5
 80113d4:	f009 f9c3 	bl	801a75e <memcpy>
 80113d8:	68a0      	ldr	r0, [r4, #8]
 80113da:	4642      	mov	r2, r8
 80113dc:	1971      	adds	r1, r6, r5
 80113de:	f009 f9be 	bl	801a75e <memcpy>
 80113e2:	e77e      	b.n	80112e2 <ucdr_serialize_uint64_t+0x9e>

080113e4 <ucdr_serialize_int16_t>:
 80113e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113e8:	b082      	sub	sp, #8
 80113ea:	460b      	mov	r3, r1
 80113ec:	2102      	movs	r1, #2
 80113ee:	4604      	mov	r4, r0
 80113f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80113f4:	f000 fa70 	bl	80118d8 <ucdr_buffer_alignment>
 80113f8:	4601      	mov	r1, r0
 80113fa:	4620      	mov	r0, r4
 80113fc:	7d67      	ldrb	r7, [r4, #21]
 80113fe:	f000 faaf 	bl	8011960 <ucdr_advance_buffer>
 8011402:	4620      	mov	r0, r4
 8011404:	2102      	movs	r1, #2
 8011406:	f000 fa09 	bl	801181c <ucdr_check_buffer_available_for>
 801140a:	bb78      	cbnz	r0, 801146c <ucdr_serialize_int16_t+0x88>
 801140c:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8011410:	42b5      	cmp	r5, r6
 8011412:	d926      	bls.n	8011462 <ucdr_serialize_int16_t+0x7e>
 8011414:	6922      	ldr	r2, [r4, #16]
 8011416:	60a5      	str	r5, [r4, #8]
 8011418:	1bad      	subs	r5, r5, r6
 801141a:	442a      	add	r2, r5
 801141c:	f1c5 0802 	rsb	r8, r5, #2
 8011420:	6122      	str	r2, [r4, #16]
 8011422:	4641      	mov	r1, r8
 8011424:	4620      	mov	r0, r4
 8011426:	f000 fa05 	bl	8011834 <ucdr_check_final_buffer_behavior>
 801142a:	2800      	cmp	r0, #0
 801142c:	d03b      	beq.n	80114a6 <ucdr_serialize_int16_t+0xc2>
 801142e:	7d23      	ldrb	r3, [r4, #20]
 8011430:	2b01      	cmp	r3, #1
 8011432:	d04a      	beq.n	80114ca <ucdr_serialize_int16_t+0xe6>
 8011434:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011438:	7033      	strb	r3, [r6, #0]
 801143a:	2d00      	cmp	r5, #0
 801143c:	d040      	beq.n	80114c0 <ucdr_serialize_int16_t+0xdc>
 801143e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011442:	7073      	strb	r3, [r6, #1]
 8011444:	6923      	ldr	r3, [r4, #16]
 8011446:	68a2      	ldr	r2, [r4, #8]
 8011448:	7da0      	ldrb	r0, [r4, #22]
 801144a:	3302      	adds	r3, #2
 801144c:	1b5b      	subs	r3, r3, r5
 801144e:	4442      	add	r2, r8
 8011450:	2102      	movs	r1, #2
 8011452:	f080 0001 	eor.w	r0, r0, #1
 8011456:	6123      	str	r3, [r4, #16]
 8011458:	60a2      	str	r2, [r4, #8]
 801145a:	7561      	strb	r1, [r4, #21]
 801145c:	b002      	add	sp, #8
 801145e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011462:	2102      	movs	r1, #2
 8011464:	4620      	mov	r0, r4
 8011466:	f000 f9e5 	bl	8011834 <ucdr_check_final_buffer_behavior>
 801146a:	b190      	cbz	r0, 8011492 <ucdr_serialize_int16_t+0xae>
 801146c:	7d23      	ldrb	r3, [r4, #20]
 801146e:	2b01      	cmp	r3, #1
 8011470:	68a3      	ldr	r3, [r4, #8]
 8011472:	d014      	beq.n	801149e <ucdr_serialize_int16_t+0xba>
 8011474:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011478:	701a      	strb	r2, [r3, #0]
 801147a:	68a3      	ldr	r3, [r4, #8]
 801147c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011480:	705a      	strb	r2, [r3, #1]
 8011482:	68a2      	ldr	r2, [r4, #8]
 8011484:	6923      	ldr	r3, [r4, #16]
 8011486:	3202      	adds	r2, #2
 8011488:	3302      	adds	r3, #2
 801148a:	2102      	movs	r1, #2
 801148c:	60a2      	str	r2, [r4, #8]
 801148e:	6123      	str	r3, [r4, #16]
 8011490:	7561      	strb	r1, [r4, #21]
 8011492:	7da0      	ldrb	r0, [r4, #22]
 8011494:	f080 0001 	eor.w	r0, r0, #1
 8011498:	b002      	add	sp, #8
 801149a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801149e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80114a2:	801a      	strh	r2, [r3, #0]
 80114a4:	e7ed      	b.n	8011482 <ucdr_serialize_int16_t+0x9e>
 80114a6:	68a2      	ldr	r2, [r4, #8]
 80114a8:	6923      	ldr	r3, [r4, #16]
 80114aa:	7da0      	ldrb	r0, [r4, #22]
 80114ac:	7567      	strb	r7, [r4, #21]
 80114ae:	1b52      	subs	r2, r2, r5
 80114b0:	1b5b      	subs	r3, r3, r5
 80114b2:	f080 0001 	eor.w	r0, r0, #1
 80114b6:	60a2      	str	r2, [r4, #8]
 80114b8:	6123      	str	r3, [r4, #16]
 80114ba:	b002      	add	sp, #8
 80114bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114c0:	68a3      	ldr	r3, [r4, #8]
 80114c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80114c6:	701a      	strb	r2, [r3, #0]
 80114c8:	e7bc      	b.n	8011444 <ucdr_serialize_int16_t+0x60>
 80114ca:	4630      	mov	r0, r6
 80114cc:	f10d 0606 	add.w	r6, sp, #6
 80114d0:	4631      	mov	r1, r6
 80114d2:	462a      	mov	r2, r5
 80114d4:	f009 f943 	bl	801a75e <memcpy>
 80114d8:	68a0      	ldr	r0, [r4, #8]
 80114da:	4642      	mov	r2, r8
 80114dc:	1971      	adds	r1, r6, r5
 80114de:	f009 f93e 	bl	801a75e <memcpy>
 80114e2:	e7af      	b.n	8011444 <ucdr_serialize_int16_t+0x60>

080114e4 <ucdr_deserialize_int16_t>:
 80114e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114e8:	460d      	mov	r5, r1
 80114ea:	2102      	movs	r1, #2
 80114ec:	4604      	mov	r4, r0
 80114ee:	f000 f9f3 	bl	80118d8 <ucdr_buffer_alignment>
 80114f2:	4601      	mov	r1, r0
 80114f4:	4620      	mov	r0, r4
 80114f6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80114fa:	f000 fa31 	bl	8011960 <ucdr_advance_buffer>
 80114fe:	4620      	mov	r0, r4
 8011500:	2102      	movs	r1, #2
 8011502:	f000 f98b 	bl	801181c <ucdr_check_buffer_available_for>
 8011506:	bb60      	cbnz	r0, 8011562 <ucdr_deserialize_int16_t+0x7e>
 8011508:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801150c:	42be      	cmp	r6, r7
 801150e:	d923      	bls.n	8011558 <ucdr_deserialize_int16_t+0x74>
 8011510:	6922      	ldr	r2, [r4, #16]
 8011512:	60a6      	str	r6, [r4, #8]
 8011514:	1bf6      	subs	r6, r6, r7
 8011516:	4432      	add	r2, r6
 8011518:	f1c6 0902 	rsb	r9, r6, #2
 801151c:	6122      	str	r2, [r4, #16]
 801151e:	4649      	mov	r1, r9
 8011520:	4620      	mov	r0, r4
 8011522:	f000 f987 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8011526:	2800      	cmp	r0, #0
 8011528:	d034      	beq.n	8011594 <ucdr_deserialize_int16_t+0xb0>
 801152a:	7d23      	ldrb	r3, [r4, #20]
 801152c:	2b01      	cmp	r3, #1
 801152e:	d042      	beq.n	80115b6 <ucdr_deserialize_int16_t+0xd2>
 8011530:	787b      	ldrb	r3, [r7, #1]
 8011532:	702b      	strb	r3, [r5, #0]
 8011534:	2e00      	cmp	r6, #0
 8011536:	d03a      	beq.n	80115ae <ucdr_deserialize_int16_t+0xca>
 8011538:	783b      	ldrb	r3, [r7, #0]
 801153a:	706b      	strb	r3, [r5, #1]
 801153c:	6923      	ldr	r3, [r4, #16]
 801153e:	68a2      	ldr	r2, [r4, #8]
 8011540:	7da0      	ldrb	r0, [r4, #22]
 8011542:	2102      	movs	r1, #2
 8011544:	3302      	adds	r3, #2
 8011546:	1b9b      	subs	r3, r3, r6
 8011548:	444a      	add	r2, r9
 801154a:	7561      	strb	r1, [r4, #21]
 801154c:	6123      	str	r3, [r4, #16]
 801154e:	60a2      	str	r2, [r4, #8]
 8011550:	f080 0001 	eor.w	r0, r0, #1
 8011554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011558:	2102      	movs	r1, #2
 801155a:	4620      	mov	r0, r4
 801155c:	f000 f96a 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8011560:	b180      	cbz	r0, 8011584 <ucdr_deserialize_int16_t+0xa0>
 8011562:	7d23      	ldrb	r3, [r4, #20]
 8011564:	2b01      	cmp	r3, #1
 8011566:	68a3      	ldr	r3, [r4, #8]
 8011568:	d011      	beq.n	801158e <ucdr_deserialize_int16_t+0xaa>
 801156a:	785b      	ldrb	r3, [r3, #1]
 801156c:	702b      	strb	r3, [r5, #0]
 801156e:	68a3      	ldr	r3, [r4, #8]
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	706b      	strb	r3, [r5, #1]
 8011574:	68a2      	ldr	r2, [r4, #8]
 8011576:	6923      	ldr	r3, [r4, #16]
 8011578:	3202      	adds	r2, #2
 801157a:	3302      	adds	r3, #2
 801157c:	2102      	movs	r1, #2
 801157e:	60a2      	str	r2, [r4, #8]
 8011580:	6123      	str	r3, [r4, #16]
 8011582:	7561      	strb	r1, [r4, #21]
 8011584:	7da0      	ldrb	r0, [r4, #22]
 8011586:	f080 0001 	eor.w	r0, r0, #1
 801158a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801158e:	881b      	ldrh	r3, [r3, #0]
 8011590:	802b      	strh	r3, [r5, #0]
 8011592:	e7ef      	b.n	8011574 <ucdr_deserialize_int16_t+0x90>
 8011594:	68a2      	ldr	r2, [r4, #8]
 8011596:	6923      	ldr	r3, [r4, #16]
 8011598:	7da0      	ldrb	r0, [r4, #22]
 801159a:	f884 8015 	strb.w	r8, [r4, #21]
 801159e:	1b92      	subs	r2, r2, r6
 80115a0:	1b9b      	subs	r3, r3, r6
 80115a2:	60a2      	str	r2, [r4, #8]
 80115a4:	6123      	str	r3, [r4, #16]
 80115a6:	f080 0001 	eor.w	r0, r0, #1
 80115aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115ae:	68a3      	ldr	r3, [r4, #8]
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	706b      	strb	r3, [r5, #1]
 80115b4:	e7c2      	b.n	801153c <ucdr_deserialize_int16_t+0x58>
 80115b6:	4639      	mov	r1, r7
 80115b8:	4632      	mov	r2, r6
 80115ba:	4628      	mov	r0, r5
 80115bc:	f009 f8cf 	bl	801a75e <memcpy>
 80115c0:	68a1      	ldr	r1, [r4, #8]
 80115c2:	464a      	mov	r2, r9
 80115c4:	19a8      	adds	r0, r5, r6
 80115c6:	f009 f8ca 	bl	801a75e <memcpy>
 80115ca:	e7b7      	b.n	801153c <ucdr_deserialize_int16_t+0x58>

080115cc <ucdr_serialize_int32_t>:
 80115cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115d0:	b082      	sub	sp, #8
 80115d2:	4604      	mov	r4, r0
 80115d4:	9101      	str	r1, [sp, #4]
 80115d6:	2104      	movs	r1, #4
 80115d8:	f000 f97e 	bl	80118d8 <ucdr_buffer_alignment>
 80115dc:	4601      	mov	r1, r0
 80115de:	4620      	mov	r0, r4
 80115e0:	7d67      	ldrb	r7, [r4, #21]
 80115e2:	f000 f9bd 	bl	8011960 <ucdr_advance_buffer>
 80115e6:	4620      	mov	r0, r4
 80115e8:	2104      	movs	r1, #4
 80115ea:	f000 f917 	bl	801181c <ucdr_check_buffer_available_for>
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d139      	bne.n	8011666 <ucdr_serialize_int32_t+0x9a>
 80115f2:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 80115f6:	42ae      	cmp	r6, r5
 80115f8:	d930      	bls.n	801165c <ucdr_serialize_int32_t+0x90>
 80115fa:	6922      	ldr	r2, [r4, #16]
 80115fc:	60a6      	str	r6, [r4, #8]
 80115fe:	1b76      	subs	r6, r6, r5
 8011600:	4432      	add	r2, r6
 8011602:	f1c6 0804 	rsb	r8, r6, #4
 8011606:	6122      	str	r2, [r4, #16]
 8011608:	4641      	mov	r1, r8
 801160a:	4620      	mov	r0, r4
 801160c:	f000 f912 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8011610:	2800      	cmp	r0, #0
 8011612:	d04c      	beq.n	80116ae <ucdr_serialize_int32_t+0xe2>
 8011614:	7d23      	ldrb	r3, [r4, #20]
 8011616:	2b01      	cmp	r3, #1
 8011618:	d063      	beq.n	80116e2 <ucdr_serialize_int32_t+0x116>
 801161a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801161e:	702b      	strb	r3, [r5, #0]
 8011620:	2e00      	cmp	r6, #0
 8011622:	d051      	beq.n	80116c8 <ucdr_serialize_int32_t+0xfc>
 8011624:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011628:	706b      	strb	r3, [r5, #1]
 801162a:	2e01      	cmp	r6, #1
 801162c:	d050      	beq.n	80116d0 <ucdr_serialize_int32_t+0x104>
 801162e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011632:	70ab      	strb	r3, [r5, #2]
 8011634:	2e02      	cmp	r6, #2
 8011636:	d04f      	beq.n	80116d8 <ucdr_serialize_int32_t+0x10c>
 8011638:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801163c:	70eb      	strb	r3, [r5, #3]
 801163e:	6923      	ldr	r3, [r4, #16]
 8011640:	68a2      	ldr	r2, [r4, #8]
 8011642:	7da0      	ldrb	r0, [r4, #22]
 8011644:	3304      	adds	r3, #4
 8011646:	1b9b      	subs	r3, r3, r6
 8011648:	4442      	add	r2, r8
 801164a:	2104      	movs	r1, #4
 801164c:	f080 0001 	eor.w	r0, r0, #1
 8011650:	6123      	str	r3, [r4, #16]
 8011652:	60a2      	str	r2, [r4, #8]
 8011654:	7561      	strb	r1, [r4, #21]
 8011656:	b002      	add	sp, #8
 8011658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801165c:	2104      	movs	r1, #4
 801165e:	4620      	mov	r0, r4
 8011660:	f000 f8e8 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8011664:	b1d0      	cbz	r0, 801169c <ucdr_serialize_int32_t+0xd0>
 8011666:	7d23      	ldrb	r3, [r4, #20]
 8011668:	2b01      	cmp	r3, #1
 801166a:	68a3      	ldr	r3, [r4, #8]
 801166c:	d01c      	beq.n	80116a8 <ucdr_serialize_int32_t+0xdc>
 801166e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011672:	701a      	strb	r2, [r3, #0]
 8011674:	68a3      	ldr	r3, [r4, #8]
 8011676:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801167a:	705a      	strb	r2, [r3, #1]
 801167c:	68a3      	ldr	r3, [r4, #8]
 801167e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011682:	709a      	strb	r2, [r3, #2]
 8011684:	68a3      	ldr	r3, [r4, #8]
 8011686:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801168a:	70da      	strb	r2, [r3, #3]
 801168c:	68a2      	ldr	r2, [r4, #8]
 801168e:	6923      	ldr	r3, [r4, #16]
 8011690:	3204      	adds	r2, #4
 8011692:	3304      	adds	r3, #4
 8011694:	2104      	movs	r1, #4
 8011696:	60a2      	str	r2, [r4, #8]
 8011698:	6123      	str	r3, [r4, #16]
 801169a:	7561      	strb	r1, [r4, #21]
 801169c:	7da0      	ldrb	r0, [r4, #22]
 801169e:	f080 0001 	eor.w	r0, r0, #1
 80116a2:	b002      	add	sp, #8
 80116a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116a8:	9a01      	ldr	r2, [sp, #4]
 80116aa:	601a      	str	r2, [r3, #0]
 80116ac:	e7ee      	b.n	801168c <ucdr_serialize_int32_t+0xc0>
 80116ae:	68a2      	ldr	r2, [r4, #8]
 80116b0:	6923      	ldr	r3, [r4, #16]
 80116b2:	7da0      	ldrb	r0, [r4, #22]
 80116b4:	7567      	strb	r7, [r4, #21]
 80116b6:	1b92      	subs	r2, r2, r6
 80116b8:	1b9b      	subs	r3, r3, r6
 80116ba:	f080 0001 	eor.w	r0, r0, #1
 80116be:	60a2      	str	r2, [r4, #8]
 80116c0:	6123      	str	r3, [r4, #16]
 80116c2:	b002      	add	sp, #8
 80116c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116c8:	68a3      	ldr	r3, [r4, #8]
 80116ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80116ce:	701a      	strb	r2, [r3, #0]
 80116d0:	68a3      	ldr	r3, [r4, #8]
 80116d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80116d6:	701a      	strb	r2, [r3, #0]
 80116d8:	68a3      	ldr	r3, [r4, #8]
 80116da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80116de:	701a      	strb	r2, [r3, #0]
 80116e0:	e7ad      	b.n	801163e <ucdr_serialize_int32_t+0x72>
 80116e2:	4628      	mov	r0, r5
 80116e4:	ad01      	add	r5, sp, #4
 80116e6:	4629      	mov	r1, r5
 80116e8:	4632      	mov	r2, r6
 80116ea:	f009 f838 	bl	801a75e <memcpy>
 80116ee:	68a0      	ldr	r0, [r4, #8]
 80116f0:	4642      	mov	r2, r8
 80116f2:	19a9      	adds	r1, r5, r6
 80116f4:	f009 f833 	bl	801a75e <memcpy>
 80116f8:	e7a1      	b.n	801163e <ucdr_serialize_int32_t+0x72>
 80116fa:	bf00      	nop

080116fc <ucdr_deserialize_int32_t>:
 80116fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011700:	460d      	mov	r5, r1
 8011702:	2104      	movs	r1, #4
 8011704:	4604      	mov	r4, r0
 8011706:	f000 f8e7 	bl	80118d8 <ucdr_buffer_alignment>
 801170a:	4601      	mov	r1, r0
 801170c:	4620      	mov	r0, r4
 801170e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011712:	f000 f925 	bl	8011960 <ucdr_advance_buffer>
 8011716:	4620      	mov	r0, r4
 8011718:	2104      	movs	r1, #4
 801171a:	f000 f87f 	bl	801181c <ucdr_check_buffer_available_for>
 801171e:	2800      	cmp	r0, #0
 8011720:	d138      	bne.n	8011794 <ucdr_deserialize_int32_t+0x98>
 8011722:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011726:	42b7      	cmp	r7, r6
 8011728:	d92f      	bls.n	801178a <ucdr_deserialize_int32_t+0x8e>
 801172a:	6922      	ldr	r2, [r4, #16]
 801172c:	60a7      	str	r7, [r4, #8]
 801172e:	1bbf      	subs	r7, r7, r6
 8011730:	443a      	add	r2, r7
 8011732:	f1c7 0904 	rsb	r9, r7, #4
 8011736:	6122      	str	r2, [r4, #16]
 8011738:	4649      	mov	r1, r9
 801173a:	4620      	mov	r0, r4
 801173c:	f000 f87a 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8011740:	2800      	cmp	r0, #0
 8011742:	d046      	beq.n	80117d2 <ucdr_deserialize_int32_t+0xd6>
 8011744:	7d23      	ldrb	r3, [r4, #20]
 8011746:	2b01      	cmp	r3, #1
 8011748:	d05c      	beq.n	8011804 <ucdr_deserialize_int32_t+0x108>
 801174a:	78f3      	ldrb	r3, [r6, #3]
 801174c:	702b      	strb	r3, [r5, #0]
 801174e:	2f00      	cmp	r7, #0
 8011750:	d04c      	beq.n	80117ec <ucdr_deserialize_int32_t+0xf0>
 8011752:	78b3      	ldrb	r3, [r6, #2]
 8011754:	706b      	strb	r3, [r5, #1]
 8011756:	2f01      	cmp	r7, #1
 8011758:	f105 0302 	add.w	r3, r5, #2
 801175c:	d04a      	beq.n	80117f4 <ucdr_deserialize_int32_t+0xf8>
 801175e:	7873      	ldrb	r3, [r6, #1]
 8011760:	70ab      	strb	r3, [r5, #2]
 8011762:	2f02      	cmp	r7, #2
 8011764:	f105 0303 	add.w	r3, r5, #3
 8011768:	d048      	beq.n	80117fc <ucdr_deserialize_int32_t+0x100>
 801176a:	7833      	ldrb	r3, [r6, #0]
 801176c:	70eb      	strb	r3, [r5, #3]
 801176e:	6923      	ldr	r3, [r4, #16]
 8011770:	68a2      	ldr	r2, [r4, #8]
 8011772:	7da0      	ldrb	r0, [r4, #22]
 8011774:	2104      	movs	r1, #4
 8011776:	3304      	adds	r3, #4
 8011778:	1bdb      	subs	r3, r3, r7
 801177a:	444a      	add	r2, r9
 801177c:	7561      	strb	r1, [r4, #21]
 801177e:	6123      	str	r3, [r4, #16]
 8011780:	60a2      	str	r2, [r4, #8]
 8011782:	f080 0001 	eor.w	r0, r0, #1
 8011786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801178a:	2104      	movs	r1, #4
 801178c:	4620      	mov	r0, r4
 801178e:	f000 f851 	bl	8011834 <ucdr_check_final_buffer_behavior>
 8011792:	b1b0      	cbz	r0, 80117c2 <ucdr_deserialize_int32_t+0xc6>
 8011794:	7d23      	ldrb	r3, [r4, #20]
 8011796:	2b01      	cmp	r3, #1
 8011798:	68a3      	ldr	r3, [r4, #8]
 801179a:	d017      	beq.n	80117cc <ucdr_deserialize_int32_t+0xd0>
 801179c:	78db      	ldrb	r3, [r3, #3]
 801179e:	702b      	strb	r3, [r5, #0]
 80117a0:	68a3      	ldr	r3, [r4, #8]
 80117a2:	789b      	ldrb	r3, [r3, #2]
 80117a4:	706b      	strb	r3, [r5, #1]
 80117a6:	68a3      	ldr	r3, [r4, #8]
 80117a8:	785b      	ldrb	r3, [r3, #1]
 80117aa:	70ab      	strb	r3, [r5, #2]
 80117ac:	68a3      	ldr	r3, [r4, #8]
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	70eb      	strb	r3, [r5, #3]
 80117b2:	68a2      	ldr	r2, [r4, #8]
 80117b4:	6923      	ldr	r3, [r4, #16]
 80117b6:	3204      	adds	r2, #4
 80117b8:	3304      	adds	r3, #4
 80117ba:	2104      	movs	r1, #4
 80117bc:	60a2      	str	r2, [r4, #8]
 80117be:	6123      	str	r3, [r4, #16]
 80117c0:	7561      	strb	r1, [r4, #21]
 80117c2:	7da0      	ldrb	r0, [r4, #22]
 80117c4:	f080 0001 	eor.w	r0, r0, #1
 80117c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	602b      	str	r3, [r5, #0]
 80117d0:	e7ef      	b.n	80117b2 <ucdr_deserialize_int32_t+0xb6>
 80117d2:	68a2      	ldr	r2, [r4, #8]
 80117d4:	6923      	ldr	r3, [r4, #16]
 80117d6:	7da0      	ldrb	r0, [r4, #22]
 80117d8:	f884 8015 	strb.w	r8, [r4, #21]
 80117dc:	1bd2      	subs	r2, r2, r7
 80117de:	1bdb      	subs	r3, r3, r7
 80117e0:	60a2      	str	r2, [r4, #8]
 80117e2:	6123      	str	r3, [r4, #16]
 80117e4:	f080 0001 	eor.w	r0, r0, #1
 80117e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117ec:	68a3      	ldr	r3, [r4, #8]
 80117ee:	789b      	ldrb	r3, [r3, #2]
 80117f0:	706b      	strb	r3, [r5, #1]
 80117f2:	1cab      	adds	r3, r5, #2
 80117f4:	68a2      	ldr	r2, [r4, #8]
 80117f6:	7852      	ldrb	r2, [r2, #1]
 80117f8:	f803 2b01 	strb.w	r2, [r3], #1
 80117fc:	68a2      	ldr	r2, [r4, #8]
 80117fe:	7812      	ldrb	r2, [r2, #0]
 8011800:	701a      	strb	r2, [r3, #0]
 8011802:	e7b4      	b.n	801176e <ucdr_deserialize_int32_t+0x72>
 8011804:	4631      	mov	r1, r6
 8011806:	463a      	mov	r2, r7
 8011808:	4628      	mov	r0, r5
 801180a:	f008 ffa8 	bl	801a75e <memcpy>
 801180e:	68a1      	ldr	r1, [r4, #8]
 8011810:	464a      	mov	r2, r9
 8011812:	19e8      	adds	r0, r5, r7
 8011814:	f008 ffa3 	bl	801a75e <memcpy>
 8011818:	e7a9      	b.n	801176e <ucdr_deserialize_int32_t+0x72>
 801181a:	bf00      	nop

0801181c <ucdr_check_buffer_available_for>:
 801181c:	7d83      	ldrb	r3, [r0, #22]
 801181e:	b93b      	cbnz	r3, 8011830 <ucdr_check_buffer_available_for+0x14>
 8011820:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8011824:	4419      	add	r1, r3
 8011826:	4288      	cmp	r0, r1
 8011828:	bf34      	ite	cc
 801182a:	2000      	movcc	r0, #0
 801182c:	2001      	movcs	r0, #1
 801182e:	4770      	bx	lr
 8011830:	2000      	movs	r0, #0
 8011832:	4770      	bx	lr

08011834 <ucdr_check_final_buffer_behavior>:
 8011834:	7d83      	ldrb	r3, [r0, #22]
 8011836:	b943      	cbnz	r3, 801184a <ucdr_check_final_buffer_behavior+0x16>
 8011838:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801183c:	4291      	cmp	r1, r2
 801183e:	b510      	push	{r4, lr}
 8011840:	4604      	mov	r4, r0
 8011842:	d205      	bcs.n	8011850 <ucdr_check_final_buffer_behavior+0x1c>
 8011844:	2301      	movs	r3, #1
 8011846:	4618      	mov	r0, r3
 8011848:	bd10      	pop	{r4, pc}
 801184a:	2300      	movs	r3, #0
 801184c:	4618      	mov	r0, r3
 801184e:	4770      	bx	lr
 8011850:	6982      	ldr	r2, [r0, #24]
 8011852:	b13a      	cbz	r2, 8011864 <ucdr_check_final_buffer_behavior+0x30>
 8011854:	69c1      	ldr	r1, [r0, #28]
 8011856:	4790      	blx	r2
 8011858:	f080 0301 	eor.w	r3, r0, #1
 801185c:	b2db      	uxtb	r3, r3
 801185e:	75a0      	strb	r0, [r4, #22]
 8011860:	4618      	mov	r0, r3
 8011862:	bd10      	pop	{r4, pc}
 8011864:	2001      	movs	r0, #1
 8011866:	75a0      	strb	r0, [r4, #22]
 8011868:	e7fa      	b.n	8011860 <ucdr_check_final_buffer_behavior+0x2c>
 801186a:	bf00      	nop

0801186c <ucdr_set_on_full_buffer_callback>:
 801186c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011870:	4770      	bx	lr
 8011872:	bf00      	nop

08011874 <ucdr_init_buffer_origin_offset_endian>:
 8011874:	b430      	push	{r4, r5}
 8011876:	9c02      	ldr	r4, [sp, #8]
 8011878:	f89d 500c 	ldrb.w	r5, [sp, #12]
 801187c:	6001      	str	r1, [r0, #0]
 801187e:	440a      	add	r2, r1
 8011880:	60c3      	str	r3, [r0, #12]
 8011882:	4421      	add	r1, r4
 8011884:	441c      	add	r4, r3
 8011886:	2300      	movs	r3, #0
 8011888:	6104      	str	r4, [r0, #16]
 801188a:	7505      	strb	r5, [r0, #20]
 801188c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8011890:	bc30      	pop	{r4, r5}
 8011892:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8011896:	7543      	strb	r3, [r0, #21]
 8011898:	7583      	strb	r3, [r0, #22]
 801189a:	4770      	bx	lr

0801189c <ucdr_init_buffer_origin_offset>:
 801189c:	b510      	push	{r4, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	9c04      	ldr	r4, [sp, #16]
 80118a2:	9400      	str	r4, [sp, #0]
 80118a4:	2401      	movs	r4, #1
 80118a6:	9401      	str	r4, [sp, #4]
 80118a8:	f7ff ffe4 	bl	8011874 <ucdr_init_buffer_origin_offset_endian>
 80118ac:	b002      	add	sp, #8
 80118ae:	bd10      	pop	{r4, pc}

080118b0 <ucdr_init_buffer_origin>:
 80118b0:	b510      	push	{r4, lr}
 80118b2:	b082      	sub	sp, #8
 80118b4:	2400      	movs	r4, #0
 80118b6:	9400      	str	r4, [sp, #0]
 80118b8:	f7ff fff0 	bl	801189c <ucdr_init_buffer_origin_offset>
 80118bc:	b002      	add	sp, #8
 80118be:	bd10      	pop	{r4, pc}

080118c0 <ucdr_init_buffer>:
 80118c0:	2300      	movs	r3, #0
 80118c2:	f7ff bff5 	b.w	80118b0 <ucdr_init_buffer_origin>
 80118c6:	bf00      	nop

080118c8 <ucdr_alignment>:
 80118c8:	fbb0 f3f1 	udiv	r3, r0, r1
 80118cc:	fb03 0011 	mls	r0, r3, r1, r0
 80118d0:	1a08      	subs	r0, r1, r0
 80118d2:	3901      	subs	r1, #1
 80118d4:	4008      	ands	r0, r1
 80118d6:	4770      	bx	lr

080118d8 <ucdr_buffer_alignment>:
 80118d8:	7d43      	ldrb	r3, [r0, #21]
 80118da:	428b      	cmp	r3, r1
 80118dc:	d208      	bcs.n	80118f0 <ucdr_buffer_alignment+0x18>
 80118de:	6903      	ldr	r3, [r0, #16]
 80118e0:	fbb3 f0f1 	udiv	r0, r3, r1
 80118e4:	fb01 3010 	mls	r0, r1, r0, r3
 80118e8:	1a08      	subs	r0, r1, r0
 80118ea:	3901      	subs	r1, #1
 80118ec:	4008      	ands	r0, r1
 80118ee:	4770      	bx	lr
 80118f0:	2000      	movs	r0, #0
 80118f2:	4770      	bx	lr

080118f4 <ucdr_align_to>:
 80118f4:	b570      	push	{r4, r5, r6, lr}
 80118f6:	4604      	mov	r4, r0
 80118f8:	460e      	mov	r6, r1
 80118fa:	f7ff ffed 	bl	80118d8 <ucdr_buffer_alignment>
 80118fe:	68a5      	ldr	r5, [r4, #8]
 8011900:	6863      	ldr	r3, [r4, #4]
 8011902:	6922      	ldr	r2, [r4, #16]
 8011904:	7566      	strb	r6, [r4, #21]
 8011906:	4405      	add	r5, r0
 8011908:	42ab      	cmp	r3, r5
 801190a:	4410      	add	r0, r2
 801190c:	bf28      	it	cs
 801190e:	462b      	movcs	r3, r5
 8011910:	6120      	str	r0, [r4, #16]
 8011912:	60a3      	str	r3, [r4, #8]
 8011914:	bd70      	pop	{r4, r5, r6, pc}
 8011916:	bf00      	nop

08011918 <ucdr_buffer_length>:
 8011918:	6882      	ldr	r2, [r0, #8]
 801191a:	6800      	ldr	r0, [r0, #0]
 801191c:	1a10      	subs	r0, r2, r0
 801191e:	4770      	bx	lr

08011920 <ucdr_buffer_remaining>:
 8011920:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8011924:	1a10      	subs	r0, r2, r0
 8011926:	4770      	bx	lr

08011928 <ucdr_check_final_buffer_behavior_array>:
 8011928:	b538      	push	{r3, r4, r5, lr}
 801192a:	7d83      	ldrb	r3, [r0, #22]
 801192c:	b963      	cbnz	r3, 8011948 <ucdr_check_final_buffer_behavior_array+0x20>
 801192e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011932:	429a      	cmp	r2, r3
 8011934:	4604      	mov	r4, r0
 8011936:	460d      	mov	r5, r1
 8011938:	d308      	bcc.n	801194c <ucdr_check_final_buffer_behavior_array+0x24>
 801193a:	b139      	cbz	r1, 801194c <ucdr_check_final_buffer_behavior_array+0x24>
 801193c:	6983      	ldr	r3, [r0, #24]
 801193e:	b163      	cbz	r3, 801195a <ucdr_check_final_buffer_behavior_array+0x32>
 8011940:	69c1      	ldr	r1, [r0, #28]
 8011942:	4798      	blx	r3
 8011944:	75a0      	strb	r0, [r4, #22]
 8011946:	b108      	cbz	r0, 801194c <ucdr_check_final_buffer_behavior_array+0x24>
 8011948:	2000      	movs	r0, #0
 801194a:	bd38      	pop	{r3, r4, r5, pc}
 801194c:	4620      	mov	r0, r4
 801194e:	f7ff ffe7 	bl	8011920 <ucdr_buffer_remaining>
 8011952:	42a8      	cmp	r0, r5
 8011954:	bf28      	it	cs
 8011956:	4628      	movcs	r0, r5
 8011958:	bd38      	pop	{r3, r4, r5, pc}
 801195a:	2301      	movs	r3, #1
 801195c:	7583      	strb	r3, [r0, #22]
 801195e:	e7f3      	b.n	8011948 <ucdr_check_final_buffer_behavior_array+0x20>

08011960 <ucdr_advance_buffer>:
 8011960:	b538      	push	{r3, r4, r5, lr}
 8011962:	4604      	mov	r4, r0
 8011964:	460d      	mov	r5, r1
 8011966:	f7ff ff59 	bl	801181c <ucdr_check_buffer_available_for>
 801196a:	b178      	cbz	r0, 801198c <ucdr_advance_buffer+0x2c>
 801196c:	68a3      	ldr	r3, [r4, #8]
 801196e:	6921      	ldr	r1, [r4, #16]
 8011970:	442b      	add	r3, r5
 8011972:	60a3      	str	r3, [r4, #8]
 8011974:	2301      	movs	r3, #1
 8011976:	4429      	add	r1, r5
 8011978:	7563      	strb	r3, [r4, #21]
 801197a:	6121      	str	r1, [r4, #16]
 801197c:	bd38      	pop	{r3, r4, r5, pc}
 801197e:	68a2      	ldr	r2, [r4, #8]
 8011980:	6923      	ldr	r3, [r4, #16]
 8011982:	4402      	add	r2, r0
 8011984:	4403      	add	r3, r0
 8011986:	1a2d      	subs	r5, r5, r0
 8011988:	60a2      	str	r2, [r4, #8]
 801198a:	6123      	str	r3, [r4, #16]
 801198c:	2201      	movs	r2, #1
 801198e:	4629      	mov	r1, r5
 8011990:	4620      	mov	r0, r4
 8011992:	f7ff ffc9 	bl	8011928 <ucdr_check_final_buffer_behavior_array>
 8011996:	2800      	cmp	r0, #0
 8011998:	d1f1      	bne.n	801197e <ucdr_advance_buffer+0x1e>
 801199a:	2301      	movs	r3, #1
 801199c:	7563      	strb	r3, [r4, #21]
 801199e:	bd38      	pop	{r3, r4, r5, pc}

080119a0 <uxr_buffer_delete_entity>:
 80119a0:	b530      	push	{r4, r5, lr}
 80119a2:	b08f      	sub	sp, #60	; 0x3c
 80119a4:	2403      	movs	r4, #3
 80119a6:	2500      	movs	r5, #0
 80119a8:	e9cd 4500 	strd	r4, r5, [sp]
 80119ac:	9202      	str	r2, [sp, #8]
 80119ae:	ab06      	add	r3, sp, #24
 80119b0:	2204      	movs	r2, #4
 80119b2:	9103      	str	r1, [sp, #12]
 80119b4:	4604      	mov	r4, r0
 80119b6:	f001 fa85 	bl	8012ec4 <uxr_prepare_stream_to_write_submessage>
 80119ba:	b918      	cbnz	r0, 80119c4 <uxr_buffer_delete_entity+0x24>
 80119bc:	4604      	mov	r4, r0
 80119be:	4620      	mov	r0, r4
 80119c0:	b00f      	add	sp, #60	; 0x3c
 80119c2:	bd30      	pop	{r4, r5, pc}
 80119c4:	9902      	ldr	r1, [sp, #8]
 80119c6:	aa05      	add	r2, sp, #20
 80119c8:	4620      	mov	r0, r4
 80119ca:	f001 fbb5 	bl	8013138 <uxr_init_base_object_request>
 80119ce:	a905      	add	r1, sp, #20
 80119d0:	4604      	mov	r4, r0
 80119d2:	a806      	add	r0, sp, #24
 80119d4:	f002 fdf0 	bl	80145b8 <uxr_serialize_DELETE_Payload>
 80119d8:	4620      	mov	r0, r4
 80119da:	b00f      	add	sp, #60	; 0x3c
 80119dc:	bd30      	pop	{r4, r5, pc}
 80119de:	bf00      	nop

080119e0 <uxr_common_create_entity>:
 80119e0:	b530      	push	{r4, r5, lr}
 80119e2:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80119e6:	b08d      	sub	sp, #52	; 0x34
 80119e8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80119ec:	2d01      	cmp	r5, #1
 80119ee:	bf0c      	ite	eq
 80119f0:	f003 0201 	andeq.w	r2, r3, #1
 80119f4:	2200      	movne	r2, #0
 80119f6:	330e      	adds	r3, #14
 80119f8:	4604      	mov	r4, r0
 80119fa:	441a      	add	r2, r3
 80119fc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8011a00:	9001      	str	r0, [sp, #4]
 8011a02:	2101      	movs	r1, #1
 8011a04:	9100      	str	r1, [sp, #0]
 8011a06:	b292      	uxth	r2, r2
 8011a08:	9903      	ldr	r1, [sp, #12]
 8011a0a:	ab04      	add	r3, sp, #16
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f001 fa59 	bl	8012ec4 <uxr_prepare_stream_to_write_submessage>
 8011a12:	b918      	cbnz	r0, 8011a1c <uxr_common_create_entity+0x3c>
 8011a14:	4604      	mov	r4, r0
 8011a16:	4620      	mov	r0, r4
 8011a18:	b00d      	add	sp, #52	; 0x34
 8011a1a:	bd30      	pop	{r4, r5, pc}
 8011a1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a1e:	9902      	ldr	r1, [sp, #8]
 8011a20:	4620      	mov	r0, r4
 8011a22:	f001 fb89 	bl	8013138 <uxr_init_base_object_request>
 8011a26:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a28:	4604      	mov	r4, r0
 8011a2a:	a804      	add	r0, sp, #16
 8011a2c:	f002 fd18 	bl	8014460 <uxr_serialize_CREATE_Payload>
 8011a30:	4620      	mov	r0, r4
 8011a32:	b00d      	add	sp, #52	; 0x34
 8011a34:	bd30      	pop	{r4, r5, pc}
 8011a36:	bf00      	nop

08011a38 <uxr_buffer_create_participant_bin>:
 8011a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a3a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8011a3e:	ac11      	add	r4, sp, #68	; 0x44
 8011a40:	9103      	str	r1, [sp, #12]
 8011a42:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8011a44:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 8011a48:	2103      	movs	r1, #3
 8011a4a:	7221      	strb	r1, [r4, #8]
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	2100      	movs	r1, #0
 8011a50:	7123      	strb	r3, [r4, #4]
 8011a52:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 8011a56:	9202      	str	r2, [sp, #8]
 8011a58:	4605      	mov	r5, r0
 8011a5a:	f88d 1014 	strb.w	r1, [sp, #20]
 8011a5e:	b1ce      	cbz	r6, 8011a94 <uxr_buffer_create_participant_bin+0x5c>
 8011a60:	f88d 301c 	strb.w	r3, [sp, #28]
 8011a64:	9608      	str	r6, [sp, #32]
 8011a66:	a809      	add	r0, sp, #36	; 0x24
 8011a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a6c:	a915      	add	r1, sp, #84	; 0x54
 8011a6e:	f7ff ff27 	bl	80118c0 <ucdr_init_buffer>
 8011a72:	a905      	add	r1, sp, #20
 8011a74:	a809      	add	r0, sp, #36	; 0x24
 8011a76:	f002 f8bb 	bl	8013bf0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011a7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011a7c:	9401      	str	r4, [sp, #4]
 8011a7e:	b283      	uxth	r3, r0
 8011a80:	9700      	str	r7, [sp, #0]
 8011a82:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011a86:	60e0      	str	r0, [r4, #12]
 8011a88:	4628      	mov	r0, r5
 8011a8a:	f7ff ffa9 	bl	80119e0 <uxr_common_create_entity>
 8011a8e:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8011a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a94:	f88d 601c 	strb.w	r6, [sp, #28]
 8011a98:	e7e5      	b.n	8011a66 <uxr_buffer_create_participant_bin+0x2e>
 8011a9a:	bf00      	nop

08011a9c <uxr_buffer_create_topic_bin>:
 8011a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a9e:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011aa2:	ac13      	add	r4, sp, #76	; 0x4c
 8011aa4:	4605      	mov	r5, r0
 8011aa6:	9105      	str	r1, [sp, #20]
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	a997      	add	r1, sp, #604	; 0x25c
 8011aac:	2602      	movs	r6, #2
 8011aae:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011ab2:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 8011ab6:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 8011aba:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 8011abc:	f000 f994 	bl	8011de8 <uxr_object_id_to_raw>
 8011ac0:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 8011ac2:	9206      	str	r2, [sp, #24]
 8011ac4:	2303      	movs	r3, #3
 8011ac6:	2101      	movs	r1, #1
 8011ac8:	7223      	strb	r3, [r4, #8]
 8011aca:	a80b      	add	r0, sp, #44	; 0x2c
 8011acc:	2300      	movs	r3, #0
 8011ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ad2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011ad6:	a917      	add	r1, sp, #92	; 0x5c
 8011ad8:	f88d 301c 	strb.w	r3, [sp, #28]
 8011adc:	960a      	str	r6, [sp, #40]	; 0x28
 8011ade:	f7ff feef 	bl	80118c0 <ucdr_init_buffer>
 8011ae2:	a906      	add	r1, sp, #24
 8011ae4:	a80b      	add	r0, sp, #44	; 0x2c
 8011ae6:	f002 f8a5 	bl	8013c34 <uxr_serialize_OBJK_Topic_Binary>
 8011aea:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011aec:	9401      	str	r4, [sp, #4]
 8011aee:	9700      	str	r7, [sp, #0]
 8011af0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011af4:	4628      	mov	r0, r5
 8011af6:	b2b3      	uxth	r3, r6
 8011af8:	60e6      	str	r6, [r4, #12]
 8011afa:	f7ff ff71 	bl	80119e0 <uxr_common_create_entity>
 8011afe:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b04 <uxr_buffer_create_publisher_bin>:
 8011b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b06:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011b0a:	ac0e      	add	r4, sp, #56	; 0x38
 8011b0c:	4605      	mov	r5, r0
 8011b0e:	9105      	str	r1, [sp, #20]
 8011b10:	4618      	mov	r0, r3
 8011b12:	2603      	movs	r6, #3
 8011b14:	a992      	add	r1, sp, #584	; 0x248
 8011b16:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011b1a:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011b1e:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011b22:	f000 f961 	bl	8011de8 <uxr_object_id_to_raw>
 8011b26:	2300      	movs	r3, #0
 8011b28:	a806      	add	r0, sp, #24
 8011b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b2e:	a912      	add	r1, sp, #72	; 0x48
 8011b30:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011b34:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011b38:	7226      	strb	r6, [r4, #8]
 8011b3a:	f7ff fec1 	bl	80118c0 <ucdr_init_buffer>
 8011b3e:	a993      	add	r1, sp, #588	; 0x24c
 8011b40:	a806      	add	r0, sp, #24
 8011b42:	f002 f92b 	bl	8013d9c <uxr_serialize_OBJK_Publisher_Binary>
 8011b46:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011b48:	9700      	str	r7, [sp, #0]
 8011b4a:	9401      	str	r4, [sp, #4]
 8011b4c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011b50:	4628      	mov	r0, r5
 8011b52:	b2b3      	uxth	r3, r6
 8011b54:	60e6      	str	r6, [r4, #12]
 8011b56:	f7ff ff43 	bl	80119e0 <uxr_common_create_entity>
 8011b5a:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b60 <uxr_buffer_create_subscriber_bin>:
 8011b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b62:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011b66:	ac0e      	add	r4, sp, #56	; 0x38
 8011b68:	4605      	mov	r5, r0
 8011b6a:	9105      	str	r1, [sp, #20]
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	a992      	add	r1, sp, #584	; 0x248
 8011b70:	2604      	movs	r6, #4
 8011b72:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011b76:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011b7a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011b7e:	f000 f933 	bl	8011de8 <uxr_object_id_to_raw>
 8011b82:	2103      	movs	r1, #3
 8011b84:	2300      	movs	r3, #0
 8011b86:	a806      	add	r0, sp, #24
 8011b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b8c:	7221      	strb	r1, [r4, #8]
 8011b8e:	a912      	add	r1, sp, #72	; 0x48
 8011b90:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011b94:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011b98:	f7ff fe92 	bl	80118c0 <ucdr_init_buffer>
 8011b9c:	a993      	add	r1, sp, #588	; 0x24c
 8011b9e:	a806      	add	r0, sp, #24
 8011ba0:	f002 f9ac 	bl	8013efc <uxr_serialize_OBJK_Subscriber_Binary>
 8011ba4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011ba6:	9700      	str	r7, [sp, #0]
 8011ba8:	9401      	str	r4, [sp, #4]
 8011baa:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011bae:	4628      	mov	r0, r5
 8011bb0:	b2b3      	uxth	r3, r6
 8011bb2:	60e6      	str	r6, [r4, #12]
 8011bb4:	f7ff ff14 	bl	80119e0 <uxr_common_create_entity>
 8011bb8:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bbe:	bf00      	nop

08011bc0 <uxr_buffer_create_datawriter_bin>:
 8011bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011bc8:	ac1d      	add	r4, sp, #116	; 0x74
 8011bca:	2505      	movs	r5, #5
 8011bcc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011bd0:	9105      	str	r1, [sp, #20]
 8011bd2:	4606      	mov	r6, r0
 8011bd4:	a9a1      	add	r1, sp, #644	; 0x284
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	7125      	strb	r5, [r4, #4]
 8011bda:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8011bde:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8011be2:	2703      	movs	r7, #3
 8011be4:	f000 f900 	bl	8011de8 <uxr_object_id_to_raw>
 8011be8:	a90e      	add	r1, sp, #56	; 0x38
 8011bea:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8011bec:	7227      	strb	r7, [r4, #8]
 8011bee:	f000 f8fb 	bl	8011de8 <uxr_object_id_to_raw>
 8011bf2:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011bf6:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 8011bfa:	3d00      	subs	r5, #0
 8011bfc:	f04f 0300 	mov.w	r3, #0
 8011c00:	bf18      	it	ne
 8011c02:	2501      	movne	r5, #1
 8011c04:	2201      	movs	r2, #1
 8011c06:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011c0a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8011c0e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011c12:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011c16:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011c1a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011c1e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011c22:	bb89      	cbnz	r1, 8011c88 <uxr_buffer_create_datawriter_bin+0xc8>
 8011c24:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011c28:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011c2c:	f04f 0c13 	mov.w	ip, #19
 8011c30:	250b      	movs	r5, #11
 8011c32:	2221      	movs	r2, #33	; 0x21
 8011c34:	2111      	movs	r1, #17
 8011c36:	2009      	movs	r0, #9
 8011c38:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8011c3c:	b923      	cbnz	r3, 8011c48 <uxr_buffer_create_datawriter_bin+0x88>
 8011c3e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011c42:	4672      	mov	r2, lr
 8011c44:	4661      	mov	r1, ip
 8011c46:	4628      	mov	r0, r5
 8011c48:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d025      	beq.n	8011c9c <uxr_buffer_create_datawriter_bin+0xdc>
 8011c50:	2b03      	cmp	r3, #3
 8011c52:	d029      	beq.n	8011ca8 <uxr_buffer_create_datawriter_bin+0xe8>
 8011c54:	b32b      	cbz	r3, 8011ca2 <uxr_buffer_create_datawriter_bin+0xe2>
 8011c56:	a806      	add	r0, sp, #24
 8011c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c5c:	a921      	add	r1, sp, #132	; 0x84
 8011c5e:	f7ff fe2f 	bl	80118c0 <ucdr_init_buffer>
 8011c62:	a90e      	add	r1, sp, #56	; 0x38
 8011c64:	a806      	add	r0, sp, #24
 8011c66:	f002 f9fb 	bl	8014060 <uxr_serialize_OBJK_DataWriter_Binary>
 8011c6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011c6c:	9401      	str	r4, [sp, #4]
 8011c6e:	b283      	uxth	r3, r0
 8011c70:	f8cd 8000 	str.w	r8, [sp]
 8011c74:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011c78:	60e0      	str	r0, [r4, #12]
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	f7ff feb0 	bl	80119e0 <uxr_common_create_entity>
 8011c80:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c88:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011c8c:	f04f 0c12 	mov.w	ip, #18
 8011c90:	250a      	movs	r5, #10
 8011c92:	2220      	movs	r2, #32
 8011c94:	2110      	movs	r1, #16
 8011c96:	2008      	movs	r0, #8
 8011c98:	2702      	movs	r7, #2
 8011c9a:	e7cd      	b.n	8011c38 <uxr_buffer_create_datawriter_bin+0x78>
 8011c9c:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011ca0:	e7d9      	b.n	8011c56 <uxr_buffer_create_datawriter_bin+0x96>
 8011ca2:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011ca6:	e7d6      	b.n	8011c56 <uxr_buffer_create_datawriter_bin+0x96>
 8011ca8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011cac:	e7d3      	b.n	8011c56 <uxr_buffer_create_datawriter_bin+0x96>
 8011cae:	bf00      	nop

08011cb0 <uxr_buffer_create_datareader_bin>:
 8011cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb4:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8011cb8:	ac1f      	add	r4, sp, #124	; 0x7c
 8011cba:	2506      	movs	r5, #6
 8011cbc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011cc0:	9105      	str	r1, [sp, #20]
 8011cc2:	4606      	mov	r6, r0
 8011cc4:	a9a3      	add	r1, sp, #652	; 0x28c
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	7125      	strb	r5, [r4, #4]
 8011cca:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8011cce:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8011cd2:	2703      	movs	r7, #3
 8011cd4:	f000 f888 	bl	8011de8 <uxr_object_id_to_raw>
 8011cd8:	a90e      	add	r1, sp, #56	; 0x38
 8011cda:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8011cdc:	7227      	strb	r7, [r4, #8]
 8011cde:	f000 f883 	bl	8011de8 <uxr_object_id_to_raw>
 8011ce2:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011ce6:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 8011cea:	3d00      	subs	r5, #0
 8011cec:	f04f 0300 	mov.w	r3, #0
 8011cf0:	bf18      	it	ne
 8011cf2:	2501      	movne	r5, #1
 8011cf4:	2201      	movs	r2, #1
 8011cf6:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011cfa:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8011cfe:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8011d02:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011d06:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011d0a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011d0e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011d12:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011d16:	bb89      	cbnz	r1, 8011d7c <uxr_buffer_create_datareader_bin+0xcc>
 8011d18:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011d1c:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011d20:	f04f 0c13 	mov.w	ip, #19
 8011d24:	250b      	movs	r5, #11
 8011d26:	2221      	movs	r2, #33	; 0x21
 8011d28:	2111      	movs	r1, #17
 8011d2a:	2009      	movs	r0, #9
 8011d2c:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8011d30:	b923      	cbnz	r3, 8011d3c <uxr_buffer_create_datareader_bin+0x8c>
 8011d32:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011d36:	4672      	mov	r2, lr
 8011d38:	4661      	mov	r1, ip
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8011d40:	2b01      	cmp	r3, #1
 8011d42:	d025      	beq.n	8011d90 <uxr_buffer_create_datareader_bin+0xe0>
 8011d44:	2b03      	cmp	r3, #3
 8011d46:	d029      	beq.n	8011d9c <uxr_buffer_create_datareader_bin+0xec>
 8011d48:	b32b      	cbz	r3, 8011d96 <uxr_buffer_create_datareader_bin+0xe6>
 8011d4a:	a806      	add	r0, sp, #24
 8011d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d50:	a923      	add	r1, sp, #140	; 0x8c
 8011d52:	f7ff fdb5 	bl	80118c0 <ucdr_init_buffer>
 8011d56:	a90e      	add	r1, sp, #56	; 0x38
 8011d58:	a806      	add	r0, sp, #24
 8011d5a:	f002 f945 	bl	8013fe8 <uxr_serialize_OBJK_DataReader_Binary>
 8011d5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011d60:	9401      	str	r4, [sp, #4]
 8011d62:	b283      	uxth	r3, r0
 8011d64:	f8cd 8000 	str.w	r8, [sp]
 8011d68:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011d6c:	60e0      	str	r0, [r4, #12]
 8011d6e:	4630      	mov	r0, r6
 8011d70:	f7ff fe36 	bl	80119e0 <uxr_common_create_entity>
 8011d74:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d7c:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011d80:	f04f 0c12 	mov.w	ip, #18
 8011d84:	250a      	movs	r5, #10
 8011d86:	2220      	movs	r2, #32
 8011d88:	2110      	movs	r1, #16
 8011d8a:	2008      	movs	r0, #8
 8011d8c:	2702      	movs	r7, #2
 8011d8e:	e7cd      	b.n	8011d2c <uxr_buffer_create_datareader_bin+0x7c>
 8011d90:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011d94:	e7d9      	b.n	8011d4a <uxr_buffer_create_datareader_bin+0x9a>
 8011d96:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011d9a:	e7d6      	b.n	8011d4a <uxr_buffer_create_datareader_bin+0x9a>
 8011d9c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011da0:	e7d3      	b.n	8011d4a <uxr_buffer_create_datareader_bin+0x9a>
 8011da2:	bf00      	nop

08011da4 <uxr_object_id>:
 8011da4:	b082      	sub	sp, #8
 8011da6:	2300      	movs	r3, #0
 8011da8:	f88d 1006 	strb.w	r1, [sp, #6]
 8011dac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011db0:	f360 030f 	bfi	r3, r0, #0, #16
 8011db4:	f362 431f 	bfi	r3, r2, #16, #16
 8011db8:	4618      	mov	r0, r3
 8011dba:	b002      	add	sp, #8
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop

08011dc0 <uxr_object_id_from_raw>:
 8011dc0:	7843      	ldrb	r3, [r0, #1]
 8011dc2:	7801      	ldrb	r1, [r0, #0]
 8011dc4:	b082      	sub	sp, #8
 8011dc6:	f003 000f 	and.w	r0, r3, #15
 8011dca:	f88d 0006 	strb.w	r0, [sp, #6]
 8011dce:	091b      	lsrs	r3, r3, #4
 8011dd0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8011dda:	f363 020f 	bfi	r2, r3, #0, #16
 8011dde:	f361 421f 	bfi	r2, r1, #16, #16
 8011de2:	4610      	mov	r0, r2
 8011de4:	b002      	add	sp, #8
 8011de6:	4770      	bx	lr

08011de8 <uxr_object_id_to_raw>:
 8011de8:	4602      	mov	r2, r0
 8011dea:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011dee:	b082      	sub	sp, #8
 8011df0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8011df4:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8011df8:	700a      	strb	r2, [r1, #0]
 8011dfa:	704b      	strb	r3, [r1, #1]
 8011dfc:	b002      	add	sp, #8
 8011dfe:	4770      	bx	lr

08011e00 <uxr_buffer_request_data>:
 8011e00:	b530      	push	{r4, r5, lr}
 8011e02:	b095      	sub	sp, #84	; 0x54
 8011e04:	4604      	mov	r4, r0
 8011e06:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8011e08:	9105      	str	r1, [sp, #20]
 8011e0a:	2d00      	cmp	r5, #0
 8011e0c:	bf14      	ite	ne
 8011e0e:	2101      	movne	r1, #1
 8011e10:	2100      	moveq	r1, #0
 8011e12:	9204      	str	r2, [sp, #16]
 8011e14:	f04f 0200 	mov.w	r2, #0
 8011e18:	9303      	str	r3, [sp, #12]
 8011e1a:	f88d 301c 	strb.w	r3, [sp, #28]
 8011e1e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011e22:	f88d 201d 	strb.w	r2, [sp, #29]
 8011e26:	f88d 201e 	strb.w	r2, [sp, #30]
 8011e2a:	d021      	beq.n	8011e70 <uxr_buffer_request_data+0x70>
 8011e2c:	686a      	ldr	r2, [r5, #4]
 8011e2e:	682b      	ldr	r3, [r5, #0]
 8011e30:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 8011e34:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8011e38:	2210      	movs	r2, #16
 8011e3a:	2000      	movs	r0, #0
 8011e3c:	2108      	movs	r1, #8
 8011e3e:	e9cd 1000 	strd	r1, r0, [sp]
 8011e42:	ab0c      	add	r3, sp, #48	; 0x30
 8011e44:	9905      	ldr	r1, [sp, #20]
 8011e46:	4620      	mov	r0, r4
 8011e48:	f001 f83c 	bl	8012ec4 <uxr_prepare_stream_to_write_submessage>
 8011e4c:	b918      	cbnz	r0, 8011e56 <uxr_buffer_request_data+0x56>
 8011e4e:	4604      	mov	r4, r0
 8011e50:	4620      	mov	r0, r4
 8011e52:	b015      	add	sp, #84	; 0x54
 8011e54:	bd30      	pop	{r4, r5, pc}
 8011e56:	9904      	ldr	r1, [sp, #16]
 8011e58:	aa06      	add	r2, sp, #24
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	f001 f96c 	bl	8013138 <uxr_init_base_object_request>
 8011e60:	a906      	add	r1, sp, #24
 8011e62:	4604      	mov	r4, r0
 8011e64:	a80c      	add	r0, sp, #48	; 0x30
 8011e66:	f002 fc51 	bl	801470c <uxr_serialize_READ_DATA_Payload>
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	b015      	add	sp, #84	; 0x54
 8011e6e:	bd30      	pop	{r4, r5, pc}
 8011e70:	2208      	movs	r2, #8
 8011e72:	e7e2      	b.n	8011e3a <uxr_buffer_request_data+0x3a>

08011e74 <uxr_buffer_cancel_data>:
 8011e74:	b530      	push	{r4, r5, lr}
 8011e76:	b095      	sub	sp, #84	; 0x54
 8011e78:	2400      	movs	r4, #0
 8011e7a:	2308      	movs	r3, #8
 8011e7c:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8011e80:	9300      	str	r3, [sp, #0]
 8011e82:	9205      	str	r2, [sp, #20]
 8011e84:	2501      	movs	r5, #1
 8011e86:	ab0c      	add	r3, sp, #48	; 0x30
 8011e88:	2210      	movs	r2, #16
 8011e8a:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011e8e:	f88d 401e 	strb.w	r4, [sp, #30]
 8011e92:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 8011e96:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 8011e9a:	9103      	str	r1, [sp, #12]
 8011e9c:	4604      	mov	r4, r0
 8011e9e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8011ea2:	f001 f80f 	bl	8012ec4 <uxr_prepare_stream_to_write_submessage>
 8011ea6:	b918      	cbnz	r0, 8011eb0 <uxr_buffer_cancel_data+0x3c>
 8011ea8:	4604      	mov	r4, r0
 8011eaa:	4620      	mov	r0, r4
 8011eac:	b015      	add	sp, #84	; 0x54
 8011eae:	bd30      	pop	{r4, r5, pc}
 8011eb0:	9905      	ldr	r1, [sp, #20]
 8011eb2:	aa06      	add	r2, sp, #24
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	f001 f93f 	bl	8013138 <uxr_init_base_object_request>
 8011eba:	a906      	add	r1, sp, #24
 8011ebc:	4604      	mov	r4, r0
 8011ebe:	a80c      	add	r0, sp, #48	; 0x30
 8011ec0:	f002 fc24 	bl	801470c <uxr_serialize_READ_DATA_Payload>
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	b015      	add	sp, #84	; 0x54
 8011ec8:	bd30      	pop	{r4, r5, pc}
 8011eca:	bf00      	nop

08011ecc <read_submessage_format>:
 8011ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ed0:	b095      	sub	sp, #84	; 0x54
 8011ed2:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8011ed6:	b113      	cbz	r3, 8011ede <read_submessage_format+0x12>
 8011ed8:	b015      	add	sp, #84	; 0x54
 8011eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ede:	460c      	mov	r4, r1
 8011ee0:	4616      	mov	r6, r2
 8011ee2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011ee6:	461d      	mov	r5, r3
 8011ee8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011eea:	9304      	str	r3, [sp, #16]
 8011eec:	1a52      	subs	r2, r2, r1
 8011eee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011ef0:	9305      	str	r3, [sp, #20]
 8011ef2:	4607      	mov	r7, r0
 8011ef4:	a80c      	add	r0, sp, #48	; 0x30
 8011ef6:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8011efa:	f7ff fce1 	bl	80118c0 <ucdr_init_buffer>
 8011efe:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011f02:	a80c      	add	r0, sp, #48	; 0x30
 8011f04:	f7ff fcb2 	bl	801186c <ucdr_set_on_full_buffer_callback>
 8011f08:	69e3      	ldr	r3, [r4, #28]
 8011f0a:	b193      	cbz	r3, 8011f32 <read_submessage_format+0x66>
 8011f0c:	f1b8 0f07 	cmp.w	r8, #7
 8011f10:	751d      	strb	r5, [r3, #20]
 8011f12:	d03e      	beq.n	8011f92 <read_submessage_format+0xc6>
 8011f14:	f1b8 0f08 	cmp.w	r8, #8
 8011f18:	d02c      	beq.n	8011f74 <read_submessage_format+0xa8>
 8011f1a:	f1b8 0f06 	cmp.w	r8, #6
 8011f1e:	d011      	beq.n	8011f44 <read_submessage_format+0x78>
 8011f20:	2201      	movs	r2, #1
 8011f22:	751a      	strb	r2, [r3, #20]
 8011f24:	4631      	mov	r1, r6
 8011f26:	4620      	mov	r0, r4
 8011f28:	f7ff fd1a 	bl	8011960 <ucdr_advance_buffer>
 8011f2c:	b015      	add	sp, #84	; 0x54
 8011f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f32:	f1b8 0f07 	cmp.w	r8, #7
 8011f36:	d02c      	beq.n	8011f92 <read_submessage_format+0xc6>
 8011f38:	f1b8 0f08 	cmp.w	r8, #8
 8011f3c:	d01a      	beq.n	8011f74 <read_submessage_format+0xa8>
 8011f3e:	f1b8 0f06 	cmp.w	r8, #6
 8011f42:	d1ef      	bne.n	8011f24 <read_submessage_format+0x58>
 8011f44:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8011f48:	b18d      	cbz	r5, 8011f6e <read_submessage_format+0xa2>
 8011f4a:	2306      	movs	r3, #6
 8011f4c:	f88d 3016 	strb.w	r3, [sp, #22]
 8011f50:	aa0c      	add	r2, sp, #48	; 0x30
 8011f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011f56:	9302      	str	r3, [sp, #8]
 8011f58:	9200      	str	r2, [sp, #0]
 8011f5a:	9b04      	ldr	r3, [sp, #16]
 8011f5c:	9905      	ldr	r1, [sp, #20]
 8011f5e:	9601      	str	r6, [sp, #4]
 8011f60:	464a      	mov	r2, r9
 8011f62:	4638      	mov	r0, r7
 8011f64:	47a8      	blx	r5
 8011f66:	2301      	movs	r3, #1
 8011f68:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8011f6c:	69e3      	ldr	r3, [r4, #28]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d1d6      	bne.n	8011f20 <read_submessage_format+0x54>
 8011f72:	e7d7      	b.n	8011f24 <read_submessage_format+0x58>
 8011f74:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011f78:	2a00      	cmp	r2, #0
 8011f7a:	d0f8      	beq.n	8011f6e <read_submessage_format+0xa2>
 8011f7c:	a906      	add	r1, sp, #24
 8011f7e:	a80c      	add	r0, sp, #48	; 0x30
 8011f80:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011f82:	f002 fc89 	bl	8014898 <uxr_deserialize_SampleIdentity>
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d13c      	bne.n	8012004 <read_submessage_format+0x138>
 8011f8a:	69e3      	ldr	r3, [r4, #28]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d1c7      	bne.n	8011f20 <read_submessage_format+0x54>
 8011f90:	e7c8      	b.n	8011f24 <read_submessage_format+0x58>
 8011f92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8011f96:	b132      	cbz	r2, 8011fa6 <read_submessage_format+0xda>
 8011f98:	a906      	add	r1, sp, #24
 8011f9a:	a80c      	add	r0, sp, #48	; 0x30
 8011f9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011f9e:	f002 f939 	bl	8014214 <uxr_deserialize_BaseObjectRequest>
 8011fa2:	b930      	cbnz	r0, 8011fb2 <read_submessage_format+0xe6>
 8011fa4:	69e3      	ldr	r3, [r4, #28]
 8011fa6:	68a2      	ldr	r2, [r4, #8]
 8011fa8:	4432      	add	r2, r6
 8011faa:	60a2      	str	r2, [r4, #8]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d1b7      	bne.n	8011f20 <read_submessage_format+0x54>
 8011fb0:	e7b8      	b.n	8011f24 <read_submessage_format+0x58>
 8011fb2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8011fb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011fb8:	1a52      	subs	r2, r2, r1
 8011fba:	a80c      	add	r0, sp, #48	; 0x30
 8011fbc:	1aed      	subs	r5, r5, r3
 8011fbe:	f7ff fc7f 	bl	80118c0 <ucdr_init_buffer>
 8011fc2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011fc6:	a80c      	add	r0, sp, #48	; 0x30
 8011fc8:	f7ff fc50 	bl	801186c <ucdr_set_on_full_buffer_callback>
 8011fcc:	4435      	add	r5, r6
 8011fce:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011fd2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011fd6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8011fda:	9002      	str	r0, [sp, #8]
 8011fdc:	2207      	movs	r2, #7
 8011fde:	f88d 2016 	strb.w	r2, [sp, #22]
 8011fe2:	b2ad      	uxth	r5, r5
 8011fe4:	aa0c      	add	r2, sp, #48	; 0x30
 8011fe6:	9200      	str	r2, [sp, #0]
 8011fe8:	9501      	str	r5, [sp, #4]
 8011fea:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	9905      	ldr	r1, [sp, #20]
 8011ff2:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 8011ff6:	464a      	mov	r2, r9
 8011ff8:	4638      	mov	r0, r7
 8011ffa:	47a8      	blx	r5
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8012002:	e7cf      	b.n	8011fa4 <read_submessage_format+0xd8>
 8012004:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8012008:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801200a:	1a52      	subs	r2, r2, r1
 801200c:	a80c      	add	r0, sp, #48	; 0x30
 801200e:	1aed      	subs	r5, r5, r3
 8012010:	f7ff fc56 	bl	80118c0 <ucdr_init_buffer>
 8012014:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012018:	a80c      	add	r0, sp, #48	; 0x30
 801201a:	f7ff fc27 	bl	801186c <ucdr_set_on_full_buffer_callback>
 801201e:	4435      	add	r5, r6
 8012020:	2308      	movs	r3, #8
 8012022:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8012026:	f88d 3016 	strb.w	r3, [sp, #22]
 801202a:	b2ad      	uxth	r5, r5
 801202c:	ab0c      	add	r3, sp, #48	; 0x30
 801202e:	9300      	str	r3, [sp, #0]
 8012030:	9002      	str	r0, [sp, #8]
 8012032:	9501      	str	r5, [sp, #4]
 8012034:	ab06      	add	r3, sp, #24
 8012036:	9905      	ldr	r1, [sp, #20]
 8012038:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 801203c:	464a      	mov	r2, r9
 801203e:	4638      	mov	r0, r7
 8012040:	47a8      	blx	r5
 8012042:	2301      	movs	r3, #1
 8012044:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8012048:	e79f      	b.n	8011f8a <read_submessage_format+0xbe>
 801204a:	bf00      	nop

0801204c <on_get_fragmentation_info>:
 801204c:	b500      	push	{lr}
 801204e:	b08b      	sub	sp, #44	; 0x2c
 8012050:	4601      	mov	r1, r0
 8012052:	2204      	movs	r2, #4
 8012054:	a802      	add	r0, sp, #8
 8012056:	f7ff fc33 	bl	80118c0 <ucdr_init_buffer>
 801205a:	f10d 0305 	add.w	r3, sp, #5
 801205e:	a802      	add	r0, sp, #8
 8012060:	f10d 0206 	add.w	r2, sp, #6
 8012064:	a901      	add	r1, sp, #4
 8012066:	f001 f9eb 	bl	8013440 <uxr_read_submessage_header>
 801206a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801206e:	2b0d      	cmp	r3, #13
 8012070:	d003      	beq.n	801207a <on_get_fragmentation_info+0x2e>
 8012072:	2000      	movs	r0, #0
 8012074:	b00b      	add	sp, #44	; 0x2c
 8012076:	f85d fb04 	ldr.w	pc, [sp], #4
 801207a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801207e:	f013 0f02 	tst.w	r3, #2
 8012082:	bf14      	ite	ne
 8012084:	2002      	movne	r0, #2
 8012086:	2001      	moveq	r0, #1
 8012088:	b00b      	add	sp, #44	; 0x2c
 801208a:	f85d fb04 	ldr.w	pc, [sp], #4
 801208e:	bf00      	nop

08012090 <read_submessage_get_info>:
 8012090:	b570      	push	{r4, r5, r6, lr}
 8012092:	2500      	movs	r5, #0
 8012094:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8012098:	4604      	mov	r4, r0
 801209a:	f44f 7224 	mov.w	r2, #656	; 0x290
 801209e:	460e      	mov	r6, r1
 80120a0:	a810      	add	r0, sp, #64	; 0x40
 80120a2:	4629      	mov	r1, r5
 80120a4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80120a8:	f008 fa3a 	bl	801a520 <memset>
 80120ac:	a903      	add	r1, sp, #12
 80120ae:	4630      	mov	r0, r6
 80120b0:	f002 fa6e 	bl	8014590 <uxr_deserialize_GET_INFO_Payload>
 80120b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80120b8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80120bc:	4620      	mov	r0, r4
 80120be:	f001 f833 	bl	8013128 <uxr_session_header_offset>
 80120c2:	462b      	mov	r3, r5
 80120c4:	9000      	str	r0, [sp, #0]
 80120c6:	a905      	add	r1, sp, #20
 80120c8:	a808      	add	r0, sp, #32
 80120ca:	220c      	movs	r2, #12
 80120cc:	f7ff fbe6 	bl	801189c <ucdr_init_buffer_origin_offset>
 80120d0:	a910      	add	r1, sp, #64	; 0x40
 80120d2:	a808      	add	r0, sp, #32
 80120d4:	f002 face 	bl	8014674 <uxr_serialize_INFO_Payload>
 80120d8:	9b08      	ldr	r3, [sp, #32]
 80120da:	462a      	mov	r2, r5
 80120dc:	4629      	mov	r1, r5
 80120de:	4620      	mov	r0, r4
 80120e0:	f000 ffca 	bl	8013078 <uxr_stamp_session_header>
 80120e4:	a808      	add	r0, sp, #32
 80120e6:	f7ff fc17 	bl	8011918 <ucdr_buffer_length>
 80120ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80120ec:	4602      	mov	r2, r0
 80120ee:	a905      	add	r1, sp, #20
 80120f0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80120f4:	47a0      	blx	r4
 80120f6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80120fa:	bd70      	pop	{r4, r5, r6, pc}

080120fc <write_submessage_acknack.isra.0>:
 80120fc:	b570      	push	{r4, r5, r6, lr}
 80120fe:	b092      	sub	sp, #72	; 0x48
 8012100:	4605      	mov	r5, r0
 8012102:	460e      	mov	r6, r1
 8012104:	4614      	mov	r4, r2
 8012106:	f001 f80f 	bl	8013128 <uxr_session_header_offset>
 801210a:	a905      	add	r1, sp, #20
 801210c:	9000      	str	r0, [sp, #0]
 801210e:	2300      	movs	r3, #0
 8012110:	a80a      	add	r0, sp, #40	; 0x28
 8012112:	2211      	movs	r2, #17
 8012114:	f7ff fbc2 	bl	801189c <ucdr_init_buffer_origin_offset>
 8012118:	2218      	movs	r2, #24
 801211a:	fb02 5404 	mla	r4, r2, r4, r5
 801211e:	2300      	movs	r3, #0
 8012120:	2205      	movs	r2, #5
 8012122:	3450      	adds	r4, #80	; 0x50
 8012124:	a80a      	add	r0, sp, #40	; 0x28
 8012126:	210a      	movs	r1, #10
 8012128:	f001 f970 	bl	801340c <uxr_buffer_submessage_header>
 801212c:	a903      	add	r1, sp, #12
 801212e:	4620      	mov	r0, r4
 8012130:	f006 fabc 	bl	80186ac <uxr_compute_acknack>
 8012134:	a903      	add	r1, sp, #12
 8012136:	ba43      	rev16	r3, r0
 8012138:	a80a      	add	r0, sp, #40	; 0x28
 801213a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801213e:	f88d 6010 	strb.w	r6, [sp, #16]
 8012142:	f002 fb07 	bl	8014754 <uxr_serialize_ACKNACK_Payload>
 8012146:	2200      	movs	r2, #0
 8012148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801214a:	4611      	mov	r1, r2
 801214c:	4628      	mov	r0, r5
 801214e:	f000 ff93 	bl	8013078 <uxr_stamp_session_header>
 8012152:	a80a      	add	r0, sp, #40	; 0x28
 8012154:	f7ff fbe0 	bl	8011918 <ucdr_buffer_length>
 8012158:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801215a:	4602      	mov	r2, r0
 801215c:	a905      	add	r1, sp, #20
 801215e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012162:	47a0      	blx	r4
 8012164:	b012      	add	sp, #72	; 0x48
 8012166:	bd70      	pop	{r4, r5, r6, pc}

08012168 <uxr_init_session>:
 8012168:	b5d0      	push	{r4, r6, r7, lr}
 801216a:	2300      	movs	r3, #0
 801216c:	2600      	movs	r6, #0
 801216e:	2700      	movs	r7, #0
 8012170:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 8012174:	4604      	mov	r4, r0
 8012176:	6701      	str	r1, [r0, #112]	; 0x70
 8012178:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 801217c:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8012180:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 8012184:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8012188:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 801218c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8012190:	2181      	movs	r1, #129	; 0x81
 8012192:	f000 fedb 	bl	8012f4c <uxr_init_session_info>
 8012196:	f104 0008 	add.w	r0, r4, #8
 801219a:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 801219e:	f001 b851 	b.w	8013244 <uxr_init_stream_storage>
 80121a2:	bf00      	nop

080121a4 <uxr_set_status_callback>:
 80121a4:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80121a8:	4770      	bx	lr
 80121aa:	bf00      	nop

080121ac <uxr_set_topic_callback>:
 80121ac:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80121b0:	4770      	bx	lr
 80121b2:	bf00      	nop

080121b4 <uxr_set_request_callback>:
 80121b4:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80121b8:	4770      	bx	lr
 80121ba:	bf00      	nop

080121bc <uxr_set_reply_callback>:
 80121bc:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80121c0:	4770      	bx	lr
 80121c2:	bf00      	nop

080121c4 <uxr_create_output_best_effort_stream>:
 80121c4:	b510      	push	{r4, lr}
 80121c6:	b084      	sub	sp, #16
 80121c8:	e9cd 2100 	strd	r2, r1, [sp]
 80121cc:	4604      	mov	r4, r0
 80121ce:	f000 ffab 	bl	8013128 <uxr_session_header_offset>
 80121d2:	e9dd 2100 	ldrd	r2, r1, [sp]
 80121d6:	4603      	mov	r3, r0
 80121d8:	f104 0008 	add.w	r0, r4, #8
 80121dc:	b004      	add	sp, #16
 80121de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121e2:	f001 b879 	b.w	80132d8 <uxr_add_output_best_effort_buffer>
 80121e6:	bf00      	nop

080121e8 <uxr_create_output_reliable_stream>:
 80121e8:	b530      	push	{r4, r5, lr}
 80121ea:	b089      	sub	sp, #36	; 0x24
 80121ec:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80121f0:	9303      	str	r3, [sp, #12]
 80121f2:	4604      	mov	r4, r0
 80121f4:	f000 ff98 	bl	8013128 <uxr_session_header_offset>
 80121f8:	4605      	mov	r5, r0
 80121fa:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80121fe:	9905      	ldr	r1, [sp, #20]
 8012200:	9500      	str	r5, [sp, #0]
 8012202:	f104 0008 	add.w	r0, r4, #8
 8012206:	f001 f879 	bl	80132fc <uxr_add_output_reliable_buffer>
 801220a:	2200      	movs	r2, #0
 801220c:	b2c3      	uxtb	r3, r0
 801220e:	f363 0207 	bfi	r2, r3, #0, #8
 8012212:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012216:	f363 220f 	bfi	r2, r3, #8, #8
 801221a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801221e:	f363 4217 	bfi	r2, r3, #16, #8
 8012222:	0e03      	lsrs	r3, r0, #24
 8012224:	f363 621f 	bfi	r2, r3, #24, #8
 8012228:	4610      	mov	r0, r2
 801222a:	b009      	add	sp, #36	; 0x24
 801222c:	bd30      	pop	{r4, r5, pc}
 801222e:	bf00      	nop

08012230 <uxr_create_input_best_effort_stream>:
 8012230:	b082      	sub	sp, #8
 8012232:	3008      	adds	r0, #8
 8012234:	b002      	add	sp, #8
 8012236:	f001 b87b 	b.w	8013330 <uxr_add_input_best_effort_buffer>
 801223a:	bf00      	nop

0801223c <uxr_create_input_reliable_stream>:
 801223c:	b510      	push	{r4, lr}
 801223e:	b084      	sub	sp, #16
 8012240:	4c0b      	ldr	r4, [pc, #44]	; (8012270 <uxr_create_input_reliable_stream+0x34>)
 8012242:	9400      	str	r4, [sp, #0]
 8012244:	3008      	adds	r0, #8
 8012246:	f001 f889 	bl	801335c <uxr_add_input_reliable_buffer>
 801224a:	2200      	movs	r2, #0
 801224c:	b2c3      	uxtb	r3, r0
 801224e:	f363 0207 	bfi	r2, r3, #0, #8
 8012252:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012256:	f363 220f 	bfi	r2, r3, #8, #8
 801225a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801225e:	f363 4217 	bfi	r2, r3, #16, #8
 8012262:	0e03      	lsrs	r3, r0, #24
 8012264:	f363 621f 	bfi	r2, r3, #24, #8
 8012268:	4610      	mov	r0, r2
 801226a:	b004      	add	sp, #16
 801226c:	bd10      	pop	{r4, pc}
 801226e:	bf00      	nop
 8012270:	0801204d 	.word	0x0801204d

08012274 <uxr_epoch_nanos>:
 8012274:	b510      	push	{r4, lr}
 8012276:	4604      	mov	r4, r0
 8012278:	f001 f92a 	bl	80134d0 <uxr_nanos>
 801227c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8012280:	1ac0      	subs	r0, r0, r3
 8012282:	eb61 0102 	sbc.w	r1, r1, r2
 8012286:	bd10      	pop	{r4, pc}

08012288 <uxr_flash_output_streams>:
 8012288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801228c:	7e03      	ldrb	r3, [r0, #24]
 801228e:	b084      	sub	sp, #16
 8012290:	4604      	mov	r4, r0
 8012292:	b1fb      	cbz	r3, 80122d4 <uxr_flash_output_streams+0x4c>
 8012294:	f04f 0900 	mov.w	r9, #0
 8012298:	4648      	mov	r0, r9
 801229a:	f10d 0802 	add.w	r8, sp, #2
 801229e:	af03      	add	r7, sp, #12
 80122a0:	ae02      	add	r6, sp, #8
 80122a2:	2201      	movs	r2, #1
 80122a4:	4611      	mov	r1, r2
 80122a6:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80122aa:	f000 ff75 	bl	8013198 <uxr_stream_id>
 80122ae:	3508      	adds	r5, #8
 80122b0:	4684      	mov	ip, r0
 80122b2:	4643      	mov	r3, r8
 80122b4:	4628      	mov	r0, r5
 80122b6:	463a      	mov	r2, r7
 80122b8:	4631      	mov	r1, r6
 80122ba:	f8cd c004 	str.w	ip, [sp, #4]
 80122be:	f006 fa7d 	bl	80187bc <uxr_prepare_best_effort_buffer_to_send>
 80122c2:	2800      	cmp	r0, #0
 80122c4:	d13d      	bne.n	8012342 <uxr_flash_output_streams+0xba>
 80122c6:	7e23      	ldrb	r3, [r4, #24]
 80122c8:	f109 0901 	add.w	r9, r9, #1
 80122cc:	fa5f f089 	uxtb.w	r0, r9
 80122d0:	4283      	cmp	r3, r0
 80122d2:	d8e6      	bhi.n	80122a2 <uxr_flash_output_streams+0x1a>
 80122d4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80122d8:	b383      	cbz	r3, 801233c <uxr_flash_output_streams+0xb4>
 80122da:	f04f 0900 	mov.w	r9, #0
 80122de:	4648      	mov	r0, r9
 80122e0:	f10d 0802 	add.w	r8, sp, #2
 80122e4:	af03      	add	r7, sp, #12
 80122e6:	ae02      	add	r6, sp, #8
 80122e8:	2201      	movs	r2, #1
 80122ea:	2102      	movs	r1, #2
 80122ec:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80122f0:	f000 ff52 	bl	8013198 <uxr_stream_id>
 80122f4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80122f8:	3520      	adds	r5, #32
 80122fa:	9001      	str	r0, [sp, #4]
 80122fc:	e00c      	b.n	8012318 <uxr_flash_output_streams+0x90>
 80122fe:	9b02      	ldr	r3, [sp, #8]
 8012300:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012304:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012308:	f000 feb6 	bl	8013078 <uxr_stamp_session_header>
 801230c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801230e:	9a03      	ldr	r2, [sp, #12]
 8012310:	9902      	ldr	r1, [sp, #8]
 8012312:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8012316:	47d0      	blx	sl
 8012318:	4643      	mov	r3, r8
 801231a:	463a      	mov	r2, r7
 801231c:	4631      	mov	r1, r6
 801231e:	4628      	mov	r0, r5
 8012320:	f006 fc54 	bl	8018bcc <uxr_prepare_next_reliable_buffer_to_send>
 8012324:	4603      	mov	r3, r0
 8012326:	4620      	mov	r0, r4
 8012328:	2b00      	cmp	r3, #0
 801232a:	d1e8      	bne.n	80122fe <uxr_flash_output_streams+0x76>
 801232c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012330:	f109 0901 	add.w	r9, r9, #1
 8012334:	fa5f f089 	uxtb.w	r0, r9
 8012338:	4283      	cmp	r3, r0
 801233a:	d8d5      	bhi.n	80122e8 <uxr_flash_output_streams+0x60>
 801233c:	b004      	add	sp, #16
 801233e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012342:	9b02      	ldr	r3, [sp, #8]
 8012344:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012348:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801234c:	4620      	mov	r0, r4
 801234e:	f000 fe93 	bl	8013078 <uxr_stamp_session_header>
 8012352:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012354:	9a03      	ldr	r2, [sp, #12]
 8012356:	9902      	ldr	r1, [sp, #8]
 8012358:	e9d3 0500 	ldrd	r0, r5, [r3]
 801235c:	47a8      	blx	r5
 801235e:	f109 0901 	add.w	r9, r9, #1
 8012362:	7e23      	ldrb	r3, [r4, #24]
 8012364:	fa5f f089 	uxtb.w	r0, r9
 8012368:	4283      	cmp	r3, r0
 801236a:	d89a      	bhi.n	80122a2 <uxr_flash_output_streams+0x1a>
 801236c:	e7b2      	b.n	80122d4 <uxr_flash_output_streams+0x4c>
 801236e:	bf00      	nop

08012370 <read_submessage_info>:
 8012370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012374:	460d      	mov	r5, r1
 8012376:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801237a:	4669      	mov	r1, sp
 801237c:	4607      	mov	r7, r0
 801237e:	4628      	mov	r0, r5
 8012380:	f002 f80c 	bl	801439c <uxr_deserialize_BaseObjectReply>
 8012384:	a902      	add	r1, sp, #8
 8012386:	4604      	mov	r4, r0
 8012388:	4628      	mov	r0, r5
 801238a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801238e:	f7fe fad3 	bl	8010938 <ucdr_deserialize_bool>
 8012392:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012396:	4004      	ands	r4, r0
 8012398:	b2e4      	uxtb	r4, r4
 801239a:	b95b      	cbnz	r3, 80123b4 <read_submessage_info+0x44>
 801239c:	a987      	add	r1, sp, #540	; 0x21c
 801239e:	4628      	mov	r0, r5
 80123a0:	f7fe faca 	bl	8010938 <ucdr_deserialize_bool>
 80123a4:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80123a8:	4606      	mov	r6, r0
 80123aa:	b94b      	cbnz	r3, 80123c0 <read_submessage_info+0x50>
 80123ac:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80123b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123b4:	a903      	add	r1, sp, #12
 80123b6:	4628      	mov	r0, r5
 80123b8:	f001 fe7e 	bl	80140b8 <uxr_deserialize_ObjectVariant>
 80123bc:	4004      	ands	r4, r0
 80123be:	e7ed      	b.n	801239c <read_submessage_info+0x2c>
 80123c0:	a988      	add	r1, sp, #544	; 0x220
 80123c2:	4628      	mov	r0, r5
 80123c4:	f7fe fae8 	bl	8010998 <ucdr_deserialize_uint8_t>
 80123c8:	4234      	tst	r4, r6
 80123ca:	d0ef      	beq.n	80123ac <read_submessage_info+0x3c>
 80123cc:	2800      	cmp	r0, #0
 80123ce:	d0ed      	beq.n	80123ac <read_submessage_info+0x3c>
 80123d0:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80123d4:	2b0d      	cmp	r3, #13
 80123d6:	d1e9      	bne.n	80123ac <read_submessage_info+0x3c>
 80123d8:	4628      	mov	r0, r5
 80123da:	a98a      	add	r1, sp, #552	; 0x228
 80123dc:	f7ff f882 	bl	80114e4 <ucdr_deserialize_int16_t>
 80123e0:	b140      	cbz	r0, 80123f4 <read_submessage_info+0x84>
 80123e2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	dd07      	ble.n	80123fa <read_submessage_info+0x8a>
 80123ea:	f1b8 0f00 	cmp.w	r8, #0
 80123ee:	bf14      	ite	ne
 80123f0:	2001      	movne	r0, #1
 80123f2:	2002      	moveq	r0, #2
 80123f4:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 80123f8:	e7d8      	b.n	80123ac <read_submessage_info+0x3c>
 80123fa:	2000      	movs	r0, #0
 80123fc:	e7fa      	b.n	80123f4 <read_submessage_info+0x84>
 80123fe:	bf00      	nop

08012400 <read_submessage_list>:
 8012400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012404:	b098      	sub	sp, #96	; 0x60
 8012406:	f8df 9304 	ldr.w	r9, [pc, #772]	; 801270c <read_submessage_list+0x30c>
 801240a:	920b      	str	r2, [sp, #44]	; 0x2c
 801240c:	4604      	mov	r4, r0
 801240e:	4688      	mov	r8, r1
 8012410:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8012414:	aa0e      	add	r2, sp, #56	; 0x38
 8012416:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 801241a:	4640      	mov	r0, r8
 801241c:	f001 f810 	bl	8013440 <uxr_read_submessage_header>
 8012420:	2800      	cmp	r0, #0
 8012422:	f000 813d 	beq.w	80126a0 <read_submessage_list+0x2a0>
 8012426:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 801242a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 801242e:	3b02      	subs	r3, #2
 8012430:	2b0d      	cmp	r3, #13
 8012432:	d8ed      	bhi.n	8012410 <read_submessage_list+0x10>
 8012434:	a101      	add	r1, pc, #4	; (adr r1, 801243c <read_submessage_list+0x3c>)
 8012436:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801243a:	bf00      	nop
 801243c:	08012697 	.word	0x08012697
 8012440:	08012411 	.word	0x08012411
 8012444:	08012687 	.word	0x08012687
 8012448:	0801262b 	.word	0x0801262b
 801244c:	08012621 	.word	0x08012621
 8012450:	08012411 	.word	0x08012411
 8012454:	08012411 	.word	0x08012411
 8012458:	08012583 	.word	0x08012583
 801245c:	08012515 	.word	0x08012515
 8012460:	080124d3 	.word	0x080124d3
 8012464:	08012411 	.word	0x08012411
 8012468:	08012411 	.word	0x08012411
 801246c:	08012411 	.word	0x08012411
 8012470:	08012475 	.word	0x08012475
 8012474:	a912      	add	r1, sp, #72	; 0x48
 8012476:	4640      	mov	r0, r8
 8012478:	f002 f9bc 	bl	80147f4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801247c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8012480:	2d00      	cmp	r5, #0
 8012482:	f000 8115 	beq.w	80126b0 <read_submessage_list+0x2b0>
 8012486:	f001 f823 	bl	80134d0 <uxr_nanos>
 801248a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801248c:	460b      	mov	r3, r1
 801248e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012490:	2700      	movs	r7, #0
 8012492:	fbc9 6701 	smlal	r6, r7, r9, r1
 8012496:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801249a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801249c:	4602      	mov	r2, r0
 801249e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80124a0:	460e      	mov	r6, r1
 80124a2:	2700      	movs	r7, #0
 80124a4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80124a8:	9106      	str	r1, [sp, #24]
 80124aa:	fbc9 6700 	smlal	r6, r7, r9, r0
 80124ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 80124b0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80124b4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80124b6:	2700      	movs	r7, #0
 80124b8:	4608      	mov	r0, r1
 80124ba:	4639      	mov	r1, r7
 80124bc:	fbc9 0106 	smlal	r0, r1, r9, r6
 80124c0:	e9cd 0100 	strd	r0, r1, [sp]
 80124c4:	4620      	mov	r0, r4
 80124c6:	47a8      	blx	r5
 80124c8:	f04f 0301 	mov.w	r3, #1
 80124cc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80124d0:	e79e      	b.n	8012410 <read_submessage_list+0x10>
 80124d2:	a912      	add	r1, sp, #72	; 0x48
 80124d4:	4640      	mov	r0, r8
 80124d6:	f002 f97b 	bl	80147d0 <uxr_deserialize_HEARTBEAT_Payload>
 80124da:	2100      	movs	r1, #0
 80124dc:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80124e0:	f000 fe84 	bl	80131ec <uxr_stream_id_from_raw>
 80124e4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80124e8:	4603      	mov	r3, r0
 80124ea:	4629      	mov	r1, r5
 80124ec:	f104 0008 	add.w	r0, r4, #8
 80124f0:	9311      	str	r3, [sp, #68]	; 0x44
 80124f2:	f000 ff69 	bl	80133c8 <uxr_get_input_reliable_stream>
 80124f6:	2800      	cmp	r0, #0
 80124f8:	d08a      	beq.n	8012410 <read_submessage_list+0x10>
 80124fa:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 80124fe:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8012502:	f006 f8c7 	bl	8018694 <uxr_process_heartbeat>
 8012506:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 801250a:	462a      	mov	r2, r5
 801250c:	4620      	mov	r0, r4
 801250e:	f7ff fdf5 	bl	80120fc <write_submessage_acknack.isra.0>
 8012512:	e77d      	b.n	8012410 <read_submessage_list+0x10>
 8012514:	a912      	add	r1, sp, #72	; 0x48
 8012516:	4640      	mov	r0, r8
 8012518:	f002 f932 	bl	8014780 <uxr_deserialize_ACKNACK_Payload>
 801251c:	2100      	movs	r1, #0
 801251e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8012522:	f000 fe63 	bl	80131ec <uxr_stream_id_from_raw>
 8012526:	4603      	mov	r3, r0
 8012528:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801252c:	f104 0008 	add.w	r0, r4, #8
 8012530:	930f      	str	r3, [sp, #60]	; 0x3c
 8012532:	f000 ff33 	bl	801339c <uxr_get_output_reliable_stream>
 8012536:	4605      	mov	r5, r0
 8012538:	2800      	cmp	r0, #0
 801253a:	f43f af69 	beq.w	8012410 <read_submessage_list+0x10>
 801253e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8012542:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 8012546:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801254a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801254e:	b289      	uxth	r1, r1
 8012550:	f006 fbe4 	bl	8018d1c <uxr_process_acknack>
 8012554:	4628      	mov	r0, r5
 8012556:	f006 fba7 	bl	8018ca8 <uxr_begin_output_nack_buffer_it>
 801255a:	af10      	add	r7, sp, #64	; 0x40
 801255c:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8012560:	e005      	b.n	801256e <read_submessage_list+0x16e>
 8012562:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012564:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012566:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012568:	e9d3 0600 	ldrd	r0, r6, [r3]
 801256c:	47b0      	blx	r6
 801256e:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 8012572:	aa11      	add	r2, sp, #68	; 0x44
 8012574:	4639      	mov	r1, r7
 8012576:	4628      	mov	r0, r5
 8012578:	f006 fb98 	bl	8018cac <uxr_next_reliable_nack_buffer_to_send>
 801257c:	2800      	cmp	r0, #0
 801257e:	d1f0      	bne.n	8012562 <read_submessage_list+0x162>
 8012580:	e746      	b.n	8012410 <read_submessage_list+0x10>
 8012582:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8012586:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 801258a:	af10      	add	r7, sp, #64	; 0x40
 801258c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8012590:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8012594:	4639      	mov	r1, r7
 8012596:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801259a:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 801259e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80125a2:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 80125a6:	4640      	mov	r0, r8
 80125a8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80125ac:	f001 fe32 	bl	8014214 <uxr_deserialize_BaseObjectRequest>
 80125b0:	4638      	mov	r0, r7
 80125b2:	a911      	add	r1, sp, #68	; 0x44
 80125b4:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 80125b8:	f000 fddc 	bl	8013174 <uxr_parse_base_object_request>
 80125bc:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80125c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80125c2:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 80125c6:	9112      	str	r1, [sp, #72]	; 0x48
 80125c8:	3d04      	subs	r5, #4
 80125ca:	f006 060e 	and.w	r6, r6, #14
 80125ce:	b2ad      	uxth	r5, r5
 80125d0:	f1ba 0f00 	cmp.w	sl, #0
 80125d4:	d006      	beq.n	80125e4 <read_submessage_list+0x1e4>
 80125d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80125da:	9300      	str	r3, [sp, #0]
 80125dc:	463a      	mov	r2, r7
 80125de:	2300      	movs	r3, #0
 80125e0:	4620      	mov	r0, r4
 80125e2:	47d0      	blx	sl
 80125e4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80125e6:	b168      	cbz	r0, 8012604 <read_submessage_list+0x204>
 80125e8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80125ea:	2300      	movs	r3, #0
 80125ec:	3902      	subs	r1, #2
 80125ee:	e002      	b.n	80125f6 <read_submessage_list+0x1f6>
 80125f0:	3301      	adds	r3, #1
 80125f2:	4283      	cmp	r3, r0
 80125f4:	d006      	beq.n	8012604 <read_submessage_list+0x204>
 80125f6:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 80125fa:	42ba      	cmp	r2, r7
 80125fc:	d1f8      	bne.n	80125f0 <read_submessage_list+0x1f0>
 80125fe:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8012600:	2100      	movs	r1, #0
 8012602:	54d1      	strb	r1, [r2, r3]
 8012604:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012606:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012608:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801260c:	9302      	str	r3, [sp, #8]
 801260e:	e9cd 1000 	strd	r1, r0, [sp]
 8012612:	4633      	mov	r3, r6
 8012614:	462a      	mov	r2, r5
 8012616:	4641      	mov	r1, r8
 8012618:	4620      	mov	r0, r4
 801261a:	f7ff fc57 	bl	8011ecc <read_submessage_format>
 801261e:	e6f7      	b.n	8012410 <read_submessage_list+0x10>
 8012620:	4641      	mov	r1, r8
 8012622:	4620      	mov	r0, r4
 8012624:	f7ff fea4 	bl	8012370 <read_submessage_info>
 8012628:	e6f2      	b.n	8012410 <read_submessage_list+0x10>
 801262a:	2a00      	cmp	r2, #0
 801262c:	d03b      	beq.n	80126a6 <read_submessage_list+0x2a6>
 801262e:	a912      	add	r1, sp, #72	; 0x48
 8012630:	4640      	mov	r0, r8
 8012632:	f002 f801 	bl	8014638 <uxr_deserialize_STATUS_Payload>
 8012636:	a910      	add	r1, sp, #64	; 0x40
 8012638:	aa0f      	add	r2, sp, #60	; 0x3c
 801263a:	a812      	add	r0, sp, #72	; 0x48
 801263c:	f000 fd9a 	bl	8013174 <uxr_parse_base_object_request>
 8012640:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8012644:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012646:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801264a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801264e:	9111      	str	r1, [sp, #68]	; 0x44
 8012650:	b135      	cbz	r5, 8012660 <read_submessage_list+0x260>
 8012652:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012656:	9300      	str	r3, [sp, #0]
 8012658:	4632      	mov	r2, r6
 801265a:	463b      	mov	r3, r7
 801265c:	4620      	mov	r0, r4
 801265e:	47a8      	blx	r5
 8012660:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8012662:	2b00      	cmp	r3, #0
 8012664:	f43f aed4 	beq.w	8012410 <read_submessage_list+0x10>
 8012668:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801266a:	2100      	movs	r1, #0
 801266c:	3802      	subs	r0, #2
 801266e:	e003      	b.n	8012678 <read_submessage_list+0x278>
 8012670:	3101      	adds	r1, #1
 8012672:	4299      	cmp	r1, r3
 8012674:	f43f aecc 	beq.w	8012410 <read_submessage_list+0x10>
 8012678:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 801267c:	42b2      	cmp	r2, r6
 801267e:	d1f7      	bne.n	8012670 <read_submessage_list+0x270>
 8012680:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8012682:	545f      	strb	r7, [r3, r1]
 8012684:	e6c4      	b.n	8012410 <read_submessage_list+0x10>
 8012686:	2a00      	cmp	r2, #0
 8012688:	f47f aec2 	bne.w	8012410 <read_submessage_list+0x10>
 801268c:	4641      	mov	r1, r8
 801268e:	4620      	mov	r0, r4
 8012690:	f000 fcb4 	bl	8012ffc <uxr_read_create_session_status>
 8012694:	e6bc      	b.n	8012410 <read_submessage_list+0x10>
 8012696:	4641      	mov	r1, r8
 8012698:	4620      	mov	r0, r4
 801269a:	f7ff fcf9 	bl	8012090 <read_submessage_get_info>
 801269e:	e6b7      	b.n	8012410 <read_submessage_list+0x10>
 80126a0:	b018      	add	sp, #96	; 0x60
 80126a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126a6:	4641      	mov	r1, r8
 80126a8:	4620      	mov	r0, r4
 80126aa:	f000 fcb3 	bl	8013014 <uxr_read_delete_session_status>
 80126ae:	e6af      	b.n	8012410 <read_submessage_list+0x10>
 80126b0:	f000 ff0e 	bl	80134d0 <uxr_nanos>
 80126b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80126b6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80126b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80126ba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80126bc:	2700      	movs	r7, #0
 80126be:	fbc9 6703 	smlal	r6, r7, r9, r3
 80126c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80126c4:	eb16 0c00 	adds.w	ip, r6, r0
 80126c8:	4618      	mov	r0, r3
 80126ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80126cc:	eb47 0e01 	adc.w	lr, r7, r1
 80126d0:	461e      	mov	r6, r3
 80126d2:	2100      	movs	r1, #0
 80126d4:	2700      	movs	r7, #0
 80126d6:	fbc9 0105 	smlal	r0, r1, r9, r5
 80126da:	fbc9 6702 	smlal	r6, r7, r9, r2
 80126de:	1983      	adds	r3, r0, r6
 80126e0:	eb41 0207 	adc.w	r2, r1, r7
 80126e4:	ebbc 0303 	subs.w	r3, ip, r3
 80126e8:	9308      	str	r3, [sp, #32]
 80126ea:	eb6e 0302 	sbc.w	r3, lr, r2
 80126ee:	9309      	str	r3, [sp, #36]	; 0x24
 80126f0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80126f4:	0fd3      	lsrs	r3, r2, #31
 80126f6:	18c9      	adds	r1, r1, r3
 80126f8:	f142 0200 	adc.w	r2, r2, #0
 80126fc:	084b      	lsrs	r3, r1, #1
 80126fe:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012702:	1052      	asrs	r2, r2, #1
 8012704:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8012708:	e6de      	b.n	80124c8 <read_submessage_list+0xc8>
 801270a:	bf00      	nop
 801270c:	3b9aca00 	.word	0x3b9aca00

08012710 <listen_message_reliably>:
 8012710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012714:	1e0b      	subs	r3, r1, #0
 8012716:	b09d      	sub	sp, #116	; 0x74
 8012718:	bfb8      	it	lt
 801271a:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801271e:	9305      	str	r3, [sp, #20]
 8012720:	4607      	mov	r7, r0
 8012722:	f000 feb9 	bl	8013498 <uxr_millis>
 8012726:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 801272a:	4681      	mov	r9, r0
 801272c:	2a00      	cmp	r2, #0
 801272e:	f000 8095 	beq.w	801285c <listen_message_reliably+0x14c>
 8012732:	2600      	movs	r6, #0
 8012734:	f04f 33ff 	mov.w	r3, #4294967295
 8012738:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 801273c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012740:	4630      	mov	r0, r6
 8012742:	4688      	mov	r8, r1
 8012744:	46ca      	mov	sl, r9
 8012746:	e00f      	b.n	8012768 <listen_message_reliably+0x58>
 8012748:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801274c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012750:	42a2      	cmp	r2, r4
 8012752:	eb73 0105 	sbcs.w	r1, r3, r5
 8012756:	bfb8      	it	lt
 8012758:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 801275c:	3601      	adds	r6, #1
 801275e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8012762:	b2f0      	uxtb	r0, r6
 8012764:	4283      	cmp	r3, r0
 8012766:	d951      	bls.n	801280c <listen_message_reliably+0xfc>
 8012768:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801276c:	2201      	movs	r2, #1
 801276e:	2102      	movs	r1, #2
 8012770:	f000 fd12 	bl	8013198 <uxr_stream_id>
 8012774:	00e4      	lsls	r4, r4, #3
 8012776:	f104 0520 	add.w	r5, r4, #32
 801277a:	443d      	add	r5, r7
 801277c:	4601      	mov	r1, r0
 801277e:	4643      	mov	r3, r8
 8012780:	4652      	mov	r2, sl
 8012782:	4628      	mov	r0, r5
 8012784:	9109      	str	r1, [sp, #36]	; 0x24
 8012786:	f006 fa63 	bl	8018c50 <uxr_update_output_stream_heartbeat_timestamp>
 801278a:	193b      	adds	r3, r7, r4
 801278c:	2800      	cmp	r0, #0
 801278e:	d0db      	beq.n	8012748 <listen_message_reliably+0x38>
 8012790:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8012794:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8012798:	4638      	mov	r0, r7
 801279a:	f000 fcc5 	bl	8013128 <uxr_session_header_offset>
 801279e:	3501      	adds	r5, #1
 80127a0:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 80127a4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80127a8:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80127ac:	9000      	str	r0, [sp, #0]
 80127ae:	2300      	movs	r3, #0
 80127b0:	4658      	mov	r0, fp
 80127b2:	2211      	movs	r2, #17
 80127b4:	a90c      	add	r1, sp, #48	; 0x30
 80127b6:	f7ff f871 	bl	801189c <ucdr_init_buffer_origin_offset>
 80127ba:	2300      	movs	r3, #0
 80127bc:	2205      	movs	r2, #5
 80127be:	210b      	movs	r1, #11
 80127c0:	4658      	mov	r0, fp
 80127c2:	f000 fe23 	bl	801340c <uxr_buffer_submessage_header>
 80127c6:	8968      	ldrh	r0, [r5, #10]
 80127c8:	2101      	movs	r1, #1
 80127ca:	f006 faff 	bl	8018dcc <uxr_seq_num_add>
 80127ce:	892a      	ldrh	r2, [r5, #8]
 80127d0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80127d4:	4603      	mov	r3, r0
 80127d6:	a90a      	add	r1, sp, #40	; 0x28
 80127d8:	4658      	mov	r0, fp
 80127da:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80127de:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 80127e2:	f001 ffe1 	bl	80147a8 <uxr_serialize_HEARTBEAT_Payload>
 80127e6:	2200      	movs	r2, #0
 80127e8:	4611      	mov	r1, r2
 80127ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80127ec:	4638      	mov	r0, r7
 80127ee:	f000 fc43 	bl	8013078 <uxr_stamp_session_header>
 80127f2:	4658      	mov	r0, fp
 80127f4:	f7ff f890 	bl	8011918 <ucdr_buffer_length>
 80127f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80127fa:	4602      	mov	r2, r0
 80127fc:	a90c      	add	r1, sp, #48	; 0x30
 80127fe:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012802:	443c      	add	r4, r7
 8012804:	47a8      	blx	r5
 8012806:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801280a:	e79f      	b.n	801274c <listen_message_reliably+0x3c>
 801280c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8012810:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8012814:	f04f 31ff 	mov.w	r1, #4294967295
 8012818:	4294      	cmp	r4, r2
 801281a:	bf08      	it	eq
 801281c:	428b      	cmpeq	r3, r1
 801281e:	d01d      	beq.n	801285c <listen_message_reliably+0x14c>
 8012820:	eba3 030a 	sub.w	r3, r3, sl
 8012824:	9905      	ldr	r1, [sp, #20]
 8012826:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012828:	2b00      	cmp	r3, #0
 801282a:	bf08      	it	eq
 801282c:	2301      	moveq	r3, #1
 801282e:	4299      	cmp	r1, r3
 8012830:	bfa8      	it	ge
 8012832:	4619      	movge	r1, r3
 8012834:	6894      	ldr	r4, [r2, #8]
 8012836:	6810      	ldr	r0, [r2, #0]
 8012838:	4689      	mov	r9, r1
 801283a:	460b      	mov	r3, r1
 801283c:	aa08      	add	r2, sp, #32
 801283e:	a907      	add	r1, sp, #28
 8012840:	47a0      	blx	r4
 8012842:	b968      	cbnz	r0, 8012860 <listen_message_reliably+0x150>
 8012844:	9b05      	ldr	r3, [sp, #20]
 8012846:	eba3 0309 	sub.w	r3, r3, r9
 801284a:	2b00      	cmp	r3, #0
 801284c:	9305      	str	r3, [sp, #20]
 801284e:	f73f af68 	bgt.w	8012722 <listen_message_reliably+0x12>
 8012852:	4604      	mov	r4, r0
 8012854:	4620      	mov	r0, r4
 8012856:	b01d      	add	sp, #116	; 0x74
 8012858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801285c:	9b05      	ldr	r3, [sp, #20]
 801285e:	e7e1      	b.n	8012824 <listen_message_reliably+0x114>
 8012860:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012864:	4604      	mov	r4, r0
 8012866:	a80c      	add	r0, sp, #48	; 0x30
 8012868:	f7ff f82a 	bl	80118c0 <ucdr_init_buffer>
 801286c:	2500      	movs	r5, #0
 801286e:	a90c      	add	r1, sp, #48	; 0x30
 8012870:	f10d 031a 	add.w	r3, sp, #26
 8012874:	aa06      	add	r2, sp, #24
 8012876:	4638      	mov	r0, r7
 8012878:	f88d 5018 	strb.w	r5, [sp, #24]
 801287c:	f000 fc12 	bl	80130a4 <uxr_read_session_header>
 8012880:	b918      	cbnz	r0, 801288a <listen_message_reliably+0x17a>
 8012882:	4620      	mov	r0, r4
 8012884:	b01d      	add	sp, #116	; 0x74
 8012886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801288a:	4629      	mov	r1, r5
 801288c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012890:	f000 fcac 	bl	80131ec <uxr_stream_id_from_raw>
 8012894:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012898:	2e01      	cmp	r6, #1
 801289a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801289e:	900a      	str	r0, [sp, #40]	; 0x28
 80128a0:	fa5f fa80 	uxtb.w	sl, r0
 80128a4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80128a8:	d04b      	beq.n	8012942 <listen_message_reliably+0x232>
 80128aa:	2e02      	cmp	r6, #2
 80128ac:	d00f      	beq.n	80128ce <listen_message_reliably+0x1be>
 80128ae:	2e00      	cmp	r6, #0
 80128b0:	d1e7      	bne.n	8012882 <listen_message_reliably+0x172>
 80128b2:	4631      	mov	r1, r6
 80128b4:	4630      	mov	r0, r6
 80128b6:	f000 fc99 	bl	80131ec <uxr_stream_id_from_raw>
 80128ba:	a90c      	add	r1, sp, #48	; 0x30
 80128bc:	4602      	mov	r2, r0
 80128be:	4638      	mov	r0, r7
 80128c0:	920a      	str	r2, [sp, #40]	; 0x28
 80128c2:	f7ff fd9d 	bl	8012400 <read_submessage_list>
 80128c6:	4620      	mov	r0, r4
 80128c8:	b01d      	add	sp, #116	; 0x74
 80128ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ce:	4629      	mov	r1, r5
 80128d0:	f107 0008 	add.w	r0, r7, #8
 80128d4:	f000 fd78 	bl	80133c8 <uxr_get_input_reliable_stream>
 80128d8:	4680      	mov	r8, r0
 80128da:	b348      	cbz	r0, 8012930 <listen_message_reliably+0x220>
 80128dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80128de:	9202      	str	r2, [sp, #8]
 80128e0:	a80c      	add	r0, sp, #48	; 0x30
 80128e2:	f7ff f81d 	bl	8011920 <ucdr_buffer_remaining>
 80128e6:	4603      	mov	r3, r0
 80128e8:	f10d 0019 	add.w	r0, sp, #25
 80128ec:	9000      	str	r0, [sp, #0]
 80128ee:	9a02      	ldr	r2, [sp, #8]
 80128f0:	4649      	mov	r1, r9
 80128f2:	4640      	mov	r0, r8
 80128f4:	f005 fdd0 	bl	8018498 <uxr_receive_reliable_message>
 80128f8:	b1d0      	cbz	r0, 8012930 <listen_message_reliably+0x220>
 80128fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d037      	beq.n	8012972 <listen_message_reliably+0x262>
 8012902:	ae14      	add	r6, sp, #80	; 0x50
 8012904:	f04f 0902 	mov.w	r9, #2
 8012908:	e008      	b.n	801291c <listen_message_reliably+0x20c>
 801290a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 801290e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8012912:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8012916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012918:	f7ff fd72 	bl	8012400 <read_submessage_list>
 801291c:	4631      	mov	r1, r6
 801291e:	2204      	movs	r2, #4
 8012920:	4640      	mov	r0, r8
 8012922:	f005 fe39 	bl	8018598 <uxr_next_input_reliable_buffer_available>
 8012926:	4603      	mov	r3, r0
 8012928:	4631      	mov	r1, r6
 801292a:	4638      	mov	r0, r7
 801292c:	2b00      	cmp	r3, #0
 801292e:	d1ec      	bne.n	801290a <listen_message_reliably+0x1fa>
 8012930:	4638      	mov	r0, r7
 8012932:	462a      	mov	r2, r5
 8012934:	4651      	mov	r1, sl
 8012936:	f7ff fbe1 	bl	80120fc <write_submessage_acknack.isra.0>
 801293a:	4620      	mov	r0, r4
 801293c:	b01d      	add	sp, #116	; 0x74
 801293e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012942:	4629      	mov	r1, r5
 8012944:	f107 0008 	add.w	r0, r7, #8
 8012948:	f000 fd34 	bl	80133b4 <uxr_get_input_best_effort_stream>
 801294c:	2800      	cmp	r0, #0
 801294e:	d098      	beq.n	8012882 <listen_message_reliably+0x172>
 8012950:	4649      	mov	r1, r9
 8012952:	f005 fd1d 	bl	8018390 <uxr_receive_best_effort_message>
 8012956:	2800      	cmp	r0, #0
 8012958:	d093      	beq.n	8012882 <listen_message_reliably+0x172>
 801295a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 801295e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8012962:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8012966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012968:	a90c      	add	r1, sp, #48	; 0x30
 801296a:	4638      	mov	r0, r7
 801296c:	f7ff fd48 	bl	8012400 <read_submessage_list>
 8012970:	e787      	b.n	8012882 <listen_message_reliably+0x172>
 8012972:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8012976:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801297a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801297e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012980:	a90c      	add	r1, sp, #48	; 0x30
 8012982:	4638      	mov	r0, r7
 8012984:	f7ff fd3c 	bl	8012400 <read_submessage_list>
 8012988:	e7bb      	b.n	8012902 <listen_message_reliably+0x1f2>
 801298a:	bf00      	nop

0801298c <uxr_run_session_timeout>:
 801298c:	b570      	push	{r4, r5, r6, lr}
 801298e:	4604      	mov	r4, r0
 8012990:	460d      	mov	r5, r1
 8012992:	f000 fd81 	bl	8013498 <uxr_millis>
 8012996:	4606      	mov	r6, r0
 8012998:	4620      	mov	r0, r4
 801299a:	f7ff fc75 	bl	8012288 <uxr_flash_output_streams>
 801299e:	4629      	mov	r1, r5
 80129a0:	4620      	mov	r0, r4
 80129a2:	f7ff feb5 	bl	8012710 <listen_message_reliably>
 80129a6:	f000 fd77 	bl	8013498 <uxr_millis>
 80129aa:	1b83      	subs	r3, r0, r6
 80129ac:	1ae9      	subs	r1, r5, r3
 80129ae:	2900      	cmp	r1, #0
 80129b0:	dcf6      	bgt.n	80129a0 <uxr_run_session_timeout+0x14>
 80129b2:	f104 0008 	add.w	r0, r4, #8
 80129b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129ba:	f000 bd11 	b.w	80133e0 <uxr_output_streams_confirmed>
 80129be:	bf00      	nop

080129c0 <uxr_run_session_until_data>:
 80129c0:	b570      	push	{r4, r5, r6, lr}
 80129c2:	4604      	mov	r4, r0
 80129c4:	460d      	mov	r5, r1
 80129c6:	f000 fd67 	bl	8013498 <uxr_millis>
 80129ca:	4606      	mov	r6, r0
 80129cc:	4620      	mov	r0, r4
 80129ce:	f7ff fc5b 	bl	8012288 <uxr_flash_output_streams>
 80129d2:	2300      	movs	r3, #0
 80129d4:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80129d8:	4629      	mov	r1, r5
 80129da:	e005      	b.n	80129e8 <uxr_run_session_until_data+0x28>
 80129dc:	f000 fd5c 	bl	8013498 <uxr_millis>
 80129e0:	1b83      	subs	r3, r0, r6
 80129e2:	1ae9      	subs	r1, r5, r3
 80129e4:	2900      	cmp	r1, #0
 80129e6:	dd07      	ble.n	80129f8 <uxr_run_session_until_data+0x38>
 80129e8:	4620      	mov	r0, r4
 80129ea:	f7ff fe91 	bl	8012710 <listen_message_reliably>
 80129ee:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d0f2      	beq.n	80129dc <uxr_run_session_until_data+0x1c>
 80129f6:	bd70      	pop	{r4, r5, r6, pc}
 80129f8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80129fc:	bd70      	pop	{r4, r5, r6, pc}
 80129fe:	bf00      	nop

08012a00 <uxr_run_session_until_confirm_delivery>:
 8012a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a04:	4606      	mov	r6, r0
 8012a06:	460d      	mov	r5, r1
 8012a08:	f000 fd46 	bl	8013498 <uxr_millis>
 8012a0c:	4607      	mov	r7, r0
 8012a0e:	4630      	mov	r0, r6
 8012a10:	f7ff fc3a 	bl	8012288 <uxr_flash_output_streams>
 8012a14:	2d00      	cmp	r5, #0
 8012a16:	f106 0808 	add.w	r8, r6, #8
 8012a1a:	bfa8      	it	ge
 8012a1c:	462c      	movge	r4, r5
 8012a1e:	da07      	bge.n	8012a30 <uxr_run_session_until_confirm_delivery+0x30>
 8012a20:	e00e      	b.n	8012a40 <uxr_run_session_until_confirm_delivery+0x40>
 8012a22:	f7ff fe75 	bl	8012710 <listen_message_reliably>
 8012a26:	f000 fd37 	bl	8013498 <uxr_millis>
 8012a2a:	1bc3      	subs	r3, r0, r7
 8012a2c:	1aec      	subs	r4, r5, r3
 8012a2e:	d407      	bmi.n	8012a40 <uxr_run_session_until_confirm_delivery+0x40>
 8012a30:	4640      	mov	r0, r8
 8012a32:	f000 fcd5 	bl	80133e0 <uxr_output_streams_confirmed>
 8012a36:	4603      	mov	r3, r0
 8012a38:	4621      	mov	r1, r4
 8012a3a:	4630      	mov	r0, r6
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d0f0      	beq.n	8012a22 <uxr_run_session_until_confirm_delivery+0x22>
 8012a40:	4640      	mov	r0, r8
 8012a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a46:	f000 bccb 	b.w	80133e0 <uxr_output_streams_confirmed>
 8012a4a:	bf00      	nop

08012a4c <uxr_run_session_until_all_status>:
 8012a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a50:	9d08      	ldr	r5, [sp, #32]
 8012a52:	460f      	mov	r7, r1
 8012a54:	4692      	mov	sl, r2
 8012a56:	461c      	mov	r4, r3
 8012a58:	4606      	mov	r6, r0
 8012a5a:	f7ff fc15 	bl	8012288 <uxr_flash_output_streams>
 8012a5e:	b125      	cbz	r5, 8012a6a <uxr_run_session_until_all_status+0x1e>
 8012a60:	462a      	mov	r2, r5
 8012a62:	21ff      	movs	r1, #255	; 0xff
 8012a64:	4620      	mov	r0, r4
 8012a66:	f007 fd5b 	bl	801a520 <memset>
 8012a6a:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 8012a6e:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012a70:	f000 fd12 	bl	8013498 <uxr_millis>
 8012a74:	f104 39ff 	add.w	r9, r4, #4294967295
 8012a78:	f1aa 0a02 	sub.w	sl, sl, #2
 8012a7c:	4680      	mov	r8, r0
 8012a7e:	4639      	mov	r1, r7
 8012a80:	4630      	mov	r0, r6
 8012a82:	f7ff fe45 	bl	8012710 <listen_message_reliably>
 8012a86:	f000 fd07 	bl	8013498 <uxr_millis>
 8012a8a:	eba0 0008 	sub.w	r0, r0, r8
 8012a8e:	1a39      	subs	r1, r7, r0
 8012a90:	b33d      	cbz	r5, 8012ae2 <uxr_run_session_until_all_status+0x96>
 8012a92:	46cc      	mov	ip, r9
 8012a94:	464a      	mov	r2, r9
 8012a96:	2301      	movs	r3, #1
 8012a98:	e002      	b.n	8012aa0 <uxr_run_session_until_all_status+0x54>
 8012a9a:	42ab      	cmp	r3, r5
 8012a9c:	d20c      	bcs.n	8012ab8 <uxr_run_session_until_all_status+0x6c>
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8012aa4:	2cff      	cmp	r4, #255	; 0xff
 8012aa6:	d1f8      	bne.n	8012a9a <uxr_run_session_until_all_status+0x4e>
 8012aa8:	42ab      	cmp	r3, r5
 8012aaa:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8012aae:	d213      	bcs.n	8012ad8 <uxr_run_session_until_all_status+0x8c>
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	d0f4      	beq.n	8012a9e <uxr_run_session_until_all_status+0x52>
 8012ab4:	2900      	cmp	r1, #0
 8012ab6:	dce3      	bgt.n	8012a80 <uxr_run_session_until_all_status+0x34>
 8012ab8:	2300      	movs	r3, #0
 8012aba:	444d      	add	r5, r9
 8012abc:	67f3      	str	r3, [r6, #124]	; 0x7c
 8012abe:	e001      	b.n	8012ac4 <uxr_run_session_until_all_status+0x78>
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d812      	bhi.n	8012aea <uxr_run_session_until_all_status+0x9e>
 8012ac4:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8012ac8:	4565      	cmp	r5, ip
 8012aca:	d1f9      	bne.n	8012ac0 <uxr_run_session_until_all_status+0x74>
 8012acc:	2b01      	cmp	r3, #1
 8012ace:	bf8c      	ite	hi
 8012ad0:	2000      	movhi	r0, #0
 8012ad2:	2001      	movls	r0, #1
 8012ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ad8:	2900      	cmp	r1, #0
 8012ada:	dded      	ble.n	8012ab8 <uxr_run_session_until_all_status+0x6c>
 8012adc:	2800      	cmp	r0, #0
 8012ade:	d1cf      	bne.n	8012a80 <uxr_run_session_until_all_status+0x34>
 8012ae0:	e7ea      	b.n	8012ab8 <uxr_run_session_until_all_status+0x6c>
 8012ae2:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012ae4:	2001      	movs	r0, #1
 8012ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aea:	2000      	movs	r0, #0
 8012aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012af0 <uxr_create_session>:
 8012af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af4:	ed2d 8b02 	vpush	{d8}
 8012af8:	f100 0808 	add.w	r8, r0, #8
 8012afc:	b0a9      	sub	sp, #164	; 0xa4
 8012afe:	4604      	mov	r4, r0
 8012b00:	4640      	mov	r0, r8
 8012b02:	f000 fba9 	bl	8013258 <uxr_reset_stream_storage>
 8012b06:	4620      	mov	r0, r4
 8012b08:	f000 fb0e 	bl	8013128 <uxr_session_header_offset>
 8012b0c:	a909      	add	r1, sp, #36	; 0x24
 8012b0e:	9000      	str	r0, [sp, #0]
 8012b10:	2300      	movs	r3, #0
 8012b12:	a810      	add	r0, sp, #64	; 0x40
 8012b14:	221c      	movs	r2, #28
 8012b16:	f7fe fec1 	bl	801189c <ucdr_init_buffer_origin_offset>
 8012b1a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012b1c:	8a1a      	ldrh	r2, [r3, #16]
 8012b1e:	3a04      	subs	r2, #4
 8012b20:	b292      	uxth	r2, r2
 8012b22:	4620      	mov	r0, r4
 8012b24:	a910      	add	r1, sp, #64	; 0x40
 8012b26:	f000 fa23 	bl	8012f70 <uxr_buffer_create_session>
 8012b2a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	f000 fa8f 	bl	8013050 <uxr_stamp_create_session_header>
 8012b32:	a810      	add	r0, sp, #64	; 0x40
 8012b34:	f7fe fef0 	bl	8011918 <ucdr_buffer_length>
 8012b38:	23ff      	movs	r3, #255	; 0xff
 8012b3a:	ee08 0a10 	vmov	s16, r0
 8012b3e:	7163      	strb	r3, [r4, #5]
 8012b40:	f04f 090a 	mov.w	r9, #10
 8012b44:	46c2      	mov	sl, r8
 8012b46:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012b48:	ee18 2a10 	vmov	r2, s16
 8012b4c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012b50:	a909      	add	r1, sp, #36	; 0x24
 8012b52:	47a8      	blx	r5
 8012b54:	f000 fca0 	bl	8013498 <uxr_millis>
 8012b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012b5c:	9002      	str	r0, [sp, #8]
 8012b5e:	e00c      	b.n	8012b7a <uxr_create_session+0x8a>
 8012b60:	f000 fc9a 	bl	8013498 <uxr_millis>
 8012b64:	9b02      	ldr	r3, [sp, #8]
 8012b66:	7962      	ldrb	r2, [r4, #5]
 8012b68:	1ac0      	subs	r0, r0, r3
 8012b6a:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	f340 8094 	ble.w	8012c9c <uxr_create_session+0x1ac>
 8012b74:	2aff      	cmp	r2, #255	; 0xff
 8012b76:	f040 8097 	bne.w	8012ca8 <uxr_create_session+0x1b8>
 8012b7a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012b7c:	a905      	add	r1, sp, #20
 8012b7e:	6895      	ldr	r5, [r2, #8]
 8012b80:	6810      	ldr	r0, [r2, #0]
 8012b82:	aa06      	add	r2, sp, #24
 8012b84:	47a8      	blx	r5
 8012b86:	2800      	cmp	r0, #0
 8012b88:	d0ea      	beq.n	8012b60 <uxr_create_session+0x70>
 8012b8a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8012b8e:	a818      	add	r0, sp, #96	; 0x60
 8012b90:	f7fe fe96 	bl	80118c0 <ucdr_init_buffer>
 8012b94:	2500      	movs	r5, #0
 8012b96:	f10d 0312 	add.w	r3, sp, #18
 8012b9a:	aa04      	add	r2, sp, #16
 8012b9c:	a918      	add	r1, sp, #96	; 0x60
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	f88d 5010 	strb.w	r5, [sp, #16]
 8012ba4:	f000 fa7e 	bl	80130a4 <uxr_read_session_header>
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	d0d9      	beq.n	8012b60 <uxr_create_session+0x70>
 8012bac:	4629      	mov	r1, r5
 8012bae:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8012bb2:	f000 fb1b 	bl	80131ec <uxr_stream_id_from_raw>
 8012bb6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012bba:	2f01      	cmp	r7, #1
 8012bbc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012bc0:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8012bc4:	fa5f f880 	uxtb.w	r8, r0
 8012bc8:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8012bcc:	d04d      	beq.n	8012c6a <uxr_create_session+0x17a>
 8012bce:	2f02      	cmp	r7, #2
 8012bd0:	d00c      	beq.n	8012bec <uxr_create_session+0xfc>
 8012bd2:	2f00      	cmp	r7, #0
 8012bd4:	d1c4      	bne.n	8012b60 <uxr_create_session+0x70>
 8012bd6:	4639      	mov	r1, r7
 8012bd8:	4638      	mov	r0, r7
 8012bda:	f000 fb07 	bl	80131ec <uxr_stream_id_from_raw>
 8012bde:	a918      	add	r1, sp, #96	; 0x60
 8012be0:	4602      	mov	r2, r0
 8012be2:	4620      	mov	r0, r4
 8012be4:	9208      	str	r2, [sp, #32]
 8012be6:	f7ff fc0b 	bl	8012400 <read_submessage_list>
 8012bea:	e7b9      	b.n	8012b60 <uxr_create_session+0x70>
 8012bec:	4629      	mov	r1, r5
 8012bee:	4650      	mov	r0, sl
 8012bf0:	f000 fbea 	bl	80133c8 <uxr_get_input_reliable_stream>
 8012bf4:	4606      	mov	r6, r0
 8012bf6:	b390      	cbz	r0, 8012c5e <uxr_create_session+0x16e>
 8012bf8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012bfa:	9203      	str	r2, [sp, #12]
 8012bfc:	a818      	add	r0, sp, #96	; 0x60
 8012bfe:	f7fe fe8f 	bl	8011920 <ucdr_buffer_remaining>
 8012c02:	4603      	mov	r3, r0
 8012c04:	f10d 0011 	add.w	r0, sp, #17
 8012c08:	9000      	str	r0, [sp, #0]
 8012c0a:	9a03      	ldr	r2, [sp, #12]
 8012c0c:	4659      	mov	r1, fp
 8012c0e:	4630      	mov	r0, r6
 8012c10:	f005 fc42 	bl	8018498 <uxr_receive_reliable_message>
 8012c14:	b318      	cbz	r0, 8012c5e <uxr_create_session+0x16e>
 8012c16:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8012c1a:	b9b3      	cbnz	r3, 8012c4a <uxr_create_session+0x15a>
 8012c1c:	f88d 8020 	strb.w	r8, [sp, #32]
 8012c20:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012c24:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8012c28:	9a08      	ldr	r2, [sp, #32]
 8012c2a:	a918      	add	r1, sp, #96	; 0x60
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	f7ff fbe7 	bl	8012400 <read_submessage_list>
 8012c32:	e00a      	b.n	8012c4a <uxr_create_session+0x15a>
 8012c34:	f04f 0302 	mov.w	r3, #2
 8012c38:	f88d 8020 	strb.w	r8, [sp, #32]
 8012c3c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012c40:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8012c44:	9a08      	ldr	r2, [sp, #32]
 8012c46:	f7ff fbdb 	bl	8012400 <read_submessage_list>
 8012c4a:	a920      	add	r1, sp, #128	; 0x80
 8012c4c:	2204      	movs	r2, #4
 8012c4e:	4630      	mov	r0, r6
 8012c50:	f005 fca2 	bl	8018598 <uxr_next_input_reliable_buffer_available>
 8012c54:	4603      	mov	r3, r0
 8012c56:	a920      	add	r1, sp, #128	; 0x80
 8012c58:	4620      	mov	r0, r4
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d1ea      	bne.n	8012c34 <uxr_create_session+0x144>
 8012c5e:	462a      	mov	r2, r5
 8012c60:	4641      	mov	r1, r8
 8012c62:	4620      	mov	r0, r4
 8012c64:	f7ff fa4a 	bl	80120fc <write_submessage_acknack.isra.0>
 8012c68:	e77a      	b.n	8012b60 <uxr_create_session+0x70>
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	4650      	mov	r0, sl
 8012c6e:	f000 fba1 	bl	80133b4 <uxr_get_input_best_effort_stream>
 8012c72:	2800      	cmp	r0, #0
 8012c74:	f43f af74 	beq.w	8012b60 <uxr_create_session+0x70>
 8012c78:	4659      	mov	r1, fp
 8012c7a:	f005 fb89 	bl	8018390 <uxr_receive_best_effort_message>
 8012c7e:	2800      	cmp	r0, #0
 8012c80:	f43f af6e 	beq.w	8012b60 <uxr_create_session+0x70>
 8012c84:	f88d 8020 	strb.w	r8, [sp, #32]
 8012c88:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012c8c:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8012c90:	9a08      	ldr	r2, [sp, #32]
 8012c92:	a918      	add	r1, sp, #96	; 0x60
 8012c94:	4620      	mov	r0, r4
 8012c96:	f7ff fbb3 	bl	8012400 <read_submessage_list>
 8012c9a:	e761      	b.n	8012b60 <uxr_create_session+0x70>
 8012c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8012ca0:	d002      	beq.n	8012ca8 <uxr_create_session+0x1b8>
 8012ca2:	2aff      	cmp	r2, #255	; 0xff
 8012ca4:	f43f af4f 	beq.w	8012b46 <uxr_create_session+0x56>
 8012ca8:	b12a      	cbz	r2, 8012cb6 <uxr_create_session+0x1c6>
 8012caa:	2000      	movs	r0, #0
 8012cac:	b029      	add	sp, #164	; 0xa4
 8012cae:	ecbd 8b02 	vpop	{d8}
 8012cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb6:	4650      	mov	r0, sl
 8012cb8:	f000 face 	bl	8013258 <uxr_reset_stream_storage>
 8012cbc:	2001      	movs	r0, #1
 8012cbe:	b029      	add	sp, #164	; 0xa4
 8012cc0:	ecbd 8b02 	vpop	{d8}
 8012cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012cc8 <wait_session_status>:
 8012cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ccc:	4604      	mov	r4, r0
 8012cce:	b09d      	sub	sp, #116	; 0x74
 8012cd0:	20ff      	movs	r0, #255	; 0xff
 8012cd2:	7160      	strb	r0, [r4, #5]
 8012cd4:	9304      	str	r3, [sp, #16]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	f000 80b8 	beq.w	8012e4c <wait_session_status+0x184>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	468b      	mov	fp, r1
 8012ce0:	4692      	mov	sl, r2
 8012ce2:	9303      	str	r3, [sp, #12]
 8012ce4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012ce6:	4652      	mov	r2, sl
 8012ce8:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012cec:	4659      	mov	r1, fp
 8012cee:	47a8      	blx	r5
 8012cf0:	f000 fbd2 	bl	8013498 <uxr_millis>
 8012cf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012cf8:	4605      	mov	r5, r0
 8012cfa:	e009      	b.n	8012d10 <wait_session_status+0x48>
 8012cfc:	f000 fbcc 	bl	8013498 <uxr_millis>
 8012d00:	1b40      	subs	r0, r0, r5
 8012d02:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	dd42      	ble.n	8012d90 <wait_session_status+0xc8>
 8012d0a:	7960      	ldrb	r0, [r4, #5]
 8012d0c:	28ff      	cmp	r0, #255	; 0xff
 8012d0e:	d148      	bne.n	8012da2 <wait_session_status+0xda>
 8012d10:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012d12:	a908      	add	r1, sp, #32
 8012d14:	6896      	ldr	r6, [r2, #8]
 8012d16:	6810      	ldr	r0, [r2, #0]
 8012d18:	aa09      	add	r2, sp, #36	; 0x24
 8012d1a:	47b0      	blx	r6
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	d0ed      	beq.n	8012cfc <wait_session_status+0x34>
 8012d20:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012d24:	a80c      	add	r0, sp, #48	; 0x30
 8012d26:	f7fe fdcb 	bl	80118c0 <ucdr_init_buffer>
 8012d2a:	2600      	movs	r6, #0
 8012d2c:	f10d 031e 	add.w	r3, sp, #30
 8012d30:	aa07      	add	r2, sp, #28
 8012d32:	a90c      	add	r1, sp, #48	; 0x30
 8012d34:	4620      	mov	r0, r4
 8012d36:	f88d 601c 	strb.w	r6, [sp, #28]
 8012d3a:	f000 f9b3 	bl	80130a4 <uxr_read_session_header>
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	d0dc      	beq.n	8012cfc <wait_session_status+0x34>
 8012d42:	4631      	mov	r1, r6
 8012d44:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012d48:	f000 fa50 	bl	80131ec <uxr_stream_id_from_raw>
 8012d4c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012d50:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012d54:	9302      	str	r3, [sp, #8]
 8012d56:	2f01      	cmp	r7, #1
 8012d58:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8012d5c:	fa5f f880 	uxtb.w	r8, r0
 8012d60:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012d64:	d058      	beq.n	8012e18 <wait_session_status+0x150>
 8012d66:	2f02      	cmp	r7, #2
 8012d68:	d021      	beq.n	8012dae <wait_session_status+0xe6>
 8012d6a:	2f00      	cmp	r7, #0
 8012d6c:	d1c6      	bne.n	8012cfc <wait_session_status+0x34>
 8012d6e:	4639      	mov	r1, r7
 8012d70:	4638      	mov	r0, r7
 8012d72:	f000 fa3b 	bl	80131ec <uxr_stream_id_from_raw>
 8012d76:	a90c      	add	r1, sp, #48	; 0x30
 8012d78:	4602      	mov	r2, r0
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8012d7e:	f7ff fb3f 	bl	8012400 <read_submessage_list>
 8012d82:	f000 fb89 	bl	8013498 <uxr_millis>
 8012d86:	1b40      	subs	r0, r0, r5
 8012d88:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	dcbc      	bgt.n	8012d0a <wait_session_status+0x42>
 8012d90:	9b03      	ldr	r3, [sp, #12]
 8012d92:	9a04      	ldr	r2, [sp, #16]
 8012d94:	7960      	ldrb	r0, [r4, #5]
 8012d96:	3301      	adds	r3, #1
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	9303      	str	r3, [sp, #12]
 8012d9c:	d001      	beq.n	8012da2 <wait_session_status+0xda>
 8012d9e:	28ff      	cmp	r0, #255	; 0xff
 8012da0:	d0a0      	beq.n	8012ce4 <wait_session_status+0x1c>
 8012da2:	38ff      	subs	r0, #255	; 0xff
 8012da4:	bf18      	it	ne
 8012da6:	2001      	movne	r0, #1
 8012da8:	b01d      	add	sp, #116	; 0x74
 8012daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dae:	4631      	mov	r1, r6
 8012db0:	f104 0008 	add.w	r0, r4, #8
 8012db4:	f000 fb08 	bl	80133c8 <uxr_get_input_reliable_stream>
 8012db8:	4681      	mov	r9, r0
 8012dba:	b338      	cbz	r0, 8012e0c <wait_session_status+0x144>
 8012dbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012dbe:	9205      	str	r2, [sp, #20]
 8012dc0:	a80c      	add	r0, sp, #48	; 0x30
 8012dc2:	f7fe fdad 	bl	8011920 <ucdr_buffer_remaining>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	f10d 001d 	add.w	r0, sp, #29
 8012dcc:	9000      	str	r0, [sp, #0]
 8012dce:	9a05      	ldr	r2, [sp, #20]
 8012dd0:	9902      	ldr	r1, [sp, #8]
 8012dd2:	4648      	mov	r0, r9
 8012dd4:	f005 fb60 	bl	8018498 <uxr_receive_reliable_message>
 8012dd8:	b1c0      	cbz	r0, 8012e0c <wait_session_status+0x144>
 8012dda:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012dde:	b95b      	cbnz	r3, 8012df8 <wait_session_status+0x130>
 8012de0:	e03c      	b.n	8012e5c <wait_session_status+0x194>
 8012de2:	f04f 0302 	mov.w	r3, #2
 8012de6:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012dea:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012dee:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8012df2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012df4:	f7ff fb04 	bl	8012400 <read_submessage_list>
 8012df8:	a914      	add	r1, sp, #80	; 0x50
 8012dfa:	2204      	movs	r2, #4
 8012dfc:	4648      	mov	r0, r9
 8012dfe:	f005 fbcb 	bl	8018598 <uxr_next_input_reliable_buffer_available>
 8012e02:	4603      	mov	r3, r0
 8012e04:	a914      	add	r1, sp, #80	; 0x50
 8012e06:	4620      	mov	r0, r4
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d1ea      	bne.n	8012de2 <wait_session_status+0x11a>
 8012e0c:	4632      	mov	r2, r6
 8012e0e:	4641      	mov	r1, r8
 8012e10:	4620      	mov	r0, r4
 8012e12:	f7ff f973 	bl	80120fc <write_submessage_acknack.isra.0>
 8012e16:	e771      	b.n	8012cfc <wait_session_status+0x34>
 8012e18:	4631      	mov	r1, r6
 8012e1a:	f104 0008 	add.w	r0, r4, #8
 8012e1e:	f000 fac9 	bl	80133b4 <uxr_get_input_best_effort_stream>
 8012e22:	2800      	cmp	r0, #0
 8012e24:	f43f af6a 	beq.w	8012cfc <wait_session_status+0x34>
 8012e28:	9902      	ldr	r1, [sp, #8]
 8012e2a:	f005 fab1 	bl	8018390 <uxr_receive_best_effort_message>
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	f43f af64 	beq.w	8012cfc <wait_session_status+0x34>
 8012e34:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012e38:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012e3c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012e40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e42:	a90c      	add	r1, sp, #48	; 0x30
 8012e44:	4620      	mov	r0, r4
 8012e46:	f7ff fadb 	bl	8012400 <read_submessage_list>
 8012e4a:	e757      	b.n	8012cfc <wait_session_status+0x34>
 8012e4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012e4e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012e52:	47a0      	blx	r4
 8012e54:	2001      	movs	r0, #1
 8012e56:	b01d      	add	sp, #116	; 0x74
 8012e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e5c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012e60:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012e64:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e6a:	a90c      	add	r1, sp, #48	; 0x30
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f7ff fac7 	bl	8012400 <read_submessage_list>
 8012e72:	e7c1      	b.n	8012df8 <wait_session_status+0x130>

08012e74 <uxr_delete_session_retries>:
 8012e74:	b530      	push	{r4, r5, lr}
 8012e76:	b08f      	sub	sp, #60	; 0x3c
 8012e78:	4604      	mov	r4, r0
 8012e7a:	460d      	mov	r5, r1
 8012e7c:	f000 f954 	bl	8013128 <uxr_session_header_offset>
 8012e80:	2300      	movs	r3, #0
 8012e82:	2210      	movs	r2, #16
 8012e84:	9000      	str	r0, [sp, #0]
 8012e86:	a902      	add	r1, sp, #8
 8012e88:	a806      	add	r0, sp, #24
 8012e8a:	f7fe fd07 	bl	801189c <ucdr_init_buffer_origin_offset>
 8012e8e:	a906      	add	r1, sp, #24
 8012e90:	4620      	mov	r0, r4
 8012e92:	f000 f897 	bl	8012fc4 <uxr_buffer_delete_session>
 8012e96:	2200      	movs	r2, #0
 8012e98:	4611      	mov	r1, r2
 8012e9a:	9b06      	ldr	r3, [sp, #24]
 8012e9c:	4620      	mov	r0, r4
 8012e9e:	f000 f8eb 	bl	8013078 <uxr_stamp_session_header>
 8012ea2:	a806      	add	r0, sp, #24
 8012ea4:	f7fe fd38 	bl	8011918 <ucdr_buffer_length>
 8012ea8:	462b      	mov	r3, r5
 8012eaa:	4602      	mov	r2, r0
 8012eac:	a902      	add	r1, sp, #8
 8012eae:	4620      	mov	r0, r4
 8012eb0:	f7ff ff0a 	bl	8012cc8 <wait_session_status>
 8012eb4:	b118      	cbz	r0, 8012ebe <uxr_delete_session_retries+0x4a>
 8012eb6:	7960      	ldrb	r0, [r4, #5]
 8012eb8:	fab0 f080 	clz	r0, r0
 8012ebc:	0940      	lsrs	r0, r0, #5
 8012ebe:	b00f      	add	sp, #60	; 0x3c
 8012ec0:	bd30      	pop	{r4, r5, pc}
 8012ec2:	bf00      	nop

08012ec4 <uxr_prepare_stream_to_write_submessage>:
 8012ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ec8:	b082      	sub	sp, #8
 8012eca:	4682      	mov	sl, r0
 8012ecc:	4610      	mov	r0, r2
 8012ece:	4615      	mov	r5, r2
 8012ed0:	461e      	mov	r6, r3
 8012ed2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8012ed6:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8012eda:	9101      	str	r1, [sp, #4]
 8012edc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012ee0:	f000 fad4 	bl	801348c <uxr_submessage_padding>
 8012ee4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012ee8:	f105 0904 	add.w	r9, r5, #4
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	4481      	add	r9, r0
 8012ef0:	d01d      	beq.n	8012f2e <uxr_prepare_stream_to_write_submessage+0x6a>
 8012ef2:	2b02      	cmp	r3, #2
 8012ef4:	d116      	bne.n	8012f24 <uxr_prepare_stream_to_write_submessage+0x60>
 8012ef6:	4621      	mov	r1, r4
 8012ef8:	f10a 0008 	add.w	r0, sl, #8
 8012efc:	f000 fa4e 	bl	801339c <uxr_get_output_reliable_stream>
 8012f00:	4604      	mov	r4, r0
 8012f02:	b158      	cbz	r0, 8012f1c <uxr_prepare_stream_to_write_submessage+0x58>
 8012f04:	4649      	mov	r1, r9
 8012f06:	4632      	mov	r2, r6
 8012f08:	f005 fcfc 	bl	8018904 <uxr_prepare_reliable_buffer_to_write>
 8012f0c:	4604      	mov	r4, r0
 8012f0e:	b12c      	cbz	r4, 8012f1c <uxr_prepare_stream_to_write_submessage+0x58>
 8012f10:	4643      	mov	r3, r8
 8012f12:	b2aa      	uxth	r2, r5
 8012f14:	4639      	mov	r1, r7
 8012f16:	4630      	mov	r0, r6
 8012f18:	f000 fa78 	bl	801340c <uxr_buffer_submessage_header>
 8012f1c:	4620      	mov	r0, r4
 8012f1e:	b002      	add	sp, #8
 8012f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f24:	2400      	movs	r4, #0
 8012f26:	4620      	mov	r0, r4
 8012f28:	b002      	add	sp, #8
 8012f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f2e:	4621      	mov	r1, r4
 8012f30:	f10a 0008 	add.w	r0, sl, #8
 8012f34:	f000 fa2a 	bl	801338c <uxr_get_output_best_effort_stream>
 8012f38:	4604      	mov	r4, r0
 8012f3a:	2800      	cmp	r0, #0
 8012f3c:	d0ee      	beq.n	8012f1c <uxr_prepare_stream_to_write_submessage+0x58>
 8012f3e:	4649      	mov	r1, r9
 8012f40:	4632      	mov	r2, r6
 8012f42:	f005 fc1b 	bl	801877c <uxr_prepare_best_effort_buffer_to_write>
 8012f46:	4604      	mov	r4, r0
 8012f48:	e7e1      	b.n	8012f0e <uxr_prepare_stream_to_write_submessage+0x4a>
 8012f4a:	bf00      	nop

08012f4c <uxr_init_session_info>:
 8012f4c:	b470      	push	{r4, r5, r6}
 8012f4e:	7102      	strb	r2, [r0, #4]
 8012f50:	0e16      	lsrs	r6, r2, #24
 8012f52:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8012f56:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8012f5a:	23ff      	movs	r3, #255	; 0xff
 8012f5c:	2209      	movs	r2, #9
 8012f5e:	7046      	strb	r6, [r0, #1]
 8012f60:	7085      	strb	r5, [r0, #2]
 8012f62:	70c4      	strb	r4, [r0, #3]
 8012f64:	7001      	strb	r1, [r0, #0]
 8012f66:	bc70      	pop	{r4, r5, r6}
 8012f68:	80c2      	strh	r2, [r0, #6]
 8012f6a:	7143      	strb	r3, [r0, #5]
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop

08012f70 <uxr_buffer_create_session>:
 8012f70:	b570      	push	{r4, r5, r6, lr}
 8012f72:	b088      	sub	sp, #32
 8012f74:	2300      	movs	r3, #0
 8012f76:	4d12      	ldr	r5, [pc, #72]	; (8012fc0 <uxr_buffer_create_session+0x50>)
 8012f78:	9307      	str	r3, [sp, #28]
 8012f7a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012f7e:	7802      	ldrb	r2, [r0, #0]
 8012f80:	9303      	str	r3, [sp, #12]
 8012f82:	460c      	mov	r4, r1
 8012f84:	f88d 200c 	strb.w	r2, [sp, #12]
 8012f88:	2101      	movs	r1, #1
 8012f8a:	682a      	ldr	r2, [r5, #0]
 8012f8c:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8012f90:	88ad      	ldrh	r5, [r5, #4]
 8012f92:	80c1      	strh	r1, [r0, #6]
 8012f94:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012f98:	9200      	str	r2, [sp, #0]
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	2210      	movs	r2, #16
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012fa4:	9306      	str	r3, [sp, #24]
 8012fa6:	f88d 300d 	strb.w	r3, [sp, #13]
 8012faa:	9602      	str	r6, [sp, #8]
 8012fac:	f8ad 5006 	strh.w	r5, [sp, #6]
 8012fb0:	f000 fa2c 	bl	801340c <uxr_buffer_submessage_header>
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	4669      	mov	r1, sp
 8012fb8:	f001 fa50 	bl	801445c <uxr_serialize_CREATE_CLIENT_Payload>
 8012fbc:	b008      	add	sp, #32
 8012fbe:	bd70      	pop	{r4, r5, r6, pc}
 8012fc0:	0801b7f0 	.word	0x0801b7f0

08012fc4 <uxr_buffer_delete_session>:
 8012fc4:	b530      	push	{r4, r5, lr}
 8012fc6:	4b0c      	ldr	r3, [pc, #48]	; (8012ff8 <uxr_buffer_delete_session+0x34>)
 8012fc8:	b083      	sub	sp, #12
 8012fca:	891b      	ldrh	r3, [r3, #8]
 8012fcc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012fd0:	2202      	movs	r2, #2
 8012fd2:	460c      	mov	r4, r1
 8012fd4:	80c2      	strh	r2, [r0, #6]
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	2204      	movs	r2, #4
 8012fda:	4608      	mov	r0, r1
 8012fdc:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012fe0:	2103      	movs	r1, #3
 8012fe2:	f8ad 5004 	strh.w	r5, [sp, #4]
 8012fe6:	f000 fa11 	bl	801340c <uxr_buffer_submessage_header>
 8012fea:	4620      	mov	r0, r4
 8012fec:	a901      	add	r1, sp, #4
 8012fee:	f001 fae3 	bl	80145b8 <uxr_serialize_DELETE_Payload>
 8012ff2:	b003      	add	sp, #12
 8012ff4:	bd30      	pop	{r4, r5, pc}
 8012ff6:	bf00      	nop
 8012ff8:	0801b7f0 	.word	0x0801b7f0

08012ffc <uxr_read_create_session_status>:
 8012ffc:	b510      	push	{r4, lr}
 8012ffe:	b088      	sub	sp, #32
 8013000:	4604      	mov	r4, r0
 8013002:	4608      	mov	r0, r1
 8013004:	a901      	add	r1, sp, #4
 8013006:	f001 fae7 	bl	80145d8 <uxr_deserialize_STATUS_AGENT_Payload>
 801300a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801300e:	7163      	strb	r3, [r4, #5]
 8013010:	b008      	add	sp, #32
 8013012:	bd10      	pop	{r4, pc}

08013014 <uxr_read_delete_session_status>:
 8013014:	b510      	push	{r4, lr}
 8013016:	4604      	mov	r4, r0
 8013018:	b084      	sub	sp, #16
 801301a:	4608      	mov	r0, r1
 801301c:	a902      	add	r1, sp, #8
 801301e:	f001 fb0b 	bl	8014638 <uxr_deserialize_STATUS_Payload>
 8013022:	88e3      	ldrh	r3, [r4, #6]
 8013024:	2b02      	cmp	r3, #2
 8013026:	d001      	beq.n	801302c <uxr_read_delete_session_status+0x18>
 8013028:	b004      	add	sp, #16
 801302a:	bd10      	pop	{r4, pc}
 801302c:	f10d 000a 	add.w	r0, sp, #10
 8013030:	f7fe fec6 	bl	8011dc0 <uxr_object_id_from_raw>
 8013034:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013038:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801303c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013040:	b29b      	uxth	r3, r3
 8013042:	2b02      	cmp	r3, #2
 8013044:	bf04      	itt	eq
 8013046:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801304a:	7163      	strbeq	r3, [r4, #5]
 801304c:	b004      	add	sp, #16
 801304e:	bd10      	pop	{r4, pc}

08013050 <uxr_stamp_create_session_header>:
 8013050:	b510      	push	{r4, lr}
 8013052:	4604      	mov	r4, r0
 8013054:	b08a      	sub	sp, #40	; 0x28
 8013056:	a802      	add	r0, sp, #8
 8013058:	2208      	movs	r2, #8
 801305a:	f7fe fc31 	bl	80118c0 <ucdr_init_buffer>
 801305e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013062:	9400      	str	r4, [sp, #0]
 8013064:	2300      	movs	r3, #0
 8013066:	a802      	add	r0, sp, #8
 8013068:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801306c:	461a      	mov	r2, r3
 801306e:	f000 fbcb 	bl	8013808 <uxr_serialize_message_header>
 8013072:	b00a      	add	sp, #40	; 0x28
 8013074:	bd10      	pop	{r4, pc}
 8013076:	bf00      	nop

08013078 <uxr_stamp_session_header>:
 8013078:	b570      	push	{r4, r5, r6, lr}
 801307a:	4604      	mov	r4, r0
 801307c:	b08c      	sub	sp, #48	; 0x30
 801307e:	460d      	mov	r5, r1
 8013080:	4616      	mov	r6, r2
 8013082:	4619      	mov	r1, r3
 8013084:	a804      	add	r0, sp, #16
 8013086:	2208      	movs	r2, #8
 8013088:	9603      	str	r6, [sp, #12]
 801308a:	f7fe fc19 	bl	80118c0 <ucdr_init_buffer>
 801308e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013092:	9b03      	ldr	r3, [sp, #12]
 8013094:	9400      	str	r4, [sp, #0]
 8013096:	462a      	mov	r2, r5
 8013098:	a804      	add	r0, sp, #16
 801309a:	f000 fbb5 	bl	8013808 <uxr_serialize_message_header>
 801309e:	b00c      	add	sp, #48	; 0x30
 80130a0:	bd70      	pop	{r4, r5, r6, pc}
 80130a2:	bf00      	nop

080130a4 <uxr_read_session_header>:
 80130a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130a8:	4607      	mov	r7, r0
 80130aa:	b084      	sub	sp, #16
 80130ac:	4608      	mov	r0, r1
 80130ae:	460c      	mov	r4, r1
 80130b0:	4615      	mov	r5, r2
 80130b2:	461e      	mov	r6, r3
 80130b4:	f7fe fc34 	bl	8011920 <ucdr_buffer_remaining>
 80130b8:	2808      	cmp	r0, #8
 80130ba:	d803      	bhi.n	80130c4 <uxr_read_session_header+0x20>
 80130bc:	2000      	movs	r0, #0
 80130be:	b004      	add	sp, #16
 80130c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130c4:	f10d 080c 	add.w	r8, sp, #12
 80130c8:	4633      	mov	r3, r6
 80130ca:	462a      	mov	r2, r5
 80130cc:	4620      	mov	r0, r4
 80130ce:	f8cd 8000 	str.w	r8, [sp]
 80130d2:	f10d 010b 	add.w	r1, sp, #11
 80130d6:	f000 fbb5 	bl	8013844 <uxr_deserialize_message_header>
 80130da:	783a      	ldrb	r2, [r7, #0]
 80130dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80130e0:	4293      	cmp	r3, r2
 80130e2:	d1eb      	bne.n	80130bc <uxr_read_session_header+0x18>
 80130e4:	061b      	lsls	r3, r3, #24
 80130e6:	d41c      	bmi.n	8013122 <uxr_read_session_header+0x7e>
 80130e8:	f898 2000 	ldrb.w	r2, [r8]
 80130ec:	787b      	ldrb	r3, [r7, #1]
 80130ee:	429a      	cmp	r2, r3
 80130f0:	d003      	beq.n	80130fa <uxr_read_session_header+0x56>
 80130f2:	2001      	movs	r0, #1
 80130f4:	f080 0001 	eor.w	r0, r0, #1
 80130f8:	e7e1      	b.n	80130be <uxr_read_session_header+0x1a>
 80130fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80130fe:	78bb      	ldrb	r3, [r7, #2]
 8013100:	429a      	cmp	r2, r3
 8013102:	f107 0102 	add.w	r1, r7, #2
 8013106:	d1f4      	bne.n	80130f2 <uxr_read_session_header+0x4e>
 8013108:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801310c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013110:	429a      	cmp	r2, r3
 8013112:	d1ee      	bne.n	80130f2 <uxr_read_session_header+0x4e>
 8013114:	784b      	ldrb	r3, [r1, #1]
 8013116:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801311a:	429a      	cmp	r2, r3
 801311c:	d1e9      	bne.n	80130f2 <uxr_read_session_header+0x4e>
 801311e:	2000      	movs	r0, #0
 8013120:	e7e8      	b.n	80130f4 <uxr_read_session_header+0x50>
 8013122:	2001      	movs	r0, #1
 8013124:	e7cb      	b.n	80130be <uxr_read_session_header+0x1a>
 8013126:	bf00      	nop

08013128 <uxr_session_header_offset>:
 8013128:	f990 3000 	ldrsb.w	r3, [r0]
 801312c:	2b00      	cmp	r3, #0
 801312e:	bfac      	ite	ge
 8013130:	2008      	movge	r0, #8
 8013132:	2004      	movlt	r0, #4
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop

08013138 <uxr_init_base_object_request>:
 8013138:	b530      	push	{r4, r5, lr}
 801313a:	88c3      	ldrh	r3, [r0, #6]
 801313c:	b083      	sub	sp, #12
 801313e:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8013142:	9101      	str	r1, [sp, #4]
 8013144:	f1a3 010a 	sub.w	r1, r3, #10
 8013148:	b289      	uxth	r1, r1
 801314a:	42a1      	cmp	r1, r4
 801314c:	d80e      	bhi.n	801316c <uxr_init_base_object_request+0x34>
 801314e:	3301      	adds	r3, #1
 8013150:	b29c      	uxth	r4, r3
 8013152:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8013156:	b2db      	uxtb	r3, r3
 8013158:	80c4      	strh	r4, [r0, #6]
 801315a:	1c91      	adds	r1, r2, #2
 801315c:	9801      	ldr	r0, [sp, #4]
 801315e:	7015      	strb	r5, [r2, #0]
 8013160:	7053      	strb	r3, [r2, #1]
 8013162:	f7fe fe41 	bl	8011de8 <uxr_object_id_to_raw>
 8013166:	4620      	mov	r0, r4
 8013168:	b003      	add	sp, #12
 801316a:	bd30      	pop	{r4, r5, pc}
 801316c:	230a      	movs	r3, #10
 801316e:	461c      	mov	r4, r3
 8013170:	2500      	movs	r5, #0
 8013172:	e7f1      	b.n	8013158 <uxr_init_base_object_request+0x20>

08013174 <uxr_parse_base_object_request>:
 8013174:	b570      	push	{r4, r5, r6, lr}
 8013176:	4604      	mov	r4, r0
 8013178:	3002      	adds	r0, #2
 801317a:	460d      	mov	r5, r1
 801317c:	4616      	mov	r6, r2
 801317e:	f7fe fe1f 	bl	8011dc0 <uxr_object_id_from_raw>
 8013182:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013186:	8028      	strh	r0, [r5, #0]
 8013188:	806b      	strh	r3, [r5, #2]
 801318a:	7822      	ldrb	r2, [r4, #0]
 801318c:	7863      	ldrb	r3, [r4, #1]
 801318e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013192:	8033      	strh	r3, [r6, #0]
 8013194:	bd70      	pop	{r4, r5, r6, pc}
 8013196:	bf00      	nop

08013198 <uxr_stream_id>:
 8013198:	b410      	push	{r4}
 801319a:	2901      	cmp	r1, #1
 801319c:	b083      	sub	sp, #12
 801319e:	d01f      	beq.n	80131e0 <uxr_stream_id+0x48>
 80131a0:	2902      	cmp	r1, #2
 80131a2:	f04f 0400 	mov.w	r4, #0
 80131a6:	d01e      	beq.n	80131e6 <uxr_stream_id+0x4e>
 80131a8:	2300      	movs	r3, #0
 80131aa:	f364 0307 	bfi	r3, r4, #0, #8
 80131ae:	f360 230f 	bfi	r3, r0, #8, #8
 80131b2:	f361 4317 	bfi	r3, r1, #16, #8
 80131b6:	f362 631f 	bfi	r3, r2, #24, #8
 80131ba:	b2da      	uxtb	r2, r3
 80131bc:	2000      	movs	r0, #0
 80131be:	f362 0007 	bfi	r0, r2, #0, #8
 80131c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80131c6:	f362 200f 	bfi	r0, r2, #8, #8
 80131ca:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80131ce:	f362 4017 	bfi	r0, r2, #16, #8
 80131d2:	0e1b      	lsrs	r3, r3, #24
 80131d4:	f363 601f 	bfi	r0, r3, #24, #8
 80131d8:	b003      	add	sp, #12
 80131da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131de:	4770      	bx	lr
 80131e0:	1c44      	adds	r4, r0, #1
 80131e2:	b2e4      	uxtb	r4, r4
 80131e4:	e7e0      	b.n	80131a8 <uxr_stream_id+0x10>
 80131e6:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 80131ea:	e7dd      	b.n	80131a8 <uxr_stream_id+0x10>

080131ec <uxr_stream_id_from_raw>:
 80131ec:	b410      	push	{r4}
 80131ee:	b083      	sub	sp, #12
 80131f0:	b128      	cbz	r0, 80131fe <uxr_stream_id_from_raw+0x12>
 80131f2:	0603      	lsls	r3, r0, #24
 80131f4:	d421      	bmi.n	801323a <uxr_stream_id_from_raw+0x4e>
 80131f6:	1e42      	subs	r2, r0, #1
 80131f8:	b2d2      	uxtb	r2, r2
 80131fa:	2401      	movs	r4, #1
 80131fc:	e001      	b.n	8013202 <uxr_stream_id_from_raw+0x16>
 80131fe:	4604      	mov	r4, r0
 8013200:	4602      	mov	r2, r0
 8013202:	2300      	movs	r3, #0
 8013204:	f360 0307 	bfi	r3, r0, #0, #8
 8013208:	f362 230f 	bfi	r3, r2, #8, #8
 801320c:	f364 4317 	bfi	r3, r4, #16, #8
 8013210:	f361 631f 	bfi	r3, r1, #24, #8
 8013214:	b2da      	uxtb	r2, r3
 8013216:	2000      	movs	r0, #0
 8013218:	f362 0007 	bfi	r0, r2, #0, #8
 801321c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013220:	f362 200f 	bfi	r0, r2, #8, #8
 8013224:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013228:	f362 4017 	bfi	r0, r2, #16, #8
 801322c:	0e1b      	lsrs	r3, r3, #24
 801322e:	f363 601f 	bfi	r0, r3, #24, #8
 8013232:	b003      	add	sp, #12
 8013234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013238:	4770      	bx	lr
 801323a:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 801323e:	2402      	movs	r4, #2
 8013240:	e7df      	b.n	8013202 <uxr_stream_id_from_raw+0x16>
 8013242:	bf00      	nop

08013244 <uxr_init_stream_storage>:
 8013244:	2300      	movs	r3, #0
 8013246:	7403      	strb	r3, [r0, #16]
 8013248:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 801324c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8013250:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8013254:	4770      	bx	lr
 8013256:	bf00      	nop

08013258 <uxr_reset_stream_storage>:
 8013258:	b570      	push	{r4, r5, r6, lr}
 801325a:	7c03      	ldrb	r3, [r0, #16]
 801325c:	4604      	mov	r4, r0
 801325e:	b153      	cbz	r3, 8013276 <uxr_reset_stream_storage+0x1e>
 8013260:	4606      	mov	r6, r0
 8013262:	2500      	movs	r5, #0
 8013264:	4630      	mov	r0, r6
 8013266:	f005 fa83 	bl	8018770 <uxr_reset_output_best_effort_stream>
 801326a:	7c23      	ldrb	r3, [r4, #16]
 801326c:	3501      	adds	r5, #1
 801326e:	42ab      	cmp	r3, r5
 8013270:	f106 0610 	add.w	r6, r6, #16
 8013274:	d8f6      	bhi.n	8013264 <uxr_reset_stream_storage+0xc>
 8013276:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801327a:	b163      	cbz	r3, 8013296 <uxr_reset_stream_storage+0x3e>
 801327c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013280:	2500      	movs	r5, #0
 8013282:	4630      	mov	r0, r6
 8013284:	f005 f880 	bl	8018388 <uxr_reset_input_best_effort_stream>
 8013288:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801328c:	3501      	adds	r5, #1
 801328e:	42ab      	cmp	r3, r5
 8013290:	f106 0602 	add.w	r6, r6, #2
 8013294:	d8f5      	bhi.n	8013282 <uxr_reset_stream_storage+0x2a>
 8013296:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801329a:	b163      	cbz	r3, 80132b6 <uxr_reset_stream_storage+0x5e>
 801329c:	f104 0618 	add.w	r6, r4, #24
 80132a0:	2500      	movs	r5, #0
 80132a2:	4630      	mov	r0, r6
 80132a4:	f005 fb04 	bl	80188b0 <uxr_reset_output_reliable_stream>
 80132a8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80132ac:	3501      	adds	r5, #1
 80132ae:	42ab      	cmp	r3, r5
 80132b0:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80132b4:	d8f5      	bhi.n	80132a2 <uxr_reset_stream_storage+0x4a>
 80132b6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80132ba:	b163      	cbz	r3, 80132d6 <uxr_reset_stream_storage+0x7e>
 80132bc:	f104 0648 	add.w	r6, r4, #72	; 0x48
 80132c0:	2500      	movs	r5, #0
 80132c2:	4630      	mov	r0, r6
 80132c4:	f005 f8c8 	bl	8018458 <uxr_reset_input_reliable_stream>
 80132c8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80132cc:	3501      	adds	r5, #1
 80132ce:	42ab      	cmp	r3, r5
 80132d0:	f106 0618 	add.w	r6, r6, #24
 80132d4:	d8f5      	bhi.n	80132c2 <uxr_reset_stream_storage+0x6a>
 80132d6:	bd70      	pop	{r4, r5, r6, pc}

080132d8 <uxr_add_output_best_effort_buffer>:
 80132d8:	b530      	push	{r4, r5, lr}
 80132da:	7c04      	ldrb	r4, [r0, #16]
 80132dc:	1c65      	adds	r5, r4, #1
 80132de:	b083      	sub	sp, #12
 80132e0:	7405      	strb	r5, [r0, #16]
 80132e2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80132e6:	f005 fa37 	bl	8018758 <uxr_init_output_best_effort_stream>
 80132ea:	2201      	movs	r2, #1
 80132ec:	4620      	mov	r0, r4
 80132ee:	4611      	mov	r1, r2
 80132f0:	b003      	add	sp, #12
 80132f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132f6:	f7ff bf4f 	b.w	8013198 <uxr_stream_id>
 80132fa:	bf00      	nop

080132fc <uxr_add_output_reliable_buffer>:
 80132fc:	b570      	push	{r4, r5, r6, lr}
 80132fe:	b084      	sub	sp, #16
 8013300:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8013304:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8013308:	9600      	str	r6, [sp, #0]
 801330a:	2528      	movs	r5, #40	; 0x28
 801330c:	1c66      	adds	r6, r4, #1
 801330e:	fb05 0504 	mla	r5, r5, r4, r0
 8013312:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8013316:	f105 0018 	add.w	r0, r5, #24
 801331a:	f005 fa97 	bl	801884c <uxr_init_output_reliable_stream>
 801331e:	4620      	mov	r0, r4
 8013320:	2201      	movs	r2, #1
 8013322:	2102      	movs	r1, #2
 8013324:	b004      	add	sp, #16
 8013326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801332a:	f7ff bf35 	b.w	8013198 <uxr_stream_id>
 801332e:	bf00      	nop

08013330 <uxr_add_input_best_effort_buffer>:
 8013330:	b510      	push	{r4, lr}
 8013332:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8013336:	1c62      	adds	r2, r4, #1
 8013338:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801333c:	b082      	sub	sp, #8
 801333e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8013342:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013346:	f005 f81b 	bl	8018380 <uxr_init_input_best_effort_stream>
 801334a:	4620      	mov	r0, r4
 801334c:	2200      	movs	r2, #0
 801334e:	2101      	movs	r1, #1
 8013350:	b002      	add	sp, #8
 8013352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013356:	f7ff bf1f 	b.w	8013198 <uxr_stream_id>
 801335a:	bf00      	nop

0801335c <uxr_add_input_reliable_buffer>:
 801335c:	b570      	push	{r4, r5, r6, lr}
 801335e:	b084      	sub	sp, #16
 8013360:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8013364:	9e08      	ldr	r6, [sp, #32]
 8013366:	9600      	str	r6, [sp, #0]
 8013368:	2518      	movs	r5, #24
 801336a:	1c66      	adds	r6, r4, #1
 801336c:	fb05 0504 	mla	r5, r5, r4, r0
 8013370:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8013374:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8013378:	f005 f84a 	bl	8018410 <uxr_init_input_reliable_stream>
 801337c:	4620      	mov	r0, r4
 801337e:	2200      	movs	r2, #0
 8013380:	2102      	movs	r1, #2
 8013382:	b004      	add	sp, #16
 8013384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013388:	f7ff bf06 	b.w	8013198 <uxr_stream_id>

0801338c <uxr_get_output_best_effort_stream>:
 801338c:	7c03      	ldrb	r3, [r0, #16]
 801338e:	428b      	cmp	r3, r1
 8013390:	bf8c      	ite	hi
 8013392:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8013396:	2000      	movls	r0, #0
 8013398:	4770      	bx	lr
 801339a:	bf00      	nop

0801339c <uxr_get_output_reliable_stream>:
 801339c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80133a0:	428b      	cmp	r3, r1
 80133a2:	bf83      	ittte	hi
 80133a4:	2328      	movhi	r3, #40	; 0x28
 80133a6:	fb03 0101 	mlahi	r1, r3, r1, r0
 80133aa:	f101 0018 	addhi.w	r0, r1, #24
 80133ae:	2000      	movls	r0, #0
 80133b0:	4770      	bx	lr
 80133b2:	bf00      	nop

080133b4 <uxr_get_input_best_effort_stream>:
 80133b4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80133b8:	428b      	cmp	r3, r1
 80133ba:	bf86      	itte	hi
 80133bc:	3121      	addhi	r1, #33	; 0x21
 80133be:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80133c2:	2000      	movls	r0, #0
 80133c4:	4770      	bx	lr
 80133c6:	bf00      	nop

080133c8 <uxr_get_input_reliable_stream>:
 80133c8:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80133cc:	428b      	cmp	r3, r1
 80133ce:	bf83      	ittte	hi
 80133d0:	2318      	movhi	r3, #24
 80133d2:	fb03 0101 	mlahi	r1, r3, r1, r0
 80133d6:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 80133da:	2000      	movls	r0, #0
 80133dc:	4770      	bx	lr
 80133de:	bf00      	nop

080133e0 <uxr_output_streams_confirmed>:
 80133e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80133e4:	b183      	cbz	r3, 8013408 <uxr_output_streams_confirmed+0x28>
 80133e6:	b570      	push	{r4, r5, r6, lr}
 80133e8:	4606      	mov	r6, r0
 80133ea:	f100 0518 	add.w	r5, r0, #24
 80133ee:	2400      	movs	r4, #0
 80133f0:	e001      	b.n	80133f6 <uxr_output_streams_confirmed+0x16>
 80133f2:	3528      	adds	r5, #40	; 0x28
 80133f4:	b138      	cbz	r0, 8013406 <uxr_output_streams_confirmed+0x26>
 80133f6:	4628      	mov	r0, r5
 80133f8:	f005 fcbe 	bl	8018d78 <uxr_is_output_up_to_date>
 80133fc:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8013400:	3401      	adds	r4, #1
 8013402:	42a3      	cmp	r3, r4
 8013404:	d8f5      	bhi.n	80133f2 <uxr_output_streams_confirmed+0x12>
 8013406:	bd70      	pop	{r4, r5, r6, pc}
 8013408:	2001      	movs	r0, #1
 801340a:	4770      	bx	lr

0801340c <uxr_buffer_submessage_header>:
 801340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801340e:	4604      	mov	r4, r0
 8013410:	460e      	mov	r6, r1
 8013412:	2104      	movs	r1, #4
 8013414:	4615      	mov	r5, r2
 8013416:	461f      	mov	r7, r3
 8013418:	f7fe fa6c 	bl	80118f4 <ucdr_align_to>
 801341c:	2301      	movs	r3, #1
 801341e:	ea47 0203 	orr.w	r2, r7, r3
 8013422:	4631      	mov	r1, r6
 8013424:	7523      	strb	r3, [r4, #20]
 8013426:	4620      	mov	r0, r4
 8013428:	462b      	mov	r3, r5
 801342a:	f000 fa2b 	bl	8013884 <uxr_serialize_submessage_header>
 801342e:	4620      	mov	r0, r4
 8013430:	f7fe fa76 	bl	8011920 <ucdr_buffer_remaining>
 8013434:	42a8      	cmp	r0, r5
 8013436:	bf34      	ite	cc
 8013438:	2000      	movcc	r0, #0
 801343a:	2001      	movcs	r0, #1
 801343c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801343e:	bf00      	nop

08013440 <uxr_read_submessage_header>:
 8013440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013444:	4604      	mov	r4, r0
 8013446:	460d      	mov	r5, r1
 8013448:	2104      	movs	r1, #4
 801344a:	4616      	mov	r6, r2
 801344c:	4698      	mov	r8, r3
 801344e:	f7fe fa51 	bl	80118f4 <ucdr_align_to>
 8013452:	4620      	mov	r0, r4
 8013454:	f7fe fa64 	bl	8011920 <ucdr_buffer_remaining>
 8013458:	2803      	cmp	r0, #3
 801345a:	bf8c      	ite	hi
 801345c:	2701      	movhi	r7, #1
 801345e:	2700      	movls	r7, #0
 8013460:	d802      	bhi.n	8013468 <uxr_read_submessage_header+0x28>
 8013462:	4638      	mov	r0, r7
 8013464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013468:	4633      	mov	r3, r6
 801346a:	4642      	mov	r2, r8
 801346c:	4620      	mov	r0, r4
 801346e:	4629      	mov	r1, r5
 8013470:	f000 fa1c 	bl	80138ac <uxr_deserialize_submessage_header>
 8013474:	f898 3000 	ldrb.w	r3, [r8]
 8013478:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 801347c:	f003 0301 	and.w	r3, r3, #1
 8013480:	f888 2000 	strb.w	r2, [r8]
 8013484:	7523      	strb	r3, [r4, #20]
 8013486:	4638      	mov	r0, r7
 8013488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801348c <uxr_submessage_padding>:
 801348c:	f010 0003 	ands.w	r0, r0, #3
 8013490:	bf18      	it	ne
 8013492:	f1c0 0004 	rsbne	r0, r0, #4
 8013496:	4770      	bx	lr

08013498 <uxr_millis>:
 8013498:	b510      	push	{r4, lr}
 801349a:	b084      	sub	sp, #16
 801349c:	4669      	mov	r1, sp
 801349e:	2001      	movs	r0, #1
 80134a0:	f7f0 f9e2 	bl	8003868 <clock_gettime>
 80134a4:	e9dd 2400 	ldrd	r2, r4, [sp]
 80134a8:	4907      	ldr	r1, [pc, #28]	; (80134c8 <uxr_millis+0x30>)
 80134aa:	9802      	ldr	r0, [sp, #8]
 80134ac:	fba2 2301 	umull	r2, r3, r2, r1
 80134b0:	fb01 3304 	mla	r3, r1, r4, r3
 80134b4:	4604      	mov	r4, r0
 80134b6:	1810      	adds	r0, r2, r0
 80134b8:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 80134bc:	4a03      	ldr	r2, [pc, #12]	; (80134cc <uxr_millis+0x34>)
 80134be:	2300      	movs	r3, #0
 80134c0:	f7ed fb9c 	bl	8000bfc <__aeabi_ldivmod>
 80134c4:	b004      	add	sp, #16
 80134c6:	bd10      	pop	{r4, pc}
 80134c8:	3b9aca00 	.word	0x3b9aca00
 80134cc:	000f4240 	.word	0x000f4240

080134d0 <uxr_nanos>:
 80134d0:	b510      	push	{r4, lr}
 80134d2:	b084      	sub	sp, #16
 80134d4:	4669      	mov	r1, sp
 80134d6:	2001      	movs	r0, #1
 80134d8:	f7f0 f9c6 	bl	8003868 <clock_gettime>
 80134dc:	e9dd 2400 	ldrd	r2, r4, [sp]
 80134e0:	4905      	ldr	r1, [pc, #20]	; (80134f8 <uxr_nanos+0x28>)
 80134e2:	9802      	ldr	r0, [sp, #8]
 80134e4:	fba2 2301 	umull	r2, r3, r2, r1
 80134e8:	fb01 3304 	mla	r3, r1, r4, r3
 80134ec:	4604      	mov	r4, r0
 80134ee:	1810      	adds	r0, r2, r0
 80134f0:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 80134f4:	b004      	add	sp, #16
 80134f6:	bd10      	pop	{r4, pc}
 80134f8:	3b9aca00 	.word	0x3b9aca00

080134fc <on_full_output_buffer_fragmented>:
 80134fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013500:	460c      	mov	r4, r1
 8013502:	b08a      	sub	sp, #40	; 0x28
 8013504:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8013508:	4606      	mov	r6, r0
 801350a:	f104 0008 	add.w	r0, r4, #8
 801350e:	f7ff ff45 	bl	801339c <uxr_get_output_reliable_stream>
 8013512:	4605      	mov	r5, r0
 8013514:	f005 fc3a 	bl	8018d8c <get_available_free_slots>
 8013518:	b968      	cbnz	r0, 8013536 <on_full_output_buffer_fragmented+0x3a>
 801351a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801351e:	4620      	mov	r0, r4
 8013520:	4798      	blx	r3
 8013522:	b918      	cbnz	r0, 801352c <on_full_output_buffer_fragmented+0x30>
 8013524:	2001      	movs	r0, #1
 8013526:	b00a      	add	sp, #40	; 0x28
 8013528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801352c:	4628      	mov	r0, r5
 801352e:	f005 fc2d 	bl	8018d8c <get_available_free_slots>
 8013532:	2800      	cmp	r0, #0
 8013534:	d0f6      	beq.n	8013524 <on_full_output_buffer_fragmented+0x28>
 8013536:	8928      	ldrh	r0, [r5, #8]
 8013538:	89eb      	ldrh	r3, [r5, #14]
 801353a:	7b2a      	ldrb	r2, [r5, #12]
 801353c:	fbb3 f1f0 	udiv	r1, r3, r0
 8013540:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 8013544:	fb00 3111 	mls	r1, r0, r1, r3
 8013548:	b28b      	uxth	r3, r1
 801354a:	32fc      	adds	r2, #252	; 0xfc
 801354c:	6869      	ldr	r1, [r5, #4]
 801354e:	fbb1 f1f0 	udiv	r1, r1, r0
 8013552:	1f0f      	subs	r7, r1, #4
 8013554:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8013558:	fb01 f103 	mul.w	r1, r1, r3
 801355c:	443a      	add	r2, r7
 801355e:	682b      	ldr	r3, [r5, #0]
 8013560:	fa1f f882 	uxth.w	r8, r2
 8013564:	3104      	adds	r1, #4
 8013566:	4419      	add	r1, r3
 8013568:	eba0 0008 	sub.w	r0, r0, r8
 801356c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8013570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013574:	9300      	str	r3, [sp, #0]
 8013576:	463a      	mov	r2, r7
 8013578:	2300      	movs	r3, #0
 801357a:	a802      	add	r0, sp, #8
 801357c:	f7fe f98e 	bl	801189c <ucdr_init_buffer_origin_offset>
 8013580:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8013584:	f102 0308 	add.w	r3, r2, #8
 8013588:	42bb      	cmp	r3, r7
 801358a:	d927      	bls.n	80135dc <on_full_output_buffer_fragmented+0xe0>
 801358c:	4642      	mov	r2, r8
 801358e:	2300      	movs	r3, #0
 8013590:	210d      	movs	r1, #13
 8013592:	a802      	add	r0, sp, #8
 8013594:	f7ff ff3a 	bl	801340c <uxr_buffer_submessage_header>
 8013598:	8928      	ldrh	r0, [r5, #8]
 801359a:	89eb      	ldrh	r3, [r5, #14]
 801359c:	fbb3 f1f0 	udiv	r1, r3, r0
 80135a0:	fb00 3111 	mls	r1, r0, r1, r3
 80135a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80135a8:	b289      	uxth	r1, r1
 80135aa:	fbb3 f3f0 	udiv	r3, r3, r0
 80135ae:	fb03 f301 	mul.w	r3, r3, r1
 80135b2:	50d7      	str	r7, [r2, r3]
 80135b4:	89e8      	ldrh	r0, [r5, #14]
 80135b6:	2101      	movs	r1, #1
 80135b8:	f005 fc08 	bl	8018dcc <uxr_seq_num_add>
 80135bc:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80135c0:	81e8      	strh	r0, [r5, #14]
 80135c2:	1a52      	subs	r2, r2, r1
 80135c4:	4630      	mov	r0, r6
 80135c6:	f7fe f97b 	bl	80118c0 <ucdr_init_buffer>
 80135ca:	4630      	mov	r0, r6
 80135cc:	490f      	ldr	r1, [pc, #60]	; (801360c <on_full_output_buffer_fragmented+0x110>)
 80135ce:	4622      	mov	r2, r4
 80135d0:	f7fe f94c 	bl	801186c <ucdr_set_on_full_buffer_callback>
 80135d4:	2000      	movs	r0, #0
 80135d6:	b00a      	add	sp, #40	; 0x28
 80135d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135dc:	b292      	uxth	r2, r2
 80135de:	2302      	movs	r3, #2
 80135e0:	210d      	movs	r1, #13
 80135e2:	a802      	add	r0, sp, #8
 80135e4:	f7ff ff12 	bl	801340c <uxr_buffer_submessage_header>
 80135e8:	8928      	ldrh	r0, [r5, #8]
 80135ea:	89eb      	ldrh	r3, [r5, #14]
 80135ec:	fbb3 f2f0 	udiv	r2, r3, r0
 80135f0:	fb00 3212 	mls	r2, r0, r2, r3
 80135f4:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80135f8:	686b      	ldr	r3, [r5, #4]
 80135fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80135fe:	b292      	uxth	r2, r2
 8013600:	6828      	ldr	r0, [r5, #0]
 8013602:	fb03 f302 	mul.w	r3, r3, r2
 8013606:	3108      	adds	r1, #8
 8013608:	50c1      	str	r1, [r0, r3]
 801360a:	e7d3      	b.n	80135b4 <on_full_output_buffer_fragmented+0xb8>
 801360c:	080134fd 	.word	0x080134fd

08013610 <uxr_prepare_output_stream>:
 8013610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013612:	b087      	sub	sp, #28
 8013614:	2407      	movs	r4, #7
 8013616:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013618:	9202      	str	r2, [sp, #8]
 801361a:	2500      	movs	r5, #0
 801361c:	1d32      	adds	r2, r6, #4
 801361e:	e9cd 4500 	strd	r4, r5, [sp]
 8013622:	9103      	str	r1, [sp, #12]
 8013624:	461c      	mov	r4, r3
 8013626:	4606      	mov	r6, r0
 8013628:	f7ff fc4c 	bl	8012ec4 <uxr_prepare_stream_to_write_submessage>
 801362c:	f080 0201 	eor.w	r2, r0, #1
 8013630:	b2d2      	uxtb	r2, r2
 8013632:	75a2      	strb	r2, [r4, #22]
 8013634:	b112      	cbz	r2, 801363c <uxr_prepare_output_stream+0x2c>
 8013636:	4628      	mov	r0, r5
 8013638:	b007      	add	sp, #28
 801363a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801363c:	aa05      	add	r2, sp, #20
 801363e:	9902      	ldr	r1, [sp, #8]
 8013640:	4630      	mov	r0, r6
 8013642:	f7ff fd79 	bl	8013138 <uxr_init_base_object_request>
 8013646:	a905      	add	r1, sp, #20
 8013648:	4605      	mov	r5, r0
 801364a:	4620      	mov	r0, r4
 801364c:	f001 f872 	bl	8014734 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013650:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013654:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8013658:	1a52      	subs	r2, r2, r1
 801365a:	4620      	mov	r0, r4
 801365c:	f7fe f930 	bl	80118c0 <ucdr_init_buffer>
 8013660:	4620      	mov	r0, r4
 8013662:	463a      	mov	r2, r7
 8013664:	4631      	mov	r1, r6
 8013666:	f7fe f901 	bl	801186c <ucdr_set_on_full_buffer_callback>
 801366a:	4628      	mov	r0, r5
 801366c:	b007      	add	sp, #28
 801366e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013670 <uxr_prepare_output_stream_fragmented>:
 8013670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013674:	b093      	sub	sp, #76	; 0x4c
 8013676:	4605      	mov	r5, r0
 8013678:	9107      	str	r1, [sp, #28]
 801367a:	3008      	adds	r0, #8
 801367c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013680:	9303      	str	r3, [sp, #12]
 8013682:	9206      	str	r2, [sp, #24]
 8013684:	f7ff fe8a 	bl	801339c <uxr_get_output_reliable_stream>
 8013688:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801368c:	2b01      	cmp	r3, #1
 801368e:	f000 8094 	beq.w	80137ba <uxr_prepare_output_stream_fragmented+0x14a>
 8013692:	4604      	mov	r4, r0
 8013694:	2800      	cmp	r0, #0
 8013696:	f000 8090 	beq.w	80137ba <uxr_prepare_output_stream_fragmented+0x14a>
 801369a:	f005 fb77 	bl	8018d8c <get_available_free_slots>
 801369e:	2800      	cmp	r0, #0
 80136a0:	f000 8086 	beq.w	80137b0 <uxr_prepare_output_stream_fragmented+0x140>
 80136a4:	8922      	ldrh	r2, [r4, #8]
 80136a6:	89e7      	ldrh	r7, [r4, #14]
 80136a8:	fbb7 f8f2 	udiv	r8, r7, r2
 80136ac:	e9d4 3100 	ldrd	r3, r1, [r4]
 80136b0:	fb02 7818 	mls	r8, r2, r8, r7
 80136b4:	fa1f f888 	uxth.w	r8, r8
 80136b8:	fbb1 f2f2 	udiv	r2, r1, r2
 80136bc:	fb02 f808 	mul.w	r8, r2, r8
 80136c0:	f108 0804 	add.w	r8, r8, #4
 80136c4:	4498      	add	r8, r3
 80136c6:	7b23      	ldrb	r3, [r4, #12]
 80136c8:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80136cc:	9204      	str	r2, [sp, #16]
 80136ce:	4553      	cmp	r3, sl
 80136d0:	f1a2 0b04 	sub.w	fp, r2, #4
 80136d4:	d37d      	bcc.n	80137d2 <uxr_prepare_output_stream_fragmented+0x162>
 80136d6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80136d8:	f8cd a000 	str.w	sl, [sp]
 80136dc:	f1ab 0904 	sub.w	r9, fp, #4
 80136e0:	eba9 0903 	sub.w	r9, r9, r3
 80136e4:	3608      	adds	r6, #8
 80136e6:	a80a      	add	r0, sp, #40	; 0x28
 80136e8:	2300      	movs	r3, #0
 80136ea:	465a      	mov	r2, fp
 80136ec:	4641      	mov	r1, r8
 80136ee:	fa1f f989 	uxth.w	r9, r9
 80136f2:	9605      	str	r6, [sp, #20]
 80136f4:	f7fe f8d2 	bl	801189c <ucdr_init_buffer_origin_offset>
 80136f8:	455e      	cmp	r6, fp
 80136fa:	bf34      	ite	cc
 80136fc:	2302      	movcc	r3, #2
 80136fe:	2300      	movcs	r3, #0
 8013700:	464a      	mov	r2, r9
 8013702:	210d      	movs	r1, #13
 8013704:	a80a      	add	r0, sp, #40	; 0x28
 8013706:	f7ff fe81 	bl	801340c <uxr_buffer_submessage_header>
 801370a:	8920      	ldrh	r0, [r4, #8]
 801370c:	fbb7 f3f0 	udiv	r3, r7, r0
 8013710:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013714:	fb00 7313 	mls	r3, r0, r3, r7
 8013718:	b29b      	uxth	r3, r3
 801371a:	fbb1 f1f0 	udiv	r1, r1, r0
 801371e:	fb03 f301 	mul.w	r3, r3, r1
 8013722:	4638      	mov	r0, r7
 8013724:	f842 b003 	str.w	fp, [r2, r3]
 8013728:	2101      	movs	r1, #1
 801372a:	f005 fb4f 	bl	8018dcc <uxr_seq_num_add>
 801372e:	9b04      	ldr	r3, [sp, #16]
 8013730:	9e03      	ldr	r6, [sp, #12]
 8013732:	f1a3 0208 	sub.w	r2, r3, #8
 8013736:	f10a 0104 	add.w	r1, sl, #4
 801373a:	4607      	mov	r7, r0
 801373c:	eba2 020a 	sub.w	r2, r2, sl
 8013740:	4441      	add	r1, r8
 8013742:	4630      	mov	r0, r6
 8013744:	f7fe f8bc 	bl	80118c0 <ucdr_init_buffer>
 8013748:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801374a:	81e7      	strh	r7, [r4, #14]
 801374c:	1d1a      	adds	r2, r3, #4
 801374e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8013752:	bf28      	it	cs
 8013754:	2200      	movcs	r2, #0
 8013756:	b292      	uxth	r2, r2
 8013758:	2300      	movs	r3, #0
 801375a:	2107      	movs	r1, #7
 801375c:	4630      	mov	r0, r6
 801375e:	f7ff fe55 	bl	801340c <uxr_buffer_submessage_header>
 8013762:	9906      	ldr	r1, [sp, #24]
 8013764:	aa09      	add	r2, sp, #36	; 0x24
 8013766:	4628      	mov	r0, r5
 8013768:	f7ff fce6 	bl	8013138 <uxr_init_base_object_request>
 801376c:	4604      	mov	r4, r0
 801376e:	b328      	cbz	r0, 80137bc <uxr_prepare_output_stream_fragmented+0x14c>
 8013770:	9e03      	ldr	r6, [sp, #12]
 8013772:	a909      	add	r1, sp, #36	; 0x24
 8013774:	4630      	mov	r0, r6
 8013776:	f000 ffdd 	bl	8014734 <uxr_serialize_WRITE_DATA_Payload_Data>
 801377a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801377e:	4630      	mov	r0, r6
 8013780:	1a52      	subs	r2, r2, r1
 8013782:	f7fe f89d 	bl	80118c0 <ucdr_init_buffer>
 8013786:	9a05      	ldr	r2, [sp, #20]
 8013788:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 801378c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801378e:	9b07      	ldr	r3, [sp, #28]
 8013790:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 8013794:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013796:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 801379a:	4630      	mov	r0, r6
 801379c:	4919      	ldr	r1, [pc, #100]	; (8013804 <uxr_prepare_output_stream_fragmented+0x194>)
 801379e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80137a2:	462a      	mov	r2, r5
 80137a4:	f7fe f862 	bl	801186c <ucdr_set_on_full_buffer_callback>
 80137a8:	4620      	mov	r0, r4
 80137aa:	b013      	add	sp, #76	; 0x4c
 80137ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80137b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80137b4:	4628      	mov	r0, r5
 80137b6:	4798      	blx	r3
 80137b8:	b920      	cbnz	r0, 80137c4 <uxr_prepare_output_stream_fragmented+0x154>
 80137ba:	2400      	movs	r4, #0
 80137bc:	4620      	mov	r0, r4
 80137be:	b013      	add	sp, #76	; 0x4c
 80137c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c4:	4620      	mov	r0, r4
 80137c6:	f005 fae1 	bl	8018d8c <get_available_free_slots>
 80137ca:	2800      	cmp	r0, #0
 80137cc:	f47f af6a 	bne.w	80136a4 <uxr_prepare_output_stream_fragmented+0x34>
 80137d0:	e7f3      	b.n	80137ba <uxr_prepare_output_stream_fragmented+0x14a>
 80137d2:	4638      	mov	r0, r7
 80137d4:	2101      	movs	r1, #1
 80137d6:	f005 faf9 	bl	8018dcc <uxr_seq_num_add>
 80137da:	8922      	ldrh	r2, [r4, #8]
 80137dc:	fbb0 f8f2 	udiv	r8, r0, r2
 80137e0:	fb02 0818 	mls	r8, r2, r8, r0
 80137e4:	fa1f f888 	uxth.w	r8, r8
 80137e8:	6863      	ldr	r3, [r4, #4]
 80137ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80137ee:	6822      	ldr	r2, [r4, #0]
 80137f0:	fb08 f803 	mul.w	r8, r8, r3
 80137f4:	f108 0804 	add.w	r8, r8, #4
 80137f8:	4490      	add	r8, r2
 80137fa:	7b23      	ldrb	r3, [r4, #12]
 80137fc:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8013800:	4607      	mov	r7, r0
 8013802:	e768      	b.n	80136d6 <uxr_prepare_output_stream_fragmented+0x66>
 8013804:	080134fd 	.word	0x080134fd

08013808 <uxr_serialize_message_header>:
 8013808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801380a:	b083      	sub	sp, #12
 801380c:	4616      	mov	r6, r2
 801380e:	4604      	mov	r4, r0
 8013810:	9301      	str	r3, [sp, #4]
 8013812:	460d      	mov	r5, r1
 8013814:	9f08      	ldr	r7, [sp, #32]
 8013816:	f7fd f8a9 	bl	801096c <ucdr_serialize_uint8_t>
 801381a:	4631      	mov	r1, r6
 801381c:	4620      	mov	r0, r4
 801381e:	f7fd f8a5 	bl	801096c <ucdr_serialize_uint8_t>
 8013822:	9a01      	ldr	r2, [sp, #4]
 8013824:	4620      	mov	r0, r4
 8013826:	2101      	movs	r1, #1
 8013828:	f7fd f94c 	bl	8010ac4 <ucdr_serialize_endian_uint16_t>
 801382c:	062b      	lsls	r3, r5, #24
 801382e:	d501      	bpl.n	8013834 <uxr_serialize_message_header+0x2c>
 8013830:	b003      	add	sp, #12
 8013832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013834:	4639      	mov	r1, r7
 8013836:	4620      	mov	r0, r4
 8013838:	2204      	movs	r2, #4
 801383a:	b003      	add	sp, #12
 801383c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013840:	f004 bba6 	b.w	8017f90 <ucdr_serialize_array_uint8_t>

08013844 <uxr_deserialize_message_header>:
 8013844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013846:	b083      	sub	sp, #12
 8013848:	4616      	mov	r6, r2
 801384a:	4604      	mov	r4, r0
 801384c:	9301      	str	r3, [sp, #4]
 801384e:	460d      	mov	r5, r1
 8013850:	9f08      	ldr	r7, [sp, #32]
 8013852:	f7fd f8a1 	bl	8010998 <ucdr_deserialize_uint8_t>
 8013856:	4631      	mov	r1, r6
 8013858:	4620      	mov	r0, r4
 801385a:	f7fd f89d 	bl	8010998 <ucdr_deserialize_uint8_t>
 801385e:	9a01      	ldr	r2, [sp, #4]
 8013860:	4620      	mov	r0, r4
 8013862:	2101      	movs	r1, #1
 8013864:	f7fd fa22 	bl	8010cac <ucdr_deserialize_endian_uint16_t>
 8013868:	f995 3000 	ldrsb.w	r3, [r5]
 801386c:	2b00      	cmp	r3, #0
 801386e:	da01      	bge.n	8013874 <uxr_deserialize_message_header+0x30>
 8013870:	b003      	add	sp, #12
 8013872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013874:	4639      	mov	r1, r7
 8013876:	4620      	mov	r0, r4
 8013878:	2204      	movs	r2, #4
 801387a:	b003      	add	sp, #12
 801387c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013880:	f004 bbea 	b.w	8018058 <ucdr_deserialize_array_uint8_t>

08013884 <uxr_serialize_submessage_header>:
 8013884:	b530      	push	{r4, r5, lr}
 8013886:	b083      	sub	sp, #12
 8013888:	4615      	mov	r5, r2
 801388a:	4604      	mov	r4, r0
 801388c:	9301      	str	r3, [sp, #4]
 801388e:	f7fd f86d 	bl	801096c <ucdr_serialize_uint8_t>
 8013892:	4629      	mov	r1, r5
 8013894:	4620      	mov	r0, r4
 8013896:	f7fd f869 	bl	801096c <ucdr_serialize_uint8_t>
 801389a:	9a01      	ldr	r2, [sp, #4]
 801389c:	4620      	mov	r0, r4
 801389e:	2101      	movs	r1, #1
 80138a0:	b003      	add	sp, #12
 80138a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138a6:	f7fd b90d 	b.w	8010ac4 <ucdr_serialize_endian_uint16_t>
 80138aa:	bf00      	nop

080138ac <uxr_deserialize_submessage_header>:
 80138ac:	b530      	push	{r4, r5, lr}
 80138ae:	b083      	sub	sp, #12
 80138b0:	4615      	mov	r5, r2
 80138b2:	4604      	mov	r4, r0
 80138b4:	9301      	str	r3, [sp, #4]
 80138b6:	f7fd f86f 	bl	8010998 <ucdr_deserialize_uint8_t>
 80138ba:	4629      	mov	r1, r5
 80138bc:	4620      	mov	r0, r4
 80138be:	f7fd f86b 	bl	8010998 <ucdr_deserialize_uint8_t>
 80138c2:	9a01      	ldr	r2, [sp, #4]
 80138c4:	4620      	mov	r0, r4
 80138c6:	2101      	movs	r1, #1
 80138c8:	b003      	add	sp, #12
 80138ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138ce:	f7fd b9ed 	b.w	8010cac <ucdr_deserialize_endian_uint16_t>
 80138d2:	bf00      	nop

080138d4 <uxr_serialize_CLIENT_Representation>:
 80138d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138d8:	2204      	movs	r2, #4
 80138da:	460c      	mov	r4, r1
 80138dc:	4605      	mov	r5, r0
 80138de:	f004 fb57 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 80138e2:	1d21      	adds	r1, r4, #4
 80138e4:	4607      	mov	r7, r0
 80138e6:	2202      	movs	r2, #2
 80138e8:	4628      	mov	r0, r5
 80138ea:	f004 fb51 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 80138ee:	1da1      	adds	r1, r4, #6
 80138f0:	4007      	ands	r7, r0
 80138f2:	2202      	movs	r2, #2
 80138f4:	4628      	mov	r0, r5
 80138f6:	f004 fb4b 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 80138fa:	fa5f f887 	uxtb.w	r8, r7
 80138fe:	2204      	movs	r2, #4
 8013900:	4607      	mov	r7, r0
 8013902:	f104 0108 	add.w	r1, r4, #8
 8013906:	4628      	mov	r0, r5
 8013908:	f004 fb42 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 801390c:	ea08 0707 	and.w	r7, r8, r7
 8013910:	7b21      	ldrb	r1, [r4, #12]
 8013912:	4680      	mov	r8, r0
 8013914:	4628      	mov	r0, r5
 8013916:	f7fd f829 	bl	801096c <ucdr_serialize_uint8_t>
 801391a:	ea08 0807 	and.w	r8, r8, r7
 801391e:	7b61      	ldrb	r1, [r4, #13]
 8013920:	4607      	mov	r7, r0
 8013922:	4628      	mov	r0, r5
 8013924:	f7fc fff2 	bl	801090c <ucdr_serialize_bool>
 8013928:	7b63      	ldrb	r3, [r4, #13]
 801392a:	ea08 0707 	and.w	r7, r8, r7
 801392e:	ea07 0600 	and.w	r6, r7, r0
 8013932:	b933      	cbnz	r3, 8013942 <uxr_serialize_CLIENT_Representation+0x6e>
 8013934:	8ba1      	ldrh	r1, [r4, #28]
 8013936:	4628      	mov	r0, r5
 8013938:	f7fd f844 	bl	80109c4 <ucdr_serialize_uint16_t>
 801393c:	4030      	ands	r0, r6
 801393e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013942:	6921      	ldr	r1, [r4, #16]
 8013944:	4628      	mov	r0, r5
 8013946:	f7fd fa27 	bl	8010d98 <ucdr_serialize_uint32_t>
 801394a:	6923      	ldr	r3, [r4, #16]
 801394c:	b1cb      	cbz	r3, 8013982 <uxr_serialize_CLIENT_Representation+0xae>
 801394e:	b1d0      	cbz	r0, 8013986 <uxr_serialize_CLIENT_Representation+0xb2>
 8013950:	46a0      	mov	r8, r4
 8013952:	f04f 0900 	mov.w	r9, #0
 8013956:	e002      	b.n	801395e <uxr_serialize_CLIENT_Representation+0x8a>
 8013958:	f108 0808 	add.w	r8, r8, #8
 801395c:	b198      	cbz	r0, 8013986 <uxr_serialize_CLIENT_Representation+0xb2>
 801395e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013962:	4628      	mov	r0, r5
 8013964:	f004 fc34 	bl	80181d0 <ucdr_serialize_string>
 8013968:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801396c:	4607      	mov	r7, r0
 801396e:	4628      	mov	r0, r5
 8013970:	f004 fc2e 	bl	80181d0 <ucdr_serialize_string>
 8013974:	6923      	ldr	r3, [r4, #16]
 8013976:	f109 0901 	add.w	r9, r9, #1
 801397a:	4038      	ands	r0, r7
 801397c:	4599      	cmp	r9, r3
 801397e:	b2c0      	uxtb	r0, r0
 8013980:	d3ea      	bcc.n	8013958 <uxr_serialize_CLIENT_Representation+0x84>
 8013982:	4006      	ands	r6, r0
 8013984:	e7d6      	b.n	8013934 <uxr_serialize_CLIENT_Representation+0x60>
 8013986:	2600      	movs	r6, #0
 8013988:	e7d4      	b.n	8013934 <uxr_serialize_CLIENT_Representation+0x60>
 801398a:	bf00      	nop

0801398c <uxr_deserialize_CLIENT_Representation>:
 801398c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013990:	2204      	movs	r2, #4
 8013992:	460c      	mov	r4, r1
 8013994:	4605      	mov	r5, r0
 8013996:	f004 fb5f 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 801399a:	1d21      	adds	r1, r4, #4
 801399c:	4607      	mov	r7, r0
 801399e:	2202      	movs	r2, #2
 80139a0:	4628      	mov	r0, r5
 80139a2:	f004 fb59 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80139a6:	1da1      	adds	r1, r4, #6
 80139a8:	4007      	ands	r7, r0
 80139aa:	2202      	movs	r2, #2
 80139ac:	4628      	mov	r0, r5
 80139ae:	f004 fb53 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80139b2:	fa5f f887 	uxtb.w	r8, r7
 80139b6:	2204      	movs	r2, #4
 80139b8:	4607      	mov	r7, r0
 80139ba:	f104 0108 	add.w	r1, r4, #8
 80139be:	4628      	mov	r0, r5
 80139c0:	f004 fb4a 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80139c4:	ea08 0707 	and.w	r7, r8, r7
 80139c8:	f104 010c 	add.w	r1, r4, #12
 80139cc:	4680      	mov	r8, r0
 80139ce:	4628      	mov	r0, r5
 80139d0:	f7fc ffe2 	bl	8010998 <ucdr_deserialize_uint8_t>
 80139d4:	ea08 0807 	and.w	r8, r8, r7
 80139d8:	f104 010d 	add.w	r1, r4, #13
 80139dc:	4607      	mov	r7, r0
 80139de:	4628      	mov	r0, r5
 80139e0:	f7fc ffaa 	bl	8010938 <ucdr_deserialize_bool>
 80139e4:	7b63      	ldrb	r3, [r4, #13]
 80139e6:	ea08 0707 	and.w	r7, r8, r7
 80139ea:	ea07 0600 	and.w	r6, r7, r0
 80139ee:	b93b      	cbnz	r3, 8013a00 <uxr_deserialize_CLIENT_Representation+0x74>
 80139f0:	f104 011c 	add.w	r1, r4, #28
 80139f4:	4628      	mov	r0, r5
 80139f6:	f7fd f8e5 	bl	8010bc4 <ucdr_deserialize_uint16_t>
 80139fa:	4030      	ands	r0, r6
 80139fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a00:	f104 0110 	add.w	r1, r4, #16
 8013a04:	4628      	mov	r0, r5
 8013a06:	f7fd faf7 	bl	8010ff8 <ucdr_deserialize_uint32_t>
 8013a0a:	6923      	ldr	r3, [r4, #16]
 8013a0c:	2b01      	cmp	r3, #1
 8013a0e:	d903      	bls.n	8013a18 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013a10:	2301      	movs	r3, #1
 8013a12:	75ab      	strb	r3, [r5, #22]
 8013a14:	2600      	movs	r6, #0
 8013a16:	e7eb      	b.n	80139f0 <uxr_deserialize_CLIENT_Representation+0x64>
 8013a18:	b1fb      	cbz	r3, 8013a5a <uxr_deserialize_CLIENT_Representation+0xce>
 8013a1a:	2800      	cmp	r0, #0
 8013a1c:	d0fa      	beq.n	8013a14 <uxr_deserialize_CLIENT_Representation+0x88>
 8013a1e:	46a0      	mov	r8, r4
 8013a20:	f04f 0900 	mov.w	r9, #0
 8013a24:	e003      	b.n	8013a2e <uxr_deserialize_CLIENT_Representation+0xa2>
 8013a26:	f108 0808 	add.w	r8, r8, #8
 8013a2a:	2800      	cmp	r0, #0
 8013a2c:	d0f2      	beq.n	8013a14 <uxr_deserialize_CLIENT_Representation+0x88>
 8013a2e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a36:	4628      	mov	r0, r5
 8013a38:	f004 fbda 	bl	80181f0 <ucdr_deserialize_string>
 8013a3c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013a40:	4607      	mov	r7, r0
 8013a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a46:	4628      	mov	r0, r5
 8013a48:	f004 fbd2 	bl	80181f0 <ucdr_deserialize_string>
 8013a4c:	6923      	ldr	r3, [r4, #16]
 8013a4e:	f109 0901 	add.w	r9, r9, #1
 8013a52:	4038      	ands	r0, r7
 8013a54:	4599      	cmp	r9, r3
 8013a56:	b2c0      	uxtb	r0, r0
 8013a58:	d3e5      	bcc.n	8013a26 <uxr_deserialize_CLIENT_Representation+0x9a>
 8013a5a:	4006      	ands	r6, r0
 8013a5c:	e7c8      	b.n	80139f0 <uxr_deserialize_CLIENT_Representation+0x64>
 8013a5e:	bf00      	nop

08013a60 <uxr_serialize_AGENT_Representation>:
 8013a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a64:	2204      	movs	r2, #4
 8013a66:	460c      	mov	r4, r1
 8013a68:	4605      	mov	r5, r0
 8013a6a:	f004 fa91 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 8013a6e:	1d21      	adds	r1, r4, #4
 8013a70:	4606      	mov	r6, r0
 8013a72:	2202      	movs	r2, #2
 8013a74:	4628      	mov	r0, r5
 8013a76:	f004 fa8b 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 8013a7a:	1da1      	adds	r1, r4, #6
 8013a7c:	4006      	ands	r6, r0
 8013a7e:	2202      	movs	r2, #2
 8013a80:	4628      	mov	r0, r5
 8013a82:	f004 fa85 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 8013a86:	b2f6      	uxtb	r6, r6
 8013a88:	4603      	mov	r3, r0
 8013a8a:	7a21      	ldrb	r1, [r4, #8]
 8013a8c:	4628      	mov	r0, r5
 8013a8e:	401e      	ands	r6, r3
 8013a90:	f7fc ff3c 	bl	801090c <ucdr_serialize_bool>
 8013a94:	7a23      	ldrb	r3, [r4, #8]
 8013a96:	ea00 0706 	and.w	r7, r0, r6
 8013a9a:	b913      	cbnz	r3, 8013aa2 <uxr_serialize_AGENT_Representation+0x42>
 8013a9c:	4638      	mov	r0, r7
 8013a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013aa2:	68e1      	ldr	r1, [r4, #12]
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	f7fd f977 	bl	8010d98 <ucdr_serialize_uint32_t>
 8013aaa:	68e3      	ldr	r3, [r4, #12]
 8013aac:	b313      	cbz	r3, 8013af4 <uxr_serialize_AGENT_Representation+0x94>
 8013aae:	b1e8      	cbz	r0, 8013aec <uxr_serialize_AGENT_Representation+0x8c>
 8013ab0:	46a0      	mov	r8, r4
 8013ab2:	f04f 0900 	mov.w	r9, #0
 8013ab6:	e002      	b.n	8013abe <uxr_serialize_AGENT_Representation+0x5e>
 8013ab8:	f108 0808 	add.w	r8, r8, #8
 8013abc:	b1b3      	cbz	r3, 8013aec <uxr_serialize_AGENT_Representation+0x8c>
 8013abe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013ac2:	4628      	mov	r0, r5
 8013ac4:	f004 fb84 	bl	80181d0 <ucdr_serialize_string>
 8013ac8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013acc:	4606      	mov	r6, r0
 8013ace:	4628      	mov	r0, r5
 8013ad0:	f004 fb7e 	bl	80181d0 <ucdr_serialize_string>
 8013ad4:	68e2      	ldr	r2, [r4, #12]
 8013ad6:	f109 0901 	add.w	r9, r9, #1
 8013ada:	ea06 0300 	and.w	r3, r6, r0
 8013ade:	4591      	cmp	r9, r2
 8013ae0:	b2db      	uxtb	r3, r3
 8013ae2:	d3e9      	bcc.n	8013ab8 <uxr_serialize_AGENT_Representation+0x58>
 8013ae4:	401f      	ands	r7, r3
 8013ae6:	4638      	mov	r0, r7
 8013ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013aec:	2700      	movs	r7, #0
 8013aee:	4638      	mov	r0, r7
 8013af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013af4:	4007      	ands	r7, r0
 8013af6:	e7d1      	b.n	8013a9c <uxr_serialize_AGENT_Representation+0x3c>

08013af8 <uxr_serialize_ObjectVariant.part.0>:
 8013af8:	b570      	push	{r4, r5, r6, lr}
 8013afa:	780b      	ldrb	r3, [r1, #0]
 8013afc:	3b01      	subs	r3, #1
 8013afe:	460c      	mov	r4, r1
 8013b00:	4605      	mov	r5, r0
 8013b02:	2b0d      	cmp	r3, #13
 8013b04:	d869      	bhi.n	8013bda <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013b06:	e8df f003 	tbb	[pc, r3]
 8013b0a:	074a      	.short	0x074a
 8013b0c:	07073030 	.word	0x07073030
 8013b10:	21680707 	.word	0x21680707
 8013b14:	45632121 	.word	0x45632121
 8013b18:	7909      	ldrb	r1, [r1, #4]
 8013b1a:	f7fc ff27 	bl	801096c <ucdr_serialize_uint8_t>
 8013b1e:	4606      	mov	r6, r0
 8013b20:	b158      	cbz	r0, 8013b3a <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b22:	7923      	ldrb	r3, [r4, #4]
 8013b24:	2b02      	cmp	r3, #2
 8013b26:	d003      	beq.n	8013b30 <uxr_serialize_ObjectVariant.part.0+0x38>
 8013b28:	2b03      	cmp	r3, #3
 8013b2a:	d029      	beq.n	8013b80 <uxr_serialize_ObjectVariant.part.0+0x88>
 8013b2c:	2b01      	cmp	r3, #1
 8013b2e:	d104      	bne.n	8013b3a <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b30:	68a1      	ldr	r1, [r4, #8]
 8013b32:	4628      	mov	r0, r5
 8013b34:	f004 fb4c 	bl	80181d0 <ucdr_serialize_string>
 8013b38:	4606      	mov	r6, r0
 8013b3a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8013b3e:	4628      	mov	r0, r5
 8013b40:	2202      	movs	r2, #2
 8013b42:	f004 fa25 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 8013b46:	4030      	ands	r0, r6
 8013b48:	b2c0      	uxtb	r0, r0
 8013b4a:	bd70      	pop	{r4, r5, r6, pc}
 8013b4c:	7909      	ldrb	r1, [r1, #4]
 8013b4e:	f7fc ff0d 	bl	801096c <ucdr_serialize_uint8_t>
 8013b52:	b1e8      	cbz	r0, 8013b90 <uxr_serialize_ObjectVariant.part.0+0x98>
 8013b54:	7923      	ldrb	r3, [r4, #4]
 8013b56:	2b01      	cmp	r3, #1
 8013b58:	d001      	beq.n	8013b5e <uxr_serialize_ObjectVariant.part.0+0x66>
 8013b5a:	2b02      	cmp	r3, #2
 8013b5c:	d13d      	bne.n	8013bda <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013b5e:	68a1      	ldr	r1, [r4, #8]
 8013b60:	4628      	mov	r0, r5
 8013b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b66:	f004 bb33 	b.w	80181d0 <ucdr_serialize_string>
 8013b6a:	7909      	ldrb	r1, [r1, #4]
 8013b6c:	f7fc fefe 	bl	801096c <ucdr_serialize_uint8_t>
 8013b70:	4606      	mov	r6, r0
 8013b72:	2800      	cmp	r0, #0
 8013b74:	d0e1      	beq.n	8013b3a <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b76:	7923      	ldrb	r3, [r4, #4]
 8013b78:	2b02      	cmp	r3, #2
 8013b7a:	d0d9      	beq.n	8013b30 <uxr_serialize_ObjectVariant.part.0+0x38>
 8013b7c:	2b03      	cmp	r3, #3
 8013b7e:	d1dc      	bne.n	8013b3a <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b80:	68a2      	ldr	r2, [r4, #8]
 8013b82:	f104 010c 	add.w	r1, r4, #12
 8013b86:	4628      	mov	r0, r5
 8013b88:	f004 faf6 	bl	8018178 <ucdr_serialize_sequence_uint8_t>
 8013b8c:	4606      	mov	r6, r0
 8013b8e:	e7d4      	b.n	8013b3a <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b90:	2000      	movs	r0, #0
 8013b92:	bd70      	pop	{r4, r5, r6, pc}
 8013b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b98:	3104      	adds	r1, #4
 8013b9a:	f7ff be9b 	b.w	80138d4 <uxr_serialize_CLIENT_Representation>
 8013b9e:	7909      	ldrb	r1, [r1, #4]
 8013ba0:	f7fc fee4 	bl	801096c <ucdr_serialize_uint8_t>
 8013ba4:	4606      	mov	r6, r0
 8013ba6:	b158      	cbz	r0, 8013bc0 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013ba8:	7923      	ldrb	r3, [r4, #4]
 8013baa:	2b02      	cmp	r3, #2
 8013bac:	d003      	beq.n	8013bb6 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8013bae:	2b03      	cmp	r3, #3
 8013bb0:	d015      	beq.n	8013bde <uxr_serialize_ObjectVariant.part.0+0xe6>
 8013bb2:	2b01      	cmp	r3, #1
 8013bb4:	d104      	bne.n	8013bc0 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013bb6:	68a1      	ldr	r1, [r4, #8]
 8013bb8:	4628      	mov	r0, r5
 8013bba:	f004 fb09 	bl	80181d0 <ucdr_serialize_string>
 8013bbe:	4606      	mov	r6, r0
 8013bc0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8013bc4:	4628      	mov	r0, r5
 8013bc6:	f7fd fc0d 	bl	80113e4 <ucdr_serialize_int16_t>
 8013bca:	4030      	ands	r0, r6
 8013bcc:	b2c0      	uxtb	r0, r0
 8013bce:	bd70      	pop	{r4, r5, r6, pc}
 8013bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bd4:	3104      	adds	r1, #4
 8013bd6:	f7ff bf43 	b.w	8013a60 <uxr_serialize_AGENT_Representation>
 8013bda:	2001      	movs	r0, #1
 8013bdc:	bd70      	pop	{r4, r5, r6, pc}
 8013bde:	68a2      	ldr	r2, [r4, #8]
 8013be0:	f104 010c 	add.w	r1, r4, #12
 8013be4:	4628      	mov	r0, r5
 8013be6:	f004 fac7 	bl	8018178 <ucdr_serialize_sequence_uint8_t>
 8013bea:	4606      	mov	r6, r0
 8013bec:	e7e8      	b.n	8013bc0 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013bee:	bf00      	nop

08013bf0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013bf0:	b570      	push	{r4, r5, r6, lr}
 8013bf2:	460d      	mov	r5, r1
 8013bf4:	7809      	ldrb	r1, [r1, #0]
 8013bf6:	4606      	mov	r6, r0
 8013bf8:	f7fc fe88 	bl	801090c <ucdr_serialize_bool>
 8013bfc:	782b      	ldrb	r3, [r5, #0]
 8013bfe:	4604      	mov	r4, r0
 8013c00:	b94b      	cbnz	r3, 8013c16 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013c02:	7a29      	ldrb	r1, [r5, #8]
 8013c04:	4630      	mov	r0, r6
 8013c06:	f7fc fe81 	bl	801090c <ucdr_serialize_bool>
 8013c0a:	7a2b      	ldrb	r3, [r5, #8]
 8013c0c:	4004      	ands	r4, r0
 8013c0e:	b2e4      	uxtb	r4, r4
 8013c10:	b943      	cbnz	r3, 8013c24 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013c12:	4620      	mov	r0, r4
 8013c14:	bd70      	pop	{r4, r5, r6, pc}
 8013c16:	6869      	ldr	r1, [r5, #4]
 8013c18:	4630      	mov	r0, r6
 8013c1a:	f004 fad9 	bl	80181d0 <ucdr_serialize_string>
 8013c1e:	4004      	ands	r4, r0
 8013c20:	b2e4      	uxtb	r4, r4
 8013c22:	e7ee      	b.n	8013c02 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013c24:	68e9      	ldr	r1, [r5, #12]
 8013c26:	4630      	mov	r0, r6
 8013c28:	f004 fad2 	bl	80181d0 <ucdr_serialize_string>
 8013c2c:	4004      	ands	r4, r0
 8013c2e:	4620      	mov	r0, r4
 8013c30:	bd70      	pop	{r4, r5, r6, pc}
 8013c32:	bf00      	nop

08013c34 <uxr_serialize_OBJK_Topic_Binary>:
 8013c34:	b570      	push	{r4, r5, r6, lr}
 8013c36:	460d      	mov	r5, r1
 8013c38:	6809      	ldr	r1, [r1, #0]
 8013c3a:	4606      	mov	r6, r0
 8013c3c:	f004 fac8 	bl	80181d0 <ucdr_serialize_string>
 8013c40:	7929      	ldrb	r1, [r5, #4]
 8013c42:	4604      	mov	r4, r0
 8013c44:	4630      	mov	r0, r6
 8013c46:	f7fc fe61 	bl	801090c <ucdr_serialize_bool>
 8013c4a:	792b      	ldrb	r3, [r5, #4]
 8013c4c:	4004      	ands	r4, r0
 8013c4e:	b2e4      	uxtb	r4, r4
 8013c50:	b943      	cbnz	r3, 8013c64 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013c52:	7b29      	ldrb	r1, [r5, #12]
 8013c54:	4630      	mov	r0, r6
 8013c56:	f7fc fe59 	bl	801090c <ucdr_serialize_bool>
 8013c5a:	7b2b      	ldrb	r3, [r5, #12]
 8013c5c:	4004      	ands	r4, r0
 8013c5e:	b93b      	cbnz	r3, 8013c70 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013c60:	4620      	mov	r0, r4
 8013c62:	bd70      	pop	{r4, r5, r6, pc}
 8013c64:	68a9      	ldr	r1, [r5, #8]
 8013c66:	4630      	mov	r0, r6
 8013c68:	f004 fab2 	bl	80181d0 <ucdr_serialize_string>
 8013c6c:	4004      	ands	r4, r0
 8013c6e:	e7f0      	b.n	8013c52 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013c70:	6929      	ldr	r1, [r5, #16]
 8013c72:	4630      	mov	r0, r6
 8013c74:	f004 faac 	bl	80181d0 <ucdr_serialize_string>
 8013c78:	4004      	ands	r4, r0
 8013c7a:	b2e4      	uxtb	r4, r4
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	bd70      	pop	{r4, r5, r6, pc}

08013c80 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c84:	460c      	mov	r4, r1
 8013c86:	7809      	ldrb	r1, [r1, #0]
 8013c88:	4606      	mov	r6, r0
 8013c8a:	f7fc fe3f 	bl	801090c <ucdr_serialize_bool>
 8013c8e:	7823      	ldrb	r3, [r4, #0]
 8013c90:	4605      	mov	r5, r0
 8013c92:	b96b      	cbnz	r3, 8013cb0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013c94:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013c98:	4630      	mov	r0, r6
 8013c9a:	f7fc fe37 	bl	801090c <ucdr_serialize_bool>
 8013c9e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013ca2:	4005      	ands	r5, r0
 8013ca4:	b2ed      	uxtb	r5, r5
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d169      	bne.n	8013d7e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013caa:	4628      	mov	r0, r5
 8013cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb0:	6861      	ldr	r1, [r4, #4]
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	f7fd f870 	bl	8010d98 <ucdr_serialize_uint32_t>
 8013cb8:	6863      	ldr	r3, [r4, #4]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d06b      	beq.n	8013d96 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013cbe:	2800      	cmp	r0, #0
 8013cc0:	d067      	beq.n	8013d92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cc2:	68a1      	ldr	r1, [r4, #8]
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	f004 fa83 	bl	80181d0 <ucdr_serialize_string>
 8013cca:	6863      	ldr	r3, [r4, #4]
 8013ccc:	2b01      	cmp	r3, #1
 8013cce:	d953      	bls.n	8013d78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cd0:	2800      	cmp	r0, #0
 8013cd2:	d05e      	beq.n	8013d92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cd4:	68e1      	ldr	r1, [r4, #12]
 8013cd6:	4630      	mov	r0, r6
 8013cd8:	f004 fa7a 	bl	80181d0 <ucdr_serialize_string>
 8013cdc:	6863      	ldr	r3, [r4, #4]
 8013cde:	2b02      	cmp	r3, #2
 8013ce0:	d94a      	bls.n	8013d78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013ce2:	2800      	cmp	r0, #0
 8013ce4:	d055      	beq.n	8013d92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ce6:	6921      	ldr	r1, [r4, #16]
 8013ce8:	4630      	mov	r0, r6
 8013cea:	f004 fa71 	bl	80181d0 <ucdr_serialize_string>
 8013cee:	6863      	ldr	r3, [r4, #4]
 8013cf0:	2b03      	cmp	r3, #3
 8013cf2:	d941      	bls.n	8013d78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	d04c      	beq.n	8013d92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cf8:	6961      	ldr	r1, [r4, #20]
 8013cfa:	4630      	mov	r0, r6
 8013cfc:	f004 fa68 	bl	80181d0 <ucdr_serialize_string>
 8013d00:	6863      	ldr	r3, [r4, #4]
 8013d02:	2b04      	cmp	r3, #4
 8013d04:	d938      	bls.n	8013d78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d06:	2800      	cmp	r0, #0
 8013d08:	d043      	beq.n	8013d92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d0a:	69a1      	ldr	r1, [r4, #24]
 8013d0c:	4630      	mov	r0, r6
 8013d0e:	f004 fa5f 	bl	80181d0 <ucdr_serialize_string>
 8013d12:	6863      	ldr	r3, [r4, #4]
 8013d14:	2b05      	cmp	r3, #5
 8013d16:	d92f      	bls.n	8013d78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d18:	2800      	cmp	r0, #0
 8013d1a:	d03a      	beq.n	8013d92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d1c:	69e1      	ldr	r1, [r4, #28]
 8013d1e:	4630      	mov	r0, r6
 8013d20:	f004 fa56 	bl	80181d0 <ucdr_serialize_string>
 8013d24:	6863      	ldr	r3, [r4, #4]
 8013d26:	2b06      	cmp	r3, #6
 8013d28:	d926      	bls.n	8013d78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d2a:	b390      	cbz	r0, 8013d92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d2c:	6a21      	ldr	r1, [r4, #32]
 8013d2e:	4630      	mov	r0, r6
 8013d30:	f004 fa4e 	bl	80181d0 <ucdr_serialize_string>
 8013d34:	6863      	ldr	r3, [r4, #4]
 8013d36:	2b07      	cmp	r3, #7
 8013d38:	d91e      	bls.n	8013d78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d3a:	b350      	cbz	r0, 8013d92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013d3e:	4630      	mov	r0, r6
 8013d40:	f004 fa46 	bl	80181d0 <ucdr_serialize_string>
 8013d44:	6863      	ldr	r3, [r4, #4]
 8013d46:	2b08      	cmp	r3, #8
 8013d48:	d916      	bls.n	8013d78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d4a:	b310      	cbz	r0, 8013d92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d4c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013d4e:	4630      	mov	r0, r6
 8013d50:	f004 fa3e 	bl	80181d0 <ucdr_serialize_string>
 8013d54:	6863      	ldr	r3, [r4, #4]
 8013d56:	2b09      	cmp	r3, #9
 8013d58:	d90e      	bls.n	8013d78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d5a:	b1d0      	cbz	r0, 8013d92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d5c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013d60:	2709      	movs	r7, #9
 8013d62:	e000      	b.n	8013d66 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013d64:	b1a8      	cbz	r0, 8013d92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d66:	f858 1b04 	ldr.w	r1, [r8], #4
 8013d6a:	4630      	mov	r0, r6
 8013d6c:	f004 fa30 	bl	80181d0 <ucdr_serialize_string>
 8013d70:	6862      	ldr	r2, [r4, #4]
 8013d72:	3701      	adds	r7, #1
 8013d74:	4297      	cmp	r7, r2
 8013d76:	d3f5      	bcc.n	8013d64 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013d78:	4005      	ands	r5, r0
 8013d7a:	b2ed      	uxtb	r5, r5
 8013d7c:	e78a      	b.n	8013c94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013d7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013d80:	4630      	mov	r0, r6
 8013d82:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013d86:	f004 f9f7 	bl	8018178 <ucdr_serialize_sequence_uint8_t>
 8013d8a:	4005      	ands	r5, r0
 8013d8c:	4628      	mov	r0, r5
 8013d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d92:	2500      	movs	r5, #0
 8013d94:	e77e      	b.n	8013c94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013d96:	4028      	ands	r0, r5
 8013d98:	b2c5      	uxtb	r5, r0
 8013d9a:	e77b      	b.n	8013c94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013d9c <uxr_serialize_OBJK_Publisher_Binary>:
 8013d9c:	b570      	push	{r4, r5, r6, lr}
 8013d9e:	460d      	mov	r5, r1
 8013da0:	7809      	ldrb	r1, [r1, #0]
 8013da2:	4606      	mov	r6, r0
 8013da4:	f7fc fdb2 	bl	801090c <ucdr_serialize_bool>
 8013da8:	782b      	ldrb	r3, [r5, #0]
 8013daa:	4604      	mov	r4, r0
 8013dac:	b94b      	cbnz	r3, 8013dc2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013dae:	7a29      	ldrb	r1, [r5, #8]
 8013db0:	4630      	mov	r0, r6
 8013db2:	f7fc fdab 	bl	801090c <ucdr_serialize_bool>
 8013db6:	7a2b      	ldrb	r3, [r5, #8]
 8013db8:	4004      	ands	r4, r0
 8013dba:	b2e4      	uxtb	r4, r4
 8013dbc:	b943      	cbnz	r3, 8013dd0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013dbe:	4620      	mov	r0, r4
 8013dc0:	bd70      	pop	{r4, r5, r6, pc}
 8013dc2:	6869      	ldr	r1, [r5, #4]
 8013dc4:	4630      	mov	r0, r6
 8013dc6:	f004 fa03 	bl	80181d0 <ucdr_serialize_string>
 8013dca:	4004      	ands	r4, r0
 8013dcc:	b2e4      	uxtb	r4, r4
 8013dce:	e7ee      	b.n	8013dae <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013dd0:	f105 010c 	add.w	r1, r5, #12
 8013dd4:	4630      	mov	r0, r6
 8013dd6:	f7ff ff53 	bl	8013c80 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013dda:	4004      	ands	r4, r0
 8013ddc:	4620      	mov	r0, r4
 8013dde:	bd70      	pop	{r4, r5, r6, pc}

08013de0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013de4:	460c      	mov	r4, r1
 8013de6:	7809      	ldrb	r1, [r1, #0]
 8013de8:	4606      	mov	r6, r0
 8013dea:	f7fc fd8f 	bl	801090c <ucdr_serialize_bool>
 8013dee:	7823      	ldrb	r3, [r4, #0]
 8013df0:	4605      	mov	r5, r0
 8013df2:	b96b      	cbnz	r3, 8013e10 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013df4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013df8:	4630      	mov	r0, r6
 8013dfa:	f7fc fd87 	bl	801090c <ucdr_serialize_bool>
 8013dfe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013e02:	4005      	ands	r5, r0
 8013e04:	b2ed      	uxtb	r5, r5
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d169      	bne.n	8013ede <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013e0a:	4628      	mov	r0, r5
 8013e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e10:	6861      	ldr	r1, [r4, #4]
 8013e12:	4630      	mov	r0, r6
 8013e14:	f7fc ffc0 	bl	8010d98 <ucdr_serialize_uint32_t>
 8013e18:	6863      	ldr	r3, [r4, #4]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d06b      	beq.n	8013ef6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8013e1e:	2800      	cmp	r0, #0
 8013e20:	d067      	beq.n	8013ef2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e22:	68a1      	ldr	r1, [r4, #8]
 8013e24:	4630      	mov	r0, r6
 8013e26:	f004 f9d3 	bl	80181d0 <ucdr_serialize_string>
 8013e2a:	6863      	ldr	r3, [r4, #4]
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d953      	bls.n	8013ed8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e30:	2800      	cmp	r0, #0
 8013e32:	d05e      	beq.n	8013ef2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e34:	68e1      	ldr	r1, [r4, #12]
 8013e36:	4630      	mov	r0, r6
 8013e38:	f004 f9ca 	bl	80181d0 <ucdr_serialize_string>
 8013e3c:	6863      	ldr	r3, [r4, #4]
 8013e3e:	2b02      	cmp	r3, #2
 8013e40:	d94a      	bls.n	8013ed8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e42:	2800      	cmp	r0, #0
 8013e44:	d055      	beq.n	8013ef2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e46:	6921      	ldr	r1, [r4, #16]
 8013e48:	4630      	mov	r0, r6
 8013e4a:	f004 f9c1 	bl	80181d0 <ucdr_serialize_string>
 8013e4e:	6863      	ldr	r3, [r4, #4]
 8013e50:	2b03      	cmp	r3, #3
 8013e52:	d941      	bls.n	8013ed8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e54:	2800      	cmp	r0, #0
 8013e56:	d04c      	beq.n	8013ef2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e58:	6961      	ldr	r1, [r4, #20]
 8013e5a:	4630      	mov	r0, r6
 8013e5c:	f004 f9b8 	bl	80181d0 <ucdr_serialize_string>
 8013e60:	6863      	ldr	r3, [r4, #4]
 8013e62:	2b04      	cmp	r3, #4
 8013e64:	d938      	bls.n	8013ed8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e66:	2800      	cmp	r0, #0
 8013e68:	d043      	beq.n	8013ef2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e6a:	69a1      	ldr	r1, [r4, #24]
 8013e6c:	4630      	mov	r0, r6
 8013e6e:	f004 f9af 	bl	80181d0 <ucdr_serialize_string>
 8013e72:	6863      	ldr	r3, [r4, #4]
 8013e74:	2b05      	cmp	r3, #5
 8013e76:	d92f      	bls.n	8013ed8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	d03a      	beq.n	8013ef2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e7c:	69e1      	ldr	r1, [r4, #28]
 8013e7e:	4630      	mov	r0, r6
 8013e80:	f004 f9a6 	bl	80181d0 <ucdr_serialize_string>
 8013e84:	6863      	ldr	r3, [r4, #4]
 8013e86:	2b06      	cmp	r3, #6
 8013e88:	d926      	bls.n	8013ed8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e8a:	b390      	cbz	r0, 8013ef2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e8c:	6a21      	ldr	r1, [r4, #32]
 8013e8e:	4630      	mov	r0, r6
 8013e90:	f004 f99e 	bl	80181d0 <ucdr_serialize_string>
 8013e94:	6863      	ldr	r3, [r4, #4]
 8013e96:	2b07      	cmp	r3, #7
 8013e98:	d91e      	bls.n	8013ed8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e9a:	b350      	cbz	r0, 8013ef2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013e9e:	4630      	mov	r0, r6
 8013ea0:	f004 f996 	bl	80181d0 <ucdr_serialize_string>
 8013ea4:	6863      	ldr	r3, [r4, #4]
 8013ea6:	2b08      	cmp	r3, #8
 8013ea8:	d916      	bls.n	8013ed8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013eaa:	b310      	cbz	r0, 8013ef2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013eac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013eae:	4630      	mov	r0, r6
 8013eb0:	f004 f98e 	bl	80181d0 <ucdr_serialize_string>
 8013eb4:	6863      	ldr	r3, [r4, #4]
 8013eb6:	2b09      	cmp	r3, #9
 8013eb8:	d90e      	bls.n	8013ed8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013eba:	b1d0      	cbz	r0, 8013ef2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013ebc:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013ec0:	2709      	movs	r7, #9
 8013ec2:	e000      	b.n	8013ec6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013ec4:	b1a8      	cbz	r0, 8013ef2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013ec6:	f858 1b04 	ldr.w	r1, [r8], #4
 8013eca:	4630      	mov	r0, r6
 8013ecc:	f004 f980 	bl	80181d0 <ucdr_serialize_string>
 8013ed0:	6862      	ldr	r2, [r4, #4]
 8013ed2:	3701      	adds	r7, #1
 8013ed4:	4297      	cmp	r7, r2
 8013ed6:	d3f5      	bcc.n	8013ec4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013ed8:	4005      	ands	r5, r0
 8013eda:	b2ed      	uxtb	r5, r5
 8013edc:	e78a      	b.n	8013df4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013ede:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013ee6:	f004 f947 	bl	8018178 <ucdr_serialize_sequence_uint8_t>
 8013eea:	4005      	ands	r5, r0
 8013eec:	4628      	mov	r0, r5
 8013eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ef2:	2500      	movs	r5, #0
 8013ef4:	e77e      	b.n	8013df4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013ef6:	4028      	ands	r0, r5
 8013ef8:	b2c5      	uxtb	r5, r0
 8013efa:	e77b      	b.n	8013df4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013efc <uxr_serialize_OBJK_Subscriber_Binary>:
 8013efc:	b570      	push	{r4, r5, r6, lr}
 8013efe:	460d      	mov	r5, r1
 8013f00:	7809      	ldrb	r1, [r1, #0]
 8013f02:	4606      	mov	r6, r0
 8013f04:	f7fc fd02 	bl	801090c <ucdr_serialize_bool>
 8013f08:	782b      	ldrb	r3, [r5, #0]
 8013f0a:	4604      	mov	r4, r0
 8013f0c:	b94b      	cbnz	r3, 8013f22 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8013f0e:	7a29      	ldrb	r1, [r5, #8]
 8013f10:	4630      	mov	r0, r6
 8013f12:	f7fc fcfb 	bl	801090c <ucdr_serialize_bool>
 8013f16:	7a2b      	ldrb	r3, [r5, #8]
 8013f18:	4004      	ands	r4, r0
 8013f1a:	b2e4      	uxtb	r4, r4
 8013f1c:	b943      	cbnz	r3, 8013f30 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8013f1e:	4620      	mov	r0, r4
 8013f20:	bd70      	pop	{r4, r5, r6, pc}
 8013f22:	6869      	ldr	r1, [r5, #4]
 8013f24:	4630      	mov	r0, r6
 8013f26:	f004 f953 	bl	80181d0 <ucdr_serialize_string>
 8013f2a:	4004      	ands	r4, r0
 8013f2c:	b2e4      	uxtb	r4, r4
 8013f2e:	e7ee      	b.n	8013f0e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013f30:	f105 010c 	add.w	r1, r5, #12
 8013f34:	4630      	mov	r0, r6
 8013f36:	f7ff ff53 	bl	8013de0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013f3a:	4004      	ands	r4, r0
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	bd70      	pop	{r4, r5, r6, pc}

08013f40 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013f40:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013f44:	4688      	mov	r8, r1
 8013f46:	8809      	ldrh	r1, [r1, #0]
 8013f48:	4681      	mov	r9, r0
 8013f4a:	f7fc fd3b 	bl	80109c4 <ucdr_serialize_uint16_t>
 8013f4e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013f52:	4606      	mov	r6, r0
 8013f54:	4648      	mov	r0, r9
 8013f56:	f7fc fcd9 	bl	801090c <ucdr_serialize_bool>
 8013f5a:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013f5e:	4030      	ands	r0, r6
 8013f60:	b2c5      	uxtb	r5, r0
 8013f62:	b9eb      	cbnz	r3, 8013fa0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013f64:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013f68:	4648      	mov	r0, r9
 8013f6a:	f7fc fccf 	bl	801090c <ucdr_serialize_bool>
 8013f6e:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013f72:	4005      	ands	r5, r0
 8013f74:	bb7b      	cbnz	r3, 8013fd6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013f76:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013f7a:	4648      	mov	r0, r9
 8013f7c:	f7fc fcc6 	bl	801090c <ucdr_serialize_bool>
 8013f80:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013f84:	4005      	ands	r5, r0
 8013f86:	b9f3      	cbnz	r3, 8013fc6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013f88:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013f8c:	4648      	mov	r0, r9
 8013f8e:	f7fc fcbd 	bl	801090c <ucdr_serialize_bool>
 8013f92:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013f96:	4005      	ands	r5, r0
 8013f98:	b94b      	cbnz	r3, 8013fae <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013f9a:	4628      	mov	r0, r5
 8013f9c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013fa0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013fa4:	4648      	mov	r0, r9
 8013fa6:	f7fc fd0d 	bl	80109c4 <ucdr_serialize_uint16_t>
 8013faa:	4005      	ands	r5, r0
 8013fac:	e7da      	b.n	8013f64 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013fae:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013fb2:	4648      	mov	r0, r9
 8013fb4:	f108 011c 	add.w	r1, r8, #28
 8013fb8:	f004 f8de 	bl	8018178 <ucdr_serialize_sequence_uint8_t>
 8013fbc:	4028      	ands	r0, r5
 8013fbe:	b2c5      	uxtb	r5, r0
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013fc6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013fca:	4648      	mov	r0, r9
 8013fcc:	f7fc fee4 	bl	8010d98 <ucdr_serialize_uint32_t>
 8013fd0:	4028      	ands	r0, r5
 8013fd2:	b2c5      	uxtb	r5, r0
 8013fd4:	e7d8      	b.n	8013f88 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013fd6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013fda:	4648      	mov	r0, r9
 8013fdc:	f7fc fedc 	bl	8010d98 <ucdr_serialize_uint32_t>
 8013fe0:	4028      	ands	r0, r5
 8013fe2:	b2c5      	uxtb	r5, r0
 8013fe4:	e7c7      	b.n	8013f76 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013fe6:	bf00      	nop

08013fe8 <uxr_serialize_OBJK_DataReader_Binary>:
 8013fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fea:	2202      	movs	r2, #2
 8013fec:	460c      	mov	r4, r1
 8013fee:	4606      	mov	r6, r0
 8013ff0:	f003 ffce 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 8013ff4:	78a1      	ldrb	r1, [r4, #2]
 8013ff6:	4605      	mov	r5, r0
 8013ff8:	4630      	mov	r0, r6
 8013ffa:	f7fc fc87 	bl	801090c <ucdr_serialize_bool>
 8013ffe:	78a3      	ldrb	r3, [r4, #2]
 8014000:	4005      	ands	r5, r0
 8014002:	b2ed      	uxtb	r5, r5
 8014004:	b90b      	cbnz	r3, 801400a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8014006:	4628      	mov	r0, r5
 8014008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801400a:	f104 0108 	add.w	r1, r4, #8
 801400e:	4630      	mov	r0, r6
 8014010:	f7ff ff96 	bl	8013f40 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014014:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014018:	4607      	mov	r7, r0
 801401a:	4630      	mov	r0, r6
 801401c:	f7fc fc76 	bl	801090c <ucdr_serialize_bool>
 8014020:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014024:	4038      	ands	r0, r7
 8014026:	b2c7      	uxtb	r7, r0
 8014028:	b95b      	cbnz	r3, 8014042 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801402a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801402e:	4630      	mov	r0, r6
 8014030:	f7fc fc6c 	bl	801090c <ucdr_serialize_bool>
 8014034:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014038:	4007      	ands	r7, r0
 801403a:	b94b      	cbnz	r3, 8014050 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801403c:	403d      	ands	r5, r7
 801403e:	4628      	mov	r0, r5
 8014040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014042:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8014046:	4630      	mov	r0, r6
 8014048:	f7fd f8fc 	bl	8011244 <ucdr_serialize_uint64_t>
 801404c:	4007      	ands	r7, r0
 801404e:	e7ec      	b.n	801402a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8014050:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014052:	4630      	mov	r0, r6
 8014054:	f004 f8bc 	bl	80181d0 <ucdr_serialize_string>
 8014058:	4007      	ands	r7, r0
 801405a:	b2ff      	uxtb	r7, r7
 801405c:	e7ee      	b.n	801403c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801405e:	bf00      	nop

08014060 <uxr_serialize_OBJK_DataWriter_Binary>:
 8014060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014062:	2202      	movs	r2, #2
 8014064:	460d      	mov	r5, r1
 8014066:	4606      	mov	r6, r0
 8014068:	f003 ff92 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 801406c:	78a9      	ldrb	r1, [r5, #2]
 801406e:	4604      	mov	r4, r0
 8014070:	4630      	mov	r0, r6
 8014072:	f7fc fc4b 	bl	801090c <ucdr_serialize_bool>
 8014076:	78ab      	ldrb	r3, [r5, #2]
 8014078:	4004      	ands	r4, r0
 801407a:	b2e4      	uxtb	r4, r4
 801407c:	b90b      	cbnz	r3, 8014082 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801407e:	4620      	mov	r0, r4
 8014080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014082:	f105 0108 	add.w	r1, r5, #8
 8014086:	4630      	mov	r0, r6
 8014088:	f7ff ff5a 	bl	8013f40 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801408c:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8014090:	4607      	mov	r7, r0
 8014092:	4630      	mov	r0, r6
 8014094:	f7fc fc3a 	bl	801090c <ucdr_serialize_bool>
 8014098:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801409c:	4007      	ands	r7, r0
 801409e:	b2ff      	uxtb	r7, r7
 80140a0:	b913      	cbnz	r3, 80140a8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80140a2:	403c      	ands	r4, r7
 80140a4:	4620      	mov	r0, r4
 80140a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140a8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80140ac:	4630      	mov	r0, r6
 80140ae:	f7fd f8c9 	bl	8011244 <ucdr_serialize_uint64_t>
 80140b2:	4007      	ands	r7, r0
 80140b4:	e7f5      	b.n	80140a2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80140b6:	bf00      	nop

080140b8 <uxr_deserialize_ObjectVariant>:
 80140b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ba:	4605      	mov	r5, r0
 80140bc:	460e      	mov	r6, r1
 80140be:	f7fc fc6b 	bl	8010998 <ucdr_deserialize_uint8_t>
 80140c2:	b320      	cbz	r0, 801410e <uxr_deserialize_ObjectVariant+0x56>
 80140c4:	7833      	ldrb	r3, [r6, #0]
 80140c6:	3b01      	subs	r3, #1
 80140c8:	4604      	mov	r4, r0
 80140ca:	2b0d      	cmp	r3, #13
 80140cc:	d81d      	bhi.n	801410a <uxr_deserialize_ObjectVariant+0x52>
 80140ce:	e8df f003 	tbb	[pc, r3]
 80140d2:	2107      	.short	0x2107
 80140d4:	21214b4b 	.word	0x21214b4b
 80140d8:	381c2121 	.word	0x381c2121
 80140dc:	876a3838 	.word	0x876a3838
 80140e0:	1d31      	adds	r1, r6, #4
 80140e2:	4628      	mov	r0, r5
 80140e4:	f7fc fc58 	bl	8010998 <ucdr_deserialize_uint8_t>
 80140e8:	4607      	mov	r7, r0
 80140ea:	b138      	cbz	r0, 80140fc <uxr_deserialize_ObjectVariant+0x44>
 80140ec:	7933      	ldrb	r3, [r6, #4]
 80140ee:	2b02      	cmp	r3, #2
 80140f0:	d07c      	beq.n	80141ec <uxr_deserialize_ObjectVariant+0x134>
 80140f2:	2b03      	cmp	r3, #3
 80140f4:	f000 8082 	beq.w	80141fc <uxr_deserialize_ObjectVariant+0x144>
 80140f8:	2b01      	cmp	r3, #1
 80140fa:	d077      	beq.n	80141ec <uxr_deserialize_ObjectVariant+0x134>
 80140fc:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8014100:	4628      	mov	r0, r5
 8014102:	f7fd f9ef 	bl	80114e4 <ucdr_deserialize_int16_t>
 8014106:	4038      	ands	r0, r7
 8014108:	b2c4      	uxtb	r4, r0
 801410a:	4620      	mov	r0, r4
 801410c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801410e:	2400      	movs	r4, #0
 8014110:	4620      	mov	r0, r4
 8014112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014114:	1d31      	adds	r1, r6, #4
 8014116:	4628      	mov	r0, r5
 8014118:	f7fc fc3e 	bl	8010998 <ucdr_deserialize_uint8_t>
 801411c:	4607      	mov	r7, r0
 801411e:	b130      	cbz	r0, 801412e <uxr_deserialize_ObjectVariant+0x76>
 8014120:	7933      	ldrb	r3, [r6, #4]
 8014122:	2b02      	cmp	r3, #2
 8014124:	d037      	beq.n	8014196 <uxr_deserialize_ObjectVariant+0xde>
 8014126:	2b03      	cmp	r3, #3
 8014128:	d02a      	beq.n	8014180 <uxr_deserialize_ObjectVariant+0xc8>
 801412a:	2b01      	cmp	r3, #1
 801412c:	d033      	beq.n	8014196 <uxr_deserialize_ObjectVariant+0xde>
 801412e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8014132:	4628      	mov	r0, r5
 8014134:	2202      	movs	r2, #2
 8014136:	f003 ff8f 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 801413a:	4038      	ands	r0, r7
 801413c:	b2c4      	uxtb	r4, r0
 801413e:	4620      	mov	r0, r4
 8014140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014142:	1d31      	adds	r1, r6, #4
 8014144:	4628      	mov	r0, r5
 8014146:	f7fc fc27 	bl	8010998 <ucdr_deserialize_uint8_t>
 801414a:	2800      	cmp	r0, #0
 801414c:	d0df      	beq.n	801410e <uxr_deserialize_ObjectVariant+0x56>
 801414e:	7933      	ldrb	r3, [r6, #4]
 8014150:	2b01      	cmp	r3, #1
 8014152:	d001      	beq.n	8014158 <uxr_deserialize_ObjectVariant+0xa0>
 8014154:	2b02      	cmp	r3, #2
 8014156:	d1d8      	bne.n	801410a <uxr_deserialize_ObjectVariant+0x52>
 8014158:	68b1      	ldr	r1, [r6, #8]
 801415a:	4628      	mov	r0, r5
 801415c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014160:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014164:	f004 b844 	b.w	80181f0 <ucdr_deserialize_string>
 8014168:	1d31      	adds	r1, r6, #4
 801416a:	4628      	mov	r0, r5
 801416c:	f7fc fc14 	bl	8010998 <ucdr_deserialize_uint8_t>
 8014170:	4607      	mov	r7, r0
 8014172:	2800      	cmp	r0, #0
 8014174:	d0db      	beq.n	801412e <uxr_deserialize_ObjectVariant+0x76>
 8014176:	7933      	ldrb	r3, [r6, #4]
 8014178:	2b02      	cmp	r3, #2
 801417a:	d00c      	beq.n	8014196 <uxr_deserialize_ObjectVariant+0xde>
 801417c:	2b03      	cmp	r3, #3
 801417e:	d1d6      	bne.n	801412e <uxr_deserialize_ObjectVariant+0x76>
 8014180:	f106 0308 	add.w	r3, r6, #8
 8014184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014188:	f106 010c 	add.w	r1, r6, #12
 801418c:	4628      	mov	r0, r5
 801418e:	f004 f805 	bl	801819c <ucdr_deserialize_sequence_uint8_t>
 8014192:	4607      	mov	r7, r0
 8014194:	e7cb      	b.n	801412e <uxr_deserialize_ObjectVariant+0x76>
 8014196:	68b1      	ldr	r1, [r6, #8]
 8014198:	f44f 7200 	mov.w	r2, #512	; 0x200
 801419c:	4628      	mov	r0, r5
 801419e:	f004 f827 	bl	80181f0 <ucdr_deserialize_string>
 80141a2:	4607      	mov	r7, r0
 80141a4:	e7c3      	b.n	801412e <uxr_deserialize_ObjectVariant+0x76>
 80141a6:	2204      	movs	r2, #4
 80141a8:	18b1      	adds	r1, r6, r2
 80141aa:	4628      	mov	r0, r5
 80141ac:	f003 ff54 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80141b0:	2202      	movs	r2, #2
 80141b2:	4604      	mov	r4, r0
 80141b4:	f106 0108 	add.w	r1, r6, #8
 80141b8:	4628      	mov	r0, r5
 80141ba:	f003 ff4d 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80141be:	2202      	movs	r2, #2
 80141c0:	4004      	ands	r4, r0
 80141c2:	f106 010a 	add.w	r1, r6, #10
 80141c6:	4628      	mov	r0, r5
 80141c8:	f003 ff46 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80141cc:	b2e4      	uxtb	r4, r4
 80141ce:	4603      	mov	r3, r0
 80141d0:	f106 010c 	add.w	r1, r6, #12
 80141d4:	4628      	mov	r0, r5
 80141d6:	401c      	ands	r4, r3
 80141d8:	f7fc fbae 	bl	8010938 <ucdr_deserialize_bool>
 80141dc:	4004      	ands	r4, r0
 80141de:	e794      	b.n	801410a <uxr_deserialize_ObjectVariant+0x52>
 80141e0:	1d31      	adds	r1, r6, #4
 80141e2:	4628      	mov	r0, r5
 80141e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80141e8:	f7ff bbd0 	b.w	801398c <uxr_deserialize_CLIENT_Representation>
 80141ec:	68b1      	ldr	r1, [r6, #8]
 80141ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141f2:	4628      	mov	r0, r5
 80141f4:	f003 fffc 	bl	80181f0 <ucdr_deserialize_string>
 80141f8:	4607      	mov	r7, r0
 80141fa:	e77f      	b.n	80140fc <uxr_deserialize_ObjectVariant+0x44>
 80141fc:	f106 0308 	add.w	r3, r6, #8
 8014200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014204:	f106 010c 	add.w	r1, r6, #12
 8014208:	4628      	mov	r0, r5
 801420a:	f003 ffc7 	bl	801819c <ucdr_deserialize_sequence_uint8_t>
 801420e:	4607      	mov	r7, r0
 8014210:	e774      	b.n	80140fc <uxr_deserialize_ObjectVariant+0x44>
 8014212:	bf00      	nop

08014214 <uxr_deserialize_BaseObjectRequest>:
 8014214:	b570      	push	{r4, r5, r6, lr}
 8014216:	2202      	movs	r2, #2
 8014218:	4605      	mov	r5, r0
 801421a:	460e      	mov	r6, r1
 801421c:	f003 ff1c 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 8014220:	1cb1      	adds	r1, r6, #2
 8014222:	4604      	mov	r4, r0
 8014224:	2202      	movs	r2, #2
 8014226:	4628      	mov	r0, r5
 8014228:	f003 ff16 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 801422c:	4020      	ands	r0, r4
 801422e:	b2c0      	uxtb	r0, r0
 8014230:	bd70      	pop	{r4, r5, r6, pc}
 8014232:	bf00      	nop

08014234 <uxr_serialize_AGENT_ActivityInfo>:
 8014234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014238:	460e      	mov	r6, r1
 801423a:	f9b1 1000 	ldrsh.w	r1, [r1]
 801423e:	4607      	mov	r7, r0
 8014240:	f7fd f8d0 	bl	80113e4 <ucdr_serialize_int16_t>
 8014244:	6871      	ldr	r1, [r6, #4]
 8014246:	4680      	mov	r8, r0
 8014248:	4638      	mov	r0, r7
 801424a:	f7fc fda5 	bl	8010d98 <ucdr_serialize_uint32_t>
 801424e:	6873      	ldr	r3, [r6, #4]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d06a      	beq.n	801432a <uxr_serialize_AGENT_ActivityInfo+0xf6>
 8014254:	b318      	cbz	r0, 801429e <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8014256:	f106 0904 	add.w	r9, r6, #4
 801425a:	2500      	movs	r5, #0
 801425c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8014260:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8014264:	7a21      	ldrb	r1, [r4, #8]
 8014266:	4638      	mov	r0, r7
 8014268:	f7fc fb80 	bl	801096c <ucdr_serialize_uint8_t>
 801426c:	2800      	cmp	r0, #0
 801426e:	d051      	beq.n	8014314 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8014270:	7a23      	ldrb	r3, [r4, #8]
 8014272:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8014276:	00c9      	lsls	r1, r1, #3
 8014278:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 801427c:	2b03      	cmp	r3, #3
 801427e:	d859      	bhi.n	8014334 <uxr_serialize_AGENT_ActivityInfo+0x100>
 8014280:	e8df f003 	tbb	[pc, r3]
 8014284:	02122436 	.word	0x02122436
 8014288:	4449      	add	r1, r9
 801428a:	4638      	mov	r0, r7
 801428c:	6889      	ldr	r1, [r1, #8]
 801428e:	f003 ff9f 	bl	80181d0 <ucdr_serialize_string>
 8014292:	6873      	ldr	r3, [r6, #4]
 8014294:	3501      	adds	r5, #1
 8014296:	429d      	cmp	r5, r3
 8014298:	d240      	bcs.n	801431c <uxr_serialize_AGENT_ActivityInfo+0xe8>
 801429a:	2800      	cmp	r0, #0
 801429c:	d1de      	bne.n	801425c <uxr_serialize_AGENT_ActivityInfo+0x28>
 801429e:	f04f 0800 	mov.w	r8, #0
 80142a2:	4640      	mov	r0, r8
 80142a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142a8:	3108      	adds	r1, #8
 80142aa:	4449      	add	r1, r9
 80142ac:	2210      	movs	r2, #16
 80142ae:	4638      	mov	r0, r7
 80142b0:	f003 fe6e 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 80142b4:	44aa      	add	sl, r5
 80142b6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80142ba:	4604      	mov	r4, r0
 80142bc:	f8da 101c 	ldr.w	r1, [sl, #28]
 80142c0:	4638      	mov	r0, r7
 80142c2:	f7fc fd69 	bl	8010d98 <ucdr_serialize_uint32_t>
 80142c6:	4020      	ands	r0, r4
 80142c8:	b2c0      	uxtb	r0, r0
 80142ca:	e7e2      	b.n	8014292 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80142cc:	3108      	adds	r1, #8
 80142ce:	4449      	add	r1, r9
 80142d0:	2204      	movs	r2, #4
 80142d2:	4638      	mov	r0, r7
 80142d4:	f003 fe5c 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 80142d8:	44aa      	add	sl, r5
 80142da:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80142de:	4604      	mov	r4, r0
 80142e0:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 80142e4:	4638      	mov	r0, r7
 80142e6:	f7fc fb6d 	bl	80109c4 <ucdr_serialize_uint16_t>
 80142ea:	4020      	ands	r0, r4
 80142ec:	b2c0      	uxtb	r0, r0
 80142ee:	e7d0      	b.n	8014292 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80142f0:	3108      	adds	r1, #8
 80142f2:	4449      	add	r1, r9
 80142f4:	2202      	movs	r2, #2
 80142f6:	4638      	mov	r0, r7
 80142f8:	f003 fe4a 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 80142fc:	44aa      	add	sl, r5
 80142fe:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014302:	4604      	mov	r4, r0
 8014304:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8014308:	4638      	mov	r0, r7
 801430a:	f7fc fb2f 	bl	801096c <ucdr_serialize_uint8_t>
 801430e:	4020      	ands	r0, r4
 8014310:	b2c0      	uxtb	r0, r0
 8014312:	e7be      	b.n	8014292 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8014314:	6873      	ldr	r3, [r6, #4]
 8014316:	3501      	adds	r5, #1
 8014318:	429d      	cmp	r5, r3
 801431a:	d3c0      	bcc.n	801429e <uxr_serialize_AGENT_ActivityInfo+0x6a>
 801431c:	ea08 0000 	and.w	r0, r8, r0
 8014320:	fa5f f880 	uxtb.w	r8, r0
 8014324:	4640      	mov	r0, r8
 8014326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801432a:	ea08 0800 	and.w	r8, r8, r0
 801432e:	fa5f f888 	uxtb.w	r8, r8
 8014332:	e7b6      	b.n	80142a2 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8014334:	6873      	ldr	r3, [r6, #4]
 8014336:	3501      	adds	r5, #1
 8014338:	42ab      	cmp	r3, r5
 801433a:	f104 0418 	add.w	r4, r4, #24
 801433e:	d891      	bhi.n	8014264 <uxr_serialize_AGENT_ActivityInfo+0x30>
 8014340:	e7af      	b.n	80142a2 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8014342:	bf00      	nop

08014344 <uxr_serialize_ActivityInfoVariant>:
 8014344:	b570      	push	{r4, r5, r6, lr}
 8014346:	460d      	mov	r5, r1
 8014348:	7809      	ldrb	r1, [r1, #0]
 801434a:	4606      	mov	r6, r0
 801434c:	f7fc fb0e 	bl	801096c <ucdr_serialize_uint8_t>
 8014350:	b130      	cbz	r0, 8014360 <uxr_serialize_ActivityInfoVariant+0x1c>
 8014352:	782b      	ldrb	r3, [r5, #0]
 8014354:	2b06      	cmp	r3, #6
 8014356:	d019      	beq.n	801438c <uxr_serialize_ActivityInfoVariant+0x48>
 8014358:	2b0d      	cmp	r3, #13
 801435a:	d010      	beq.n	801437e <uxr_serialize_ActivityInfoVariant+0x3a>
 801435c:	2b05      	cmp	r3, #5
 801435e:	d000      	beq.n	8014362 <uxr_serialize_ActivityInfoVariant+0x1e>
 8014360:	bd70      	pop	{r4, r5, r6, pc}
 8014362:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014366:	4630      	mov	r0, r6
 8014368:	f7fd f83c 	bl	80113e4 <ucdr_serialize_int16_t>
 801436c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8014370:	4604      	mov	r4, r0
 8014372:	4630      	mov	r0, r6
 8014374:	f7fc ff66 	bl	8011244 <ucdr_serialize_uint64_t>
 8014378:	4020      	ands	r0, r4
 801437a:	b2c0      	uxtb	r0, r0
 801437c:	bd70      	pop	{r4, r5, r6, pc}
 801437e:	f105 0108 	add.w	r1, r5, #8
 8014382:	4630      	mov	r0, r6
 8014384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014388:	f7ff bf54 	b.w	8014234 <uxr_serialize_AGENT_ActivityInfo>
 801438c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014390:	4630      	mov	r0, r6
 8014392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014396:	f7fd b825 	b.w	80113e4 <ucdr_serialize_int16_t>
 801439a:	bf00      	nop

0801439c <uxr_deserialize_BaseObjectReply>:
 801439c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a0:	2202      	movs	r2, #2
 80143a2:	4606      	mov	r6, r0
 80143a4:	460f      	mov	r7, r1
 80143a6:	f003 fe57 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80143aa:	2202      	movs	r2, #2
 80143ac:	1cb9      	adds	r1, r7, #2
 80143ae:	4605      	mov	r5, r0
 80143b0:	4630      	mov	r0, r6
 80143b2:	f003 fe51 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80143b6:	1d39      	adds	r1, r7, #4
 80143b8:	4680      	mov	r8, r0
 80143ba:	4630      	mov	r0, r6
 80143bc:	f7fc faec 	bl	8010998 <ucdr_deserialize_uint8_t>
 80143c0:	1d79      	adds	r1, r7, #5
 80143c2:	4604      	mov	r4, r0
 80143c4:	4630      	mov	r0, r6
 80143c6:	f7fc fae7 	bl	8010998 <ucdr_deserialize_uint8_t>
 80143ca:	ea05 0508 	and.w	r5, r5, r8
 80143ce:	402c      	ands	r4, r5
 80143d0:	4020      	ands	r0, r4
 80143d2:	b2c0      	uxtb	r0, r0
 80143d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080143d8 <uxr_serialize_ReadSpecification>:
 80143d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143dc:	460e      	mov	r6, r1
 80143de:	7809      	ldrb	r1, [r1, #0]
 80143e0:	4607      	mov	r7, r0
 80143e2:	f7fc fac3 	bl	801096c <ucdr_serialize_uint8_t>
 80143e6:	7871      	ldrb	r1, [r6, #1]
 80143e8:	4604      	mov	r4, r0
 80143ea:	4638      	mov	r0, r7
 80143ec:	f7fc fabe 	bl	801096c <ucdr_serialize_uint8_t>
 80143f0:	78b1      	ldrb	r1, [r6, #2]
 80143f2:	4004      	ands	r4, r0
 80143f4:	4638      	mov	r0, r7
 80143f6:	f7fc fa89 	bl	801090c <ucdr_serialize_bool>
 80143fa:	78b3      	ldrb	r3, [r6, #2]
 80143fc:	b2e4      	uxtb	r4, r4
 80143fe:	4004      	ands	r4, r0
 8014400:	b94b      	cbnz	r3, 8014416 <uxr_serialize_ReadSpecification+0x3e>
 8014402:	7a31      	ldrb	r1, [r6, #8]
 8014404:	4638      	mov	r0, r7
 8014406:	f7fc fa81 	bl	801090c <ucdr_serialize_bool>
 801440a:	7a33      	ldrb	r3, [r6, #8]
 801440c:	4004      	ands	r4, r0
 801440e:	b943      	cbnz	r3, 8014422 <uxr_serialize_ReadSpecification+0x4a>
 8014410:	4620      	mov	r0, r4
 8014412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014416:	6871      	ldr	r1, [r6, #4]
 8014418:	4638      	mov	r0, r7
 801441a:	f003 fed9 	bl	80181d0 <ucdr_serialize_string>
 801441e:	4004      	ands	r4, r0
 8014420:	e7ef      	b.n	8014402 <uxr_serialize_ReadSpecification+0x2a>
 8014422:	8971      	ldrh	r1, [r6, #10]
 8014424:	4638      	mov	r0, r7
 8014426:	f7fc facd 	bl	80109c4 <ucdr_serialize_uint16_t>
 801442a:	89b1      	ldrh	r1, [r6, #12]
 801442c:	4605      	mov	r5, r0
 801442e:	4638      	mov	r0, r7
 8014430:	f7fc fac8 	bl	80109c4 <ucdr_serialize_uint16_t>
 8014434:	89f1      	ldrh	r1, [r6, #14]
 8014436:	4005      	ands	r5, r0
 8014438:	4638      	mov	r0, r7
 801443a:	f7fc fac3 	bl	80109c4 <ucdr_serialize_uint16_t>
 801443e:	8a31      	ldrh	r1, [r6, #16]
 8014440:	4680      	mov	r8, r0
 8014442:	4638      	mov	r0, r7
 8014444:	f7fc fabe 	bl	80109c4 <ucdr_serialize_uint16_t>
 8014448:	b2ed      	uxtb	r5, r5
 801444a:	4025      	ands	r5, r4
 801444c:	ea08 0505 	and.w	r5, r8, r5
 8014450:	ea00 0405 	and.w	r4, r0, r5
 8014454:	4620      	mov	r0, r4
 8014456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801445a:	bf00      	nop

0801445c <uxr_serialize_CREATE_CLIENT_Payload>:
 801445c:	f7ff ba3a 	b.w	80138d4 <uxr_serialize_CLIENT_Representation>

08014460 <uxr_serialize_CREATE_Payload>:
 8014460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014462:	2202      	movs	r2, #2
 8014464:	4606      	mov	r6, r0
 8014466:	460d      	mov	r5, r1
 8014468:	f003 fd92 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 801446c:	1ca9      	adds	r1, r5, #2
 801446e:	4604      	mov	r4, r0
 8014470:	2202      	movs	r2, #2
 8014472:	4630      	mov	r0, r6
 8014474:	f003 fd8c 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 8014478:	7929      	ldrb	r1, [r5, #4]
 801447a:	4607      	mov	r7, r0
 801447c:	4630      	mov	r0, r6
 801447e:	f7fc fa75 	bl	801096c <ucdr_serialize_uint8_t>
 8014482:	b328      	cbz	r0, 80144d0 <uxr_serialize_CREATE_Payload+0x70>
 8014484:	792b      	ldrb	r3, [r5, #4]
 8014486:	403c      	ands	r4, r7
 8014488:	3b01      	subs	r3, #1
 801448a:	b2e4      	uxtb	r4, r4
 801448c:	2b0d      	cmp	r3, #13
 801448e:	d81d      	bhi.n	80144cc <uxr_serialize_CREATE_Payload+0x6c>
 8014490:	e8df f003 	tbb	[pc, r3]
 8014494:	32320753 	.word	0x32320753
 8014498:	07070707 	.word	0x07070707
 801449c:	2121211c 	.word	0x2121211c
 80144a0:	684c      	.short	0x684c
 80144a2:	7a29      	ldrb	r1, [r5, #8]
 80144a4:	4630      	mov	r0, r6
 80144a6:	f7fc fa61 	bl	801096c <ucdr_serialize_uint8_t>
 80144aa:	4607      	mov	r7, r0
 80144ac:	b130      	cbz	r0, 80144bc <uxr_serialize_CREATE_Payload+0x5c>
 80144ae:	7a2b      	ldrb	r3, [r5, #8]
 80144b0:	2b02      	cmp	r3, #2
 80144b2:	d035      	beq.n	8014520 <uxr_serialize_CREATE_Payload+0xc0>
 80144b4:	2b03      	cmp	r3, #3
 80144b6:	d02b      	beq.n	8014510 <uxr_serialize_CREATE_Payload+0xb0>
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	d031      	beq.n	8014520 <uxr_serialize_CREATE_Payload+0xc0>
 80144bc:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80144c0:	4630      	mov	r0, r6
 80144c2:	2202      	movs	r2, #2
 80144c4:	f003 fd64 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 80144c8:	4038      	ands	r0, r7
 80144ca:	4004      	ands	r4, r0
 80144cc:	4620      	mov	r0, r4
 80144ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144d0:	2400      	movs	r4, #0
 80144d2:	4620      	mov	r0, r4
 80144d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144d6:	7a29      	ldrb	r1, [r5, #8]
 80144d8:	4630      	mov	r0, r6
 80144da:	f7fc fa47 	bl	801096c <ucdr_serialize_uint8_t>
 80144de:	2800      	cmp	r0, #0
 80144e0:	d0f6      	beq.n	80144d0 <uxr_serialize_CREATE_Payload+0x70>
 80144e2:	7a2b      	ldrb	r3, [r5, #8]
 80144e4:	2b01      	cmp	r3, #1
 80144e6:	d001      	beq.n	80144ec <uxr_serialize_CREATE_Payload+0x8c>
 80144e8:	2b02      	cmp	r3, #2
 80144ea:	d1ef      	bne.n	80144cc <uxr_serialize_CREATE_Payload+0x6c>
 80144ec:	68e9      	ldr	r1, [r5, #12]
 80144ee:	4630      	mov	r0, r6
 80144f0:	f003 fe6e 	bl	80181d0 <ucdr_serialize_string>
 80144f4:	4004      	ands	r4, r0
 80144f6:	e7e9      	b.n	80144cc <uxr_serialize_CREATE_Payload+0x6c>
 80144f8:	7a29      	ldrb	r1, [r5, #8]
 80144fa:	4630      	mov	r0, r6
 80144fc:	f7fc fa36 	bl	801096c <ucdr_serialize_uint8_t>
 8014500:	4607      	mov	r7, r0
 8014502:	2800      	cmp	r0, #0
 8014504:	d0da      	beq.n	80144bc <uxr_serialize_CREATE_Payload+0x5c>
 8014506:	7a2b      	ldrb	r3, [r5, #8]
 8014508:	2b02      	cmp	r3, #2
 801450a:	d009      	beq.n	8014520 <uxr_serialize_CREATE_Payload+0xc0>
 801450c:	2b03      	cmp	r3, #3
 801450e:	d1d5      	bne.n	80144bc <uxr_serialize_CREATE_Payload+0x5c>
 8014510:	68ea      	ldr	r2, [r5, #12]
 8014512:	f105 0110 	add.w	r1, r5, #16
 8014516:	4630      	mov	r0, r6
 8014518:	f003 fe2e 	bl	8018178 <ucdr_serialize_sequence_uint8_t>
 801451c:	4607      	mov	r7, r0
 801451e:	e7cd      	b.n	80144bc <uxr_serialize_CREATE_Payload+0x5c>
 8014520:	68e9      	ldr	r1, [r5, #12]
 8014522:	4630      	mov	r0, r6
 8014524:	f003 fe54 	bl	80181d0 <ucdr_serialize_string>
 8014528:	4607      	mov	r7, r0
 801452a:	e7c7      	b.n	80144bc <uxr_serialize_CREATE_Payload+0x5c>
 801452c:	f105 0108 	add.w	r1, r5, #8
 8014530:	4630      	mov	r0, r6
 8014532:	f7ff fa95 	bl	8013a60 <uxr_serialize_AGENT_Representation>
 8014536:	4004      	ands	r4, r0
 8014538:	e7c8      	b.n	80144cc <uxr_serialize_CREATE_Payload+0x6c>
 801453a:	7a29      	ldrb	r1, [r5, #8]
 801453c:	4630      	mov	r0, r6
 801453e:	f7fc fa15 	bl	801096c <ucdr_serialize_uint8_t>
 8014542:	4607      	mov	r7, r0
 8014544:	b130      	cbz	r0, 8014554 <uxr_serialize_CREATE_Payload+0xf4>
 8014546:	7a2b      	ldrb	r3, [r5, #8]
 8014548:	2b02      	cmp	r3, #2
 801454a:	d012      	beq.n	8014572 <uxr_serialize_CREATE_Payload+0x112>
 801454c:	2b03      	cmp	r3, #3
 801454e:	d016      	beq.n	801457e <uxr_serialize_CREATE_Payload+0x11e>
 8014550:	2b01      	cmp	r3, #1
 8014552:	d00e      	beq.n	8014572 <uxr_serialize_CREATE_Payload+0x112>
 8014554:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8014558:	4630      	mov	r0, r6
 801455a:	f7fc ff43 	bl	80113e4 <ucdr_serialize_int16_t>
 801455e:	4038      	ands	r0, r7
 8014560:	4004      	ands	r4, r0
 8014562:	e7b3      	b.n	80144cc <uxr_serialize_CREATE_Payload+0x6c>
 8014564:	f105 0108 	add.w	r1, r5, #8
 8014568:	4630      	mov	r0, r6
 801456a:	f7ff f9b3 	bl	80138d4 <uxr_serialize_CLIENT_Representation>
 801456e:	4004      	ands	r4, r0
 8014570:	e7ac      	b.n	80144cc <uxr_serialize_CREATE_Payload+0x6c>
 8014572:	68e9      	ldr	r1, [r5, #12]
 8014574:	4630      	mov	r0, r6
 8014576:	f003 fe2b 	bl	80181d0 <ucdr_serialize_string>
 801457a:	4607      	mov	r7, r0
 801457c:	e7ea      	b.n	8014554 <uxr_serialize_CREATE_Payload+0xf4>
 801457e:	68ea      	ldr	r2, [r5, #12]
 8014580:	f105 0110 	add.w	r1, r5, #16
 8014584:	4630      	mov	r0, r6
 8014586:	f003 fdf7 	bl	8018178 <ucdr_serialize_sequence_uint8_t>
 801458a:	4607      	mov	r7, r0
 801458c:	e7e2      	b.n	8014554 <uxr_serialize_CREATE_Payload+0xf4>
 801458e:	bf00      	nop

08014590 <uxr_deserialize_GET_INFO_Payload>:
 8014590:	b570      	push	{r4, r5, r6, lr}
 8014592:	2202      	movs	r2, #2
 8014594:	4605      	mov	r5, r0
 8014596:	460e      	mov	r6, r1
 8014598:	f003 fd5e 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 801459c:	1cb1      	adds	r1, r6, #2
 801459e:	2202      	movs	r2, #2
 80145a0:	4604      	mov	r4, r0
 80145a2:	4628      	mov	r0, r5
 80145a4:	f003 fd58 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80145a8:	1d31      	adds	r1, r6, #4
 80145aa:	4004      	ands	r4, r0
 80145ac:	4628      	mov	r0, r5
 80145ae:	f7fc fd23 	bl	8010ff8 <ucdr_deserialize_uint32_t>
 80145b2:	b2e4      	uxtb	r4, r4
 80145b4:	4020      	ands	r0, r4
 80145b6:	bd70      	pop	{r4, r5, r6, pc}

080145b8 <uxr_serialize_DELETE_Payload>:
 80145b8:	b570      	push	{r4, r5, r6, lr}
 80145ba:	2202      	movs	r2, #2
 80145bc:	4605      	mov	r5, r0
 80145be:	460e      	mov	r6, r1
 80145c0:	f003 fce6 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 80145c4:	1cb1      	adds	r1, r6, #2
 80145c6:	4604      	mov	r4, r0
 80145c8:	2202      	movs	r2, #2
 80145ca:	4628      	mov	r0, r5
 80145cc:	f003 fce0 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 80145d0:	4020      	ands	r0, r4
 80145d2:	b2c0      	uxtb	r0, r0
 80145d4:	bd70      	pop	{r4, r5, r6, pc}
 80145d6:	bf00      	nop

080145d8 <uxr_deserialize_STATUS_AGENT_Payload>:
 80145d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145dc:	4606      	mov	r6, r0
 80145de:	460f      	mov	r7, r1
 80145e0:	f7fc f9da 	bl	8010998 <ucdr_deserialize_uint8_t>
 80145e4:	1c79      	adds	r1, r7, #1
 80145e6:	4605      	mov	r5, r0
 80145e8:	4630      	mov	r0, r6
 80145ea:	f7fc f9d5 	bl	8010998 <ucdr_deserialize_uint8_t>
 80145ee:	1d39      	adds	r1, r7, #4
 80145f0:	4681      	mov	r9, r0
 80145f2:	2204      	movs	r2, #4
 80145f4:	4630      	mov	r0, r6
 80145f6:	f003 fd2f 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80145fa:	f107 0108 	add.w	r1, r7, #8
 80145fe:	4604      	mov	r4, r0
 8014600:	2202      	movs	r2, #2
 8014602:	4630      	mov	r0, r6
 8014604:	f003 fd28 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 8014608:	f107 010a 	add.w	r1, r7, #10
 801460c:	4680      	mov	r8, r0
 801460e:	2202      	movs	r2, #2
 8014610:	4630      	mov	r0, r6
 8014612:	f003 fd21 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 8014616:	ea05 0509 	and.w	r5, r5, r9
 801461a:	b2ed      	uxtb	r5, r5
 801461c:	402c      	ands	r4, r5
 801461e:	f107 010c 	add.w	r1, r7, #12
 8014622:	4605      	mov	r5, r0
 8014624:	4630      	mov	r0, r6
 8014626:	f7fc f987 	bl	8010938 <ucdr_deserialize_bool>
 801462a:	ea08 0404 	and.w	r4, r8, r4
 801462e:	4025      	ands	r5, r4
 8014630:	4028      	ands	r0, r5
 8014632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014636:	bf00      	nop

08014638 <uxr_deserialize_STATUS_Payload>:
 8014638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801463c:	2202      	movs	r2, #2
 801463e:	4606      	mov	r6, r0
 8014640:	460f      	mov	r7, r1
 8014642:	f003 fd09 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 8014646:	2202      	movs	r2, #2
 8014648:	1cb9      	adds	r1, r7, #2
 801464a:	4605      	mov	r5, r0
 801464c:	4630      	mov	r0, r6
 801464e:	f003 fd03 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 8014652:	1d39      	adds	r1, r7, #4
 8014654:	4680      	mov	r8, r0
 8014656:	4630      	mov	r0, r6
 8014658:	f7fc f99e 	bl	8010998 <ucdr_deserialize_uint8_t>
 801465c:	1d79      	adds	r1, r7, #5
 801465e:	4604      	mov	r4, r0
 8014660:	4630      	mov	r0, r6
 8014662:	f7fc f999 	bl	8010998 <ucdr_deserialize_uint8_t>
 8014666:	ea05 0508 	and.w	r5, r5, r8
 801466a:	402c      	ands	r4, r5
 801466c:	4020      	ands	r0, r4
 801466e:	b2c0      	uxtb	r0, r0
 8014670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014674 <uxr_serialize_INFO_Payload>:
 8014674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014678:	2202      	movs	r2, #2
 801467a:	460c      	mov	r4, r1
 801467c:	4605      	mov	r5, r0
 801467e:	f003 fc87 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 8014682:	2202      	movs	r2, #2
 8014684:	4680      	mov	r8, r0
 8014686:	1ca1      	adds	r1, r4, #2
 8014688:	4628      	mov	r0, r5
 801468a:	f003 fc81 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 801468e:	7921      	ldrb	r1, [r4, #4]
 8014690:	4607      	mov	r7, r0
 8014692:	4628      	mov	r0, r5
 8014694:	f7fc f96a 	bl	801096c <ucdr_serialize_uint8_t>
 8014698:	7961      	ldrb	r1, [r4, #5]
 801469a:	4606      	mov	r6, r0
 801469c:	4628      	mov	r0, r5
 801469e:	f7fc f965 	bl	801096c <ucdr_serialize_uint8_t>
 80146a2:	ea08 0807 	and.w	r8, r8, r7
 80146a6:	ea06 0608 	and.w	r6, r6, r8
 80146aa:	4006      	ands	r6, r0
 80146ac:	7a21      	ldrb	r1, [r4, #8]
 80146ae:	4628      	mov	r0, r5
 80146b0:	f7fc f92c 	bl	801090c <ucdr_serialize_bool>
 80146b4:	7a23      	ldrb	r3, [r4, #8]
 80146b6:	b2f7      	uxtb	r7, r6
 80146b8:	4606      	mov	r6, r0
 80146ba:	b96b      	cbnz	r3, 80146d8 <uxr_serialize_INFO_Payload+0x64>
 80146bc:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80146c0:	4628      	mov	r0, r5
 80146c2:	f7fc f923 	bl	801090c <ucdr_serialize_bool>
 80146c6:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80146ca:	4030      	ands	r0, r6
 80146cc:	b2c6      	uxtb	r6, r0
 80146ce:	b983      	cbnz	r3, 80146f2 <uxr_serialize_INFO_Payload+0x7e>
 80146d0:	ea06 0007 	and.w	r0, r6, r7
 80146d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146d8:	7b21      	ldrb	r1, [r4, #12]
 80146da:	4628      	mov	r0, r5
 80146dc:	f7fc f946 	bl	801096c <ucdr_serialize_uint8_t>
 80146e0:	b188      	cbz	r0, 8014706 <uxr_serialize_INFO_Payload+0x92>
 80146e2:	f104 010c 	add.w	r1, r4, #12
 80146e6:	4628      	mov	r0, r5
 80146e8:	f7ff fa06 	bl	8013af8 <uxr_serialize_ObjectVariant.part.0>
 80146ec:	4030      	ands	r0, r6
 80146ee:	b2c6      	uxtb	r6, r0
 80146f0:	e7e4      	b.n	80146bc <uxr_serialize_INFO_Payload+0x48>
 80146f2:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80146f6:	4628      	mov	r0, r5
 80146f8:	f7ff fe24 	bl	8014344 <uxr_serialize_ActivityInfoVariant>
 80146fc:	4006      	ands	r6, r0
 80146fe:	ea06 0007 	and.w	r0, r6, r7
 8014702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014706:	4606      	mov	r6, r0
 8014708:	e7d8      	b.n	80146bc <uxr_serialize_INFO_Payload+0x48>
 801470a:	bf00      	nop

0801470c <uxr_serialize_READ_DATA_Payload>:
 801470c:	b570      	push	{r4, r5, r6, lr}
 801470e:	2202      	movs	r2, #2
 8014710:	4605      	mov	r5, r0
 8014712:	460e      	mov	r6, r1
 8014714:	f003 fc3c 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 8014718:	1cb1      	adds	r1, r6, #2
 801471a:	2202      	movs	r2, #2
 801471c:	4604      	mov	r4, r0
 801471e:	4628      	mov	r0, r5
 8014720:	f003 fc36 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 8014724:	1d31      	adds	r1, r6, #4
 8014726:	4004      	ands	r4, r0
 8014728:	4628      	mov	r0, r5
 801472a:	f7ff fe55 	bl	80143d8 <uxr_serialize_ReadSpecification>
 801472e:	b2e4      	uxtb	r4, r4
 8014730:	4020      	ands	r0, r4
 8014732:	bd70      	pop	{r4, r5, r6, pc}

08014734 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8014734:	b570      	push	{r4, r5, r6, lr}
 8014736:	2202      	movs	r2, #2
 8014738:	4605      	mov	r5, r0
 801473a:	460e      	mov	r6, r1
 801473c:	f003 fc28 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 8014740:	1cb1      	adds	r1, r6, #2
 8014742:	4604      	mov	r4, r0
 8014744:	2202      	movs	r2, #2
 8014746:	4628      	mov	r0, r5
 8014748:	f003 fc22 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 801474c:	4020      	ands	r0, r4
 801474e:	b2c0      	uxtb	r0, r0
 8014750:	bd70      	pop	{r4, r5, r6, pc}
 8014752:	bf00      	nop

08014754 <uxr_serialize_ACKNACK_Payload>:
 8014754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014756:	460f      	mov	r7, r1
 8014758:	460e      	mov	r6, r1
 801475a:	f837 1b02 	ldrh.w	r1, [r7], #2
 801475e:	4605      	mov	r5, r0
 8014760:	f7fc f930 	bl	80109c4 <ucdr_serialize_uint16_t>
 8014764:	4639      	mov	r1, r7
 8014766:	2202      	movs	r2, #2
 8014768:	4604      	mov	r4, r0
 801476a:	4628      	mov	r0, r5
 801476c:	f003 fc10 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 8014770:	7931      	ldrb	r1, [r6, #4]
 8014772:	4004      	ands	r4, r0
 8014774:	4628      	mov	r0, r5
 8014776:	f7fc f8f9 	bl	801096c <ucdr_serialize_uint8_t>
 801477a:	b2e4      	uxtb	r4, r4
 801477c:	4020      	ands	r0, r4
 801477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014780 <uxr_deserialize_ACKNACK_Payload>:
 8014780:	b570      	push	{r4, r5, r6, lr}
 8014782:	4605      	mov	r5, r0
 8014784:	460e      	mov	r6, r1
 8014786:	f7fc fa1d 	bl	8010bc4 <ucdr_deserialize_uint16_t>
 801478a:	1cb1      	adds	r1, r6, #2
 801478c:	2202      	movs	r2, #2
 801478e:	4604      	mov	r4, r0
 8014790:	4628      	mov	r0, r5
 8014792:	f003 fc61 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 8014796:	1d31      	adds	r1, r6, #4
 8014798:	4004      	ands	r4, r0
 801479a:	4628      	mov	r0, r5
 801479c:	f7fc f8fc 	bl	8010998 <ucdr_deserialize_uint8_t>
 80147a0:	b2e4      	uxtb	r4, r4
 80147a2:	4020      	ands	r0, r4
 80147a4:	bd70      	pop	{r4, r5, r6, pc}
 80147a6:	bf00      	nop

080147a8 <uxr_serialize_HEARTBEAT_Payload>:
 80147a8:	b570      	push	{r4, r5, r6, lr}
 80147aa:	460d      	mov	r5, r1
 80147ac:	8809      	ldrh	r1, [r1, #0]
 80147ae:	4606      	mov	r6, r0
 80147b0:	f7fc f908 	bl	80109c4 <ucdr_serialize_uint16_t>
 80147b4:	8869      	ldrh	r1, [r5, #2]
 80147b6:	4604      	mov	r4, r0
 80147b8:	4630      	mov	r0, r6
 80147ba:	f7fc f903 	bl	80109c4 <ucdr_serialize_uint16_t>
 80147be:	7929      	ldrb	r1, [r5, #4]
 80147c0:	4004      	ands	r4, r0
 80147c2:	4630      	mov	r0, r6
 80147c4:	f7fc f8d2 	bl	801096c <ucdr_serialize_uint8_t>
 80147c8:	b2e4      	uxtb	r4, r4
 80147ca:	4020      	ands	r0, r4
 80147cc:	bd70      	pop	{r4, r5, r6, pc}
 80147ce:	bf00      	nop

080147d0 <uxr_deserialize_HEARTBEAT_Payload>:
 80147d0:	b570      	push	{r4, r5, r6, lr}
 80147d2:	4605      	mov	r5, r0
 80147d4:	460e      	mov	r6, r1
 80147d6:	f7fc f9f5 	bl	8010bc4 <ucdr_deserialize_uint16_t>
 80147da:	1cb1      	adds	r1, r6, #2
 80147dc:	4604      	mov	r4, r0
 80147de:	4628      	mov	r0, r5
 80147e0:	f7fc f9f0 	bl	8010bc4 <ucdr_deserialize_uint16_t>
 80147e4:	1d31      	adds	r1, r6, #4
 80147e6:	4004      	ands	r4, r0
 80147e8:	4628      	mov	r0, r5
 80147ea:	f7fc f8d5 	bl	8010998 <ucdr_deserialize_uint8_t>
 80147ee:	b2e4      	uxtb	r4, r4
 80147f0:	4020      	ands	r0, r4
 80147f2:	bd70      	pop	{r4, r5, r6, pc}

080147f4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80147f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147f8:	4605      	mov	r5, r0
 80147fa:	460e      	mov	r6, r1
 80147fc:	f7fc ff7e 	bl	80116fc <ucdr_deserialize_int32_t>
 8014800:	1d31      	adds	r1, r6, #4
 8014802:	4607      	mov	r7, r0
 8014804:	4628      	mov	r0, r5
 8014806:	f7fc fbf7 	bl	8010ff8 <ucdr_deserialize_uint32_t>
 801480a:	f106 0108 	add.w	r1, r6, #8
 801480e:	4680      	mov	r8, r0
 8014810:	4628      	mov	r0, r5
 8014812:	f7fc ff73 	bl	80116fc <ucdr_deserialize_int32_t>
 8014816:	f106 010c 	add.w	r1, r6, #12
 801481a:	4604      	mov	r4, r0
 801481c:	4628      	mov	r0, r5
 801481e:	f7fc fbeb 	bl	8010ff8 <ucdr_deserialize_uint32_t>
 8014822:	ea07 0708 	and.w	r7, r7, r8
 8014826:	403c      	ands	r4, r7
 8014828:	f106 0110 	add.w	r1, r6, #16
 801482c:	4004      	ands	r4, r0
 801482e:	4628      	mov	r0, r5
 8014830:	f7fc ff64 	bl	80116fc <ucdr_deserialize_int32_t>
 8014834:	f106 0114 	add.w	r1, r6, #20
 8014838:	4603      	mov	r3, r0
 801483a:	4628      	mov	r0, r5
 801483c:	461d      	mov	r5, r3
 801483e:	f7fc fbdb 	bl	8010ff8 <ucdr_deserialize_uint32_t>
 8014842:	b2e4      	uxtb	r4, r4
 8014844:	402c      	ands	r4, r5
 8014846:	4020      	ands	r0, r4
 8014848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801484c <uxr_serialize_SampleIdentity>:
 801484c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014850:	220c      	movs	r2, #12
 8014852:	4604      	mov	r4, r0
 8014854:	460d      	mov	r5, r1
 8014856:	f003 fb9b 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 801485a:	2203      	movs	r2, #3
 801485c:	f105 010c 	add.w	r1, r5, #12
 8014860:	4607      	mov	r7, r0
 8014862:	4620      	mov	r0, r4
 8014864:	f003 fb94 	bl	8017f90 <ucdr_serialize_array_uint8_t>
 8014868:	7be9      	ldrb	r1, [r5, #15]
 801486a:	4680      	mov	r8, r0
 801486c:	4620      	mov	r0, r4
 801486e:	f7fc f87d 	bl	801096c <ucdr_serialize_uint8_t>
 8014872:	6929      	ldr	r1, [r5, #16]
 8014874:	4606      	mov	r6, r0
 8014876:	4620      	mov	r0, r4
 8014878:	f7fc fea8 	bl	80115cc <ucdr_serialize_int32_t>
 801487c:	6969      	ldr	r1, [r5, #20]
 801487e:	4603      	mov	r3, r0
 8014880:	4620      	mov	r0, r4
 8014882:	ea07 0708 	and.w	r7, r7, r8
 8014886:	461c      	mov	r4, r3
 8014888:	f7fc fa86 	bl	8010d98 <ucdr_serialize_uint32_t>
 801488c:	403e      	ands	r6, r7
 801488e:	4034      	ands	r4, r6
 8014890:	4020      	ands	r0, r4
 8014892:	b2c0      	uxtb	r0, r0
 8014894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014898 <uxr_deserialize_SampleIdentity>:
 8014898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801489c:	220c      	movs	r2, #12
 801489e:	4604      	mov	r4, r0
 80148a0:	460d      	mov	r5, r1
 80148a2:	f003 fbd9 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80148a6:	2203      	movs	r2, #3
 80148a8:	f105 010c 	add.w	r1, r5, #12
 80148ac:	4607      	mov	r7, r0
 80148ae:	4620      	mov	r0, r4
 80148b0:	f003 fbd2 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80148b4:	f105 010f 	add.w	r1, r5, #15
 80148b8:	4680      	mov	r8, r0
 80148ba:	4620      	mov	r0, r4
 80148bc:	f7fc f86c 	bl	8010998 <ucdr_deserialize_uint8_t>
 80148c0:	f105 0110 	add.w	r1, r5, #16
 80148c4:	4606      	mov	r6, r0
 80148c6:	4620      	mov	r0, r4
 80148c8:	f7fc ff18 	bl	80116fc <ucdr_deserialize_int32_t>
 80148cc:	f105 0114 	add.w	r1, r5, #20
 80148d0:	4603      	mov	r3, r0
 80148d2:	4620      	mov	r0, r4
 80148d4:	ea07 0708 	and.w	r7, r7, r8
 80148d8:	461c      	mov	r4, r3
 80148da:	f7fc fb8d 	bl	8010ff8 <ucdr_deserialize_uint32_t>
 80148de:	403e      	ands	r6, r7
 80148e0:	4034      	ands	r4, r6
 80148e2:	4020      	ands	r0, r4
 80148e4:	b2c0      	uxtb	r0, r0
 80148e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148ea:	bf00      	nop

080148ec <rcl_client_get_rmw_handle>:
 80148ec:	b110      	cbz	r0, 80148f4 <rcl_client_get_rmw_handle+0x8>
 80148ee:	6800      	ldr	r0, [r0, #0]
 80148f0:	b100      	cbz	r0, 80148f4 <rcl_client_get_rmw_handle+0x8>
 80148f2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80148f4:	4770      	bx	lr
 80148f6:	bf00      	nop

080148f8 <rcl_take_response>:
 80148f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148fa:	460e      	mov	r6, r1
 80148fc:	460c      	mov	r4, r1
 80148fe:	4607      	mov	r7, r0
 8014900:	4694      	mov	ip, r2
 8014902:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014904:	b08d      	sub	sp, #52	; 0x34
 8014906:	ad06      	add	r5, sp, #24
 8014908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801490a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801490e:	e885 0003 	stmia.w	r5, {r0, r1}
 8014912:	b337      	cbz	r7, 8014962 <rcl_take_response+0x6a>
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	b323      	cbz	r3, 8014962 <rcl_take_response+0x6a>
 8014918:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801491a:	b310      	cbz	r0, 8014962 <rcl_take_response+0x6a>
 801491c:	4662      	mov	r2, ip
 801491e:	b31a      	cbz	r2, 8014968 <rcl_take_response+0x70>
 8014920:	2300      	movs	r3, #0
 8014922:	2600      	movs	r6, #0
 8014924:	2700      	movs	r7, #0
 8014926:	f88d 3007 	strb.w	r3, [sp, #7]
 801492a:	a902      	add	r1, sp, #8
 801492c:	f10d 0307 	add.w	r3, sp, #7
 8014930:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014934:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014938:	f003 f872 	bl	8017a20 <rmw_take_response>
 801493c:	4606      	mov	r6, r0
 801493e:	b9a8      	cbnz	r0, 801496c <rcl_take_response+0x74>
 8014940:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014944:	f240 13f5 	movw	r3, #501	; 0x1f5
 8014948:	2a00      	cmp	r2, #0
 801494a:	bf08      	it	eq
 801494c:	461e      	moveq	r6, r3
 801494e:	ad06      	add	r5, sp, #24
 8014950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014954:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014958:	e884 0003 	stmia.w	r4, {r0, r1}
 801495c:	4630      	mov	r0, r6
 801495e:	b00d      	add	sp, #52	; 0x34
 8014960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014962:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8014966:	e7f2      	b.n	801494e <rcl_take_response+0x56>
 8014968:	260b      	movs	r6, #11
 801496a:	e7f0      	b.n	801494e <rcl_take_response+0x56>
 801496c:	2601      	movs	r6, #1
 801496e:	e7ee      	b.n	801494e <rcl_take_response+0x56>

08014970 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014970:	280b      	cmp	r0, #11
 8014972:	dc0d      	bgt.n	8014990 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014974:	2800      	cmp	r0, #0
 8014976:	db09      	blt.n	801498c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014978:	280b      	cmp	r0, #11
 801497a:	d807      	bhi.n	801498c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801497c:	e8df f000 	tbb	[pc, r0]
 8014980:	07060607 	.word	0x07060607
 8014984:	06060606 	.word	0x06060606
 8014988:	07070606 	.word	0x07070606
 801498c:	2001      	movs	r0, #1
 801498e:	4770      	bx	lr
 8014990:	28cb      	cmp	r0, #203	; 0xcb
 8014992:	bf18      	it	ne
 8014994:	2001      	movne	r0, #1
 8014996:	4770      	bx	lr

08014998 <rcl_get_zero_initialized_context>:
 8014998:	4a03      	ldr	r2, [pc, #12]	; (80149a8 <rcl_get_zero_initialized_context+0x10>)
 801499a:	4603      	mov	r3, r0
 801499c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80149a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80149a4:	4618      	mov	r0, r3
 80149a6:	4770      	bx	lr
 80149a8:	0801ba74 	.word	0x0801ba74

080149ac <rcl_context_is_valid>:
 80149ac:	b118      	cbz	r0, 80149b6 <rcl_context_is_valid+0xa>
 80149ae:	6840      	ldr	r0, [r0, #4]
 80149b0:	3800      	subs	r0, #0
 80149b2:	bf18      	it	ne
 80149b4:	2001      	movne	r0, #1
 80149b6:	4770      	bx	lr

080149b8 <__cleanup_context>:
 80149b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149bc:	4606      	mov	r6, r0
 80149be:	6800      	ldr	r0, [r0, #0]
 80149c0:	2300      	movs	r3, #0
 80149c2:	6073      	str	r3, [r6, #4]
 80149c4:	2800      	cmp	r0, #0
 80149c6:	d04d      	beq.n	8014a64 <__cleanup_context+0xac>
 80149c8:	6947      	ldr	r7, [r0, #20]
 80149ca:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80149ce:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80149d2:	b137      	cbz	r7, 80149e2 <__cleanup_context+0x2a>
 80149d4:	3014      	adds	r0, #20
 80149d6:	f000 fb1d 	bl	8015014 <rcl_init_options_fini>
 80149da:	4607      	mov	r7, r0
 80149dc:	2800      	cmp	r0, #0
 80149de:	d148      	bne.n	8014a72 <__cleanup_context+0xba>
 80149e0:	6830      	ldr	r0, [r6, #0]
 80149e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80149e4:	b143      	cbz	r3, 80149f8 <__cleanup_context+0x40>
 80149e6:	3028      	adds	r0, #40	; 0x28
 80149e8:	f002 fd96 	bl	8017518 <rmw_context_fini>
 80149ec:	b118      	cbz	r0, 80149f6 <__cleanup_context+0x3e>
 80149ee:	2f00      	cmp	r7, #0
 80149f0:	d042      	beq.n	8014a78 <__cleanup_context+0xc0>
 80149f2:	f7fa feb5 	bl	800f760 <rcutils_reset_error>
 80149f6:	6830      	ldr	r0, [r6, #0]
 80149f8:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80149fc:	f1bc 0f00 	cmp.w	ip, #0
 8014a00:	d01c      	beq.n	8014a3c <__cleanup_context+0x84>
 8014a02:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014a06:	2a01      	cmp	r2, #1
 8014a08:	f173 0100 	sbcs.w	r1, r3, #0
 8014a0c:	db12      	blt.n	8014a34 <__cleanup_context+0x7c>
 8014a0e:	2400      	movs	r4, #0
 8014a10:	2500      	movs	r5, #0
 8014a12:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8014a16:	4649      	mov	r1, r9
 8014a18:	b1c0      	cbz	r0, 8014a4c <__cleanup_context+0x94>
 8014a1a:	47c0      	blx	r8
 8014a1c:	6831      	ldr	r1, [r6, #0]
 8014a1e:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8014a22:	3401      	adds	r4, #1
 8014a24:	f145 0500 	adc.w	r5, r5, #0
 8014a28:	4294      	cmp	r4, r2
 8014a2a:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8014a2e:	eb75 0103 	sbcs.w	r1, r5, r3
 8014a32:	dbee      	blt.n	8014a12 <__cleanup_context+0x5a>
 8014a34:	4660      	mov	r0, ip
 8014a36:	4649      	mov	r1, r9
 8014a38:	47c0      	blx	r8
 8014a3a:	6830      	ldr	r0, [r6, #0]
 8014a3c:	4649      	mov	r1, r9
 8014a3e:	47c0      	blx	r8
 8014a40:	2300      	movs	r3, #0
 8014a42:	e9c6 3300 	strd	r3, r3, [r6]
 8014a46:	4638      	mov	r0, r7
 8014a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a4c:	3401      	adds	r4, #1
 8014a4e:	f145 0500 	adc.w	r5, r5, #0
 8014a52:	4294      	cmp	r4, r2
 8014a54:	eb75 0103 	sbcs.w	r1, r5, r3
 8014a58:	dbdb      	blt.n	8014a12 <__cleanup_context+0x5a>
 8014a5a:	4660      	mov	r0, ip
 8014a5c:	4649      	mov	r1, r9
 8014a5e:	47c0      	blx	r8
 8014a60:	6830      	ldr	r0, [r6, #0]
 8014a62:	e7eb      	b.n	8014a3c <__cleanup_context+0x84>
 8014a64:	4607      	mov	r7, r0
 8014a66:	2300      	movs	r3, #0
 8014a68:	e9c6 3300 	strd	r3, r3, [r6]
 8014a6c:	4638      	mov	r0, r7
 8014a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a72:	f7fa fe75 	bl	800f760 <rcutils_reset_error>
 8014a76:	e7b3      	b.n	80149e0 <__cleanup_context+0x28>
 8014a78:	f7ff ff7a 	bl	8014970 <rcl_convert_rmw_ret_to_rcl_ret>
 8014a7c:	4607      	mov	r7, r0
 8014a7e:	e7b8      	b.n	80149f2 <__cleanup_context+0x3a>

08014a80 <rcl_expand_topic_name>:
 8014a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a84:	b08b      	sub	sp, #44	; 0x2c
 8014a86:	9306      	str	r3, [sp, #24]
 8014a88:	2800      	cmp	r0, #0
 8014a8a:	f000 80d2 	beq.w	8014c32 <rcl_expand_topic_name+0x1b2>
 8014a8e:	460e      	mov	r6, r1
 8014a90:	2900      	cmp	r1, #0
 8014a92:	f000 80ce 	beq.w	8014c32 <rcl_expand_topic_name+0x1b2>
 8014a96:	4617      	mov	r7, r2
 8014a98:	2a00      	cmp	r2, #0
 8014a9a:	f000 80ca 	beq.w	8014c32 <rcl_expand_topic_name+0x1b2>
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	f000 80c7 	beq.w	8014c32 <rcl_expand_topic_name+0x1b2>
 8014aa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	f000 80c3 	beq.w	8014c32 <rcl_expand_topic_name+0x1b2>
 8014aac:	a909      	add	r1, sp, #36	; 0x24
 8014aae:	2200      	movs	r2, #0
 8014ab0:	4680      	mov	r8, r0
 8014ab2:	f001 f8d3 	bl	8015c5c <rcl_validate_topic_name>
 8014ab6:	4604      	mov	r4, r0
 8014ab8:	2800      	cmp	r0, #0
 8014aba:	f040 80b6 	bne.w	8014c2a <rcl_expand_topic_name+0x1aa>
 8014abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	f040 80bf 	bne.w	8014c44 <rcl_expand_topic_name+0x1c4>
 8014ac6:	4602      	mov	r2, r0
 8014ac8:	a909      	add	r1, sp, #36	; 0x24
 8014aca:	4630      	mov	r0, r6
 8014acc:	f002 fa46 	bl	8016f5c <rmw_validate_node_name>
 8014ad0:	2800      	cmp	r0, #0
 8014ad2:	f040 80b3 	bne.w	8014c3c <rcl_expand_topic_name+0x1bc>
 8014ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ad8:	2a00      	cmp	r2, #0
 8014ada:	f040 80b8 	bne.w	8014c4e <rcl_expand_topic_name+0x1ce>
 8014ade:	a909      	add	r1, sp, #36	; 0x24
 8014ae0:	4638      	mov	r0, r7
 8014ae2:	f002 fa1d 	bl	8016f20 <rmw_validate_namespace>
 8014ae6:	2800      	cmp	r0, #0
 8014ae8:	f040 80a8 	bne.w	8014c3c <rcl_expand_topic_name+0x1bc>
 8014aec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014aee:	2c00      	cmp	r4, #0
 8014af0:	f040 80f6 	bne.w	8014ce0 <rcl_expand_topic_name+0x260>
 8014af4:	217b      	movs	r1, #123	; 0x7b
 8014af6:	4640      	mov	r0, r8
 8014af8:	f005 fd1a 	bl	801a530 <strchr>
 8014afc:	f898 3000 	ldrb.w	r3, [r8]
 8014b00:	2b2f      	cmp	r3, #47	; 0x2f
 8014b02:	4605      	mov	r5, r0
 8014b04:	f000 80c4 	beq.w	8014c90 <rcl_expand_topic_name+0x210>
 8014b08:	2b7e      	cmp	r3, #126	; 0x7e
 8014b0a:	d16f      	bne.n	8014bec <rcl_expand_topic_name+0x16c>
 8014b0c:	4638      	mov	r0, r7
 8014b0e:	f7eb fb71 	bl	80001f4 <strlen>
 8014b12:	4b87      	ldr	r3, [pc, #540]	; (8014d30 <rcl_expand_topic_name+0x2b0>)
 8014b14:	4987      	ldr	r1, [pc, #540]	; (8014d34 <rcl_expand_topic_name+0x2b4>)
 8014b16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014b18:	9604      	str	r6, [sp, #16]
 8014b1a:	2801      	cmp	r0, #1
 8014b1c:	bf0c      	ite	eq
 8014b1e:	4618      	moveq	r0, r3
 8014b20:	4608      	movne	r0, r1
 8014b22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014b26:	e9cd 2300 	strd	r2, r3, [sp]
 8014b2a:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014b2e:	f108 0101 	add.w	r1, r8, #1
 8014b32:	9105      	str	r1, [sp, #20]
 8014b34:	ab14      	add	r3, sp, #80	; 0x50
 8014b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014b38:	f002 f820 	bl	8016b7c <rcutils_format_string_limit>
 8014b3c:	4682      	mov	sl, r0
 8014b3e:	2800      	cmp	r0, #0
 8014b40:	f000 80d0 	beq.w	8014ce4 <rcl_expand_topic_name+0x264>
 8014b44:	2d00      	cmp	r5, #0
 8014b46:	f000 80aa 	beq.w	8014c9e <rcl_expand_topic_name+0x21e>
 8014b4a:	217b      	movs	r1, #123	; 0x7b
 8014b4c:	f005 fcf0 	bl	801a530 <strchr>
 8014b50:	46d1      	mov	r9, sl
 8014b52:	4605      	mov	r5, r0
 8014b54:	9407      	str	r4, [sp, #28]
 8014b56:	46d3      	mov	fp, sl
 8014b58:	464c      	mov	r4, r9
 8014b5a:	2d00      	cmp	r5, #0
 8014b5c:	f000 80c7 	beq.w	8014cee <rcl_expand_topic_name+0x26e>
 8014b60:	217d      	movs	r1, #125	; 0x7d
 8014b62:	4620      	mov	r0, r4
 8014b64:	f005 fce4 	bl	801a530 <strchr>
 8014b68:	eba0 0905 	sub.w	r9, r0, r5
 8014b6c:	f109 0a01 	add.w	sl, r9, #1
 8014b70:	4871      	ldr	r0, [pc, #452]	; (8014d38 <rcl_expand_topic_name+0x2b8>)
 8014b72:	4652      	mov	r2, sl
 8014b74:	4629      	mov	r1, r5
 8014b76:	f005 fce8 	bl	801a54a <strncmp>
 8014b7a:	2800      	cmp	r0, #0
 8014b7c:	f000 808d 	beq.w	8014c9a <rcl_expand_topic_name+0x21a>
 8014b80:	486e      	ldr	r0, [pc, #440]	; (8014d3c <rcl_expand_topic_name+0x2bc>)
 8014b82:	4652      	mov	r2, sl
 8014b84:	4629      	mov	r1, r5
 8014b86:	f005 fce0 	bl	801a54a <strncmp>
 8014b8a:	b130      	cbz	r0, 8014b9a <rcl_expand_topic_name+0x11a>
 8014b8c:	486c      	ldr	r0, [pc, #432]	; (8014d40 <rcl_expand_topic_name+0x2c0>)
 8014b8e:	4652      	mov	r2, sl
 8014b90:	4629      	mov	r1, r5
 8014b92:	f005 fcda 	bl	801a54a <strncmp>
 8014b96:	2800      	cmp	r0, #0
 8014b98:	d15b      	bne.n	8014c52 <rcl_expand_topic_name+0x1d2>
 8014b9a:	46b9      	mov	r9, r7
 8014b9c:	ab16      	add	r3, sp, #88	; 0x58
 8014b9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014ba2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014ba6:	ab14      	add	r3, sp, #80	; 0x50
 8014ba8:	4628      	mov	r0, r5
 8014baa:	cb0c      	ldmia	r3, {r2, r3}
 8014bac:	4651      	mov	r1, sl
 8014bae:	f002 f931 	bl	8016e14 <rcutils_strndup>
 8014bb2:	4605      	mov	r5, r0
 8014bb4:	2800      	cmp	r0, #0
 8014bb6:	f000 80a4 	beq.w	8014d02 <rcl_expand_topic_name+0x282>
 8014bba:	464a      	mov	r2, r9
 8014bbc:	4620      	mov	r0, r4
 8014bbe:	ab14      	add	r3, sp, #80	; 0x50
 8014bc0:	4629      	mov	r1, r5
 8014bc2:	f002 f82d 	bl	8016c20 <rcutils_repl_str>
 8014bc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bc8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014bca:	4604      	mov	r4, r0
 8014bcc:	4628      	mov	r0, r5
 8014bce:	4798      	blx	r3
 8014bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bd2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014bd4:	4658      	mov	r0, fp
 8014bd6:	4798      	blx	r3
 8014bd8:	2c00      	cmp	r4, #0
 8014bda:	f000 8083 	beq.w	8014ce4 <rcl_expand_topic_name+0x264>
 8014bde:	217b      	movs	r1, #123	; 0x7b
 8014be0:	4620      	mov	r0, r4
 8014be2:	f005 fca5 	bl	801a530 <strchr>
 8014be6:	46a3      	mov	fp, r4
 8014be8:	4605      	mov	r5, r0
 8014bea:	e7b6      	b.n	8014b5a <rcl_expand_topic_name+0xda>
 8014bec:	2800      	cmp	r0, #0
 8014bee:	d151      	bne.n	8014c94 <rcl_expand_topic_name+0x214>
 8014bf0:	4638      	mov	r0, r7
 8014bf2:	f7eb faff 	bl	80001f4 <strlen>
 8014bf6:	4b53      	ldr	r3, [pc, #332]	; (8014d44 <rcl_expand_topic_name+0x2c4>)
 8014bf8:	4a53      	ldr	r2, [pc, #332]	; (8014d48 <rcl_expand_topic_name+0x2c8>)
 8014bfa:	f8cd 8010 	str.w	r8, [sp, #16]
 8014bfe:	2801      	cmp	r0, #1
 8014c00:	bf0c      	ite	eq
 8014c02:	4618      	moveq	r0, r3
 8014c04:	4610      	movne	r0, r2
 8014c06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c0c:	e9cd 3200 	strd	r3, r2, [sp]
 8014c10:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014c14:	ab14      	add	r3, sp, #80	; 0x50
 8014c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014c18:	f001 ffb0 	bl	8016b7c <rcutils_format_string_limit>
 8014c1c:	4682      	mov	sl, r0
 8014c1e:	4653      	mov	r3, sl
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d05f      	beq.n	8014ce4 <rcl_expand_topic_name+0x264>
 8014c24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014c26:	f8c3 a000 	str.w	sl, [r3]
 8014c2a:	4620      	mov	r0, r4
 8014c2c:	b00b      	add	sp, #44	; 0x2c
 8014c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c32:	240b      	movs	r4, #11
 8014c34:	4620      	mov	r0, r4
 8014c36:	b00b      	add	sp, #44	; 0x2c
 8014c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c3c:	f7ff fe98 	bl	8014970 <rcl_convert_rmw_ret_to_rcl_ret>
 8014c40:	4604      	mov	r4, r0
 8014c42:	e7f2      	b.n	8014c2a <rcl_expand_topic_name+0x1aa>
 8014c44:	2467      	movs	r4, #103	; 0x67
 8014c46:	4620      	mov	r0, r4
 8014c48:	b00b      	add	sp, #44	; 0x2c
 8014c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c4e:	24c9      	movs	r4, #201	; 0xc9
 8014c50:	e7eb      	b.n	8014c2a <rcl_expand_topic_name+0x1aa>
 8014c52:	f109 32ff 	add.w	r2, r9, #4294967295
 8014c56:	9806      	ldr	r0, [sp, #24]
 8014c58:	1c69      	adds	r1, r5, #1
 8014c5a:	f7fa fe97 	bl	800f98c <rcutils_string_map_getn>
 8014c5e:	4681      	mov	r9, r0
 8014c60:	2800      	cmp	r0, #0
 8014c62:	d19b      	bne.n	8014b9c <rcl_expand_topic_name+0x11c>
 8014c64:	aa16      	add	r2, sp, #88	; 0x58
 8014c66:	ca07      	ldmia	r2, {r0, r1, r2}
 8014c68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014c6a:	f8c3 9000 	str.w	r9, [r3]
 8014c6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014c72:	ab14      	add	r3, sp, #80	; 0x50
 8014c74:	cb0c      	ldmia	r3, {r2, r3}
 8014c76:	4651      	mov	r1, sl
 8014c78:	4628      	mov	r0, r5
 8014c7a:	f002 f8cb 	bl	8016e14 <rcutils_strndup>
 8014c7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c80:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c82:	4798      	blx	r3
 8014c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014c88:	4658      	mov	r0, fp
 8014c8a:	4798      	blx	r3
 8014c8c:	2469      	movs	r4, #105	; 0x69
 8014c8e:	e7cc      	b.n	8014c2a <rcl_expand_topic_name+0x1aa>
 8014c90:	2800      	cmp	r0, #0
 8014c92:	d03e      	beq.n	8014d12 <rcl_expand_topic_name+0x292>
 8014c94:	46c1      	mov	r9, r8
 8014c96:	46a2      	mov	sl, r4
 8014c98:	e75c      	b.n	8014b54 <rcl_expand_topic_name+0xd4>
 8014c9a:	46b1      	mov	r9, r6
 8014c9c:	e77e      	b.n	8014b9c <rcl_expand_topic_name+0x11c>
 8014c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8014ca2:	2b2f      	cmp	r3, #47	; 0x2f
 8014ca4:	d0be      	beq.n	8014c24 <rcl_expand_topic_name+0x1a4>
 8014ca6:	4638      	mov	r0, r7
 8014ca8:	f7eb faa4 	bl	80001f4 <strlen>
 8014cac:	4b25      	ldr	r3, [pc, #148]	; (8014d44 <rcl_expand_topic_name+0x2c4>)
 8014cae:	4926      	ldr	r1, [pc, #152]	; (8014d48 <rcl_expand_topic_name+0x2c8>)
 8014cb0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014cb2:	f8cd a010 	str.w	sl, [sp, #16]
 8014cb6:	2801      	cmp	r0, #1
 8014cb8:	bf0c      	ite	eq
 8014cba:	4618      	moveq	r0, r3
 8014cbc:	4608      	movne	r0, r1
 8014cbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014cc2:	e9cd 2300 	strd	r2, r3, [sp]
 8014cc6:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014cca:	ab14      	add	r3, sp, #80	; 0x50
 8014ccc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014cce:	f001 ff55 	bl	8016b7c <rcutils_format_string_limit>
 8014cd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014cd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	4650      	mov	r0, sl
 8014cda:	469a      	mov	sl, r3
 8014cdc:	4790      	blx	r2
 8014cde:	e79e      	b.n	8014c1e <rcl_expand_topic_name+0x19e>
 8014ce0:	24ca      	movs	r4, #202	; 0xca
 8014ce2:	e7a2      	b.n	8014c2a <rcl_expand_topic_name+0x1aa>
 8014ce4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	6013      	str	r3, [r2, #0]
 8014cea:	240a      	movs	r4, #10
 8014cec:	e79d      	b.n	8014c2a <rcl_expand_topic_name+0x1aa>
 8014cee:	465b      	mov	r3, fp
 8014cf0:	9c07      	ldr	r4, [sp, #28]
 8014cf2:	46da      	mov	sl, fp
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d1d2      	bne.n	8014c9e <rcl_expand_topic_name+0x21e>
 8014cf8:	f898 3000 	ldrb.w	r3, [r8]
 8014cfc:	2b2f      	cmp	r3, #47	; 0x2f
 8014cfe:	d091      	beq.n	8014c24 <rcl_expand_topic_name+0x1a4>
 8014d00:	e776      	b.n	8014bf0 <rcl_expand_topic_name+0x170>
 8014d02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014d06:	601d      	str	r5, [r3, #0]
 8014d08:	4658      	mov	r0, fp
 8014d0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d0c:	4798      	blx	r3
 8014d0e:	240a      	movs	r4, #10
 8014d10:	e78b      	b.n	8014c2a <rcl_expand_topic_name+0x1aa>
 8014d12:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8014d16:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014d1a:	ab14      	add	r3, sp, #80	; 0x50
 8014d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014d1e:	4640      	mov	r0, r8
 8014d20:	f002 f856 	bl	8016dd0 <rcutils_strdup>
 8014d24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d26:	2800      	cmp	r0, #0
 8014d28:	bf08      	it	eq
 8014d2a:	240a      	moveq	r4, #10
 8014d2c:	6018      	str	r0, [r3, #0]
 8014d2e:	e77c      	b.n	8014c2a <rcl_expand_topic_name+0x1aa>
 8014d30:	0801ba40 	.word	0x0801ba40
 8014d34:	0801ba7c 	.word	0x0801ba7c
 8014d38:	0801ba8c 	.word	0x0801ba8c
 8014d3c:	0801ba94 	.word	0x0801ba94
 8014d40:	0801ba9c 	.word	0x0801ba9c
 8014d44:	0801ba50 	.word	0x0801ba50
 8014d48:	0801ba84 	.word	0x0801ba84

08014d4c <rcl_get_default_topic_name_substitutions>:
 8014d4c:	2800      	cmp	r0, #0
 8014d4e:	bf0c      	ite	eq
 8014d50:	200b      	moveq	r0, #11
 8014d52:	2000      	movne	r0, #0
 8014d54:	4770      	bx	lr
 8014d56:	bf00      	nop

08014d58 <rcl_init>:
 8014d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d5c:	1e07      	subs	r7, r0, #0
 8014d5e:	b09f      	sub	sp, #124	; 0x7c
 8014d60:	4688      	mov	r8, r1
 8014d62:	4692      	mov	sl, r2
 8014d64:	4699      	mov	r9, r3
 8014d66:	f340 8097 	ble.w	8014e98 <rcl_init+0x140>
 8014d6a:	2900      	cmp	r1, #0
 8014d6c:	f000 8097 	beq.w	8014e9e <rcl_init+0x146>
 8014d70:	1f0d      	subs	r5, r1, #4
 8014d72:	2400      	movs	r4, #0
 8014d74:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8014d78:	3401      	adds	r4, #1
 8014d7a:	2e00      	cmp	r6, #0
 8014d7c:	f000 808f 	beq.w	8014e9e <rcl_init+0x146>
 8014d80:	42a7      	cmp	r7, r4
 8014d82:	d1f7      	bne.n	8014d74 <rcl_init+0x1c>
 8014d84:	f1ba 0f00 	cmp.w	sl, #0
 8014d88:	f000 8089 	beq.w	8014e9e <rcl_init+0x146>
 8014d8c:	f8da 4000 	ldr.w	r4, [sl]
 8014d90:	2c00      	cmp	r4, #0
 8014d92:	f000 8084 	beq.w	8014e9e <rcl_init+0x146>
 8014d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d98:	ad19      	add	r5, sp, #100	; 0x64
 8014d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d9c:	6823      	ldr	r3, [r4, #0]
 8014d9e:	602b      	str	r3, [r5, #0]
 8014da0:	a819      	add	r0, sp, #100	; 0x64
 8014da2:	f7fa fcb9 	bl	800f718 <rcutils_allocator_is_valid>
 8014da6:	2800      	cmp	r0, #0
 8014da8:	d079      	beq.n	8014e9e <rcl_init+0x146>
 8014daa:	f1b9 0f00 	cmp.w	r9, #0
 8014dae:	d076      	beq.n	8014e9e <rcl_init+0x146>
 8014db0:	f8d9 3000 	ldr.w	r3, [r9]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d177      	bne.n	8014ea8 <rcl_init+0x150>
 8014db8:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8014dbc:	2178      	movs	r1, #120	; 0x78
 8014dbe:	2001      	movs	r0, #1
 8014dc0:	4798      	blx	r3
 8014dc2:	4604      	mov	r4, r0
 8014dc4:	f8c9 0000 	str.w	r0, [r9]
 8014dc8:	2800      	cmp	r0, #0
 8014dca:	f000 80ba 	beq.w	8014f42 <rcl_init+0x1ea>
 8014dce:	a802      	add	r0, sp, #8
 8014dd0:	f002 f83c 	bl	8016e4c <rmw_get_zero_initialized_context>
 8014dd4:	a902      	add	r1, sp, #8
 8014dd6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014dda:	2250      	movs	r2, #80	; 0x50
 8014ddc:	ac19      	add	r4, sp, #100	; 0x64
 8014dde:	f005 fcbe 	bl	801a75e <memcpy>
 8014de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014de4:	f8d9 5000 	ldr.w	r5, [r9]
 8014de8:	6826      	ldr	r6, [r4, #0]
 8014dea:	462c      	mov	r4, r5
 8014dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014dee:	f105 0114 	add.w	r1, r5, #20
 8014df2:	6026      	str	r6, [r4, #0]
 8014df4:	4650      	mov	r0, sl
 8014df6:	f000 f931 	bl	801505c <rcl_init_options_copy>
 8014dfa:	4606      	mov	r6, r0
 8014dfc:	2800      	cmp	r0, #0
 8014dfe:	d144      	bne.n	8014e8a <rcl_init+0x132>
 8014e00:	f8d9 a000 	ldr.w	sl, [r9]
 8014e04:	463c      	mov	r4, r7
 8014e06:	17fd      	asrs	r5, r7, #31
 8014e08:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8014e0c:	f8ca 0020 	str.w	r0, [sl, #32]
 8014e10:	2f00      	cmp	r7, #0
 8014e12:	d050      	beq.n	8014eb6 <rcl_init+0x15e>
 8014e14:	f1b8 0f00 	cmp.w	r8, #0
 8014e18:	d04d      	beq.n	8014eb6 <rcl_init+0x15e>
 8014e1a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8014e1e:	4638      	mov	r0, r7
 8014e20:	2104      	movs	r1, #4
 8014e22:	4798      	blx	r3
 8014e24:	f8ca 0020 	str.w	r0, [sl, #32]
 8014e28:	f8d9 a000 	ldr.w	sl, [r9]
 8014e2c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8014e30:	46d3      	mov	fp, sl
 8014e32:	b34b      	cbz	r3, 8014e88 <rcl_init+0x130>
 8014e34:	2f01      	cmp	r7, #1
 8014e36:	f175 0300 	sbcs.w	r3, r5, #0
 8014e3a:	db3c      	blt.n	8014eb6 <rcl_init+0x15e>
 8014e3c:	f1a8 0804 	sub.w	r8, r8, #4
 8014e40:	2600      	movs	r6, #0
 8014e42:	2700      	movs	r7, #0
 8014e44:	e00c      	b.n	8014e60 <rcl_init+0x108>
 8014e46:	f8d8 1000 	ldr.w	r1, [r8]
 8014e4a:	f005 fc88 	bl	801a75e <memcpy>
 8014e4e:	3601      	adds	r6, #1
 8014e50:	f147 0700 	adc.w	r7, r7, #0
 8014e54:	42bd      	cmp	r5, r7
 8014e56:	bf08      	it	eq
 8014e58:	42b4      	cmpeq	r4, r6
 8014e5a:	d02a      	beq.n	8014eb2 <rcl_init+0x15a>
 8014e5c:	f8d9 b000 	ldr.w	fp, [r9]
 8014e60:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8014e64:	f7eb f9c6 	bl	80001f4 <strlen>
 8014e68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e6a:	991d      	ldr	r1, [sp, #116]	; 0x74
 8014e6c:	f8db a020 	ldr.w	sl, [fp, #32]
 8014e70:	9001      	str	r0, [sp, #4]
 8014e72:	4798      	blx	r3
 8014e74:	f8d9 1000 	ldr.w	r1, [r9]
 8014e78:	9a01      	ldr	r2, [sp, #4]
 8014e7a:	6a09      	ldr	r1, [r1, #32]
 8014e7c:	00b3      	lsls	r3, r6, #2
 8014e7e:	f84a 0003 	str.w	r0, [sl, r3]
 8014e82:	58c8      	ldr	r0, [r1, r3]
 8014e84:	2800      	cmp	r0, #0
 8014e86:	d1de      	bne.n	8014e46 <rcl_init+0xee>
 8014e88:	260a      	movs	r6, #10
 8014e8a:	4648      	mov	r0, r9
 8014e8c:	f7ff fd94 	bl	80149b8 <__cleanup_context>
 8014e90:	4630      	mov	r0, r6
 8014e92:	b01f      	add	sp, #124	; 0x7c
 8014e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e98:	2900      	cmp	r1, #0
 8014e9a:	f43f af73 	beq.w	8014d84 <rcl_init+0x2c>
 8014e9e:	260b      	movs	r6, #11
 8014ea0:	4630      	mov	r0, r6
 8014ea2:	b01f      	add	sp, #124	; 0x7c
 8014ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ea8:	2664      	movs	r6, #100	; 0x64
 8014eaa:	4630      	mov	r0, r6
 8014eac:	b01f      	add	sp, #124	; 0x7c
 8014eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eb2:	f8d9 a000 	ldr.w	sl, [r9]
 8014eb6:	4a2c      	ldr	r2, [pc, #176]	; (8014f68 <rcl_init+0x210>)
 8014eb8:	6813      	ldr	r3, [r2, #0]
 8014eba:	3301      	adds	r3, #1
 8014ebc:	d03b      	beq.n	8014f36 <rcl_init+0x1de>
 8014ebe:	6013      	str	r3, [r2, #0]
 8014ec0:	4619      	mov	r1, r3
 8014ec2:	2000      	movs	r0, #0
 8014ec4:	f8da 4014 	ldr.w	r4, [sl, #20]
 8014ec8:	f8c9 3004 	str.w	r3, [r9, #4]
 8014ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ece:	3301      	adds	r3, #1
 8014ed0:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8014ed4:	d039      	beq.n	8014f4a <rcl_init+0x1f2>
 8014ed6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8014eda:	b94b      	cbnz	r3, 8014ef0 <rcl_init+0x198>
 8014edc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8014ee0:	f000 f962 	bl	80151a8 <rcl_get_localhost_only>
 8014ee4:	4606      	mov	r6, r0
 8014ee6:	2800      	cmp	r0, #0
 8014ee8:	d1cf      	bne.n	8014e8a <rcl_init+0x132>
 8014eea:	f8d9 3000 	ldr.w	r3, [r9]
 8014eee:	695c      	ldr	r4, [r3, #20]
 8014ef0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014ef2:	aa18      	add	r2, sp, #96	; 0x60
 8014ef4:	a917      	add	r1, sp, #92	; 0x5c
 8014ef6:	f000 fe9f 	bl	8015c38 <rcl_validate_enclave_name>
 8014efa:	4606      	mov	r6, r0
 8014efc:	2800      	cmp	r0, #0
 8014efe:	d1c4      	bne.n	8014e8a <rcl_init+0x132>
 8014f00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f02:	bb03      	cbnz	r3, 8014f46 <rcl_init+0x1ee>
 8014f04:	f8d9 1000 	ldr.w	r1, [r9]
 8014f08:	694b      	ldr	r3, [r1, #20]
 8014f0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014f0c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8014f10:	f000 fbf2 	bl	80156f8 <rcl_get_security_options_from_environment>
 8014f14:	4606      	mov	r6, r0
 8014f16:	2800      	cmp	r0, #0
 8014f18:	d1b7      	bne.n	8014e8a <rcl_init+0x132>
 8014f1a:	f8d9 1000 	ldr.w	r1, [r9]
 8014f1e:	6948      	ldr	r0, [r1, #20]
 8014f20:	3128      	adds	r1, #40	; 0x28
 8014f22:	3018      	adds	r0, #24
 8014f24:	f002 f9c0 	bl	80172a8 <rmw_init>
 8014f28:	4606      	mov	r6, r0
 8014f2a:	2800      	cmp	r0, #0
 8014f2c:	d0b8      	beq.n	8014ea0 <rcl_init+0x148>
 8014f2e:	f7ff fd1f 	bl	8014970 <rcl_convert_rmw_ret_to_rcl_ret>
 8014f32:	4606      	mov	r6, r0
 8014f34:	e7a9      	b.n	8014e8a <rcl_init+0x132>
 8014f36:	2401      	movs	r4, #1
 8014f38:	4618      	mov	r0, r3
 8014f3a:	4621      	mov	r1, r4
 8014f3c:	6014      	str	r4, [r2, #0]
 8014f3e:	4623      	mov	r3, r4
 8014f40:	e7c0      	b.n	8014ec4 <rcl_init+0x16c>
 8014f42:	260a      	movs	r6, #10
 8014f44:	e7ac      	b.n	8014ea0 <rcl_init+0x148>
 8014f46:	2601      	movs	r6, #1
 8014f48:	e79f      	b.n	8014e8a <rcl_init+0x132>
 8014f4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014f4e:	f004 fbdb 	bl	8019708 <rcl_get_default_domain_id>
 8014f52:	4606      	mov	r6, r0
 8014f54:	2800      	cmp	r0, #0
 8014f56:	d198      	bne.n	8014e8a <rcl_init+0x132>
 8014f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	f8d9 3000 	ldr.w	r3, [r9]
 8014f60:	bf08      	it	eq
 8014f62:	6260      	streq	r0, [r4, #36]	; 0x24
 8014f64:	695c      	ldr	r4, [r3, #20]
 8014f66:	e7b6      	b.n	8014ed6 <rcl_init+0x17e>
 8014f68:	20009f68 	.word	0x20009f68

08014f6c <rcl_get_zero_initialized_init_options>:
 8014f6c:	2000      	movs	r0, #0
 8014f6e:	4770      	bx	lr

08014f70 <rcl_init_options_init>:
 8014f70:	b084      	sub	sp, #16
 8014f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f74:	b091      	sub	sp, #68	; 0x44
 8014f76:	af17      	add	r7, sp, #92	; 0x5c
 8014f78:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8014f7c:	2800      	cmp	r0, #0
 8014f7e:	d044      	beq.n	801500a <rcl_init_options_init+0x9a>
 8014f80:	6803      	ldr	r3, [r0, #0]
 8014f82:	4606      	mov	r6, r0
 8014f84:	b133      	cbz	r3, 8014f94 <rcl_init_options_init+0x24>
 8014f86:	2464      	movs	r4, #100	; 0x64
 8014f88:	4620      	mov	r0, r4
 8014f8a:	b011      	add	sp, #68	; 0x44
 8014f8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014f90:	b004      	add	sp, #16
 8014f92:	4770      	bx	lr
 8014f94:	4638      	mov	r0, r7
 8014f96:	f7fa fbbf 	bl	800f718 <rcutils_allocator_is_valid>
 8014f9a:	2800      	cmp	r0, #0
 8014f9c:	d035      	beq.n	801500a <rcl_init_options_init+0x9a>
 8014f9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014fa0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014fa2:	2050      	movs	r0, #80	; 0x50
 8014fa4:	4798      	blx	r3
 8014fa6:	4604      	mov	r4, r0
 8014fa8:	6030      	str	r0, [r6, #0]
 8014faa:	2800      	cmp	r0, #0
 8014fac:	d02f      	beq.n	801500e <rcl_init_options_init+0x9e>
 8014fae:	46bc      	mov	ip, r7
 8014fb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014fb4:	4625      	mov	r5, r4
 8014fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014fb8:	f8dc 3000 	ldr.w	r3, [ip]
 8014fbc:	602b      	str	r3, [r5, #0]
 8014fbe:	a802      	add	r0, sp, #8
 8014fc0:	ad02      	add	r5, sp, #8
 8014fc2:	f001 ff4b 	bl	8016e5c <rmw_get_zero_initialized_init_options>
 8014fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014fc8:	3418      	adds	r4, #24
 8014fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014fd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014fd8:	6833      	ldr	r3, [r6, #0]
 8014fda:	e884 0003 	stmia.w	r4, {r0, r1}
 8014fde:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8014fe2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014fe6:	f103 0018 	add.w	r0, r3, #24
 8014fea:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8014fee:	f002 f881 	bl	80170f4 <rmw_init_options_init>
 8014ff2:	4604      	mov	r4, r0
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	d0c7      	beq.n	8014f88 <rcl_init_options_init+0x18>
 8014ff8:	6830      	ldr	r0, [r6, #0]
 8014ffa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014ffc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014ffe:	4798      	blx	r3
 8015000:	4620      	mov	r0, r4
 8015002:	f7ff fcb5 	bl	8014970 <rcl_convert_rmw_ret_to_rcl_ret>
 8015006:	4604      	mov	r4, r0
 8015008:	e7be      	b.n	8014f88 <rcl_init_options_init+0x18>
 801500a:	240b      	movs	r4, #11
 801500c:	e7bc      	b.n	8014f88 <rcl_init_options_init+0x18>
 801500e:	240a      	movs	r4, #10
 8015010:	e7ba      	b.n	8014f88 <rcl_init_options_init+0x18>
 8015012:	bf00      	nop

08015014 <rcl_init_options_fini>:
 8015014:	b570      	push	{r4, r5, r6, lr}
 8015016:	b086      	sub	sp, #24
 8015018:	b1c0      	cbz	r0, 801504c <rcl_init_options_fini+0x38>
 801501a:	6804      	ldr	r4, [r0, #0]
 801501c:	4606      	mov	r6, r0
 801501e:	b1ac      	cbz	r4, 801504c <rcl_init_options_fini+0x38>
 8015020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015022:	ad01      	add	r5, sp, #4
 8015024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015026:	6823      	ldr	r3, [r4, #0]
 8015028:	602b      	str	r3, [r5, #0]
 801502a:	a801      	add	r0, sp, #4
 801502c:	f7fa fb74 	bl	800f718 <rcutils_allocator_is_valid>
 8015030:	b160      	cbz	r0, 801504c <rcl_init_options_fini+0x38>
 8015032:	6830      	ldr	r0, [r6, #0]
 8015034:	3018      	adds	r0, #24
 8015036:	f002 f8f7 	bl	8017228 <rmw_init_options_fini>
 801503a:	4604      	mov	r4, r0
 801503c:	b950      	cbnz	r0, 8015054 <rcl_init_options_fini+0x40>
 801503e:	6830      	ldr	r0, [r6, #0]
 8015040:	9b02      	ldr	r3, [sp, #8]
 8015042:	9905      	ldr	r1, [sp, #20]
 8015044:	4798      	blx	r3
 8015046:	4620      	mov	r0, r4
 8015048:	b006      	add	sp, #24
 801504a:	bd70      	pop	{r4, r5, r6, pc}
 801504c:	240b      	movs	r4, #11
 801504e:	4620      	mov	r0, r4
 8015050:	b006      	add	sp, #24
 8015052:	bd70      	pop	{r4, r5, r6, pc}
 8015054:	f7ff fc8c 	bl	8014970 <rcl_convert_rmw_ret_to_rcl_ret>
 8015058:	4604      	mov	r4, r0
 801505a:	e7f8      	b.n	801504e <rcl_init_options_fini+0x3a>

0801505c <rcl_init_options_copy>:
 801505c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015060:	b096      	sub	sp, #88	; 0x58
 8015062:	2800      	cmp	r0, #0
 8015064:	d063      	beq.n	801512e <rcl_init_options_copy+0xd2>
 8015066:	6806      	ldr	r6, [r0, #0]
 8015068:	4605      	mov	r5, r0
 801506a:	2e00      	cmp	r6, #0
 801506c:	d05f      	beq.n	801512e <rcl_init_options_copy+0xd2>
 801506e:	460c      	mov	r4, r1
 8015070:	2900      	cmp	r1, #0
 8015072:	d05c      	beq.n	801512e <rcl_init_options_copy+0xd2>
 8015074:	680b      	ldr	r3, [r1, #0]
 8015076:	b123      	cbz	r3, 8015082 <rcl_init_options_copy+0x26>
 8015078:	2664      	movs	r6, #100	; 0x64
 801507a:	4630      	mov	r0, r6
 801507c:	b016      	add	sp, #88	; 0x58
 801507e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015082:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015084:	af11      	add	r7, sp, #68	; 0x44
 8015086:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015088:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801508c:	6833      	ldr	r3, [r6, #0]
 801508e:	603b      	str	r3, [r7, #0]
 8015090:	4640      	mov	r0, r8
 8015092:	f7fa fb41 	bl	800f718 <rcutils_allocator_is_valid>
 8015096:	2800      	cmp	r0, #0
 8015098:	d049      	beq.n	801512e <rcl_init_options_copy+0xd2>
 801509a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801509c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801509e:	2050      	movs	r0, #80	; 0x50
 80150a0:	4798      	blx	r3
 80150a2:	4606      	mov	r6, r0
 80150a4:	6020      	str	r0, [r4, #0]
 80150a6:	2800      	cmp	r0, #0
 80150a8:	d077      	beq.n	801519a <rcl_init_options_copy+0x13e>
 80150aa:	46c4      	mov	ip, r8
 80150ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80150b0:	4637      	mov	r7, r6
 80150b2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80150b4:	f8dc 3000 	ldr.w	r3, [ip]
 80150b8:	603b      	str	r3, [r7, #0]
 80150ba:	a802      	add	r0, sp, #8
 80150bc:	af02      	add	r7, sp, #8
 80150be:	f001 fecd 	bl	8016e5c <rmw_get_zero_initialized_init_options>
 80150c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150c4:	3618      	adds	r6, #24
 80150c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150d0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80150d4:	ab16      	add	r3, sp, #88	; 0x58
 80150d6:	e886 0003 	stmia.w	r6, {r0, r1}
 80150da:	e913 0003 	ldmdb	r3, {r0, r1}
 80150de:	6823      	ldr	r3, [r4, #0]
 80150e0:	e88d 0003 	stmia.w	sp, {r0, r1}
 80150e4:	f103 0018 	add.w	r0, r3, #24
 80150e8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80150ec:	f002 f802 	bl	80170f4 <rmw_init_options_init>
 80150f0:	4606      	mov	r6, r0
 80150f2:	bb08      	cbnz	r0, 8015138 <rcl_init_options_copy+0xdc>
 80150f4:	682f      	ldr	r7, [r5, #0]
 80150f6:	f8d4 c000 	ldr.w	ip, [r4]
 80150fa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150fc:	4666      	mov	r6, ip
 80150fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015100:	683b      	ldr	r3, [r7, #0]
 8015102:	6033      	str	r3, [r6, #0]
 8015104:	f10c 0018 	add.w	r0, ip, #24
 8015108:	f002 f88e 	bl	8017228 <rmw_init_options_fini>
 801510c:	4607      	mov	r7, r0
 801510e:	b1f0      	cbz	r0, 801514e <rcl_init_options_copy+0xf2>
 8015110:	f7fa fb10 	bl	800f734 <rcutils_get_error_string>
 8015114:	f7fa fb24 	bl	800f760 <rcutils_reset_error>
 8015118:	4620      	mov	r0, r4
 801511a:	f7ff ff7b 	bl	8015014 <rcl_init_options_fini>
 801511e:	4606      	mov	r6, r0
 8015120:	2800      	cmp	r0, #0
 8015122:	d1aa      	bne.n	801507a <rcl_init_options_copy+0x1e>
 8015124:	4638      	mov	r0, r7
 8015126:	f7ff fc23 	bl	8014970 <rcl_convert_rmw_ret_to_rcl_ret>
 801512a:	4606      	mov	r6, r0
 801512c:	e7a5      	b.n	801507a <rcl_init_options_copy+0x1e>
 801512e:	260b      	movs	r6, #11
 8015130:	4630      	mov	r0, r6
 8015132:	b016      	add	sp, #88	; 0x58
 8015134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015138:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801513a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801513c:	6820      	ldr	r0, [r4, #0]
 801513e:	4798      	blx	r3
 8015140:	4630      	mov	r0, r6
 8015142:	f7ff fc15 	bl	8014970 <rcl_convert_rmw_ret_to_rcl_ret>
 8015146:	4606      	mov	r6, r0
 8015148:	2800      	cmp	r0, #0
 801514a:	d0d3      	beq.n	80150f4 <rcl_init_options_copy+0x98>
 801514c:	e795      	b.n	801507a <rcl_init_options_copy+0x1e>
 801514e:	a802      	add	r0, sp, #8
 8015150:	ae02      	add	r6, sp, #8
 8015152:	6827      	ldr	r7, [r4, #0]
 8015154:	f001 fe82 	bl	8016e5c <rmw_get_zero_initialized_init_options>
 8015158:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801515a:	3718      	adds	r7, #24
 801515c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801515e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015160:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015162:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015164:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015166:	e896 0003 	ldmia.w	r6, {r0, r1}
 801516a:	682a      	ldr	r2, [r5, #0]
 801516c:	6823      	ldr	r3, [r4, #0]
 801516e:	e887 0003 	stmia.w	r7, {r0, r1}
 8015172:	f102 0018 	add.w	r0, r2, #24
 8015176:	f103 0118 	add.w	r1, r3, #24
 801517a:	f002 f813 	bl	80171a4 <rmw_init_options_copy>
 801517e:	4606      	mov	r6, r0
 8015180:	2800      	cmp	r0, #0
 8015182:	f43f af7a 	beq.w	801507a <rcl_init_options_copy+0x1e>
 8015186:	f7fa fad5 	bl	800f734 <rcutils_get_error_string>
 801518a:	f7fa fae9 	bl	800f760 <rcutils_reset_error>
 801518e:	4620      	mov	r0, r4
 8015190:	f7ff ff40 	bl	8015014 <rcl_init_options_fini>
 8015194:	b118      	cbz	r0, 801519e <rcl_init_options_copy+0x142>
 8015196:	4606      	mov	r6, r0
 8015198:	e76f      	b.n	801507a <rcl_init_options_copy+0x1e>
 801519a:	260a      	movs	r6, #10
 801519c:	e76d      	b.n	801507a <rcl_init_options_copy+0x1e>
 801519e:	4630      	mov	r0, r6
 80151a0:	f7ff fbe6 	bl	8014970 <rcl_convert_rmw_ret_to_rcl_ret>
 80151a4:	4606      	mov	r6, r0
 80151a6:	e768      	b.n	801507a <rcl_init_options_copy+0x1e>

080151a8 <rcl_get_localhost_only>:
 80151a8:	b510      	push	{r4, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	2300      	movs	r3, #0
 80151ae:	9301      	str	r3, [sp, #4]
 80151b0:	b1b8      	cbz	r0, 80151e2 <rcl_get_localhost_only+0x3a>
 80151b2:	4604      	mov	r4, r0
 80151b4:	a901      	add	r1, sp, #4
 80151b6:	480c      	ldr	r0, [pc, #48]	; (80151e8 <rcl_get_localhost_only+0x40>)
 80151b8:	f001 fd1a 	bl	8016bf0 <rcutils_get_env>
 80151bc:	b110      	cbz	r0, 80151c4 <rcl_get_localhost_only+0x1c>
 80151be:	2001      	movs	r0, #1
 80151c0:	b002      	add	sp, #8
 80151c2:	bd10      	pop	{r4, pc}
 80151c4:	9b01      	ldr	r3, [sp, #4]
 80151c6:	b113      	cbz	r3, 80151ce <rcl_get_localhost_only+0x26>
 80151c8:	781a      	ldrb	r2, [r3, #0]
 80151ca:	2a31      	cmp	r2, #49	; 0x31
 80151cc:	d004      	beq.n	80151d8 <rcl_get_localhost_only+0x30>
 80151ce:	2302      	movs	r3, #2
 80151d0:	2000      	movs	r0, #0
 80151d2:	7023      	strb	r3, [r4, #0]
 80151d4:	b002      	add	sp, #8
 80151d6:	bd10      	pop	{r4, pc}
 80151d8:	785b      	ldrb	r3, [r3, #1]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d1f7      	bne.n	80151ce <rcl_get_localhost_only+0x26>
 80151de:	2301      	movs	r3, #1
 80151e0:	e7f6      	b.n	80151d0 <rcl_get_localhost_only+0x28>
 80151e2:	200b      	movs	r0, #11
 80151e4:	b002      	add	sp, #8
 80151e6:	bd10      	pop	{r4, pc}
 80151e8:	0801baa8 	.word	0x0801baa8

080151ec <rcl_get_zero_initialized_node>:
 80151ec:	4a03      	ldr	r2, [pc, #12]	; (80151fc <rcl_get_zero_initialized_node+0x10>)
 80151ee:	4603      	mov	r3, r0
 80151f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80151f8:	4618      	mov	r0, r3
 80151fa:	4770      	bx	lr
 80151fc:	0801bac8 	.word	0x0801bac8

08015200 <rcl_node_init>:
 8015200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015204:	b09b      	sub	sp, #108	; 0x6c
 8015206:	4604      	mov	r4, r0
 8015208:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 801520c:	f04f 0c00 	mov.w	ip, #0
 8015210:	a815      	add	r0, sp, #84	; 0x54
 8015212:	460e      	mov	r6, r1
 8015214:	4615      	mov	r5, r2
 8015216:	461f      	mov	r7, r3
 8015218:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 801521c:	f004 fb30 	bl	8019880 <rcl_guard_condition_get_default_options>
 8015220:	f1b8 0f00 	cmp.w	r8, #0
 8015224:	f000 80fd 	beq.w	8015422 <rcl_node_init+0x222>
 8015228:	f108 0b04 	add.w	fp, r8, #4
 801522c:	4658      	mov	r0, fp
 801522e:	f7fa fa73 	bl	800f718 <rcutils_allocator_is_valid>
 8015232:	2800      	cmp	r0, #0
 8015234:	f000 80f5 	beq.w	8015422 <rcl_node_init+0x222>
 8015238:	2e00      	cmp	r6, #0
 801523a:	f000 80f2 	beq.w	8015422 <rcl_node_init+0x222>
 801523e:	2d00      	cmp	r5, #0
 8015240:	f000 80ef 	beq.w	8015422 <rcl_node_init+0x222>
 8015244:	2c00      	cmp	r4, #0
 8015246:	f000 80ec 	beq.w	8015422 <rcl_node_init+0x222>
 801524a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801524e:	f1b9 0f00 	cmp.w	r9, #0
 8015252:	f040 8112 	bne.w	801547a <rcl_node_init+0x27a>
 8015256:	2f00      	cmp	r7, #0
 8015258:	f000 80e3 	beq.w	8015422 <rcl_node_init+0x222>
 801525c:	4638      	mov	r0, r7
 801525e:	f7ff fba5 	bl	80149ac <rcl_context_is_valid>
 8015262:	4682      	mov	sl, r0
 8015264:	2800      	cmp	r0, #0
 8015266:	f000 80e2 	beq.w	801542e <rcl_node_init+0x22e>
 801526a:	464a      	mov	r2, r9
 801526c:	a914      	add	r1, sp, #80	; 0x50
 801526e:	4630      	mov	r0, r6
 8015270:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8015274:	f001 fe72 	bl	8016f5c <rmw_validate_node_name>
 8015278:	4681      	mov	r9, r0
 801527a:	2800      	cmp	r0, #0
 801527c:	f040 80d3 	bne.w	8015426 <rcl_node_init+0x226>
 8015280:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015282:	2800      	cmp	r0, #0
 8015284:	f040 8105 	bne.w	8015492 <rcl_node_init+0x292>
 8015288:	4628      	mov	r0, r5
 801528a:	f7ea ffb3 	bl	80001f4 <strlen>
 801528e:	2800      	cmp	r0, #0
 8015290:	f040 80d0 	bne.w	8015434 <rcl_node_init+0x234>
 8015294:	4d8e      	ldr	r5, [pc, #568]	; (80154d0 <rcl_node_init+0x2d0>)
 8015296:	a914      	add	r1, sp, #80	; 0x50
 8015298:	2200      	movs	r2, #0
 801529a:	4628      	mov	r0, r5
 801529c:	f001 fe40 	bl	8016f20 <rmw_validate_namespace>
 80152a0:	4681      	mov	r9, r0
 80152a2:	2800      	cmp	r0, #0
 80152a4:	f040 80bf 	bne.w	8015426 <rcl_node_init+0x226>
 80152a8:	4682      	mov	sl, r0
 80152aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	f040 80f5 	bne.w	801549c <rcl_node_init+0x29c>
 80152b2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80152b6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80152ba:	9307      	str	r3, [sp, #28]
 80152bc:	2030      	movs	r0, #48	; 0x30
 80152be:	4790      	blx	r2
 80152c0:	4681      	mov	r9, r0
 80152c2:	6060      	str	r0, [r4, #4]
 80152c4:	2800      	cmp	r0, #0
 80152c6:	f000 80de 	beq.w	8015486 <rcl_node_init+0x286>
 80152ca:	9b07      	ldr	r3, [sp, #28]
 80152cc:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80152d0:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80152d4:	a80a      	add	r0, sp, #40	; 0x28
 80152d6:	f000 f92b 	bl	8015530 <rcl_node_get_default_options>
 80152da:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80152de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152e2:	46cc      	mov	ip, r9
 80152e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152e8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80152ec:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80152f0:	6861      	ldr	r1, [r4, #4]
 80152f2:	6027      	str	r7, [r4, #0]
 80152f4:	4640      	mov	r0, r8
 80152f6:	f000 f937 	bl	8015568 <rcl_node_options_copy>
 80152fa:	2800      	cmp	r0, #0
 80152fc:	d167      	bne.n	80153ce <rcl_node_init+0x1ce>
 80152fe:	4628      	mov	r0, r5
 8015300:	f7ea ff78 	bl	80001f4 <strlen>
 8015304:	4428      	add	r0, r5
 8015306:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801530a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801530e:	2b2f      	cmp	r3, #47	; 0x2f
 8015310:	bf08      	it	eq
 8015312:	4970      	ldreq	r1, [pc, #448]	; (80154d4 <rcl_node_init+0x2d4>)
 8015314:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015318:	bf18      	it	ne
 801531a:	496f      	ldrne	r1, [pc, #444]	; (80154d8 <rcl_node_init+0x2d8>)
 801531c:	9604      	str	r6, [sp, #16]
 801531e:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8015322:	e9cd 3200 	strd	r3, r2, [sp]
 8015326:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801532a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801532e:	f001 fc25 	bl	8016b7c <rcutils_format_string_limit>
 8015332:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 8015336:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801533a:	f8d9 3000 	ldr.w	r3, [r9]
 801533e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015340:	1c59      	adds	r1, r3, #1
 8015342:	f000 80b7 	beq.w	80154b4 <rcl_node_init+0x2b4>
 8015346:	683a      	ldr	r2, [r7, #0]
 8015348:	f8c9 301c 	str.w	r3, [r9, #28]
 801534c:	6952      	ldr	r2, [r2, #20]
 801534e:	6821      	ldr	r1, [r4, #0]
 8015350:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8015354:	6808      	ldr	r0, [r1, #0]
 8015356:	f1a2 0201 	sub.w	r2, r2, #1
 801535a:	fab2 f282 	clz	r2, r2
 801535e:	0952      	lsrs	r2, r2, #5
 8015360:	9200      	str	r2, [sp, #0]
 8015362:	4631      	mov	r1, r6
 8015364:	3028      	adds	r0, #40	; 0x28
 8015366:	462a      	mov	r2, r5
 8015368:	f002 fa06 	bl	8017778 <rmw_create_node>
 801536c:	6863      	ldr	r3, [r4, #4]
 801536e:	f8c9 0020 	str.w	r0, [r9, #32]
 8015372:	6a18      	ldr	r0, [r3, #32]
 8015374:	b368      	cbz	r0, 80153d2 <rcl_node_init+0x1d2>
 8015376:	f002 fa91 	bl	801789c <rmw_node_get_graph_guard_condition>
 801537a:	4681      	mov	r9, r0
 801537c:	b338      	cbz	r0, 80153ce <rcl_node_init+0x1ce>
 801537e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015382:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015386:	6866      	ldr	r6, [r4, #4]
 8015388:	2008      	movs	r0, #8
 801538a:	4798      	blx	r3
 801538c:	6863      	ldr	r3, [r4, #4]
 801538e:	6270      	str	r0, [r6, #36]	; 0x24
 8015390:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8015392:	b1f6      	cbz	r6, 80153d2 <rcl_node_init+0x1d2>
 8015394:	a808      	add	r0, sp, #32
 8015396:	f004 f9eb 	bl	8019770 <rcl_get_zero_initialized_guard_condition>
 801539a:	a808      	add	r0, sp, #32
 801539c:	c803      	ldmia	r0, {r0, r1}
 801539e:	e886 0003 	stmia.w	r6, {r0, r1}
 80153a2:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80153a6:	ae15      	add	r6, sp, #84	; 0x54
 80153a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80153aa:	f8db 3000 	ldr.w	r3, [fp]
 80153ae:	6033      	str	r3, [r6, #0]
 80153b0:	ab1a      	add	r3, sp, #104	; 0x68
 80153b2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80153b6:	6866      	ldr	r6, [r4, #4]
 80153b8:	6a76      	ldr	r6, [r6, #36]	; 0x24
 80153ba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80153be:	4649      	mov	r1, r9
 80153c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153c2:	4630      	mov	r0, r6
 80153c4:	463a      	mov	r2, r7
 80153c6:	f004 f9dd 	bl	8019784 <rcl_guard_condition_init_from_rmw>
 80153ca:	4681      	mov	r9, r0
 80153cc:	b328      	cbz	r0, 801541a <rcl_node_init+0x21a>
 80153ce:	6863      	ldr	r3, [r4, #4]
 80153d0:	b1f3      	cbz	r3, 8015410 <rcl_node_init+0x210>
 80153d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80153d4:	b128      	cbz	r0, 80153e2 <rcl_node_init+0x1e2>
 80153d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153da:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80153de:	4798      	blx	r3
 80153e0:	6863      	ldr	r3, [r4, #4]
 80153e2:	6a18      	ldr	r0, [r3, #32]
 80153e4:	b110      	cbz	r0, 80153ec <rcl_node_init+0x1ec>
 80153e6:	f002 f9df 	bl	80177a8 <rmw_destroy_node>
 80153ea:	6863      	ldr	r3, [r4, #4]
 80153ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80153ee:	b148      	cbz	r0, 8015404 <rcl_node_init+0x204>
 80153f0:	f004 fa20 	bl	8019834 <rcl_guard_condition_fini>
 80153f4:	6862      	ldr	r2, [r4, #4]
 80153f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153fa:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80153fc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015400:	4798      	blx	r3
 8015402:	6863      	ldr	r3, [r4, #4]
 8015404:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8015408:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801540c:	4618      	mov	r0, r3
 801540e:	4790      	blx	r2
 8015410:	2300      	movs	r3, #0
 8015412:	e9c4 3300 	strd	r3, r3, [r4]
 8015416:	f04f 0901 	mov.w	r9, #1
 801541a:	f1ba 0f00 	cmp.w	sl, #0
 801541e:	d125      	bne.n	801546c <rcl_node_init+0x26c>
 8015420:	e001      	b.n	8015426 <rcl_node_init+0x226>
 8015422:	f04f 090b 	mov.w	r9, #11
 8015426:	4648      	mov	r0, r9
 8015428:	b01b      	add	sp, #108	; 0x6c
 801542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801542e:	f04f 0965 	mov.w	r9, #101	; 0x65
 8015432:	e7f8      	b.n	8015426 <rcl_node_init+0x226>
 8015434:	782b      	ldrb	r3, [r5, #0]
 8015436:	2b2f      	cmp	r3, #47	; 0x2f
 8015438:	f43f af2d 	beq.w	8015296 <rcl_node_init+0x96>
 801543c:	4927      	ldr	r1, [pc, #156]	; (80154dc <rcl_node_init+0x2dc>)
 801543e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015442:	9300      	str	r3, [sp, #0]
 8015444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015448:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801544c:	9503      	str	r5, [sp, #12]
 801544e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8015452:	f001 fb93 	bl	8016b7c <rcutils_format_string_limit>
 8015456:	4605      	mov	r5, r0
 8015458:	b348      	cbz	r0, 80154ae <rcl_node_init+0x2ae>
 801545a:	2200      	movs	r2, #0
 801545c:	a914      	add	r1, sp, #80	; 0x50
 801545e:	9214      	str	r2, [sp, #80]	; 0x50
 8015460:	f001 fd5e 	bl	8016f20 <rmw_validate_namespace>
 8015464:	4681      	mov	r9, r0
 8015466:	2800      	cmp	r0, #0
 8015468:	f43f af1f 	beq.w	80152aa <rcl_node_init+0xaa>
 801546c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015470:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015474:	4628      	mov	r0, r5
 8015476:	4798      	blx	r3
 8015478:	e7d5      	b.n	8015426 <rcl_node_init+0x226>
 801547a:	f04f 0964 	mov.w	r9, #100	; 0x64
 801547e:	4648      	mov	r0, r9
 8015480:	b01b      	add	sp, #108	; 0x6c
 8015482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015486:	f04f 090a 	mov.w	r9, #10
 801548a:	f1ba 0f00 	cmp.w	sl, #0
 801548e:	d1ed      	bne.n	801546c <rcl_node_init+0x26c>
 8015490:	e7c9      	b.n	8015426 <rcl_node_init+0x226>
 8015492:	f001 fdb5 	bl	8017000 <rmw_node_name_validation_result_string>
 8015496:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 801549a:	e7c4      	b.n	8015426 <rcl_node_init+0x226>
 801549c:	4618      	mov	r0, r3
 801549e:	f001 fd51 	bl	8016f44 <rmw_namespace_validation_result_string>
 80154a2:	f04f 09ca 	mov.w	r9, #202	; 0xca
 80154a6:	f1ba 0f00 	cmp.w	sl, #0
 80154aa:	d1df      	bne.n	801546c <rcl_node_init+0x26c>
 80154ac:	e7bb      	b.n	8015426 <rcl_node_init+0x226>
 80154ae:	f04f 090a 	mov.w	r9, #10
 80154b2:	e7b8      	b.n	8015426 <rcl_node_init+0x226>
 80154b4:	a813      	add	r0, sp, #76	; 0x4c
 80154b6:	f004 f927 	bl	8019708 <rcl_get_default_domain_id>
 80154ba:	2800      	cmp	r0, #0
 80154bc:	d187      	bne.n	80153ce <rcl_node_init+0x1ce>
 80154be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80154c0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80154c4:	1c5a      	adds	r2, r3, #1
 80154c6:	bf04      	itt	eq
 80154c8:	9013      	streq	r0, [sp, #76]	; 0x4c
 80154ca:	4603      	moveq	r3, r0
 80154cc:	e73b      	b.n	8015346 <rcl_node_init+0x146>
 80154ce:	bf00      	nop
 80154d0:	0801bac0 	.word	0x0801bac0
 80154d4:	0801ba50 	.word	0x0801ba50
 80154d8:	0801ba84 	.word	0x0801ba84
 80154dc:	0801bac4 	.word	0x0801bac4

080154e0 <rcl_node_is_valid>:
 80154e0:	b130      	cbz	r0, 80154f0 <rcl_node_is_valid+0x10>
 80154e2:	6843      	ldr	r3, [r0, #4]
 80154e4:	b123      	cbz	r3, 80154f0 <rcl_node_is_valid+0x10>
 80154e6:	6a1b      	ldr	r3, [r3, #32]
 80154e8:	b113      	cbz	r3, 80154f0 <rcl_node_is_valid+0x10>
 80154ea:	6800      	ldr	r0, [r0, #0]
 80154ec:	f7ff ba5e 	b.w	80149ac <rcl_context_is_valid>
 80154f0:	2000      	movs	r0, #0
 80154f2:	4770      	bx	lr

080154f4 <rcl_node_get_name>:
 80154f4:	b120      	cbz	r0, 8015500 <rcl_node_get_name+0xc>
 80154f6:	6840      	ldr	r0, [r0, #4]
 80154f8:	b110      	cbz	r0, 8015500 <rcl_node_get_name+0xc>
 80154fa:	6a00      	ldr	r0, [r0, #32]
 80154fc:	b100      	cbz	r0, 8015500 <rcl_node_get_name+0xc>
 80154fe:	6880      	ldr	r0, [r0, #8]
 8015500:	4770      	bx	lr
 8015502:	bf00      	nop

08015504 <rcl_node_get_namespace>:
 8015504:	b120      	cbz	r0, 8015510 <rcl_node_get_namespace+0xc>
 8015506:	6840      	ldr	r0, [r0, #4]
 8015508:	b110      	cbz	r0, 8015510 <rcl_node_get_namespace+0xc>
 801550a:	6a00      	ldr	r0, [r0, #32]
 801550c:	b100      	cbz	r0, 8015510 <rcl_node_get_namespace+0xc>
 801550e:	68c0      	ldr	r0, [r0, #12]
 8015510:	4770      	bx	lr
 8015512:	bf00      	nop

08015514 <rcl_node_get_options>:
 8015514:	b128      	cbz	r0, 8015522 <rcl_node_get_options+0xe>
 8015516:	6840      	ldr	r0, [r0, #4]
 8015518:	b118      	cbz	r0, 8015522 <rcl_node_get_options+0xe>
 801551a:	6a03      	ldr	r3, [r0, #32]
 801551c:	2b00      	cmp	r3, #0
 801551e:	bf08      	it	eq
 8015520:	2000      	moveq	r0, #0
 8015522:	4770      	bx	lr

08015524 <rcl_node_get_rmw_handle>:
 8015524:	b110      	cbz	r0, 801552c <rcl_node_get_rmw_handle+0x8>
 8015526:	6840      	ldr	r0, [r0, #4]
 8015528:	b100      	cbz	r0, 801552c <rcl_node_get_rmw_handle+0x8>
 801552a:	6a00      	ldr	r0, [r0, #32]
 801552c:	4770      	bx	lr
 801552e:	bf00      	nop

08015530 <rcl_node_get_default_options>:
 8015530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015532:	b087      	sub	sp, #28
 8015534:	4607      	mov	r7, r0
 8015536:	466d      	mov	r5, sp
 8015538:	4668      	mov	r0, sp
 801553a:	f7fa f8df 	bl	800f6fc <rcutils_get_default_allocator>
 801553e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015540:	4c08      	ldr	r4, [pc, #32]	; (8015564 <rcl_node_get_default_options+0x34>)
 8015542:	f8d5 c000 	ldr.w	ip, [r5]
 8015546:	1d26      	adds	r6, r4, #4
 8015548:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801554a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801554c:	463d      	mov	r5, r7
 801554e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015550:	f8c6 c000 	str.w	ip, [r6]
 8015554:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015558:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801555c:	4638      	mov	r0, r7
 801555e:	b007      	add	sp, #28
 8015560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015562:	bf00      	nop
 8015564:	2000006c 	.word	0x2000006c

08015568 <rcl_node_options_copy>:
 8015568:	b1c8      	cbz	r0, 801559e <rcl_node_options_copy+0x36>
 801556a:	b4f0      	push	{r4, r5, r6, r7}
 801556c:	460f      	mov	r7, r1
 801556e:	b199      	cbz	r1, 8015598 <rcl_node_options_copy+0x30>
 8015570:	4288      	cmp	r0, r1
 8015572:	4606      	mov	r6, r0
 8015574:	d010      	beq.n	8015598 <rcl_node_options_copy+0x30>
 8015576:	4605      	mov	r5, r0
 8015578:	460c      	mov	r4, r1
 801557a:	f855 3b04 	ldr.w	r3, [r5], #4
 801557e:	f844 3b04 	str.w	r3, [r4], #4
 8015582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015586:	7e32      	ldrb	r2, [r6, #24]
 8015588:	6829      	ldr	r1, [r5, #0]
 801558a:	7e73      	ldrb	r3, [r6, #25]
 801558c:	6021      	str	r1, [r4, #0]
 801558e:	2000      	movs	r0, #0
 8015590:	763a      	strb	r2, [r7, #24]
 8015592:	767b      	strb	r3, [r7, #25]
 8015594:	bcf0      	pop	{r4, r5, r6, r7}
 8015596:	4770      	bx	lr
 8015598:	200b      	movs	r0, #11
 801559a:	bcf0      	pop	{r4, r5, r6, r7}
 801559c:	4770      	bx	lr
 801559e:	200b      	movs	r0, #11
 80155a0:	4770      	bx	lr
 80155a2:	bf00      	nop

080155a4 <exact_match_lookup>:
 80155a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155a6:	f102 0708 	add.w	r7, r2, #8
 80155aa:	460b      	mov	r3, r1
 80155ac:	4614      	mov	r4, r2
 80155ae:	4606      	mov	r6, r0
 80155b0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80155b4:	b085      	sub	sp, #20
 80155b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80155ba:	4618      	mov	r0, r3
 80155bc:	4918      	ldr	r1, [pc, #96]	; (8015620 <exact_match_lookup+0x7c>)
 80155be:	e894 000c 	ldmia.w	r4, {r2, r3}
 80155c2:	f001 facd 	bl	8016b60 <rcutils_join_path>
 80155c6:	7833      	ldrb	r3, [r6, #0]
 80155c8:	2b2f      	cmp	r3, #47	; 0x2f
 80155ca:	4605      	mov	r5, r0
 80155cc:	d021      	beq.n	8015612 <exact_match_lookup+0x6e>
 80155ce:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80155d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80155d6:	1c70      	adds	r0, r6, #1
 80155d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80155dc:	f001 fac6 	bl	8016b6c <rcutils_to_native_path>
 80155e0:	4606      	mov	r6, r0
 80155e2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80155e6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80155ea:	4631      	mov	r1, r6
 80155ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80155f0:	4628      	mov	r0, r5
 80155f2:	f001 fab5 	bl	8016b60 <rcutils_join_path>
 80155f6:	6862      	ldr	r2, [r4, #4]
 80155f8:	6921      	ldr	r1, [r4, #16]
 80155fa:	4603      	mov	r3, r0
 80155fc:	4630      	mov	r0, r6
 80155fe:	461e      	mov	r6, r3
 8015600:	4790      	blx	r2
 8015602:	4628      	mov	r0, r5
 8015604:	6863      	ldr	r3, [r4, #4]
 8015606:	6921      	ldr	r1, [r4, #16]
 8015608:	4798      	blx	r3
 801560a:	4635      	mov	r5, r6
 801560c:	4628      	mov	r0, r5
 801560e:	b005      	add	sp, #20
 8015610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015612:	7873      	ldrb	r3, [r6, #1]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d1da      	bne.n	80155ce <exact_match_lookup+0x2a>
 8015618:	4628      	mov	r0, r5
 801561a:	b005      	add	sp, #20
 801561c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801561e:	bf00      	nop
 8015620:	0801bb0c 	.word	0x0801bb0c

08015624 <rcl_get_secure_root>:
 8015624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015628:	b085      	sub	sp, #20
 801562a:	b168      	cbz	r0, 8015648 <rcl_get_secure_root+0x24>
 801562c:	4607      	mov	r7, r0
 801562e:	4608      	mov	r0, r1
 8015630:	460c      	mov	r4, r1
 8015632:	f7fa f871 	bl	800f718 <rcutils_allocator_is_valid>
 8015636:	b138      	cbz	r0, 8015648 <rcl_get_secure_root+0x24>
 8015638:	2300      	movs	r3, #0
 801563a:	482d      	ldr	r0, [pc, #180]	; (80156f0 <rcl_get_secure_root+0xcc>)
 801563c:	9303      	str	r3, [sp, #12]
 801563e:	a903      	add	r1, sp, #12
 8015640:	f001 fad6 	bl	8016bf0 <rcutils_get_env>
 8015644:	4605      	mov	r5, r0
 8015646:	b120      	cbz	r0, 8015652 <rcl_get_secure_root+0x2e>
 8015648:	2500      	movs	r5, #0
 801564a:	4628      	mov	r0, r5
 801564c:	b005      	add	sp, #20
 801564e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015652:	9b03      	ldr	r3, [sp, #12]
 8015654:	781a      	ldrb	r2, [r3, #0]
 8015656:	2a00      	cmp	r2, #0
 8015658:	d0f6      	beq.n	8015648 <rcl_get_secure_root+0x24>
 801565a:	f104 090c 	add.w	r9, r4, #12
 801565e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015662:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015666:	4618      	mov	r0, r3
 8015668:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801566c:	f001 fbb0 	bl	8016dd0 <rcutils_strdup>
 8015670:	4680      	mov	r8, r0
 8015672:	2800      	cmp	r0, #0
 8015674:	d0e8      	beq.n	8015648 <rcl_get_secure_root+0x24>
 8015676:	481f      	ldr	r0, [pc, #124]	; (80156f4 <rcl_get_secure_root+0xd0>)
 8015678:	9503      	str	r5, [sp, #12]
 801567a:	a903      	add	r1, sp, #12
 801567c:	f001 fab8 	bl	8016bf0 <rcutils_get_env>
 8015680:	b160      	cbz	r0, 801569c <rcl_get_secure_root+0x78>
 8015682:	2600      	movs	r6, #0
 8015684:	6863      	ldr	r3, [r4, #4]
 8015686:	6921      	ldr	r1, [r4, #16]
 8015688:	4630      	mov	r0, r6
 801568a:	4798      	blx	r3
 801568c:	4640      	mov	r0, r8
 801568e:	6863      	ldr	r3, [r4, #4]
 8015690:	6921      	ldr	r1, [r4, #16]
 8015692:	4798      	blx	r3
 8015694:	4628      	mov	r0, r5
 8015696:	b005      	add	sp, #20
 8015698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801569c:	9b03      	ldr	r3, [sp, #12]
 801569e:	781e      	ldrb	r6, [r3, #0]
 80156a0:	b1f6      	cbz	r6, 80156e0 <rcl_get_secure_root+0xbc>
 80156a2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80156a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80156aa:	4618      	mov	r0, r3
 80156ac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80156b0:	f001 fb8e 	bl	8016dd0 <rcutils_strdup>
 80156b4:	4606      	mov	r6, r0
 80156b6:	2800      	cmp	r0, #0
 80156b8:	d0e3      	beq.n	8015682 <rcl_get_secure_root+0x5e>
 80156ba:	4622      	mov	r2, r4
 80156bc:	4641      	mov	r1, r8
 80156be:	f7ff ff71 	bl	80155a4 <exact_match_lookup>
 80156c2:	4605      	mov	r5, r0
 80156c4:	2d00      	cmp	r5, #0
 80156c6:	d0dd      	beq.n	8015684 <rcl_get_secure_root+0x60>
 80156c8:	4628      	mov	r0, r5
 80156ca:	f001 fa47 	bl	8016b5c <rcutils_is_directory>
 80156ce:	4607      	mov	r7, r0
 80156d0:	2800      	cmp	r0, #0
 80156d2:	d1d7      	bne.n	8015684 <rcl_get_secure_root+0x60>
 80156d4:	4628      	mov	r0, r5
 80156d6:	6863      	ldr	r3, [r4, #4]
 80156d8:	6921      	ldr	r1, [r4, #16]
 80156da:	4798      	blx	r3
 80156dc:	463d      	mov	r5, r7
 80156de:	e7d1      	b.n	8015684 <rcl_get_secure_root+0x60>
 80156e0:	4638      	mov	r0, r7
 80156e2:	4622      	mov	r2, r4
 80156e4:	4641      	mov	r1, r8
 80156e6:	f7ff ff5d 	bl	80155a4 <exact_match_lookup>
 80156ea:	4605      	mov	r5, r0
 80156ec:	e7ea      	b.n	80156c4 <rcl_get_secure_root+0xa0>
 80156ee:	bf00      	nop
 80156f0:	0801bb18 	.word	0x0801bb18
 80156f4:	0801bb30 	.word	0x0801bb30

080156f8 <rcl_get_security_options_from_environment>:
 80156f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156fc:	b082      	sub	sp, #8
 80156fe:	4607      	mov	r7, r0
 8015700:	4688      	mov	r8, r1
 8015702:	2400      	movs	r4, #0
 8015704:	481d      	ldr	r0, [pc, #116]	; (801577c <rcl_get_security_options_from_environment+0x84>)
 8015706:	9401      	str	r4, [sp, #4]
 8015708:	a901      	add	r1, sp, #4
 801570a:	4616      	mov	r6, r2
 801570c:	f001 fa70 	bl	8016bf0 <rcutils_get_env>
 8015710:	b120      	cbz	r0, 801571c <rcl_get_security_options_from_environment+0x24>
 8015712:	2501      	movs	r5, #1
 8015714:	4628      	mov	r0, r5
 8015716:	b002      	add	sp, #8
 8015718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801571c:	4918      	ldr	r1, [pc, #96]	; (8015780 <rcl_get_security_options_from_environment+0x88>)
 801571e:	4604      	mov	r4, r0
 8015720:	9801      	ldr	r0, [sp, #4]
 8015722:	f7ea fd5d 	bl	80001e0 <strcmp>
 8015726:	4605      	mov	r5, r0
 8015728:	b9c8      	cbnz	r0, 801575e <rcl_get_security_options_from_environment+0x66>
 801572a:	9001      	str	r0, [sp, #4]
 801572c:	b1ee      	cbz	r6, 801576a <rcl_get_security_options_from_environment+0x72>
 801572e:	4815      	ldr	r0, [pc, #84]	; (8015784 <rcl_get_security_options_from_environment+0x8c>)
 8015730:	a901      	add	r1, sp, #4
 8015732:	f001 fa5d 	bl	8016bf0 <rcutils_get_env>
 8015736:	2800      	cmp	r0, #0
 8015738:	d1eb      	bne.n	8015712 <rcl_get_security_options_from_environment+0x1a>
 801573a:	4913      	ldr	r1, [pc, #76]	; (8015788 <rcl_get_security_options_from_environment+0x90>)
 801573c:	9801      	ldr	r0, [sp, #4]
 801573e:	f7ea fd4f 	bl	80001e0 <strcmp>
 8015742:	fab0 f080 	clz	r0, r0
 8015746:	0940      	lsrs	r0, r0, #5
 8015748:	7030      	strb	r0, [r6, #0]
 801574a:	4641      	mov	r1, r8
 801574c:	4638      	mov	r0, r7
 801574e:	f7ff ff69 	bl	8015624 <rcl_get_secure_root>
 8015752:	b160      	cbz	r0, 801576e <rcl_get_security_options_from_environment+0x76>
 8015754:	6070      	str	r0, [r6, #4]
 8015756:	4628      	mov	r0, r5
 8015758:	b002      	add	sp, #8
 801575a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801575e:	4625      	mov	r5, r4
 8015760:	4628      	mov	r0, r5
 8015762:	7034      	strb	r4, [r6, #0]
 8015764:	b002      	add	sp, #8
 8015766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801576a:	250b      	movs	r5, #11
 801576c:	e7d2      	b.n	8015714 <rcl_get_security_options_from_environment+0x1c>
 801576e:	7835      	ldrb	r5, [r6, #0]
 8015770:	f1a5 0501 	sub.w	r5, r5, #1
 8015774:	fab5 f585 	clz	r5, r5
 8015778:	096d      	lsrs	r5, r5, #5
 801577a:	e7cb      	b.n	8015714 <rcl_get_security_options_from_environment+0x1c>
 801577c:	0801bad0 	.word	0x0801bad0
 8015780:	0801bae4 	.word	0x0801bae4
 8015784:	0801baec 	.word	0x0801baec
 8015788:	0801bb04 	.word	0x0801bb04

0801578c <rcl_service_get_rmw_handle>:
 801578c:	b110      	cbz	r0, 8015794 <rcl_service_get_rmw_handle+0x8>
 801578e:	6800      	ldr	r0, [r0, #0]
 8015790:	b100      	cbz	r0, 8015794 <rcl_service_get_rmw_handle+0x8>
 8015792:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015794:	4770      	bx	lr
 8015796:	bf00      	nop

08015798 <rcl_take_request>:
 8015798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801579a:	460e      	mov	r6, r1
 801579c:	460c      	mov	r4, r1
 801579e:	4607      	mov	r7, r0
 80157a0:	4694      	mov	ip, r2
 80157a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80157a4:	b08d      	sub	sp, #52	; 0x34
 80157a6:	ad06      	add	r5, sp, #24
 80157a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80157aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80157ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80157b2:	b1e7      	cbz	r7, 80157ee <rcl_take_request+0x56>
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	b1d3      	cbz	r3, 80157ee <rcl_take_request+0x56>
 80157b8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80157ba:	b1c0      	cbz	r0, 80157ee <rcl_take_request+0x56>
 80157bc:	4662      	mov	r2, ip
 80157be:	b30a      	cbz	r2, 8015804 <rcl_take_request+0x6c>
 80157c0:	2500      	movs	r5, #0
 80157c2:	f10d 0307 	add.w	r3, sp, #7
 80157c6:	a902      	add	r1, sp, #8
 80157c8:	f88d 5007 	strb.w	r5, [sp, #7]
 80157cc:	f002 f86c 	bl	80178a8 <rmw_take_request>
 80157d0:	4606      	mov	r6, r0
 80157d2:	b178      	cbz	r0, 80157f4 <rcl_take_request+0x5c>
 80157d4:	280a      	cmp	r0, #10
 80157d6:	bf18      	it	ne
 80157d8:	2601      	movne	r6, #1
 80157da:	ad06      	add	r5, sp, #24
 80157dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80157e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80157e8:	4630      	mov	r0, r6
 80157ea:	b00d      	add	sp, #52	; 0x34
 80157ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157ee:	f44f 7616 	mov.w	r6, #600	; 0x258
 80157f2:	e7f2      	b.n	80157da <rcl_take_request+0x42>
 80157f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80157f8:	f240 2359 	movw	r3, #601	; 0x259
 80157fc:	2a00      	cmp	r2, #0
 80157fe:	bf08      	it	eq
 8015800:	461e      	moveq	r6, r3
 8015802:	e7ea      	b.n	80157da <rcl_take_request+0x42>
 8015804:	260b      	movs	r6, #11
 8015806:	e7e8      	b.n	80157da <rcl_take_request+0x42>

08015808 <rcl_send_response>:
 8015808:	b160      	cbz	r0, 8015824 <rcl_send_response+0x1c>
 801580a:	6800      	ldr	r0, [r0, #0]
 801580c:	b150      	cbz	r0, 8015824 <rcl_send_response+0x1c>
 801580e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015810:	b140      	cbz	r0, 8015824 <rcl_send_response+0x1c>
 8015812:	b151      	cbz	r1, 801582a <rcl_send_response+0x22>
 8015814:	b510      	push	{r4, lr}
 8015816:	b152      	cbz	r2, 801582e <rcl_send_response+0x26>
 8015818:	f002 f8a4 	bl	8017964 <rmw_send_response>
 801581c:	3800      	subs	r0, #0
 801581e:	bf18      	it	ne
 8015820:	2001      	movne	r0, #1
 8015822:	bd10      	pop	{r4, pc}
 8015824:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015828:	4770      	bx	lr
 801582a:	200b      	movs	r0, #11
 801582c:	4770      	bx	lr
 801582e:	200b      	movs	r0, #11
 8015830:	bd10      	pop	{r4, pc}
 8015832:	bf00      	nop

08015834 <rcl_get_system_time>:
 8015834:	4608      	mov	r0, r1
 8015836:	f7fa b8db 	b.w	800f9f0 <rcutils_system_time_now>
 801583a:	bf00      	nop

0801583c <rcl_get_steady_time>:
 801583c:	4608      	mov	r0, r1
 801583e:	f7fa b8ff 	b.w	800fa40 <rcutils_steady_time_now>
 8015842:	bf00      	nop

08015844 <rcl_get_ros_time>:
 8015844:	7a03      	ldrb	r3, [r0, #8]
 8015846:	b510      	push	{r4, lr}
 8015848:	460c      	mov	r4, r1
 801584a:	b133      	cbz	r3, 801585a <rcl_get_ros_time+0x16>
 801584c:	2105      	movs	r1, #5
 801584e:	f001 f8e3 	bl	8016a18 <__atomic_load_8>
 8015852:	e9c4 0100 	strd	r0, r1, [r4]
 8015856:	2000      	movs	r0, #0
 8015858:	bd10      	pop	{r4, pc}
 801585a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801585e:	4608      	mov	r0, r1
 8015860:	f7fa b8c6 	b.w	800f9f0 <rcutils_system_time_now>

08015864 <rcl_clock_init>:
 8015864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015868:	4606      	mov	r6, r0
 801586a:	4610      	mov	r0, r2
 801586c:	4614      	mov	r4, r2
 801586e:	460d      	mov	r5, r1
 8015870:	f7f9 ff52 	bl	800f718 <rcutils_allocator_is_valid>
 8015874:	b128      	cbz	r0, 8015882 <rcl_clock_init+0x1e>
 8015876:	2e03      	cmp	r6, #3
 8015878:	d803      	bhi.n	8015882 <rcl_clock_init+0x1e>
 801587a:	e8df f006 	tbb	[pc, r6]
 801587e:	2c1b      	.short	0x2c1b
 8015880:	0554      	.short	0x0554
 8015882:	200b      	movs	r0, #11
 8015884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015888:	2d00      	cmp	r5, #0
 801588a:	d0fa      	beq.n	8015882 <rcl_clock_init+0x1e>
 801588c:	2c00      	cmp	r4, #0
 801588e:	d0f8      	beq.n	8015882 <rcl_clock_init+0x1e>
 8015890:	2600      	movs	r6, #0
 8015892:	702e      	strb	r6, [r5, #0]
 8015894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015896:	f105 0714 	add.w	r7, r5, #20
 801589a:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801589e:	612e      	str	r6, [r5, #16]
 80158a0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80158a2:	6823      	ldr	r3, [r4, #0]
 80158a4:	603b      	str	r3, [r7, #0]
 80158a6:	2303      	movs	r3, #3
 80158a8:	4a2b      	ldr	r2, [pc, #172]	; (8015958 <rcl_clock_init+0xf4>)
 80158aa:	702b      	strb	r3, [r5, #0]
 80158ac:	4630      	mov	r0, r6
 80158ae:	60ea      	str	r2, [r5, #12]
 80158b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158b4:	2d00      	cmp	r5, #0
 80158b6:	d0e4      	beq.n	8015882 <rcl_clock_init+0x1e>
 80158b8:	2600      	movs	r6, #0
 80158ba:	702e      	strb	r6, [r5, #0]
 80158bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158be:	f105 0714 	add.w	r7, r5, #20
 80158c2:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80158c6:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80158ca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80158cc:	6823      	ldr	r3, [r4, #0]
 80158ce:	603b      	str	r3, [r7, #0]
 80158d0:	4630      	mov	r0, r6
 80158d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158d6:	2d00      	cmp	r5, #0
 80158d8:	d0d3      	beq.n	8015882 <rcl_clock_init+0x1e>
 80158da:	2c00      	cmp	r4, #0
 80158dc:	d0d1      	beq.n	8015882 <rcl_clock_init+0x1e>
 80158de:	2600      	movs	r6, #0
 80158e0:	702e      	strb	r6, [r5, #0]
 80158e2:	46a4      	mov	ip, r4
 80158e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80158e8:	f105 0714 	add.w	r7, r5, #20
 80158ec:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80158f0:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80158f4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80158f6:	f8dc 3000 	ldr.w	r3, [ip]
 80158fa:	603b      	str	r3, [r7, #0]
 80158fc:	6921      	ldr	r1, [r4, #16]
 80158fe:	6823      	ldr	r3, [r4, #0]
 8015900:	2010      	movs	r0, #16
 8015902:	4798      	blx	r3
 8015904:	4603      	mov	r3, r0
 8015906:	6128      	str	r0, [r5, #16]
 8015908:	b318      	cbz	r0, 8015952 <rcl_clock_init+0xee>
 801590a:	f04f 0800 	mov.w	r8, #0
 801590e:	f04f 0900 	mov.w	r9, #0
 8015912:	7206      	strb	r6, [r0, #8]
 8015914:	e9c3 8900 	strd	r8, r9, [r3]
 8015918:	2301      	movs	r3, #1
 801591a:	4a10      	ldr	r2, [pc, #64]	; (801595c <rcl_clock_init+0xf8>)
 801591c:	702b      	strb	r3, [r5, #0]
 801591e:	4630      	mov	r0, r6
 8015920:	60ea      	str	r2, [r5, #12]
 8015922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015926:	2d00      	cmp	r5, #0
 8015928:	d0ab      	beq.n	8015882 <rcl_clock_init+0x1e>
 801592a:	2c00      	cmp	r4, #0
 801592c:	d0a9      	beq.n	8015882 <rcl_clock_init+0x1e>
 801592e:	2600      	movs	r6, #0
 8015930:	702e      	strb	r6, [r5, #0]
 8015932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015934:	f105 0714 	add.w	r7, r5, #20
 8015938:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801593c:	612e      	str	r6, [r5, #16]
 801593e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015940:	6823      	ldr	r3, [r4, #0]
 8015942:	603b      	str	r3, [r7, #0]
 8015944:	2302      	movs	r3, #2
 8015946:	4a06      	ldr	r2, [pc, #24]	; (8015960 <rcl_clock_init+0xfc>)
 8015948:	702b      	strb	r3, [r5, #0]
 801594a:	4630      	mov	r0, r6
 801594c:	60ea      	str	r2, [r5, #12]
 801594e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015952:	200a      	movs	r0, #10
 8015954:	e796      	b.n	8015884 <rcl_clock_init+0x20>
 8015956:	bf00      	nop
 8015958:	0801583d 	.word	0x0801583d
 801595c:	08015845 	.word	0x08015845
 8015960:	08015835 	.word	0x08015835

08015964 <rcl_clock_get_now>:
 8015964:	b140      	cbz	r0, 8015978 <rcl_clock_get_now+0x14>
 8015966:	b139      	cbz	r1, 8015978 <rcl_clock_get_now+0x14>
 8015968:	7803      	ldrb	r3, [r0, #0]
 801596a:	b11b      	cbz	r3, 8015974 <rcl_clock_get_now+0x10>
 801596c:	68c3      	ldr	r3, [r0, #12]
 801596e:	b10b      	cbz	r3, 8015974 <rcl_clock_get_now+0x10>
 8015970:	6900      	ldr	r0, [r0, #16]
 8015972:	4718      	bx	r3
 8015974:	2001      	movs	r0, #1
 8015976:	4770      	bx	lr
 8015978:	200b      	movs	r0, #11
 801597a:	4770      	bx	lr

0801597c <rcl_timer_call>:
 801597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015980:	b08b      	sub	sp, #44	; 0x2c
 8015982:	2800      	cmp	r0, #0
 8015984:	d06e      	beq.n	8015a64 <rcl_timer_call+0xe8>
 8015986:	6803      	ldr	r3, [r0, #0]
 8015988:	f3bf 8f5b 	dmb	ish
 801598c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015990:	f3bf 8f5b 	dmb	ish
 8015994:	4604      	mov	r4, r0
 8015996:	2b00      	cmp	r3, #0
 8015998:	d159      	bne.n	8015a4e <rcl_timer_call+0xd2>
 801599a:	6803      	ldr	r3, [r0, #0]
 801599c:	a908      	add	r1, sp, #32
 801599e:	6818      	ldr	r0, [r3, #0]
 80159a0:	f7ff ffe0 	bl	8015964 <rcl_clock_get_now>
 80159a4:	4605      	mov	r5, r0
 80159a6:	2800      	cmp	r0, #0
 80159a8:	d14d      	bne.n	8015a46 <rcl_timer_call+0xca>
 80159aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80159ae:	2a00      	cmp	r2, #0
 80159b0:	f173 0100 	sbcs.w	r1, r3, #0
 80159b4:	db51      	blt.n	8015a5a <rcl_timer_call+0xde>
 80159b6:	6820      	ldr	r0, [r4, #0]
 80159b8:	2605      	movs	r6, #5
 80159ba:	9600      	str	r6, [sp, #0]
 80159bc:	3020      	adds	r0, #32
 80159be:	f001 f893 	bl	8016ae8 <__atomic_exchange_8>
 80159c2:	6822      	ldr	r2, [r4, #0]
 80159c4:	f3bf 8f5b 	dmb	ish
 80159c8:	4682      	mov	sl, r0
 80159ca:	f8d2 b010 	ldr.w	fp, [r2, #16]
 80159ce:	f3bf 8f5b 	dmb	ish
 80159d2:	6820      	ldr	r0, [r4, #0]
 80159d4:	460b      	mov	r3, r1
 80159d6:	3028      	adds	r0, #40	; 0x28
 80159d8:	4631      	mov	r1, r6
 80159da:	9305      	str	r3, [sp, #20]
 80159dc:	f001 f81c 	bl	8016a18 <__atomic_load_8>
 80159e0:	4603      	mov	r3, r0
 80159e2:	6820      	ldr	r0, [r4, #0]
 80159e4:	460a      	mov	r2, r1
 80159e6:	3018      	adds	r0, #24
 80159e8:	4631      	mov	r1, r6
 80159ea:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80159ee:	f001 f813 	bl	8016a18 <__atomic_load_8>
 80159f2:	9b04      	ldr	r3, [sp, #16]
 80159f4:	9a03      	ldr	r2, [sp, #12]
 80159f6:	4606      	mov	r6, r0
 80159f8:	460f      	mov	r7, r1
 80159fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80159fe:	eb13 0806 	adds.w	r8, r3, r6
 8015a02:	eb42 0907 	adc.w	r9, r2, r7
 8015a06:	4580      	cmp	r8, r0
 8015a08:	eb79 0301 	sbcs.w	r3, r9, r1
 8015a0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015a10:	460a      	mov	r2, r1
 8015a12:	da04      	bge.n	8015a1e <rcl_timer_call+0xa2>
 8015a14:	ea56 0307 	orrs.w	r3, r6, r7
 8015a18:	d129      	bne.n	8015a6e <rcl_timer_call+0xf2>
 8015a1a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8015a1e:	6820      	ldr	r0, [r4, #0]
 8015a20:	2105      	movs	r1, #5
 8015a22:	4642      	mov	r2, r8
 8015a24:	464b      	mov	r3, r9
 8015a26:	3028      	adds	r0, #40	; 0x28
 8015a28:	9100      	str	r1, [sp, #0]
 8015a2a:	f001 f829 	bl	8016a80 <__atomic_store_8>
 8015a2e:	f1bb 0f00 	cmp.w	fp, #0
 8015a32:	d008      	beq.n	8015a46 <rcl_timer_call+0xca>
 8015a34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015a38:	9905      	ldr	r1, [sp, #20]
 8015a3a:	ebb2 020a 	subs.w	r2, r2, sl
 8015a3e:	4620      	mov	r0, r4
 8015a40:	eb63 0301 	sbc.w	r3, r3, r1
 8015a44:	47d8      	blx	fp
 8015a46:	4628      	mov	r0, r5
 8015a48:	b00b      	add	sp, #44	; 0x2c
 8015a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a4e:	f240 3521 	movw	r5, #801	; 0x321
 8015a52:	4628      	mov	r0, r5
 8015a54:	b00b      	add	sp, #44	; 0x2c
 8015a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a5a:	2501      	movs	r5, #1
 8015a5c:	4628      	mov	r0, r5
 8015a5e:	b00b      	add	sp, #44	; 0x2c
 8015a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a64:	250b      	movs	r5, #11
 8015a66:	4628      	mov	r0, r5
 8015a68:	b00b      	add	sp, #44	; 0x2c
 8015a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a6e:	ebb0 0008 	subs.w	r0, r0, r8
 8015a72:	eb62 0109 	sbc.w	r1, r2, r9
 8015a76:	f110 30ff 	adds.w	r0, r0, #4294967295
 8015a7a:	463b      	mov	r3, r7
 8015a7c:	f141 31ff 	adc.w	r1, r1, #4294967295
 8015a80:	4632      	mov	r2, r6
 8015a82:	f7eb f8bb 	bl	8000bfc <__aeabi_ldivmod>
 8015a86:	1c43      	adds	r3, r0, #1
 8015a88:	f141 0100 	adc.w	r1, r1, #0
 8015a8c:	fb00 7007 	mla	r0, r0, r7, r7
 8015a90:	fb06 0001 	mla	r0, r6, r1, r0
 8015a94:	fba3 6706 	umull	r6, r7, r3, r6
 8015a98:	4407      	add	r7, r0
 8015a9a:	eb18 0806 	adds.w	r8, r8, r6
 8015a9e:	eb49 0907 	adc.w	r9, r9, r7
 8015aa2:	e7bc      	b.n	8015a1e <rcl_timer_call+0xa2>

08015aa4 <rcl_timer_is_ready>:
 8015aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aa8:	b082      	sub	sp, #8
 8015aaa:	b310      	cbz	r0, 8015af2 <rcl_timer_is_ready+0x4e>
 8015aac:	4688      	mov	r8, r1
 8015aae:	b301      	cbz	r1, 8015af2 <rcl_timer_is_ready+0x4e>
 8015ab0:	6803      	ldr	r3, [r0, #0]
 8015ab2:	4604      	mov	r4, r0
 8015ab4:	4669      	mov	r1, sp
 8015ab6:	6818      	ldr	r0, [r3, #0]
 8015ab8:	f7ff ff54 	bl	8015964 <rcl_clock_get_now>
 8015abc:	4605      	mov	r5, r0
 8015abe:	b118      	cbz	r0, 8015ac8 <rcl_timer_is_ready+0x24>
 8015ac0:	4628      	mov	r0, r5
 8015ac2:	b002      	add	sp, #8
 8015ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ac8:	6820      	ldr	r0, [r4, #0]
 8015aca:	2105      	movs	r1, #5
 8015acc:	3028      	adds	r0, #40	; 0x28
 8015ace:	f000 ffa3 	bl	8016a18 <__atomic_load_8>
 8015ad2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015ad6:	1ac6      	subs	r6, r0, r3
 8015ad8:	eb61 0702 	sbc.w	r7, r1, r2
 8015adc:	2e01      	cmp	r6, #1
 8015ade:	f177 0300 	sbcs.w	r3, r7, #0
 8015ae2:	db0b      	blt.n	8015afc <rcl_timer_is_ready+0x58>
 8015ae4:	462b      	mov	r3, r5
 8015ae6:	4628      	mov	r0, r5
 8015ae8:	f888 3000 	strb.w	r3, [r8]
 8015aec:	b002      	add	sp, #8
 8015aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015af2:	250b      	movs	r5, #11
 8015af4:	4628      	mov	r0, r5
 8015af6:	b002      	add	sp, #8
 8015af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015afc:	6823      	ldr	r3, [r4, #0]
 8015afe:	f3bf 8f5b 	dmb	ish
 8015b02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015b06:	f3bf 8f5b 	dmb	ish
 8015b0a:	fab3 f383 	clz	r3, r3
 8015b0e:	095b      	lsrs	r3, r3, #5
 8015b10:	e7e9      	b.n	8015ae6 <rcl_timer_is_ready+0x42>
 8015b12:	bf00      	nop

08015b14 <rcl_timer_get_time_until_next_call>:
 8015b14:	b570      	push	{r4, r5, r6, lr}
 8015b16:	b082      	sub	sp, #8
 8015b18:	b1d8      	cbz	r0, 8015b52 <rcl_timer_get_time_until_next_call+0x3e>
 8015b1a:	460d      	mov	r5, r1
 8015b1c:	b1c9      	cbz	r1, 8015b52 <rcl_timer_get_time_until_next_call+0x3e>
 8015b1e:	6803      	ldr	r3, [r0, #0]
 8015b20:	4604      	mov	r4, r0
 8015b22:	4669      	mov	r1, sp
 8015b24:	6818      	ldr	r0, [r3, #0]
 8015b26:	f7ff ff1d 	bl	8015964 <rcl_clock_get_now>
 8015b2a:	4606      	mov	r6, r0
 8015b2c:	b110      	cbz	r0, 8015b34 <rcl_timer_get_time_until_next_call+0x20>
 8015b2e:	4630      	mov	r0, r6
 8015b30:	b002      	add	sp, #8
 8015b32:	bd70      	pop	{r4, r5, r6, pc}
 8015b34:	6820      	ldr	r0, [r4, #0]
 8015b36:	2105      	movs	r1, #5
 8015b38:	3028      	adds	r0, #40	; 0x28
 8015b3a:	f000 ff6d 	bl	8016a18 <__atomic_load_8>
 8015b3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015b42:	1ac0      	subs	r0, r0, r3
 8015b44:	eb61 0102 	sbc.w	r1, r1, r2
 8015b48:	e9c5 0100 	strd	r0, r1, [r5]
 8015b4c:	4630      	mov	r0, r6
 8015b4e:	b002      	add	sp, #8
 8015b50:	bd70      	pop	{r4, r5, r6, pc}
 8015b52:	260b      	movs	r6, #11
 8015b54:	4630      	mov	r0, r6
 8015b56:	b002      	add	sp, #8
 8015b58:	bd70      	pop	{r4, r5, r6, pc}
 8015b5a:	bf00      	nop

08015b5c <rcl_timer_is_canceled>:
 8015b5c:	b168      	cbz	r0, 8015b7a <rcl_timer_is_canceled+0x1e>
 8015b5e:	b161      	cbz	r1, 8015b7a <rcl_timer_is_canceled+0x1e>
 8015b60:	6803      	ldr	r3, [r0, #0]
 8015b62:	f3bf 8f5b 	dmb	ish
 8015b66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015b6a:	f3bf 8f5b 	dmb	ish
 8015b6e:	3b00      	subs	r3, #0
 8015b70:	bf18      	it	ne
 8015b72:	2301      	movne	r3, #1
 8015b74:	700b      	strb	r3, [r1, #0]
 8015b76:	2000      	movs	r0, #0
 8015b78:	4770      	bx	lr
 8015b7a:	200b      	movs	r0, #11
 8015b7c:	4770      	bx	lr
 8015b7e:	bf00      	nop

08015b80 <rcl_timer_get_guard_condition>:
 8015b80:	b130      	cbz	r0, 8015b90 <rcl_timer_get_guard_condition+0x10>
 8015b82:	6800      	ldr	r0, [r0, #0]
 8015b84:	b120      	cbz	r0, 8015b90 <rcl_timer_get_guard_condition+0x10>
 8015b86:	68c3      	ldr	r3, [r0, #12]
 8015b88:	b10b      	cbz	r3, 8015b8e <rcl_timer_get_guard_condition+0xe>
 8015b8a:	3008      	adds	r0, #8
 8015b8c:	4770      	bx	lr
 8015b8e:	4618      	mov	r0, r3
 8015b90:	4770      	bx	lr
 8015b92:	bf00      	nop

08015b94 <rcl_validate_enclave_name_with_size>:
 8015b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b96:	b0c3      	sub	sp, #268	; 0x10c
 8015b98:	b1d0      	cbz	r0, 8015bd0 <rcl_validate_enclave_name_with_size+0x3c>
 8015b9a:	4615      	mov	r5, r2
 8015b9c:	b1c2      	cbz	r2, 8015bd0 <rcl_validate_enclave_name_with_size+0x3c>
 8015b9e:	461f      	mov	r7, r3
 8015ba0:	466a      	mov	r2, sp
 8015ba2:	ab01      	add	r3, sp, #4
 8015ba4:	460e      	mov	r6, r1
 8015ba6:	f001 f96d 	bl	8016e84 <rmw_validate_namespace_with_size>
 8015baa:	4604      	mov	r4, r0
 8015bac:	b9e0      	cbnz	r0, 8015be8 <rcl_validate_enclave_name_with_size+0x54>
 8015bae:	9b00      	ldr	r3, [sp, #0]
 8015bb0:	b923      	cbnz	r3, 8015bbc <rcl_validate_enclave_name_with_size+0x28>
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	602b      	str	r3, [r5, #0]
 8015bb6:	4620      	mov	r0, r4
 8015bb8:	b043      	add	sp, #268	; 0x10c
 8015bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bbc:	2b07      	cmp	r3, #7
 8015bbe:	d00b      	beq.n	8015bd8 <rcl_validate_enclave_name_with_size+0x44>
 8015bc0:	1e5a      	subs	r2, r3, #1
 8015bc2:	2a05      	cmp	r2, #5
 8015bc4:	d82e      	bhi.n	8015c24 <rcl_validate_enclave_name_with_size+0x90>
 8015bc6:	e8df f002 	tbb	[pc, r2]
 8015bca:	211e      	.short	0x211e
 8015bcc:	152a2724 	.word	0x152a2724
 8015bd0:	240b      	movs	r4, #11
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	b043      	add	sp, #268	; 0x10c
 8015bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bd8:	2eff      	cmp	r6, #255	; 0xff
 8015bda:	d9ea      	bls.n	8015bb2 <rcl_validate_enclave_name_with_size+0x1e>
 8015bdc:	602b      	str	r3, [r5, #0]
 8015bde:	2f00      	cmp	r7, #0
 8015be0:	d0e9      	beq.n	8015bb6 <rcl_validate_enclave_name_with_size+0x22>
 8015be2:	23fe      	movs	r3, #254	; 0xfe
 8015be4:	603b      	str	r3, [r7, #0]
 8015be6:	e7e6      	b.n	8015bb6 <rcl_validate_enclave_name_with_size+0x22>
 8015be8:	f7fe fec2 	bl	8014970 <rcl_convert_rmw_ret_to_rcl_ret>
 8015bec:	4604      	mov	r4, r0
 8015bee:	4620      	mov	r0, r4
 8015bf0:	b043      	add	sp, #268	; 0x10c
 8015bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bf4:	2306      	movs	r3, #6
 8015bf6:	602b      	str	r3, [r5, #0]
 8015bf8:	2f00      	cmp	r7, #0
 8015bfa:	d0dc      	beq.n	8015bb6 <rcl_validate_enclave_name_with_size+0x22>
 8015bfc:	9b01      	ldr	r3, [sp, #4]
 8015bfe:	603b      	str	r3, [r7, #0]
 8015c00:	4620      	mov	r0, r4
 8015c02:	b043      	add	sp, #268	; 0x10c
 8015c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c06:	2301      	movs	r3, #1
 8015c08:	602b      	str	r3, [r5, #0]
 8015c0a:	e7f5      	b.n	8015bf8 <rcl_validate_enclave_name_with_size+0x64>
 8015c0c:	2302      	movs	r3, #2
 8015c0e:	602b      	str	r3, [r5, #0]
 8015c10:	e7f2      	b.n	8015bf8 <rcl_validate_enclave_name_with_size+0x64>
 8015c12:	2303      	movs	r3, #3
 8015c14:	602b      	str	r3, [r5, #0]
 8015c16:	e7ef      	b.n	8015bf8 <rcl_validate_enclave_name_with_size+0x64>
 8015c18:	2304      	movs	r3, #4
 8015c1a:	602b      	str	r3, [r5, #0]
 8015c1c:	e7ec      	b.n	8015bf8 <rcl_validate_enclave_name_with_size+0x64>
 8015c1e:	2305      	movs	r3, #5
 8015c20:	602b      	str	r3, [r5, #0]
 8015c22:	e7e9      	b.n	8015bf8 <rcl_validate_enclave_name_with_size+0x64>
 8015c24:	4a03      	ldr	r2, [pc, #12]	; (8015c34 <rcl_validate_enclave_name_with_size+0xa0>)
 8015c26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015c2a:	a802      	add	r0, sp, #8
 8015c2c:	f001 f8a4 	bl	8016d78 <rcutils_snprintf>
 8015c30:	2401      	movs	r4, #1
 8015c32:	e7c0      	b.n	8015bb6 <rcl_validate_enclave_name_with_size+0x22>
 8015c34:	0801bb50 	.word	0x0801bb50

08015c38 <rcl_validate_enclave_name>:
 8015c38:	b168      	cbz	r0, 8015c56 <rcl_validate_enclave_name+0x1e>
 8015c3a:	b570      	push	{r4, r5, r6, lr}
 8015c3c:	460d      	mov	r5, r1
 8015c3e:	4616      	mov	r6, r2
 8015c40:	4604      	mov	r4, r0
 8015c42:	f7ea fad7 	bl	80001f4 <strlen>
 8015c46:	4633      	mov	r3, r6
 8015c48:	4601      	mov	r1, r0
 8015c4a:	462a      	mov	r2, r5
 8015c4c:	4620      	mov	r0, r4
 8015c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c52:	f7ff bf9f 	b.w	8015b94 <rcl_validate_enclave_name_with_size>
 8015c56:	200b      	movs	r0, #11
 8015c58:	4770      	bx	lr
 8015c5a:	bf00      	nop

08015c5c <rcl_validate_topic_name>:
 8015c5c:	2800      	cmp	r0, #0
 8015c5e:	f000 808b 	beq.w	8015d78 <rcl_validate_topic_name+0x11c>
 8015c62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c66:	460e      	mov	r6, r1
 8015c68:	2900      	cmp	r1, #0
 8015c6a:	f000 808c 	beq.w	8015d86 <rcl_validate_topic_name+0x12a>
 8015c6e:	4617      	mov	r7, r2
 8015c70:	4605      	mov	r5, r0
 8015c72:	f7ea fabf 	bl	80001f4 <strlen>
 8015c76:	b1b0      	cbz	r0, 8015ca6 <rcl_validate_topic_name+0x4a>
 8015c78:	f895 9000 	ldrb.w	r9, [r5]
 8015c7c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8015e2c <rcl_validate_topic_name+0x1d0>
 8015c80:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015c84:	f013 0304 	ands.w	r3, r3, #4
 8015c88:	d178      	bne.n	8015d7c <rcl_validate_topic_name+0x120>
 8015c8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8015c8e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015c92:	2a2f      	cmp	r2, #47	; 0x2f
 8015c94:	d10e      	bne.n	8015cb4 <rcl_validate_topic_name+0x58>
 8015c96:	2202      	movs	r2, #2
 8015c98:	6032      	str	r2, [r6, #0]
 8015c9a:	b36f      	cbz	r7, 8015cf8 <rcl_validate_topic_name+0x9c>
 8015c9c:	f8c7 8000 	str.w	r8, [r7]
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ca6:	2301      	movs	r3, #1
 8015ca8:	6033      	str	r3, [r6, #0]
 8015caa:	b32f      	cbz	r7, 8015cf8 <rcl_validate_topic_name+0x9c>
 8015cac:	2000      	movs	r0, #0
 8015cae:	6038      	str	r0, [r7, #0]
 8015cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cb4:	461c      	mov	r4, r3
 8015cb6:	4619      	mov	r1, r3
 8015cb8:	f105 3aff 	add.w	sl, r5, #4294967295
 8015cbc:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015cc0:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015cc4:	f1be 0f09 	cmp.w	lr, #9
 8015cc8:	d946      	bls.n	8015d58 <rcl_validate_topic_name+0xfc>
 8015cca:	f022 0e20 	bic.w	lr, r2, #32
 8015cce:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8015cd2:	f1be 0f19 	cmp.w	lr, #25
 8015cd6:	d93f      	bls.n	8015d58 <rcl_validate_topic_name+0xfc>
 8015cd8:	2a5f      	cmp	r2, #95	; 0x5f
 8015cda:	d014      	beq.n	8015d06 <rcl_validate_topic_name+0xaa>
 8015cdc:	2a2f      	cmp	r2, #47	; 0x2f
 8015cde:	d05b      	beq.n	8015d98 <rcl_validate_topic_name+0x13c>
 8015ce0:	2a7e      	cmp	r2, #126	; 0x7e
 8015ce2:	d052      	beq.n	8015d8a <rcl_validate_topic_name+0x12e>
 8015ce4:	2a7b      	cmp	r2, #123	; 0x7b
 8015ce6:	d00a      	beq.n	8015cfe <rcl_validate_topic_name+0xa2>
 8015ce8:	2a7d      	cmp	r2, #125	; 0x7d
 8015cea:	d16f      	bne.n	8015dcc <rcl_validate_topic_name+0x170>
 8015cec:	2c00      	cmp	r4, #0
 8015cee:	d15e      	bne.n	8015dae <rcl_validate_topic_name+0x152>
 8015cf0:	2305      	movs	r3, #5
 8015cf2:	6033      	str	r3, [r6, #0]
 8015cf4:	b107      	cbz	r7, 8015cf8 <rcl_validate_topic_name+0x9c>
 8015cf6:	6039      	str	r1, [r7, #0]
 8015cf8:	2000      	movs	r0, #0
 8015cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cfe:	2c00      	cmp	r4, #0
 8015d00:	d14c      	bne.n	8015d9c <rcl_validate_topic_name+0x140>
 8015d02:	460b      	mov	r3, r1
 8015d04:	2401      	movs	r4, #1
 8015d06:	3101      	adds	r1, #1
 8015d08:	4288      	cmp	r0, r1
 8015d0a:	d1d7      	bne.n	8015cbc <rcl_validate_topic_name+0x60>
 8015d0c:	2c00      	cmp	r4, #0
 8015d0e:	d156      	bne.n	8015dbe <rcl_validate_topic_name+0x162>
 8015d10:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8015d14:	4620      	mov	r0, r4
 8015d16:	d061      	beq.n	8015ddc <rcl_validate_topic_name+0x180>
 8015d18:	f108 0e01 	add.w	lr, r8, #1
 8015d1c:	e007      	b.n	8015d2e <rcl_validate_topic_name+0xd2>
 8015d1e:	2801      	cmp	r0, #1
 8015d20:	d047      	beq.n	8015db2 <rcl_validate_topic_name+0x156>
 8015d22:	461a      	mov	r2, r3
 8015d24:	4291      	cmp	r1, r2
 8015d26:	4618      	mov	r0, r3
 8015d28:	f105 0501 	add.w	r5, r5, #1
 8015d2c:	d944      	bls.n	8015db8 <rcl_validate_topic_name+0x15c>
 8015d2e:	4580      	cmp	r8, r0
 8015d30:	f100 0301 	add.w	r3, r0, #1
 8015d34:	d037      	beq.n	8015da6 <rcl_validate_topic_name+0x14a>
 8015d36:	782a      	ldrb	r2, [r5, #0]
 8015d38:	2a2f      	cmp	r2, #47	; 0x2f
 8015d3a:	d1f0      	bne.n	8015d1e <rcl_validate_topic_name+0xc2>
 8015d3c:	786b      	ldrb	r3, [r5, #1]
 8015d3e:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8015d42:	1c43      	adds	r3, r0, #1
 8015d44:	0760      	lsls	r0, r4, #29
 8015d46:	461a      	mov	r2, r3
 8015d48:	d5ec      	bpl.n	8015d24 <rcl_validate_topic_name+0xc8>
 8015d4a:	2304      	movs	r3, #4
 8015d4c:	6033      	str	r3, [r6, #0]
 8015d4e:	2f00      	cmp	r7, #0
 8015d50:	d0d2      	beq.n	8015cf8 <rcl_validate_topic_name+0x9c>
 8015d52:	603a      	str	r2, [r7, #0]
 8015d54:	2000      	movs	r0, #0
 8015d56:	e7ab      	b.n	8015cb0 <rcl_validate_topic_name+0x54>
 8015d58:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015d5c:	0752      	lsls	r2, r2, #29
 8015d5e:	d5d2      	bpl.n	8015d06 <rcl_validate_topic_name+0xaa>
 8015d60:	2c00      	cmp	r4, #0
 8015d62:	d0d0      	beq.n	8015d06 <rcl_validate_topic_name+0xaa>
 8015d64:	2900      	cmp	r1, #0
 8015d66:	d0ce      	beq.n	8015d06 <rcl_validate_topic_name+0xaa>
 8015d68:	1e4a      	subs	r2, r1, #1
 8015d6a:	429a      	cmp	r2, r3
 8015d6c:	d1cb      	bne.n	8015d06 <rcl_validate_topic_name+0xaa>
 8015d6e:	2309      	movs	r3, #9
 8015d70:	6033      	str	r3, [r6, #0]
 8015d72:	2f00      	cmp	r7, #0
 8015d74:	d1bf      	bne.n	8015cf6 <rcl_validate_topic_name+0x9a>
 8015d76:	e7bf      	b.n	8015cf8 <rcl_validate_topic_name+0x9c>
 8015d78:	200b      	movs	r0, #11
 8015d7a:	4770      	bx	lr
 8015d7c:	2304      	movs	r3, #4
 8015d7e:	6033      	str	r3, [r6, #0]
 8015d80:	2f00      	cmp	r7, #0
 8015d82:	d193      	bne.n	8015cac <rcl_validate_topic_name+0x50>
 8015d84:	e7b8      	b.n	8015cf8 <rcl_validate_topic_name+0x9c>
 8015d86:	200b      	movs	r0, #11
 8015d88:	e792      	b.n	8015cb0 <rcl_validate_topic_name+0x54>
 8015d8a:	2900      	cmp	r1, #0
 8015d8c:	d0bb      	beq.n	8015d06 <rcl_validate_topic_name+0xaa>
 8015d8e:	2306      	movs	r3, #6
 8015d90:	6033      	str	r3, [r6, #0]
 8015d92:	2f00      	cmp	r7, #0
 8015d94:	d1af      	bne.n	8015cf6 <rcl_validate_topic_name+0x9a>
 8015d96:	e7af      	b.n	8015cf8 <rcl_validate_topic_name+0x9c>
 8015d98:	2c00      	cmp	r4, #0
 8015d9a:	d0b4      	beq.n	8015d06 <rcl_validate_topic_name+0xaa>
 8015d9c:	2308      	movs	r3, #8
 8015d9e:	6033      	str	r3, [r6, #0]
 8015da0:	2f00      	cmp	r7, #0
 8015da2:	d1a8      	bne.n	8015cf6 <rcl_validate_topic_name+0x9a>
 8015da4:	e7a8      	b.n	8015cf8 <rcl_validate_topic_name+0x9c>
 8015da6:	4672      	mov	r2, lr
 8015da8:	f108 0301 	add.w	r3, r8, #1
 8015dac:	e7ba      	b.n	8015d24 <rcl_validate_topic_name+0xc8>
 8015dae:	2400      	movs	r4, #0
 8015db0:	e7a9      	b.n	8015d06 <rcl_validate_topic_name+0xaa>
 8015db2:	2202      	movs	r2, #2
 8015db4:	4613      	mov	r3, r2
 8015db6:	e7b5      	b.n	8015d24 <rcl_validate_topic_name+0xc8>
 8015db8:	2000      	movs	r0, #0
 8015dba:	6030      	str	r0, [r6, #0]
 8015dbc:	e778      	b.n	8015cb0 <rcl_validate_topic_name+0x54>
 8015dbe:	2205      	movs	r2, #5
 8015dc0:	6032      	str	r2, [r6, #0]
 8015dc2:	2f00      	cmp	r7, #0
 8015dc4:	d098      	beq.n	8015cf8 <rcl_validate_topic_name+0x9c>
 8015dc6:	603b      	str	r3, [r7, #0]
 8015dc8:	2000      	movs	r0, #0
 8015dca:	e771      	b.n	8015cb0 <rcl_validate_topic_name+0x54>
 8015dcc:	2c00      	cmp	r4, #0
 8015dce:	bf14      	ite	ne
 8015dd0:	2308      	movne	r3, #8
 8015dd2:	2303      	moveq	r3, #3
 8015dd4:	6033      	str	r3, [r6, #0]
 8015dd6:	2f00      	cmp	r7, #0
 8015dd8:	d18d      	bne.n	8015cf6 <rcl_validate_topic_name+0x9a>
 8015dda:	e78d      	b.n	8015cf8 <rcl_validate_topic_name+0x9c>
 8015ddc:	f108 0401 	add.w	r4, r8, #1
 8015de0:	e007      	b.n	8015df2 <rcl_validate_topic_name+0x196>
 8015de2:	2801      	cmp	r0, #1
 8015de4:	d019      	beq.n	8015e1a <rcl_validate_topic_name+0x1be>
 8015de6:	461a      	mov	r2, r3
 8015de8:	4291      	cmp	r1, r2
 8015dea:	4618      	mov	r0, r3
 8015dec:	f105 0501 	add.w	r5, r5, #1
 8015df0:	d9e2      	bls.n	8015db8 <rcl_validate_topic_name+0x15c>
 8015df2:	4580      	cmp	r8, r0
 8015df4:	f100 0301 	add.w	r3, r0, #1
 8015df8:	d00b      	beq.n	8015e12 <rcl_validate_topic_name+0x1b6>
 8015dfa:	782a      	ldrb	r2, [r5, #0]
 8015dfc:	2a2f      	cmp	r2, #47	; 0x2f
 8015dfe:	d1f0      	bne.n	8015de2 <rcl_validate_topic_name+0x186>
 8015e00:	786b      	ldrb	r3, [r5, #1]
 8015e02:	f81c e003 	ldrb.w	lr, [ip, r3]
 8015e06:	1c43      	adds	r3, r0, #1
 8015e08:	f01e 0f04 	tst.w	lr, #4
 8015e0c:	461a      	mov	r2, r3
 8015e0e:	d0eb      	beq.n	8015de8 <rcl_validate_topic_name+0x18c>
 8015e10:	e79b      	b.n	8015d4a <rcl_validate_topic_name+0xee>
 8015e12:	4622      	mov	r2, r4
 8015e14:	f108 0301 	add.w	r3, r8, #1
 8015e18:	e7e6      	b.n	8015de8 <rcl_validate_topic_name+0x18c>
 8015e1a:	2307      	movs	r3, #7
 8015e1c:	6033      	str	r3, [r6, #0]
 8015e1e:	2f00      	cmp	r7, #0
 8015e20:	f43f af6a 	beq.w	8015cf8 <rcl_validate_topic_name+0x9c>
 8015e24:	6038      	str	r0, [r7, #0]
 8015e26:	2000      	movs	r0, #0
 8015e28:	e742      	b.n	8015cb0 <rcl_validate_topic_name+0x54>
 8015e2a:	bf00      	nop
 8015e2c:	0801c1d8 	.word	0x0801c1d8

08015e30 <rcl_get_zero_initialized_wait_set>:
 8015e30:	b470      	push	{r4, r5, r6}
 8015e32:	4d07      	ldr	r5, [pc, #28]	; (8015e50 <rcl_get_zero_initialized_wait_set+0x20>)
 8015e34:	4606      	mov	r6, r0
 8015e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e38:	4634      	mov	r4, r6
 8015e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015e44:	682b      	ldr	r3, [r5, #0]
 8015e46:	6023      	str	r3, [r4, #0]
 8015e48:	4630      	mov	r0, r6
 8015e4a:	bc70      	pop	{r4, r5, r6}
 8015e4c:	4770      	bx	lr
 8015e4e:	bf00      	nop
 8015e50:	0801bbb0 	.word	0x0801bbb0

08015e54 <rcl_wait_set_is_valid>:
 8015e54:	b118      	cbz	r0, 8015e5e <rcl_wait_set_is_valid+0xa>
 8015e56:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015e58:	3800      	subs	r0, #0
 8015e5a:	bf18      	it	ne
 8015e5c:	2001      	movne	r0, #1
 8015e5e:	4770      	bx	lr

08015e60 <rcl_wait_set_fini>:
 8015e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e64:	b082      	sub	sp, #8
 8015e66:	2800      	cmp	r0, #0
 8015e68:	f000 8095 	beq.w	8015f96 <rcl_wait_set_fini+0x136>
 8015e6c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8015e6e:	4604      	mov	r4, r0
 8015e70:	2e00      	cmp	r6, #0
 8015e72:	f000 808c 	beq.w	8015f8e <rcl_wait_set_fini+0x12e>
 8015e76:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8015e78:	f002 f804 	bl	8017e84 <rmw_destroy_wait_set>
 8015e7c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e7e:	1e06      	subs	r6, r0, #0
 8015e80:	bf18      	it	ne
 8015e82:	f44f 7661 	movne.w	r6, #900	; 0x384
 8015e86:	2d00      	cmp	r5, #0
 8015e88:	f000 8081 	beq.w	8015f8e <rcl_wait_set_fini+0x12e>
 8015e8c:	6820      	ldr	r0, [r4, #0]
 8015e8e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015e92:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e94:	2700      	movs	r7, #0
 8015e96:	6067      	str	r7, [r4, #4]
 8015e98:	602f      	str	r7, [r5, #0]
 8015e9a:	b120      	cbz	r0, 8015ea6 <rcl_wait_set_fini+0x46>
 8015e9c:	9101      	str	r1, [sp, #4]
 8015e9e:	47c0      	blx	r8
 8015ea0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ea2:	9901      	ldr	r1, [sp, #4]
 8015ea4:	6027      	str	r7, [r4, #0]
 8015ea6:	68a8      	ldr	r0, [r5, #8]
 8015ea8:	b120      	cbz	r0, 8015eb4 <rcl_wait_set_fini+0x54>
 8015eaa:	47c0      	blx	r8
 8015eac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015eae:	2300      	movs	r3, #0
 8015eb0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015eb4:	68a0      	ldr	r0, [r4, #8]
 8015eb6:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015eb8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015eba:	f04f 0800 	mov.w	r8, #0
 8015ebe:	f8c4 800c 	str.w	r8, [r4, #12]
 8015ec2:	f8c5 800c 	str.w	r8, [r5, #12]
 8015ec6:	b128      	cbz	r0, 8015ed4 <rcl_wait_set_fini+0x74>
 8015ec8:	47b8      	blx	r7
 8015eca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ecc:	f8c4 8008 	str.w	r8, [r4, #8]
 8015ed0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015ed2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015ed4:	6968      	ldr	r0, [r5, #20]
 8015ed6:	f04f 0800 	mov.w	r8, #0
 8015eda:	f8c5 8010 	str.w	r8, [r5, #16]
 8015ede:	b128      	cbz	r0, 8015eec <rcl_wait_set_fini+0x8c>
 8015ee0:	47b8      	blx	r7
 8015ee2:	f8c5 8014 	str.w	r8, [r5, #20]
 8015ee6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ee8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015eea:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015eec:	6920      	ldr	r0, [r4, #16]
 8015eee:	f04f 0800 	mov.w	r8, #0
 8015ef2:	f8c4 8014 	str.w	r8, [r4, #20]
 8015ef6:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8015efa:	b128      	cbz	r0, 8015f08 <rcl_wait_set_fini+0xa8>
 8015efc:	47b8      	blx	r7
 8015efe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015f00:	f8c4 8010 	str.w	r8, [r4, #16]
 8015f04:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015f06:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015f08:	69a0      	ldr	r0, [r4, #24]
 8015f0a:	f04f 0800 	mov.w	r8, #0
 8015f0e:	f8c4 801c 	str.w	r8, [r4, #28]
 8015f12:	f8c5 8018 	str.w	r8, [r5, #24]
 8015f16:	b128      	cbz	r0, 8015f24 <rcl_wait_set_fini+0xc4>
 8015f18:	9101      	str	r1, [sp, #4]
 8015f1a:	47b8      	blx	r7
 8015f1c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015f1e:	9901      	ldr	r1, [sp, #4]
 8015f20:	f8c4 8018 	str.w	r8, [r4, #24]
 8015f24:	6a28      	ldr	r0, [r5, #32]
 8015f26:	b120      	cbz	r0, 8015f32 <rcl_wait_set_fini+0xd2>
 8015f28:	47b8      	blx	r7
 8015f2a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015f32:	6a20      	ldr	r0, [r4, #32]
 8015f34:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015f38:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015f3a:	2700      	movs	r7, #0
 8015f3c:	6267      	str	r7, [r4, #36]	; 0x24
 8015f3e:	626f      	str	r7, [r5, #36]	; 0x24
 8015f40:	b120      	cbz	r0, 8015f4c <rcl_wait_set_fini+0xec>
 8015f42:	9101      	str	r1, [sp, #4]
 8015f44:	47c0      	blx	r8
 8015f46:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015f48:	9901      	ldr	r1, [sp, #4]
 8015f4a:	6227      	str	r7, [r4, #32]
 8015f4c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8015f4e:	b120      	cbz	r0, 8015f5a <rcl_wait_set_fini+0xfa>
 8015f50:	47c0      	blx	r8
 8015f52:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015f54:	2300      	movs	r3, #0
 8015f56:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8015f5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015f5c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015f60:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015f62:	2700      	movs	r7, #0
 8015f64:	62e7      	str	r7, [r4, #44]	; 0x2c
 8015f66:	632f      	str	r7, [r5, #48]	; 0x30
 8015f68:	b120      	cbz	r0, 8015f74 <rcl_wait_set_fini+0x114>
 8015f6a:	9101      	str	r1, [sp, #4]
 8015f6c:	47c0      	blx	r8
 8015f6e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015f70:	9901      	ldr	r1, [sp, #4]
 8015f72:	62a7      	str	r7, [r4, #40]	; 0x28
 8015f74:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8015f76:	b120      	cbz	r0, 8015f82 <rcl_wait_set_fini+0x122>
 8015f78:	47c0      	blx	r8
 8015f7a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8015f82:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015f84:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015f86:	4628      	mov	r0, r5
 8015f88:	4798      	blx	r3
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	6323      	str	r3, [r4, #48]	; 0x30
 8015f8e:	4630      	mov	r0, r6
 8015f90:	b002      	add	sp, #8
 8015f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f96:	260b      	movs	r6, #11
 8015f98:	4630      	mov	r0, r6
 8015f9a:	b002      	add	sp, #8
 8015f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015fa0 <rcl_wait_set_add_subscription>:
 8015fa0:	b320      	cbz	r0, 8015fec <rcl_wait_set_add_subscription+0x4c>
 8015fa2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015fa4:	b570      	push	{r4, r5, r6, lr}
 8015fa6:	4604      	mov	r4, r0
 8015fa8:	b1d3      	cbz	r3, 8015fe0 <rcl_wait_set_add_subscription+0x40>
 8015faa:	b319      	cbz	r1, 8015ff4 <rcl_wait_set_add_subscription+0x54>
 8015fac:	681d      	ldr	r5, [r3, #0]
 8015fae:	6860      	ldr	r0, [r4, #4]
 8015fb0:	4285      	cmp	r5, r0
 8015fb2:	d218      	bcs.n	8015fe6 <rcl_wait_set_add_subscription+0x46>
 8015fb4:	6820      	ldr	r0, [r4, #0]
 8015fb6:	1c6e      	adds	r6, r5, #1
 8015fb8:	601e      	str	r6, [r3, #0]
 8015fba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015fbe:	b102      	cbz	r2, 8015fc2 <rcl_wait_set_add_subscription+0x22>
 8015fc0:	6015      	str	r5, [r2, #0]
 8015fc2:	4608      	mov	r0, r1
 8015fc4:	f7f8 ff18 	bl	800edf8 <rcl_subscription_get_rmw_handle>
 8015fc8:	b190      	cbz	r0, 8015ff0 <rcl_wait_set_add_subscription+0x50>
 8015fca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fcc:	6842      	ldr	r2, [r0, #4]
 8015fce:	689b      	ldr	r3, [r3, #8]
 8015fd0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015fd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015fd6:	6853      	ldr	r3, [r2, #4]
 8015fd8:	3301      	adds	r3, #1
 8015fda:	6053      	str	r3, [r2, #4]
 8015fdc:	2000      	movs	r0, #0
 8015fde:	bd70      	pop	{r4, r5, r6, pc}
 8015fe0:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015fe4:	bd70      	pop	{r4, r5, r6, pc}
 8015fe6:	f240 3086 	movw	r0, #902	; 0x386
 8015fea:	bd70      	pop	{r4, r5, r6, pc}
 8015fec:	200b      	movs	r0, #11
 8015fee:	4770      	bx	lr
 8015ff0:	2001      	movs	r0, #1
 8015ff2:	bd70      	pop	{r4, r5, r6, pc}
 8015ff4:	200b      	movs	r0, #11
 8015ff6:	bd70      	pop	{r4, r5, r6, pc}

08015ff8 <rcl_wait_set_clear>:
 8015ff8:	2800      	cmp	r0, #0
 8015ffa:	d073      	beq.n	80160e4 <rcl_wait_set_clear+0xec>
 8015ffc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015ffe:	b510      	push	{r4, lr}
 8016000:	4604      	mov	r4, r0
 8016002:	2b00      	cmp	r3, #0
 8016004:	d070      	beq.n	80160e8 <rcl_wait_set_clear+0xf0>
 8016006:	6800      	ldr	r0, [r0, #0]
 8016008:	b138      	cbz	r0, 801601a <rcl_wait_set_clear+0x22>
 801600a:	6862      	ldr	r2, [r4, #4]
 801600c:	2100      	movs	r1, #0
 801600e:	0092      	lsls	r2, r2, #2
 8016010:	f004 fa86 	bl	801a520 <memset>
 8016014:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016016:	2200      	movs	r2, #0
 8016018:	601a      	str	r2, [r3, #0]
 801601a:	68a0      	ldr	r0, [r4, #8]
 801601c:	b138      	cbz	r0, 801602e <rcl_wait_set_clear+0x36>
 801601e:	68e2      	ldr	r2, [r4, #12]
 8016020:	2100      	movs	r1, #0
 8016022:	0092      	lsls	r2, r2, #2
 8016024:	f004 fa7c 	bl	801a520 <memset>
 8016028:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801602a:	2200      	movs	r2, #0
 801602c:	60da      	str	r2, [r3, #12]
 801602e:	69a0      	ldr	r0, [r4, #24]
 8016030:	b138      	cbz	r0, 8016042 <rcl_wait_set_clear+0x4a>
 8016032:	69e2      	ldr	r2, [r4, #28]
 8016034:	2100      	movs	r1, #0
 8016036:	0092      	lsls	r2, r2, #2
 8016038:	f004 fa72 	bl	801a520 <memset>
 801603c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801603e:	2200      	movs	r2, #0
 8016040:	619a      	str	r2, [r3, #24]
 8016042:	6a20      	ldr	r0, [r4, #32]
 8016044:	b138      	cbz	r0, 8016056 <rcl_wait_set_clear+0x5e>
 8016046:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016048:	2100      	movs	r1, #0
 801604a:	0092      	lsls	r2, r2, #2
 801604c:	f004 fa68 	bl	801a520 <memset>
 8016050:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016052:	2200      	movs	r2, #0
 8016054:	625a      	str	r2, [r3, #36]	; 0x24
 8016056:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016058:	b138      	cbz	r0, 801606a <rcl_wait_set_clear+0x72>
 801605a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801605c:	2100      	movs	r1, #0
 801605e:	0092      	lsls	r2, r2, #2
 8016060:	f004 fa5e 	bl	801a520 <memset>
 8016064:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016066:	2200      	movs	r2, #0
 8016068:	631a      	str	r2, [r3, #48]	; 0x30
 801606a:	6920      	ldr	r0, [r4, #16]
 801606c:	b138      	cbz	r0, 801607e <rcl_wait_set_clear+0x86>
 801606e:	6962      	ldr	r2, [r4, #20]
 8016070:	2100      	movs	r1, #0
 8016072:	0092      	lsls	r2, r2, #2
 8016074:	f004 fa54 	bl	801a520 <memset>
 8016078:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801607a:	2200      	movs	r2, #0
 801607c:	641a      	str	r2, [r3, #64]	; 0x40
 801607e:	6898      	ldr	r0, [r3, #8]
 8016080:	b138      	cbz	r0, 8016092 <rcl_wait_set_clear+0x9a>
 8016082:	685a      	ldr	r2, [r3, #4]
 8016084:	2100      	movs	r1, #0
 8016086:	0092      	lsls	r2, r2, #2
 8016088:	f004 fa4a 	bl	801a520 <memset>
 801608c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801608e:	2200      	movs	r2, #0
 8016090:	605a      	str	r2, [r3, #4]
 8016092:	6958      	ldr	r0, [r3, #20]
 8016094:	b138      	cbz	r0, 80160a6 <rcl_wait_set_clear+0xae>
 8016096:	691a      	ldr	r2, [r3, #16]
 8016098:	2100      	movs	r1, #0
 801609a:	0092      	lsls	r2, r2, #2
 801609c:	f004 fa40 	bl	801a520 <memset>
 80160a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80160a2:	2200      	movs	r2, #0
 80160a4:	611a      	str	r2, [r3, #16]
 80160a6:	6a18      	ldr	r0, [r3, #32]
 80160a8:	b138      	cbz	r0, 80160ba <rcl_wait_set_clear+0xc2>
 80160aa:	69da      	ldr	r2, [r3, #28]
 80160ac:	2100      	movs	r1, #0
 80160ae:	0092      	lsls	r2, r2, #2
 80160b0:	f004 fa36 	bl	801a520 <memset>
 80160b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80160b6:	2200      	movs	r2, #0
 80160b8:	61da      	str	r2, [r3, #28]
 80160ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80160bc:	b138      	cbz	r0, 80160ce <rcl_wait_set_clear+0xd6>
 80160be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80160c0:	2100      	movs	r1, #0
 80160c2:	0092      	lsls	r2, r2, #2
 80160c4:	f004 fa2c 	bl	801a520 <memset>
 80160c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80160ca:	2200      	movs	r2, #0
 80160cc:	629a      	str	r2, [r3, #40]	; 0x28
 80160ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80160d0:	b138      	cbz	r0, 80160e2 <rcl_wait_set_clear+0xea>
 80160d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80160d4:	2100      	movs	r1, #0
 80160d6:	0092      	lsls	r2, r2, #2
 80160d8:	f004 fa22 	bl	801a520 <memset>
 80160dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80160de:	2000      	movs	r0, #0
 80160e0:	6358      	str	r0, [r3, #52]	; 0x34
 80160e2:	bd10      	pop	{r4, pc}
 80160e4:	200b      	movs	r0, #11
 80160e6:	4770      	bx	lr
 80160e8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80160ec:	bd10      	pop	{r4, pc}
 80160ee:	bf00      	nop

080160f0 <rcl_wait_set_resize>:
 80160f0:	2800      	cmp	r0, #0
 80160f2:	f000 81a6 	beq.w	8016442 <rcl_wait_set_resize+0x352>
 80160f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160fa:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 80160fe:	b083      	sub	sp, #12
 8016100:	4604      	mov	r4, r0
 8016102:	f1ba 0f00 	cmp.w	sl, #0
 8016106:	f000 819e 	beq.w	8016446 <rcl_wait_set_resize+0x356>
 801610a:	461e      	mov	r6, r3
 801610c:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8016110:	f04f 0800 	mov.w	r8, #0
 8016114:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 8016118:	9300      	str	r3, [sp, #0]
 801611a:	f8c0 8004 	str.w	r8, [r0, #4]
 801611e:	460f      	mov	r7, r1
 8016120:	4615      	mov	r5, r2
 8016122:	f8ca 8000 	str.w	r8, [sl]
 8016126:	2900      	cmp	r1, #0
 8016128:	f000 80c9 	beq.w	80162be <rcl_wait_set_resize+0x1ce>
 801612c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8016130:	6800      	ldr	r0, [r0, #0]
 8016132:	4651      	mov	r1, sl
 8016134:	464a      	mov	r2, r9
 8016136:	4798      	blx	r3
 8016138:	6020      	str	r0, [r4, #0]
 801613a:	2800      	cmp	r0, #0
 801613c:	f000 80d8 	beq.w	80162f0 <rcl_wait_set_resize+0x200>
 8016140:	4652      	mov	r2, sl
 8016142:	4641      	mov	r1, r8
 8016144:	f004 f9ec 	bl	801a520 <memset>
 8016148:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801614a:	6067      	str	r7, [r4, #4]
 801614c:	6898      	ldr	r0, [r3, #8]
 801614e:	f8c3 8004 	str.w	r8, [r3, #4]
 8016152:	9301      	str	r3, [sp, #4]
 8016154:	464a      	mov	r2, r9
 8016156:	9b00      	ldr	r3, [sp, #0]
 8016158:	4651      	mov	r1, sl
 801615a:	4798      	blx	r3
 801615c:	9b01      	ldr	r3, [sp, #4]
 801615e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016160:	6098      	str	r0, [r3, #8]
 8016162:	6897      	ldr	r7, [r2, #8]
 8016164:	2f00      	cmp	r7, #0
 8016166:	f000 80be 	beq.w	80162e6 <rcl_wait_set_resize+0x1f6>
 801616a:	4652      	mov	r2, sl
 801616c:	4641      	mov	r1, r8
 801616e:	4638      	mov	r0, r7
 8016170:	f004 f9d6 	bl	801a520 <memset>
 8016174:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016178:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801617c:	2700      	movs	r7, #0
 801617e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8016182:	60e7      	str	r7, [r4, #12]
 8016184:	f8ca 700c 	str.w	r7, [sl, #12]
 8016188:	2d00      	cmp	r5, #0
 801618a:	f040 80b5 	bne.w	80162f8 <rcl_wait_set_resize+0x208>
 801618e:	68a0      	ldr	r0, [r4, #8]
 8016190:	b130      	cbz	r0, 80161a0 <rcl_wait_set_resize+0xb0>
 8016192:	4641      	mov	r1, r8
 8016194:	4790      	blx	r2
 8016196:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801619a:	60a5      	str	r5, [r4, #8]
 801619c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80161a0:	2700      	movs	r7, #0
 80161a2:	19ad      	adds	r5, r5, r6
 80161a4:	f8ca 7010 	str.w	r7, [sl, #16]
 80161a8:	f040 80be 	bne.w	8016328 <rcl_wait_set_resize+0x238>
 80161ac:	f8da 0014 	ldr.w	r0, [sl, #20]
 80161b0:	b148      	cbz	r0, 80161c6 <rcl_wait_set_resize+0xd6>
 80161b2:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80161b6:	4641      	mov	r1, r8
 80161b8:	4798      	blx	r3
 80161ba:	f8ca 5014 	str.w	r5, [sl, #20]
 80161be:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80161c2:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80161c6:	2500      	movs	r5, #0
 80161c8:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80161cc:	6165      	str	r5, [r4, #20]
 80161ce:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 80161d2:	2e00      	cmp	r6, #0
 80161d4:	f040 80bf 	bne.w	8016356 <rcl_wait_set_resize+0x266>
 80161d8:	6920      	ldr	r0, [r4, #16]
 80161da:	b140      	cbz	r0, 80161ee <rcl_wait_set_resize+0xfe>
 80161dc:	4641      	mov	r1, r8
 80161de:	47c8      	blx	r9
 80161e0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80161e4:	6126      	str	r6, [r4, #16]
 80161e6:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80161ea:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80161ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161f0:	2500      	movs	r5, #0
 80161f2:	61e5      	str	r5, [r4, #28]
 80161f4:	f8ca 5018 	str.w	r5, [sl, #24]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	f040 80c1 	bne.w	8016380 <rcl_wait_set_resize+0x290>
 80161fe:	69a0      	ldr	r0, [r4, #24]
 8016200:	b128      	cbz	r0, 801620e <rcl_wait_set_resize+0x11e>
 8016202:	4641      	mov	r1, r8
 8016204:	47c8      	blx	r9
 8016206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016208:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801620c:	61a3      	str	r3, [r4, #24]
 801620e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016212:	b130      	cbz	r0, 8016222 <rcl_wait_set_resize+0x132>
 8016214:	4641      	mov	r1, r8
 8016216:	47c8      	blx	r9
 8016218:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801621c:	2300      	movs	r3, #0
 801621e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8016222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016224:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 8016228:	2600      	movs	r6, #0
 801622a:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 801622e:	6266      	str	r6, [r4, #36]	; 0x24
 8016230:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8016234:	2b00      	cmp	r3, #0
 8016236:	f000 80c8 	beq.w	80163ca <rcl_wait_set_resize+0x2da>
 801623a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801623e:	6a20      	ldr	r0, [r4, #32]
 8016240:	4651      	mov	r1, sl
 8016242:	463a      	mov	r2, r7
 8016244:	47c8      	blx	r9
 8016246:	6220      	str	r0, [r4, #32]
 8016248:	2800      	cmp	r0, #0
 801624a:	d051      	beq.n	80162f0 <rcl_wait_set_resize+0x200>
 801624c:	4652      	mov	r2, sl
 801624e:	4631      	mov	r1, r6
 8016250:	f004 f966 	bl	801a520 <memset>
 8016254:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016258:	6263      	str	r3, [r4, #36]	; 0x24
 801625a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801625c:	62ae      	str	r6, [r5, #40]	; 0x28
 801625e:	463a      	mov	r2, r7
 8016260:	4651      	mov	r1, sl
 8016262:	47c8      	blx	r9
 8016264:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016266:	62e8      	str	r0, [r5, #44]	; 0x2c
 8016268:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801626a:	2d00      	cmp	r5, #0
 801626c:	f000 8105 	beq.w	801647a <rcl_wait_set_resize+0x38a>
 8016270:	4652      	mov	r2, sl
 8016272:	4631      	mov	r1, r6
 8016274:	4628      	mov	r0, r5
 8016276:	f004 f953 	bl	801a520 <memset>
 801627a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801627e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016280:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8016284:	2500      	movs	r5, #0
 8016286:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 801628a:	62e5      	str	r5, [r4, #44]	; 0x2c
 801628c:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8016290:	2b00      	cmp	r3, #0
 8016292:	f040 80af 	bne.w	80163f4 <rcl_wait_set_resize+0x304>
 8016296:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016298:	b128      	cbz	r0, 80162a6 <rcl_wait_set_resize+0x1b6>
 801629a:	4631      	mov	r1, r6
 801629c:	47b8      	blx	r7
 801629e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162a0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80162a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80162a6:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80162aa:	b310      	cbz	r0, 80162f2 <rcl_wait_set_resize+0x202>
 80162ac:	4631      	mov	r1, r6
 80162ae:	47b8      	blx	r7
 80162b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162b2:	2000      	movs	r0, #0
 80162b4:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 80162b8:	b003      	add	sp, #12
 80162ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162be:	6800      	ldr	r0, [r0, #0]
 80162c0:	b120      	cbz	r0, 80162cc <rcl_wait_set_resize+0x1dc>
 80162c2:	4649      	mov	r1, r9
 80162c4:	47d8      	blx	fp
 80162c6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80162ca:	6027      	str	r7, [r4, #0]
 80162cc:	f8da 0008 	ldr.w	r0, [sl, #8]
 80162d0:	2800      	cmp	r0, #0
 80162d2:	f43f af51 	beq.w	8016178 <rcl_wait_set_resize+0x88>
 80162d6:	4649      	mov	r1, r9
 80162d8:	47d8      	blx	fp
 80162da:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80162de:	2300      	movs	r3, #0
 80162e0:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80162e4:	e748      	b.n	8016178 <rcl_wait_set_resize+0x88>
 80162e6:	6820      	ldr	r0, [r4, #0]
 80162e8:	4649      	mov	r1, r9
 80162ea:	47d8      	blx	fp
 80162ec:	e9c4 7700 	strd	r7, r7, [r4]
 80162f0:	200a      	movs	r0, #10
 80162f2:	b003      	add	sp, #12
 80162f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f8:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80162fc:	68a0      	ldr	r0, [r4, #8]
 80162fe:	4642      	mov	r2, r8
 8016300:	4649      	mov	r1, r9
 8016302:	4798      	blx	r3
 8016304:	60a0      	str	r0, [r4, #8]
 8016306:	2800      	cmp	r0, #0
 8016308:	d0f2      	beq.n	80162f0 <rcl_wait_set_resize+0x200>
 801630a:	4639      	mov	r1, r7
 801630c:	464a      	mov	r2, r9
 801630e:	f004 f907 	bl	801a520 <memset>
 8016312:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016316:	60e5      	str	r5, [r4, #12]
 8016318:	2700      	movs	r7, #0
 801631a:	19ad      	adds	r5, r5, r6
 801631c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016320:	f8ca 7010 	str.w	r7, [sl, #16]
 8016324:	f43f af42 	beq.w	80161ac <rcl_wait_set_resize+0xbc>
 8016328:	00ad      	lsls	r5, r5, #2
 801632a:	4642      	mov	r2, r8
 801632c:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8016330:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016334:	4629      	mov	r1, r5
 8016336:	4798      	blx	r3
 8016338:	4680      	mov	r8, r0
 801633a:	f8ca 0014 	str.w	r0, [sl, #20]
 801633e:	2800      	cmp	r0, #0
 8016340:	f000 8084 	beq.w	801644c <rcl_wait_set_resize+0x35c>
 8016344:	462a      	mov	r2, r5
 8016346:	4639      	mov	r1, r7
 8016348:	f004 f8ea 	bl	801a520 <memset>
 801634c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016350:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016354:	e737      	b.n	80161c6 <rcl_wait_set_resize+0xd6>
 8016356:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801635a:	6920      	ldr	r0, [r4, #16]
 801635c:	4642      	mov	r2, r8
 801635e:	4649      	mov	r1, r9
 8016360:	47b8      	blx	r7
 8016362:	6120      	str	r0, [r4, #16]
 8016364:	2800      	cmp	r0, #0
 8016366:	d0c3      	beq.n	80162f0 <rcl_wait_set_resize+0x200>
 8016368:	464a      	mov	r2, r9
 801636a:	4629      	mov	r1, r5
 801636c:	f004 f8d8 	bl	801a520 <memset>
 8016370:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016374:	6166      	str	r6, [r4, #20]
 8016376:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801637a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801637e:	e736      	b.n	80161ee <rcl_wait_set_resize+0xfe>
 8016380:	009e      	lsls	r6, r3, #2
 8016382:	69a0      	ldr	r0, [r4, #24]
 8016384:	4631      	mov	r1, r6
 8016386:	4642      	mov	r2, r8
 8016388:	47b8      	blx	r7
 801638a:	61a0      	str	r0, [r4, #24]
 801638c:	2800      	cmp	r0, #0
 801638e:	d0af      	beq.n	80162f0 <rcl_wait_set_resize+0x200>
 8016390:	4632      	mov	r2, r6
 8016392:	4629      	mov	r1, r5
 8016394:	f004 f8c4 	bl	801a520 <memset>
 8016398:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801639c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801639e:	61e3      	str	r3, [r4, #28]
 80163a0:	f8da 0020 	ldr.w	r0, [sl, #32]
 80163a4:	f8ca 501c 	str.w	r5, [sl, #28]
 80163a8:	4642      	mov	r2, r8
 80163aa:	4631      	mov	r1, r6
 80163ac:	47b8      	blx	r7
 80163ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163b0:	f8ca 0020 	str.w	r0, [sl, #32]
 80163b4:	6a1f      	ldr	r7, [r3, #32]
 80163b6:	2f00      	cmp	r7, #0
 80163b8:	d058      	beq.n	801646c <rcl_wait_set_resize+0x37c>
 80163ba:	4632      	mov	r2, r6
 80163bc:	4629      	mov	r1, r5
 80163be:	4638      	mov	r0, r7
 80163c0:	f004 f8ae 	bl	801a520 <memset>
 80163c4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80163c8:	e72b      	b.n	8016222 <rcl_wait_set_resize+0x132>
 80163ca:	6a20      	ldr	r0, [r4, #32]
 80163cc:	b128      	cbz	r0, 80163da <rcl_wait_set_resize+0x2ea>
 80163ce:	4639      	mov	r1, r7
 80163d0:	47c0      	blx	r8
 80163d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80163d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80163d8:	6223      	str	r3, [r4, #32]
 80163da:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 80163de:	2800      	cmp	r0, #0
 80163e0:	f43f af4d 	beq.w	801627e <rcl_wait_set_resize+0x18e>
 80163e4:	4639      	mov	r1, r7
 80163e6:	47c0      	blx	r8
 80163e8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80163ec:	2300      	movs	r3, #0
 80163ee:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 80163f2:	e744      	b.n	801627e <rcl_wait_set_resize+0x18e>
 80163f4:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80163f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80163fa:	4641      	mov	r1, r8
 80163fc:	4632      	mov	r2, r6
 80163fe:	47c8      	blx	r9
 8016400:	62a0      	str	r0, [r4, #40]	; 0x28
 8016402:	2800      	cmp	r0, #0
 8016404:	f43f af74 	beq.w	80162f0 <rcl_wait_set_resize+0x200>
 8016408:	4642      	mov	r2, r8
 801640a:	4629      	mov	r1, r5
 801640c:	f004 f888 	bl	801a520 <memset>
 8016410:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016416:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016418:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801641c:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8016420:	4632      	mov	r2, r6
 8016422:	4641      	mov	r1, r8
 8016424:	47c8      	blx	r9
 8016426:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016428:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801642e:	b35b      	cbz	r3, 8016488 <rcl_wait_set_resize+0x398>
 8016430:	4642      	mov	r2, r8
 8016432:	4618      	mov	r0, r3
 8016434:	4629      	mov	r1, r5
 8016436:	f004 f873 	bl	801a520 <memset>
 801643a:	4628      	mov	r0, r5
 801643c:	b003      	add	sp, #12
 801643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016442:	200b      	movs	r0, #11
 8016444:	4770      	bx	lr
 8016446:	f44f 7061 	mov.w	r0, #900	; 0x384
 801644a:	e752      	b.n	80162f2 <rcl_wait_set_resize+0x202>
 801644c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801644e:	68a0      	ldr	r0, [r4, #8]
 8016450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016452:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8016454:	4790      	blx	r2
 8016456:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016458:	6920      	ldr	r0, [r4, #16]
 801645a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801645c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801645e:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8016462:	4790      	blx	r2
 8016464:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8016468:	200a      	movs	r0, #10
 801646a:	e742      	b.n	80162f2 <rcl_wait_set_resize+0x202>
 801646c:	69a0      	ldr	r0, [r4, #24]
 801646e:	4641      	mov	r1, r8
 8016470:	47c8      	blx	r9
 8016472:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8016476:	200a      	movs	r0, #10
 8016478:	e73b      	b.n	80162f2 <rcl_wait_set_resize+0x202>
 801647a:	6a20      	ldr	r0, [r4, #32]
 801647c:	4639      	mov	r1, r7
 801647e:	47c0      	blx	r8
 8016480:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8016484:	200a      	movs	r0, #10
 8016486:	e734      	b.n	80162f2 <rcl_wait_set_resize+0x202>
 8016488:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801648a:	9300      	str	r3, [sp, #0]
 801648c:	4631      	mov	r1, r6
 801648e:	47b8      	blx	r7
 8016490:	9b00      	ldr	r3, [sp, #0]
 8016492:	200a      	movs	r0, #10
 8016494:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8016498:	e72b      	b.n	80162f2 <rcl_wait_set_resize+0x202>
 801649a:	bf00      	nop

0801649c <rcl_wait_set_init>:
 801649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164a0:	b084      	sub	sp, #16
 80164a2:	4604      	mov	r4, r0
 80164a4:	a810      	add	r0, sp, #64	; 0x40
 80164a6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80164aa:	460f      	mov	r7, r1
 80164ac:	4690      	mov	r8, r2
 80164ae:	4699      	mov	r9, r3
 80164b0:	f7f9 f932 	bl	800f718 <rcutils_allocator_is_valid>
 80164b4:	2800      	cmp	r0, #0
 80164b6:	d06b      	beq.n	8016590 <rcl_wait_set_init+0xf4>
 80164b8:	2c00      	cmp	r4, #0
 80164ba:	d069      	beq.n	8016590 <rcl_wait_set_init+0xf4>
 80164bc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80164be:	b125      	cbz	r5, 80164ca <rcl_wait_set_init+0x2e>
 80164c0:	2564      	movs	r5, #100	; 0x64
 80164c2:	4628      	mov	r0, r5
 80164c4:	b004      	add	sp, #16
 80164c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164ca:	f1ba 0f00 	cmp.w	sl, #0
 80164ce:	d05f      	beq.n	8016590 <rcl_wait_set_init+0xf4>
 80164d0:	4650      	mov	r0, sl
 80164d2:	f7fe fa6b 	bl	80149ac <rcl_context_is_valid>
 80164d6:	2800      	cmp	r0, #0
 80164d8:	d067      	beq.n	80165aa <rcl_wait_set_init+0x10e>
 80164da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80164dc:	9914      	ldr	r1, [sp, #80]	; 0x50
 80164de:	205c      	movs	r0, #92	; 0x5c
 80164e0:	4798      	blx	r3
 80164e2:	6320      	str	r0, [r4, #48]	; 0x30
 80164e4:	2800      	cmp	r0, #0
 80164e6:	d062      	beq.n	80165ae <rcl_wait_set_init+0x112>
 80164e8:	225c      	movs	r2, #92	; 0x5c
 80164ea:	4629      	mov	r1, r5
 80164ec:	f004 f818 	bl	801a520 <memset>
 80164f0:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80164f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80164f8:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80164fa:	f8dc e000 	ldr.w	lr, [ip]
 80164fe:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8016502:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 8016506:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801650a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801650e:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8016512:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8016516:	60b5      	str	r5, [r6, #8]
 8016518:	6075      	str	r5, [r6, #4]
 801651a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801651e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8016522:	1899      	adds	r1, r3, r2
 8016524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016526:	f8da 0000 	ldr.w	r0, [sl]
 801652a:	f8cc e000 	str.w	lr, [ip]
 801652e:	4419      	add	r1, r3
 8016530:	4441      	add	r1, r8
 8016532:	3028      	adds	r0, #40	; 0x28
 8016534:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8016538:	f001 fc9a 	bl	8017e70 <rmw_create_wait_set>
 801653c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801653e:	63f0      	str	r0, [r6, #60]	; 0x3c
 8016540:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8016542:	b350      	cbz	r0, 801659a <rcl_wait_set_init+0xfe>
 8016544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016546:	9302      	str	r3, [sp, #8]
 8016548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801654a:	9301      	str	r3, [sp, #4]
 801654c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801654e:	9300      	str	r3, [sp, #0]
 8016550:	4642      	mov	r2, r8
 8016552:	464b      	mov	r3, r9
 8016554:	4639      	mov	r1, r7
 8016556:	4620      	mov	r0, r4
 8016558:	f7ff fdca 	bl	80160f0 <rcl_wait_set_resize>
 801655c:	4605      	mov	r5, r0
 801655e:	2800      	cmp	r0, #0
 8016560:	d0af      	beq.n	80164c2 <rcl_wait_set_init+0x26>
 8016562:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016564:	bb2b      	cbnz	r3, 80165b2 <rcl_wait_set_init+0x116>
 8016566:	2600      	movs	r6, #0
 8016568:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801656c:	9600      	str	r6, [sp, #0]
 801656e:	4633      	mov	r3, r6
 8016570:	4632      	mov	r2, r6
 8016572:	4631      	mov	r1, r6
 8016574:	4620      	mov	r0, r4
 8016576:	f7ff fdbb 	bl	80160f0 <rcl_wait_set_resize>
 801657a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801657c:	2800      	cmp	r0, #0
 801657e:	d0a0      	beq.n	80164c2 <rcl_wait_set_init+0x26>
 8016580:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016582:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8016584:	4798      	blx	r3
 8016586:	4628      	mov	r0, r5
 8016588:	6326      	str	r6, [r4, #48]	; 0x30
 801658a:	b004      	add	sp, #16
 801658c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016590:	250b      	movs	r5, #11
 8016592:	4628      	mov	r0, r5
 8016594:	b004      	add	sp, #16
 8016596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801659a:	2501      	movs	r5, #1
 801659c:	f001 fc72 	bl	8017e84 <rmw_destroy_wait_set>
 80165a0:	2800      	cmp	r0, #0
 80165a2:	bf18      	it	ne
 80165a4:	f44f 7561 	movne.w	r5, #900	; 0x384
 80165a8:	e7dd      	b.n	8016566 <rcl_wait_set_init+0xca>
 80165aa:	2565      	movs	r5, #101	; 0x65
 80165ac:	e789      	b.n	80164c2 <rcl_wait_set_init+0x26>
 80165ae:	250a      	movs	r5, #10
 80165b0:	e787      	b.n	80164c2 <rcl_wait_set_init+0x26>
 80165b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80165b4:	e7f2      	b.n	801659c <rcl_wait_set_init+0x100>
 80165b6:	bf00      	nop

080165b8 <rcl_wait_set_add_guard_condition>:
 80165b8:	b320      	cbz	r0, 8016604 <rcl_wait_set_add_guard_condition+0x4c>
 80165ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80165bc:	b570      	push	{r4, r5, r6, lr}
 80165be:	4604      	mov	r4, r0
 80165c0:	b1d3      	cbz	r3, 80165f8 <rcl_wait_set_add_guard_condition+0x40>
 80165c2:	b319      	cbz	r1, 801660c <rcl_wait_set_add_guard_condition+0x54>
 80165c4:	68dd      	ldr	r5, [r3, #12]
 80165c6:	68e0      	ldr	r0, [r4, #12]
 80165c8:	4285      	cmp	r5, r0
 80165ca:	d218      	bcs.n	80165fe <rcl_wait_set_add_guard_condition+0x46>
 80165cc:	68a0      	ldr	r0, [r4, #8]
 80165ce:	1c6e      	adds	r6, r5, #1
 80165d0:	60de      	str	r6, [r3, #12]
 80165d2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80165d6:	b102      	cbz	r2, 80165da <rcl_wait_set_add_guard_condition+0x22>
 80165d8:	6015      	str	r5, [r2, #0]
 80165da:	4608      	mov	r0, r1
 80165dc:	f003 f96a 	bl	80198b4 <rcl_guard_condition_get_rmw_handle>
 80165e0:	b190      	cbz	r0, 8016608 <rcl_wait_set_add_guard_condition+0x50>
 80165e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80165e4:	6842      	ldr	r2, [r0, #4]
 80165e6:	695b      	ldr	r3, [r3, #20]
 80165e8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80165ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80165ee:	6913      	ldr	r3, [r2, #16]
 80165f0:	3301      	adds	r3, #1
 80165f2:	6113      	str	r3, [r2, #16]
 80165f4:	2000      	movs	r0, #0
 80165f6:	bd70      	pop	{r4, r5, r6, pc}
 80165f8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80165fc:	bd70      	pop	{r4, r5, r6, pc}
 80165fe:	f240 3086 	movw	r0, #902	; 0x386
 8016602:	bd70      	pop	{r4, r5, r6, pc}
 8016604:	200b      	movs	r0, #11
 8016606:	4770      	bx	lr
 8016608:	2001      	movs	r0, #1
 801660a:	bd70      	pop	{r4, r5, r6, pc}
 801660c:	200b      	movs	r0, #11
 801660e:	bd70      	pop	{r4, r5, r6, pc}

08016610 <rcl_wait_set_add_timer>:
 8016610:	b340      	cbz	r0, 8016664 <rcl_wait_set_add_timer+0x54>
 8016612:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016614:	b570      	push	{r4, r5, r6, lr}
 8016616:	4604      	mov	r4, r0
 8016618:	b1f3      	cbz	r3, 8016658 <rcl_wait_set_add_timer+0x48>
 801661a:	b329      	cbz	r1, 8016668 <rcl_wait_set_add_timer+0x58>
 801661c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801661e:	6965      	ldr	r5, [r4, #20]
 8016620:	42a8      	cmp	r0, r5
 8016622:	d21c      	bcs.n	801665e <rcl_wait_set_add_timer+0x4e>
 8016624:	6925      	ldr	r5, [r4, #16]
 8016626:	1c46      	adds	r6, r0, #1
 8016628:	641e      	str	r6, [r3, #64]	; 0x40
 801662a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801662e:	b102      	cbz	r2, 8016632 <rcl_wait_set_add_timer+0x22>
 8016630:	6010      	str	r0, [r2, #0]
 8016632:	4608      	mov	r0, r1
 8016634:	f7ff faa4 	bl	8015b80 <rcl_timer_get_guard_condition>
 8016638:	b168      	cbz	r0, 8016656 <rcl_wait_set_add_timer+0x46>
 801663a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801663c:	68e3      	ldr	r3, [r4, #12]
 801663e:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8016640:	3b01      	subs	r3, #1
 8016642:	441d      	add	r5, r3
 8016644:	f003 f936 	bl	80198b4 <rcl_guard_condition_get_rmw_handle>
 8016648:	b180      	cbz	r0, 801666c <rcl_wait_set_add_timer+0x5c>
 801664a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801664c:	6842      	ldr	r2, [r0, #4]
 801664e:	695b      	ldr	r3, [r3, #20]
 8016650:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016654:	2000      	movs	r0, #0
 8016656:	bd70      	pop	{r4, r5, r6, pc}
 8016658:	f44f 7061 	mov.w	r0, #900	; 0x384
 801665c:	bd70      	pop	{r4, r5, r6, pc}
 801665e:	f240 3086 	movw	r0, #902	; 0x386
 8016662:	bd70      	pop	{r4, r5, r6, pc}
 8016664:	200b      	movs	r0, #11
 8016666:	4770      	bx	lr
 8016668:	200b      	movs	r0, #11
 801666a:	bd70      	pop	{r4, r5, r6, pc}
 801666c:	2001      	movs	r0, #1
 801666e:	bd70      	pop	{r4, r5, r6, pc}

08016670 <rcl_wait_set_add_client>:
 8016670:	b320      	cbz	r0, 80166bc <rcl_wait_set_add_client+0x4c>
 8016672:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016674:	b570      	push	{r4, r5, r6, lr}
 8016676:	4604      	mov	r4, r0
 8016678:	b1d3      	cbz	r3, 80166b0 <rcl_wait_set_add_client+0x40>
 801667a:	b319      	cbz	r1, 80166c4 <rcl_wait_set_add_client+0x54>
 801667c:	699d      	ldr	r5, [r3, #24]
 801667e:	69e0      	ldr	r0, [r4, #28]
 8016680:	4285      	cmp	r5, r0
 8016682:	d218      	bcs.n	80166b6 <rcl_wait_set_add_client+0x46>
 8016684:	69a0      	ldr	r0, [r4, #24]
 8016686:	1c6e      	adds	r6, r5, #1
 8016688:	619e      	str	r6, [r3, #24]
 801668a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801668e:	b102      	cbz	r2, 8016692 <rcl_wait_set_add_client+0x22>
 8016690:	6015      	str	r5, [r2, #0]
 8016692:	4608      	mov	r0, r1
 8016694:	f7fe f92a 	bl	80148ec <rcl_client_get_rmw_handle>
 8016698:	b190      	cbz	r0, 80166c0 <rcl_wait_set_add_client+0x50>
 801669a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801669c:	6842      	ldr	r2, [r0, #4]
 801669e:	6a1b      	ldr	r3, [r3, #32]
 80166a0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80166a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80166a6:	69d3      	ldr	r3, [r2, #28]
 80166a8:	3301      	adds	r3, #1
 80166aa:	61d3      	str	r3, [r2, #28]
 80166ac:	2000      	movs	r0, #0
 80166ae:	bd70      	pop	{r4, r5, r6, pc}
 80166b0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80166b4:	bd70      	pop	{r4, r5, r6, pc}
 80166b6:	f240 3086 	movw	r0, #902	; 0x386
 80166ba:	bd70      	pop	{r4, r5, r6, pc}
 80166bc:	200b      	movs	r0, #11
 80166be:	4770      	bx	lr
 80166c0:	2001      	movs	r0, #1
 80166c2:	bd70      	pop	{r4, r5, r6, pc}
 80166c4:	200b      	movs	r0, #11
 80166c6:	bd70      	pop	{r4, r5, r6, pc}

080166c8 <rcl_wait_set_add_service>:
 80166c8:	b320      	cbz	r0, 8016714 <rcl_wait_set_add_service+0x4c>
 80166ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80166cc:	b570      	push	{r4, r5, r6, lr}
 80166ce:	4604      	mov	r4, r0
 80166d0:	b1d3      	cbz	r3, 8016708 <rcl_wait_set_add_service+0x40>
 80166d2:	b319      	cbz	r1, 801671c <rcl_wait_set_add_service+0x54>
 80166d4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80166d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80166d8:	4285      	cmp	r5, r0
 80166da:	d218      	bcs.n	801670e <rcl_wait_set_add_service+0x46>
 80166dc:	6a20      	ldr	r0, [r4, #32]
 80166de:	1c6e      	adds	r6, r5, #1
 80166e0:	625e      	str	r6, [r3, #36]	; 0x24
 80166e2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80166e6:	b102      	cbz	r2, 80166ea <rcl_wait_set_add_service+0x22>
 80166e8:	6015      	str	r5, [r2, #0]
 80166ea:	4608      	mov	r0, r1
 80166ec:	f7ff f84e 	bl	801578c <rcl_service_get_rmw_handle>
 80166f0:	b190      	cbz	r0, 8016718 <rcl_wait_set_add_service+0x50>
 80166f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80166f4:	6842      	ldr	r2, [r0, #4]
 80166f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166f8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80166fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80166fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8016700:	3301      	adds	r3, #1
 8016702:	6293      	str	r3, [r2, #40]	; 0x28
 8016704:	2000      	movs	r0, #0
 8016706:	bd70      	pop	{r4, r5, r6, pc}
 8016708:	f44f 7061 	mov.w	r0, #900	; 0x384
 801670c:	bd70      	pop	{r4, r5, r6, pc}
 801670e:	f240 3086 	movw	r0, #902	; 0x386
 8016712:	bd70      	pop	{r4, r5, r6, pc}
 8016714:	200b      	movs	r0, #11
 8016716:	4770      	bx	lr
 8016718:	2001      	movs	r0, #1
 801671a:	bd70      	pop	{r4, r5, r6, pc}
 801671c:	200b      	movs	r0, #11
 801671e:	bd70      	pop	{r4, r5, r6, pc}

08016720 <rcl_wait>:
 8016720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016724:	b08f      	sub	sp, #60	; 0x3c
 8016726:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801672a:	2800      	cmp	r0, #0
 801672c:	f000 814c 	beq.w	80169c8 <rcl_wait+0x2a8>
 8016730:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8016732:	4604      	mov	r4, r0
 8016734:	2d00      	cmp	r5, #0
 8016736:	f000 80bc 	beq.w	80168b2 <rcl_wait+0x192>
 801673a:	6843      	ldr	r3, [r0, #4]
 801673c:	b973      	cbnz	r3, 801675c <rcl_wait+0x3c>
 801673e:	68e3      	ldr	r3, [r4, #12]
 8016740:	b963      	cbnz	r3, 801675c <rcl_wait+0x3c>
 8016742:	6963      	ldr	r3, [r4, #20]
 8016744:	b953      	cbnz	r3, 801675c <rcl_wait+0x3c>
 8016746:	69e3      	ldr	r3, [r4, #28]
 8016748:	b943      	cbnz	r3, 801675c <rcl_wait+0x3c>
 801674a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801674c:	b933      	cbnz	r3, 801675c <rcl_wait+0x3c>
 801674e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016750:	b923      	cbnz	r3, 801675c <rcl_wait+0x3c>
 8016752:	f240 3085 	movw	r0, #901	; 0x385
 8016756:	b00f      	add	sp, #60	; 0x3c
 8016758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801675c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016760:	2a01      	cmp	r2, #1
 8016762:	f173 0300 	sbcs.w	r3, r3, #0
 8016766:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8016768:	db56      	blt.n	8016818 <rcl_wait+0xf8>
 801676a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 801676e:	2900      	cmp	r1, #0
 8016770:	f000 8149 	beq.w	8016a06 <rcl_wait+0x2e6>
 8016774:	2300      	movs	r3, #0
 8016776:	9307      	str	r3, [sp, #28]
 8016778:	469b      	mov	fp, r3
 801677a:	f04f 0800 	mov.w	r8, #0
 801677e:	f04f 0900 	mov.w	r9, #0
 8016782:	e00d      	b.n	80167a0 <rcl_wait+0x80>
 8016784:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016786:	6922      	ldr	r2, [r4, #16]
 8016788:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801678a:	f842 000a 	str.w	r0, [r2, sl]
 801678e:	f118 0801 	adds.w	r8, r8, #1
 8016792:	f149 0900 	adc.w	r9, r9, #0
 8016796:	2300      	movs	r3, #0
 8016798:	4599      	cmp	r9, r3
 801679a:	bf08      	it	eq
 801679c:	4588      	cmpeq	r8, r1
 801679e:	d243      	bcs.n	8016828 <rcl_wait+0x108>
 80167a0:	6922      	ldr	r2, [r4, #16]
 80167a2:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80167a6:	f852 000a 	ldr.w	r0, [r2, sl]
 80167aa:	2800      	cmp	r0, #0
 80167ac:	d0ef      	beq.n	801678e <rcl_wait+0x6e>
 80167ae:	68e2      	ldr	r2, [r4, #12]
 80167b0:	6969      	ldr	r1, [r5, #20]
 80167b2:	4442      	add	r2, r8
 80167b4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80167b8:	b13b      	cbz	r3, 80167ca <rcl_wait+0xaa>
 80167ba:	692a      	ldr	r2, [r5, #16]
 80167bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80167c0:	6921      	ldr	r1, [r4, #16]
 80167c2:	3201      	adds	r2, #1
 80167c4:	f851 000a 	ldr.w	r0, [r1, sl]
 80167c8:	612a      	str	r2, [r5, #16]
 80167ca:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80167ce:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 80167d2:	f7ff f9c3 	bl	8015b5c <rcl_timer_is_canceled>
 80167d6:	2800      	cmp	r0, #0
 80167d8:	d1bd      	bne.n	8016756 <rcl_wait+0x36>
 80167da:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80167de:	2a00      	cmp	r2, #0
 80167e0:	d1d0      	bne.n	8016784 <rcl_wait+0x64>
 80167e2:	6922      	ldr	r2, [r4, #16]
 80167e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80167e8:	f852 000a 	ldr.w	r0, [r2, sl]
 80167ec:	a90a      	add	r1, sp, #40	; 0x28
 80167ee:	f04f 32ff 	mov.w	r2, #4294967295
 80167f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80167f6:	f7ff f98d 	bl	8015b14 <rcl_timer_get_time_until_next_call>
 80167fa:	2800      	cmp	r0, #0
 80167fc:	d1ab      	bne.n	8016756 <rcl_wait+0x36>
 80167fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016802:	42b2      	cmp	r2, r6
 8016804:	eb73 0107 	sbcs.w	r1, r3, r7
 8016808:	da03      	bge.n	8016812 <rcl_wait+0xf2>
 801680a:	461f      	mov	r7, r3
 801680c:	2301      	movs	r3, #1
 801680e:	4616      	mov	r6, r2
 8016810:	9307      	str	r3, [sp, #28]
 8016812:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016814:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8016816:	e7ba      	b.n	801678e <rcl_wait+0x6e>
 8016818:	2900      	cmp	r1, #0
 801681a:	f000 80de 	beq.w	80169da <rcl_wait+0x2ba>
 801681e:	f04f 36ff 	mov.w	r6, #4294967295
 8016822:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016826:	e7a5      	b.n	8016774 <rcl_wait+0x54>
 8016828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801682c:	4313      	orrs	r3, r2
 801682e:	d145      	bne.n	80168bc <rcl_wait+0x19c>
 8016830:	2300      	movs	r3, #0
 8016832:	2200      	movs	r2, #0
 8016834:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016838:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801683c:	ab0a      	add	r3, sp, #40	; 0x28
 801683e:	9302      	str	r3, [sp, #8]
 8016840:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8016842:	9301      	str	r3, [sp, #4]
 8016844:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8016848:	9300      	str	r3, [sp, #0]
 801684a:	f105 0228 	add.w	r2, r5, #40	; 0x28
 801684e:	f105 031c 	add.w	r3, r5, #28
 8016852:	f105 0110 	add.w	r1, r5, #16
 8016856:	1d28      	adds	r0, r5, #4
 8016858:	f001 f98a 	bl	8017b70 <rmw_wait>
 801685c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801685e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016860:	4680      	mov	r8, r0
 8016862:	b30a      	cbz	r2, 80168a8 <rcl_wait+0x188>
 8016864:	2500      	movs	r5, #0
 8016866:	462f      	mov	r7, r5
 8016868:	e004      	b.n	8016874 <rcl_wait+0x154>
 801686a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801686c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801686e:	3501      	adds	r5, #1
 8016870:	42aa      	cmp	r2, r5
 8016872:	d919      	bls.n	80168a8 <rcl_wait+0x188>
 8016874:	6922      	ldr	r2, [r4, #16]
 8016876:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801687a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 801687e:	00ae      	lsls	r6, r5, #2
 8016880:	2800      	cmp	r0, #0
 8016882:	d0f3      	beq.n	801686c <rcl_wait+0x14c>
 8016884:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8016888:	f7ff f90c 	bl	8015aa4 <rcl_timer_is_ready>
 801688c:	2800      	cmp	r0, #0
 801688e:	f47f af62 	bne.w	8016756 <rcl_wait+0x36>
 8016892:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8016896:	2a00      	cmp	r2, #0
 8016898:	d1e7      	bne.n	801686a <rcl_wait+0x14a>
 801689a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801689c:	6921      	ldr	r1, [r4, #16]
 801689e:	518a      	str	r2, [r1, r6]
 80168a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80168a2:	3501      	adds	r5, #1
 80168a4:	42aa      	cmp	r2, r5
 80168a6:	d8e5      	bhi.n	8016874 <rcl_wait+0x154>
 80168a8:	f038 0002 	bics.w	r0, r8, #2
 80168ac:	d029      	beq.n	8016902 <rcl_wait+0x1e2>
 80168ae:	2001      	movs	r0, #1
 80168b0:	e751      	b.n	8016756 <rcl_wait+0x36>
 80168b2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80168b6:	b00f      	add	sp, #60	; 0x3c
 80168b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80168c0:	2a01      	cmp	r2, #1
 80168c2:	f173 0300 	sbcs.w	r3, r3, #0
 80168c6:	f2c0 8083 	blt.w	80169d0 <rcl_wait+0x2b0>
 80168ca:	2e00      	cmp	r6, #0
 80168cc:	f177 0300 	sbcs.w	r3, r7, #0
 80168d0:	bfbc      	itt	lt
 80168d2:	2600      	movlt	r6, #0
 80168d4:	2700      	movlt	r7, #0
 80168d6:	a34e      	add	r3, pc, #312	; (adr r3, 8016a10 <rcl_wait+0x2f0>)
 80168d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168dc:	4630      	mov	r0, r6
 80168de:	4639      	mov	r1, r7
 80168e0:	f7ea f98c 	bl	8000bfc <__aeabi_ldivmod>
 80168e4:	a34a      	add	r3, pc, #296	; (adr r3, 8016a10 <rcl_wait+0x2f0>)
 80168e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ea:	4680      	mov	r8, r0
 80168ec:	4689      	mov	r9, r1
 80168ee:	4630      	mov	r0, r6
 80168f0:	4639      	mov	r1, r7
 80168f2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80168f6:	f7ea f981 	bl	8000bfc <__aeabi_ldivmod>
 80168fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80168fe:	ab0a      	add	r3, sp, #40	; 0x28
 8016900:	e79d      	b.n	801683e <rcl_wait+0x11e>
 8016902:	6866      	ldr	r6, [r4, #4]
 8016904:	4602      	mov	r2, r0
 8016906:	b91e      	cbnz	r6, 8016910 <rcl_wait+0x1f0>
 8016908:	e00d      	b.n	8016926 <rcl_wait+0x206>
 801690a:	3201      	adds	r2, #1
 801690c:	42b2      	cmp	r2, r6
 801690e:	d00a      	beq.n	8016926 <rcl_wait+0x206>
 8016910:	6899      	ldr	r1, [r3, #8]
 8016912:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016916:	2900      	cmp	r1, #0
 8016918:	d1f7      	bne.n	801690a <rcl_wait+0x1ea>
 801691a:	6825      	ldr	r5, [r4, #0]
 801691c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016920:	3201      	adds	r2, #1
 8016922:	42b2      	cmp	r2, r6
 8016924:	d1f4      	bne.n	8016910 <rcl_wait+0x1f0>
 8016926:	68e6      	ldr	r6, [r4, #12]
 8016928:	2200      	movs	r2, #0
 801692a:	b91e      	cbnz	r6, 8016934 <rcl_wait+0x214>
 801692c:	e00d      	b.n	801694a <rcl_wait+0x22a>
 801692e:	3201      	adds	r2, #1
 8016930:	42b2      	cmp	r2, r6
 8016932:	d00a      	beq.n	801694a <rcl_wait+0x22a>
 8016934:	6959      	ldr	r1, [r3, #20]
 8016936:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801693a:	2900      	cmp	r1, #0
 801693c:	d1f7      	bne.n	801692e <rcl_wait+0x20e>
 801693e:	68a5      	ldr	r5, [r4, #8]
 8016940:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016944:	3201      	adds	r2, #1
 8016946:	42b2      	cmp	r2, r6
 8016948:	d1f4      	bne.n	8016934 <rcl_wait+0x214>
 801694a:	69e6      	ldr	r6, [r4, #28]
 801694c:	2200      	movs	r2, #0
 801694e:	b91e      	cbnz	r6, 8016958 <rcl_wait+0x238>
 8016950:	e00d      	b.n	801696e <rcl_wait+0x24e>
 8016952:	3201      	adds	r2, #1
 8016954:	42b2      	cmp	r2, r6
 8016956:	d00a      	beq.n	801696e <rcl_wait+0x24e>
 8016958:	6a19      	ldr	r1, [r3, #32]
 801695a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801695e:	2900      	cmp	r1, #0
 8016960:	d1f7      	bne.n	8016952 <rcl_wait+0x232>
 8016962:	69a5      	ldr	r5, [r4, #24]
 8016964:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016968:	3201      	adds	r2, #1
 801696a:	42b2      	cmp	r2, r6
 801696c:	d1f4      	bne.n	8016958 <rcl_wait+0x238>
 801696e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016970:	2200      	movs	r2, #0
 8016972:	b91e      	cbnz	r6, 801697c <rcl_wait+0x25c>
 8016974:	e00d      	b.n	8016992 <rcl_wait+0x272>
 8016976:	3201      	adds	r2, #1
 8016978:	4296      	cmp	r6, r2
 801697a:	d00a      	beq.n	8016992 <rcl_wait+0x272>
 801697c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801697e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016982:	2900      	cmp	r1, #0
 8016984:	d1f7      	bne.n	8016976 <rcl_wait+0x256>
 8016986:	6a25      	ldr	r5, [r4, #32]
 8016988:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801698c:	3201      	adds	r2, #1
 801698e:	4296      	cmp	r6, r2
 8016990:	d1f4      	bne.n	801697c <rcl_wait+0x25c>
 8016992:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016994:	2200      	movs	r2, #0
 8016996:	b91e      	cbnz	r6, 80169a0 <rcl_wait+0x280>
 8016998:	e00d      	b.n	80169b6 <rcl_wait+0x296>
 801699a:	3201      	adds	r2, #1
 801699c:	42b2      	cmp	r2, r6
 801699e:	d00a      	beq.n	80169b6 <rcl_wait+0x296>
 80169a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80169a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80169a6:	2900      	cmp	r1, #0
 80169a8:	d1f7      	bne.n	801699a <rcl_wait+0x27a>
 80169aa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80169ac:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80169b0:	3201      	adds	r2, #1
 80169b2:	42b2      	cmp	r2, r6
 80169b4:	d1f4      	bne.n	80169a0 <rcl_wait+0x280>
 80169b6:	f1b8 0f02 	cmp.w	r8, #2
 80169ba:	f47f aecc 	bne.w	8016756 <rcl_wait+0x36>
 80169be:	9b07      	ldr	r3, [sp, #28]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	bf08      	it	eq
 80169c4:	2002      	moveq	r0, #2
 80169c6:	e6c6      	b.n	8016756 <rcl_wait+0x36>
 80169c8:	200b      	movs	r0, #11
 80169ca:	b00f      	add	sp, #60	; 0x3c
 80169cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169d0:	9b07      	ldr	r3, [sp, #28]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	f47f af79 	bne.w	80168ca <rcl_wait+0x1aa>
 80169d8:	e731      	b.n	801683e <rcl_wait+0x11e>
 80169da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80169de:	4313      	orrs	r3, r2
 80169e0:	bf08      	it	eq
 80169e2:	9107      	streq	r1, [sp, #28]
 80169e4:	f43f af24 	beq.w	8016830 <rcl_wait+0x110>
 80169e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80169ec:	f04f 36ff 	mov.w	r6, #4294967295
 80169f0:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80169f4:	2a01      	cmp	r2, #1
 80169f6:	f173 0300 	sbcs.w	r3, r3, #0
 80169fa:	f04f 0300 	mov.w	r3, #0
 80169fe:	9307      	str	r3, [sp, #28]
 8016a00:	f6bf af63 	bge.w	80168ca <rcl_wait+0x1aa>
 8016a04:	e71b      	b.n	801683e <rcl_wait+0x11e>
 8016a06:	4632      	mov	r2, r6
 8016a08:	463b      	mov	r3, r7
 8016a0a:	e7f3      	b.n	80169f4 <rcl_wait+0x2d4>
 8016a0c:	f3af 8000 	nop.w
 8016a10:	3b9aca00 	.word	0x3b9aca00
 8016a14:	00000000 	.word	0x00000000

08016a18 <__atomic_load_8>:
 8016a18:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016a1c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8016a20:	4b14      	ldr	r3, [pc, #80]	; (8016a74 <__atomic_load_8+0x5c>)
 8016a22:	4a15      	ldr	r2, [pc, #84]	; (8016a78 <__atomic_load_8+0x60>)
 8016a24:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016a28:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016a2c:	fb03 f301 	mul.w	r3, r3, r1
 8016a30:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8016a34:	fba2 1203 	umull	r1, r2, r2, r3
 8016a38:	0912      	lsrs	r2, r2, #4
 8016a3a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8016a3e:	b430      	push	{r4, r5}
 8016a40:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8016a44:	4c0d      	ldr	r4, [pc, #52]	; (8016a7c <__atomic_load_8+0x64>)
 8016a46:	1a9b      	subs	r3, r3, r2
 8016a48:	18e1      	adds	r1, r4, r3
 8016a4a:	f04f 0501 	mov.w	r5, #1
 8016a4e:	e8d1 2f4f 	ldrexb	r2, [r1]
 8016a52:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8016a56:	f1bc 0f00 	cmp.w	ip, #0
 8016a5a:	d1f8      	bne.n	8016a4e <__atomic_load_8+0x36>
 8016a5c:	f3bf 8f5b 	dmb	ish
 8016a60:	b2d2      	uxtb	r2, r2
 8016a62:	2a00      	cmp	r2, #0
 8016a64:	d1f3      	bne.n	8016a4e <__atomic_load_8+0x36>
 8016a66:	e9d0 0100 	ldrd	r0, r1, [r0]
 8016a6a:	f3bf 8f5b 	dmb	ish
 8016a6e:	54e2      	strb	r2, [r4, r3]
 8016a70:	bc30      	pop	{r4, r5}
 8016a72:	4770      	bx	lr
 8016a74:	27d4eb2d 	.word	0x27d4eb2d
 8016a78:	b21642c9 	.word	0xb21642c9
 8016a7c:	20009f6c 	.word	0x20009f6c

08016a80 <__atomic_store_8>:
 8016a80:	b4f0      	push	{r4, r5, r6, r7}
 8016a82:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016a86:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016a8a:	4914      	ldr	r1, [pc, #80]	; (8016adc <__atomic_store_8+0x5c>)
 8016a8c:	4c14      	ldr	r4, [pc, #80]	; (8016ae0 <__atomic_store_8+0x60>)
 8016a8e:	4e15      	ldr	r6, [pc, #84]	; (8016ae4 <__atomic_store_8+0x64>)
 8016a90:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016a94:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016a98:	fb01 f105 	mul.w	r1, r1, r5
 8016a9c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016aa0:	fba4 5401 	umull	r5, r4, r4, r1
 8016aa4:	0924      	lsrs	r4, r4, #4
 8016aa6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8016aaa:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8016aae:	1b09      	subs	r1, r1, r4
 8016ab0:	1875      	adds	r5, r6, r1
 8016ab2:	f04f 0701 	mov.w	r7, #1
 8016ab6:	e8d5 4f4f 	ldrexb	r4, [r5]
 8016aba:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8016abe:	f1bc 0f00 	cmp.w	ip, #0
 8016ac2:	d1f8      	bne.n	8016ab6 <__atomic_store_8+0x36>
 8016ac4:	f3bf 8f5b 	dmb	ish
 8016ac8:	b2e4      	uxtb	r4, r4
 8016aca:	2c00      	cmp	r4, #0
 8016acc:	d1f3      	bne.n	8016ab6 <__atomic_store_8+0x36>
 8016ace:	e9c0 2300 	strd	r2, r3, [r0]
 8016ad2:	f3bf 8f5b 	dmb	ish
 8016ad6:	5474      	strb	r4, [r6, r1]
 8016ad8:	bcf0      	pop	{r4, r5, r6, r7}
 8016ada:	4770      	bx	lr
 8016adc:	27d4eb2d 	.word	0x27d4eb2d
 8016ae0:	b21642c9 	.word	0xb21642c9
 8016ae4:	20009f6c 	.word	0x20009f6c

08016ae8 <__atomic_exchange_8>:
 8016ae8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8016aec:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016af0:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016af4:	4c16      	ldr	r4, [pc, #88]	; (8016b50 <__atomic_exchange_8+0x68>)
 8016af6:	4917      	ldr	r1, [pc, #92]	; (8016b54 <__atomic_exchange_8+0x6c>)
 8016af8:	4e17      	ldr	r6, [pc, #92]	; (8016b58 <__atomic_exchange_8+0x70>)
 8016afa:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016afe:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016b02:	fb04 f505 	mul.w	r5, r4, r5
 8016b06:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8016b0a:	fba1 4105 	umull	r4, r1, r1, r5
 8016b0e:	0909      	lsrs	r1, r1, #4
 8016b10:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8016b14:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8016b18:	1a6c      	subs	r4, r5, r1
 8016b1a:	1931      	adds	r1, r6, r4
 8016b1c:	f04f 0701 	mov.w	r7, #1
 8016b20:	e8d1 5f4f 	ldrexb	r5, [r1]
 8016b24:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8016b28:	f1bc 0f00 	cmp.w	ip, #0
 8016b2c:	d1f8      	bne.n	8016b20 <__atomic_exchange_8+0x38>
 8016b2e:	f3bf 8f5b 	dmb	ish
 8016b32:	b2ed      	uxtb	r5, r5
 8016b34:	2d00      	cmp	r5, #0
 8016b36:	d1f3      	bne.n	8016b20 <__atomic_exchange_8+0x38>
 8016b38:	e9d0 8900 	ldrd	r8, r9, [r0]
 8016b3c:	e9c0 2300 	strd	r2, r3, [r0]
 8016b40:	f3bf 8f5b 	dmb	ish
 8016b44:	5535      	strb	r5, [r6, r4]
 8016b46:	4640      	mov	r0, r8
 8016b48:	4649      	mov	r1, r9
 8016b4a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8016b4e:	4770      	bx	lr
 8016b50:	27d4eb2d 	.word	0x27d4eb2d
 8016b54:	b21642c9 	.word	0xb21642c9
 8016b58:	20009f6c 	.word	0x20009f6c

08016b5c <rcutils_is_directory>:
 8016b5c:	2000      	movs	r0, #0
 8016b5e:	4770      	bx	lr

08016b60 <rcutils_join_path>:
 8016b60:	b082      	sub	sp, #8
 8016b62:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016b66:	2000      	movs	r0, #0
 8016b68:	b002      	add	sp, #8
 8016b6a:	4770      	bx	lr

08016b6c <rcutils_to_native_path>:
 8016b6c:	b084      	sub	sp, #16
 8016b6e:	a801      	add	r0, sp, #4
 8016b70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016b74:	b004      	add	sp, #16
 8016b76:	2000      	movs	r0, #0
 8016b78:	4770      	bx	lr
 8016b7a:	bf00      	nop

08016b7c <rcutils_format_string_limit>:
 8016b7c:	b40f      	push	{r0, r1, r2, r3}
 8016b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b80:	b083      	sub	sp, #12
 8016b82:	ac08      	add	r4, sp, #32
 8016b84:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016b86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016b8a:	b34e      	cbz	r6, 8016be0 <rcutils_format_string_limit+0x64>
 8016b8c:	a808      	add	r0, sp, #32
 8016b8e:	f7f8 fdc3 	bl	800f718 <rcutils_allocator_is_valid>
 8016b92:	b328      	cbz	r0, 8016be0 <rcutils_format_string_limit+0x64>
 8016b94:	2100      	movs	r1, #0
 8016b96:	ab0f      	add	r3, sp, #60	; 0x3c
 8016b98:	4608      	mov	r0, r1
 8016b9a:	4632      	mov	r2, r6
 8016b9c:	e9cd 3300 	strd	r3, r3, [sp]
 8016ba0:	f000 f904 	bl	8016dac <rcutils_vsnprintf>
 8016ba4:	1c43      	adds	r3, r0, #1
 8016ba6:	4605      	mov	r5, r0
 8016ba8:	d01a      	beq.n	8016be0 <rcutils_format_string_limit+0x64>
 8016baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016bac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016bae:	1c47      	adds	r7, r0, #1
 8016bb0:	429f      	cmp	r7, r3
 8016bb2:	bf84      	itt	hi
 8016bb4:	461f      	movhi	r7, r3
 8016bb6:	f103 35ff 	addhi.w	r5, r3, #4294967295
 8016bba:	4638      	mov	r0, r7
 8016bbc:	9b08      	ldr	r3, [sp, #32]
 8016bbe:	4798      	blx	r3
 8016bc0:	4604      	mov	r4, r0
 8016bc2:	b168      	cbz	r0, 8016be0 <rcutils_format_string_limit+0x64>
 8016bc4:	9b01      	ldr	r3, [sp, #4]
 8016bc6:	4632      	mov	r2, r6
 8016bc8:	4639      	mov	r1, r7
 8016bca:	f000 f8ef 	bl	8016dac <rcutils_vsnprintf>
 8016bce:	2800      	cmp	r0, #0
 8016bd0:	db02      	blt.n	8016bd8 <rcutils_format_string_limit+0x5c>
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	5563      	strb	r3, [r4, r5]
 8016bd6:	e004      	b.n	8016be2 <rcutils_format_string_limit+0x66>
 8016bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016bdc:	4620      	mov	r0, r4
 8016bde:	4798      	blx	r3
 8016be0:	2400      	movs	r4, #0
 8016be2:	4620      	mov	r0, r4
 8016be4:	b003      	add	sp, #12
 8016be6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016bea:	b004      	add	sp, #16
 8016bec:	4770      	bx	lr
 8016bee:	bf00      	nop

08016bf0 <rcutils_get_env>:
 8016bf0:	b168      	cbz	r0, 8016c0e <rcutils_get_env+0x1e>
 8016bf2:	b510      	push	{r4, lr}
 8016bf4:	460c      	mov	r4, r1
 8016bf6:	b129      	cbz	r1, 8016c04 <rcutils_get_env+0x14>
 8016bf8:	f002 ff8c 	bl	8019b14 <getenv>
 8016bfc:	b120      	cbz	r0, 8016c08 <rcutils_get_env+0x18>
 8016bfe:	6020      	str	r0, [r4, #0]
 8016c00:	2000      	movs	r0, #0
 8016c02:	bd10      	pop	{r4, pc}
 8016c04:	4803      	ldr	r0, [pc, #12]	; (8016c14 <rcutils_get_env+0x24>)
 8016c06:	bd10      	pop	{r4, pc}
 8016c08:	4b03      	ldr	r3, [pc, #12]	; (8016c18 <rcutils_get_env+0x28>)
 8016c0a:	6023      	str	r3, [r4, #0]
 8016c0c:	bd10      	pop	{r4, pc}
 8016c0e:	4803      	ldr	r0, [pc, #12]	; (8016c1c <rcutils_get_env+0x2c>)
 8016c10:	4770      	bx	lr
 8016c12:	bf00      	nop
 8016c14:	0801bc00 	.word	0x0801bc00
 8016c18:	0801bd24 	.word	0x0801bd24
 8016c1c:	0801bbe4 	.word	0x0801bbe4

08016c20 <rcutils_repl_str>:
 8016c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c24:	ed2d 8b02 	vpush	{d8}
 8016c28:	b087      	sub	sp, #28
 8016c2a:	4680      	mov	r8, r0
 8016c2c:	4608      	mov	r0, r1
 8016c2e:	f8cd 8000 	str.w	r8, [sp]
 8016c32:	ee08 2a10 	vmov	s16, r2
 8016c36:	468a      	mov	sl, r1
 8016c38:	4699      	mov	r9, r3
 8016c3a:	f7e9 fadb 	bl	80001f4 <strlen>
 8016c3e:	2600      	movs	r6, #0
 8016c40:	4647      	mov	r7, r8
 8016c42:	9001      	str	r0, [sp, #4]
 8016c44:	46b3      	mov	fp, r6
 8016c46:	2510      	movs	r5, #16
 8016c48:	46b0      	mov	r8, r6
 8016c4a:	e01d      	b.n	8016c88 <rcutils_repl_str+0x68>
 8016c4c:	f10b 0b01 	add.w	fp, fp, #1
 8016c50:	455e      	cmp	r6, fp
 8016c52:	d211      	bcs.n	8016c78 <rcutils_repl_str+0x58>
 8016c54:	442e      	add	r6, r5
 8016c56:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016c5a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016c5e:	00b1      	lsls	r1, r6, #2
 8016c60:	4798      	blx	r3
 8016c62:	2800      	cmp	r0, #0
 8016c64:	f000 8084 	beq.w	8016d70 <rcutils_repl_str+0x150>
 8016c68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c6c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8016c70:	bf28      	it	cs
 8016c72:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8016c76:	4680      	mov	r8, r0
 8016c78:	9a00      	ldr	r2, [sp, #0]
 8016c7a:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016c7e:	1aa2      	subs	r2, r4, r2
 8016c80:	f843 2c04 	str.w	r2, [r3, #-4]
 8016c84:	9b01      	ldr	r3, [sp, #4]
 8016c86:	18e7      	adds	r7, r4, r3
 8016c88:	4651      	mov	r1, sl
 8016c8a:	4638      	mov	r0, r7
 8016c8c:	f003 fc6f 	bl	801a56e <strstr>
 8016c90:	4604      	mov	r4, r0
 8016c92:	4640      	mov	r0, r8
 8016c94:	2c00      	cmp	r4, #0
 8016c96:	d1d9      	bne.n	8016c4c <rcutils_repl_str+0x2c>
 8016c98:	46b8      	mov	r8, r7
 8016c9a:	4607      	mov	r7, r0
 8016c9c:	4640      	mov	r0, r8
 8016c9e:	f7e9 faa9 	bl	80001f4 <strlen>
 8016ca2:	9b00      	ldr	r3, [sp, #0]
 8016ca4:	eba8 0303 	sub.w	r3, r8, r3
 8016ca8:	181d      	adds	r5, r3, r0
 8016caa:	9504      	str	r5, [sp, #16]
 8016cac:	f1bb 0f00 	cmp.w	fp, #0
 8016cb0:	d03d      	beq.n	8016d2e <rcutils_repl_str+0x10e>
 8016cb2:	ee18 0a10 	vmov	r0, s16
 8016cb6:	f7e9 fa9d 	bl	80001f4 <strlen>
 8016cba:	9b01      	ldr	r3, [sp, #4]
 8016cbc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016cc0:	1ac3      	subs	r3, r0, r3
 8016cc2:	fb0b 5303 	mla	r3, fp, r3, r5
 8016cc6:	9305      	str	r3, [sp, #20]
 8016cc8:	4606      	mov	r6, r0
 8016cca:	1c58      	adds	r0, r3, #1
 8016ccc:	f8d9 3000 	ldr.w	r3, [r9]
 8016cd0:	4798      	blx	r3
 8016cd2:	9003      	str	r0, [sp, #12]
 8016cd4:	2800      	cmp	r0, #0
 8016cd6:	d04c      	beq.n	8016d72 <rcutils_repl_str+0x152>
 8016cd8:	683a      	ldr	r2, [r7, #0]
 8016cda:	9900      	ldr	r1, [sp, #0]
 8016cdc:	f003 fd3f 	bl	801a75e <memcpy>
 8016ce0:	9b03      	ldr	r3, [sp, #12]
 8016ce2:	683d      	ldr	r5, [r7, #0]
 8016ce4:	ee18 8a10 	vmov	r8, s16
 8016ce8:	441d      	add	r5, r3
 8016cea:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016cee:	9302      	str	r3, [sp, #8]
 8016cf0:	46ba      	mov	sl, r7
 8016cf2:	4632      	mov	r2, r6
 8016cf4:	4641      	mov	r1, r8
 8016cf6:	4628      	mov	r0, r5
 8016cf8:	f003 fd31 	bl	801a75e <memcpy>
 8016cfc:	9b01      	ldr	r3, [sp, #4]
 8016cfe:	f85a 2b04 	ldr.w	r2, [sl], #4
 8016d02:	441a      	add	r2, r3
 8016d04:	9b00      	ldr	r3, [sp, #0]
 8016d06:	1899      	adds	r1, r3, r2
 8016d08:	9b02      	ldr	r3, [sp, #8]
 8016d0a:	4435      	add	r5, r6
 8016d0c:	429c      	cmp	r4, r3
 8016d0e:	4628      	mov	r0, r5
 8016d10:	d025      	beq.n	8016d5e <rcutils_repl_str+0x13e>
 8016d12:	f8da 3000 	ldr.w	r3, [sl]
 8016d16:	3401      	adds	r4, #1
 8016d18:	1a9a      	subs	r2, r3, r2
 8016d1a:	4415      	add	r5, r2
 8016d1c:	f003 fd1f 	bl	801a75e <memcpy>
 8016d20:	455c      	cmp	r4, fp
 8016d22:	d3e6      	bcc.n	8016cf2 <rcutils_repl_str+0xd2>
 8016d24:	9a03      	ldr	r2, [sp, #12]
 8016d26:	9905      	ldr	r1, [sp, #20]
 8016d28:	2300      	movs	r3, #0
 8016d2a:	5453      	strb	r3, [r2, r1]
 8016d2c:	e00b      	b.n	8016d46 <rcutils_repl_str+0x126>
 8016d2e:	4628      	mov	r0, r5
 8016d30:	f8d9 3000 	ldr.w	r3, [r9]
 8016d34:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016d38:	3001      	adds	r0, #1
 8016d3a:	4798      	blx	r3
 8016d3c:	9003      	str	r0, [sp, #12]
 8016d3e:	b110      	cbz	r0, 8016d46 <rcutils_repl_str+0x126>
 8016d40:	9900      	ldr	r1, [sp, #0]
 8016d42:	f003 fd04 	bl	801a74e <strcpy>
 8016d46:	4638      	mov	r0, r7
 8016d48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016d4c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016d50:	4798      	blx	r3
 8016d52:	9803      	ldr	r0, [sp, #12]
 8016d54:	b007      	add	sp, #28
 8016d56:	ecbd 8b02 	vpop	{d8}
 8016d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d5e:	9b04      	ldr	r3, [sp, #16]
 8016d60:	3401      	adds	r4, #1
 8016d62:	1a9a      	subs	r2, r3, r2
 8016d64:	4415      	add	r5, r2
 8016d66:	f003 fcfa 	bl	801a75e <memcpy>
 8016d6a:	455c      	cmp	r4, fp
 8016d6c:	d3c1      	bcc.n	8016cf2 <rcutils_repl_str+0xd2>
 8016d6e:	e7d9      	b.n	8016d24 <rcutils_repl_str+0x104>
 8016d70:	4647      	mov	r7, r8
 8016d72:	2300      	movs	r3, #0
 8016d74:	9303      	str	r3, [sp, #12]
 8016d76:	e7e6      	b.n	8016d46 <rcutils_repl_str+0x126>

08016d78 <rcutils_snprintf>:
 8016d78:	b40c      	push	{r2, r3}
 8016d7a:	b530      	push	{r4, r5, lr}
 8016d7c:	b083      	sub	sp, #12
 8016d7e:	ab06      	add	r3, sp, #24
 8016d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d84:	9301      	str	r3, [sp, #4]
 8016d86:	b152      	cbz	r2, 8016d9e <rcutils_snprintf+0x26>
 8016d88:	b138      	cbz	r0, 8016d9a <rcutils_snprintf+0x22>
 8016d8a:	b141      	cbz	r1, 8016d9e <rcutils_snprintf+0x26>
 8016d8c:	f003 fb0a 	bl	801a3a4 <vsniprintf>
 8016d90:	b003      	add	sp, #12
 8016d92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d96:	b002      	add	sp, #8
 8016d98:	4770      	bx	lr
 8016d9a:	2900      	cmp	r1, #0
 8016d9c:	d0f6      	beq.n	8016d8c <rcutils_snprintf+0x14>
 8016d9e:	f003 fca9 	bl	801a6f4 <__errno>
 8016da2:	2316      	movs	r3, #22
 8016da4:	6003      	str	r3, [r0, #0]
 8016da6:	f04f 30ff 	mov.w	r0, #4294967295
 8016daa:	e7f1      	b.n	8016d90 <rcutils_snprintf+0x18>

08016dac <rcutils_vsnprintf>:
 8016dac:	b570      	push	{r4, r5, r6, lr}
 8016dae:	b13a      	cbz	r2, 8016dc0 <rcutils_vsnprintf+0x14>
 8016db0:	b120      	cbz	r0, 8016dbc <rcutils_vsnprintf+0x10>
 8016db2:	b129      	cbz	r1, 8016dc0 <rcutils_vsnprintf+0x14>
 8016db4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016db8:	f003 baf4 	b.w	801a3a4 <vsniprintf>
 8016dbc:	2900      	cmp	r1, #0
 8016dbe:	d0f9      	beq.n	8016db4 <rcutils_vsnprintf+0x8>
 8016dc0:	f003 fc98 	bl	801a6f4 <__errno>
 8016dc4:	2316      	movs	r3, #22
 8016dc6:	6003      	str	r3, [r0, #0]
 8016dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8016dcc:	bd70      	pop	{r4, r5, r6, pc}
 8016dce:	bf00      	nop

08016dd0 <rcutils_strdup>:
 8016dd0:	b084      	sub	sp, #16
 8016dd2:	b570      	push	{r4, r5, r6, lr}
 8016dd4:	b082      	sub	sp, #8
 8016dd6:	ac07      	add	r4, sp, #28
 8016dd8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016ddc:	4605      	mov	r5, r0
 8016dde:	b1b0      	cbz	r0, 8016e0e <rcutils_strdup+0x3e>
 8016de0:	f7e9 fa08 	bl	80001f4 <strlen>
 8016de4:	1c42      	adds	r2, r0, #1
 8016de6:	9b07      	ldr	r3, [sp, #28]
 8016de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016dea:	9201      	str	r2, [sp, #4]
 8016dec:	4606      	mov	r6, r0
 8016dee:	4610      	mov	r0, r2
 8016df0:	4798      	blx	r3
 8016df2:	4604      	mov	r4, r0
 8016df4:	b128      	cbz	r0, 8016e02 <rcutils_strdup+0x32>
 8016df6:	9a01      	ldr	r2, [sp, #4]
 8016df8:	4629      	mov	r1, r5
 8016dfa:	f003 fcb0 	bl	801a75e <memcpy>
 8016dfe:	2300      	movs	r3, #0
 8016e00:	55a3      	strb	r3, [r4, r6]
 8016e02:	4620      	mov	r0, r4
 8016e04:	b002      	add	sp, #8
 8016e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e0a:	b004      	add	sp, #16
 8016e0c:	4770      	bx	lr
 8016e0e:	4604      	mov	r4, r0
 8016e10:	e7f7      	b.n	8016e02 <rcutils_strdup+0x32>
 8016e12:	bf00      	nop

08016e14 <rcutils_strndup>:
 8016e14:	b082      	sub	sp, #8
 8016e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e18:	460e      	mov	r6, r1
 8016e1a:	a906      	add	r1, sp, #24
 8016e1c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016e20:	4605      	mov	r5, r0
 8016e22:	b180      	cbz	r0, 8016e46 <rcutils_strndup+0x32>
 8016e24:	1c77      	adds	r7, r6, #1
 8016e26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016e28:	4638      	mov	r0, r7
 8016e2a:	4790      	blx	r2
 8016e2c:	4604      	mov	r4, r0
 8016e2e:	b128      	cbz	r0, 8016e3c <rcutils_strndup+0x28>
 8016e30:	463a      	mov	r2, r7
 8016e32:	4629      	mov	r1, r5
 8016e34:	f003 fc93 	bl	801a75e <memcpy>
 8016e38:	2300      	movs	r3, #0
 8016e3a:	55a3      	strb	r3, [r4, r6]
 8016e3c:	4620      	mov	r0, r4
 8016e3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016e42:	b002      	add	sp, #8
 8016e44:	4770      	bx	lr
 8016e46:	4604      	mov	r4, r0
 8016e48:	e7f8      	b.n	8016e3c <rcutils_strndup+0x28>
 8016e4a:	bf00      	nop

08016e4c <rmw_get_zero_initialized_context>:
 8016e4c:	b510      	push	{r4, lr}
 8016e4e:	2250      	movs	r2, #80	; 0x50
 8016e50:	4604      	mov	r4, r0
 8016e52:	2100      	movs	r1, #0
 8016e54:	f003 fb64 	bl	801a520 <memset>
 8016e58:	4620      	mov	r0, r4
 8016e5a:	bd10      	pop	{r4, pc}

08016e5c <rmw_get_zero_initialized_init_options>:
 8016e5c:	b510      	push	{r4, lr}
 8016e5e:	2238      	movs	r2, #56	; 0x38
 8016e60:	4604      	mov	r4, r0
 8016e62:	2100      	movs	r1, #0
 8016e64:	f003 fb5c 	bl	801a520 <memset>
 8016e68:	f104 0010 	add.w	r0, r4, #16
 8016e6c:	f000 f806 	bl	8016e7c <rmw_get_default_security_options>
 8016e70:	f04f 33ff 	mov.w	r3, #4294967295
 8016e74:	60e3      	str	r3, [r4, #12]
 8016e76:	4620      	mov	r0, r4
 8016e78:	bd10      	pop	{r4, pc}
 8016e7a:	bf00      	nop

08016e7c <rmw_get_default_security_options>:
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	7002      	strb	r2, [r0, #0]
 8016e80:	6042      	str	r2, [r0, #4]
 8016e82:	4770      	bx	lr

08016e84 <rmw_validate_namespace_with_size>:
 8016e84:	b340      	cbz	r0, 8016ed8 <rmw_validate_namespace_with_size+0x54>
 8016e86:	b5d0      	push	{r4, r6, r7, lr}
 8016e88:	4614      	mov	r4, r2
 8016e8a:	b0c2      	sub	sp, #264	; 0x108
 8016e8c:	b332      	cbz	r2, 8016edc <rmw_validate_namespace_with_size+0x58>
 8016e8e:	2901      	cmp	r1, #1
 8016e90:	460f      	mov	r7, r1
 8016e92:	461e      	mov	r6, r3
 8016e94:	d102      	bne.n	8016e9c <rmw_validate_namespace_with_size+0x18>
 8016e96:	7803      	ldrb	r3, [r0, #0]
 8016e98:	2b2f      	cmp	r3, #47	; 0x2f
 8016e9a:	d019      	beq.n	8016ed0 <rmw_validate_namespace_with_size+0x4c>
 8016e9c:	aa01      	add	r2, sp, #4
 8016e9e:	4669      	mov	r1, sp
 8016ea0:	f7f8 fe0e 	bl	800fac0 <rmw_validate_full_topic_name>
 8016ea4:	b990      	cbnz	r0, 8016ecc <rmw_validate_namespace_with_size+0x48>
 8016ea6:	9b00      	ldr	r3, [sp, #0]
 8016ea8:	b14b      	cbz	r3, 8016ebe <rmw_validate_namespace_with_size+0x3a>
 8016eaa:	2b07      	cmp	r3, #7
 8016eac:	d007      	beq.n	8016ebe <rmw_validate_namespace_with_size+0x3a>
 8016eae:	1e5a      	subs	r2, r3, #1
 8016eb0:	2a05      	cmp	r2, #5
 8016eb2:	d82b      	bhi.n	8016f0c <rmw_validate_namespace_with_size+0x88>
 8016eb4:	e8df f002 	tbb	[pc, r2]
 8016eb8:	24211e1b 	.word	0x24211e1b
 8016ebc:	1427      	.short	0x1427
 8016ebe:	2ff5      	cmp	r7, #245	; 0xf5
 8016ec0:	d906      	bls.n	8016ed0 <rmw_validate_namespace_with_size+0x4c>
 8016ec2:	2307      	movs	r3, #7
 8016ec4:	6023      	str	r3, [r4, #0]
 8016ec6:	b10e      	cbz	r6, 8016ecc <rmw_validate_namespace_with_size+0x48>
 8016ec8:	23f4      	movs	r3, #244	; 0xf4
 8016eca:	6033      	str	r3, [r6, #0]
 8016ecc:	b042      	add	sp, #264	; 0x108
 8016ece:	bdd0      	pop	{r4, r6, r7, pc}
 8016ed0:	2000      	movs	r0, #0
 8016ed2:	6020      	str	r0, [r4, #0]
 8016ed4:	b042      	add	sp, #264	; 0x108
 8016ed6:	bdd0      	pop	{r4, r6, r7, pc}
 8016ed8:	200b      	movs	r0, #11
 8016eda:	4770      	bx	lr
 8016edc:	200b      	movs	r0, #11
 8016ede:	e7f5      	b.n	8016ecc <rmw_validate_namespace_with_size+0x48>
 8016ee0:	2306      	movs	r3, #6
 8016ee2:	6023      	str	r3, [r4, #0]
 8016ee4:	2e00      	cmp	r6, #0
 8016ee6:	d0f1      	beq.n	8016ecc <rmw_validate_namespace_with_size+0x48>
 8016ee8:	9b01      	ldr	r3, [sp, #4]
 8016eea:	6033      	str	r3, [r6, #0]
 8016eec:	e7ee      	b.n	8016ecc <rmw_validate_namespace_with_size+0x48>
 8016eee:	2301      	movs	r3, #1
 8016ef0:	6023      	str	r3, [r4, #0]
 8016ef2:	e7f7      	b.n	8016ee4 <rmw_validate_namespace_with_size+0x60>
 8016ef4:	2302      	movs	r3, #2
 8016ef6:	6023      	str	r3, [r4, #0]
 8016ef8:	e7f4      	b.n	8016ee4 <rmw_validate_namespace_with_size+0x60>
 8016efa:	2303      	movs	r3, #3
 8016efc:	6023      	str	r3, [r4, #0]
 8016efe:	e7f1      	b.n	8016ee4 <rmw_validate_namespace_with_size+0x60>
 8016f00:	2304      	movs	r3, #4
 8016f02:	6023      	str	r3, [r4, #0]
 8016f04:	e7ee      	b.n	8016ee4 <rmw_validate_namespace_with_size+0x60>
 8016f06:	2305      	movs	r3, #5
 8016f08:	6023      	str	r3, [r4, #0]
 8016f0a:	e7eb      	b.n	8016ee4 <rmw_validate_namespace_with_size+0x60>
 8016f0c:	4a03      	ldr	r2, [pc, #12]	; (8016f1c <rmw_validate_namespace_with_size+0x98>)
 8016f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016f12:	a802      	add	r0, sp, #8
 8016f14:	f7ff ff30 	bl	8016d78 <rcutils_snprintf>
 8016f18:	2001      	movs	r0, #1
 8016f1a:	e7d7      	b.n	8016ecc <rmw_validate_namespace_with_size+0x48>
 8016f1c:	0801bc1c 	.word	0x0801bc1c

08016f20 <rmw_validate_namespace>:
 8016f20:	b168      	cbz	r0, 8016f3e <rmw_validate_namespace+0x1e>
 8016f22:	b570      	push	{r4, r5, r6, lr}
 8016f24:	460d      	mov	r5, r1
 8016f26:	4616      	mov	r6, r2
 8016f28:	4604      	mov	r4, r0
 8016f2a:	f7e9 f963 	bl	80001f4 <strlen>
 8016f2e:	4633      	mov	r3, r6
 8016f30:	4601      	mov	r1, r0
 8016f32:	462a      	mov	r2, r5
 8016f34:	4620      	mov	r0, r4
 8016f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f3a:	f7ff bfa3 	b.w	8016e84 <rmw_validate_namespace_with_size>
 8016f3e:	200b      	movs	r0, #11
 8016f40:	4770      	bx	lr
 8016f42:	bf00      	nop

08016f44 <rmw_namespace_validation_result_string>:
 8016f44:	2807      	cmp	r0, #7
 8016f46:	bf9a      	itte	ls
 8016f48:	4b02      	ldrls	r3, [pc, #8]	; (8016f54 <rmw_namespace_validation_result_string+0x10>)
 8016f4a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016f4e:	4802      	ldrhi	r0, [pc, #8]	; (8016f58 <rmw_namespace_validation_result_string+0x14>)
 8016f50:	4770      	bx	lr
 8016f52:	bf00      	nop
 8016f54:	0801be14 	.word	0x0801be14
 8016f58:	0801bc6c 	.word	0x0801bc6c

08016f5c <rmw_validate_node_name>:
 8016f5c:	2800      	cmp	r0, #0
 8016f5e:	d03b      	beq.n	8016fd8 <rmw_validate_node_name+0x7c>
 8016f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f64:	460f      	mov	r7, r1
 8016f66:	2900      	cmp	r1, #0
 8016f68:	d038      	beq.n	8016fdc <rmw_validate_node_name+0x80>
 8016f6a:	4615      	mov	r5, r2
 8016f6c:	4604      	mov	r4, r0
 8016f6e:	f7e9 f941 	bl	80001f4 <strlen>
 8016f72:	b1e0      	cbz	r0, 8016fae <rmw_validate_node_name+0x52>
 8016f74:	1e63      	subs	r3, r4, #1
 8016f76:	eb03 0e00 	add.w	lr, r3, r0
 8016f7a:	f1c4 0c01 	rsb	ip, r4, #1
 8016f7e:	eb0c 0803 	add.w	r8, ip, r3
 8016f82:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8016f86:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8016f8a:	f026 0220 	bic.w	r2, r6, #32
 8016f8e:	2909      	cmp	r1, #9
 8016f90:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8016f94:	d913      	bls.n	8016fbe <rmw_validate_node_name+0x62>
 8016f96:	2a19      	cmp	r2, #25
 8016f98:	d911      	bls.n	8016fbe <rmw_validate_node_name+0x62>
 8016f9a:	2e5f      	cmp	r6, #95	; 0x5f
 8016f9c:	d00f      	beq.n	8016fbe <rmw_validate_node_name+0x62>
 8016f9e:	2302      	movs	r3, #2
 8016fa0:	603b      	str	r3, [r7, #0]
 8016fa2:	b10d      	cbz	r5, 8016fa8 <rmw_validate_node_name+0x4c>
 8016fa4:	f8c5 8000 	str.w	r8, [r5]
 8016fa8:	2000      	movs	r0, #0
 8016faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fae:	2301      	movs	r3, #1
 8016fb0:	603b      	str	r3, [r7, #0]
 8016fb2:	2d00      	cmp	r5, #0
 8016fb4:	d0f8      	beq.n	8016fa8 <rmw_validate_node_name+0x4c>
 8016fb6:	2000      	movs	r0, #0
 8016fb8:	6028      	str	r0, [r5, #0]
 8016fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fbe:	4573      	cmp	r3, lr
 8016fc0:	d1dd      	bne.n	8016f7e <rmw_validate_node_name+0x22>
 8016fc2:	7822      	ldrb	r2, [r4, #0]
 8016fc4:	4b0d      	ldr	r3, [pc, #52]	; (8016ffc <rmw_validate_node_name+0xa0>)
 8016fc6:	5cd3      	ldrb	r3, [r2, r3]
 8016fc8:	f013 0304 	ands.w	r3, r3, #4
 8016fcc:	d110      	bne.n	8016ff0 <rmw_validate_node_name+0x94>
 8016fce:	28ff      	cmp	r0, #255	; 0xff
 8016fd0:	d806      	bhi.n	8016fe0 <rmw_validate_node_name+0x84>
 8016fd2:	603b      	str	r3, [r7, #0]
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	e7e8      	b.n	8016faa <rmw_validate_node_name+0x4e>
 8016fd8:	200b      	movs	r0, #11
 8016fda:	4770      	bx	lr
 8016fdc:	200b      	movs	r0, #11
 8016fde:	e7e4      	b.n	8016faa <rmw_validate_node_name+0x4e>
 8016fe0:	2204      	movs	r2, #4
 8016fe2:	603a      	str	r2, [r7, #0]
 8016fe4:	2d00      	cmp	r5, #0
 8016fe6:	d0df      	beq.n	8016fa8 <rmw_validate_node_name+0x4c>
 8016fe8:	22fe      	movs	r2, #254	; 0xfe
 8016fea:	4618      	mov	r0, r3
 8016fec:	602a      	str	r2, [r5, #0]
 8016fee:	e7dc      	b.n	8016faa <rmw_validate_node_name+0x4e>
 8016ff0:	2303      	movs	r3, #3
 8016ff2:	603b      	str	r3, [r7, #0]
 8016ff4:	2d00      	cmp	r5, #0
 8016ff6:	d1de      	bne.n	8016fb6 <rmw_validate_node_name+0x5a>
 8016ff8:	e7d6      	b.n	8016fa8 <rmw_validate_node_name+0x4c>
 8016ffa:	bf00      	nop
 8016ffc:	0801c1d8 	.word	0x0801c1d8

08017000 <rmw_node_name_validation_result_string>:
 8017000:	2804      	cmp	r0, #4
 8017002:	bf9a      	itte	ls
 8017004:	4b02      	ldrls	r3, [pc, #8]	; (8017010 <rmw_node_name_validation_result_string+0x10>)
 8017006:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801700a:	4802      	ldrhi	r0, [pc, #8]	; (8017014 <rmw_node_name_validation_result_string+0x14>)
 801700c:	4770      	bx	lr
 801700e:	bf00      	nop
 8017010:	0801bf20 	.word	0x0801bf20
 8017014:	0801be34 	.word	0x0801be34

08017018 <get_memory>:
 8017018:	4603      	mov	r3, r0
 801701a:	6840      	ldr	r0, [r0, #4]
 801701c:	b158      	cbz	r0, 8017036 <get_memory+0x1e>
 801701e:	6882      	ldr	r2, [r0, #8]
 8017020:	605a      	str	r2, [r3, #4]
 8017022:	b10a      	cbz	r2, 8017028 <get_memory+0x10>
 8017024:	2100      	movs	r1, #0
 8017026:	6051      	str	r1, [r2, #4]
 8017028:	681a      	ldr	r2, [r3, #0]
 801702a:	6082      	str	r2, [r0, #8]
 801702c:	b102      	cbz	r2, 8017030 <get_memory+0x18>
 801702e:	6050      	str	r0, [r2, #4]
 8017030:	2200      	movs	r2, #0
 8017032:	6042      	str	r2, [r0, #4]
 8017034:	6018      	str	r0, [r3, #0]
 8017036:	4770      	bx	lr

08017038 <put_memory>:
 8017038:	684b      	ldr	r3, [r1, #4]
 801703a:	b10b      	cbz	r3, 8017040 <put_memory+0x8>
 801703c:	688a      	ldr	r2, [r1, #8]
 801703e:	609a      	str	r2, [r3, #8]
 8017040:	688a      	ldr	r2, [r1, #8]
 8017042:	b102      	cbz	r2, 8017046 <put_memory+0xe>
 8017044:	6053      	str	r3, [r2, #4]
 8017046:	6803      	ldr	r3, [r0, #0]
 8017048:	428b      	cmp	r3, r1
 801704a:	6843      	ldr	r3, [r0, #4]
 801704c:	bf08      	it	eq
 801704e:	6002      	streq	r2, [r0, #0]
 8017050:	608b      	str	r3, [r1, #8]
 8017052:	b103      	cbz	r3, 8017056 <put_memory+0x1e>
 8017054:	6059      	str	r1, [r3, #4]
 8017056:	2300      	movs	r3, #0
 8017058:	604b      	str	r3, [r1, #4]
 801705a:	6041      	str	r1, [r0, #4]
 801705c:	4770      	bx	lr
 801705e:	bf00      	nop

08017060 <rmw_destroy_client>:
 8017060:	b570      	push	{r4, r5, r6, lr}
 8017062:	b128      	cbz	r0, 8017070 <rmw_destroy_client+0x10>
 8017064:	4604      	mov	r4, r0
 8017066:	6800      	ldr	r0, [r0, #0]
 8017068:	460d      	mov	r5, r1
 801706a:	f7f9 fc05 	bl	8010878 <is_uxrce_rmw_identifier_valid>
 801706e:	b910      	cbnz	r0, 8017076 <rmw_destroy_client+0x16>
 8017070:	2401      	movs	r4, #1
 8017072:	4620      	mov	r0, r4
 8017074:	bd70      	pop	{r4, r5, r6, pc}
 8017076:	6863      	ldr	r3, [r4, #4]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d0f9      	beq.n	8017070 <rmw_destroy_client+0x10>
 801707c:	2d00      	cmp	r5, #0
 801707e:	d0f7      	beq.n	8017070 <rmw_destroy_client+0x10>
 8017080:	6828      	ldr	r0, [r5, #0]
 8017082:	f7f9 fbf9 	bl	8010878 <is_uxrce_rmw_identifier_valid>
 8017086:	2800      	cmp	r0, #0
 8017088:	d0f2      	beq.n	8017070 <rmw_destroy_client+0x10>
 801708a:	686e      	ldr	r6, [r5, #4]
 801708c:	2e00      	cmp	r6, #0
 801708e:	d0ef      	beq.n	8017070 <rmw_destroy_client+0x10>
 8017090:	6864      	ldr	r4, [r4, #4]
 8017092:	6932      	ldr	r2, [r6, #16]
 8017094:	6920      	ldr	r0, [r4, #16]
 8017096:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801709a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801709e:	6819      	ldr	r1, [r3, #0]
 80170a0:	f7fa fee8 	bl	8011e74 <uxr_buffer_cancel_data>
 80170a4:	4602      	mov	r2, r0
 80170a6:	6920      	ldr	r0, [r4, #16]
 80170a8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80170ac:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80170b0:	f7f9 fb62 	bl	8010778 <run_xrce_session>
 80170b4:	6920      	ldr	r0, [r4, #16]
 80170b6:	6932      	ldr	r2, [r6, #16]
 80170b8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80170bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80170c0:	6819      	ldr	r1, [r3, #0]
 80170c2:	f7fa fc6d 	bl	80119a0 <uxr_buffer_delete_entity>
 80170c6:	4602      	mov	r2, r0
 80170c8:	6920      	ldr	r0, [r4, #16]
 80170ca:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80170ce:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80170d2:	f7f9 fb51 	bl	8010778 <run_xrce_session>
 80170d6:	2800      	cmp	r0, #0
 80170d8:	4628      	mov	r0, r5
 80170da:	bf14      	ite	ne
 80170dc:	2400      	movne	r4, #0
 80170de:	2402      	moveq	r4, #2
 80170e0:	f7f9 fa3c 	bl	801055c <rmw_uxrce_fini_client_memory>
 80170e4:	e7c5      	b.n	8017072 <rmw_destroy_client+0x12>
 80170e6:	bf00      	nop

080170e8 <rmw_get_implementation_identifier>:
 80170e8:	4b01      	ldr	r3, [pc, #4]	; (80170f0 <rmw_get_implementation_identifier+0x8>)
 80170ea:	6818      	ldr	r0, [r3, #0]
 80170ec:	4770      	bx	lr
 80170ee:	bf00      	nop
 80170f0:	0801bf4c 	.word	0x0801bf4c

080170f4 <rmw_init_options_init>:
 80170f4:	b084      	sub	sp, #16
 80170f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170fa:	ad09      	add	r5, sp, #36	; 0x24
 80170fc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8017100:	b130      	cbz	r0, 8017110 <rmw_init_options_init+0x1c>
 8017102:	4604      	mov	r4, r0
 8017104:	4628      	mov	r0, r5
 8017106:	f7f8 fb07 	bl	800f718 <rcutils_allocator_is_valid>
 801710a:	b108      	cbz	r0, 8017110 <rmw_init_options_init+0x1c>
 801710c:	68a3      	ldr	r3, [r4, #8]
 801710e:	b123      	cbz	r3, 801711a <rmw_init_options_init+0x26>
 8017110:	200b      	movs	r0, #11
 8017112:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017116:	b004      	add	sp, #16
 8017118:	4770      	bx	lr
 801711a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801711c:	4f1c      	ldr	r7, [pc, #112]	; (8017190 <rmw_init_options_init+0x9c>)
 801711e:	682e      	ldr	r6, [r5, #0]
 8017120:	683d      	ldr	r5, [r7, #0]
 8017122:	60a5      	str	r5, [r4, #8]
 8017124:	f04f 0800 	mov.w	r8, #0
 8017128:	f04f 0900 	mov.w	r9, #0
 801712c:	f104 0520 	add.w	r5, r4, #32
 8017130:	e9c4 8900 	strd	r8, r9, [r4]
 8017134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017136:	4b17      	ldr	r3, [pc, #92]	; (8017194 <rmw_init_options_init+0xa0>)
 8017138:	4817      	ldr	r0, [pc, #92]	; (8017198 <rmw_init_options_init+0xa4>)
 801713a:	602e      	str	r6, [r5, #0]
 801713c:	4917      	ldr	r1, [pc, #92]	; (801719c <rmw_init_options_init+0xa8>)
 801713e:	61e3      	str	r3, [r4, #28]
 8017140:	2203      	movs	r2, #3
 8017142:	f7f9 f95b 	bl	80103fc <rmw_uxrce_init_init_options_impl_memory>
 8017146:	4814      	ldr	r0, [pc, #80]	; (8017198 <rmw_init_options_init+0xa4>)
 8017148:	f7ff ff66 	bl	8017018 <get_memory>
 801714c:	b1e8      	cbz	r0, 801718a <rmw_init_options_init+0x96>
 801714e:	4a14      	ldr	r2, [pc, #80]	; (80171a0 <rmw_init_options_init+0xac>)
 8017150:	68c3      	ldr	r3, [r0, #12]
 8017152:	6851      	ldr	r1, [r2, #4]
 8017154:	7810      	ldrb	r0, [r2, #0]
 8017156:	6363      	str	r3, [r4, #52]	; 0x34
 8017158:	7418      	strb	r0, [r3, #16]
 801715a:	6159      	str	r1, [r3, #20]
 801715c:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 8017160:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8017164:	e9c3 5006 	strd	r5, r0, [r3, #24]
 8017168:	e9c3 1208 	strd	r1, r2, [r3, #32]
 801716c:	f7fc f9b0 	bl	80134d0 <uxr_nanos>
 8017170:	f002 fdd4 	bl	8019d1c <srand>
 8017174:	f002 fe00 	bl	8019d78 <rand>
 8017178:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801717a:	6298      	str	r0, [r3, #40]	; 0x28
 801717c:	2800      	cmp	r0, #0
 801717e:	d0f9      	beq.n	8017174 <rmw_init_options_init+0x80>
 8017180:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017184:	2000      	movs	r0, #0
 8017186:	b004      	add	sp, #16
 8017188:	4770      	bx	lr
 801718a:	2001      	movs	r0, #1
 801718c:	e7c1      	b.n	8017112 <rmw_init_options_init+0x1e>
 801718e:	bf00      	nop
 8017190:	0801bf4c 	.word	0x0801bf4c
 8017194:	0801bac0 	.word	0x0801bac0
 8017198:	2000d4fc 	.word	0x2000d4fc
 801719c:	2000d150 	.word	0x2000d150
 80171a0:	2000a1e0 	.word	0x2000a1e0

080171a4 <rmw_init_options_copy>:
 80171a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171a6:	b158      	cbz	r0, 80171c0 <rmw_init_options_copy+0x1c>
 80171a8:	460e      	mov	r6, r1
 80171aa:	b149      	cbz	r1, 80171c0 <rmw_init_options_copy+0x1c>
 80171ac:	4604      	mov	r4, r0
 80171ae:	6880      	ldr	r0, [r0, #8]
 80171b0:	b120      	cbz	r0, 80171bc <rmw_init_options_copy+0x18>
 80171b2:	4b1b      	ldr	r3, [pc, #108]	; (8017220 <rmw_init_options_copy+0x7c>)
 80171b4:	6819      	ldr	r1, [r3, #0]
 80171b6:	f7e9 f813 	bl	80001e0 <strcmp>
 80171ba:	bb60      	cbnz	r0, 8017216 <rmw_init_options_copy+0x72>
 80171bc:	68b3      	ldr	r3, [r6, #8]
 80171be:	b113      	cbz	r3, 80171c6 <rmw_init_options_copy+0x22>
 80171c0:	230b      	movs	r3, #11
 80171c2:	4618      	mov	r0, r3
 80171c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171c6:	4623      	mov	r3, r4
 80171c8:	4632      	mov	r2, r6
 80171ca:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80171ce:	681d      	ldr	r5, [r3, #0]
 80171d0:	6858      	ldr	r0, [r3, #4]
 80171d2:	6899      	ldr	r1, [r3, #8]
 80171d4:	68df      	ldr	r7, [r3, #12]
 80171d6:	60d7      	str	r7, [r2, #12]
 80171d8:	3310      	adds	r3, #16
 80171da:	4563      	cmp	r3, ip
 80171dc:	6015      	str	r5, [r2, #0]
 80171de:	6050      	str	r0, [r2, #4]
 80171e0:	6091      	str	r1, [r2, #8]
 80171e2:	f102 0210 	add.w	r2, r2, #16
 80171e6:	d1f2      	bne.n	80171ce <rmw_init_options_copy+0x2a>
 80171e8:	6819      	ldr	r1, [r3, #0]
 80171ea:	685b      	ldr	r3, [r3, #4]
 80171ec:	480d      	ldr	r0, [pc, #52]	; (8017224 <rmw_init_options_copy+0x80>)
 80171ee:	6053      	str	r3, [r2, #4]
 80171f0:	6011      	str	r1, [r2, #0]
 80171f2:	f7ff ff11 	bl	8017018 <get_memory>
 80171f6:	b188      	cbz	r0, 801721c <rmw_init_options_copy+0x78>
 80171f8:	68c5      	ldr	r5, [r0, #12]
 80171fa:	6375      	str	r5, [r6, #52]	; 0x34
 80171fc:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80171fe:	3610      	adds	r6, #16
 8017200:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017202:	f105 0410 	add.w	r4, r5, #16
 8017206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017208:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801720c:	2300      	movs	r3, #0
 801720e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017212:	4618      	mov	r0, r3
 8017214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017216:	230c      	movs	r3, #12
 8017218:	4618      	mov	r0, r3
 801721a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801721c:	2301      	movs	r3, #1
 801721e:	e7d0      	b.n	80171c2 <rmw_init_options_copy+0x1e>
 8017220:	0801bf4c 	.word	0x0801bf4c
 8017224:	2000d4fc 	.word	0x2000d4fc

08017228 <rmw_init_options_fini>:
 8017228:	2800      	cmp	r0, #0
 801722a:	d036      	beq.n	801729a <rmw_init_options_fini+0x72>
 801722c:	b530      	push	{r4, r5, lr}
 801722e:	4604      	mov	r4, r0
 8017230:	b08f      	sub	sp, #60	; 0x3c
 8017232:	3020      	adds	r0, #32
 8017234:	f7f8 fa70 	bl	800f718 <rcutils_allocator_is_valid>
 8017238:	b328      	cbz	r0, 8017286 <rmw_init_options_fini+0x5e>
 801723a:	68a0      	ldr	r0, [r4, #8]
 801723c:	b120      	cbz	r0, 8017248 <rmw_init_options_fini+0x20>
 801723e:	4b18      	ldr	r3, [pc, #96]	; (80172a0 <rmw_init_options_fini+0x78>)
 8017240:	6819      	ldr	r1, [r3, #0]
 8017242:	f7e8 ffcd 	bl	80001e0 <strcmp>
 8017246:	bb30      	cbnz	r0, 8017296 <rmw_init_options_fini+0x6e>
 8017248:	4b16      	ldr	r3, [pc, #88]	; (80172a4 <rmw_init_options_fini+0x7c>)
 801724a:	6819      	ldr	r1, [r3, #0]
 801724c:	b1f9      	cbz	r1, 801728e <rmw_init_options_fini+0x66>
 801724e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017250:	e001      	b.n	8017256 <rmw_init_options_fini+0x2e>
 8017252:	6889      	ldr	r1, [r1, #8]
 8017254:	b1d9      	cbz	r1, 801728e <rmw_init_options_fini+0x66>
 8017256:	68cb      	ldr	r3, [r1, #12]
 8017258:	429a      	cmp	r2, r3
 801725a:	d1fa      	bne.n	8017252 <rmw_init_options_fini+0x2a>
 801725c:	4811      	ldr	r0, [pc, #68]	; (80172a4 <rmw_init_options_fini+0x7c>)
 801725e:	f7ff feeb 	bl	8017038 <put_memory>
 8017262:	466d      	mov	r5, sp
 8017264:	4668      	mov	r0, sp
 8017266:	f7ff fdf9 	bl	8016e5c <rmw_get_zero_initialized_init_options>
 801726a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801726c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801726e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017276:	e895 0003 	ldmia.w	r5, {r0, r1}
 801727a:	e884 0003 	stmia.w	r4, {r0, r1}
 801727e:	2300      	movs	r3, #0
 8017280:	4618      	mov	r0, r3
 8017282:	b00f      	add	sp, #60	; 0x3c
 8017284:	bd30      	pop	{r4, r5, pc}
 8017286:	230b      	movs	r3, #11
 8017288:	4618      	mov	r0, r3
 801728a:	b00f      	add	sp, #60	; 0x3c
 801728c:	bd30      	pop	{r4, r5, pc}
 801728e:	2301      	movs	r3, #1
 8017290:	4618      	mov	r0, r3
 8017292:	b00f      	add	sp, #60	; 0x3c
 8017294:	bd30      	pop	{r4, r5, pc}
 8017296:	230c      	movs	r3, #12
 8017298:	e7f2      	b.n	8017280 <rmw_init_options_fini+0x58>
 801729a:	230b      	movs	r3, #11
 801729c:	4618      	mov	r0, r3
 801729e:	4770      	bx	lr
 80172a0:	0801bf4c 	.word	0x0801bf4c
 80172a4:	2000d4fc 	.word	0x2000d4fc

080172a8 <rmw_init>:
 80172a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172ac:	b082      	sub	sp, #8
 80172ae:	2800      	cmp	r0, #0
 80172b0:	f000 80d6 	beq.w	8017460 <rmw_init+0x1b8>
 80172b4:	460e      	mov	r6, r1
 80172b6:	2900      	cmp	r1, #0
 80172b8:	f000 80d2 	beq.w	8017460 <rmw_init+0x1b8>
 80172bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80172be:	4605      	mov	r5, r0
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	f000 80cd 	beq.w	8017460 <rmw_init+0x1b8>
 80172c6:	4b79      	ldr	r3, [pc, #484]	; (80174ac <rmw_init+0x204>)
 80172c8:	6880      	ldr	r0, [r0, #8]
 80172ca:	f8d3 9000 	ldr.w	r9, [r3]
 80172ce:	b128      	cbz	r0, 80172dc <rmw_init+0x34>
 80172d0:	4649      	mov	r1, r9
 80172d2:	f7e8 ff85 	bl	80001e0 <strcmp>
 80172d6:	2800      	cmp	r0, #0
 80172d8:	f040 80cc 	bne.w	8017474 <rmw_init+0x1cc>
 80172dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80172e0:	68eb      	ldr	r3, [r5, #12]
 80172e2:	61f3      	str	r3, [r6, #28]
 80172e4:	e9c6 0100 	strd	r0, r1, [r6]
 80172e8:	2201      	movs	r2, #1
 80172ea:	4971      	ldr	r1, [pc, #452]	; (80174b0 <rmw_init+0x208>)
 80172ec:	4871      	ldr	r0, [pc, #452]	; (80174b4 <rmw_init+0x20c>)
 80172ee:	f8c6 9008 	str.w	r9, [r6, #8]
 80172f2:	f7f9 f82b 	bl	801034c <rmw_uxrce_init_session_memory>
 80172f6:	4870      	ldr	r0, [pc, #448]	; (80174b8 <rmw_init+0x210>)
 80172f8:	4970      	ldr	r1, [pc, #448]	; (80174bc <rmw_init+0x214>)
 80172fa:	2204      	movs	r2, #4
 80172fc:	f7f9 f860 	bl	80103c0 <rmw_uxrce_init_static_input_buffer_memory>
 8017300:	486c      	ldr	r0, [pc, #432]	; (80174b4 <rmw_init+0x20c>)
 8017302:	f7ff fe89 	bl	8017018 <get_memory>
 8017306:	2800      	cmp	r0, #0
 8017308:	f000 80af 	beq.w	801746a <rmw_init+0x1c2>
 801730c:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 801730e:	68c4      	ldr	r4, [r0, #12]
 8017310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017312:	7c39      	ldrb	r1, [r7, #16]
 8017314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017318:	9001      	str	r0, [sp, #4]
 801731a:	6a38      	ldr	r0, [r7, #32]
 801731c:	9000      	str	r0, [sp, #0]
 801731e:	f104 0a10 	add.w	sl, r4, #16
 8017322:	4650      	mov	r0, sl
 8017324:	f000 ffe8 	bl	80182f8 <uxr_set_custom_transport_callbacks>
 8017328:	f241 5294 	movw	r2, #5524	; 0x1594
 801732c:	f241 5398 	movw	r3, #5528	; 0x1598
 8017330:	f04f 0800 	mov.w	r8, #0
 8017334:	f241 509c 	movw	r0, #5532	; 0x159c
 8017338:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 801733c:	f844 8002 	str.w	r8, [r4, r2]
 8017340:	f844 8003 	str.w	r8, [r4, r3]
 8017344:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017348:	f504 735e 	add.w	r3, r4, #888	; 0x378
 801734c:	f844 8000 	str.w	r8, [r4, r0]
 8017350:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 8017354:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8017358:	4859      	ldr	r0, [pc, #356]	; (80174c0 <rmw_init+0x218>)
 801735a:	f8c1 8000 	str.w	r8, [r1]
 801735e:	2201      	movs	r2, #1
 8017360:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 8017364:	4957      	ldr	r1, [pc, #348]	; (80174c4 <rmw_init+0x21c>)
 8017366:	64b4      	str	r4, [r6, #72]	; 0x48
 8017368:	f7f8 ffd6 	bl	8010318 <rmw_uxrce_init_node_memory>
 801736c:	4956      	ldr	r1, [pc, #344]	; (80174c8 <rmw_init+0x220>)
 801736e:	4857      	ldr	r0, [pc, #348]	; (80174cc <rmw_init+0x224>)
 8017370:	2205      	movs	r2, #5
 8017372:	f7f8 ffb7 	bl	80102e4 <rmw_uxrce_init_subscription_memory>
 8017376:	4956      	ldr	r1, [pc, #344]	; (80174d0 <rmw_init+0x228>)
 8017378:	4856      	ldr	r0, [pc, #344]	; (80174d4 <rmw_init+0x22c>)
 801737a:	220a      	movs	r2, #10
 801737c:	f7f8 ff98 	bl	80102b0 <rmw_uxrce_init_publisher_memory>
 8017380:	4955      	ldr	r1, [pc, #340]	; (80174d8 <rmw_init+0x230>)
 8017382:	4856      	ldr	r0, [pc, #344]	; (80174dc <rmw_init+0x234>)
 8017384:	2201      	movs	r2, #1
 8017386:	f7f8 ff5f 	bl	8010248 <rmw_uxrce_init_service_memory>
 801738a:	4955      	ldr	r1, [pc, #340]	; (80174e0 <rmw_init+0x238>)
 801738c:	4855      	ldr	r0, [pc, #340]	; (80174e4 <rmw_init+0x23c>)
 801738e:	2201      	movs	r2, #1
 8017390:	f7f8 ff74 	bl	801027c <rmw_uxrce_init_client_memory>
 8017394:	4954      	ldr	r1, [pc, #336]	; (80174e8 <rmw_init+0x240>)
 8017396:	4855      	ldr	r0, [pc, #340]	; (80174ec <rmw_init+0x244>)
 8017398:	220f      	movs	r2, #15
 801739a:	f7f8 fff5 	bl	8010388 <rmw_uxrce_init_topic_memory>
 801739e:	4954      	ldr	r1, [pc, #336]	; (80174f0 <rmw_init+0x248>)
 80173a0:	4854      	ldr	r0, [pc, #336]	; (80174f4 <rmw_init+0x24c>)
 80173a2:	2203      	movs	r2, #3
 80173a4:	f7f9 f82a 	bl	80103fc <rmw_uxrce_init_init_options_impl_memory>
 80173a8:	4953      	ldr	r1, [pc, #332]	; (80174f8 <rmw_init+0x250>)
 80173aa:	4854      	ldr	r0, [pc, #336]	; (80174fc <rmw_init+0x254>)
 80173ac:	2204      	movs	r2, #4
 80173ae:	f7f9 f83f 	bl	8010430 <rmw_uxrce_init_wait_set_memory>
 80173b2:	4953      	ldr	r1, [pc, #332]	; (8017500 <rmw_init+0x258>)
 80173b4:	4853      	ldr	r0, [pc, #332]	; (8017504 <rmw_init+0x25c>)
 80173b6:	2204      	movs	r2, #4
 80173b8:	f7f9 f856 	bl	8010468 <rmw_uxrce_init_guard_condition_memory>
 80173bc:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80173be:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 80173c0:	4642      	mov	r2, r8
 80173c2:	f000 fbbd 	bl	8017b40 <rmw_uxrce_transport_init>
 80173c6:	4607      	mov	r7, r0
 80173c8:	2800      	cmp	r0, #0
 80173ca:	d158      	bne.n	801747e <rmw_init+0x1d6>
 80173cc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80173ce:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80173d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80173d4:	4628      	mov	r0, r5
 80173d6:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80173da:	f7fa fec5 	bl	8012168 <uxr_init_session>
 80173de:	494a      	ldr	r1, [pc, #296]	; (8017508 <rmw_init+0x260>)
 80173e0:	4622      	mov	r2, r4
 80173e2:	4628      	mov	r0, r5
 80173e4:	f7fa fee2 	bl	80121ac <uxr_set_topic_callback>
 80173e8:	4948      	ldr	r1, [pc, #288]	; (801750c <rmw_init+0x264>)
 80173ea:	463a      	mov	r2, r7
 80173ec:	4628      	mov	r0, r5
 80173ee:	f7fa fed9 	bl	80121a4 <uxr_set_status_callback>
 80173f2:	4947      	ldr	r1, [pc, #284]	; (8017510 <rmw_init+0x268>)
 80173f4:	463a      	mov	r2, r7
 80173f6:	4628      	mov	r0, r5
 80173f8:	f7fa fedc 	bl	80121b4 <uxr_set_request_callback>
 80173fc:	4945      	ldr	r1, [pc, #276]	; (8017514 <rmw_init+0x26c>)
 80173fe:	463a      	mov	r2, r7
 8017400:	4628      	mov	r0, r5
 8017402:	f7fa fedb 	bl	80121bc <uxr_set_reply_callback>
 8017406:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801740a:	2304      	movs	r3, #4
 801740c:	0092      	lsls	r2, r2, #2
 801740e:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8017412:	4628      	mov	r0, r5
 8017414:	f7fa ff12 	bl	801223c <uxr_create_input_reliable_stream>
 8017418:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801741c:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8017420:	0092      	lsls	r2, r2, #2
 8017422:	2304      	movs	r3, #4
 8017424:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8017428:	4628      	mov	r0, r5
 801742a:	f7fa fedd 	bl	80121e8 <uxr_create_output_reliable_stream>
 801742e:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8017432:	4628      	mov	r0, r5
 8017434:	f7fa fefc 	bl	8012230 <uxr_create_input_best_effort_stream>
 8017438:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 801743c:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8017440:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017444:	4628      	mov	r0, r5
 8017446:	3114      	adds	r1, #20
 8017448:	f7fa febc 	bl	80121c4 <uxr_create_output_best_effort_stream>
 801744c:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8017450:	4628      	mov	r0, r5
 8017452:	f7fb fb4d 	bl	8012af0 <uxr_create_session>
 8017456:	b1f8      	cbz	r0, 8017498 <rmw_init+0x1f0>
 8017458:	4638      	mov	r0, r7
 801745a:	b002      	add	sp, #8
 801745c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017460:	270b      	movs	r7, #11
 8017462:	4638      	mov	r0, r7
 8017464:	b002      	add	sp, #8
 8017466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801746a:	2701      	movs	r7, #1
 801746c:	4638      	mov	r0, r7
 801746e:	b002      	add	sp, #8
 8017470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017474:	270c      	movs	r7, #12
 8017476:	4638      	mov	r0, r7
 8017478:	b002      	add	sp, #8
 801747a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801747e:	4650      	mov	r0, sl
 8017480:	f000 ff7a 	bl	8018378 <uxr_close_custom_transport>
 8017484:	480b      	ldr	r0, [pc, #44]	; (80174b4 <rmw_init+0x20c>)
 8017486:	4621      	mov	r1, r4
 8017488:	f7ff fdd6 	bl	8017038 <put_memory>
 801748c:	4638      	mov	r0, r7
 801748e:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 8017492:	b002      	add	sp, #8
 8017494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017498:	4650      	mov	r0, sl
 801749a:	f000 ff6d 	bl	8018378 <uxr_close_custom_transport>
 801749e:	4805      	ldr	r0, [pc, #20]	; (80174b4 <rmw_init+0x20c>)
 80174a0:	4621      	mov	r1, r4
 80174a2:	f7ff fdc9 	bl	8017038 <put_memory>
 80174a6:	64b7      	str	r7, [r6, #72]	; 0x48
 80174a8:	2701      	movs	r7, #1
 80174aa:	e7d5      	b.n	8017458 <rmw_init+0x1b0>
 80174ac:	0801bf4c 	.word	0x0801bf4c
 80174b0:	2000d5d8 	.word	0x2000d5d8
 80174b4:	2000d3a8 	.word	0x2000d3a8
 80174b8:	2000a200 	.word	0x2000a200
 80174bc:	2000afe0 	.word	0x2000afe0
 80174c0:	2000d1d4 	.word	0x2000d1d4
 80174c4:	2000d3b8 	.word	0x2000d3b8
 80174c8:	2000ab08 	.word	0x2000ab08
 80174cc:	2000d46c 	.word	0x2000d46c
 80174d0:	2000a220 	.word	0x2000a220
 80174d4:	2000a210 	.word	0x2000a210
 80174d8:	2000d510 	.word	0x2000d510
 80174dc:	2000d45c 	.word	0x2000d45c
 80174e0:	2000af18 	.word	0x2000af18
 80174e4:	2000aa90 	.word	0x2000aa90
 80174e8:	2000d1e4 	.word	0x2000d1e4
 80174ec:	2000d398 	.word	0x2000d398
 80174f0:	2000d150 	.word	0x2000d150
 80174f4:	2000d4fc 	.word	0x2000d4fc
 80174f8:	2000d0e0 	.word	0x2000d0e0
 80174fc:	2000eb80 	.word	0x2000eb80
 8017500:	2000d47c 	.word	0x2000d47c
 8017504:	2000d388 	.word	0x2000d388
 8017508:	080198c9 	.word	0x080198c9
 801750c:	080198c1 	.word	0x080198c1
 8017510:	0801995d 	.word	0x0801995d
 8017514:	080199f5 	.word	0x080199f5

08017518 <rmw_context_fini>:
 8017518:	4b17      	ldr	r3, [pc, #92]	; (8017578 <rmw_context_fini+0x60>)
 801751a:	b570      	push	{r4, r5, r6, lr}
 801751c:	681c      	ldr	r4, [r3, #0]
 801751e:	4605      	mov	r5, r0
 8017520:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8017522:	b33c      	cbz	r4, 8017574 <rmw_context_fini+0x5c>
 8017524:	2600      	movs	r6, #0
 8017526:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 801752a:	691a      	ldr	r2, [r3, #16]
 801752c:	4282      	cmp	r2, r0
 801752e:	d018      	beq.n	8017562 <rmw_context_fini+0x4a>
 8017530:	2c00      	cmp	r4, #0
 8017532:	d1f8      	bne.n	8017526 <rmw_context_fini+0xe>
 8017534:	b188      	cbz	r0, 801755a <rmw_context_fini+0x42>
 8017536:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801753a:	789b      	ldrb	r3, [r3, #2]
 801753c:	2b01      	cmp	r3, #1
 801753e:	bf14      	ite	ne
 8017540:	210a      	movne	r1, #10
 8017542:	2100      	moveq	r1, #0
 8017544:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017548:	f7fb fc94 	bl	8012e74 <uxr_delete_session_retries>
 801754c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801754e:	f7f8 ffa5 	bl	801049c <rmw_uxrce_fini_session_memory>
 8017552:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8017554:	3010      	adds	r0, #16
 8017556:	f000 ff0f 	bl	8018378 <uxr_close_custom_transport>
 801755a:	2300      	movs	r3, #0
 801755c:	4630      	mov	r0, r6
 801755e:	64ab      	str	r3, [r5, #72]	; 0x48
 8017560:	bd70      	pop	{r4, r5, r6, pc}
 8017562:	f103 0018 	add.w	r0, r3, #24
 8017566:	f000 f91f 	bl	80177a8 <rmw_destroy_node>
 801756a:	4606      	mov	r6, r0
 801756c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801756e:	2c00      	cmp	r4, #0
 8017570:	d1d9      	bne.n	8017526 <rmw_context_fini+0xe>
 8017572:	e7df      	b.n	8017534 <rmw_context_fini+0x1c>
 8017574:	4626      	mov	r6, r4
 8017576:	e7dd      	b.n	8017534 <rmw_context_fini+0x1c>
 8017578:	2000d1d4 	.word	0x2000d1d4

0801757c <create_topic>:
 801757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017580:	4605      	mov	r5, r0
 8017582:	b084      	sub	sp, #16
 8017584:	482b      	ldr	r0, [pc, #172]	; (8017634 <create_topic+0xb8>)
 8017586:	460f      	mov	r7, r1
 8017588:	4616      	mov	r6, r2
 801758a:	f7ff fd45 	bl	8017018 <get_memory>
 801758e:	4604      	mov	r4, r0
 8017590:	2800      	cmp	r0, #0
 8017592:	d036      	beq.n	8017602 <create_topic+0x86>
 8017594:	692a      	ldr	r2, [r5, #16]
 8017596:	68c4      	ldr	r4, [r0, #12]
 8017598:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801763c <create_topic+0xc0>
 801759c:	61a5      	str	r5, [r4, #24]
 801759e:	f241 5396 	movw	r3, #5526	; 0x1596
 80175a2:	6166      	str	r6, [r4, #20]
 80175a4:	5ad0      	ldrh	r0, [r2, r3]
 80175a6:	1c41      	adds	r1, r0, #1
 80175a8:	52d1      	strh	r1, [r2, r3]
 80175aa:	2102      	movs	r1, #2
 80175ac:	f7fa fbfa 	bl	8011da4 <uxr_object_id>
 80175b0:	4641      	mov	r1, r8
 80175b2:	6120      	str	r0, [r4, #16]
 80175b4:	223c      	movs	r2, #60	; 0x3c
 80175b6:	4638      	mov	r0, r7
 80175b8:	f7f9 f944 	bl	8010844 <generate_topic_name>
 80175bc:	4607      	mov	r7, r0
 80175be:	b320      	cbz	r0, 801760a <create_topic+0x8e>
 80175c0:	4f1d      	ldr	r7, [pc, #116]	; (8017638 <create_topic+0xbc>)
 80175c2:	4630      	mov	r0, r6
 80175c4:	4639      	mov	r1, r7
 80175c6:	2264      	movs	r2, #100	; 0x64
 80175c8:	f7f9 f90c 	bl	80107e4 <generate_type_name>
 80175cc:	4606      	mov	r6, r0
 80175ce:	b320      	cbz	r0, 801761a <create_topic+0x9e>
 80175d0:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 80175d4:	2106      	movs	r1, #6
 80175d6:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80175da:	9701      	str	r7, [sp, #4]
 80175dc:	f8cd 8000 	str.w	r8, [sp]
 80175e0:	9102      	str	r1, [sp, #8]
 80175e2:	6811      	ldr	r1, [r2, #0]
 80175e4:	6922      	ldr	r2, [r4, #16]
 80175e6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80175ea:	f7fa fa57 	bl	8011a9c <uxr_buffer_create_topic_bin>
 80175ee:	4602      	mov	r2, r0
 80175f0:	6928      	ldr	r0, [r5, #16]
 80175f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80175f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80175fa:	f7f9 f8bd 	bl	8010778 <run_xrce_session>
 80175fe:	4605      	mov	r5, r0
 8017600:	b198      	cbz	r0, 801762a <create_topic+0xae>
 8017602:	4620      	mov	r0, r4
 8017604:	b004      	add	sp, #16
 8017606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801760a:	4620      	mov	r0, r4
 801760c:	f7f8 ffbc 	bl	8010588 <rmw_uxrce_fini_topic_memory>
 8017610:	463c      	mov	r4, r7
 8017612:	4620      	mov	r0, r4
 8017614:	b004      	add	sp, #16
 8017616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801761a:	4620      	mov	r0, r4
 801761c:	f7f8 ffb4 	bl	8010588 <rmw_uxrce_fini_topic_memory>
 8017620:	4634      	mov	r4, r6
 8017622:	4620      	mov	r0, r4
 8017624:	b004      	add	sp, #16
 8017626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801762a:	4620      	mov	r0, r4
 801762c:	f7f8 ffac 	bl	8010588 <rmw_uxrce_fini_topic_memory>
 8017630:	462c      	mov	r4, r5
 8017632:	e7e6      	b.n	8017602 <create_topic+0x86>
 8017634:	2000d398 	.word	0x2000d398
 8017638:	20009fc0 	.word	0x20009fc0
 801763c:	20009f84 	.word	0x20009f84

08017640 <destroy_topic>:
 8017640:	b538      	push	{r3, r4, r5, lr}
 8017642:	6985      	ldr	r5, [r0, #24]
 8017644:	b1d5      	cbz	r5, 801767c <destroy_topic+0x3c>
 8017646:	4604      	mov	r4, r0
 8017648:	6928      	ldr	r0, [r5, #16]
 801764a:	6922      	ldr	r2, [r4, #16]
 801764c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017650:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017654:	6819      	ldr	r1, [r3, #0]
 8017656:	f7fa f9a3 	bl	80119a0 <uxr_buffer_delete_entity>
 801765a:	4602      	mov	r2, r0
 801765c:	6928      	ldr	r0, [r5, #16]
 801765e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017662:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017666:	f7f9 f887 	bl	8010778 <run_xrce_session>
 801766a:	2800      	cmp	r0, #0
 801766c:	4620      	mov	r0, r4
 801766e:	bf14      	ite	ne
 8017670:	2400      	movne	r4, #0
 8017672:	2402      	moveq	r4, #2
 8017674:	f7f8 ff88 	bl	8010588 <rmw_uxrce_fini_topic_memory>
 8017678:	4620      	mov	r0, r4
 801767a:	bd38      	pop	{r3, r4, r5, pc}
 801767c:	2401      	movs	r4, #1
 801767e:	4620      	mov	r0, r4
 8017680:	bd38      	pop	{r3, r4, r5, pc}
 8017682:	bf00      	nop

08017684 <create_node>:
 8017684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017688:	b083      	sub	sp, #12
 801768a:	2b00      	cmp	r3, #0
 801768c:	d05f      	beq.n	801774e <create_node+0xca>
 801768e:	4606      	mov	r6, r0
 8017690:	4835      	ldr	r0, [pc, #212]	; (8017768 <create_node+0xe4>)
 8017692:	460f      	mov	r7, r1
 8017694:	4690      	mov	r8, r2
 8017696:	461d      	mov	r5, r3
 8017698:	f7ff fcbe 	bl	8017018 <get_memory>
 801769c:	2800      	cmp	r0, #0
 801769e:	d056      	beq.n	801774e <create_node+0xca>
 80176a0:	68c4      	ldr	r4, [r0, #12]
 80176a2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80176a4:	6123      	str	r3, [r4, #16]
 80176a6:	f7ff fd1f 	bl	80170e8 <rmw_get_implementation_identifier>
 80176aa:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80176ae:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80176b2:	f8c4 9020 	str.w	r9, [r4, #32]
 80176b6:	4630      	mov	r0, r6
 80176b8:	f7e8 fd9c 	bl	80001f4 <strlen>
 80176bc:	1c42      	adds	r2, r0, #1
 80176be:	2a3c      	cmp	r2, #60	; 0x3c
 80176c0:	f104 0518 	add.w	r5, r4, #24
 80176c4:	d840      	bhi.n	8017748 <create_node+0xc4>
 80176c6:	4648      	mov	r0, r9
 80176c8:	4631      	mov	r1, r6
 80176ca:	f104 0968 	add.w	r9, r4, #104	; 0x68
 80176ce:	f003 f846 	bl	801a75e <memcpy>
 80176d2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80176d6:	4638      	mov	r0, r7
 80176d8:	f7e8 fd8c 	bl	80001f4 <strlen>
 80176dc:	1c42      	adds	r2, r0, #1
 80176de:	2a3c      	cmp	r2, #60	; 0x3c
 80176e0:	d832      	bhi.n	8017748 <create_node+0xc4>
 80176e2:	4639      	mov	r1, r7
 80176e4:	4648      	mov	r0, r9
 80176e6:	f003 f83a 	bl	801a75e <memcpy>
 80176ea:	f241 5394 	movw	r3, #5524	; 0x1594
 80176ee:	6922      	ldr	r2, [r4, #16]
 80176f0:	5ad0      	ldrh	r0, [r2, r3]
 80176f2:	2101      	movs	r1, #1
 80176f4:	eb00 0c01 	add.w	ip, r0, r1
 80176f8:	f822 c003 	strh.w	ip, [r2, r3]
 80176fc:	f7fa fb52 	bl	8011da4 <uxr_object_id>
 8017700:	6160      	str	r0, [r4, #20]
 8017702:	783b      	ldrb	r3, [r7, #0]
 8017704:	2b2f      	cmp	r3, #47	; 0x2f
 8017706:	d127      	bne.n	8017758 <create_node+0xd4>
 8017708:	787b      	ldrb	r3, [r7, #1]
 801770a:	bb2b      	cbnz	r3, 8017758 <create_node+0xd4>
 801770c:	4a17      	ldr	r2, [pc, #92]	; (801776c <create_node+0xe8>)
 801770e:	4818      	ldr	r0, [pc, #96]	; (8017770 <create_node+0xec>)
 8017710:	4633      	mov	r3, r6
 8017712:	213c      	movs	r1, #60	; 0x3c
 8017714:	f002 fda4 	bl	801a260 <sniprintf>
 8017718:	6920      	ldr	r0, [r4, #16]
 801771a:	4b15      	ldr	r3, [pc, #84]	; (8017770 <create_node+0xec>)
 801771c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8017720:	9300      	str	r3, [sp, #0]
 8017722:	2306      	movs	r3, #6
 8017724:	9301      	str	r3, [sp, #4]
 8017726:	6811      	ldr	r1, [r2, #0]
 8017728:	6962      	ldr	r2, [r4, #20]
 801772a:	fa1f f388 	uxth.w	r3, r8
 801772e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017732:	f7fa f981 	bl	8011a38 <uxr_buffer_create_participant_bin>
 8017736:	4602      	mov	r2, r0
 8017738:	6920      	ldr	r0, [r4, #16]
 801773a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801773e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8017742:	f7f9 f819 	bl	8010778 <run_xrce_session>
 8017746:	b918      	cbnz	r0, 8017750 <create_node+0xcc>
 8017748:	4628      	mov	r0, r5
 801774a:	f7f8 fead 	bl	80104a8 <rmw_uxrce_fini_node_memory>
 801774e:	2500      	movs	r5, #0
 8017750:	4628      	mov	r0, r5
 8017752:	b003      	add	sp, #12
 8017754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017758:	4a06      	ldr	r2, [pc, #24]	; (8017774 <create_node+0xf0>)
 801775a:	9600      	str	r6, [sp, #0]
 801775c:	463b      	mov	r3, r7
 801775e:	213c      	movs	r1, #60	; 0x3c
 8017760:	4803      	ldr	r0, [pc, #12]	; (8017770 <create_node+0xec>)
 8017762:	f002 fd7d 	bl	801a260 <sniprintf>
 8017766:	e7d7      	b.n	8017718 <create_node+0x94>
 8017768:	2000d1d4 	.word	0x2000d1d4
 801776c:	0801ba44 	.word	0x0801ba44
 8017770:	2000a024 	.word	0x2000a024
 8017774:	0801ba84 	.word	0x0801ba84

08017778 <rmw_create_node>:
 8017778:	b199      	cbz	r1, 80177a2 <rmw_create_node+0x2a>
 801777a:	b430      	push	{r4, r5}
 801777c:	4615      	mov	r5, r2
 801777e:	461a      	mov	r2, r3
 8017780:	780b      	ldrb	r3, [r1, #0]
 8017782:	460c      	mov	r4, r1
 8017784:	b153      	cbz	r3, 801779c <rmw_create_node+0x24>
 8017786:	b14d      	cbz	r5, 801779c <rmw_create_node+0x24>
 8017788:	782b      	ldrb	r3, [r5, #0]
 801778a:	b13b      	cbz	r3, 801779c <rmw_create_node+0x24>
 801778c:	b902      	cbnz	r2, 8017790 <rmw_create_node+0x18>
 801778e:	69c2      	ldr	r2, [r0, #28]
 8017790:	4603      	mov	r3, r0
 8017792:	4629      	mov	r1, r5
 8017794:	4620      	mov	r0, r4
 8017796:	bc30      	pop	{r4, r5}
 8017798:	f7ff bf74 	b.w	8017684 <create_node>
 801779c:	2000      	movs	r0, #0
 801779e:	bc30      	pop	{r4, r5}
 80177a0:	4770      	bx	lr
 80177a2:	2000      	movs	r0, #0
 80177a4:	4770      	bx	lr
 80177a6:	bf00      	nop

080177a8 <rmw_destroy_node>:
 80177a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177aa:	2800      	cmp	r0, #0
 80177ac:	d066      	beq.n	801787c <rmw_destroy_node+0xd4>
 80177ae:	4607      	mov	r7, r0
 80177b0:	6800      	ldr	r0, [r0, #0]
 80177b2:	b128      	cbz	r0, 80177c0 <rmw_destroy_node+0x18>
 80177b4:	4b34      	ldr	r3, [pc, #208]	; (8017888 <rmw_destroy_node+0xe0>)
 80177b6:	6819      	ldr	r1, [r3, #0]
 80177b8:	f7e8 fd12 	bl	80001e0 <strcmp>
 80177bc:	2800      	cmp	r0, #0
 80177be:	d15d      	bne.n	801787c <rmw_destroy_node+0xd4>
 80177c0:	687c      	ldr	r4, [r7, #4]
 80177c2:	2c00      	cmp	r4, #0
 80177c4:	d05a      	beq.n	801787c <rmw_destroy_node+0xd4>
 80177c6:	4b31      	ldr	r3, [pc, #196]	; (801788c <rmw_destroy_node+0xe4>)
 80177c8:	681d      	ldr	r5, [r3, #0]
 80177ca:	2d00      	cmp	r5, #0
 80177cc:	d059      	beq.n	8017882 <rmw_destroy_node+0xda>
 80177ce:	2600      	movs	r6, #0
 80177d0:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80177d4:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80177d8:	429c      	cmp	r4, r3
 80177da:	d047      	beq.n	801786c <rmw_destroy_node+0xc4>
 80177dc:	2d00      	cmp	r5, #0
 80177de:	d1f7      	bne.n	80177d0 <rmw_destroy_node+0x28>
 80177e0:	4b2b      	ldr	r3, [pc, #172]	; (8017890 <rmw_destroy_node+0xe8>)
 80177e2:	681d      	ldr	r5, [r3, #0]
 80177e4:	b15d      	cbz	r5, 80177fe <rmw_destroy_node+0x56>
 80177e6:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80177ea:	6a0b      	ldr	r3, [r1, #32]
 80177ec:	429c      	cmp	r4, r3
 80177ee:	d1f9      	bne.n	80177e4 <rmw_destroy_node+0x3c>
 80177f0:	317c      	adds	r1, #124	; 0x7c
 80177f2:	4638      	mov	r0, r7
 80177f4:	f7f8 fc76 	bl	80100e4 <rmw_destroy_subscription>
 80177f8:	4606      	mov	r6, r0
 80177fa:	2d00      	cmp	r5, #0
 80177fc:	d1f3      	bne.n	80177e6 <rmw_destroy_node+0x3e>
 80177fe:	4b25      	ldr	r3, [pc, #148]	; (8017894 <rmw_destroy_node+0xec>)
 8017800:	681d      	ldr	r5, [r3, #0]
 8017802:	b15d      	cbz	r5, 801781c <rmw_destroy_node+0x74>
 8017804:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8017808:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801780a:	429c      	cmp	r4, r3
 801780c:	d1f9      	bne.n	8017802 <rmw_destroy_node+0x5a>
 801780e:	317c      	adds	r1, #124	; 0x7c
 8017810:	4638      	mov	r0, r7
 8017812:	f000 f951 	bl	8017ab8 <rmw_destroy_service>
 8017816:	4606      	mov	r6, r0
 8017818:	2d00      	cmp	r5, #0
 801781a:	d1f3      	bne.n	8017804 <rmw_destroy_node+0x5c>
 801781c:	4b1e      	ldr	r3, [pc, #120]	; (8017898 <rmw_destroy_node+0xf0>)
 801781e:	681d      	ldr	r5, [r3, #0]
 8017820:	b15d      	cbz	r5, 801783a <rmw_destroy_node+0x92>
 8017822:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8017826:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8017828:	429c      	cmp	r4, r3
 801782a:	d1f9      	bne.n	8017820 <rmw_destroy_node+0x78>
 801782c:	317c      	adds	r1, #124	; 0x7c
 801782e:	4638      	mov	r0, r7
 8017830:	f7ff fc16 	bl	8017060 <rmw_destroy_client>
 8017834:	4606      	mov	r6, r0
 8017836:	2d00      	cmp	r5, #0
 8017838:	d1f3      	bne.n	8017822 <rmw_destroy_node+0x7a>
 801783a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 801783e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017842:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017846:	6819      	ldr	r1, [r3, #0]
 8017848:	f7fa f8aa 	bl	80119a0 <uxr_buffer_delete_entity>
 801784c:	4602      	mov	r2, r0
 801784e:	6920      	ldr	r0, [r4, #16]
 8017850:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017854:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017858:	f7f8 ff8e 	bl	8010778 <run_xrce_session>
 801785c:	2800      	cmp	r0, #0
 801785e:	bf08      	it	eq
 8017860:	2602      	moveq	r6, #2
 8017862:	4638      	mov	r0, r7
 8017864:	f7f8 fe20 	bl	80104a8 <rmw_uxrce_fini_node_memory>
 8017868:	4630      	mov	r0, r6
 801786a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801786c:	3184      	adds	r1, #132	; 0x84
 801786e:	4638      	mov	r0, r7
 8017870:	f7f8 fb06 	bl	800fe80 <rmw_destroy_publisher>
 8017874:	4606      	mov	r6, r0
 8017876:	2d00      	cmp	r5, #0
 8017878:	d1aa      	bne.n	80177d0 <rmw_destroy_node+0x28>
 801787a:	e7b1      	b.n	80177e0 <rmw_destroy_node+0x38>
 801787c:	2601      	movs	r6, #1
 801787e:	4630      	mov	r0, r6
 8017880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017882:	462e      	mov	r6, r5
 8017884:	e7ac      	b.n	80177e0 <rmw_destroy_node+0x38>
 8017886:	bf00      	nop
 8017888:	0801bf4c 	.word	0x0801bf4c
 801788c:	2000a210 	.word	0x2000a210
 8017890:	2000d46c 	.word	0x2000d46c
 8017894:	2000d45c 	.word	0x2000d45c
 8017898:	2000aa90 	.word	0x2000aa90

0801789c <rmw_node_get_graph_guard_condition>:
 801789c:	6843      	ldr	r3, [r0, #4]
 801789e:	6918      	ldr	r0, [r3, #16]
 80178a0:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80178a4:	4770      	bx	lr
 80178a6:	bf00      	nop

080178a8 <rmw_take_request>:
 80178a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178ac:	4605      	mov	r5, r0
 80178ae:	6800      	ldr	r0, [r0, #0]
 80178b0:	b089      	sub	sp, #36	; 0x24
 80178b2:	460c      	mov	r4, r1
 80178b4:	4690      	mov	r8, r2
 80178b6:	461e      	mov	r6, r3
 80178b8:	b128      	cbz	r0, 80178c6 <rmw_take_request+0x1e>
 80178ba:	4b28      	ldr	r3, [pc, #160]	; (801795c <rmw_take_request+0xb4>)
 80178bc:	6819      	ldr	r1, [r3, #0]
 80178be:	f7e8 fc8f 	bl	80001e0 <strcmp>
 80178c2:	2800      	cmp	r0, #0
 80178c4:	d146      	bne.n	8017954 <rmw_take_request+0xac>
 80178c6:	b10e      	cbz	r6, 80178cc <rmw_take_request+0x24>
 80178c8:	2300      	movs	r3, #0
 80178ca:	7033      	strb	r3, [r6, #0]
 80178cc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80178d0:	f7f8 feda 	bl	8010688 <rmw_uxrce_clean_expired_static_input_buffer>
 80178d4:	4648      	mov	r0, r9
 80178d6:	f7f8 feaf 	bl	8010638 <rmw_uxrce_find_static_input_buffer_by_owner>
 80178da:	4607      	mov	r7, r0
 80178dc:	b3b0      	cbz	r0, 801794c <rmw_take_request+0xa4>
 80178de:	68c5      	ldr	r5, [r0, #12]
 80178e0:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 80178e4:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 80178e8:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80178ec:	7423      	strb	r3, [r4, #16]
 80178ee:	e9c4 1208 	strd	r1, r2, [r4, #32]
 80178f2:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80178f6:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 80178fa:	74e2      	strb	r2, [r4, #19]
 80178fc:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017900:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8017904:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8017908:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 801790c:	61e1      	str	r1, [r4, #28]
 801790e:	6162      	str	r2, [r4, #20]
 8017910:	61a3      	str	r3, [r4, #24]
 8017912:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017916:	689b      	ldr	r3, [r3, #8]
 8017918:	4798      	blx	r3
 801791a:	6844      	ldr	r4, [r0, #4]
 801791c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8017920:	f105 0110 	add.w	r1, r5, #16
 8017924:	4668      	mov	r0, sp
 8017926:	f7f9 ffcb 	bl	80118c0 <ucdr_init_buffer>
 801792a:	68e3      	ldr	r3, [r4, #12]
 801792c:	4641      	mov	r1, r8
 801792e:	4668      	mov	r0, sp
 8017930:	4798      	blx	r3
 8017932:	4639      	mov	r1, r7
 8017934:	4604      	mov	r4, r0
 8017936:	480a      	ldr	r0, [pc, #40]	; (8017960 <rmw_take_request+0xb8>)
 8017938:	f7ff fb7e 	bl	8017038 <put_memory>
 801793c:	b106      	cbz	r6, 8017940 <rmw_take_request+0x98>
 801793e:	7034      	strb	r4, [r6, #0]
 8017940:	f084 0001 	eor.w	r0, r4, #1
 8017944:	b2c0      	uxtb	r0, r0
 8017946:	b009      	add	sp, #36	; 0x24
 8017948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801794c:	2001      	movs	r0, #1
 801794e:	b009      	add	sp, #36	; 0x24
 8017950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017954:	200c      	movs	r0, #12
 8017956:	b009      	add	sp, #36	; 0x24
 8017958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801795c:	0801bf4c 	.word	0x0801bf4c
 8017960:	2000a200 	.word	0x2000a200

08017964 <rmw_send_response>:
 8017964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017966:	4605      	mov	r5, r0
 8017968:	6800      	ldr	r0, [r0, #0]
 801796a:	b091      	sub	sp, #68	; 0x44
 801796c:	460c      	mov	r4, r1
 801796e:	4617      	mov	r7, r2
 8017970:	b128      	cbz	r0, 801797e <rmw_send_response+0x1a>
 8017972:	4b2a      	ldr	r3, [pc, #168]	; (8017a1c <rmw_send_response+0xb8>)
 8017974:	6819      	ldr	r1, [r3, #0]
 8017976:	f7e8 fc33 	bl	80001e0 <strcmp>
 801797a:	2800      	cmp	r0, #0
 801797c:	d143      	bne.n	8017a06 <rmw_send_response+0xa2>
 801797e:	4623      	mov	r3, r4
 8017980:	4626      	mov	r6, r4
 8017982:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8017986:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 801798a:	6859      	ldr	r1, [r3, #4]
 801798c:	686d      	ldr	r5, [r5, #4]
 801798e:	689a      	ldr	r2, [r3, #8]
 8017990:	78b3      	ldrb	r3, [r6, #2]
 8017992:	f894 c000 	ldrb.w	ip, [r4]
 8017996:	6966      	ldr	r6, [r4, #20]
 8017998:	f88d 3016 	strb.w	r3, [sp, #22]
 801799c:	ab02      	add	r3, sp, #8
 801799e:	f8ad e014 	strh.w	lr, [sp, #20]
 80179a2:	f88d c017 	strb.w	ip, [sp, #23]
 80179a6:	9606      	str	r6, [sp, #24]
 80179a8:	c307      	stmia	r3!, {r0, r1, r2}
 80179aa:	696b      	ldr	r3, [r5, #20]
 80179ac:	6922      	ldr	r2, [r4, #16]
 80179ae:	9207      	str	r2, [sp, #28]
 80179b0:	68db      	ldr	r3, [r3, #12]
 80179b2:	6fae      	ldr	r6, [r5, #120]	; 0x78
 80179b4:	4798      	blx	r3
 80179b6:	4603      	mov	r3, r0
 80179b8:	4638      	mov	r0, r7
 80179ba:	685c      	ldr	r4, [r3, #4]
 80179bc:	6923      	ldr	r3, [r4, #16]
 80179be:	4798      	blx	r3
 80179c0:	6933      	ldr	r3, [r6, #16]
 80179c2:	3018      	adds	r0, #24
 80179c4:	9000      	str	r0, [sp, #0]
 80179c6:	692a      	ldr	r2, [r5, #16]
 80179c8:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80179ca:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80179ce:	ab08      	add	r3, sp, #32
 80179d0:	f7fb fe1e 	bl	8013610 <uxr_prepare_output_stream>
 80179d4:	b910      	cbnz	r0, 80179dc <rmw_send_response+0x78>
 80179d6:	2001      	movs	r0, #1
 80179d8:	b011      	add	sp, #68	; 0x44
 80179da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179dc:	a902      	add	r1, sp, #8
 80179de:	a808      	add	r0, sp, #32
 80179e0:	f7fc ff34 	bl	801484c <uxr_serialize_SampleIdentity>
 80179e4:	68a3      	ldr	r3, [r4, #8]
 80179e6:	a908      	add	r1, sp, #32
 80179e8:	4638      	mov	r0, r7
 80179ea:	4798      	blx	r3
 80179ec:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80179f0:	6930      	ldr	r0, [r6, #16]
 80179f2:	2b01      	cmp	r3, #1
 80179f4:	d00a      	beq.n	8017a0c <rmw_send_response+0xa8>
 80179f6:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80179f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80179fc:	f7fb f800 	bl	8012a00 <uxr_run_session_until_confirm_delivery>
 8017a00:	2000      	movs	r0, #0
 8017a02:	b011      	add	sp, #68	; 0x44
 8017a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a06:	200c      	movs	r0, #12
 8017a08:	b011      	add	sp, #68	; 0x44
 8017a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a0c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017a10:	f7fa fc3a 	bl	8012288 <uxr_flash_output_streams>
 8017a14:	2000      	movs	r0, #0
 8017a16:	b011      	add	sp, #68	; 0x44
 8017a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a1a:	bf00      	nop
 8017a1c:	0801bf4c 	.word	0x0801bf4c

08017a20 <rmw_take_response>:
 8017a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a24:	4604      	mov	r4, r0
 8017a26:	6800      	ldr	r0, [r0, #0]
 8017a28:	b089      	sub	sp, #36	; 0x24
 8017a2a:	4688      	mov	r8, r1
 8017a2c:	4617      	mov	r7, r2
 8017a2e:	461d      	mov	r5, r3
 8017a30:	b120      	cbz	r0, 8017a3c <rmw_take_response+0x1c>
 8017a32:	4b1f      	ldr	r3, [pc, #124]	; (8017ab0 <rmw_take_response+0x90>)
 8017a34:	6819      	ldr	r1, [r3, #0]
 8017a36:	f7e8 fbd3 	bl	80001e0 <strcmp>
 8017a3a:	bb88      	cbnz	r0, 8017aa0 <rmw_take_response+0x80>
 8017a3c:	b10d      	cbz	r5, 8017a42 <rmw_take_response+0x22>
 8017a3e:	2300      	movs	r3, #0
 8017a40:	702b      	strb	r3, [r5, #0]
 8017a42:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8017a46:	f7f8 fe1f 	bl	8010688 <rmw_uxrce_clean_expired_static_input_buffer>
 8017a4a:	4648      	mov	r0, r9
 8017a4c:	f7f8 fdf4 	bl	8010638 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017a50:	4606      	mov	r6, r0
 8017a52:	b348      	cbz	r0, 8017aa8 <rmw_take_response+0x88>
 8017a54:	68c4      	ldr	r4, [r0, #12]
 8017a56:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8017a5a:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8017a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a62:	68c9      	ldr	r1, [r1, #12]
 8017a64:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8017a68:	4788      	blx	r1
 8017a6a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017a6e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8017a72:	f104 0110 	add.w	r1, r4, #16
 8017a76:	4668      	mov	r0, sp
 8017a78:	f7f9 ff22 	bl	80118c0 <ucdr_init_buffer>
 8017a7c:	4639      	mov	r1, r7
 8017a7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017a82:	4668      	mov	r0, sp
 8017a84:	4798      	blx	r3
 8017a86:	4631      	mov	r1, r6
 8017a88:	4604      	mov	r4, r0
 8017a8a:	480a      	ldr	r0, [pc, #40]	; (8017ab4 <rmw_take_response+0x94>)
 8017a8c:	f7ff fad4 	bl	8017038 <put_memory>
 8017a90:	b105      	cbz	r5, 8017a94 <rmw_take_response+0x74>
 8017a92:	702c      	strb	r4, [r5, #0]
 8017a94:	f084 0001 	eor.w	r0, r4, #1
 8017a98:	b2c0      	uxtb	r0, r0
 8017a9a:	b009      	add	sp, #36	; 0x24
 8017a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017aa0:	200c      	movs	r0, #12
 8017aa2:	b009      	add	sp, #36	; 0x24
 8017aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017aa8:	2001      	movs	r0, #1
 8017aaa:	b009      	add	sp, #36	; 0x24
 8017aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ab0:	0801bf4c 	.word	0x0801bf4c
 8017ab4:	2000a200 	.word	0x2000a200

08017ab8 <rmw_destroy_service>:
 8017ab8:	b570      	push	{r4, r5, r6, lr}
 8017aba:	b128      	cbz	r0, 8017ac8 <rmw_destroy_service+0x10>
 8017abc:	4604      	mov	r4, r0
 8017abe:	6800      	ldr	r0, [r0, #0]
 8017ac0:	460d      	mov	r5, r1
 8017ac2:	f7f8 fed9 	bl	8010878 <is_uxrce_rmw_identifier_valid>
 8017ac6:	b910      	cbnz	r0, 8017ace <rmw_destroy_service+0x16>
 8017ac8:	2401      	movs	r4, #1
 8017aca:	4620      	mov	r0, r4
 8017acc:	bd70      	pop	{r4, r5, r6, pc}
 8017ace:	6863      	ldr	r3, [r4, #4]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d0f9      	beq.n	8017ac8 <rmw_destroy_service+0x10>
 8017ad4:	2d00      	cmp	r5, #0
 8017ad6:	d0f7      	beq.n	8017ac8 <rmw_destroy_service+0x10>
 8017ad8:	6828      	ldr	r0, [r5, #0]
 8017ada:	f7f8 fecd 	bl	8010878 <is_uxrce_rmw_identifier_valid>
 8017ade:	2800      	cmp	r0, #0
 8017ae0:	d0f2      	beq.n	8017ac8 <rmw_destroy_service+0x10>
 8017ae2:	686e      	ldr	r6, [r5, #4]
 8017ae4:	2e00      	cmp	r6, #0
 8017ae6:	d0ef      	beq.n	8017ac8 <rmw_destroy_service+0x10>
 8017ae8:	6864      	ldr	r4, [r4, #4]
 8017aea:	6932      	ldr	r2, [r6, #16]
 8017aec:	6920      	ldr	r0, [r4, #16]
 8017aee:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017af2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017af6:	6819      	ldr	r1, [r3, #0]
 8017af8:	f7fa f9bc 	bl	8011e74 <uxr_buffer_cancel_data>
 8017afc:	4602      	mov	r2, r0
 8017afe:	6920      	ldr	r0, [r4, #16]
 8017b00:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017b04:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017b08:	f7f8 fe36 	bl	8010778 <run_xrce_session>
 8017b0c:	6920      	ldr	r0, [r4, #16]
 8017b0e:	6932      	ldr	r2, [r6, #16]
 8017b10:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017b14:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017b18:	6819      	ldr	r1, [r3, #0]
 8017b1a:	f7f9 ff41 	bl	80119a0 <uxr_buffer_delete_entity>
 8017b1e:	4602      	mov	r2, r0
 8017b20:	6920      	ldr	r0, [r4, #16]
 8017b22:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017b26:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017b2a:	f7f8 fe25 	bl	8010778 <run_xrce_session>
 8017b2e:	2800      	cmp	r0, #0
 8017b30:	4628      	mov	r0, r5
 8017b32:	bf14      	ite	ne
 8017b34:	2400      	movne	r4, #0
 8017b36:	2402      	moveq	r4, #2
 8017b38:	f7f8 fcfa 	bl	8010530 <rmw_uxrce_fini_service_memory>
 8017b3c:	e7c5      	b.n	8017aca <rmw_destroy_service+0x12>
 8017b3e:	bf00      	nop

08017b40 <rmw_uxrce_transport_init>:
 8017b40:	b508      	push	{r3, lr}
 8017b42:	b108      	cbz	r0, 8017b48 <rmw_uxrce_transport_init+0x8>
 8017b44:	f100 0210 	add.w	r2, r0, #16
 8017b48:	b139      	cbz	r1, 8017b5a <rmw_uxrce_transport_init+0x1a>
 8017b4a:	6949      	ldr	r1, [r1, #20]
 8017b4c:	4610      	mov	r0, r2
 8017b4e:	f000 fbdf 	bl	8018310 <uxr_init_custom_transport>
 8017b52:	f080 0001 	eor.w	r0, r0, #1
 8017b56:	b2c0      	uxtb	r0, r0
 8017b58:	bd08      	pop	{r3, pc}
 8017b5a:	4b04      	ldr	r3, [pc, #16]	; (8017b6c <rmw_uxrce_transport_init+0x2c>)
 8017b5c:	4610      	mov	r0, r2
 8017b5e:	6859      	ldr	r1, [r3, #4]
 8017b60:	f000 fbd6 	bl	8018310 <uxr_init_custom_transport>
 8017b64:	f080 0001 	eor.w	r0, r0, #1
 8017b68:	b2c0      	uxtb	r0, r0
 8017b6a:	bd08      	pop	{r3, pc}
 8017b6c:	2000a1e0 	.word	0x2000a1e0

08017b70 <rmw_wait>:
 8017b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b74:	460f      	mov	r7, r1
 8017b76:	4606      	mov	r6, r0
 8017b78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017b7a:	469a      	mov	sl, r3
 8017b7c:	4615      	mov	r5, r2
 8017b7e:	2a00      	cmp	r2, #0
 8017b80:	f000 8122 	beq.w	8017dc8 <rmw_wait+0x258>
 8017b84:	2900      	cmp	r1, #0
 8017b86:	f000 812a 	beq.w	8017dde <rmw_wait+0x26e>
 8017b8a:	e9d1 2300 	ldrd	r2, r3, [r1]
 8017b8e:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8017b92:	015c      	lsls	r4, r3, #5
 8017b94:	ebbb 0b02 	subs.w	fp, fp, r2
 8017b98:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8017b9c:	eb64 0403 	sbc.w	r4, r4, r3
 8017ba0:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8017ba4:	00a4      	lsls	r4, r4, #2
 8017ba6:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8017baa:	eb10 0b02 	adds.w	fp, r0, r2
 8017bae:	eb43 0404 	adc.w	r4, r3, r4
 8017bb2:	4aad      	ldr	r2, [pc, #692]	; (8017e68 <rmw_wait+0x2f8>)
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8017bba:	f7e9 f86f 	bl	8000c9c <__aeabi_uldivmod>
 8017bbe:	00e4      	lsls	r4, r4, #3
 8017bc0:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8017bc4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8017bc8:	eb1b 0800 	adds.w	r8, fp, r0
 8017bcc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017bd0:	eb44 0901 	adc.w	r9, r4, r1
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	4542      	cmp	r2, r8
 8017bd8:	eb73 0109 	sbcs.w	r1, r3, r9
 8017bdc:	f2c0 80f2 	blt.w	8017dc4 <rmw_wait+0x254>
 8017be0:	f7f8 fd52 	bl	8010688 <rmw_uxrce_clean_expired_static_input_buffer>
 8017be4:	4ba1      	ldr	r3, [pc, #644]	; (8017e6c <rmw_wait+0x2fc>)
 8017be6:	681c      	ldr	r4, [r3, #0]
 8017be8:	b144      	cbz	r4, 8017bfc <rmw_wait+0x8c>
 8017bea:	4623      	mov	r3, r4
 8017bec:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8017bf0:	2100      	movs	r1, #0
 8017bf2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8017bf6:	5411      	strb	r1, [r2, r0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d1fa      	bne.n	8017bf2 <rmw_wait+0x82>
 8017bfc:	b185      	cbz	r5, 8017c20 <rmw_wait+0xb0>
 8017bfe:	6829      	ldr	r1, [r5, #0]
 8017c00:	b171      	cbz	r1, 8017c20 <rmw_wait+0xb0>
 8017c02:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8017c06:	2300      	movs	r3, #0
 8017c08:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017c0c:	2001      	movs	r0, #1
 8017c0e:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017c12:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017c14:	3301      	adds	r3, #1
 8017c16:	6912      	ldr	r2, [r2, #16]
 8017c18:	4299      	cmp	r1, r3
 8017c1a:	f802 000c 	strb.w	r0, [r2, ip]
 8017c1e:	d1f6      	bne.n	8017c0e <rmw_wait+0x9e>
 8017c20:	f1ba 0f00 	cmp.w	sl, #0
 8017c24:	d011      	beq.n	8017c4a <rmw_wait+0xda>
 8017c26:	f8da 1000 	ldr.w	r1, [sl]
 8017c2a:	b171      	cbz	r1, 8017c4a <rmw_wait+0xda>
 8017c2c:	f8da e004 	ldr.w	lr, [sl, #4]
 8017c30:	2300      	movs	r3, #0
 8017c32:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017c36:	2001      	movs	r0, #1
 8017c38:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017c3c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017c3e:	3301      	adds	r3, #1
 8017c40:	6912      	ldr	r2, [r2, #16]
 8017c42:	4299      	cmp	r1, r3
 8017c44:	f802 000c 	strb.w	r0, [r2, ip]
 8017c48:	d1f6      	bne.n	8017c38 <rmw_wait+0xc8>
 8017c4a:	b186      	cbz	r6, 8017c6e <rmw_wait+0xfe>
 8017c4c:	6831      	ldr	r1, [r6, #0]
 8017c4e:	b171      	cbz	r1, 8017c6e <rmw_wait+0xfe>
 8017c50:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8017c54:	2300      	movs	r3, #0
 8017c56:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017c5a:	2001      	movs	r0, #1
 8017c5c:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017c60:	6a12      	ldr	r2, [r2, #32]
 8017c62:	3301      	adds	r3, #1
 8017c64:	6912      	ldr	r2, [r2, #16]
 8017c66:	4299      	cmp	r1, r3
 8017c68:	f802 000c 	strb.w	r0, [r2, ip]
 8017c6c:	d1f6      	bne.n	8017c5c <rmw_wait+0xec>
 8017c6e:	b34c      	cbz	r4, 8017cc4 <rmw_wait+0x154>
 8017c70:	4622      	mov	r2, r4
 8017c72:	2300      	movs	r3, #0
 8017c74:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8017c78:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8017c7c:	5c09      	ldrb	r1, [r1, r0]
 8017c7e:	440b      	add	r3, r1
 8017c80:	b2db      	uxtb	r3, r3
 8017c82:	2a00      	cmp	r2, #0
 8017c84:	d1f8      	bne.n	8017c78 <rmw_wait+0x108>
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	f000 8082 	beq.w	8017d90 <rmw_wait+0x220>
 8017c8c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8017c90:	d00d      	beq.n	8017cae <rmw_wait+0x13e>
 8017c92:	ee07 8a90 	vmov	s15, r8
 8017c96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017c9a:	ee07 3a90 	vmov	s15, r3
 8017c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017ca6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017caa:	ee17 8a90 	vmov	r8, s15
 8017cae:	f241 59a4 	movw	r9, #5540	; 0x15a4
 8017cb2:	68e0      	ldr	r0, [r4, #12]
 8017cb4:	f810 3009 	ldrb.w	r3, [r0, r9]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	f040 8093 	bne.w	8017de4 <rmw_wait+0x274>
 8017cbe:	68a4      	ldr	r4, [r4, #8]
 8017cc0:	2c00      	cmp	r4, #0
 8017cc2:	d1f6      	bne.n	8017cb2 <rmw_wait+0x142>
 8017cc4:	2d00      	cmp	r5, #0
 8017cc6:	f000 80ac 	beq.w	8017e22 <rmw_wait+0x2b2>
 8017cca:	682b      	ldr	r3, [r5, #0]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	f000 8093 	beq.w	8017df8 <rmw_wait+0x288>
 8017cd2:	2400      	movs	r4, #0
 8017cd4:	46a0      	mov	r8, r4
 8017cd6:	686b      	ldr	r3, [r5, #4]
 8017cd8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017cdc:	f7f8 fcac 	bl	8010638 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017ce0:	2800      	cmp	r0, #0
 8017ce2:	d05f      	beq.n	8017da4 <rmw_wait+0x234>
 8017ce4:	682b      	ldr	r3, [r5, #0]
 8017ce6:	3401      	adds	r4, #1
 8017ce8:	42a3      	cmp	r3, r4
 8017cea:	f04f 0801 	mov.w	r8, #1
 8017cee:	d8f2      	bhi.n	8017cd6 <rmw_wait+0x166>
 8017cf0:	f1ba 0f00 	cmp.w	sl, #0
 8017cf4:	d012      	beq.n	8017d1c <rmw_wait+0x1ac>
 8017cf6:	f8da 3000 	ldr.w	r3, [sl]
 8017cfa:	b17b      	cbz	r3, 8017d1c <rmw_wait+0x1ac>
 8017cfc:	2400      	movs	r4, #0
 8017cfe:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017d02:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017d06:	f7f8 fc97 	bl	8010638 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017d0a:	2800      	cmp	r0, #0
 8017d0c:	d052      	beq.n	8017db4 <rmw_wait+0x244>
 8017d0e:	f8da 3000 	ldr.w	r3, [sl]
 8017d12:	3401      	adds	r4, #1
 8017d14:	42a3      	cmp	r3, r4
 8017d16:	f04f 0801 	mov.w	r8, #1
 8017d1a:	d8f0      	bhi.n	8017cfe <rmw_wait+0x18e>
 8017d1c:	b1e6      	cbz	r6, 8017d58 <rmw_wait+0x1e8>
 8017d1e:	6833      	ldr	r3, [r6, #0]
 8017d20:	b1d3      	cbz	r3, 8017d58 <rmw_wait+0x1e8>
 8017d22:	2400      	movs	r4, #0
 8017d24:	6873      	ldr	r3, [r6, #4]
 8017d26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017d2a:	f7f8 fc85 	bl	8010638 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017d2e:	b160      	cbz	r0, 8017d4a <rmw_wait+0x1da>
 8017d30:	6833      	ldr	r3, [r6, #0]
 8017d32:	3401      	adds	r4, #1
 8017d34:	42a3      	cmp	r3, r4
 8017d36:	d96c      	bls.n	8017e12 <rmw_wait+0x2a2>
 8017d38:	6873      	ldr	r3, [r6, #4]
 8017d3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017d3e:	f04f 0801 	mov.w	r8, #1
 8017d42:	f7f8 fc79 	bl	8010638 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017d46:	2800      	cmp	r0, #0
 8017d48:	d1f2      	bne.n	8017d30 <rmw_wait+0x1c0>
 8017d4a:	e9d6 3200 	ldrd	r3, r2, [r6]
 8017d4e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017d52:	3401      	adds	r4, #1
 8017d54:	42a3      	cmp	r3, r4
 8017d56:	d8e5      	bhi.n	8017d24 <rmw_wait+0x1b4>
 8017d58:	b1a7      	cbz	r7, 8017d84 <rmw_wait+0x214>
 8017d5a:	683c      	ldr	r4, [r7, #0]
 8017d5c:	b194      	cbz	r4, 8017d84 <rmw_wait+0x214>
 8017d5e:	2300      	movs	r3, #0
 8017d60:	461d      	mov	r5, r3
 8017d62:	e004      	b.n	8017d6e <rmw_wait+0x1fe>
 8017d64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017d68:	3301      	adds	r3, #1
 8017d6a:	42a3      	cmp	r3, r4
 8017d6c:	d00a      	beq.n	8017d84 <rmw_wait+0x214>
 8017d6e:	6878      	ldr	r0, [r7, #4]
 8017d70:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017d74:	7c0a      	ldrb	r2, [r1, #16]
 8017d76:	2a00      	cmp	r2, #0
 8017d78:	d0f4      	beq.n	8017d64 <rmw_wait+0x1f4>
 8017d7a:	3301      	adds	r3, #1
 8017d7c:	42a3      	cmp	r3, r4
 8017d7e:	740d      	strb	r5, [r1, #16]
 8017d80:	4690      	mov	r8, r2
 8017d82:	d1f4      	bne.n	8017d6e <rmw_wait+0x1fe>
 8017d84:	f1b8 0f00 	cmp.w	r8, #0
 8017d88:	d040      	beq.n	8017e0c <rmw_wait+0x29c>
 8017d8a:	2000      	movs	r0, #0
 8017d8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d90:	68e0      	ldr	r0, [r4, #12]
 8017d92:	2100      	movs	r1, #0
 8017d94:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017d98:	f7fa fdf8 	bl	801298c <uxr_run_session_timeout>
 8017d9c:	68a4      	ldr	r4, [r4, #8]
 8017d9e:	2c00      	cmp	r4, #0
 8017da0:	d1f6      	bne.n	8017d90 <rmw_wait+0x220>
 8017da2:	e78f      	b.n	8017cc4 <rmw_wait+0x154>
 8017da4:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017da8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017dac:	3401      	adds	r4, #1
 8017dae:	42a3      	cmp	r3, r4
 8017db0:	d891      	bhi.n	8017cd6 <rmw_wait+0x166>
 8017db2:	e79d      	b.n	8017cf0 <rmw_wait+0x180>
 8017db4:	e9da 3200 	ldrd	r3, r2, [sl]
 8017db8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017dbc:	3401      	adds	r4, #1
 8017dbe:	429c      	cmp	r4, r3
 8017dc0:	d39d      	bcc.n	8017cfe <rmw_wait+0x18e>
 8017dc2:	e7ab      	b.n	8017d1c <rmw_wait+0x1ac>
 8017dc4:	4690      	mov	r8, r2
 8017dc6:	e70b      	b.n	8017be0 <rmw_wait+0x70>
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	f47f aedb 	bne.w	8017b84 <rmw_wait+0x14>
 8017dce:	2800      	cmp	r0, #0
 8017dd0:	f47f aed8 	bne.w	8017b84 <rmw_wait+0x14>
 8017dd4:	2f00      	cmp	r7, #0
 8017dd6:	d0d8      	beq.n	8017d8a <rmw_wait+0x21a>
 8017dd8:	2900      	cmp	r1, #0
 8017dda:	f47f aed6 	bne.w	8017b8a <rmw_wait+0x1a>
 8017dde:	f04f 38ff 	mov.w	r8, #4294967295
 8017de2:	e6fd      	b.n	8017be0 <rmw_wait+0x70>
 8017de4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017de8:	4641      	mov	r1, r8
 8017dea:	f7fa fde9 	bl	80129c0 <uxr_run_session_until_data>
 8017dee:	68a4      	ldr	r4, [r4, #8]
 8017df0:	2c00      	cmp	r4, #0
 8017df2:	f47f af5e 	bne.w	8017cb2 <rmw_wait+0x142>
 8017df6:	e765      	b.n	8017cc4 <rmw_wait+0x154>
 8017df8:	f1ba 0f00 	cmp.w	sl, #0
 8017dfc:	d11e      	bne.n	8017e3c <rmw_wait+0x2cc>
 8017dfe:	b35e      	cbz	r6, 8017e58 <rmw_wait+0x2e8>
 8017e00:	6833      	ldr	r3, [r6, #0]
 8017e02:	46d0      	mov	r8, sl
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d18c      	bne.n	8017d22 <rmw_wait+0x1b2>
 8017e08:	2f00      	cmp	r7, #0
 8017e0a:	d1a6      	bne.n	8017d5a <rmw_wait+0x1ea>
 8017e0c:	2002      	movs	r0, #2
 8017e0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e12:	2f00      	cmp	r7, #0
 8017e14:	d0b9      	beq.n	8017d8a <rmw_wait+0x21a>
 8017e16:	683c      	ldr	r4, [r7, #0]
 8017e18:	f04f 0801 	mov.w	r8, #1
 8017e1c:	2c00      	cmp	r4, #0
 8017e1e:	d19e      	bne.n	8017d5e <rmw_wait+0x1ee>
 8017e20:	e7b3      	b.n	8017d8a <rmw_wait+0x21a>
 8017e22:	f1ba 0f00 	cmp.w	sl, #0
 8017e26:	d0ea      	beq.n	8017dfe <rmw_wait+0x28e>
 8017e28:	f8da 3000 	ldr.w	r3, [sl]
 8017e2c:	46a8      	mov	r8, r5
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	f47f af64 	bne.w	8017cfc <rmw_wait+0x18c>
 8017e34:	2e00      	cmp	r6, #0
 8017e36:	f47f af72 	bne.w	8017d1e <rmw_wait+0x1ae>
 8017e3a:	e009      	b.n	8017e50 <rmw_wait+0x2e0>
 8017e3c:	f8da 2000 	ldr.w	r2, [sl]
 8017e40:	4698      	mov	r8, r3
 8017e42:	2a00      	cmp	r2, #0
 8017e44:	f47f af5a 	bne.w	8017cfc <rmw_wait+0x18c>
 8017e48:	4690      	mov	r8, r2
 8017e4a:	2e00      	cmp	r6, #0
 8017e4c:	f47f af67 	bne.w	8017d1e <rmw_wait+0x1ae>
 8017e50:	46b0      	mov	r8, r6
 8017e52:	2f00      	cmp	r7, #0
 8017e54:	d181      	bne.n	8017d5a <rmw_wait+0x1ea>
 8017e56:	e7d9      	b.n	8017e0c <rmw_wait+0x29c>
 8017e58:	2f00      	cmp	r7, #0
 8017e5a:	d0d7      	beq.n	8017e0c <rmw_wait+0x29c>
 8017e5c:	683c      	ldr	r4, [r7, #0]
 8017e5e:	46b0      	mov	r8, r6
 8017e60:	2c00      	cmp	r4, #0
 8017e62:	f47f af7c 	bne.w	8017d5e <rmw_wait+0x1ee>
 8017e66:	e7d1      	b.n	8017e0c <rmw_wait+0x29c>
 8017e68:	000f4240 	.word	0x000f4240
 8017e6c:	2000d3a8 	.word	0x2000d3a8

08017e70 <rmw_create_wait_set>:
 8017e70:	b508      	push	{r3, lr}
 8017e72:	4803      	ldr	r0, [pc, #12]	; (8017e80 <rmw_create_wait_set+0x10>)
 8017e74:	f7ff f8d0 	bl	8017018 <get_memory>
 8017e78:	b108      	cbz	r0, 8017e7e <rmw_create_wait_set+0xe>
 8017e7a:	68c0      	ldr	r0, [r0, #12]
 8017e7c:	3010      	adds	r0, #16
 8017e7e:	bd08      	pop	{r3, pc}
 8017e80:	2000eb80 	.word	0x2000eb80

08017e84 <rmw_destroy_wait_set>:
 8017e84:	b508      	push	{r3, lr}
 8017e86:	4b08      	ldr	r3, [pc, #32]	; (8017ea8 <rmw_destroy_wait_set+0x24>)
 8017e88:	6819      	ldr	r1, [r3, #0]
 8017e8a:	b911      	cbnz	r1, 8017e92 <rmw_destroy_wait_set+0xe>
 8017e8c:	e00a      	b.n	8017ea4 <rmw_destroy_wait_set+0x20>
 8017e8e:	6889      	ldr	r1, [r1, #8]
 8017e90:	b141      	cbz	r1, 8017ea4 <rmw_destroy_wait_set+0x20>
 8017e92:	68cb      	ldr	r3, [r1, #12]
 8017e94:	3310      	adds	r3, #16
 8017e96:	4298      	cmp	r0, r3
 8017e98:	d1f9      	bne.n	8017e8e <rmw_destroy_wait_set+0xa>
 8017e9a:	4803      	ldr	r0, [pc, #12]	; (8017ea8 <rmw_destroy_wait_set+0x24>)
 8017e9c:	f7ff f8cc 	bl	8017038 <put_memory>
 8017ea0:	2000      	movs	r0, #0
 8017ea2:	bd08      	pop	{r3, pc}
 8017ea4:	2001      	movs	r0, #1
 8017ea6:	bd08      	pop	{r3, pc}
 8017ea8:	2000eb80 	.word	0x2000eb80

08017eac <rmw_uros_epoch_nanos>:
 8017eac:	4b05      	ldr	r3, [pc, #20]	; (8017ec4 <rmw_uros_epoch_nanos+0x18>)
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	b123      	cbz	r3, 8017ebc <rmw_uros_epoch_nanos+0x10>
 8017eb2:	68d8      	ldr	r0, [r3, #12]
 8017eb4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017eb8:	f7fa b9dc 	b.w	8012274 <uxr_epoch_nanos>
 8017ebc:	2000      	movs	r0, #0
 8017ebe:	2100      	movs	r1, #0
 8017ec0:	4770      	bx	lr
 8017ec2:	bf00      	nop
 8017ec4:	2000d3a8 	.word	0x2000d3a8

08017ec8 <ucdr_serialize_endian_array_char>:
 8017ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ecc:	4619      	mov	r1, r3
 8017ece:	461e      	mov	r6, r3
 8017ed0:	4690      	mov	r8, r2
 8017ed2:	4604      	mov	r4, r0
 8017ed4:	f7f9 fca2 	bl	801181c <ucdr_check_buffer_available_for>
 8017ed8:	b9e0      	cbnz	r0, 8017f14 <ucdr_serialize_endian_array_char+0x4c>
 8017eda:	4637      	mov	r7, r6
 8017edc:	e009      	b.n	8017ef2 <ucdr_serialize_endian_array_char+0x2a>
 8017ede:	68a0      	ldr	r0, [r4, #8]
 8017ee0:	f002 fc3d 	bl	801a75e <memcpy>
 8017ee4:	68a2      	ldr	r2, [r4, #8]
 8017ee6:	6923      	ldr	r3, [r4, #16]
 8017ee8:	442a      	add	r2, r5
 8017eea:	442b      	add	r3, r5
 8017eec:	1b7f      	subs	r7, r7, r5
 8017eee:	60a2      	str	r2, [r4, #8]
 8017ef0:	6123      	str	r3, [r4, #16]
 8017ef2:	2201      	movs	r2, #1
 8017ef4:	4639      	mov	r1, r7
 8017ef6:	4620      	mov	r0, r4
 8017ef8:	f7f9 fd16 	bl	8011928 <ucdr_check_final_buffer_behavior_array>
 8017efc:	1bf1      	subs	r1, r6, r7
 8017efe:	4441      	add	r1, r8
 8017f00:	4605      	mov	r5, r0
 8017f02:	4602      	mov	r2, r0
 8017f04:	2800      	cmp	r0, #0
 8017f06:	d1ea      	bne.n	8017ede <ucdr_serialize_endian_array_char+0x16>
 8017f08:	2301      	movs	r3, #1
 8017f0a:	7da0      	ldrb	r0, [r4, #22]
 8017f0c:	7563      	strb	r3, [r4, #21]
 8017f0e:	4058      	eors	r0, r3
 8017f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f14:	4632      	mov	r2, r6
 8017f16:	68a0      	ldr	r0, [r4, #8]
 8017f18:	4641      	mov	r1, r8
 8017f1a:	f002 fc20 	bl	801a75e <memcpy>
 8017f1e:	68a2      	ldr	r2, [r4, #8]
 8017f20:	6923      	ldr	r3, [r4, #16]
 8017f22:	4432      	add	r2, r6
 8017f24:	4433      	add	r3, r6
 8017f26:	60a2      	str	r2, [r4, #8]
 8017f28:	6123      	str	r3, [r4, #16]
 8017f2a:	e7ed      	b.n	8017f08 <ucdr_serialize_endian_array_char+0x40>

08017f2c <ucdr_deserialize_endian_array_char>:
 8017f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f30:	4619      	mov	r1, r3
 8017f32:	461e      	mov	r6, r3
 8017f34:	4690      	mov	r8, r2
 8017f36:	4604      	mov	r4, r0
 8017f38:	f7f9 fc70 	bl	801181c <ucdr_check_buffer_available_for>
 8017f3c:	b9e0      	cbnz	r0, 8017f78 <ucdr_deserialize_endian_array_char+0x4c>
 8017f3e:	4637      	mov	r7, r6
 8017f40:	e009      	b.n	8017f56 <ucdr_deserialize_endian_array_char+0x2a>
 8017f42:	68a1      	ldr	r1, [r4, #8]
 8017f44:	f002 fc0b 	bl	801a75e <memcpy>
 8017f48:	68a2      	ldr	r2, [r4, #8]
 8017f4a:	6923      	ldr	r3, [r4, #16]
 8017f4c:	442a      	add	r2, r5
 8017f4e:	442b      	add	r3, r5
 8017f50:	1b7f      	subs	r7, r7, r5
 8017f52:	60a2      	str	r2, [r4, #8]
 8017f54:	6123      	str	r3, [r4, #16]
 8017f56:	2201      	movs	r2, #1
 8017f58:	4639      	mov	r1, r7
 8017f5a:	4620      	mov	r0, r4
 8017f5c:	f7f9 fce4 	bl	8011928 <ucdr_check_final_buffer_behavior_array>
 8017f60:	4605      	mov	r5, r0
 8017f62:	1bf0      	subs	r0, r6, r7
 8017f64:	4440      	add	r0, r8
 8017f66:	462a      	mov	r2, r5
 8017f68:	2d00      	cmp	r5, #0
 8017f6a:	d1ea      	bne.n	8017f42 <ucdr_deserialize_endian_array_char+0x16>
 8017f6c:	2301      	movs	r3, #1
 8017f6e:	7da0      	ldrb	r0, [r4, #22]
 8017f70:	7563      	strb	r3, [r4, #21]
 8017f72:	4058      	eors	r0, r3
 8017f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f78:	4632      	mov	r2, r6
 8017f7a:	68a1      	ldr	r1, [r4, #8]
 8017f7c:	4640      	mov	r0, r8
 8017f7e:	f002 fbee 	bl	801a75e <memcpy>
 8017f82:	68a2      	ldr	r2, [r4, #8]
 8017f84:	6923      	ldr	r3, [r4, #16]
 8017f86:	4432      	add	r2, r6
 8017f88:	4433      	add	r3, r6
 8017f8a:	60a2      	str	r2, [r4, #8]
 8017f8c:	6123      	str	r3, [r4, #16]
 8017f8e:	e7ed      	b.n	8017f6c <ucdr_deserialize_endian_array_char+0x40>

08017f90 <ucdr_serialize_array_uint8_t>:
 8017f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f94:	4688      	mov	r8, r1
 8017f96:	4611      	mov	r1, r2
 8017f98:	4616      	mov	r6, r2
 8017f9a:	4604      	mov	r4, r0
 8017f9c:	f7f9 fc3e 	bl	801181c <ucdr_check_buffer_available_for>
 8017fa0:	b9e0      	cbnz	r0, 8017fdc <ucdr_serialize_array_uint8_t+0x4c>
 8017fa2:	4637      	mov	r7, r6
 8017fa4:	e009      	b.n	8017fba <ucdr_serialize_array_uint8_t+0x2a>
 8017fa6:	68a0      	ldr	r0, [r4, #8]
 8017fa8:	f002 fbd9 	bl	801a75e <memcpy>
 8017fac:	68a2      	ldr	r2, [r4, #8]
 8017fae:	6923      	ldr	r3, [r4, #16]
 8017fb0:	442a      	add	r2, r5
 8017fb2:	442b      	add	r3, r5
 8017fb4:	1b7f      	subs	r7, r7, r5
 8017fb6:	60a2      	str	r2, [r4, #8]
 8017fb8:	6123      	str	r3, [r4, #16]
 8017fba:	2201      	movs	r2, #1
 8017fbc:	4639      	mov	r1, r7
 8017fbe:	4620      	mov	r0, r4
 8017fc0:	f7f9 fcb2 	bl	8011928 <ucdr_check_final_buffer_behavior_array>
 8017fc4:	1bf1      	subs	r1, r6, r7
 8017fc6:	4441      	add	r1, r8
 8017fc8:	4605      	mov	r5, r0
 8017fca:	4602      	mov	r2, r0
 8017fcc:	2800      	cmp	r0, #0
 8017fce:	d1ea      	bne.n	8017fa6 <ucdr_serialize_array_uint8_t+0x16>
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	7da0      	ldrb	r0, [r4, #22]
 8017fd4:	7563      	strb	r3, [r4, #21]
 8017fd6:	4058      	eors	r0, r3
 8017fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fdc:	4632      	mov	r2, r6
 8017fde:	68a0      	ldr	r0, [r4, #8]
 8017fe0:	4641      	mov	r1, r8
 8017fe2:	f002 fbbc 	bl	801a75e <memcpy>
 8017fe6:	68a3      	ldr	r3, [r4, #8]
 8017fe8:	6922      	ldr	r2, [r4, #16]
 8017fea:	4433      	add	r3, r6
 8017fec:	4432      	add	r2, r6
 8017fee:	60a3      	str	r3, [r4, #8]
 8017ff0:	6122      	str	r2, [r4, #16]
 8017ff2:	e7ed      	b.n	8017fd0 <ucdr_serialize_array_uint8_t+0x40>

08017ff4 <ucdr_serialize_endian_array_uint8_t>:
 8017ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ff8:	4619      	mov	r1, r3
 8017ffa:	461e      	mov	r6, r3
 8017ffc:	4690      	mov	r8, r2
 8017ffe:	4604      	mov	r4, r0
 8018000:	f7f9 fc0c 	bl	801181c <ucdr_check_buffer_available_for>
 8018004:	b9e0      	cbnz	r0, 8018040 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8018006:	4637      	mov	r7, r6
 8018008:	e009      	b.n	801801e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801800a:	68a0      	ldr	r0, [r4, #8]
 801800c:	f002 fba7 	bl	801a75e <memcpy>
 8018010:	68a2      	ldr	r2, [r4, #8]
 8018012:	6923      	ldr	r3, [r4, #16]
 8018014:	442a      	add	r2, r5
 8018016:	442b      	add	r3, r5
 8018018:	1b7f      	subs	r7, r7, r5
 801801a:	60a2      	str	r2, [r4, #8]
 801801c:	6123      	str	r3, [r4, #16]
 801801e:	2201      	movs	r2, #1
 8018020:	4639      	mov	r1, r7
 8018022:	4620      	mov	r0, r4
 8018024:	f7f9 fc80 	bl	8011928 <ucdr_check_final_buffer_behavior_array>
 8018028:	1bf1      	subs	r1, r6, r7
 801802a:	4441      	add	r1, r8
 801802c:	4605      	mov	r5, r0
 801802e:	4602      	mov	r2, r0
 8018030:	2800      	cmp	r0, #0
 8018032:	d1ea      	bne.n	801800a <ucdr_serialize_endian_array_uint8_t+0x16>
 8018034:	2301      	movs	r3, #1
 8018036:	7da0      	ldrb	r0, [r4, #22]
 8018038:	7563      	strb	r3, [r4, #21]
 801803a:	4058      	eors	r0, r3
 801803c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018040:	4632      	mov	r2, r6
 8018042:	68a0      	ldr	r0, [r4, #8]
 8018044:	4641      	mov	r1, r8
 8018046:	f002 fb8a 	bl	801a75e <memcpy>
 801804a:	68a2      	ldr	r2, [r4, #8]
 801804c:	6923      	ldr	r3, [r4, #16]
 801804e:	4432      	add	r2, r6
 8018050:	4433      	add	r3, r6
 8018052:	60a2      	str	r2, [r4, #8]
 8018054:	6123      	str	r3, [r4, #16]
 8018056:	e7ed      	b.n	8018034 <ucdr_serialize_endian_array_uint8_t+0x40>

08018058 <ucdr_deserialize_array_uint8_t>:
 8018058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801805c:	4688      	mov	r8, r1
 801805e:	4611      	mov	r1, r2
 8018060:	4616      	mov	r6, r2
 8018062:	4604      	mov	r4, r0
 8018064:	f7f9 fbda 	bl	801181c <ucdr_check_buffer_available_for>
 8018068:	b9e0      	cbnz	r0, 80180a4 <ucdr_deserialize_array_uint8_t+0x4c>
 801806a:	4637      	mov	r7, r6
 801806c:	e009      	b.n	8018082 <ucdr_deserialize_array_uint8_t+0x2a>
 801806e:	68a1      	ldr	r1, [r4, #8]
 8018070:	f002 fb75 	bl	801a75e <memcpy>
 8018074:	68a2      	ldr	r2, [r4, #8]
 8018076:	6923      	ldr	r3, [r4, #16]
 8018078:	442a      	add	r2, r5
 801807a:	442b      	add	r3, r5
 801807c:	1b7f      	subs	r7, r7, r5
 801807e:	60a2      	str	r2, [r4, #8]
 8018080:	6123      	str	r3, [r4, #16]
 8018082:	2201      	movs	r2, #1
 8018084:	4639      	mov	r1, r7
 8018086:	4620      	mov	r0, r4
 8018088:	f7f9 fc4e 	bl	8011928 <ucdr_check_final_buffer_behavior_array>
 801808c:	4605      	mov	r5, r0
 801808e:	1bf0      	subs	r0, r6, r7
 8018090:	4440      	add	r0, r8
 8018092:	462a      	mov	r2, r5
 8018094:	2d00      	cmp	r5, #0
 8018096:	d1ea      	bne.n	801806e <ucdr_deserialize_array_uint8_t+0x16>
 8018098:	2301      	movs	r3, #1
 801809a:	7da0      	ldrb	r0, [r4, #22]
 801809c:	7563      	strb	r3, [r4, #21]
 801809e:	4058      	eors	r0, r3
 80180a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180a4:	4632      	mov	r2, r6
 80180a6:	68a1      	ldr	r1, [r4, #8]
 80180a8:	4640      	mov	r0, r8
 80180aa:	f002 fb58 	bl	801a75e <memcpy>
 80180ae:	68a3      	ldr	r3, [r4, #8]
 80180b0:	6922      	ldr	r2, [r4, #16]
 80180b2:	4433      	add	r3, r6
 80180b4:	4432      	add	r2, r6
 80180b6:	60a3      	str	r3, [r4, #8]
 80180b8:	6122      	str	r2, [r4, #16]
 80180ba:	e7ed      	b.n	8018098 <ucdr_deserialize_array_uint8_t+0x40>

080180bc <ucdr_deserialize_endian_array_uint8_t>:
 80180bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180c0:	4619      	mov	r1, r3
 80180c2:	461e      	mov	r6, r3
 80180c4:	4690      	mov	r8, r2
 80180c6:	4604      	mov	r4, r0
 80180c8:	f7f9 fba8 	bl	801181c <ucdr_check_buffer_available_for>
 80180cc:	b9e0      	cbnz	r0, 8018108 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80180ce:	4637      	mov	r7, r6
 80180d0:	e009      	b.n	80180e6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80180d2:	68a1      	ldr	r1, [r4, #8]
 80180d4:	f002 fb43 	bl	801a75e <memcpy>
 80180d8:	68a2      	ldr	r2, [r4, #8]
 80180da:	6923      	ldr	r3, [r4, #16]
 80180dc:	442a      	add	r2, r5
 80180de:	442b      	add	r3, r5
 80180e0:	1b7f      	subs	r7, r7, r5
 80180e2:	60a2      	str	r2, [r4, #8]
 80180e4:	6123      	str	r3, [r4, #16]
 80180e6:	2201      	movs	r2, #1
 80180e8:	4639      	mov	r1, r7
 80180ea:	4620      	mov	r0, r4
 80180ec:	f7f9 fc1c 	bl	8011928 <ucdr_check_final_buffer_behavior_array>
 80180f0:	4605      	mov	r5, r0
 80180f2:	1bf0      	subs	r0, r6, r7
 80180f4:	4440      	add	r0, r8
 80180f6:	462a      	mov	r2, r5
 80180f8:	2d00      	cmp	r5, #0
 80180fa:	d1ea      	bne.n	80180d2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80180fc:	2301      	movs	r3, #1
 80180fe:	7da0      	ldrb	r0, [r4, #22]
 8018100:	7563      	strb	r3, [r4, #21]
 8018102:	4058      	eors	r0, r3
 8018104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018108:	4632      	mov	r2, r6
 801810a:	68a1      	ldr	r1, [r4, #8]
 801810c:	4640      	mov	r0, r8
 801810e:	f002 fb26 	bl	801a75e <memcpy>
 8018112:	68a2      	ldr	r2, [r4, #8]
 8018114:	6923      	ldr	r3, [r4, #16]
 8018116:	4432      	add	r2, r6
 8018118:	4433      	add	r3, r6
 801811a:	60a2      	str	r2, [r4, #8]
 801811c:	6123      	str	r3, [r4, #16]
 801811e:	e7ed      	b.n	80180fc <ucdr_deserialize_endian_array_uint8_t+0x40>

08018120 <ucdr_serialize_sequence_char>:
 8018120:	b570      	push	{r4, r5, r6, lr}
 8018122:	460e      	mov	r6, r1
 8018124:	4615      	mov	r5, r2
 8018126:	7d01      	ldrb	r1, [r0, #20]
 8018128:	4604      	mov	r4, r0
 801812a:	f7f8 fecd 	bl	8010ec8 <ucdr_serialize_endian_uint32_t>
 801812e:	b90d      	cbnz	r5, 8018134 <ucdr_serialize_sequence_char+0x14>
 8018130:	2001      	movs	r0, #1
 8018132:	bd70      	pop	{r4, r5, r6, pc}
 8018134:	7d21      	ldrb	r1, [r4, #20]
 8018136:	462b      	mov	r3, r5
 8018138:	4632      	mov	r2, r6
 801813a:	4620      	mov	r0, r4
 801813c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018140:	f7ff bec2 	b.w	8017ec8 <ucdr_serialize_endian_array_char>

08018144 <ucdr_deserialize_sequence_char>:
 8018144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018148:	461d      	mov	r5, r3
 801814a:	4616      	mov	r6, r2
 801814c:	460f      	mov	r7, r1
 801814e:	461a      	mov	r2, r3
 8018150:	7d01      	ldrb	r1, [r0, #20]
 8018152:	4604      	mov	r4, r0
 8018154:	f7f8 ffe0 	bl	8011118 <ucdr_deserialize_endian_uint32_t>
 8018158:	682b      	ldr	r3, [r5, #0]
 801815a:	429e      	cmp	r6, r3
 801815c:	bf3c      	itt	cc
 801815e:	2201      	movcc	r2, #1
 8018160:	75a2      	strbcc	r2, [r4, #22]
 8018162:	b913      	cbnz	r3, 801816a <ucdr_deserialize_sequence_char+0x26>
 8018164:	2001      	movs	r0, #1
 8018166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801816a:	7d21      	ldrb	r1, [r4, #20]
 801816c:	463a      	mov	r2, r7
 801816e:	4620      	mov	r0, r4
 8018170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018174:	f7ff beda 	b.w	8017f2c <ucdr_deserialize_endian_array_char>

08018178 <ucdr_serialize_sequence_uint8_t>:
 8018178:	b570      	push	{r4, r5, r6, lr}
 801817a:	460e      	mov	r6, r1
 801817c:	4615      	mov	r5, r2
 801817e:	7d01      	ldrb	r1, [r0, #20]
 8018180:	4604      	mov	r4, r0
 8018182:	f7f8 fea1 	bl	8010ec8 <ucdr_serialize_endian_uint32_t>
 8018186:	b90d      	cbnz	r5, 801818c <ucdr_serialize_sequence_uint8_t+0x14>
 8018188:	2001      	movs	r0, #1
 801818a:	bd70      	pop	{r4, r5, r6, pc}
 801818c:	7d21      	ldrb	r1, [r4, #20]
 801818e:	462b      	mov	r3, r5
 8018190:	4632      	mov	r2, r6
 8018192:	4620      	mov	r0, r4
 8018194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018198:	f7ff bf2c 	b.w	8017ff4 <ucdr_serialize_endian_array_uint8_t>

0801819c <ucdr_deserialize_sequence_uint8_t>:
 801819c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181a0:	461d      	mov	r5, r3
 80181a2:	4616      	mov	r6, r2
 80181a4:	460f      	mov	r7, r1
 80181a6:	461a      	mov	r2, r3
 80181a8:	7d01      	ldrb	r1, [r0, #20]
 80181aa:	4604      	mov	r4, r0
 80181ac:	f7f8 ffb4 	bl	8011118 <ucdr_deserialize_endian_uint32_t>
 80181b0:	682b      	ldr	r3, [r5, #0]
 80181b2:	429e      	cmp	r6, r3
 80181b4:	bf3c      	itt	cc
 80181b6:	2201      	movcc	r2, #1
 80181b8:	75a2      	strbcc	r2, [r4, #22]
 80181ba:	b913      	cbnz	r3, 80181c2 <ucdr_deserialize_sequence_uint8_t+0x26>
 80181bc:	2001      	movs	r0, #1
 80181be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181c2:	7d21      	ldrb	r1, [r4, #20]
 80181c4:	463a      	mov	r2, r7
 80181c6:	4620      	mov	r0, r4
 80181c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181cc:	f7ff bf76 	b.w	80180bc <ucdr_deserialize_endian_array_uint8_t>

080181d0 <ucdr_serialize_string>:
 80181d0:	b510      	push	{r4, lr}
 80181d2:	b082      	sub	sp, #8
 80181d4:	4604      	mov	r4, r0
 80181d6:	4608      	mov	r0, r1
 80181d8:	9101      	str	r1, [sp, #4]
 80181da:	f7e8 f80b 	bl	80001f4 <strlen>
 80181de:	9901      	ldr	r1, [sp, #4]
 80181e0:	4602      	mov	r2, r0
 80181e2:	3201      	adds	r2, #1
 80181e4:	4620      	mov	r0, r4
 80181e6:	b002      	add	sp, #8
 80181e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181ec:	f7ff bf98 	b.w	8018120 <ucdr_serialize_sequence_char>

080181f0 <ucdr_deserialize_string>:
 80181f0:	b500      	push	{lr}
 80181f2:	b083      	sub	sp, #12
 80181f4:	ab01      	add	r3, sp, #4
 80181f6:	f7ff ffa5 	bl	8018144 <ucdr_deserialize_sequence_char>
 80181fa:	b003      	add	sp, #12
 80181fc:	f85d fb04 	ldr.w	pc, [sp], #4

08018200 <get_custom_error>:
 8018200:	4b01      	ldr	r3, [pc, #4]	; (8018208 <get_custom_error+0x8>)
 8018202:	7818      	ldrb	r0, [r3, #0]
 8018204:	4770      	bx	lr
 8018206:	bf00      	nop
 8018208:	2000a060 	.word	0x2000a060

0801820c <recv_custom_msg>:
 801820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018210:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8018214:	b089      	sub	sp, #36	; 0x24
 8018216:	2600      	movs	r6, #0
 8018218:	4604      	mov	r4, r0
 801821a:	9305      	str	r3, [sp, #20]
 801821c:	468a      	mov	sl, r1
 801821e:	4693      	mov	fp, r2
 8018220:	f88d 601e 	strb.w	r6, [sp, #30]
 8018224:	b325      	cbz	r5, 8018270 <recv_custom_msg+0x64>
 8018226:	f200 2902 	addw	r9, r0, #514	; 0x202
 801822a:	f10d 081f 	add.w	r8, sp, #31
 801822e:	af05      	add	r7, sp, #20
 8018230:	f10d 061e 	add.w	r6, sp, #30
 8018234:	f44f 7500 	mov.w	r5, #512	; 0x200
 8018238:	e002      	b.n	8018240 <recv_custom_msg+0x34>
 801823a:	9b05      	ldr	r3, [sp, #20]
 801823c:	2b00      	cmp	r3, #0
 801823e:	dd0f      	ble.n	8018260 <recv_custom_msg+0x54>
 8018240:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8018244:	e9cd 5600 	strd	r5, r6, [sp]
 8018248:	4623      	mov	r3, r4
 801824a:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 801824e:	4622      	mov	r2, r4
 8018250:	4648      	mov	r0, r9
 8018252:	f000 ffc9 	bl	80191e8 <uxr_read_framed_msg>
 8018256:	2800      	cmp	r0, #0
 8018258:	d0ef      	beq.n	801823a <recv_custom_msg+0x2e>
 801825a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801825e:	b1b3      	cbz	r3, 801828e <recv_custom_msg+0x82>
 8018260:	4b0f      	ldr	r3, [pc, #60]	; (80182a0 <recv_custom_msg+0x94>)
 8018262:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8018266:	701a      	strb	r2, [r3, #0]
 8018268:	2000      	movs	r0, #0
 801826a:	b009      	add	sp, #36	; 0x24
 801826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018270:	f10d 021f 	add.w	r2, sp, #31
 8018274:	9200      	str	r2, [sp, #0]
 8018276:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 801827a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801827e:	4601      	mov	r1, r0
 8018280:	47a8      	blx	r5
 8018282:	2800      	cmp	r0, #0
 8018284:	d0ec      	beq.n	8018260 <recv_custom_msg+0x54>
 8018286:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801828a:	2b00      	cmp	r3, #0
 801828c:	d1e8      	bne.n	8018260 <recv_custom_msg+0x54>
 801828e:	f8cb 0000 	str.w	r0, [fp]
 8018292:	2001      	movs	r0, #1
 8018294:	f8ca 4000 	str.w	r4, [sl]
 8018298:	b009      	add	sp, #36	; 0x24
 801829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801829e:	bf00      	nop
 80182a0:	2000a060 	.word	0x2000a060

080182a4 <send_custom_msg>:
 80182a4:	b570      	push	{r4, r5, r6, lr}
 80182a6:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80182aa:	b086      	sub	sp, #24
 80182ac:	4616      	mov	r6, r2
 80182ae:	b975      	cbnz	r5, 80182ce <send_custom_msg+0x2a>
 80182b0:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 80182b4:	f10d 0317 	add.w	r3, sp, #23
 80182b8:	47a0      	blx	r4
 80182ba:	b108      	cbz	r0, 80182c0 <send_custom_msg+0x1c>
 80182bc:	42b0      	cmp	r0, r6
 80182be:	d015      	beq.n	80182ec <send_custom_msg+0x48>
 80182c0:	4b0c      	ldr	r3, [pc, #48]	; (80182f4 <send_custom_msg+0x50>)
 80182c2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80182c6:	701a      	strb	r2, [r3, #0]
 80182c8:	2000      	movs	r0, #0
 80182ca:	b006      	add	sp, #24
 80182cc:	bd70      	pop	{r4, r5, r6, pc}
 80182ce:	460b      	mov	r3, r1
 80182d0:	2200      	movs	r2, #0
 80182d2:	f10d 0117 	add.w	r1, sp, #23
 80182d6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80182da:	9600      	str	r6, [sp, #0]
 80182dc:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80182e0:	4602      	mov	r2, r0
 80182e2:	f200 2002 	addw	r0, r0, #514	; 0x202
 80182e6:	f000 fd97 	bl	8018e18 <uxr_write_framed_msg>
 80182ea:	e7e6      	b.n	80182ba <send_custom_msg+0x16>
 80182ec:	2001      	movs	r0, #1
 80182ee:	b006      	add	sp, #24
 80182f0:	bd70      	pop	{r4, r5, r6, pc}
 80182f2:	bf00      	nop
 80182f4:	2000a060 	.word	0x2000a060

080182f8 <uxr_set_custom_transport_callbacks>:
 80182f8:	b430      	push	{r4, r5}
 80182fa:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80182fe:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8018302:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 8018306:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801830a:	bc30      	pop	{r4, r5}
 801830c:	4770      	bx	lr
 801830e:	bf00      	nop

08018310 <uxr_init_custom_transport>:
 8018310:	b538      	push	{r3, r4, r5, lr}
 8018312:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8018316:	b303      	cbz	r3, 801835a <uxr_init_custom_transport+0x4a>
 8018318:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 801831c:	4604      	mov	r4, r0
 801831e:	b1e2      	cbz	r2, 801835a <uxr_init_custom_transport+0x4a>
 8018320:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8018324:	b1ca      	cbz	r2, 801835a <uxr_init_custom_transport+0x4a>
 8018326:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801832a:	b1b2      	cbz	r2, 801835a <uxr_init_custom_transport+0x4a>
 801832c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8018330:	4798      	blx	r3
 8018332:	4605      	mov	r5, r0
 8018334:	b188      	cbz	r0, 801835a <uxr_init_custom_transport+0x4a>
 8018336:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801833a:	b98b      	cbnz	r3, 8018360 <uxr_init_custom_transport+0x50>
 801833c:	480b      	ldr	r0, [pc, #44]	; (801836c <uxr_init_custom_transport+0x5c>)
 801833e:	490c      	ldr	r1, [pc, #48]	; (8018370 <uxr_init_custom_transport+0x60>)
 8018340:	4a0c      	ldr	r2, [pc, #48]	; (8018374 <uxr_init_custom_transport+0x64>)
 8018342:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 8018346:	f44f 7300 	mov.w	r3, #512	; 0x200
 801834a:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 801834e:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8018352:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8018356:	4628      	mov	r0, r5
 8018358:	bd38      	pop	{r3, r4, r5, pc}
 801835a:	2500      	movs	r5, #0
 801835c:	4628      	mov	r0, r5
 801835e:	bd38      	pop	{r3, r4, r5, pc}
 8018360:	2100      	movs	r1, #0
 8018362:	f204 2002 	addw	r0, r4, #514	; 0x202
 8018366:	f000 fd51 	bl	8018e0c <uxr_init_framing_io>
 801836a:	e7e7      	b.n	801833c <uxr_init_custom_transport+0x2c>
 801836c:	080182a5 	.word	0x080182a5
 8018370:	0801820d 	.word	0x0801820d
 8018374:	08018201 	.word	0x08018201

08018378 <uxr_close_custom_transport>:
 8018378:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 801837c:	4718      	bx	r3
 801837e:	bf00      	nop

08018380 <uxr_init_input_best_effort_stream>:
 8018380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018384:	8003      	strh	r3, [r0, #0]
 8018386:	4770      	bx	lr

08018388 <uxr_reset_input_best_effort_stream>:
 8018388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801838c:	8003      	strh	r3, [r0, #0]
 801838e:	4770      	bx	lr

08018390 <uxr_receive_best_effort_message>:
 8018390:	b538      	push	{r3, r4, r5, lr}
 8018392:	4604      	mov	r4, r0
 8018394:	8800      	ldrh	r0, [r0, #0]
 8018396:	460d      	mov	r5, r1
 8018398:	f000 fd20 	bl	8018ddc <uxr_seq_num_cmp>
 801839c:	4603      	mov	r3, r0
 801839e:	2b00      	cmp	r3, #0
 80183a0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80183a4:	bfb8      	it	lt
 80183a6:	8025      	strhlt	r5, [r4, #0]
 80183a8:	bd38      	pop	{r3, r4, r5, pc}
 80183aa:	bf00      	nop

080183ac <on_full_input_buffer>:
 80183ac:	b570      	push	{r4, r5, r6, lr}
 80183ae:	6802      	ldr	r2, [r0, #0]
 80183b0:	460d      	mov	r5, r1
 80183b2:	6809      	ldr	r1, [r1, #0]
 80183b4:	686c      	ldr	r4, [r5, #4]
 80183b6:	1a53      	subs	r3, r2, r1
 80183b8:	4606      	mov	r6, r0
 80183ba:	8928      	ldrh	r0, [r5, #8]
 80183bc:	fbb4 f4f0 	udiv	r4, r4, r0
 80183c0:	fbb3 f3f4 	udiv	r3, r3, r4
 80183c4:	3301      	adds	r3, #1
 80183c6:	b29b      	uxth	r3, r3
 80183c8:	fbb3 f2f0 	udiv	r2, r3, r0
 80183cc:	fb00 3312 	mls	r3, r0, r2, r3
 80183d0:	b29b      	uxth	r3, r3
 80183d2:	fb04 f403 	mul.w	r4, r4, r3
 80183d6:	1d23      	adds	r3, r4, #4
 80183d8:	440b      	add	r3, r1
 80183da:	7d28      	ldrb	r0, [r5, #20]
 80183dc:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80183e0:	b110      	cbz	r0, 80183e8 <on_full_input_buffer+0x3c>
 80183e2:	2000      	movs	r0, #0
 80183e4:	f843 0c04 	str.w	r0, [r3, #-4]
 80183e8:	2a03      	cmp	r2, #3
 80183ea:	d801      	bhi.n	80183f0 <on_full_input_buffer+0x44>
 80183ec:	2001      	movs	r0, #1
 80183ee:	bd70      	pop	{r4, r5, r6, pc}
 80183f0:	3408      	adds	r4, #8
 80183f2:	6933      	ldr	r3, [r6, #16]
 80183f4:	4421      	add	r1, r4
 80183f6:	4630      	mov	r0, r6
 80183f8:	3a04      	subs	r2, #4
 80183fa:	f7f9 fa59 	bl	80118b0 <ucdr_init_buffer_origin>
 80183fe:	4630      	mov	r0, r6
 8018400:	4902      	ldr	r1, [pc, #8]	; (801840c <on_full_input_buffer+0x60>)
 8018402:	462a      	mov	r2, r5
 8018404:	f7f9 fa32 	bl	801186c <ucdr_set_on_full_buffer_callback>
 8018408:	2000      	movs	r0, #0
 801840a:	bd70      	pop	{r4, r5, r6, pc}
 801840c:	080183ad 	.word	0x080183ad

08018410 <uxr_init_input_reliable_stream>:
 8018410:	b470      	push	{r4, r5, r6}
 8018412:	9c03      	ldr	r4, [sp, #12]
 8018414:	6001      	str	r1, [r0, #0]
 8018416:	2600      	movs	r6, #0
 8018418:	8103      	strh	r3, [r0, #8]
 801841a:	6042      	str	r2, [r0, #4]
 801841c:	6104      	str	r4, [r0, #16]
 801841e:	7506      	strb	r6, [r0, #20]
 8018420:	b1ab      	cbz	r3, 801844e <uxr_init_input_reliable_stream+0x3e>
 8018422:	600e      	str	r6, [r1, #0]
 8018424:	8901      	ldrh	r1, [r0, #8]
 8018426:	2901      	cmp	r1, #1
 8018428:	d911      	bls.n	801844e <uxr_init_input_reliable_stream+0x3e>
 801842a:	2201      	movs	r2, #1
 801842c:	e9d0 5400 	ldrd	r5, r4, [r0]
 8018430:	fbb2 f3f1 	udiv	r3, r2, r1
 8018434:	fb01 2313 	mls	r3, r1, r3, r2
 8018438:	b29b      	uxth	r3, r3
 801843a:	fbb4 f1f1 	udiv	r1, r4, r1
 801843e:	fb03 f301 	mul.w	r3, r3, r1
 8018442:	3201      	adds	r2, #1
 8018444:	50ee      	str	r6, [r5, r3]
 8018446:	8901      	ldrh	r1, [r0, #8]
 8018448:	b292      	uxth	r2, r2
 801844a:	4291      	cmp	r1, r2
 801844c:	d8ee      	bhi.n	801842c <uxr_init_input_reliable_stream+0x1c>
 801844e:	f04f 33ff 	mov.w	r3, #4294967295
 8018452:	bc70      	pop	{r4, r5, r6}
 8018454:	60c3      	str	r3, [r0, #12]
 8018456:	4770      	bx	lr

08018458 <uxr_reset_input_reliable_stream>:
 8018458:	8902      	ldrh	r2, [r0, #8]
 801845a:	b1ca      	cbz	r2, 8018490 <uxr_reset_input_reliable_stream+0x38>
 801845c:	b470      	push	{r4, r5, r6}
 801845e:	2400      	movs	r4, #0
 8018460:	4621      	mov	r1, r4
 8018462:	4626      	mov	r6, r4
 8018464:	fbb1 f3f2 	udiv	r3, r1, r2
 8018468:	fb02 1313 	mls	r3, r2, r3, r1
 801846c:	e9d0 5100 	ldrd	r5, r1, [r0]
 8018470:	b29b      	uxth	r3, r3
 8018472:	fbb1 f2f2 	udiv	r2, r1, r2
 8018476:	fb03 f302 	mul.w	r3, r3, r2
 801847a:	3401      	adds	r4, #1
 801847c:	50ee      	str	r6, [r5, r3]
 801847e:	8902      	ldrh	r2, [r0, #8]
 8018480:	b2a1      	uxth	r1, r4
 8018482:	428a      	cmp	r2, r1
 8018484:	d8ee      	bhi.n	8018464 <uxr_reset_input_reliable_stream+0xc>
 8018486:	f04f 33ff 	mov.w	r3, #4294967295
 801848a:	bc70      	pop	{r4, r5, r6}
 801848c:	60c3      	str	r3, [r0, #12]
 801848e:	4770      	bx	lr
 8018490:	f04f 33ff 	mov.w	r3, #4294967295
 8018494:	60c3      	str	r3, [r0, #12]
 8018496:	4770      	bx	lr

08018498 <uxr_receive_reliable_message>:
 8018498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801849c:	4604      	mov	r4, r0
 801849e:	460d      	mov	r5, r1
 80184a0:	8901      	ldrh	r1, [r0, #8]
 80184a2:	8980      	ldrh	r0, [r0, #12]
 80184a4:	4690      	mov	r8, r2
 80184a6:	461f      	mov	r7, r3
 80184a8:	f000 fc90 	bl	8018dcc <uxr_seq_num_add>
 80184ac:	4629      	mov	r1, r5
 80184ae:	4606      	mov	r6, r0
 80184b0:	89a0      	ldrh	r0, [r4, #12]
 80184b2:	f000 fc93 	bl	8018ddc <uxr_seq_num_cmp>
 80184b6:	2800      	cmp	r0, #0
 80184b8:	db0a      	blt.n	80184d0 <uxr_receive_reliable_message+0x38>
 80184ba:	2600      	movs	r6, #0
 80184bc:	89e0      	ldrh	r0, [r4, #14]
 80184be:	4629      	mov	r1, r5
 80184c0:	f000 fc8c 	bl	8018ddc <uxr_seq_num_cmp>
 80184c4:	2800      	cmp	r0, #0
 80184c6:	bfb8      	it	lt
 80184c8:	81e5      	strhlt	r5, [r4, #14]
 80184ca:	4630      	mov	r0, r6
 80184cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184d0:	4630      	mov	r0, r6
 80184d2:	4629      	mov	r1, r5
 80184d4:	f000 fc82 	bl	8018ddc <uxr_seq_num_cmp>
 80184d8:	2800      	cmp	r0, #0
 80184da:	dbee      	blt.n	80184ba <uxr_receive_reliable_message+0x22>
 80184dc:	6923      	ldr	r3, [r4, #16]
 80184de:	4640      	mov	r0, r8
 80184e0:	4798      	blx	r3
 80184e2:	2101      	movs	r1, #1
 80184e4:	4681      	mov	r9, r0
 80184e6:	89a0      	ldrh	r0, [r4, #12]
 80184e8:	f000 fc70 	bl	8018dcc <uxr_seq_num_add>
 80184ec:	f1b9 0f00 	cmp.w	r9, #0
 80184f0:	d101      	bne.n	80184f6 <uxr_receive_reliable_message+0x5e>
 80184f2:	4285      	cmp	r5, r0
 80184f4:	d049      	beq.n	801858a <uxr_receive_reliable_message+0xf2>
 80184f6:	8921      	ldrh	r1, [r4, #8]
 80184f8:	fbb5 f3f1 	udiv	r3, r5, r1
 80184fc:	fb01 5313 	mls	r3, r1, r3, r5
 8018500:	b29b      	uxth	r3, r3
 8018502:	6862      	ldr	r2, [r4, #4]
 8018504:	6820      	ldr	r0, [r4, #0]
 8018506:	fbb2 f2f1 	udiv	r2, r2, r1
 801850a:	fb03 f302 	mul.w	r3, r3, r2
 801850e:	3304      	adds	r3, #4
 8018510:	4418      	add	r0, r3
 8018512:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d1cf      	bne.n	80184ba <uxr_receive_reliable_message+0x22>
 801851a:	4641      	mov	r1, r8
 801851c:	463a      	mov	r2, r7
 801851e:	f002 f91e 	bl	801a75e <memcpy>
 8018522:	8921      	ldrh	r1, [r4, #8]
 8018524:	fbb5 f3f1 	udiv	r3, r5, r1
 8018528:	fb01 5313 	mls	r3, r1, r3, r5
 801852c:	b29b      	uxth	r3, r3
 801852e:	6862      	ldr	r2, [r4, #4]
 8018530:	fbb2 f2f1 	udiv	r2, r2, r1
 8018534:	6821      	ldr	r1, [r4, #0]
 8018536:	fb03 f302 	mul.w	r3, r3, r2
 801853a:	2201      	movs	r2, #1
 801853c:	50cf      	str	r7, [r1, r3]
 801853e:	9b08      	ldr	r3, [sp, #32]
 8018540:	701a      	strb	r2, [r3, #0]
 8018542:	f1b9 0f00 	cmp.w	r9, #0
 8018546:	d0b8      	beq.n	80184ba <uxr_receive_reliable_message+0x22>
 8018548:	89a6      	ldrh	r6, [r4, #12]
 801854a:	e001      	b.n	8018550 <uxr_receive_reliable_message+0xb8>
 801854c:	2801      	cmp	r0, #1
 801854e:	d1b4      	bne.n	80184ba <uxr_receive_reliable_message+0x22>
 8018550:	4630      	mov	r0, r6
 8018552:	2101      	movs	r1, #1
 8018554:	f000 fc3a 	bl	8018dcc <uxr_seq_num_add>
 8018558:	8921      	ldrh	r1, [r4, #8]
 801855a:	fbb0 f3f1 	udiv	r3, r0, r1
 801855e:	fb01 0313 	mls	r3, r1, r3, r0
 8018562:	b29b      	uxth	r3, r3
 8018564:	6862      	ldr	r2, [r4, #4]
 8018566:	fbb2 f2f1 	udiv	r2, r2, r1
 801856a:	4606      	mov	r6, r0
 801856c:	fb03 f302 	mul.w	r3, r3, r2
 8018570:	6820      	ldr	r0, [r4, #0]
 8018572:	3304      	adds	r3, #4
 8018574:	4418      	add	r0, r3
 8018576:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d09d      	beq.n	80184ba <uxr_receive_reliable_message+0x22>
 801857e:	6923      	ldr	r3, [r4, #16]
 8018580:	4798      	blx	r3
 8018582:	2802      	cmp	r0, #2
 8018584:	d1e2      	bne.n	801854c <uxr_receive_reliable_message+0xb4>
 8018586:	2601      	movs	r6, #1
 8018588:	e798      	b.n	80184bc <uxr_receive_reliable_message+0x24>
 801858a:	9b08      	ldr	r3, [sp, #32]
 801858c:	81a5      	strh	r5, [r4, #12]
 801858e:	2601      	movs	r6, #1
 8018590:	f883 9000 	strb.w	r9, [r3]
 8018594:	e792      	b.n	80184bc <uxr_receive_reliable_message+0x24>
 8018596:	bf00      	nop

08018598 <uxr_next_input_reliable_buffer_available>:
 8018598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801859c:	4604      	mov	r4, r0
 801859e:	460e      	mov	r6, r1
 80185a0:	8980      	ldrh	r0, [r0, #12]
 80185a2:	2101      	movs	r1, #1
 80185a4:	4617      	mov	r7, r2
 80185a6:	f000 fc11 	bl	8018dcc <uxr_seq_num_add>
 80185aa:	8921      	ldrh	r1, [r4, #8]
 80185ac:	fbb0 f3f1 	udiv	r3, r0, r1
 80185b0:	fb01 0313 	mls	r3, r1, r3, r0
 80185b4:	b29b      	uxth	r3, r3
 80185b6:	6862      	ldr	r2, [r4, #4]
 80185b8:	fbb2 f2f1 	udiv	r2, r2, r1
 80185bc:	fb03 f302 	mul.w	r3, r3, r2
 80185c0:	6822      	ldr	r2, [r4, #0]
 80185c2:	3304      	adds	r3, #4
 80185c4:	eb02 0803 	add.w	r8, r2, r3
 80185c8:	f858 9c04 	ldr.w	r9, [r8, #-4]
 80185cc:	f1b9 0f00 	cmp.w	r9, #0
 80185d0:	d025      	beq.n	801861e <uxr_next_input_reliable_buffer_available+0x86>
 80185d2:	6923      	ldr	r3, [r4, #16]
 80185d4:	4605      	mov	r5, r0
 80185d6:	4640      	mov	r0, r8
 80185d8:	4798      	blx	r3
 80185da:	4682      	mov	sl, r0
 80185dc:	b310      	cbz	r0, 8018624 <uxr_next_input_reliable_buffer_available+0x8c>
 80185de:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80185e2:	e005      	b.n	80185f0 <uxr_next_input_reliable_buffer_available+0x58>
 80185e4:	6923      	ldr	r3, [r4, #16]
 80185e6:	4798      	blx	r3
 80185e8:	2802      	cmp	r0, #2
 80185ea:	d032      	beq.n	8018652 <uxr_next_input_reliable_buffer_available+0xba>
 80185ec:	2801      	cmp	r0, #1
 80185ee:	d116      	bne.n	801861e <uxr_next_input_reliable_buffer_available+0x86>
 80185f0:	4650      	mov	r0, sl
 80185f2:	2101      	movs	r1, #1
 80185f4:	f000 fbea 	bl	8018dcc <uxr_seq_num_add>
 80185f8:	8921      	ldrh	r1, [r4, #8]
 80185fa:	fbb0 f3f1 	udiv	r3, r0, r1
 80185fe:	fb01 0313 	mls	r3, r1, r3, r0
 8018602:	b29b      	uxth	r3, r3
 8018604:	6862      	ldr	r2, [r4, #4]
 8018606:	fbb2 f2f1 	udiv	r2, r2, r1
 801860a:	4682      	mov	sl, r0
 801860c:	fb03 f302 	mul.w	r3, r3, r2
 8018610:	6820      	ldr	r0, [r4, #0]
 8018612:	3304      	adds	r3, #4
 8018614:	4418      	add	r0, r3
 8018616:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d1e2      	bne.n	80185e4 <uxr_next_input_reliable_buffer_available+0x4c>
 801861e:	2000      	movs	r0, #0
 8018620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018624:	464a      	mov	r2, r9
 8018626:	4641      	mov	r1, r8
 8018628:	4630      	mov	r0, r6
 801862a:	f7f9 f949 	bl	80118c0 <ucdr_init_buffer>
 801862e:	8921      	ldrh	r1, [r4, #8]
 8018630:	fbb5 f3f1 	udiv	r3, r5, r1
 8018634:	fb01 5313 	mls	r3, r1, r3, r5
 8018638:	b29b      	uxth	r3, r3
 801863a:	6862      	ldr	r2, [r4, #4]
 801863c:	fbb2 f2f1 	udiv	r2, r2, r1
 8018640:	6821      	ldr	r1, [r4, #0]
 8018642:	fb03 f302 	mul.w	r3, r3, r2
 8018646:	2001      	movs	r0, #1
 8018648:	f841 a003 	str.w	sl, [r1, r3]
 801864c:	81a5      	strh	r5, [r4, #12]
 801864e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018652:	8922      	ldrh	r2, [r4, #8]
 8018654:	fbb5 f0f2 	udiv	r0, r5, r2
 8018658:	fb02 5510 	mls	r5, r2, r0, r5
 801865c:	b2ad      	uxth	r5, r5
 801865e:	6863      	ldr	r3, [r4, #4]
 8018660:	fbb3 f3f2 	udiv	r3, r3, r2
 8018664:	fb05 f503 	mul.w	r5, r5, r3
 8018668:	6823      	ldr	r3, [r4, #0]
 801866a:	2000      	movs	r0, #0
 801866c:	5158      	str	r0, [r3, r5]
 801866e:	eba9 0207 	sub.w	r2, r9, r7
 8018672:	eb08 0107 	add.w	r1, r8, r7
 8018676:	4630      	mov	r0, r6
 8018678:	f7f9 f922 	bl	80118c0 <ucdr_init_buffer>
 801867c:	4630      	mov	r0, r6
 801867e:	4904      	ldr	r1, [pc, #16]	; (8018690 <uxr_next_input_reliable_buffer_available+0xf8>)
 8018680:	4622      	mov	r2, r4
 8018682:	f7f9 f8f3 	bl	801186c <ucdr_set_on_full_buffer_callback>
 8018686:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801868a:	2001      	movs	r0, #1
 801868c:	e7c8      	b.n	8018620 <uxr_next_input_reliable_buffer_available+0x88>
 801868e:	bf00      	nop
 8018690:	080183ad 	.word	0x080183ad

08018694 <uxr_process_heartbeat>:
 8018694:	b538      	push	{r3, r4, r5, lr}
 8018696:	4611      	mov	r1, r2
 8018698:	4604      	mov	r4, r0
 801869a:	89c0      	ldrh	r0, [r0, #14]
 801869c:	4615      	mov	r5, r2
 801869e:	f000 fb9d 	bl	8018ddc <uxr_seq_num_cmp>
 80186a2:	2800      	cmp	r0, #0
 80186a4:	bfb8      	it	lt
 80186a6:	81e5      	strhlt	r5, [r4, #14]
 80186a8:	bd38      	pop	{r3, r4, r5, pc}
 80186aa:	bf00      	nop

080186ac <uxr_compute_acknack>:
 80186ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186b0:	8903      	ldrh	r3, [r0, #8]
 80186b2:	8986      	ldrh	r6, [r0, #12]
 80186b4:	4604      	mov	r4, r0
 80186b6:	460d      	mov	r5, r1
 80186b8:	b1d3      	cbz	r3, 80186f0 <uxr_compute_acknack+0x44>
 80186ba:	4630      	mov	r0, r6
 80186bc:	2701      	movs	r7, #1
 80186be:	e003      	b.n	80186c8 <uxr_compute_acknack+0x1c>
 80186c0:	4567      	cmp	r7, ip
 80186c2:	d215      	bcs.n	80186f0 <uxr_compute_acknack+0x44>
 80186c4:	89a0      	ldrh	r0, [r4, #12]
 80186c6:	3701      	adds	r7, #1
 80186c8:	b2b9      	uxth	r1, r7
 80186ca:	f000 fb7f 	bl	8018dcc <uxr_seq_num_add>
 80186ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80186d2:	fbb0 f2fc 	udiv	r2, r0, ip
 80186d6:	e9d4 1300 	ldrd	r1, r3, [r4]
 80186da:	fb0c 0212 	mls	r2, ip, r2, r0
 80186de:	b292      	uxth	r2, r2
 80186e0:	fbb3 f3fc 	udiv	r3, r3, ip
 80186e4:	fb02 1303 	mla	r3, r2, r3, r1
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d1e8      	bne.n	80186c0 <uxr_compute_acknack+0x14>
 80186ee:	4606      	mov	r6, r0
 80186f0:	802e      	strh	r6, [r5, #0]
 80186f2:	4630      	mov	r0, r6
 80186f4:	2101      	movs	r1, #1
 80186f6:	89e6      	ldrh	r6, [r4, #14]
 80186f8:	f000 fb6c 	bl	8018dd4 <uxr_seq_num_sub>
 80186fc:	4601      	mov	r1, r0
 80186fe:	4630      	mov	r0, r6
 8018700:	f000 fb68 	bl	8018dd4 <uxr_seq_num_sub>
 8018704:	4606      	mov	r6, r0
 8018706:	b318      	cbz	r0, 8018750 <uxr_compute_acknack+0xa4>
 8018708:	f04f 0900 	mov.w	r9, #0
 801870c:	464f      	mov	r7, r9
 801870e:	f04f 0801 	mov.w	r8, #1
 8018712:	fa1f f189 	uxth.w	r1, r9
 8018716:	8828      	ldrh	r0, [r5, #0]
 8018718:	f000 fb58 	bl	8018dcc <uxr_seq_num_add>
 801871c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018720:	6822      	ldr	r2, [r4, #0]
 8018722:	fbb0 f1fc 	udiv	r1, r0, ip
 8018726:	fb01 011c 	mls	r1, r1, ip, r0
 801872a:	b289      	uxth	r1, r1
 801872c:	6863      	ldr	r3, [r4, #4]
 801872e:	fbb3 f3fc 	udiv	r3, r3, ip
 8018732:	fb01 2303 	mla	r3, r1, r3, r2
 8018736:	fa08 f209 	lsl.w	r2, r8, r9
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	f109 0901 	add.w	r9, r9, #1
 8018740:	b90b      	cbnz	r3, 8018746 <uxr_compute_acknack+0x9a>
 8018742:	4317      	orrs	r7, r2
 8018744:	b2bf      	uxth	r7, r7
 8018746:	454e      	cmp	r6, r9
 8018748:	d1e3      	bne.n	8018712 <uxr_compute_acknack+0x66>
 801874a:	4638      	mov	r0, r7
 801874c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018750:	4607      	mov	r7, r0
 8018752:	4638      	mov	r0, r7
 8018754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018758 <uxr_init_output_best_effort_stream>:
 8018758:	b410      	push	{r4}
 801875a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 801875e:	81c4      	strh	r4, [r0, #14]
 8018760:	e9c0 1300 	strd	r1, r3, [r0]
 8018764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018768:	7303      	strb	r3, [r0, #12]
 801876a:	6082      	str	r2, [r0, #8]
 801876c:	4770      	bx	lr
 801876e:	bf00      	nop

08018770 <uxr_reset_output_best_effort_stream>:
 8018770:	7b02      	ldrb	r2, [r0, #12]
 8018772:	6042      	str	r2, [r0, #4]
 8018774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018778:	81c3      	strh	r3, [r0, #14]
 801877a:	4770      	bx	lr

0801877c <uxr_prepare_best_effort_buffer_to_write>:
 801877c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801877e:	4604      	mov	r4, r0
 8018780:	b083      	sub	sp, #12
 8018782:	6840      	ldr	r0, [r0, #4]
 8018784:	460d      	mov	r5, r1
 8018786:	4616      	mov	r6, r2
 8018788:	f7fa fe80 	bl	801348c <uxr_submessage_padding>
 801878c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8018790:	4410      	add	r0, r2
 8018792:	1942      	adds	r2, r0, r5
 8018794:	4293      	cmp	r3, r2
 8018796:	bf2c      	ite	cs
 8018798:	2701      	movcs	r7, #1
 801879a:	2700      	movcc	r7, #0
 801879c:	d202      	bcs.n	80187a4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801879e:	4638      	mov	r0, r7
 80187a0:	b003      	add	sp, #12
 80187a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187a4:	9000      	str	r0, [sp, #0]
 80187a6:	6821      	ldr	r1, [r4, #0]
 80187a8:	4630      	mov	r0, r6
 80187aa:	2300      	movs	r3, #0
 80187ac:	f7f9 f876 	bl	801189c <ucdr_init_buffer_origin_offset>
 80187b0:	6861      	ldr	r1, [r4, #4]
 80187b2:	4638      	mov	r0, r7
 80187b4:	4429      	add	r1, r5
 80187b6:	6061      	str	r1, [r4, #4]
 80187b8:	b003      	add	sp, #12
 80187ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187bc <uxr_prepare_best_effort_buffer_to_send>:
 80187bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187c0:	6845      	ldr	r5, [r0, #4]
 80187c2:	4604      	mov	r4, r0
 80187c4:	7b00      	ldrb	r0, [r0, #12]
 80187c6:	4285      	cmp	r5, r0
 80187c8:	bf8c      	ite	hi
 80187ca:	2701      	movhi	r7, #1
 80187cc:	2700      	movls	r7, #0
 80187ce:	d802      	bhi.n	80187d6 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 80187d0:	4638      	mov	r0, r7
 80187d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187d6:	4688      	mov	r8, r1
 80187d8:	89e0      	ldrh	r0, [r4, #14]
 80187da:	2101      	movs	r1, #1
 80187dc:	4615      	mov	r5, r2
 80187de:	461e      	mov	r6, r3
 80187e0:	f000 faf4 	bl	8018dcc <uxr_seq_num_add>
 80187e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80187e8:	81e0      	strh	r0, [r4, #14]
 80187ea:	8030      	strh	r0, [r6, #0]
 80187ec:	f8c8 2000 	str.w	r2, [r8]
 80187f0:	602b      	str	r3, [r5, #0]
 80187f2:	7b23      	ldrb	r3, [r4, #12]
 80187f4:	6063      	str	r3, [r4, #4]
 80187f6:	4638      	mov	r0, r7
 80187f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080187fc <on_full_output_buffer>:
 80187fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187fe:	6802      	ldr	r2, [r0, #0]
 8018800:	460d      	mov	r5, r1
 8018802:	6809      	ldr	r1, [r1, #0]
 8018804:	892f      	ldrh	r7, [r5, #8]
 8018806:	686c      	ldr	r4, [r5, #4]
 8018808:	fbb4 f4f7 	udiv	r4, r4, r7
 801880c:	1a53      	subs	r3, r2, r1
 801880e:	fbb3 f3f4 	udiv	r3, r3, r4
 8018812:	3301      	adds	r3, #1
 8018814:	b29b      	uxth	r3, r3
 8018816:	fbb3 f2f7 	udiv	r2, r3, r7
 801881a:	fb07 3312 	mls	r3, r7, r2, r3
 801881e:	b29b      	uxth	r3, r3
 8018820:	fb04 f403 	mul.w	r4, r4, r3
 8018824:	7b2f      	ldrb	r7, [r5, #12]
 8018826:	590a      	ldr	r2, [r1, r4]
 8018828:	6903      	ldr	r3, [r0, #16]
 801882a:	443c      	add	r4, r7
 801882c:	3408      	adds	r4, #8
 801882e:	1bd2      	subs	r2, r2, r7
 8018830:	4606      	mov	r6, r0
 8018832:	4421      	add	r1, r4
 8018834:	3a04      	subs	r2, #4
 8018836:	f7f9 f83b 	bl	80118b0 <ucdr_init_buffer_origin>
 801883a:	4630      	mov	r0, r6
 801883c:	4902      	ldr	r1, [pc, #8]	; (8018848 <on_full_output_buffer+0x4c>)
 801883e:	462a      	mov	r2, r5
 8018840:	f7f9 f814 	bl	801186c <ucdr_set_on_full_buffer_callback>
 8018844:	2000      	movs	r0, #0
 8018846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018848:	080187fd 	.word	0x080187fd

0801884c <uxr_init_output_reliable_stream>:
 801884c:	b430      	push	{r4, r5}
 801884e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8018852:	6001      	str	r1, [r0, #0]
 8018854:	8103      	strh	r3, [r0, #8]
 8018856:	6042      	str	r2, [r0, #4]
 8018858:	7304      	strb	r4, [r0, #12]
 801885a:	b1b3      	cbz	r3, 801888a <uxr_init_output_reliable_stream+0x3e>
 801885c:	600c      	str	r4, [r1, #0]
 801885e:	8901      	ldrh	r1, [r0, #8]
 8018860:	2901      	cmp	r1, #1
 8018862:	d912      	bls.n	801888a <uxr_init_output_reliable_stream+0x3e>
 8018864:	2201      	movs	r2, #1
 8018866:	e9d0 5400 	ldrd	r5, r4, [r0]
 801886a:	fbb2 f3f1 	udiv	r3, r2, r1
 801886e:	fb01 2313 	mls	r3, r1, r3, r2
 8018872:	b29b      	uxth	r3, r3
 8018874:	fbb4 f1f1 	udiv	r1, r4, r1
 8018878:	fb03 f301 	mul.w	r3, r3, r1
 801887c:	7b01      	ldrb	r1, [r0, #12]
 801887e:	50e9      	str	r1, [r5, r3]
 8018880:	3201      	adds	r2, #1
 8018882:	8901      	ldrh	r1, [r0, #8]
 8018884:	b292      	uxth	r2, r2
 8018886:	4291      	cmp	r1, r2
 8018888:	d8ed      	bhi.n	8018866 <uxr_init_output_reliable_stream+0x1a>
 801888a:	f04f 32ff 	mov.w	r2, #4294967295
 801888e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018892:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018896:	4b05      	ldr	r3, [pc, #20]	; (80188ac <uxr_init_output_reliable_stream+0x60>)
 8018898:	f8c0 300e 	str.w	r3, [r0, #14]
 801889c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188a0:	2300      	movs	r3, #0
 80188a2:	bc30      	pop	{r4, r5}
 80188a4:	8242      	strh	r2, [r0, #18]
 80188a6:	8403      	strh	r3, [r0, #32]
 80188a8:	4770      	bx	lr
 80188aa:	bf00      	nop
 80188ac:	ffff0000 	.word	0xffff0000

080188b0 <uxr_reset_output_reliable_stream>:
 80188b0:	8902      	ldrh	r2, [r0, #8]
 80188b2:	b430      	push	{r4, r5}
 80188b4:	b19a      	cbz	r2, 80188de <uxr_reset_output_reliable_stream+0x2e>
 80188b6:	2400      	movs	r4, #0
 80188b8:	4621      	mov	r1, r4
 80188ba:	fbb1 f3f2 	udiv	r3, r1, r2
 80188be:	fb02 1313 	mls	r3, r2, r3, r1
 80188c2:	e9d0 5100 	ldrd	r5, r1, [r0]
 80188c6:	b29b      	uxth	r3, r3
 80188c8:	fbb1 f2f2 	udiv	r2, r1, r2
 80188cc:	fb03 f302 	mul.w	r3, r3, r2
 80188d0:	7b02      	ldrb	r2, [r0, #12]
 80188d2:	50ea      	str	r2, [r5, r3]
 80188d4:	3401      	adds	r4, #1
 80188d6:	8902      	ldrh	r2, [r0, #8]
 80188d8:	b2a1      	uxth	r1, r4
 80188da:	428a      	cmp	r2, r1
 80188dc:	d8ed      	bhi.n	80188ba <uxr_reset_output_reliable_stream+0xa>
 80188de:	f04f 32ff 	mov.w	r2, #4294967295
 80188e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80188e6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80188ea:	4b05      	ldr	r3, [pc, #20]	; (8018900 <uxr_reset_output_reliable_stream+0x50>)
 80188ec:	f8c0 300e 	str.w	r3, [r0, #14]
 80188f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188f4:	2300      	movs	r3, #0
 80188f6:	bc30      	pop	{r4, r5}
 80188f8:	8242      	strh	r2, [r0, #18]
 80188fa:	8403      	strh	r3, [r0, #32]
 80188fc:	4770      	bx	lr
 80188fe:	bf00      	nop
 8018900:	ffff0000 	.word	0xffff0000

08018904 <uxr_prepare_reliable_buffer_to_write>:
 8018904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018908:	89c5      	ldrh	r5, [r0, #14]
 801890a:	4604      	mov	r4, r0
 801890c:	8900      	ldrh	r0, [r0, #8]
 801890e:	fbb5 f3f0 	udiv	r3, r5, r0
 8018912:	4688      	mov	r8, r1
 8018914:	e9d4 1600 	ldrd	r1, r6, [r4]
 8018918:	fb00 5313 	mls	r3, r0, r3, r5
 801891c:	b29b      	uxth	r3, r3
 801891e:	fbb6 f0f0 	udiv	r0, r6, r0
 8018922:	fb00 f303 	mul.w	r3, r0, r3
 8018926:	3304      	adds	r3, #4
 8018928:	18cb      	adds	r3, r1, r3
 801892a:	b091      	sub	sp, #68	; 0x44
 801892c:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8018930:	9004      	str	r0, [sp, #16]
 8018932:	2104      	movs	r1, #4
 8018934:	4630      	mov	r0, r6
 8018936:	9305      	str	r3, [sp, #20]
 8018938:	9206      	str	r2, [sp, #24]
 801893a:	f7f8 ffc5 	bl	80118c8 <ucdr_alignment>
 801893e:	1833      	adds	r3, r6, r0
 8018940:	9804      	ldr	r0, [sp, #16]
 8018942:	9303      	str	r3, [sp, #12]
 8018944:	eb03 0708 	add.w	r7, r3, r8
 8018948:	1f06      	subs	r6, r0, #4
 801894a:	42b7      	cmp	r7, r6
 801894c:	f240 80dc 	bls.w	8018b08 <uxr_prepare_reliable_buffer_to_write+0x204>
 8018950:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8018954:	eb0e 0308 	add.w	r3, lr, r8
 8018958:	42b3      	cmp	r3, r6
 801895a:	f240 80c2 	bls.w	8018ae2 <uxr_prepare_reliable_buffer_to_write+0x1de>
 801895e:	9b03      	ldr	r3, [sp, #12]
 8018960:	3304      	adds	r3, #4
 8018962:	42b3      	cmp	r3, r6
 8018964:	f080 8112 	bcs.w	8018b8c <uxr_prepare_reliable_buffer_to_write+0x288>
 8018968:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801896c:	f1bc 0f00 	cmp.w	ip, #0
 8018970:	f000 8127 	beq.w	8018bc2 <uxr_prepare_reliable_buffer_to_write+0x2be>
 8018974:	e9d4 7300 	ldrd	r7, r3, [r4]
 8018978:	2100      	movs	r1, #0
 801897a:	4608      	mov	r0, r1
 801897c:	460a      	mov	r2, r1
 801897e:	fbb3 f9fc 	udiv	r9, r3, ip
 8018982:	fbb2 f3fc 	udiv	r3, r2, ip
 8018986:	fb0c 2313 	mls	r3, ip, r3, r2
 801898a:	b29b      	uxth	r3, r3
 801898c:	fb09 7303 	mla	r3, r9, r3, r7
 8018990:	3101      	adds	r1, #1
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	459e      	cmp	lr, r3
 8018996:	bf08      	it	eq
 8018998:	3001      	addeq	r0, #1
 801899a:	b28a      	uxth	r2, r1
 801899c:	bf08      	it	eq
 801899e:	b280      	uxtheq	r0, r0
 80189a0:	4562      	cmp	r2, ip
 80189a2:	d3ee      	bcc.n	8018982 <uxr_prepare_reliable_buffer_to_write+0x7e>
 80189a4:	9b03      	ldr	r3, [sp, #12]
 80189a6:	1f37      	subs	r7, r6, #4
 80189a8:	b2bf      	uxth	r7, r7
 80189aa:	eba7 0903 	sub.w	r9, r7, r3
 80189ae:	fa1f f989 	uxth.w	r9, r9
 80189b2:	eba7 070e 	sub.w	r7, r7, lr
 80189b6:	b2bf      	uxth	r7, r7
 80189b8:	eba8 0809 	sub.w	r8, r8, r9
 80189bc:	fbb8 faf7 	udiv	sl, r8, r7
 80189c0:	fb07 831a 	mls	r3, r7, sl, r8
 80189c4:	9707      	str	r7, [sp, #28]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	f040 80bf 	bne.w	8018b4a <uxr_prepare_reliable_buffer_to_write+0x246>
 80189cc:	fa1f fa8a 	uxth.w	sl, sl
 80189d0:	4582      	cmp	sl, r0
 80189d2:	f200 8095 	bhi.w	8018b00 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 80189d6:	f10d 0b20 	add.w	fp, sp, #32
 80189da:	f1ba 0f00 	cmp.w	sl, #0
 80189de:	d03a      	beq.n	8018a56 <uxr_prepare_reliable_buffer_to_write+0x152>
 80189e0:	f04f 0800 	mov.w	r8, #0
 80189e4:	f10d 0b20 	add.w	fp, sp, #32
 80189e8:	e000      	b.n	80189ec <uxr_prepare_reliable_buffer_to_write+0xe8>
 80189ea:	46b9      	mov	r9, r7
 80189ec:	e9d4 3200 	ldrd	r3, r2, [r4]
 80189f0:	fbb5 f1fc 	udiv	r1, r5, ip
 80189f4:	fb0c 5111 	mls	r1, ip, r1, r5
 80189f8:	b289      	uxth	r1, r1
 80189fa:	fbb2 f2fc 	udiv	r2, r2, ip
 80189fe:	fb01 f102 	mul.w	r1, r1, r2
 8018a02:	3104      	adds	r1, #4
 8018a04:	4419      	add	r1, r3
 8018a06:	4632      	mov	r2, r6
 8018a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a0c:	9300      	str	r3, [sp, #0]
 8018a0e:	4658      	mov	r0, fp
 8018a10:	2300      	movs	r3, #0
 8018a12:	f7f8 ff43 	bl	801189c <ucdr_init_buffer_origin_offset>
 8018a16:	464a      	mov	r2, r9
 8018a18:	2300      	movs	r3, #0
 8018a1a:	210d      	movs	r1, #13
 8018a1c:	4658      	mov	r0, fp
 8018a1e:	f7fa fcf5 	bl	801340c <uxr_buffer_submessage_header>
 8018a22:	8920      	ldrh	r0, [r4, #8]
 8018a24:	fbb5 f3f0 	udiv	r3, r5, r0
 8018a28:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018a2c:	fb00 5313 	mls	r3, r0, r3, r5
 8018a30:	b29b      	uxth	r3, r3
 8018a32:	fbb1 f1f0 	udiv	r1, r1, r0
 8018a36:	fb03 f301 	mul.w	r3, r3, r1
 8018a3a:	4628      	mov	r0, r5
 8018a3c:	50d6      	str	r6, [r2, r3]
 8018a3e:	2101      	movs	r1, #1
 8018a40:	f000 f9c4 	bl	8018dcc <uxr_seq_num_add>
 8018a44:	f108 0801 	add.w	r8, r8, #1
 8018a48:	fa1f f388 	uxth.w	r3, r8
 8018a4c:	459a      	cmp	sl, r3
 8018a4e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018a52:	4605      	mov	r5, r0
 8018a54:	d8c9      	bhi.n	80189ea <uxr_prepare_reliable_buffer_to_write+0xe6>
 8018a56:	fbb5 f1fc 	udiv	r1, r5, ip
 8018a5a:	fb0c 5111 	mls	r1, ip, r1, r5
 8018a5e:	b289      	uxth	r1, r1
 8018a60:	6863      	ldr	r3, [r4, #4]
 8018a62:	fbb3 fcfc 	udiv	ip, r3, ip
 8018a66:	6823      	ldr	r3, [r4, #0]
 8018a68:	fb01 f10c 	mul.w	r1, r1, ip
 8018a6c:	3104      	adds	r1, #4
 8018a6e:	4419      	add	r1, r3
 8018a70:	4632      	mov	r2, r6
 8018a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a76:	9300      	str	r3, [sp, #0]
 8018a78:	4658      	mov	r0, fp
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	f7f8 ff0e 	bl	801189c <ucdr_init_buffer_origin_offset>
 8018a80:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018a84:	4658      	mov	r0, fp
 8018a86:	fa1f f288 	uxth.w	r2, r8
 8018a8a:	2302      	movs	r3, #2
 8018a8c:	210d      	movs	r1, #13
 8018a8e:	f7fa fcbd 	bl	801340c <uxr_buffer_submessage_header>
 8018a92:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018a96:	8921      	ldrh	r1, [r4, #8]
 8018a98:	9f03      	ldr	r7, [sp, #12]
 8018a9a:	9307      	str	r3, [sp, #28]
 8018a9c:	9b05      	ldr	r3, [sp, #20]
 8018a9e:	7b26      	ldrb	r6, [r4, #12]
 8018aa0:	fbb5 f0f1 	udiv	r0, r5, r1
 8018aa4:	fbb2 f2f1 	udiv	r2, r2, r1
 8018aa8:	fb01 5010 	mls	r0, r1, r0, r5
 8018aac:	1d39      	adds	r1, r7, #4
 8018aae:	440b      	add	r3, r1
 8018ab0:	b280      	uxth	r0, r0
 8018ab2:	fb00 f002 	mul.w	r0, r0, r2
 8018ab6:	4619      	mov	r1, r3
 8018ab8:	3604      	adds	r6, #4
 8018aba:	9b07      	ldr	r3, [sp, #28]
 8018abc:	9a04      	ldr	r2, [sp, #16]
 8018abe:	4446      	add	r6, r8
 8018ac0:	501e      	str	r6, [r3, r0]
 8018ac2:	9e06      	ldr	r6, [sp, #24]
 8018ac4:	3a08      	subs	r2, #8
 8018ac6:	1bd2      	subs	r2, r2, r7
 8018ac8:	4630      	mov	r0, r6
 8018aca:	f7f8 fef9 	bl	80118c0 <ucdr_init_buffer>
 8018ace:	4630      	mov	r0, r6
 8018ad0:	493d      	ldr	r1, [pc, #244]	; (8018bc8 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8018ad2:	4622      	mov	r2, r4
 8018ad4:	f7f8 feca 	bl	801186c <ucdr_set_on_full_buffer_callback>
 8018ad8:	2001      	movs	r0, #1
 8018ada:	81e5      	strh	r5, [r4, #14]
 8018adc:	b011      	add	sp, #68	; 0x44
 8018ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ae2:	2101      	movs	r1, #1
 8018ae4:	89e0      	ldrh	r0, [r4, #14]
 8018ae6:	f000 f971 	bl	8018dcc <uxr_seq_num_add>
 8018aea:	8921      	ldrh	r1, [r4, #8]
 8018aec:	4605      	mov	r5, r0
 8018aee:	8a60      	ldrh	r0, [r4, #18]
 8018af0:	f000 f96c 	bl	8018dcc <uxr_seq_num_add>
 8018af4:	4601      	mov	r1, r0
 8018af6:	4628      	mov	r0, r5
 8018af8:	f000 f970 	bl	8018ddc <uxr_seq_num_cmp>
 8018afc:	2800      	cmp	r0, #0
 8018afe:	dd2a      	ble.n	8018b56 <uxr_prepare_reliable_buffer_to_write+0x252>
 8018b00:	2000      	movs	r0, #0
 8018b02:	b011      	add	sp, #68	; 0x44
 8018b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b08:	8921      	ldrh	r1, [r4, #8]
 8018b0a:	8a60      	ldrh	r0, [r4, #18]
 8018b0c:	f000 f95e 	bl	8018dcc <uxr_seq_num_add>
 8018b10:	4601      	mov	r1, r0
 8018b12:	4628      	mov	r0, r5
 8018b14:	f000 f962 	bl	8018ddc <uxr_seq_num_cmp>
 8018b18:	2800      	cmp	r0, #0
 8018b1a:	dcf1      	bgt.n	8018b00 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8018b1c:	8921      	ldrh	r1, [r4, #8]
 8018b1e:	fbb5 f3f1 	udiv	r3, r5, r1
 8018b22:	e9d4 4200 	ldrd	r4, r2, [r4]
 8018b26:	fb01 5313 	mls	r3, r1, r3, r5
 8018b2a:	b29b      	uxth	r3, r3
 8018b2c:	fbb2 f2f1 	udiv	r2, r2, r1
 8018b30:	fb03 f302 	mul.w	r3, r3, r2
 8018b34:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8018b38:	50e7      	str	r7, [r4, r3]
 8018b3a:	9b03      	ldr	r3, [sp, #12]
 8018b3c:	9300      	str	r3, [sp, #0]
 8018b3e:	463a      	mov	r2, r7
 8018b40:	2300      	movs	r3, #0
 8018b42:	f7f8 feab 	bl	801189c <ucdr_init_buffer_origin_offset>
 8018b46:	2001      	movs	r0, #1
 8018b48:	e7db      	b.n	8018b02 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8018b4a:	f10a 0a01 	add.w	sl, sl, #1
 8018b4e:	fa1f fa8a 	uxth.w	sl, sl
 8018b52:	9307      	str	r3, [sp, #28]
 8018b54:	e73c      	b.n	80189d0 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8018b56:	8920      	ldrh	r0, [r4, #8]
 8018b58:	fbb5 f3f0 	udiv	r3, r5, r0
 8018b5c:	fb00 5313 	mls	r3, r0, r3, r5
 8018b60:	b29b      	uxth	r3, r3
 8018b62:	6862      	ldr	r2, [r4, #4]
 8018b64:	6821      	ldr	r1, [r4, #0]
 8018b66:	fbb2 f0f0 	udiv	r0, r2, r0
 8018b6a:	fb03 f300 	mul.w	r3, r3, r0
 8018b6e:	7b22      	ldrb	r2, [r4, #12]
 8018b70:	9806      	ldr	r0, [sp, #24]
 8018b72:	3304      	adds	r3, #4
 8018b74:	4419      	add	r1, r3
 8018b76:	4442      	add	r2, r8
 8018b78:	f841 2c04 	str.w	r2, [r1, #-4]
 8018b7c:	7b23      	ldrb	r3, [r4, #12]
 8018b7e:	9300      	str	r3, [sp, #0]
 8018b80:	2300      	movs	r3, #0
 8018b82:	f7f8 fe8b 	bl	801189c <ucdr_init_buffer_origin_offset>
 8018b86:	81e5      	strh	r5, [r4, #14]
 8018b88:	2001      	movs	r0, #1
 8018b8a:	e7ba      	b.n	8018b02 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8018b8c:	4628      	mov	r0, r5
 8018b8e:	2101      	movs	r1, #1
 8018b90:	f000 f91c 	bl	8018dcc <uxr_seq_num_add>
 8018b94:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018b98:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018b9c:	fbb3 f1fc 	udiv	r1, r3, ip
 8018ba0:	fbb0 f3fc 	udiv	r3, r0, ip
 8018ba4:	fb0c 0313 	mls	r3, ip, r3, r0
 8018ba8:	b29b      	uxth	r3, r3
 8018baa:	fb03 f301 	mul.w	r3, r3, r1
 8018bae:	3304      	adds	r3, #4
 8018bb0:	18d3      	adds	r3, r2, r3
 8018bb2:	9305      	str	r3, [sp, #20]
 8018bb4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018bb8:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8018bbc:	9303      	str	r3, [sp, #12]
 8018bbe:	4605      	mov	r5, r0
 8018bc0:	e6d4      	b.n	801896c <uxr_prepare_reliable_buffer_to_write+0x68>
 8018bc2:	4660      	mov	r0, ip
 8018bc4:	e6ee      	b.n	80189a4 <uxr_prepare_reliable_buffer_to_write+0xa0>
 8018bc6:	bf00      	nop
 8018bc8:	080187fd 	.word	0x080187fd

08018bcc <uxr_prepare_next_reliable_buffer_to_send>:
 8018bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bd0:	4605      	mov	r5, r0
 8018bd2:	4688      	mov	r8, r1
 8018bd4:	8a00      	ldrh	r0, [r0, #16]
 8018bd6:	2101      	movs	r1, #1
 8018bd8:	4617      	mov	r7, r2
 8018bda:	461e      	mov	r6, r3
 8018bdc:	f000 f8f6 	bl	8018dcc <uxr_seq_num_add>
 8018be0:	8030      	strh	r0, [r6, #0]
 8018be2:	892a      	ldrh	r2, [r5, #8]
 8018be4:	fbb0 f3f2 	udiv	r3, r0, r2
 8018be8:	fb02 0413 	mls	r4, r2, r3, r0
 8018bec:	b2a4      	uxth	r4, r4
 8018bee:	686b      	ldr	r3, [r5, #4]
 8018bf0:	fbb3 f2f2 	udiv	r2, r3, r2
 8018bf4:	682b      	ldr	r3, [r5, #0]
 8018bf6:	89e9      	ldrh	r1, [r5, #14]
 8018bf8:	fb04 f402 	mul.w	r4, r4, r2
 8018bfc:	3404      	adds	r4, #4
 8018bfe:	4423      	add	r3, r4
 8018c00:	f8c8 3000 	str.w	r3, [r8]
 8018c04:	682b      	ldr	r3, [r5, #0]
 8018c06:	441c      	add	r4, r3
 8018c08:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018c0c:	603b      	str	r3, [r7, #0]
 8018c0e:	f000 f8e5 	bl	8018ddc <uxr_seq_num_cmp>
 8018c12:	2800      	cmp	r0, #0
 8018c14:	dd02      	ble.n	8018c1c <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8018c16:	2000      	movs	r0, #0
 8018c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c1c:	683a      	ldr	r2, [r7, #0]
 8018c1e:	7b2b      	ldrb	r3, [r5, #12]
 8018c20:	429a      	cmp	r2, r3
 8018c22:	d9f8      	bls.n	8018c16 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018c24:	8a69      	ldrh	r1, [r5, #18]
 8018c26:	8a28      	ldrh	r0, [r5, #16]
 8018c28:	f000 f8d4 	bl	8018dd4 <uxr_seq_num_sub>
 8018c2c:	892b      	ldrh	r3, [r5, #8]
 8018c2e:	4283      	cmp	r3, r0
 8018c30:	d0f1      	beq.n	8018c16 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018c32:	8830      	ldrh	r0, [r6, #0]
 8018c34:	89eb      	ldrh	r3, [r5, #14]
 8018c36:	8228      	strh	r0, [r5, #16]
 8018c38:	4298      	cmp	r0, r3
 8018c3a:	d002      	beq.n	8018c42 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8018c3c:	2001      	movs	r0, #1
 8018c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c42:	2101      	movs	r1, #1
 8018c44:	f000 f8c2 	bl	8018dcc <uxr_seq_num_add>
 8018c48:	81e8      	strh	r0, [r5, #14]
 8018c4a:	2001      	movs	r0, #1
 8018c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018c50 <uxr_update_output_stream_heartbeat_timestamp>:
 8018c50:	b5d0      	push	{r4, r6, r7, lr}
 8018c52:	8a01      	ldrh	r1, [r0, #16]
 8018c54:	4604      	mov	r4, r0
 8018c56:	8a40      	ldrh	r0, [r0, #18]
 8018c58:	4616      	mov	r6, r2
 8018c5a:	461f      	mov	r7, r3
 8018c5c:	f000 f8be 	bl	8018ddc <uxr_seq_num_cmp>
 8018c60:	2800      	cmp	r0, #0
 8018c62:	db07      	blt.n	8018c74 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018c64:	f04f 32ff 	mov.w	r2, #4294967295
 8018c68:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018c6c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018c70:	2000      	movs	r0, #0
 8018c72:	bdd0      	pop	{r4, r6, r7, pc}
 8018c74:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018c78:	b948      	cbnz	r0, 8018c8e <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8018c7a:	2301      	movs	r3, #1
 8018c7c:	f884 3020 	strb.w	r3, [r4, #32]
 8018c80:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8018c84:	f147 0200 	adc.w	r2, r7, #0
 8018c88:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8018c8c:	bdd0      	pop	{r4, r6, r7, pc}
 8018c8e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018c92:	4296      	cmp	r6, r2
 8018c94:	eb77 0303 	sbcs.w	r3, r7, r3
 8018c98:	bfa5      	ittet	ge
 8018c9a:	3001      	addge	r0, #1
 8018c9c:	f884 0020 	strbge.w	r0, [r4, #32]
 8018ca0:	2000      	movlt	r0, #0
 8018ca2:	2001      	movge	r0, #1
 8018ca4:	e7ec      	b.n	8018c80 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018ca6:	bf00      	nop

08018ca8 <uxr_begin_output_nack_buffer_it>:
 8018ca8:	8a40      	ldrh	r0, [r0, #18]
 8018caa:	4770      	bx	lr

08018cac <uxr_next_reliable_nack_buffer_to_send>:
 8018cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cb0:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8018cb4:	f1b9 0f00 	cmp.w	r9, #0
 8018cb8:	d011      	beq.n	8018cde <uxr_next_reliable_nack_buffer_to_send+0x32>
 8018cba:	4605      	mov	r5, r0
 8018cbc:	8818      	ldrh	r0, [r3, #0]
 8018cbe:	460f      	mov	r7, r1
 8018cc0:	4690      	mov	r8, r2
 8018cc2:	461e      	mov	r6, r3
 8018cc4:	2101      	movs	r1, #1
 8018cc6:	f000 f881 	bl	8018dcc <uxr_seq_num_add>
 8018cca:	8030      	strh	r0, [r6, #0]
 8018ccc:	8a29      	ldrh	r1, [r5, #16]
 8018cce:	f000 f885 	bl	8018ddc <uxr_seq_num_cmp>
 8018cd2:	2800      	cmp	r0, #0
 8018cd4:	dd06      	ble.n	8018ce4 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8018cd6:	f04f 0900 	mov.w	r9, #0
 8018cda:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8018cde:	4648      	mov	r0, r9
 8018ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ce4:	892a      	ldrh	r2, [r5, #8]
 8018ce6:	8830      	ldrh	r0, [r6, #0]
 8018ce8:	fbb0 f4f2 	udiv	r4, r0, r2
 8018cec:	fb02 0414 	mls	r4, r2, r4, r0
 8018cf0:	b2a4      	uxth	r4, r4
 8018cf2:	686b      	ldr	r3, [r5, #4]
 8018cf4:	fbb3 f2f2 	udiv	r2, r3, r2
 8018cf8:	682b      	ldr	r3, [r5, #0]
 8018cfa:	fb04 f402 	mul.w	r4, r4, r2
 8018cfe:	3404      	adds	r4, #4
 8018d00:	4423      	add	r3, r4
 8018d02:	603b      	str	r3, [r7, #0]
 8018d04:	682b      	ldr	r3, [r5, #0]
 8018d06:	441c      	add	r4, r3
 8018d08:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018d0c:	f8c8 3000 	str.w	r3, [r8]
 8018d10:	7b2a      	ldrb	r2, [r5, #12]
 8018d12:	429a      	cmp	r2, r3
 8018d14:	d0d6      	beq.n	8018cc4 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8018d16:	4648      	mov	r0, r9
 8018d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018d1c <uxr_process_acknack>:
 8018d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d1e:	4604      	mov	r4, r0
 8018d20:	460e      	mov	r6, r1
 8018d22:	4610      	mov	r0, r2
 8018d24:	2101      	movs	r1, #1
 8018d26:	f000 f855 	bl	8018dd4 <uxr_seq_num_sub>
 8018d2a:	8a61      	ldrh	r1, [r4, #18]
 8018d2c:	f000 f852 	bl	8018dd4 <uxr_seq_num_sub>
 8018d30:	b1c0      	cbz	r0, 8018d64 <uxr_process_acknack+0x48>
 8018d32:	4605      	mov	r5, r0
 8018d34:	2700      	movs	r7, #0
 8018d36:	2101      	movs	r1, #1
 8018d38:	8a60      	ldrh	r0, [r4, #18]
 8018d3a:	f000 f847 	bl	8018dcc <uxr_seq_num_add>
 8018d3e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018d42:	fbb0 f3fc 	udiv	r3, r0, ip
 8018d46:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018d4a:	fb0c 0313 	mls	r3, ip, r3, r0
 8018d4e:	b29b      	uxth	r3, r3
 8018d50:	fbb1 f1fc 	udiv	r1, r1, ip
 8018d54:	3701      	adds	r7, #1
 8018d56:	fb03 f301 	mul.w	r3, r3, r1
 8018d5a:	42bd      	cmp	r5, r7
 8018d5c:	7b21      	ldrb	r1, [r4, #12]
 8018d5e:	8260      	strh	r0, [r4, #18]
 8018d60:	50d1      	str	r1, [r2, r3]
 8018d62:	d1e8      	bne.n	8018d36 <uxr_process_acknack+0x1a>
 8018d64:	3e00      	subs	r6, #0
 8018d66:	f04f 0300 	mov.w	r3, #0
 8018d6a:	bf18      	it	ne
 8018d6c:	2601      	movne	r6, #1
 8018d6e:	f884 3020 	strb.w	r3, [r4, #32]
 8018d72:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8018d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018d78 <uxr_is_output_up_to_date>:
 8018d78:	8a01      	ldrh	r1, [r0, #16]
 8018d7a:	8a40      	ldrh	r0, [r0, #18]
 8018d7c:	b508      	push	{r3, lr}
 8018d7e:	f000 f82d 	bl	8018ddc <uxr_seq_num_cmp>
 8018d82:	fab0 f080 	clz	r0, r0
 8018d86:	0940      	lsrs	r0, r0, #5
 8018d88:	bd08      	pop	{r3, pc}
 8018d8a:	bf00      	nop

08018d8c <get_available_free_slots>:
 8018d8c:	8901      	ldrh	r1, [r0, #8]
 8018d8e:	b1d9      	cbz	r1, 8018dc8 <get_available_free_slots+0x3c>
 8018d90:	b4f0      	push	{r4, r5, r6, r7}
 8018d92:	2400      	movs	r4, #0
 8018d94:	6845      	ldr	r5, [r0, #4]
 8018d96:	6807      	ldr	r7, [r0, #0]
 8018d98:	7b06      	ldrb	r6, [r0, #12]
 8018d9a:	fbb5 f5f1 	udiv	r5, r5, r1
 8018d9e:	4620      	mov	r0, r4
 8018da0:	4622      	mov	r2, r4
 8018da2:	fbb2 f3f1 	udiv	r3, r2, r1
 8018da6:	fb01 2313 	mls	r3, r1, r3, r2
 8018daa:	b29b      	uxth	r3, r3
 8018dac:	fb05 7303 	mla	r3, r5, r3, r7
 8018db0:	3401      	adds	r4, #1
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	429e      	cmp	r6, r3
 8018db6:	bf08      	it	eq
 8018db8:	3001      	addeq	r0, #1
 8018dba:	b2a2      	uxth	r2, r4
 8018dbc:	bf08      	it	eq
 8018dbe:	b280      	uxtheq	r0, r0
 8018dc0:	428a      	cmp	r2, r1
 8018dc2:	d3ee      	bcc.n	8018da2 <get_available_free_slots+0x16>
 8018dc4:	bcf0      	pop	{r4, r5, r6, r7}
 8018dc6:	4770      	bx	lr
 8018dc8:	4608      	mov	r0, r1
 8018dca:	4770      	bx	lr

08018dcc <uxr_seq_num_add>:
 8018dcc:	4408      	add	r0, r1
 8018dce:	b280      	uxth	r0, r0
 8018dd0:	4770      	bx	lr
 8018dd2:	bf00      	nop

08018dd4 <uxr_seq_num_sub>:
 8018dd4:	1a40      	subs	r0, r0, r1
 8018dd6:	b280      	uxth	r0, r0
 8018dd8:	4770      	bx	lr
 8018dda:	bf00      	nop

08018ddc <uxr_seq_num_cmp>:
 8018ddc:	4288      	cmp	r0, r1
 8018dde:	d011      	beq.n	8018e04 <uxr_seq_num_cmp+0x28>
 8018de0:	d309      	bcc.n	8018df6 <uxr_seq_num_cmp+0x1a>
 8018de2:	4288      	cmp	r0, r1
 8018de4:	d910      	bls.n	8018e08 <uxr_seq_num_cmp+0x2c>
 8018de6:	1a40      	subs	r0, r0, r1
 8018de8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8018dec:	bfd4      	ite	le
 8018dee:	2001      	movle	r0, #1
 8018df0:	f04f 30ff 	movgt.w	r0, #4294967295
 8018df4:	4770      	bx	lr
 8018df6:	1a0b      	subs	r3, r1, r0
 8018df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018dfc:	daf1      	bge.n	8018de2 <uxr_seq_num_cmp+0x6>
 8018dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8018e02:	4770      	bx	lr
 8018e04:	2000      	movs	r0, #0
 8018e06:	4770      	bx	lr
 8018e08:	2001      	movs	r0, #1
 8018e0a:	4770      	bx	lr

08018e0c <uxr_init_framing_io>:
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	7041      	strb	r1, [r0, #1]
 8018e10:	7003      	strb	r3, [r0, #0]
 8018e12:	8583      	strh	r3, [r0, #44]	; 0x2c
 8018e14:	4770      	bx	lr
 8018e16:	bf00      	nop

08018e18 <uxr_write_framed_msg>:
 8018e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e1c:	7845      	ldrb	r5, [r0, #1]
 8018e1e:	b085      	sub	sp, #20
 8018e20:	4604      	mov	r4, r0
 8018e22:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8018e26:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8018e2a:	f1bc 0f01 	cmp.w	ip, #1
 8018e2e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8018e32:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018e36:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8018e3a:	460e      	mov	r6, r1
 8018e3c:	4617      	mov	r7, r2
 8018e3e:	469b      	mov	fp, r3
 8018e40:	f240 8116 	bls.w	8019070 <uxr_write_framed_msg+0x258>
 8018e44:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8018e48:	2302      	movs	r3, #2
 8018e4a:	2a01      	cmp	r2, #1
 8018e4c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8018e50:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018e54:	f240 8091 	bls.w	8018f7a <uxr_write_framed_msg+0x162>
 8018e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e5a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8018e5e:	b2d9      	uxtb	r1, r3
 8018e60:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8018e64:	2203      	movs	r2, #3
 8018e66:	2b01      	cmp	r3, #1
 8018e68:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018e6c:	f240 809a 	bls.w	8018fa4 <uxr_write_framed_msg+0x18c>
 8018e70:	18a3      	adds	r3, r4, r2
 8018e72:	3201      	adds	r2, #1
 8018e74:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8018e78:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e7e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018e82:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8018e86:	2901      	cmp	r1, #1
 8018e88:	eb04 0102 	add.w	r1, r4, r2
 8018e8c:	f240 8101 	bls.w	8019092 <uxr_write_framed_msg+0x27a>
 8018e90:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8018e94:	3201      	adds	r2, #1
 8018e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e98:	b2d2      	uxtb	r2, r2
 8018e9a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	f000 8106 	beq.w	80190b0 <uxr_write_framed_msg+0x298>
 8018ea4:	f04f 0a00 	mov.w	sl, #0
 8018ea8:	46d1      	mov	r9, sl
 8018eaa:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8018eae:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8018eb2:	2901      	cmp	r1, #1
 8018eb4:	f240 80a3 	bls.w	8018ffe <uxr_write_framed_msg+0x1e6>
 8018eb8:	2a29      	cmp	r2, #41	; 0x29
 8018eba:	d87f      	bhi.n	8018fbc <uxr_write_framed_msg+0x1a4>
 8018ebc:	18a1      	adds	r1, r4, r2
 8018ebe:	3201      	adds	r2, #1
 8018ec0:	b2d2      	uxtb	r2, r2
 8018ec2:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8018ec6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018eca:	ea8a 0303 	eor.w	r3, sl, r3
 8018ece:	4984      	ldr	r1, [pc, #528]	; (80190e0 <uxr_write_framed_msg+0x2c8>)
 8018ed0:	b2db      	uxtb	r3, r3
 8018ed2:	f109 0901 	add.w	r9, r9, #1
 8018ed6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018eda:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8018ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ee0:	454b      	cmp	r3, r9
 8018ee2:	d8e2      	bhi.n	8018eaa <uxr_write_framed_msg+0x92>
 8018ee4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018ee8:	fa5f f98a 	uxtb.w	r9, sl
 8018eec:	9301      	str	r3, [sp, #4]
 8018eee:	f04f 0b00 	mov.w	fp, #0
 8018ef2:	f88d 900c 	strb.w	r9, [sp, #12]
 8018ef6:	f88d 300d 	strb.w	r3, [sp, #13]
 8018efa:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8018efe:	fa5f f18a 	uxtb.w	r1, sl
 8018f02:	2901      	cmp	r1, #1
 8018f04:	d920      	bls.n	8018f48 <uxr_write_framed_msg+0x130>
 8018f06:	2a29      	cmp	r2, #41	; 0x29
 8018f08:	f240 808b 	bls.w	8019022 <uxr_write_framed_msg+0x20a>
 8018f0c:	2500      	movs	r5, #0
 8018f0e:	e000      	b.n	8018f12 <uxr_write_framed_msg+0xfa>
 8018f10:	b160      	cbz	r0, 8018f2c <uxr_write_framed_msg+0x114>
 8018f12:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018f16:	1b52      	subs	r2, r2, r5
 8018f18:	4421      	add	r1, r4
 8018f1a:	4643      	mov	r3, r8
 8018f1c:	4638      	mov	r0, r7
 8018f1e:	47b0      	blx	r6
 8018f20:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018f24:	4405      	add	r5, r0
 8018f26:	4295      	cmp	r5, r2
 8018f28:	d3f2      	bcc.n	8018f10 <uxr_write_framed_msg+0xf8>
 8018f2a:	d003      	beq.n	8018f34 <uxr_write_framed_msg+0x11c>
 8018f2c:	2000      	movs	r0, #0
 8018f2e:	b005      	add	sp, #20
 8018f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f34:	fa5f f18a 	uxtb.w	r1, sl
 8018f38:	f04f 0300 	mov.w	r3, #0
 8018f3c:	2901      	cmp	r1, #1
 8018f3e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018f42:	f04f 0200 	mov.w	r2, #0
 8018f46:	d86c      	bhi.n	8019022 <uxr_write_framed_msg+0x20a>
 8018f48:	1c51      	adds	r1, r2, #1
 8018f4a:	b2c9      	uxtb	r1, r1
 8018f4c:	2929      	cmp	r1, #41	; 0x29
 8018f4e:	d8dd      	bhi.n	8018f0c <uxr_write_framed_msg+0xf4>
 8018f50:	18a0      	adds	r0, r4, r2
 8018f52:	3202      	adds	r2, #2
 8018f54:	f089 0920 	eor.w	r9, r9, #32
 8018f58:	b2d2      	uxtb	r2, r2
 8018f5a:	4659      	mov	r1, fp
 8018f5c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8018f60:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8018f64:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018f68:	f04f 0b01 	mov.w	fp, #1
 8018f6c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018f70:	2900      	cmp	r1, #0
 8018f72:	d162      	bne.n	801903a <uxr_write_framed_msg+0x222>
 8018f74:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018f78:	e7bf      	b.n	8018efa <uxr_write_framed_msg+0xe2>
 8018f7a:	2204      	movs	r2, #4
 8018f7c:	2503      	movs	r5, #3
 8018f7e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018f80:	4423      	add	r3, r4
 8018f82:	b2c9      	uxtb	r1, r1
 8018f84:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8018f88:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8018f8c:	4425      	add	r5, r4
 8018f8e:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8018f92:	f080 0020 	eor.w	r0, r0, #32
 8018f96:	2b01      	cmp	r3, #1
 8018f98:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8018f9c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018fa0:	f63f af66 	bhi.w	8018e70 <uxr_write_framed_msg+0x58>
 8018fa4:	18a3      	adds	r3, r4, r2
 8018fa6:	f081 0120 	eor.w	r1, r1, #32
 8018faa:	3202      	adds	r2, #2
 8018fac:	207d      	movs	r0, #125	; 0x7d
 8018fae:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8018fb2:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8018fb6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018fba:	e75f      	b.n	8018e7c <uxr_write_framed_msg+0x64>
 8018fbc:	2500      	movs	r5, #0
 8018fbe:	e001      	b.n	8018fc4 <uxr_write_framed_msg+0x1ac>
 8018fc0:	2800      	cmp	r0, #0
 8018fc2:	d0b3      	beq.n	8018f2c <uxr_write_framed_msg+0x114>
 8018fc4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018fc8:	1b52      	subs	r2, r2, r5
 8018fca:	4421      	add	r1, r4
 8018fcc:	4643      	mov	r3, r8
 8018fce:	4638      	mov	r0, r7
 8018fd0:	47b0      	blx	r6
 8018fd2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018fd6:	4405      	add	r5, r0
 8018fd8:	4295      	cmp	r5, r2
 8018fda:	d3f1      	bcc.n	8018fc0 <uxr_write_framed_msg+0x1a8>
 8018fdc:	d1a6      	bne.n	8018f2c <uxr_write_framed_msg+0x114>
 8018fde:	f04f 0300 	mov.w	r3, #0
 8018fe2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fe8:	454b      	cmp	r3, r9
 8018fea:	d971      	bls.n	80190d0 <uxr_write_framed_msg+0x2b8>
 8018fec:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8018ff0:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8018ff4:	2901      	cmp	r1, #1
 8018ff6:	f04f 0200 	mov.w	r2, #0
 8018ffa:	f63f af5d 	bhi.w	8018eb8 <uxr_write_framed_msg+0xa0>
 8018ffe:	1c51      	adds	r1, r2, #1
 8019000:	b2c9      	uxtb	r1, r1
 8019002:	2929      	cmp	r1, #41	; 0x29
 8019004:	d8da      	bhi.n	8018fbc <uxr_write_framed_msg+0x1a4>
 8019006:	18a0      	adds	r0, r4, r2
 8019008:	3202      	adds	r2, #2
 801900a:	b2d2      	uxtb	r2, r2
 801900c:	f083 0120 	eor.w	r1, r3, #32
 8019010:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8019014:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8019018:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 801901c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019020:	e753      	b.n	8018eca <uxr_write_framed_msg+0xb2>
 8019022:	18a0      	adds	r0, r4, r2
 8019024:	3201      	adds	r2, #1
 8019026:	b2d2      	uxtb	r2, r2
 8019028:	4659      	mov	r1, fp
 801902a:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 801902e:	f04f 0b01 	mov.w	fp, #1
 8019032:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019036:	2900      	cmp	r1, #0
 8019038:	d09c      	beq.n	8018f74 <uxr_write_framed_msg+0x15c>
 801903a:	2500      	movs	r5, #0
 801903c:	e002      	b.n	8019044 <uxr_write_framed_msg+0x22c>
 801903e:	2800      	cmp	r0, #0
 8019040:	f43f af74 	beq.w	8018f2c <uxr_write_framed_msg+0x114>
 8019044:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019048:	1b52      	subs	r2, r2, r5
 801904a:	4421      	add	r1, r4
 801904c:	4643      	mov	r3, r8
 801904e:	4638      	mov	r0, r7
 8019050:	47b0      	blx	r6
 8019052:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019056:	4405      	add	r5, r0
 8019058:	4295      	cmp	r5, r2
 801905a:	d3f0      	bcc.n	801903e <uxr_write_framed_msg+0x226>
 801905c:	f47f af66 	bne.w	8018f2c <uxr_write_framed_msg+0x114>
 8019060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019062:	2300      	movs	r3, #0
 8019064:	b290      	uxth	r0, r2
 8019066:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801906a:	b005      	add	sp, #20
 801906c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019070:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8019074:	f085 0520 	eor.w	r5, r5, #32
 8019078:	2303      	movs	r3, #3
 801907a:	217d      	movs	r1, #125	; 0x7d
 801907c:	2a01      	cmp	r2, #1
 801907e:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8019082:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019086:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801908a:	d814      	bhi.n	80190b6 <uxr_write_framed_msg+0x29e>
 801908c:	2205      	movs	r2, #5
 801908e:	2504      	movs	r5, #4
 8019090:	e775      	b.n	8018f7e <uxr_write_framed_msg+0x166>
 8019092:	f083 0320 	eor.w	r3, r3, #32
 8019096:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 801909a:	3202      	adds	r2, #2
 801909c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801909e:	b2d2      	uxtb	r2, r2
 80190a0:	207d      	movs	r0, #125	; 0x7d
 80190a2:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80190a6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	f47f aefa 	bne.w	8018ea4 <uxr_write_framed_msg+0x8c>
 80190b0:	9301      	str	r3, [sp, #4]
 80190b2:	4699      	mov	r9, r3
 80190b4:	e71b      	b.n	8018eee <uxr_write_framed_msg+0xd6>
 80190b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80190b8:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80190bc:	b2d9      	uxtb	r1, r3
 80190be:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80190c2:	2204      	movs	r2, #4
 80190c4:	2b01      	cmp	r3, #1
 80190c6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80190ca:	f63f aed1 	bhi.w	8018e70 <uxr_write_framed_msg+0x58>
 80190ce:	e769      	b.n	8018fa4 <uxr_write_framed_msg+0x18c>
 80190d0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80190d4:	fa5f f98a 	uxtb.w	r9, sl
 80190d8:	9301      	str	r3, [sp, #4]
 80190da:	2200      	movs	r2, #0
 80190dc:	e707      	b.n	8018eee <uxr_write_framed_msg+0xd6>
 80190de:	bf00      	nop
 80190e0:	0801bf50 	.word	0x0801bf50

080190e4 <uxr_framing_read_transport>:
 80190e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190e8:	4604      	mov	r4, r0
 80190ea:	b083      	sub	sp, #12
 80190ec:	461f      	mov	r7, r3
 80190ee:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80190f2:	4689      	mov	r9, r1
 80190f4:	4692      	mov	sl, r2
 80190f6:	f7fa f9cf 	bl	8013498 <uxr_millis>
 80190fa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80190fe:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8019102:	42b3      	cmp	r3, r6
 8019104:	4680      	mov	r8, r0
 8019106:	d05f      	beq.n	80191c8 <uxr_framing_read_transport+0xe4>
 8019108:	d81b      	bhi.n	8019142 <uxr_framing_read_transport+0x5e>
 801910a:	1e75      	subs	r5, r6, #1
 801910c:	1aed      	subs	r5, r5, r3
 801910e:	b2ed      	uxtb	r5, r5
 8019110:	2600      	movs	r6, #0
 8019112:	455d      	cmp	r5, fp
 8019114:	d81e      	bhi.n	8019154 <uxr_framing_read_transport+0x70>
 8019116:	19ab      	adds	r3, r5, r6
 8019118:	455b      	cmp	r3, fp
 801911a:	bf84      	itt	hi
 801911c:	ebab 0605 	subhi.w	r6, fp, r5
 8019120:	b2f6      	uxtbhi	r6, r6
 8019122:	b9e5      	cbnz	r5, 801915e <uxr_framing_read_transport+0x7a>
 8019124:	f04f 0b00 	mov.w	fp, #0
 8019128:	f7fa f9b6 	bl	8013498 <uxr_millis>
 801912c:	683b      	ldr	r3, [r7, #0]
 801912e:	eba0 0008 	sub.w	r0, r0, r8
 8019132:	1a1b      	subs	r3, r3, r0
 8019134:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019138:	4658      	mov	r0, fp
 801913a:	603b      	str	r3, [r7, #0]
 801913c:	b003      	add	sp, #12
 801913e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019142:	2e00      	cmp	r6, #0
 8019144:	d048      	beq.n	80191d8 <uxr_framing_read_transport+0xf4>
 8019146:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 801914a:	b2ed      	uxtb	r5, r5
 801914c:	3e01      	subs	r6, #1
 801914e:	455d      	cmp	r5, fp
 8019150:	b2f6      	uxtb	r6, r6
 8019152:	d9e0      	bls.n	8019116 <uxr_framing_read_transport+0x32>
 8019154:	fa5f f58b 	uxtb.w	r5, fp
 8019158:	2600      	movs	r6, #0
 801915a:	2d00      	cmp	r5, #0
 801915c:	d0e2      	beq.n	8019124 <uxr_framing_read_transport+0x40>
 801915e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019162:	3102      	adds	r1, #2
 8019164:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019166:	9300      	str	r3, [sp, #0]
 8019168:	683b      	ldr	r3, [r7, #0]
 801916a:	4421      	add	r1, r4
 801916c:	462a      	mov	r2, r5
 801916e:	4650      	mov	r0, sl
 8019170:	47c8      	blx	r9
 8019172:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019176:	4a1b      	ldr	r2, [pc, #108]	; (80191e4 <uxr_framing_read_transport+0x100>)
 8019178:	4403      	add	r3, r0
 801917a:	0859      	lsrs	r1, r3, #1
 801917c:	fba2 2101 	umull	r2, r1, r2, r1
 8019180:	0889      	lsrs	r1, r1, #2
 8019182:	222a      	movs	r2, #42	; 0x2a
 8019184:	fb02 3111 	mls	r1, r2, r1, r3
 8019188:	4683      	mov	fp, r0
 801918a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801918e:	2800      	cmp	r0, #0
 8019190:	d0c8      	beq.n	8019124 <uxr_framing_read_transport+0x40>
 8019192:	42a8      	cmp	r0, r5
 8019194:	d1c8      	bne.n	8019128 <uxr_framing_read_transport+0x44>
 8019196:	b31e      	cbz	r6, 80191e0 <uxr_framing_read_transport+0xfc>
 8019198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801919a:	9300      	str	r3, [sp, #0]
 801919c:	3102      	adds	r1, #2
 801919e:	4421      	add	r1, r4
 80191a0:	4632      	mov	r2, r6
 80191a2:	2300      	movs	r3, #0
 80191a4:	4650      	mov	r0, sl
 80191a6:	47c8      	blx	r9
 80191a8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80191ac:	490d      	ldr	r1, [pc, #52]	; (80191e4 <uxr_framing_read_transport+0x100>)
 80191ae:	181a      	adds	r2, r3, r0
 80191b0:	0853      	lsrs	r3, r2, #1
 80191b2:	fba1 1303 	umull	r1, r3, r1, r3
 80191b6:	089b      	lsrs	r3, r3, #2
 80191b8:	212a      	movs	r1, #42	; 0x2a
 80191ba:	fb01 2313 	mls	r3, r1, r3, r2
 80191be:	eb00 0b05 	add.w	fp, r0, r5
 80191c2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80191c6:	e7af      	b.n	8019128 <uxr_framing_read_transport+0x44>
 80191c8:	2600      	movs	r6, #0
 80191ca:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80191ce:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80191d0:	d9c0      	bls.n	8019154 <uxr_framing_read_transport+0x70>
 80191d2:	2102      	movs	r1, #2
 80191d4:	2529      	movs	r5, #41	; 0x29
 80191d6:	e7c5      	b.n	8019164 <uxr_framing_read_transport+0x80>
 80191d8:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80191dc:	b2ed      	uxtb	r5, r5
 80191de:	e798      	b.n	8019112 <uxr_framing_read_transport+0x2e>
 80191e0:	46ab      	mov	fp, r5
 80191e2:	e7a1      	b.n	8019128 <uxr_framing_read_transport+0x44>
 80191e4:	30c30c31 	.word	0x30c30c31

080191e8 <uxr_read_framed_msg>:
 80191e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191ec:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 80191f0:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 80191f4:	42ae      	cmp	r6, r5
 80191f6:	b083      	sub	sp, #12
 80191f8:	4604      	mov	r4, r0
 80191fa:	461f      	mov	r7, r3
 80191fc:	4689      	mov	r9, r1
 80191fe:	4692      	mov	sl, r2
 8019200:	f000 817d 	beq.w	80194fe <uxr_read_framed_msg+0x316>
 8019204:	7823      	ldrb	r3, [r4, #0]
 8019206:	4ecc      	ldr	r6, [pc, #816]	; (8019538 <uxr_read_framed_msg+0x350>)
 8019208:	f8df 8330 	ldr.w	r8, [pc, #816]	; 801953c <uxr_read_framed_msg+0x354>
 801920c:	2b07      	cmp	r3, #7
 801920e:	d8fd      	bhi.n	801920c <uxr_read_framed_msg+0x24>
 8019210:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019214:	00f40113 	.word	0x00f40113
 8019218:	00b700d4 	.word	0x00b700d4
 801921c:	004d008e 	.word	0x004d008e
 8019220:	00080030 	.word	0x00080030
 8019224:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019228:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801922c:	4298      	cmp	r0, r3
 801922e:	f000 8141 	beq.w	80194b4 <uxr_read_framed_msg+0x2cc>
 8019232:	18e2      	adds	r2, r4, r3
 8019234:	7891      	ldrb	r1, [r2, #2]
 8019236:	297d      	cmp	r1, #125	; 0x7d
 8019238:	f000 81a2 	beq.w	8019580 <uxr_read_framed_msg+0x398>
 801923c:	3301      	adds	r3, #1
 801923e:	085a      	lsrs	r2, r3, #1
 8019240:	fba6 0202 	umull	r0, r2, r6, r2
 8019244:	0892      	lsrs	r2, r2, #2
 8019246:	202a      	movs	r0, #42	; 0x2a
 8019248:	fb00 3312 	mls	r3, r0, r2, r3
 801924c:	297e      	cmp	r1, #126	; 0x7e
 801924e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019252:	f000 8251 	beq.w	80196f8 <uxr_read_framed_msg+0x510>
 8019256:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019258:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801925a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801925e:	b29b      	uxth	r3, r3
 8019260:	2100      	movs	r1, #0
 8019262:	429a      	cmp	r2, r3
 8019264:	86a3      	strh	r3, [r4, #52]	; 0x34
 8019266:	7021      	strb	r1, [r4, #0]
 8019268:	f000 8182 	beq.w	8019570 <uxr_read_framed_msg+0x388>
 801926c:	2000      	movs	r0, #0
 801926e:	b003      	add	sp, #12
 8019270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019274:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019278:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801927c:	4298      	cmp	r0, r3
 801927e:	f000 8128 	beq.w	80194d2 <uxr_read_framed_msg+0x2ea>
 8019282:	18e2      	adds	r2, r4, r3
 8019284:	7891      	ldrb	r1, [r2, #2]
 8019286:	297d      	cmp	r1, #125	; 0x7d
 8019288:	f000 8196 	beq.w	80195b8 <uxr_read_framed_msg+0x3d0>
 801928c:	3301      	adds	r3, #1
 801928e:	085a      	lsrs	r2, r3, #1
 8019290:	fba6 0202 	umull	r0, r2, r6, r2
 8019294:	0892      	lsrs	r2, r2, #2
 8019296:	202a      	movs	r0, #42	; 0x2a
 8019298:	fb00 3312 	mls	r3, r0, r2, r3
 801929c:	297e      	cmp	r1, #126	; 0x7e
 801929e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80192a2:	f000 8219 	beq.w	80196d8 <uxr_read_framed_msg+0x4f0>
 80192a6:	2307      	movs	r3, #7
 80192a8:	86a1      	strh	r1, [r4, #52]	; 0x34
 80192aa:	7023      	strb	r3, [r4, #0]
 80192ac:	e7ae      	b.n	801920c <uxr_read_framed_msg+0x24>
 80192ae:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80192b0:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80192b2:	429d      	cmp	r5, r3
 80192b4:	d937      	bls.n	8019326 <uxr_read_framed_msg+0x13e>
 80192b6:	ee07 9a90 	vmov	s15, r9
 80192ba:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80192be:	e01e      	b.n	80192fe <uxr_read_framed_msg+0x116>
 80192c0:	f89e e002 	ldrb.w	lr, [lr, #2]
 80192c4:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 80192c8:	f000 80d2 	beq.w	8019470 <uxr_read_framed_msg+0x288>
 80192cc:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80192d0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80192d4:	f000 8214 	beq.w	8019700 <uxr_read_framed_msg+0x518>
 80192d8:	f807 e003 	strb.w	lr, [r7, r3]
 80192dc:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80192de:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80192e0:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80192e2:	ea80 010e 	eor.w	r1, r0, lr
 80192e6:	b2c9      	uxtb	r1, r1
 80192e8:	3301      	adds	r3, #1
 80192ea:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 80192ee:	b29b      	uxth	r3, r3
 80192f0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80192f4:	42ab      	cmp	r3, r5
 80192f6:	86e2      	strh	r2, [r4, #54]	; 0x36
 80192f8:	8663      	strh	r3, [r4, #50]	; 0x32
 80192fa:	f080 8121 	bcs.w	8019540 <uxr_read_framed_msg+0x358>
 80192fe:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8019302:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019306:	f101 0b01 	add.w	fp, r1, #1
 801930a:	ea4f 025b 	mov.w	r2, fp, lsr #1
 801930e:	fba6 9202 	umull	r9, r2, r6, r2
 8019312:	0892      	lsrs	r2, r2, #2
 8019314:	4288      	cmp	r0, r1
 8019316:	eb04 0e01 	add.w	lr, r4, r1
 801931a:	fb0c b212 	mls	r2, ip, r2, fp
 801931e:	d1cf      	bne.n	80192c0 <uxr_read_framed_msg+0xd8>
 8019320:	ee17 9a90 	vmov	r9, s15
 8019324:	429d      	cmp	r5, r3
 8019326:	f040 8112 	bne.w	801954e <uxr_read_framed_msg+0x366>
 801932a:	2306      	movs	r3, #6
 801932c:	7023      	strb	r3, [r4, #0]
 801932e:	e76d      	b.n	801920c <uxr_read_framed_msg+0x24>
 8019330:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019334:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019338:	4298      	cmp	r0, r3
 801933a:	f000 80bb 	beq.w	80194b4 <uxr_read_framed_msg+0x2cc>
 801933e:	18e2      	adds	r2, r4, r3
 8019340:	7891      	ldrb	r1, [r2, #2]
 8019342:	297d      	cmp	r1, #125	; 0x7d
 8019344:	f000 8153 	beq.w	80195ee <uxr_read_framed_msg+0x406>
 8019348:	3301      	adds	r3, #1
 801934a:	085a      	lsrs	r2, r3, #1
 801934c:	fba6 0202 	umull	r0, r2, r6, r2
 8019350:	0892      	lsrs	r2, r2, #2
 8019352:	202a      	movs	r0, #42	; 0x2a
 8019354:	fb00 3212 	mls	r2, r0, r2, r3
 8019358:	297e      	cmp	r1, #126	; 0x7e
 801935a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801935e:	f000 81cb 	beq.w	80196f8 <uxr_read_framed_msg+0x510>
 8019362:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019364:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019368:	990c      	ldr	r1, [sp, #48]	; 0x30
 801936a:	b29b      	uxth	r3, r3
 801936c:	2000      	movs	r0, #0
 801936e:	428b      	cmp	r3, r1
 8019370:	8623      	strh	r3, [r4, #48]	; 0x30
 8019372:	8660      	strh	r0, [r4, #50]	; 0x32
 8019374:	86e0      	strh	r0, [r4, #54]	; 0x36
 8019376:	f240 80db 	bls.w	8019530 <uxr_read_framed_msg+0x348>
 801937a:	7020      	strb	r0, [r4, #0]
 801937c:	b003      	add	sp, #12
 801937e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019382:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019386:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801938a:	4298      	cmp	r0, r3
 801938c:	f000 80a1 	beq.w	80194d2 <uxr_read_framed_msg+0x2ea>
 8019390:	18e2      	adds	r2, r4, r3
 8019392:	7891      	ldrb	r1, [r2, #2]
 8019394:	297d      	cmp	r1, #125	; 0x7d
 8019396:	f000 8167 	beq.w	8019668 <uxr_read_framed_msg+0x480>
 801939a:	3301      	adds	r3, #1
 801939c:	085a      	lsrs	r2, r3, #1
 801939e:	fba6 0202 	umull	r0, r2, r6, r2
 80193a2:	0892      	lsrs	r2, r2, #2
 80193a4:	202a      	movs	r0, #42	; 0x2a
 80193a6:	fb00 3312 	mls	r3, r0, r2, r3
 80193aa:	297e      	cmp	r1, #126	; 0x7e
 80193ac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80193b0:	f000 8192 	beq.w	80196d8 <uxr_read_framed_msg+0x4f0>
 80193b4:	2304      	movs	r3, #4
 80193b6:	8621      	strh	r1, [r4, #48]	; 0x30
 80193b8:	7023      	strb	r3, [r4, #0]
 80193ba:	e727      	b.n	801920c <uxr_read_framed_msg+0x24>
 80193bc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80193c0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80193c4:	4290      	cmp	r0, r2
 80193c6:	f000 80b1 	beq.w	801952c <uxr_read_framed_msg+0x344>
 80193ca:	18a3      	adds	r3, r4, r2
 80193cc:	7899      	ldrb	r1, [r3, #2]
 80193ce:	297d      	cmp	r1, #125	; 0x7d
 80193d0:	f000 8166 	beq.w	80196a0 <uxr_read_framed_msg+0x4b8>
 80193d4:	3201      	adds	r2, #1
 80193d6:	0850      	lsrs	r0, r2, #1
 80193d8:	fba6 3000 	umull	r3, r0, r6, r0
 80193dc:	0880      	lsrs	r0, r0, #2
 80193de:	232a      	movs	r3, #42	; 0x2a
 80193e0:	fb03 2210 	mls	r2, r3, r0, r2
 80193e4:	297e      	cmp	r1, #126	; 0x7e
 80193e6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80193ea:	f000 8187 	beq.w	80196fc <uxr_read_framed_msg+0x514>
 80193ee:	7863      	ldrb	r3, [r4, #1]
 80193f0:	428b      	cmp	r3, r1
 80193f2:	bf0c      	ite	eq
 80193f4:	2303      	moveq	r3, #3
 80193f6:	2300      	movne	r3, #0
 80193f8:	7023      	strb	r3, [r4, #0]
 80193fa:	e707      	b.n	801920c <uxr_read_framed_msg+0x24>
 80193fc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019400:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019404:	2200      	movs	r2, #0
 8019406:	4299      	cmp	r1, r3
 8019408:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801940c:	d063      	beq.n	80194d6 <uxr_read_framed_msg+0x2ee>
 801940e:	18e2      	adds	r2, r4, r3
 8019410:	7892      	ldrb	r2, [r2, #2]
 8019412:	2a7d      	cmp	r2, #125	; 0x7d
 8019414:	f000 8107 	beq.w	8019626 <uxr_read_framed_msg+0x43e>
 8019418:	1c59      	adds	r1, r3, #1
 801941a:	084b      	lsrs	r3, r1, #1
 801941c:	fba6 0303 	umull	r0, r3, r6, r3
 8019420:	089b      	lsrs	r3, r3, #2
 8019422:	202a      	movs	r0, #42	; 0x2a
 8019424:	fb00 1313 	mls	r3, r0, r3, r1
 8019428:	2a7e      	cmp	r2, #126	; 0x7e
 801942a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801942e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019432:	d050      	beq.n	80194d6 <uxr_read_framed_msg+0x2ee>
 8019434:	2302      	movs	r3, #2
 8019436:	7023      	strb	r3, [r4, #0]
 8019438:	e6e8      	b.n	801920c <uxr_read_framed_msg+0x24>
 801943a:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 801943e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019442:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019446:	1c51      	adds	r1, r2, #1
 8019448:	084b      	lsrs	r3, r1, #1
 801944a:	fba6 5303 	umull	r5, r3, r6, r3
 801944e:	089b      	lsrs	r3, r3, #2
 8019450:	fb0c 1313 	mls	r3, ip, r3, r1
 8019454:	4596      	cmp	lr, r2
 8019456:	eb04 0002 	add.w	r0, r4, r2
 801945a:	b2da      	uxtb	r2, r3
 801945c:	f43f af06 	beq.w	801926c <uxr_read_framed_msg+0x84>
 8019460:	7883      	ldrb	r3, [r0, #2]
 8019462:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019466:	2b7e      	cmp	r3, #126	; 0x7e
 8019468:	d1ed      	bne.n	8019446 <uxr_read_framed_msg+0x25e>
 801946a:	2301      	movs	r3, #1
 801946c:	7023      	strb	r3, [r4, #0]
 801946e:	e6cd      	b.n	801920c <uxr_read_framed_msg+0x24>
 8019470:	f101 0b01 	add.w	fp, r1, #1
 8019474:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8019478:	fba6 e202 	umull	lr, r2, r6, r2
 801947c:	3102      	adds	r1, #2
 801947e:	0892      	lsrs	r2, r2, #2
 8019480:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8019484:	fb0c b212 	mls	r2, ip, r2, fp
 8019488:	fba6 9e0e 	umull	r9, lr, r6, lr
 801948c:	eb04 0b02 	add.w	fp, r4, r2
 8019490:	b2d2      	uxtb	r2, r2
 8019492:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8019496:	4290      	cmp	r0, r2
 8019498:	fb0c 111e 	mls	r1, ip, lr, r1
 801949c:	f43f af40 	beq.w	8019320 <uxr_read_framed_msg+0x138>
 80194a0:	f89b e002 	ldrb.w	lr, [fp, #2]
 80194a4:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80194a8:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80194ac:	d036      	beq.n	801951c <uxr_read_framed_msg+0x334>
 80194ae:	f08e 0e20 	eor.w	lr, lr, #32
 80194b2:	e711      	b.n	80192d8 <uxr_read_framed_msg+0xf0>
 80194b4:	2301      	movs	r3, #1
 80194b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80194b8:	4649      	mov	r1, r9
 80194ba:	e9cd 2300 	strd	r2, r3, [sp]
 80194be:	4620      	mov	r0, r4
 80194c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194c2:	4652      	mov	r2, sl
 80194c4:	f7ff fe0e 	bl	80190e4 <uxr_framing_read_transport>
 80194c8:	2800      	cmp	r0, #0
 80194ca:	f43f aecf 	beq.w	801926c <uxr_read_framed_msg+0x84>
 80194ce:	7823      	ldrb	r3, [r4, #0]
 80194d0:	e69c      	b.n	801920c <uxr_read_framed_msg+0x24>
 80194d2:	2302      	movs	r3, #2
 80194d4:	e7ef      	b.n	80194b6 <uxr_read_framed_msg+0x2ce>
 80194d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80194d8:	2304      	movs	r3, #4
 80194da:	e9cd 2300 	strd	r2, r3, [sp]
 80194de:	4649      	mov	r1, r9
 80194e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194e2:	4652      	mov	r2, sl
 80194e4:	4620      	mov	r0, r4
 80194e6:	f7ff fdfd 	bl	80190e4 <uxr_framing_read_transport>
 80194ea:	2800      	cmp	r0, #0
 80194ec:	d1ef      	bne.n	80194ce <uxr_read_framed_msg+0x2e6>
 80194ee:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80194f2:	387e      	subs	r0, #126	; 0x7e
 80194f4:	bf18      	it	ne
 80194f6:	2001      	movne	r0, #1
 80194f8:	2800      	cmp	r0, #0
 80194fa:	d0e8      	beq.n	80194ce <uxr_read_framed_msg+0x2e6>
 80194fc:	e6b6      	b.n	801926c <uxr_read_framed_msg+0x84>
 80194fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019500:	2305      	movs	r3, #5
 8019502:	e9cd 5300 	strd	r5, r3, [sp]
 8019506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019508:	f7ff fdec 	bl	80190e4 <uxr_framing_read_transport>
 801950c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019510:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019514:	429a      	cmp	r2, r3
 8019516:	f43f aea9 	beq.w	801926c <uxr_read_framed_msg+0x84>
 801951a:	e673      	b.n	8019204 <uxr_read_framed_msg+0x1c>
 801951c:	429d      	cmp	r5, r3
 801951e:	ee17 9a90 	vmov	r9, s15
 8019522:	f43f af02 	beq.w	801932a <uxr_read_framed_msg+0x142>
 8019526:	2301      	movs	r3, #1
 8019528:	7023      	strb	r3, [r4, #0]
 801952a:	e66f      	b.n	801920c <uxr_read_framed_msg+0x24>
 801952c:	2303      	movs	r3, #3
 801952e:	e7c2      	b.n	80194b6 <uxr_read_framed_msg+0x2ce>
 8019530:	2305      	movs	r3, #5
 8019532:	7023      	strb	r3, [r4, #0]
 8019534:	e66a      	b.n	801920c <uxr_read_framed_msg+0x24>
 8019536:	bf00      	nop
 8019538:	30c30c31 	.word	0x30c30c31
 801953c:	0801bf50 	.word	0x0801bf50
 8019540:	ee17 9a90 	vmov	r9, s15
 8019544:	f43f aef1 	beq.w	801932a <uxr_read_framed_msg+0x142>
 8019548:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801954c:	d08d      	beq.n	801946a <uxr_read_framed_msg+0x282>
 801954e:	1aeb      	subs	r3, r5, r3
 8019550:	3302      	adds	r3, #2
 8019552:	9301      	str	r3, [sp, #4]
 8019554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019556:	9300      	str	r3, [sp, #0]
 8019558:	4652      	mov	r2, sl
 801955a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801955c:	4649      	mov	r1, r9
 801955e:	4620      	mov	r0, r4
 8019560:	f7ff fdc0 	bl	80190e4 <uxr_framing_read_transport>
 8019564:	fab0 f080 	clz	r0, r0
 8019568:	0940      	lsrs	r0, r0, #5
 801956a:	2800      	cmp	r0, #0
 801956c:	d0af      	beq.n	80194ce <uxr_read_framed_msg+0x2e6>
 801956e:	e67d      	b.n	801926c <uxr_read_framed_msg+0x84>
 8019570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019572:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019576:	7013      	strb	r3, [r2, #0]
 8019578:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801957a:	b003      	add	sp, #12
 801957c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019580:	1c59      	adds	r1, r3, #1
 8019582:	084a      	lsrs	r2, r1, #1
 8019584:	fba6 5202 	umull	r5, r2, r6, r2
 8019588:	0892      	lsrs	r2, r2, #2
 801958a:	252a      	movs	r5, #42	; 0x2a
 801958c:	fb05 1212 	mls	r2, r5, r2, r1
 8019590:	b2d1      	uxtb	r1, r2
 8019592:	4288      	cmp	r0, r1
 8019594:	d08e      	beq.n	80194b4 <uxr_read_framed_msg+0x2cc>
 8019596:	3302      	adds	r3, #2
 8019598:	4422      	add	r2, r4
 801959a:	0858      	lsrs	r0, r3, #1
 801959c:	fba6 1000 	umull	r1, r0, r6, r0
 80195a0:	7891      	ldrb	r1, [r2, #2]
 80195a2:	0882      	lsrs	r2, r0, #2
 80195a4:	fb05 3312 	mls	r3, r5, r2, r3
 80195a8:	297e      	cmp	r1, #126	; 0x7e
 80195aa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80195ae:	f000 80a3 	beq.w	80196f8 <uxr_read_framed_msg+0x510>
 80195b2:	f081 0120 	eor.w	r1, r1, #32
 80195b6:	e64e      	b.n	8019256 <uxr_read_framed_msg+0x6e>
 80195b8:	1c59      	adds	r1, r3, #1
 80195ba:	084a      	lsrs	r2, r1, #1
 80195bc:	fba6 5202 	umull	r5, r2, r6, r2
 80195c0:	0892      	lsrs	r2, r2, #2
 80195c2:	252a      	movs	r5, #42	; 0x2a
 80195c4:	fb05 1212 	mls	r2, r5, r2, r1
 80195c8:	b2d1      	uxtb	r1, r2
 80195ca:	4288      	cmp	r0, r1
 80195cc:	d081      	beq.n	80194d2 <uxr_read_framed_msg+0x2ea>
 80195ce:	3302      	adds	r3, #2
 80195d0:	4422      	add	r2, r4
 80195d2:	0858      	lsrs	r0, r3, #1
 80195d4:	fba6 1000 	umull	r1, r0, r6, r0
 80195d8:	7891      	ldrb	r1, [r2, #2]
 80195da:	0882      	lsrs	r2, r0, #2
 80195dc:	fb05 3312 	mls	r3, r5, r2, r3
 80195e0:	297e      	cmp	r1, #126	; 0x7e
 80195e2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80195e6:	d077      	beq.n	80196d8 <uxr_read_framed_msg+0x4f0>
 80195e8:	f081 0120 	eor.w	r1, r1, #32
 80195ec:	e65b      	b.n	80192a6 <uxr_read_framed_msg+0xbe>
 80195ee:	1c59      	adds	r1, r3, #1
 80195f0:	084a      	lsrs	r2, r1, #1
 80195f2:	fba6 5202 	umull	r5, r2, r6, r2
 80195f6:	0892      	lsrs	r2, r2, #2
 80195f8:	252a      	movs	r5, #42	; 0x2a
 80195fa:	fb05 1212 	mls	r2, r5, r2, r1
 80195fe:	b2d1      	uxtb	r1, r2
 8019600:	4288      	cmp	r0, r1
 8019602:	f43f af57 	beq.w	80194b4 <uxr_read_framed_msg+0x2cc>
 8019606:	3302      	adds	r3, #2
 8019608:	4422      	add	r2, r4
 801960a:	0858      	lsrs	r0, r3, #1
 801960c:	fba6 1000 	umull	r1, r0, r6, r0
 8019610:	7891      	ldrb	r1, [r2, #2]
 8019612:	0882      	lsrs	r2, r0, #2
 8019614:	fb05 3312 	mls	r3, r5, r2, r3
 8019618:	297e      	cmp	r1, #126	; 0x7e
 801961a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801961e:	d06b      	beq.n	80196f8 <uxr_read_framed_msg+0x510>
 8019620:	f081 0120 	eor.w	r1, r1, #32
 8019624:	e69d      	b.n	8019362 <uxr_read_framed_msg+0x17a>
 8019626:	1c5d      	adds	r5, r3, #1
 8019628:	086a      	lsrs	r2, r5, #1
 801962a:	fba6 0202 	umull	r0, r2, r6, r2
 801962e:	0892      	lsrs	r2, r2, #2
 8019630:	202a      	movs	r0, #42	; 0x2a
 8019632:	fb00 5212 	mls	r2, r0, r2, r5
 8019636:	b2d5      	uxtb	r5, r2
 8019638:	42a9      	cmp	r1, r5
 801963a:	f43f af4c 	beq.w	80194d6 <uxr_read_framed_msg+0x2ee>
 801963e:	3302      	adds	r3, #2
 8019640:	4422      	add	r2, r4
 8019642:	0859      	lsrs	r1, r3, #1
 8019644:	fba6 5101 	umull	r5, r1, r6, r1
 8019648:	7895      	ldrb	r5, [r2, #2]
 801964a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801964e:	088a      	lsrs	r2, r1, #2
 8019650:	fb00 3312 	mls	r3, r0, r2, r3
 8019654:	2d7e      	cmp	r5, #126	; 0x7e
 8019656:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801965a:	f43f af3c 	beq.w	80194d6 <uxr_read_framed_msg+0x2ee>
 801965e:	f085 0520 	eor.w	r5, r5, #32
 8019662:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8019666:	e6e5      	b.n	8019434 <uxr_read_framed_msg+0x24c>
 8019668:	1c59      	adds	r1, r3, #1
 801966a:	084a      	lsrs	r2, r1, #1
 801966c:	fba6 5202 	umull	r5, r2, r6, r2
 8019670:	0892      	lsrs	r2, r2, #2
 8019672:	252a      	movs	r5, #42	; 0x2a
 8019674:	fb05 1212 	mls	r2, r5, r2, r1
 8019678:	b2d1      	uxtb	r1, r2
 801967a:	4288      	cmp	r0, r1
 801967c:	f43f af29 	beq.w	80194d2 <uxr_read_framed_msg+0x2ea>
 8019680:	3302      	adds	r3, #2
 8019682:	4422      	add	r2, r4
 8019684:	0858      	lsrs	r0, r3, #1
 8019686:	fba6 1000 	umull	r1, r0, r6, r0
 801968a:	7891      	ldrb	r1, [r2, #2]
 801968c:	0882      	lsrs	r2, r0, #2
 801968e:	fb05 3312 	mls	r3, r5, r2, r3
 8019692:	297e      	cmp	r1, #126	; 0x7e
 8019694:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019698:	d01e      	beq.n	80196d8 <uxr_read_framed_msg+0x4f0>
 801969a:	f081 0120 	eor.w	r1, r1, #32
 801969e:	e689      	b.n	80193b4 <uxr_read_framed_msg+0x1cc>
 80196a0:	1c51      	adds	r1, r2, #1
 80196a2:	084b      	lsrs	r3, r1, #1
 80196a4:	fba6 5303 	umull	r5, r3, r6, r3
 80196a8:	089b      	lsrs	r3, r3, #2
 80196aa:	252a      	movs	r5, #42	; 0x2a
 80196ac:	fb05 1313 	mls	r3, r5, r3, r1
 80196b0:	b2d9      	uxtb	r1, r3
 80196b2:	4288      	cmp	r0, r1
 80196b4:	f43f af3a 	beq.w	801952c <uxr_read_framed_msg+0x344>
 80196b8:	3202      	adds	r2, #2
 80196ba:	4423      	add	r3, r4
 80196bc:	0850      	lsrs	r0, r2, #1
 80196be:	789b      	ldrb	r3, [r3, #2]
 80196c0:	fba6 1000 	umull	r1, r0, r6, r0
 80196c4:	0880      	lsrs	r0, r0, #2
 80196c6:	fb05 2210 	mls	r2, r5, r0, r2
 80196ca:	2b7e      	cmp	r3, #126	; 0x7e
 80196cc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80196d0:	d014      	beq.n	80196fc <uxr_read_framed_msg+0x514>
 80196d2:	f083 0120 	eor.w	r1, r3, #32
 80196d6:	e68a      	b.n	80193ee <uxr_read_framed_msg+0x206>
 80196d8:	2302      	movs	r3, #2
 80196da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80196dc:	4649      	mov	r1, r9
 80196de:	e9cd 2300 	strd	r2, r3, [sp]
 80196e2:	4620      	mov	r0, r4
 80196e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196e6:	4652      	mov	r2, sl
 80196e8:	f7ff fcfc 	bl	80190e4 <uxr_framing_read_transport>
 80196ec:	2800      	cmp	r0, #0
 80196ee:	f47f aeee 	bne.w	80194ce <uxr_read_framed_msg+0x2e6>
 80196f2:	2301      	movs	r3, #1
 80196f4:	7023      	strb	r3, [r4, #0]
 80196f6:	e589      	b.n	801920c <uxr_read_framed_msg+0x24>
 80196f8:	2301      	movs	r3, #1
 80196fa:	e7ee      	b.n	80196da <uxr_read_framed_msg+0x4f2>
 80196fc:	2303      	movs	r3, #3
 80196fe:	e7ec      	b.n	80196da <uxr_read_framed_msg+0x4f2>
 8019700:	ee17 9a90 	vmov	r9, s15
 8019704:	e6b1      	b.n	801946a <uxr_read_framed_msg+0x282>
 8019706:	bf00      	nop

08019708 <rcl_get_default_domain_id>:
 8019708:	b530      	push	{r4, r5, lr}
 801970a:	b083      	sub	sp, #12
 801970c:	2300      	movs	r3, #0
 801970e:	9300      	str	r3, [sp, #0]
 8019710:	b1d0      	cbz	r0, 8019748 <rcl_get_default_domain_id+0x40>
 8019712:	4604      	mov	r4, r0
 8019714:	4669      	mov	r1, sp
 8019716:	4815      	ldr	r0, [pc, #84]	; (801976c <rcl_get_default_domain_id+0x64>)
 8019718:	f7fd fa6a 	bl	8016bf0 <rcutils_get_env>
 801971c:	4602      	mov	r2, r0
 801971e:	b110      	cbz	r0, 8019726 <rcl_get_default_domain_id+0x1e>
 8019720:	2001      	movs	r0, #1
 8019722:	b003      	add	sp, #12
 8019724:	bd30      	pop	{r4, r5, pc}
 8019726:	9b00      	ldr	r3, [sp, #0]
 8019728:	b18b      	cbz	r3, 801974e <rcl_get_default_domain_id+0x46>
 801972a:	7818      	ldrb	r0, [r3, #0]
 801972c:	2800      	cmp	r0, #0
 801972e:	d0f8      	beq.n	8019722 <rcl_get_default_domain_id+0x1a>
 8019730:	4618      	mov	r0, r3
 8019732:	a901      	add	r1, sp, #4
 8019734:	9201      	str	r2, [sp, #4]
 8019736:	f000 fc07 	bl	8019f48 <strtoul>
 801973a:	4605      	mov	r5, r0
 801973c:	b150      	cbz	r0, 8019754 <rcl_get_default_domain_id+0x4c>
 801973e:	1c43      	adds	r3, r0, #1
 8019740:	d00d      	beq.n	801975e <rcl_get_default_domain_id+0x56>
 8019742:	6025      	str	r5, [r4, #0]
 8019744:	2000      	movs	r0, #0
 8019746:	e7ec      	b.n	8019722 <rcl_get_default_domain_id+0x1a>
 8019748:	200b      	movs	r0, #11
 801974a:	b003      	add	sp, #12
 801974c:	bd30      	pop	{r4, r5, pc}
 801974e:	4618      	mov	r0, r3
 8019750:	b003      	add	sp, #12
 8019752:	bd30      	pop	{r4, r5, pc}
 8019754:	9b01      	ldr	r3, [sp, #4]
 8019756:	781b      	ldrb	r3, [r3, #0]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d0f2      	beq.n	8019742 <rcl_get_default_domain_id+0x3a>
 801975c:	e7e0      	b.n	8019720 <rcl_get_default_domain_id+0x18>
 801975e:	f000 ffc9 	bl	801a6f4 <__errno>
 8019762:	6803      	ldr	r3, [r0, #0]
 8019764:	2b22      	cmp	r3, #34	; 0x22
 8019766:	d1ec      	bne.n	8019742 <rcl_get_default_domain_id+0x3a>
 8019768:	e7da      	b.n	8019720 <rcl_get_default_domain_id+0x18>
 801976a:	bf00      	nop
 801976c:	0801c150 	.word	0x0801c150

08019770 <rcl_get_zero_initialized_guard_condition>:
 8019770:	4a03      	ldr	r2, [pc, #12]	; (8019780 <rcl_get_zero_initialized_guard_condition+0x10>)
 8019772:	4603      	mov	r3, r0
 8019774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019778:	e883 0003 	stmia.w	r3, {r0, r1}
 801977c:	4618      	mov	r0, r3
 801977e:	4770      	bx	lr
 8019780:	0801c160 	.word	0x0801c160

08019784 <rcl_guard_condition_init_from_rmw>:
 8019784:	b082      	sub	sp, #8
 8019786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801978a:	b086      	sub	sp, #24
 801978c:	ac0c      	add	r4, sp, #48	; 0x30
 801978e:	4684      	mov	ip, r0
 8019790:	f844 3f04 	str.w	r3, [r4, #4]!
 8019794:	460f      	mov	r7, r1
 8019796:	4690      	mov	r8, r2
 8019798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801979a:	ad01      	add	r5, sp, #4
 801979c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801979e:	6823      	ldr	r3, [r4, #0]
 80197a0:	602b      	str	r3, [r5, #0]
 80197a2:	a801      	add	r0, sp, #4
 80197a4:	4664      	mov	r4, ip
 80197a6:	f7f5 ffb7 	bl	800f718 <rcutils_allocator_is_valid>
 80197aa:	b328      	cbz	r0, 80197f8 <rcl_guard_condition_init_from_rmw+0x74>
 80197ac:	b324      	cbz	r4, 80197f8 <rcl_guard_condition_init_from_rmw+0x74>
 80197ae:	6866      	ldr	r6, [r4, #4]
 80197b0:	b9e6      	cbnz	r6, 80197ec <rcl_guard_condition_init_from_rmw+0x68>
 80197b2:	f1b8 0f00 	cmp.w	r8, #0
 80197b6:	d01f      	beq.n	80197f8 <rcl_guard_condition_init_from_rmw+0x74>
 80197b8:	4640      	mov	r0, r8
 80197ba:	f7fb f8f7 	bl	80149ac <rcl_context_is_valid>
 80197be:	b308      	cbz	r0, 8019804 <rcl_guard_condition_init_from_rmw+0x80>
 80197c0:	9b01      	ldr	r3, [sp, #4]
 80197c2:	9905      	ldr	r1, [sp, #20]
 80197c4:	201c      	movs	r0, #28
 80197c6:	4798      	blx	r3
 80197c8:	4605      	mov	r5, r0
 80197ca:	6060      	str	r0, [r4, #4]
 80197cc:	b340      	cbz	r0, 8019820 <rcl_guard_condition_init_from_rmw+0x9c>
 80197ce:	b1df      	cbz	r7, 8019808 <rcl_guard_condition_init_from_rmw+0x84>
 80197d0:	6007      	str	r7, [r0, #0]
 80197d2:	7106      	strb	r6, [r0, #4]
 80197d4:	ac01      	add	r4, sp, #4
 80197d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80197d8:	3508      	adds	r5, #8
 80197da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80197dc:	6823      	ldr	r3, [r4, #0]
 80197de:	602b      	str	r3, [r5, #0]
 80197e0:	2000      	movs	r0, #0
 80197e2:	b006      	add	sp, #24
 80197e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197e8:	b002      	add	sp, #8
 80197ea:	4770      	bx	lr
 80197ec:	2064      	movs	r0, #100	; 0x64
 80197ee:	b006      	add	sp, #24
 80197f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197f4:	b002      	add	sp, #8
 80197f6:	4770      	bx	lr
 80197f8:	200b      	movs	r0, #11
 80197fa:	b006      	add	sp, #24
 80197fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019800:	b002      	add	sp, #8
 8019802:	4770      	bx	lr
 8019804:	2065      	movs	r0, #101	; 0x65
 8019806:	e7f2      	b.n	80197ee <rcl_guard_condition_init_from_rmw+0x6a>
 8019808:	f8d8 0000 	ldr.w	r0, [r8]
 801980c:	3028      	adds	r0, #40	; 0x28
 801980e:	f000 f93b 	bl	8019a88 <rmw_create_guard_condition>
 8019812:	6028      	str	r0, [r5, #0]
 8019814:	6865      	ldr	r5, [r4, #4]
 8019816:	682e      	ldr	r6, [r5, #0]
 8019818:	b126      	cbz	r6, 8019824 <rcl_guard_condition_init_from_rmw+0xa0>
 801981a:	2301      	movs	r3, #1
 801981c:	712b      	strb	r3, [r5, #4]
 801981e:	e7d9      	b.n	80197d4 <rcl_guard_condition_init_from_rmw+0x50>
 8019820:	200a      	movs	r0, #10
 8019822:	e7e4      	b.n	80197ee <rcl_guard_condition_init_from_rmw+0x6a>
 8019824:	4628      	mov	r0, r5
 8019826:	9b02      	ldr	r3, [sp, #8]
 8019828:	9905      	ldr	r1, [sp, #20]
 801982a:	4798      	blx	r3
 801982c:	6066      	str	r6, [r4, #4]
 801982e:	2001      	movs	r0, #1
 8019830:	e7dd      	b.n	80197ee <rcl_guard_condition_init_from_rmw+0x6a>
 8019832:	bf00      	nop

08019834 <rcl_guard_condition_fini>:
 8019834:	b570      	push	{r4, r5, r6, lr}
 8019836:	b082      	sub	sp, #8
 8019838:	b1f0      	cbz	r0, 8019878 <rcl_guard_condition_fini+0x44>
 801983a:	4604      	mov	r4, r0
 801983c:	6840      	ldr	r0, [r0, #4]
 801983e:	b158      	cbz	r0, 8019858 <rcl_guard_condition_fini+0x24>
 8019840:	6803      	ldr	r3, [r0, #0]
 8019842:	68c6      	ldr	r6, [r0, #12]
 8019844:	6981      	ldr	r1, [r0, #24]
 8019846:	b15b      	cbz	r3, 8019860 <rcl_guard_condition_fini+0x2c>
 8019848:	7905      	ldrb	r5, [r0, #4]
 801984a:	b95d      	cbnz	r5, 8019864 <rcl_guard_condition_fini+0x30>
 801984c:	47b0      	blx	r6
 801984e:	2300      	movs	r3, #0
 8019850:	4628      	mov	r0, r5
 8019852:	6063      	str	r3, [r4, #4]
 8019854:	b002      	add	sp, #8
 8019856:	bd70      	pop	{r4, r5, r6, pc}
 8019858:	4605      	mov	r5, r0
 801985a:	4628      	mov	r0, r5
 801985c:	b002      	add	sp, #8
 801985e:	bd70      	pop	{r4, r5, r6, pc}
 8019860:	461d      	mov	r5, r3
 8019862:	e7f3      	b.n	801984c <rcl_guard_condition_fini+0x18>
 8019864:	4618      	mov	r0, r3
 8019866:	9101      	str	r1, [sp, #4]
 8019868:	f000 f922 	bl	8019ab0 <rmw_destroy_guard_condition>
 801986c:	1e05      	subs	r5, r0, #0
 801986e:	9901      	ldr	r1, [sp, #4]
 8019870:	6860      	ldr	r0, [r4, #4]
 8019872:	bf18      	it	ne
 8019874:	2501      	movne	r5, #1
 8019876:	e7e9      	b.n	801984c <rcl_guard_condition_fini+0x18>
 8019878:	250b      	movs	r5, #11
 801987a:	4628      	mov	r0, r5
 801987c:	b002      	add	sp, #8
 801987e:	bd70      	pop	{r4, r5, r6, pc}

08019880 <rcl_guard_condition_get_default_options>:
 8019880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019882:	b087      	sub	sp, #28
 8019884:	4607      	mov	r7, r0
 8019886:	466c      	mov	r4, sp
 8019888:	4668      	mov	r0, sp
 801988a:	f7f5 ff37 	bl	800f6fc <rcutils_get_default_allocator>
 801988e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019890:	4d07      	ldr	r5, [pc, #28]	; (80198b0 <rcl_guard_condition_get_default_options+0x30>)
 8019892:	f8d4 c000 	ldr.w	ip, [r4]
 8019896:	462e      	mov	r6, r5
 8019898:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801989a:	462c      	mov	r4, r5
 801989c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801989e:	463c      	mov	r4, r7
 80198a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80198a2:	4638      	mov	r0, r7
 80198a4:	f8c6 c000 	str.w	ip, [r6]
 80198a8:	f8c4 c000 	str.w	ip, [r4]
 80198ac:	b007      	add	sp, #28
 80198ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198b0:	2000a064 	.word	0x2000a064

080198b4 <rcl_guard_condition_get_rmw_handle>:
 80198b4:	b110      	cbz	r0, 80198bc <rcl_guard_condition_get_rmw_handle+0x8>
 80198b6:	6840      	ldr	r0, [r0, #4]
 80198b8:	b100      	cbz	r0, 80198bc <rcl_guard_condition_get_rmw_handle+0x8>
 80198ba:	6800      	ldr	r0, [r0, #0]
 80198bc:	4770      	bx	lr
 80198be:	bf00      	nop

080198c0 <on_status>:
 80198c0:	b082      	sub	sp, #8
 80198c2:	b002      	add	sp, #8
 80198c4:	4770      	bx	lr
 80198c6:	bf00      	nop

080198c8 <on_topic>:
 80198c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198cc:	4a21      	ldr	r2, [pc, #132]	; (8019954 <on_topic+0x8c>)
 80198ce:	b094      	sub	sp, #80	; 0x50
 80198d0:	6812      	ldr	r2, [r2, #0]
 80198d2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80198d4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80198d8:	9113      	str	r1, [sp, #76]	; 0x4c
 80198da:	9312      	str	r3, [sp, #72]	; 0x48
 80198dc:	b3ba      	cbz	r2, 801994e <on_topic+0x86>
 80198de:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80198e2:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80198e6:	e001      	b.n	80198ec <on_topic+0x24>
 80198e8:	6892      	ldr	r2, [r2, #8]
 80198ea:	b382      	cbz	r2, 801994e <on_topic+0x86>
 80198ec:	68d4      	ldr	r4, [r2, #12]
 80198ee:	8aa3      	ldrh	r3, [r4, #20]
 80198f0:	428b      	cmp	r3, r1
 80198f2:	d1f9      	bne.n	80198e8 <on_topic+0x20>
 80198f4:	7da3      	ldrb	r3, [r4, #22]
 80198f6:	4283      	cmp	r3, r0
 80198f8:	d1f6      	bne.n	80198e8 <on_topic+0x20>
 80198fa:	2248      	movs	r2, #72	; 0x48
 80198fc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8019900:	4668      	mov	r0, sp
 8019902:	f000 ff2c 	bl	801a75e <memcpy>
 8019906:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 801990a:	4620      	mov	r0, r4
 801990c:	f7f6 fe48 	bl	80105a0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019910:	4607      	mov	r7, r0
 8019912:	b1e0      	cbz	r0, 801994e <on_topic+0x86>
 8019914:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8019918:	462a      	mov	r2, r5
 801991a:	4630      	mov	r0, r6
 801991c:	f108 0110 	add.w	r1, r8, #16
 8019920:	f7fe fb9a 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 8019924:	b930      	cbnz	r0, 8019934 <on_topic+0x6c>
 8019926:	480c      	ldr	r0, [pc, #48]	; (8019958 <on_topic+0x90>)
 8019928:	4639      	mov	r1, r7
 801992a:	b014      	add	sp, #80	; 0x50
 801992c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019930:	f7fd bb82 	b.w	8017038 <put_memory>
 8019934:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8019938:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801993c:	f7fe fab6 	bl	8017eac <rmw_uros_epoch_nanos>
 8019940:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8019944:	2305      	movs	r3, #5
 8019946:	e9c2 0100 	strd	r0, r1, [r2]
 801994a:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801994e:	b014      	add	sp, #80	; 0x50
 8019950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019954:	2000d46c 	.word	0x2000d46c
 8019958:	2000a200 	.word	0x2000a200

0801995c <on_request>:
 801995c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019960:	4822      	ldr	r0, [pc, #136]	; (80199ec <on_request+0x90>)
 8019962:	b095      	sub	sp, #84	; 0x54
 8019964:	9113      	str	r1, [sp, #76]	; 0x4c
 8019966:	6801      	ldr	r1, [r0, #0]
 8019968:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801996a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 801996e:	2900      	cmp	r1, #0
 8019970:	d039      	beq.n	80199e6 <on_request+0x8a>
 8019972:	461d      	mov	r5, r3
 8019974:	e001      	b.n	801997a <on_request+0x1e>
 8019976:	6889      	ldr	r1, [r1, #8]
 8019978:	b3a9      	cbz	r1, 80199e6 <on_request+0x8a>
 801997a:	68cc      	ldr	r4, [r1, #12]
 801997c:	8b20      	ldrh	r0, [r4, #24]
 801997e:	4290      	cmp	r0, r2
 8019980:	d1f9      	bne.n	8019976 <on_request+0x1a>
 8019982:	2248      	movs	r2, #72	; 0x48
 8019984:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8019988:	4668      	mov	r0, sp
 801998a:	f000 fee8 	bl	801a75e <memcpy>
 801998e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8019992:	4620      	mov	r0, r4
 8019994:	f7f6 fe04 	bl	80105a0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019998:	4680      	mov	r8, r0
 801999a:	b320      	cbz	r0, 80199e6 <on_request+0x8a>
 801999c:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80199a0:	4632      	mov	r2, r6
 80199a2:	4638      	mov	r0, r7
 80199a4:	f109 0110 	add.w	r1, r9, #16
 80199a8:	f7fe fb56 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 80199ac:	b930      	cbnz	r0, 80199bc <on_request+0x60>
 80199ae:	4810      	ldr	r0, [pc, #64]	; (80199f0 <on_request+0x94>)
 80199b0:	4641      	mov	r1, r8
 80199b2:	b015      	add	sp, #84	; 0x54
 80199b4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199b8:	f7fd bb3e 	b.w	8017038 <put_memory>
 80199bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80199be:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80199c2:	f609 0428 	addw	r4, r9, #2088	; 0x828
 80199c6:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 80199ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80199cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80199d0:	e884 0003 	stmia.w	r4, {r0, r1}
 80199d4:	f7fe fa6a 	bl	8017eac <rmw_uros_epoch_nanos>
 80199d8:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80199dc:	2303      	movs	r3, #3
 80199de:	e9c2 0100 	strd	r0, r1, [r2]
 80199e2:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80199e6:	b015      	add	sp, #84	; 0x54
 80199e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199ec:	2000d45c 	.word	0x2000d45c
 80199f0:	2000a200 	.word	0x2000a200

080199f4 <on_reply>:
 80199f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199f8:	4821      	ldr	r0, [pc, #132]	; (8019a80 <on_reply+0x8c>)
 80199fa:	b095      	sub	sp, #84	; 0x54
 80199fc:	9113      	str	r1, [sp, #76]	; 0x4c
 80199fe:	6801      	ldr	r1, [r0, #0]
 8019a00:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8019a02:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8019a06:	b3b9      	cbz	r1, 8019a78 <on_reply+0x84>
 8019a08:	461d      	mov	r5, r3
 8019a0a:	e001      	b.n	8019a10 <on_reply+0x1c>
 8019a0c:	6889      	ldr	r1, [r1, #8]
 8019a0e:	b399      	cbz	r1, 8019a78 <on_reply+0x84>
 8019a10:	68cc      	ldr	r4, [r1, #12]
 8019a12:	8b20      	ldrh	r0, [r4, #24]
 8019a14:	4290      	cmp	r0, r2
 8019a16:	d1f9      	bne.n	8019a0c <on_reply+0x18>
 8019a18:	2248      	movs	r2, #72	; 0x48
 8019a1a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8019a1e:	4668      	mov	r0, sp
 8019a20:	f000 fe9d 	bl	801a75e <memcpy>
 8019a24:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8019a28:	4620      	mov	r0, r4
 8019a2a:	f7f6 fdb9 	bl	80105a0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019a2e:	4680      	mov	r8, r0
 8019a30:	b310      	cbz	r0, 8019a78 <on_reply+0x84>
 8019a32:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8019a36:	4632      	mov	r2, r6
 8019a38:	4638      	mov	r0, r7
 8019a3a:	f109 0110 	add.w	r1, r9, #16
 8019a3e:	f7fe fb0b 	bl	8018058 <ucdr_deserialize_array_uint8_t>
 8019a42:	b930      	cbnz	r0, 8019a52 <on_reply+0x5e>
 8019a44:	480f      	ldr	r0, [pc, #60]	; (8019a84 <on_reply+0x90>)
 8019a46:	4641      	mov	r1, r8
 8019a48:	b015      	add	sp, #84	; 0x54
 8019a4a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a4e:	f7fd baf3 	b.w	8017038 <put_memory>
 8019a52:	b2aa      	uxth	r2, r5
 8019a54:	2300      	movs	r3, #0
 8019a56:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8019a5a:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8019a5e:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8019a62:	e9c1 2300 	strd	r2, r3, [r1]
 8019a66:	f7fe fa21 	bl	8017eac <rmw_uros_epoch_nanos>
 8019a6a:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8019a6e:	2304      	movs	r3, #4
 8019a70:	e9c2 0100 	strd	r0, r1, [r2]
 8019a74:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8019a78:	b015      	add	sp, #84	; 0x54
 8019a7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a7e:	bf00      	nop
 8019a80:	2000aa90 	.word	0x2000aa90
 8019a84:	2000a200 	.word	0x2000a200

08019a88 <rmw_create_guard_condition>:
 8019a88:	b538      	push	{r3, r4, r5, lr}
 8019a8a:	4605      	mov	r5, r0
 8019a8c:	4807      	ldr	r0, [pc, #28]	; (8019aac <rmw_create_guard_condition+0x24>)
 8019a8e:	f7fd fac3 	bl	8017018 <get_memory>
 8019a92:	b148      	cbz	r0, 8019aa8 <rmw_create_guard_condition+0x20>
 8019a94:	68c4      	ldr	r4, [r0, #12]
 8019a96:	2300      	movs	r3, #0
 8019a98:	61e5      	str	r5, [r4, #28]
 8019a9a:	7423      	strb	r3, [r4, #16]
 8019a9c:	f7fd fb24 	bl	80170e8 <rmw_get_implementation_identifier>
 8019aa0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019aa4:	f104 0014 	add.w	r0, r4, #20
 8019aa8:	bd38      	pop	{r3, r4, r5, pc}
 8019aaa:	bf00      	nop
 8019aac:	2000d388 	.word	0x2000d388

08019ab0 <rmw_destroy_guard_condition>:
 8019ab0:	b508      	push	{r3, lr}
 8019ab2:	4b08      	ldr	r3, [pc, #32]	; (8019ad4 <rmw_destroy_guard_condition+0x24>)
 8019ab4:	6819      	ldr	r1, [r3, #0]
 8019ab6:	b911      	cbnz	r1, 8019abe <rmw_destroy_guard_condition+0xe>
 8019ab8:	e00a      	b.n	8019ad0 <rmw_destroy_guard_condition+0x20>
 8019aba:	6889      	ldr	r1, [r1, #8]
 8019abc:	b141      	cbz	r1, 8019ad0 <rmw_destroy_guard_condition+0x20>
 8019abe:	68cb      	ldr	r3, [r1, #12]
 8019ac0:	3314      	adds	r3, #20
 8019ac2:	4298      	cmp	r0, r3
 8019ac4:	d1f9      	bne.n	8019aba <rmw_destroy_guard_condition+0xa>
 8019ac6:	4803      	ldr	r0, [pc, #12]	; (8019ad4 <rmw_destroy_guard_condition+0x24>)
 8019ac8:	f7fd fab6 	bl	8017038 <put_memory>
 8019acc:	2000      	movs	r0, #0
 8019ace:	bd08      	pop	{r3, pc}
 8019ad0:	2001      	movs	r0, #1
 8019ad2:	bd08      	pop	{r3, pc}
 8019ad4:	2000d388 	.word	0x2000d388

08019ad8 <calloc>:
 8019ad8:	4b02      	ldr	r3, [pc, #8]	; (8019ae4 <calloc+0xc>)
 8019ada:	460a      	mov	r2, r1
 8019adc:	4601      	mov	r1, r0
 8019ade:	6818      	ldr	r0, [r3, #0]
 8019ae0:	f000 b802 	b.w	8019ae8 <_calloc_r>
 8019ae4:	200000e0 	.word	0x200000e0

08019ae8 <_calloc_r>:
 8019ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019aea:	fba1 2402 	umull	r2, r4, r1, r2
 8019aee:	b94c      	cbnz	r4, 8019b04 <_calloc_r+0x1c>
 8019af0:	4611      	mov	r1, r2
 8019af2:	9201      	str	r2, [sp, #4]
 8019af4:	f000 f886 	bl	8019c04 <_malloc_r>
 8019af8:	9a01      	ldr	r2, [sp, #4]
 8019afa:	4605      	mov	r5, r0
 8019afc:	b930      	cbnz	r0, 8019b0c <_calloc_r+0x24>
 8019afe:	4628      	mov	r0, r5
 8019b00:	b003      	add	sp, #12
 8019b02:	bd30      	pop	{r4, r5, pc}
 8019b04:	220c      	movs	r2, #12
 8019b06:	6002      	str	r2, [r0, #0]
 8019b08:	2500      	movs	r5, #0
 8019b0a:	e7f8      	b.n	8019afe <_calloc_r+0x16>
 8019b0c:	4621      	mov	r1, r4
 8019b0e:	f000 fd07 	bl	801a520 <memset>
 8019b12:	e7f4      	b.n	8019afe <_calloc_r+0x16>

08019b14 <getenv>:
 8019b14:	b507      	push	{r0, r1, r2, lr}
 8019b16:	4b04      	ldr	r3, [pc, #16]	; (8019b28 <getenv+0x14>)
 8019b18:	4601      	mov	r1, r0
 8019b1a:	aa01      	add	r2, sp, #4
 8019b1c:	6818      	ldr	r0, [r3, #0]
 8019b1e:	f000 f805 	bl	8019b2c <_findenv_r>
 8019b22:	b003      	add	sp, #12
 8019b24:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b28:	200000e0 	.word	0x200000e0

08019b2c <_findenv_r>:
 8019b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b30:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8019ba0 <_findenv_r+0x74>
 8019b34:	4607      	mov	r7, r0
 8019b36:	4689      	mov	r9, r1
 8019b38:	4616      	mov	r6, r2
 8019b3a:	f000 fe3d 	bl	801a7b8 <__env_lock>
 8019b3e:	f8da 4000 	ldr.w	r4, [sl]
 8019b42:	b134      	cbz	r4, 8019b52 <_findenv_r+0x26>
 8019b44:	464b      	mov	r3, r9
 8019b46:	4698      	mov	r8, r3
 8019b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b4c:	b13a      	cbz	r2, 8019b5e <_findenv_r+0x32>
 8019b4e:	2a3d      	cmp	r2, #61	; 0x3d
 8019b50:	d1f9      	bne.n	8019b46 <_findenv_r+0x1a>
 8019b52:	4638      	mov	r0, r7
 8019b54:	f000 fe36 	bl	801a7c4 <__env_unlock>
 8019b58:	2000      	movs	r0, #0
 8019b5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b5e:	eba8 0809 	sub.w	r8, r8, r9
 8019b62:	46a3      	mov	fp, r4
 8019b64:	f854 0b04 	ldr.w	r0, [r4], #4
 8019b68:	2800      	cmp	r0, #0
 8019b6a:	d0f2      	beq.n	8019b52 <_findenv_r+0x26>
 8019b6c:	4642      	mov	r2, r8
 8019b6e:	4649      	mov	r1, r9
 8019b70:	f000 fceb 	bl	801a54a <strncmp>
 8019b74:	2800      	cmp	r0, #0
 8019b76:	d1f4      	bne.n	8019b62 <_findenv_r+0x36>
 8019b78:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019b7c:	eb03 0508 	add.w	r5, r3, r8
 8019b80:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019b84:	2b3d      	cmp	r3, #61	; 0x3d
 8019b86:	d1ec      	bne.n	8019b62 <_findenv_r+0x36>
 8019b88:	f8da 3000 	ldr.w	r3, [sl]
 8019b8c:	ebab 0303 	sub.w	r3, fp, r3
 8019b90:	109b      	asrs	r3, r3, #2
 8019b92:	4638      	mov	r0, r7
 8019b94:	6033      	str	r3, [r6, #0]
 8019b96:	f000 fe15 	bl	801a7c4 <__env_unlock>
 8019b9a:	1c68      	adds	r0, r5, #1
 8019b9c:	e7dd      	b.n	8019b5a <_findenv_r+0x2e>
 8019b9e:	bf00      	nop
 8019ba0:	200000e4 	.word	0x200000e4

08019ba4 <malloc>:
 8019ba4:	4b02      	ldr	r3, [pc, #8]	; (8019bb0 <malloc+0xc>)
 8019ba6:	4601      	mov	r1, r0
 8019ba8:	6818      	ldr	r0, [r3, #0]
 8019baa:	f000 b82b 	b.w	8019c04 <_malloc_r>
 8019bae:	bf00      	nop
 8019bb0:	200000e0 	.word	0x200000e0

08019bb4 <free>:
 8019bb4:	4b02      	ldr	r3, [pc, #8]	; (8019bc0 <free+0xc>)
 8019bb6:	4601      	mov	r1, r0
 8019bb8:	6818      	ldr	r0, [r3, #0]
 8019bba:	f000 be09 	b.w	801a7d0 <_free_r>
 8019bbe:	bf00      	nop
 8019bc0:	200000e0 	.word	0x200000e0

08019bc4 <sbrk_aligned>:
 8019bc4:	b570      	push	{r4, r5, r6, lr}
 8019bc6:	4e0e      	ldr	r6, [pc, #56]	; (8019c00 <sbrk_aligned+0x3c>)
 8019bc8:	460c      	mov	r4, r1
 8019bca:	6831      	ldr	r1, [r6, #0]
 8019bcc:	4605      	mov	r5, r0
 8019bce:	b911      	cbnz	r1, 8019bd6 <sbrk_aligned+0x12>
 8019bd0:	f000 fd6e 	bl	801a6b0 <_sbrk_r>
 8019bd4:	6030      	str	r0, [r6, #0]
 8019bd6:	4621      	mov	r1, r4
 8019bd8:	4628      	mov	r0, r5
 8019bda:	f000 fd69 	bl	801a6b0 <_sbrk_r>
 8019bde:	1c43      	adds	r3, r0, #1
 8019be0:	d00a      	beq.n	8019bf8 <sbrk_aligned+0x34>
 8019be2:	1cc4      	adds	r4, r0, #3
 8019be4:	f024 0403 	bic.w	r4, r4, #3
 8019be8:	42a0      	cmp	r0, r4
 8019bea:	d007      	beq.n	8019bfc <sbrk_aligned+0x38>
 8019bec:	1a21      	subs	r1, r4, r0
 8019bee:	4628      	mov	r0, r5
 8019bf0:	f000 fd5e 	bl	801a6b0 <_sbrk_r>
 8019bf4:	3001      	adds	r0, #1
 8019bf6:	d101      	bne.n	8019bfc <sbrk_aligned+0x38>
 8019bf8:	f04f 34ff 	mov.w	r4, #4294967295
 8019bfc:	4620      	mov	r0, r4
 8019bfe:	bd70      	pop	{r4, r5, r6, pc}
 8019c00:	2000a07c 	.word	0x2000a07c

08019c04 <_malloc_r>:
 8019c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c08:	1ccd      	adds	r5, r1, #3
 8019c0a:	f025 0503 	bic.w	r5, r5, #3
 8019c0e:	3508      	adds	r5, #8
 8019c10:	2d0c      	cmp	r5, #12
 8019c12:	bf38      	it	cc
 8019c14:	250c      	movcc	r5, #12
 8019c16:	2d00      	cmp	r5, #0
 8019c18:	4607      	mov	r7, r0
 8019c1a:	db01      	blt.n	8019c20 <_malloc_r+0x1c>
 8019c1c:	42a9      	cmp	r1, r5
 8019c1e:	d905      	bls.n	8019c2c <_malloc_r+0x28>
 8019c20:	230c      	movs	r3, #12
 8019c22:	603b      	str	r3, [r7, #0]
 8019c24:	2600      	movs	r6, #0
 8019c26:	4630      	mov	r0, r6
 8019c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019d00 <_malloc_r+0xfc>
 8019c30:	f000 f868 	bl	8019d04 <__malloc_lock>
 8019c34:	f8d8 3000 	ldr.w	r3, [r8]
 8019c38:	461c      	mov	r4, r3
 8019c3a:	bb5c      	cbnz	r4, 8019c94 <_malloc_r+0x90>
 8019c3c:	4629      	mov	r1, r5
 8019c3e:	4638      	mov	r0, r7
 8019c40:	f7ff ffc0 	bl	8019bc4 <sbrk_aligned>
 8019c44:	1c43      	adds	r3, r0, #1
 8019c46:	4604      	mov	r4, r0
 8019c48:	d155      	bne.n	8019cf6 <_malloc_r+0xf2>
 8019c4a:	f8d8 4000 	ldr.w	r4, [r8]
 8019c4e:	4626      	mov	r6, r4
 8019c50:	2e00      	cmp	r6, #0
 8019c52:	d145      	bne.n	8019ce0 <_malloc_r+0xdc>
 8019c54:	2c00      	cmp	r4, #0
 8019c56:	d048      	beq.n	8019cea <_malloc_r+0xe6>
 8019c58:	6823      	ldr	r3, [r4, #0]
 8019c5a:	4631      	mov	r1, r6
 8019c5c:	4638      	mov	r0, r7
 8019c5e:	eb04 0903 	add.w	r9, r4, r3
 8019c62:	f000 fd25 	bl	801a6b0 <_sbrk_r>
 8019c66:	4581      	cmp	r9, r0
 8019c68:	d13f      	bne.n	8019cea <_malloc_r+0xe6>
 8019c6a:	6821      	ldr	r1, [r4, #0]
 8019c6c:	1a6d      	subs	r5, r5, r1
 8019c6e:	4629      	mov	r1, r5
 8019c70:	4638      	mov	r0, r7
 8019c72:	f7ff ffa7 	bl	8019bc4 <sbrk_aligned>
 8019c76:	3001      	adds	r0, #1
 8019c78:	d037      	beq.n	8019cea <_malloc_r+0xe6>
 8019c7a:	6823      	ldr	r3, [r4, #0]
 8019c7c:	442b      	add	r3, r5
 8019c7e:	6023      	str	r3, [r4, #0]
 8019c80:	f8d8 3000 	ldr.w	r3, [r8]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d038      	beq.n	8019cfa <_malloc_r+0xf6>
 8019c88:	685a      	ldr	r2, [r3, #4]
 8019c8a:	42a2      	cmp	r2, r4
 8019c8c:	d12b      	bne.n	8019ce6 <_malloc_r+0xe2>
 8019c8e:	2200      	movs	r2, #0
 8019c90:	605a      	str	r2, [r3, #4]
 8019c92:	e00f      	b.n	8019cb4 <_malloc_r+0xb0>
 8019c94:	6822      	ldr	r2, [r4, #0]
 8019c96:	1b52      	subs	r2, r2, r5
 8019c98:	d41f      	bmi.n	8019cda <_malloc_r+0xd6>
 8019c9a:	2a0b      	cmp	r2, #11
 8019c9c:	d917      	bls.n	8019cce <_malloc_r+0xca>
 8019c9e:	1961      	adds	r1, r4, r5
 8019ca0:	42a3      	cmp	r3, r4
 8019ca2:	6025      	str	r5, [r4, #0]
 8019ca4:	bf18      	it	ne
 8019ca6:	6059      	strne	r1, [r3, #4]
 8019ca8:	6863      	ldr	r3, [r4, #4]
 8019caa:	bf08      	it	eq
 8019cac:	f8c8 1000 	streq.w	r1, [r8]
 8019cb0:	5162      	str	r2, [r4, r5]
 8019cb2:	604b      	str	r3, [r1, #4]
 8019cb4:	4638      	mov	r0, r7
 8019cb6:	f104 060b 	add.w	r6, r4, #11
 8019cba:	f000 f829 	bl	8019d10 <__malloc_unlock>
 8019cbe:	f026 0607 	bic.w	r6, r6, #7
 8019cc2:	1d23      	adds	r3, r4, #4
 8019cc4:	1af2      	subs	r2, r6, r3
 8019cc6:	d0ae      	beq.n	8019c26 <_malloc_r+0x22>
 8019cc8:	1b9b      	subs	r3, r3, r6
 8019cca:	50a3      	str	r3, [r4, r2]
 8019ccc:	e7ab      	b.n	8019c26 <_malloc_r+0x22>
 8019cce:	42a3      	cmp	r3, r4
 8019cd0:	6862      	ldr	r2, [r4, #4]
 8019cd2:	d1dd      	bne.n	8019c90 <_malloc_r+0x8c>
 8019cd4:	f8c8 2000 	str.w	r2, [r8]
 8019cd8:	e7ec      	b.n	8019cb4 <_malloc_r+0xb0>
 8019cda:	4623      	mov	r3, r4
 8019cdc:	6864      	ldr	r4, [r4, #4]
 8019cde:	e7ac      	b.n	8019c3a <_malloc_r+0x36>
 8019ce0:	4634      	mov	r4, r6
 8019ce2:	6876      	ldr	r6, [r6, #4]
 8019ce4:	e7b4      	b.n	8019c50 <_malloc_r+0x4c>
 8019ce6:	4613      	mov	r3, r2
 8019ce8:	e7cc      	b.n	8019c84 <_malloc_r+0x80>
 8019cea:	230c      	movs	r3, #12
 8019cec:	603b      	str	r3, [r7, #0]
 8019cee:	4638      	mov	r0, r7
 8019cf0:	f000 f80e 	bl	8019d10 <__malloc_unlock>
 8019cf4:	e797      	b.n	8019c26 <_malloc_r+0x22>
 8019cf6:	6025      	str	r5, [r4, #0]
 8019cf8:	e7dc      	b.n	8019cb4 <_malloc_r+0xb0>
 8019cfa:	605b      	str	r3, [r3, #4]
 8019cfc:	deff      	udf	#255	; 0xff
 8019cfe:	bf00      	nop
 8019d00:	2000a078 	.word	0x2000a078

08019d04 <__malloc_lock>:
 8019d04:	4801      	ldr	r0, [pc, #4]	; (8019d0c <__malloc_lock+0x8>)
 8019d06:	f000 bd20 	b.w	801a74a <__retarget_lock_acquire_recursive>
 8019d0a:	bf00      	nop
 8019d0c:	2000a1c1 	.word	0x2000a1c1

08019d10 <__malloc_unlock>:
 8019d10:	4801      	ldr	r0, [pc, #4]	; (8019d18 <__malloc_unlock+0x8>)
 8019d12:	f000 bd1b 	b.w	801a74c <__retarget_lock_release_recursive>
 8019d16:	bf00      	nop
 8019d18:	2000a1c1 	.word	0x2000a1c1

08019d1c <srand>:
 8019d1c:	b538      	push	{r3, r4, r5, lr}
 8019d1e:	4b10      	ldr	r3, [pc, #64]	; (8019d60 <srand+0x44>)
 8019d20:	681d      	ldr	r5, [r3, #0]
 8019d22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019d24:	4604      	mov	r4, r0
 8019d26:	b9b3      	cbnz	r3, 8019d56 <srand+0x3a>
 8019d28:	2018      	movs	r0, #24
 8019d2a:	f7ff ff3b 	bl	8019ba4 <malloc>
 8019d2e:	4602      	mov	r2, r0
 8019d30:	6328      	str	r0, [r5, #48]	; 0x30
 8019d32:	b920      	cbnz	r0, 8019d3e <srand+0x22>
 8019d34:	4b0b      	ldr	r3, [pc, #44]	; (8019d64 <srand+0x48>)
 8019d36:	480c      	ldr	r0, [pc, #48]	; (8019d68 <srand+0x4c>)
 8019d38:	2146      	movs	r1, #70	; 0x46
 8019d3a:	f000 fd1f 	bl	801a77c <__assert_func>
 8019d3e:	490b      	ldr	r1, [pc, #44]	; (8019d6c <srand+0x50>)
 8019d40:	4b0b      	ldr	r3, [pc, #44]	; (8019d70 <srand+0x54>)
 8019d42:	e9c0 1300 	strd	r1, r3, [r0]
 8019d46:	4b0b      	ldr	r3, [pc, #44]	; (8019d74 <srand+0x58>)
 8019d48:	6083      	str	r3, [r0, #8]
 8019d4a:	230b      	movs	r3, #11
 8019d4c:	8183      	strh	r3, [r0, #12]
 8019d4e:	2100      	movs	r1, #0
 8019d50:	2001      	movs	r0, #1
 8019d52:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019d56:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019d58:	2200      	movs	r2, #0
 8019d5a:	611c      	str	r4, [r3, #16]
 8019d5c:	615a      	str	r2, [r3, #20]
 8019d5e:	bd38      	pop	{r3, r4, r5, pc}
 8019d60:	200000e0 	.word	0x200000e0
 8019d64:	0801c168 	.word	0x0801c168
 8019d68:	0801c17f 	.word	0x0801c17f
 8019d6c:	abcd330e 	.word	0xabcd330e
 8019d70:	e66d1234 	.word	0xe66d1234
 8019d74:	0005deec 	.word	0x0005deec

08019d78 <rand>:
 8019d78:	4b16      	ldr	r3, [pc, #88]	; (8019dd4 <rand+0x5c>)
 8019d7a:	b510      	push	{r4, lr}
 8019d7c:	681c      	ldr	r4, [r3, #0]
 8019d7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019d80:	b9b3      	cbnz	r3, 8019db0 <rand+0x38>
 8019d82:	2018      	movs	r0, #24
 8019d84:	f7ff ff0e 	bl	8019ba4 <malloc>
 8019d88:	4602      	mov	r2, r0
 8019d8a:	6320      	str	r0, [r4, #48]	; 0x30
 8019d8c:	b920      	cbnz	r0, 8019d98 <rand+0x20>
 8019d8e:	4b12      	ldr	r3, [pc, #72]	; (8019dd8 <rand+0x60>)
 8019d90:	4812      	ldr	r0, [pc, #72]	; (8019ddc <rand+0x64>)
 8019d92:	2152      	movs	r1, #82	; 0x52
 8019d94:	f000 fcf2 	bl	801a77c <__assert_func>
 8019d98:	4911      	ldr	r1, [pc, #68]	; (8019de0 <rand+0x68>)
 8019d9a:	4b12      	ldr	r3, [pc, #72]	; (8019de4 <rand+0x6c>)
 8019d9c:	e9c0 1300 	strd	r1, r3, [r0]
 8019da0:	4b11      	ldr	r3, [pc, #68]	; (8019de8 <rand+0x70>)
 8019da2:	6083      	str	r3, [r0, #8]
 8019da4:	230b      	movs	r3, #11
 8019da6:	8183      	strh	r3, [r0, #12]
 8019da8:	2100      	movs	r1, #0
 8019daa:	2001      	movs	r0, #1
 8019dac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019db0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019db2:	480e      	ldr	r0, [pc, #56]	; (8019dec <rand+0x74>)
 8019db4:	690b      	ldr	r3, [r1, #16]
 8019db6:	694c      	ldr	r4, [r1, #20]
 8019db8:	4a0d      	ldr	r2, [pc, #52]	; (8019df0 <rand+0x78>)
 8019dba:	4358      	muls	r0, r3
 8019dbc:	fb02 0004 	mla	r0, r2, r4, r0
 8019dc0:	fba3 3202 	umull	r3, r2, r3, r2
 8019dc4:	3301      	adds	r3, #1
 8019dc6:	eb40 0002 	adc.w	r0, r0, r2
 8019dca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019dce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019dd2:	bd10      	pop	{r4, pc}
 8019dd4:	200000e0 	.word	0x200000e0
 8019dd8:	0801c168 	.word	0x0801c168
 8019ddc:	0801c17f 	.word	0x0801c17f
 8019de0:	abcd330e 	.word	0xabcd330e
 8019de4:	e66d1234 	.word	0xe66d1234
 8019de8:	0005deec 	.word	0x0005deec
 8019dec:	5851f42d 	.word	0x5851f42d
 8019df0:	4c957f2d 	.word	0x4c957f2d

08019df4 <realloc>:
 8019df4:	4b02      	ldr	r3, [pc, #8]	; (8019e00 <realloc+0xc>)
 8019df6:	460a      	mov	r2, r1
 8019df8:	4601      	mov	r1, r0
 8019dfa:	6818      	ldr	r0, [r3, #0]
 8019dfc:	f000 b802 	b.w	8019e04 <_realloc_r>
 8019e00:	200000e0 	.word	0x200000e0

08019e04 <_realloc_r>:
 8019e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e08:	4680      	mov	r8, r0
 8019e0a:	4614      	mov	r4, r2
 8019e0c:	460e      	mov	r6, r1
 8019e0e:	b921      	cbnz	r1, 8019e1a <_realloc_r+0x16>
 8019e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e14:	4611      	mov	r1, r2
 8019e16:	f7ff bef5 	b.w	8019c04 <_malloc_r>
 8019e1a:	b92a      	cbnz	r2, 8019e28 <_realloc_r+0x24>
 8019e1c:	f000 fcd8 	bl	801a7d0 <_free_r>
 8019e20:	4625      	mov	r5, r4
 8019e22:	4628      	mov	r0, r5
 8019e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e28:	f000 fd1e 	bl	801a868 <_malloc_usable_size_r>
 8019e2c:	4284      	cmp	r4, r0
 8019e2e:	4607      	mov	r7, r0
 8019e30:	d802      	bhi.n	8019e38 <_realloc_r+0x34>
 8019e32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019e36:	d812      	bhi.n	8019e5e <_realloc_r+0x5a>
 8019e38:	4621      	mov	r1, r4
 8019e3a:	4640      	mov	r0, r8
 8019e3c:	f7ff fee2 	bl	8019c04 <_malloc_r>
 8019e40:	4605      	mov	r5, r0
 8019e42:	2800      	cmp	r0, #0
 8019e44:	d0ed      	beq.n	8019e22 <_realloc_r+0x1e>
 8019e46:	42bc      	cmp	r4, r7
 8019e48:	4622      	mov	r2, r4
 8019e4a:	4631      	mov	r1, r6
 8019e4c:	bf28      	it	cs
 8019e4e:	463a      	movcs	r2, r7
 8019e50:	f000 fc85 	bl	801a75e <memcpy>
 8019e54:	4631      	mov	r1, r6
 8019e56:	4640      	mov	r0, r8
 8019e58:	f000 fcba 	bl	801a7d0 <_free_r>
 8019e5c:	e7e1      	b.n	8019e22 <_realloc_r+0x1e>
 8019e5e:	4635      	mov	r5, r6
 8019e60:	e7df      	b.n	8019e22 <_realloc_r+0x1e>
	...

08019e64 <_strtoul_l.constprop.0>:
 8019e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019e68:	4f36      	ldr	r7, [pc, #216]	; (8019f44 <_strtoul_l.constprop.0+0xe0>)
 8019e6a:	4686      	mov	lr, r0
 8019e6c:	460d      	mov	r5, r1
 8019e6e:	4628      	mov	r0, r5
 8019e70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019e74:	5d3e      	ldrb	r6, [r7, r4]
 8019e76:	f016 0608 	ands.w	r6, r6, #8
 8019e7a:	d1f8      	bne.n	8019e6e <_strtoul_l.constprop.0+0xa>
 8019e7c:	2c2d      	cmp	r4, #45	; 0x2d
 8019e7e:	d130      	bne.n	8019ee2 <_strtoul_l.constprop.0+0x7e>
 8019e80:	782c      	ldrb	r4, [r5, #0]
 8019e82:	2601      	movs	r6, #1
 8019e84:	1c85      	adds	r5, r0, #2
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d057      	beq.n	8019f3a <_strtoul_l.constprop.0+0xd6>
 8019e8a:	2b10      	cmp	r3, #16
 8019e8c:	d109      	bne.n	8019ea2 <_strtoul_l.constprop.0+0x3e>
 8019e8e:	2c30      	cmp	r4, #48	; 0x30
 8019e90:	d107      	bne.n	8019ea2 <_strtoul_l.constprop.0+0x3e>
 8019e92:	7828      	ldrb	r0, [r5, #0]
 8019e94:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019e98:	2858      	cmp	r0, #88	; 0x58
 8019e9a:	d149      	bne.n	8019f30 <_strtoul_l.constprop.0+0xcc>
 8019e9c:	786c      	ldrb	r4, [r5, #1]
 8019e9e:	2310      	movs	r3, #16
 8019ea0:	3502      	adds	r5, #2
 8019ea2:	f04f 38ff 	mov.w	r8, #4294967295
 8019ea6:	2700      	movs	r7, #0
 8019ea8:	fbb8 f8f3 	udiv	r8, r8, r3
 8019eac:	fb03 f908 	mul.w	r9, r3, r8
 8019eb0:	ea6f 0909 	mvn.w	r9, r9
 8019eb4:	4638      	mov	r0, r7
 8019eb6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019eba:	f1bc 0f09 	cmp.w	ip, #9
 8019ebe:	d815      	bhi.n	8019eec <_strtoul_l.constprop.0+0x88>
 8019ec0:	4664      	mov	r4, ip
 8019ec2:	42a3      	cmp	r3, r4
 8019ec4:	dd23      	ble.n	8019f0e <_strtoul_l.constprop.0+0xaa>
 8019ec6:	f1b7 3fff 	cmp.w	r7, #4294967295
 8019eca:	d007      	beq.n	8019edc <_strtoul_l.constprop.0+0x78>
 8019ecc:	4580      	cmp	r8, r0
 8019ece:	d31b      	bcc.n	8019f08 <_strtoul_l.constprop.0+0xa4>
 8019ed0:	d101      	bne.n	8019ed6 <_strtoul_l.constprop.0+0x72>
 8019ed2:	45a1      	cmp	r9, r4
 8019ed4:	db18      	blt.n	8019f08 <_strtoul_l.constprop.0+0xa4>
 8019ed6:	fb00 4003 	mla	r0, r0, r3, r4
 8019eda:	2701      	movs	r7, #1
 8019edc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019ee0:	e7e9      	b.n	8019eb6 <_strtoul_l.constprop.0+0x52>
 8019ee2:	2c2b      	cmp	r4, #43	; 0x2b
 8019ee4:	bf04      	itt	eq
 8019ee6:	782c      	ldrbeq	r4, [r5, #0]
 8019ee8:	1c85      	addeq	r5, r0, #2
 8019eea:	e7cc      	b.n	8019e86 <_strtoul_l.constprop.0+0x22>
 8019eec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019ef0:	f1bc 0f19 	cmp.w	ip, #25
 8019ef4:	d801      	bhi.n	8019efa <_strtoul_l.constprop.0+0x96>
 8019ef6:	3c37      	subs	r4, #55	; 0x37
 8019ef8:	e7e3      	b.n	8019ec2 <_strtoul_l.constprop.0+0x5e>
 8019efa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8019efe:	f1bc 0f19 	cmp.w	ip, #25
 8019f02:	d804      	bhi.n	8019f0e <_strtoul_l.constprop.0+0xaa>
 8019f04:	3c57      	subs	r4, #87	; 0x57
 8019f06:	e7dc      	b.n	8019ec2 <_strtoul_l.constprop.0+0x5e>
 8019f08:	f04f 37ff 	mov.w	r7, #4294967295
 8019f0c:	e7e6      	b.n	8019edc <_strtoul_l.constprop.0+0x78>
 8019f0e:	1c7b      	adds	r3, r7, #1
 8019f10:	d106      	bne.n	8019f20 <_strtoul_l.constprop.0+0xbc>
 8019f12:	2322      	movs	r3, #34	; 0x22
 8019f14:	f8ce 3000 	str.w	r3, [lr]
 8019f18:	4638      	mov	r0, r7
 8019f1a:	b932      	cbnz	r2, 8019f2a <_strtoul_l.constprop.0+0xc6>
 8019f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f20:	b106      	cbz	r6, 8019f24 <_strtoul_l.constprop.0+0xc0>
 8019f22:	4240      	negs	r0, r0
 8019f24:	2a00      	cmp	r2, #0
 8019f26:	d0f9      	beq.n	8019f1c <_strtoul_l.constprop.0+0xb8>
 8019f28:	b107      	cbz	r7, 8019f2c <_strtoul_l.constprop.0+0xc8>
 8019f2a:	1e69      	subs	r1, r5, #1
 8019f2c:	6011      	str	r1, [r2, #0]
 8019f2e:	e7f5      	b.n	8019f1c <_strtoul_l.constprop.0+0xb8>
 8019f30:	2430      	movs	r4, #48	; 0x30
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d1b5      	bne.n	8019ea2 <_strtoul_l.constprop.0+0x3e>
 8019f36:	2308      	movs	r3, #8
 8019f38:	e7b3      	b.n	8019ea2 <_strtoul_l.constprop.0+0x3e>
 8019f3a:	2c30      	cmp	r4, #48	; 0x30
 8019f3c:	d0a9      	beq.n	8019e92 <_strtoul_l.constprop.0+0x2e>
 8019f3e:	230a      	movs	r3, #10
 8019f40:	e7af      	b.n	8019ea2 <_strtoul_l.constprop.0+0x3e>
 8019f42:	bf00      	nop
 8019f44:	0801c1d8 	.word	0x0801c1d8

08019f48 <strtoul>:
 8019f48:	4613      	mov	r3, r2
 8019f4a:	460a      	mov	r2, r1
 8019f4c:	4601      	mov	r1, r0
 8019f4e:	4802      	ldr	r0, [pc, #8]	; (8019f58 <strtoul+0x10>)
 8019f50:	6800      	ldr	r0, [r0, #0]
 8019f52:	f7ff bf87 	b.w	8019e64 <_strtoul_l.constprop.0>
 8019f56:	bf00      	nop
 8019f58:	200000e0 	.word	0x200000e0

08019f5c <std>:
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	b510      	push	{r4, lr}
 8019f60:	4604      	mov	r4, r0
 8019f62:	e9c0 3300 	strd	r3, r3, [r0]
 8019f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019f6a:	6083      	str	r3, [r0, #8]
 8019f6c:	8181      	strh	r1, [r0, #12]
 8019f6e:	6643      	str	r3, [r0, #100]	; 0x64
 8019f70:	81c2      	strh	r2, [r0, #14]
 8019f72:	6183      	str	r3, [r0, #24]
 8019f74:	4619      	mov	r1, r3
 8019f76:	2208      	movs	r2, #8
 8019f78:	305c      	adds	r0, #92	; 0x5c
 8019f7a:	f000 fad1 	bl	801a520 <memset>
 8019f7e:	4b0d      	ldr	r3, [pc, #52]	; (8019fb4 <std+0x58>)
 8019f80:	6263      	str	r3, [r4, #36]	; 0x24
 8019f82:	4b0d      	ldr	r3, [pc, #52]	; (8019fb8 <std+0x5c>)
 8019f84:	62a3      	str	r3, [r4, #40]	; 0x28
 8019f86:	4b0d      	ldr	r3, [pc, #52]	; (8019fbc <std+0x60>)
 8019f88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019f8a:	4b0d      	ldr	r3, [pc, #52]	; (8019fc0 <std+0x64>)
 8019f8c:	6323      	str	r3, [r4, #48]	; 0x30
 8019f8e:	4b0d      	ldr	r3, [pc, #52]	; (8019fc4 <std+0x68>)
 8019f90:	6224      	str	r4, [r4, #32]
 8019f92:	429c      	cmp	r4, r3
 8019f94:	d006      	beq.n	8019fa4 <std+0x48>
 8019f96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8019f9a:	4294      	cmp	r4, r2
 8019f9c:	d002      	beq.n	8019fa4 <std+0x48>
 8019f9e:	33d0      	adds	r3, #208	; 0xd0
 8019fa0:	429c      	cmp	r4, r3
 8019fa2:	d105      	bne.n	8019fb0 <std+0x54>
 8019fa4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fac:	f000 bbcc 	b.w	801a748 <__retarget_lock_init_recursive>
 8019fb0:	bd10      	pop	{r4, pc}
 8019fb2:	bf00      	nop
 8019fb4:	0801a2c9 	.word	0x0801a2c9
 8019fb8:	0801a2eb 	.word	0x0801a2eb
 8019fbc:	0801a323 	.word	0x0801a323
 8019fc0:	0801a347 	.word	0x0801a347
 8019fc4:	2000a080 	.word	0x2000a080

08019fc8 <stdio_exit_handler>:
 8019fc8:	4a02      	ldr	r2, [pc, #8]	; (8019fd4 <stdio_exit_handler+0xc>)
 8019fca:	4903      	ldr	r1, [pc, #12]	; (8019fd8 <stdio_exit_handler+0x10>)
 8019fcc:	4803      	ldr	r0, [pc, #12]	; (8019fdc <stdio_exit_handler+0x14>)
 8019fce:	f000 b869 	b.w	801a0a4 <_fwalk_sglue>
 8019fd2:	bf00      	nop
 8019fd4:	20000088 	.word	0x20000088
 8019fd8:	0801b1dd 	.word	0x0801b1dd
 8019fdc:	20000094 	.word	0x20000094

08019fe0 <cleanup_stdio>:
 8019fe0:	6841      	ldr	r1, [r0, #4]
 8019fe2:	4b0c      	ldr	r3, [pc, #48]	; (801a014 <cleanup_stdio+0x34>)
 8019fe4:	4299      	cmp	r1, r3
 8019fe6:	b510      	push	{r4, lr}
 8019fe8:	4604      	mov	r4, r0
 8019fea:	d001      	beq.n	8019ff0 <cleanup_stdio+0x10>
 8019fec:	f001 f8f6 	bl	801b1dc <_fflush_r>
 8019ff0:	68a1      	ldr	r1, [r4, #8]
 8019ff2:	4b09      	ldr	r3, [pc, #36]	; (801a018 <cleanup_stdio+0x38>)
 8019ff4:	4299      	cmp	r1, r3
 8019ff6:	d002      	beq.n	8019ffe <cleanup_stdio+0x1e>
 8019ff8:	4620      	mov	r0, r4
 8019ffa:	f001 f8ef 	bl	801b1dc <_fflush_r>
 8019ffe:	68e1      	ldr	r1, [r4, #12]
 801a000:	4b06      	ldr	r3, [pc, #24]	; (801a01c <cleanup_stdio+0x3c>)
 801a002:	4299      	cmp	r1, r3
 801a004:	d004      	beq.n	801a010 <cleanup_stdio+0x30>
 801a006:	4620      	mov	r0, r4
 801a008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a00c:	f001 b8e6 	b.w	801b1dc <_fflush_r>
 801a010:	bd10      	pop	{r4, pc}
 801a012:	bf00      	nop
 801a014:	2000a080 	.word	0x2000a080
 801a018:	2000a0e8 	.word	0x2000a0e8
 801a01c:	2000a150 	.word	0x2000a150

0801a020 <global_stdio_init.part.0>:
 801a020:	b510      	push	{r4, lr}
 801a022:	4b0b      	ldr	r3, [pc, #44]	; (801a050 <global_stdio_init.part.0+0x30>)
 801a024:	4c0b      	ldr	r4, [pc, #44]	; (801a054 <global_stdio_init.part.0+0x34>)
 801a026:	4a0c      	ldr	r2, [pc, #48]	; (801a058 <global_stdio_init.part.0+0x38>)
 801a028:	601a      	str	r2, [r3, #0]
 801a02a:	4620      	mov	r0, r4
 801a02c:	2200      	movs	r2, #0
 801a02e:	2104      	movs	r1, #4
 801a030:	f7ff ff94 	bl	8019f5c <std>
 801a034:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801a038:	2201      	movs	r2, #1
 801a03a:	2109      	movs	r1, #9
 801a03c:	f7ff ff8e 	bl	8019f5c <std>
 801a040:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801a044:	2202      	movs	r2, #2
 801a046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a04a:	2112      	movs	r1, #18
 801a04c:	f7ff bf86 	b.w	8019f5c <std>
 801a050:	2000a1b8 	.word	0x2000a1b8
 801a054:	2000a080 	.word	0x2000a080
 801a058:	08019fc9 	.word	0x08019fc9

0801a05c <__sfp_lock_acquire>:
 801a05c:	4801      	ldr	r0, [pc, #4]	; (801a064 <__sfp_lock_acquire+0x8>)
 801a05e:	f000 bb74 	b.w	801a74a <__retarget_lock_acquire_recursive>
 801a062:	bf00      	nop
 801a064:	2000a1c2 	.word	0x2000a1c2

0801a068 <__sfp_lock_release>:
 801a068:	4801      	ldr	r0, [pc, #4]	; (801a070 <__sfp_lock_release+0x8>)
 801a06a:	f000 bb6f 	b.w	801a74c <__retarget_lock_release_recursive>
 801a06e:	bf00      	nop
 801a070:	2000a1c2 	.word	0x2000a1c2

0801a074 <__sinit>:
 801a074:	b510      	push	{r4, lr}
 801a076:	4604      	mov	r4, r0
 801a078:	f7ff fff0 	bl	801a05c <__sfp_lock_acquire>
 801a07c:	6a23      	ldr	r3, [r4, #32]
 801a07e:	b11b      	cbz	r3, 801a088 <__sinit+0x14>
 801a080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a084:	f7ff bff0 	b.w	801a068 <__sfp_lock_release>
 801a088:	4b04      	ldr	r3, [pc, #16]	; (801a09c <__sinit+0x28>)
 801a08a:	6223      	str	r3, [r4, #32]
 801a08c:	4b04      	ldr	r3, [pc, #16]	; (801a0a0 <__sinit+0x2c>)
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d1f5      	bne.n	801a080 <__sinit+0xc>
 801a094:	f7ff ffc4 	bl	801a020 <global_stdio_init.part.0>
 801a098:	e7f2      	b.n	801a080 <__sinit+0xc>
 801a09a:	bf00      	nop
 801a09c:	08019fe1 	.word	0x08019fe1
 801a0a0:	2000a1b8 	.word	0x2000a1b8

0801a0a4 <_fwalk_sglue>:
 801a0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a0a8:	4607      	mov	r7, r0
 801a0aa:	4688      	mov	r8, r1
 801a0ac:	4614      	mov	r4, r2
 801a0ae:	2600      	movs	r6, #0
 801a0b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a0b4:	f1b9 0901 	subs.w	r9, r9, #1
 801a0b8:	d505      	bpl.n	801a0c6 <_fwalk_sglue+0x22>
 801a0ba:	6824      	ldr	r4, [r4, #0]
 801a0bc:	2c00      	cmp	r4, #0
 801a0be:	d1f7      	bne.n	801a0b0 <_fwalk_sglue+0xc>
 801a0c0:	4630      	mov	r0, r6
 801a0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0c6:	89ab      	ldrh	r3, [r5, #12]
 801a0c8:	2b01      	cmp	r3, #1
 801a0ca:	d907      	bls.n	801a0dc <_fwalk_sglue+0x38>
 801a0cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a0d0:	3301      	adds	r3, #1
 801a0d2:	d003      	beq.n	801a0dc <_fwalk_sglue+0x38>
 801a0d4:	4629      	mov	r1, r5
 801a0d6:	4638      	mov	r0, r7
 801a0d8:	47c0      	blx	r8
 801a0da:	4306      	orrs	r6, r0
 801a0dc:	3568      	adds	r5, #104	; 0x68
 801a0de:	e7e9      	b.n	801a0b4 <_fwalk_sglue+0x10>

0801a0e0 <iprintf>:
 801a0e0:	b40f      	push	{r0, r1, r2, r3}
 801a0e2:	b507      	push	{r0, r1, r2, lr}
 801a0e4:	4906      	ldr	r1, [pc, #24]	; (801a100 <iprintf+0x20>)
 801a0e6:	ab04      	add	r3, sp, #16
 801a0e8:	6808      	ldr	r0, [r1, #0]
 801a0ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801a0ee:	6881      	ldr	r1, [r0, #8]
 801a0f0:	9301      	str	r3, [sp, #4]
 801a0f2:	f000 fd43 	bl	801ab7c <_vfiprintf_r>
 801a0f6:	b003      	add	sp, #12
 801a0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a0fc:	b004      	add	sp, #16
 801a0fe:	4770      	bx	lr
 801a100:	200000e0 	.word	0x200000e0

0801a104 <setvbuf>:
 801a104:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a108:	461d      	mov	r5, r3
 801a10a:	4b54      	ldr	r3, [pc, #336]	; (801a25c <setvbuf+0x158>)
 801a10c:	681f      	ldr	r7, [r3, #0]
 801a10e:	4604      	mov	r4, r0
 801a110:	460e      	mov	r6, r1
 801a112:	4690      	mov	r8, r2
 801a114:	b127      	cbz	r7, 801a120 <setvbuf+0x1c>
 801a116:	6a3b      	ldr	r3, [r7, #32]
 801a118:	b913      	cbnz	r3, 801a120 <setvbuf+0x1c>
 801a11a:	4638      	mov	r0, r7
 801a11c:	f7ff ffaa 	bl	801a074 <__sinit>
 801a120:	f1b8 0f02 	cmp.w	r8, #2
 801a124:	d006      	beq.n	801a134 <setvbuf+0x30>
 801a126:	f1b8 0f01 	cmp.w	r8, #1
 801a12a:	f200 8094 	bhi.w	801a256 <setvbuf+0x152>
 801a12e:	2d00      	cmp	r5, #0
 801a130:	f2c0 8091 	blt.w	801a256 <setvbuf+0x152>
 801a134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a136:	07da      	lsls	r2, r3, #31
 801a138:	d405      	bmi.n	801a146 <setvbuf+0x42>
 801a13a:	89a3      	ldrh	r3, [r4, #12]
 801a13c:	059b      	lsls	r3, r3, #22
 801a13e:	d402      	bmi.n	801a146 <setvbuf+0x42>
 801a140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a142:	f000 fb02 	bl	801a74a <__retarget_lock_acquire_recursive>
 801a146:	4621      	mov	r1, r4
 801a148:	4638      	mov	r0, r7
 801a14a:	f001 f847 	bl	801b1dc <_fflush_r>
 801a14e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a150:	b141      	cbz	r1, 801a164 <setvbuf+0x60>
 801a152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a156:	4299      	cmp	r1, r3
 801a158:	d002      	beq.n	801a160 <setvbuf+0x5c>
 801a15a:	4638      	mov	r0, r7
 801a15c:	f000 fb38 	bl	801a7d0 <_free_r>
 801a160:	2300      	movs	r3, #0
 801a162:	6363      	str	r3, [r4, #52]	; 0x34
 801a164:	2300      	movs	r3, #0
 801a166:	61a3      	str	r3, [r4, #24]
 801a168:	6063      	str	r3, [r4, #4]
 801a16a:	89a3      	ldrh	r3, [r4, #12]
 801a16c:	0618      	lsls	r0, r3, #24
 801a16e:	d503      	bpl.n	801a178 <setvbuf+0x74>
 801a170:	6921      	ldr	r1, [r4, #16]
 801a172:	4638      	mov	r0, r7
 801a174:	f000 fb2c 	bl	801a7d0 <_free_r>
 801a178:	89a3      	ldrh	r3, [r4, #12]
 801a17a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801a17e:	f023 0303 	bic.w	r3, r3, #3
 801a182:	f1b8 0f02 	cmp.w	r8, #2
 801a186:	81a3      	strh	r3, [r4, #12]
 801a188:	d05f      	beq.n	801a24a <setvbuf+0x146>
 801a18a:	ab01      	add	r3, sp, #4
 801a18c:	466a      	mov	r2, sp
 801a18e:	4621      	mov	r1, r4
 801a190:	4638      	mov	r0, r7
 801a192:	f001 f85d 	bl	801b250 <__swhatbuf_r>
 801a196:	89a3      	ldrh	r3, [r4, #12]
 801a198:	4318      	orrs	r0, r3
 801a19a:	81a0      	strh	r0, [r4, #12]
 801a19c:	bb2d      	cbnz	r5, 801a1ea <setvbuf+0xe6>
 801a19e:	9d00      	ldr	r5, [sp, #0]
 801a1a0:	4628      	mov	r0, r5
 801a1a2:	f7ff fcff 	bl	8019ba4 <malloc>
 801a1a6:	4606      	mov	r6, r0
 801a1a8:	2800      	cmp	r0, #0
 801a1aa:	d150      	bne.n	801a24e <setvbuf+0x14a>
 801a1ac:	f8dd 9000 	ldr.w	r9, [sp]
 801a1b0:	45a9      	cmp	r9, r5
 801a1b2:	d13e      	bne.n	801a232 <setvbuf+0x12e>
 801a1b4:	f04f 35ff 	mov.w	r5, #4294967295
 801a1b8:	2200      	movs	r2, #0
 801a1ba:	60a2      	str	r2, [r4, #8]
 801a1bc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801a1c0:	6022      	str	r2, [r4, #0]
 801a1c2:	6122      	str	r2, [r4, #16]
 801a1c4:	2201      	movs	r2, #1
 801a1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a1ca:	6162      	str	r2, [r4, #20]
 801a1cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a1ce:	f043 0302 	orr.w	r3, r3, #2
 801a1d2:	07d1      	lsls	r1, r2, #31
 801a1d4:	81a3      	strh	r3, [r4, #12]
 801a1d6:	d404      	bmi.n	801a1e2 <setvbuf+0xde>
 801a1d8:	059b      	lsls	r3, r3, #22
 801a1da:	d402      	bmi.n	801a1e2 <setvbuf+0xde>
 801a1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a1de:	f000 fab5 	bl	801a74c <__retarget_lock_release_recursive>
 801a1e2:	4628      	mov	r0, r5
 801a1e4:	b003      	add	sp, #12
 801a1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a1ea:	2e00      	cmp	r6, #0
 801a1ec:	d0d8      	beq.n	801a1a0 <setvbuf+0x9c>
 801a1ee:	6a3b      	ldr	r3, [r7, #32]
 801a1f0:	b913      	cbnz	r3, 801a1f8 <setvbuf+0xf4>
 801a1f2:	4638      	mov	r0, r7
 801a1f4:	f7ff ff3e 	bl	801a074 <__sinit>
 801a1f8:	f1b8 0f01 	cmp.w	r8, #1
 801a1fc:	bf08      	it	eq
 801a1fe:	89a3      	ldrheq	r3, [r4, #12]
 801a200:	6026      	str	r6, [r4, #0]
 801a202:	bf04      	itt	eq
 801a204:	f043 0301 	orreq.w	r3, r3, #1
 801a208:	81a3      	strheq	r3, [r4, #12]
 801a20a:	89a3      	ldrh	r3, [r4, #12]
 801a20c:	f013 0208 	ands.w	r2, r3, #8
 801a210:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801a214:	d01d      	beq.n	801a252 <setvbuf+0x14e>
 801a216:	07da      	lsls	r2, r3, #31
 801a218:	bf41      	itttt	mi
 801a21a:	2200      	movmi	r2, #0
 801a21c:	426d      	negmi	r5, r5
 801a21e:	60a2      	strmi	r2, [r4, #8]
 801a220:	61a5      	strmi	r5, [r4, #24]
 801a222:	bf58      	it	pl
 801a224:	60a5      	strpl	r5, [r4, #8]
 801a226:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801a228:	f015 0501 	ands.w	r5, r5, #1
 801a22c:	d0d4      	beq.n	801a1d8 <setvbuf+0xd4>
 801a22e:	2500      	movs	r5, #0
 801a230:	e7d7      	b.n	801a1e2 <setvbuf+0xde>
 801a232:	4648      	mov	r0, r9
 801a234:	f7ff fcb6 	bl	8019ba4 <malloc>
 801a238:	4606      	mov	r6, r0
 801a23a:	2800      	cmp	r0, #0
 801a23c:	d0ba      	beq.n	801a1b4 <setvbuf+0xb0>
 801a23e:	89a3      	ldrh	r3, [r4, #12]
 801a240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a244:	81a3      	strh	r3, [r4, #12]
 801a246:	464d      	mov	r5, r9
 801a248:	e7d1      	b.n	801a1ee <setvbuf+0xea>
 801a24a:	2500      	movs	r5, #0
 801a24c:	e7b4      	b.n	801a1b8 <setvbuf+0xb4>
 801a24e:	46a9      	mov	r9, r5
 801a250:	e7f5      	b.n	801a23e <setvbuf+0x13a>
 801a252:	60a2      	str	r2, [r4, #8]
 801a254:	e7e7      	b.n	801a226 <setvbuf+0x122>
 801a256:	f04f 35ff 	mov.w	r5, #4294967295
 801a25a:	e7c2      	b.n	801a1e2 <setvbuf+0xde>
 801a25c:	200000e0 	.word	0x200000e0

0801a260 <sniprintf>:
 801a260:	b40c      	push	{r2, r3}
 801a262:	b530      	push	{r4, r5, lr}
 801a264:	4b17      	ldr	r3, [pc, #92]	; (801a2c4 <sniprintf+0x64>)
 801a266:	1e0c      	subs	r4, r1, #0
 801a268:	681d      	ldr	r5, [r3, #0]
 801a26a:	b09d      	sub	sp, #116	; 0x74
 801a26c:	da08      	bge.n	801a280 <sniprintf+0x20>
 801a26e:	238b      	movs	r3, #139	; 0x8b
 801a270:	602b      	str	r3, [r5, #0]
 801a272:	f04f 30ff 	mov.w	r0, #4294967295
 801a276:	b01d      	add	sp, #116	; 0x74
 801a278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a27c:	b002      	add	sp, #8
 801a27e:	4770      	bx	lr
 801a280:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a284:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a288:	bf14      	ite	ne
 801a28a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a28e:	4623      	moveq	r3, r4
 801a290:	9304      	str	r3, [sp, #16]
 801a292:	9307      	str	r3, [sp, #28]
 801a294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a298:	9002      	str	r0, [sp, #8]
 801a29a:	9006      	str	r0, [sp, #24]
 801a29c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a2a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a2a2:	ab21      	add	r3, sp, #132	; 0x84
 801a2a4:	a902      	add	r1, sp, #8
 801a2a6:	4628      	mov	r0, r5
 801a2a8:	9301      	str	r3, [sp, #4]
 801a2aa:	f000 fb3f 	bl	801a92c <_svfiprintf_r>
 801a2ae:	1c43      	adds	r3, r0, #1
 801a2b0:	bfbc      	itt	lt
 801a2b2:	238b      	movlt	r3, #139	; 0x8b
 801a2b4:	602b      	strlt	r3, [r5, #0]
 801a2b6:	2c00      	cmp	r4, #0
 801a2b8:	d0dd      	beq.n	801a276 <sniprintf+0x16>
 801a2ba:	9b02      	ldr	r3, [sp, #8]
 801a2bc:	2200      	movs	r2, #0
 801a2be:	701a      	strb	r2, [r3, #0]
 801a2c0:	e7d9      	b.n	801a276 <sniprintf+0x16>
 801a2c2:	bf00      	nop
 801a2c4:	200000e0 	.word	0x200000e0

0801a2c8 <__sread>:
 801a2c8:	b510      	push	{r4, lr}
 801a2ca:	460c      	mov	r4, r1
 801a2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2d0:	f000 f9dc 	bl	801a68c <_read_r>
 801a2d4:	2800      	cmp	r0, #0
 801a2d6:	bfab      	itete	ge
 801a2d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a2da:	89a3      	ldrhlt	r3, [r4, #12]
 801a2dc:	181b      	addge	r3, r3, r0
 801a2de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a2e2:	bfac      	ite	ge
 801a2e4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a2e6:	81a3      	strhlt	r3, [r4, #12]
 801a2e8:	bd10      	pop	{r4, pc}

0801a2ea <__swrite>:
 801a2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2ee:	461f      	mov	r7, r3
 801a2f0:	898b      	ldrh	r3, [r1, #12]
 801a2f2:	05db      	lsls	r3, r3, #23
 801a2f4:	4605      	mov	r5, r0
 801a2f6:	460c      	mov	r4, r1
 801a2f8:	4616      	mov	r6, r2
 801a2fa:	d505      	bpl.n	801a308 <__swrite+0x1e>
 801a2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a300:	2302      	movs	r3, #2
 801a302:	2200      	movs	r2, #0
 801a304:	f000 f9b0 	bl	801a668 <_lseek_r>
 801a308:	89a3      	ldrh	r3, [r4, #12]
 801a30a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a30e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a312:	81a3      	strh	r3, [r4, #12]
 801a314:	4632      	mov	r2, r6
 801a316:	463b      	mov	r3, r7
 801a318:	4628      	mov	r0, r5
 801a31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a31e:	f000 b9d7 	b.w	801a6d0 <_write_r>

0801a322 <__sseek>:
 801a322:	b510      	push	{r4, lr}
 801a324:	460c      	mov	r4, r1
 801a326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a32a:	f000 f99d 	bl	801a668 <_lseek_r>
 801a32e:	1c43      	adds	r3, r0, #1
 801a330:	89a3      	ldrh	r3, [r4, #12]
 801a332:	bf15      	itete	ne
 801a334:	6560      	strne	r0, [r4, #84]	; 0x54
 801a336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a33a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a33e:	81a3      	strheq	r3, [r4, #12]
 801a340:	bf18      	it	ne
 801a342:	81a3      	strhne	r3, [r4, #12]
 801a344:	bd10      	pop	{r4, pc}

0801a346 <__sclose>:
 801a346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a34a:	f000 b927 	b.w	801a59c <_close_r>

0801a34e <_vsniprintf_r>:
 801a34e:	b530      	push	{r4, r5, lr}
 801a350:	4614      	mov	r4, r2
 801a352:	2c00      	cmp	r4, #0
 801a354:	b09b      	sub	sp, #108	; 0x6c
 801a356:	4605      	mov	r5, r0
 801a358:	461a      	mov	r2, r3
 801a35a:	da05      	bge.n	801a368 <_vsniprintf_r+0x1a>
 801a35c:	238b      	movs	r3, #139	; 0x8b
 801a35e:	6003      	str	r3, [r0, #0]
 801a360:	f04f 30ff 	mov.w	r0, #4294967295
 801a364:	b01b      	add	sp, #108	; 0x6c
 801a366:	bd30      	pop	{r4, r5, pc}
 801a368:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a36c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a370:	bf14      	ite	ne
 801a372:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a376:	4623      	moveq	r3, r4
 801a378:	9302      	str	r3, [sp, #8]
 801a37a:	9305      	str	r3, [sp, #20]
 801a37c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a380:	9100      	str	r1, [sp, #0]
 801a382:	9104      	str	r1, [sp, #16]
 801a384:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a388:	4669      	mov	r1, sp
 801a38a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a38c:	f000 face 	bl	801a92c <_svfiprintf_r>
 801a390:	1c43      	adds	r3, r0, #1
 801a392:	bfbc      	itt	lt
 801a394:	238b      	movlt	r3, #139	; 0x8b
 801a396:	602b      	strlt	r3, [r5, #0]
 801a398:	2c00      	cmp	r4, #0
 801a39a:	d0e3      	beq.n	801a364 <_vsniprintf_r+0x16>
 801a39c:	9b00      	ldr	r3, [sp, #0]
 801a39e:	2200      	movs	r2, #0
 801a3a0:	701a      	strb	r2, [r3, #0]
 801a3a2:	e7df      	b.n	801a364 <_vsniprintf_r+0x16>

0801a3a4 <vsniprintf>:
 801a3a4:	b507      	push	{r0, r1, r2, lr}
 801a3a6:	9300      	str	r3, [sp, #0]
 801a3a8:	4613      	mov	r3, r2
 801a3aa:	460a      	mov	r2, r1
 801a3ac:	4601      	mov	r1, r0
 801a3ae:	4803      	ldr	r0, [pc, #12]	; (801a3bc <vsniprintf+0x18>)
 801a3b0:	6800      	ldr	r0, [r0, #0]
 801a3b2:	f7ff ffcc 	bl	801a34e <_vsniprintf_r>
 801a3b6:	b003      	add	sp, #12
 801a3b8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a3bc:	200000e0 	.word	0x200000e0

0801a3c0 <__swbuf_r>:
 801a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3c2:	460e      	mov	r6, r1
 801a3c4:	4614      	mov	r4, r2
 801a3c6:	4605      	mov	r5, r0
 801a3c8:	b118      	cbz	r0, 801a3d2 <__swbuf_r+0x12>
 801a3ca:	6a03      	ldr	r3, [r0, #32]
 801a3cc:	b90b      	cbnz	r3, 801a3d2 <__swbuf_r+0x12>
 801a3ce:	f7ff fe51 	bl	801a074 <__sinit>
 801a3d2:	69a3      	ldr	r3, [r4, #24]
 801a3d4:	60a3      	str	r3, [r4, #8]
 801a3d6:	89a3      	ldrh	r3, [r4, #12]
 801a3d8:	071a      	lsls	r2, r3, #28
 801a3da:	d525      	bpl.n	801a428 <__swbuf_r+0x68>
 801a3dc:	6923      	ldr	r3, [r4, #16]
 801a3de:	b31b      	cbz	r3, 801a428 <__swbuf_r+0x68>
 801a3e0:	6823      	ldr	r3, [r4, #0]
 801a3e2:	6922      	ldr	r2, [r4, #16]
 801a3e4:	1a98      	subs	r0, r3, r2
 801a3e6:	6963      	ldr	r3, [r4, #20]
 801a3e8:	b2f6      	uxtb	r6, r6
 801a3ea:	4283      	cmp	r3, r0
 801a3ec:	4637      	mov	r7, r6
 801a3ee:	dc04      	bgt.n	801a3fa <__swbuf_r+0x3a>
 801a3f0:	4621      	mov	r1, r4
 801a3f2:	4628      	mov	r0, r5
 801a3f4:	f000 fef2 	bl	801b1dc <_fflush_r>
 801a3f8:	b9e0      	cbnz	r0, 801a434 <__swbuf_r+0x74>
 801a3fa:	68a3      	ldr	r3, [r4, #8]
 801a3fc:	3b01      	subs	r3, #1
 801a3fe:	60a3      	str	r3, [r4, #8]
 801a400:	6823      	ldr	r3, [r4, #0]
 801a402:	1c5a      	adds	r2, r3, #1
 801a404:	6022      	str	r2, [r4, #0]
 801a406:	701e      	strb	r6, [r3, #0]
 801a408:	6962      	ldr	r2, [r4, #20]
 801a40a:	1c43      	adds	r3, r0, #1
 801a40c:	429a      	cmp	r2, r3
 801a40e:	d004      	beq.n	801a41a <__swbuf_r+0x5a>
 801a410:	89a3      	ldrh	r3, [r4, #12]
 801a412:	07db      	lsls	r3, r3, #31
 801a414:	d506      	bpl.n	801a424 <__swbuf_r+0x64>
 801a416:	2e0a      	cmp	r6, #10
 801a418:	d104      	bne.n	801a424 <__swbuf_r+0x64>
 801a41a:	4621      	mov	r1, r4
 801a41c:	4628      	mov	r0, r5
 801a41e:	f000 fedd 	bl	801b1dc <_fflush_r>
 801a422:	b938      	cbnz	r0, 801a434 <__swbuf_r+0x74>
 801a424:	4638      	mov	r0, r7
 801a426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a428:	4621      	mov	r1, r4
 801a42a:	4628      	mov	r0, r5
 801a42c:	f000 f806 	bl	801a43c <__swsetup_r>
 801a430:	2800      	cmp	r0, #0
 801a432:	d0d5      	beq.n	801a3e0 <__swbuf_r+0x20>
 801a434:	f04f 37ff 	mov.w	r7, #4294967295
 801a438:	e7f4      	b.n	801a424 <__swbuf_r+0x64>
	...

0801a43c <__swsetup_r>:
 801a43c:	b538      	push	{r3, r4, r5, lr}
 801a43e:	4b2a      	ldr	r3, [pc, #168]	; (801a4e8 <__swsetup_r+0xac>)
 801a440:	4605      	mov	r5, r0
 801a442:	6818      	ldr	r0, [r3, #0]
 801a444:	460c      	mov	r4, r1
 801a446:	b118      	cbz	r0, 801a450 <__swsetup_r+0x14>
 801a448:	6a03      	ldr	r3, [r0, #32]
 801a44a:	b90b      	cbnz	r3, 801a450 <__swsetup_r+0x14>
 801a44c:	f7ff fe12 	bl	801a074 <__sinit>
 801a450:	89a3      	ldrh	r3, [r4, #12]
 801a452:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a456:	0718      	lsls	r0, r3, #28
 801a458:	d422      	bmi.n	801a4a0 <__swsetup_r+0x64>
 801a45a:	06d9      	lsls	r1, r3, #27
 801a45c:	d407      	bmi.n	801a46e <__swsetup_r+0x32>
 801a45e:	2309      	movs	r3, #9
 801a460:	602b      	str	r3, [r5, #0]
 801a462:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a466:	81a3      	strh	r3, [r4, #12]
 801a468:	f04f 30ff 	mov.w	r0, #4294967295
 801a46c:	e034      	b.n	801a4d8 <__swsetup_r+0x9c>
 801a46e:	0758      	lsls	r0, r3, #29
 801a470:	d512      	bpl.n	801a498 <__swsetup_r+0x5c>
 801a472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a474:	b141      	cbz	r1, 801a488 <__swsetup_r+0x4c>
 801a476:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a47a:	4299      	cmp	r1, r3
 801a47c:	d002      	beq.n	801a484 <__swsetup_r+0x48>
 801a47e:	4628      	mov	r0, r5
 801a480:	f000 f9a6 	bl	801a7d0 <_free_r>
 801a484:	2300      	movs	r3, #0
 801a486:	6363      	str	r3, [r4, #52]	; 0x34
 801a488:	89a3      	ldrh	r3, [r4, #12]
 801a48a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a48e:	81a3      	strh	r3, [r4, #12]
 801a490:	2300      	movs	r3, #0
 801a492:	6063      	str	r3, [r4, #4]
 801a494:	6923      	ldr	r3, [r4, #16]
 801a496:	6023      	str	r3, [r4, #0]
 801a498:	89a3      	ldrh	r3, [r4, #12]
 801a49a:	f043 0308 	orr.w	r3, r3, #8
 801a49e:	81a3      	strh	r3, [r4, #12]
 801a4a0:	6923      	ldr	r3, [r4, #16]
 801a4a2:	b94b      	cbnz	r3, 801a4b8 <__swsetup_r+0x7c>
 801a4a4:	89a3      	ldrh	r3, [r4, #12]
 801a4a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a4aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a4ae:	d003      	beq.n	801a4b8 <__swsetup_r+0x7c>
 801a4b0:	4621      	mov	r1, r4
 801a4b2:	4628      	mov	r0, r5
 801a4b4:	f000 fef2 	bl	801b29c <__smakebuf_r>
 801a4b8:	89a0      	ldrh	r0, [r4, #12]
 801a4ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a4be:	f010 0301 	ands.w	r3, r0, #1
 801a4c2:	d00a      	beq.n	801a4da <__swsetup_r+0x9e>
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	60a3      	str	r3, [r4, #8]
 801a4c8:	6963      	ldr	r3, [r4, #20]
 801a4ca:	425b      	negs	r3, r3
 801a4cc:	61a3      	str	r3, [r4, #24]
 801a4ce:	6923      	ldr	r3, [r4, #16]
 801a4d0:	b943      	cbnz	r3, 801a4e4 <__swsetup_r+0xa8>
 801a4d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a4d6:	d1c4      	bne.n	801a462 <__swsetup_r+0x26>
 801a4d8:	bd38      	pop	{r3, r4, r5, pc}
 801a4da:	0781      	lsls	r1, r0, #30
 801a4dc:	bf58      	it	pl
 801a4de:	6963      	ldrpl	r3, [r4, #20]
 801a4e0:	60a3      	str	r3, [r4, #8]
 801a4e2:	e7f4      	b.n	801a4ce <__swsetup_r+0x92>
 801a4e4:	2000      	movs	r0, #0
 801a4e6:	e7f7      	b.n	801a4d8 <__swsetup_r+0x9c>
 801a4e8:	200000e0 	.word	0x200000e0

0801a4ec <memmove>:
 801a4ec:	4288      	cmp	r0, r1
 801a4ee:	b510      	push	{r4, lr}
 801a4f0:	eb01 0402 	add.w	r4, r1, r2
 801a4f4:	d902      	bls.n	801a4fc <memmove+0x10>
 801a4f6:	4284      	cmp	r4, r0
 801a4f8:	4623      	mov	r3, r4
 801a4fa:	d807      	bhi.n	801a50c <memmove+0x20>
 801a4fc:	1e43      	subs	r3, r0, #1
 801a4fe:	42a1      	cmp	r1, r4
 801a500:	d008      	beq.n	801a514 <memmove+0x28>
 801a502:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a506:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a50a:	e7f8      	b.n	801a4fe <memmove+0x12>
 801a50c:	4402      	add	r2, r0
 801a50e:	4601      	mov	r1, r0
 801a510:	428a      	cmp	r2, r1
 801a512:	d100      	bne.n	801a516 <memmove+0x2a>
 801a514:	bd10      	pop	{r4, pc}
 801a516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a51e:	e7f7      	b.n	801a510 <memmove+0x24>

0801a520 <memset>:
 801a520:	4402      	add	r2, r0
 801a522:	4603      	mov	r3, r0
 801a524:	4293      	cmp	r3, r2
 801a526:	d100      	bne.n	801a52a <memset+0xa>
 801a528:	4770      	bx	lr
 801a52a:	f803 1b01 	strb.w	r1, [r3], #1
 801a52e:	e7f9      	b.n	801a524 <memset+0x4>

0801a530 <strchr>:
 801a530:	b2c9      	uxtb	r1, r1
 801a532:	4603      	mov	r3, r0
 801a534:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a538:	b11a      	cbz	r2, 801a542 <strchr+0x12>
 801a53a:	428a      	cmp	r2, r1
 801a53c:	d1f9      	bne.n	801a532 <strchr+0x2>
 801a53e:	4618      	mov	r0, r3
 801a540:	4770      	bx	lr
 801a542:	2900      	cmp	r1, #0
 801a544:	bf18      	it	ne
 801a546:	2300      	movne	r3, #0
 801a548:	e7f9      	b.n	801a53e <strchr+0xe>

0801a54a <strncmp>:
 801a54a:	b510      	push	{r4, lr}
 801a54c:	b16a      	cbz	r2, 801a56a <strncmp+0x20>
 801a54e:	3901      	subs	r1, #1
 801a550:	1884      	adds	r4, r0, r2
 801a552:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a556:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a55a:	429a      	cmp	r2, r3
 801a55c:	d103      	bne.n	801a566 <strncmp+0x1c>
 801a55e:	42a0      	cmp	r0, r4
 801a560:	d001      	beq.n	801a566 <strncmp+0x1c>
 801a562:	2a00      	cmp	r2, #0
 801a564:	d1f5      	bne.n	801a552 <strncmp+0x8>
 801a566:	1ad0      	subs	r0, r2, r3
 801a568:	bd10      	pop	{r4, pc}
 801a56a:	4610      	mov	r0, r2
 801a56c:	e7fc      	b.n	801a568 <strncmp+0x1e>

0801a56e <strstr>:
 801a56e:	780a      	ldrb	r2, [r1, #0]
 801a570:	b570      	push	{r4, r5, r6, lr}
 801a572:	b96a      	cbnz	r2, 801a590 <strstr+0x22>
 801a574:	bd70      	pop	{r4, r5, r6, pc}
 801a576:	429a      	cmp	r2, r3
 801a578:	d109      	bne.n	801a58e <strstr+0x20>
 801a57a:	460c      	mov	r4, r1
 801a57c:	4605      	mov	r5, r0
 801a57e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a582:	2b00      	cmp	r3, #0
 801a584:	d0f6      	beq.n	801a574 <strstr+0x6>
 801a586:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a58a:	429e      	cmp	r6, r3
 801a58c:	d0f7      	beq.n	801a57e <strstr+0x10>
 801a58e:	3001      	adds	r0, #1
 801a590:	7803      	ldrb	r3, [r0, #0]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d1ef      	bne.n	801a576 <strstr+0x8>
 801a596:	4618      	mov	r0, r3
 801a598:	e7ec      	b.n	801a574 <strstr+0x6>
	...

0801a59c <_close_r>:
 801a59c:	b538      	push	{r3, r4, r5, lr}
 801a59e:	4d06      	ldr	r5, [pc, #24]	; (801a5b8 <_close_r+0x1c>)
 801a5a0:	2300      	movs	r3, #0
 801a5a2:	4604      	mov	r4, r0
 801a5a4:	4608      	mov	r0, r1
 801a5a6:	602b      	str	r3, [r5, #0]
 801a5a8:	f7e9 fc56 	bl	8003e58 <_close>
 801a5ac:	1c43      	adds	r3, r0, #1
 801a5ae:	d102      	bne.n	801a5b6 <_close_r+0x1a>
 801a5b0:	682b      	ldr	r3, [r5, #0]
 801a5b2:	b103      	cbz	r3, 801a5b6 <_close_r+0x1a>
 801a5b4:	6023      	str	r3, [r4, #0]
 801a5b6:	bd38      	pop	{r3, r4, r5, pc}
 801a5b8:	2000a1bc 	.word	0x2000a1bc

0801a5bc <_reclaim_reent>:
 801a5bc:	4b29      	ldr	r3, [pc, #164]	; (801a664 <_reclaim_reent+0xa8>)
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	4283      	cmp	r3, r0
 801a5c2:	b570      	push	{r4, r5, r6, lr}
 801a5c4:	4604      	mov	r4, r0
 801a5c6:	d04b      	beq.n	801a660 <_reclaim_reent+0xa4>
 801a5c8:	69c3      	ldr	r3, [r0, #28]
 801a5ca:	b143      	cbz	r3, 801a5de <_reclaim_reent+0x22>
 801a5cc:	68db      	ldr	r3, [r3, #12]
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d144      	bne.n	801a65c <_reclaim_reent+0xa0>
 801a5d2:	69e3      	ldr	r3, [r4, #28]
 801a5d4:	6819      	ldr	r1, [r3, #0]
 801a5d6:	b111      	cbz	r1, 801a5de <_reclaim_reent+0x22>
 801a5d8:	4620      	mov	r0, r4
 801a5da:	f000 f8f9 	bl	801a7d0 <_free_r>
 801a5de:	6961      	ldr	r1, [r4, #20]
 801a5e0:	b111      	cbz	r1, 801a5e8 <_reclaim_reent+0x2c>
 801a5e2:	4620      	mov	r0, r4
 801a5e4:	f000 f8f4 	bl	801a7d0 <_free_r>
 801a5e8:	69e1      	ldr	r1, [r4, #28]
 801a5ea:	b111      	cbz	r1, 801a5f2 <_reclaim_reent+0x36>
 801a5ec:	4620      	mov	r0, r4
 801a5ee:	f000 f8ef 	bl	801a7d0 <_free_r>
 801a5f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a5f4:	b111      	cbz	r1, 801a5fc <_reclaim_reent+0x40>
 801a5f6:	4620      	mov	r0, r4
 801a5f8:	f000 f8ea 	bl	801a7d0 <_free_r>
 801a5fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a5fe:	b111      	cbz	r1, 801a606 <_reclaim_reent+0x4a>
 801a600:	4620      	mov	r0, r4
 801a602:	f000 f8e5 	bl	801a7d0 <_free_r>
 801a606:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a608:	b111      	cbz	r1, 801a610 <_reclaim_reent+0x54>
 801a60a:	4620      	mov	r0, r4
 801a60c:	f000 f8e0 	bl	801a7d0 <_free_r>
 801a610:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a612:	b111      	cbz	r1, 801a61a <_reclaim_reent+0x5e>
 801a614:	4620      	mov	r0, r4
 801a616:	f000 f8db 	bl	801a7d0 <_free_r>
 801a61a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a61c:	b111      	cbz	r1, 801a624 <_reclaim_reent+0x68>
 801a61e:	4620      	mov	r0, r4
 801a620:	f000 f8d6 	bl	801a7d0 <_free_r>
 801a624:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a626:	b111      	cbz	r1, 801a62e <_reclaim_reent+0x72>
 801a628:	4620      	mov	r0, r4
 801a62a:	f000 f8d1 	bl	801a7d0 <_free_r>
 801a62e:	6a23      	ldr	r3, [r4, #32]
 801a630:	b1b3      	cbz	r3, 801a660 <_reclaim_reent+0xa4>
 801a632:	4620      	mov	r0, r4
 801a634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a638:	4718      	bx	r3
 801a63a:	5949      	ldr	r1, [r1, r5]
 801a63c:	b941      	cbnz	r1, 801a650 <_reclaim_reent+0x94>
 801a63e:	3504      	adds	r5, #4
 801a640:	69e3      	ldr	r3, [r4, #28]
 801a642:	2d80      	cmp	r5, #128	; 0x80
 801a644:	68d9      	ldr	r1, [r3, #12]
 801a646:	d1f8      	bne.n	801a63a <_reclaim_reent+0x7e>
 801a648:	4620      	mov	r0, r4
 801a64a:	f000 f8c1 	bl	801a7d0 <_free_r>
 801a64e:	e7c0      	b.n	801a5d2 <_reclaim_reent+0x16>
 801a650:	680e      	ldr	r6, [r1, #0]
 801a652:	4620      	mov	r0, r4
 801a654:	f000 f8bc 	bl	801a7d0 <_free_r>
 801a658:	4631      	mov	r1, r6
 801a65a:	e7ef      	b.n	801a63c <_reclaim_reent+0x80>
 801a65c:	2500      	movs	r5, #0
 801a65e:	e7ef      	b.n	801a640 <_reclaim_reent+0x84>
 801a660:	bd70      	pop	{r4, r5, r6, pc}
 801a662:	bf00      	nop
 801a664:	200000e0 	.word	0x200000e0

0801a668 <_lseek_r>:
 801a668:	b538      	push	{r3, r4, r5, lr}
 801a66a:	4d07      	ldr	r5, [pc, #28]	; (801a688 <_lseek_r+0x20>)
 801a66c:	4604      	mov	r4, r0
 801a66e:	4608      	mov	r0, r1
 801a670:	4611      	mov	r1, r2
 801a672:	2200      	movs	r2, #0
 801a674:	602a      	str	r2, [r5, #0]
 801a676:	461a      	mov	r2, r3
 801a678:	f7e9 fc05 	bl	8003e86 <_lseek>
 801a67c:	1c43      	adds	r3, r0, #1
 801a67e:	d102      	bne.n	801a686 <_lseek_r+0x1e>
 801a680:	682b      	ldr	r3, [r5, #0]
 801a682:	b103      	cbz	r3, 801a686 <_lseek_r+0x1e>
 801a684:	6023      	str	r3, [r4, #0]
 801a686:	bd38      	pop	{r3, r4, r5, pc}
 801a688:	2000a1bc 	.word	0x2000a1bc

0801a68c <_read_r>:
 801a68c:	b538      	push	{r3, r4, r5, lr}
 801a68e:	4d07      	ldr	r5, [pc, #28]	; (801a6ac <_read_r+0x20>)
 801a690:	4604      	mov	r4, r0
 801a692:	4608      	mov	r0, r1
 801a694:	4611      	mov	r1, r2
 801a696:	2200      	movs	r2, #0
 801a698:	602a      	str	r2, [r5, #0]
 801a69a:	461a      	mov	r2, r3
 801a69c:	f7e9 fc04 	bl	8003ea8 <_read>
 801a6a0:	1c43      	adds	r3, r0, #1
 801a6a2:	d102      	bne.n	801a6aa <_read_r+0x1e>
 801a6a4:	682b      	ldr	r3, [r5, #0]
 801a6a6:	b103      	cbz	r3, 801a6aa <_read_r+0x1e>
 801a6a8:	6023      	str	r3, [r4, #0]
 801a6aa:	bd38      	pop	{r3, r4, r5, pc}
 801a6ac:	2000a1bc 	.word	0x2000a1bc

0801a6b0 <_sbrk_r>:
 801a6b0:	b538      	push	{r3, r4, r5, lr}
 801a6b2:	4d06      	ldr	r5, [pc, #24]	; (801a6cc <_sbrk_r+0x1c>)
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	4604      	mov	r4, r0
 801a6b8:	4608      	mov	r0, r1
 801a6ba:	602b      	str	r3, [r5, #0]
 801a6bc:	f7ea f89c 	bl	80047f8 <_sbrk>
 801a6c0:	1c43      	adds	r3, r0, #1
 801a6c2:	d102      	bne.n	801a6ca <_sbrk_r+0x1a>
 801a6c4:	682b      	ldr	r3, [r5, #0]
 801a6c6:	b103      	cbz	r3, 801a6ca <_sbrk_r+0x1a>
 801a6c8:	6023      	str	r3, [r4, #0]
 801a6ca:	bd38      	pop	{r3, r4, r5, pc}
 801a6cc:	2000a1bc 	.word	0x2000a1bc

0801a6d0 <_write_r>:
 801a6d0:	b538      	push	{r3, r4, r5, lr}
 801a6d2:	4d07      	ldr	r5, [pc, #28]	; (801a6f0 <_write_r+0x20>)
 801a6d4:	4604      	mov	r4, r0
 801a6d6:	4608      	mov	r0, r1
 801a6d8:	4611      	mov	r1, r2
 801a6da:	2200      	movs	r2, #0
 801a6dc:	602a      	str	r2, [r5, #0]
 801a6de:	461a      	mov	r2, r3
 801a6e0:	f7e9 fb8e 	bl	8003e00 <_write>
 801a6e4:	1c43      	adds	r3, r0, #1
 801a6e6:	d102      	bne.n	801a6ee <_write_r+0x1e>
 801a6e8:	682b      	ldr	r3, [r5, #0]
 801a6ea:	b103      	cbz	r3, 801a6ee <_write_r+0x1e>
 801a6ec:	6023      	str	r3, [r4, #0]
 801a6ee:	bd38      	pop	{r3, r4, r5, pc}
 801a6f0:	2000a1bc 	.word	0x2000a1bc

0801a6f4 <__errno>:
 801a6f4:	4b01      	ldr	r3, [pc, #4]	; (801a6fc <__errno+0x8>)
 801a6f6:	6818      	ldr	r0, [r3, #0]
 801a6f8:	4770      	bx	lr
 801a6fa:	bf00      	nop
 801a6fc:	200000e0 	.word	0x200000e0

0801a700 <__libc_init_array>:
 801a700:	b570      	push	{r4, r5, r6, lr}
 801a702:	4d0d      	ldr	r5, [pc, #52]	; (801a738 <__libc_init_array+0x38>)
 801a704:	4c0d      	ldr	r4, [pc, #52]	; (801a73c <__libc_init_array+0x3c>)
 801a706:	1b64      	subs	r4, r4, r5
 801a708:	10a4      	asrs	r4, r4, #2
 801a70a:	2600      	movs	r6, #0
 801a70c:	42a6      	cmp	r6, r4
 801a70e:	d109      	bne.n	801a724 <__libc_init_array+0x24>
 801a710:	4d0b      	ldr	r5, [pc, #44]	; (801a740 <__libc_init_array+0x40>)
 801a712:	4c0c      	ldr	r4, [pc, #48]	; (801a744 <__libc_init_array+0x44>)
 801a714:	f000 fe6e 	bl	801b3f4 <_init>
 801a718:	1b64      	subs	r4, r4, r5
 801a71a:	10a4      	asrs	r4, r4, #2
 801a71c:	2600      	movs	r6, #0
 801a71e:	42a6      	cmp	r6, r4
 801a720:	d105      	bne.n	801a72e <__libc_init_array+0x2e>
 801a722:	bd70      	pop	{r4, r5, r6, pc}
 801a724:	f855 3b04 	ldr.w	r3, [r5], #4
 801a728:	4798      	blx	r3
 801a72a:	3601      	adds	r6, #1
 801a72c:	e7ee      	b.n	801a70c <__libc_init_array+0xc>
 801a72e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a732:	4798      	blx	r3
 801a734:	3601      	adds	r6, #1
 801a736:	e7f2      	b.n	801a71e <__libc_init_array+0x1e>
 801a738:	0801c350 	.word	0x0801c350
 801a73c:	0801c350 	.word	0x0801c350
 801a740:	0801c350 	.word	0x0801c350
 801a744:	0801c354 	.word	0x0801c354

0801a748 <__retarget_lock_init_recursive>:
 801a748:	4770      	bx	lr

0801a74a <__retarget_lock_acquire_recursive>:
 801a74a:	4770      	bx	lr

0801a74c <__retarget_lock_release_recursive>:
 801a74c:	4770      	bx	lr

0801a74e <strcpy>:
 801a74e:	4603      	mov	r3, r0
 801a750:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a754:	f803 2b01 	strb.w	r2, [r3], #1
 801a758:	2a00      	cmp	r2, #0
 801a75a:	d1f9      	bne.n	801a750 <strcpy+0x2>
 801a75c:	4770      	bx	lr

0801a75e <memcpy>:
 801a75e:	440a      	add	r2, r1
 801a760:	4291      	cmp	r1, r2
 801a762:	f100 33ff 	add.w	r3, r0, #4294967295
 801a766:	d100      	bne.n	801a76a <memcpy+0xc>
 801a768:	4770      	bx	lr
 801a76a:	b510      	push	{r4, lr}
 801a76c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a770:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a774:	4291      	cmp	r1, r2
 801a776:	d1f9      	bne.n	801a76c <memcpy+0xe>
 801a778:	bd10      	pop	{r4, pc}
	...

0801a77c <__assert_func>:
 801a77c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a77e:	4614      	mov	r4, r2
 801a780:	461a      	mov	r2, r3
 801a782:	4b09      	ldr	r3, [pc, #36]	; (801a7a8 <__assert_func+0x2c>)
 801a784:	681b      	ldr	r3, [r3, #0]
 801a786:	4605      	mov	r5, r0
 801a788:	68d8      	ldr	r0, [r3, #12]
 801a78a:	b14c      	cbz	r4, 801a7a0 <__assert_func+0x24>
 801a78c:	4b07      	ldr	r3, [pc, #28]	; (801a7ac <__assert_func+0x30>)
 801a78e:	9100      	str	r1, [sp, #0]
 801a790:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a794:	4906      	ldr	r1, [pc, #24]	; (801a7b0 <__assert_func+0x34>)
 801a796:	462b      	mov	r3, r5
 801a798:	f000 fd48 	bl	801b22c <fiprintf>
 801a79c:	f000 fddc 	bl	801b358 <abort>
 801a7a0:	4b04      	ldr	r3, [pc, #16]	; (801a7b4 <__assert_func+0x38>)
 801a7a2:	461c      	mov	r4, r3
 801a7a4:	e7f3      	b.n	801a78e <__assert_func+0x12>
 801a7a6:	bf00      	nop
 801a7a8:	200000e0 	.word	0x200000e0
 801a7ac:	0801c2d8 	.word	0x0801c2d8
 801a7b0:	0801c2e5 	.word	0x0801c2e5
 801a7b4:	0801c313 	.word	0x0801c313

0801a7b8 <__env_lock>:
 801a7b8:	4801      	ldr	r0, [pc, #4]	; (801a7c0 <__env_lock+0x8>)
 801a7ba:	f7ff bfc6 	b.w	801a74a <__retarget_lock_acquire_recursive>
 801a7be:	bf00      	nop
 801a7c0:	2000a1c0 	.word	0x2000a1c0

0801a7c4 <__env_unlock>:
 801a7c4:	4801      	ldr	r0, [pc, #4]	; (801a7cc <__env_unlock+0x8>)
 801a7c6:	f7ff bfc1 	b.w	801a74c <__retarget_lock_release_recursive>
 801a7ca:	bf00      	nop
 801a7cc:	2000a1c0 	.word	0x2000a1c0

0801a7d0 <_free_r>:
 801a7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a7d2:	2900      	cmp	r1, #0
 801a7d4:	d044      	beq.n	801a860 <_free_r+0x90>
 801a7d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a7da:	9001      	str	r0, [sp, #4]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	f1a1 0404 	sub.w	r4, r1, #4
 801a7e2:	bfb8      	it	lt
 801a7e4:	18e4      	addlt	r4, r4, r3
 801a7e6:	f7ff fa8d 	bl	8019d04 <__malloc_lock>
 801a7ea:	4a1e      	ldr	r2, [pc, #120]	; (801a864 <_free_r+0x94>)
 801a7ec:	9801      	ldr	r0, [sp, #4]
 801a7ee:	6813      	ldr	r3, [r2, #0]
 801a7f0:	b933      	cbnz	r3, 801a800 <_free_r+0x30>
 801a7f2:	6063      	str	r3, [r4, #4]
 801a7f4:	6014      	str	r4, [r2, #0]
 801a7f6:	b003      	add	sp, #12
 801a7f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a7fc:	f7ff ba88 	b.w	8019d10 <__malloc_unlock>
 801a800:	42a3      	cmp	r3, r4
 801a802:	d908      	bls.n	801a816 <_free_r+0x46>
 801a804:	6825      	ldr	r5, [r4, #0]
 801a806:	1961      	adds	r1, r4, r5
 801a808:	428b      	cmp	r3, r1
 801a80a:	bf01      	itttt	eq
 801a80c:	6819      	ldreq	r1, [r3, #0]
 801a80e:	685b      	ldreq	r3, [r3, #4]
 801a810:	1949      	addeq	r1, r1, r5
 801a812:	6021      	streq	r1, [r4, #0]
 801a814:	e7ed      	b.n	801a7f2 <_free_r+0x22>
 801a816:	461a      	mov	r2, r3
 801a818:	685b      	ldr	r3, [r3, #4]
 801a81a:	b10b      	cbz	r3, 801a820 <_free_r+0x50>
 801a81c:	42a3      	cmp	r3, r4
 801a81e:	d9fa      	bls.n	801a816 <_free_r+0x46>
 801a820:	6811      	ldr	r1, [r2, #0]
 801a822:	1855      	adds	r5, r2, r1
 801a824:	42a5      	cmp	r5, r4
 801a826:	d10b      	bne.n	801a840 <_free_r+0x70>
 801a828:	6824      	ldr	r4, [r4, #0]
 801a82a:	4421      	add	r1, r4
 801a82c:	1854      	adds	r4, r2, r1
 801a82e:	42a3      	cmp	r3, r4
 801a830:	6011      	str	r1, [r2, #0]
 801a832:	d1e0      	bne.n	801a7f6 <_free_r+0x26>
 801a834:	681c      	ldr	r4, [r3, #0]
 801a836:	685b      	ldr	r3, [r3, #4]
 801a838:	6053      	str	r3, [r2, #4]
 801a83a:	440c      	add	r4, r1
 801a83c:	6014      	str	r4, [r2, #0]
 801a83e:	e7da      	b.n	801a7f6 <_free_r+0x26>
 801a840:	d902      	bls.n	801a848 <_free_r+0x78>
 801a842:	230c      	movs	r3, #12
 801a844:	6003      	str	r3, [r0, #0]
 801a846:	e7d6      	b.n	801a7f6 <_free_r+0x26>
 801a848:	6825      	ldr	r5, [r4, #0]
 801a84a:	1961      	adds	r1, r4, r5
 801a84c:	428b      	cmp	r3, r1
 801a84e:	bf04      	itt	eq
 801a850:	6819      	ldreq	r1, [r3, #0]
 801a852:	685b      	ldreq	r3, [r3, #4]
 801a854:	6063      	str	r3, [r4, #4]
 801a856:	bf04      	itt	eq
 801a858:	1949      	addeq	r1, r1, r5
 801a85a:	6021      	streq	r1, [r4, #0]
 801a85c:	6054      	str	r4, [r2, #4]
 801a85e:	e7ca      	b.n	801a7f6 <_free_r+0x26>
 801a860:	b003      	add	sp, #12
 801a862:	bd30      	pop	{r4, r5, pc}
 801a864:	2000a078 	.word	0x2000a078

0801a868 <_malloc_usable_size_r>:
 801a868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a86c:	1f18      	subs	r0, r3, #4
 801a86e:	2b00      	cmp	r3, #0
 801a870:	bfbc      	itt	lt
 801a872:	580b      	ldrlt	r3, [r1, r0]
 801a874:	18c0      	addlt	r0, r0, r3
 801a876:	4770      	bx	lr

0801a878 <__ssputs_r>:
 801a878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a87c:	688e      	ldr	r6, [r1, #8]
 801a87e:	461f      	mov	r7, r3
 801a880:	42be      	cmp	r6, r7
 801a882:	680b      	ldr	r3, [r1, #0]
 801a884:	4682      	mov	sl, r0
 801a886:	460c      	mov	r4, r1
 801a888:	4690      	mov	r8, r2
 801a88a:	d82c      	bhi.n	801a8e6 <__ssputs_r+0x6e>
 801a88c:	898a      	ldrh	r2, [r1, #12]
 801a88e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a892:	d026      	beq.n	801a8e2 <__ssputs_r+0x6a>
 801a894:	6965      	ldr	r5, [r4, #20]
 801a896:	6909      	ldr	r1, [r1, #16]
 801a898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a89c:	eba3 0901 	sub.w	r9, r3, r1
 801a8a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a8a4:	1c7b      	adds	r3, r7, #1
 801a8a6:	444b      	add	r3, r9
 801a8a8:	106d      	asrs	r5, r5, #1
 801a8aa:	429d      	cmp	r5, r3
 801a8ac:	bf38      	it	cc
 801a8ae:	461d      	movcc	r5, r3
 801a8b0:	0553      	lsls	r3, r2, #21
 801a8b2:	d527      	bpl.n	801a904 <__ssputs_r+0x8c>
 801a8b4:	4629      	mov	r1, r5
 801a8b6:	f7ff f9a5 	bl	8019c04 <_malloc_r>
 801a8ba:	4606      	mov	r6, r0
 801a8bc:	b360      	cbz	r0, 801a918 <__ssputs_r+0xa0>
 801a8be:	6921      	ldr	r1, [r4, #16]
 801a8c0:	464a      	mov	r2, r9
 801a8c2:	f7ff ff4c 	bl	801a75e <memcpy>
 801a8c6:	89a3      	ldrh	r3, [r4, #12]
 801a8c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a8d0:	81a3      	strh	r3, [r4, #12]
 801a8d2:	6126      	str	r6, [r4, #16]
 801a8d4:	6165      	str	r5, [r4, #20]
 801a8d6:	444e      	add	r6, r9
 801a8d8:	eba5 0509 	sub.w	r5, r5, r9
 801a8dc:	6026      	str	r6, [r4, #0]
 801a8de:	60a5      	str	r5, [r4, #8]
 801a8e0:	463e      	mov	r6, r7
 801a8e2:	42be      	cmp	r6, r7
 801a8e4:	d900      	bls.n	801a8e8 <__ssputs_r+0x70>
 801a8e6:	463e      	mov	r6, r7
 801a8e8:	6820      	ldr	r0, [r4, #0]
 801a8ea:	4632      	mov	r2, r6
 801a8ec:	4641      	mov	r1, r8
 801a8ee:	f7ff fdfd 	bl	801a4ec <memmove>
 801a8f2:	68a3      	ldr	r3, [r4, #8]
 801a8f4:	1b9b      	subs	r3, r3, r6
 801a8f6:	60a3      	str	r3, [r4, #8]
 801a8f8:	6823      	ldr	r3, [r4, #0]
 801a8fa:	4433      	add	r3, r6
 801a8fc:	6023      	str	r3, [r4, #0]
 801a8fe:	2000      	movs	r0, #0
 801a900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a904:	462a      	mov	r2, r5
 801a906:	f7ff fa7d 	bl	8019e04 <_realloc_r>
 801a90a:	4606      	mov	r6, r0
 801a90c:	2800      	cmp	r0, #0
 801a90e:	d1e0      	bne.n	801a8d2 <__ssputs_r+0x5a>
 801a910:	6921      	ldr	r1, [r4, #16]
 801a912:	4650      	mov	r0, sl
 801a914:	f7ff ff5c 	bl	801a7d0 <_free_r>
 801a918:	230c      	movs	r3, #12
 801a91a:	f8ca 3000 	str.w	r3, [sl]
 801a91e:	89a3      	ldrh	r3, [r4, #12]
 801a920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a924:	81a3      	strh	r3, [r4, #12]
 801a926:	f04f 30ff 	mov.w	r0, #4294967295
 801a92a:	e7e9      	b.n	801a900 <__ssputs_r+0x88>

0801a92c <_svfiprintf_r>:
 801a92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a930:	4698      	mov	r8, r3
 801a932:	898b      	ldrh	r3, [r1, #12]
 801a934:	061b      	lsls	r3, r3, #24
 801a936:	b09d      	sub	sp, #116	; 0x74
 801a938:	4607      	mov	r7, r0
 801a93a:	460d      	mov	r5, r1
 801a93c:	4614      	mov	r4, r2
 801a93e:	d50e      	bpl.n	801a95e <_svfiprintf_r+0x32>
 801a940:	690b      	ldr	r3, [r1, #16]
 801a942:	b963      	cbnz	r3, 801a95e <_svfiprintf_r+0x32>
 801a944:	2140      	movs	r1, #64	; 0x40
 801a946:	f7ff f95d 	bl	8019c04 <_malloc_r>
 801a94a:	6028      	str	r0, [r5, #0]
 801a94c:	6128      	str	r0, [r5, #16]
 801a94e:	b920      	cbnz	r0, 801a95a <_svfiprintf_r+0x2e>
 801a950:	230c      	movs	r3, #12
 801a952:	603b      	str	r3, [r7, #0]
 801a954:	f04f 30ff 	mov.w	r0, #4294967295
 801a958:	e0d0      	b.n	801aafc <_svfiprintf_r+0x1d0>
 801a95a:	2340      	movs	r3, #64	; 0x40
 801a95c:	616b      	str	r3, [r5, #20]
 801a95e:	2300      	movs	r3, #0
 801a960:	9309      	str	r3, [sp, #36]	; 0x24
 801a962:	2320      	movs	r3, #32
 801a964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a968:	f8cd 800c 	str.w	r8, [sp, #12]
 801a96c:	2330      	movs	r3, #48	; 0x30
 801a96e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801ab14 <_svfiprintf_r+0x1e8>
 801a972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a976:	f04f 0901 	mov.w	r9, #1
 801a97a:	4623      	mov	r3, r4
 801a97c:	469a      	mov	sl, r3
 801a97e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a982:	b10a      	cbz	r2, 801a988 <_svfiprintf_r+0x5c>
 801a984:	2a25      	cmp	r2, #37	; 0x25
 801a986:	d1f9      	bne.n	801a97c <_svfiprintf_r+0x50>
 801a988:	ebba 0b04 	subs.w	fp, sl, r4
 801a98c:	d00b      	beq.n	801a9a6 <_svfiprintf_r+0x7a>
 801a98e:	465b      	mov	r3, fp
 801a990:	4622      	mov	r2, r4
 801a992:	4629      	mov	r1, r5
 801a994:	4638      	mov	r0, r7
 801a996:	f7ff ff6f 	bl	801a878 <__ssputs_r>
 801a99a:	3001      	adds	r0, #1
 801a99c:	f000 80a9 	beq.w	801aaf2 <_svfiprintf_r+0x1c6>
 801a9a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a9a2:	445a      	add	r2, fp
 801a9a4:	9209      	str	r2, [sp, #36]	; 0x24
 801a9a6:	f89a 3000 	ldrb.w	r3, [sl]
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	f000 80a1 	beq.w	801aaf2 <_svfiprintf_r+0x1c6>
 801a9b0:	2300      	movs	r3, #0
 801a9b2:	f04f 32ff 	mov.w	r2, #4294967295
 801a9b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a9ba:	f10a 0a01 	add.w	sl, sl, #1
 801a9be:	9304      	str	r3, [sp, #16]
 801a9c0:	9307      	str	r3, [sp, #28]
 801a9c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a9c6:	931a      	str	r3, [sp, #104]	; 0x68
 801a9c8:	4654      	mov	r4, sl
 801a9ca:	2205      	movs	r2, #5
 801a9cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9d0:	4850      	ldr	r0, [pc, #320]	; (801ab14 <_svfiprintf_r+0x1e8>)
 801a9d2:	f7e5 fc1d 	bl	8000210 <memchr>
 801a9d6:	9a04      	ldr	r2, [sp, #16]
 801a9d8:	b9d8      	cbnz	r0, 801aa12 <_svfiprintf_r+0xe6>
 801a9da:	06d0      	lsls	r0, r2, #27
 801a9dc:	bf44      	itt	mi
 801a9de:	2320      	movmi	r3, #32
 801a9e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9e4:	0711      	lsls	r1, r2, #28
 801a9e6:	bf44      	itt	mi
 801a9e8:	232b      	movmi	r3, #43	; 0x2b
 801a9ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9ee:	f89a 3000 	ldrb.w	r3, [sl]
 801a9f2:	2b2a      	cmp	r3, #42	; 0x2a
 801a9f4:	d015      	beq.n	801aa22 <_svfiprintf_r+0xf6>
 801a9f6:	9a07      	ldr	r2, [sp, #28]
 801a9f8:	4654      	mov	r4, sl
 801a9fa:	2000      	movs	r0, #0
 801a9fc:	f04f 0c0a 	mov.w	ip, #10
 801aa00:	4621      	mov	r1, r4
 801aa02:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa06:	3b30      	subs	r3, #48	; 0x30
 801aa08:	2b09      	cmp	r3, #9
 801aa0a:	d94d      	bls.n	801aaa8 <_svfiprintf_r+0x17c>
 801aa0c:	b1b0      	cbz	r0, 801aa3c <_svfiprintf_r+0x110>
 801aa0e:	9207      	str	r2, [sp, #28]
 801aa10:	e014      	b.n	801aa3c <_svfiprintf_r+0x110>
 801aa12:	eba0 0308 	sub.w	r3, r0, r8
 801aa16:	fa09 f303 	lsl.w	r3, r9, r3
 801aa1a:	4313      	orrs	r3, r2
 801aa1c:	9304      	str	r3, [sp, #16]
 801aa1e:	46a2      	mov	sl, r4
 801aa20:	e7d2      	b.n	801a9c8 <_svfiprintf_r+0x9c>
 801aa22:	9b03      	ldr	r3, [sp, #12]
 801aa24:	1d19      	adds	r1, r3, #4
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	9103      	str	r1, [sp, #12]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	bfbb      	ittet	lt
 801aa2e:	425b      	neglt	r3, r3
 801aa30:	f042 0202 	orrlt.w	r2, r2, #2
 801aa34:	9307      	strge	r3, [sp, #28]
 801aa36:	9307      	strlt	r3, [sp, #28]
 801aa38:	bfb8      	it	lt
 801aa3a:	9204      	strlt	r2, [sp, #16]
 801aa3c:	7823      	ldrb	r3, [r4, #0]
 801aa3e:	2b2e      	cmp	r3, #46	; 0x2e
 801aa40:	d10c      	bne.n	801aa5c <_svfiprintf_r+0x130>
 801aa42:	7863      	ldrb	r3, [r4, #1]
 801aa44:	2b2a      	cmp	r3, #42	; 0x2a
 801aa46:	d134      	bne.n	801aab2 <_svfiprintf_r+0x186>
 801aa48:	9b03      	ldr	r3, [sp, #12]
 801aa4a:	1d1a      	adds	r2, r3, #4
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	9203      	str	r2, [sp, #12]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	bfb8      	it	lt
 801aa54:	f04f 33ff 	movlt.w	r3, #4294967295
 801aa58:	3402      	adds	r4, #2
 801aa5a:	9305      	str	r3, [sp, #20]
 801aa5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801ab24 <_svfiprintf_r+0x1f8>
 801aa60:	7821      	ldrb	r1, [r4, #0]
 801aa62:	2203      	movs	r2, #3
 801aa64:	4650      	mov	r0, sl
 801aa66:	f7e5 fbd3 	bl	8000210 <memchr>
 801aa6a:	b138      	cbz	r0, 801aa7c <_svfiprintf_r+0x150>
 801aa6c:	9b04      	ldr	r3, [sp, #16]
 801aa6e:	eba0 000a 	sub.w	r0, r0, sl
 801aa72:	2240      	movs	r2, #64	; 0x40
 801aa74:	4082      	lsls	r2, r0
 801aa76:	4313      	orrs	r3, r2
 801aa78:	3401      	adds	r4, #1
 801aa7a:	9304      	str	r3, [sp, #16]
 801aa7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa80:	4825      	ldr	r0, [pc, #148]	; (801ab18 <_svfiprintf_r+0x1ec>)
 801aa82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa86:	2206      	movs	r2, #6
 801aa88:	f7e5 fbc2 	bl	8000210 <memchr>
 801aa8c:	2800      	cmp	r0, #0
 801aa8e:	d038      	beq.n	801ab02 <_svfiprintf_r+0x1d6>
 801aa90:	4b22      	ldr	r3, [pc, #136]	; (801ab1c <_svfiprintf_r+0x1f0>)
 801aa92:	bb1b      	cbnz	r3, 801aadc <_svfiprintf_r+0x1b0>
 801aa94:	9b03      	ldr	r3, [sp, #12]
 801aa96:	3307      	adds	r3, #7
 801aa98:	f023 0307 	bic.w	r3, r3, #7
 801aa9c:	3308      	adds	r3, #8
 801aa9e:	9303      	str	r3, [sp, #12]
 801aaa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaa2:	4433      	add	r3, r6
 801aaa4:	9309      	str	r3, [sp, #36]	; 0x24
 801aaa6:	e768      	b.n	801a97a <_svfiprintf_r+0x4e>
 801aaa8:	fb0c 3202 	mla	r2, ip, r2, r3
 801aaac:	460c      	mov	r4, r1
 801aaae:	2001      	movs	r0, #1
 801aab0:	e7a6      	b.n	801aa00 <_svfiprintf_r+0xd4>
 801aab2:	2300      	movs	r3, #0
 801aab4:	3401      	adds	r4, #1
 801aab6:	9305      	str	r3, [sp, #20]
 801aab8:	4619      	mov	r1, r3
 801aaba:	f04f 0c0a 	mov.w	ip, #10
 801aabe:	4620      	mov	r0, r4
 801aac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aac4:	3a30      	subs	r2, #48	; 0x30
 801aac6:	2a09      	cmp	r2, #9
 801aac8:	d903      	bls.n	801aad2 <_svfiprintf_r+0x1a6>
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d0c6      	beq.n	801aa5c <_svfiprintf_r+0x130>
 801aace:	9105      	str	r1, [sp, #20]
 801aad0:	e7c4      	b.n	801aa5c <_svfiprintf_r+0x130>
 801aad2:	fb0c 2101 	mla	r1, ip, r1, r2
 801aad6:	4604      	mov	r4, r0
 801aad8:	2301      	movs	r3, #1
 801aada:	e7f0      	b.n	801aabe <_svfiprintf_r+0x192>
 801aadc:	ab03      	add	r3, sp, #12
 801aade:	9300      	str	r3, [sp, #0]
 801aae0:	462a      	mov	r2, r5
 801aae2:	4b0f      	ldr	r3, [pc, #60]	; (801ab20 <_svfiprintf_r+0x1f4>)
 801aae4:	a904      	add	r1, sp, #16
 801aae6:	4638      	mov	r0, r7
 801aae8:	f3af 8000 	nop.w
 801aaec:	1c42      	adds	r2, r0, #1
 801aaee:	4606      	mov	r6, r0
 801aaf0:	d1d6      	bne.n	801aaa0 <_svfiprintf_r+0x174>
 801aaf2:	89ab      	ldrh	r3, [r5, #12]
 801aaf4:	065b      	lsls	r3, r3, #25
 801aaf6:	f53f af2d 	bmi.w	801a954 <_svfiprintf_r+0x28>
 801aafa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aafc:	b01d      	add	sp, #116	; 0x74
 801aafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab02:	ab03      	add	r3, sp, #12
 801ab04:	9300      	str	r3, [sp, #0]
 801ab06:	462a      	mov	r2, r5
 801ab08:	4b05      	ldr	r3, [pc, #20]	; (801ab20 <_svfiprintf_r+0x1f4>)
 801ab0a:	a904      	add	r1, sp, #16
 801ab0c:	4638      	mov	r0, r7
 801ab0e:	f000 f9bd 	bl	801ae8c <_printf_i>
 801ab12:	e7eb      	b.n	801aaec <_svfiprintf_r+0x1c0>
 801ab14:	0801c314 	.word	0x0801c314
 801ab18:	0801c31e 	.word	0x0801c31e
 801ab1c:	00000000 	.word	0x00000000
 801ab20:	0801a879 	.word	0x0801a879
 801ab24:	0801c31a 	.word	0x0801c31a

0801ab28 <__sfputc_r>:
 801ab28:	6893      	ldr	r3, [r2, #8]
 801ab2a:	3b01      	subs	r3, #1
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	b410      	push	{r4}
 801ab30:	6093      	str	r3, [r2, #8]
 801ab32:	da08      	bge.n	801ab46 <__sfputc_r+0x1e>
 801ab34:	6994      	ldr	r4, [r2, #24]
 801ab36:	42a3      	cmp	r3, r4
 801ab38:	db01      	blt.n	801ab3e <__sfputc_r+0x16>
 801ab3a:	290a      	cmp	r1, #10
 801ab3c:	d103      	bne.n	801ab46 <__sfputc_r+0x1e>
 801ab3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab42:	f7ff bc3d 	b.w	801a3c0 <__swbuf_r>
 801ab46:	6813      	ldr	r3, [r2, #0]
 801ab48:	1c58      	adds	r0, r3, #1
 801ab4a:	6010      	str	r0, [r2, #0]
 801ab4c:	7019      	strb	r1, [r3, #0]
 801ab4e:	4608      	mov	r0, r1
 801ab50:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab54:	4770      	bx	lr

0801ab56 <__sfputs_r>:
 801ab56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab58:	4606      	mov	r6, r0
 801ab5a:	460f      	mov	r7, r1
 801ab5c:	4614      	mov	r4, r2
 801ab5e:	18d5      	adds	r5, r2, r3
 801ab60:	42ac      	cmp	r4, r5
 801ab62:	d101      	bne.n	801ab68 <__sfputs_r+0x12>
 801ab64:	2000      	movs	r0, #0
 801ab66:	e007      	b.n	801ab78 <__sfputs_r+0x22>
 801ab68:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab6c:	463a      	mov	r2, r7
 801ab6e:	4630      	mov	r0, r6
 801ab70:	f7ff ffda 	bl	801ab28 <__sfputc_r>
 801ab74:	1c43      	adds	r3, r0, #1
 801ab76:	d1f3      	bne.n	801ab60 <__sfputs_r+0xa>
 801ab78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ab7c <_vfiprintf_r>:
 801ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab80:	460d      	mov	r5, r1
 801ab82:	b09d      	sub	sp, #116	; 0x74
 801ab84:	4614      	mov	r4, r2
 801ab86:	4698      	mov	r8, r3
 801ab88:	4606      	mov	r6, r0
 801ab8a:	b118      	cbz	r0, 801ab94 <_vfiprintf_r+0x18>
 801ab8c:	6a03      	ldr	r3, [r0, #32]
 801ab8e:	b90b      	cbnz	r3, 801ab94 <_vfiprintf_r+0x18>
 801ab90:	f7ff fa70 	bl	801a074 <__sinit>
 801ab94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab96:	07d9      	lsls	r1, r3, #31
 801ab98:	d405      	bmi.n	801aba6 <_vfiprintf_r+0x2a>
 801ab9a:	89ab      	ldrh	r3, [r5, #12]
 801ab9c:	059a      	lsls	r2, r3, #22
 801ab9e:	d402      	bmi.n	801aba6 <_vfiprintf_r+0x2a>
 801aba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aba2:	f7ff fdd2 	bl	801a74a <__retarget_lock_acquire_recursive>
 801aba6:	89ab      	ldrh	r3, [r5, #12]
 801aba8:	071b      	lsls	r3, r3, #28
 801abaa:	d501      	bpl.n	801abb0 <_vfiprintf_r+0x34>
 801abac:	692b      	ldr	r3, [r5, #16]
 801abae:	b99b      	cbnz	r3, 801abd8 <_vfiprintf_r+0x5c>
 801abb0:	4629      	mov	r1, r5
 801abb2:	4630      	mov	r0, r6
 801abb4:	f7ff fc42 	bl	801a43c <__swsetup_r>
 801abb8:	b170      	cbz	r0, 801abd8 <_vfiprintf_r+0x5c>
 801abba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801abbc:	07dc      	lsls	r4, r3, #31
 801abbe:	d504      	bpl.n	801abca <_vfiprintf_r+0x4e>
 801abc0:	f04f 30ff 	mov.w	r0, #4294967295
 801abc4:	b01d      	add	sp, #116	; 0x74
 801abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abca:	89ab      	ldrh	r3, [r5, #12]
 801abcc:	0598      	lsls	r0, r3, #22
 801abce:	d4f7      	bmi.n	801abc0 <_vfiprintf_r+0x44>
 801abd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801abd2:	f7ff fdbb 	bl	801a74c <__retarget_lock_release_recursive>
 801abd6:	e7f3      	b.n	801abc0 <_vfiprintf_r+0x44>
 801abd8:	2300      	movs	r3, #0
 801abda:	9309      	str	r3, [sp, #36]	; 0x24
 801abdc:	2320      	movs	r3, #32
 801abde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801abe2:	f8cd 800c 	str.w	r8, [sp, #12]
 801abe6:	2330      	movs	r3, #48	; 0x30
 801abe8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ad9c <_vfiprintf_r+0x220>
 801abec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801abf0:	f04f 0901 	mov.w	r9, #1
 801abf4:	4623      	mov	r3, r4
 801abf6:	469a      	mov	sl, r3
 801abf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abfc:	b10a      	cbz	r2, 801ac02 <_vfiprintf_r+0x86>
 801abfe:	2a25      	cmp	r2, #37	; 0x25
 801ac00:	d1f9      	bne.n	801abf6 <_vfiprintf_r+0x7a>
 801ac02:	ebba 0b04 	subs.w	fp, sl, r4
 801ac06:	d00b      	beq.n	801ac20 <_vfiprintf_r+0xa4>
 801ac08:	465b      	mov	r3, fp
 801ac0a:	4622      	mov	r2, r4
 801ac0c:	4629      	mov	r1, r5
 801ac0e:	4630      	mov	r0, r6
 801ac10:	f7ff ffa1 	bl	801ab56 <__sfputs_r>
 801ac14:	3001      	adds	r0, #1
 801ac16:	f000 80a9 	beq.w	801ad6c <_vfiprintf_r+0x1f0>
 801ac1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac1c:	445a      	add	r2, fp
 801ac1e:	9209      	str	r2, [sp, #36]	; 0x24
 801ac20:	f89a 3000 	ldrb.w	r3, [sl]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	f000 80a1 	beq.w	801ad6c <_vfiprintf_r+0x1f0>
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	f04f 32ff 	mov.w	r2, #4294967295
 801ac30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac34:	f10a 0a01 	add.w	sl, sl, #1
 801ac38:	9304      	str	r3, [sp, #16]
 801ac3a:	9307      	str	r3, [sp, #28]
 801ac3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ac40:	931a      	str	r3, [sp, #104]	; 0x68
 801ac42:	4654      	mov	r4, sl
 801ac44:	2205      	movs	r2, #5
 801ac46:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac4a:	4854      	ldr	r0, [pc, #336]	; (801ad9c <_vfiprintf_r+0x220>)
 801ac4c:	f7e5 fae0 	bl	8000210 <memchr>
 801ac50:	9a04      	ldr	r2, [sp, #16]
 801ac52:	b9d8      	cbnz	r0, 801ac8c <_vfiprintf_r+0x110>
 801ac54:	06d1      	lsls	r1, r2, #27
 801ac56:	bf44      	itt	mi
 801ac58:	2320      	movmi	r3, #32
 801ac5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac5e:	0713      	lsls	r3, r2, #28
 801ac60:	bf44      	itt	mi
 801ac62:	232b      	movmi	r3, #43	; 0x2b
 801ac64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac68:	f89a 3000 	ldrb.w	r3, [sl]
 801ac6c:	2b2a      	cmp	r3, #42	; 0x2a
 801ac6e:	d015      	beq.n	801ac9c <_vfiprintf_r+0x120>
 801ac70:	9a07      	ldr	r2, [sp, #28]
 801ac72:	4654      	mov	r4, sl
 801ac74:	2000      	movs	r0, #0
 801ac76:	f04f 0c0a 	mov.w	ip, #10
 801ac7a:	4621      	mov	r1, r4
 801ac7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac80:	3b30      	subs	r3, #48	; 0x30
 801ac82:	2b09      	cmp	r3, #9
 801ac84:	d94d      	bls.n	801ad22 <_vfiprintf_r+0x1a6>
 801ac86:	b1b0      	cbz	r0, 801acb6 <_vfiprintf_r+0x13a>
 801ac88:	9207      	str	r2, [sp, #28]
 801ac8a:	e014      	b.n	801acb6 <_vfiprintf_r+0x13a>
 801ac8c:	eba0 0308 	sub.w	r3, r0, r8
 801ac90:	fa09 f303 	lsl.w	r3, r9, r3
 801ac94:	4313      	orrs	r3, r2
 801ac96:	9304      	str	r3, [sp, #16]
 801ac98:	46a2      	mov	sl, r4
 801ac9a:	e7d2      	b.n	801ac42 <_vfiprintf_r+0xc6>
 801ac9c:	9b03      	ldr	r3, [sp, #12]
 801ac9e:	1d19      	adds	r1, r3, #4
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	9103      	str	r1, [sp, #12]
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	bfbb      	ittet	lt
 801aca8:	425b      	neglt	r3, r3
 801acaa:	f042 0202 	orrlt.w	r2, r2, #2
 801acae:	9307      	strge	r3, [sp, #28]
 801acb0:	9307      	strlt	r3, [sp, #28]
 801acb2:	bfb8      	it	lt
 801acb4:	9204      	strlt	r2, [sp, #16]
 801acb6:	7823      	ldrb	r3, [r4, #0]
 801acb8:	2b2e      	cmp	r3, #46	; 0x2e
 801acba:	d10c      	bne.n	801acd6 <_vfiprintf_r+0x15a>
 801acbc:	7863      	ldrb	r3, [r4, #1]
 801acbe:	2b2a      	cmp	r3, #42	; 0x2a
 801acc0:	d134      	bne.n	801ad2c <_vfiprintf_r+0x1b0>
 801acc2:	9b03      	ldr	r3, [sp, #12]
 801acc4:	1d1a      	adds	r2, r3, #4
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	9203      	str	r2, [sp, #12]
 801acca:	2b00      	cmp	r3, #0
 801accc:	bfb8      	it	lt
 801acce:	f04f 33ff 	movlt.w	r3, #4294967295
 801acd2:	3402      	adds	r4, #2
 801acd4:	9305      	str	r3, [sp, #20]
 801acd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801adac <_vfiprintf_r+0x230>
 801acda:	7821      	ldrb	r1, [r4, #0]
 801acdc:	2203      	movs	r2, #3
 801acde:	4650      	mov	r0, sl
 801ace0:	f7e5 fa96 	bl	8000210 <memchr>
 801ace4:	b138      	cbz	r0, 801acf6 <_vfiprintf_r+0x17a>
 801ace6:	9b04      	ldr	r3, [sp, #16]
 801ace8:	eba0 000a 	sub.w	r0, r0, sl
 801acec:	2240      	movs	r2, #64	; 0x40
 801acee:	4082      	lsls	r2, r0
 801acf0:	4313      	orrs	r3, r2
 801acf2:	3401      	adds	r4, #1
 801acf4:	9304      	str	r3, [sp, #16]
 801acf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acfa:	4829      	ldr	r0, [pc, #164]	; (801ada0 <_vfiprintf_r+0x224>)
 801acfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ad00:	2206      	movs	r2, #6
 801ad02:	f7e5 fa85 	bl	8000210 <memchr>
 801ad06:	2800      	cmp	r0, #0
 801ad08:	d03f      	beq.n	801ad8a <_vfiprintf_r+0x20e>
 801ad0a:	4b26      	ldr	r3, [pc, #152]	; (801ada4 <_vfiprintf_r+0x228>)
 801ad0c:	bb1b      	cbnz	r3, 801ad56 <_vfiprintf_r+0x1da>
 801ad0e:	9b03      	ldr	r3, [sp, #12]
 801ad10:	3307      	adds	r3, #7
 801ad12:	f023 0307 	bic.w	r3, r3, #7
 801ad16:	3308      	adds	r3, #8
 801ad18:	9303      	str	r3, [sp, #12]
 801ad1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad1c:	443b      	add	r3, r7
 801ad1e:	9309      	str	r3, [sp, #36]	; 0x24
 801ad20:	e768      	b.n	801abf4 <_vfiprintf_r+0x78>
 801ad22:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad26:	460c      	mov	r4, r1
 801ad28:	2001      	movs	r0, #1
 801ad2a:	e7a6      	b.n	801ac7a <_vfiprintf_r+0xfe>
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	3401      	adds	r4, #1
 801ad30:	9305      	str	r3, [sp, #20]
 801ad32:	4619      	mov	r1, r3
 801ad34:	f04f 0c0a 	mov.w	ip, #10
 801ad38:	4620      	mov	r0, r4
 801ad3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad3e:	3a30      	subs	r2, #48	; 0x30
 801ad40:	2a09      	cmp	r2, #9
 801ad42:	d903      	bls.n	801ad4c <_vfiprintf_r+0x1d0>
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d0c6      	beq.n	801acd6 <_vfiprintf_r+0x15a>
 801ad48:	9105      	str	r1, [sp, #20]
 801ad4a:	e7c4      	b.n	801acd6 <_vfiprintf_r+0x15a>
 801ad4c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad50:	4604      	mov	r4, r0
 801ad52:	2301      	movs	r3, #1
 801ad54:	e7f0      	b.n	801ad38 <_vfiprintf_r+0x1bc>
 801ad56:	ab03      	add	r3, sp, #12
 801ad58:	9300      	str	r3, [sp, #0]
 801ad5a:	462a      	mov	r2, r5
 801ad5c:	4b12      	ldr	r3, [pc, #72]	; (801ada8 <_vfiprintf_r+0x22c>)
 801ad5e:	a904      	add	r1, sp, #16
 801ad60:	4630      	mov	r0, r6
 801ad62:	f3af 8000 	nop.w
 801ad66:	4607      	mov	r7, r0
 801ad68:	1c78      	adds	r0, r7, #1
 801ad6a:	d1d6      	bne.n	801ad1a <_vfiprintf_r+0x19e>
 801ad6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad6e:	07d9      	lsls	r1, r3, #31
 801ad70:	d405      	bmi.n	801ad7e <_vfiprintf_r+0x202>
 801ad72:	89ab      	ldrh	r3, [r5, #12]
 801ad74:	059a      	lsls	r2, r3, #22
 801ad76:	d402      	bmi.n	801ad7e <_vfiprintf_r+0x202>
 801ad78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad7a:	f7ff fce7 	bl	801a74c <__retarget_lock_release_recursive>
 801ad7e:	89ab      	ldrh	r3, [r5, #12]
 801ad80:	065b      	lsls	r3, r3, #25
 801ad82:	f53f af1d 	bmi.w	801abc0 <_vfiprintf_r+0x44>
 801ad86:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ad88:	e71c      	b.n	801abc4 <_vfiprintf_r+0x48>
 801ad8a:	ab03      	add	r3, sp, #12
 801ad8c:	9300      	str	r3, [sp, #0]
 801ad8e:	462a      	mov	r2, r5
 801ad90:	4b05      	ldr	r3, [pc, #20]	; (801ada8 <_vfiprintf_r+0x22c>)
 801ad92:	a904      	add	r1, sp, #16
 801ad94:	4630      	mov	r0, r6
 801ad96:	f000 f879 	bl	801ae8c <_printf_i>
 801ad9a:	e7e4      	b.n	801ad66 <_vfiprintf_r+0x1ea>
 801ad9c:	0801c314 	.word	0x0801c314
 801ada0:	0801c31e 	.word	0x0801c31e
 801ada4:	00000000 	.word	0x00000000
 801ada8:	0801ab57 	.word	0x0801ab57
 801adac:	0801c31a 	.word	0x0801c31a

0801adb0 <_printf_common>:
 801adb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801adb4:	4616      	mov	r6, r2
 801adb6:	4699      	mov	r9, r3
 801adb8:	688a      	ldr	r2, [r1, #8]
 801adba:	690b      	ldr	r3, [r1, #16]
 801adbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801adc0:	4293      	cmp	r3, r2
 801adc2:	bfb8      	it	lt
 801adc4:	4613      	movlt	r3, r2
 801adc6:	6033      	str	r3, [r6, #0]
 801adc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801adcc:	4607      	mov	r7, r0
 801adce:	460c      	mov	r4, r1
 801add0:	b10a      	cbz	r2, 801add6 <_printf_common+0x26>
 801add2:	3301      	adds	r3, #1
 801add4:	6033      	str	r3, [r6, #0]
 801add6:	6823      	ldr	r3, [r4, #0]
 801add8:	0699      	lsls	r1, r3, #26
 801adda:	bf42      	ittt	mi
 801addc:	6833      	ldrmi	r3, [r6, #0]
 801adde:	3302      	addmi	r3, #2
 801ade0:	6033      	strmi	r3, [r6, #0]
 801ade2:	6825      	ldr	r5, [r4, #0]
 801ade4:	f015 0506 	ands.w	r5, r5, #6
 801ade8:	d106      	bne.n	801adf8 <_printf_common+0x48>
 801adea:	f104 0a19 	add.w	sl, r4, #25
 801adee:	68e3      	ldr	r3, [r4, #12]
 801adf0:	6832      	ldr	r2, [r6, #0]
 801adf2:	1a9b      	subs	r3, r3, r2
 801adf4:	42ab      	cmp	r3, r5
 801adf6:	dc26      	bgt.n	801ae46 <_printf_common+0x96>
 801adf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801adfc:	1e13      	subs	r3, r2, #0
 801adfe:	6822      	ldr	r2, [r4, #0]
 801ae00:	bf18      	it	ne
 801ae02:	2301      	movne	r3, #1
 801ae04:	0692      	lsls	r2, r2, #26
 801ae06:	d42b      	bmi.n	801ae60 <_printf_common+0xb0>
 801ae08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae0c:	4649      	mov	r1, r9
 801ae0e:	4638      	mov	r0, r7
 801ae10:	47c0      	blx	r8
 801ae12:	3001      	adds	r0, #1
 801ae14:	d01e      	beq.n	801ae54 <_printf_common+0xa4>
 801ae16:	6823      	ldr	r3, [r4, #0]
 801ae18:	6922      	ldr	r2, [r4, #16]
 801ae1a:	f003 0306 	and.w	r3, r3, #6
 801ae1e:	2b04      	cmp	r3, #4
 801ae20:	bf02      	ittt	eq
 801ae22:	68e5      	ldreq	r5, [r4, #12]
 801ae24:	6833      	ldreq	r3, [r6, #0]
 801ae26:	1aed      	subeq	r5, r5, r3
 801ae28:	68a3      	ldr	r3, [r4, #8]
 801ae2a:	bf0c      	ite	eq
 801ae2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae30:	2500      	movne	r5, #0
 801ae32:	4293      	cmp	r3, r2
 801ae34:	bfc4      	itt	gt
 801ae36:	1a9b      	subgt	r3, r3, r2
 801ae38:	18ed      	addgt	r5, r5, r3
 801ae3a:	2600      	movs	r6, #0
 801ae3c:	341a      	adds	r4, #26
 801ae3e:	42b5      	cmp	r5, r6
 801ae40:	d11a      	bne.n	801ae78 <_printf_common+0xc8>
 801ae42:	2000      	movs	r0, #0
 801ae44:	e008      	b.n	801ae58 <_printf_common+0xa8>
 801ae46:	2301      	movs	r3, #1
 801ae48:	4652      	mov	r2, sl
 801ae4a:	4649      	mov	r1, r9
 801ae4c:	4638      	mov	r0, r7
 801ae4e:	47c0      	blx	r8
 801ae50:	3001      	adds	r0, #1
 801ae52:	d103      	bne.n	801ae5c <_printf_common+0xac>
 801ae54:	f04f 30ff 	mov.w	r0, #4294967295
 801ae58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae5c:	3501      	adds	r5, #1
 801ae5e:	e7c6      	b.n	801adee <_printf_common+0x3e>
 801ae60:	18e1      	adds	r1, r4, r3
 801ae62:	1c5a      	adds	r2, r3, #1
 801ae64:	2030      	movs	r0, #48	; 0x30
 801ae66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ae6a:	4422      	add	r2, r4
 801ae6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ae70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ae74:	3302      	adds	r3, #2
 801ae76:	e7c7      	b.n	801ae08 <_printf_common+0x58>
 801ae78:	2301      	movs	r3, #1
 801ae7a:	4622      	mov	r2, r4
 801ae7c:	4649      	mov	r1, r9
 801ae7e:	4638      	mov	r0, r7
 801ae80:	47c0      	blx	r8
 801ae82:	3001      	adds	r0, #1
 801ae84:	d0e6      	beq.n	801ae54 <_printf_common+0xa4>
 801ae86:	3601      	adds	r6, #1
 801ae88:	e7d9      	b.n	801ae3e <_printf_common+0x8e>
	...

0801ae8c <_printf_i>:
 801ae8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae90:	7e0f      	ldrb	r7, [r1, #24]
 801ae92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ae94:	2f78      	cmp	r7, #120	; 0x78
 801ae96:	4691      	mov	r9, r2
 801ae98:	4680      	mov	r8, r0
 801ae9a:	460c      	mov	r4, r1
 801ae9c:	469a      	mov	sl, r3
 801ae9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801aea2:	d807      	bhi.n	801aeb4 <_printf_i+0x28>
 801aea4:	2f62      	cmp	r7, #98	; 0x62
 801aea6:	d80a      	bhi.n	801aebe <_printf_i+0x32>
 801aea8:	2f00      	cmp	r7, #0
 801aeaa:	f000 80d4 	beq.w	801b056 <_printf_i+0x1ca>
 801aeae:	2f58      	cmp	r7, #88	; 0x58
 801aeb0:	f000 80c0 	beq.w	801b034 <_printf_i+0x1a8>
 801aeb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aeb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aebc:	e03a      	b.n	801af34 <_printf_i+0xa8>
 801aebe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aec2:	2b15      	cmp	r3, #21
 801aec4:	d8f6      	bhi.n	801aeb4 <_printf_i+0x28>
 801aec6:	a101      	add	r1, pc, #4	; (adr r1, 801aecc <_printf_i+0x40>)
 801aec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aecc:	0801af25 	.word	0x0801af25
 801aed0:	0801af39 	.word	0x0801af39
 801aed4:	0801aeb5 	.word	0x0801aeb5
 801aed8:	0801aeb5 	.word	0x0801aeb5
 801aedc:	0801aeb5 	.word	0x0801aeb5
 801aee0:	0801aeb5 	.word	0x0801aeb5
 801aee4:	0801af39 	.word	0x0801af39
 801aee8:	0801aeb5 	.word	0x0801aeb5
 801aeec:	0801aeb5 	.word	0x0801aeb5
 801aef0:	0801aeb5 	.word	0x0801aeb5
 801aef4:	0801aeb5 	.word	0x0801aeb5
 801aef8:	0801b03d 	.word	0x0801b03d
 801aefc:	0801af65 	.word	0x0801af65
 801af00:	0801aff7 	.word	0x0801aff7
 801af04:	0801aeb5 	.word	0x0801aeb5
 801af08:	0801aeb5 	.word	0x0801aeb5
 801af0c:	0801b05f 	.word	0x0801b05f
 801af10:	0801aeb5 	.word	0x0801aeb5
 801af14:	0801af65 	.word	0x0801af65
 801af18:	0801aeb5 	.word	0x0801aeb5
 801af1c:	0801aeb5 	.word	0x0801aeb5
 801af20:	0801afff 	.word	0x0801afff
 801af24:	682b      	ldr	r3, [r5, #0]
 801af26:	1d1a      	adds	r2, r3, #4
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	602a      	str	r2, [r5, #0]
 801af2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801af34:	2301      	movs	r3, #1
 801af36:	e09f      	b.n	801b078 <_printf_i+0x1ec>
 801af38:	6820      	ldr	r0, [r4, #0]
 801af3a:	682b      	ldr	r3, [r5, #0]
 801af3c:	0607      	lsls	r7, r0, #24
 801af3e:	f103 0104 	add.w	r1, r3, #4
 801af42:	6029      	str	r1, [r5, #0]
 801af44:	d501      	bpl.n	801af4a <_printf_i+0xbe>
 801af46:	681e      	ldr	r6, [r3, #0]
 801af48:	e003      	b.n	801af52 <_printf_i+0xc6>
 801af4a:	0646      	lsls	r6, r0, #25
 801af4c:	d5fb      	bpl.n	801af46 <_printf_i+0xba>
 801af4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801af52:	2e00      	cmp	r6, #0
 801af54:	da03      	bge.n	801af5e <_printf_i+0xd2>
 801af56:	232d      	movs	r3, #45	; 0x2d
 801af58:	4276      	negs	r6, r6
 801af5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af5e:	485a      	ldr	r0, [pc, #360]	; (801b0c8 <_printf_i+0x23c>)
 801af60:	230a      	movs	r3, #10
 801af62:	e012      	b.n	801af8a <_printf_i+0xfe>
 801af64:	682b      	ldr	r3, [r5, #0]
 801af66:	6820      	ldr	r0, [r4, #0]
 801af68:	1d19      	adds	r1, r3, #4
 801af6a:	6029      	str	r1, [r5, #0]
 801af6c:	0605      	lsls	r5, r0, #24
 801af6e:	d501      	bpl.n	801af74 <_printf_i+0xe8>
 801af70:	681e      	ldr	r6, [r3, #0]
 801af72:	e002      	b.n	801af7a <_printf_i+0xee>
 801af74:	0641      	lsls	r1, r0, #25
 801af76:	d5fb      	bpl.n	801af70 <_printf_i+0xe4>
 801af78:	881e      	ldrh	r6, [r3, #0]
 801af7a:	4853      	ldr	r0, [pc, #332]	; (801b0c8 <_printf_i+0x23c>)
 801af7c:	2f6f      	cmp	r7, #111	; 0x6f
 801af7e:	bf0c      	ite	eq
 801af80:	2308      	moveq	r3, #8
 801af82:	230a      	movne	r3, #10
 801af84:	2100      	movs	r1, #0
 801af86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801af8a:	6865      	ldr	r5, [r4, #4]
 801af8c:	60a5      	str	r5, [r4, #8]
 801af8e:	2d00      	cmp	r5, #0
 801af90:	bfa2      	ittt	ge
 801af92:	6821      	ldrge	r1, [r4, #0]
 801af94:	f021 0104 	bicge.w	r1, r1, #4
 801af98:	6021      	strge	r1, [r4, #0]
 801af9a:	b90e      	cbnz	r6, 801afa0 <_printf_i+0x114>
 801af9c:	2d00      	cmp	r5, #0
 801af9e:	d04b      	beq.n	801b038 <_printf_i+0x1ac>
 801afa0:	4615      	mov	r5, r2
 801afa2:	fbb6 f1f3 	udiv	r1, r6, r3
 801afa6:	fb03 6711 	mls	r7, r3, r1, r6
 801afaa:	5dc7      	ldrb	r7, [r0, r7]
 801afac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801afb0:	4637      	mov	r7, r6
 801afb2:	42bb      	cmp	r3, r7
 801afb4:	460e      	mov	r6, r1
 801afb6:	d9f4      	bls.n	801afa2 <_printf_i+0x116>
 801afb8:	2b08      	cmp	r3, #8
 801afba:	d10b      	bne.n	801afd4 <_printf_i+0x148>
 801afbc:	6823      	ldr	r3, [r4, #0]
 801afbe:	07de      	lsls	r6, r3, #31
 801afc0:	d508      	bpl.n	801afd4 <_printf_i+0x148>
 801afc2:	6923      	ldr	r3, [r4, #16]
 801afc4:	6861      	ldr	r1, [r4, #4]
 801afc6:	4299      	cmp	r1, r3
 801afc8:	bfde      	ittt	le
 801afca:	2330      	movle	r3, #48	; 0x30
 801afcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801afd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801afd4:	1b52      	subs	r2, r2, r5
 801afd6:	6122      	str	r2, [r4, #16]
 801afd8:	f8cd a000 	str.w	sl, [sp]
 801afdc:	464b      	mov	r3, r9
 801afde:	aa03      	add	r2, sp, #12
 801afe0:	4621      	mov	r1, r4
 801afe2:	4640      	mov	r0, r8
 801afe4:	f7ff fee4 	bl	801adb0 <_printf_common>
 801afe8:	3001      	adds	r0, #1
 801afea:	d14a      	bne.n	801b082 <_printf_i+0x1f6>
 801afec:	f04f 30ff 	mov.w	r0, #4294967295
 801aff0:	b004      	add	sp, #16
 801aff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aff6:	6823      	ldr	r3, [r4, #0]
 801aff8:	f043 0320 	orr.w	r3, r3, #32
 801affc:	6023      	str	r3, [r4, #0]
 801affe:	4833      	ldr	r0, [pc, #204]	; (801b0cc <_printf_i+0x240>)
 801b000:	2778      	movs	r7, #120	; 0x78
 801b002:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b006:	6823      	ldr	r3, [r4, #0]
 801b008:	6829      	ldr	r1, [r5, #0]
 801b00a:	061f      	lsls	r7, r3, #24
 801b00c:	f851 6b04 	ldr.w	r6, [r1], #4
 801b010:	d402      	bmi.n	801b018 <_printf_i+0x18c>
 801b012:	065f      	lsls	r7, r3, #25
 801b014:	bf48      	it	mi
 801b016:	b2b6      	uxthmi	r6, r6
 801b018:	07df      	lsls	r7, r3, #31
 801b01a:	bf48      	it	mi
 801b01c:	f043 0320 	orrmi.w	r3, r3, #32
 801b020:	6029      	str	r1, [r5, #0]
 801b022:	bf48      	it	mi
 801b024:	6023      	strmi	r3, [r4, #0]
 801b026:	b91e      	cbnz	r6, 801b030 <_printf_i+0x1a4>
 801b028:	6823      	ldr	r3, [r4, #0]
 801b02a:	f023 0320 	bic.w	r3, r3, #32
 801b02e:	6023      	str	r3, [r4, #0]
 801b030:	2310      	movs	r3, #16
 801b032:	e7a7      	b.n	801af84 <_printf_i+0xf8>
 801b034:	4824      	ldr	r0, [pc, #144]	; (801b0c8 <_printf_i+0x23c>)
 801b036:	e7e4      	b.n	801b002 <_printf_i+0x176>
 801b038:	4615      	mov	r5, r2
 801b03a:	e7bd      	b.n	801afb8 <_printf_i+0x12c>
 801b03c:	682b      	ldr	r3, [r5, #0]
 801b03e:	6826      	ldr	r6, [r4, #0]
 801b040:	6961      	ldr	r1, [r4, #20]
 801b042:	1d18      	adds	r0, r3, #4
 801b044:	6028      	str	r0, [r5, #0]
 801b046:	0635      	lsls	r5, r6, #24
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	d501      	bpl.n	801b050 <_printf_i+0x1c4>
 801b04c:	6019      	str	r1, [r3, #0]
 801b04e:	e002      	b.n	801b056 <_printf_i+0x1ca>
 801b050:	0670      	lsls	r0, r6, #25
 801b052:	d5fb      	bpl.n	801b04c <_printf_i+0x1c0>
 801b054:	8019      	strh	r1, [r3, #0]
 801b056:	2300      	movs	r3, #0
 801b058:	6123      	str	r3, [r4, #16]
 801b05a:	4615      	mov	r5, r2
 801b05c:	e7bc      	b.n	801afd8 <_printf_i+0x14c>
 801b05e:	682b      	ldr	r3, [r5, #0]
 801b060:	1d1a      	adds	r2, r3, #4
 801b062:	602a      	str	r2, [r5, #0]
 801b064:	681d      	ldr	r5, [r3, #0]
 801b066:	6862      	ldr	r2, [r4, #4]
 801b068:	2100      	movs	r1, #0
 801b06a:	4628      	mov	r0, r5
 801b06c:	f7e5 f8d0 	bl	8000210 <memchr>
 801b070:	b108      	cbz	r0, 801b076 <_printf_i+0x1ea>
 801b072:	1b40      	subs	r0, r0, r5
 801b074:	6060      	str	r0, [r4, #4]
 801b076:	6863      	ldr	r3, [r4, #4]
 801b078:	6123      	str	r3, [r4, #16]
 801b07a:	2300      	movs	r3, #0
 801b07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b080:	e7aa      	b.n	801afd8 <_printf_i+0x14c>
 801b082:	6923      	ldr	r3, [r4, #16]
 801b084:	462a      	mov	r2, r5
 801b086:	4649      	mov	r1, r9
 801b088:	4640      	mov	r0, r8
 801b08a:	47d0      	blx	sl
 801b08c:	3001      	adds	r0, #1
 801b08e:	d0ad      	beq.n	801afec <_printf_i+0x160>
 801b090:	6823      	ldr	r3, [r4, #0]
 801b092:	079b      	lsls	r3, r3, #30
 801b094:	d413      	bmi.n	801b0be <_printf_i+0x232>
 801b096:	68e0      	ldr	r0, [r4, #12]
 801b098:	9b03      	ldr	r3, [sp, #12]
 801b09a:	4298      	cmp	r0, r3
 801b09c:	bfb8      	it	lt
 801b09e:	4618      	movlt	r0, r3
 801b0a0:	e7a6      	b.n	801aff0 <_printf_i+0x164>
 801b0a2:	2301      	movs	r3, #1
 801b0a4:	4632      	mov	r2, r6
 801b0a6:	4649      	mov	r1, r9
 801b0a8:	4640      	mov	r0, r8
 801b0aa:	47d0      	blx	sl
 801b0ac:	3001      	adds	r0, #1
 801b0ae:	d09d      	beq.n	801afec <_printf_i+0x160>
 801b0b0:	3501      	adds	r5, #1
 801b0b2:	68e3      	ldr	r3, [r4, #12]
 801b0b4:	9903      	ldr	r1, [sp, #12]
 801b0b6:	1a5b      	subs	r3, r3, r1
 801b0b8:	42ab      	cmp	r3, r5
 801b0ba:	dcf2      	bgt.n	801b0a2 <_printf_i+0x216>
 801b0bc:	e7eb      	b.n	801b096 <_printf_i+0x20a>
 801b0be:	2500      	movs	r5, #0
 801b0c0:	f104 0619 	add.w	r6, r4, #25
 801b0c4:	e7f5      	b.n	801b0b2 <_printf_i+0x226>
 801b0c6:	bf00      	nop
 801b0c8:	0801c325 	.word	0x0801c325
 801b0cc:	0801c336 	.word	0x0801c336

0801b0d0 <__sflush_r>:
 801b0d0:	898a      	ldrh	r2, [r1, #12]
 801b0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0d6:	4605      	mov	r5, r0
 801b0d8:	0710      	lsls	r0, r2, #28
 801b0da:	460c      	mov	r4, r1
 801b0dc:	d458      	bmi.n	801b190 <__sflush_r+0xc0>
 801b0de:	684b      	ldr	r3, [r1, #4]
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	dc05      	bgt.n	801b0f0 <__sflush_r+0x20>
 801b0e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	dc02      	bgt.n	801b0f0 <__sflush_r+0x20>
 801b0ea:	2000      	movs	r0, #0
 801b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b0f2:	2e00      	cmp	r6, #0
 801b0f4:	d0f9      	beq.n	801b0ea <__sflush_r+0x1a>
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b0fc:	682f      	ldr	r7, [r5, #0]
 801b0fe:	6a21      	ldr	r1, [r4, #32]
 801b100:	602b      	str	r3, [r5, #0]
 801b102:	d032      	beq.n	801b16a <__sflush_r+0x9a>
 801b104:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b106:	89a3      	ldrh	r3, [r4, #12]
 801b108:	075a      	lsls	r2, r3, #29
 801b10a:	d505      	bpl.n	801b118 <__sflush_r+0x48>
 801b10c:	6863      	ldr	r3, [r4, #4]
 801b10e:	1ac0      	subs	r0, r0, r3
 801b110:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b112:	b10b      	cbz	r3, 801b118 <__sflush_r+0x48>
 801b114:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b116:	1ac0      	subs	r0, r0, r3
 801b118:	2300      	movs	r3, #0
 801b11a:	4602      	mov	r2, r0
 801b11c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b11e:	6a21      	ldr	r1, [r4, #32]
 801b120:	4628      	mov	r0, r5
 801b122:	47b0      	blx	r6
 801b124:	1c43      	adds	r3, r0, #1
 801b126:	89a3      	ldrh	r3, [r4, #12]
 801b128:	d106      	bne.n	801b138 <__sflush_r+0x68>
 801b12a:	6829      	ldr	r1, [r5, #0]
 801b12c:	291d      	cmp	r1, #29
 801b12e:	d82b      	bhi.n	801b188 <__sflush_r+0xb8>
 801b130:	4a29      	ldr	r2, [pc, #164]	; (801b1d8 <__sflush_r+0x108>)
 801b132:	410a      	asrs	r2, r1
 801b134:	07d6      	lsls	r6, r2, #31
 801b136:	d427      	bmi.n	801b188 <__sflush_r+0xb8>
 801b138:	2200      	movs	r2, #0
 801b13a:	6062      	str	r2, [r4, #4]
 801b13c:	04d9      	lsls	r1, r3, #19
 801b13e:	6922      	ldr	r2, [r4, #16]
 801b140:	6022      	str	r2, [r4, #0]
 801b142:	d504      	bpl.n	801b14e <__sflush_r+0x7e>
 801b144:	1c42      	adds	r2, r0, #1
 801b146:	d101      	bne.n	801b14c <__sflush_r+0x7c>
 801b148:	682b      	ldr	r3, [r5, #0]
 801b14a:	b903      	cbnz	r3, 801b14e <__sflush_r+0x7e>
 801b14c:	6560      	str	r0, [r4, #84]	; 0x54
 801b14e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b150:	602f      	str	r7, [r5, #0]
 801b152:	2900      	cmp	r1, #0
 801b154:	d0c9      	beq.n	801b0ea <__sflush_r+0x1a>
 801b156:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b15a:	4299      	cmp	r1, r3
 801b15c:	d002      	beq.n	801b164 <__sflush_r+0x94>
 801b15e:	4628      	mov	r0, r5
 801b160:	f7ff fb36 	bl	801a7d0 <_free_r>
 801b164:	2000      	movs	r0, #0
 801b166:	6360      	str	r0, [r4, #52]	; 0x34
 801b168:	e7c0      	b.n	801b0ec <__sflush_r+0x1c>
 801b16a:	2301      	movs	r3, #1
 801b16c:	4628      	mov	r0, r5
 801b16e:	47b0      	blx	r6
 801b170:	1c41      	adds	r1, r0, #1
 801b172:	d1c8      	bne.n	801b106 <__sflush_r+0x36>
 801b174:	682b      	ldr	r3, [r5, #0]
 801b176:	2b00      	cmp	r3, #0
 801b178:	d0c5      	beq.n	801b106 <__sflush_r+0x36>
 801b17a:	2b1d      	cmp	r3, #29
 801b17c:	d001      	beq.n	801b182 <__sflush_r+0xb2>
 801b17e:	2b16      	cmp	r3, #22
 801b180:	d101      	bne.n	801b186 <__sflush_r+0xb6>
 801b182:	602f      	str	r7, [r5, #0]
 801b184:	e7b1      	b.n	801b0ea <__sflush_r+0x1a>
 801b186:	89a3      	ldrh	r3, [r4, #12]
 801b188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b18c:	81a3      	strh	r3, [r4, #12]
 801b18e:	e7ad      	b.n	801b0ec <__sflush_r+0x1c>
 801b190:	690f      	ldr	r7, [r1, #16]
 801b192:	2f00      	cmp	r7, #0
 801b194:	d0a9      	beq.n	801b0ea <__sflush_r+0x1a>
 801b196:	0793      	lsls	r3, r2, #30
 801b198:	680e      	ldr	r6, [r1, #0]
 801b19a:	bf08      	it	eq
 801b19c:	694b      	ldreq	r3, [r1, #20]
 801b19e:	600f      	str	r7, [r1, #0]
 801b1a0:	bf18      	it	ne
 801b1a2:	2300      	movne	r3, #0
 801b1a4:	eba6 0807 	sub.w	r8, r6, r7
 801b1a8:	608b      	str	r3, [r1, #8]
 801b1aa:	f1b8 0f00 	cmp.w	r8, #0
 801b1ae:	dd9c      	ble.n	801b0ea <__sflush_r+0x1a>
 801b1b0:	6a21      	ldr	r1, [r4, #32]
 801b1b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b1b4:	4643      	mov	r3, r8
 801b1b6:	463a      	mov	r2, r7
 801b1b8:	4628      	mov	r0, r5
 801b1ba:	47b0      	blx	r6
 801b1bc:	2800      	cmp	r0, #0
 801b1be:	dc06      	bgt.n	801b1ce <__sflush_r+0xfe>
 801b1c0:	89a3      	ldrh	r3, [r4, #12]
 801b1c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b1c6:	81a3      	strh	r3, [r4, #12]
 801b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 801b1cc:	e78e      	b.n	801b0ec <__sflush_r+0x1c>
 801b1ce:	4407      	add	r7, r0
 801b1d0:	eba8 0800 	sub.w	r8, r8, r0
 801b1d4:	e7e9      	b.n	801b1aa <__sflush_r+0xda>
 801b1d6:	bf00      	nop
 801b1d8:	dfbffffe 	.word	0xdfbffffe

0801b1dc <_fflush_r>:
 801b1dc:	b538      	push	{r3, r4, r5, lr}
 801b1de:	690b      	ldr	r3, [r1, #16]
 801b1e0:	4605      	mov	r5, r0
 801b1e2:	460c      	mov	r4, r1
 801b1e4:	b913      	cbnz	r3, 801b1ec <_fflush_r+0x10>
 801b1e6:	2500      	movs	r5, #0
 801b1e8:	4628      	mov	r0, r5
 801b1ea:	bd38      	pop	{r3, r4, r5, pc}
 801b1ec:	b118      	cbz	r0, 801b1f6 <_fflush_r+0x1a>
 801b1ee:	6a03      	ldr	r3, [r0, #32]
 801b1f0:	b90b      	cbnz	r3, 801b1f6 <_fflush_r+0x1a>
 801b1f2:	f7fe ff3f 	bl	801a074 <__sinit>
 801b1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d0f3      	beq.n	801b1e6 <_fflush_r+0xa>
 801b1fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b200:	07d0      	lsls	r0, r2, #31
 801b202:	d404      	bmi.n	801b20e <_fflush_r+0x32>
 801b204:	0599      	lsls	r1, r3, #22
 801b206:	d402      	bmi.n	801b20e <_fflush_r+0x32>
 801b208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b20a:	f7ff fa9e 	bl	801a74a <__retarget_lock_acquire_recursive>
 801b20e:	4628      	mov	r0, r5
 801b210:	4621      	mov	r1, r4
 801b212:	f7ff ff5d 	bl	801b0d0 <__sflush_r>
 801b216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b218:	07da      	lsls	r2, r3, #31
 801b21a:	4605      	mov	r5, r0
 801b21c:	d4e4      	bmi.n	801b1e8 <_fflush_r+0xc>
 801b21e:	89a3      	ldrh	r3, [r4, #12]
 801b220:	059b      	lsls	r3, r3, #22
 801b222:	d4e1      	bmi.n	801b1e8 <_fflush_r+0xc>
 801b224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b226:	f7ff fa91 	bl	801a74c <__retarget_lock_release_recursive>
 801b22a:	e7dd      	b.n	801b1e8 <_fflush_r+0xc>

0801b22c <fiprintf>:
 801b22c:	b40e      	push	{r1, r2, r3}
 801b22e:	b503      	push	{r0, r1, lr}
 801b230:	4601      	mov	r1, r0
 801b232:	ab03      	add	r3, sp, #12
 801b234:	4805      	ldr	r0, [pc, #20]	; (801b24c <fiprintf+0x20>)
 801b236:	f853 2b04 	ldr.w	r2, [r3], #4
 801b23a:	6800      	ldr	r0, [r0, #0]
 801b23c:	9301      	str	r3, [sp, #4]
 801b23e:	f7ff fc9d 	bl	801ab7c <_vfiprintf_r>
 801b242:	b002      	add	sp, #8
 801b244:	f85d eb04 	ldr.w	lr, [sp], #4
 801b248:	b003      	add	sp, #12
 801b24a:	4770      	bx	lr
 801b24c:	200000e0 	.word	0x200000e0

0801b250 <__swhatbuf_r>:
 801b250:	b570      	push	{r4, r5, r6, lr}
 801b252:	460c      	mov	r4, r1
 801b254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b258:	2900      	cmp	r1, #0
 801b25a:	b096      	sub	sp, #88	; 0x58
 801b25c:	4615      	mov	r5, r2
 801b25e:	461e      	mov	r6, r3
 801b260:	da0d      	bge.n	801b27e <__swhatbuf_r+0x2e>
 801b262:	89a3      	ldrh	r3, [r4, #12]
 801b264:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b268:	f04f 0100 	mov.w	r1, #0
 801b26c:	bf0c      	ite	eq
 801b26e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b272:	2340      	movne	r3, #64	; 0x40
 801b274:	2000      	movs	r0, #0
 801b276:	6031      	str	r1, [r6, #0]
 801b278:	602b      	str	r3, [r5, #0]
 801b27a:	b016      	add	sp, #88	; 0x58
 801b27c:	bd70      	pop	{r4, r5, r6, pc}
 801b27e:	466a      	mov	r2, sp
 801b280:	f000 f848 	bl	801b314 <_fstat_r>
 801b284:	2800      	cmp	r0, #0
 801b286:	dbec      	blt.n	801b262 <__swhatbuf_r+0x12>
 801b288:	9901      	ldr	r1, [sp, #4]
 801b28a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b28e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b292:	4259      	negs	r1, r3
 801b294:	4159      	adcs	r1, r3
 801b296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b29a:	e7eb      	b.n	801b274 <__swhatbuf_r+0x24>

0801b29c <__smakebuf_r>:
 801b29c:	898b      	ldrh	r3, [r1, #12]
 801b29e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b2a0:	079d      	lsls	r5, r3, #30
 801b2a2:	4606      	mov	r6, r0
 801b2a4:	460c      	mov	r4, r1
 801b2a6:	d507      	bpl.n	801b2b8 <__smakebuf_r+0x1c>
 801b2a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b2ac:	6023      	str	r3, [r4, #0]
 801b2ae:	6123      	str	r3, [r4, #16]
 801b2b0:	2301      	movs	r3, #1
 801b2b2:	6163      	str	r3, [r4, #20]
 801b2b4:	b002      	add	sp, #8
 801b2b6:	bd70      	pop	{r4, r5, r6, pc}
 801b2b8:	ab01      	add	r3, sp, #4
 801b2ba:	466a      	mov	r2, sp
 801b2bc:	f7ff ffc8 	bl	801b250 <__swhatbuf_r>
 801b2c0:	9900      	ldr	r1, [sp, #0]
 801b2c2:	4605      	mov	r5, r0
 801b2c4:	4630      	mov	r0, r6
 801b2c6:	f7fe fc9d 	bl	8019c04 <_malloc_r>
 801b2ca:	b948      	cbnz	r0, 801b2e0 <__smakebuf_r+0x44>
 801b2cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b2d0:	059a      	lsls	r2, r3, #22
 801b2d2:	d4ef      	bmi.n	801b2b4 <__smakebuf_r+0x18>
 801b2d4:	f023 0303 	bic.w	r3, r3, #3
 801b2d8:	f043 0302 	orr.w	r3, r3, #2
 801b2dc:	81a3      	strh	r3, [r4, #12]
 801b2de:	e7e3      	b.n	801b2a8 <__smakebuf_r+0xc>
 801b2e0:	89a3      	ldrh	r3, [r4, #12]
 801b2e2:	6020      	str	r0, [r4, #0]
 801b2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b2e8:	81a3      	strh	r3, [r4, #12]
 801b2ea:	9b00      	ldr	r3, [sp, #0]
 801b2ec:	6163      	str	r3, [r4, #20]
 801b2ee:	9b01      	ldr	r3, [sp, #4]
 801b2f0:	6120      	str	r0, [r4, #16]
 801b2f2:	b15b      	cbz	r3, 801b30c <__smakebuf_r+0x70>
 801b2f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2f8:	4630      	mov	r0, r6
 801b2fa:	f000 f81d 	bl	801b338 <_isatty_r>
 801b2fe:	b128      	cbz	r0, 801b30c <__smakebuf_r+0x70>
 801b300:	89a3      	ldrh	r3, [r4, #12]
 801b302:	f023 0303 	bic.w	r3, r3, #3
 801b306:	f043 0301 	orr.w	r3, r3, #1
 801b30a:	81a3      	strh	r3, [r4, #12]
 801b30c:	89a3      	ldrh	r3, [r4, #12]
 801b30e:	431d      	orrs	r5, r3
 801b310:	81a5      	strh	r5, [r4, #12]
 801b312:	e7cf      	b.n	801b2b4 <__smakebuf_r+0x18>

0801b314 <_fstat_r>:
 801b314:	b538      	push	{r3, r4, r5, lr}
 801b316:	4d07      	ldr	r5, [pc, #28]	; (801b334 <_fstat_r+0x20>)
 801b318:	2300      	movs	r3, #0
 801b31a:	4604      	mov	r4, r0
 801b31c:	4608      	mov	r0, r1
 801b31e:	4611      	mov	r1, r2
 801b320:	602b      	str	r3, [r5, #0]
 801b322:	f7e8 fde9 	bl	8003ef8 <_fstat>
 801b326:	1c43      	adds	r3, r0, #1
 801b328:	d102      	bne.n	801b330 <_fstat_r+0x1c>
 801b32a:	682b      	ldr	r3, [r5, #0]
 801b32c:	b103      	cbz	r3, 801b330 <_fstat_r+0x1c>
 801b32e:	6023      	str	r3, [r4, #0]
 801b330:	bd38      	pop	{r3, r4, r5, pc}
 801b332:	bf00      	nop
 801b334:	2000a1bc 	.word	0x2000a1bc

0801b338 <_isatty_r>:
 801b338:	b538      	push	{r3, r4, r5, lr}
 801b33a:	4d06      	ldr	r5, [pc, #24]	; (801b354 <_isatty_r+0x1c>)
 801b33c:	2300      	movs	r3, #0
 801b33e:	4604      	mov	r4, r0
 801b340:	4608      	mov	r0, r1
 801b342:	602b      	str	r3, [r5, #0]
 801b344:	f7e8 fd46 	bl	8003dd4 <_isatty>
 801b348:	1c43      	adds	r3, r0, #1
 801b34a:	d102      	bne.n	801b352 <_isatty_r+0x1a>
 801b34c:	682b      	ldr	r3, [r5, #0]
 801b34e:	b103      	cbz	r3, 801b352 <_isatty_r+0x1a>
 801b350:	6023      	str	r3, [r4, #0]
 801b352:	bd38      	pop	{r3, r4, r5, pc}
 801b354:	2000a1bc 	.word	0x2000a1bc

0801b358 <abort>:
 801b358:	b508      	push	{r3, lr}
 801b35a:	2006      	movs	r0, #6
 801b35c:	f000 f82c 	bl	801b3b8 <raise>
 801b360:	2001      	movs	r0, #1
 801b362:	f000 f845 	bl	801b3f0 <_exit>

0801b366 <_raise_r>:
 801b366:	291f      	cmp	r1, #31
 801b368:	b538      	push	{r3, r4, r5, lr}
 801b36a:	4604      	mov	r4, r0
 801b36c:	460d      	mov	r5, r1
 801b36e:	d904      	bls.n	801b37a <_raise_r+0x14>
 801b370:	2316      	movs	r3, #22
 801b372:	6003      	str	r3, [r0, #0]
 801b374:	f04f 30ff 	mov.w	r0, #4294967295
 801b378:	bd38      	pop	{r3, r4, r5, pc}
 801b37a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b37c:	b112      	cbz	r2, 801b384 <_raise_r+0x1e>
 801b37e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b382:	b94b      	cbnz	r3, 801b398 <_raise_r+0x32>
 801b384:	4620      	mov	r0, r4
 801b386:	f000 f831 	bl	801b3ec <_getpid_r>
 801b38a:	462a      	mov	r2, r5
 801b38c:	4601      	mov	r1, r0
 801b38e:	4620      	mov	r0, r4
 801b390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b394:	f000 b818 	b.w	801b3c8 <_kill_r>
 801b398:	2b01      	cmp	r3, #1
 801b39a:	d00a      	beq.n	801b3b2 <_raise_r+0x4c>
 801b39c:	1c59      	adds	r1, r3, #1
 801b39e:	d103      	bne.n	801b3a8 <_raise_r+0x42>
 801b3a0:	2316      	movs	r3, #22
 801b3a2:	6003      	str	r3, [r0, #0]
 801b3a4:	2001      	movs	r0, #1
 801b3a6:	e7e7      	b.n	801b378 <_raise_r+0x12>
 801b3a8:	2400      	movs	r4, #0
 801b3aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b3ae:	4628      	mov	r0, r5
 801b3b0:	4798      	blx	r3
 801b3b2:	2000      	movs	r0, #0
 801b3b4:	e7e0      	b.n	801b378 <_raise_r+0x12>
	...

0801b3b8 <raise>:
 801b3b8:	4b02      	ldr	r3, [pc, #8]	; (801b3c4 <raise+0xc>)
 801b3ba:	4601      	mov	r1, r0
 801b3bc:	6818      	ldr	r0, [r3, #0]
 801b3be:	f7ff bfd2 	b.w	801b366 <_raise_r>
 801b3c2:	bf00      	nop
 801b3c4:	200000e0 	.word	0x200000e0

0801b3c8 <_kill_r>:
 801b3c8:	b538      	push	{r3, r4, r5, lr}
 801b3ca:	4d07      	ldr	r5, [pc, #28]	; (801b3e8 <_kill_r+0x20>)
 801b3cc:	2300      	movs	r3, #0
 801b3ce:	4604      	mov	r4, r0
 801b3d0:	4608      	mov	r0, r1
 801b3d2:	4611      	mov	r1, r2
 801b3d4:	602b      	str	r3, [r5, #0]
 801b3d6:	f7e8 fdb2 	bl	8003f3e <_kill>
 801b3da:	1c43      	adds	r3, r0, #1
 801b3dc:	d102      	bne.n	801b3e4 <_kill_r+0x1c>
 801b3de:	682b      	ldr	r3, [r5, #0]
 801b3e0:	b103      	cbz	r3, 801b3e4 <_kill_r+0x1c>
 801b3e2:	6023      	str	r3, [r4, #0]
 801b3e4:	bd38      	pop	{r3, r4, r5, pc}
 801b3e6:	bf00      	nop
 801b3e8:	2000a1bc 	.word	0x2000a1bc

0801b3ec <_getpid_r>:
 801b3ec:	f7e8 bd9f 	b.w	8003f2e <_getpid>

0801b3f0 <_exit>:
 801b3f0:	e7fe      	b.n	801b3f0 <_exit>
	...

0801b3f4 <_init>:
 801b3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3f6:	bf00      	nop
 801b3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3fa:	bc08      	pop	{r3}
 801b3fc:	469e      	mov	lr, r3
 801b3fe:	4770      	bx	lr

0801b400 <_fini>:
 801b400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b402:	bf00      	nop
 801b404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b406:	bc08      	pop	{r3}
 801b408:	469e      	mov	lr, r3
 801b40a:	4770      	bx	lr
