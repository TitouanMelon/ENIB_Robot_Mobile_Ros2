
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019374  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee8  08019518  08019518  00029518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a400  0801a400  000300d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801a400  0801a400  0002a400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a408  0801a408  000300d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a408  0801a408  0002a408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a40c  0801a40c  0002a40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0801a410  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e778  200000d8  0801a4e4  000300d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e850  0801a4e4  0003e850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 13 .debug_info   000e457d  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00017c0a  00000000  00000000  0011471d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004158  00000000  00000000  0012c328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001577  00000000  00000000  00130480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c3a2  00000000  00000000  001319f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006ac21  00000000  00000000  0013dd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8047  00000000  00000000  001a89ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000102f8  00000000  00000000  00260a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00270cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00057b45  00000000  00000000  00270d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00009b50  00000000  00000000  002c88a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080194fc 	.word	0x080194fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	080194fc 	.word	0x080194fc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_ldivmod>:
 8000aec:	b97b      	cbnz	r3, 8000b0e <__aeabi_ldivmod+0x22>
 8000aee:	b972      	cbnz	r2, 8000b0e <__aeabi_ldivmod+0x22>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bfbe      	ittt	lt
 8000af4:	2000      	movlt	r0, #0
 8000af6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000afa:	e006      	blt.n	8000b0a <__aeabi_ldivmod+0x1e>
 8000afc:	bf08      	it	eq
 8000afe:	2800      	cmpeq	r0, #0
 8000b00:	bf1c      	itt	ne
 8000b02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b06:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b0a:	f000 b9bb 	b.w	8000e84 <__aeabi_idiv0>
 8000b0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b16:	2900      	cmp	r1, #0
 8000b18:	db09      	blt.n	8000b2e <__aeabi_ldivmod+0x42>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db1a      	blt.n	8000b54 <__aeabi_ldivmod+0x68>
 8000b1e:	f000 f84d 	bl	8000bbc <__udivmoddi4>
 8000b22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr
 8000b2e:	4240      	negs	r0, r0
 8000b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db1b      	blt.n	8000b70 <__aeabi_ldivmod+0x84>
 8000b38:	f000 f840 	bl	8000bbc <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	4252      	negs	r2, r2
 8000b4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b52:	4770      	bx	lr
 8000b54:	4252      	negs	r2, r2
 8000b56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5a:	f000 f82f 	bl	8000bbc <__udivmoddi4>
 8000b5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b66:	b004      	add	sp, #16
 8000b68:	4240      	negs	r0, r0
 8000b6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f821 	bl	8000bbc <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <captDistIR_Init+0x60>)
 8000e90:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 8000eda:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000edc:	f002 fe6c 	bl	8003bb8 <HAL_ADC_Init>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200000f4 	.word	0x200000f4
 8000ee8:	40012000 	.word	0x40012000

08000eec <captDistIR_Get>:
//=================================================================
//			IR GET (POLL METHOD)
//=================================================================

int  captDistIR_Get(int* tab)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	sConfig.Channel      = ADC_CHANNEL_4;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <captDistIR_Get+0x80>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <captDistIR_Get+0x80>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <captDistIR_Get+0x80>)
 8000f02:	2203      	movs	r2, #3
 8000f04:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8000f06:	4919      	ldr	r1, [pc, #100]	; (8000f6c <captDistIR_Get+0x80>)
 8000f08:	4819      	ldr	r0, [pc, #100]	; (8000f70 <captDistIR_Get+0x84>)
 8000f0a:	f002 ff41 	bl	8003d90 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);					//Start the conversion
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <captDistIR_Get+0x84>)
 8000f10:	f002 fe86 	bl	8003c20 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);	//Processing the conversion
 8000f14:	210a      	movs	r1, #10
 8000f16:	4816      	ldr	r0, [pc, #88]	; (8000f70 <captDistIR_Get+0x84>)
 8000f18:	f002 feee 	bl	8003cf8 <HAL_ADC_PollForConversion>
	tab[0]=HAL_ADC_GetValue(&adcHandle); 		//Return the converted data
 8000f1c:	4814      	ldr	r0, [pc, #80]	; (8000f70 <captDistIR_Get+0x84>)
 8000f1e:	f002 ff2a 	bl	8003d76 <HAL_ADC_GetValue>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	601a      	str	r2, [r3, #0]

	sConfig.Channel      = ADC_CHANNEL_8;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <captDistIR_Get+0x80>)
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <captDistIR_Get+0x80>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <captDistIR_Get+0x80>)
 8000f38:	2203      	movs	r2, #3
 8000f3a:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8000f3c:	490b      	ldr	r1, [pc, #44]	; (8000f6c <captDistIR_Get+0x80>)
 8000f3e:	480c      	ldr	r0, [pc, #48]	; (8000f70 <captDistIR_Get+0x84>)
 8000f40:	f002 ff26 	bl	8003d90 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);						//Start the conversion
 8000f44:	480a      	ldr	r0, [pc, #40]	; (8000f70 <captDistIR_Get+0x84>)
 8000f46:	f002 fe6b 	bl	8003c20 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);		//Processing the conversion
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <captDistIR_Get+0x84>)
 8000f4e:	f002 fed3 	bl	8003cf8 <HAL_ADC_PollForConversion>
	tab[1]=HAL_ADC_GetValue(&adcHandle); 			//Return the converted data
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <captDistIR_Get+0x84>)
 8000f54:	f002 ff0f 	bl	8003d76 <HAL_ADC_GetValue>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	601a      	str	r2, [r3, #0]

	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000138 	.word	0x20000138
 8000f70:	200000f4 	.word	0x200000f4

08000f74 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f80:	f009 ff9c 	bl	800aebc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f84:	4b58      	ldr	r3, [pc, #352]	; (80010e8 <pvPortMallocMicroROS+0x174>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f8c:	f000 f98c 	bl	80012a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f90:	4b56      	ldr	r3, [pc, #344]	; (80010ec <pvPortMallocMicroROS+0x178>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f040 808e 	bne.w	80010ba <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d01d      	beq.n	8000fe0 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d014      	beq.n	8000fe0 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f023 0307 	bic.w	r3, r3, #7
 8000fbc:	3308      	adds	r3, #8
 8000fbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00a      	beq.n	8000fe0 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fce:	f383 8811 	msr	BASEPRI, r3
 8000fd2:	f3bf 8f6f 	isb	sy
 8000fd6:	f3bf 8f4f 	dsb	sy
 8000fda:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fdc:	bf00      	nop
 8000fde:	e7fe      	b.n	8000fde <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d069      	beq.n	80010ba <pvPortMallocMicroROS+0x146>
 8000fe6:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d864      	bhi.n	80010ba <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ff0:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <pvPortMallocMicroROS+0x180>)
 8000ff2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000ff4:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <pvPortMallocMicroROS+0x180>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ffa:	e004      	b.n	8001006 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	d903      	bls.n	8001018 <pvPortMallocMicroROS+0xa4>
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f1      	bne.n	8000ffc <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <pvPortMallocMicroROS+0x174>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101e:	429a      	cmp	r2, r3
 8001020:	d04b      	beq.n	80010ba <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2208      	movs	r2, #8
 8001028:	4413      	add	r3, r2
 800102a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	1ad2      	subs	r2, r2, r3
 800103c:	2308      	movs	r3, #8
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	429a      	cmp	r2, r3
 8001042:	d91f      	bls.n	8001084 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00a      	beq.n	800106c <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8001056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	613b      	str	r3, [r7, #16]
}
 8001068:	bf00      	nop
 800106a:	e7fe      	b.n	800106a <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1ad2      	subs	r2, r2, r3
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800107e:	69b8      	ldr	r0, [r7, #24]
 8001080:	f000 f974 	bl	800136c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8001090:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <pvPortMallocMicroROS+0x184>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d203      	bcs.n	80010a6 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <pvPortMallocMicroROS+0x184>)
 80010a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <pvPortMallocMicroROS+0x178>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010ba:	f009 ff0d 	bl	800aed8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00a      	beq.n	80010de <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80010c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010cc:	f383 8811 	msr	BASEPRI, r3
 80010d0:	f3bf 8f6f 	isb	sy
 80010d4:	f3bf 8f4f 	dsb	sy
 80010d8:	60fb      	str	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	e7fe      	b.n	80010dc <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80010de:	69fb      	ldr	r3, [r7, #28]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20004150 	.word	0x20004150
 80010ec:	2000415c 	.word	0x2000415c
 80010f0:	20004154 	.word	0x20004154
 80010f4:	20004148 	.word	0x20004148
 80010f8:	20004158 	.word	0x20004158

080010fc <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d048      	beq.n	80011a0 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800110e:	2308      	movs	r3, #8
 8001110:	425b      	negs	r3, r3
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <vPortFreeMicroROS+0xac>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10a      	bne.n	8001140 <vPortFreeMicroROS+0x44>
	__asm volatile
 800112a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800112e:	f383 8811 	msr	BASEPRI, r3
 8001132:	f3bf 8f6f 	isb	sy
 8001136:	f3bf 8f4f 	dsb	sy
 800113a:	60fb      	str	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	e7fe      	b.n	800113e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00a      	beq.n	800115e <vPortFreeMicroROS+0x62>
	__asm volatile
 8001148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	60bb      	str	r3, [r7, #8]
}
 800115a:	bf00      	nop
 800115c:	e7fe      	b.n	800115c <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <vPortFreeMicroROS+0xac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d019      	beq.n	80011a0 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d115      	bne.n	80011a0 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <vPortFreeMicroROS+0xac>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	43db      	mvns	r3, r3
 800117e:	401a      	ands	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001184:	f009 fe9a 	bl	800aebc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <vPortFreeMicroROS+0xb0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4413      	add	r3, r2
 8001192:	4a06      	ldr	r2, [pc, #24]	; (80011ac <vPortFreeMicroROS+0xb0>)
 8001194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001196:	6938      	ldr	r0, [r7, #16]
 8001198:	f000 f8e8 	bl	800136c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800119c:	f009 fe9c 	bl	800aed8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000415c 	.word	0x2000415c
 80011ac:	20004154 	.word	0x20004154

080011b0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011bc:	2308      	movs	r3, #8
 80011be:	425b      	negs	r3, r3
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <getBlockSize+0x38>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]

	return count;
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000415c 	.word	0x2000415c

080011ec <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80011f6:	f009 fe61 	bl	800aebc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80011fa:	6838      	ldr	r0, [r7, #0]
 80011fc:	f7ff feba 	bl	8000f74 <pvPortMallocMicroROS>
 8001200:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001206:	2308      	movs	r3, #8
 8001208:	425b      	negs	r3, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <pvPortReallocMicroROS+0x70>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	43db      	mvns	r3, r3
 8001226:	4013      	ands	r3, r2
 8001228:	617b      	str	r3, [r7, #20]

  	while(count--)
 800122a:	e007      	b.n	800123c <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	1c53      	adds	r3, r2, #1
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1c59      	adds	r1, r3, #1
 8001236:	61b9      	str	r1, [r7, #24]
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	1e5a      	subs	r2, r3, #1
 8001240:	617a      	str	r2, [r7, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f2      	bne.n	800122c <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff58 	bl	80010fc <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 800124c:	f009 fe44 	bl	800aed8 <xTaskResumeAll>

	return newmem;
 8001250:	693b      	ldr	r3, [r7, #16]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000415c 	.word	0x2000415c

08001260 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800126a:	f009 fe27 	bl	800aebc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001278:	6978      	ldr	r0, [r7, #20]
 800127a:	f7ff fe7b 	bl	8000f74 <pvPortMallocMicroROS>
 800127e:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001284:	e004      	b.n	8001290 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	613a      	str	r2, [r7, #16]
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	617a      	str	r2, [r7, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f5      	bne.n	8001286 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800129a:	f009 fe1d 	bl	800aed8 <xTaskResumeAll>
  	return mem;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <prvHeapInit+0xac>)
 80012b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00c      	beq.n	80012dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3307      	adds	r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f023 0307 	bic.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <prvHeapInit+0xac>)
 80012d8:	4413      	add	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <prvHeapInit+0xb0>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <prvHeapInit+0xb0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	4413      	add	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012f4:	2208      	movs	r2, #8
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f023 0307 	bic.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <prvHeapInit+0xb4>)
 8001308:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <prvHeapInit+0xb4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <prvHeapInit+0xb4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	1ad2      	subs	r2, r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <prvHeapInit+0xb4>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <prvHeapInit+0xb8>)
 8001336:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	4a09      	ldr	r2, [pc, #36]	; (8001364 <prvHeapInit+0xbc>)
 800133e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <prvHeapInit+0xc0>)
 8001342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000148 	.word	0x20000148
 8001358:	20004148 	.word	0x20004148
 800135c:	20004150 	.word	0x20004150
 8001360:	20004158 	.word	0x20004158
 8001364:	20004154 	.word	0x20004154
 8001368:	2000415c 	.word	0x2000415c

0800136c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <prvInsertBlockIntoFreeList+0xac>)
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e002      	b.n	8001380 <prvInsertBlockIntoFreeList+0x14>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	429a      	cmp	r2, r3
 8001388:	d8f7      	bhi.n	800137a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4413      	add	r3, r2
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	d108      	bne.n	80013ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	441a      	add	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	441a      	add	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d118      	bne.n	80013f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <prvInsertBlockIntoFreeList+0xb0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d00d      	beq.n	80013ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	441a      	add	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e008      	b.n	80013fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <prvInsertBlockIntoFreeList+0xb0>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e003      	b.n	80013fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d002      	beq.n	800140a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20004148 	.word	0x20004148
 800141c:	20004150 	.word	0x20004150

08001420 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800142e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001434:	4904      	ldr	r1, [pc, #16]	; (8001448 <cubemx_transport_open+0x28>)
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f007 f8d8 	bl	80085ec <HAL_UART_Receive_DMA>
    return true;
 800143c:	2301      	movs	r3, #1
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20004160 	.word	0x20004160

0800144c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800145a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f007 f8f5 	bl	800864c <HAL_UART_DMAStop>
    return true;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001480:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b20      	cmp	r3, #32
 800148c:	d11c      	bne.n	80014c8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	b29b      	uxth	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f007 f82a 	bl	80084f0 <HAL_UART_Transmit_DMA>
 800149c:	4603      	mov	r3, r0
 800149e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80014a0:	e002      	b.n	80014a8 <cubemx_transport_write+0x3c>
            osDelay(1);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f008 fb42 	bl	8009b2c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80014a8:	7cfb      	ldrb	r3, [r7, #19]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <cubemx_transport_write+0x4e>
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	d1f3      	bne.n	80014a2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80014ba:	7cfb      	ldrb	r3, [r7, #19]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <cubemx_transport_write+0x58>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	e002      	b.n	80014ca <cubemx_transport_write+0x5e>
 80014c4:	2300      	movs	r3, #0
 80014c6:	e000      	b.n	80014ca <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80014c8:	2300      	movs	r3, #0
    }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80014e8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ee:	b672      	cpsid	i
}
 80014f0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <cubemx_transport_read+0x9c>)
 8001500:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001502:	b662      	cpsie	i
}
 8001504:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800150c:	2001      	movs	r0, #1
 800150e:	f008 fb0d 	bl	8009b2c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <cubemx_transport_read+0xa0>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <cubemx_transport_read+0x9c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d103      	bne.n	8001526 <cubemx_transport_read+0x52>
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbe3      	blt.n	80014ee <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800152a:	e011      	b.n	8001550 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <cubemx_transport_read+0xa0>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	440b      	add	r3, r1
 8001536:	4910      	ldr	r1, [pc, #64]	; (8001578 <cubemx_transport_read+0xa4>)
 8001538:	5c8a      	ldrb	r2, [r1, r2]
 800153a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <cubemx_transport_read+0xa0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <cubemx_transport_read+0xa0>)
 8001548:	6013      	str	r3, [r2, #0]
        wrote++;
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	3301      	adds	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <cubemx_transport_read+0xa0>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <cubemx_transport_read+0x9c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d003      	beq.n	8001564 <cubemx_transport_read+0x90>
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d3e3      	bcc.n	800152c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001564:	69bb      	ldr	r3, [r7, #24]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20004964 	.word	0x20004964
 8001574:	20004960 	.word	0x20004960
 8001578:	20004160 	.word	0x20004160

0800157c <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <MX_GPIO_Init+0xd0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a2c      	ldr	r2, [pc, #176]	; (800164c <MX_GPIO_Init+0xd0>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <MX_GPIO_Init+0xd0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <MX_GPIO_Init+0xd0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a25      	ldr	r2, [pc, #148]	; (800164c <MX_GPIO_Init+0xd0>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <MX_GPIO_Init+0xd0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_GPIO_Init+0xd0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <MX_GPIO_Init+0xd0>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_GPIO_Init+0xd0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_GPIO_Init+0xd0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <MX_GPIO_Init+0xd0>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_GPIO_Init+0xd0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2120      	movs	r1, #32
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <MX_GPIO_Init+0xd4>)
 8001608:	f003 fc1c 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800160c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001612:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_GPIO_Init+0xd8>)
 8001624:	f003 fa8a 	bl	8004b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001628:	2320      	movs	r3, #32
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_GPIO_Init+0xd4>)
 8001640:	f003 fa7c 	bl	8004b3c <HAL_GPIO_Init>

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020800 	.word	0x40020800

08001658 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001668:	d017      	beq.n	800169a <HAL_GPIO_EXTI_Callback+0x42>
 800166a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166e:	dc16      	bgt.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 8001670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001674:	d00e      	beq.n	8001694 <HAL_GPIO_EXTI_Callback+0x3c>
 8001676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167a:	dc10      	bgt.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 800167c:	2b08      	cmp	r3, #8
 800167e:	d010      	beq.n	80016a2 <HAL_GPIO_EXTI_Callback+0x4a>
 8001680:	2b08      	cmp	r3, #8
 8001682:	dc0c      	bgt.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 8001684:	2b01      	cmp	r3, #1
 8001686:	d002      	beq.n	800168e <HAL_GPIO_EXTI_Callback+0x36>
 8001688:	2b02      	cmp	r3, #2
 800168a:	d00c      	beq.n	80016a6 <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 800168c:	e007      	b.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 800168e:	f001 fc0f 	bl	8002eb0 <quadEncoder_CallbackIndexR>
					break;
 8001692:	e009      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8001694:	f001 fbe6 	bl	8002e64 <quadEncoder_CallbackIndexL>
					break;
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 800169a:	bf00      	nop
 800169c:	e004      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 800169e:	bf00      	nop
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 80016a2:	bf00      	nop
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 80016a6:	bf00      	nop


	}
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f003 fbdb 	bl	8004ea8 <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f8:	f001 f830 	bl	800275c <Error_Handler>
  }

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20004968 	.word	0x20004968
 8001704:	40005400 	.word	0x40005400
 8001708:	000186a0 	.word	0x000186a0

0800170c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;


void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART1_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001744:	f006 fd53 	bl	80081ee <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f001 f805 	bl	800275c <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200049bc 	.word	0x200049bc
 800175c:	40011000 	.word	0x40011000

08001760 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f006 fd29 	bl	80081ee <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 ffdb 	bl	800275c <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20004a00 	.word	0x20004a00
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <MX_DMA_Init+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a1e      	ldr	r2, [pc, #120]	; (800183c <MX_DMA_Init+0x88>)
 80017c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <MX_DMA_Init+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_DMA_Init+0x88>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <MX_DMA_Init+0x88>)
 80017e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_DMA_Init+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2105      	movs	r1, #5
 80017f6:	2010      	movs	r0, #16
 80017f8:	f002 fd66 	bl	80042c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017fc:	2010      	movs	r0, #16
 80017fe:	f002 fd7f 	bl	8004300 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2105      	movs	r1, #5
 8001806:	2011      	movs	r0, #17
 8001808:	f002 fd5e 	bl	80042c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800180c:	2011      	movs	r0, #17
 800180e:	f002 fd77 	bl	8004300 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	203a      	movs	r0, #58	; 0x3a
 8001818:	f002 fd56 	bl	80042c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800181c:	203a      	movs	r0, #58	; 0x3a
 800181e:	f002 fd6f 	bl	8004300 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2105      	movs	r1, #5
 8001826:	2046      	movs	r0, #70	; 0x46
 8001828:	f002 fd4e 	bl	80042c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800182c:	2046      	movs	r0, #70	; 0x46
 800182e:	f002 fd67 	bl	8004300 <HAL_NVIC_EnableIRQ>

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <CHECKMRRET>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);


void CHECKMRRET(rcl_ret_t ret, char* msg){
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	if (ret != RCL_RET_OK){ printf("Error : %d\r\nMsg : %s\r\n", (int)ret, msg); }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <CHECKMRRET+0x1a>
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <CHECKMRRET+0x24>)
 8001856:	f016 fcc7 	bl	80181e8 <iprintf>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	08019524 	.word	0x08019524

08001868 <SubscriberCallbackFunction>:

void SubscriberCallbackFunction(const void *msgin){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
#if SYNCHRO_EX == EXTEST_MICROROS
	std_msgs__msg__String * msg = (std_msgs__msg__String * )msgin;
	printf("\r\nMessage recue : %s\r\n", msg->data->data);
#elif SYNCHRO_EX == EXFINAL
	std_msgs__msg__Int32 * msg = (std_msgs__msg__Int32 * )msgin;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60fb      	str	r3, [r7, #12]
	printf("\r\nMessage recue : %ld\r\n", msg->data);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <SubscriberCallbackFunction+0x20>)
 800187c:	f016 fcb4 	bl	80181e8 <iprintf>
#endif //SYNCHRO_EX
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	0801953c 	.word	0x0801953c

0800188c <microros_task>:



void microros_task(void *argument)
{
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	b0ec      	sub	sp, #432	; 0x1b0
 8001890:	af02      	add	r7, sp, #8
 8001892:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001896:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800189a:	6018      	str	r0, [r3, #0]
	rcl_node_t node;
	rcl_node_options_t node_opt;
	rclc_executor_t executor;

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 800189c:	4bd5      	ldr	r3, [pc, #852]	; (8001bf4 <microros_task+0x368>)
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	4bd5      	ldr	r3, [pc, #852]	; (8001bf8 <microros_task+0x36c>)
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	4bd5      	ldr	r3, [pc, #852]	; (8001bfc <microros_task+0x370>)
 80018a6:	4ad6      	ldr	r2, [pc, #856]	; (8001c00 <microros_task+0x374>)
 80018a8:	49d6      	ldr	r1, [pc, #856]	; (8001c04 <microros_task+0x378>)
 80018aa:	2001      	movs	r0, #1
 80018ac:	f00c fa48 	bl	800dd40 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80018b0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00b ffab 	bl	800d814 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80018be:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018c2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018c6:	4ad0      	ldr	r2, [pc, #832]	; (8001c08 <microros_task+0x37c>)
 80018c8:	601a      	str	r2, [r3, #0]
	freeRTOS_allocator.deallocate = microros_deallocate;
 80018ca:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018ce:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018d2:	4ace      	ldr	r2, [pc, #824]	; (8001c0c <microros_task+0x380>)
 80018d4:	605a      	str	r2, [r3, #4]
	freeRTOS_allocator.reallocate = microros_reallocate;
 80018d6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018da:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018de:	4acc      	ldr	r2, [pc, #816]	; (8001c10 <microros_task+0x384>)
 80018e0:	609a      	str	r2, [r3, #8]
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80018e2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018ea:	4aca      	ldr	r2, [pc, #808]	; (8001c14 <microros_task+0x388>)
 80018ec:	60da      	str	r2, [r3, #12]

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80018ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00b ff9c 	bl	800d830 <rcutils_set_default_allocator>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <microros_task+0x80>
		printf("Error on default allocators (line %d)\r\n", __LINE__);
 8001904:	21ad      	movs	r1, #173	; 0xad
 8001906:	48c4      	ldr	r0, [pc, #784]	; (8001c18 <microros_task+0x38c>)
 8001908:	f016 fc6e 	bl	80181e8 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 800190c:	463b      	mov	r3, r7
 800190e:	4618      	mov	r0, r3
 8001910:	f00b ffae 	bl	800d870 <rcutils_get_default_allocator>
 8001914:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001918:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800191c:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8001920:	461d      	mov	r5, r3
 8001922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	6023      	str	r3, [r4, #0]
	//create init_options
	CHECKMRRET(rclc_support_init(&support, 0, NULL, &allocator), "error on init support");
 800192a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800192e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	f00b fe81 	bl	800d63c <rclc_support_init>
 800193a:	4603      	mov	r3, r0
 800193c:	49b7      	ldr	r1, [pc, #732]	; (8001c1c <microros_task+0x390>)
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff7e 	bl	8001840 <CHECKMRRET>
	// create node
	//CHECKMRRET(rclc_node_init_default(&node, "STM32_node", "", &support), "error on init node");
	node_opt = rcl_node_get_default_options();
 8001944:	463b      	mov	r3, r7
 8001946:	4618      	mov	r0, r3
 8001948:	f00b f830 	bl	800c9ac <rcl_node_get_default_options>
 800194c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001950:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001954:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001958:	461d      	mov	r5, r3
 800195a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800195e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001962:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	node_opt.domain_id = ROS_DOMAIN_ID;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	CHECKMRRET(rclc_node_init_with_options(&node, "STM32_node", "", &support, &node_opt), "error on init node");
 800196c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001970:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8001974:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	4613      	mov	r3, r2
 800197c:	4aa8      	ldr	r2, [pc, #672]	; (8001c20 <microros_task+0x394>)
 800197e:	49a9      	ldr	r1, [pc, #676]	; (8001c24 <microros_task+0x398>)
 8001980:	f00b feaa 	bl	800d6d8 <rclc_node_init_with_options>
 8001984:	4603      	mov	r3, r0
 8001986:	49a8      	ldr	r1, [pc, #672]	; (8001c28 <microros_task+0x39c>)
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff59 	bl	8001840 <CHECKMRRET>
	{
		ret = rclc_executor_spin_some(&executor, 100*1000*1000);
		vTaskDelay(SAMPLING_PERIOD_ms);
	}
#elif SYNCHRO_EX == EXFINAL
	MicroRosPubMsg MsgToPub = {'N', 0, 0};
 800198e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001996:	224e      	movs	r2, #78	; 0x4e
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800199e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80019aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
	MicroRosSubMsg SubToMsg = {STOP, 0, 0, MODE_OBS, LOW};
 80019b2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80019b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019ba:	4a9c      	ldr	r2, [pc, #624]	; (8001c2c <microros_task+0x3a0>)
 80019bc:	461c      	mov	r4, r3
 80019be:	4615      	mov	r5, r2
 80019c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c4:	682b      	ldr	r3, [r5, #0]
 80019c6:	6023      	str	r3, [r4, #0]
	/* PUBLISHER */
	//Use to publish the direction of robot in sensor mode
	rcl_publisher_t capteur_dir_pub;
	char* capteur_dir_topic = "capteur/dir";
 80019c8:	4b99      	ldr	r3, [pc, #612]	; (8001c30 <microros_task+0x3a4>)
 80019ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	std_msgs__msg__Int32 capteur_dir_msg;
	//Use to publish the actual mode of the robot
	rcl_publisher_t etat_mode_pub;
	char* etat_mode_topic = "etat/mode";
 80019ce:	4b99      	ldr	r3, [pc, #612]	; (8001c34 <microros_task+0x3a8>)
 80019d0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	std_msgs__msg__Int32 etat_mode_msg;
	//Use to publish the actual speed of the robot
	rcl_publisher_t etat_speed_pub;
	char* etat_speed_topic = "etat/speed";
 80019d4:	4b98      	ldr	r3, [pc, #608]	; (8001c38 <microros_task+0x3ac>)
 80019d6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	std_msgs__msg__Int32 etat_speed_msg;

	/* SUBSCRIBER */
	//Use to receive the x position of object see by the camera
	rcl_subscription_t camera_x_sub;
	char* camera_x_topic = "camera/x";
 80019da:	4b98      	ldr	r3, [pc, #608]	; (8001c3c <microros_task+0x3b0>)
 80019dc:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	std_msgs__msg__Int32 camera_x_msg;
	//Use to receive the y position of object see by the camera
	rcl_subscription_t camera_y_sub;
	char* camera_y_topic = "camera/y";
 80019e0:	4b97      	ldr	r3, [pc, #604]	; (8001c40 <microros_task+0x3b4>)
 80019e2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	std_msgs__msg__Int32 camera_y_msg;
	//Use to receive the remote control in remote mode
	rcl_subscription_t telecommande_dir_sub;
	char* telecommande_dir_topic = "telecommande/dir";
 80019e6:	4b97      	ldr	r3, [pc, #604]	; (8001c44 <microros_task+0x3b8>)
 80019e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	std_msgs__msg__Int32 telecommande_dir_msg;
	//Use to receive the mode config
	rcl_subscription_t config_mode_sub;
	char* config_mode_topic = "config/mode";
 80019ec:	4b96      	ldr	r3, [pc, #600]	; (8001c48 <microros_task+0x3bc>)
 80019ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	std_msgs__msg__Int32 config_mode_msg;
	//Use to receive the speed config
	rcl_subscription_t config_speed_sub;
	char* config_speed_topic = "config/speed";
 80019f2:	4b96      	ldr	r3, [pc, #600]	; (8001c4c <microros_task+0x3c0>)
 80019f4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	std_msgs__msg__Int32 config_speed_msg;

	// create publisher
	createPublisher(&capteur_dir_pub, &node,
 80019f8:	f00d f814 	bl	800ea24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a02:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001a06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a10:	f000 feaa 	bl	8002768 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		capteur_dir_topic, &capteur_dir_msg);

	createPublisher(&etat_mode_pub, &node,
 8001a14:	f00d f806 	bl	800ea24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a1e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001a22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a2c:	f000 fe9c 	bl	8002768 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_mode_topic, &etat_mode_msg);

	createPublisher(&etat_speed_pub, &node,
 8001a30:	f00c fff8 	bl	800ea24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a3a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001a3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001a48:	f000 fe8e 	bl	8002768 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_speed_topic, &etat_speed_msg);

	//create subscriber
	createSubscriber(&camera_x_sub,&node,
 8001a4c:	f00c ffea 	bl	800ea24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a56:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001a5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001a64:	f000 fe9c 	bl	80027a0 <createSubscriber>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		camera_x_topic, &camera_x_msg);

	createSubscriber(&camera_y_sub,&node,
 8001a68:	f00c ffdc 	bl	800ea24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a72:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001a76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a80:	f000 fe8e 	bl	80027a0 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			camera_y_topic, &camera_y_msg);

	createSubscriber(&telecommande_dir_sub,&node,
 8001a84:	f00c ffce 	bl	800ea24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a8e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001a92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a9c:	f000 fe80 	bl	80027a0 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			telecommande_dir_topic, &telecommande_dir_msg);

	createSubscriber(&config_mode_sub,&node,
 8001aa0:	f00c ffc0 	bl	800ea24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001aaa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ab8:	f000 fe72 	bl	80027a0 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_mode_topic, &config_mode_msg);

	createSubscriber(&config_speed_sub,&node,
 8001abc:	f00c ffb2 	bl	800ea24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001ac6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ad4:	f000 fe64 	bl	80027a0 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_speed_topic, &config_speed_msg);

	CHECKMRRET(rclc_executor_init(&executor, &support.context, 5, &allocator), "Error on init executor");
 8001ad8:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001adc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ae0:	1d19      	adds	r1, r3, #4
 8001ae2:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	2205      	movs	r2, #5
 8001aea:	f00b fb49 	bl	800d180 <rclc_executor_init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4957      	ldr	r1, [pc, #348]	; (8001c50 <microros_task+0x3c4>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fea4 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_x_sub, &camera_x_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_x_sub");
 8001af8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001afc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b00:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b04:	2300      	movs	r3, #0
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4b52      	ldr	r3, [pc, #328]	; (8001c54 <microros_task+0x3c8>)
 8001b0a:	f00b fbad 	bl	800d268 <rclc_executor_add_subscription>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4951      	ldr	r1, [pc, #324]	; (8001c58 <microros_task+0x3cc>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fe94 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_y_sub, &camera_y_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_y_sub");
 8001b18:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b1c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001b20:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b24:	2300      	movs	r3, #0
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <microros_task+0x3c8>)
 8001b2a:	f00b fb9d 	bl	800d268 <rclc_executor_add_subscription>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	494a      	ldr	r1, [pc, #296]	; (8001c5c <microros_task+0x3d0>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fe84 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &telecommande_dir_sub, &telecommande_dir_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add telecommande_dir_sub");
 8001b38:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b3c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b40:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <microros_task+0x3c8>)
 8001b4a:	f00b fb8d 	bl	800d268 <rclc_executor_add_subscription>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4943      	ldr	r1, [pc, #268]	; (8001c60 <microros_task+0x3d4>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fe74 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_mode_sub, &config_mode_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_mode_sub");
 8001b58:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001b5c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b60:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b64:	2300      	movs	r3, #0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <microros_task+0x3c8>)
 8001b6a:	f00b fb7d 	bl	800d268 <rclc_executor_add_subscription>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	493c      	ldr	r1, [pc, #240]	; (8001c64 <microros_task+0x3d8>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fe64 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_speed_sub, &config_speed_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_speed_sub");
 8001b78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001b7c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b80:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b84:	2300      	movs	r3, #0
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <microros_task+0x3c8>)
 8001b8a:	f00b fb6d 	bl	800d268 <rclc_executor_add_subscription>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4935      	ldr	r1, [pc, #212]	; (8001c68 <microros_task+0x3dc>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fe54 	bl	8001840 <CHECKMRRET>

	for(;;)
	{
		if (!uxQueueMessagesWaiting(qhMR_sub))
 8001b98:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <microros_task+0x3e0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f008 fd8d 	bl	800a6bc <uxQueueMessagesWaiting>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d108      	bne.n	8001bba <microros_task+0x32e>
			xQueueSend(qhMR_sub, ( void * ) &SubToMsg, portMAX_DELAY);
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <microros_task+0x3e0>)
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb6:	f008 f9fb 	bl	8009fb0 <xQueueGenericSend>
		rclc_executor_spin_some(&executor, 1*1000*1000);
 8001bba:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001bbe:	4a2c      	ldr	r2, [pc, #176]	; (8001c70 <microros_task+0x3e4>)
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	f00b fd03 	bl	800d5d0 <rclc_executor_spin_some>
		SubToMsg.dir = telecommande_dir_msg.data;
 8001bca:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001bce:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001bd8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001bdc:	601a      	str	r2, [r3, #0]
		SubToMsg.x = camera_x_msg.data;
 8001bde:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001be2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001bec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	e03f      	b.n	8001c74 <microros_task+0x3e8>
 8001bf4:	080014d5 	.word	0x080014d5
 8001bf8:	0800146d 	.word	0x0800146d
 8001bfc:	0800144d 	.word	0x0800144d
 8001c00:	08001421 	.word	0x08001421
 8001c04:	200049bc 	.word	0x200049bc
 8001c08:	080027e5 	.word	0x080027e5
 8001c0c:	08002829 	.word	0x08002829
 8001c10:	08002861 	.word	0x08002861
 8001c14:	080028cd 	.word	0x080028cd
 8001c18:	08019554 	.word	0x08019554
 8001c1c:	0801957c 	.word	0x0801957c
 8001c20:	08019594 	.word	0x08019594
 8001c24:	08019598 	.word	0x08019598
 8001c28:	080195a4 	.word	0x080195a4
 8001c2c:	08019724 	.word	0x08019724
 8001c30:	080195b8 	.word	0x080195b8
 8001c34:	080195c4 	.word	0x080195c4
 8001c38:	080195d0 	.word	0x080195d0
 8001c3c:	080195dc 	.word	0x080195dc
 8001c40:	080195e8 	.word	0x080195e8
 8001c44:	080195f4 	.word	0x080195f4
 8001c48:	08019608 	.word	0x08019608
 8001c4c:	08019614 	.word	0x08019614
 8001c50:	08019624 	.word	0x08019624
 8001c54:	08001869 	.word	0x08001869
 8001c58:	0801963c 	.word	0x0801963c
 8001c5c:	08019654 	.word	0x08019654
 8001c60:	0801966c 	.word	0x0801966c
 8001c64:	0801968c 	.word	0x0801968c
 8001c68:	080196a8 	.word	0x080196a8
 8001c6c:	20004bd0 	.word	0x20004bd0
 8001c70:	000f4240 	.word	0x000f4240
		SubToMsg.y = camera_y_msg.data;
 8001c74:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c78:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c86:	609a      	str	r2, [r3, #8]
		SubToMsg.mode = config_mode_msg.data;
 8001c88:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c8c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c9a:	60da      	str	r2, [r3, #12]
		SubToMsg.speed = config_speed_msg.data;
 8001c9c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001ca0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001caa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001cae:	611a      	str	r2, [r3, #16]

		if (uxQueueMessagesWaiting(qhMR_pub))
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <microros_task+0x4dc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f008 fd01 	bl	800a6bc <uxQueueMessagesWaiting>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d04e      	beq.n	8001d5e <microros_task+0x4d2>
		{
			xQueueReceive(qhMR_pub, &MsgToPub, portMAX_DELAY);
 8001cc0:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <microros_task+0x4dc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f008 fb09 	bl	800a2e4 <xQueueReceive>
			capteur_dir_msg.data = (int)MsgToPub.dir;
 8001cd2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001ce2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ce6:	601a      	str	r2, [r3, #0]
			etat_mode_msg.data = MsgToPub.mode;
 8001ce8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001cf6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001cfa:	601a      	str	r2, [r3, #0]
			etat_speed_msg.data = MsgToPub.speed;
 8001cfc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d0a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001d0e:	601a      	str	r2, [r3, #0]
			CHECKMRRET(rcl_publish(&capteur_dir_pub, &capteur_dir_msg, NULL), "erreur publish capteur_dir_pub");
 8001d10:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001d14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f00a ff9e 	bl	800cc5c <rcl_publish>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4912      	ldr	r1, [pc, #72]	; (8001d6c <microros_task+0x4e0>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fd8b 	bl	8001840 <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_mode_pub, &etat_mode_msg, NULL), "erreur publish etat_mode_pub");
 8001d2a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001d2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d32:	2200      	movs	r2, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00a ff91 	bl	800cc5c <rcl_publish>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	490c      	ldr	r1, [pc, #48]	; (8001d70 <microros_task+0x4e4>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fd7e 	bl	8001840 <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_speed_pub, &etat_speed_msg, NULL), "erreur publish etat_speed_pub");
 8001d44:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001d48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f00a ff84 	bl	800cc5c <rcl_publish>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4907      	ldr	r1, [pc, #28]	; (8001d74 <microros_task+0x4e8>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fd71 	bl	8001840 <CHECKMRRET>
			#if DEBUG_PRINTF
			printf("\r\nReceive from decision :\r\nDirection : %d\r\nMode : %d\r\nSpeed : %d\r\n", capteur_dir_msg.data, etat_mode_msg.data, etat_speed_msg.data);
			#endif //DEBUG_PRINTF
		}
		vTaskDelay(SAMPLING_PERIOD_ms);
 8001d5e:	2005      	movs	r0, #5
 8001d60:	f009 f808 	bl	800ad74 <vTaskDelay>
		if (!uxQueueMessagesWaiting(qhMR_sub))
 8001d64:	e718      	b.n	8001b98 <microros_task+0x30c>
 8001d66:	bf00      	nop
 8001d68:	20004bd4 	.word	0x20004bd4
 8001d6c:	080196c4 	.word	0x080196c4
 8001d70:	080196e4 	.word	0x080196e4
 8001d74:	08019704 	.word	0x08019704

08001d78 <task_Motor_Left>:
	}
#endif //SYNCHRO_EX
}
//========================================================================
static void task_Motor_Left(void *pvParameters)
{
 8001d78:	b5b0      	push	{r4, r5, r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	817b      	strh	r3, [r7, #10]

	float ui = 0.0;
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
	float up = 0.0;
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
	int err = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
	int speed = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]

	int state = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]

	for (;;)
	{
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
 8001d9c:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <task_Motor_Left+0x100>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f107 010a 	add.w	r1, r7, #10
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001da8:	4618      	mov	r0, r3
 8001daa:	f008 fa9b 	bl	800a2e4 <xQueueReceive>

		speed = quadEncoder_GetSpeedL();
 8001dae:	f000 ffb5 	bl	8002d1c <quadEncoder_GetSpeedL>
 8001db2:	4603      	mov	r3, r0
 8001db4:	613b      	str	r3, [r7, #16]
		err=consigne-speed;
 8001db6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	617b      	str	r3, [r7, #20]
		up=LKp*(float)err;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dcc:	ee17 0a90 	vmov	r0, s15
 8001dd0:	f7fe fbd2 	bl	8000578 <__aeabi_f2d>
 8001dd4:	a324      	add	r3, pc, #144	; (adr r3, 8001e68 <task_Motor_Left+0xf0>)
 8001dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dda:	f7fe fc25 	bl	8000628 <__aeabi_dmul>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f7fe fe31 	bl	8000a4c <__aeabi_d2f>
 8001dea:	4603      	mov	r3, r0
 8001dec:	61bb      	str	r3, [r7, #24]
		ui=ui+LKp*LKi*(float)err;
 8001dee:	69f8      	ldr	r0, [r7, #28]
 8001df0:	f7fe fbc2 	bl	8000578 <__aeabi_f2d>
 8001df4:	4604      	mov	r4, r0
 8001df6:	460d      	mov	r5, r1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e02:	ee17 0a90 	vmov	r0, s15
 8001e06:	f7fe fbb7 	bl	8000578 <__aeabi_f2d>
 8001e0a:	a319      	add	r3, pc, #100	; (adr r3, 8001e70 <task_Motor_Left+0xf8>)
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	f7fe fc0a 	bl	8000628 <__aeabi_dmul>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4620      	mov	r0, r4
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	f7fe fa4e 	bl	80002bc <__adddf3>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe fe10 	bl	8000a4c <__aeabi_d2f>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	61fb      	str	r3, [r7, #28]

		motorLeft_SetDuty(100+(int)(up+ui));
 8001e30:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e34:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e40:	ee17 3a90 	vmov	r3, s15
 8001e44:	3364      	adds	r3, #100	; 0x64
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fe8c 	bl	8002b64 <motorLeft_SetDuty>

		xSemaphoreGive(xSem_Supervision);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <task_Motor_Left+0x104>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	2300      	movs	r3, #0
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	f008 f8ab 	bl	8009fb0 <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8001e5a:	2005      	movs	r0, #5
 8001e5c:	f008 ff8a 	bl	800ad74 <vTaskDelay>
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
 8001e60:	e79c      	b.n	8001d9c <task_Motor_Left+0x24>
 8001e62:	bf00      	nop
 8001e64:	f3af 8000 	nop.w
 8001e68:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e6c:	3f50624d 	.word	0x3f50624d
 8001e70:	47ae147b 	.word	0x47ae147b
 8001e74:	3f547ae1 	.word	0x3f547ae1
 8001e78:	20004bc8 	.word	0x20004bc8
 8001e7c:	20004bc4 	.word	0x20004bc4

08001e80 <task_Motor_Right>:
	}
}

//=========================================================================
static void task_Motor_Right(void *pvParameters)
{
 8001e80:	b5b0      	push	{r4, r5, r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	81fb      	strh	r3, [r7, #14]

	float ui= 0.0;
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
	float up = 0.0;
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
	int err = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
	int speed = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]

	for (;;)
	{
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
 8001ea0:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <task_Motor_Right+0xf8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f107 010e 	add.w	r1, r7, #14
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eac:	4618      	mov	r0, r3
 8001eae:	f008 fa19 	bl	800a2e4 <xQueueReceive>

		speed = quadEncoder_GetSpeedR();
 8001eb2:	f000 ff85 	bl	8002dc0 <quadEncoder_GetSpeedR>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	613b      	str	r3, [r7, #16]
		err=consigne-speed;
 8001eba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
		up=RKp*(float)err;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed0:	ee17 0a90 	vmov	r0, s15
 8001ed4:	f7fe fb50 	bl	8000578 <__aeabi_f2d>
 8001ed8:	a323      	add	r3, pc, #140	; (adr r3, 8001f68 <task_Motor_Right+0xe8>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fba3 	bl	8000628 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7fe fdaf 	bl	8000a4c <__aeabi_d2f>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	61bb      	str	r3, [r7, #24]
		ui=ui+RKp*RKi*(float)err;
 8001ef2:	69f8      	ldr	r0, [r7, #28]
 8001ef4:	f7fe fb40 	bl	8000578 <__aeabi_f2d>
 8001ef8:	4604      	mov	r4, r0
 8001efa:	460d      	mov	r5, r1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f06:	ee17 0a90 	vmov	r0, s15
 8001f0a:	f7fe fb35 	bl	8000578 <__aeabi_f2d>
 8001f0e:	a318      	add	r3, pc, #96	; (adr r3, 8001f70 <task_Motor_Right+0xf0>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	f7fe fb88 	bl	8000628 <__aeabi_dmul>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f7fe f9cc 	bl	80002bc <__adddf3>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fd8e 	bl	8000a4c <__aeabi_d2f>
 8001f30:	4603      	mov	r3, r0
 8001f32:	61fb      	str	r3, [r7, #28]

		motorRight_SetDuty(100+(int)(up+ui));
 8001f34:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f38:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f44:	ee17 3a90 	vmov	r3, s15
 8001f48:	3364      	adds	r3, #100	; 0x64
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fe1a 	bl	8002b84 <motorRight_SetDuty>

		xSemaphoreGive(xSem_Supervision);
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <task_Motor_Right+0xfc>)
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	2300      	movs	r3, #0
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	f008 f829 	bl	8009fb0 <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8001f5e:	2005      	movs	r0, #5
 8001f60:	f008 ff08 	bl	800ad74 <vTaskDelay>
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
 8001f64:	e79c      	b.n	8001ea0 <task_Motor_Right+0x20>
 8001f66:	bf00      	nop
 8001f68:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f6c:	3f50624d 	.word	0x3f50624d
 8001f70:	47ae147b 	.word	0x47ae147b
 8001f74:	3f547ae1 	.word	0x3f547ae1
 8001f78:	20004bcc 	.word	0x20004bcc
 8001f7c:	20004bc4 	.word	0x20004bc4

08001f80 <task_Supervision>:
}
#endif

//=========================================================================
static void task_Supervision(void *pvParameters)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
#elif SYNCHRO_EX == EXFINAL
	int16_t speedLeft;
	int16_t speedRight;

	int table[2];
	int vl53 = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
#endif //MICROROS

	for (;;)
	{
		#if MICROROS
		if (uxQueueMessagesWaiting(qhMR_sub))
 8001f8c:	4b9c      	ldr	r3, [pc, #624]	; (8002200 <task_Supervision+0x280>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f008 fb93 	bl	800a6bc <uxQueueMessagesWaiting>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d029      	beq.n	8001ff0 <task_Supervision+0x70>
		{
			xQueueReceive(qhMR_sub, &SubToMsg, portMAX_DELAY);
 8001f9c:	4b98      	ldr	r3, [pc, #608]	; (8002200 <task_Supervision+0x280>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f107 0114 	add.w	r1, r7, #20
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f008 f99b 	bl	800a2e4 <xQueueReceive>
			if (SubToMsg.mode >= 0 && SubToMsg.mode < LAST_MODE)
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db05      	blt.n	8001fc0 <task_Supervision+0x40>
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	dc02      	bgt.n	8001fc0 <task_Supervision+0x40>
				mode = SubToMsg.mode;
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	4a91      	ldr	r2, [pc, #580]	; (8002204 <task_Supervision+0x284>)
 8001fbe:	6013      	str	r3, [r2, #0]
			if (SubToMsg.dir >= 0 && SubToMsg.dir < LAST_DIR)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db05      	blt.n	8001fd2 <task_Supervision+0x52>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	dc02      	bgt.n	8001fd2 <task_Supervision+0x52>
				direction = SubToMsg.dir;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	4a8e      	ldr	r2, [pc, #568]	; (8002208 <task_Supervision+0x288>)
 8001fd0:	6013      	str	r3, [r2, #0]
			if (SubToMsg.speed > 0 && SubToMsg.speed < LAST_SPEED)
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	dd05      	ble.n	8001fe4 <task_Supervision+0x64>
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	dc02      	bgt.n	8001fe4 <task_Supervision+0x64>
				speed = SubToMsg.speed;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	4a8a      	ldr	r2, [pc, #552]	; (800220c <task_Supervision+0x28c>)
 8001fe2:	6013      	str	r3, [r2, #0]
			x = SubToMsg.x;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	4a8a      	ldr	r2, [pc, #552]	; (8002210 <task_Supervision+0x290>)
 8001fe8:	6013      	str	r3, [r2, #0]
			y = SubToMsg.y;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	4a89      	ldr	r2, [pc, #548]	; (8002214 <task_Supervision+0x294>)
 8001fee:	6013      	str	r3, [r2, #0]
			printf("%cc%c[2J%c[0;0HVariable to make decision : \n\rDirection : %d\r\nMode: %d\r\nSpeed : %d\r\nX: %d\r\nY : %d\r\n", 0x1b, 0x1b, 0x1b, direction, mode, speed, x, y);
			#endif //DEBUG_PRINTF
		}
		#endif //MICROROS

		if (mode == MODE_ZIG)
 8001ff0:	4b84      	ldr	r3, [pc, #528]	; (8002204 <task_Supervision+0x284>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	f040 8113 	bne.w	8002220 <task_Supervision+0x2a0>
		{
			dir = 'N';
 8001ffa:	4b87      	ldr	r3, [pc, #540]	; (8002218 <task_Supervision+0x298>)
 8001ffc:	224e      	movs	r2, #78	; 0x4e
 8001ffe:	701a      	strb	r2, [r3, #0]
			obs = 0;
 8002000:	4b86      	ldr	r3, [pc, #536]	; (800221c <task_Supervision+0x29c>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
			switch(direction)
 8002006:	4b80      	ldr	r3, [pc, #512]	; (8002208 <task_Supervision+0x288>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b08      	cmp	r3, #8
 800200c:	f200 80f3 	bhi.w	80021f6 <task_Supervision+0x276>
 8002010:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <task_Supervision+0x98>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	08002047 	.word	0x08002047
 800201c:	080020e9 	.word	0x080020e9
 8002020:	08002079 	.word	0x08002079
 8002024:	080020b3 	.word	0x080020b3
 8002028:	0800203d 	.word	0x0800203d
 800202c:	0800211f 	.word	0x0800211f
 8002030:	08002151 	.word	0x08002151
 8002034:	08002183 	.word	0x08002183
 8002038:	080021bd 	.word	0x080021bd
			{
				case STOP:
					speedLeft = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002044:	e269      	b.n	800251a <task_Supervision+0x59a>
				case AVANT:
					speedLeft = VITESSE_KART*speed;
 8002046:	4b71      	ldr	r3, [pc, #452]	; (800220c <task_Supervision+0x28c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	0152      	lsls	r2, r2, #5
 8002050:	1ad2      	subs	r2, r2, r3
 8002052:	0092      	lsls	r2, r2, #2
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	b29b      	uxth	r3, r3
 800205a:	b21b      	sxth	r3, r3
 800205c:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = VITESSE_KART*speed;
 800205e:	4b6b      	ldr	r3, [pc, #428]	; (800220c <task_Supervision+0x28c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	0152      	lsls	r2, r2, #5
 8002068:	1ad2      	subs	r2, r2, r3
 800206a:	0092      	lsls	r2, r2, #2
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21b      	sxth	r3, r3
 8002074:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002076:	e250      	b.n	800251a <task_Supervision+0x59a>
				case RECULE:
					speedLeft = -VITESSE_KART*speed;
 8002078:	4b64      	ldr	r3, [pc, #400]	; (800220c <task_Supervision+0x28c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	01d2      	lsls	r2, r2, #7
 8002082:	1ad2      	subs	r2, r2, r3
 8002084:	0192      	lsls	r2, r2, #6
 8002086:	441a      	add	r2, r3
 8002088:	0052      	lsls	r2, r2, #1
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	b29b      	uxth	r3, r3
 8002090:	b21b      	sxth	r3, r3
 8002092:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_KART*speed;
 8002094:	4b5d      	ldr	r3, [pc, #372]	; (800220c <task_Supervision+0x28c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	01d2      	lsls	r2, r2, #7
 800209e:	1ad2      	subs	r2, r2, r3
 80020a0:	0192      	lsls	r2, r2, #6
 80020a2:	441a      	add	r2, r3
 80020a4:	0052      	lsls	r2, r2, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80020b0:	e233      	b.n	800251a <task_Supervision+0x59a>
				case DROITE:
					speedLeft = VITESSE_KART*speed;
 80020b2:	4b56      	ldr	r3, [pc, #344]	; (800220c <task_Supervision+0x28c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	0152      	lsls	r2, r2, #5
 80020bc:	1ad2      	subs	r2, r2, r3
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_KART*speed;
 80020ca:	4b50      	ldr	r3, [pc, #320]	; (800220c <task_Supervision+0x28c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	01d2      	lsls	r2, r2, #7
 80020d4:	1ad2      	subs	r2, r2, r3
 80020d6:	0192      	lsls	r2, r2, #6
 80020d8:	441a      	add	r2, r3
 80020da:	0052      	lsls	r2, r2, #1
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80020e6:	e218      	b.n	800251a <task_Supervision+0x59a>
				case GAUCHE:
					speedLeft = -VITESSE_KART*speed;
 80020e8:	4b48      	ldr	r3, [pc, #288]	; (800220c <task_Supervision+0x28c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	01d2      	lsls	r2, r2, #7
 80020f2:	1ad2      	subs	r2, r2, r3
 80020f4:	0192      	lsls	r2, r2, #6
 80020f6:	441a      	add	r2, r3
 80020f8:	0052      	lsls	r2, r2, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	b21b      	sxth	r3, r3
 8002102:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = VITESSE_KART*speed;
 8002104:	4b41      	ldr	r3, [pc, #260]	; (800220c <task_Supervision+0x28c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	0152      	lsls	r2, r2, #5
 800210e:	1ad2      	subs	r2, r2, r3
 8002110:	0092      	lsls	r2, r2, #2
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	b29b      	uxth	r3, r3
 8002118:	b21b      	sxth	r3, r3
 800211a:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 800211c:	e1fd      	b.n	800251a <task_Supervision+0x59a>
				case AVANT_GAUCHE:
					speedLeft = (VITESSE_KART/2)*speed;
 800211e:	4b3b      	ldr	r3, [pc, #236]	; (800220c <task_Supervision+0x28c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	0152      	lsls	r2, r2, #5
 8002128:	1ad2      	subs	r2, r2, r3
 800212a:	0092      	lsls	r2, r2, #2
 800212c:	4413      	add	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	b29b      	uxth	r3, r3
 8002132:	b21b      	sxth	r3, r3
 8002134:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = VITESSE_KART*speed;
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <task_Supervision+0x28c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	0152      	lsls	r2, r2, #5
 8002140:	1ad2      	subs	r2, r2, r3
 8002142:	0092      	lsls	r2, r2, #2
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	b29b      	uxth	r3, r3
 800214a:	b21b      	sxth	r3, r3
 800214c:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 800214e:	e1e4      	b.n	800251a <task_Supervision+0x59a>
				case AVANT_DROITE:
					speedLeft = VITESSE_KART*speed;
 8002150:	4b2e      	ldr	r3, [pc, #184]	; (800220c <task_Supervision+0x28c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	0152      	lsls	r2, r2, #5
 800215a:	1ad2      	subs	r2, r2, r3
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	b29b      	uxth	r3, r3
 8002164:	b21b      	sxth	r3, r3
 8002166:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = (VITESSE_KART/2)*speed;
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <task_Supervision+0x28c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	0152      	lsls	r2, r2, #5
 8002172:	1ad2      	subs	r2, r2, r3
 8002174:	0092      	lsls	r2, r2, #2
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	b29b      	uxth	r3, r3
 800217c:	b21b      	sxth	r3, r3
 800217e:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002180:	e1cb      	b.n	800251a <task_Supervision+0x59a>
				case RECULE_GAUCHE:
					speedLeft = -VITESSE_KART*speed;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <task_Supervision+0x28c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	01d2      	lsls	r2, r2, #7
 800218c:	1ad2      	subs	r2, r2, r3
 800218e:	0192      	lsls	r2, r2, #6
 8002190:	441a      	add	r2, r3
 8002192:	0052      	lsls	r2, r2, #1
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	b29b      	uxth	r3, r3
 800219a:	b21b      	sxth	r3, r3
 800219c:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = (-VITESSE_KART/2)*speed;
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <task_Supervision+0x28c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	0212      	lsls	r2, r2, #8
 80021a8:	1ad2      	subs	r2, r2, r3
 80021aa:	0192      	lsls	r2, r2, #6
 80021ac:	441a      	add	r2, r3
 80021ae:	0052      	lsls	r2, r2, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80021ba:	e1ae      	b.n	800251a <task_Supervision+0x59a>
				case RECULE_DROITE:
					speedLeft = (-VITESSE_KART/2)*speed;
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <task_Supervision+0x28c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	0212      	lsls	r2, r2, #8
 80021c6:	1ad2      	subs	r2, r2, r3
 80021c8:	0192      	lsls	r2, r2, #6
 80021ca:	441a      	add	r2, r3
 80021cc:	0052      	lsls	r2, r2, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_KART*speed;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <task_Supervision+0x28c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	01d2      	lsls	r2, r2, #7
 80021e2:	1ad2      	subs	r2, r2, r3
 80021e4:	0192      	lsls	r2, r2, #6
 80021e6:	441a      	add	r2, r3
 80021e8:	0052      	lsls	r2, r2, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80021f4:	e191      	b.n	800251a <task_Supervision+0x59a>
				default:
					speedLeft = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80021fe:	e18c      	b.n	800251a <task_Supervision+0x59a>
 8002200:	20004bd0 	.word	0x20004bd0
 8002204:	20004be0 	.word	0x20004be0
 8002208:	20000000 	.word	0x20000000
 800220c:	20000004 	.word	0x20000004
 8002210:	20004be4 	.word	0x20004be4
 8002214:	20004be8 	.word	0x20004be8
 8002218:	20000008 	.word	0x20000008
 800221c:	20004bec 	.word	0x20004bec
			}
		}
		else if (mode == MODE_OBS)
 8002220:	4b8d      	ldr	r3, [pc, #564]	; (8002458 <task_Supervision+0x4d8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d16c      	bne.n	8002302 <task_Supervision+0x382>
		{
			captDistIR_Get(table);
 8002228:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fe5d 	bl	8000eec <captDistIR_Get>
				dir = 'S';
				obs = 1;
			}
			else
			#endif //VL53
			if (table[0] > 1000 || table[1] > 1000)
 8002232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002238:	dc03      	bgt.n	8002242 <task_Supervision+0x2c2>
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002240:	dd52      	ble.n	80022e8 <task_Supervision+0x368>
			{
				if (obs > 10)
 8002242:	4b86      	ldr	r3, [pc, #536]	; (800245c <task_Supervision+0x4dc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b0a      	cmp	r3, #10
 8002248:	dd09      	ble.n	800225e <task_Supervision+0x2de>
				{
					speedLeft = VITESSE_OBS;
 800224a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224e:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_OBS/2;
 8002250:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8002254:	863b      	strh	r3, [r7, #48]	; 0x30
					dir = 'G';
 8002256:	4b82      	ldr	r3, [pc, #520]	; (8002460 <task_Supervision+0x4e0>)
 8002258:	2247      	movs	r2, #71	; 0x47
 800225a:	701a      	strb	r2, [r3, #0]
				if (obs > 10)
 800225c:	e15c      	b.n	8002518 <task_Supervision+0x598>
				}
				else
				{
					speedLeft = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	863b      	strh	r3, [r7, #48]	; 0x30

					if (table[0] > table[1] && table[0] > 1000)
 8002266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226a:	429a      	cmp	r2, r3
 800226c:	dd18      	ble.n	80022a0 <task_Supervision+0x320>
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002274:	dd14      	ble.n	80022a0 <task_Supervision+0x320>
					{
						dir = 'G';
 8002276:	4b7a      	ldr	r3, [pc, #488]	; (8002460 <task_Supervision+0x4e0>)
 8002278:	2247      	movs	r2, #71	; 0x47
 800227a:	701a      	strb	r2, [r3, #0]
						speedLeft = VITESSE_OBS/2;
 800227c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002280:	867b      	strh	r3, [r7, #50]	; 0x32
						speedRight = -VITESSE_OBS/2;
 8002282:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8002286:	863b      	strh	r3, [r7, #48]	; 0x30
						if (obs%2 == 0)
 8002288:	4b74      	ldr	r3, [pc, #464]	; (800245c <task_Supervision+0x4dc>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d128      	bne.n	80022e6 <task_Supervision+0x366>
							obs++;
 8002294:	4b71      	ldr	r3, [pc, #452]	; (800245c <task_Supervision+0x4dc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3301      	adds	r3, #1
 800229a:	4a70      	ldr	r2, [pc, #448]	; (800245c <task_Supervision+0x4dc>)
 800229c:	6013      	str	r3, [r2, #0]
						if (obs%2 == 0)
 800229e:	e022      	b.n	80022e6 <task_Supervision+0x366>
					}
					else if (table[0] < table[1] && table[1] > 1000)
 80022a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	429a      	cmp	r2, r3
 80022a6:	f280 8137 	bge.w	8002518 <task_Supervision+0x598>
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022b0:	f340 8132 	ble.w	8002518 <task_Supervision+0x598>
					{
						dir = 'D';
 80022b4:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <task_Supervision+0x4e0>)
 80022b6:	2244      	movs	r2, #68	; 0x44
 80022b8:	701a      	strb	r2, [r3, #0]
						speedLeft = -VITESSE_OBS/2;
 80022ba:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80022be:	867b      	strh	r3, [r7, #50]	; 0x32
						speedRight = VITESSE_OBS/2;
 80022c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022c4:	863b      	strh	r3, [r7, #48]	; 0x30
						if (obs%2 == 1)
 80022c6:	4b65      	ldr	r3, [pc, #404]	; (800245c <task_Supervision+0x4dc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	bfb8      	it	lt
 80022d2:	425b      	neglt	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	f040 811f 	bne.w	8002518 <task_Supervision+0x598>
							obs++;
 80022da:	4b60      	ldr	r3, [pc, #384]	; (800245c <task_Supervision+0x4dc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4a5e      	ldr	r2, [pc, #376]	; (800245c <task_Supervision+0x4dc>)
 80022e2:	6013      	str	r3, [r2, #0]
				if (obs > 10)
 80022e4:	e118      	b.n	8002518 <task_Supervision+0x598>
 80022e6:	e117      	b.n	8002518 <task_Supervision+0x598>
					}
				}
			}
			else
			{
				speedLeft = VITESSE_OBS;
 80022e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ec:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_OBS;
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	863b      	strh	r3, [r7, #48]	; 0x30
				dir = 'F';
 80022f4:	4b5a      	ldr	r3, [pc, #360]	; (8002460 <task_Supervision+0x4e0>)
 80022f6:	2246      	movs	r2, #70	; 0x46
 80022f8:	701a      	strb	r2, [r3, #0]
				obs = 0;
 80022fa:	4b58      	ldr	r3, [pc, #352]	; (800245c <task_Supervision+0x4dc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e10b      	b.n	800251a <task_Supervision+0x59a>
			}
		}
		else if (mode == MODE_CAM)
 8002302:	4b55      	ldr	r3, [pc, #340]	; (8002458 <task_Supervision+0x4d8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b02      	cmp	r3, #2
 8002308:	f040 8107 	bne.w	800251a <task_Supervision+0x59a>
		{
			dir = 'N';
 800230c:	4b54      	ldr	r3, [pc, #336]	; (8002460 <task_Supervision+0x4e0>)
 800230e:	224e      	movs	r2, #78	; 0x4e
 8002310:	701a      	strb	r2, [r3, #0]
			obs = 0;
 8002312:	4b52      	ldr	r3, [pc, #328]	; (800245c <task_Supervision+0x4dc>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

			if (x > CAMERA_X_MIN+CAMERA_X_TIER && x < CAMERA_X_MAX-CAMERA_X_TIER && y > CAMERA_Y_MIN && y <CAMERA_Y_MIN+CAMERA_Y_TIER) //AVANT
 8002318:	4b52      	ldr	r3, [pc, #328]	; (8002464 <task_Supervision+0x4e4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8002320:	db15      	blt.n	800234e <task_Supervision+0x3ce>
 8002322:	4b50      	ldr	r3, [pc, #320]	; (8002464 <task_Supervision+0x4e4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f240 22aa 	movw	r2, #682	; 0x2aa
 800232a:	4293      	cmp	r3, r2
 800232c:	dc0f      	bgt.n	800234e <task_Supervision+0x3ce>
 800232e:	4b4e      	ldr	r3, [pc, #312]	; (8002468 <task_Supervision+0x4e8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	dd0b      	ble.n	800234e <task_Supervision+0x3ce>
 8002336:	4b4c      	ldr	r3, [pc, #304]	; (8002468 <task_Supervision+0x4e8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800233e:	dc06      	bgt.n	800234e <task_Supervision+0x3ce>
			{
				speedLeft = VITESSE_CAM;
 8002340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002344:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM;
 8002346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234a:	863b      	strh	r3, [r7, #48]	; 0x30
 800234c:	e0e5      	b.n	800251a <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MAX-CAMERA_X_TIER && x < CAMERA_X_MAX && y > CAMERA_Y_MIN && y < CAMERA_Y_MIN+CAMERA_Y_TIER) //AVANT_DROITE:
 800234e:	4b45      	ldr	r3, [pc, #276]	; (8002464 <task_Supervision+0x4e4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 8002356:	db14      	blt.n	8002382 <task_Supervision+0x402>
 8002358:	4b42      	ldr	r3, [pc, #264]	; (8002464 <task_Supervision+0x4e4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002360:	da0f      	bge.n	8002382 <task_Supervision+0x402>
 8002362:	4b41      	ldr	r3, [pc, #260]	; (8002468 <task_Supervision+0x4e8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	dd0b      	ble.n	8002382 <task_Supervision+0x402>
 800236a:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <task_Supervision+0x4e8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002372:	dc06      	bgt.n	8002382 <task_Supervision+0x402>
			{
				speedLeft = VITESSE_CAM;
 8002374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002378:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM/2;
 800237a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800237e:	863b      	strh	r3, [r7, #48]	; 0x30
 8002380:	e0cb      	b.n	800251a <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MIN && x < CAMERA_X_MIN+CAMERA_X_TIER && y > CAMERA_Y_MIN && y < CAMERA_Y_MIN+CAMERA_Y_TIER) //AVANT_GAUCHE:
 8002382:	4b38      	ldr	r3, [pc, #224]	; (8002464 <task_Supervision+0x4e4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	dd14      	ble.n	80023b4 <task_Supervision+0x434>
 800238a:	4b36      	ldr	r3, [pc, #216]	; (8002464 <task_Supervision+0x4e4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002392:	dc0f      	bgt.n	80023b4 <task_Supervision+0x434>
 8002394:	4b34      	ldr	r3, [pc, #208]	; (8002468 <task_Supervision+0x4e8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	dd0b      	ble.n	80023b4 <task_Supervision+0x434>
 800239c:	4b32      	ldr	r3, [pc, #200]	; (8002468 <task_Supervision+0x4e8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80023a4:	dc06      	bgt.n	80023b4 <task_Supervision+0x434>
			{
				speedLeft = VITESSE_CAM/2;
 80023a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023aa:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM;
 80023ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b0:	863b      	strh	r3, [r7, #48]	; 0x30
 80023b2:	e0b2      	b.n	800251a <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MIN+CAMERA_X_TIER && x < CAMERA_X_MAX-CAMERA_X_TIER && y > CAMERA_Y_MIN+CAMERA_Y_TIER && y <CAMERA_Y_MAX-CAMERA_Y_TIER) //STOP
 80023b4:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <task_Supervision+0x4e4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80023bc:	db15      	blt.n	80023ea <task_Supervision+0x46a>
 80023be:	4b29      	ldr	r3, [pc, #164]	; (8002464 <task_Supervision+0x4e4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f240 22aa 	movw	r2, #682	; 0x2aa
 80023c6:	4293      	cmp	r3, r2
 80023c8:	dc0f      	bgt.n	80023ea <task_Supervision+0x46a>
 80023ca:	4b27      	ldr	r3, [pc, #156]	; (8002468 <task_Supervision+0x4e8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80023d2:	db0a      	blt.n	80023ea <task_Supervision+0x46a>
 80023d4:	4b24      	ldr	r3, [pc, #144]	; (8002468 <task_Supervision+0x4e8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f240 22aa 	movw	r2, #682	; 0x2aa
 80023dc:	4293      	cmp	r3, r2
 80023de:	dc04      	bgt.n	80023ea <task_Supervision+0x46a>
			{
				speedLeft = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	863b      	strh	r3, [r7, #48]	; 0x30
 80023e8:	e097      	b.n	800251a <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MAX-CAMERA_X_TIER && x < CAMERA_X_MAX && y > CAMERA_Y_MIN+CAMERA_Y_TIER && y <CAMERA_Y_MAX-CAMERA_Y_TIER) //DROITE
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <task_Supervision+0x4e4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80023f2:	db16      	blt.n	8002422 <task_Supervision+0x4a2>
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <task_Supervision+0x4e4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fc:	da11      	bge.n	8002422 <task_Supervision+0x4a2>
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <task_Supervision+0x4e8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8002406:	db0c      	blt.n	8002422 <task_Supervision+0x4a2>
 8002408:	4b17      	ldr	r3, [pc, #92]	; (8002468 <task_Supervision+0x4e8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f240 22aa 	movw	r2, #682	; 0x2aa
 8002410:	4293      	cmp	r3, r2
 8002412:	dc06      	bgt.n	8002422 <task_Supervision+0x4a2>
			{
				speedLeft = VITESSE_CAM;
 8002414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002418:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = -VITESSE_CAM;
 800241a:	f64f 4318 	movw	r3, #64536	; 0xfc18
 800241e:	863b      	strh	r3, [r7, #48]	; 0x30
 8002420:	e07b      	b.n	800251a <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MIN && x < CAMERA_X_MIN+CAMERA_X_TIER && y > CAMERA_Y_MIN+CAMERA_Y_TIER && y <CAMERA_Y_MAX-CAMERA_Y_TIER) //GAUCHE
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <task_Supervision+0x4e4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	dd20      	ble.n	800246c <task_Supervision+0x4ec>
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <task_Supervision+0x4e4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002432:	dc1b      	bgt.n	800246c <task_Supervision+0x4ec>
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <task_Supervision+0x4e8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 800243c:	db16      	blt.n	800246c <task_Supervision+0x4ec>
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <task_Supervision+0x4e8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f240 22aa 	movw	r2, #682	; 0x2aa
 8002446:	4293      	cmp	r3, r2
 8002448:	dc10      	bgt.n	800246c <task_Supervision+0x4ec>
			{
				speedLeft = -VITESSE_CAM;
 800244a:	f64f 4318 	movw	r3, #64536	; 0xfc18
 800244e:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM;
 8002450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002454:	863b      	strh	r3, [r7, #48]	; 0x30
 8002456:	e060      	b.n	800251a <task_Supervision+0x59a>
 8002458:	20004be0 	.word	0x20004be0
 800245c:	20004bec 	.word	0x20004bec
 8002460:	20000008 	.word	0x20000008
 8002464:	20004be4 	.word	0x20004be4
 8002468:	20004be8 	.word	0x20004be8
			}
			else if (x > CAMERA_X_MIN+CAMERA_X_TIER && x < CAMERA_X_MAX-CAMERA_X_TIER && y > CAMERA_Y_MAX-CAMERA_Y_TIER && y < CAMERA_Y_MAX) //RECULE:
 800246c:	4b4a      	ldr	r3, [pc, #296]	; (8002598 <task_Supervision+0x618>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8002474:	db16      	blt.n	80024a4 <task_Supervision+0x524>
 8002476:	4b48      	ldr	r3, [pc, #288]	; (8002598 <task_Supervision+0x618>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f240 22aa 	movw	r2, #682	; 0x2aa
 800247e:	4293      	cmp	r3, r2
 8002480:	dc10      	bgt.n	80024a4 <task_Supervision+0x524>
 8002482:	4b46      	ldr	r3, [pc, #280]	; (800259c <task_Supervision+0x61c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 800248a:	db0b      	blt.n	80024a4 <task_Supervision+0x524>
 800248c:	4b43      	ldr	r3, [pc, #268]	; (800259c <task_Supervision+0x61c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002494:	da06      	bge.n	80024a4 <task_Supervision+0x524>
			{
				speedLeft = -VITESSE_CAM;
 8002496:	f64f 4318 	movw	r3, #64536	; 0xfc18
 800249a:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = -VITESSE_CAM;
 800249c:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80024a0:	863b      	strh	r3, [r7, #48]	; 0x30
 80024a2:	e03a      	b.n	800251a <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MAX-CAMERA_X_TIER && x < CAMERA_X_MAX && y > CAMERA_Y_MAX-CAMERA_Y_TIER && y < CAMERA_Y_MAX) //RECULE_DROITE:
 80024a4:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <task_Supervision+0x618>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80024ac:	db15      	blt.n	80024da <task_Supervision+0x55a>
 80024ae:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <task_Supervision+0x618>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b6:	da10      	bge.n	80024da <task_Supervision+0x55a>
 80024b8:	4b38      	ldr	r3, [pc, #224]	; (800259c <task_Supervision+0x61c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80024c0:	db0b      	blt.n	80024da <task_Supervision+0x55a>
 80024c2:	4b36      	ldr	r3, [pc, #216]	; (800259c <task_Supervision+0x61c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ca:	da06      	bge.n	80024da <task_Supervision+0x55a>
			{
				speedLeft = -VITESSE_CAM/2;
 80024cc:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80024d0:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = -VITESSE_CAM;
 80024d2:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80024d6:	863b      	strh	r3, [r7, #48]	; 0x30
 80024d8:	e01f      	b.n	800251a <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MIN && x < CAMERA_X_MIN+CAMERA_X_TIER && y > CAMERA_Y_MAX-CAMERA_Y_TIER && y < CAMERA_Y_MAX) //RECULE_GAUCHE:
 80024da:	4b2f      	ldr	r3, [pc, #188]	; (8002598 <task_Supervision+0x618>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	dd15      	ble.n	800250e <task_Supervision+0x58e>
 80024e2:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <task_Supervision+0x618>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80024ea:	dc10      	bgt.n	800250e <task_Supervision+0x58e>
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <task_Supervision+0x61c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80024f4:	db0b      	blt.n	800250e <task_Supervision+0x58e>
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <task_Supervision+0x61c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fe:	da06      	bge.n	800250e <task_Supervision+0x58e>
			{
				speedLeft = -VITESSE_CAM;
 8002500:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002504:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = -VITESSE_CAM/2;
 8002506:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 800250a:	863b      	strh	r3, [r7, #48]	; 0x30
 800250c:	e005      	b.n	800251a <task_Supervision+0x59a>
			}
			else
			{
				speedLeft = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	863b      	strh	r3, [r7, #48]	; 0x30
 8002516:	e000      	b.n	800251a <task_Supervision+0x59a>
				if (obs > 10)
 8002518:	bf00      	nop

		#if DEBUG_MOTOR
		printf("Motor L : %d || R : %d\r\n", speedLeft, speedRight);
		#endif

		xQueueSend( q_mot_L, ( void * ) &speedLeft,  portMAX_DELAY );
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <task_Supervision+0x620>)
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	f107 0132 	add.w	r1, r7, #50	; 0x32
 8002522:	2300      	movs	r3, #0
 8002524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002528:	f007 fd42 	bl	8009fb0 <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <task_Supervision+0x624>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002534:	4618      	mov	r0, r3
 8002536:	f007 ffb5 	bl	800a4a4 <xQueueSemaphoreTake>

		xQueueSend( q_mot_R, ( void * ) &speedRight,  portMAX_DELAY );
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <task_Supervision+0x628>)
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002542:	2300      	movs	r3, #0
 8002544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002548:	f007 fd32 	bl	8009fb0 <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <task_Supervision+0x624>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002554:	4618      	mov	r0, r3
 8002556:	f007 ffa5 	bl	800a4a4 <xQueueSemaphoreTake>

	#if MICROROS
		MsgToPub.dir = dir;
 800255a:	4b14      	ldr	r3, [pc, #80]	; (80025ac <task_Supervision+0x62c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	723b      	strb	r3, [r7, #8]
		MsgToPub.mode = mode;
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <task_Supervision+0x630>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]
		MsgToPub.speed = speed;
 8002566:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <task_Supervision+0x634>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	613b      	str	r3, [r7, #16]
		if (!uxQueueMessagesWaiting(qhMR_pub))
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <task_Supervision+0x638>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f008 f8a3 	bl	800a6bc <uxQueueMessagesWaiting>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d108      	bne.n	800258e <task_Supervision+0x60e>
			xQueueSend(qhMR_pub, ( void * ) &MsgToPub, portMAX_DELAY);
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <task_Supervision+0x638>)
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	f107 0108 	add.w	r1, r7, #8
 8002584:	2300      	movs	r3, #0
 8002586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800258a:	f007 fd11 	bl	8009fb0 <xQueueGenericSend>
			pxMessage.command=dir;
			xQueueSend( qhLCD, ( void * ) &pxMessage, portMAX_DELAY);
		}
	#endif //LCD

		vTaskDelay(SAMPLING_PERIOD_ms);
 800258e:	2005      	movs	r0, #5
 8002590:	f008 fbf0 	bl	800ad74 <vTaskDelay>
		if (uxQueueMessagesWaiting(qhMR_sub))
 8002594:	e4fa      	b.n	8001f8c <task_Supervision+0xc>
 8002596:	bf00      	nop
 8002598:	20004be4 	.word	0x20004be4
 800259c:	20004be8 	.word	0x20004be8
 80025a0:	20004bc8 	.word	0x20004bc8
 80025a4:	20004bc4 	.word	0x20004bc4
 80025a8:	20004bcc 	.word	0x20004bcc
 80025ac:	20000008 	.word	0x20000008
 80025b0:	20004be0 	.word	0x20004be0
 80025b4:	20000004 	.word	0x20000004
 80025b8:	20004bd4 	.word	0x20004bd4

080025bc <main>:
#endif //SYNCHRO_EX
}

//=========================================================================
int main(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af02      	add	r7, sp, #8
  HAL_Init();
 80025c2:	f001 fa93 	bl	8003aec <HAL_Init>
  SystemClock_Config();
 80025c6:	f001 f9fd 	bl	80039c4 <SystemClock_Config>
  MX_GPIO_Init();
 80025ca:	f7fe ffd7 	bl	800157c <MX_GPIO_Init>
  MX_DMA_Init();
 80025ce:	f7ff f8f1 	bl	80017b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80025d2:	f7ff f8c5 	bl	8001760 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80025d6:	f7ff f86b 	bl	80016b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80025da:	f7ff f897 	bl	800170c <MX_USART1_UART_Init>

  RetargetInit(&huart2); //make printf and scanf work with uart2
 80025de:	4845      	ldr	r0, [pc, #276]	; (80026f4 <main+0x138>)
 80025e0:	f000 fc8c 	bl	8002efc <RetargetInit>
  printf("%cc%c[2J%c[0;0HTitouan//Jeremy//Louanne\r\n", 0x1b, 0x1b, 0x1b);
 80025e4:	231b      	movs	r3, #27
 80025e6:	221b      	movs	r2, #27
 80025e8:	211b      	movs	r1, #27
 80025ea:	4843      	ldr	r0, [pc, #268]	; (80026f8 <main+0x13c>)
 80025ec:	f015 fdfc 	bl	80181e8 <iprintf>

  motorCommand_Init();
 80025f0:	f000 fa5e 	bl	8002ab0 <motorCommand_Init>
  quadEncoder_Init();
 80025f4:	f000 fad6 	bl	8002ba4 <quadEncoder_Init>
  captDistIR_Init();
 80025f8:	f7fe fc46 	bl	8000e88 <captDistIR_Init>

  HAL_Delay(500);
 80025fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002600:	f001 fab6 	bl	8003b70 <HAL_Delay>
  groveLCD_setColor(1);
  groveLCD_term_printf("Titouan//Jeremy//Louanne");
  HAL_Delay(1000);
#endif

  osKernelInitialize();
 8002604:	f007 fa48 	bl	8009a98 <osKernelInitialize>
	xTaskCreate(test_vl53, ( const portCHAR * ) "test_vl53", 128 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXTEST_MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXFINAL
	#if MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, 24, NULL);
 8002608:	2300      	movs	r3, #0
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	2318      	movs	r3, #24
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2300      	movs	r3, #0
 8002612:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002616:	4939      	ldr	r1, [pc, #228]	; (80026fc <main+0x140>)
 8002618:	4839      	ldr	r0, [pc, #228]	; (8002700 <main+0x144>)
 800261a:	f008 fa50 	bl	800aabe <xTaskCreate>
	#endif //MICROROS
    xTaskCreate(task_Supervision, ( const portCHAR * ) "task Supervision", 128 /* stack size */, NULL, 27, NULL);
 800261e:	2300      	movs	r3, #0
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	231b      	movs	r3, #27
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2300      	movs	r3, #0
 8002628:	2280      	movs	r2, #128	; 0x80
 800262a:	4936      	ldr	r1, [pc, #216]	; (8002704 <main+0x148>)
 800262c:	4836      	ldr	r0, [pc, #216]	; (8002708 <main+0x14c>)
 800262e:	f008 fa46 	bl	800aabe <xTaskCreate>
	xTaskCreate(task_Motor_Left, ( const portCHAR * ) "task Motor Left", 128 /* stack size */, NULL, 25, NULL);
 8002632:	2300      	movs	r3, #0
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	2319      	movs	r3, #25
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2300      	movs	r3, #0
 800263c:	2280      	movs	r2, #128	; 0x80
 800263e:	4933      	ldr	r1, [pc, #204]	; (800270c <main+0x150>)
 8002640:	4833      	ldr	r0, [pc, #204]	; (8002710 <main+0x154>)
 8002642:	f008 fa3c 	bl	800aabe <xTaskCreate>
	xTaskCreate(task_Motor_Right, ( const portCHAR * ) "task Motor Right", 128 /* stack size */, NULL, 26, NULL);
 8002646:	2300      	movs	r3, #0
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	231a      	movs	r3, #26
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2300      	movs	r3, #0
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	4930      	ldr	r1, [pc, #192]	; (8002714 <main+0x158>)
 8002654:	4830      	ldr	r0, [pc, #192]	; (8002718 <main+0x15c>)
 8002656:	f008 fa32 	bl	800aabe <xTaskCreate>
	#if LCD
	xTaskCreate(task_Grove_LCD, ( const portCHAR * ) "task LCD", 128 /* stack size */, NULL, 23, NULL);
	#endif
#endif

    vSemaphoreCreateBinary(xSem_Supervision);
 800265a:	2203      	movs	r2, #3
 800265c:	2100      	movs	r1, #0
 800265e:	2001      	movs	r0, #1
 8002660:	f007 fc48 	bl	8009ef4 <xQueueGenericCreate>
 8002664:	4603      	mov	r3, r0
 8002666:	4a2d      	ldr	r2, [pc, #180]	; (800271c <main+0x160>)
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b2c      	ldr	r3, [pc, #176]	; (800271c <main+0x160>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <main+0xc4>
 8002672:	4b2a      	ldr	r3, [pc, #168]	; (800271c <main+0x160>)
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	2300      	movs	r3, #0
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	f007 fc98 	bl	8009fb0 <xQueueGenericSend>
    xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <main+0x160>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002688:	4618      	mov	r0, r3
 800268a:	f007 ff0b 	bl	800a4a4 <xQueueSemaphoreTake>

    q_mot_L = xQueueCreate(1, sizeof(int16_t));
 800268e:	2200      	movs	r2, #0
 8002690:	2102      	movs	r1, #2
 8002692:	2001      	movs	r0, #1
 8002694:	f007 fc2e 	bl	8009ef4 <xQueueGenericCreate>
 8002698:	4603      	mov	r3, r0
 800269a:	4a21      	ldr	r2, [pc, #132]	; (8002720 <main+0x164>)
 800269c:	6013      	str	r3, [r2, #0]
    q_mot_R = xQueueCreate(1, sizeof(int16_t));
 800269e:	2200      	movs	r2, #0
 80026a0:	2102      	movs	r1, #2
 80026a2:	2001      	movs	r0, #1
 80026a4:	f007 fc26 	bl	8009ef4 <xQueueGenericCreate>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <main+0x168>)
 80026ac:	6013      	str	r3, [r2, #0]
    qhVl53 = xQueueCreate(1, sizeof(int));
 80026ae:	2200      	movs	r2, #0
 80026b0:	2104      	movs	r1, #4
 80026b2:	2001      	movs	r0, #1
 80026b4:	f007 fc1e 	bl	8009ef4 <xQueueGenericCreate>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <main+0x16c>)
 80026bc:	6013      	str	r3, [r2, #0]

    qhMR_sub = xQueueCreate(1, sizeof(MicroRosSubMsg));
 80026be:	2200      	movs	r2, #0
 80026c0:	2114      	movs	r1, #20
 80026c2:	2001      	movs	r0, #1
 80026c4:	f007 fc16 	bl	8009ef4 <xQueueGenericCreate>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <main+0x170>)
 80026cc:	6013      	str	r3, [r2, #0]
    qhMR_pub = xQueueCreate(1, sizeof(MicroRosPubMsg));
 80026ce:	2200      	movs	r2, #0
 80026d0:	210c      	movs	r1, #12
 80026d2:	2001      	movs	r0, #1
 80026d4:	f007 fc0e 	bl	8009ef4 <xQueueGenericCreate>
 80026d8:	4603      	mov	r3, r0
 80026da:	4a15      	ldr	r2, [pc, #84]	; (8002730 <main+0x174>)
 80026dc:	6013      	str	r3, [r2, #0]
    qhLCD = xQueueCreate(1, sizeof(AMessage));
 80026de:	2200      	movs	r2, #0
 80026e0:	2108      	movs	r1, #8
 80026e2:	2001      	movs	r0, #1
 80026e4:	f007 fc06 	bl	8009ef4 <xQueueGenericCreate>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <main+0x178>)
 80026ec:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80026ee:	f007 f9f7 	bl	8009ae0 <osKernelStart>
  while(1)
 80026f2:	e7fe      	b.n	80026f2 <main+0x136>
 80026f4:	20004a00 	.word	0x20004a00
 80026f8:	08019738 	.word	0x08019738
 80026fc:	08019764 	.word	0x08019764
 8002700:	0800188d 	.word	0x0800188d
 8002704:	08019774 	.word	0x08019774
 8002708:	08001f81 	.word	0x08001f81
 800270c:	08019788 	.word	0x08019788
 8002710:	08001d79 	.word	0x08001d79
 8002714:	08019798 	.word	0x08019798
 8002718:	08001e81 	.word	0x08001e81
 800271c:	20004bc4 	.word	0x20004bc4
 8002720:	20004bc8 	.word	0x20004bc8
 8002724:	20004bcc 	.word	0x20004bcc
 8002728:	20004bdc 	.word	0x20004bdc
 800272c:	20004bd0 	.word	0x20004bd0
 8002730:	20004bd4 	.word	0x20004bd4
 8002734:	20004bd8 	.word	0x20004bd8

08002738 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800274a:	f001 f9f1 	bl	8003b30 <HAL_IncTick>
  }
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40000800 	.word	0x40000800

0800275c <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002760:	b672      	cpsid	i
}
 8002762:	bf00      	nop
  __disable_irq();
  while (1)
 8002764:	e7fe      	b.n	8002764 <Error_Handler+0x8>
	...

08002768 <createPublisher>:
void createPublisher(rcl_publisher_t* publisher,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
	rcl_ret_t ret = rclc_publisher_init_default(publisher, node, type_support, topic_name);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f00a ffd9 	bl	800d734 <rclc_publisher_init_default>
 8002782:	6178      	str	r0, [r7, #20]
	printf("Publisher %s is created with result %d\r\n", topic_name, (int)ret);
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	6839      	ldr	r1, [r7, #0]
 8002788:	4804      	ldr	r0, [pc, #16]	; (800279c <createPublisher+0x34>)
 800278a:	f015 fd2d 	bl	80181e8 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
#endif

}
 8002794:	bf00      	nop
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	08019814 	.word	0x08019814

080027a0 <createSubscriber>:
void createSubscriber(rcl_subscription_t* subscription,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
	*subscription = rcl_get_zero_initialized_subscription();
 80027ae:	f00a fa79 	bl	800cca4 <rcl_get_zero_initialized_subscription>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	601a      	str	r2, [r3, #0]

	rcl_ret_t ret = rclc_subscription_init_default(subscription, node,
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f00a ffec 	bl	800d79c <rclc_subscription_init_default>
 80027c4:	6178      	str	r0, [r7, #20]
		type_support, topic_name);
	printf("Subscription %s is created with result %d\r\n", topic_name, (int)ret);
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	4805      	ldr	r0, [pc, #20]	; (80027e0 <createSubscriber+0x40>)
 80027cc:	f015 fd0c 	bl	80181e8 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
#endif
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	08019840 	.word	0x08019840

080027e4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <microros_allocate+0x3c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <microros_allocate+0x3c>)
 80027fc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <microros_allocate+0x40>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	461a      	mov	r2, r3
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <microros_allocate+0x40>)
 800280c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fbb0 	bl	8000f74 <pvPortMallocMicroROS>
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20004bf0 	.word	0x20004bf0
 8002824:	20004bf4 	.word	0x20004bf4

08002828 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00c      	beq.n	8002852 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7fe fcb9 	bl	80011b0 <getBlockSize>
 800283e:	4603      	mov	r3, r0
 8002840:	4a06      	ldr	r2, [pc, #24]	; (800285c <microros_deallocate+0x34>)
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	461a      	mov	r2, r3
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <microros_deallocate+0x34>)
 800284a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7fe fc55 	bl	80010fc <vPortFreeMicroROS>
  }
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20004bf4 	.word	0x20004bf4

08002860 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <microros_reallocate+0x64>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	4413      	add	r3, r2
 8002876:	461a      	mov	r2, r3
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <microros_reallocate+0x64>)
 800287a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <microros_reallocate+0x68>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	4413      	add	r3, r2
 8002886:	461a      	mov	r2, r3
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <microros_reallocate+0x68>)
 800288a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002892:	68b8      	ldr	r0, [r7, #8]
 8002894:	f7fe fb6e 	bl	8000f74 <pvPortMallocMicroROS>
 8002898:	4603      	mov	r3, r0
 800289a:	e00e      	b.n	80028ba <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f7fe fc87 	bl	80011b0 <getBlockSize>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <microros_reallocate+0x68>)
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <microros_reallocate+0x68>)
 80028ae:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f7fe fc9a 	bl	80011ec <pvPortReallocMicroROS>
 80028b8:	4603      	mov	r3, r0
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20004bf0 	.word	0x20004bf0
 80028c8:	20004bf4 	.word	0x20004bf4

080028cc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	fb02 f303 	mul.w	r3, r2, r3
 80028e0:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <microros_zero_allocate+0x48>)
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	461a      	mov	r2, r3
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <microros_zero_allocate+0x48>)
 80028ea:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	fb02 f303 	mul.w	r3, r2, r3
 80028f4:	4a08      	ldr	r2, [pc, #32]	; (8002918 <microros_zero_allocate+0x4c>)
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <microros_zero_allocate+0x4c>)
 80028fe:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f7fe fcac 	bl	8001260 <pvPortCallocMicroROS>
 8002908:	4603      	mov	r3, r0
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20004bf0 	.word	0x20004bf0
 8002918:	20004bf4 	.word	0x20004bf4
 800291c:	00000000 	.word	0x00000000

08002920 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002920:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002936:	a320      	add	r3, pc, #128	; (adr r3, 80029b8 <UTILS_NanosecondsToTimespec+0x98>)
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f7fe f8d6 	bl	8000aec <__aeabi_ldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800294a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800294e:	a31a      	add	r3, pc, #104	; (adr r3, 80029b8 <UTILS_NanosecondsToTimespec+0x98>)
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	f7fe f8ca 	bl	8000aec <__aeabi_ldivmod>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	da20      	bge.n	80029a6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a11      	ldr	r2, [pc, #68]	; (80029b0 <UTILS_NanosecondsToTimespec+0x90>)
 800296a:	fb82 1203 	smull	r1, r2, r2, r3
 800296e:	1712      	asrs	r2, r2, #28
 8002970:	17db      	asrs	r3, r3, #31
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	3301      	adds	r3, #1
 8002976:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	6979      	ldr	r1, [r7, #20]
 8002980:	17c8      	asrs	r0, r1, #31
 8002982:	460c      	mov	r4, r1
 8002984:	4605      	mov	r5, r0
 8002986:	ebb2 0804 	subs.w	r8, r2, r4
 800298a:	eb63 0905 	sbc.w	r9, r3, r5
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	4906      	ldr	r1, [pc, #24]	; (80029b4 <UTILS_NanosecondsToTimespec+0x94>)
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	441a      	add	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	609a      	str	r2, [r3, #8]
    }
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029b0:	44b82fa1 	.word	0x44b82fa1
 80029b4:	3b9aca00 	.word	0x3b9aca00
 80029b8:	3b9aca00 	.word	0x3b9aca00
 80029bc:	00000000 	.word	0x00000000

080029c0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80029c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c4:	b08e      	sub	sp, #56	; 0x38
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6278      	str	r0, [r7, #36]	; 0x24
 80029ca:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80029cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029d0:	2300      	movs	r3, #0
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80029e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029e6:	4618      	mov	r0, r3
 80029e8:	f008 fcf6 	bl	800b3d8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	17da      	asrs	r2, r3, #31
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	61fa      	str	r2, [r7, #28]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	69b9      	ldr	r1, [r7, #24]
 80029fe:	000b      	movs	r3, r1
 8002a00:	2200      	movs	r2, #0
 8002a02:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	461c      	mov	r4, r3
 8002a0c:	4615      	mov	r5, r2
 8002a0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a12:	1911      	adds	r1, r2, r4
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	416b      	adcs	r3, r5
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002a1e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002a22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	f04f 0400 	mov.w	r4, #0
 8002a2e:	f04f 0500 	mov.w	r5, #0
 8002a32:	015d      	lsls	r5, r3, #5
 8002a34:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002a38:	0154      	lsls	r4, r2, #5
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	ebb2 0800 	subs.w	r8, r2, r0
 8002a42:	eb63 0901 	sbc.w	r9, r3, r1
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002a52:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002a56:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002a5a:	4690      	mov	r8, r2
 8002a5c:	4699      	mov	r9, r3
 8002a5e:	eb18 0a00 	adds.w	sl, r8, r0
 8002a62:	eb49 0b01 	adc.w	fp, r9, r1
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a72:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a76:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a7a:	ebb2 040a 	subs.w	r4, r2, sl
 8002a7e:	603c      	str	r4, [r7, #0]
 8002a80:	eb63 030b 	sbc.w	r3, r3, fp
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a8a:	4623      	mov	r3, r4
 8002a8c:	181b      	adds	r3, r3, r0
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	462b      	mov	r3, r5
 8002a92:	eb41 0303 	adc.w	r3, r1, r3
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	6a3a      	ldr	r2, [r7, #32]
 8002a9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a9e:	f7ff ff3f 	bl	8002920 <UTILS_NanosecondsToTimespec>

    return 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3738      	adds	r7, #56	; 0x38
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002ab0 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <motorCommand_Init+0x9c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a24      	ldr	r2, [pc, #144]	; (8002b50 <motorCommand_Init+0xa0>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	0d9b      	lsrs	r3, r3, #22
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 8002aca:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <motorCommand_Init+0xa4>)
 8002acc:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <motorCommand_Init+0xa8>)
 8002ace:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <motorCommand_Init+0xa4>)
 8002ad2:	22c7      	movs	r2, #199	; 0xc7
 8002ad4:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <motorCommand_Init+0xa4>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <motorCommand_Init+0xa4>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <motorCommand_Init+0xa4>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8002ae8:	481a      	ldr	r0, [pc, #104]	; (8002b54 <motorCommand_Init+0xa4>)
 8002aea:	f004 fc9f 	bl	800742c <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <motorCommand_Init+0xac>)
 8002af0:	2260      	movs	r2, #96	; 0x60
 8002af2:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <motorCommand_Init+0xac>)
 8002af6:	2205      	movs	r2, #5
 8002af8:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <motorCommand_Init+0xac>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <motorCommand_Init+0xac>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 8002b06:	2200      	movs	r2, #0
 8002b08:	4914      	ldr	r1, [pc, #80]	; (8002b5c <motorCommand_Init+0xac>)
 8002b0a:	4812      	ldr	r0, [pc, #72]	; (8002b54 <motorCommand_Init+0xa4>)
 8002b0c:	f005 f840 	bl	8007b90 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8002b10:	2204      	movs	r2, #4
 8002b12:	4912      	ldr	r1, [pc, #72]	; (8002b5c <motorCommand_Init+0xac>)
 8002b14:	480f      	ldr	r0, [pc, #60]	; (8002b54 <motorCommand_Init+0xa4>)
 8002b16:	f005 f83b 	bl	8007b90 <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <motorCommand_Init+0xa4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2264      	movs	r2, #100	; 0x64
 8002b20:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <motorCommand_Init+0xa4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2264      	movs	r2, #100	; 0x64
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4809      	ldr	r0, [pc, #36]	; (8002b54 <motorCommand_Init+0xa4>)
 8002b2e:	f004 fd39 	bl	80075a4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 8002b32:	2104      	movs	r1, #4
 8002b34:	4807      	ldr	r0, [pc, #28]	; (8002b54 <motorCommand_Init+0xa4>)
 8002b36:	f004 fd35 	bl	80075a4 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2108      	movs	r1, #8
 8002b3e:	4808      	ldr	r0, [pc, #32]	; (8002b60 <motorCommand_Init+0xb0>)
 8002b40:	f002 f980 	bl	8004e44 <HAL_GPIO_WritePin>
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	2000000c 	.word	0x2000000c
 8002b50:	6b5fca6b 	.word	0x6b5fca6b
 8002b54:	20004bf8 	.word	0x20004bf8
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	20004c40 	.word	0x20004c40
 8002b60:	40020400 	.word	0x40020400

08002b64 <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <motorLeft_SetDuty+0x1c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	20004bf8 	.word	0x20004bf8

08002b84 <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <motorRight_SetDuty+0x1c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	20004bf8 	.word	0x20004bf8

08002ba4 <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 8002baa:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <quadEncoder_Init+0xdc>)
 8002bac:	4a35      	ldr	r2, [pc, #212]	; (8002c84 <quadEncoder_Init+0xe0>)
 8002bae:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 8002bb0:	4b33      	ldr	r3, [pc, #204]	; (8002c80 <quadEncoder_Init+0xdc>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb6:	4b32      	ldr	r3, [pc, #200]	; (8002c80 <quadEncoder_Init+0xdc>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 8002bbc:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <quadEncoder_Init+0xdc>)
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc4:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <quadEncoder_Init+0xdc>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002bda:	230f      	movs	r3, #15
 8002bdc:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002be2:	2301      	movs	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002be6:	2308      	movs	r3, #8
 8002be8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002bea:	230f      	movs	r3, #15
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4823      	ldr	r0, [pc, #140]	; (8002c80 <quadEncoder_Init+0xdc>)
 8002bf4:	f004 fd86 	bl	8007704 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <quadEncoder_Init+0xdc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002c00:	2100      	movs	r1, #0
 8002c02:	481f      	ldr	r0, [pc, #124]	; (8002c80 <quadEncoder_Init+0xdc>)
 8002c04:	f004 fe2e 	bl	8007864 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002c08:	2104      	movs	r1, #4
 8002c0a:	481d      	ldr	r0, [pc, #116]	; (8002c80 <quadEncoder_Init+0xdc>)
 8002c0c:	f004 fe2a 	bl	8007864 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <quadEncoder_Init+0xe4>)
 8002c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c16:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <quadEncoder_Init+0xe4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <quadEncoder_Init+0xe4>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8002c24:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <quadEncoder_Init+0xe4>)
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <quadEncoder_Init+0xe4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c32:	2303      	movs	r3, #3
 8002c34:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002c3e:	2308      	movs	r3, #8
 8002c40:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002c42:	230f      	movs	r3, #15
 8002c44:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002c4e:	2308      	movs	r3, #8
 8002c50:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002c52:	230f      	movs	r3, #15
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	480b      	ldr	r0, [pc, #44]	; (8002c88 <quadEncoder_Init+0xe4>)
 8002c5c:	f004 fd52 	bl	8007704 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <quadEncoder_Init+0xe4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2200      	movs	r2, #0
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4807      	ldr	r0, [pc, #28]	; (8002c88 <quadEncoder_Init+0xe4>)
 8002c6c:	f004 fdfa 	bl	8007864 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002c70:	2104      	movs	r1, #4
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <quadEncoder_Init+0xe4>)
 8002c74:	f004 fdf6 	bl	8007864 <HAL_TIM_Encoder_Start>
}
 8002c78:	bf00      	nop
 8002c7a:	3728      	adds	r7, #40	; 0x28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20004c5c 	.word	0x20004c5c
 8002c84:	40010000 	.word	0x40010000
 8002c88:	20004ca4 	.word	0x20004ca4

08002c8c <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <quadEncoder_PosCalcL+0x40>)
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f641 129b 	movw	r2, #6555	; 0x199b
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	4a07      	ldr	r2, [pc, #28]	; (8002cd0 <quadEncoder_PosCalcL+0x44>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	461a      	mov	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	601a      	str	r2, [r3, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	10624dd3 	.word	0x10624dd3

08002cd4 <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 8002ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3304      	adds	r3, #4
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f641 129b 	movw	r2, #6555	; 0x199b
 8002cf8:	fb02 f303 	mul.w	r3, r2, r3
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <quadEncoder_PosCalcR+0x44>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	461a      	mov	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	601a      	str	r2, [r3, #0]
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	10624dd3 	.word	0x10624dd3

08002d1c <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 8002d20:	4824      	ldr	r0, [pc, #144]	; (8002db4 <quadEncoder_GetSpeedL+0x98>)
 8002d22:	f7ff ffb3 	bl	8002c8c <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 8002d26:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <quadEncoder_GetSpeedL+0x98>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <quadEncoder_GetSpeedL+0x98>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	b21a      	sxth	r2, r3
 8002d38:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <quadEncoder_GetSpeedL+0x9c>)
 8002d3a:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 8002d3c:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <quadEncoder_GetSpeedL+0x9c>)
 8002d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	db10      	blt.n	8002d68 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 8002d46:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <quadEncoder_GetSpeedL+0x9c>)
 8002d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d50:	db1a      	blt.n	8002d88 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 8002d52:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <quadEncoder_GetSpeedL+0x9c>)
 8002d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	b21a      	sxth	r2, r3
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <quadEncoder_GetSpeedL+0x9c>)
 8002d64:	801a      	strh	r2, [r3, #0]
 8002d66:	e00f      	b.n	8002d88 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <quadEncoder_GetSpeedL+0x9c>)
 8002d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6e:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8002d72:	da09      	bge.n	8002d88 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 8002d74:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <quadEncoder_GetSpeedL+0x9c>)
 8002d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	b21a      	sxth	r2, r3
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <quadEncoder_GetSpeedL+0x9c>)
 8002d86:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <quadEncoder_GetSpeedL+0x9c>)
 8002d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d94:	fb02 f303 	mul.w	r3, r2, r3
 8002d98:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <quadEncoder_GetSpeedL+0xa0>)
 8002d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8002d9e:	1412      	asrs	r2, r2, #16
 8002da0:	17db      	asrs	r3, r3, #31
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	b21a      	sxth	r2, r3
 8002da6:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <quadEncoder_GetSpeedL+0x9c>)
 8002da8:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 8002daa:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <quadEncoder_GetSpeedL+0x9c>)
 8002dac:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20004cf4 	.word	0x20004cf4
 8002db8:	20004cfc 	.word	0x20004cfc
 8002dbc:	66673335 	.word	0x66673335

08002dc0 <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 8002dc4:	4824      	ldr	r0, [pc, #144]	; (8002e58 <quadEncoder_GetSpeedR+0x98>)
 8002dc6:	f7ff ff85 	bl	8002cd4 <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 8002dca:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <quadEncoder_GetSpeedR+0x98>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <quadEncoder_GetSpeedR+0x98>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b21a      	sxth	r2, r3
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <quadEncoder_GetSpeedR+0x9c>)
 8002dde:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 8002de0:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <quadEncoder_GetSpeedR+0x9c>)
 8002de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db10      	blt.n	8002e0c <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <quadEncoder_GetSpeedR+0x9c>)
 8002dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002df4:	db1a      	blt.n	8002e2c <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 8002df6:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <quadEncoder_GetSpeedR+0x9c>)
 8002df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	b21a      	sxth	r2, r3
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <quadEncoder_GetSpeedR+0x9c>)
 8002e08:	801a      	strh	r2, [r3, #0]
 8002e0a:	e00f      	b.n	8002e2c <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <quadEncoder_GetSpeedR+0x9c>)
 8002e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e12:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8002e16:	da09      	bge.n	8002e2c <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8002e18:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <quadEncoder_GetSpeedR+0x9c>)
 8002e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	b21a      	sxth	r2, r3
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <quadEncoder_GetSpeedR+0x9c>)
 8002e2a:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <quadEncoder_GetSpeedR+0x9c>)
 8002e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e38:	fb02 f303 	mul.w	r3, r2, r3
 8002e3c:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <quadEncoder_GetSpeedR+0xa0>)
 8002e3e:	fb82 1203 	smull	r1, r2, r2, r3
 8002e42:	1412      	asrs	r2, r2, #16
 8002e44:	17db      	asrs	r3, r3, #31
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	b21a      	sxth	r2, r3
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <quadEncoder_GetSpeedR+0x9c>)
 8002e4c:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 8002e4e:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <quadEncoder_GetSpeedR+0x9c>)
 8002e50:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20004d00 	.word	0x20004d00
 8002e5c:	20004d08 	.word	0x20004d08
 8002e60:	66673335 	.word	0x66673335

08002e64 <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <quadEncoder_CallbackIndexL+0x44>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d105      	bne.n	8002e82 <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <quadEncoder_CallbackIndexL+0x48>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <quadEncoder_CallbackIndexL+0x48>)
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	e004      	b.n	8002e8c <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <quadEncoder_CallbackIndexL+0x48>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	4a08      	ldr	r2, [pc, #32]	; (8002eac <quadEncoder_CallbackIndexL+0x48>)
 8002e8a:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <quadEncoder_CallbackIndexL+0x44>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2200      	movs	r2, #0
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002e94:	2100      	movs	r1, #0
 8002e96:	4804      	ldr	r0, [pc, #16]	; (8002ea8 <quadEncoder_CallbackIndexL+0x44>)
 8002e98:	f004 fce4 	bl	8007864 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <quadEncoder_CallbackIndexL+0x44>)
 8002ea0:	f004 fce0 	bl	8007864 <HAL_TIM_Encoder_Start>

}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20004c5c 	.word	0x20004c5c
 8002eac:	20004cec 	.word	0x20004cec

08002eb0 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <quadEncoder_CallbackIndexR+0x44>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b10      	cmp	r3, #16
 8002ec0:	d105      	bne.n	8002ece <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <quadEncoder_CallbackIndexR+0x48>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <quadEncoder_CallbackIndexR+0x48>)
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	e004      	b.n	8002ed8 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <quadEncoder_CallbackIndexR+0x48>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <quadEncoder_CallbackIndexR+0x48>)
 8002ed6:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <quadEncoder_CallbackIndexR+0x44>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2200      	movs	r2, #0
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4804      	ldr	r0, [pc, #16]	; (8002ef4 <quadEncoder_CallbackIndexR+0x44>)
 8002ee4:	f004 fcbe 	bl	8007864 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002ee8:	2104      	movs	r1, #4
 8002eea:	4802      	ldr	r0, [pc, #8]	; (8002ef4 <quadEncoder_CallbackIndexR+0x44>)
 8002eec:	f004 fcba 	bl	8007864 <HAL_TIM_Encoder_Start>

}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20004ca4 	.word	0x20004ca4
 8002ef8:	20004cf0 	.word	0x20004cf0

08002efc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002f04:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <RetargetInit+0x28>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <RetargetInit+0x2c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6898      	ldr	r0, [r3, #8]
 8002f10:	2300      	movs	r3, #0
 8002f12:	2202      	movs	r2, #2
 8002f14:	2100      	movs	r1, #0
 8002f16:	f015 f979 	bl	801820c <setvbuf>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20004d0c 	.word	0x20004d0c
 8002f28:	200000cc 	.word	0x200000cc

08002f2c <_isatty>:

int _isatty(int fd) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db04      	blt.n	8002f44 <_isatty+0x18>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	dc01      	bgt.n	8002f44 <_isatty+0x18>
    return 1;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e005      	b.n	8002f50 <_isatty+0x24>

  errno = EBADF;
 8002f44:	f015 fc5a 	bl	80187fc <__errno>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2209      	movs	r2, #9
 8002f4c:	601a      	str	r2, [r3, #0]
  return 0;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_write>:

int _write(int fd, char* ptr, int len) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d002      	beq.n	8002f70 <_write+0x18>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d111      	bne.n	8002f94 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002f70:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <_write+0x54>)
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	f005 f983 	bl	8008288 <HAL_UART_Transmit>
 8002f82:	4603      	mov	r3, r0
 8002f84:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <_write+0x38>
      return len;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	e008      	b.n	8002fa2 <_write+0x4a>
    else
      return EIO;
 8002f90:	2305      	movs	r3, #5
 8002f92:	e006      	b.n	8002fa2 <_write+0x4a>
  }
  errno = EBADF;
 8002f94:	f015 fc32 	bl	80187fc <__errno>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2209      	movs	r2, #9
 8002f9c:	601a      	str	r2, [r3, #0]
  return -1;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20004d0c 	.word	0x20004d0c

08002fb0 <_close>:

int _close(int fd) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db04      	blt.n	8002fc8 <_close+0x18>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	dc01      	bgt.n	8002fc8 <_close+0x18>
    return 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e006      	b.n	8002fd6 <_close+0x26>

  errno = EBADF;
 8002fc8:	f015 fc18 	bl	80187fc <__errno>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2209      	movs	r2, #9
 8002fd0:	601a      	str	r2, [r3, #0]
  return -1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002fea:	f015 fc07 	bl	80187fc <__errno>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2209      	movs	r2, #9
 8002ff2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_read>:

int _read(int fd, char* ptr, int len) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d110      	bne.n	8003034 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <_read+0x4c>)
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800301a:	2201      	movs	r2, #1
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	f005 f9c5 	bl	80083ac <HAL_UART_Receive>
 8003022:	4603      	mov	r3, r0
 8003024:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <_read+0x30>
      return 1;
 800302c:	2301      	movs	r3, #1
 800302e:	e008      	b.n	8003042 <_read+0x42>
    else
      return EIO;
 8003030:	2305      	movs	r3, #5
 8003032:	e006      	b.n	8003042 <_read+0x42>
  }
  errno = EBADF;
 8003034:	f015 fbe2 	bl	80187fc <__errno>
 8003038:	4603      	mov	r3, r0
 800303a:	2209      	movs	r2, #9
 800303c:	601a      	str	r2, [r3, #0]
  return -1;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20004d0c 	.word	0x20004d0c

08003050 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	db08      	blt.n	8003072 <_fstat+0x22>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	dc05      	bgt.n	8003072 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800306c:	605a      	str	r2, [r3, #4]
    return 0;
 800306e:	2300      	movs	r3, #0
 8003070:	e005      	b.n	800307e <_fstat+0x2e>
  }

  errno = EBADF;
 8003072:	f015 fbc3 	bl	80187fc <__errno>
 8003076:	4603      	mov	r3, r0
 8003078:	2209      	movs	r2, #9
 800307a:	601a      	str	r2, [r3, #0]
  return 0;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <_getpid>:

int _getpid(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
	return 1;
 800308a:	2301      	movs	r3, #1
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <_kill>:

int _kill(int pid, int sig)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030a0:	f015 fbac 	bl	80187fc <__errno>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2216      	movs	r2, #22
 80030a8:	601a      	str	r2, [r3, #0]
	return -1;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_MspInit>:
void HAL_Encoder_Timer1_MspInit(void);
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);

void HAL_MspInit(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	4b33      	ldr	r3, [pc, #204]	; (8003190 <HAL_MspInit+0xd8>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	4a32      	ldr	r2, [pc, #200]	; (8003190 <HAL_MspInit+0xd8>)
 80030c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030cc:	6453      	str	r3, [r2, #68]	; 0x44
 80030ce:	4b30      	ldr	r3, [pc, #192]	; (8003190 <HAL_MspInit+0xd8>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <HAL_MspInit+0xd8>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <HAL_MspInit+0xd8>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_MspInit+0xd8>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b25      	ldr	r3, [pc, #148]	; (8003190 <HAL_MspInit+0xd8>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a24      	ldr	r2, [pc, #144]	; (8003190 <HAL_MspInit+0xd8>)
 8003100:	f043 0304 	orr.w	r3, r3, #4
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b22      	ldr	r3, [pc, #136]	; (8003190 <HAL_MspInit+0xd8>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <HAL_MspInit+0xd8>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <HAL_MspInit+0xd8>)
 800311c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003120:	6313      	str	r3, [r2, #48]	; 0x30
 8003122:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <HAL_MspInit+0xd8>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	4b17      	ldr	r3, [pc, #92]	; (8003190 <HAL_MspInit+0xd8>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4a16      	ldr	r2, [pc, #88]	; (8003190 <HAL_MspInit+0xd8>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6313      	str	r3, [r2, #48]	; 0x30
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <HAL_MspInit+0xd8>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_MspInit+0xd8>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	4a0f      	ldr	r2, [pc, #60]	; (8003190 <HAL_MspInit+0xd8>)
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	6313      	str	r3, [r2, #48]	; 0x30
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <HAL_MspInit+0xd8>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	210f      	movs	r1, #15
 800316a:	f06f 0001 	mvn.w	r0, #1
 800316e:	f001 f8ab 	bl	80042c8 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 8003172:	f000 f895 	bl	80032a0 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 8003176:	f000 f815 	bl	80031a4 <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 800317a:	f000 f853 	bl	8003224 <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 800317e:	f000 f8ed 	bl	800335c <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 8003182:	f000 f807 	bl	8003194 <HAL_GPIO_MspInit>

}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800

08003194 <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
	  //GPIO_InitStruct.Pull = GPIO_NOPULL;
	  //GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;

	  //HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <HAL_Encoder_Timer1_MspInit+0x74>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	4a19      	ldr	r2, [pc, #100]	; (8003218 <HAL_Encoder_Timer1_MspInit+0x74>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ba:	4b17      	ldr	r3, [pc, #92]	; (8003218 <HAL_Encoder_Timer1_MspInit+0x74>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80031c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031ca:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 80031cc:	2302      	movs	r3, #2
 80031ce:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031d0:	2301      	movs	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80031d4:	2301      	movs	r3, #1
 80031d6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 80031d8:	2301      	movs	r3, #1
 80031da:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031dc:	1d3b      	adds	r3, r7, #4
 80031de:	4619      	mov	r1, r3
 80031e0:	480e      	ldr	r0, [pc, #56]	; (800321c <HAL_Encoder_Timer1_MspInit+0x78>)
 80031e2:	f001 fcab 	bl	8004b3c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ea:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80031f0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	4619      	mov	r1, r3
 80031fa:	4809      	ldr	r0, [pc, #36]	; (8003220 <HAL_Encoder_Timer1_MspInit+0x7c>)
 80031fc:	f001 fc9e 	bl	8004b3c <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 8003200:	2200      	movs	r2, #0
 8003202:	2107      	movs	r1, #7
 8003204:	2028      	movs	r0, #40	; 0x28
 8003206:	f001 f85f 	bl	80042c8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800320a:	2028      	movs	r0, #40	; 0x28
 800320c:	f001 f878 	bl	8004300 <HAL_NVIC_EnableIRQ>
}
 8003210:	bf00      	nop
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	40020000 	.word	0x40020000
 8003220:	40020400 	.word	0x40020400

08003224 <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b16      	ldr	r3, [pc, #88]	; (8003294 <HAL_Encoder_Timer2_MspInit+0x70>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003246:	2303      	movs	r3, #3
 8003248:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 800324a:	2302      	movs	r3, #2
 800324c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800324e:	2301      	movs	r3, #1
 8003250:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003252:	2301      	movs	r3, #1
 8003254:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 8003256:	2301      	movs	r3, #1
 8003258:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	4619      	mov	r1, r3
 800325e:	480e      	ldr	r0, [pc, #56]	; (8003298 <HAL_Encoder_Timer2_MspInit+0x74>)
 8003260:	f001 fc6c 	bl	8004b3c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003264:	2301      	movs	r3, #1
 8003266:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003268:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800326c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4809      	ldr	r0, [pc, #36]	; (800329c <HAL_Encoder_Timer2_MspInit+0x78>)
 8003278:	f001 fc60 	bl	8004b3c <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 800327c:	2200      	movs	r2, #0
 800327e:	2106      	movs	r1, #6
 8003280:	2006      	movs	r0, #6
 8003282:	f001 f821 	bl	80042c8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003286:	2006      	movs	r0, #6
 8003288:	f001 f83a 	bl	8004300 <HAL_NVIC_EnableIRQ>
}
 800328c:	bf00      	nop
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	40020000 	.word	0x40020000
 800329c:	40020800 	.word	0x40020800

080032a0 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	4b28      	ldr	r3, [pc, #160]	; (800334c <HAL_PWM_Timer3_MspInit+0xac>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	4a27      	ldr	r2, [pc, #156]	; (800334c <HAL_PWM_Timer3_MspInit+0xac>)
 80032b0:	f043 0302 	orr.w	r3, r3, #2
 80032b4:	6413      	str	r3, [r2, #64]	; 0x40
 80032b6:	4b25      	ldr	r3, [pc, #148]	; (800334c <HAL_PWM_Timer3_MspInit+0xac>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032c2:	2340      	movs	r3, #64	; 0x40
 80032c4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ca:	2301      	movs	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80032ce:	2301      	movs	r3, #1
 80032d0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80032d2:	2302      	movs	r3, #2
 80032d4:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d6:	1d3b      	adds	r3, r7, #4
 80032d8:	4619      	mov	r1, r3
 80032da:	481d      	ldr	r0, [pc, #116]	; (8003350 <HAL_PWM_Timer3_MspInit+0xb0>)
 80032dc:	f001 fc2e 	bl	8004b3c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e4:	2302      	movs	r3, #2
 80032e6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e8:	2301      	movs	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80032ec:	2301      	movs	r3, #1
 80032ee:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80032f0:	2302      	movs	r3, #2
 80032f2:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	4816      	ldr	r0, [pc, #88]	; (8003354 <HAL_PWM_Timer3_MspInit+0xb4>)
 80032fa:	f001 fc1f 	bl	8004b3c <HAL_GPIO_Init>

	  // ENABLE MOTEUR : SORTIE LOGIQUE PB3
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4810      	ldr	r0, [pc, #64]	; (8003350 <HAL_PWM_Timer3_MspInit+0xb0>)
 8003310:	f001 fc14 	bl	8004b3c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8003314:	2201      	movs	r2, #1
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	480d      	ldr	r0, [pc, #52]	; (8003350 <HAL_PWM_Timer3_MspInit+0xb0>)
 800331a:	f001 fd93 	bl	8004e44 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800331e:	2308      	movs	r3, #8
 8003320:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003322:	2301      	movs	r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003326:	2301      	movs	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800332a:	2302      	movs	r3, #2
 800332c:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	4619      	mov	r1, r3
 8003332:	4809      	ldr	r0, [pc, #36]	; (8003358 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003334:	f001 fc02 	bl	8004b3c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8003338:	2201      	movs	r2, #1
 800333a:	2108      	movs	r1, #8
 800333c:	4806      	ldr	r0, [pc, #24]	; (8003358 <HAL_PWM_Timer3_MspInit+0xb8>)
 800333e:	f001 fd81 	bl	8004e44 <HAL_GPIO_WritePin>




}
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	40020000 	.word	0x40020000
 8003354:	40020800 	.word	0x40020800
 8003358:	40020400 	.word	0x40020400

0800335c <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <HAL_adcir_MspInit+0x58>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <HAL_adcir_MspInit+0x58>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6453      	str	r3, [r2, #68]	; 0x44
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <HAL_adcir_MspInit+0x58>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 800337e:	2310      	movs	r3, #16
 8003380:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003382:	2303      	movs	r3, #3
 8003384:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338a:	1d3b      	adds	r3, r7, #4
 800338c:	4619      	mov	r1, r3
 800338e:	480a      	ldr	r0, [pc, #40]	; (80033b8 <HAL_adcir_MspInit+0x5c>)
 8003390:	f001 fbd4 	bl	8004b3c <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8003394:	2301      	movs	r3, #1
 8003396:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003398:	2303      	movs	r3, #3
 800339a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4805      	ldr	r0, [pc, #20]	; (80033bc <HAL_adcir_MspInit+0x60>)
 80033a6:	f001 fbc9 	bl	8004b3c <HAL_GPIO_Init>

}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40020000 	.word	0x40020000
 80033bc:	40020400 	.word	0x40020400

080033c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a21      	ldr	r2, [pc, #132]	; (8003464 <HAL_I2C_MspInit+0xa4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d13c      	bne.n	800345c <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_I2C_MspInit+0xa8>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a1f      	ldr	r2, [pc, #124]	; (8003468 <HAL_I2C_MspInit+0xa8>)
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_I2C_MspInit+0xa8>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003404:	2312      	movs	r3, #18
 8003406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340c:	2303      	movs	r3, #3
 800340e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003410:	2304      	movs	r3, #4
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	4619      	mov	r1, r3
 800341a:	4814      	ldr	r0, [pc, #80]	; (800346c <HAL_I2C_MspInit+0xac>)
 800341c:	f001 fb8e 	bl	8004b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_I2C_MspInit+0xa8>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	4a0f      	ldr	r2, [pc, #60]	; (8003468 <HAL_I2C_MspInit+0xa8>)
 800342a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800342e:	6413      	str	r3, [r2, #64]	; 0x40
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <HAL_I2C_MspInit+0xa8>)
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 800343c:	2200      	movs	r2, #0
 800343e:	2102      	movs	r1, #2
 8003440:	2020      	movs	r0, #32
 8003442:	f000 ff41 	bl	80042c8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003446:	2020      	movs	r0, #32
 8003448:	f000 ff5a 	bl	8004300 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 800344c:	2200      	movs	r2, #0
 800344e:	210b      	movs	r1, #11
 8003450:	201f      	movs	r0, #31
 8003452:	f000 ff39 	bl	80042c8 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003456:	201f      	movs	r0, #31
 8003458:	f000 ff52 	bl	8004300 <HAL_NVIC_EnableIRQ>



  }

}
 800345c:	bf00      	nop
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40005400 	.word	0x40005400
 8003468:	40023800 	.word	0x40023800
 800346c:	40020400 	.word	0x40020400

08003470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08c      	sub	sp, #48	; 0x30
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 031c 	add.w	r3, r7, #28
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4aa2      	ldr	r2, [pc, #648]	; (8003718 <HAL_UART_MspInit+0x2a8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	f040 80a5 	bne.w	80035de <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	4ba0      	ldr	r3, [pc, #640]	; (800371c <HAL_UART_MspInit+0x2ac>)
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	4a9f      	ldr	r2, [pc, #636]	; (800371c <HAL_UART_MspInit+0x2ac>)
 800349e:	f043 0310 	orr.w	r3, r3, #16
 80034a2:	6453      	str	r3, [r2, #68]	; 0x44
 80034a4:	4b9d      	ldr	r3, [pc, #628]	; (800371c <HAL_UART_MspInit+0x2ac>)
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	4b99      	ldr	r3, [pc, #612]	; (800371c <HAL_UART_MspInit+0x2ac>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	4a98      	ldr	r2, [pc, #608]	; (800371c <HAL_UART_MspInit+0x2ac>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6313      	str	r3, [r2, #48]	; 0x30
 80034c0:	4b96      	ldr	r3, [pc, #600]	; (800371c <HAL_UART_MspInit+0x2ac>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034da:	2303      	movs	r3, #3
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034de:	2307      	movs	r3, #7
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e2:	f107 031c 	add.w	r3, r7, #28
 80034e6:	4619      	mov	r1, r3
 80034e8:	488d      	ldr	r0, [pc, #564]	; (8003720 <HAL_UART_MspInit+0x2b0>)
 80034ea:	f001 fb27 	bl	8004b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034ee:	2340      	movs	r3, #64	; 0x40
 80034f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	2302      	movs	r3, #2
 80034f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fa:	2303      	movs	r3, #3
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034fe:	2307      	movs	r3, #7
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003502:	f107 031c 	add.w	r3, r7, #28
 8003506:	4619      	mov	r1, r3
 8003508:	4886      	ldr	r0, [pc, #536]	; (8003724 <HAL_UART_MspInit+0x2b4>)
 800350a:	f001 fb17 	bl	8004b3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800350e:	4b86      	ldr	r3, [pc, #536]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 8003510:	4a86      	ldr	r2, [pc, #536]	; (800372c <HAL_UART_MspInit+0x2bc>)
 8003512:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003514:	4b84      	ldr	r3, [pc, #528]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 8003516:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800351a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800351c:	4b82      	ldr	r3, [pc, #520]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003522:	4b81      	ldr	r3, [pc, #516]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 8003524:	2200      	movs	r2, #0
 8003526:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003528:	4b7f      	ldr	r3, [pc, #508]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 800352a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800352e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003530:	4b7d      	ldr	r3, [pc, #500]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 8003532:	2200      	movs	r2, #0
 8003534:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003536:	4b7c      	ldr	r3, [pc, #496]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 8003538:	2200      	movs	r2, #0
 800353a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800353c:	4b7a      	ldr	r3, [pc, #488]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 800353e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003542:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003544:	4b78      	ldr	r3, [pc, #480]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 8003546:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800354a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800354c:	4b76      	ldr	r3, [pc, #472]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 800354e:	2200      	movs	r2, #0
 8003550:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003552:	4875      	ldr	r0, [pc, #468]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 8003554:	f000 fee2 	bl	800431c <HAL_DMA_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 800355e:	f7ff f8fd 	bl	800275c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a70      	ldr	r2, [pc, #448]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 8003566:	639a      	str	r2, [r3, #56]	; 0x38
 8003568:	4a6f      	ldr	r2, [pc, #444]	; (8003728 <HAL_UART_MspInit+0x2b8>)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800356e:	4b70      	ldr	r3, [pc, #448]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 8003570:	4a70      	ldr	r2, [pc, #448]	; (8003734 <HAL_UART_MspInit+0x2c4>)
 8003572:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003574:	4b6e      	ldr	r3, [pc, #440]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 8003576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800357a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800357c:	4b6c      	ldr	r3, [pc, #432]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 800357e:	2240      	movs	r2, #64	; 0x40
 8003580:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003582:	4b6b      	ldr	r3, [pc, #428]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 8003584:	2200      	movs	r2, #0
 8003586:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003588:	4b69      	ldr	r3, [pc, #420]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 800358a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800358e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003590:	4b67      	ldr	r3, [pc, #412]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 8003592:	2200      	movs	r2, #0
 8003594:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003596:	4b66      	ldr	r3, [pc, #408]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 8003598:	2200      	movs	r2, #0
 800359a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800359c:	4b64      	ldr	r3, [pc, #400]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 800359e:	2200      	movs	r2, #0
 80035a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80035a2:	4b63      	ldr	r3, [pc, #396]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 80035a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80035a8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035aa:	4b61      	ldr	r3, [pc, #388]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80035b0:	485f      	ldr	r0, [pc, #380]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 80035b2:	f000 feb3 	bl	800431c <HAL_DMA_Init>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 80035bc:	f7ff f8ce 	bl	800275c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a5b      	ldr	r2, [pc, #364]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 80035c4:	635a      	str	r2, [r3, #52]	; 0x34
 80035c6:	4a5a      	ldr	r2, [pc, #360]	; (8003730 <HAL_UART_MspInit+0x2c0>)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80035cc:	2200      	movs	r2, #0
 80035ce:	2105      	movs	r1, #5
 80035d0:	2025      	movs	r0, #37	; 0x25
 80035d2:	f000 fe79 	bl	80042c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035d6:	2025      	movs	r0, #37	; 0x25
 80035d8:	f000 fe92 	bl	8004300 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035dc:	e098      	b.n	8003710 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a55      	ldr	r2, [pc, #340]	; (8003738 <HAL_UART_MspInit+0x2c8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	f040 8093 	bne.w	8003710 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	4b4b      	ldr	r3, [pc, #300]	; (800371c <HAL_UART_MspInit+0x2ac>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	4a4a      	ldr	r2, [pc, #296]	; (800371c <HAL_UART_MspInit+0x2ac>)
 80035f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f8:	6413      	str	r3, [r2, #64]	; 0x40
 80035fa:	4b48      	ldr	r3, [pc, #288]	; (800371c <HAL_UART_MspInit+0x2ac>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_UART_MspInit+0x2ac>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	4a43      	ldr	r2, [pc, #268]	; (800371c <HAL_UART_MspInit+0x2ac>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6313      	str	r3, [r2, #48]	; 0x30
 8003616:	4b41      	ldr	r3, [pc, #260]	; (800371c <HAL_UART_MspInit+0x2ac>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003622:	230c      	movs	r3, #12
 8003624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003626:	2302      	movs	r3, #2
 8003628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362e:	2303      	movs	r3, #3
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003632:	2307      	movs	r3, #7
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003636:	f107 031c 	add.w	r3, r7, #28
 800363a:	4619      	mov	r1, r3
 800363c:	4838      	ldr	r0, [pc, #224]	; (8003720 <HAL_UART_MspInit+0x2b0>)
 800363e:	f001 fa7d 	bl	8004b3c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003642:	4b3e      	ldr	r3, [pc, #248]	; (800373c <HAL_UART_MspInit+0x2cc>)
 8003644:	4a3e      	ldr	r2, [pc, #248]	; (8003740 <HAL_UART_MspInit+0x2d0>)
 8003646:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003648:	4b3c      	ldr	r3, [pc, #240]	; (800373c <HAL_UART_MspInit+0x2cc>)
 800364a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800364e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003650:	4b3a      	ldr	r3, [pc, #232]	; (800373c <HAL_UART_MspInit+0x2cc>)
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003656:	4b39      	ldr	r3, [pc, #228]	; (800373c <HAL_UART_MspInit+0x2cc>)
 8003658:	2200      	movs	r2, #0
 800365a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800365c:	4b37      	ldr	r3, [pc, #220]	; (800373c <HAL_UART_MspInit+0x2cc>)
 800365e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003662:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003664:	4b35      	ldr	r3, [pc, #212]	; (800373c <HAL_UART_MspInit+0x2cc>)
 8003666:	2200      	movs	r2, #0
 8003668:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800366a:	4b34      	ldr	r3, [pc, #208]	; (800373c <HAL_UART_MspInit+0x2cc>)
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003670:	4b32      	ldr	r3, [pc, #200]	; (800373c <HAL_UART_MspInit+0x2cc>)
 8003672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003676:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003678:	4b30      	ldr	r3, [pc, #192]	; (800373c <HAL_UART_MspInit+0x2cc>)
 800367a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800367e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003680:	4b2e      	ldr	r3, [pc, #184]	; (800373c <HAL_UART_MspInit+0x2cc>)
 8003682:	2200      	movs	r2, #0
 8003684:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003686:	482d      	ldr	r0, [pc, #180]	; (800373c <HAL_UART_MspInit+0x2cc>)
 8003688:	f000 fe48 	bl	800431c <HAL_DMA_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8003692:	f7ff f863 	bl	800275c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a28      	ldr	r2, [pc, #160]	; (800373c <HAL_UART_MspInit+0x2cc>)
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
 800369c:	4a27      	ldr	r2, [pc, #156]	; (800373c <HAL_UART_MspInit+0x2cc>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80036a2:	4b28      	ldr	r3, [pc, #160]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036a4:	4a28      	ldr	r2, [pc, #160]	; (8003748 <HAL_UART_MspInit+0x2d8>)
 80036a6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80036a8:	4b26      	ldr	r3, [pc, #152]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036b0:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036b2:	2240      	movs	r2, #64	; 0x40
 80036b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036bc:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036c4:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036ca:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80036d0:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036d6:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036dc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036de:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80036e4:	4817      	ldr	r0, [pc, #92]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036e6:	f000 fe19 	bl	800431c <HAL_DMA_Init>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80036f0:	f7ff f834 	bl	800275c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a13      	ldr	r2, [pc, #76]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34
 80036fa:	4a12      	ldr	r2, [pc, #72]	; (8003744 <HAL_UART_MspInit+0x2d4>)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003700:	2200      	movs	r2, #0
 8003702:	2105      	movs	r1, #5
 8003704:	2026      	movs	r0, #38	; 0x26
 8003706:	f000 fddf 	bl	80042c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800370a:	2026      	movs	r0, #38	; 0x26
 800370c:	f000 fdf8 	bl	8004300 <HAL_NVIC_EnableIRQ>
}
 8003710:	bf00      	nop
 8003712:	3730      	adds	r7, #48	; 0x30
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40011000 	.word	0x40011000
 800371c:	40023800 	.word	0x40023800
 8003720:	40020000 	.word	0x40020000
 8003724:	40020400 	.word	0x40020400
 8003728:	20004a44 	.word	0x20004a44
 800372c:	40026440 	.word	0x40026440
 8003730:	20004aa4 	.word	0x20004aa4
 8003734:	400264b8 	.word	0x400264b8
 8003738:	40004400 	.word	0x40004400
 800373c:	20004b04 	.word	0x20004b04
 8003740:	40026088 	.word	0x40026088
 8003744:	20004b64 	.word	0x20004b64
 8003748:	400260a0 	.word	0x400260a0

0800374c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	; 0x30
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	4b2f      	ldr	r3, [pc, #188]	; (8003820 <HAL_InitTick+0xd4>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	4a2e      	ldr	r2, [pc, #184]	; (8003820 <HAL_InitTick+0xd4>)
 8003766:	f043 0304 	orr.w	r3, r3, #4
 800376a:	6413      	str	r3, [r2, #64]	; 0x40
 800376c:	4b2c      	ldr	r3, [pc, #176]	; (8003820 <HAL_InitTick+0xd4>)
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003778:	f107 020c 	add.w	r2, r7, #12
 800377c:	f107 0310 	add.w	r3, r7, #16
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f003 fe20 	bl	80073c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003788:	f003 fe0a 	bl	80073a0 <HAL_RCC_GetPCLK2Freq>
 800378c:	4603      	mov	r3, r0
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	4a23      	ldr	r2, [pc, #140]	; (8003824 <HAL_InitTick+0xd8>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	0c9b      	lsrs	r3, r3, #18
 800379c:	3b01      	subs	r3, #1
 800379e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_InitTick+0xdc>)
 80037a2:	4a22      	ldr	r2, [pc, #136]	; (800382c <HAL_InitTick+0xe0>)
 80037a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80037a6:	4b20      	ldr	r3, [pc, #128]	; (8003828 <HAL_InitTick+0xdc>)
 80037a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037ac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80037ae:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <HAL_InitTick+0xdc>)
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80037b4:	4b1c      	ldr	r3, [pc, #112]	; (8003828 <HAL_InitTick+0xdc>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ba:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_InitTick+0xdc>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <HAL_InitTick+0xdc>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80037c6:	4818      	ldr	r0, [pc, #96]	; (8003828 <HAL_InitTick+0xdc>)
 80037c8:	f003 fe30 	bl	800742c <HAL_TIM_Base_Init>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80037d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11b      	bne.n	8003812 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80037da:	4813      	ldr	r0, [pc, #76]	; (8003828 <HAL_InitTick+0xdc>)
 80037dc:	f003 fe80 	bl	80074e0 <HAL_TIM_Base_Start_IT>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80037e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d111      	bne.n	8003812 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037ee:	201e      	movs	r0, #30
 80037f0:	f000 fd86 	bl	8004300 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b0f      	cmp	r3, #15
 80037f8:	d808      	bhi.n	800380c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80037fa:	2200      	movs	r2, #0
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	201e      	movs	r0, #30
 8003800:	f000 fd62 	bl	80042c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003804:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <HAL_InitTick+0xe4>)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e002      	b.n	8003812 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003816:	4618      	mov	r0, r3
 8003818:	3730      	adds	r7, #48	; 0x30
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	431bde83 	.word	0x431bde83
 8003828:	20004d10 	.word	0x20004d10
 800382c:	40000800 	.word	0x40000800
 8003830:	20000010 	.word	0x20000010

08003834 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  while (1)
 8003838:	e7fe      	b.n	8003838 <NMI_Handler+0x4>

0800383a <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0

  while (1)
 800383e:	e7fe      	b.n	800383e <HardFault_Handler+0x4>

08003840 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  while (1)
 8003844:	e7fe      	b.n	8003844 <MemManage_Handler+0x4>

08003846 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0
  while (1)
 800384a:	e7fe      	b.n	800384a <BusFault_Handler+0x4>

0800384c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  while (1)
 8003850:	e7fe      	b.n	8003850 <UsageFault_Handler+0x4>

08003852 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8003852:	b480      	push	{r7}
 8003854:	af00      	add	r7, sp, #0
}
 8003856:	bf00      	nop
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <DMA1_Stream5_IRQHandler+0x10>)
 8003866:	f000 fef1 	bl	800464c <HAL_DMA_IRQHandler>
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20004b04 	.word	0x20004b04

08003874 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003878:	4802      	ldr	r0, [pc, #8]	; (8003884 <DMA1_Stream6_IRQHandler+0x10>)
 800387a:	f000 fee7 	bl	800464c <HAL_DMA_IRQHandler>
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20004b64 	.word	0x20004b64

08003888 <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <TIM4_IRQHandler+0x10>)
 800388e:	f004 f877 	bl	8007980 <HAL_TIM_IRQHandler>
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20004d10 	.word	0x20004d10

0800389c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <USART1_IRQHandler+0x10>)
 80038a2:	f004 ff53 	bl	800874c <HAL_UART_IRQHandler>
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	200049bc 	.word	0x200049bc

080038b0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <USART2_IRQHandler+0x10>)
 80038b6:	f004 ff49 	bl	800874c <HAL_UART_IRQHandler>
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20004a00 	.word	0x20004a00

080038c4 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <DMA2_Stream2_IRQHandler+0x10>)
 80038ca:	f000 febf 	bl	800464c <HAL_DMA_IRQHandler>
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20004a44 	.word	0x20004a44

080038d8 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <DMA2_Stream7_IRQHandler+0x10>)
 80038de:	f000 feb5 	bl	800464c <HAL_DMA_IRQHandler>
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20004aa4 	.word	0x20004aa4

080038ec <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80038f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80038f4:	f001 fac0 	bl	8004e78 <HAL_GPIO_EXTI_IRQHandler>
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}

080038fc <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003900:	2001      	movs	r0, #1
 8003902:	f001 fab9 	bl	8004e78 <HAL_GPIO_EXTI_IRQHandler>
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003910:	4802      	ldr	r0, [pc, #8]	; (800391c <I2C1_EV_IRQHandler+0x10>)
 8003912:	f001 fc0d 	bl	8005130 <HAL_I2C_EV_IRQHandler>
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20004968 	.word	0x20004968

08003920 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003924:	4802      	ldr	r0, [pc, #8]	; (8003930 <I2C1_ER_IRQHandler+0x10>)
 8003926:	f001 fd56 	bl	80053d6 <HAL_I2C_ER_IRQHandler>
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20004968 	.word	0x20004968

08003934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <_sbrk+0x5c>)
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <_sbrk+0x60>)
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <_sbrk+0x64>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <_sbrk+0x64>)
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <_sbrk+0x68>)
 8003954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <_sbrk+0x64>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	429a      	cmp	r2, r3
 8003962:	d207      	bcs.n	8003974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003964:	f014 ff4a 	bl	80187fc <__errno>
 8003968:	4603      	mov	r3, r0
 800396a:	220c      	movs	r2, #12
 800396c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800396e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003972:	e009      	b.n	8003988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <_sbrk+0x64>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <_sbrk+0x64>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <_sbrk+0x64>)
 8003984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20020000 	.word	0x20020000
 8003994:	00000400 	.word	0x00000400
 8003998:	20004d58 	.word	0x20004d58
 800399c:	2000e850 	.word	0x2000e850

080039a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <SystemInit+0x20>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <SystemInit+0x20>)
 80039ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b094      	sub	sp, #80	; 0x50
 80039c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039ca:	f107 0320 	add.w	r3, r7, #32
 80039ce:	2230      	movs	r2, #48	; 0x30
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f014 fe28 	bl	8018628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039d8:	f107 030c 	add.w	r3, r7, #12
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	4b28      	ldr	r3, [pc, #160]	; (8003a90 <SystemClock_Config+0xcc>)
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	4a27      	ldr	r2, [pc, #156]	; (8003a90 <SystemClock_Config+0xcc>)
 80039f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f6:	6413      	str	r3, [r2, #64]	; 0x40
 80039f8:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <SystemClock_Config+0xcc>)
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a04:	2300      	movs	r3, #0
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <SystemClock_Config+0xd0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a21      	ldr	r2, [pc, #132]	; (8003a94 <SystemClock_Config+0xd0>)
 8003a0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <SystemClock_Config+0xd0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003a24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a34:	2308      	movs	r3, #8
 8003a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003a38:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8003a3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003a3e:	2306      	movs	r3, #6
 8003a40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a42:	2304      	movs	r3, #4
 8003a44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a46:	f107 0320 	add.w	r3, r7, #32
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 f824 	bl	8006a98 <HAL_RCC_OscConfig>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003a56:	f7fe fe81 	bl	800275c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a5a:	230f      	movs	r3, #15
 8003a5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a62:	2300      	movs	r3, #0
 8003a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003a6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a72:	f107 030c 	add.w	r3, r7, #12
 8003a76:	2102      	movs	r1, #2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f003 fa85 	bl	8006f88 <HAL_RCC_ClockConfig>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003a84:	f7fe fe6a 	bl	800275c <Error_Handler>
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3750      	adds	r7, #80	; 0x50
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40007000 	.word	0x40007000

08003a98 <Reset_Handler>:
 8003a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ad0 <LoopFillZerobss+0x12>
 8003a9c:	480d      	ldr	r0, [pc, #52]	; (8003ad4 <LoopFillZerobss+0x16>)
 8003a9e:	490e      	ldr	r1, [pc, #56]	; (8003ad8 <LoopFillZerobss+0x1a>)
 8003aa0:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <LoopFillZerobss+0x1e>)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e002      	b.n	8003aac <LoopCopyDataInit>

08003aa6 <CopyDataInit>:
 8003aa6:	58d4      	ldr	r4, [r2, r3]
 8003aa8:	50c4      	str	r4, [r0, r3]
 8003aaa:	3304      	adds	r3, #4

08003aac <LoopCopyDataInit>:
 8003aac:	18c4      	adds	r4, r0, r3
 8003aae:	428c      	cmp	r4, r1
 8003ab0:	d3f9      	bcc.n	8003aa6 <CopyDataInit>
 8003ab2:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <LoopFillZerobss+0x22>)
 8003ab4:	4c0b      	ldr	r4, [pc, #44]	; (8003ae4 <LoopFillZerobss+0x26>)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e001      	b.n	8003abe <LoopFillZerobss>

08003aba <FillZerobss>:
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	3204      	adds	r2, #4

08003abe <LoopFillZerobss>:
 8003abe:	42a2      	cmp	r2, r4
 8003ac0:	d3fb      	bcc.n	8003aba <FillZerobss>
 8003ac2:	f7ff ff6d 	bl	80039a0 <SystemInit>
 8003ac6:	f014 fe9f 	bl	8018808 <__libc_init_array>
 8003aca:	f7fe fd77 	bl	80025bc <main>
 8003ace:	4770      	bx	lr
 8003ad0:	20020000 	.word	0x20020000
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	200000d4 	.word	0x200000d4
 8003adc:	0801a410 	.word	0x0801a410
 8003ae0:	200000d8 	.word	0x200000d8
 8003ae4:	2000e850 	.word	0x2000e850

08003ae8 <ADC_IRQHandler>:
 8003ae8:	e7fe      	b.n	8003ae8 <ADC_IRQHandler>
	...

08003aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003af0:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <HAL_Init+0x40>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <HAL_Init+0x40>)
 8003af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_Init+0x40>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a0a      	ldr	r2, [pc, #40]	; (8003b2c <HAL_Init+0x40>)
 8003b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b08:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_Init+0x40>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <HAL_Init+0x40>)
 8003b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b14:	2003      	movs	r0, #3
 8003b16:	f000 fbcc 	bl	80042b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b1a:	200f      	movs	r0, #15
 8003b1c:	f7ff fe16 	bl	800374c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b20:	f7ff faca 	bl	80030b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023c00 	.word	0x40023c00

08003b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_IncTick+0x20>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_IncTick+0x24>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <HAL_IncTick+0x24>)
 8003b42:	6013      	str	r3, [r2, #0]
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000014 	.word	0x20000014
 8003b54:	20004d5c 	.word	0x20004d5c

08003b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <HAL_GetTick+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	20004d5c 	.word	0x20004d5c

08003b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b78:	f7ff ffee 	bl	8003b58 <HAL_GetTick>
 8003b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b88:	d005      	beq.n	8003b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <HAL_Delay+0x44>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b96:	bf00      	nop
 8003b98:	f7ff ffde 	bl	8003b58 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d8f7      	bhi.n	8003b98 <HAL_Delay+0x28>
  {
  }
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000014 	.word	0x20000014

08003bb8 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e01b      	b.n	8003c02 <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f817 	bl	8003c0a <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f9d7 	bl	8003f98 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_ADC_Start+0x1a>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e053      	b.n	8003ce2 <HAL_ADC_Start+0xc2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b22      	cmp	r3, #34	; 0x22
 8003c4c:	d104      	bne.n	8003c58 <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2232      	movs	r2, #50	; 0x32
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c56:	e003      	b.n	8003c60 <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2212      	movs	r2, #18
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d010      	beq.n	8003c90 <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilization */
    for(; i <= 540; i++)
 8003c7e:	e003      	b.n	8003c88 <HAL_ADC_Start+0x68>
    {
      __NOP();
 8003c80:	bf00      	nop
    for(; i <= 540; i++)
 8003c82:	89fb      	ldrh	r3, [r7, #14]
 8003c84:	3301      	adds	r3, #1
 8003c86:	81fb      	strh	r3, [r7, #14]
 8003c88:	89fb      	ldrh	r3, [r7, #14]
 8003c8a:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8003c8e:	d9f7      	bls.n	8003c80 <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003c90:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <HAL_ADC_Start+0xd0>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10c      	bne.n	8003cb6 <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d119      	bne.n	8003cd8 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	e010      	b.n	8003cd8 <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <HAL_ADC_Start+0xd4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_ADC_Start+0xb8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d107      	bne.n	8003cd8 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cd6:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40012300 	.word	0x40012300
 8003cf4:	40012000 	.word	0x40012000

08003cf8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003d06:	f7ff ff27 	bl	8003b58 <HAL_GetTick>
 8003d0a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d0c:	e018      	b.n	8003d40 <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d14:	d014      	beq.n	8003d40 <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <HAL_ADC_PollForConversion+0x34>
 8003d1c:	f7ff ff1c 	bl	8003b58 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d209      	bcs.n	8003d40 <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2203      	movs	r2, #3
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e016      	b.n	8003d6e <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d1df      	bne.n	8003d0e <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b25      	cmp	r3, #37	; 0x25
 8003d58:	d104      	bne.n	8003d64 <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2235      	movs	r2, #53	; 0x35
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d62:	e003      	b.n	8003d6c <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2215      	movs	r2, #21
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_ADC_ConfigChannel+0x18>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e0ed      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x1f4>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b09      	cmp	r3, #9
 8003db6:	d925      	bls.n	8003e04 <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68d9      	ldr	r1, [r3, #12]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4413      	add	r3, r2
 8003dcc:	3b1e      	subs	r3, #30
 8003dce:	2207      	movs	r2, #7
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43da      	mvns	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	400a      	ands	r2, r1
 8003ddc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68d9      	ldr	r1, [r3, #12]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	4618      	mov	r0, r3
 8003df0:	4603      	mov	r3, r0
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	4403      	add	r3, r0
 8003df6:	3b1e      	subs	r3, #30
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	60da      	str	r2, [r3, #12]
 8003e02:	e022      	b.n	8003e4a <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6919      	ldr	r1, [r3, #16]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	2207      	movs	r2, #7
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	400a      	ands	r2, r1
 8003e26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6919      	ldr	r1, [r3, #16]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	4618      	mov	r0, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4403      	add	r3, r0
 8003e40:	409a      	lsls	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d824      	bhi.n	8003e9c <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	3b05      	subs	r3, #5
 8003e64:	221f      	movs	r2, #31
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	400a      	ands	r2, r1
 8003e72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	4618      	mov	r0, r3
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3b05      	subs	r3, #5
 8003e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	635a      	str	r2, [r3, #52]	; 0x34
 8003e9a:	e04c      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b0c      	cmp	r3, #12
 8003ea2:	d824      	bhi.n	8003eee <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3b23      	subs	r3, #35	; 0x23
 8003eb6:	221f      	movs	r2, #31
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	43da      	mvns	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	3b23      	subs	r3, #35	; 0x23
 8003ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
 8003eec:	e023      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	3b41      	subs	r3, #65	; 0x41
 8003f00:	221f      	movs	r2, #31
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43da      	mvns	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	3b41      	subs	r3, #65	; 0x41
 8003f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <HAL_ADC_ConfigChannel+0x200>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d109      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x1c4>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b12      	cmp	r3, #18
 8003f46:	d105      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003f48:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <HAL_ADC_ConfigChannel+0x204>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4a11      	ldr	r2, [pc, #68]	; (8003f94 <HAL_ADC_ConfigChannel+0x204>)
 8003f4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f52:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <HAL_ADC_ConfigChannel+0x200>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d10d      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x1ea>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d003      	beq.n	8003f6e <HAL_ADC_ConfigChannel+0x1de>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b11      	cmp	r3, #17
 8003f6c:	d105      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x1ea>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <HAL_ADC_ConfigChannel+0x204>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <HAL_ADC_ConfigChannel+0x204>)
 8003f74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f78:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40012000 	.word	0x40012000
 8003f94:	40012300 	.word	0x40012300

08003f98 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003fa0:	4b6c      	ldr	r3, [pc, #432]	; (8004154 <ADC_Init+0x1bc>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4a6b      	ldr	r2, [pc, #428]	; (8004154 <ADC_Init+0x1bc>)
 8003fa6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003faa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003fac:	4b69      	ldr	r3, [pc, #420]	; (8004154 <ADC_Init+0x1bc>)
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4967      	ldr	r1, [pc, #412]	; (8004154 <ADC_Init+0x1bc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6859      	ldr	r1, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	021a      	lsls	r2, r3, #8
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800400e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6899      	ldr	r1, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004030:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6899      	ldr	r1, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6899      	ldr	r1, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0202 	bic.w	r2, r2, #2
 8004074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6899      	ldr	r1, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	005a      	lsls	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01b      	beq.n	80040ca <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a0:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040b0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6859      	ldr	r1, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	3b01      	subs	r3, #1
 80040be:	035a      	lsls	r2, r3, #13
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	e007      	b.n	80040da <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040d8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80040e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	051a      	lsls	r2, r3, #20
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800410e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6899      	ldr	r1, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	025a      	lsls	r2, r3, #9
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6899      	ldr	r1, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	029a      	lsls	r2, r3, #10
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	609a      	str	r2, [r3, #8]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40012300 	.word	0x40012300

08004158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <__NVIC_SetPriorityGrouping+0x44>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004174:	4013      	ands	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800418a:	4a04      	ldr	r2, [pc, #16]	; (800419c <__NVIC_SetPriorityGrouping+0x44>)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	60d3      	str	r3, [r2, #12]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <__NVIC_GetPriorityGrouping+0x18>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0a1b      	lsrs	r3, r3, #8
 80041aa:	f003 0307 	and.w	r3, r3, #7
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	db0b      	blt.n	80041e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	f003 021f 	and.w	r2, r3, #31
 80041d4:	4907      	ldr	r1, [pc, #28]	; (80041f4 <__NVIC_EnableIRQ+0x38>)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	2001      	movs	r0, #1
 80041de:	fa00 f202 	lsl.w	r2, r0, r2
 80041e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	e000e100 	.word	0xe000e100

080041f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	6039      	str	r1, [r7, #0]
 8004202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004208:	2b00      	cmp	r3, #0
 800420a:	db0a      	blt.n	8004222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	b2da      	uxtb	r2, r3
 8004210:	490c      	ldr	r1, [pc, #48]	; (8004244 <__NVIC_SetPriority+0x4c>)
 8004212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004216:	0112      	lsls	r2, r2, #4
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	440b      	add	r3, r1
 800421c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004220:	e00a      	b.n	8004238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	4908      	ldr	r1, [pc, #32]	; (8004248 <__NVIC_SetPriority+0x50>)
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	3b04      	subs	r3, #4
 8004230:	0112      	lsls	r2, r2, #4
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	440b      	add	r3, r1
 8004236:	761a      	strb	r2, [r3, #24]
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	e000e100 	.word	0xe000e100
 8004248:	e000ed00 	.word	0xe000ed00

0800424c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800424c:	b480      	push	{r7}
 800424e:	b089      	sub	sp, #36	; 0x24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f1c3 0307 	rsb	r3, r3, #7
 8004266:	2b04      	cmp	r3, #4
 8004268:	bf28      	it	cs
 800426a:	2304      	movcs	r3, #4
 800426c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	3304      	adds	r3, #4
 8004272:	2b06      	cmp	r3, #6
 8004274:	d902      	bls.n	800427c <NVIC_EncodePriority+0x30>
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	3b03      	subs	r3, #3
 800427a:	e000      	b.n	800427e <NVIC_EncodePriority+0x32>
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43da      	mvns	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	401a      	ands	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004294:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	fa01 f303 	lsl.w	r3, r1, r3
 800429e:	43d9      	mvns	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a4:	4313      	orrs	r3, r2
         );
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3724      	adds	r7, #36	; 0x24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff ff4c 	bl	8004158 <__NVIC_SetPriorityGrouping>
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042da:	f7ff ff61 	bl	80041a0 <__NVIC_GetPriorityGrouping>
 80042de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	6978      	ldr	r0, [r7, #20]
 80042e6:	f7ff ffb1 	bl	800424c <NVIC_EncodePriority>
 80042ea:	4602      	mov	r2, r0
 80042ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff ff80 	bl	80041f8 <__NVIC_SetPriority>
}
 80042f8:	bf00      	nop
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff ff54 	bl	80041bc <__NVIC_EnableIRQ>
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004328:	f7ff fc16 	bl	8003b58 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e099      	b.n	800446c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004358:	e00f      	b.n	800437a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800435a:	f7ff fbfd 	bl	8003b58 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b05      	cmp	r3, #5
 8004366:	d908      	bls.n	800437a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2203      	movs	r2, #3
 8004372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e078      	b.n	800446c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e8      	bne.n	800435a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4b38      	ldr	r3, [pc, #224]	; (8004474 <HAL_DMA_Init+0x158>)
 8004394:	4013      	ands	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d107      	bne.n	80043e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	4313      	orrs	r3, r2
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0307 	bic.w	r3, r3, #7
 80043fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	2b04      	cmp	r3, #4
 800440c:	d117      	bne.n	800443e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00e      	beq.n	800443e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fb0f 	bl	8004a44 <DMA_CheckFifoParam>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2240      	movs	r2, #64	; 0x40
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800443a:	2301      	movs	r3, #1
 800443c:	e016      	b.n	800446c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fac6 	bl	80049d8 <DMA_CalcBaseAndBitshift>
 800444c:	4603      	mov	r3, r0
 800444e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004454:	223f      	movs	r2, #63	; 0x3f
 8004456:	409a      	lsls	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	f010803f 	.word	0xf010803f

08004478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_DMA_Start_IT+0x26>
 800449a:	2302      	movs	r3, #2
 800449c:	e040      	b.n	8004520 <HAL_DMA_Start_IT+0xa8>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d12f      	bne.n	8004512 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2202      	movs	r2, #2
 80044b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fa58 	bl	800497c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d0:	223f      	movs	r2, #63	; 0x3f
 80044d2:	409a      	lsls	r2, r3
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0216 	orr.w	r2, r2, #22
 80044e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0208 	orr.w	r2, r2, #8
 80044fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	e005      	b.n	800451e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800451a:	2302      	movs	r3, #2
 800451c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800451e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004536:	f7ff fb0f 	bl	8003b58 <HAL_GetTick>
 800453a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d008      	beq.n	800455a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2280      	movs	r2, #128	; 0x80
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e052      	b.n	8004600 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0216 	bic.w	r2, r2, #22
 8004568:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004578:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <HAL_DMA_Abort+0x62>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0208 	bic.w	r2, r2, #8
 8004598:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045aa:	e013      	b.n	80045d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ac:	f7ff fad4 	bl	8003b58 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b05      	cmp	r3, #5
 80045b8:	d90c      	bls.n	80045d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2203      	movs	r2, #3
 80045c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e015      	b.n	8004600 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e4      	bne.n	80045ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e6:	223f      	movs	r2, #63	; 0x3f
 80045e8:	409a      	lsls	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d004      	beq.n	8004626 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2280      	movs	r2, #128	; 0x80
 8004620:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e00c      	b.n	8004640 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2205      	movs	r2, #5
 800462a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004658:	4b8e      	ldr	r3, [pc, #568]	; (8004894 <HAL_DMA_IRQHandler+0x248>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a8e      	ldr	r2, [pc, #568]	; (8004898 <HAL_DMA_IRQHandler+0x24c>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	0a9b      	lsrs	r3, r3, #10
 8004664:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	2208      	movs	r2, #8
 8004678:	409a      	lsls	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01a      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d013      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0204 	bic.w	r2, r2, #4
 800469e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	2208      	movs	r2, #8
 80046a6:	409a      	lsls	r2, r3
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	f043 0201 	orr.w	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046bc:	2201      	movs	r2, #1
 80046be:	409a      	lsls	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d012      	beq.n	80046ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00b      	beq.n	80046ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046da:	2201      	movs	r2, #1
 80046dc:	409a      	lsls	r2, r3
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	f043 0202 	orr.w	r2, r3, #2
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f2:	2204      	movs	r2, #4
 80046f4:	409a      	lsls	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d012      	beq.n	8004724 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00b      	beq.n	8004724 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004710:	2204      	movs	r2, #4
 8004712:	409a      	lsls	r2, r3
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	f043 0204 	orr.w	r2, r3, #4
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004728:	2210      	movs	r2, #16
 800472a:	409a      	lsls	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d043      	beq.n	80047bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d03c      	beq.n	80047bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004746:	2210      	movs	r2, #16
 8004748:	409a      	lsls	r2, r3
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d018      	beq.n	800478e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d108      	bne.n	800477c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d024      	beq.n	80047bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
 800477a:	e01f      	b.n	80047bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01b      	beq.n	80047bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	4798      	blx	r3
 800478c:	e016      	b.n	80047bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d107      	bne.n	80047ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0208 	bic.w	r2, r2, #8
 80047aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c0:	2220      	movs	r2, #32
 80047c2:	409a      	lsls	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 808f 	beq.w	80048ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8087 	beq.w	80048ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e2:	2220      	movs	r2, #32
 80047e4:	409a      	lsls	r2, r3
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d136      	bne.n	8004864 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0216 	bic.w	r2, r2, #22
 8004804:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695a      	ldr	r2, [r3, #20]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004814:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <HAL_DMA_IRQHandler+0x1da>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0208 	bic.w	r2, r2, #8
 8004834:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483a:	223f      	movs	r2, #63	; 0x3f
 800483c:	409a      	lsls	r2, r3
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004856:	2b00      	cmp	r3, #0
 8004858:	d07e      	beq.n	8004958 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
        }
        return;
 8004862:	e079      	b.n	8004958 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d01d      	beq.n	80048ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10d      	bne.n	800489c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004884:	2b00      	cmp	r3, #0
 8004886:	d031      	beq.n	80048ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	4798      	blx	r3
 8004890:	e02c      	b.n	80048ec <HAL_DMA_IRQHandler+0x2a0>
 8004892:	bf00      	nop
 8004894:	2000000c 	.word	0x2000000c
 8004898:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d023      	beq.n	80048ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	4798      	blx	r3
 80048ac:	e01e      	b.n	80048ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10f      	bne.n	80048dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0210 	bic.w	r2, r2, #16
 80048ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d032      	beq.n	800495a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d022      	beq.n	8004946 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2205      	movs	r2, #5
 8004904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	3301      	adds	r3, #1
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	429a      	cmp	r2, r3
 8004922:	d307      	bcc.n	8004934 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f2      	bne.n	8004918 <HAL_DMA_IRQHandler+0x2cc>
 8004932:	e000      	b.n	8004936 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004934:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	4798      	blx	r3
 8004956:	e000      	b.n	800495a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004958:	bf00      	nop
    }
  }
}
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800496e:	b2db      	uxtb	r3, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004998:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d108      	bne.n	80049bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049ba:	e007      	b.n	80049cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	60da      	str	r2, [r3, #12]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	3b10      	subs	r3, #16
 80049e8:	4a14      	ldr	r2, [pc, #80]	; (8004a3c <DMA_CalcBaseAndBitshift+0x64>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049f2:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <DMA_CalcBaseAndBitshift+0x68>)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d909      	bls.n	8004a1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a0e:	f023 0303 	bic.w	r3, r3, #3
 8004a12:	1d1a      	adds	r2, r3, #4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	659a      	str	r2, [r3, #88]	; 0x58
 8004a18:	e007      	b.n	8004a2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	aaaaaaab 	.word	0xaaaaaaab
 8004a40:	080198dc 	.word	0x080198dc

08004a44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11f      	bne.n	8004a9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d856      	bhi.n	8004b12 <DMA_CheckFifoParam+0xce>
 8004a64:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <DMA_CheckFifoParam+0x28>)
 8004a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6a:	bf00      	nop
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a8f 	.word	0x08004a8f
 8004a74:	08004a7d 	.word	0x08004a7d
 8004a78:	08004b13 	.word	0x08004b13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d046      	beq.n	8004b16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a8c:	e043      	b.n	8004b16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a96:	d140      	bne.n	8004b1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a9c:	e03d      	b.n	8004b1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa6:	d121      	bne.n	8004aec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d837      	bhi.n	8004b1e <DMA_CheckFifoParam+0xda>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <DMA_CheckFifoParam+0x70>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ac5 	.word	0x08004ac5
 8004ab8:	08004acb 	.word	0x08004acb
 8004abc:	08004ac5 	.word	0x08004ac5
 8004ac0:	08004add 	.word	0x08004add
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac8:	e030      	b.n	8004b2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d025      	beq.n	8004b22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ada:	e022      	b.n	8004b22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ae4:	d11f      	bne.n	8004b26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004aea:	e01c      	b.n	8004b26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d903      	bls.n	8004afa <DMA_CheckFifoParam+0xb6>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d003      	beq.n	8004b00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004af8:	e018      	b.n	8004b2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	73fb      	strb	r3, [r7, #15]
      break;
 8004afe:	e015      	b.n	8004b2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00e      	beq.n	8004b2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b10:	e00b      	b.n	8004b2a <DMA_CheckFifoParam+0xe6>
      break;
 8004b12:	bf00      	nop
 8004b14:	e00a      	b.n	8004b2c <DMA_CheckFifoParam+0xe8>
      break;
 8004b16:	bf00      	nop
 8004b18:	e008      	b.n	8004b2c <DMA_CheckFifoParam+0xe8>
      break;
 8004b1a:	bf00      	nop
 8004b1c:	e006      	b.n	8004b2c <DMA_CheckFifoParam+0xe8>
      break;
 8004b1e:	bf00      	nop
 8004b20:	e004      	b.n	8004b2c <DMA_CheckFifoParam+0xe8>
      break;
 8004b22:	bf00      	nop
 8004b24:	e002      	b.n	8004b2c <DMA_CheckFifoParam+0xe8>
      break;   
 8004b26:	bf00      	nop
 8004b28:	e000      	b.n	8004b2c <DMA_CheckFifoParam+0xe8>
      break;
 8004b2a:	bf00      	nop
    }
  } 
  
  return status; 
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop

08004b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b089      	sub	sp, #36	; 0x24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	e159      	b.n	8004e0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b58:	2201      	movs	r2, #1
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	f040 8148 	bne.w	8004e06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d005      	beq.n	8004b8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d130      	bne.n	8004bf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	2203      	movs	r2, #3
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43db      	mvns	r3, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	f003 0201 	and.w	r2, r3, #1
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d017      	beq.n	8004c2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	2203      	movs	r2, #3
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4013      	ands	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d123      	bne.n	8004c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	08da      	lsrs	r2, r3, #3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3208      	adds	r2, #8
 8004c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	220f      	movs	r2, #15
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	43db      	mvns	r3, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	08da      	lsrs	r2, r3, #3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3208      	adds	r2, #8
 8004c7a:	69b9      	ldr	r1, [r7, #24]
 8004c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4013      	ands	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f003 0203 	and.w	r2, r3, #3
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80a2 	beq.w	8004e06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	4b57      	ldr	r3, [pc, #348]	; (8004e24 <HAL_GPIO_Init+0x2e8>)
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cca:	4a56      	ldr	r2, [pc, #344]	; (8004e24 <HAL_GPIO_Init+0x2e8>)
 8004ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8004cd2:	4b54      	ldr	r3, [pc, #336]	; (8004e24 <HAL_GPIO_Init+0x2e8>)
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cde:	4a52      	ldr	r2, [pc, #328]	; (8004e28 <HAL_GPIO_Init+0x2ec>)
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	089b      	lsrs	r3, r3, #2
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	220f      	movs	r2, #15
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a49      	ldr	r2, [pc, #292]	; (8004e2c <HAL_GPIO_Init+0x2f0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d019      	beq.n	8004d3e <HAL_GPIO_Init+0x202>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a48      	ldr	r2, [pc, #288]	; (8004e30 <HAL_GPIO_Init+0x2f4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_GPIO_Init+0x1fe>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a47      	ldr	r2, [pc, #284]	; (8004e34 <HAL_GPIO_Init+0x2f8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00d      	beq.n	8004d36 <HAL_GPIO_Init+0x1fa>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a46      	ldr	r2, [pc, #280]	; (8004e38 <HAL_GPIO_Init+0x2fc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d007      	beq.n	8004d32 <HAL_GPIO_Init+0x1f6>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a45      	ldr	r2, [pc, #276]	; (8004e3c <HAL_GPIO_Init+0x300>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d101      	bne.n	8004d2e <HAL_GPIO_Init+0x1f2>
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	e008      	b.n	8004d40 <HAL_GPIO_Init+0x204>
 8004d2e:	2307      	movs	r3, #7
 8004d30:	e006      	b.n	8004d40 <HAL_GPIO_Init+0x204>
 8004d32:	2303      	movs	r3, #3
 8004d34:	e004      	b.n	8004d40 <HAL_GPIO_Init+0x204>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e002      	b.n	8004d40 <HAL_GPIO_Init+0x204>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_GPIO_Init+0x204>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	f002 0203 	and.w	r2, r2, #3
 8004d46:	0092      	lsls	r2, r2, #2
 8004d48:	4093      	lsls	r3, r2
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d50:	4935      	ldr	r1, [pc, #212]	; (8004e28 <HAL_GPIO_Init+0x2ec>)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	089b      	lsrs	r3, r3, #2
 8004d56:	3302      	adds	r3, #2
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d5e:	4b38      	ldr	r3, [pc, #224]	; (8004e40 <HAL_GPIO_Init+0x304>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	43db      	mvns	r3, r3
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d82:	4a2f      	ldr	r2, [pc, #188]	; (8004e40 <HAL_GPIO_Init+0x304>)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d88:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <HAL_GPIO_Init+0x304>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	43db      	mvns	r3, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4013      	ands	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004dac:	4a24      	ldr	r2, [pc, #144]	; (8004e40 <HAL_GPIO_Init+0x304>)
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004db2:	4b23      	ldr	r3, [pc, #140]	; (8004e40 <HAL_GPIO_Init+0x304>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dd6:	4a1a      	ldr	r2, [pc, #104]	; (8004e40 <HAL_GPIO_Init+0x304>)
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ddc:	4b18      	ldr	r3, [pc, #96]	; (8004e40 <HAL_GPIO_Init+0x304>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	43db      	mvns	r3, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4013      	ands	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e00:	4a0f      	ldr	r2, [pc, #60]	; (8004e40 <HAL_GPIO_Init+0x304>)
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2b0f      	cmp	r3, #15
 8004e10:	f67f aea2 	bls.w	8004b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop
 8004e18:	3724      	adds	r7, #36	; 0x24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40013800 	.word	0x40013800
 8004e2c:	40020000 	.word	0x40020000
 8004e30:	40020400 	.word	0x40020400
 8004e34:	40020800 	.word	0x40020800
 8004e38:	40020c00 	.word	0x40020c00
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40013c00 	.word	0x40013c00

08004e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	807b      	strh	r3, [r7, #2]
 8004e50:	4613      	mov	r3, r2
 8004e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e54:	787b      	ldrb	r3, [r7, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e5a:	887a      	ldrh	r2, [r7, #2]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e60:	e003      	b.n	8004e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e62:	887b      	ldrh	r3, [r7, #2]
 8004e64:	041a      	lsls	r2, r3, #16
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	619a      	str	r2, [r3, #24]
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e82:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d006      	beq.n	8004e9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e8e:	4a05      	ldr	r2, [pc, #20]	; (8004ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fc fbde 	bl	8001658 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40013c00 	.word	0x40013c00

08004ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e12b      	b.n	8005112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fe fa76 	bl	80033c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2224      	movs	r2, #36	; 0x24
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f0c:	f002 fa34 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 8004f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4a81      	ldr	r2, [pc, #516]	; (800511c <HAL_I2C_Init+0x274>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d807      	bhi.n	8004f2c <HAL_I2C_Init+0x84>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a80      	ldr	r2, [pc, #512]	; (8005120 <HAL_I2C_Init+0x278>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	bf94      	ite	ls
 8004f24:	2301      	movls	r3, #1
 8004f26:	2300      	movhi	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	e006      	b.n	8004f3a <HAL_I2C_Init+0x92>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a7d      	ldr	r2, [pc, #500]	; (8005124 <HAL_I2C_Init+0x27c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	bf94      	ite	ls
 8004f34:	2301      	movls	r3, #1
 8004f36:	2300      	movhi	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e0e7      	b.n	8005112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4a78      	ldr	r2, [pc, #480]	; (8005128 <HAL_I2C_Init+0x280>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	0c9b      	lsrs	r3, r3, #18
 8004f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	4a6a      	ldr	r2, [pc, #424]	; (800511c <HAL_I2C_Init+0x274>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d802      	bhi.n	8004f7c <HAL_I2C_Init+0xd4>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	e009      	b.n	8004f90 <HAL_I2C_Init+0xe8>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
 8004f86:	4a69      	ldr	r2, [pc, #420]	; (800512c <HAL_I2C_Init+0x284>)
 8004f88:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8c:	099b      	lsrs	r3, r3, #6
 8004f8e:	3301      	adds	r3, #1
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	430b      	orrs	r3, r1
 8004f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004fa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	495c      	ldr	r1, [pc, #368]	; (800511c <HAL_I2C_Init+0x274>)
 8004fac:	428b      	cmp	r3, r1
 8004fae:	d819      	bhi.n	8004fe4 <HAL_I2C_Init+0x13c>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1e59      	subs	r1, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fbe:	1c59      	adds	r1, r3, #1
 8004fc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fc4:	400b      	ands	r3, r1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_I2C_Init+0x138>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1e59      	subs	r1, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fd8:	3301      	adds	r3, #1
 8004fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fde:	e051      	b.n	8005084 <HAL_I2C_Init+0x1dc>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	e04f      	b.n	8005084 <HAL_I2C_Init+0x1dc>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d111      	bne.n	8005010 <HAL_I2C_Init+0x168>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1e58      	subs	r0, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6859      	ldr	r1, [r3, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	440b      	add	r3, r1
 8004ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ffe:	3301      	adds	r3, #1
 8005000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005004:	2b00      	cmp	r3, #0
 8005006:	bf0c      	ite	eq
 8005008:	2301      	moveq	r3, #1
 800500a:	2300      	movne	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	e012      	b.n	8005036 <HAL_I2C_Init+0x18e>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1e58      	subs	r0, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6859      	ldr	r1, [r3, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	0099      	lsls	r1, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	fbb0 f3f3 	udiv	r3, r0, r3
 8005026:	3301      	adds	r3, #1
 8005028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502c:	2b00      	cmp	r3, #0
 800502e:	bf0c      	ite	eq
 8005030:	2301      	moveq	r3, #1
 8005032:	2300      	movne	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_I2C_Init+0x196>
 800503a:	2301      	movs	r3, #1
 800503c:	e022      	b.n	8005084 <HAL_I2C_Init+0x1dc>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10e      	bne.n	8005064 <HAL_I2C_Init+0x1bc>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1e58      	subs	r0, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	460b      	mov	r3, r1
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	440b      	add	r3, r1
 8005054:	fbb0 f3f3 	udiv	r3, r0, r3
 8005058:	3301      	adds	r3, #1
 800505a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800505e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005062:	e00f      	b.n	8005084 <HAL_I2C_Init+0x1dc>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	1e58      	subs	r0, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6859      	ldr	r1, [r3, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	0099      	lsls	r1, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	fbb0 f3f3 	udiv	r3, r0, r3
 800507a:	3301      	adds	r3, #1
 800507c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	6809      	ldr	r1, [r1, #0]
 8005088:	4313      	orrs	r3, r2
 800508a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69da      	ldr	r2, [r3, #28]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80050b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6911      	ldr	r1, [r2, #16]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68d2      	ldr	r2, [r2, #12]
 80050be:	4311      	orrs	r1, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	430b      	orrs	r3, r1
 80050c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	000186a0 	.word	0x000186a0
 8005120:	001e847f 	.word	0x001e847f
 8005124:	003d08ff 	.word	0x003d08ff
 8005128:	431bde83 	.word	0x431bde83
 800512c:	10624dd3 	.word	0x10624dd3

08005130 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005150:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005158:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	2b10      	cmp	r3, #16
 800515e:	d003      	beq.n	8005168 <HAL_I2C_EV_IRQHandler+0x38>
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	f040 80b1 	bne.w	80052ca <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10d      	bne.n	800519e <HAL_I2C_EV_IRQHandler+0x6e>
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005188:	d003      	beq.n	8005192 <HAL_I2C_EV_IRQHandler+0x62>
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005190:	d101      	bne.n	8005196 <HAL_I2C_EV_IRQHandler+0x66>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <HAL_I2C_EV_IRQHandler+0x68>
 8005196:	2300      	movs	r3, #0
 8005198:	2b01      	cmp	r3, #1
 800519a:	f000 8114 	beq.w	80053c6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00b      	beq.n	80051c0 <HAL_I2C_EV_IRQHandler+0x90>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d006      	beq.n	80051c0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f001 fc54 	bl	8006a60 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fd5e 	bl	8005c7a <I2C_Master_SB>
 80051be:	e083      	b.n	80052c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_I2C_EV_IRQHandler+0xac>
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fdd6 	bl	8005d86 <I2C_Master_ADD10>
 80051da:	e075      	b.n	80052c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d008      	beq.n	80051f8 <HAL_I2C_EV_IRQHandler+0xc8>
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fdf2 	bl	8005dda <I2C_Master_ADDR>
 80051f6:	e067      	b.n	80052c8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d036      	beq.n	8005270 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800520c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005210:	f000 80db 	beq.w	80053ca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <HAL_I2C_EV_IRQHandler+0x10a>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <HAL_I2C_EV_IRQHandler+0x10a>
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d103      	bne.n	800523a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f9d6 	bl	80055e4 <I2C_MasterTransmit_TXE>
 8005238:	e046      	b.n	80052c8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80c2 	beq.w	80053ca <HAL_I2C_EV_IRQHandler+0x29a>
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 80bc 	beq.w	80053ca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005252:	7bbb      	ldrb	r3, [r7, #14]
 8005254:	2b21      	cmp	r3, #33	; 0x21
 8005256:	d103      	bne.n	8005260 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fa5f 	bl	800571c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800525e:	e0b4      	b.n	80053ca <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2b40      	cmp	r3, #64	; 0x40
 8005264:	f040 80b1 	bne.w	80053ca <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 facd 	bl	8005808 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800526e:	e0ac      	b.n	80053ca <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800527a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800527e:	f000 80a4 	beq.w	80053ca <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <HAL_I2C_EV_IRQHandler+0x178>
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_I2C_EV_IRQHandler+0x178>
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d103      	bne.n	80052a8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fb45 	bl	8005930 <I2C_MasterReceive_RXNE>
 80052a6:	e00f      	b.n	80052c8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 808b 	beq.w	80053ca <HAL_I2C_EV_IRQHandler+0x29a>
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 8085 	beq.w	80053ca <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fbf0 	bl	8005aa6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052c6:	e080      	b.n	80053ca <HAL_I2C_EV_IRQHandler+0x29a>
 80052c8:	e07f      	b.n	80053ca <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d004      	beq.n	80052dc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	e007      	b.n	80052ec <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d011      	beq.n	800531a <HAL_I2C_EV_IRQHandler+0x1ea>
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00c      	beq.n	800531a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005310:	69b9      	ldr	r1, [r7, #24]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 ffb0 	bl	8006278 <I2C_Slave_ADDR>
 8005318:	e05a      	b.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_I2C_EV_IRQHandler+0x206>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 ffea 	bl	8006308 <I2C_Slave_STOPF>
 8005334:	e04c      	b.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005336:	7bbb      	ldrb	r3, [r7, #14]
 8005338:	2b21      	cmp	r3, #33	; 0x21
 800533a:	d002      	beq.n	8005342 <HAL_I2C_EV_IRQHandler+0x212>
 800533c:	7bbb      	ldrb	r3, [r7, #14]
 800533e:	2b29      	cmp	r3, #41	; 0x29
 8005340:	d120      	bne.n	8005384 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00d      	beq.n	8005368 <HAL_I2C_EV_IRQHandler+0x238>
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_I2C_EV_IRQHandler+0x238>
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fecb 	bl	80060fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005366:	e032      	b.n	80053ce <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d02d      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x29e>
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005378:	2b00      	cmp	r3, #0
 800537a:	d028      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fefa 	bl	8006176 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005382:	e024      	b.n	80053ce <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00d      	beq.n	80053aa <HAL_I2C_EV_IRQHandler+0x27a>
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <HAL_I2C_EV_IRQHandler+0x27a>
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f003 0304 	and.w	r3, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 ff08 	bl	80061b8 <I2C_SlaveReceive_RXNE>
 80053a8:	e012      	b.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00d      	beq.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 ff38 	bl	8006234 <I2C_SlaveReceive_BTF>
 80053c4:	e004      	b.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80053c6:	bf00      	nop
 80053c8:	e002      	b.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053ca:	bf00      	nop
 80053cc:	e000      	b.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053ce:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b08a      	sub	sp, #40	; 0x28
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053f8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00d      	beq.n	8005420 <HAL_I2C_ER_IRQHandler+0x4a>
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800541e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00d      	beq.n	8005446 <HAL_I2C_ER_IRQHandler+0x70>
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	f043 0302 	orr.w	r3, r3, #2
 800543a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005444:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544c:	2b00      	cmp	r3, #0
 800544e:	d03e      	beq.n	80054ce <HAL_I2C_ER_IRQHandler+0xf8>
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005456:	2b00      	cmp	r3, #0
 8005458:	d039      	beq.n	80054ce <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800545a:	7efb      	ldrb	r3, [r7, #27]
 800545c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005474:	7ebb      	ldrb	r3, [r7, #26]
 8005476:	2b20      	cmp	r3, #32
 8005478:	d112      	bne.n	80054a0 <HAL_I2C_ER_IRQHandler+0xca>
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10f      	bne.n	80054a0 <HAL_I2C_ER_IRQHandler+0xca>
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	2b21      	cmp	r3, #33	; 0x21
 8005484:	d008      	beq.n	8005498 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005486:	7cfb      	ldrb	r3, [r7, #19]
 8005488:	2b29      	cmp	r3, #41	; 0x29
 800548a:	d005      	beq.n	8005498 <HAL_I2C_ER_IRQHandler+0xc2>
 800548c:	7cfb      	ldrb	r3, [r7, #19]
 800548e:	2b28      	cmp	r3, #40	; 0x28
 8005490:	d106      	bne.n	80054a0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b21      	cmp	r3, #33	; 0x21
 8005496:	d103      	bne.n	80054a0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f001 f865 	bl	8006568 <I2C_Slave_AF>
 800549e:	e016      	b.n	80054ce <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054a8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	f043 0304 	orr.w	r3, r3, #4
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80054b2:	7efb      	ldrb	r3, [r7, #27]
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d002      	beq.n	80054be <HAL_I2C_ER_IRQHandler+0xe8>
 80054b8:	7efb      	ldrb	r3, [r7, #27]
 80054ba:	2b40      	cmp	r3, #64	; 0x40
 80054bc:	d107      	bne.n	80054ce <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054cc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <HAL_I2C_ER_IRQHandler+0x11e>
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d008      	beq.n	80054f4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	f043 0308 	orr.w	r3, r3, #8
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80054f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 f89e 	bl	8006648 <I2C_ITError>
  }
}
 800550c:	bf00      	nop
 800550e:	3728      	adds	r7, #40	; 0x28
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	70fb      	strb	r3, [r7, #3]
 8005570:	4613      	mov	r3, r2
 8005572:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d150      	bne.n	80056ac <I2C_MasterTransmit_TXE+0xc8>
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	2b21      	cmp	r3, #33	; 0x21
 800560e:	d14d      	bne.n	80056ac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b08      	cmp	r3, #8
 8005614:	d01d      	beq.n	8005652 <I2C_MasterTransmit_TXE+0x6e>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b20      	cmp	r3, #32
 800561a:	d01a      	beq.n	8005652 <I2C_MasterTransmit_TXE+0x6e>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005622:	d016      	beq.n	8005652 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005632:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2211      	movs	r2, #17
 8005638:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff ff62 	bl	8005514 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005650:	e060      	b.n	8005714 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005660:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005670:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d107      	bne.n	800569c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff ff7d 	bl	8005594 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800569a:	e03b      	b.n	8005714 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff ff35 	bl	8005514 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056aa:	e033      	b.n	8005714 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b21      	cmp	r3, #33	; 0x21
 80056b0:	d005      	beq.n	80056be <I2C_MasterTransmit_TXE+0xda>
 80056b2:	7bbb      	ldrb	r3, [r7, #14]
 80056b4:	2b40      	cmp	r3, #64	; 0x40
 80056b6:	d12d      	bne.n	8005714 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	2b22      	cmp	r3, #34	; 0x22
 80056bc:	d12a      	bne.n	8005714 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d108      	bne.n	80056da <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80056d8:	e01c      	b.n	8005714 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d103      	bne.n	80056ee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f88e 	bl	8005808 <I2C_MemoryTransmit_TXE_BTF>
}
 80056ec:	e012      	b.n	8005714 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005712:	e7ff      	b.n	8005714 <I2C_MasterTransmit_TXE+0x130>
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b21      	cmp	r3, #33	; 0x21
 8005734:	d164      	bne.n	8005800 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d012      	beq.n	8005766 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	781a      	ldrb	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005764:	e04c      	b.n	8005800 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b08      	cmp	r3, #8
 800576a:	d01d      	beq.n	80057a8 <I2C_MasterTransmit_BTF+0x8c>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b20      	cmp	r3, #32
 8005770:	d01a      	beq.n	80057a8 <I2C_MasterTransmit_BTF+0x8c>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005778:	d016      	beq.n	80057a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005788:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2211      	movs	r2, #17
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff feb7 	bl	8005514 <HAL_I2C_MasterTxCpltCallback>
}
 80057a6:	e02b      	b.n	8005800 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	d107      	bne.n	80057f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff fed2 	bl	8005594 <HAL_I2C_MemTxCpltCallback>
}
 80057f0:	e006      	b.n	8005800 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff fe8a 	bl	8005514 <HAL_I2C_MasterTxCpltCallback>
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005816:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581c:	2b00      	cmp	r3, #0
 800581e:	d11d      	bne.n	800585c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d10b      	bne.n	8005840 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800582c:	b2da      	uxtb	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005838:	1c9a      	adds	r2, r3, #2
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800583e:	e073      	b.n	8005928 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005844:	b29b      	uxth	r3, r3
 8005846:	121b      	asrs	r3, r3, #8
 8005848:	b2da      	uxtb	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	651a      	str	r2, [r3, #80]	; 0x50
}
 800585a:	e065      	b.n	8005928 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005860:	2b01      	cmp	r3, #1
 8005862:	d10b      	bne.n	800587c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005868:	b2da      	uxtb	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	651a      	str	r2, [r3, #80]	; 0x50
}
 800587a:	e055      	b.n	8005928 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005880:	2b02      	cmp	r3, #2
 8005882:	d151      	bne.n	8005928 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b22      	cmp	r3, #34	; 0x22
 8005888:	d10d      	bne.n	80058a6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005898:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80058a4:	e040      	b.n	8005928 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d015      	beq.n	80058dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	2b21      	cmp	r3, #33	; 0x21
 80058b4:	d112      	bne.n	80058dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	781a      	ldrb	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058da:	e025      	b.n	8005928 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d120      	bne.n	8005928 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	2b21      	cmp	r3, #33	; 0x21
 80058ea:	d11d      	bne.n	8005928 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058fa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff fe36 	bl	8005594 <HAL_I2C_MemTxCpltCallback>
}
 8005928:	bf00      	nop
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b22      	cmp	r3, #34	; 0x22
 8005942:	f040 80ac 	bne.w	8005a9e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594a:	b29b      	uxth	r3, r3
 800594c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d921      	bls.n	8005998 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b03      	cmp	r3, #3
 8005982:	f040 808c 	bne.w	8005a9e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005994:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005996:	e082      	b.n	8005a9e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	2b02      	cmp	r3, #2
 800599e:	d075      	beq.n	8005a8c <I2C_MasterReceive_RXNE+0x15c>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d002      	beq.n	80059ac <I2C_MasterReceive_RXNE+0x7c>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d16f      	bne.n	8005a8c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 f825 	bl	80069fc <I2C_WaitOnSTOPRequestThroughIT>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d142      	bne.n	8005a3e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	d10a      	bne.n	8005a28 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fdc1 	bl	80055a8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a26:	e03a      	b.n	8005a9e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2212      	movs	r2, #18
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff fd76 	bl	8005528 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a3c:	e02f      	b.n	8005a9e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff fd99 	bl	80055bc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a8a:	e008      	b.n	8005a9e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9a:	605a      	str	r2, [r3, #4]
}
 8005a9c:	e7ff      	b.n	8005a9e <I2C_MasterReceive_RXNE+0x16e>
 8005a9e:	bf00      	nop
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d11b      	bne.n	8005af6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005acc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005af4:	e0bd      	b.n	8005c72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b03      	cmp	r3, #3
 8005afe:	d129      	bne.n	8005b54 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b0e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b04      	cmp	r3, #4
 8005b14:	d00a      	beq.n	8005b2c <I2C_MasterReceive_BTF+0x86>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d007      	beq.n	8005b2c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b52:	e08e      	b.n	8005c72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d176      	bne.n	8005c4c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d002      	beq.n	8005b6a <I2C_MasterReceive_BTF+0xc4>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d108      	bne.n	8005b7c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e019      	b.n	8005bb0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d002      	beq.n	8005b88 <I2C_MasterReceive_BTF+0xe2>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d108      	bne.n	8005b9a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	e00a      	b.n	8005bb0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d007      	beq.n	8005bb0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c0a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b40      	cmp	r3, #64	; 0x40
 8005c1e:	d10a      	bne.n	8005c36 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff fcba 	bl	80055a8 <HAL_I2C_MemRxCpltCallback>
}
 8005c34:	e01d      	b.n	8005c72 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2212      	movs	r2, #18
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff fc6f 	bl	8005528 <HAL_I2C_MasterRxCpltCallback>
}
 8005c4a:	e012      	b.n	8005c72 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	d117      	bne.n	8005cbe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ca6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005ca8:	e067      	b.n	8005d7a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	f043 0301 	orr.w	r3, r3, #1
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	611a      	str	r2, [r3, #16]
}
 8005cbc:	e05d      	b.n	8005d7a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cc6:	d133      	bne.n	8005d30 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b21      	cmp	r3, #33	; 0x21
 8005cd2:	d109      	bne.n	8005ce8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ce4:	611a      	str	r2, [r3, #16]
 8005ce6:	e008      	b.n	8005cfa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f043 0301 	orr.w	r3, r3, #1
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <I2C_Master_SB+0x92>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d108      	bne.n	8005d1e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d032      	beq.n	8005d7a <I2C_Master_SB+0x100>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d02d      	beq.n	8005d7a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d2c:	605a      	str	r2, [r3, #4]
}
 8005d2e:	e024      	b.n	8005d7a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10e      	bne.n	8005d56 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	11db      	asrs	r3, r3, #7
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	f003 0306 	and.w	r3, r3, #6
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f063 030f 	orn	r3, r3, #15
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	611a      	str	r2, [r3, #16]
}
 8005d54:	e011      	b.n	8005d7a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d10d      	bne.n	8005d7a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	11db      	asrs	r3, r3, #7
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 0306 	and.w	r3, r3, #6
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f063 030e 	orn	r3, r3, #14
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	611a      	str	r2, [r3, #16]
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <I2C_Master_ADD10+0x26>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d108      	bne.n	8005dbe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00c      	beq.n	8005dce <I2C_Master_ADD10+0x48>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d007      	beq.n	8005dce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dcc:	605a      	str	r2, [r3, #4]
  }
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b091      	sub	sp, #68	; 0x44
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005de8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b22      	cmp	r3, #34	; 0x22
 8005e02:	f040 8169 	bne.w	80060d8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10f      	bne.n	8005e2e <I2C_Master_ADDR+0x54>
 8005e0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d10b      	bne.n	8005e2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e16:	2300      	movs	r3, #0
 8005e18:	633b      	str	r3, [r7, #48]	; 0x30
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	633b      	str	r3, [r7, #48]	; 0x30
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	633b      	str	r3, [r7, #48]	; 0x30
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	e160      	b.n	80060f0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d11d      	bne.n	8005e72 <I2C_Master_ADDR+0x98>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e3e:	d118      	bne.n	8005e72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e40:	2300      	movs	r3, #0
 8005e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	651a      	str	r2, [r3, #80]	; 0x50
 8005e70:	e13e      	b.n	80060f0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d113      	bne.n	8005ea4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e115      	b.n	80060d0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	f040 808a 	bne.w	8005fc4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005eb6:	d137      	bne.n	8005f28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ed6:	d113      	bne.n	8005f00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee8:	2300      	movs	r3, #0
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	e0e7      	b.n	80060d0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f00:	2300      	movs	r3, #0
 8005f02:	623b      	str	r3, [r7, #32]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	623b      	str	r3, [r7, #32]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	623b      	str	r3, [r7, #32]
 8005f14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	e0d3      	b.n	80060d0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d02e      	beq.n	8005f8c <I2C_Master_ADDR+0x1b2>
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d02b      	beq.n	8005f8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f36:	2b12      	cmp	r3, #18
 8005f38:	d102      	bne.n	8005f40 <I2C_Master_ADDR+0x166>
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d125      	bne.n	8005f8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d00e      	beq.n	8005f64 <I2C_Master_ADDR+0x18a>
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d00b      	beq.n	8005f64 <I2C_Master_ADDR+0x18a>
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	2b10      	cmp	r3, #16
 8005f50:	d008      	beq.n	8005f64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	e007      	b.n	8005f74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f74:	2300      	movs	r3, #0
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	61fb      	str	r3, [r7, #28]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	e0a1      	b.n	80060d0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	61bb      	str	r3, [r7, #24]
 8005fb0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	e085      	b.n	80060d0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d14d      	bne.n	800606a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d016      	beq.n	8006002 <I2C_Master_ADDR+0x228>
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d013      	beq.n	8006002 <I2C_Master_ADDR+0x228>
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	2b10      	cmp	r3, #16
 8005fde:	d010      	beq.n	8006002 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	e007      	b.n	8006012 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006010:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800601c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006020:	d117      	bne.n	8006052 <I2C_Master_ADDR+0x278>
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006028:	d00b      	beq.n	8006042 <I2C_Master_ADDR+0x268>
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	2b01      	cmp	r3, #1
 800602e:	d008      	beq.n	8006042 <I2C_Master_ADDR+0x268>
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	2b08      	cmp	r3, #8
 8006034:	d005      	beq.n	8006042 <I2C_Master_ADDR+0x268>
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	2b10      	cmp	r3, #16
 800603a:	d002      	beq.n	8006042 <I2C_Master_ADDR+0x268>
 800603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603e:	2b20      	cmp	r3, #32
 8006040:	d107      	bne.n	8006052 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006050:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	e032      	b.n	80060d0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006078:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006088:	d117      	bne.n	80060ba <I2C_Master_ADDR+0x2e0>
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006090:	d00b      	beq.n	80060aa <I2C_Master_ADDR+0x2d0>
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	2b01      	cmp	r3, #1
 8006096:	d008      	beq.n	80060aa <I2C_Master_ADDR+0x2d0>
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	2b08      	cmp	r3, #8
 800609c:	d005      	beq.n	80060aa <I2C_Master_ADDR+0x2d0>
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d002      	beq.n	80060aa <I2C_Master_ADDR+0x2d0>
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d107      	bne.n	80060ba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80060d6:	e00b      	b.n	80060f0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
}
 80060ee:	e7ff      	b.n	80060f0 <I2C_Master_ADDR+0x316>
 80060f0:	bf00      	nop
 80060f2:	3744      	adds	r7, #68	; 0x44
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d02b      	beq.n	800616e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	781a      	ldrb	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d114      	bne.n	800616e <I2C_SlaveTransmit_TXE+0x72>
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b29      	cmp	r3, #41	; 0x29
 8006148:	d111      	bne.n	800616e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006158:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2221      	movs	r2, #33	; 0x21
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2228      	movs	r2, #40	; 0x28
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff f9e7 	bl	800553c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006182:	b29b      	uxth	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d011      	beq.n	80061ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	781a      	ldrb	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d02c      	beq.n	800622c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d114      	bne.n	800622c <I2C_SlaveReceive_RXNE+0x74>
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b2a      	cmp	r3, #42	; 0x2a
 8006206:	d111      	bne.n	800622c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006216:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2222      	movs	r2, #34	; 0x22
 800621c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2228      	movs	r2, #40	; 0x28
 8006222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff f992 	bl	8005550 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800622c:	bf00      	nop
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d012      	beq.n	800626c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006292:	2b28      	cmp	r3, #40	; 0x28
 8006294:	d125      	bne.n	80062e2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80062b0:	2301      	movs	r3, #1
 80062b2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d103      	bne.n	80062c6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	81bb      	strh	r3, [r7, #12]
 80062c4:	e002      	b.n	80062cc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80062d4:	89ba      	ldrh	r2, [r7, #12]
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff f942 	bl	8005564 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80062e0:	e00e      	b.n	8006300 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e2:	2300      	movs	r3, #0
 80062e4:	60bb      	str	r3, [r7, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006316:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006326:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006328:	2300      	movs	r3, #0
 800632a:	60bb      	str	r3, [r7, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	60bb      	str	r3, [r7, #8]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006354:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006364:	d172      	bne.n	800644c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2b22      	cmp	r3, #34	; 0x22
 800636a:	d002      	beq.n	8006372 <I2C_Slave_STOPF+0x6a>
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b2a      	cmp	r3, #42	; 0x2a
 8006370:	d135      	bne.n	80063de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	b29a      	uxth	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d005      	beq.n	8006396 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	f043 0204 	orr.w	r2, r3, #4
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fad8 	bl	8004960 <HAL_DMA_GetState>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d049      	beq.n	800644a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	4a69      	ldr	r2, [pc, #420]	; (8006560 <I2C_Slave_STOPF+0x258>)
 80063bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe f920 	bl	8004608 <HAL_DMA_Abort_IT>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d03d      	beq.n	800644a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063d8:	4610      	mov	r0, r2
 80063da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063dc:	e035      	b.n	800644a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	f043 0204 	orr.w	r2, r3, #4
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006410:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe faa2 	bl	8004960 <HAL_DMA_GetState>
 800641c:	4603      	mov	r3, r0
 800641e:	2b01      	cmp	r3, #1
 8006420:	d014      	beq.n	800644c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006426:	4a4e      	ldr	r2, [pc, #312]	; (8006560 <I2C_Slave_STOPF+0x258>)
 8006428:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe f8ea 	bl	8004608 <HAL_DMA_Abort_IT>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d008      	beq.n	800644c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006444:	4610      	mov	r0, r2
 8006446:	4798      	blx	r3
 8006448:	e000      	b.n	800644c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800644a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d03e      	beq.n	80064d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b04      	cmp	r3, #4
 8006462:	d112      	bne.n	800648a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691a      	ldr	r2, [r3, #16]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006494:	2b40      	cmp	r3, #64	; 0x40
 8006496:	d112      	bne.n	80064be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064cc:	f043 0204 	orr.w	r2, r3, #4
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f8b3 	bl	8006648 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80064e2:	e039      	b.n	8006558 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2b2a      	cmp	r3, #42	; 0x2a
 80064e8:	d109      	bne.n	80064fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2228      	movs	r2, #40	; 0x28
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff f829 	bl	8005550 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b28      	cmp	r3, #40	; 0x28
 8006508:	d111      	bne.n	800652e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a15      	ldr	r2, [pc, #84]	; (8006564 <I2C_Slave_STOPF+0x25c>)
 800650e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff f82a 	bl	8005580 <HAL_I2C_ListenCpltCallback>
}
 800652c:	e014      	b.n	8006558 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006532:	2b22      	cmp	r3, #34	; 0x22
 8006534:	d002      	beq.n	800653c <I2C_Slave_STOPF+0x234>
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	2b22      	cmp	r3, #34	; 0x22
 800653a:	d10d      	bne.n	8006558 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2220      	movs	r2, #32
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fe fffc 	bl	8005550 <HAL_I2C_SlaveRxCpltCallback>
}
 8006558:	bf00      	nop
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	080068ad 	.word	0x080068ad
 8006564:	ffff0000 	.word	0xffff0000

08006568 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006576:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b08      	cmp	r3, #8
 8006582:	d002      	beq.n	800658a <I2C_Slave_AF+0x22>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b20      	cmp	r3, #32
 8006588:	d129      	bne.n	80065de <I2C_Slave_AF+0x76>
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	2b28      	cmp	r3, #40	; 0x28
 800658e:	d126      	bne.n	80065de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a2c      	ldr	r2, [pc, #176]	; (8006644 <I2C_Slave_AF+0xdc>)
 8006594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fe ffd2 	bl	8005580 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80065dc:	e02e      	b.n	800663c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	2b21      	cmp	r3, #33	; 0x21
 80065e2:	d126      	bne.n	8006632 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a17      	ldr	r2, [pc, #92]	; (8006644 <I2C_Slave_AF+0xdc>)
 80065e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2221      	movs	r2, #33	; 0x21
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800660e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006618:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006628:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7fe ff86 	bl	800553c <HAL_I2C_SlaveTxCpltCallback>
}
 8006630:	e004      	b.n	800663c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800663a:	615a      	str	r2, [r3, #20]
}
 800663c:	bf00      	nop
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	ffff0000 	.word	0xffff0000

08006648 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006656:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800665e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006660:	7bbb      	ldrb	r3, [r7, #14]
 8006662:	2b10      	cmp	r3, #16
 8006664:	d002      	beq.n	800666c <I2C_ITError+0x24>
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	d10a      	bne.n	8006682 <I2C_ITError+0x3a>
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	2b22      	cmp	r3, #34	; 0x22
 8006670:	d107      	bne.n	8006682 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006680:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006688:	2b28      	cmp	r3, #40	; 0x28
 800668a:	d107      	bne.n	800669c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2228      	movs	r2, #40	; 0x28
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800669a:	e015      	b.n	80066c8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066aa:	d00a      	beq.n	80066c2 <I2C_ITError+0x7a>
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
 80066ae:	2b60      	cmp	r3, #96	; 0x60
 80066b0:	d007      	beq.n	80066c2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066d6:	d162      	bne.n	800679e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066e6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d020      	beq.n	8006738 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fa:	4a6a      	ldr	r2, [pc, #424]	; (80068a4 <I2C_ITError+0x25c>)
 80066fc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006702:	4618      	mov	r0, r3
 8006704:	f7fd ff80 	bl	8004608 <HAL_DMA_Abort_IT>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 8089 	beq.w	8006822 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0201 	bic.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006732:	4610      	mov	r0, r2
 8006734:	4798      	blx	r3
 8006736:	e074      	b.n	8006822 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	4a59      	ldr	r2, [pc, #356]	; (80068a4 <I2C_ITError+0x25c>)
 800673e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	4618      	mov	r0, r3
 8006746:	f7fd ff5f 	bl	8004608 <HAL_DMA_Abort_IT>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d068      	beq.n	8006822 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675a:	2b40      	cmp	r3, #64	; 0x40
 800675c:	d10b      	bne.n	8006776 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0201 	bic.w	r2, r2, #1
 8006784:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006798:	4610      	mov	r0, r2
 800679a:	4798      	blx	r3
 800679c:	e041      	b.n	8006822 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b60      	cmp	r3, #96	; 0x60
 80067a8:	d125      	bne.n	80067f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b40      	cmp	r3, #64	; 0x40
 80067c4:	d10b      	bne.n	80067de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0201 	bic.w	r2, r2, #1
 80067ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7fe feee 	bl	80055d0 <HAL_I2C_AbortCpltCallback>
 80067f4:	e015      	b.n	8006822 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d10b      	bne.n	800681c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	691a      	ldr	r2, [r3, #16]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7fe fecd 	bl	80055bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10e      	bne.n	8006850 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006838:	2b00      	cmp	r3, #0
 800683a:	d109      	bne.n	8006850 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006842:	2b00      	cmp	r3, #0
 8006844:	d104      	bne.n	8006850 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800685e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006866:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b04      	cmp	r3, #4
 8006872:	d113      	bne.n	800689c <I2C_ITError+0x254>
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	2b28      	cmp	r3, #40	; 0x28
 8006878:	d110      	bne.n	800689c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a0a      	ldr	r2, [pc, #40]	; (80068a8 <I2C_ITError+0x260>)
 800687e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fe fe72 	bl	8005580 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	080068ad 	.word	0x080068ad
 80068a8:	ffff0000 	.word	0xffff0000

080068ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80068c6:	4b4b      	ldr	r3, [pc, #300]	; (80069f4 <I2C_DMAAbort+0x148>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	08db      	lsrs	r3, r3, #3
 80068cc:	4a4a      	ldr	r2, [pc, #296]	; (80069f8 <I2C_DMAAbort+0x14c>)
 80068ce:	fba2 2303 	umull	r2, r3, r2, r3
 80068d2:	0a1a      	lsrs	r2, r3, #8
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	00da      	lsls	r2, r3, #3
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f043 0220 	orr.w	r2, r3, #32
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80068f2:	e00a      	b.n	800690a <I2C_DMAAbort+0x5e>
    }
    count--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006908:	d0ea      	beq.n	80068e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006916:	2200      	movs	r2, #0
 8006918:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	2200      	movs	r2, #0
 8006928:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006938:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2200      	movs	r2, #0
 800693e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694c:	2200      	movs	r2, #0
 800694e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	2b00      	cmp	r3, #0
 8006956:	d003      	beq.n	8006960 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	2200      	movs	r2, #0
 800695e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0201 	bic.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b60      	cmp	r3, #96	; 0x60
 800697a:	d10e      	bne.n	800699a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2200      	movs	r2, #0
 8006990:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006992:	6978      	ldr	r0, [r7, #20]
 8006994:	f7fe fe1c 	bl	80055d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006998:	e027      	b.n	80069ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800699a:	7cfb      	ldrb	r3, [r7, #19]
 800699c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069a0:	2b28      	cmp	r3, #40	; 0x28
 80069a2:	d117      	bne.n	80069d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0201 	orr.w	r2, r2, #1
 80069b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2200      	movs	r2, #0
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2228      	movs	r2, #40	; 0x28
 80069ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069d2:	e007      	b.n	80069e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80069e4:	6978      	ldr	r0, [r7, #20]
 80069e6:	f7fe fde9 	bl	80055bc <HAL_I2C_ErrorCallback>
}
 80069ea:	bf00      	nop
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	2000000c 	.word	0x2000000c
 80069f8:	14f8b589 	.word	0x14f8b589

080069fc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a08:	4b13      	ldr	r3, [pc, #76]	; (8006a58 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	08db      	lsrs	r3, r3, #3
 8006a0e:	4a13      	ldr	r2, [pc, #76]	; (8006a5c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006a10:	fba2 2303 	umull	r2, r3, r2, r3
 8006a14:	0a1a      	lsrs	r2, r3, #8
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d107      	bne.n	8006a3a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	f043 0220 	orr.w	r2, r3, #32
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e008      	b.n	8006a4c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a48:	d0e9      	beq.n	8006a1e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	2000000c 	.word	0x2000000c
 8006a5c:	14f8b589 	.word	0x14f8b589

08006a60 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a70:	d103      	bne.n	8006a7a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a78:	e007      	b.n	8006a8a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a82:	d102      	bne.n	8006a8a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2208      	movs	r2, #8
 8006a88:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e267      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d075      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ab6:	4b88      	ldr	r3, [pc, #544]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 030c 	and.w	r3, r3, #12
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d00c      	beq.n	8006adc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ac2:	4b85      	ldr	r3, [pc, #532]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	d112      	bne.n	8006af4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ace:	4b82      	ldr	r3, [pc, #520]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ada:	d10b      	bne.n	8006af4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006adc:	4b7e      	ldr	r3, [pc, #504]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d05b      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x108>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d157      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e242      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006afc:	d106      	bne.n	8006b0c <HAL_RCC_OscConfig+0x74>
 8006afe:	4b76      	ldr	r3, [pc, #472]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a75      	ldr	r2, [pc, #468]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e01d      	b.n	8006b48 <HAL_RCC_OscConfig+0xb0>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b14:	d10c      	bne.n	8006b30 <HAL_RCC_OscConfig+0x98>
 8006b16:	4b70      	ldr	r3, [pc, #448]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a6f      	ldr	r2, [pc, #444]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	4b6d      	ldr	r3, [pc, #436]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a6c      	ldr	r2, [pc, #432]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	e00b      	b.n	8006b48 <HAL_RCC_OscConfig+0xb0>
 8006b30:	4b69      	ldr	r3, [pc, #420]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a68      	ldr	r2, [pc, #416]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	4b66      	ldr	r3, [pc, #408]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a65      	ldr	r2, [pc, #404]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d013      	beq.n	8006b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b50:	f7fd f802 	bl	8003b58 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b58:	f7fc fffe 	bl	8003b58 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b64      	cmp	r3, #100	; 0x64
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e207      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b6a:	4b5b      	ldr	r3, [pc, #364]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0xc0>
 8006b76:	e014      	b.n	8006ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b78:	f7fc ffee 	bl	8003b58 <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b80:	f7fc ffea 	bl	8003b58 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b64      	cmp	r3, #100	; 0x64
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e1f3      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b92:	4b51      	ldr	r3, [pc, #324]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1f0      	bne.n	8006b80 <HAL_RCC_OscConfig+0xe8>
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d063      	beq.n	8006c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bae:	4b4a      	ldr	r3, [pc, #296]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bba:	4b47      	ldr	r3, [pc, #284]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d11c      	bne.n	8006c00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bc6:	4b44      	ldr	r3, [pc, #272]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d116      	bne.n	8006c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bd2:	4b41      	ldr	r3, [pc, #260]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <HAL_RCC_OscConfig+0x152>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d001      	beq.n	8006bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e1c7      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bea:	4b3b      	ldr	r3, [pc, #236]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4937      	ldr	r1, [pc, #220]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bfe:	e03a      	b.n	8006c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d020      	beq.n	8006c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c08:	4b34      	ldr	r3, [pc, #208]	; (8006cdc <HAL_RCC_OscConfig+0x244>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0e:	f7fc ffa3 	bl	8003b58 <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c16:	f7fc ff9f 	bl	8003b58 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e1a8      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c28:	4b2b      	ldr	r3, [pc, #172]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0f0      	beq.n	8006c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c34:	4b28      	ldr	r3, [pc, #160]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	4925      	ldr	r1, [pc, #148]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	600b      	str	r3, [r1, #0]
 8006c48:	e015      	b.n	8006c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c4a:	4b24      	ldr	r3, [pc, #144]	; (8006cdc <HAL_RCC_OscConfig+0x244>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c50:	f7fc ff82 	bl	8003b58 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c58:	f7fc ff7e 	bl	8003b58 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e187      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f0      	bne.n	8006c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d036      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d016      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c8a:	4b15      	ldr	r3, [pc, #84]	; (8006ce0 <HAL_RCC_OscConfig+0x248>)
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c90:	f7fc ff62 	bl	8003b58 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c98:	f7fc ff5e 	bl	8003b58 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e167      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006caa:	4b0b      	ldr	r3, [pc, #44]	; (8006cd8 <HAL_RCC_OscConfig+0x240>)
 8006cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0f0      	beq.n	8006c98 <HAL_RCC_OscConfig+0x200>
 8006cb6:	e01b      	b.n	8006cf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cb8:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <HAL_RCC_OscConfig+0x248>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cbe:	f7fc ff4b 	bl	8003b58 <HAL_GetTick>
 8006cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc4:	e00e      	b.n	8006ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cc6:	f7fc ff47 	bl	8003b58 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d907      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e150      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	42470000 	.word	0x42470000
 8006ce0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ce4:	4b88      	ldr	r3, [pc, #544]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1ea      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8097 	beq.w	8006e2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d02:	4b81      	ldr	r3, [pc, #516]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10f      	bne.n	8006d2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]
 8006d12:	4b7d      	ldr	r3, [pc, #500]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	4a7c      	ldr	r2, [pc, #496]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d1e:	4b7a      	ldr	r3, [pc, #488]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d26:	60bb      	str	r3, [r7, #8]
 8006d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d2e:	4b77      	ldr	r3, [pc, #476]	; (8006f0c <HAL_RCC_OscConfig+0x474>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d118      	bne.n	8006d6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d3a:	4b74      	ldr	r3, [pc, #464]	; (8006f0c <HAL_RCC_OscConfig+0x474>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a73      	ldr	r2, [pc, #460]	; (8006f0c <HAL_RCC_OscConfig+0x474>)
 8006d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d46:	f7fc ff07 	bl	8003b58 <HAL_GetTick>
 8006d4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d4c:	e008      	b.n	8006d60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d4e:	f7fc ff03 	bl	8003b58 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e10c      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d60:	4b6a      	ldr	r3, [pc, #424]	; (8006f0c <HAL_RCC_OscConfig+0x474>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0f0      	beq.n	8006d4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d106      	bne.n	8006d82 <HAL_RCC_OscConfig+0x2ea>
 8006d74:	4b64      	ldr	r3, [pc, #400]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d78:	4a63      	ldr	r2, [pc, #396]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006d7a:	f043 0301 	orr.w	r3, r3, #1
 8006d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d80:	e01c      	b.n	8006dbc <HAL_RCC_OscConfig+0x324>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	2b05      	cmp	r3, #5
 8006d88:	d10c      	bne.n	8006da4 <HAL_RCC_OscConfig+0x30c>
 8006d8a:	4b5f      	ldr	r3, [pc, #380]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8e:	4a5e      	ldr	r2, [pc, #376]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006d90:	f043 0304 	orr.w	r3, r3, #4
 8006d94:	6713      	str	r3, [r2, #112]	; 0x70
 8006d96:	4b5c      	ldr	r3, [pc, #368]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9a:	4a5b      	ldr	r2, [pc, #364]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006d9c:	f043 0301 	orr.w	r3, r3, #1
 8006da0:	6713      	str	r3, [r2, #112]	; 0x70
 8006da2:	e00b      	b.n	8006dbc <HAL_RCC_OscConfig+0x324>
 8006da4:	4b58      	ldr	r3, [pc, #352]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da8:	4a57      	ldr	r2, [pc, #348]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	6713      	str	r3, [r2, #112]	; 0x70
 8006db0:	4b55      	ldr	r3, [pc, #340]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db4:	4a54      	ldr	r2, [pc, #336]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006db6:	f023 0304 	bic.w	r3, r3, #4
 8006dba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d015      	beq.n	8006df0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc4:	f7fc fec8 	bl	8003b58 <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dca:	e00a      	b.n	8006de2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dcc:	f7fc fec4 	bl	8003b58 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e0cb      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de2:	4b49      	ldr	r3, [pc, #292]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0ee      	beq.n	8006dcc <HAL_RCC_OscConfig+0x334>
 8006dee:	e014      	b.n	8006e1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006df0:	f7fc feb2 	bl	8003b58 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006df6:	e00a      	b.n	8006e0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006df8:	f7fc feae 	bl	8003b58 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e0b5      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e0e:	4b3e      	ldr	r3, [pc, #248]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1ee      	bne.n	8006df8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d105      	bne.n	8006e2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e20:	4b39      	ldr	r3, [pc, #228]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	4a38      	ldr	r2, [pc, #224]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 80a1 	beq.w	8006f78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e36:	4b34      	ldr	r3, [pc, #208]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 030c 	and.w	r3, r3, #12
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d05c      	beq.n	8006efc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d141      	bne.n	8006ece <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e4a:	4b31      	ldr	r3, [pc, #196]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e50:	f7fc fe82 	bl	8003b58 <HAL_GetTick>
 8006e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e56:	e008      	b.n	8006e6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e58:	f7fc fe7e 	bl	8003b58 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e087      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e6a:	4b27      	ldr	r3, [pc, #156]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f0      	bne.n	8006e58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69da      	ldr	r2, [r3, #28]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	019b      	lsls	r3, r3, #6
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	041b      	lsls	r3, r3, #16
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	061b      	lsls	r3, r3, #24
 8006e9a:	491b      	ldr	r1, [pc, #108]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ea0:	4b1b      	ldr	r3, [pc, #108]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea6:	f7fc fe57 	bl	8003b58 <HAL_GetTick>
 8006eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eac:	e008      	b.n	8006ec0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eae:	f7fc fe53 	bl	8003b58 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d901      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e05c      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ec0:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0f0      	beq.n	8006eae <HAL_RCC_OscConfig+0x416>
 8006ecc:	e054      	b.n	8006f78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ece:	4b10      	ldr	r3, [pc, #64]	; (8006f10 <HAL_RCC_OscConfig+0x478>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed4:	f7fc fe40 	bl	8003b58 <HAL_GetTick>
 8006ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006edc:	f7fc fe3c 	bl	8003b58 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e045      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eee:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <HAL_RCC_OscConfig+0x470>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1f0      	bne.n	8006edc <HAL_RCC_OscConfig+0x444>
 8006efa:	e03d      	b.n	8006f78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d107      	bne.n	8006f14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e038      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
 8006f08:	40023800 	.word	0x40023800
 8006f0c:	40007000 	.word	0x40007000
 8006f10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f14:	4b1b      	ldr	r3, [pc, #108]	; (8006f84 <HAL_RCC_OscConfig+0x4ec>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d028      	beq.n	8006f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d121      	bne.n	8006f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d11a      	bne.n	8006f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f44:	4013      	ands	r3, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d111      	bne.n	8006f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d107      	bne.n	8006f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d001      	beq.n	8006f78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e000      	b.n	8006f7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	40023800 	.word	0x40023800

08006f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e0cc      	b.n	8007136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f9c:	4b68      	ldr	r3, [pc, #416]	; (8007140 <HAL_RCC_ClockConfig+0x1b8>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d90c      	bls.n	8006fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006faa:	4b65      	ldr	r3, [pc, #404]	; (8007140 <HAL_RCC_ClockConfig+0x1b8>)
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fb2:	4b63      	ldr	r3, [pc, #396]	; (8007140 <HAL_RCC_ClockConfig+0x1b8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d001      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e0b8      	b.n	8007136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d020      	beq.n	8007012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fdc:	4b59      	ldr	r3, [pc, #356]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	4a58      	ldr	r2, [pc, #352]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0308 	and.w	r3, r3, #8
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ff4:	4b53      	ldr	r3, [pc, #332]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	4a52      	ldr	r2, [pc, #328]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007000:	4b50      	ldr	r3, [pc, #320]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	494d      	ldr	r1, [pc, #308]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 800700e:	4313      	orrs	r3, r2
 8007010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d044      	beq.n	80070a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d107      	bne.n	8007036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007026:	4b47      	ldr	r3, [pc, #284]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d119      	bne.n	8007066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e07f      	b.n	8007136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2b02      	cmp	r3, #2
 800703c:	d003      	beq.n	8007046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007042:	2b03      	cmp	r3, #3
 8007044:	d107      	bne.n	8007056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007046:	4b3f      	ldr	r3, [pc, #252]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d109      	bne.n	8007066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e06f      	b.n	8007136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007056:	4b3b      	ldr	r3, [pc, #236]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e067      	b.n	8007136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007066:	4b37      	ldr	r3, [pc, #220]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f023 0203 	bic.w	r2, r3, #3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	4934      	ldr	r1, [pc, #208]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 8007074:	4313      	orrs	r3, r2
 8007076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007078:	f7fc fd6e 	bl	8003b58 <HAL_GetTick>
 800707c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800707e:	e00a      	b.n	8007096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007080:	f7fc fd6a 	bl	8003b58 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	f241 3288 	movw	r2, #5000	; 0x1388
 800708e:	4293      	cmp	r3, r2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e04f      	b.n	8007136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007096:	4b2b      	ldr	r3, [pc, #172]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 020c 	and.w	r2, r3, #12
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d1eb      	bne.n	8007080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070a8:	4b25      	ldr	r3, [pc, #148]	; (8007140 <HAL_RCC_ClockConfig+0x1b8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d20c      	bcs.n	80070d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b6:	4b22      	ldr	r3, [pc, #136]	; (8007140 <HAL_RCC_ClockConfig+0x1b8>)
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070be:	4b20      	ldr	r3, [pc, #128]	; (8007140 <HAL_RCC_ClockConfig+0x1b8>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d001      	beq.n	80070d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e032      	b.n	8007136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d008      	beq.n	80070ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070dc:	4b19      	ldr	r3, [pc, #100]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	4916      	ldr	r1, [pc, #88]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0308 	and.w	r3, r3, #8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d009      	beq.n	800710e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070fa:	4b12      	ldr	r3, [pc, #72]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	490e      	ldr	r1, [pc, #56]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 800710a:	4313      	orrs	r3, r2
 800710c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800710e:	f000 f821 	bl	8007154 <HAL_RCC_GetSysClockFreq>
 8007112:	4602      	mov	r2, r0
 8007114:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	091b      	lsrs	r3, r3, #4
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	490a      	ldr	r1, [pc, #40]	; (8007148 <HAL_RCC_ClockConfig+0x1c0>)
 8007120:	5ccb      	ldrb	r3, [r1, r3]
 8007122:	fa22 f303 	lsr.w	r3, r2, r3
 8007126:	4a09      	ldr	r2, [pc, #36]	; (800714c <HAL_RCC_ClockConfig+0x1c4>)
 8007128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <HAL_RCC_ClockConfig+0x1c8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f7fc fb0c 	bl	800374c <HAL_InitTick>

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	40023c00 	.word	0x40023c00
 8007144:	40023800 	.word	0x40023800
 8007148:	080198c4 	.word	0x080198c4
 800714c:	2000000c 	.word	0x2000000c
 8007150:	20000010 	.word	0x20000010

08007154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007158:	b094      	sub	sp, #80	; 0x50
 800715a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	647b      	str	r3, [r7, #68]	; 0x44
 8007160:	2300      	movs	r3, #0
 8007162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007164:	2300      	movs	r3, #0
 8007166:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800716c:	4b79      	ldr	r3, [pc, #484]	; (8007354 <HAL_RCC_GetSysClockFreq+0x200>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 030c 	and.w	r3, r3, #12
 8007174:	2b08      	cmp	r3, #8
 8007176:	d00d      	beq.n	8007194 <HAL_RCC_GetSysClockFreq+0x40>
 8007178:	2b08      	cmp	r3, #8
 800717a:	f200 80e1 	bhi.w	8007340 <HAL_RCC_GetSysClockFreq+0x1ec>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <HAL_RCC_GetSysClockFreq+0x34>
 8007182:	2b04      	cmp	r3, #4
 8007184:	d003      	beq.n	800718e <HAL_RCC_GetSysClockFreq+0x3a>
 8007186:	e0db      	b.n	8007340 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007188:	4b73      	ldr	r3, [pc, #460]	; (8007358 <HAL_RCC_GetSysClockFreq+0x204>)
 800718a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800718c:	e0db      	b.n	8007346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800718e:	4b73      	ldr	r3, [pc, #460]	; (800735c <HAL_RCC_GetSysClockFreq+0x208>)
 8007190:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007192:	e0d8      	b.n	8007346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007194:	4b6f      	ldr	r3, [pc, #444]	; (8007354 <HAL_RCC_GetSysClockFreq+0x200>)
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800719c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800719e:	4b6d      	ldr	r3, [pc, #436]	; (8007354 <HAL_RCC_GetSysClockFreq+0x200>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d063      	beq.n	8007272 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071aa:	4b6a      	ldr	r3, [pc, #424]	; (8007354 <HAL_RCC_GetSysClockFreq+0x200>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	099b      	lsrs	r3, r3, #6
 80071b0:	2200      	movs	r2, #0
 80071b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80071b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071bc:	633b      	str	r3, [r7, #48]	; 0x30
 80071be:	2300      	movs	r3, #0
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
 80071c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80071c6:	4622      	mov	r2, r4
 80071c8:	462b      	mov	r3, r5
 80071ca:	f04f 0000 	mov.w	r0, #0
 80071ce:	f04f 0100 	mov.w	r1, #0
 80071d2:	0159      	lsls	r1, r3, #5
 80071d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071d8:	0150      	lsls	r0, r2, #5
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	4621      	mov	r1, r4
 80071e0:	1a51      	subs	r1, r2, r1
 80071e2:	6139      	str	r1, [r7, #16]
 80071e4:	4629      	mov	r1, r5
 80071e6:	eb63 0301 	sbc.w	r3, r3, r1
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	f04f 0300 	mov.w	r3, #0
 80071f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071f8:	4659      	mov	r1, fp
 80071fa:	018b      	lsls	r3, r1, #6
 80071fc:	4651      	mov	r1, sl
 80071fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007202:	4651      	mov	r1, sl
 8007204:	018a      	lsls	r2, r1, #6
 8007206:	4651      	mov	r1, sl
 8007208:	ebb2 0801 	subs.w	r8, r2, r1
 800720c:	4659      	mov	r1, fp
 800720e:	eb63 0901 	sbc.w	r9, r3, r1
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	f04f 0300 	mov.w	r3, #0
 800721a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800721e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007226:	4690      	mov	r8, r2
 8007228:	4699      	mov	r9, r3
 800722a:	4623      	mov	r3, r4
 800722c:	eb18 0303 	adds.w	r3, r8, r3
 8007230:	60bb      	str	r3, [r7, #8]
 8007232:	462b      	mov	r3, r5
 8007234:	eb49 0303 	adc.w	r3, r9, r3
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	f04f 0200 	mov.w	r2, #0
 800723e:	f04f 0300 	mov.w	r3, #0
 8007242:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007246:	4629      	mov	r1, r5
 8007248:	024b      	lsls	r3, r1, #9
 800724a:	4621      	mov	r1, r4
 800724c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007250:	4621      	mov	r1, r4
 8007252:	024a      	lsls	r2, r1, #9
 8007254:	4610      	mov	r0, r2
 8007256:	4619      	mov	r1, r3
 8007258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800725a:	2200      	movs	r2, #0
 800725c:	62bb      	str	r3, [r7, #40]	; 0x28
 800725e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007264:	f7f9 fc92 	bl	8000b8c <__aeabi_uldivmod>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4613      	mov	r3, r2
 800726e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007270:	e058      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007272:	4b38      	ldr	r3, [pc, #224]	; (8007354 <HAL_RCC_GetSysClockFreq+0x200>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	099b      	lsrs	r3, r3, #6
 8007278:	2200      	movs	r2, #0
 800727a:	4618      	mov	r0, r3
 800727c:	4611      	mov	r1, r2
 800727e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007282:	623b      	str	r3, [r7, #32]
 8007284:	2300      	movs	r3, #0
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
 8007288:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800728c:	4642      	mov	r2, r8
 800728e:	464b      	mov	r3, r9
 8007290:	f04f 0000 	mov.w	r0, #0
 8007294:	f04f 0100 	mov.w	r1, #0
 8007298:	0159      	lsls	r1, r3, #5
 800729a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800729e:	0150      	lsls	r0, r2, #5
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4641      	mov	r1, r8
 80072a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80072aa:	4649      	mov	r1, r9
 80072ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80072b0:	f04f 0200 	mov.w	r2, #0
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80072bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80072c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80072c4:	ebb2 040a 	subs.w	r4, r2, sl
 80072c8:	eb63 050b 	sbc.w	r5, r3, fp
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	f04f 0300 	mov.w	r3, #0
 80072d4:	00eb      	lsls	r3, r5, #3
 80072d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072da:	00e2      	lsls	r2, r4, #3
 80072dc:	4614      	mov	r4, r2
 80072de:	461d      	mov	r5, r3
 80072e0:	4643      	mov	r3, r8
 80072e2:	18e3      	adds	r3, r4, r3
 80072e4:	603b      	str	r3, [r7, #0]
 80072e6:	464b      	mov	r3, r9
 80072e8:	eb45 0303 	adc.w	r3, r5, r3
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	f04f 0300 	mov.w	r3, #0
 80072f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072fa:	4629      	mov	r1, r5
 80072fc:	028b      	lsls	r3, r1, #10
 80072fe:	4621      	mov	r1, r4
 8007300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007304:	4621      	mov	r1, r4
 8007306:	028a      	lsls	r2, r1, #10
 8007308:	4610      	mov	r0, r2
 800730a:	4619      	mov	r1, r3
 800730c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800730e:	2200      	movs	r2, #0
 8007310:	61bb      	str	r3, [r7, #24]
 8007312:	61fa      	str	r2, [r7, #28]
 8007314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007318:	f7f9 fc38 	bl	8000b8c <__aeabi_uldivmod>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4613      	mov	r3, r2
 8007322:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007324:	4b0b      	ldr	r3, [pc, #44]	; (8007354 <HAL_RCC_GetSysClockFreq+0x200>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	3301      	adds	r3, #1
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007338:	fbb2 f3f3 	udiv	r3, r2, r3
 800733c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800733e:	e002      	b.n	8007346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007340:	4b05      	ldr	r3, [pc, #20]	; (8007358 <HAL_RCC_GetSysClockFreq+0x204>)
 8007342:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007348:	4618      	mov	r0, r3
 800734a:	3750      	adds	r7, #80	; 0x50
 800734c:	46bd      	mov	sp, r7
 800734e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007352:	bf00      	nop
 8007354:	40023800 	.word	0x40023800
 8007358:	00f42400 	.word	0x00f42400
 800735c:	007a1200 	.word	0x007a1200

08007360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007364:	4b03      	ldr	r3, [pc, #12]	; (8007374 <HAL_RCC_GetHCLKFreq+0x14>)
 8007366:	681b      	ldr	r3, [r3, #0]
}
 8007368:	4618      	mov	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	2000000c 	.word	0x2000000c

08007378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800737c:	f7ff fff0 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 8007380:	4602      	mov	r2, r0
 8007382:	4b05      	ldr	r3, [pc, #20]	; (8007398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	0a9b      	lsrs	r3, r3, #10
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	4903      	ldr	r1, [pc, #12]	; (800739c <HAL_RCC_GetPCLK1Freq+0x24>)
 800738e:	5ccb      	ldrb	r3, [r1, r3]
 8007390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007394:	4618      	mov	r0, r3
 8007396:	bd80      	pop	{r7, pc}
 8007398:	40023800 	.word	0x40023800
 800739c:	080198d4 	.word	0x080198d4

080073a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073a4:	f7ff ffdc 	bl	8007360 <HAL_RCC_GetHCLKFreq>
 80073a8:	4602      	mov	r2, r0
 80073aa:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	0b5b      	lsrs	r3, r3, #13
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	4903      	ldr	r1, [pc, #12]	; (80073c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073b6:	5ccb      	ldrb	r3, [r1, r3]
 80073b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073bc:	4618      	mov	r0, r3
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	40023800 	.word	0x40023800
 80073c4:	080198d4 	.word	0x080198d4

080073c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	220f      	movs	r2, #15
 80073d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073d8:	4b12      	ldr	r3, [pc, #72]	; (8007424 <HAL_RCC_GetClockConfig+0x5c>)
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f003 0203 	and.w	r2, r3, #3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80073e4:	4b0f      	ldr	r3, [pc, #60]	; (8007424 <HAL_RCC_GetClockConfig+0x5c>)
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80073f0:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <HAL_RCC_GetClockConfig+0x5c>)
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80073fc:	4b09      	ldr	r3, [pc, #36]	; (8007424 <HAL_RCC_GetClockConfig+0x5c>)
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	08db      	lsrs	r3, r3, #3
 8007402:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800740a:	4b07      	ldr	r3, [pc, #28]	; (8007428 <HAL_RCC_GetClockConfig+0x60>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0207 	and.w	r2, r3, #7
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	601a      	str	r2, [r3, #0]
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	40023800 	.word	0x40023800
 8007428:	40023c00 	.word	0x40023c00

0800742c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e041      	b.n	80074c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f839 	bl	80074ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3304      	adds	r3, #4
 8007468:	4619      	mov	r1, r3
 800746a:	4610      	mov	r0, r2
 800746c:	f000 fc7a 	bl	8007d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d001      	beq.n	80074f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e044      	b.n	8007582 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0201 	orr.w	r2, r2, #1
 800750e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1e      	ldr	r2, [pc, #120]	; (8007590 <HAL_TIM_Base_Start_IT+0xb0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d018      	beq.n	800754c <HAL_TIM_Base_Start_IT+0x6c>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007522:	d013      	beq.n	800754c <HAL_TIM_Base_Start_IT+0x6c>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a1a      	ldr	r2, [pc, #104]	; (8007594 <HAL_TIM_Base_Start_IT+0xb4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00e      	beq.n	800754c <HAL_TIM_Base_Start_IT+0x6c>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a19      	ldr	r2, [pc, #100]	; (8007598 <HAL_TIM_Base_Start_IT+0xb8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <HAL_TIM_Base_Start_IT+0x6c>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a17      	ldr	r2, [pc, #92]	; (800759c <HAL_TIM_Base_Start_IT+0xbc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_TIM_Base_Start_IT+0x6c>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a16      	ldr	r2, [pc, #88]	; (80075a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d111      	bne.n	8007570 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b06      	cmp	r3, #6
 800755c:	d010      	beq.n	8007580 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0201 	orr.w	r2, r2, #1
 800756c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800756e:	e007      	b.n	8007580 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0201 	orr.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40010000 	.word	0x40010000
 8007594:	40000400 	.word	0x40000400
 8007598:	40000800 	.word	0x40000800
 800759c:	40000c00 	.word	0x40000c00
 80075a0:	40014000 	.word	0x40014000

080075a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <HAL_TIM_PWM_Start+0x24>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	bf14      	ite	ne
 80075c0:	2301      	movne	r3, #1
 80075c2:	2300      	moveq	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	e022      	b.n	800760e <HAL_TIM_PWM_Start+0x6a>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d109      	bne.n	80075e2 <HAL_TIM_PWM_Start+0x3e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	bf14      	ite	ne
 80075da:	2301      	movne	r3, #1
 80075dc:	2300      	moveq	r3, #0
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	e015      	b.n	800760e <HAL_TIM_PWM_Start+0x6a>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d109      	bne.n	80075fc <HAL_TIM_PWM_Start+0x58>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	bf14      	ite	ne
 80075f4:	2301      	movne	r3, #1
 80075f6:	2300      	moveq	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	e008      	b.n	800760e <HAL_TIM_PWM_Start+0x6a>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	bf14      	ite	ne
 8007608:	2301      	movne	r3, #1
 800760a:	2300      	moveq	r3, #0
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e068      	b.n	80076e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <HAL_TIM_PWM_Start+0x82>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007624:	e013      	b.n	800764e <HAL_TIM_PWM_Start+0xaa>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b04      	cmp	r3, #4
 800762a:	d104      	bne.n	8007636 <HAL_TIM_PWM_Start+0x92>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007634:	e00b      	b.n	800764e <HAL_TIM_PWM_Start+0xaa>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b08      	cmp	r3, #8
 800763a:	d104      	bne.n	8007646 <HAL_TIM_PWM_Start+0xa2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007644:	e003      	b.n	800764e <HAL_TIM_PWM_Start+0xaa>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2202      	movs	r2, #2
 800764a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2201      	movs	r2, #1
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fd90 	bl	800817c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a23      	ldr	r2, [pc, #140]	; (80076f0 <HAL_TIM_PWM_Start+0x14c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d107      	bne.n	8007676 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007674:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1d      	ldr	r2, [pc, #116]	; (80076f0 <HAL_TIM_PWM_Start+0x14c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d018      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x10e>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007688:	d013      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x10e>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a19      	ldr	r2, [pc, #100]	; (80076f4 <HAL_TIM_PWM_Start+0x150>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00e      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x10e>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a17      	ldr	r2, [pc, #92]	; (80076f8 <HAL_TIM_PWM_Start+0x154>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d009      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x10e>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a16      	ldr	r2, [pc, #88]	; (80076fc <HAL_TIM_PWM_Start+0x158>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d004      	beq.n	80076b2 <HAL_TIM_PWM_Start+0x10e>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a14      	ldr	r2, [pc, #80]	; (8007700 <HAL_TIM_PWM_Start+0x15c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d111      	bne.n	80076d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b06      	cmp	r3, #6
 80076c2:	d010      	beq.n	80076e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f042 0201 	orr.w	r2, r2, #1
 80076d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d4:	e007      	b.n	80076e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0201 	orr.w	r2, r2, #1
 80076e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	40010000 	.word	0x40010000
 80076f4:	40000400 	.word	0x40000400
 80076f8:	40000800 	.word	0x40000800
 80076fc:	40000c00 	.word	0x40000c00
 8007700:	40014000 	.word	0x40014000

08007704 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e097      	b.n	8007848 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d106      	bne.n	8007732 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f88f 	bl	8007850 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	6812      	ldr	r2, [r2, #0]
 8007744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007748:	f023 0307 	bic.w	r3, r3, #7
 800774c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3304      	adds	r3, #4
 8007756:	4619      	mov	r1, r3
 8007758:	4610      	mov	r0, r2
 800775a:	f000 fb03 	bl	8007d64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007786:	f023 0303 	bic.w	r3, r3, #3
 800778a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	021b      	lsls	r3, r3, #8
 8007796:	4313      	orrs	r3, r2
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	4313      	orrs	r3, r2
 800779c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80077a4:	f023 030c 	bic.w	r3, r3, #12
 80077a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	021b      	lsls	r3, r3, #8
 80077c0:	4313      	orrs	r3, r2
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	011a      	lsls	r2, r3, #4
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	031b      	lsls	r3, r3, #12
 80077d4:	4313      	orrs	r3, r2
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80077e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80077ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	4313      	orrs	r3, r2
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007874:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800787c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007884:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800788c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d110      	bne.n	80078b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d102      	bne.n	80078a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800789a:	7b7b      	ldrb	r3, [r7, #13]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d001      	beq.n	80078a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e069      	b.n	8007978 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078b4:	e031      	b.n	800791a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d110      	bne.n	80078de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d102      	bne.n	80078c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078c2:	7b3b      	ldrb	r3, [r7, #12]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d001      	beq.n	80078cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e055      	b.n	8007978 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078dc:	e01d      	b.n	800791a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d108      	bne.n	80078f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d105      	bne.n	80078f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078ea:	7b7b      	ldrb	r3, [r7, #13]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d102      	bne.n	80078f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078f0:	7b3b      	ldrb	r3, [r7, #12]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d001      	beq.n	80078fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e03e      	b.n	8007978 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2202      	movs	r2, #2
 800790e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2202      	movs	r2, #2
 8007916:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <HAL_TIM_Encoder_Start+0xc4>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b04      	cmp	r3, #4
 8007924:	d008      	beq.n	8007938 <HAL_TIM_Encoder_Start+0xd4>
 8007926:	e00f      	b.n	8007948 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2201      	movs	r2, #1
 800792e:	2100      	movs	r1, #0
 8007930:	4618      	mov	r0, r3
 8007932:	f000 fc23 	bl	800817c <TIM_CCxChannelCmd>
      break;
 8007936:	e016      	b.n	8007966 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2201      	movs	r2, #1
 800793e:	2104      	movs	r1, #4
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fc1b 	bl	800817c <TIM_CCxChannelCmd>
      break;
 8007946:	e00e      	b.n	8007966 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2201      	movs	r2, #1
 800794e:	2100      	movs	r1, #0
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fc13 	bl	800817c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2201      	movs	r2, #1
 800795c:	2104      	movs	r1, #4
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fc0c 	bl	800817c <TIM_CCxChannelCmd>
      break;
 8007964:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f042 0201 	orr.w	r2, r2, #1
 8007974:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b02      	cmp	r3, #2
 8007994:	d122      	bne.n	80079dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d11b      	bne.n	80079dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f06f 0202 	mvn.w	r2, #2
 80079ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f9b0 	bl	8007d28 <HAL_TIM_IC_CaptureCallback>
 80079c8:	e005      	b.n	80079d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f9a2 	bl	8007d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f9b3 	bl	8007d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d122      	bne.n	8007a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d11b      	bne.n	8007a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f06f 0204 	mvn.w	r2, #4
 8007a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2202      	movs	r2, #2
 8007a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f986 	bl	8007d28 <HAL_TIM_IC_CaptureCallback>
 8007a1c:	e005      	b.n	8007a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f978 	bl	8007d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f989 	bl	8007d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	f003 0308 	and.w	r3, r3, #8
 8007a3a:	2b08      	cmp	r3, #8
 8007a3c:	d122      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d11b      	bne.n	8007a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f06f 0208 	mvn.w	r2, #8
 8007a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2204      	movs	r2, #4
 8007a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f95c 	bl	8007d28 <HAL_TIM_IC_CaptureCallback>
 8007a70:	e005      	b.n	8007a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f94e 	bl	8007d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f95f 	bl	8007d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 0310 	and.w	r3, r3, #16
 8007a8e:	2b10      	cmp	r3, #16
 8007a90:	d122      	bne.n	8007ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f003 0310 	and.w	r3, r3, #16
 8007a9c:	2b10      	cmp	r3, #16
 8007a9e:	d11b      	bne.n	8007ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f06f 0210 	mvn.w	r2, #16
 8007aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2208      	movs	r2, #8
 8007aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f932 	bl	8007d28 <HAL_TIM_IC_CaptureCallback>
 8007ac4:	e005      	b.n	8007ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f924 	bl	8007d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f935 	bl	8007d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d10e      	bne.n	8007b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d107      	bne.n	8007b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f06f 0201 	mvn.w	r2, #1
 8007afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7fa fe1a 	bl	8002738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0e:	2b80      	cmp	r3, #128	; 0x80
 8007b10:	d10e      	bne.n	8007b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1c:	2b80      	cmp	r3, #128	; 0x80
 8007b1e:	d107      	bne.n	8007b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fb55 	bl	80081da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3a:	2b40      	cmp	r3, #64	; 0x40
 8007b3c:	d10e      	bne.n	8007b5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b48:	2b40      	cmp	r3, #64	; 0x40
 8007b4a:	d107      	bne.n	8007b5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f8fa 	bl	8007d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b20      	cmp	r3, #32
 8007b68:	d10e      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d107      	bne.n	8007b88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f06f 0220 	mvn.w	r2, #32
 8007b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fb1f 	bl	80081c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b88:	bf00      	nop
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d101      	bne.n	8007bae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007baa:	2302      	movs	r3, #2
 8007bac:	e0ae      	b.n	8007d0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b0c      	cmp	r3, #12
 8007bba:	f200 809f 	bhi.w	8007cfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007bbe:	a201      	add	r2, pc, #4	; (adr r2, 8007bc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc4:	08007bf9 	.word	0x08007bf9
 8007bc8:	08007cfd 	.word	0x08007cfd
 8007bcc:	08007cfd 	.word	0x08007cfd
 8007bd0:	08007cfd 	.word	0x08007cfd
 8007bd4:	08007c39 	.word	0x08007c39
 8007bd8:	08007cfd 	.word	0x08007cfd
 8007bdc:	08007cfd 	.word	0x08007cfd
 8007be0:	08007cfd 	.word	0x08007cfd
 8007be4:	08007c7b 	.word	0x08007c7b
 8007be8:	08007cfd 	.word	0x08007cfd
 8007bec:	08007cfd 	.word	0x08007cfd
 8007bf0:	08007cfd 	.word	0x08007cfd
 8007bf4:	08007cbb 	.word	0x08007cbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 f930 	bl	8007e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0208 	orr.w	r2, r2, #8
 8007c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699a      	ldr	r2, [r3, #24]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0204 	bic.w	r2, r2, #4
 8007c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6999      	ldr	r1, [r3, #24]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	691a      	ldr	r2, [r3, #16]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	619a      	str	r2, [r3, #24]
      break;
 8007c36:	e064      	b.n	8007d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 f976 	bl	8007f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699a      	ldr	r2, [r3, #24]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6999      	ldr	r1, [r3, #24]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	021a      	lsls	r2, r3, #8
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	619a      	str	r2, [r3, #24]
      break;
 8007c78:	e043      	b.n	8007d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68b9      	ldr	r1, [r7, #8]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 f9c1 	bl	8008008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 0208 	orr.w	r2, r2, #8
 8007c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69da      	ldr	r2, [r3, #28]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0204 	bic.w	r2, r2, #4
 8007ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69d9      	ldr	r1, [r3, #28]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	61da      	str	r2, [r3, #28]
      break;
 8007cb8:	e023      	b.n	8007d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fa0b 	bl	80080dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69da      	ldr	r2, [r3, #28]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69d9      	ldr	r1, [r3, #28]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	021a      	lsls	r2, r3, #8
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	61da      	str	r2, [r3, #28]
      break;
 8007cfa:	e002      	b.n	8007d02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8007d00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a34      	ldr	r2, [pc, #208]	; (8007e48 <TIM_Base_SetConfig+0xe4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d00f      	beq.n	8007d9c <TIM_Base_SetConfig+0x38>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d82:	d00b      	beq.n	8007d9c <TIM_Base_SetConfig+0x38>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a31      	ldr	r2, [pc, #196]	; (8007e4c <TIM_Base_SetConfig+0xe8>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d007      	beq.n	8007d9c <TIM_Base_SetConfig+0x38>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a30      	ldr	r2, [pc, #192]	; (8007e50 <TIM_Base_SetConfig+0xec>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d003      	beq.n	8007d9c <TIM_Base_SetConfig+0x38>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a2f      	ldr	r2, [pc, #188]	; (8007e54 <TIM_Base_SetConfig+0xf0>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d108      	bne.n	8007dae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a25      	ldr	r2, [pc, #148]	; (8007e48 <TIM_Base_SetConfig+0xe4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d01b      	beq.n	8007dee <TIM_Base_SetConfig+0x8a>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dbc:	d017      	beq.n	8007dee <TIM_Base_SetConfig+0x8a>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a22      	ldr	r2, [pc, #136]	; (8007e4c <TIM_Base_SetConfig+0xe8>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d013      	beq.n	8007dee <TIM_Base_SetConfig+0x8a>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a21      	ldr	r2, [pc, #132]	; (8007e50 <TIM_Base_SetConfig+0xec>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00f      	beq.n	8007dee <TIM_Base_SetConfig+0x8a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a20      	ldr	r2, [pc, #128]	; (8007e54 <TIM_Base_SetConfig+0xf0>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d00b      	beq.n	8007dee <TIM_Base_SetConfig+0x8a>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a1f      	ldr	r2, [pc, #124]	; (8007e58 <TIM_Base_SetConfig+0xf4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d007      	beq.n	8007dee <TIM_Base_SetConfig+0x8a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a1e      	ldr	r2, [pc, #120]	; (8007e5c <TIM_Base_SetConfig+0xf8>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d003      	beq.n	8007dee <TIM_Base_SetConfig+0x8a>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a1d      	ldr	r2, [pc, #116]	; (8007e60 <TIM_Base_SetConfig+0xfc>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d108      	bne.n	8007e00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a08      	ldr	r2, [pc, #32]	; (8007e48 <TIM_Base_SetConfig+0xe4>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d103      	bne.n	8007e34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	691a      	ldr	r2, [r3, #16]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	615a      	str	r2, [r3, #20]
}
 8007e3a:	bf00      	nop
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	40010000 	.word	0x40010000
 8007e4c:	40000400 	.word	0x40000400
 8007e50:	40000800 	.word	0x40000800
 8007e54:	40000c00 	.word	0x40000c00
 8007e58:	40014000 	.word	0x40014000
 8007e5c:	40014400 	.word	0x40014400
 8007e60:	40014800 	.word	0x40014800

08007e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	f023 0201 	bic.w	r2, r3, #1
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f023 0303 	bic.w	r3, r3, #3
 8007e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f023 0302 	bic.w	r3, r3, #2
 8007eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a1c      	ldr	r2, [pc, #112]	; (8007f2c <TIM_OC1_SetConfig+0xc8>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d10c      	bne.n	8007eda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f023 0308 	bic.w	r3, r3, #8
 8007ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f023 0304 	bic.w	r3, r3, #4
 8007ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a13      	ldr	r2, [pc, #76]	; (8007f2c <TIM_OC1_SetConfig+0xc8>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d111      	bne.n	8007f06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	621a      	str	r2, [r3, #32]
}
 8007f20:	bf00      	nop
 8007f22:	371c      	adds	r7, #28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	40010000 	.word	0x40010000

08007f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	f023 0210 	bic.w	r2, r3, #16
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f023 0320 	bic.w	r3, r3, #32
 8007f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a1e      	ldr	r2, [pc, #120]	; (8008004 <TIM_OC2_SetConfig+0xd4>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d10d      	bne.n	8007fac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007faa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a15      	ldr	r2, [pc, #84]	; (8008004 <TIM_OC2_SetConfig+0xd4>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d113      	bne.n	8007fdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	621a      	str	r2, [r3, #32]
}
 8007ff6:	bf00      	nop
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	40010000 	.word	0x40010000

08008008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 0303 	bic.w	r3, r3, #3
 800803e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	4313      	orrs	r3, r2
 8008048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	021b      	lsls	r3, r3, #8
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	4313      	orrs	r3, r2
 800805c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a1d      	ldr	r2, [pc, #116]	; (80080d8 <TIM_OC3_SetConfig+0xd0>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d10d      	bne.n	8008082 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800806c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	021b      	lsls	r3, r3, #8
 8008074:	697a      	ldr	r2, [r7, #20]
 8008076:	4313      	orrs	r3, r2
 8008078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a14      	ldr	r2, [pc, #80]	; (80080d8 <TIM_OC3_SetConfig+0xd0>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d113      	bne.n	80080b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	011b      	lsls	r3, r3, #4
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	011b      	lsls	r3, r3, #4
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	621a      	str	r2, [r3, #32]
}
 80080cc:	bf00      	nop
 80080ce:	371c      	adds	r7, #28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	40010000 	.word	0x40010000

080080dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800810a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	021b      	lsls	r3, r3, #8
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4313      	orrs	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	031b      	lsls	r3, r3, #12
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	4313      	orrs	r3, r2
 8008132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a10      	ldr	r2, [pc, #64]	; (8008178 <TIM_OC4_SetConfig+0x9c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d109      	bne.n	8008150 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	019b      	lsls	r3, r3, #6
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	4313      	orrs	r3, r2
 800814e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	621a      	str	r2, [r3, #32]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	40010000 	.word	0x40010000

0800817c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f003 031f 	and.w	r3, r3, #31
 800818e:	2201      	movs	r2, #1
 8008190:	fa02 f303 	lsl.w	r3, r2, r3
 8008194:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a1a      	ldr	r2, [r3, #32]
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	43db      	mvns	r3, r3
 800819e:	401a      	ands	r2, r3
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6a1a      	ldr	r2, [r3, #32]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	f003 031f 	and.w	r3, r3, #31
 80081ae:	6879      	ldr	r1, [r7, #4]
 80081b0:	fa01 f303 	lsl.w	r3, r1, r3
 80081b4:	431a      	orrs	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	621a      	str	r2, [r3, #32]
}
 80081ba:	bf00      	nop
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b083      	sub	sp, #12
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081ce:	bf00      	nop
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081e2:	bf00      	nop
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e03f      	b.n	8008280 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d106      	bne.n	800821a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7fb f92b 	bl	8003470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2224      	movs	r2, #36	; 0x24
 800821e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68da      	ldr	r2, [r3, #12]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008230:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 f978 	bl	8009528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	691a      	ldr	r2, [r3, #16]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008246:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	695a      	ldr	r2, [r3, #20]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008256:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008266:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08a      	sub	sp, #40	; 0x28
 800828c:	af02      	add	r7, sp, #8
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	4613      	mov	r3, r2
 8008296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d17c      	bne.n	80083a2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <HAL_UART_Transmit+0x2c>
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e075      	b.n	80083a4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d101      	bne.n	80082c6 <HAL_UART_Transmit+0x3e>
 80082c2:	2302      	movs	r3, #2
 80082c4:	e06e      	b.n	80083a4 <HAL_UART_Transmit+0x11c>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2221      	movs	r2, #33	; 0x21
 80082d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082dc:	f7fb fc3c 	bl	8003b58 <HAL_GetTick>
 80082e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	88fa      	ldrh	r2, [r7, #6]
 80082e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	88fa      	ldrh	r2, [r7, #6]
 80082ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f6:	d108      	bne.n	800830a <HAL_UART_Transmit+0x82>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d104      	bne.n	800830a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008300:	2300      	movs	r3, #0
 8008302:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	61bb      	str	r3, [r7, #24]
 8008308:	e003      	b.n	8008312 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800830e:	2300      	movs	r3, #0
 8008310:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800831a:	e02a      	b.n	8008372 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	2200      	movs	r2, #0
 8008324:	2180      	movs	r1, #128	; 0x80
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fe2f 	bl	8008f8a <UART_WaitOnFlagUntilTimeout>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e036      	b.n	80083a4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800834a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	3302      	adds	r3, #2
 8008350:	61bb      	str	r3, [r7, #24]
 8008352:	e007      	b.n	8008364 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	781a      	ldrb	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	3301      	adds	r3, #1
 8008362:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008368:	b29b      	uxth	r3, r3
 800836a:	3b01      	subs	r3, #1
 800836c:	b29a      	uxth	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008376:	b29b      	uxth	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1cf      	bne.n	800831c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	2200      	movs	r2, #0
 8008384:	2140      	movs	r1, #64	; 0x40
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fdff 	bl	8008f8a <UART_WaitOnFlagUntilTimeout>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e006      	b.n	80083a4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2220      	movs	r2, #32
 800839a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	e000      	b.n	80083a4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083a2:	2302      	movs	r3, #2
  }
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3720      	adds	r7, #32
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08a      	sub	sp, #40	; 0x28
 80083b0:	af02      	add	r7, sp, #8
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	603b      	str	r3, [r7, #0]
 80083b8:	4613      	mov	r3, r2
 80083ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b20      	cmp	r3, #32
 80083ca:	f040 808c 	bne.w	80084e6 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <HAL_UART_Receive+0x2e>
 80083d4:	88fb      	ldrh	r3, [r7, #6]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e084      	b.n	80084e8 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d101      	bne.n	80083ec <HAL_UART_Receive+0x40>
 80083e8:	2302      	movs	r3, #2
 80083ea:	e07d      	b.n	80084e8 <HAL_UART_Receive+0x13c>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2222      	movs	r2, #34	; 0x22
 80083fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008408:	f7fb fba6 	bl	8003b58 <HAL_GetTick>
 800840c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	88fa      	ldrh	r2, [r7, #6]
 8008412:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	88fa      	ldrh	r2, [r7, #6]
 8008418:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008422:	d108      	bne.n	8008436 <HAL_UART_Receive+0x8a>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d104      	bne.n	8008436 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800842c:	2300      	movs	r3, #0
 800842e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	61bb      	str	r3, [r7, #24]
 8008434:	e003      	b.n	800843e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008446:	e043      	b.n	80084d0 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2200      	movs	r2, #0
 8008450:	2120      	movs	r1, #32
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 fd99 	bl	8008f8a <UART_WaitOnFlagUntilTimeout>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e042      	b.n	80084e8 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10c      	bne.n	8008482 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	b29b      	uxth	r3, r3
 8008470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008474:	b29a      	uxth	r2, r3
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	3302      	adds	r3, #2
 800847e:	61bb      	str	r3, [r7, #24]
 8008480:	e01f      	b.n	80084c2 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800848a:	d007      	beq.n	800849c <HAL_UART_Receive+0xf0>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10a      	bne.n	80084aa <HAL_UART_Receive+0xfe>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d106      	bne.n	80084aa <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	701a      	strb	r2, [r3, #0]
 80084a8:	e008      	b.n	80084bc <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	3301      	adds	r3, #1
 80084c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1b6      	bne.n	8008448 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2220      	movs	r2, #32
 80084de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e000      	b.n	80084e8 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80084e6:	2302      	movs	r3, #2
  }
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3720      	adds	r7, #32
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08c      	sub	sp, #48	; 0x30
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	4613      	mov	r3, r2
 80084fc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b20      	cmp	r3, #32
 8008508:	d165      	bne.n	80085d6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <HAL_UART_Transmit_DMA+0x26>
 8008510:	88fb      	ldrh	r3, [r7, #6]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e05e      	b.n	80085d8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_UART_Transmit_DMA+0x38>
 8008524:	2302      	movs	r3, #2
 8008526:	e057      	b.n	80085d8 <HAL_UART_Transmit_DMA+0xe8>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	88fa      	ldrh	r2, [r7, #6]
 800853a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	88fa      	ldrh	r2, [r7, #6]
 8008540:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2221      	movs	r2, #33	; 0x21
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008554:	4a22      	ldr	r2, [pc, #136]	; (80085e0 <HAL_UART_Transmit_DMA+0xf0>)
 8008556:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855c:	4a21      	ldr	r2, [pc, #132]	; (80085e4 <HAL_UART_Transmit_DMA+0xf4>)
 800855e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008564:	4a20      	ldr	r2, [pc, #128]	; (80085e8 <HAL_UART_Transmit_DMA+0xf8>)
 8008566:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856c:	2200      	movs	r2, #0
 800856e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008570:	f107 0308 	add.w	r3, r7, #8
 8008574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800857a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857c:	6819      	ldr	r1, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3304      	adds	r3, #4
 8008584:	461a      	mov	r2, r3
 8008586:	88fb      	ldrh	r3, [r7, #6]
 8008588:	f7fb ff76 	bl	8004478 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008594:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3314      	adds	r3, #20
 80085a4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	617b      	str	r3, [r7, #20]
   return(result);
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3314      	adds	r3, #20
 80085bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085be:	627a      	str	r2, [r7, #36]	; 0x24
 80085c0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	6a39      	ldr	r1, [r7, #32]
 80085c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e5      	bne.n	800859e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	e000      	b.n	80085d8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80085d6:	2302      	movs	r3, #2
  }
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3730      	adds	r7, #48	; 0x30
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	08008ce5 	.word	0x08008ce5
 80085e4:	08008d7f 	.word	0x08008d7f
 80085e8:	08008ef7 	.word	0x08008ef7

080085ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b20      	cmp	r3, #32
 8008604:	d11d      	bne.n	8008642 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <HAL_UART_Receive_DMA+0x26>
 800860c:	88fb      	ldrh	r3, [r7, #6]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e016      	b.n	8008644 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800861c:	2b01      	cmp	r3, #1
 800861e:	d101      	bne.n	8008624 <HAL_UART_Receive_DMA+0x38>
 8008620:	2302      	movs	r3, #2
 8008622:	e00f      	b.n	8008644 <HAL_UART_Receive_DMA+0x58>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008632:	88fb      	ldrh	r3, [r7, #6]
 8008634:	461a      	mov	r2, r3
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fd15 	bl	8009068 <UART_Start_Receive_DMA>
 800863e:	4603      	mov	r3, r0
 8008640:	e000      	b.n	8008644 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008642:	2302      	movs	r3, #2
  }
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b090      	sub	sp, #64	; 0x40
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008654:	2300      	movs	r3, #0
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008662:	2b80      	cmp	r3, #128	; 0x80
 8008664:	bf0c      	ite	eq
 8008666:	2301      	moveq	r3, #1
 8008668:	2300      	movne	r3, #0
 800866a:	b2db      	uxtb	r3, r3
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b21      	cmp	r3, #33	; 0x21
 8008678:	d128      	bne.n	80086cc <HAL_UART_DMAStop+0x80>
 800867a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800867c:	2b00      	cmp	r3, #0
 800867e:	d025      	beq.n	80086cc <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3314      	adds	r3, #20
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	e853 3f00 	ldrex	r3, [r3]
 800868e:	623b      	str	r3, [r7, #32]
   return(result);
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008696:	63bb      	str	r3, [r7, #56]	; 0x38
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3314      	adds	r3, #20
 800869e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086a0:	633a      	str	r2, [r7, #48]	; 0x30
 80086a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e5      	bne.n	8008680 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d004      	beq.n	80086c6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fb ff31 	bl	8004528 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fd6c 	bl	80091a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b40      	cmp	r3, #64	; 0x40
 80086d8:	bf0c      	ite	eq
 80086da:	2301      	moveq	r3, #1
 80086dc:	2300      	movne	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b22      	cmp	r3, #34	; 0x22
 80086ec:	d128      	bne.n	8008740 <HAL_UART_DMAStop+0xf4>
 80086ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d025      	beq.n	8008740 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3314      	adds	r3, #20
 80086fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	e853 3f00 	ldrex	r3, [r3]
 8008702:	60fb      	str	r3, [r7, #12]
   return(result);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3314      	adds	r3, #20
 8008712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008714:	61fa      	str	r2, [r7, #28]
 8008716:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008718:	69b9      	ldr	r1, [r7, #24]
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	e841 2300 	strex	r3, r2, [r1]
 8008720:	617b      	str	r3, [r7, #20]
   return(result);
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e5      	bne.n	80086f4 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872c:	2b00      	cmp	r3, #0
 800872e:	d004      	beq.n	800873a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008734:	4618      	mov	r0, r3
 8008736:	f7fb fef7 	bl	8004528 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fd5a 	bl	80091f4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3740      	adds	r7, #64	; 0x40
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b0ba      	sub	sp, #232	; 0xe8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008772:	2300      	movs	r3, #0
 8008774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008778:	2300      	movs	r3, #0
 800877a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800877e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800878a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10f      	bne.n	80087b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <HAL_UART_IRQHandler+0x66>
 800879e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fe01 	bl	80093b2 <UART_Receive_IT>
      return;
 80087b0:	e256      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80de 	beq.w	8008978 <HAL_UART_IRQHandler+0x22c>
 80087bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d106      	bne.n	80087d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 80d1 	beq.w	8008978 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00b      	beq.n	80087fa <HAL_UART_IRQHandler+0xae>
 80087e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d005      	beq.n	80087fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	f043 0201 	orr.w	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00b      	beq.n	800881e <HAL_UART_IRQHandler+0xd2>
 8008806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d005      	beq.n	800881e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	f043 0202 	orr.w	r2, r3, #2
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800881e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00b      	beq.n	8008842 <HAL_UART_IRQHandler+0xf6>
 800882a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	f043 0204 	orr.w	r2, r3, #4
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d011      	beq.n	8008872 <HAL_UART_IRQHandler+0x126>
 800884e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d105      	bne.n	8008866 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800885a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d005      	beq.n	8008872 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	f043 0208 	orr.w	r2, r3, #8
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 81ed 	beq.w	8008c56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800887c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008880:	f003 0320 	and.w	r3, r3, #32
 8008884:	2b00      	cmp	r3, #0
 8008886:	d008      	beq.n	800889a <HAL_UART_IRQHandler+0x14e>
 8008888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800888c:	f003 0320 	and.w	r3, r3, #32
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fd8c 	bl	80093b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a4:	2b40      	cmp	r3, #64	; 0x40
 80088a6:	bf0c      	ite	eq
 80088a8:	2301      	moveq	r3, #1
 80088aa:	2300      	movne	r3, #0
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	f003 0308 	and.w	r3, r3, #8
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d103      	bne.n	80088c6 <HAL_UART_IRQHandler+0x17a>
 80088be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d04f      	beq.n	8008966 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fc94 	bl	80091f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d6:	2b40      	cmp	r3, #64	; 0x40
 80088d8:	d141      	bne.n	800895e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3314      	adds	r3, #20
 80088e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80088f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3314      	adds	r3, #20
 8008902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008906:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800890a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800891e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1d9      	bne.n	80088da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892a:	2b00      	cmp	r3, #0
 800892c:	d013      	beq.n	8008956 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	4a7d      	ldr	r2, [pc, #500]	; (8008b28 <HAL_UART_IRQHandler+0x3dc>)
 8008934:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	4618      	mov	r0, r3
 800893c:	f7fb fe64 	bl	8004608 <HAL_DMA_Abort_IT>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d016      	beq.n	8008974 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008954:	e00e      	b.n	8008974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9ae 	bl	8008cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895c:	e00a      	b.n	8008974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f9aa 	bl	8008cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008964:	e006      	b.n	8008974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f9a6 	bl	8008cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008972:	e170      	b.n	8008c56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008974:	bf00      	nop
    return;
 8008976:	e16e      	b.n	8008c56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897c:	2b01      	cmp	r3, #1
 800897e:	f040 814a 	bne.w	8008c16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008986:	f003 0310 	and.w	r3, r3, #16
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 8143 	beq.w	8008c16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008994:	f003 0310 	and.w	r3, r3, #16
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 813c 	beq.w	8008c16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800899e:	2300      	movs	r3, #0
 80089a0:	60bb      	str	r3, [r7, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089be:	2b40      	cmp	r3, #64	; 0x40
 80089c0:	f040 80b4 	bne.w	8008b2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 8140 	beq.w	8008c5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089e2:	429a      	cmp	r2, r3
 80089e4:	f080 8139 	bcs.w	8008c5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089fa:	f000 8088 	beq.w	8008b0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	330c      	adds	r3, #12
 8008a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a0c:	e853 3f00 	ldrex	r3, [r3]
 8008a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	330c      	adds	r3, #12
 8008a26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1d9      	bne.n	80089fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3314      	adds	r3, #20
 8008a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
 8008a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3314      	adds	r3, #20
 8008a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e1      	bne.n	8008a4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3314      	adds	r3, #20
 8008a8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3314      	adds	r3, #20
 8008aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008aac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ab2:	e841 2300 	strex	r3, r2, [r1]
 8008ab6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e3      	bne.n	8008a86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	330c      	adds	r3, #12
 8008ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad6:	e853 3f00 	ldrex	r3, [r3]
 8008ada:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ade:	f023 0310 	bic.w	r3, r3, #16
 8008ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	330c      	adds	r3, #12
 8008aec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008af0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008af2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e3      	bne.n	8008acc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fb fd0d 	bl	8004528 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f8d4 	bl	8008ccc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b24:	e099      	b.n	8008c5a <HAL_UART_IRQHandler+0x50e>
 8008b26:	bf00      	nop
 8008b28:	080092bb 	.word	0x080092bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 808b 	beq.w	8008c5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8086 	beq.w	8008c5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	330c      	adds	r3, #12
 8008b58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5c:	e853 3f00 	ldrex	r3, [r3]
 8008b60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	330c      	adds	r3, #12
 8008b72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b76:	647a      	str	r2, [r7, #68]	; 0x44
 8008b78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b7e:	e841 2300 	strex	r3, r2, [r1]
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1e3      	bne.n	8008b52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3314      	adds	r3, #20
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	623b      	str	r3, [r7, #32]
   return(result);
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	f023 0301 	bic.w	r3, r3, #1
 8008ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3314      	adds	r3, #20
 8008baa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bae:	633a      	str	r2, [r7, #48]	; 0x30
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e3      	bne.n	8008b8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	330c      	adds	r3, #12
 8008bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f023 0310 	bic.w	r3, r3, #16
 8008be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	330c      	adds	r3, #12
 8008bf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008bf4:	61fa      	str	r2, [r7, #28]
 8008bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf8:	69b9      	ldr	r1, [r7, #24]
 8008bfa:	69fa      	ldr	r2, [r7, #28]
 8008bfc:	e841 2300 	strex	r3, r2, [r1]
 8008c00:	617b      	str	r3, [r7, #20]
   return(result);
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e3      	bne.n	8008bd0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f85c 	bl	8008ccc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c14:	e023      	b.n	8008c5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d009      	beq.n	8008c36 <HAL_UART_IRQHandler+0x4ea>
 8008c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fb57 	bl	80092e2 <UART_Transmit_IT>
    return;
 8008c34:	e014      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00e      	beq.n	8008c60 <HAL_UART_IRQHandler+0x514>
 8008c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d008      	beq.n	8008c60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fb97 	bl	8009382 <UART_EndTransmit_IT>
    return;
 8008c54:	e004      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
    return;
 8008c56:	bf00      	nop
 8008c58:	e002      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
      return;
 8008c5a:	bf00      	nop
 8008c5c:	e000      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
      return;
 8008c5e:	bf00      	nop
  }
}
 8008c60:	37e8      	adds	r7, #232	; 0xe8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop

08008c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b090      	sub	sp, #64	; 0x40
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d137      	bne.n	8008d70 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d02:	2200      	movs	r2, #0
 8008d04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3314      	adds	r3, #20
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	623b      	str	r3, [r7, #32]
   return(result);
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3314      	adds	r3, #20
 8008d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d26:	633a      	str	r2, [r7, #48]	; 0x30
 8008d28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d2e:	e841 2300 	strex	r3, r2, [r1]
 8008d32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1e5      	bne.n	8008d06 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	330c      	adds	r3, #12
 8008d40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d50:	637b      	str	r3, [r7, #52]	; 0x34
 8008d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	330c      	adds	r3, #12
 8008d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5a:	61fa      	str	r2, [r7, #28]
 8008d5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	69b9      	ldr	r1, [r7, #24]
 8008d60:	69fa      	ldr	r2, [r7, #28]
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	617b      	str	r3, [r7, #20]
   return(result);
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e5      	bne.n	8008d3a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d6e:	e002      	b.n	8008d76 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008d70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008d72:	f7ff ff79 	bl	8008c68 <HAL_UART_TxCpltCallback>
}
 8008d76:	bf00      	nop
 8008d78:	3740      	adds	r7, #64	; 0x40
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7ff ff75 	bl	8008c7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b09c      	sub	sp, #112	; 0x70
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d172      	bne.n	8008e9c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008db8:	2200      	movs	r2, #0
 8008dba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	330c      	adds	r3, #12
 8008dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc6:	e853 3f00 	ldrex	r3, [r3]
 8008dca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ddc:	65ba      	str	r2, [r7, #88]	; 0x58
 8008dde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e5      	bne.n	8008dbc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3314      	adds	r3, #20
 8008df6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	e853 3f00 	ldrex	r3, [r3]
 8008dfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e02:	f023 0301 	bic.w	r3, r3, #1
 8008e06:	667b      	str	r3, [r7, #100]	; 0x64
 8008e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3314      	adds	r3, #20
 8008e0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e10:	647a      	str	r2, [r7, #68]	; 0x44
 8008e12:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e18:	e841 2300 	strex	r3, r2, [r1]
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e5      	bne.n	8008df0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3314      	adds	r3, #20
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	623b      	str	r3, [r7, #32]
   return(result);
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8008e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3314      	adds	r3, #20
 8008e42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e44:	633a      	str	r2, [r7, #48]	; 0x30
 8008e46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e5      	bne.n	8008e24 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d119      	bne.n	8008e9c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	330c      	adds	r3, #12
 8008e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	e853 3f00 	ldrex	r3, [r3]
 8008e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f023 0310 	bic.w	r3, r3, #16
 8008e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	330c      	adds	r3, #12
 8008e86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e88:	61fa      	str	r2, [r7, #28]
 8008e8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8c:	69b9      	ldr	r1, [r7, #24]
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	e841 2300 	strex	r3, r2, [r1]
 8008e94:	617b      	str	r3, [r7, #20]
   return(result);
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1e5      	bne.n	8008e68 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d106      	bne.n	8008eb2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008eac:	f7ff ff0e 	bl	8008ccc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008eb0:	e002      	b.n	8008eb8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008eb2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008eb4:	f7ff feec 	bl	8008c90 <HAL_UART_RxCpltCallback>
}
 8008eb8:	bf00      	nop
 8008eba:	3770      	adds	r7, #112	; 0x70
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ecc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d108      	bne.n	8008ee8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008eda:	085b      	lsrs	r3, r3, #1
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	4619      	mov	r1, r3
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f7ff fef3 	bl	8008ccc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ee6:	e002      	b.n	8008eee <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f7ff fedb 	bl	8008ca4 <HAL_UART_RxHalfCpltCallback>
}
 8008eee:	bf00      	nop
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f06:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f12:	2b80      	cmp	r3, #128	; 0x80
 8008f14:	bf0c      	ite	eq
 8008f16:	2301      	moveq	r3, #1
 8008f18:	2300      	movne	r3, #0
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b21      	cmp	r3, #33	; 0x21
 8008f28:	d108      	bne.n	8008f3c <UART_DMAError+0x46>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d005      	beq.n	8008f3c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2200      	movs	r2, #0
 8008f34:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008f36:	68b8      	ldr	r0, [r7, #8]
 8008f38:	f000 f934 	bl	80091a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f46:	2b40      	cmp	r3, #64	; 0x40
 8008f48:	bf0c      	ite	eq
 8008f4a:	2301      	moveq	r3, #1
 8008f4c:	2300      	movne	r3, #0
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b22      	cmp	r3, #34	; 0x22
 8008f5c:	d108      	bne.n	8008f70 <UART_DMAError+0x7a>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2200      	movs	r2, #0
 8008f68:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008f6a:	68b8      	ldr	r0, [r7, #8]
 8008f6c:	f000 f942 	bl	80091f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f74:	f043 0210 	orr.w	r2, r3, #16
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f7c:	68b8      	ldr	r0, [r7, #8]
 8008f7e:	f7ff fe9b 	bl	8008cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f82:	bf00      	nop
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b090      	sub	sp, #64	; 0x40
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	603b      	str	r3, [r7, #0]
 8008f96:	4613      	mov	r3, r2
 8008f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f9a:	e050      	b.n	800903e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fa2:	d04c      	beq.n	800903e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d007      	beq.n	8008fba <UART_WaitOnFlagUntilTimeout+0x30>
 8008faa:	f7fa fdd5 	bl	8003b58 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d241      	bcs.n	800903e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	330c      	adds	r3, #12
 8008fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	330c      	adds	r3, #12
 8008fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008fda:	637a      	str	r2, [r7, #52]	; 0x34
 8008fdc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e5      	bne.n	8008fba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3314      	adds	r3, #20
 8008ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f023 0301 	bic.w	r3, r3, #1
 8009004:	63bb      	str	r3, [r7, #56]	; 0x38
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3314      	adds	r3, #20
 800900c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800900e:	623a      	str	r2, [r7, #32]
 8009010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	69f9      	ldr	r1, [r7, #28]
 8009014:	6a3a      	ldr	r2, [r7, #32]
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	61bb      	str	r3, [r7, #24]
   return(result);
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e5      	bne.n	8008fee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2220      	movs	r2, #32
 8009026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2220      	movs	r2, #32
 800902e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e00f      	b.n	800905e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	4013      	ands	r3, r2
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	429a      	cmp	r2, r3
 800904c:	bf0c      	ite	eq
 800904e:	2301      	moveq	r3, #1
 8009050:	2300      	movne	r3, #0
 8009052:	b2db      	uxtb	r3, r3
 8009054:	461a      	mov	r2, r3
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	429a      	cmp	r2, r3
 800905a:	d09f      	beq.n	8008f9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3740      	adds	r7, #64	; 0x40
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
	...

08009068 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b098      	sub	sp, #96	; 0x60
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	4613      	mov	r3, r2
 8009074:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	88fa      	ldrh	r2, [r7, #6]
 8009080:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2222      	movs	r2, #34	; 0x22
 800908c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	4a40      	ldr	r2, [pc, #256]	; (8009198 <UART_Start_Receive_DMA+0x130>)
 8009096:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909c:	4a3f      	ldr	r2, [pc, #252]	; (800919c <UART_Start_Receive_DMA+0x134>)
 800909e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a4:	4a3e      	ldr	r2, [pc, #248]	; (80091a0 <UART_Start_Receive_DMA+0x138>)
 80090a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ac:	2200      	movs	r2, #0
 80090ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80090b0:	f107 0308 	add.w	r3, r7, #8
 80090b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3304      	adds	r3, #4
 80090c0:	4619      	mov	r1, r3
 80090c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	88fb      	ldrh	r3, [r7, #6]
 80090c8:	f7fb f9d6 	bl	8004478 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80090cc:	2300      	movs	r3, #0
 80090ce:	613b      	str	r3, [r7, #16]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	613b      	str	r3, [r7, #16]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	613b      	str	r3, [r7, #16]
 80090e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d019      	beq.n	8009126 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	330c      	adds	r3, #12
 80090f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009108:	65bb      	str	r3, [r7, #88]	; 0x58
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	330c      	adds	r3, #12
 8009110:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009112:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009114:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009118:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e5      	bne.n	80090f2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3314      	adds	r3, #20
 800912c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009130:	e853 3f00 	ldrex	r3, [r3]
 8009134:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	f043 0301 	orr.w	r3, r3, #1
 800913c:	657b      	str	r3, [r7, #84]	; 0x54
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3314      	adds	r3, #20
 8009144:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009146:	63ba      	str	r2, [r7, #56]	; 0x38
 8009148:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800914c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1e5      	bne.n	8009126 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3314      	adds	r3, #20
 8009160:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	e853 3f00 	ldrex	r3, [r3]
 8009168:	617b      	str	r3, [r7, #20]
   return(result);
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009170:	653b      	str	r3, [r7, #80]	; 0x50
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3314      	adds	r3, #20
 8009178:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800917a:	627a      	str	r2, [r7, #36]	; 0x24
 800917c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917e:	6a39      	ldr	r1, [r7, #32]
 8009180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009182:	e841 2300 	strex	r3, r2, [r1]
 8009186:	61fb      	str	r3, [r7, #28]
   return(result);
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1e5      	bne.n	800915a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3760      	adds	r7, #96	; 0x60
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	08008d9b 	.word	0x08008d9b
 800919c:	08008ec1 	.word	0x08008ec1
 80091a0:	08008ef7 	.word	0x08008ef7

080091a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b089      	sub	sp, #36	; 0x24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	330c      	adds	r3, #12
 80091b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	e853 3f00 	ldrex	r3, [r3]
 80091ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80091c2:	61fb      	str	r3, [r7, #28]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	330c      	adds	r3, #12
 80091ca:	69fa      	ldr	r2, [r7, #28]
 80091cc:	61ba      	str	r2, [r7, #24]
 80091ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d0:	6979      	ldr	r1, [r7, #20]
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	e841 2300 	strex	r3, r2, [r1]
 80091d8:	613b      	str	r3, [r7, #16]
   return(result);
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1e5      	bne.n	80091ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80091e8:	bf00      	nop
 80091ea:	3724      	adds	r7, #36	; 0x24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b095      	sub	sp, #84	; 0x54
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	330c      	adds	r3, #12
 8009202:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800920c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	330c      	adds	r3, #12
 800921a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800921c:	643a      	str	r2, [r7, #64]	; 0x40
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009222:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009224:	e841 2300 	strex	r3, r2, [r1]
 8009228:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800922a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e5      	bne.n	80091fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3314      	adds	r3, #20
 8009236:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	e853 3f00 	ldrex	r3, [r3]
 800923e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	f023 0301 	bic.w	r3, r3, #1
 8009246:	64bb      	str	r3, [r7, #72]	; 0x48
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3314      	adds	r3, #20
 800924e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009250:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e5      	bne.n	8009230 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	2b01      	cmp	r3, #1
 800926a:	d119      	bne.n	80092a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	330c      	adds	r3, #12
 8009272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	e853 3f00 	ldrex	r3, [r3]
 800927a:	60bb      	str	r3, [r7, #8]
   return(result);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f023 0310 	bic.w	r3, r3, #16
 8009282:	647b      	str	r3, [r7, #68]	; 0x44
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	330c      	adds	r3, #12
 800928a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800928c:	61ba      	str	r2, [r7, #24]
 800928e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	6979      	ldr	r1, [r7, #20]
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	613b      	str	r3, [r7, #16]
   return(result);
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e5      	bne.n	800926c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2220      	movs	r2, #32
 80092a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80092ae:	bf00      	nop
 80092b0:	3754      	adds	r7, #84	; 0x54
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff fcef 	bl	8008cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092da:	bf00      	nop
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b085      	sub	sp, #20
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b21      	cmp	r3, #33	; 0x21
 80092f4:	d13e      	bne.n	8009374 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092fe:	d114      	bne.n	800932a <UART_Transmit_IT+0x48>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d110      	bne.n	800932a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a1b      	ldr	r3, [r3, #32]
 800930c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800931c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	1c9a      	adds	r2, r3, #2
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	621a      	str	r2, [r3, #32]
 8009328:	e008      	b.n	800933c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	1c59      	adds	r1, r3, #1
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	6211      	str	r1, [r2, #32]
 8009334:	781a      	ldrb	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009340:	b29b      	uxth	r3, r3
 8009342:	3b01      	subs	r3, #1
 8009344:	b29b      	uxth	r3, r3
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	4619      	mov	r1, r3
 800934a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10f      	bne.n	8009370 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800935e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68da      	ldr	r2, [r3, #12]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800936e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	e000      	b.n	8009376 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009374:	2302      	movs	r3, #2
  }
}
 8009376:	4618      	mov	r0, r3
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68da      	ldr	r2, [r3, #12]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009398:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2220      	movs	r2, #32
 800939e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7ff fc60 	bl	8008c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b08c      	sub	sp, #48	; 0x30
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b22      	cmp	r3, #34	; 0x22
 80093c4:	f040 80ab 	bne.w	800951e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d0:	d117      	bne.n	8009402 <UART_Receive_IT+0x50>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d113      	bne.n	8009402 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093da:	2300      	movs	r3, #0
 80093dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fa:	1c9a      	adds	r2, r3, #2
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	629a      	str	r2, [r3, #40]	; 0x28
 8009400:	e026      	b.n	8009450 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009406:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009408:	2300      	movs	r3, #0
 800940a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009414:	d007      	beq.n	8009426 <UART_Receive_IT+0x74>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <UART_Receive_IT+0x82>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	b2da      	uxtb	r2, r3
 800942e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009430:	701a      	strb	r2, [r3, #0]
 8009432:	e008      	b.n	8009446 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009440:	b2da      	uxtb	r2, r3
 8009442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009444:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944a:	1c5a      	adds	r2, r3, #1
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009454:	b29b      	uxth	r3, r3
 8009456:	3b01      	subs	r3, #1
 8009458:	b29b      	uxth	r3, r3
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	4619      	mov	r1, r3
 800945e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009460:	2b00      	cmp	r3, #0
 8009462:	d15a      	bne.n	800951a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68da      	ldr	r2, [r3, #12]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 0220 	bic.w	r2, r2, #32
 8009472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009482:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695a      	ldr	r2, [r3, #20]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0201 	bic.w	r2, r2, #1
 8009492:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2220      	movs	r2, #32
 8009498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d135      	bne.n	8009510 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	330c      	adds	r3, #12
 80094b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	613b      	str	r3, [r7, #16]
   return(result);
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f023 0310 	bic.w	r3, r3, #16
 80094c0:	627b      	str	r3, [r7, #36]	; 0x24
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	330c      	adds	r3, #12
 80094c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ca:	623a      	str	r2, [r7, #32]
 80094cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	69f9      	ldr	r1, [r7, #28]
 80094d0:	6a3a      	ldr	r2, [r7, #32]
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e5      	bne.n	80094aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0310 	and.w	r3, r3, #16
 80094e8:	2b10      	cmp	r3, #16
 80094ea:	d10a      	bne.n	8009502 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	60fb      	str	r3, [r7, #12]
 8009500:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7ff fbdf 	bl	8008ccc <HAL_UARTEx_RxEventCallback>
 800950e:	e002      	b.n	8009516 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f7ff fbbd 	bl	8008c90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	e002      	b.n	8009520 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	e000      	b.n	8009520 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800951e:	2302      	movs	r3, #2
  }
}
 8009520:	4618      	mov	r0, r3
 8009522:	3730      	adds	r7, #48	; 0x30
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800952c:	b0c0      	sub	sp, #256	; 0x100
 800952e:	af00      	add	r7, sp, #0
 8009530:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009544:	68d9      	ldr	r1, [r3, #12]
 8009546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	ea40 0301 	orr.w	r3, r0, r1
 8009550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009556:	689a      	ldr	r2, [r3, #8]
 8009558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	431a      	orrs	r2, r3
 8009560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009564:	695b      	ldr	r3, [r3, #20]
 8009566:	431a      	orrs	r2, r3
 8009568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	4313      	orrs	r3, r2
 8009570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009580:	f021 010c 	bic.w	r1, r1, #12
 8009584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800958e:	430b      	orrs	r3, r1
 8009590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800959e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a2:	6999      	ldr	r1, [r3, #24]
 80095a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	ea40 0301 	orr.w	r3, r0, r1
 80095ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80095b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	4b8f      	ldr	r3, [pc, #572]	; (80097f4 <UART_SetConfig+0x2cc>)
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d005      	beq.n	80095c8 <UART_SetConfig+0xa0>
 80095bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	4b8d      	ldr	r3, [pc, #564]	; (80097f8 <UART_SetConfig+0x2d0>)
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d104      	bne.n	80095d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095c8:	f7fd feea 	bl	80073a0 <HAL_RCC_GetPCLK2Freq>
 80095cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095d0:	e003      	b.n	80095da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095d2:	f7fd fed1 	bl	8007378 <HAL_RCC_GetPCLK1Freq>
 80095d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095e4:	f040 810c 	bne.w	8009800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095ec:	2200      	movs	r2, #0
 80095ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095fa:	4622      	mov	r2, r4
 80095fc:	462b      	mov	r3, r5
 80095fe:	1891      	adds	r1, r2, r2
 8009600:	65b9      	str	r1, [r7, #88]	; 0x58
 8009602:	415b      	adcs	r3, r3
 8009604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800960a:	4621      	mov	r1, r4
 800960c:	eb12 0801 	adds.w	r8, r2, r1
 8009610:	4629      	mov	r1, r5
 8009612:	eb43 0901 	adc.w	r9, r3, r1
 8009616:	f04f 0200 	mov.w	r2, #0
 800961a:	f04f 0300 	mov.w	r3, #0
 800961e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800962a:	4690      	mov	r8, r2
 800962c:	4699      	mov	r9, r3
 800962e:	4623      	mov	r3, r4
 8009630:	eb18 0303 	adds.w	r3, r8, r3
 8009634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009638:	462b      	mov	r3, r5
 800963a:	eb49 0303 	adc.w	r3, r9, r3
 800963e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800964e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009656:	460b      	mov	r3, r1
 8009658:	18db      	adds	r3, r3, r3
 800965a:	653b      	str	r3, [r7, #80]	; 0x50
 800965c:	4613      	mov	r3, r2
 800965e:	eb42 0303 	adc.w	r3, r2, r3
 8009662:	657b      	str	r3, [r7, #84]	; 0x54
 8009664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800966c:	f7f7 fa8e 	bl	8000b8c <__aeabi_uldivmod>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4b61      	ldr	r3, [pc, #388]	; (80097fc <UART_SetConfig+0x2d4>)
 8009676:	fba3 2302 	umull	r2, r3, r3, r2
 800967a:	095b      	lsrs	r3, r3, #5
 800967c:	011c      	lsls	r4, r3, #4
 800967e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009682:	2200      	movs	r2, #0
 8009684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009688:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800968c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009690:	4642      	mov	r2, r8
 8009692:	464b      	mov	r3, r9
 8009694:	1891      	adds	r1, r2, r2
 8009696:	64b9      	str	r1, [r7, #72]	; 0x48
 8009698:	415b      	adcs	r3, r3
 800969a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800969c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80096a0:	4641      	mov	r1, r8
 80096a2:	eb12 0a01 	adds.w	sl, r2, r1
 80096a6:	4649      	mov	r1, r9
 80096a8:	eb43 0b01 	adc.w	fp, r3, r1
 80096ac:	f04f 0200 	mov.w	r2, #0
 80096b0:	f04f 0300 	mov.w	r3, #0
 80096b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096c0:	4692      	mov	sl, r2
 80096c2:	469b      	mov	fp, r3
 80096c4:	4643      	mov	r3, r8
 80096c6:	eb1a 0303 	adds.w	r3, sl, r3
 80096ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096ce:	464b      	mov	r3, r9
 80096d0:	eb4b 0303 	adc.w	r3, fp, r3
 80096d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096ec:	460b      	mov	r3, r1
 80096ee:	18db      	adds	r3, r3, r3
 80096f0:	643b      	str	r3, [r7, #64]	; 0x40
 80096f2:	4613      	mov	r3, r2
 80096f4:	eb42 0303 	adc.w	r3, r2, r3
 80096f8:	647b      	str	r3, [r7, #68]	; 0x44
 80096fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009702:	f7f7 fa43 	bl	8000b8c <__aeabi_uldivmod>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	4611      	mov	r1, r2
 800970c:	4b3b      	ldr	r3, [pc, #236]	; (80097fc <UART_SetConfig+0x2d4>)
 800970e:	fba3 2301 	umull	r2, r3, r3, r1
 8009712:	095b      	lsrs	r3, r3, #5
 8009714:	2264      	movs	r2, #100	; 0x64
 8009716:	fb02 f303 	mul.w	r3, r2, r3
 800971a:	1acb      	subs	r3, r1, r3
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009722:	4b36      	ldr	r3, [pc, #216]	; (80097fc <UART_SetConfig+0x2d4>)
 8009724:	fba3 2302 	umull	r2, r3, r3, r2
 8009728:	095b      	lsrs	r3, r3, #5
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009730:	441c      	add	r4, r3
 8009732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009736:	2200      	movs	r2, #0
 8009738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800973c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009744:	4642      	mov	r2, r8
 8009746:	464b      	mov	r3, r9
 8009748:	1891      	adds	r1, r2, r2
 800974a:	63b9      	str	r1, [r7, #56]	; 0x38
 800974c:	415b      	adcs	r3, r3
 800974e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009754:	4641      	mov	r1, r8
 8009756:	1851      	adds	r1, r2, r1
 8009758:	6339      	str	r1, [r7, #48]	; 0x30
 800975a:	4649      	mov	r1, r9
 800975c:	414b      	adcs	r3, r1
 800975e:	637b      	str	r3, [r7, #52]	; 0x34
 8009760:	f04f 0200 	mov.w	r2, #0
 8009764:	f04f 0300 	mov.w	r3, #0
 8009768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800976c:	4659      	mov	r1, fp
 800976e:	00cb      	lsls	r3, r1, #3
 8009770:	4651      	mov	r1, sl
 8009772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009776:	4651      	mov	r1, sl
 8009778:	00ca      	lsls	r2, r1, #3
 800977a:	4610      	mov	r0, r2
 800977c:	4619      	mov	r1, r3
 800977e:	4603      	mov	r3, r0
 8009780:	4642      	mov	r2, r8
 8009782:	189b      	adds	r3, r3, r2
 8009784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009788:	464b      	mov	r3, r9
 800978a:	460a      	mov	r2, r1
 800978c:	eb42 0303 	adc.w	r3, r2, r3
 8009790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80097a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80097a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80097a8:	460b      	mov	r3, r1
 80097aa:	18db      	adds	r3, r3, r3
 80097ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80097ae:	4613      	mov	r3, r2
 80097b0:	eb42 0303 	adc.w	r3, r2, r3
 80097b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80097be:	f7f7 f9e5 	bl	8000b8c <__aeabi_uldivmod>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	4b0d      	ldr	r3, [pc, #52]	; (80097fc <UART_SetConfig+0x2d4>)
 80097c8:	fba3 1302 	umull	r1, r3, r3, r2
 80097cc:	095b      	lsrs	r3, r3, #5
 80097ce:	2164      	movs	r1, #100	; 0x64
 80097d0:	fb01 f303 	mul.w	r3, r1, r3
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	3332      	adds	r3, #50	; 0x32
 80097da:	4a08      	ldr	r2, [pc, #32]	; (80097fc <UART_SetConfig+0x2d4>)
 80097dc:	fba2 2303 	umull	r2, r3, r2, r3
 80097e0:	095b      	lsrs	r3, r3, #5
 80097e2:	f003 0207 	and.w	r2, r3, #7
 80097e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4422      	add	r2, r4
 80097ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097f0:	e106      	b.n	8009a00 <UART_SetConfig+0x4d8>
 80097f2:	bf00      	nop
 80097f4:	40011000 	.word	0x40011000
 80097f8:	40011400 	.word	0x40011400
 80097fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009804:	2200      	movs	r2, #0
 8009806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800980a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800980e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009812:	4642      	mov	r2, r8
 8009814:	464b      	mov	r3, r9
 8009816:	1891      	adds	r1, r2, r2
 8009818:	6239      	str	r1, [r7, #32]
 800981a:	415b      	adcs	r3, r3
 800981c:	627b      	str	r3, [r7, #36]	; 0x24
 800981e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009822:	4641      	mov	r1, r8
 8009824:	1854      	adds	r4, r2, r1
 8009826:	4649      	mov	r1, r9
 8009828:	eb43 0501 	adc.w	r5, r3, r1
 800982c:	f04f 0200 	mov.w	r2, #0
 8009830:	f04f 0300 	mov.w	r3, #0
 8009834:	00eb      	lsls	r3, r5, #3
 8009836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800983a:	00e2      	lsls	r2, r4, #3
 800983c:	4614      	mov	r4, r2
 800983e:	461d      	mov	r5, r3
 8009840:	4643      	mov	r3, r8
 8009842:	18e3      	adds	r3, r4, r3
 8009844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009848:	464b      	mov	r3, r9
 800984a:	eb45 0303 	adc.w	r3, r5, r3
 800984e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800985e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009862:	f04f 0200 	mov.w	r2, #0
 8009866:	f04f 0300 	mov.w	r3, #0
 800986a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800986e:	4629      	mov	r1, r5
 8009870:	008b      	lsls	r3, r1, #2
 8009872:	4621      	mov	r1, r4
 8009874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009878:	4621      	mov	r1, r4
 800987a:	008a      	lsls	r2, r1, #2
 800987c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009880:	f7f7 f984 	bl	8000b8c <__aeabi_uldivmod>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4b60      	ldr	r3, [pc, #384]	; (8009a0c <UART_SetConfig+0x4e4>)
 800988a:	fba3 2302 	umull	r2, r3, r3, r2
 800988e:	095b      	lsrs	r3, r3, #5
 8009890:	011c      	lsls	r4, r3, #4
 8009892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009896:	2200      	movs	r2, #0
 8009898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800989c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80098a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80098a4:	4642      	mov	r2, r8
 80098a6:	464b      	mov	r3, r9
 80098a8:	1891      	adds	r1, r2, r2
 80098aa:	61b9      	str	r1, [r7, #24]
 80098ac:	415b      	adcs	r3, r3
 80098ae:	61fb      	str	r3, [r7, #28]
 80098b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098b4:	4641      	mov	r1, r8
 80098b6:	1851      	adds	r1, r2, r1
 80098b8:	6139      	str	r1, [r7, #16]
 80098ba:	4649      	mov	r1, r9
 80098bc:	414b      	adcs	r3, r1
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	f04f 0200 	mov.w	r2, #0
 80098c4:	f04f 0300 	mov.w	r3, #0
 80098c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098cc:	4659      	mov	r1, fp
 80098ce:	00cb      	lsls	r3, r1, #3
 80098d0:	4651      	mov	r1, sl
 80098d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098d6:	4651      	mov	r1, sl
 80098d8:	00ca      	lsls	r2, r1, #3
 80098da:	4610      	mov	r0, r2
 80098dc:	4619      	mov	r1, r3
 80098de:	4603      	mov	r3, r0
 80098e0:	4642      	mov	r2, r8
 80098e2:	189b      	adds	r3, r3, r2
 80098e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098e8:	464b      	mov	r3, r9
 80098ea:	460a      	mov	r2, r1
 80098ec:	eb42 0303 	adc.w	r3, r2, r3
 80098f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80098fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009900:	f04f 0200 	mov.w	r2, #0
 8009904:	f04f 0300 	mov.w	r3, #0
 8009908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800990c:	4649      	mov	r1, r9
 800990e:	008b      	lsls	r3, r1, #2
 8009910:	4641      	mov	r1, r8
 8009912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009916:	4641      	mov	r1, r8
 8009918:	008a      	lsls	r2, r1, #2
 800991a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800991e:	f7f7 f935 	bl	8000b8c <__aeabi_uldivmod>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	4611      	mov	r1, r2
 8009928:	4b38      	ldr	r3, [pc, #224]	; (8009a0c <UART_SetConfig+0x4e4>)
 800992a:	fba3 2301 	umull	r2, r3, r3, r1
 800992e:	095b      	lsrs	r3, r3, #5
 8009930:	2264      	movs	r2, #100	; 0x64
 8009932:	fb02 f303 	mul.w	r3, r2, r3
 8009936:	1acb      	subs	r3, r1, r3
 8009938:	011b      	lsls	r3, r3, #4
 800993a:	3332      	adds	r3, #50	; 0x32
 800993c:	4a33      	ldr	r2, [pc, #204]	; (8009a0c <UART_SetConfig+0x4e4>)
 800993e:	fba2 2303 	umull	r2, r3, r2, r3
 8009942:	095b      	lsrs	r3, r3, #5
 8009944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009948:	441c      	add	r4, r3
 800994a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800994e:	2200      	movs	r2, #0
 8009950:	673b      	str	r3, [r7, #112]	; 0x70
 8009952:	677a      	str	r2, [r7, #116]	; 0x74
 8009954:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009958:	4642      	mov	r2, r8
 800995a:	464b      	mov	r3, r9
 800995c:	1891      	adds	r1, r2, r2
 800995e:	60b9      	str	r1, [r7, #8]
 8009960:	415b      	adcs	r3, r3
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009968:	4641      	mov	r1, r8
 800996a:	1851      	adds	r1, r2, r1
 800996c:	6039      	str	r1, [r7, #0]
 800996e:	4649      	mov	r1, r9
 8009970:	414b      	adcs	r3, r1
 8009972:	607b      	str	r3, [r7, #4]
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	f04f 0300 	mov.w	r3, #0
 800997c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009980:	4659      	mov	r1, fp
 8009982:	00cb      	lsls	r3, r1, #3
 8009984:	4651      	mov	r1, sl
 8009986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800998a:	4651      	mov	r1, sl
 800998c:	00ca      	lsls	r2, r1, #3
 800998e:	4610      	mov	r0, r2
 8009990:	4619      	mov	r1, r3
 8009992:	4603      	mov	r3, r0
 8009994:	4642      	mov	r2, r8
 8009996:	189b      	adds	r3, r3, r2
 8009998:	66bb      	str	r3, [r7, #104]	; 0x68
 800999a:	464b      	mov	r3, r9
 800999c:	460a      	mov	r2, r1
 800999e:	eb42 0303 	adc.w	r3, r2, r3
 80099a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	663b      	str	r3, [r7, #96]	; 0x60
 80099ae:	667a      	str	r2, [r7, #100]	; 0x64
 80099b0:	f04f 0200 	mov.w	r2, #0
 80099b4:	f04f 0300 	mov.w	r3, #0
 80099b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80099bc:	4649      	mov	r1, r9
 80099be:	008b      	lsls	r3, r1, #2
 80099c0:	4641      	mov	r1, r8
 80099c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099c6:	4641      	mov	r1, r8
 80099c8:	008a      	lsls	r2, r1, #2
 80099ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80099ce:	f7f7 f8dd 	bl	8000b8c <__aeabi_uldivmod>
 80099d2:	4602      	mov	r2, r0
 80099d4:	460b      	mov	r3, r1
 80099d6:	4b0d      	ldr	r3, [pc, #52]	; (8009a0c <UART_SetConfig+0x4e4>)
 80099d8:	fba3 1302 	umull	r1, r3, r3, r2
 80099dc:	095b      	lsrs	r3, r3, #5
 80099de:	2164      	movs	r1, #100	; 0x64
 80099e0:	fb01 f303 	mul.w	r3, r1, r3
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	011b      	lsls	r3, r3, #4
 80099e8:	3332      	adds	r3, #50	; 0x32
 80099ea:	4a08      	ldr	r2, [pc, #32]	; (8009a0c <UART_SetConfig+0x4e4>)
 80099ec:	fba2 2303 	umull	r2, r3, r2, r3
 80099f0:	095b      	lsrs	r3, r3, #5
 80099f2:	f003 020f 	and.w	r2, r3, #15
 80099f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4422      	add	r2, r4
 80099fe:	609a      	str	r2, [r3, #8]
}
 8009a00:	bf00      	nop
 8009a02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009a06:	46bd      	mov	sp, r7
 8009a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a0c:	51eb851f 	.word	0x51eb851f

08009a10 <__NVIC_SetPriority>:
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	6039      	str	r1, [r7, #0]
 8009a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	db0a      	blt.n	8009a3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	490c      	ldr	r1, [pc, #48]	; (8009a5c <__NVIC_SetPriority+0x4c>)
 8009a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a2e:	0112      	lsls	r2, r2, #4
 8009a30:	b2d2      	uxtb	r2, r2
 8009a32:	440b      	add	r3, r1
 8009a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a38:	e00a      	b.n	8009a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	4908      	ldr	r1, [pc, #32]	; (8009a60 <__NVIC_SetPriority+0x50>)
 8009a40:	79fb      	ldrb	r3, [r7, #7]
 8009a42:	f003 030f 	and.w	r3, r3, #15
 8009a46:	3b04      	subs	r3, #4
 8009a48:	0112      	lsls	r2, r2, #4
 8009a4a:	b2d2      	uxtb	r2, r2
 8009a4c:	440b      	add	r3, r1
 8009a4e:	761a      	strb	r2, [r3, #24]
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	e000e100 	.word	0xe000e100
 8009a60:	e000ed00 	.word	0xe000ed00

08009a64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a68:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <SysTick_Handler+0x1c>)
 8009a6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a6c:	f001 fe38 	bl	800b6e0 <xTaskGetSchedulerState>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d001      	beq.n	8009a7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a76:	f002 fd1f 	bl	800c4b8 <xPortSysTickHandler>
  }
}
 8009a7a:	bf00      	nop
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	e000e010 	.word	0xe000e010

08009a84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a88:	2100      	movs	r1, #0
 8009a8a:	f06f 0004 	mvn.w	r0, #4
 8009a8e:	f7ff ffbf 	bl	8009a10 <__NVIC_SetPriority>
#endif
}
 8009a92:	bf00      	nop
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a9e:	f3ef 8305 	mrs	r3, IPSR
 8009aa2:	603b      	str	r3, [r7, #0]
  return(result);
 8009aa4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d003      	beq.n	8009ab2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009aaa:	f06f 0305 	mvn.w	r3, #5
 8009aae:	607b      	str	r3, [r7, #4]
 8009ab0:	e00c      	b.n	8009acc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009ab2:	4b0a      	ldr	r3, [pc, #40]	; (8009adc <osKernelInitialize+0x44>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d105      	bne.n	8009ac6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009aba:	4b08      	ldr	r3, [pc, #32]	; (8009adc <osKernelInitialize+0x44>)
 8009abc:	2201      	movs	r2, #1
 8009abe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	607b      	str	r3, [r7, #4]
 8009ac4:	e002      	b.n	8009acc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009aca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009acc:	687b      	ldr	r3, [r7, #4]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	20004d60 	.word	0x20004d60

08009ae0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ae6:	f3ef 8305 	mrs	r3, IPSR
 8009aea:	603b      	str	r3, [r7, #0]
  return(result);
 8009aec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <osKernelStart+0x1a>
    stat = osErrorISR;
 8009af2:	f06f 0305 	mvn.w	r3, #5
 8009af6:	607b      	str	r3, [r7, #4]
 8009af8:	e010      	b.n	8009b1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009afa:	4b0b      	ldr	r3, [pc, #44]	; (8009b28 <osKernelStart+0x48>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d109      	bne.n	8009b16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b02:	f7ff ffbf 	bl	8009a84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b06:	4b08      	ldr	r3, [pc, #32]	; (8009b28 <osKernelStart+0x48>)
 8009b08:	2202      	movs	r2, #2
 8009b0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b0c:	f001 f966 	bl	800addc <vTaskStartScheduler>
      stat = osOK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	607b      	str	r3, [r7, #4]
 8009b14:	e002      	b.n	8009b1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b1c:	687b      	ldr	r3, [r7, #4]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20004d60 	.word	0x20004d60

08009b2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b34:	f3ef 8305 	mrs	r3, IPSR
 8009b38:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d003      	beq.n	8009b48 <osDelay+0x1c>
    stat = osErrorISR;
 8009b40:	f06f 0305 	mvn.w	r3, #5
 8009b44:	60fb      	str	r3, [r7, #12]
 8009b46:	e007      	b.n	8009b58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d002      	beq.n	8009b58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f001 f90e 	bl	800ad74 <vTaskDelay>
    }
  }

  return (stat);
 8009b58:	68fb      	ldr	r3, [r7, #12]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
	...

08009b64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4a07      	ldr	r2, [pc, #28]	; (8009b90 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	4a06      	ldr	r2, [pc, #24]	; (8009b94 <vApplicationGetIdleTaskMemory+0x30>)
 8009b7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2280      	movs	r2, #128	; 0x80
 8009b80:	601a      	str	r2, [r3, #0]
}
 8009b82:	bf00      	nop
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20004d64 	.word	0x20004d64
 8009b94:	20004e0c 	.word	0x20004e0c

08009b98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4a07      	ldr	r2, [pc, #28]	; (8009bc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ba8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	4a06      	ldr	r2, [pc, #24]	; (8009bc8 <vApplicationGetTimerTaskMemory+0x30>)
 8009bae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bb6:	601a      	str	r2, [r3, #0]
}
 8009bb8:	bf00      	nop
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	2000500c 	.word	0x2000500c
 8009bc8:	200050b4 	.word	0x200050b4

08009bcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f103 0208 	add.w	r2, r3, #8
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009be4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f103 0208 	add.w	r2, r3, #8
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f103 0208 	add.w	r2, r3, #8
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c1a:	bf00      	nop
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c26:	b480      	push	{r7}
 8009c28:	b085      	sub	sp, #20
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	689a      	ldr	r2, [r3, #8]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	683a      	ldr	r2, [r7, #0]
 8009c4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	601a      	str	r2, [r3, #0]
}
 8009c62:	bf00      	nop
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b085      	sub	sp, #20
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c84:	d103      	bne.n	8009c8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	e00c      	b.n	8009ca8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3308      	adds	r3, #8
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	e002      	b.n	8009c9c <vListInsert+0x2e>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d2f6      	bcs.n	8009c96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	1c5a      	adds	r2, r3, #1
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	601a      	str	r2, [r3, #0]
}
 8009cd4:	bf00      	nop
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	6892      	ldr	r2, [r2, #8]
 8009cf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	6852      	ldr	r2, [r2, #4]
 8009d00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d103      	bne.n	8009d14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	689a      	ldr	r2, [r3, #8]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	1e5a      	subs	r2, r3, #1
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10a      	bne.n	8009d5e <xQueueGenericReset+0x2a>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	60bb      	str	r3, [r7, #8]
}
 8009d5a:	bf00      	nop
 8009d5c:	e7fe      	b.n	8009d5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d5e:	f002 fb19 	bl	800c394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6a:	68f9      	ldr	r1, [r7, #12]
 8009d6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d6e:	fb01 f303 	mul.w	r3, r1, r3
 8009d72:	441a      	add	r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	68f9      	ldr	r1, [r7, #12]
 8009d92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d94:	fb01 f303 	mul.w	r3, r1, r3
 8009d98:	441a      	add	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	22ff      	movs	r2, #255	; 0xff
 8009da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	22ff      	movs	r2, #255	; 0xff
 8009daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d114      	bne.n	8009dde <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d01a      	beq.n	8009df2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3310      	adds	r3, #16
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f001 faa5 	bl	800b310 <xTaskRemoveFromEventList>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d012      	beq.n	8009df2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009dcc:	4b0c      	ldr	r3, [pc, #48]	; (8009e00 <xQueueGenericReset+0xcc>)
 8009dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	e009      	b.n	8009df2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3310      	adds	r3, #16
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff fef2 	bl	8009bcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	3324      	adds	r3, #36	; 0x24
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7ff feed 	bl	8009bcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009df2:	f002 faff 	bl	800c3f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009df6:	2301      	movs	r3, #1
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	e000ed04 	.word	0xe000ed04

08009e04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08e      	sub	sp, #56	; 0x38
 8009e08:	af02      	add	r7, sp, #8
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10a      	bne.n	8009e2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e2a:	bf00      	nop
 8009e2c:	e7fe      	b.n	8009e2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10a      	bne.n	8009e4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e46:	bf00      	nop
 8009e48:	e7fe      	b.n	8009e48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <xQueueGenericCreateStatic+0x52>
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <xQueueGenericCreateStatic+0x56>
 8009e56:	2301      	movs	r3, #1
 8009e58:	e000      	b.n	8009e5c <xQueueGenericCreateStatic+0x58>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10a      	bne.n	8009e76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	623b      	str	r3, [r7, #32]
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d102      	bne.n	8009e82 <xQueueGenericCreateStatic+0x7e>
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d101      	bne.n	8009e86 <xQueueGenericCreateStatic+0x82>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e000      	b.n	8009e88 <xQueueGenericCreateStatic+0x84>
 8009e86:	2300      	movs	r3, #0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10a      	bne.n	8009ea2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	61fb      	str	r3, [r7, #28]
}
 8009e9e:	bf00      	nop
 8009ea0:	e7fe      	b.n	8009ea0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ea2:	2350      	movs	r3, #80	; 0x50
 8009ea4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2b50      	cmp	r3, #80	; 0x50
 8009eaa:	d00a      	beq.n	8009ec2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	61bb      	str	r3, [r7, #24]
}
 8009ebe:	bf00      	nop
 8009ec0:	e7fe      	b.n	8009ec0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ec2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00d      	beq.n	8009eea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ed6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f000 f83f 	bl	8009f68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3730      	adds	r7, #48	; 0x30
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b08a      	sub	sp, #40	; 0x28
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	4613      	mov	r3, r2
 8009f00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10a      	bne.n	8009f1e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	613b      	str	r3, [r7, #16]
}
 8009f1a:	bf00      	nop
 8009f1c:	e7fe      	b.n	8009f1c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	fb02 f303 	mul.w	r3, r2, r3
 8009f26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	3350      	adds	r3, #80	; 0x50
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f002 fb53 	bl	800c5d8 <pvPortMalloc>
 8009f32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d011      	beq.n	8009f5e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	3350      	adds	r3, #80	; 0x50
 8009f42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f4c:	79fa      	ldrb	r2, [r7, #7]
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	4613      	mov	r3, r2
 8009f54:	697a      	ldr	r2, [r7, #20]
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	68f8      	ldr	r0, [r7, #12]
 8009f5a:	f000 f805 	bl	8009f68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f5e:	69bb      	ldr	r3, [r7, #24]
	}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3720      	adds	r7, #32
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d103      	bne.n	8009f84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	69ba      	ldr	r2, [r7, #24]
 8009f80:	601a      	str	r2, [r3, #0]
 8009f82:	e002      	b.n	8009f8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f96:	2101      	movs	r1, #1
 8009f98:	69b8      	ldr	r0, [r7, #24]
 8009f9a:	f7ff fecb 	bl	8009d34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	78fa      	ldrb	r2, [r7, #3]
 8009fa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009fa6:	bf00      	nop
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08e      	sub	sp, #56	; 0x38
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <xQueueGenericSend+0x32>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d103      	bne.n	8009ff0 <xQueueGenericSend+0x40>
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <xQueueGenericSend+0x44>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e000      	b.n	8009ff6 <xQueueGenericSend+0x46>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10a      	bne.n	800a010 <xQueueGenericSend+0x60>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a00c:	bf00      	nop
 800a00e:	e7fe      	b.n	800a00e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d103      	bne.n	800a01e <xQueueGenericSend+0x6e>
 800a016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <xQueueGenericSend+0x72>
 800a01e:	2301      	movs	r3, #1
 800a020:	e000      	b.n	800a024 <xQueueGenericSend+0x74>
 800a022:	2300      	movs	r3, #0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <xQueueGenericSend+0x8e>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	623b      	str	r3, [r7, #32]
}
 800a03a:	bf00      	nop
 800a03c:	e7fe      	b.n	800a03c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a03e:	f001 fb4f 	bl	800b6e0 <xTaskGetSchedulerState>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d102      	bne.n	800a04e <xQueueGenericSend+0x9e>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <xQueueGenericSend+0xa2>
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <xQueueGenericSend+0xa4>
 800a052:	2300      	movs	r3, #0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <xQueueGenericSend+0xbe>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	61fb      	str	r3, [r7, #28]
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a06e:	f002 f991 	bl	800c394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d302      	bcc.n	800a084 <xQueueGenericSend+0xd4>
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b02      	cmp	r3, #2
 800a082:	d129      	bne.n	800a0d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a08a:	f000 fb4d 	bl	800a728 <prvCopyDataToQueue>
 800a08e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	2b00      	cmp	r3, #0
 800a096:	d010      	beq.n	800a0ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09a:	3324      	adds	r3, #36	; 0x24
 800a09c:	4618      	mov	r0, r3
 800a09e:	f001 f937 	bl	800b310 <xTaskRemoveFromEventList>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d013      	beq.n	800a0d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0a8:	4b3f      	ldr	r3, [pc, #252]	; (800a1a8 <xQueueGenericSend+0x1f8>)
 800a0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	e00a      	b.n	800a0d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d007      	beq.n	800a0d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0c0:	4b39      	ldr	r3, [pc, #228]	; (800a1a8 <xQueueGenericSend+0x1f8>)
 800a0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0d0:	f002 f990 	bl	800c3f4 <vPortExitCritical>
				return pdPASS;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e063      	b.n	800a1a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d103      	bne.n	800a0e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0de:	f002 f989 	bl	800c3f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	e05c      	b.n	800a1a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d106      	bne.n	800a0fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0ec:	f107 0314 	add.w	r3, r7, #20
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 f997 	bl	800b424 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0fa:	f002 f97b 	bl	800c3f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0fe:	f000 fedd 	bl	800aebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a102:	f002 f947 	bl	800c394 <vPortEnterCritical>
 800a106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a10c:	b25b      	sxtb	r3, r3
 800a10e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a112:	d103      	bne.n	800a11c <xQueueGenericSend+0x16c>
 800a114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a122:	b25b      	sxtb	r3, r3
 800a124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a128:	d103      	bne.n	800a132 <xQueueGenericSend+0x182>
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a132:	f002 f95f 	bl	800c3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a136:	1d3a      	adds	r2, r7, #4
 800a138:	f107 0314 	add.w	r3, r7, #20
 800a13c:	4611      	mov	r1, r2
 800a13e:	4618      	mov	r0, r3
 800a140:	f001 f986 	bl	800b450 <xTaskCheckForTimeOut>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d124      	bne.n	800a194 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a14a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a14c:	f000 fbe4 	bl	800a918 <prvIsQueueFull>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d018      	beq.n	800a188 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	3310      	adds	r3, #16
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f001 f886 	bl	800b270 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a166:	f000 fb6f 	bl	800a848 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a16a:	f000 feb5 	bl	800aed8 <xTaskResumeAll>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	f47f af7c 	bne.w	800a06e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a176:	4b0c      	ldr	r3, [pc, #48]	; (800a1a8 <xQueueGenericSend+0x1f8>)
 800a178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	e772      	b.n	800a06e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a18a:	f000 fb5d 	bl	800a848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a18e:	f000 fea3 	bl	800aed8 <xTaskResumeAll>
 800a192:	e76c      	b.n	800a06e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a196:	f000 fb57 	bl	800a848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a19a:	f000 fe9d 	bl	800aed8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a19e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3738      	adds	r7, #56	; 0x38
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	e000ed04 	.word	0xe000ed04

0800a1ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b090      	sub	sp, #64	; 0x40
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10a      	bne.n	800a1da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d103      	bne.n	800a1e8 <xQueueGenericSendFromISR+0x3c>
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <xQueueGenericSendFromISR+0x40>
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e000      	b.n	800a1ee <xQueueGenericSendFromISR+0x42>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10a      	bne.n	800a208 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a204:	bf00      	nop
 800a206:	e7fe      	b.n	800a206 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d103      	bne.n	800a216 <xQueueGenericSendFromISR+0x6a>
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a212:	2b01      	cmp	r3, #1
 800a214:	d101      	bne.n	800a21a <xQueueGenericSendFromISR+0x6e>
 800a216:	2301      	movs	r3, #1
 800a218:	e000      	b.n	800a21c <xQueueGenericSendFromISR+0x70>
 800a21a:	2300      	movs	r3, #0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	623b      	str	r3, [r7, #32]
}
 800a232:	bf00      	nop
 800a234:	e7fe      	b.n	800a234 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a236:	f002 f98f 	bl	800c558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a23a:	f3ef 8211 	mrs	r2, BASEPRI
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	61fa      	str	r2, [r7, #28]
 800a250:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a252:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a254:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25e:	429a      	cmp	r2, r3
 800a260:	d302      	bcc.n	800a268 <xQueueGenericSendFromISR+0xbc>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b02      	cmp	r3, #2
 800a266:	d12f      	bne.n	800a2c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a276:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	68b9      	ldr	r1, [r7, #8]
 800a27c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a27e:	f000 fa53 	bl	800a728 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a282:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a28a:	d112      	bne.n	800a2b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	2b00      	cmp	r3, #0
 800a292:	d016      	beq.n	800a2c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a296:	3324      	adds	r3, #36	; 0x24
 800a298:	4618      	mov	r0, r3
 800a29a:	f001 f839 	bl	800b310 <xTaskRemoveFromEventList>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00e      	beq.n	800a2c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00b      	beq.n	800a2c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	e007      	b.n	800a2c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	b25a      	sxtb	r2, r3
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a2c6:	e001      	b.n	800a2cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3740      	adds	r7, #64	; 0x40
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
	...

0800a2e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b08c      	sub	sp, #48	; 0x30
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10a      	bne.n	800a314 <xQueueReceive+0x30>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	623b      	str	r3, [r7, #32]
}
 800a310:	bf00      	nop
 800a312:	e7fe      	b.n	800a312 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d103      	bne.n	800a322 <xQueueReceive+0x3e>
 800a31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d101      	bne.n	800a326 <xQueueReceive+0x42>
 800a322:	2301      	movs	r3, #1
 800a324:	e000      	b.n	800a328 <xQueueReceive+0x44>
 800a326:	2300      	movs	r3, #0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10a      	bne.n	800a342 <xQueueReceive+0x5e>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	61fb      	str	r3, [r7, #28]
}
 800a33e:	bf00      	nop
 800a340:	e7fe      	b.n	800a340 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a342:	f001 f9cd 	bl	800b6e0 <xTaskGetSchedulerState>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d102      	bne.n	800a352 <xQueueReceive+0x6e>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <xQueueReceive+0x72>
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <xQueueReceive+0x74>
 800a356:	2300      	movs	r3, #0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10a      	bne.n	800a372 <xQueueReceive+0x8e>
	__asm volatile
 800a35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a360:	f383 8811 	msr	BASEPRI, r3
 800a364:	f3bf 8f6f 	isb	sy
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	61bb      	str	r3, [r7, #24]
}
 800a36e:	bf00      	nop
 800a370:	e7fe      	b.n	800a370 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a372:	f002 f80f 	bl	800c394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d01f      	beq.n	800a3c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a382:	68b9      	ldr	r1, [r7, #8]
 800a384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a386:	f000 fa39 	bl	800a7fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	1e5a      	subs	r2, r3, #1
 800a38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a390:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00f      	beq.n	800a3ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39c:	3310      	adds	r3, #16
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 ffb6 	bl	800b310 <xTaskRemoveFromEventList>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d007      	beq.n	800a3ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3aa:	4b3d      	ldr	r3, [pc, #244]	; (800a4a0 <xQueueReceive+0x1bc>)
 800a3ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3ba:	f002 f81b 	bl	800c3f4 <vPortExitCritical>
				return pdPASS;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e069      	b.n	800a496 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d103      	bne.n	800a3d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3c8:	f002 f814 	bl	800c3f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	e062      	b.n	800a496 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d106      	bne.n	800a3e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3d6:	f107 0310 	add.w	r3, r7, #16
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f001 f822 	bl	800b424 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3e4:	f002 f806 	bl	800c3f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3e8:	f000 fd68 	bl	800aebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3ec:	f001 ffd2 	bl	800c394 <vPortEnterCritical>
 800a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3f6:	b25b      	sxtb	r3, r3
 800a3f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3fc:	d103      	bne.n	800a406 <xQueueReceive+0x122>
 800a3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a400:	2200      	movs	r2, #0
 800a402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a40c:	b25b      	sxtb	r3, r3
 800a40e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a412:	d103      	bne.n	800a41c <xQueueReceive+0x138>
 800a414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a41c:	f001 ffea 	bl	800c3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a420:	1d3a      	adds	r2, r7, #4
 800a422:	f107 0310 	add.w	r3, r7, #16
 800a426:	4611      	mov	r1, r2
 800a428:	4618      	mov	r0, r3
 800a42a:	f001 f811 	bl	800b450 <xTaskCheckForTimeOut>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d123      	bne.n	800a47c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a436:	f000 fa59 	bl	800a8ec <prvIsQueueEmpty>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d017      	beq.n	800a470 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	3324      	adds	r3, #36	; 0x24
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	4611      	mov	r1, r2
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 ff11 	bl	800b270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a44e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a450:	f000 f9fa 	bl	800a848 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a454:	f000 fd40 	bl	800aed8 <xTaskResumeAll>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d189      	bne.n	800a372 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a45e:	4b10      	ldr	r3, [pc, #64]	; (800a4a0 <xQueueReceive+0x1bc>)
 800a460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	f3bf 8f6f 	isb	sy
 800a46e:	e780      	b.n	800a372 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a472:	f000 f9e9 	bl	800a848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a476:	f000 fd2f 	bl	800aed8 <xTaskResumeAll>
 800a47a:	e77a      	b.n	800a372 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a47c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a47e:	f000 f9e3 	bl	800a848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a482:	f000 fd29 	bl	800aed8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a488:	f000 fa30 	bl	800a8ec <prvIsQueueEmpty>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f43f af6f 	beq.w	800a372 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a494:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a496:	4618      	mov	r0, r3
 800a498:	3730      	adds	r7, #48	; 0x30
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	e000ed04 	.word	0xe000ed04

0800a4a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b08e      	sub	sp, #56	; 0x38
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d10a      	bne.n	800a4d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	623b      	str	r3, [r7, #32]
}
 800a4d2:	bf00      	nop
 800a4d4:	e7fe      	b.n	800a4d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	61fb      	str	r3, [r7, #28]
}
 800a4f0:	bf00      	nop
 800a4f2:	e7fe      	b.n	800a4f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4f4:	f001 f8f4 	bl	800b6e0 <xTaskGetSchedulerState>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d102      	bne.n	800a504 <xQueueSemaphoreTake+0x60>
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <xQueueSemaphoreTake+0x64>
 800a504:	2301      	movs	r3, #1
 800a506:	e000      	b.n	800a50a <xQueueSemaphoreTake+0x66>
 800a508:	2300      	movs	r3, #0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10a      	bne.n	800a524 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	61bb      	str	r3, [r7, #24]
}
 800a520:	bf00      	nop
 800a522:	e7fe      	b.n	800a522 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a524:	f001 ff36 	bl	800c394 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	2b00      	cmp	r3, #0
 800a532:	d024      	beq.n	800a57e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a536:	1e5a      	subs	r2, r3, #1
 800a538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d104      	bne.n	800a54e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a544:	f001 fa42 	bl	800b9cc <pvTaskIncrementMutexHeldCount>
 800a548:	4602      	mov	r2, r0
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00f      	beq.n	800a576 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a558:	3310      	adds	r3, #16
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 fed8 	bl	800b310 <xTaskRemoveFromEventList>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d007      	beq.n	800a576 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a566:	4b54      	ldr	r3, [pc, #336]	; (800a6b8 <xQueueSemaphoreTake+0x214>)
 800a568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a576:	f001 ff3d 	bl	800c3f4 <vPortExitCritical>
				return pdPASS;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e097      	b.n	800a6ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d111      	bne.n	800a5a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	617b      	str	r3, [r7, #20]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a5a0:	f001 ff28 	bl	800c3f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	e082      	b.n	800a6ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d106      	bne.n	800a5bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5ae:	f107 030c 	add.w	r3, r7, #12
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 ff36 	bl	800b424 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5bc:	f001 ff1a 	bl	800c3f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5c0:	f000 fc7c 	bl	800aebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5c4:	f001 fee6 	bl	800c394 <vPortEnterCritical>
 800a5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5ce:	b25b      	sxtb	r3, r3
 800a5d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5d4:	d103      	bne.n	800a5de <xQueueSemaphoreTake+0x13a>
 800a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5e4:	b25b      	sxtb	r3, r3
 800a5e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5ea:	d103      	bne.n	800a5f4 <xQueueSemaphoreTake+0x150>
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5f4:	f001 fefe 	bl	800c3f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5f8:	463a      	mov	r2, r7
 800a5fa:	f107 030c 	add.w	r3, r7, #12
 800a5fe:	4611      	mov	r1, r2
 800a600:	4618      	mov	r0, r3
 800a602:	f000 ff25 	bl	800b450 <xTaskCheckForTimeOut>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d132      	bne.n	800a672 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a60c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a60e:	f000 f96d 	bl	800a8ec <prvIsQueueEmpty>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d026      	beq.n	800a666 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d109      	bne.n	800a634 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a620:	f001 feb8 	bl	800c394 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	4618      	mov	r0, r3
 800a62a:	f001 f877 	bl	800b71c <xTaskPriorityInherit>
 800a62e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a630:	f001 fee0 	bl	800c3f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a636:	3324      	adds	r3, #36	; 0x24
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	4611      	mov	r1, r2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 fe17 	bl	800b270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a644:	f000 f900 	bl	800a848 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a648:	f000 fc46 	bl	800aed8 <xTaskResumeAll>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f47f af68 	bne.w	800a524 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a654:	4b18      	ldr	r3, [pc, #96]	; (800a6b8 <xQueueSemaphoreTake+0x214>)
 800a656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	e75e      	b.n	800a524 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a668:	f000 f8ee 	bl	800a848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a66c:	f000 fc34 	bl	800aed8 <xTaskResumeAll>
 800a670:	e758      	b.n	800a524 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a672:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a674:	f000 f8e8 	bl	800a848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a678:	f000 fc2e 	bl	800aed8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a67c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a67e:	f000 f935 	bl	800a8ec <prvIsQueueEmpty>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	f43f af4d 	beq.w	800a524 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00d      	beq.n	800a6ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a690:	f001 fe80 	bl	800c394 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a696:	f000 f82f 	bl	800a6f8 <prvGetDisinheritPriorityAfterTimeout>
 800a69a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f001 f910 	bl	800b8c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a6a8:	f001 fea4 	bl	800c3f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3738      	adds	r7, #56	; 0x38
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	e000ed04 	.word	0xe000ed04

0800a6bc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10a      	bne.n	800a6e0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	60bb      	str	r3, [r7, #8]
}
 800a6dc:	bf00      	nop
 800a6de:	e7fe      	b.n	800a6de <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a6e0:	f001 fe58 	bl	800c394 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a6ea:	f001 fe83 	bl	800c3f4 <vPortExitCritical>

	return uxReturn;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a704:	2b00      	cmp	r3, #0
 800a706:	d006      	beq.n	800a716 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	e001      	b.n	800a71a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a71a:	68fb      	ldr	r3, [r7, #12]
	}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a734:	2300      	movs	r3, #0
 800a736:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10d      	bne.n	800a762 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d14d      	bne.n	800a7ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	4618      	mov	r0, r3
 800a754:	f001 f84a 	bl	800b7ec <xTaskPriorityDisinherit>
 800a758:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	609a      	str	r2, [r3, #8]
 800a760:	e043      	b.n	800a7ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d119      	bne.n	800a79c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6858      	ldr	r0, [r3, #4]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a770:	461a      	mov	r2, r3
 800a772:	68b9      	ldr	r1, [r7, #8]
 800a774:	f00e f877 	bl	8018866 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a780:	441a      	add	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d32b      	bcc.n	800a7ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	605a      	str	r2, [r3, #4]
 800a79a:	e026      	b.n	800a7ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	68d8      	ldr	r0, [r3, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	68b9      	ldr	r1, [r7, #8]
 800a7a8:	f00e f85d 	bl	8018866 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	68da      	ldr	r2, [r3, #12]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b4:	425b      	negs	r3, r3
 800a7b6:	441a      	add	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	68da      	ldr	r2, [r3, #12]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d207      	bcs.n	800a7d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d0:	425b      	negs	r3, r3
 800a7d2:	441a      	add	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	d105      	bne.n	800a7ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d002      	beq.n	800a7ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	1c5a      	adds	r2, r3, #1
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a7f2:	697b      	ldr	r3, [r7, #20]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d018      	beq.n	800a840 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68da      	ldr	r2, [r3, #12]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a816:	441a      	add	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68da      	ldr	r2, [r3, #12]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	429a      	cmp	r2, r3
 800a826:	d303      	bcc.n	800a830 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68d9      	ldr	r1, [r3, #12]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a838:	461a      	mov	r2, r3
 800a83a:	6838      	ldr	r0, [r7, #0]
 800a83c:	f00e f813 	bl	8018866 <memcpy>
	}
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a850:	f001 fda0 	bl	800c394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a85a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a85c:	e011      	b.n	800a882 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a862:	2b00      	cmp	r3, #0
 800a864:	d012      	beq.n	800a88c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	3324      	adds	r3, #36	; 0x24
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 fd50 	bl	800b310 <xTaskRemoveFromEventList>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a876:	f000 fe4d 	bl	800b514 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
 800a87c:	3b01      	subs	r3, #1
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a886:	2b00      	cmp	r3, #0
 800a888:	dce9      	bgt.n	800a85e <prvUnlockQueue+0x16>
 800a88a:	e000      	b.n	800a88e <prvUnlockQueue+0x46>
					break;
 800a88c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	22ff      	movs	r2, #255	; 0xff
 800a892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a896:	f001 fdad 	bl	800c3f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a89a:	f001 fd7b 	bl	800c394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8a6:	e011      	b.n	800a8cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d012      	beq.n	800a8d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3310      	adds	r3, #16
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 fd2b 	bl	800b310 <xTaskRemoveFromEventList>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d001      	beq.n	800a8c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8c0:	f000 fe28 	bl	800b514 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8c4:	7bbb      	ldrb	r3, [r7, #14]
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	dce9      	bgt.n	800a8a8 <prvUnlockQueue+0x60>
 800a8d4:	e000      	b.n	800a8d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	22ff      	movs	r2, #255	; 0xff
 800a8dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a8e0:	f001 fd88 	bl	800c3f4 <vPortExitCritical>
}
 800a8e4:	bf00      	nop
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8f4:	f001 fd4e 	bl	800c394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d102      	bne.n	800a906 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a900:	2301      	movs	r3, #1
 800a902:	60fb      	str	r3, [r7, #12]
 800a904:	e001      	b.n	800a90a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a906:	2300      	movs	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a90a:	f001 fd73 	bl	800c3f4 <vPortExitCritical>

	return xReturn;
 800a90e:	68fb      	ldr	r3, [r7, #12]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a920:	f001 fd38 	bl	800c394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d102      	bne.n	800a936 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a930:	2301      	movs	r3, #1
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	e001      	b.n	800a93a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a936:	2300      	movs	r3, #0
 800a938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a93a:	f001 fd5b 	bl	800c3f4 <vPortExitCritical>

	return xReturn;
 800a93e:	68fb      	ldr	r3, [r7, #12]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a952:	2300      	movs	r3, #0
 800a954:	60fb      	str	r3, [r7, #12]
 800a956:	e014      	b.n	800a982 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a958:	4a0f      	ldr	r2, [pc, #60]	; (800a998 <vQueueAddToRegistry+0x50>)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10b      	bne.n	800a97c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a964:	490c      	ldr	r1, [pc, #48]	; (800a998 <vQueueAddToRegistry+0x50>)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a96e:	4a0a      	ldr	r2, [pc, #40]	; (800a998 <vQueueAddToRegistry+0x50>)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	00db      	lsls	r3, r3, #3
 800a974:	4413      	add	r3, r2
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a97a:	e006      	b.n	800a98a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3301      	adds	r3, #1
 800a980:	60fb      	str	r3, [r7, #12]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2b07      	cmp	r3, #7
 800a986:	d9e7      	bls.n	800a958 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a988:	bf00      	nop
 800a98a:	bf00      	nop
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	200054b4 	.word	0x200054b4

0800a99c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9ac:	f001 fcf2 	bl	800c394 <vPortEnterCritical>
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9b6:	b25b      	sxtb	r3, r3
 800a9b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9bc:	d103      	bne.n	800a9c6 <vQueueWaitForMessageRestricted+0x2a>
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9d2:	d103      	bne.n	800a9dc <vQueueWaitForMessageRestricted+0x40>
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9dc:	f001 fd0a 	bl	800c3f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d106      	bne.n	800a9f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	3324      	adds	r3, #36	; 0x24
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	68b9      	ldr	r1, [r7, #8]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 fc61 	bl	800b2b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a9f6:	6978      	ldr	r0, [r7, #20]
 800a9f8:	f7ff ff26 	bl	800a848 <prvUnlockQueue>
	}
 800a9fc:	bf00      	nop
 800a9fe:	3718      	adds	r7, #24
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08e      	sub	sp, #56	; 0x38
 800aa08:	af04      	add	r7, sp, #16
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
 800aa10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10a      	bne.n	800aa2e <xTaskCreateStatic+0x2a>
	__asm volatile
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	623b      	str	r3, [r7, #32]
}
 800aa2a:	bf00      	nop
 800aa2c:	e7fe      	b.n	800aa2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10a      	bne.n	800aa4a <xTaskCreateStatic+0x46>
	__asm volatile
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	61fb      	str	r3, [r7, #28]
}
 800aa46:	bf00      	nop
 800aa48:	e7fe      	b.n	800aa48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa4a:	23a8      	movs	r3, #168	; 0xa8
 800aa4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	2ba8      	cmp	r3, #168	; 0xa8
 800aa52:	d00a      	beq.n	800aa6a <xTaskCreateStatic+0x66>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	61bb      	str	r3, [r7, #24]
}
 800aa66:	bf00      	nop
 800aa68:	e7fe      	b.n	800aa68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d01e      	beq.n	800aab0 <xTaskCreateStatic+0xac>
 800aa72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d01b      	beq.n	800aab0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa84:	2202      	movs	r2, #2
 800aa86:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	9303      	str	r3, [sp, #12]
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa90:	9302      	str	r3, [sp, #8]
 800aa92:	f107 0314 	add.w	r3, r7, #20
 800aa96:	9301      	str	r3, [sp, #4]
 800aa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	68b9      	ldr	r1, [r7, #8]
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f000 f850 	bl	800ab48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aaa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaaa:	f000 f8f3 	bl	800ac94 <prvAddNewTaskToReadyList>
 800aaae:	e001      	b.n	800aab4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aab0:	2300      	movs	r3, #0
 800aab2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aab4:	697b      	ldr	r3, [r7, #20]
	}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3728      	adds	r7, #40	; 0x28
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b08c      	sub	sp, #48	; 0x30
 800aac2:	af04      	add	r7, sp, #16
 800aac4:	60f8      	str	r0, [r7, #12]
 800aac6:	60b9      	str	r1, [r7, #8]
 800aac8:	603b      	str	r3, [r7, #0]
 800aaca:	4613      	mov	r3, r2
 800aacc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aace:	88fb      	ldrh	r3, [r7, #6]
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f001 fd80 	bl	800c5d8 <pvPortMalloc>
 800aad8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00e      	beq.n	800aafe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aae0:	20a8      	movs	r0, #168	; 0xa8
 800aae2:	f001 fd79 	bl	800c5d8 <pvPortMalloc>
 800aae6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	631a      	str	r2, [r3, #48]	; 0x30
 800aaf4:	e005      	b.n	800ab02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aaf6:	6978      	ldr	r0, [r7, #20]
 800aaf8:	f001 fe3a 	bl	800c770 <vPortFree>
 800aafc:	e001      	b.n	800ab02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aafe:	2300      	movs	r3, #0
 800ab00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d017      	beq.n	800ab38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab10:	88fa      	ldrh	r2, [r7, #6]
 800ab12:	2300      	movs	r3, #0
 800ab14:	9303      	str	r3, [sp, #12]
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	9302      	str	r3, [sp, #8]
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	9301      	str	r3, [sp, #4]
 800ab1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	68b9      	ldr	r1, [r7, #8]
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f000 f80e 	bl	800ab48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab2c:	69f8      	ldr	r0, [r7, #28]
 800ab2e:	f000 f8b1 	bl	800ac94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab32:	2301      	movs	r3, #1
 800ab34:	61bb      	str	r3, [r7, #24]
 800ab36:	e002      	b.n	800ab3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab3e:	69bb      	ldr	r3, [r7, #24]
	}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3720      	adds	r7, #32
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	461a      	mov	r2, r3
 800ab60:	21a5      	movs	r1, #165	; 0xa5
 800ab62:	f00d fd61 	bl	8018628 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab70:	3b01      	subs	r3, #1
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	f023 0307 	bic.w	r3, r3, #7
 800ab7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00a      	beq.n	800aba0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab8e:	f383 8811 	msr	BASEPRI, r3
 800ab92:	f3bf 8f6f 	isb	sy
 800ab96:	f3bf 8f4f 	dsb	sy
 800ab9a:	617b      	str	r3, [r7, #20]
}
 800ab9c:	bf00      	nop
 800ab9e:	e7fe      	b.n	800ab9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d01f      	beq.n	800abe6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aba6:	2300      	movs	r3, #0
 800aba8:	61fb      	str	r3, [r7, #28]
 800abaa:	e012      	b.n	800abd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	4413      	add	r3, r2
 800abb2:	7819      	ldrb	r1, [r3, #0]
 800abb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	4413      	add	r3, r2
 800abba:	3334      	adds	r3, #52	; 0x34
 800abbc:	460a      	mov	r2, r1
 800abbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	4413      	add	r3, r2
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d006      	beq.n	800abda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	3301      	adds	r3, #1
 800abd0:	61fb      	str	r3, [r7, #28]
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	2b0f      	cmp	r3, #15
 800abd6:	d9e9      	bls.n	800abac <prvInitialiseNewTask+0x64>
 800abd8:	e000      	b.n	800abdc <prvInitialiseNewTask+0x94>
			{
				break;
 800abda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abe4:	e003      	b.n	800abee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf0:	2b37      	cmp	r3, #55	; 0x37
 800abf2:	d901      	bls.n	800abf8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800abf4:	2337      	movs	r3, #55	; 0x37
 800abf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac06:	2200      	movs	r2, #0
 800ac08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fe fffc 	bl	8009c0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	3318      	adds	r3, #24
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fe fff7 	bl	8009c0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	3354      	adds	r3, #84	; 0x54
 800ac48:	224c      	movs	r2, #76	; 0x4c
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f00d fceb 	bl	8018628 <memset>
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	4a0c      	ldr	r2, [pc, #48]	; (800ac88 <prvInitialiseNewTask+0x140>)
 800ac56:	659a      	str	r2, [r3, #88]	; 0x58
 800ac58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5a:	4a0c      	ldr	r2, [pc, #48]	; (800ac8c <prvInitialiseNewTask+0x144>)
 800ac5c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	4a0b      	ldr	r2, [pc, #44]	; (800ac90 <prvInitialiseNewTask+0x148>)
 800ac62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	68f9      	ldr	r1, [r7, #12]
 800ac68:	69b8      	ldr	r0, [r7, #24]
 800ac6a:	f001 fa65 	bl	800c138 <pxPortInitialiseStack>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d002      	beq.n	800ac80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac80:	bf00      	nop
 800ac82:	3720      	adds	r7, #32
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	20009d40 	.word	0x20009d40
 800ac8c:	20009da8 	.word	0x20009da8
 800ac90:	20009e10 	.word	0x20009e10

0800ac94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac9c:	f001 fb7a 	bl	800c394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aca0:	4b2d      	ldr	r3, [pc, #180]	; (800ad58 <prvAddNewTaskToReadyList+0xc4>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	3301      	adds	r3, #1
 800aca6:	4a2c      	ldr	r2, [pc, #176]	; (800ad58 <prvAddNewTaskToReadyList+0xc4>)
 800aca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800acaa:	4b2c      	ldr	r3, [pc, #176]	; (800ad5c <prvAddNewTaskToReadyList+0xc8>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d109      	bne.n	800acc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acb2:	4a2a      	ldr	r2, [pc, #168]	; (800ad5c <prvAddNewTaskToReadyList+0xc8>)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800acb8:	4b27      	ldr	r3, [pc, #156]	; (800ad58 <prvAddNewTaskToReadyList+0xc4>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d110      	bne.n	800ace2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800acc0:	f000 fc4c 	bl	800b55c <prvInitialiseTaskLists>
 800acc4:	e00d      	b.n	800ace2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800acc6:	4b26      	ldr	r3, [pc, #152]	; (800ad60 <prvAddNewTaskToReadyList+0xcc>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d109      	bne.n	800ace2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800acce:	4b23      	ldr	r3, [pc, #140]	; (800ad5c <prvAddNewTaskToReadyList+0xc8>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd8:	429a      	cmp	r2, r3
 800acda:	d802      	bhi.n	800ace2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acdc:	4a1f      	ldr	r2, [pc, #124]	; (800ad5c <prvAddNewTaskToReadyList+0xc8>)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ace2:	4b20      	ldr	r3, [pc, #128]	; (800ad64 <prvAddNewTaskToReadyList+0xd0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3301      	adds	r3, #1
 800ace8:	4a1e      	ldr	r2, [pc, #120]	; (800ad64 <prvAddNewTaskToReadyList+0xd0>)
 800acea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800acec:	4b1d      	ldr	r3, [pc, #116]	; (800ad64 <prvAddNewTaskToReadyList+0xd0>)
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf8:	4b1b      	ldr	r3, [pc, #108]	; (800ad68 <prvAddNewTaskToReadyList+0xd4>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d903      	bls.n	800ad08 <prvAddNewTaskToReadyList+0x74>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad04:	4a18      	ldr	r2, [pc, #96]	; (800ad68 <prvAddNewTaskToReadyList+0xd4>)
 800ad06:	6013      	str	r3, [r2, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4a15      	ldr	r2, [pc, #84]	; (800ad6c <prvAddNewTaskToReadyList+0xd8>)
 800ad16:	441a      	add	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	4610      	mov	r0, r2
 800ad20:	f7fe ff81 	bl	8009c26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad24:	f001 fb66 	bl	800c3f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad28:	4b0d      	ldr	r3, [pc, #52]	; (800ad60 <prvAddNewTaskToReadyList+0xcc>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00e      	beq.n	800ad4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad30:	4b0a      	ldr	r3, [pc, #40]	; (800ad5c <prvAddNewTaskToReadyList+0xc8>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d207      	bcs.n	800ad4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad3e:	4b0c      	ldr	r3, [pc, #48]	; (800ad70 <prvAddNewTaskToReadyList+0xdc>)
 800ad40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad4e:	bf00      	nop
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	200059c8 	.word	0x200059c8
 800ad5c:	200054f4 	.word	0x200054f4
 800ad60:	200059d4 	.word	0x200059d4
 800ad64:	200059e4 	.word	0x200059e4
 800ad68:	200059d0 	.word	0x200059d0
 800ad6c:	200054f8 	.word	0x200054f8
 800ad70:	e000ed04 	.word	0xe000ed04

0800ad74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d017      	beq.n	800adb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad86:	4b13      	ldr	r3, [pc, #76]	; (800add4 <vTaskDelay+0x60>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00a      	beq.n	800ada4 <vTaskDelay+0x30>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	60bb      	str	r3, [r7, #8]
}
 800ada0:	bf00      	nop
 800ada2:	e7fe      	b.n	800ada2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ada4:	f000 f88a 	bl	800aebc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ada8:	2100      	movs	r1, #0
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fe22 	bl	800b9f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800adb0:	f000 f892 	bl	800aed8 <xTaskResumeAll>
 800adb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d107      	bne.n	800adcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800adbc:	4b06      	ldr	r3, [pc, #24]	; (800add8 <vTaskDelay+0x64>)
 800adbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800adcc:	bf00      	nop
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	200059f0 	.word	0x200059f0
 800add8:	e000ed04 	.word	0xe000ed04

0800addc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08a      	sub	sp, #40	; 0x28
 800ade0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ade2:	2300      	movs	r3, #0
 800ade4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800adea:	463a      	mov	r2, r7
 800adec:	1d39      	adds	r1, r7, #4
 800adee:	f107 0308 	add.w	r3, r7, #8
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe feb6 	bl	8009b64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	9202      	str	r2, [sp, #8]
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	2300      	movs	r3, #0
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	2300      	movs	r3, #0
 800ae08:	460a      	mov	r2, r1
 800ae0a:	4924      	ldr	r1, [pc, #144]	; (800ae9c <vTaskStartScheduler+0xc0>)
 800ae0c:	4824      	ldr	r0, [pc, #144]	; (800aea0 <vTaskStartScheduler+0xc4>)
 800ae0e:	f7ff fdf9 	bl	800aa04 <xTaskCreateStatic>
 800ae12:	4603      	mov	r3, r0
 800ae14:	4a23      	ldr	r2, [pc, #140]	; (800aea4 <vTaskStartScheduler+0xc8>)
 800ae16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae18:	4b22      	ldr	r3, [pc, #136]	; (800aea4 <vTaskStartScheduler+0xc8>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d002      	beq.n	800ae26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae20:	2301      	movs	r3, #1
 800ae22:	617b      	str	r3, [r7, #20]
 800ae24:	e001      	b.n	800ae2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d102      	bne.n	800ae36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae30:	f000 fe34 	bl	800ba9c <xTimerCreateTimerTask>
 800ae34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d11b      	bne.n	800ae74 <vTaskStartScheduler+0x98>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	613b      	str	r3, [r7, #16]
}
 800ae4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae50:	4b15      	ldr	r3, [pc, #84]	; (800aea8 <vTaskStartScheduler+0xcc>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3354      	adds	r3, #84	; 0x54
 800ae56:	4a15      	ldr	r2, [pc, #84]	; (800aeac <vTaskStartScheduler+0xd0>)
 800ae58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae5a:	4b15      	ldr	r3, [pc, #84]	; (800aeb0 <vTaskStartScheduler+0xd4>)
 800ae5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae62:	4b14      	ldr	r3, [pc, #80]	; (800aeb4 <vTaskStartScheduler+0xd8>)
 800ae64:	2201      	movs	r2, #1
 800ae66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae68:	4b13      	ldr	r3, [pc, #76]	; (800aeb8 <vTaskStartScheduler+0xdc>)
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae6e:	f001 f9ef 	bl	800c250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae72:	e00e      	b.n	800ae92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae7a:	d10a      	bne.n	800ae92 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	60fb      	str	r3, [r7, #12]
}
 800ae8e:	bf00      	nop
 800ae90:	e7fe      	b.n	800ae90 <vTaskStartScheduler+0xb4>
}
 800ae92:	bf00      	nop
 800ae94:	3718      	adds	r7, #24
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	0801986c 	.word	0x0801986c
 800aea0:	0800b52d 	.word	0x0800b52d
 800aea4:	200059ec 	.word	0x200059ec
 800aea8:	200054f4 	.word	0x200054f4
 800aeac:	200000cc 	.word	0x200000cc
 800aeb0:	200059e8 	.word	0x200059e8
 800aeb4:	200059d4 	.word	0x200059d4
 800aeb8:	200059cc 	.word	0x200059cc

0800aebc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aebc:	b480      	push	{r7}
 800aebe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aec0:	4b04      	ldr	r3, [pc, #16]	; (800aed4 <vTaskSuspendAll+0x18>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3301      	adds	r3, #1
 800aec6:	4a03      	ldr	r2, [pc, #12]	; (800aed4 <vTaskSuspendAll+0x18>)
 800aec8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aeca:	bf00      	nop
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr
 800aed4:	200059f0 	.word	0x200059f0

0800aed8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aee2:	2300      	movs	r3, #0
 800aee4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aee6:	4b42      	ldr	r3, [pc, #264]	; (800aff0 <xTaskResumeAll+0x118>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10a      	bne.n	800af04 <xTaskResumeAll+0x2c>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	603b      	str	r3, [r7, #0]
}
 800af00:	bf00      	nop
 800af02:	e7fe      	b.n	800af02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af04:	f001 fa46 	bl	800c394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af08:	4b39      	ldr	r3, [pc, #228]	; (800aff0 <xTaskResumeAll+0x118>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	4a38      	ldr	r2, [pc, #224]	; (800aff0 <xTaskResumeAll+0x118>)
 800af10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af12:	4b37      	ldr	r3, [pc, #220]	; (800aff0 <xTaskResumeAll+0x118>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d162      	bne.n	800afe0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af1a:	4b36      	ldr	r3, [pc, #216]	; (800aff4 <xTaskResumeAll+0x11c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d05e      	beq.n	800afe0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af22:	e02f      	b.n	800af84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af24:	4b34      	ldr	r3, [pc, #208]	; (800aff8 <xTaskResumeAll+0x120>)
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	3318      	adds	r3, #24
 800af30:	4618      	mov	r0, r3
 800af32:	f7fe fed5 	bl	8009ce0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3304      	adds	r3, #4
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe fed0 	bl	8009ce0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af44:	4b2d      	ldr	r3, [pc, #180]	; (800affc <xTaskResumeAll+0x124>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d903      	bls.n	800af54 <xTaskResumeAll+0x7c>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	4a2a      	ldr	r2, [pc, #168]	; (800affc <xTaskResumeAll+0x124>)
 800af52:	6013      	str	r3, [r2, #0]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af58:	4613      	mov	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	4413      	add	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4a27      	ldr	r2, [pc, #156]	; (800b000 <xTaskResumeAll+0x128>)
 800af62:	441a      	add	r2, r3
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3304      	adds	r3, #4
 800af68:	4619      	mov	r1, r3
 800af6a:	4610      	mov	r0, r2
 800af6c:	f7fe fe5b 	bl	8009c26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af74:	4b23      	ldr	r3, [pc, #140]	; (800b004 <xTaskResumeAll+0x12c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d302      	bcc.n	800af84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af7e:	4b22      	ldr	r3, [pc, #136]	; (800b008 <xTaskResumeAll+0x130>)
 800af80:	2201      	movs	r2, #1
 800af82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af84:	4b1c      	ldr	r3, [pc, #112]	; (800aff8 <xTaskResumeAll+0x120>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1cb      	bne.n	800af24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af92:	f000 fb85 	bl	800b6a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af96:	4b1d      	ldr	r3, [pc, #116]	; (800b00c <xTaskResumeAll+0x134>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d010      	beq.n	800afc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800afa2:	f000 f847 	bl	800b034 <xTaskIncrementTick>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800afac:	4b16      	ldr	r3, [pc, #88]	; (800b008 <xTaskResumeAll+0x130>)
 800afae:	2201      	movs	r2, #1
 800afb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3b01      	subs	r3, #1
 800afb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1f1      	bne.n	800afa2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800afbe:	4b13      	ldr	r3, [pc, #76]	; (800b00c <xTaskResumeAll+0x134>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800afc4:	4b10      	ldr	r3, [pc, #64]	; (800b008 <xTaskResumeAll+0x130>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d009      	beq.n	800afe0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800afcc:	2301      	movs	r3, #1
 800afce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800afd0:	4b0f      	ldr	r3, [pc, #60]	; (800b010 <xTaskResumeAll+0x138>)
 800afd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afd6:	601a      	str	r2, [r3, #0]
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afe0:	f001 fa08 	bl	800c3f4 <vPortExitCritical>

	return xAlreadyYielded;
 800afe4:	68bb      	ldr	r3, [r7, #8]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	200059f0 	.word	0x200059f0
 800aff4:	200059c8 	.word	0x200059c8
 800aff8:	20005988 	.word	0x20005988
 800affc:	200059d0 	.word	0x200059d0
 800b000:	200054f8 	.word	0x200054f8
 800b004:	200054f4 	.word	0x200054f4
 800b008:	200059dc 	.word	0x200059dc
 800b00c:	200059d8 	.word	0x200059d8
 800b010:	e000ed04 	.word	0xe000ed04

0800b014 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b01a:	4b05      	ldr	r3, [pc, #20]	; (800b030 <xTaskGetTickCount+0x1c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b020:	687b      	ldr	r3, [r7, #4]
}
 800b022:	4618      	mov	r0, r3
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	200059cc 	.word	0x200059cc

0800b034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b03a:	2300      	movs	r3, #0
 800b03c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b03e:	4b4f      	ldr	r3, [pc, #316]	; (800b17c <xTaskIncrementTick+0x148>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	f040 808f 	bne.w	800b166 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b048:	4b4d      	ldr	r3, [pc, #308]	; (800b180 <xTaskIncrementTick+0x14c>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3301      	adds	r3, #1
 800b04e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b050:	4a4b      	ldr	r2, [pc, #300]	; (800b180 <xTaskIncrementTick+0x14c>)
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d120      	bne.n	800b09e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b05c:	4b49      	ldr	r3, [pc, #292]	; (800b184 <xTaskIncrementTick+0x150>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00a      	beq.n	800b07c <xTaskIncrementTick+0x48>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	603b      	str	r3, [r7, #0]
}
 800b078:	bf00      	nop
 800b07a:	e7fe      	b.n	800b07a <xTaskIncrementTick+0x46>
 800b07c:	4b41      	ldr	r3, [pc, #260]	; (800b184 <xTaskIncrementTick+0x150>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	60fb      	str	r3, [r7, #12]
 800b082:	4b41      	ldr	r3, [pc, #260]	; (800b188 <xTaskIncrementTick+0x154>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a3f      	ldr	r2, [pc, #252]	; (800b184 <xTaskIncrementTick+0x150>)
 800b088:	6013      	str	r3, [r2, #0]
 800b08a:	4a3f      	ldr	r2, [pc, #252]	; (800b188 <xTaskIncrementTick+0x154>)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6013      	str	r3, [r2, #0]
 800b090:	4b3e      	ldr	r3, [pc, #248]	; (800b18c <xTaskIncrementTick+0x158>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3301      	adds	r3, #1
 800b096:	4a3d      	ldr	r2, [pc, #244]	; (800b18c <xTaskIncrementTick+0x158>)
 800b098:	6013      	str	r3, [r2, #0]
 800b09a:	f000 fb01 	bl	800b6a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b09e:	4b3c      	ldr	r3, [pc, #240]	; (800b190 <xTaskIncrementTick+0x15c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d349      	bcc.n	800b13c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0a8:	4b36      	ldr	r3, [pc, #216]	; (800b184 <xTaskIncrementTick+0x150>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d104      	bne.n	800b0bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0b2:	4b37      	ldr	r3, [pc, #220]	; (800b190 <xTaskIncrementTick+0x15c>)
 800b0b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0b8:	601a      	str	r2, [r3, #0]
					break;
 800b0ba:	e03f      	b.n	800b13c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0bc:	4b31      	ldr	r3, [pc, #196]	; (800b184 <xTaskIncrementTick+0x150>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d203      	bcs.n	800b0dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0d4:	4a2e      	ldr	r2, [pc, #184]	; (800b190 <xTaskIncrementTick+0x15c>)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b0da:	e02f      	b.n	800b13c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	3304      	adds	r3, #4
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7fe fdfd 	bl	8009ce0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d004      	beq.n	800b0f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	3318      	adds	r3, #24
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fe fdf4 	bl	8009ce0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fc:	4b25      	ldr	r3, [pc, #148]	; (800b194 <xTaskIncrementTick+0x160>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d903      	bls.n	800b10c <xTaskIncrementTick+0xd8>
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b108:	4a22      	ldr	r2, [pc, #136]	; (800b194 <xTaskIncrementTick+0x160>)
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b110:	4613      	mov	r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4413      	add	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4a1f      	ldr	r2, [pc, #124]	; (800b198 <xTaskIncrementTick+0x164>)
 800b11a:	441a      	add	r2, r3
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	3304      	adds	r3, #4
 800b120:	4619      	mov	r1, r3
 800b122:	4610      	mov	r0, r2
 800b124:	f7fe fd7f 	bl	8009c26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b12c:	4b1b      	ldr	r3, [pc, #108]	; (800b19c <xTaskIncrementTick+0x168>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b132:	429a      	cmp	r2, r3
 800b134:	d3b8      	bcc.n	800b0a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b136:	2301      	movs	r3, #1
 800b138:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b13a:	e7b5      	b.n	800b0a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b13c:	4b17      	ldr	r3, [pc, #92]	; (800b19c <xTaskIncrementTick+0x168>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b142:	4915      	ldr	r1, [pc, #84]	; (800b198 <xTaskIncrementTick+0x164>)
 800b144:	4613      	mov	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d901      	bls.n	800b158 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b154:	2301      	movs	r3, #1
 800b156:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b158:	4b11      	ldr	r3, [pc, #68]	; (800b1a0 <xTaskIncrementTick+0x16c>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d007      	beq.n	800b170 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b160:	2301      	movs	r3, #1
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	e004      	b.n	800b170 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b166:	4b0f      	ldr	r3, [pc, #60]	; (800b1a4 <xTaskIncrementTick+0x170>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	3301      	adds	r3, #1
 800b16c:	4a0d      	ldr	r2, [pc, #52]	; (800b1a4 <xTaskIncrementTick+0x170>)
 800b16e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b170:	697b      	ldr	r3, [r7, #20]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3718      	adds	r7, #24
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	200059f0 	.word	0x200059f0
 800b180:	200059cc 	.word	0x200059cc
 800b184:	20005980 	.word	0x20005980
 800b188:	20005984 	.word	0x20005984
 800b18c:	200059e0 	.word	0x200059e0
 800b190:	200059e8 	.word	0x200059e8
 800b194:	200059d0 	.word	0x200059d0
 800b198:	200054f8 	.word	0x200054f8
 800b19c:	200054f4 	.word	0x200054f4
 800b1a0:	200059dc 	.word	0x200059dc
 800b1a4:	200059d8 	.word	0x200059d8

0800b1a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1ae:	4b2a      	ldr	r3, [pc, #168]	; (800b258 <vTaskSwitchContext+0xb0>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b1b6:	4b29      	ldr	r3, [pc, #164]	; (800b25c <vTaskSwitchContext+0xb4>)
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1bc:	e046      	b.n	800b24c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b1be:	4b27      	ldr	r3, [pc, #156]	; (800b25c <vTaskSwitchContext+0xb4>)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c4:	4b26      	ldr	r3, [pc, #152]	; (800b260 <vTaskSwitchContext+0xb8>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	60fb      	str	r3, [r7, #12]
 800b1ca:	e010      	b.n	800b1ee <vTaskSwitchContext+0x46>
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10a      	bne.n	800b1e8 <vTaskSwitchContext+0x40>
	__asm volatile
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	607b      	str	r3, [r7, #4]
}
 800b1e4:	bf00      	nop
 800b1e6:	e7fe      	b.n	800b1e6 <vTaskSwitchContext+0x3e>
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	60fb      	str	r3, [r7, #12]
 800b1ee:	491d      	ldr	r1, [pc, #116]	; (800b264 <vTaskSwitchContext+0xbc>)
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4413      	add	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	440b      	add	r3, r1
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d0e4      	beq.n	800b1cc <vTaskSwitchContext+0x24>
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	4613      	mov	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4a15      	ldr	r2, [pc, #84]	; (800b264 <vTaskSwitchContext+0xbc>)
 800b20e:	4413      	add	r3, r2
 800b210:	60bb      	str	r3, [r7, #8]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	685a      	ldr	r2, [r3, #4]
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	605a      	str	r2, [r3, #4]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	685a      	ldr	r2, [r3, #4]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	3308      	adds	r3, #8
 800b224:	429a      	cmp	r2, r3
 800b226:	d104      	bne.n	800b232 <vTaskSwitchContext+0x8a>
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	685a      	ldr	r2, [r3, #4]
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	605a      	str	r2, [r3, #4]
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	4a0b      	ldr	r2, [pc, #44]	; (800b268 <vTaskSwitchContext+0xc0>)
 800b23a:	6013      	str	r3, [r2, #0]
 800b23c:	4a08      	ldr	r2, [pc, #32]	; (800b260 <vTaskSwitchContext+0xb8>)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b242:	4b09      	ldr	r3, [pc, #36]	; (800b268 <vTaskSwitchContext+0xc0>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3354      	adds	r3, #84	; 0x54
 800b248:	4a08      	ldr	r2, [pc, #32]	; (800b26c <vTaskSwitchContext+0xc4>)
 800b24a:	6013      	str	r3, [r2, #0]
}
 800b24c:	bf00      	nop
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr
 800b258:	200059f0 	.word	0x200059f0
 800b25c:	200059dc 	.word	0x200059dc
 800b260:	200059d0 	.word	0x200059d0
 800b264:	200054f8 	.word	0x200054f8
 800b268:	200054f4 	.word	0x200054f4
 800b26c:	200000cc 	.word	0x200000cc

0800b270 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10a      	bne.n	800b296 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b284:	f383 8811 	msr	BASEPRI, r3
 800b288:	f3bf 8f6f 	isb	sy
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	60fb      	str	r3, [r7, #12]
}
 800b292:	bf00      	nop
 800b294:	e7fe      	b.n	800b294 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b296:	4b07      	ldr	r3, [pc, #28]	; (800b2b4 <vTaskPlaceOnEventList+0x44>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3318      	adds	r3, #24
 800b29c:	4619      	mov	r1, r3
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7fe fce5 	bl	8009c6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b2a4:	2101      	movs	r1, #1
 800b2a6:	6838      	ldr	r0, [r7, #0]
 800b2a8:	f000 fba4 	bl	800b9f4 <prvAddCurrentTaskToDelayedList>
}
 800b2ac:	bf00      	nop
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	200054f4 	.word	0x200054f4

0800b2b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10a      	bne.n	800b2e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	617b      	str	r3, [r7, #20]
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2e0:	4b0a      	ldr	r3, [pc, #40]	; (800b30c <vTaskPlaceOnEventListRestricted+0x54>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3318      	adds	r3, #24
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7fe fc9c 	bl	8009c26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b2f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2fa:	6879      	ldr	r1, [r7, #4]
 800b2fc:	68b8      	ldr	r0, [r7, #8]
 800b2fe:	f000 fb79 	bl	800b9f4 <prvAddCurrentTaskToDelayedList>
	}
 800b302:	bf00      	nop
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	200054f4 	.word	0x200054f4

0800b310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10a      	bne.n	800b33c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	60fb      	str	r3, [r7, #12]
}
 800b338:	bf00      	nop
 800b33a:	e7fe      	b.n	800b33a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	3318      	adds	r3, #24
 800b340:	4618      	mov	r0, r3
 800b342:	f7fe fccd 	bl	8009ce0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b346:	4b1e      	ldr	r3, [pc, #120]	; (800b3c0 <xTaskRemoveFromEventList+0xb0>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d11d      	bne.n	800b38a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	3304      	adds	r3, #4
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe fcc4 	bl	8009ce0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b35c:	4b19      	ldr	r3, [pc, #100]	; (800b3c4 <xTaskRemoveFromEventList+0xb4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d903      	bls.n	800b36c <xTaskRemoveFromEventList+0x5c>
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b368:	4a16      	ldr	r2, [pc, #88]	; (800b3c4 <xTaskRemoveFromEventList+0xb4>)
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b370:	4613      	mov	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4a13      	ldr	r2, [pc, #76]	; (800b3c8 <xTaskRemoveFromEventList+0xb8>)
 800b37a:	441a      	add	r2, r3
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	3304      	adds	r3, #4
 800b380:	4619      	mov	r1, r3
 800b382:	4610      	mov	r0, r2
 800b384:	f7fe fc4f 	bl	8009c26 <vListInsertEnd>
 800b388:	e005      	b.n	800b396 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	3318      	adds	r3, #24
 800b38e:	4619      	mov	r1, r3
 800b390:	480e      	ldr	r0, [pc, #56]	; (800b3cc <xTaskRemoveFromEventList+0xbc>)
 800b392:	f7fe fc48 	bl	8009c26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39a:	4b0d      	ldr	r3, [pc, #52]	; (800b3d0 <xTaskRemoveFromEventList+0xc0>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d905      	bls.n	800b3b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3a8:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <xTaskRemoveFromEventList+0xc4>)
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	e001      	b.n	800b3b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b3b4:	697b      	ldr	r3, [r7, #20]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	200059f0 	.word	0x200059f0
 800b3c4:	200059d0 	.word	0x200059d0
 800b3c8:	200054f8 	.word	0x200054f8
 800b3cc:	20005988 	.word	0x20005988
 800b3d0:	200054f4 	.word	0x200054f4
 800b3d4:	200059dc 	.word	0x200059dc

0800b3d8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10a      	bne.n	800b3fc <vTaskSetTimeOutState+0x24>
	__asm volatile
 800b3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	60fb      	str	r3, [r7, #12]
}
 800b3f8:	bf00      	nop
 800b3fa:	e7fe      	b.n	800b3fa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b3fc:	f000 ffca 	bl	800c394 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b400:	4b06      	ldr	r3, [pc, #24]	; (800b41c <vTaskSetTimeOutState+0x44>)
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b408:	4b05      	ldr	r3, [pc, #20]	; (800b420 <vTaskSetTimeOutState+0x48>)
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b410:	f000 fff0 	bl	800c3f4 <vPortExitCritical>
}
 800b414:	bf00      	nop
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	200059e0 	.word	0x200059e0
 800b420:	200059cc 	.word	0x200059cc

0800b424 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b42c:	4b06      	ldr	r3, [pc, #24]	; (800b448 <vTaskInternalSetTimeOutState+0x24>)
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b434:	4b05      	ldr	r3, [pc, #20]	; (800b44c <vTaskInternalSetTimeOutState+0x28>)
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	605a      	str	r2, [r3, #4]
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	200059e0 	.word	0x200059e0
 800b44c:	200059cc 	.word	0x200059cc

0800b450 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10a      	bne.n	800b476 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	613b      	str	r3, [r7, #16]
}
 800b472:	bf00      	nop
 800b474:	e7fe      	b.n	800b474 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10a      	bne.n	800b492 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	60fb      	str	r3, [r7, #12]
}
 800b48e:	bf00      	nop
 800b490:	e7fe      	b.n	800b490 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b492:	f000 ff7f 	bl	800c394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b496:	4b1d      	ldr	r3, [pc, #116]	; (800b50c <xTaskCheckForTimeOut+0xbc>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	69ba      	ldr	r2, [r7, #24]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4ae:	d102      	bne.n	800b4b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	61fb      	str	r3, [r7, #28]
 800b4b4:	e023      	b.n	800b4fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	4b15      	ldr	r3, [pc, #84]	; (800b510 <xTaskCheckForTimeOut+0xc0>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d007      	beq.n	800b4d2 <xTaskCheckForTimeOut+0x82>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	69ba      	ldr	r2, [r7, #24]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d302      	bcc.n	800b4d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	61fb      	str	r3, [r7, #28]
 800b4d0:	e015      	b.n	800b4fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	697a      	ldr	r2, [r7, #20]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d20b      	bcs.n	800b4f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	1ad2      	subs	r2, r2, r3
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff ff9b 	bl	800b424 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	61fb      	str	r3, [r7, #28]
 800b4f2:	e004      	b.n	800b4fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4fe:	f000 ff79 	bl	800c3f4 <vPortExitCritical>

	return xReturn;
 800b502:	69fb      	ldr	r3, [r7, #28]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3720      	adds	r7, #32
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	200059cc 	.word	0x200059cc
 800b510:	200059e0 	.word	0x200059e0

0800b514 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b514:	b480      	push	{r7}
 800b516:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b518:	4b03      	ldr	r3, [pc, #12]	; (800b528 <vTaskMissedYield+0x14>)
 800b51a:	2201      	movs	r2, #1
 800b51c:	601a      	str	r2, [r3, #0]
}
 800b51e:	bf00      	nop
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr
 800b528:	200059dc 	.word	0x200059dc

0800b52c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b534:	f000 f852 	bl	800b5dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b538:	4b06      	ldr	r3, [pc, #24]	; (800b554 <prvIdleTask+0x28>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d9f9      	bls.n	800b534 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b540:	4b05      	ldr	r3, [pc, #20]	; (800b558 <prvIdleTask+0x2c>)
 800b542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b550:	e7f0      	b.n	800b534 <prvIdleTask+0x8>
 800b552:	bf00      	nop
 800b554:	200054f8 	.word	0x200054f8
 800b558:	e000ed04 	.word	0xe000ed04

0800b55c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b562:	2300      	movs	r3, #0
 800b564:	607b      	str	r3, [r7, #4]
 800b566:	e00c      	b.n	800b582 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	4613      	mov	r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4413      	add	r3, r2
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4a12      	ldr	r2, [pc, #72]	; (800b5bc <prvInitialiseTaskLists+0x60>)
 800b574:	4413      	add	r3, r2
 800b576:	4618      	mov	r0, r3
 800b578:	f7fe fb28 	bl	8009bcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3301      	adds	r3, #1
 800b580:	607b      	str	r3, [r7, #4]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2b37      	cmp	r3, #55	; 0x37
 800b586:	d9ef      	bls.n	800b568 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b588:	480d      	ldr	r0, [pc, #52]	; (800b5c0 <prvInitialiseTaskLists+0x64>)
 800b58a:	f7fe fb1f 	bl	8009bcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b58e:	480d      	ldr	r0, [pc, #52]	; (800b5c4 <prvInitialiseTaskLists+0x68>)
 800b590:	f7fe fb1c 	bl	8009bcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b594:	480c      	ldr	r0, [pc, #48]	; (800b5c8 <prvInitialiseTaskLists+0x6c>)
 800b596:	f7fe fb19 	bl	8009bcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b59a:	480c      	ldr	r0, [pc, #48]	; (800b5cc <prvInitialiseTaskLists+0x70>)
 800b59c:	f7fe fb16 	bl	8009bcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b5a0:	480b      	ldr	r0, [pc, #44]	; (800b5d0 <prvInitialiseTaskLists+0x74>)
 800b5a2:	f7fe fb13 	bl	8009bcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b5a6:	4b0b      	ldr	r3, [pc, #44]	; (800b5d4 <prvInitialiseTaskLists+0x78>)
 800b5a8:	4a05      	ldr	r2, [pc, #20]	; (800b5c0 <prvInitialiseTaskLists+0x64>)
 800b5aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5ac:	4b0a      	ldr	r3, [pc, #40]	; (800b5d8 <prvInitialiseTaskLists+0x7c>)
 800b5ae:	4a05      	ldr	r2, [pc, #20]	; (800b5c4 <prvInitialiseTaskLists+0x68>)
 800b5b0:	601a      	str	r2, [r3, #0]
}
 800b5b2:	bf00      	nop
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	200054f8 	.word	0x200054f8
 800b5c0:	20005958 	.word	0x20005958
 800b5c4:	2000596c 	.word	0x2000596c
 800b5c8:	20005988 	.word	0x20005988
 800b5cc:	2000599c 	.word	0x2000599c
 800b5d0:	200059b4 	.word	0x200059b4
 800b5d4:	20005980 	.word	0x20005980
 800b5d8:	20005984 	.word	0x20005984

0800b5dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5e2:	e019      	b.n	800b618 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5e4:	f000 fed6 	bl	800c394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e8:	4b10      	ldr	r3, [pc, #64]	; (800b62c <prvCheckTasksWaitingTermination+0x50>)
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3304      	adds	r3, #4
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7fe fb73 	bl	8009ce0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5fa:	4b0d      	ldr	r3, [pc, #52]	; (800b630 <prvCheckTasksWaitingTermination+0x54>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	3b01      	subs	r3, #1
 800b600:	4a0b      	ldr	r2, [pc, #44]	; (800b630 <prvCheckTasksWaitingTermination+0x54>)
 800b602:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b604:	4b0b      	ldr	r3, [pc, #44]	; (800b634 <prvCheckTasksWaitingTermination+0x58>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	3b01      	subs	r3, #1
 800b60a:	4a0a      	ldr	r2, [pc, #40]	; (800b634 <prvCheckTasksWaitingTermination+0x58>)
 800b60c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b60e:	f000 fef1 	bl	800c3f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f810 	bl	800b638 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b618:	4b06      	ldr	r3, [pc, #24]	; (800b634 <prvCheckTasksWaitingTermination+0x58>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1e1      	bne.n	800b5e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b620:	bf00      	nop
 800b622:	bf00      	nop
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	2000599c 	.word	0x2000599c
 800b630:	200059c8 	.word	0x200059c8
 800b634:	200059b0 	.word	0x200059b0

0800b638 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	3354      	adds	r3, #84	; 0x54
 800b644:	4618      	mov	r0, r3
 800b646:	f00d f83d 	bl	80186c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b650:	2b00      	cmp	r3, #0
 800b652:	d108      	bne.n	800b666 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b658:	4618      	mov	r0, r3
 800b65a:	f001 f889 	bl	800c770 <vPortFree>
				vPortFree( pxTCB );
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f001 f886 	bl	800c770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b664:	e018      	b.n	800b698 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d103      	bne.n	800b678 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f001 f87d 	bl	800c770 <vPortFree>
	}
 800b676:	e00f      	b.n	800b698 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d00a      	beq.n	800b698 <prvDeleteTCB+0x60>
	__asm volatile
 800b682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	60fb      	str	r3, [r7, #12]
}
 800b694:	bf00      	nop
 800b696:	e7fe      	b.n	800b696 <prvDeleteTCB+0x5e>
	}
 800b698:	bf00      	nop
 800b69a:	3710      	adds	r7, #16
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6a6:	4b0c      	ldr	r3, [pc, #48]	; (800b6d8 <prvResetNextTaskUnblockTime+0x38>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d104      	bne.n	800b6ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6b0:	4b0a      	ldr	r3, [pc, #40]	; (800b6dc <prvResetNextTaskUnblockTime+0x3c>)
 800b6b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b6b8:	e008      	b.n	800b6cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ba:	4b07      	ldr	r3, [pc, #28]	; (800b6d8 <prvResetNextTaskUnblockTime+0x38>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	68db      	ldr	r3, [r3, #12]
 800b6c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	4a04      	ldr	r2, [pc, #16]	; (800b6dc <prvResetNextTaskUnblockTime+0x3c>)
 800b6ca:	6013      	str	r3, [r2, #0]
}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr
 800b6d8:	20005980 	.word	0x20005980
 800b6dc:	200059e8 	.word	0x200059e8

0800b6e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6e6:	4b0b      	ldr	r3, [pc, #44]	; (800b714 <xTaskGetSchedulerState+0x34>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d102      	bne.n	800b6f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	607b      	str	r3, [r7, #4]
 800b6f2:	e008      	b.n	800b706 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6f4:	4b08      	ldr	r3, [pc, #32]	; (800b718 <xTaskGetSchedulerState+0x38>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d102      	bne.n	800b702 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6fc:	2302      	movs	r3, #2
 800b6fe:	607b      	str	r3, [r7, #4]
 800b700:	e001      	b.n	800b706 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b702:	2300      	movs	r3, #0
 800b704:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b706:	687b      	ldr	r3, [r7, #4]
	}
 800b708:	4618      	mov	r0, r3
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	200059d4 	.word	0x200059d4
 800b718:	200059f0 	.word	0x200059f0

0800b71c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b728:	2300      	movs	r3, #0
 800b72a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d051      	beq.n	800b7d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b736:	4b2a      	ldr	r3, [pc, #168]	; (800b7e0 <xTaskPriorityInherit+0xc4>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d241      	bcs.n	800b7c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	699b      	ldr	r3, [r3, #24]
 800b744:	2b00      	cmp	r3, #0
 800b746:	db06      	blt.n	800b756 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b748:	4b25      	ldr	r3, [pc, #148]	; (800b7e0 <xTaskPriorityInherit+0xc4>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	6959      	ldr	r1, [r3, #20]
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b75e:	4613      	mov	r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4413      	add	r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4a1f      	ldr	r2, [pc, #124]	; (800b7e4 <xTaskPriorityInherit+0xc8>)
 800b768:	4413      	add	r3, r2
 800b76a:	4299      	cmp	r1, r3
 800b76c:	d122      	bne.n	800b7b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	3304      	adds	r3, #4
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe fab4 	bl	8009ce0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b778:	4b19      	ldr	r3, [pc, #100]	; (800b7e0 <xTaskPriorityInherit+0xc4>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b786:	4b18      	ldr	r3, [pc, #96]	; (800b7e8 <xTaskPriorityInherit+0xcc>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d903      	bls.n	800b796 <xTaskPriorityInherit+0x7a>
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b792:	4a15      	ldr	r2, [pc, #84]	; (800b7e8 <xTaskPriorityInherit+0xcc>)
 800b794:	6013      	str	r3, [r2, #0]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b79a:	4613      	mov	r3, r2
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	4413      	add	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4a10      	ldr	r2, [pc, #64]	; (800b7e4 <xTaskPriorityInherit+0xc8>)
 800b7a4:	441a      	add	r2, r3
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	f7fe fa3a 	bl	8009c26 <vListInsertEnd>
 800b7b2:	e004      	b.n	800b7be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7b4:	4b0a      	ldr	r3, [pc, #40]	; (800b7e0 <xTaskPriorityInherit+0xc4>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	60fb      	str	r3, [r7, #12]
 800b7c2:	e008      	b.n	800b7d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7c8:	4b05      	ldr	r3, [pc, #20]	; (800b7e0 <xTaskPriorityInherit+0xc4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d201      	bcs.n	800b7d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
	}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	200054f4 	.word	0x200054f4
 800b7e4:	200054f8 	.word	0x200054f8
 800b7e8:	200059d0 	.word	0x200059d0

0800b7ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d056      	beq.n	800b8b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b802:	4b2e      	ldr	r3, [pc, #184]	; (800b8bc <xTaskPriorityDisinherit+0xd0>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d00a      	beq.n	800b822 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	60fb      	str	r3, [r7, #12]
}
 800b81e:	bf00      	nop
 800b820:	e7fe      	b.n	800b820 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10a      	bne.n	800b840 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	60bb      	str	r3, [r7, #8]
}
 800b83c:	bf00      	nop
 800b83e:	e7fe      	b.n	800b83e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b844:	1e5a      	subs	r2, r3, #1
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b852:	429a      	cmp	r2, r3
 800b854:	d02c      	beq.n	800b8b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d128      	bne.n	800b8b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	3304      	adds	r3, #4
 800b862:	4618      	mov	r0, r3
 800b864:	f7fe fa3c 	bl	8009ce0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b874:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b880:	4b0f      	ldr	r3, [pc, #60]	; (800b8c0 <xTaskPriorityDisinherit+0xd4>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	429a      	cmp	r2, r3
 800b886:	d903      	bls.n	800b890 <xTaskPriorityDisinherit+0xa4>
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88c:	4a0c      	ldr	r2, [pc, #48]	; (800b8c0 <xTaskPriorityDisinherit+0xd4>)
 800b88e:	6013      	str	r3, [r2, #0]
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b894:	4613      	mov	r3, r2
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4a09      	ldr	r2, [pc, #36]	; (800b8c4 <xTaskPriorityDisinherit+0xd8>)
 800b89e:	441a      	add	r2, r3
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	f7fe f9bd 	bl	8009c26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8b0:	697b      	ldr	r3, [r7, #20]
	}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3718      	adds	r7, #24
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	200054f4 	.word	0x200054f4
 800b8c0:	200059d0 	.word	0x200059d0
 800b8c4:	200054f8 	.word	0x200054f8

0800b8c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b088      	sub	sp, #32
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d06a      	beq.n	800b9b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10a      	bne.n	800b8fe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	60fb      	str	r3, [r7, #12]
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b902:	683a      	ldr	r2, [r7, #0]
 800b904:	429a      	cmp	r2, r3
 800b906:	d902      	bls.n	800b90e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	61fb      	str	r3, [r7, #28]
 800b90c:	e002      	b.n	800b914 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b912:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b918:	69fa      	ldr	r2, [r7, #28]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d04b      	beq.n	800b9b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	429a      	cmp	r2, r3
 800b926:	d146      	bne.n	800b9b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b928:	4b25      	ldr	r3, [pc, #148]	; (800b9c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	69ba      	ldr	r2, [r7, #24]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d10a      	bne.n	800b948 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	60bb      	str	r3, [r7, #8]
}
 800b944:	bf00      	nop
 800b946:	e7fe      	b.n	800b946 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	69fa      	ldr	r2, [r7, #28]
 800b952:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	db04      	blt.n	800b966 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	6959      	ldr	r1, [r3, #20]
 800b96a:	693a      	ldr	r2, [r7, #16]
 800b96c:	4613      	mov	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	4a13      	ldr	r2, [pc, #76]	; (800b9c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b976:	4413      	add	r3, r2
 800b978:	4299      	cmp	r1, r3
 800b97a:	d11c      	bne.n	800b9b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	3304      	adds	r3, #4
 800b980:	4618      	mov	r0, r3
 800b982:	f7fe f9ad 	bl	8009ce0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98a:	4b0f      	ldr	r3, [pc, #60]	; (800b9c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d903      	bls.n	800b99a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b996:	4a0c      	ldr	r2, [pc, #48]	; (800b9c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b998:	6013      	str	r3, [r2, #0]
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b99e:	4613      	mov	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4413      	add	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4a07      	ldr	r2, [pc, #28]	; (800b9c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b9a8:	441a      	add	r2, r3
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	f7fe f938 	bl	8009c26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9b6:	bf00      	nop
 800b9b8:	3720      	adds	r7, #32
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	200054f4 	.word	0x200054f4
 800b9c4:	200054f8 	.word	0x200054f8
 800b9c8:	200059d0 	.word	0x200059d0

0800b9cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b9cc:	b480      	push	{r7}
 800b9ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b9d0:	4b07      	ldr	r3, [pc, #28]	; (800b9f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d004      	beq.n	800b9e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b9d8:	4b05      	ldr	r3, [pc, #20]	; (800b9f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9de:	3201      	adds	r2, #1
 800b9e0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b9e2:	4b03      	ldr	r3, [pc, #12]	; (800b9f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
	}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr
 800b9f0:	200054f4 	.word	0x200054f4

0800b9f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b9fe:	4b21      	ldr	r3, [pc, #132]	; (800ba84 <prvAddCurrentTaskToDelayedList+0x90>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba04:	4b20      	ldr	r3, [pc, #128]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3304      	adds	r3, #4
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fe f968 	bl	8009ce0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba16:	d10a      	bne.n	800ba2e <prvAddCurrentTaskToDelayedList+0x3a>
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d007      	beq.n	800ba2e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba1e:	4b1a      	ldr	r3, [pc, #104]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3304      	adds	r3, #4
 800ba24:	4619      	mov	r1, r3
 800ba26:	4819      	ldr	r0, [pc, #100]	; (800ba8c <prvAddCurrentTaskToDelayedList+0x98>)
 800ba28:	f7fe f8fd 	bl	8009c26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba2c:	e026      	b.n	800ba7c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4413      	add	r3, r2
 800ba34:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba36:	4b14      	ldr	r3, [pc, #80]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d209      	bcs.n	800ba5a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba46:	4b12      	ldr	r3, [pc, #72]	; (800ba90 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	4b0f      	ldr	r3, [pc, #60]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4619      	mov	r1, r3
 800ba52:	4610      	mov	r0, r2
 800ba54:	f7fe f90b 	bl	8009c6e <vListInsert>
}
 800ba58:	e010      	b.n	800ba7c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba5a:	4b0e      	ldr	r3, [pc, #56]	; (800ba94 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	4b0a      	ldr	r3, [pc, #40]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3304      	adds	r3, #4
 800ba64:	4619      	mov	r1, r3
 800ba66:	4610      	mov	r0, r2
 800ba68:	f7fe f901 	bl	8009c6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba6c:	4b0a      	ldr	r3, [pc, #40]	; (800ba98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d202      	bcs.n	800ba7c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ba76:	4a08      	ldr	r2, [pc, #32]	; (800ba98 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	6013      	str	r3, [r2, #0]
}
 800ba7c:	bf00      	nop
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	200059cc 	.word	0x200059cc
 800ba88:	200054f4 	.word	0x200054f4
 800ba8c:	200059b4 	.word	0x200059b4
 800ba90:	20005984 	.word	0x20005984
 800ba94:	20005980 	.word	0x20005980
 800ba98:	200059e8 	.word	0x200059e8

0800ba9c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b08a      	sub	sp, #40	; 0x28
 800baa0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800baa2:	2300      	movs	r3, #0
 800baa4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800baa6:	f000 fb07 	bl	800c0b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800baaa:	4b1c      	ldr	r3, [pc, #112]	; (800bb1c <xTimerCreateTimerTask+0x80>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d021      	beq.n	800baf6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bab2:	2300      	movs	r3, #0
 800bab4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bab6:	2300      	movs	r3, #0
 800bab8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800baba:	1d3a      	adds	r2, r7, #4
 800babc:	f107 0108 	add.w	r1, r7, #8
 800bac0:	f107 030c 	add.w	r3, r7, #12
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7fe f867 	bl	8009b98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800baca:	6879      	ldr	r1, [r7, #4]
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	9202      	str	r2, [sp, #8]
 800bad2:	9301      	str	r3, [sp, #4]
 800bad4:	2302      	movs	r3, #2
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	2300      	movs	r3, #0
 800bada:	460a      	mov	r2, r1
 800badc:	4910      	ldr	r1, [pc, #64]	; (800bb20 <xTimerCreateTimerTask+0x84>)
 800bade:	4811      	ldr	r0, [pc, #68]	; (800bb24 <xTimerCreateTimerTask+0x88>)
 800bae0:	f7fe ff90 	bl	800aa04 <xTaskCreateStatic>
 800bae4:	4603      	mov	r3, r0
 800bae6:	4a10      	ldr	r2, [pc, #64]	; (800bb28 <xTimerCreateTimerTask+0x8c>)
 800bae8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800baea:	4b0f      	ldr	r3, [pc, #60]	; (800bb28 <xTimerCreateTimerTask+0x8c>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800baf2:	2301      	movs	r3, #1
 800baf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10a      	bne.n	800bb12 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	613b      	str	r3, [r7, #16]
}
 800bb0e:	bf00      	nop
 800bb10:	e7fe      	b.n	800bb10 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb12:	697b      	ldr	r3, [r7, #20]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3718      	adds	r7, #24
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	20005a24 	.word	0x20005a24
 800bb20:	08019874 	.word	0x08019874
 800bb24:	0800bc61 	.word	0x0800bc61
 800bb28:	20005a28 	.word	0x20005a28

0800bb2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08a      	sub	sp, #40	; 0x28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
 800bb38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10a      	bne.n	800bb5a <xTimerGenericCommand+0x2e>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	623b      	str	r3, [r7, #32]
}
 800bb56:	bf00      	nop
 800bb58:	e7fe      	b.n	800bb58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb5a:	4b1a      	ldr	r3, [pc, #104]	; (800bbc4 <xTimerGenericCommand+0x98>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d02a      	beq.n	800bbb8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	2b05      	cmp	r3, #5
 800bb72:	dc18      	bgt.n	800bba6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb74:	f7ff fdb4 	bl	800b6e0 <xTaskGetSchedulerState>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d109      	bne.n	800bb92 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb7e:	4b11      	ldr	r3, [pc, #68]	; (800bbc4 <xTimerGenericCommand+0x98>)
 800bb80:	6818      	ldr	r0, [r3, #0]
 800bb82:	f107 0110 	add.w	r1, r7, #16
 800bb86:	2300      	movs	r3, #0
 800bb88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb8a:	f7fe fa11 	bl	8009fb0 <xQueueGenericSend>
 800bb8e:	6278      	str	r0, [r7, #36]	; 0x24
 800bb90:	e012      	b.n	800bbb8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb92:	4b0c      	ldr	r3, [pc, #48]	; (800bbc4 <xTimerGenericCommand+0x98>)
 800bb94:	6818      	ldr	r0, [r3, #0]
 800bb96:	f107 0110 	add.w	r1, r7, #16
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f7fe fa07 	bl	8009fb0 <xQueueGenericSend>
 800bba2:	6278      	str	r0, [r7, #36]	; 0x24
 800bba4:	e008      	b.n	800bbb8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bba6:	4b07      	ldr	r3, [pc, #28]	; (800bbc4 <xTimerGenericCommand+0x98>)
 800bba8:	6818      	ldr	r0, [r3, #0]
 800bbaa:	f107 0110 	add.w	r1, r7, #16
 800bbae:	2300      	movs	r3, #0
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	f7fe fafb 	bl	800a1ac <xQueueGenericSendFromISR>
 800bbb6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3728      	adds	r7, #40	; 0x28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20005a24 	.word	0x20005a24

0800bbc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b088      	sub	sp, #32
 800bbcc:	af02      	add	r7, sp, #8
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbd2:	4b22      	ldr	r3, [pc, #136]	; (800bc5c <prvProcessExpiredTimer+0x94>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	3304      	adds	r3, #4
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe f87d 	bl	8009ce0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbec:	f003 0304 	and.w	r3, r3, #4
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d022      	beq.n	800bc3a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	699a      	ldr	r2, [r3, #24]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	18d1      	adds	r1, r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	6978      	ldr	r0, [r7, #20]
 800bc02:	f000 f8d1 	bl	800bda8 <prvInsertTimerInActiveList>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d01f      	beq.n	800bc4c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	2300      	movs	r3, #0
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	2100      	movs	r1, #0
 800bc16:	6978      	ldr	r0, [r7, #20]
 800bc18:	f7ff ff88 	bl	800bb2c <xTimerGenericCommand>
 800bc1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d113      	bne.n	800bc4c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	60fb      	str	r3, [r7, #12]
}
 800bc36:	bf00      	nop
 800bc38:	e7fe      	b.n	800bc38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc40:	f023 0301 	bic.w	r3, r3, #1
 800bc44:	b2da      	uxtb	r2, r3
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	6a1b      	ldr	r3, [r3, #32]
 800bc50:	6978      	ldr	r0, [r7, #20]
 800bc52:	4798      	blx	r3
}
 800bc54:	bf00      	nop
 800bc56:	3718      	adds	r7, #24
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	20005a1c 	.word	0x20005a1c

0800bc60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc68:	f107 0308 	add.w	r3, r7, #8
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f000 f857 	bl	800bd20 <prvGetNextExpireTime>
 800bc72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	4619      	mov	r1, r3
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f000 f803 	bl	800bc84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc7e:	f000 f8d5 	bl	800be2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc82:	e7f1      	b.n	800bc68 <prvTimerTask+0x8>

0800bc84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc8e:	f7ff f915 	bl	800aebc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc92:	f107 0308 	add.w	r3, r7, #8
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 f866 	bl	800bd68 <prvSampleTimeNow>
 800bc9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d130      	bne.n	800bd06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10a      	bne.n	800bcc0 <prvProcessTimerOrBlockTask+0x3c>
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d806      	bhi.n	800bcc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bcb2:	f7ff f911 	bl	800aed8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bcb6:	68f9      	ldr	r1, [r7, #12]
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7ff ff85 	bl	800bbc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bcbe:	e024      	b.n	800bd0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d008      	beq.n	800bcd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bcc6:	4b13      	ldr	r3, [pc, #76]	; (800bd14 <prvProcessTimerOrBlockTask+0x90>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d101      	bne.n	800bcd4 <prvProcessTimerOrBlockTask+0x50>
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e000      	b.n	800bcd6 <prvProcessTimerOrBlockTask+0x52>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bcd8:	4b0f      	ldr	r3, [pc, #60]	; (800bd18 <prvProcessTimerOrBlockTask+0x94>)
 800bcda:	6818      	ldr	r0, [r3, #0]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	4619      	mov	r1, r3
 800bce6:	f7fe fe59 	bl	800a99c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bcea:	f7ff f8f5 	bl	800aed8 <xTaskResumeAll>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d10a      	bne.n	800bd0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bcf4:	4b09      	ldr	r3, [pc, #36]	; (800bd1c <prvProcessTimerOrBlockTask+0x98>)
 800bcf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	f3bf 8f6f 	isb	sy
}
 800bd04:	e001      	b.n	800bd0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd06:	f7ff f8e7 	bl	800aed8 <xTaskResumeAll>
}
 800bd0a:	bf00      	nop
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	20005a20 	.word	0x20005a20
 800bd18:	20005a24 	.word	0x20005a24
 800bd1c:	e000ed04 	.word	0xe000ed04

0800bd20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd28:	4b0e      	ldr	r3, [pc, #56]	; (800bd64 <prvGetNextExpireTime+0x44>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d101      	bne.n	800bd36 <prvGetNextExpireTime+0x16>
 800bd32:	2201      	movs	r2, #1
 800bd34:	e000      	b.n	800bd38 <prvGetNextExpireTime+0x18>
 800bd36:	2200      	movs	r2, #0
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d105      	bne.n	800bd50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd44:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <prvGetNextExpireTime+0x44>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	60fb      	str	r3, [r7, #12]
 800bd4e:	e001      	b.n	800bd54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd50:	2300      	movs	r3, #0
 800bd52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd54:	68fb      	ldr	r3, [r7, #12]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3714      	adds	r7, #20
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	20005a1c 	.word	0x20005a1c

0800bd68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd70:	f7ff f950 	bl	800b014 <xTaskGetTickCount>
 800bd74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd76:	4b0b      	ldr	r3, [pc, #44]	; (800bda4 <prvSampleTimeNow+0x3c>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d205      	bcs.n	800bd8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd80:	f000 f936 	bl	800bff0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	e002      	b.n	800bd92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd92:	4a04      	ldr	r2, [pc, #16]	; (800bda4 <prvSampleTimeNow+0x3c>)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd98:	68fb      	ldr	r3, [r7, #12]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	20005a2c 	.word	0x20005a2c

0800bda8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d812      	bhi.n	800bdf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	1ad2      	subs	r2, r2, r3
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	699b      	ldr	r3, [r3, #24]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d302      	bcc.n	800bde2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bddc:	2301      	movs	r3, #1
 800bdde:	617b      	str	r3, [r7, #20]
 800bde0:	e01b      	b.n	800be1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bde2:	4b10      	ldr	r3, [pc, #64]	; (800be24 <prvInsertTimerInActiveList+0x7c>)
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	3304      	adds	r3, #4
 800bdea:	4619      	mov	r1, r3
 800bdec:	4610      	mov	r0, r2
 800bdee:	f7fd ff3e 	bl	8009c6e <vListInsert>
 800bdf2:	e012      	b.n	800be1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d206      	bcs.n	800be0a <prvInsertTimerInActiveList+0x62>
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	429a      	cmp	r2, r3
 800be02:	d302      	bcc.n	800be0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be04:	2301      	movs	r3, #1
 800be06:	617b      	str	r3, [r7, #20]
 800be08:	e007      	b.n	800be1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be0a:	4b07      	ldr	r3, [pc, #28]	; (800be28 <prvInsertTimerInActiveList+0x80>)
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	3304      	adds	r3, #4
 800be12:	4619      	mov	r1, r3
 800be14:	4610      	mov	r0, r2
 800be16:	f7fd ff2a 	bl	8009c6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be1a:	697b      	ldr	r3, [r7, #20]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	20005a20 	.word	0x20005a20
 800be28:	20005a1c 	.word	0x20005a1c

0800be2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b08e      	sub	sp, #56	; 0x38
 800be30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be32:	e0ca      	b.n	800bfca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	da18      	bge.n	800be6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be3a:	1d3b      	adds	r3, r7, #4
 800be3c:	3304      	adds	r3, #4
 800be3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10a      	bne.n	800be5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	61fb      	str	r3, [r7, #28]
}
 800be58:	bf00      	nop
 800be5a:	e7fe      	b.n	800be5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be62:	6850      	ldr	r0, [r2, #4]
 800be64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be66:	6892      	ldr	r2, [r2, #8]
 800be68:	4611      	mov	r1, r2
 800be6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f2c0 80ab 	blt.w	800bfca <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d004      	beq.n	800be8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be82:	3304      	adds	r3, #4
 800be84:	4618      	mov	r0, r3
 800be86:	f7fd ff2b 	bl	8009ce0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be8a:	463b      	mov	r3, r7
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7ff ff6b 	bl	800bd68 <prvSampleTimeNow>
 800be92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b09      	cmp	r3, #9
 800be98:	f200 8096 	bhi.w	800bfc8 <prvProcessReceivedCommands+0x19c>
 800be9c:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <prvProcessReceivedCommands+0x78>)
 800be9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea2:	bf00      	nop
 800bea4:	0800becd 	.word	0x0800becd
 800bea8:	0800becd 	.word	0x0800becd
 800beac:	0800becd 	.word	0x0800becd
 800beb0:	0800bf41 	.word	0x0800bf41
 800beb4:	0800bf55 	.word	0x0800bf55
 800beb8:	0800bf9f 	.word	0x0800bf9f
 800bebc:	0800becd 	.word	0x0800becd
 800bec0:	0800becd 	.word	0x0800becd
 800bec4:	0800bf41 	.word	0x0800bf41
 800bec8:	0800bf55 	.word	0x0800bf55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800becc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bed2:	f043 0301 	orr.w	r3, r3, #1
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee2:	699b      	ldr	r3, [r3, #24]
 800bee4:	18d1      	adds	r1, r2, r3
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beec:	f7ff ff5c 	bl	800bda8 <prvInsertTimerInActiveList>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d069      	beq.n	800bfca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef8:	6a1b      	ldr	r3, [r3, #32]
 800befa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800befc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800befe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf04:	f003 0304 	and.w	r3, r3, #4
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d05e      	beq.n	800bfca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf10:	699b      	ldr	r3, [r3, #24]
 800bf12:	441a      	add	r2, r3
 800bf14:	2300      	movs	r3, #0
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	2300      	movs	r3, #0
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf1e:	f7ff fe05 	bl	800bb2c <xTimerGenericCommand>
 800bf22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d14f      	bne.n	800bfca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2e:	f383 8811 	msr	BASEPRI, r3
 800bf32:	f3bf 8f6f 	isb	sy
 800bf36:	f3bf 8f4f 	dsb	sy
 800bf3a:	61bb      	str	r3, [r7, #24]
}
 800bf3c:	bf00      	nop
 800bf3e:	e7fe      	b.n	800bf3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf46:	f023 0301 	bic.w	r3, r3, #1
 800bf4a:	b2da      	uxtb	r2, r3
 800bf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bf52:	e03a      	b.n	800bfca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf5a:	f043 0301 	orr.w	r3, r3, #1
 800bf5e:	b2da      	uxtb	r2, r3
 800bf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d10a      	bne.n	800bf8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf78:	f383 8811 	msr	BASEPRI, r3
 800bf7c:	f3bf 8f6f 	isb	sy
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	617b      	str	r3, [r7, #20]
}
 800bf86:	bf00      	nop
 800bf88:	e7fe      	b.n	800bf88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8c:	699a      	ldr	r2, [r3, #24]
 800bf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf90:	18d1      	adds	r1, r2, r3
 800bf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf98:	f7ff ff06 	bl	800bda8 <prvInsertTimerInActiveList>
					break;
 800bf9c:	e015      	b.n	800bfca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfa4:	f003 0302 	and.w	r3, r3, #2
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d103      	bne.n	800bfb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bfac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfae:	f000 fbdf 	bl	800c770 <vPortFree>
 800bfb2:	e00a      	b.n	800bfca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfba:	f023 0301 	bic.w	r3, r3, #1
 800bfbe:	b2da      	uxtb	r2, r3
 800bfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bfc6:	e000      	b.n	800bfca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bfc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfca:	4b08      	ldr	r3, [pc, #32]	; (800bfec <prvProcessReceivedCommands+0x1c0>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	1d39      	adds	r1, r7, #4
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fe f986 	bl	800a2e4 <xQueueReceive>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f47f af2a 	bne.w	800be34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bfe0:	bf00      	nop
 800bfe2:	bf00      	nop
 800bfe4:	3730      	adds	r7, #48	; 0x30
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	20005a24 	.word	0x20005a24

0800bff0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bff6:	e048      	b.n	800c08a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bff8:	4b2d      	ldr	r3, [pc, #180]	; (800c0b0 <prvSwitchTimerLists+0xc0>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c002:	4b2b      	ldr	r3, [pc, #172]	; (800c0b0 <prvSwitchTimerLists+0xc0>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3304      	adds	r3, #4
 800c010:	4618      	mov	r0, r3
 800c012:	f7fd fe65 	bl	8009ce0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6a1b      	ldr	r3, [r3, #32]
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c024:	f003 0304 	and.w	r3, r3, #4
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d02e      	beq.n	800c08a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	699b      	ldr	r3, [r3, #24]
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	4413      	add	r3, r2
 800c034:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d90e      	bls.n	800c05c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	68ba      	ldr	r2, [r7, #8]
 800c042:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c04a:	4b19      	ldr	r3, [pc, #100]	; (800c0b0 <prvSwitchTimerLists+0xc0>)
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3304      	adds	r3, #4
 800c052:	4619      	mov	r1, r3
 800c054:	4610      	mov	r0, r2
 800c056:	f7fd fe0a 	bl	8009c6e <vListInsert>
 800c05a:	e016      	b.n	800c08a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c05c:	2300      	movs	r3, #0
 800c05e:	9300      	str	r3, [sp, #0]
 800c060:	2300      	movs	r3, #0
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	2100      	movs	r1, #0
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f7ff fd60 	bl	800bb2c <xTimerGenericCommand>
 800c06c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10a      	bne.n	800c08a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	603b      	str	r3, [r7, #0]
}
 800c086:	bf00      	nop
 800c088:	e7fe      	b.n	800c088 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c08a:	4b09      	ldr	r3, [pc, #36]	; (800c0b0 <prvSwitchTimerLists+0xc0>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1b1      	bne.n	800bff8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c094:	4b06      	ldr	r3, [pc, #24]	; (800c0b0 <prvSwitchTimerLists+0xc0>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c09a:	4b06      	ldr	r3, [pc, #24]	; (800c0b4 <prvSwitchTimerLists+0xc4>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a04      	ldr	r2, [pc, #16]	; (800c0b0 <prvSwitchTimerLists+0xc0>)
 800c0a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c0a2:	4a04      	ldr	r2, [pc, #16]	; (800c0b4 <prvSwitchTimerLists+0xc4>)
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	6013      	str	r3, [r2, #0]
}
 800c0a8:	bf00      	nop
 800c0aa:	3718      	adds	r7, #24
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	20005a1c 	.word	0x20005a1c
 800c0b4:	20005a20 	.word	0x20005a20

0800c0b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c0be:	f000 f969 	bl	800c394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c0c2:	4b15      	ldr	r3, [pc, #84]	; (800c118 <prvCheckForValidListAndQueue+0x60>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d120      	bne.n	800c10c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c0ca:	4814      	ldr	r0, [pc, #80]	; (800c11c <prvCheckForValidListAndQueue+0x64>)
 800c0cc:	f7fd fd7e 	bl	8009bcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c0d0:	4813      	ldr	r0, [pc, #76]	; (800c120 <prvCheckForValidListAndQueue+0x68>)
 800c0d2:	f7fd fd7b 	bl	8009bcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c0d6:	4b13      	ldr	r3, [pc, #76]	; (800c124 <prvCheckForValidListAndQueue+0x6c>)
 800c0d8:	4a10      	ldr	r2, [pc, #64]	; (800c11c <prvCheckForValidListAndQueue+0x64>)
 800c0da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c0dc:	4b12      	ldr	r3, [pc, #72]	; (800c128 <prvCheckForValidListAndQueue+0x70>)
 800c0de:	4a10      	ldr	r2, [pc, #64]	; (800c120 <prvCheckForValidListAndQueue+0x68>)
 800c0e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	4b11      	ldr	r3, [pc, #68]	; (800c12c <prvCheckForValidListAndQueue+0x74>)
 800c0e8:	4a11      	ldr	r2, [pc, #68]	; (800c130 <prvCheckForValidListAndQueue+0x78>)
 800c0ea:	2110      	movs	r1, #16
 800c0ec:	200a      	movs	r0, #10
 800c0ee:	f7fd fe89 	bl	8009e04 <xQueueGenericCreateStatic>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	4a08      	ldr	r2, [pc, #32]	; (800c118 <prvCheckForValidListAndQueue+0x60>)
 800c0f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c0f8:	4b07      	ldr	r3, [pc, #28]	; (800c118 <prvCheckForValidListAndQueue+0x60>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c100:	4b05      	ldr	r3, [pc, #20]	; (800c118 <prvCheckForValidListAndQueue+0x60>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	490b      	ldr	r1, [pc, #44]	; (800c134 <prvCheckForValidListAndQueue+0x7c>)
 800c106:	4618      	mov	r0, r3
 800c108:	f7fe fc1e 	bl	800a948 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c10c:	f000 f972 	bl	800c3f4 <vPortExitCritical>
}
 800c110:	bf00      	nop
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20005a24 	.word	0x20005a24
 800c11c:	200059f4 	.word	0x200059f4
 800c120:	20005a08 	.word	0x20005a08
 800c124:	20005a1c 	.word	0x20005a1c
 800c128:	20005a20 	.word	0x20005a20
 800c12c:	20005ad0 	.word	0x20005ad0
 800c130:	20005a30 	.word	0x20005a30
 800c134:	0801987c 	.word	0x0801987c

0800c138 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	3b04      	subs	r3, #4
 800c148:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	3b04      	subs	r3, #4
 800c156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	f023 0201 	bic.w	r2, r3, #1
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3b04      	subs	r3, #4
 800c166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c168:	4a0c      	ldr	r2, [pc, #48]	; (800c19c <pxPortInitialiseStack+0x64>)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	3b14      	subs	r3, #20
 800c172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3b04      	subs	r3, #4
 800c17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f06f 0202 	mvn.w	r2, #2
 800c186:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	3b20      	subs	r3, #32
 800c18c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c18e:	68fb      	ldr	r3, [r7, #12]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3714      	adds	r7, #20
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr
 800c19c:	0800c1a1 	.word	0x0800c1a1

0800c1a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1aa:	4b12      	ldr	r3, [pc, #72]	; (800c1f4 <prvTaskExitError+0x54>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1b2:	d00a      	beq.n	800c1ca <prvTaskExitError+0x2a>
	__asm volatile
 800c1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	60fb      	str	r3, [r7, #12]
}
 800c1c6:	bf00      	nop
 800c1c8:	e7fe      	b.n	800c1c8 <prvTaskExitError+0x28>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	60bb      	str	r3, [r7, #8]
}
 800c1dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1de:	bf00      	nop
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d0fc      	beq.n	800c1e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c1e6:	bf00      	nop
 800c1e8:	bf00      	nop
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	20000018 	.word	0x20000018
	...

0800c200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c200:	4b07      	ldr	r3, [pc, #28]	; (800c220 <pxCurrentTCBConst2>)
 800c202:	6819      	ldr	r1, [r3, #0]
 800c204:	6808      	ldr	r0, [r1, #0]
 800c206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20a:	f380 8809 	msr	PSP, r0
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	f04f 0000 	mov.w	r0, #0
 800c216:	f380 8811 	msr	BASEPRI, r0
 800c21a:	4770      	bx	lr
 800c21c:	f3af 8000 	nop.w

0800c220 <pxCurrentTCBConst2>:
 800c220:	200054f4 	.word	0x200054f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c224:	bf00      	nop
 800c226:	bf00      	nop

0800c228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c228:	4808      	ldr	r0, [pc, #32]	; (800c24c <prvPortStartFirstTask+0x24>)
 800c22a:	6800      	ldr	r0, [r0, #0]
 800c22c:	6800      	ldr	r0, [r0, #0]
 800c22e:	f380 8808 	msr	MSP, r0
 800c232:	f04f 0000 	mov.w	r0, #0
 800c236:	f380 8814 	msr	CONTROL, r0
 800c23a:	b662      	cpsie	i
 800c23c:	b661      	cpsie	f
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	df00      	svc	0
 800c248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c24a:	bf00      	nop
 800c24c:	e000ed08 	.word	0xe000ed08

0800c250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c256:	4b46      	ldr	r3, [pc, #280]	; (800c370 <xPortStartScheduler+0x120>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a46      	ldr	r2, [pc, #280]	; (800c374 <xPortStartScheduler+0x124>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d10a      	bne.n	800c276 <xPortStartScheduler+0x26>
	__asm volatile
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	613b      	str	r3, [r7, #16]
}
 800c272:	bf00      	nop
 800c274:	e7fe      	b.n	800c274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c276:	4b3e      	ldr	r3, [pc, #248]	; (800c370 <xPortStartScheduler+0x120>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a3f      	ldr	r2, [pc, #252]	; (800c378 <xPortStartScheduler+0x128>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d10a      	bne.n	800c296 <xPortStartScheduler+0x46>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	60fb      	str	r3, [r7, #12]
}
 800c292:	bf00      	nop
 800c294:	e7fe      	b.n	800c294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c296:	4b39      	ldr	r3, [pc, #228]	; (800c37c <xPortStartScheduler+0x12c>)
 800c298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	22ff      	movs	r2, #255	; 0xff
 800c2a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2b0:	78fb      	ldrb	r3, [r7, #3]
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	4b31      	ldr	r3, [pc, #196]	; (800c380 <xPortStartScheduler+0x130>)
 800c2bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2be:	4b31      	ldr	r3, [pc, #196]	; (800c384 <xPortStartScheduler+0x134>)
 800c2c0:	2207      	movs	r2, #7
 800c2c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2c4:	e009      	b.n	800c2da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c2c6:	4b2f      	ldr	r3, [pc, #188]	; (800c384 <xPortStartScheduler+0x134>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	4a2d      	ldr	r2, [pc, #180]	; (800c384 <xPortStartScheduler+0x134>)
 800c2ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2d0:	78fb      	ldrb	r3, [r7, #3]
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2da:	78fb      	ldrb	r3, [r7, #3]
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2e2:	2b80      	cmp	r3, #128	; 0x80
 800c2e4:	d0ef      	beq.n	800c2c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c2e6:	4b27      	ldr	r3, [pc, #156]	; (800c384 <xPortStartScheduler+0x134>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f1c3 0307 	rsb	r3, r3, #7
 800c2ee:	2b04      	cmp	r3, #4
 800c2f0:	d00a      	beq.n	800c308 <xPortStartScheduler+0xb8>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	60bb      	str	r3, [r7, #8]
}
 800c304:	bf00      	nop
 800c306:	e7fe      	b.n	800c306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c308:	4b1e      	ldr	r3, [pc, #120]	; (800c384 <xPortStartScheduler+0x134>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	021b      	lsls	r3, r3, #8
 800c30e:	4a1d      	ldr	r2, [pc, #116]	; (800c384 <xPortStartScheduler+0x134>)
 800c310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c312:	4b1c      	ldr	r3, [pc, #112]	; (800c384 <xPortStartScheduler+0x134>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c31a:	4a1a      	ldr	r2, [pc, #104]	; (800c384 <xPortStartScheduler+0x134>)
 800c31c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	b2da      	uxtb	r2, r3
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c326:	4b18      	ldr	r3, [pc, #96]	; (800c388 <xPortStartScheduler+0x138>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a17      	ldr	r2, [pc, #92]	; (800c388 <xPortStartScheduler+0x138>)
 800c32c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c332:	4b15      	ldr	r3, [pc, #84]	; (800c388 <xPortStartScheduler+0x138>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a14      	ldr	r2, [pc, #80]	; (800c388 <xPortStartScheduler+0x138>)
 800c338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c33c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c33e:	f000 f8dd 	bl	800c4fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c342:	4b12      	ldr	r3, [pc, #72]	; (800c38c <xPortStartScheduler+0x13c>)
 800c344:	2200      	movs	r2, #0
 800c346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c348:	f000 f8fc 	bl	800c544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c34c:	4b10      	ldr	r3, [pc, #64]	; (800c390 <xPortStartScheduler+0x140>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a0f      	ldr	r2, [pc, #60]	; (800c390 <xPortStartScheduler+0x140>)
 800c352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c358:	f7ff ff66 	bl	800c228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c35c:	f7fe ff24 	bl	800b1a8 <vTaskSwitchContext>
	prvTaskExitError();
 800c360:	f7ff ff1e 	bl	800c1a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3718      	adds	r7, #24
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	e000ed00 	.word	0xe000ed00
 800c374:	410fc271 	.word	0x410fc271
 800c378:	410fc270 	.word	0x410fc270
 800c37c:	e000e400 	.word	0xe000e400
 800c380:	20005b20 	.word	0x20005b20
 800c384:	20005b24 	.word	0x20005b24
 800c388:	e000ed20 	.word	0xe000ed20
 800c38c:	20000018 	.word	0x20000018
 800c390:	e000ef34 	.word	0xe000ef34

0800c394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
	__asm volatile
 800c39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39e:	f383 8811 	msr	BASEPRI, r3
 800c3a2:	f3bf 8f6f 	isb	sy
 800c3a6:	f3bf 8f4f 	dsb	sy
 800c3aa:	607b      	str	r3, [r7, #4]
}
 800c3ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3ae:	4b0f      	ldr	r3, [pc, #60]	; (800c3ec <vPortEnterCritical+0x58>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	4a0d      	ldr	r2, [pc, #52]	; (800c3ec <vPortEnterCritical+0x58>)
 800c3b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3b8:	4b0c      	ldr	r3, [pc, #48]	; (800c3ec <vPortEnterCritical+0x58>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d10f      	bne.n	800c3e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3c0:	4b0b      	ldr	r3, [pc, #44]	; (800c3f0 <vPortEnterCritical+0x5c>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00a      	beq.n	800c3e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	603b      	str	r3, [r7, #0]
}
 800c3dc:	bf00      	nop
 800c3de:	e7fe      	b.n	800c3de <vPortEnterCritical+0x4a>
	}
}
 800c3e0:	bf00      	nop
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	20000018 	.word	0x20000018
 800c3f0:	e000ed04 	.word	0xe000ed04

0800c3f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c3fa:	4b12      	ldr	r3, [pc, #72]	; (800c444 <vPortExitCritical+0x50>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d10a      	bne.n	800c418 <vPortExitCritical+0x24>
	__asm volatile
 800c402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c406:	f383 8811 	msr	BASEPRI, r3
 800c40a:	f3bf 8f6f 	isb	sy
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	607b      	str	r3, [r7, #4]
}
 800c414:	bf00      	nop
 800c416:	e7fe      	b.n	800c416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c418:	4b0a      	ldr	r3, [pc, #40]	; (800c444 <vPortExitCritical+0x50>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	3b01      	subs	r3, #1
 800c41e:	4a09      	ldr	r2, [pc, #36]	; (800c444 <vPortExitCritical+0x50>)
 800c420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c422:	4b08      	ldr	r3, [pc, #32]	; (800c444 <vPortExitCritical+0x50>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d105      	bne.n	800c436 <vPortExitCritical+0x42>
 800c42a:	2300      	movs	r3, #0
 800c42c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	f383 8811 	msr	BASEPRI, r3
}
 800c434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c436:	bf00      	nop
 800c438:	370c      	adds	r7, #12
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	20000018 	.word	0x20000018
	...

0800c450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c450:	f3ef 8009 	mrs	r0, PSP
 800c454:	f3bf 8f6f 	isb	sy
 800c458:	4b15      	ldr	r3, [pc, #84]	; (800c4b0 <pxCurrentTCBConst>)
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	f01e 0f10 	tst.w	lr, #16
 800c460:	bf08      	it	eq
 800c462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46a:	6010      	str	r0, [r2, #0]
 800c46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c470:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c474:	f380 8811 	msr	BASEPRI, r0
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f7fe fe92 	bl	800b1a8 <vTaskSwitchContext>
 800c484:	f04f 0000 	mov.w	r0, #0
 800c488:	f380 8811 	msr	BASEPRI, r0
 800c48c:	bc09      	pop	{r0, r3}
 800c48e:	6819      	ldr	r1, [r3, #0]
 800c490:	6808      	ldr	r0, [r1, #0]
 800c492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c496:	f01e 0f10 	tst.w	lr, #16
 800c49a:	bf08      	it	eq
 800c49c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4a0:	f380 8809 	msr	PSP, r0
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop
 800c4ac:	f3af 8000 	nop.w

0800c4b0 <pxCurrentTCBConst>:
 800c4b0:	200054f4 	.word	0x200054f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4b4:	bf00      	nop
 800c4b6:	bf00      	nop

0800c4b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	607b      	str	r3, [r7, #4]
}
 800c4d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4d2:	f7fe fdaf 	bl	800b034 <xTaskIncrementTick>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d003      	beq.n	800c4e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4dc:	4b06      	ldr	r3, [pc, #24]	; (800c4f8 <xPortSysTickHandler+0x40>)
 800c4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	f383 8811 	msr	BASEPRI, r3
}
 800c4ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c4f0:	bf00      	nop
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	e000ed04 	.word	0xe000ed04

0800c4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c500:	4b0b      	ldr	r3, [pc, #44]	; (800c530 <vPortSetupTimerInterrupt+0x34>)
 800c502:	2200      	movs	r2, #0
 800c504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c506:	4b0b      	ldr	r3, [pc, #44]	; (800c534 <vPortSetupTimerInterrupt+0x38>)
 800c508:	2200      	movs	r2, #0
 800c50a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c50c:	4b0a      	ldr	r3, [pc, #40]	; (800c538 <vPortSetupTimerInterrupt+0x3c>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a0a      	ldr	r2, [pc, #40]	; (800c53c <vPortSetupTimerInterrupt+0x40>)
 800c512:	fba2 2303 	umull	r2, r3, r2, r3
 800c516:	099b      	lsrs	r3, r3, #6
 800c518:	4a09      	ldr	r2, [pc, #36]	; (800c540 <vPortSetupTimerInterrupt+0x44>)
 800c51a:	3b01      	subs	r3, #1
 800c51c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c51e:	4b04      	ldr	r3, [pc, #16]	; (800c530 <vPortSetupTimerInterrupt+0x34>)
 800c520:	2207      	movs	r2, #7
 800c522:	601a      	str	r2, [r3, #0]
}
 800c524:	bf00      	nop
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	e000e010 	.word	0xe000e010
 800c534:	e000e018 	.word	0xe000e018
 800c538:	2000000c 	.word	0x2000000c
 800c53c:	10624dd3 	.word	0x10624dd3
 800c540:	e000e014 	.word	0xe000e014

0800c544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c554 <vPortEnableVFP+0x10>
 800c548:	6801      	ldr	r1, [r0, #0]
 800c54a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c54e:	6001      	str	r1, [r0, #0]
 800c550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c552:	bf00      	nop
 800c554:	e000ed88 	.word	0xe000ed88

0800c558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c55e:	f3ef 8305 	mrs	r3, IPSR
 800c562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2b0f      	cmp	r3, #15
 800c568:	d914      	bls.n	800c594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c56a:	4a17      	ldr	r2, [pc, #92]	; (800c5c8 <vPortValidateInterruptPriority+0x70>)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	4413      	add	r3, r2
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c574:	4b15      	ldr	r3, [pc, #84]	; (800c5cc <vPortValidateInterruptPriority+0x74>)
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	7afa      	ldrb	r2, [r7, #11]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d20a      	bcs.n	800c594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	607b      	str	r3, [r7, #4]
}
 800c590:	bf00      	nop
 800c592:	e7fe      	b.n	800c592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c594:	4b0e      	ldr	r3, [pc, #56]	; (800c5d0 <vPortValidateInterruptPriority+0x78>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c59c:	4b0d      	ldr	r3, [pc, #52]	; (800c5d4 <vPortValidateInterruptPriority+0x7c>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d90a      	bls.n	800c5ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	603b      	str	r3, [r7, #0]
}
 800c5b6:	bf00      	nop
 800c5b8:	e7fe      	b.n	800c5b8 <vPortValidateInterruptPriority+0x60>
	}
 800c5ba:	bf00      	nop
 800c5bc:	3714      	adds	r7, #20
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	e000e3f0 	.word	0xe000e3f0
 800c5cc:	20005b20 	.word	0x20005b20
 800c5d0:	e000ed0c 	.word	0xe000ed0c
 800c5d4:	20005b24 	.word	0x20005b24

0800c5d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b08a      	sub	sp, #40	; 0x28
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c5e4:	f7fe fc6a 	bl	800aebc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c5e8:	4b5b      	ldr	r3, [pc, #364]	; (800c758 <pvPortMalloc+0x180>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d101      	bne.n	800c5f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c5f0:	f000 f920 	bl	800c834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c5f4:	4b59      	ldr	r3, [pc, #356]	; (800c75c <pvPortMalloc+0x184>)
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f040 8093 	bne.w	800c728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d01d      	beq.n	800c644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c608:	2208      	movs	r2, #8
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4413      	add	r3, r2
 800c60e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f003 0307 	and.w	r3, r3, #7
 800c616:	2b00      	cmp	r3, #0
 800c618:	d014      	beq.n	800c644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f023 0307 	bic.w	r3, r3, #7
 800c620:	3308      	adds	r3, #8
 800c622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f003 0307 	and.w	r3, r3, #7
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00a      	beq.n	800c644 <pvPortMalloc+0x6c>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	617b      	str	r3, [r7, #20]
}
 800c640:	bf00      	nop
 800c642:	e7fe      	b.n	800c642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d06e      	beq.n	800c728 <pvPortMalloc+0x150>
 800c64a:	4b45      	ldr	r3, [pc, #276]	; (800c760 <pvPortMalloc+0x188>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	429a      	cmp	r2, r3
 800c652:	d869      	bhi.n	800c728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c654:	4b43      	ldr	r3, [pc, #268]	; (800c764 <pvPortMalloc+0x18c>)
 800c656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c658:	4b42      	ldr	r3, [pc, #264]	; (800c764 <pvPortMalloc+0x18c>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c65e:	e004      	b.n	800c66a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	429a      	cmp	r2, r3
 800c672:	d903      	bls.n	800c67c <pvPortMalloc+0xa4>
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1f1      	bne.n	800c660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c67c:	4b36      	ldr	r3, [pc, #216]	; (800c758 <pvPortMalloc+0x180>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c682:	429a      	cmp	r2, r3
 800c684:	d050      	beq.n	800c728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c686:	6a3b      	ldr	r3, [r7, #32]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2208      	movs	r2, #8
 800c68c:	4413      	add	r3, r2
 800c68e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	6a3b      	ldr	r3, [r7, #32]
 800c696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69a:	685a      	ldr	r2, [r3, #4]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	1ad2      	subs	r2, r2, r3
 800c6a0:	2308      	movs	r3, #8
 800c6a2:	005b      	lsls	r3, r3, #1
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d91f      	bls.n	800c6e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	f003 0307 	and.w	r3, r3, #7
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00a      	beq.n	800c6d0 <pvPortMalloc+0xf8>
	__asm volatile
 800c6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	613b      	str	r3, [r7, #16]
}
 800c6cc:	bf00      	nop
 800c6ce:	e7fe      	b.n	800c6ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	685a      	ldr	r2, [r3, #4]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	1ad2      	subs	r2, r2, r3
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c6e2:	69b8      	ldr	r0, [r7, #24]
 800c6e4:	f000 f908 	bl	800c8f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c6e8:	4b1d      	ldr	r3, [pc, #116]	; (800c760 <pvPortMalloc+0x188>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	4a1b      	ldr	r2, [pc, #108]	; (800c760 <pvPortMalloc+0x188>)
 800c6f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c6f6:	4b1a      	ldr	r3, [pc, #104]	; (800c760 <pvPortMalloc+0x188>)
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	4b1b      	ldr	r3, [pc, #108]	; (800c768 <pvPortMalloc+0x190>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d203      	bcs.n	800c70a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c702:	4b17      	ldr	r3, [pc, #92]	; (800c760 <pvPortMalloc+0x188>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a18      	ldr	r2, [pc, #96]	; (800c768 <pvPortMalloc+0x190>)
 800c708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70c:	685a      	ldr	r2, [r3, #4]
 800c70e:	4b13      	ldr	r3, [pc, #76]	; (800c75c <pvPortMalloc+0x184>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	431a      	orrs	r2, r3
 800c714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71a:	2200      	movs	r2, #0
 800c71c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c71e:	4b13      	ldr	r3, [pc, #76]	; (800c76c <pvPortMalloc+0x194>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3301      	adds	r3, #1
 800c724:	4a11      	ldr	r2, [pc, #68]	; (800c76c <pvPortMalloc+0x194>)
 800c726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c728:	f7fe fbd6 	bl	800aed8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	f003 0307 	and.w	r3, r3, #7
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00a      	beq.n	800c74c <pvPortMalloc+0x174>
	__asm volatile
 800c736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	60fb      	str	r3, [r7, #12]
}
 800c748:	bf00      	nop
 800c74a:	e7fe      	b.n	800c74a <pvPortMalloc+0x172>
	return pvReturn;
 800c74c:	69fb      	ldr	r3, [r7, #28]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3728      	adds	r7, #40	; 0x28
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	20009b30 	.word	0x20009b30
 800c75c:	20009b44 	.word	0x20009b44
 800c760:	20009b34 	.word	0x20009b34
 800c764:	20009b28 	.word	0x20009b28
 800c768:	20009b38 	.word	0x20009b38
 800c76c:	20009b3c 	.word	0x20009b3c

0800c770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d04d      	beq.n	800c81e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c782:	2308      	movs	r3, #8
 800c784:	425b      	negs	r3, r3
 800c786:	697a      	ldr	r2, [r7, #20]
 800c788:	4413      	add	r3, r2
 800c78a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	685a      	ldr	r2, [r3, #4]
 800c794:	4b24      	ldr	r3, [pc, #144]	; (800c828 <vPortFree+0xb8>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4013      	ands	r3, r2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10a      	bne.n	800c7b4 <vPortFree+0x44>
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	60fb      	str	r3, [r7, #12]
}
 800c7b0:	bf00      	nop
 800c7b2:	e7fe      	b.n	800c7b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00a      	beq.n	800c7d2 <vPortFree+0x62>
	__asm volatile
 800c7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c0:	f383 8811 	msr	BASEPRI, r3
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	f3bf 8f4f 	dsb	sy
 800c7cc:	60bb      	str	r3, [r7, #8]
}
 800c7ce:	bf00      	nop
 800c7d0:	e7fe      	b.n	800c7d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	685a      	ldr	r2, [r3, #4]
 800c7d6:	4b14      	ldr	r3, [pc, #80]	; (800c828 <vPortFree+0xb8>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4013      	ands	r3, r2
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d01e      	beq.n	800c81e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d11a      	bne.n	800c81e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	4b0e      	ldr	r3, [pc, #56]	; (800c828 <vPortFree+0xb8>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	43db      	mvns	r3, r3
 800c7f2:	401a      	ands	r2, r3
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c7f8:	f7fe fb60 	bl	800aebc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	685a      	ldr	r2, [r3, #4]
 800c800:	4b0a      	ldr	r3, [pc, #40]	; (800c82c <vPortFree+0xbc>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4413      	add	r3, r2
 800c806:	4a09      	ldr	r2, [pc, #36]	; (800c82c <vPortFree+0xbc>)
 800c808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c80a:	6938      	ldr	r0, [r7, #16]
 800c80c:	f000 f874 	bl	800c8f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c810:	4b07      	ldr	r3, [pc, #28]	; (800c830 <vPortFree+0xc0>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	3301      	adds	r3, #1
 800c816:	4a06      	ldr	r2, [pc, #24]	; (800c830 <vPortFree+0xc0>)
 800c818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c81a:	f7fe fb5d 	bl	800aed8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c81e:	bf00      	nop
 800c820:	3718      	adds	r7, #24
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	20009b44 	.word	0x20009b44
 800c82c:	20009b34 	.word	0x20009b34
 800c830:	20009b40 	.word	0x20009b40

0800c834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c83a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c83e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c840:	4b27      	ldr	r3, [pc, #156]	; (800c8e0 <prvHeapInit+0xac>)
 800c842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f003 0307 	and.w	r3, r3, #7
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00c      	beq.n	800c868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	3307      	adds	r3, #7
 800c852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f023 0307 	bic.w	r3, r3, #7
 800c85a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c85c:	68ba      	ldr	r2, [r7, #8]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	4a1f      	ldr	r2, [pc, #124]	; (800c8e0 <prvHeapInit+0xac>)
 800c864:	4413      	add	r3, r2
 800c866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c86c:	4a1d      	ldr	r2, [pc, #116]	; (800c8e4 <prvHeapInit+0xb0>)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c872:	4b1c      	ldr	r3, [pc, #112]	; (800c8e4 <prvHeapInit+0xb0>)
 800c874:	2200      	movs	r2, #0
 800c876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	4413      	add	r3, r2
 800c87e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c880:	2208      	movs	r2, #8
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	1a9b      	subs	r3, r3, r2
 800c886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f023 0307 	bic.w	r3, r3, #7
 800c88e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	4a15      	ldr	r2, [pc, #84]	; (800c8e8 <prvHeapInit+0xb4>)
 800c894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c896:	4b14      	ldr	r3, [pc, #80]	; (800c8e8 <prvHeapInit+0xb4>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2200      	movs	r2, #0
 800c89c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c89e:	4b12      	ldr	r3, [pc, #72]	; (800c8e8 <prvHeapInit+0xb4>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	68fa      	ldr	r2, [r7, #12]
 800c8ae:	1ad2      	subs	r2, r2, r3
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8b4:	4b0c      	ldr	r3, [pc, #48]	; (800c8e8 <prvHeapInit+0xb4>)
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	4a0a      	ldr	r2, [pc, #40]	; (800c8ec <prvHeapInit+0xb8>)
 800c8c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	4a09      	ldr	r2, [pc, #36]	; (800c8f0 <prvHeapInit+0xbc>)
 800c8ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8cc:	4b09      	ldr	r3, [pc, #36]	; (800c8f4 <prvHeapInit+0xc0>)
 800c8ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8d2:	601a      	str	r2, [r3, #0]
}
 800c8d4:	bf00      	nop
 800c8d6:	3714      	adds	r7, #20
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	20005b28 	.word	0x20005b28
 800c8e4:	20009b28 	.word	0x20009b28
 800c8e8:	20009b30 	.word	0x20009b30
 800c8ec:	20009b38 	.word	0x20009b38
 800c8f0:	20009b34 	.word	0x20009b34
 800c8f4:	20009b44 	.word	0x20009b44

0800c8f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c900:	4b28      	ldr	r3, [pc, #160]	; (800c9a4 <prvInsertBlockIntoFreeList+0xac>)
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	e002      	b.n	800c90c <prvInsertBlockIntoFreeList+0x14>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	60fb      	str	r3, [r7, #12]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	429a      	cmp	r2, r3
 800c914:	d8f7      	bhi.n	800c906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	68ba      	ldr	r2, [r7, #8]
 800c920:	4413      	add	r3, r2
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	429a      	cmp	r2, r3
 800c926:	d108      	bne.n	800c93a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	441a      	add	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	441a      	add	r2, r3
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d118      	bne.n	800c980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	4b15      	ldr	r3, [pc, #84]	; (800c9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	429a      	cmp	r2, r3
 800c958:	d00d      	beq.n	800c976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	685a      	ldr	r2, [r3, #4]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	441a      	add	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	681a      	ldr	r2, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	601a      	str	r2, [r3, #0]
 800c974:	e008      	b.n	800c988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c976:	4b0c      	ldr	r3, [pc, #48]	; (800c9a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	e003      	b.n	800c988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d002      	beq.n	800c996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c996:	bf00      	nop
 800c998:	3714      	adds	r7, #20
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	20009b28 	.word	0x20009b28
 800c9a8:	20009b30 	.word	0x20009b30

0800c9ac <rcl_node_get_default_options>:
 800c9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ae:	b087      	sub	sp, #28
 800c9b0:	4607      	mov	r7, r0
 800c9b2:	466d      	mov	r5, sp
 800c9b4:	4668      	mov	r0, sp
 800c9b6:	f000 ff5b 	bl	800d870 <rcutils_get_default_allocator>
 800c9ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9bc:	4c08      	ldr	r4, [pc, #32]	; (800c9e0 <rcl_node_get_default_options+0x34>)
 800c9be:	f8d5 c000 	ldr.w	ip, [r5]
 800c9c2:	1d26      	adds	r6, r4, #4
 800c9c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c9c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9c8:	463d      	mov	r5, r7
 800c9ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c9cc:	f8c6 c000 	str.w	ip, [r6]
 800c9d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c9d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c9d8:	4638      	mov	r0, r7
 800c9da:	b007      	add	sp, #28
 800c9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	2000001c 	.word	0x2000001c

0800c9e4 <rcl_node_options_copy>:
 800c9e4:	b1c8      	cbz	r0, 800ca1a <rcl_node_options_copy+0x36>
 800c9e6:	b4f0      	push	{r4, r5, r6, r7}
 800c9e8:	460f      	mov	r7, r1
 800c9ea:	b199      	cbz	r1, 800ca14 <rcl_node_options_copy+0x30>
 800c9ec:	4288      	cmp	r0, r1
 800c9ee:	4606      	mov	r6, r0
 800c9f0:	d010      	beq.n	800ca14 <rcl_node_options_copy+0x30>
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	460c      	mov	r4, r1
 800c9f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9fa:	f844 3b04 	str.w	r3, [r4], #4
 800c9fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca02:	7e32      	ldrb	r2, [r6, #24]
 800ca04:	6829      	ldr	r1, [r5, #0]
 800ca06:	7e73      	ldrb	r3, [r6, #25]
 800ca08:	6021      	str	r1, [r4, #0]
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	763a      	strb	r2, [r7, #24]
 800ca0e:	767b      	strb	r3, [r7, #25]
 800ca10:	bcf0      	pop	{r4, r5, r6, r7}
 800ca12:	4770      	bx	lr
 800ca14:	200b      	movs	r0, #11
 800ca16:	bcf0      	pop	{r4, r5, r6, r7}
 800ca18:	4770      	bx	lr
 800ca1a:	200b      	movs	r0, #11
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop

0800ca20 <rcl_get_zero_initialized_publisher>:
 800ca20:	4b01      	ldr	r3, [pc, #4]	; (800ca28 <rcl_get_zero_initialized_publisher+0x8>)
 800ca22:	6818      	ldr	r0, [r3, #0]
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	080198e4 	.word	0x080198e4

0800ca2c <rcl_publisher_init>:
 800ca2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca30:	b091      	sub	sp, #68	; 0x44
 800ca32:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ca34:	b3d7      	cbz	r7, 800caac <rcl_publisher_init+0x80>
 800ca36:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	4648      	mov	r0, r9
 800ca3e:	4688      	mov	r8, r1
 800ca40:	4616      	mov	r6, r2
 800ca42:	461d      	mov	r5, r3
 800ca44:	f000 ff22 	bl	800d88c <rcutils_allocator_is_valid>
 800ca48:	b380      	cbz	r0, 800caac <rcl_publisher_init+0x80>
 800ca4a:	b37c      	cbz	r4, 800caac <rcl_publisher_init+0x80>
 800ca4c:	f8d4 a000 	ldr.w	sl, [r4]
 800ca50:	f1ba 0f00 	cmp.w	sl, #0
 800ca54:	d004      	beq.n	800ca60 <rcl_publisher_init+0x34>
 800ca56:	2564      	movs	r5, #100	; 0x64
 800ca58:	4628      	mov	r0, r5
 800ca5a:	b011      	add	sp, #68	; 0x44
 800ca5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca60:	4640      	mov	r0, r8
 800ca62:	f006 fdf9 	bl	8013658 <rcl_node_is_valid>
 800ca66:	b330      	cbz	r0, 800cab6 <rcl_publisher_init+0x8a>
 800ca68:	b306      	cbz	r6, 800caac <rcl_publisher_init+0x80>
 800ca6a:	b1fd      	cbz	r5, 800caac <rcl_publisher_init+0x80>
 800ca6c:	46ce      	mov	lr, r9
 800ca6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ca72:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800ca76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca7a:	f8de 3000 	ldr.w	r3, [lr]
 800ca7e:	f8cc 3000 	str.w	r3, [ip]
 800ca82:	f000 ff3f 	bl	800d904 <rcutils_get_zero_initialized_string_map>
 800ca86:	ab10      	add	r3, sp, #64	; 0x40
 800ca88:	4684      	mov	ip, r0
 800ca8a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ca8e:	f8cd c020 	str.w	ip, [sp, #32]
 800ca92:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ca96:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800ca9a:	4651      	mov	r1, sl
 800ca9c:	a808      	add	r0, sp, #32
 800ca9e:	f000 ffab 	bl	800d9f8 <rcutils_string_map_init>
 800caa2:	b150      	cbz	r0, 800caba <rcl_publisher_init+0x8e>
 800caa4:	280a      	cmp	r0, #10
 800caa6:	d013      	beq.n	800cad0 <rcl_publisher_init+0xa4>
 800caa8:	2501      	movs	r5, #1
 800caaa:	e7d5      	b.n	800ca58 <rcl_publisher_init+0x2c>
 800caac:	250b      	movs	r5, #11
 800caae:	4628      	mov	r0, r5
 800cab0:	b011      	add	sp, #68	; 0x44
 800cab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab6:	25c8      	movs	r5, #200	; 0xc8
 800cab8:	e7ce      	b.n	800ca58 <rcl_publisher_init+0x2c>
 800caba:	a808      	add	r0, sp, #32
 800cabc:	f006 fa02 	bl	8012ec4 <rcl_get_default_topic_name_substitutions>
 800cac0:	4682      	mov	sl, r0
 800cac2:	b138      	cbz	r0, 800cad4 <rcl_publisher_init+0xa8>
 800cac4:	a808      	add	r0, sp, #32
 800cac6:	f000 ffd7 	bl	800da78 <rcutils_string_map_fini>
 800caca:	f1ba 0f0a 	cmp.w	sl, #10
 800cace:	d1eb      	bne.n	800caa8 <rcl_publisher_init+0x7c>
 800cad0:	250a      	movs	r5, #10
 800cad2:	e7c1      	b.n	800ca58 <rcl_publisher_init+0x2c>
 800cad4:	4640      	mov	r0, r8
 800cad6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cada:	f006 fdc7 	bl	801366c <rcl_node_get_name>
 800cade:	4682      	mov	sl, r0
 800cae0:	4640      	mov	r0, r8
 800cae2:	f006 fdcb 	bl	801367c <rcl_node_get_namespace>
 800cae6:	4686      	mov	lr, r0
 800cae8:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800caec:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800caf0:	46ec      	mov	ip, sp
 800caf2:	f8cd b014 	str.w	fp, [sp, #20]
 800caf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cafa:	f8d9 3000 	ldr.w	r3, [r9]
 800cafe:	f8cc 3000 	str.w	r3, [ip]
 800cb02:	4628      	mov	r0, r5
 800cb04:	4651      	mov	r1, sl
 800cb06:	4672      	mov	r2, lr
 800cb08:	ab08      	add	r3, sp, #32
 800cb0a:	f006 f875 	bl	8012bf8 <rcl_expand_topic_name>
 800cb0e:	4605      	mov	r5, r0
 800cb10:	a808      	add	r0, sp, #32
 800cb12:	f000 ffb1 	bl	800da78 <rcutils_string_map_fini>
 800cb16:	b920      	cbnz	r0, 800cb22 <rcl_publisher_init+0xf6>
 800cb18:	b15d      	cbz	r5, 800cb32 <rcl_publisher_init+0x106>
 800cb1a:	2d67      	cmp	r5, #103	; 0x67
 800cb1c:	d002      	beq.n	800cb24 <rcl_publisher_init+0xf8>
 800cb1e:	2d69      	cmp	r5, #105	; 0x69
 800cb20:	d05f      	beq.n	800cbe2 <rcl_publisher_init+0x1b6>
 800cb22:	2501      	movs	r5, #1
 800cb24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d096      	beq.n	800ca58 <rcl_publisher_init+0x2c>
 800cb2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb2e:	4798      	blx	r3
 800cb30:	e792      	b.n	800ca58 <rcl_publisher_init+0x2c>
 800cb32:	4640      	mov	r0, r8
 800cb34:	f006 fdaa 	bl	801368c <rcl_node_get_options>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d0f2      	beq.n	800cb22 <rcl_publisher_init+0xf6>
 800cb3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb3e:	f7f3 fb59 	bl	80001f4 <strlen>
 800cb42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb44:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb46:	3001      	adds	r0, #1
 800cb48:	4798      	blx	r3
 800cb4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb4c:	9107      	str	r1, [sp, #28]
 800cb4e:	4681      	mov	r9, r0
 800cb50:	4608      	mov	r0, r1
 800cb52:	f7f3 fb4f 	bl	80001f4 <strlen>
 800cb56:	9907      	ldr	r1, [sp, #28]
 800cb58:	1c42      	adds	r2, r0, #1
 800cb5a:	4648      	mov	r0, r9
 800cb5c:	f00b fe83 	bl	8018866 <memcpy>
 800cb60:	462a      	mov	r2, r5
 800cb62:	4648      	mov	r0, r9
 800cb64:	a90a      	add	r1, sp, #40	; 0x28
 800cb66:	f001 f865 	bl	800dc34 <rmw_validate_full_topic_name>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d137      	bne.n	800cbde <rcl_publisher_init+0x1b2>
 800cb6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d138      	bne.n	800cbe6 <rcl_publisher_init+0x1ba>
 800cb74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb76:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb78:	20c0      	movs	r0, #192	; 0xc0
 800cb7a:	4798      	blx	r3
 800cb7c:	6020      	str	r0, [r4, #0]
 800cb7e:	b3a0      	cbz	r0, 800cbea <rcl_publisher_init+0x1be>
 800cb80:	4640      	mov	r0, r8
 800cb82:	f006 fd8b 	bl	801369c <rcl_node_get_rmw_handle>
 800cb86:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	4631      	mov	r1, r6
 800cb8e:	463b      	mov	r3, r7
 800cb90:	464a      	mov	r2, r9
 800cb92:	6825      	ldr	r5, [r4, #0]
 800cb94:	f001 f94e 	bl	800de34 <rmw_create_publisher>
 800cb98:	6821      	ldr	r1, [r4, #0]
 800cb9a:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800cb9e:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800cba2:	b388      	cbz	r0, 800cc08 <rcl_publisher_init+0x1dc>
 800cba4:	3168      	adds	r1, #104	; 0x68
 800cba6:	f001 fa23 	bl	800dff0 <rmw_publisher_get_actual_qos>
 800cbaa:	6823      	ldr	r3, [r4, #0]
 800cbac:	4605      	mov	r5, r0
 800cbae:	b9f0      	cbnz	r0, 800cbee <rcl_publisher_init+0x1c2>
 800cbb0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800cbb4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800cbb8:	4618      	mov	r0, r3
 800cbba:	2268      	movs	r2, #104	; 0x68
 800cbbc:	4639      	mov	r1, r7
 800cbbe:	f00b fe52 	bl	8018866 <memcpy>
 800cbc2:	f8d8 2000 	ldr.w	r2, [r8]
 800cbc6:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800cbca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbcc:	b110      	cbz	r0, 800cbd4 <rcl_publisher_init+0x1a8>
 800cbce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cbd2:	4798      	blx	r3
 800cbd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbd6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cbd8:	4648      	mov	r0, r9
 800cbda:	4798      	blx	r3
 800cbdc:	e73c      	b.n	800ca58 <rcl_publisher_init+0x2c>
 800cbde:	2501      	movs	r5, #1
 800cbe0:	e7f3      	b.n	800cbca <rcl_publisher_init+0x19e>
 800cbe2:	2567      	movs	r5, #103	; 0x67
 800cbe4:	e79e      	b.n	800cb24 <rcl_publisher_init+0xf8>
 800cbe6:	2567      	movs	r5, #103	; 0x67
 800cbe8:	e7ef      	b.n	800cbca <rcl_publisher_init+0x19e>
 800cbea:	250a      	movs	r5, #10
 800cbec:	e7ed      	b.n	800cbca <rcl_publisher_init+0x19e>
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d0f5      	beq.n	800cbde <rcl_publisher_init+0x1b2>
 800cbf2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cbf6:	b13b      	cbz	r3, 800cc08 <rcl_publisher_init+0x1dc>
 800cbf8:	4640      	mov	r0, r8
 800cbfa:	f006 fd4f 	bl	801369c <rcl_node_get_rmw_handle>
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800cc04:	f001 f9f6 	bl	800dff4 <rmw_destroy_publisher>
 800cc08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cc0c:	6820      	ldr	r0, [r4, #0]
 800cc0e:	4798      	blx	r3
 800cc10:	2300      	movs	r3, #0
 800cc12:	6023      	str	r3, [r4, #0]
 800cc14:	2501      	movs	r5, #1
 800cc16:	e7d8      	b.n	800cbca <rcl_publisher_init+0x19e>

0800cc18 <rcl_publisher_get_default_options>:
 800cc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc1a:	4f0e      	ldr	r7, [pc, #56]	; (800cc54 <rcl_publisher_get_default_options+0x3c>)
 800cc1c:	490e      	ldr	r1, [pc, #56]	; (800cc58 <rcl_publisher_get_default_options+0x40>)
 800cc1e:	b087      	sub	sp, #28
 800cc20:	4606      	mov	r6, r0
 800cc22:	2250      	movs	r2, #80	; 0x50
 800cc24:	4638      	mov	r0, r7
 800cc26:	f00b fe1e 	bl	8018866 <memcpy>
 800cc2a:	466c      	mov	r4, sp
 800cc2c:	4668      	mov	r0, sp
 800cc2e:	f000 fe1f 	bl	800d870 <rcutils_get_default_allocator>
 800cc32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc34:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800cc38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc3a:	6823      	ldr	r3, [r4, #0]
 800cc3c:	602b      	str	r3, [r5, #0]
 800cc3e:	f000 ffe1 	bl	800dc04 <rmw_get_default_publisher_options>
 800cc42:	4639      	mov	r1, r7
 800cc44:	6678      	str	r0, [r7, #100]	; 0x64
 800cc46:	2268      	movs	r2, #104	; 0x68
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f00b fe0c 	bl	8018866 <memcpy>
 800cc4e:	4630      	mov	r0, r6
 800cc50:	b007      	add	sp, #28
 800cc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc54:	20009b48 	.word	0x20009b48
 800cc58:	080198e8 	.word	0x080198e8

0800cc5c <rcl_publish>:
 800cc5c:	b1f8      	cbz	r0, 800cc9e <rcl_publish+0x42>
 800cc5e:	6803      	ldr	r3, [r0, #0]
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	4604      	mov	r4, r0
 800cc64:	b1b3      	cbz	r3, 800cc94 <rcl_publish+0x38>
 800cc66:	4616      	mov	r6, r2
 800cc68:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800cc6c:	b192      	cbz	r2, 800cc94 <rcl_publish+0x38>
 800cc6e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800cc72:	460d      	mov	r5, r1
 800cc74:	f005 ff56 	bl	8012b24 <rcl_context_is_valid>
 800cc78:	b160      	cbz	r0, 800cc94 <rcl_publish+0x38>
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800cc80:	b140      	cbz	r0, 800cc94 <rcl_publish+0x38>
 800cc82:	b155      	cbz	r5, 800cc9a <rcl_publish+0x3e>
 800cc84:	4632      	mov	r2, r6
 800cc86:	4629      	mov	r1, r5
 800cc88:	f001 f874 	bl	800dd74 <rmw_publish>
 800cc8c:	3800      	subs	r0, #0
 800cc8e:	bf18      	it	ne
 800cc90:	2001      	movne	r0, #1
 800cc92:	bd70      	pop	{r4, r5, r6, pc}
 800cc94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cc98:	bd70      	pop	{r4, r5, r6, pc}
 800cc9a:	200b      	movs	r0, #11
 800cc9c:	bd70      	pop	{r4, r5, r6, pc}
 800cc9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cca2:	4770      	bx	lr

0800cca4 <rcl_get_zero_initialized_subscription>:
 800cca4:	4b01      	ldr	r3, [pc, #4]	; (800ccac <rcl_get_zero_initialized_subscription+0x8>)
 800cca6:	6818      	ldr	r0, [r3, #0]
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	08019938 	.word	0x08019938

0800ccb0 <rcl_subscription_init>:
 800ccb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb4:	b091      	sub	sp, #68	; 0x44
 800ccb6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ccb8:	b1d7      	cbz	r7, 800ccf0 <rcl_subscription_init+0x40>
 800ccba:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	4648      	mov	r0, r9
 800ccc2:	4688      	mov	r8, r1
 800ccc4:	4616      	mov	r6, r2
 800ccc6:	461d      	mov	r5, r3
 800ccc8:	f000 fde0 	bl	800d88c <rcutils_allocator_is_valid>
 800cccc:	b180      	cbz	r0, 800ccf0 <rcl_subscription_init+0x40>
 800ccce:	b17c      	cbz	r4, 800ccf0 <rcl_subscription_init+0x40>
 800ccd0:	4640      	mov	r0, r8
 800ccd2:	f006 fcc1 	bl	8013658 <rcl_node_is_valid>
 800ccd6:	b380      	cbz	r0, 800cd3a <rcl_subscription_init+0x8a>
 800ccd8:	b156      	cbz	r6, 800ccf0 <rcl_subscription_init+0x40>
 800ccda:	b14d      	cbz	r5, 800ccf0 <rcl_subscription_init+0x40>
 800ccdc:	f8d4 a000 	ldr.w	sl, [r4]
 800cce0:	f1ba 0f00 	cmp.w	sl, #0
 800cce4:	d009      	beq.n	800ccfa <rcl_subscription_init+0x4a>
 800cce6:	2564      	movs	r5, #100	; 0x64
 800cce8:	4628      	mov	r0, r5
 800ccea:	b011      	add	sp, #68	; 0x44
 800ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf0:	250b      	movs	r5, #11
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	b011      	add	sp, #68	; 0x44
 800ccf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfa:	46ce      	mov	lr, r9
 800ccfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cd00:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800cd04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd08:	f8de 3000 	ldr.w	r3, [lr]
 800cd0c:	f8cc 3000 	str.w	r3, [ip]
 800cd10:	f000 fdf8 	bl	800d904 <rcutils_get_zero_initialized_string_map>
 800cd14:	ab10      	add	r3, sp, #64	; 0x40
 800cd16:	4684      	mov	ip, r0
 800cd18:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800cd1c:	f8cd c020 	str.w	ip, [sp, #32]
 800cd20:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cd24:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800cd28:	4651      	mov	r1, sl
 800cd2a:	a808      	add	r0, sp, #32
 800cd2c:	f000 fe64 	bl	800d9f8 <rcutils_string_map_init>
 800cd30:	b140      	cbz	r0, 800cd44 <rcl_subscription_init+0x94>
 800cd32:	280a      	cmp	r0, #10
 800cd34:	d011      	beq.n	800cd5a <rcl_subscription_init+0xaa>
 800cd36:	2501      	movs	r5, #1
 800cd38:	e7db      	b.n	800ccf2 <rcl_subscription_init+0x42>
 800cd3a:	25c8      	movs	r5, #200	; 0xc8
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	b011      	add	sp, #68	; 0x44
 800cd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd44:	a808      	add	r0, sp, #32
 800cd46:	f006 f8bd 	bl	8012ec4 <rcl_get_default_topic_name_substitutions>
 800cd4a:	4682      	mov	sl, r0
 800cd4c:	b138      	cbz	r0, 800cd5e <rcl_subscription_init+0xae>
 800cd4e:	a808      	add	r0, sp, #32
 800cd50:	f000 fe92 	bl	800da78 <rcutils_string_map_fini>
 800cd54:	f1ba 0f0a 	cmp.w	sl, #10
 800cd58:	d1ed      	bne.n	800cd36 <rcl_subscription_init+0x86>
 800cd5a:	250a      	movs	r5, #10
 800cd5c:	e7c9      	b.n	800ccf2 <rcl_subscription_init+0x42>
 800cd5e:	4640      	mov	r0, r8
 800cd60:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cd64:	f006 fc82 	bl	801366c <rcl_node_get_name>
 800cd68:	4682      	mov	sl, r0
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	f006 fc86 	bl	801367c <rcl_node_get_namespace>
 800cd70:	4686      	mov	lr, r0
 800cd72:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800cd76:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800cd7a:	46ec      	mov	ip, sp
 800cd7c:	f8cd b014 	str.w	fp, [sp, #20]
 800cd80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd84:	f8d9 3000 	ldr.w	r3, [r9]
 800cd88:	f8cc 3000 	str.w	r3, [ip]
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	4651      	mov	r1, sl
 800cd90:	4672      	mov	r2, lr
 800cd92:	ab08      	add	r3, sp, #32
 800cd94:	f005 ff30 	bl	8012bf8 <rcl_expand_topic_name>
 800cd98:	4605      	mov	r5, r0
 800cd9a:	a808      	add	r0, sp, #32
 800cd9c:	f000 fe6c 	bl	800da78 <rcutils_string_map_fini>
 800cda0:	b920      	cbnz	r0, 800cdac <rcl_subscription_init+0xfc>
 800cda2:	b15d      	cbz	r5, 800cdbc <rcl_subscription_init+0x10c>
 800cda4:	2d67      	cmp	r5, #103	; 0x67
 800cda6:	d002      	beq.n	800cdae <rcl_subscription_init+0xfe>
 800cda8:	2d69      	cmp	r5, #105	; 0x69
 800cdaa:	d05a      	beq.n	800ce62 <rcl_subscription_init+0x1b2>
 800cdac:	2501      	movs	r5, #1
 800cdae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	d09e      	beq.n	800ccf2 <rcl_subscription_init+0x42>
 800cdb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdb6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cdb8:	4798      	blx	r3
 800cdba:	e79a      	b.n	800ccf2 <rcl_subscription_init+0x42>
 800cdbc:	4640      	mov	r0, r8
 800cdbe:	f006 fc65 	bl	801368c <rcl_node_get_options>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d0f2      	beq.n	800cdac <rcl_subscription_init+0xfc>
 800cdc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdc8:	f7f3 fa14 	bl	80001f4 <strlen>
 800cdcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	4798      	blx	r3
 800cdd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdd6:	9107      	str	r1, [sp, #28]
 800cdd8:	4681      	mov	r9, r0
 800cdda:	4608      	mov	r0, r1
 800cddc:	f7f3 fa0a 	bl	80001f4 <strlen>
 800cde0:	9907      	ldr	r1, [sp, #28]
 800cde2:	1c42      	adds	r2, r0, #1
 800cde4:	4648      	mov	r0, r9
 800cde6:	f00b fd3e 	bl	8018866 <memcpy>
 800cdea:	462a      	mov	r2, r5
 800cdec:	4648      	mov	r0, r9
 800cdee:	a90a      	add	r1, sp, #40	; 0x28
 800cdf0:	f000 ff20 	bl	800dc34 <rmw_validate_full_topic_name>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	d132      	bne.n	800ce5e <rcl_subscription_init+0x1ae>
 800cdf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d133      	bne.n	800ce66 <rcl_subscription_init+0x1b6>
 800cdfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce00:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce02:	20c8      	movs	r0, #200	; 0xc8
 800ce04:	4798      	blx	r3
 800ce06:	6020      	str	r0, [r4, #0]
 800ce08:	b378      	cbz	r0, 800ce6a <rcl_subscription_init+0x1ba>
 800ce0a:	4640      	mov	r0, r8
 800ce0c:	f006 fc46 	bl	801369c <rcl_node_get_rmw_handle>
 800ce10:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	4631      	mov	r1, r6
 800ce18:	463b      	mov	r3, r7
 800ce1a:	464a      	mov	r2, r9
 800ce1c:	6825      	ldr	r5, [r4, #0]
 800ce1e:	f001 f939 	bl	800e094 <rmw_create_subscription>
 800ce22:	6821      	ldr	r1, [r4, #0]
 800ce24:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800ce28:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800ce2c:	b368      	cbz	r0, 800ce8a <rcl_subscription_init+0x1da>
 800ce2e:	3170      	adds	r1, #112	; 0x70
 800ce30:	f001 fa10 	bl	800e254 <rmw_subscription_get_actual_qos>
 800ce34:	4605      	mov	r5, r0
 800ce36:	b9d0      	cbnz	r0, 800ce6e <rcl_subscription_init+0x1be>
 800ce38:	6820      	ldr	r0, [r4, #0]
 800ce3a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ce3e:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800ce42:	2270      	movs	r2, #112	; 0x70
 800ce44:	4639      	mov	r1, r7
 800ce46:	f00b fd0e 	bl	8018866 <memcpy>
 800ce4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce4c:	b110      	cbz	r0, 800ce54 <rcl_subscription_init+0x1a4>
 800ce4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce52:	4798      	blx	r3
 800ce54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce56:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce58:	4648      	mov	r0, r9
 800ce5a:	4798      	blx	r3
 800ce5c:	e749      	b.n	800ccf2 <rcl_subscription_init+0x42>
 800ce5e:	2501      	movs	r5, #1
 800ce60:	e7f3      	b.n	800ce4a <rcl_subscription_init+0x19a>
 800ce62:	2567      	movs	r5, #103	; 0x67
 800ce64:	e7a3      	b.n	800cdae <rcl_subscription_init+0xfe>
 800ce66:	2567      	movs	r5, #103	; 0x67
 800ce68:	e7ef      	b.n	800ce4a <rcl_subscription_init+0x19a>
 800ce6a:	250a      	movs	r5, #10
 800ce6c:	e7ed      	b.n	800ce4a <rcl_subscription_init+0x19a>
 800ce6e:	6823      	ldr	r3, [r4, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d0f4      	beq.n	800ce5e <rcl_subscription_init+0x1ae>
 800ce74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ce78:	b13b      	cbz	r3, 800ce8a <rcl_subscription_init+0x1da>
 800ce7a:	4640      	mov	r0, r8
 800ce7c:	f006 fc0e 	bl	801369c <rcl_node_get_rmw_handle>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800ce86:	f001 f9e7 	bl	800e258 <rmw_destroy_subscription>
 800ce8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce8c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce8e:	6820      	ldr	r0, [r4, #0]
 800ce90:	4798      	blx	r3
 800ce92:	2300      	movs	r3, #0
 800ce94:	6023      	str	r3, [r4, #0]
 800ce96:	2501      	movs	r5, #1
 800ce98:	e7d7      	b.n	800ce4a <rcl_subscription_init+0x19a>
 800ce9a:	bf00      	nop

0800ce9c <rcl_subscription_get_default_options>:
 800ce9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea0:	4f12      	ldr	r7, [pc, #72]	; (800ceec <rcl_subscription_get_default_options+0x50>)
 800cea2:	4913      	ldr	r1, [pc, #76]	; (800cef0 <rcl_subscription_get_default_options+0x54>)
 800cea4:	b088      	sub	sp, #32
 800cea6:	4606      	mov	r6, r0
 800cea8:	2250      	movs	r2, #80	; 0x50
 800ceaa:	4638      	mov	r0, r7
 800ceac:	f00b fcdb 	bl	8018866 <memcpy>
 800ceb0:	ac02      	add	r4, sp, #8
 800ceb2:	a802      	add	r0, sp, #8
 800ceb4:	f000 fcdc 	bl	800d870 <rcutils_get_default_allocator>
 800ceb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ceba:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800cebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cec0:	46e8      	mov	r8, sp
 800cec2:	6823      	ldr	r3, [r4, #0]
 800cec4:	602b      	str	r3, [r5, #0]
 800cec6:	4640      	mov	r0, r8
 800cec8:	f000 fe9e 	bl	800dc08 <rmw_get_default_subscription_options>
 800cecc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ced0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ced4:	e883 0003 	stmia.w	r3, {r0, r1}
 800ced8:	2270      	movs	r2, #112	; 0x70
 800ceda:	4639      	mov	r1, r7
 800cedc:	4630      	mov	r0, r6
 800cede:	f00b fcc2 	bl	8018866 <memcpy>
 800cee2:	4630      	mov	r0, r6
 800cee4:	b008      	add	sp, #32
 800cee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceea:	bf00      	nop
 800ceec:	20009bb0 	.word	0x20009bb0
 800cef0:	08019940 	.word	0x08019940

0800cef4 <rcl_take>:
 800cef4:	2800      	cmp	r0, #0
 800cef6:	d03f      	beq.n	800cf78 <rcl_take+0x84>
 800cef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cefc:	4617      	mov	r7, r2
 800cefe:	6802      	ldr	r2, [r0, #0]
 800cf00:	b09d      	sub	sp, #116	; 0x74
 800cf02:	4606      	mov	r6, r0
 800cf04:	b382      	cbz	r2, 800cf68 <rcl_take+0x74>
 800cf06:	4699      	mov	r9, r3
 800cf08:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800cf0c:	b363      	cbz	r3, 800cf68 <rcl_take+0x74>
 800cf0e:	4688      	mov	r8, r1
 800cf10:	b381      	cbz	r1, 800cf74 <rcl_take+0x80>
 800cf12:	2f00      	cmp	r7, #0
 800cf14:	d034      	beq.n	800cf80 <rcl_take+0x8c>
 800cf16:	a802      	add	r0, sp, #8
 800cf18:	ac02      	add	r4, sp, #8
 800cf1a:	f000 fe79 	bl	800dc10 <rmw_get_zero_initialized_message_info>
 800cf1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf20:	463d      	mov	r5, r7
 800cf22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cf2c:	6834      	ldr	r4, [r6, #0]
 800cf2e:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800cf32:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800cf36:	2400      	movs	r4, #0
 800cf38:	463b      	mov	r3, r7
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	f8cd 9000 	str.w	r9, [sp]
 800cf40:	4641      	mov	r1, r8
 800cf42:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800cf46:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800cf4a:	f001 f9e3 	bl	800e314 <rmw_take_with_info>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	b9c0      	cbnz	r0, 800cf84 <rcl_take+0x90>
 800cf52:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800cf56:	f240 1291 	movw	r2, #401	; 0x191
 800cf5a:	2900      	cmp	r1, #0
 800cf5c:	bf08      	it	eq
 800cf5e:	4613      	moveq	r3, r2
 800cf60:	4618      	mov	r0, r3
 800cf62:	b01d      	add	sp, #116	; 0x74
 800cf64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf68:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	b01d      	add	sp, #116	; 0x74
 800cf70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf74:	230b      	movs	r3, #11
 800cf76:	e7f3      	b.n	800cf60 <rcl_take+0x6c>
 800cf78:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	4770      	bx	lr
 800cf80:	af10      	add	r7, sp, #64	; 0x40
 800cf82:	e7c8      	b.n	800cf16 <rcl_take+0x22>
 800cf84:	f005 fdb0 	bl	8012ae8 <rcl_convert_rmw_ret_to_rcl_ret>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	e7e9      	b.n	800cf60 <rcl_take+0x6c>

0800cf8c <rcl_subscription_get_rmw_handle>:
 800cf8c:	b118      	cbz	r0, 800cf96 <rcl_subscription_get_rmw_handle+0xa>
 800cf8e:	6800      	ldr	r0, [r0, #0]
 800cf90:	b108      	cbz	r0, 800cf96 <rcl_subscription_get_rmw_handle+0xa>
 800cf92:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800cf96:	4770      	bx	lr

0800cf98 <_rclc_check_for_new_data>:
 800cf98:	b1e0      	cbz	r0, 800cfd4 <_rclc_check_for_new_data+0x3c>
 800cf9a:	7803      	ldrb	r3, [r0, #0]
 800cf9c:	2b08      	cmp	r3, #8
 800cf9e:	d81b      	bhi.n	800cfd8 <_rclc_check_for_new_data+0x40>
 800cfa0:	e8df f003 	tbb	[pc, r3]
 800cfa4:	12161010 	.word	0x12161010
 800cfa8:	05050512 	.word	0x05050512
 800cfac:	14          	.byte	0x14
 800cfad:	00          	.byte	0x00
 800cfae:	6a0b      	ldr	r3, [r1, #32]
 800cfb0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb6:	3b00      	subs	r3, #0
 800cfb8:	bf18      	it	ne
 800cfba:	2301      	movne	r3, #1
 800cfbc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	4770      	bx	lr
 800cfc4:	680b      	ldr	r3, [r1, #0]
 800cfc6:	e7f3      	b.n	800cfb0 <_rclc_check_for_new_data+0x18>
 800cfc8:	698b      	ldr	r3, [r1, #24]
 800cfca:	e7f1      	b.n	800cfb0 <_rclc_check_for_new_data+0x18>
 800cfcc:	688b      	ldr	r3, [r1, #8]
 800cfce:	e7ef      	b.n	800cfb0 <_rclc_check_for_new_data+0x18>
 800cfd0:	690b      	ldr	r3, [r1, #16]
 800cfd2:	e7ed      	b.n	800cfb0 <_rclc_check_for_new_data+0x18>
 800cfd4:	200b      	movs	r0, #11
 800cfd6:	4770      	bx	lr
 800cfd8:	2300      	movs	r3, #0
 800cfda:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800cfde:	2001      	movs	r0, #1
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop

0800cfe4 <_rclc_take_new_data>:
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	d049      	beq.n	800d07c <_rclc_take_new_data+0x98>
 800cfe8:	b510      	push	{r4, lr}
 800cfea:	7803      	ldrb	r3, [r0, #0]
 800cfec:	b08e      	sub	sp, #56	; 0x38
 800cfee:	4604      	mov	r4, r0
 800cff0:	2b08      	cmp	r3, #8
 800cff2:	d84a      	bhi.n	800d08a <_rclc_take_new_data+0xa6>
 800cff4:	e8df f003 	tbb	[pc, r3]
 800cff8:	2b121515 	.word	0x2b121515
 800cffc:	0505052b 	.word	0x0505052b
 800d000:	12          	.byte	0x12
 800d001:	00          	.byte	0x00
 800d002:	6a0b      	ldr	r3, [r1, #32]
 800d004:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d00a:	b13b      	cbz	r3, 800d01c <_rclc_take_new_data+0x38>
 800d00c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d010:	f104 0110 	add.w	r1, r4, #16
 800d014:	f006 fc42 	bl	801389c <rcl_take_request>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d131      	bne.n	800d080 <_rclc_take_new_data+0x9c>
 800d01c:	2000      	movs	r0, #0
 800d01e:	b00e      	add	sp, #56	; 0x38
 800d020:	bd10      	pop	{r4, pc}
 800d022:	680b      	ldr	r3, [r1, #0]
 800d024:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d0f6      	beq.n	800d01c <_rclc_take_new_data+0x38>
 800d02e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d032:	2300      	movs	r3, #0
 800d034:	aa02      	add	r2, sp, #8
 800d036:	f7ff ff5d 	bl	800cef4 <rcl_take>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	d0ef      	beq.n	800d01e <_rclc_take_new_data+0x3a>
 800d03e:	f240 1391 	movw	r3, #401	; 0x191
 800d042:	4298      	cmp	r0, r3
 800d044:	d115      	bne.n	800d072 <_rclc_take_new_data+0x8e>
 800d046:	2300      	movs	r3, #0
 800d048:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800d04c:	e7e7      	b.n	800d01e <_rclc_take_new_data+0x3a>
 800d04e:	698b      	ldr	r3, [r1, #24]
 800d050:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d0e0      	beq.n	800d01c <_rclc_take_new_data+0x38>
 800d05a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d05e:	f104 0110 	add.w	r1, r4, #16
 800d062:	f005 fd05 	bl	8012a70 <rcl_take_response>
 800d066:	2800      	cmp	r0, #0
 800d068:	d0d8      	beq.n	800d01c <_rclc_take_new_data+0x38>
 800d06a:	f240 13f5 	movw	r3, #501	; 0x1f5
 800d06e:	4298      	cmp	r0, r3
 800d070:	d0d5      	beq.n	800d01e <_rclc_take_new_data+0x3a>
 800d072:	9001      	str	r0, [sp, #4]
 800d074:	f000 fc2e 	bl	800d8d4 <rcutils_reset_error>
 800d078:	9801      	ldr	r0, [sp, #4]
 800d07a:	e7d0      	b.n	800d01e <_rclc_take_new_data+0x3a>
 800d07c:	200b      	movs	r0, #11
 800d07e:	4770      	bx	lr
 800d080:	f240 2359 	movw	r3, #601	; 0x259
 800d084:	4298      	cmp	r0, r3
 800d086:	d0de      	beq.n	800d046 <_rclc_take_new_data+0x62>
 800d088:	e7f3      	b.n	800d072 <_rclc_take_new_data+0x8e>
 800d08a:	2001      	movs	r0, #1
 800d08c:	e7c7      	b.n	800d01e <_rclc_take_new_data+0x3a>
 800d08e:	bf00      	nop

0800d090 <rclc_executor_trigger_any>:
 800d090:	b170      	cbz	r0, 800d0b0 <rclc_executor_trigger_any+0x20>
 800d092:	b179      	cbz	r1, 800d0b4 <rclc_executor_trigger_any+0x24>
 800d094:	4603      	mov	r3, r0
 800d096:	2200      	movs	r2, #0
 800d098:	e005      	b.n	800d0a6 <rclc_executor_trigger_any+0x16>
 800d09a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800d09e:	3340      	adds	r3, #64	; 0x40
 800d0a0:	b930      	cbnz	r0, 800d0b0 <rclc_executor_trigger_any+0x20>
 800d0a2:	4291      	cmp	r1, r2
 800d0a4:	d005      	beq.n	800d0b2 <rclc_executor_trigger_any+0x22>
 800d0a6:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800d0aa:	3201      	adds	r2, #1
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d1f4      	bne.n	800d09a <rclc_executor_trigger_any+0xa>
 800d0b0:	4770      	bx	lr
 800d0b2:	4770      	bx	lr
 800d0b4:	4608      	mov	r0, r1
 800d0b6:	e7fb      	b.n	800d0b0 <rclc_executor_trigger_any+0x20>

0800d0b8 <_rclc_execute.part.0>:
 800d0b8:	b530      	push	{r4, r5, lr}
 800d0ba:	7803      	ldrb	r3, [r0, #0]
 800d0bc:	b083      	sub	sp, #12
 800d0be:	4604      	mov	r4, r0
 800d0c0:	2b08      	cmp	r3, #8
 800d0c2:	d85b      	bhi.n	800d17c <_rclc_execute.part.0+0xc4>
 800d0c4:	e8df f003 	tbb	[pc, r3]
 800d0c8:	3036271f 	.word	0x3036271f
 800d0cc:	0505053f 	.word	0x0505053f
 800d0d0:	1a          	.byte	0x1a
 800d0d1:	00          	.byte	0x00
 800d0d2:	2b06      	cmp	r3, #6
 800d0d4:	d049      	beq.n	800d16a <_rclc_execute.part.0+0xb2>
 800d0d6:	2b07      	cmp	r3, #7
 800d0d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d0da:	d140      	bne.n	800d15e <_rclc_execute.part.0+0xa6>
 800d0dc:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800d0e0:	6880      	ldr	r0, [r0, #8]
 800d0e2:	4798      	blx	r3
 800d0e4:	f104 0110 	add.w	r1, r4, #16
 800d0e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d0ea:	6860      	ldr	r0, [r4, #4]
 800d0ec:	f006 fc0e 	bl	801390c <rcl_send_response>
 800d0f0:	b138      	cbz	r0, 800d102 <_rclc_execute.part.0+0x4a>
 800d0f2:	9001      	str	r0, [sp, #4]
 800d0f4:	f000 fbee 	bl	800d8d4 <rcutils_reset_error>
 800d0f8:	9801      	ldr	r0, [sp, #4]
 800d0fa:	e002      	b.n	800d102 <_rclc_execute.part.0+0x4a>
 800d0fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d0fe:	4798      	blx	r3
 800d100:	2000      	movs	r0, #0
 800d102:	b003      	add	sp, #12
 800d104:	bd30      	pop	{r4, r5, pc}
 800d106:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800d10a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d10c:	b96d      	cbnz	r5, 800d12a <_rclc_execute.part.0+0x72>
 800d10e:	4628      	mov	r0, r5
 800d110:	4798      	blx	r3
 800d112:	4628      	mov	r0, r5
 800d114:	e7f5      	b.n	800d102 <_rclc_execute.part.0+0x4a>
 800d116:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800d11a:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800d11e:	b1d5      	cbz	r5, 800d156 <_rclc_execute.part.0+0x9e>
 800d120:	6880      	ldr	r0, [r0, #8]
 800d122:	4798      	blx	r3
 800d124:	2000      	movs	r0, #0
 800d126:	e7ec      	b.n	800d102 <_rclc_execute.part.0+0x4a>
 800d128:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d12a:	68a0      	ldr	r0, [r4, #8]
 800d12c:	4798      	blx	r3
 800d12e:	2000      	movs	r0, #0
 800d130:	b003      	add	sp, #12
 800d132:	bd30      	pop	{r4, r5, pc}
 800d134:	6840      	ldr	r0, [r0, #4]
 800d136:	f006 fca3 	bl	8013a80 <rcl_timer_call>
 800d13a:	f240 3321 	movw	r3, #801	; 0x321
 800d13e:	4298      	cmp	r0, r3
 800d140:	d1d6      	bne.n	800d0f0 <_rclc_execute.part.0+0x38>
 800d142:	2000      	movs	r0, #0
 800d144:	e7dd      	b.n	800d102 <_rclc_execute.part.0+0x4a>
 800d146:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d148:	6880      	ldr	r0, [r0, #8]
 800d14a:	f104 0110 	add.w	r1, r4, #16
 800d14e:	4798      	blx	r3
 800d150:	2000      	movs	r0, #0
 800d152:	b003      	add	sp, #12
 800d154:	bd30      	pop	{r4, r5, pc}
 800d156:	4628      	mov	r0, r5
 800d158:	4798      	blx	r3
 800d15a:	4628      	mov	r0, r5
 800d15c:	e7d1      	b.n	800d102 <_rclc_execute.part.0+0x4a>
 800d15e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d160:	6880      	ldr	r0, [r0, #8]
 800d162:	4798      	blx	r3
 800d164:	f104 0110 	add.w	r1, r4, #16
 800d168:	e7be      	b.n	800d0e8 <_rclc_execute.part.0+0x30>
 800d16a:	f100 0110 	add.w	r1, r0, #16
 800d16e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d170:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d172:	6880      	ldr	r0, [r0, #8]
 800d174:	9101      	str	r1, [sp, #4]
 800d176:	4798      	blx	r3
 800d178:	9901      	ldr	r1, [sp, #4]
 800d17a:	e7b5      	b.n	800d0e8 <_rclc_execute.part.0+0x30>
 800d17c:	2001      	movs	r0, #1
 800d17e:	e7c0      	b.n	800d102 <_rclc_execute.part.0+0x4a>

0800d180 <rclc_executor_init>:
 800d180:	2800      	cmp	r0, #0
 800d182:	d063      	beq.n	800d24c <rclc_executor_init+0xcc>
 800d184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d188:	460f      	mov	r7, r1
 800d18a:	b0ae      	sub	sp, #184	; 0xb8
 800d18c:	2900      	cmp	r1, #0
 800d18e:	d055      	beq.n	800d23c <rclc_executor_init+0xbc>
 800d190:	4605      	mov	r5, r0
 800d192:	4618      	mov	r0, r3
 800d194:	4616      	mov	r6, r2
 800d196:	4698      	mov	r8, r3
 800d198:	f000 fb78 	bl	800d88c <rcutils_allocator_is_valid>
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d04d      	beq.n	800d23c <rclc_executor_init+0xbc>
 800d1a0:	2e00      	cmp	r6, #0
 800d1a2:	d04b      	beq.n	800d23c <rclc_executor_init+0xbc>
 800d1a4:	492e      	ldr	r1, [pc, #184]	; (800d260 <rclc_executor_init+0xe0>)
 800d1a6:	2280      	movs	r2, #128	; 0x80
 800d1a8:	a80e      	add	r0, sp, #56	; 0x38
 800d1aa:	f00b fb5c 	bl	8018866 <memcpy>
 800d1ae:	2400      	movs	r4, #0
 800d1b0:	a90e      	add	r1, sp, #56	; 0x38
 800d1b2:	2280      	movs	r2, #128	; 0x80
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f00b fb56 	bl	8018866 <memcpy>
 800d1ba:	602f      	str	r7, [r5, #0]
 800d1bc:	4668      	mov	r0, sp
 800d1be:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800d1c2:	466f      	mov	r7, sp
 800d1c4:	f006 feb6 	bl	8013f34 <rcl_get_zero_initialized_wait_set>
 800d1c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d1ca:	f105 0c14 	add.w	ip, r5, #20
 800d1ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1d2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d1d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d1da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1de:	a31e      	add	r3, pc, #120	; (adr r3, 800d258 <rclc_executor_init+0xd8>)
 800d1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	f8cc 1000 	str.w	r1, [ip]
 800d1ea:	f8d8 7000 	ldr.w	r7, [r8]
 800d1ee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d1f2:	f8c5 8010 	str.w	r8, [r5, #16]
 800d1f6:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800d1fa:	01b0      	lsls	r0, r6, #6
 800d1fc:	47b8      	blx	r7
 800d1fe:	6068      	str	r0, [r5, #4]
 800d200:	b908      	cbnz	r0, 800d206 <rclc_executor_init+0x86>
 800d202:	e025      	b.n	800d250 <rclc_executor_init+0xd0>
 800d204:	6868      	ldr	r0, [r5, #4]
 800d206:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d20a:	4631      	mov	r1, r6
 800d20c:	3401      	adds	r4, #1
 800d20e:	f000 fa01 	bl	800d614 <rclc_executor_handle_init>
 800d212:	42a6      	cmp	r6, r4
 800d214:	d1f6      	bne.n	800d204 <rclc_executor_init+0x84>
 800d216:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800d21a:	f000 f9ef 	bl	800d5fc <rclc_executor_handle_counters_zero_init>
 800d21e:	686b      	ldr	r3, [r5, #4]
 800d220:	4a10      	ldr	r2, [pc, #64]	; (800d264 <rclc_executor_init+0xe4>)
 800d222:	672a      	str	r2, [r5, #112]	; 0x70
 800d224:	2000      	movs	r0, #0
 800d226:	6768      	str	r0, [r5, #116]	; 0x74
 800d228:	b163      	cbz	r3, 800d244 <rclc_executor_init+0xc4>
 800d22a:	692b      	ldr	r3, [r5, #16]
 800d22c:	b153      	cbz	r3, 800d244 <rclc_executor_init+0xc4>
 800d22e:	68ab      	ldr	r3, [r5, #8]
 800d230:	b143      	cbz	r3, 800d244 <rclc_executor_init+0xc4>
 800d232:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800d236:	b02e      	add	sp, #184	; 0xb8
 800d238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d23c:	200b      	movs	r0, #11
 800d23e:	b02e      	add	sp, #184	; 0xb8
 800d240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d244:	4618      	mov	r0, r3
 800d246:	b02e      	add	sp, #184	; 0xb8
 800d248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d24c:	200b      	movs	r0, #11
 800d24e:	4770      	bx	lr
 800d250:	200a      	movs	r0, #10
 800d252:	e7f4      	b.n	800d23e <rclc_executor_init+0xbe>
 800d254:	f3af 8000 	nop.w
 800d258:	3b9aca00 	.word	0x3b9aca00
 800d25c:	00000000 	.word	0x00000000
 800d260:	08019990 	.word	0x08019990
 800d264:	0800d091 	.word	0x0800d091

0800d268 <rclc_executor_add_subscription>:
 800d268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d26c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800d270:	b358      	cbz	r0, 800d2ca <rclc_executor_add_subscription+0x62>
 800d272:	b351      	cbz	r1, 800d2ca <rclc_executor_add_subscription+0x62>
 800d274:	b34a      	cbz	r2, 800d2ca <rclc_executor_add_subscription+0x62>
 800d276:	b343      	cbz	r3, 800d2ca <rclc_executor_add_subscription+0x62>
 800d278:	4604      	mov	r4, r0
 800d27a:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800d27e:	4285      	cmp	r5, r0
 800d280:	d302      	bcc.n	800d288 <rclc_executor_add_subscription+0x20>
 800d282:	2001      	movs	r0, #1
 800d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d288:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800d28c:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800d290:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800d294:	f04f 0c00 	mov.w	ip, #0
 800d298:	f80e c008 	strb.w	ip, [lr, r8]
 800d29c:	2001      	movs	r0, #1
 800d29e:	3501      	adds	r5, #1
 800d2a0:	f104 0814 	add.w	r8, r4, #20
 800d2a4:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800d2a8:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800d2ac:	6333      	str	r3, [r6, #48]	; 0x30
 800d2ae:	7077      	strb	r7, [r6, #1]
 800d2b0:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800d2b4:	4640      	mov	r0, r8
 800d2b6:	60e5      	str	r5, [r4, #12]
 800d2b8:	f006 fe4e 	bl	8013f58 <rcl_wait_set_is_valid>
 800d2bc:	b940      	cbnz	r0, 800d2d0 <rclc_executor_add_subscription+0x68>
 800d2be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	64a3      	str	r3, [r4, #72]	; 0x48
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ca:	200b      	movs	r0, #11
 800d2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	f006 fe47 	bl	8013f64 <rcl_wait_set_fini>
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	d0f1      	beq.n	800d2be <rclc_executor_add_subscription+0x56>
 800d2da:	e7d3      	b.n	800d284 <rclc_executor_add_subscription+0x1c>

0800d2dc <rclc_executor_prepare>:
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d03d      	beq.n	800d35c <rclc_executor_prepare+0x80>
 800d2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e4:	f100 0814 	add.w	r8, r0, #20
 800d2e8:	b09a      	sub	sp, #104	; 0x68
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	4640      	mov	r0, r8
 800d2ee:	f006 fe33 	bl	8013f58 <rcl_wait_set_is_valid>
 800d2f2:	b118      	cbz	r0, 800d2fc <rclc_executor_prepare+0x20>
 800d2f4:	2000      	movs	r0, #0
 800d2f6:	b01a      	add	sp, #104	; 0x68
 800d2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2fc:	4640      	mov	r0, r8
 800d2fe:	f006 fe31 	bl	8013f64 <rcl_wait_set_fini>
 800d302:	2800      	cmp	r0, #0
 800d304:	d127      	bne.n	800d356 <rclc_executor_prepare+0x7a>
 800d306:	a80c      	add	r0, sp, #48	; 0x30
 800d308:	ad0c      	add	r5, sp, #48	; 0x30
 800d30a:	f006 fe13 	bl	8013f34 <rcl_get_zero_initialized_wait_set>
 800d30e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d310:	4646      	mov	r6, r8
 800d312:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d316:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d31a:	6927      	ldr	r7, [r4, #16]
 800d31c:	682d      	ldr	r5, [r5, #0]
 800d31e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d320:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d322:	6035      	str	r5, [r6, #0]
 800d324:	ad04      	add	r5, sp, #16
 800d326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d328:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800d32c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d32e:	6826      	ldr	r6, [r4, #0]
 800d330:	6838      	ldr	r0, [r7, #0]
 800d332:	6028      	str	r0, [r5, #0]
 800d334:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800d338:	e9cd 3200 	strd	r3, r2, [sp]
 800d33c:	4640      	mov	r0, r8
 800d33e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d340:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800d342:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d344:	f007 f92c 	bl	80145a0 <rcl_wait_set_init>
 800d348:	2800      	cmp	r0, #0
 800d34a:	d0d4      	beq.n	800d2f6 <rclc_executor_prepare+0x1a>
 800d34c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d34e:	f000 fac1 	bl	800d8d4 <rcutils_reset_error>
 800d352:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d354:	e7cf      	b.n	800d2f6 <rclc_executor_prepare+0x1a>
 800d356:	f000 fabd 	bl	800d8d4 <rcutils_reset_error>
 800d35a:	e7d4      	b.n	800d306 <rclc_executor_prepare+0x2a>
 800d35c:	200b      	movs	r0, #11
 800d35e:	4770      	bx	lr

0800d360 <rclc_executor_spin_some.part.0>:
 800d360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d364:	f100 0814 	add.w	r8, r0, #20
 800d368:	b083      	sub	sp, #12
 800d36a:	4692      	mov	sl, r2
 800d36c:	4699      	mov	r9, r3
 800d36e:	4605      	mov	r5, r0
 800d370:	f7ff ffb4 	bl	800d2dc <rclc_executor_prepare>
 800d374:	4640      	mov	r0, r8
 800d376:	f006 fec1 	bl	80140fc <rcl_wait_set_clear>
 800d37a:	4607      	mov	r7, r0
 800d37c:	2800      	cmp	r0, #0
 800d37e:	f040 80be 	bne.w	800d4fe <rclc_executor_spin_some.part.0+0x19e>
 800d382:	68ab      	ldr	r3, [r5, #8]
 800d384:	4604      	mov	r4, r0
 800d386:	b1eb      	cbz	r3, 800d3c4 <rclc_executor_spin_some.part.0+0x64>
 800d388:	686e      	ldr	r6, [r5, #4]
 800d38a:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800d38e:	01a2      	lsls	r2, r4, #6
 800d390:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800d394:	b1b3      	cbz	r3, 800d3c4 <rclc_executor_spin_some.part.0+0x64>
 800d396:	5cb3      	ldrb	r3, [r6, r2]
 800d398:	2b08      	cmp	r3, #8
 800d39a:	f200 80a9 	bhi.w	800d4f0 <rclc_executor_spin_some.part.0+0x190>
 800d39e:	e8df f003 	tbb	[pc, r3]
 800d3a2:	8989      	.short	0x8989
 800d3a4:	057b7b93 	.word	0x057b7b93
 800d3a8:	0505      	.short	0x0505
 800d3aa:	9d          	.byte	0x9d
 800d3ab:	00          	.byte	0x00
 800d3ac:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d3b0:	4640      	mov	r0, r8
 800d3b2:	6849      	ldr	r1, [r1, #4]
 800d3b4:	f007 fa0a 	bl	80147cc <rcl_wait_set_add_service>
 800d3b8:	2800      	cmp	r0, #0
 800d3ba:	d175      	bne.n	800d4a8 <rclc_executor_spin_some.part.0+0x148>
 800d3bc:	68ab      	ldr	r3, [r5, #8]
 800d3be:	3401      	adds	r4, #1
 800d3c0:	429c      	cmp	r4, r3
 800d3c2:	d3e1      	bcc.n	800d388 <rclc_executor_spin_some.part.0+0x28>
 800d3c4:	464b      	mov	r3, r9
 800d3c6:	4652      	mov	r2, sl
 800d3c8:	4640      	mov	r0, r8
 800d3ca:	f007 fa2d 	bl	8014828 <rcl_wait>
 800d3ce:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f000 809b 	beq.w	800d50e <rclc_executor_spin_some.part.0+0x1ae>
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	f040 8089 	bne.w	800d4f0 <rclc_executor_spin_some.part.0+0x190>
 800d3de:	68ab      	ldr	r3, [r5, #8]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	f000 80ef 	beq.w	800d5c4 <rclc_executor_spin_some.part.0+0x264>
 800d3e6:	2400      	movs	r4, #0
 800d3e8:	4626      	mov	r6, r4
 800d3ea:	f240 1991 	movw	r9, #401	; 0x191
 800d3ee:	e00a      	b.n	800d406 <rclc_executor_spin_some.part.0+0xa6>
 800d3f0:	f7ff fdd2 	bl	800cf98 <_rclc_check_for_new_data>
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	b110      	cbz	r0, 800d3fe <rclc_executor_spin_some.part.0+0x9e>
 800d3f8:	4548      	cmp	r0, r9
 800d3fa:	f040 8086 	bne.w	800d50a <rclc_executor_spin_some.part.0+0x1aa>
 800d3fe:	68ab      	ldr	r3, [r5, #8]
 800d400:	429e      	cmp	r6, r3
 800d402:	f080 80db 	bcs.w	800d5bc <rclc_executor_spin_some.part.0+0x25c>
 800d406:	686a      	ldr	r2, [r5, #4]
 800d408:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d40c:	4641      	mov	r1, r8
 800d40e:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d412:	3601      	adds	r6, #1
 800d414:	f1bc 0f00 	cmp.w	ip, #0
 800d418:	d1ea      	bne.n	800d3f0 <rclc_executor_spin_some.part.0+0x90>
 800d41a:	4619      	mov	r1, r3
 800d41c:	4610      	mov	r0, r2
 800d41e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800d422:	4798      	blx	r3
 800d424:	2800      	cmp	r0, #0
 800d426:	d070      	beq.n	800d50a <rclc_executor_spin_some.part.0+0x1aa>
 800d428:	68aa      	ldr	r2, [r5, #8]
 800d42a:	2a00      	cmp	r2, #0
 800d42c:	d06d      	beq.n	800d50a <rclc_executor_spin_some.part.0+0x1aa>
 800d42e:	2600      	movs	r6, #0
 800d430:	f240 1991 	movw	r9, #401	; 0x191
 800d434:	e008      	b.n	800d448 <rclc_executor_spin_some.part.0+0xe8>
 800d436:	f7ff fdd5 	bl	800cfe4 <_rclc_take_new_data>
 800d43a:	4604      	mov	r4, r0
 800d43c:	b108      	cbz	r0, 800d442 <rclc_executor_spin_some.part.0+0xe2>
 800d43e:	4548      	cmp	r0, r9
 800d440:	d163      	bne.n	800d50a <rclc_executor_spin_some.part.0+0x1aa>
 800d442:	68aa      	ldr	r2, [r5, #8]
 800d444:	4296      	cmp	r6, r2
 800d446:	d208      	bcs.n	800d45a <rclc_executor_spin_some.part.0+0xfa>
 800d448:	6868      	ldr	r0, [r5, #4]
 800d44a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800d44e:	4641      	mov	r1, r8
 800d450:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d454:	3601      	adds	r6, #1
 800d456:	2b00      	cmp	r3, #0
 800d458:	d1ed      	bne.n	800d436 <rclc_executor_spin_some.part.0+0xd6>
 800d45a:	2600      	movs	r6, #0
 800d45c:	b932      	cbnz	r2, 800d46c <rclc_executor_spin_some.part.0+0x10c>
 800d45e:	e054      	b.n	800d50a <rclc_executor_spin_some.part.0+0x1aa>
 800d460:	2901      	cmp	r1, #1
 800d462:	d012      	beq.n	800d48a <rclc_executor_spin_some.part.0+0x12a>
 800d464:	3601      	adds	r6, #1
 800d466:	4296      	cmp	r6, r2
 800d468:	d245      	bcs.n	800d4f6 <rclc_executor_spin_some.part.0+0x196>
 800d46a:	2400      	movs	r4, #0
 800d46c:	686b      	ldr	r3, [r5, #4]
 800d46e:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800d472:	4618      	mov	r0, r3
 800d474:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800d478:	2900      	cmp	r1, #0
 800d47a:	d046      	beq.n	800d50a <rclc_executor_spin_some.part.0+0x1aa>
 800d47c:	7859      	ldrb	r1, [r3, #1]
 800d47e:	2900      	cmp	r1, #0
 800d480:	d1ee      	bne.n	800d460 <rclc_executor_spin_some.part.0+0x100>
 800d482:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d486:	2b00      	cmp	r3, #0
 800d488:	d0ec      	beq.n	800d464 <rclc_executor_spin_some.part.0+0x104>
 800d48a:	f7ff fe15 	bl	800d0b8 <_rclc_execute.part.0>
 800d48e:	2800      	cmp	r0, #0
 800d490:	f040 8096 	bne.w	800d5c0 <rclc_executor_spin_some.part.0+0x260>
 800d494:	68aa      	ldr	r2, [r5, #8]
 800d496:	e7e5      	b.n	800d464 <rclc_executor_spin_some.part.0+0x104>
 800d498:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d49c:	4640      	mov	r0, r8
 800d49e:	6849      	ldr	r1, [r1, #4]
 800d4a0:	f007 f968 	bl	8014774 <rcl_wait_set_add_client>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	d089      	beq.n	800d3bc <rclc_executor_spin_some.part.0+0x5c>
 800d4a8:	9001      	str	r0, [sp, #4]
 800d4aa:	f000 fa13 	bl	800d8d4 <rcutils_reset_error>
 800d4ae:	9801      	ldr	r0, [sp, #4]
 800d4b0:	4607      	mov	r7, r0
 800d4b2:	e020      	b.n	800d4f6 <rclc_executor_spin_some.part.0+0x196>
 800d4b4:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d4b8:	4640      	mov	r0, r8
 800d4ba:	6849      	ldr	r1, [r1, #4]
 800d4bc:	f006 fdf2 	bl	80140a4 <rcl_wait_set_add_subscription>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	f43f af7b 	beq.w	800d3bc <rclc_executor_spin_some.part.0+0x5c>
 800d4c6:	e7ef      	b.n	800d4a8 <rclc_executor_spin_some.part.0+0x148>
 800d4c8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	6849      	ldr	r1, [r1, #4]
 800d4d0:	f007 f920 	bl	8014714 <rcl_wait_set_add_timer>
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	f43f af71 	beq.w	800d3bc <rclc_executor_spin_some.part.0+0x5c>
 800d4da:	e7e5      	b.n	800d4a8 <rclc_executor_spin_some.part.0+0x148>
 800d4dc:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d4e0:	4640      	mov	r0, r8
 800d4e2:	6849      	ldr	r1, [r1, #4]
 800d4e4:	f007 f8ea 	bl	80146bc <rcl_wait_set_add_guard_condition>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	f43f af67 	beq.w	800d3bc <rclc_executor_spin_some.part.0+0x5c>
 800d4ee:	e7db      	b.n	800d4a8 <rclc_executor_spin_some.part.0+0x148>
 800d4f0:	f000 f9f0 	bl	800d8d4 <rcutils_reset_error>
 800d4f4:	2701      	movs	r7, #1
 800d4f6:	4638      	mov	r0, r7
 800d4f8:	b003      	add	sp, #12
 800d4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fe:	f000 f9e9 	bl	800d8d4 <rcutils_reset_error>
 800d502:	4638      	mov	r0, r7
 800d504:	b003      	add	sp, #12
 800d506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d50a:	4627      	mov	r7, r4
 800d50c:	e7f3      	b.n	800d4f6 <rclc_executor_spin_some.part.0+0x196>
 800d50e:	68ab      	ldr	r3, [r5, #8]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d05a      	beq.n	800d5ca <rclc_executor_spin_some.part.0+0x26a>
 800d514:	2400      	movs	r4, #0
 800d516:	4626      	mov	r6, r4
 800d518:	f240 1991 	movw	r9, #401	; 0x191
 800d51c:	e008      	b.n	800d530 <rclc_executor_spin_some.part.0+0x1d0>
 800d51e:	f7ff fd3b 	bl	800cf98 <_rclc_check_for_new_data>
 800d522:	4604      	mov	r4, r0
 800d524:	b108      	cbz	r0, 800d52a <rclc_executor_spin_some.part.0+0x1ca>
 800d526:	4548      	cmp	r0, r9
 800d528:	d1ef      	bne.n	800d50a <rclc_executor_spin_some.part.0+0x1aa>
 800d52a:	68ab      	ldr	r3, [r5, #8]
 800d52c:	429e      	cmp	r6, r3
 800d52e:	d243      	bcs.n	800d5b8 <rclc_executor_spin_some.part.0+0x258>
 800d530:	686a      	ldr	r2, [r5, #4]
 800d532:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d536:	4641      	mov	r1, r8
 800d538:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d53c:	3601      	adds	r6, #1
 800d53e:	f1bc 0f00 	cmp.w	ip, #0
 800d542:	d1ec      	bne.n	800d51e <rclc_executor_spin_some.part.0+0x1be>
 800d544:	4619      	mov	r1, r3
 800d546:	4610      	mov	r0, r2
 800d548:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800d54c:	4798      	blx	r3
 800d54e:	2800      	cmp	r0, #0
 800d550:	d0db      	beq.n	800d50a <rclc_executor_spin_some.part.0+0x1aa>
 800d552:	68ab      	ldr	r3, [r5, #8]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d0d8      	beq.n	800d50a <rclc_executor_spin_some.part.0+0x1aa>
 800d558:	f04f 0a00 	mov.w	sl, #0
 800d55c:	f240 1691 	movw	r6, #401	; 0x191
 800d560:	f240 2959 	movw	r9, #601	; 0x259
 800d564:	e00b      	b.n	800d57e <rclc_executor_spin_some.part.0+0x21e>
 800d566:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800d56a:	b113      	cbz	r3, 800d572 <rclc_executor_spin_some.part.0+0x212>
 800d56c:	f7ff fda4 	bl	800d0b8 <_rclc_execute.part.0>
 800d570:	bb30      	cbnz	r0, 800d5c0 <rclc_executor_spin_some.part.0+0x260>
 800d572:	68ab      	ldr	r3, [r5, #8]
 800d574:	f10a 0a01 	add.w	sl, sl, #1
 800d578:	459a      	cmp	sl, r3
 800d57a:	d2bc      	bcs.n	800d4f6 <rclc_executor_spin_some.part.0+0x196>
 800d57c:	2400      	movs	r4, #0
 800d57e:	6868      	ldr	r0, [r5, #4]
 800d580:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800d584:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d588:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d0bc      	beq.n	800d50a <rclc_executor_spin_some.part.0+0x1aa>
 800d590:	4641      	mov	r1, r8
 800d592:	f7ff fd27 	bl	800cfe4 <_rclc_take_new_data>
 800d596:	b118      	cbz	r0, 800d5a0 <rclc_executor_spin_some.part.0+0x240>
 800d598:	42b0      	cmp	r0, r6
 800d59a:	d001      	beq.n	800d5a0 <rclc_executor_spin_some.part.0+0x240>
 800d59c:	4548      	cmp	r0, r9
 800d59e:	d10f      	bne.n	800d5c0 <rclc_executor_spin_some.part.0+0x260>
 800d5a0:	6868      	ldr	r0, [r5, #4]
 800d5a2:	eb10 000b 	adds.w	r0, r0, fp
 800d5a6:	d005      	beq.n	800d5b4 <rclc_executor_spin_some.part.0+0x254>
 800d5a8:	7843      	ldrb	r3, [r0, #1]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d0db      	beq.n	800d566 <rclc_executor_spin_some.part.0+0x206>
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d1df      	bne.n	800d572 <rclc_executor_spin_some.part.0+0x212>
 800d5b2:	e7db      	b.n	800d56c <rclc_executor_spin_some.part.0+0x20c>
 800d5b4:	270b      	movs	r7, #11
 800d5b6:	e79e      	b.n	800d4f6 <rclc_executor_spin_some.part.0+0x196>
 800d5b8:	686a      	ldr	r2, [r5, #4]
 800d5ba:	e7c3      	b.n	800d544 <rclc_executor_spin_some.part.0+0x1e4>
 800d5bc:	686a      	ldr	r2, [r5, #4]
 800d5be:	e72c      	b.n	800d41a <rclc_executor_spin_some.part.0+0xba>
 800d5c0:	4607      	mov	r7, r0
 800d5c2:	e798      	b.n	800d4f6 <rclc_executor_spin_some.part.0+0x196>
 800d5c4:	686a      	ldr	r2, [r5, #4]
 800d5c6:	461c      	mov	r4, r3
 800d5c8:	e727      	b.n	800d41a <rclc_executor_spin_some.part.0+0xba>
 800d5ca:	686a      	ldr	r2, [r5, #4]
 800d5cc:	461c      	mov	r4, r3
 800d5ce:	e7b9      	b.n	800d544 <rclc_executor_spin_some.part.0+0x1e4>

0800d5d0 <rclc_executor_spin_some>:
 800d5d0:	b190      	cbz	r0, 800d5f8 <rclc_executor_spin_some+0x28>
 800d5d2:	b570      	push	{r4, r5, r6, lr}
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	6800      	ldr	r0, [r0, #0]
 800d5d8:	4616      	mov	r6, r2
 800d5da:	461d      	mov	r5, r3
 800d5dc:	f005 faa2 	bl	8012b24 <rcl_context_is_valid>
 800d5e0:	b130      	cbz	r0, 800d5f0 <rclc_executor_spin_some+0x20>
 800d5e2:	4632      	mov	r2, r6
 800d5e4:	462b      	mov	r3, r5
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5ec:	f7ff beb8 	b.w	800d360 <rclc_executor_spin_some.part.0>
 800d5f0:	f000 f970 	bl	800d8d4 <rcutils_reset_error>
 800d5f4:	2001      	movs	r0, #1
 800d5f6:	bd70      	pop	{r4, r5, r6, pc}
 800d5f8:	200b      	movs	r0, #11
 800d5fa:	4770      	bx	lr

0800d5fc <rclc_executor_handle_counters_zero_init>:
 800d5fc:	b140      	cbz	r0, 800d610 <rclc_executor_handle_counters_zero_init+0x14>
 800d5fe:	2300      	movs	r3, #0
 800d600:	6003      	str	r3, [r0, #0]
 800d602:	6043      	str	r3, [r0, #4]
 800d604:	6083      	str	r3, [r0, #8]
 800d606:	60c3      	str	r3, [r0, #12]
 800d608:	6103      	str	r3, [r0, #16]
 800d60a:	6143      	str	r3, [r0, #20]
 800d60c:	4618      	mov	r0, r3
 800d60e:	4770      	bx	lr
 800d610:	200b      	movs	r0, #11
 800d612:	4770      	bx	lr

0800d614 <rclc_executor_handle_init>:
 800d614:	b178      	cbz	r0, 800d636 <rclc_executor_handle_init+0x22>
 800d616:	b430      	push	{r4, r5}
 800d618:	4603      	mov	r3, r0
 800d61a:	2209      	movs	r2, #9
 800d61c:	2000      	movs	r0, #0
 800d61e:	2400      	movs	r4, #0
 800d620:	2500      	movs	r5, #0
 800d622:	801a      	strh	r2, [r3, #0]
 800d624:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800d628:	bc30      	pop	{r4, r5}
 800d62a:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800d62e:	6359      	str	r1, [r3, #52]	; 0x34
 800d630:	6318      	str	r0, [r3, #48]	; 0x30
 800d632:	8718      	strh	r0, [r3, #56]	; 0x38
 800d634:	4770      	bx	lr
 800d636:	200b      	movs	r0, #11
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop

0800d63c <rclc_support_init>:
 800d63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d640:	b086      	sub	sp, #24
 800d642:	2800      	cmp	r0, #0
 800d644:	d042      	beq.n	800d6cc <rclc_support_init+0x90>
 800d646:	461c      	mov	r4, r3
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d03f      	beq.n	800d6cc <rclc_support_init+0x90>
 800d64c:	460f      	mov	r7, r1
 800d64e:	4690      	mov	r8, r2
 800d650:	4606      	mov	r6, r0
 800d652:	f005 fd47 	bl	80130e4 <rcl_get_zero_initialized_init_options>
 800d656:	4603      	mov	r3, r0
 800d658:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800d65c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d660:	9305      	str	r3, [sp, #20]
 800d662:	a805      	add	r0, sp, #20
 800d664:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d668:	f005 fd3e 	bl	80130e8 <rcl_init_options_init>
 800d66c:	4605      	mov	r5, r0
 800d66e:	bb38      	cbnz	r0, 800d6c0 <rclc_support_init+0x84>
 800d670:	f005 fd38 	bl	80130e4 <rcl_get_zero_initialized_init_options>
 800d674:	4631      	mov	r1, r6
 800d676:	6030      	str	r0, [r6, #0]
 800d678:	a805      	add	r0, sp, #20
 800d67a:	f005 fdab 	bl	80131d4 <rcl_init_options_copy>
 800d67e:	4605      	mov	r5, r0
 800d680:	b9c0      	cbnz	r0, 800d6b4 <rclc_support_init+0x78>
 800d682:	ad02      	add	r5, sp, #8
 800d684:	4628      	mov	r0, r5
 800d686:	f005 fa43 	bl	8012b10 <rcl_get_zero_initialized_context>
 800d68a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d68e:	1d33      	adds	r3, r6, #4
 800d690:	e883 0003 	stmia.w	r3, {r0, r1}
 800d694:	4632      	mov	r2, r6
 800d696:	4641      	mov	r1, r8
 800d698:	4638      	mov	r0, r7
 800d69a:	f005 fc19 	bl	8012ed0 <rcl_init>
 800d69e:	4605      	mov	r5, r0
 800d6a0:	b940      	cbnz	r0, 800d6b4 <rclc_support_init+0x78>
 800d6a2:	60f4      	str	r4, [r6, #12]
 800d6a4:	4622      	mov	r2, r4
 800d6a6:	f106 0110 	add.w	r1, r6, #16
 800d6aa:	2003      	movs	r0, #3
 800d6ac:	f006 f95c 	bl	8013968 <rcl_clock_init>
 800d6b0:	4605      	mov	r5, r0
 800d6b2:	b108      	cbz	r0, 800d6b8 <rclc_support_init+0x7c>
 800d6b4:	f000 f90e 	bl	800d8d4 <rcutils_reset_error>
 800d6b8:	a805      	add	r0, sp, #20
 800d6ba:	f005 fd67 	bl	801318c <rcl_init_options_fini>
 800d6be:	b108      	cbz	r0, 800d6c4 <rclc_support_init+0x88>
 800d6c0:	f000 f908 	bl	800d8d4 <rcutils_reset_error>
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	b006      	add	sp, #24
 800d6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6cc:	250b      	movs	r5, #11
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	b006      	add	sp, #24
 800d6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d6:	bf00      	nop

0800d6d8 <rclc_node_init_with_options>:
 800d6d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6dc:	b087      	sub	sp, #28
 800d6de:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d6e0:	b1e0      	cbz	r0, 800d71c <rclc_node_init_with_options+0x44>
 800d6e2:	460d      	mov	r5, r1
 800d6e4:	b1d1      	cbz	r1, 800d71c <rclc_node_init_with_options+0x44>
 800d6e6:	4616      	mov	r6, r2
 800d6e8:	b1c2      	cbz	r2, 800d71c <rclc_node_init_with_options+0x44>
 800d6ea:	4698      	mov	r8, r3
 800d6ec:	b1b3      	cbz	r3, 800d71c <rclc_node_init_with_options+0x44>
 800d6ee:	b1af      	cbz	r7, 800d71c <rclc_node_init_with_options+0x44>
 800d6f0:	f10d 0910 	add.w	r9, sp, #16
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	4648      	mov	r0, r9
 800d6f8:	f005 fe34 	bl	8013364 <rcl_get_zero_initialized_node>
 800d6fc:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d700:	f108 0304 	add.w	r3, r8, #4
 800d704:	9700      	str	r7, [sp, #0]
 800d706:	4632      	mov	r2, r6
 800d708:	e884 0003 	stmia.w	r4, {r0, r1}
 800d70c:	4629      	mov	r1, r5
 800d70e:	4620      	mov	r0, r4
 800d710:	f005 fe32 	bl	8013378 <rcl_node_init>
 800d714:	b930      	cbnz	r0, 800d724 <rclc_node_init_with_options+0x4c>
 800d716:	b007      	add	sp, #28
 800d718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d71c:	200b      	movs	r0, #11
 800d71e:	b007      	add	sp, #28
 800d720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d724:	9003      	str	r0, [sp, #12]
 800d726:	f000 f8d5 	bl	800d8d4 <rcutils_reset_error>
 800d72a:	9803      	ldr	r0, [sp, #12]
 800d72c:	b007      	add	sp, #28
 800d72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d732:	bf00      	nop

0800d734 <rclc_publisher_init_default>:
 800d734:	b368      	cbz	r0, 800d792 <rclc_publisher_init_default+0x5e>
 800d736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d73a:	460d      	mov	r5, r1
 800d73c:	b09e      	sub	sp, #120	; 0x78
 800d73e:	b321      	cbz	r1, 800d78a <rclc_publisher_init_default+0x56>
 800d740:	4616      	mov	r6, r2
 800d742:	b312      	cbz	r2, 800d78a <rclc_publisher_init_default+0x56>
 800d744:	461f      	mov	r7, r3
 800d746:	b303      	cbz	r3, 800d78a <rclc_publisher_init_default+0x56>
 800d748:	4604      	mov	r4, r0
 800d74a:	f7ff f969 	bl	800ca20 <rcl_get_zero_initialized_publisher>
 800d74e:	f10d 0810 	add.w	r8, sp, #16
 800d752:	6020      	str	r0, [r4, #0]
 800d754:	4640      	mov	r0, r8
 800d756:	f7ff fa5f 	bl	800cc18 <rcl_publisher_get_default_options>
 800d75a:	490f      	ldr	r1, [pc, #60]	; (800d798 <rclc_publisher_init_default+0x64>)
 800d75c:	2250      	movs	r2, #80	; 0x50
 800d75e:	4640      	mov	r0, r8
 800d760:	f00b f881 	bl	8018866 <memcpy>
 800d764:	f8cd 8000 	str.w	r8, [sp]
 800d768:	463b      	mov	r3, r7
 800d76a:	4632      	mov	r2, r6
 800d76c:	4629      	mov	r1, r5
 800d76e:	4620      	mov	r0, r4
 800d770:	f7ff f95c 	bl	800ca2c <rcl_publisher_init>
 800d774:	b910      	cbnz	r0, 800d77c <rclc_publisher_init_default+0x48>
 800d776:	b01e      	add	sp, #120	; 0x78
 800d778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d77c:	9003      	str	r0, [sp, #12]
 800d77e:	f000 f8a9 	bl	800d8d4 <rcutils_reset_error>
 800d782:	9803      	ldr	r0, [sp, #12]
 800d784:	b01e      	add	sp, #120	; 0x78
 800d786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d78a:	200b      	movs	r0, #11
 800d78c:	b01e      	add	sp, #120	; 0x78
 800d78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d792:	200b      	movs	r0, #11
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop
 800d798:	08019a10 	.word	0x08019a10

0800d79c <rclc_subscription_init_default>:
 800d79c:	b368      	cbz	r0, 800d7fa <rclc_subscription_init_default+0x5e>
 800d79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a2:	460d      	mov	r5, r1
 800d7a4:	b0a0      	sub	sp, #128	; 0x80
 800d7a6:	b321      	cbz	r1, 800d7f2 <rclc_subscription_init_default+0x56>
 800d7a8:	4616      	mov	r6, r2
 800d7aa:	b312      	cbz	r2, 800d7f2 <rclc_subscription_init_default+0x56>
 800d7ac:	461f      	mov	r7, r3
 800d7ae:	b303      	cbz	r3, 800d7f2 <rclc_subscription_init_default+0x56>
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	f7ff fa77 	bl	800cca4 <rcl_get_zero_initialized_subscription>
 800d7b6:	f10d 0810 	add.w	r8, sp, #16
 800d7ba:	6020      	str	r0, [r4, #0]
 800d7bc:	4640      	mov	r0, r8
 800d7be:	f7ff fb6d 	bl	800ce9c <rcl_subscription_get_default_options>
 800d7c2:	490f      	ldr	r1, [pc, #60]	; (800d800 <rclc_subscription_init_default+0x64>)
 800d7c4:	2250      	movs	r2, #80	; 0x50
 800d7c6:	4640      	mov	r0, r8
 800d7c8:	f00b f84d 	bl	8018866 <memcpy>
 800d7cc:	f8cd 8000 	str.w	r8, [sp]
 800d7d0:	463b      	mov	r3, r7
 800d7d2:	4632      	mov	r2, r6
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f7ff fa6a 	bl	800ccb0 <rcl_subscription_init>
 800d7dc:	b910      	cbnz	r0, 800d7e4 <rclc_subscription_init_default+0x48>
 800d7de:	b020      	add	sp, #128	; 0x80
 800d7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e4:	9003      	str	r0, [sp, #12]
 800d7e6:	f000 f875 	bl	800d8d4 <rcutils_reset_error>
 800d7ea:	9803      	ldr	r0, [sp, #12]
 800d7ec:	b020      	add	sp, #128	; 0x80
 800d7ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f2:	200b      	movs	r0, #11
 800d7f4:	b020      	add	sp, #128	; 0x80
 800d7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7fa:	200b      	movs	r0, #11
 800d7fc:	4770      	bx	lr
 800d7fe:	bf00      	nop
 800d800:	08019a60 	.word	0x08019a60

0800d804 <__default_zero_allocate>:
 800d804:	f00a b9ec 	b.w	8017be0 <calloc>

0800d808 <__default_reallocate>:
 800d808:	f00a bb78 	b.w	8017efc <realloc>

0800d80c <__default_deallocate>:
 800d80c:	f00a ba56 	b.w	8017cbc <free>

0800d810 <__default_allocate>:
 800d810:	f00a ba4c 	b.w	8017cac <malloc>

0800d814 <rcutils_get_zero_initialized_allocator>:
 800d814:	b470      	push	{r4, r5, r6}
 800d816:	4d05      	ldr	r5, [pc, #20]	; (800d82c <rcutils_get_zero_initialized_allocator+0x18>)
 800d818:	4606      	mov	r6, r0
 800d81a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d81c:	4634      	mov	r4, r6
 800d81e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d820:	682b      	ldr	r3, [r5, #0]
 800d822:	6023      	str	r3, [r4, #0]
 800d824:	4630      	mov	r0, r6
 800d826:	bc70      	pop	{r4, r5, r6}
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	08019ab0 	.word	0x08019ab0

0800d830 <rcutils_set_default_allocator>:
 800d830:	b1a0      	cbz	r0, 800d85c <rcutils_set_default_allocator+0x2c>
 800d832:	6801      	ldr	r1, [r0, #0]
 800d834:	b199      	cbz	r1, 800d85e <rcutils_set_default_allocator+0x2e>
 800d836:	b430      	push	{r4, r5}
 800d838:	6844      	ldr	r4, [r0, #4]
 800d83a:	b194      	cbz	r4, 800d862 <rcutils_set_default_allocator+0x32>
 800d83c:	68c5      	ldr	r5, [r0, #12]
 800d83e:	b15d      	cbz	r5, 800d858 <rcutils_set_default_allocator+0x28>
 800d840:	6883      	ldr	r3, [r0, #8]
 800d842:	b18b      	cbz	r3, 800d868 <rcutils_set_default_allocator+0x38>
 800d844:	4a09      	ldr	r2, [pc, #36]	; (800d86c <rcutils_set_default_allocator+0x3c>)
 800d846:	e9c2 1400 	strd	r1, r4, [r2]
 800d84a:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800d84e:	2000      	movs	r0, #0
 800d850:	6110      	str	r0, [r2, #16]
 800d852:	2001      	movs	r0, #1
 800d854:	bc30      	pop	{r4, r5}
 800d856:	4770      	bx	lr
 800d858:	4628      	mov	r0, r5
 800d85a:	e7fb      	b.n	800d854 <rcutils_set_default_allocator+0x24>
 800d85c:	4770      	bx	lr
 800d85e:	4608      	mov	r0, r1
 800d860:	4770      	bx	lr
 800d862:	4620      	mov	r0, r4
 800d864:	bc30      	pop	{r4, r5}
 800d866:	4770      	bx	lr
 800d868:	4618      	mov	r0, r3
 800d86a:	e7f3      	b.n	800d854 <rcutils_set_default_allocator+0x24>
 800d86c:	20000038 	.word	0x20000038

0800d870 <rcutils_get_default_allocator>:
 800d870:	b470      	push	{r4, r5, r6}
 800d872:	4d05      	ldr	r5, [pc, #20]	; (800d888 <rcutils_get_default_allocator+0x18>)
 800d874:	4606      	mov	r6, r0
 800d876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d878:	4634      	mov	r4, r6
 800d87a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d87c:	682b      	ldr	r3, [r5, #0]
 800d87e:	6023      	str	r3, [r4, #0]
 800d880:	4630      	mov	r0, r6
 800d882:	bc70      	pop	{r4, r5, r6}
 800d884:	4770      	bx	lr
 800d886:	bf00      	nop
 800d888:	20000038 	.word	0x20000038

0800d88c <rcutils_allocator_is_valid>:
 800d88c:	b158      	cbz	r0, 800d8a6 <rcutils_allocator_is_valid+0x1a>
 800d88e:	6803      	ldr	r3, [r0, #0]
 800d890:	b143      	cbz	r3, 800d8a4 <rcutils_allocator_is_valid+0x18>
 800d892:	6843      	ldr	r3, [r0, #4]
 800d894:	b133      	cbz	r3, 800d8a4 <rcutils_allocator_is_valid+0x18>
 800d896:	68c3      	ldr	r3, [r0, #12]
 800d898:	b123      	cbz	r3, 800d8a4 <rcutils_allocator_is_valid+0x18>
 800d89a:	6880      	ldr	r0, [r0, #8]
 800d89c:	3800      	subs	r0, #0
 800d89e:	bf18      	it	ne
 800d8a0:	2001      	movne	r0, #1
 800d8a2:	4770      	bx	lr
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	4770      	bx	lr

0800d8a8 <rcutils_get_error_string>:
 800d8a8:	4b06      	ldr	r3, [pc, #24]	; (800d8c4 <rcutils_get_error_string+0x1c>)
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	b13b      	cbz	r3, 800d8be <rcutils_get_error_string+0x16>
 800d8ae:	4b06      	ldr	r3, [pc, #24]	; (800d8c8 <rcutils_get_error_string+0x20>)
 800d8b0:	781a      	ldrb	r2, [r3, #0]
 800d8b2:	b90a      	cbnz	r2, 800d8b8 <rcutils_get_error_string+0x10>
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	701a      	strb	r2, [r3, #0]
 800d8b8:	4b04      	ldr	r3, [pc, #16]	; (800d8cc <rcutils_get_error_string+0x24>)
 800d8ba:	7818      	ldrb	r0, [r3, #0]
 800d8bc:	4770      	bx	lr
 800d8be:	4b04      	ldr	r3, [pc, #16]	; (800d8d0 <rcutils_get_error_string+0x28>)
 800d8c0:	7818      	ldrb	r0, [r3, #0]
 800d8c2:	4770      	bx	lr
 800d8c4:	20009c20 	.word	0x20009c20
 800d8c8:	20009c21 	.word	0x20009c21
 800d8cc:	20009e88 	.word	0x20009e88
 800d8d0:	08019ac4 	.word	0x08019ac4

0800d8d4 <rcutils_reset_error>:
 800d8d4:	b4d0      	push	{r4, r6, r7}
 800d8d6:	4a07      	ldr	r2, [pc, #28]	; (800d8f4 <rcutils_reset_error+0x20>)
 800d8d8:	4807      	ldr	r0, [pc, #28]	; (800d8f8 <rcutils_reset_error+0x24>)
 800d8da:	4c08      	ldr	r4, [pc, #32]	; (800d8fc <rcutils_reset_error+0x28>)
 800d8dc:	4908      	ldr	r1, [pc, #32]	; (800d900 <rcutils_reset_error+0x2c>)
 800d8de:	2300      	movs	r3, #0
 800d8e0:	2600      	movs	r6, #0
 800d8e2:	2700      	movs	r7, #0
 800d8e4:	8013      	strh	r3, [r2, #0]
 800d8e6:	7003      	strb	r3, [r0, #0]
 800d8e8:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800d8ec:	7023      	strb	r3, [r4, #0]
 800d8ee:	700b      	strb	r3, [r1, #0]
 800d8f0:	bcd0      	pop	{r4, r6, r7}
 800d8f2:	4770      	bx	lr
 800d8f4:	20009e90 	.word	0x20009e90
 800d8f8:	20009e88 	.word	0x20009e88
 800d8fc:	20009c21 	.word	0x20009c21
 800d900:	20009c20 	.word	0x20009c20

0800d904 <rcutils_get_zero_initialized_string_map>:
 800d904:	4b01      	ldr	r3, [pc, #4]	; (800d90c <rcutils_get_zero_initialized_string_map+0x8>)
 800d906:	2000      	movs	r0, #0
 800d908:	6018      	str	r0, [r3, #0]
 800d90a:	4770      	bx	lr
 800d90c:	20009c24 	.word	0x20009c24

0800d910 <rcutils_string_map_reserve>:
 800d910:	2800      	cmp	r0, #0
 800d912:	d061      	beq.n	800d9d8 <rcutils_string_map_reserve+0xc8>
 800d914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d918:	6805      	ldr	r5, [r0, #0]
 800d91a:	b083      	sub	sp, #12
 800d91c:	460c      	mov	r4, r1
 800d91e:	4606      	mov	r6, r0
 800d920:	b12d      	cbz	r5, 800d92e <rcutils_string_map_reserve+0x1e>
 800d922:	68eb      	ldr	r3, [r5, #12]
 800d924:	42a3      	cmp	r3, r4
 800d926:	d906      	bls.n	800d936 <rcutils_string_map_reserve+0x26>
 800d928:	461c      	mov	r4, r3
 800d92a:	2d00      	cmp	r5, #0
 800d92c:	d1f9      	bne.n	800d922 <rcutils_string_map_reserve+0x12>
 800d92e:	201f      	movs	r0, #31
 800d930:	b003      	add	sp, #12
 800d932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d936:	68ab      	ldr	r3, [r5, #8]
 800d938:	42a3      	cmp	r3, r4
 800d93a:	d049      	beq.n	800d9d0 <rcutils_string_map_reserve+0xc0>
 800d93c:	6a2f      	ldr	r7, [r5, #32]
 800d93e:	2c00      	cmp	r4, #0
 800d940:	d035      	beq.n	800d9ae <rcutils_string_map_reserve+0x9e>
 800d942:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800d946:	d245      	bcs.n	800d9d4 <rcutils_string_map_reserve+0xc4>
 800d948:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800d94c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800d950:	6828      	ldr	r0, [r5, #0]
 800d952:	4641      	mov	r1, r8
 800d954:	463a      	mov	r2, r7
 800d956:	47c8      	blx	r9
 800d958:	2800      	cmp	r0, #0
 800d95a:	d03b      	beq.n	800d9d4 <rcutils_string_map_reserve+0xc4>
 800d95c:	6833      	ldr	r3, [r6, #0]
 800d95e:	463a      	mov	r2, r7
 800d960:	6018      	str	r0, [r3, #0]
 800d962:	4641      	mov	r1, r8
 800d964:	6858      	ldr	r0, [r3, #4]
 800d966:	47c8      	blx	r9
 800d968:	2800      	cmp	r0, #0
 800d96a:	d033      	beq.n	800d9d4 <rcutils_string_map_reserve+0xc4>
 800d96c:	6835      	ldr	r5, [r6, #0]
 800d96e:	68ab      	ldr	r3, [r5, #8]
 800d970:	6068      	str	r0, [r5, #4]
 800d972:	42a3      	cmp	r3, r4
 800d974:	d227      	bcs.n	800d9c6 <rcutils_string_map_reserve+0xb6>
 800d976:	682a      	ldr	r2, [r5, #0]
 800d978:	eb00 0108 	add.w	r1, r0, r8
 800d97c:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800d980:	428f      	cmp	r7, r1
 800d982:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d986:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800d98a:	d203      	bcs.n	800d994 <rcutils_string_map_reserve+0x84>
 800d98c:	eb02 0108 	add.w	r1, r2, r8
 800d990:	428e      	cmp	r6, r1
 800d992:	d323      	bcc.n	800d9dc <rcutils_string_map_reserve+0xcc>
 800d994:	1ae3      	subs	r3, r4, r3
 800d996:	009a      	lsls	r2, r3, #2
 800d998:	4638      	mov	r0, r7
 800d99a:	2100      	movs	r1, #0
 800d99c:	9201      	str	r2, [sp, #4]
 800d99e:	f00a fe43 	bl	8018628 <memset>
 800d9a2:	9a01      	ldr	r2, [sp, #4]
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	2100      	movs	r1, #0
 800d9a8:	f00a fe3e 	bl	8018628 <memset>
 800d9ac:	e00b      	b.n	800d9c6 <rcutils_string_map_reserve+0xb6>
 800d9ae:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800d9b2:	6828      	ldr	r0, [r5, #0]
 800d9b4:	4639      	mov	r1, r7
 800d9b6:	47c0      	blx	r8
 800d9b8:	6833      	ldr	r3, [r6, #0]
 800d9ba:	4639      	mov	r1, r7
 800d9bc:	6858      	ldr	r0, [r3, #4]
 800d9be:	601c      	str	r4, [r3, #0]
 800d9c0:	47c0      	blx	r8
 800d9c2:	6835      	ldr	r5, [r6, #0]
 800d9c4:	606c      	str	r4, [r5, #4]
 800d9c6:	2000      	movs	r0, #0
 800d9c8:	60ac      	str	r4, [r5, #8]
 800d9ca:	b003      	add	sp, #12
 800d9cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	e7ad      	b.n	800d930 <rcutils_string_map_reserve+0x20>
 800d9d4:	200a      	movs	r0, #10
 800d9d6:	e7ab      	b.n	800d930 <rcutils_string_map_reserve+0x20>
 800d9d8:	200b      	movs	r0, #11
 800d9da:	4770      	bx	lr
 800d9dc:	1f13      	subs	r3, r2, #4
 800d9de:	f1ac 0c04 	sub.w	ip, ip, #4
 800d9e2:	4498      	add	r8, r3
 800d9e4:	4460      	add	r0, ip
 800d9e6:	4462      	add	r2, ip
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	f842 3f04 	str.w	r3, [r2, #4]!
 800d9ee:	4542      	cmp	r2, r8
 800d9f0:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9f4:	d1f9      	bne.n	800d9ea <rcutils_string_map_reserve+0xda>
 800d9f6:	e7e6      	b.n	800d9c6 <rcutils_string_map_reserve+0xb6>

0800d9f8 <rcutils_string_map_init>:
 800d9f8:	b082      	sub	sp, #8
 800d9fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9fc:	460e      	mov	r6, r1
 800d9fe:	a906      	add	r1, sp, #24
 800da00:	e881 000c 	stmia.w	r1, {r2, r3}
 800da04:	b380      	cbz	r0, 800da68 <rcutils_string_map_init+0x70>
 800da06:	6807      	ldr	r7, [r0, #0]
 800da08:	4604      	mov	r4, r0
 800da0a:	b12f      	cbz	r7, 800da18 <rcutils_string_map_init+0x20>
 800da0c:	251e      	movs	r5, #30
 800da0e:	4628      	mov	r0, r5
 800da10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da14:	b002      	add	sp, #8
 800da16:	4770      	bx	lr
 800da18:	a806      	add	r0, sp, #24
 800da1a:	f7ff ff37 	bl	800d88c <rcutils_allocator_is_valid>
 800da1e:	b318      	cbz	r0, 800da68 <rcutils_string_map_init+0x70>
 800da20:	9b06      	ldr	r3, [sp, #24]
 800da22:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da24:	2024      	movs	r0, #36	; 0x24
 800da26:	4798      	blx	r3
 800da28:	4605      	mov	r5, r0
 800da2a:	6020      	str	r0, [r4, #0]
 800da2c:	b310      	cbz	r0, 800da74 <rcutils_string_map_init+0x7c>
 800da2e:	f10d 0e18 	add.w	lr, sp, #24
 800da32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800da36:	f105 0c10 	add.w	ip, r5, #16
 800da3a:	e9c5 7700 	strd	r7, r7, [r5]
 800da3e:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800da42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da46:	f8de 3000 	ldr.w	r3, [lr]
 800da4a:	f8cc 3000 	str.w	r3, [ip]
 800da4e:	4631      	mov	r1, r6
 800da50:	4620      	mov	r0, r4
 800da52:	f7ff ff5d 	bl	800d910 <rcutils_string_map_reserve>
 800da56:	4605      	mov	r5, r0
 800da58:	2800      	cmp	r0, #0
 800da5a:	d0d8      	beq.n	800da0e <rcutils_string_map_init+0x16>
 800da5c:	9b07      	ldr	r3, [sp, #28]
 800da5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da60:	6820      	ldr	r0, [r4, #0]
 800da62:	4798      	blx	r3
 800da64:	6027      	str	r7, [r4, #0]
 800da66:	e7d2      	b.n	800da0e <rcutils_string_map_init+0x16>
 800da68:	250b      	movs	r5, #11
 800da6a:	4628      	mov	r0, r5
 800da6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da70:	b002      	add	sp, #8
 800da72:	4770      	bx	lr
 800da74:	250a      	movs	r5, #10
 800da76:	e7ca      	b.n	800da0e <rcutils_string_map_init+0x16>

0800da78 <rcutils_string_map_fini>:
 800da78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da7c:	b082      	sub	sp, #8
 800da7e:	2800      	cmp	r0, #0
 800da80:	d039      	beq.n	800daf6 <rcutils_string_map_fini+0x7e>
 800da82:	6804      	ldr	r4, [r0, #0]
 800da84:	4606      	mov	r6, r0
 800da86:	2c00      	cmp	r4, #0
 800da88:	d031      	beq.n	800daee <rcutils_string_map_fini+0x76>
 800da8a:	68a3      	ldr	r3, [r4, #8]
 800da8c:	b323      	cbz	r3, 800dad8 <rcutils_string_map_fini+0x60>
 800da8e:	2500      	movs	r5, #0
 800da90:	6822      	ldr	r2, [r4, #0]
 800da92:	46a8      	mov	r8, r5
 800da94:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800da98:	b1d8      	cbz	r0, 800dad2 <rcutils_string_map_fini+0x5a>
 800da9a:	6a21      	ldr	r1, [r4, #32]
 800da9c:	6967      	ldr	r7, [r4, #20]
 800da9e:	9101      	str	r1, [sp, #4]
 800daa0:	47b8      	blx	r7
 800daa2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800daa6:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800daaa:	9901      	ldr	r1, [sp, #4]
 800daac:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dab0:	47b8      	blx	r7
 800dab2:	68e3      	ldr	r3, [r4, #12]
 800dab4:	6862      	ldr	r2, [r4, #4]
 800dab6:	3b01      	subs	r3, #1
 800dab8:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800dabc:	60e3      	str	r3, [r4, #12]
 800dabe:	6834      	ldr	r4, [r6, #0]
 800dac0:	68a3      	ldr	r3, [r4, #8]
 800dac2:	3501      	adds	r5, #1
 800dac4:	429d      	cmp	r5, r3
 800dac6:	d207      	bcs.n	800dad8 <rcutils_string_map_fini+0x60>
 800dac8:	6822      	ldr	r2, [r4, #0]
 800daca:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800dace:	2800      	cmp	r0, #0
 800dad0:	d1e3      	bne.n	800da9a <rcutils_string_map_fini+0x22>
 800dad2:	3501      	adds	r5, #1
 800dad4:	429d      	cmp	r5, r3
 800dad6:	d3dd      	bcc.n	800da94 <rcutils_string_map_fini+0x1c>
 800dad8:	2100      	movs	r1, #0
 800dada:	4630      	mov	r0, r6
 800dadc:	f7ff ff18 	bl	800d910 <rcutils_string_map_reserve>
 800dae0:	4604      	mov	r4, r0
 800dae2:	b920      	cbnz	r0, 800daee <rcutils_string_map_fini+0x76>
 800dae4:	6830      	ldr	r0, [r6, #0]
 800dae6:	6943      	ldr	r3, [r0, #20]
 800dae8:	6a01      	ldr	r1, [r0, #32]
 800daea:	4798      	blx	r3
 800daec:	6034      	str	r4, [r6, #0]
 800daee:	4620      	mov	r0, r4
 800daf0:	b002      	add	sp, #8
 800daf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf6:	240b      	movs	r4, #11
 800daf8:	4620      	mov	r0, r4
 800dafa:	b002      	add	sp, #8
 800dafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db00 <rcutils_string_map_getn>:
 800db00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db04:	b082      	sub	sp, #8
 800db06:	b308      	cbz	r0, 800db4c <rcutils_string_map_getn+0x4c>
 800db08:	6804      	ldr	r4, [r0, #0]
 800db0a:	b304      	cbz	r4, 800db4e <rcutils_string_map_getn+0x4e>
 800db0c:	460d      	mov	r5, r1
 800db0e:	b1e9      	cbz	r1, 800db4c <rcutils_string_map_getn+0x4c>
 800db10:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800db14:	6827      	ldr	r7, [r4, #0]
 800db16:	f1b9 0f00 	cmp.w	r9, #0
 800db1a:	d017      	beq.n	800db4c <rcutils_string_map_getn+0x4c>
 800db1c:	4690      	mov	r8, r2
 800db1e:	3f04      	subs	r7, #4
 800db20:	2600      	movs	r6, #0
 800db22:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800db26:	9101      	str	r1, [sp, #4]
 800db28:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800db2c:	4608      	mov	r0, r1
 800db2e:	3601      	adds	r6, #1
 800db30:	b151      	cbz	r1, 800db48 <rcutils_string_map_getn+0x48>
 800db32:	f7f2 fb5f 	bl	80001f4 <strlen>
 800db36:	4540      	cmp	r0, r8
 800db38:	4602      	mov	r2, r0
 800db3a:	9901      	ldr	r1, [sp, #4]
 800db3c:	bf38      	it	cc
 800db3e:	4642      	movcc	r2, r8
 800db40:	4628      	mov	r0, r5
 800db42:	f00a fd86 	bl	8018652 <strncmp>
 800db46:	b130      	cbz	r0, 800db56 <rcutils_string_map_getn+0x56>
 800db48:	45b1      	cmp	r9, r6
 800db4a:	d1ea      	bne.n	800db22 <rcutils_string_map_getn+0x22>
 800db4c:	2400      	movs	r4, #0
 800db4e:	4620      	mov	r0, r4
 800db50:	b002      	add	sp, #8
 800db52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db56:	6863      	ldr	r3, [r4, #4]
 800db58:	f853 400a 	ldr.w	r4, [r3, sl]
 800db5c:	4620      	mov	r0, r4
 800db5e:	b002      	add	sp, #8
 800db60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800db64 <rcutils_system_time_now>:
 800db64:	b310      	cbz	r0, 800dbac <rcutils_system_time_now+0x48>
 800db66:	b570      	push	{r4, r5, r6, lr}
 800db68:	b084      	sub	sp, #16
 800db6a:	4669      	mov	r1, sp
 800db6c:	4604      	mov	r4, r0
 800db6e:	2001      	movs	r0, #1
 800db70:	f7f4 ff26 	bl	80029c0 <clock_gettime>
 800db74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db78:	2800      	cmp	r0, #0
 800db7a:	f171 0300 	sbcs.w	r3, r1, #0
 800db7e:	db12      	blt.n	800dba6 <rcutils_system_time_now+0x42>
 800db80:	9d02      	ldr	r5, [sp, #8]
 800db82:	2d00      	cmp	r5, #0
 800db84:	db0c      	blt.n	800dba0 <rcutils_system_time_now+0x3c>
 800db86:	4e0a      	ldr	r6, [pc, #40]	; (800dbb0 <rcutils_system_time_now+0x4c>)
 800db88:	fba0 2306 	umull	r2, r3, r0, r6
 800db8c:	1952      	adds	r2, r2, r5
 800db8e:	fb06 3301 	mla	r3, r6, r1, r3
 800db92:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800db96:	2000      	movs	r0, #0
 800db98:	e9c4 2300 	strd	r2, r3, [r4]
 800db9c:	b004      	add	sp, #16
 800db9e:	bd70      	pop	{r4, r5, r6, pc}
 800dba0:	ea50 0301 	orrs.w	r3, r0, r1
 800dba4:	d1ef      	bne.n	800db86 <rcutils_system_time_now+0x22>
 800dba6:	2002      	movs	r0, #2
 800dba8:	b004      	add	sp, #16
 800dbaa:	bd70      	pop	{r4, r5, r6, pc}
 800dbac:	200b      	movs	r0, #11
 800dbae:	4770      	bx	lr
 800dbb0:	3b9aca00 	.word	0x3b9aca00

0800dbb4 <rcutils_steady_time_now>:
 800dbb4:	b310      	cbz	r0, 800dbfc <rcutils_steady_time_now+0x48>
 800dbb6:	b570      	push	{r4, r5, r6, lr}
 800dbb8:	b084      	sub	sp, #16
 800dbba:	4669      	mov	r1, sp
 800dbbc:	4604      	mov	r4, r0
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	f7f4 fefe 	bl	80029c0 <clock_gettime>
 800dbc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbc8:	2800      	cmp	r0, #0
 800dbca:	f171 0300 	sbcs.w	r3, r1, #0
 800dbce:	db12      	blt.n	800dbf6 <rcutils_steady_time_now+0x42>
 800dbd0:	9d02      	ldr	r5, [sp, #8]
 800dbd2:	2d00      	cmp	r5, #0
 800dbd4:	db0c      	blt.n	800dbf0 <rcutils_steady_time_now+0x3c>
 800dbd6:	4e0a      	ldr	r6, [pc, #40]	; (800dc00 <rcutils_steady_time_now+0x4c>)
 800dbd8:	fba0 2306 	umull	r2, r3, r0, r6
 800dbdc:	1952      	adds	r2, r2, r5
 800dbde:	fb06 3301 	mla	r3, r6, r1, r3
 800dbe2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	e9c4 2300 	strd	r2, r3, [r4]
 800dbec:	b004      	add	sp, #16
 800dbee:	bd70      	pop	{r4, r5, r6, pc}
 800dbf0:	ea50 0301 	orrs.w	r3, r0, r1
 800dbf4:	d1ef      	bne.n	800dbd6 <rcutils_steady_time_now+0x22>
 800dbf6:	2002      	movs	r0, #2
 800dbf8:	b004      	add	sp, #16
 800dbfa:	bd70      	pop	{r4, r5, r6, pc}
 800dbfc:	200b      	movs	r0, #11
 800dbfe:	4770      	bx	lr
 800dc00:	3b9aca00 	.word	0x3b9aca00

0800dc04 <rmw_get_default_publisher_options>:
 800dc04:	2000      	movs	r0, #0
 800dc06:	4770      	bx	lr

0800dc08 <rmw_get_default_subscription_options>:
 800dc08:	2200      	movs	r2, #0
 800dc0a:	6002      	str	r2, [r0, #0]
 800dc0c:	7102      	strb	r2, [r0, #4]
 800dc0e:	4770      	bx	lr

0800dc10 <rmw_get_zero_initialized_message_info>:
 800dc10:	b470      	push	{r4, r5, r6}
 800dc12:	4d07      	ldr	r5, [pc, #28]	; (800dc30 <rmw_get_zero_initialized_message_info+0x20>)
 800dc14:	4606      	mov	r6, r0
 800dc16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc18:	4634      	mov	r4, r6
 800dc1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dc24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc28:	4630      	mov	r0, r6
 800dc2a:	bc70      	pop	{r4, r5, r6}
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop
 800dc30:	08019888 	.word	0x08019888

0800dc34 <rmw_validate_full_topic_name>:
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d062      	beq.n	800dcfe <rmw_validate_full_topic_name+0xca>
 800dc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc3c:	460d      	mov	r5, r1
 800dc3e:	2900      	cmp	r1, #0
 800dc40:	d05f      	beq.n	800dd02 <rmw_validate_full_topic_name+0xce>
 800dc42:	4616      	mov	r6, r2
 800dc44:	4604      	mov	r4, r0
 800dc46:	f7f2 fad5 	bl	80001f4 <strlen>
 800dc4a:	b148      	cbz	r0, 800dc60 <rmw_validate_full_topic_name+0x2c>
 800dc4c:	7823      	ldrb	r3, [r4, #0]
 800dc4e:	2b2f      	cmp	r3, #47	; 0x2f
 800dc50:	d00d      	beq.n	800dc6e <rmw_validate_full_topic_name+0x3a>
 800dc52:	2302      	movs	r3, #2
 800dc54:	602b      	str	r3, [r5, #0]
 800dc56:	b13e      	cbz	r6, 800dc68 <rmw_validate_full_topic_name+0x34>
 800dc58:	2000      	movs	r0, #0
 800dc5a:	6030      	str	r0, [r6, #0]
 800dc5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc60:	2301      	movs	r3, #1
 800dc62:	602b      	str	r3, [r5, #0]
 800dc64:	2e00      	cmp	r6, #0
 800dc66:	d1f7      	bne.n	800dc58 <rmw_validate_full_topic_name+0x24>
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc6e:	1e47      	subs	r7, r0, #1
 800dc70:	5de3      	ldrb	r3, [r4, r7]
 800dc72:	2b2f      	cmp	r3, #47	; 0x2f
 800dc74:	d047      	beq.n	800dd06 <rmw_validate_full_topic_name+0xd2>
 800dc76:	1e63      	subs	r3, r4, #1
 800dc78:	eb03 0900 	add.w	r9, r3, r0
 800dc7c:	f1c4 0e01 	rsb	lr, r4, #1
 800dc80:	eb0e 0803 	add.w	r8, lr, r3
 800dc84:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800dc88:	f021 0220 	bic.w	r2, r1, #32
 800dc8c:	3a41      	subs	r2, #65	; 0x41
 800dc8e:	2a19      	cmp	r2, #25
 800dc90:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800dc94:	d90c      	bls.n	800dcb0 <rmw_validate_full_topic_name+0x7c>
 800dc96:	295f      	cmp	r1, #95	; 0x5f
 800dc98:	d00a      	beq.n	800dcb0 <rmw_validate_full_topic_name+0x7c>
 800dc9a:	f1bc 0f0a 	cmp.w	ip, #10
 800dc9e:	d907      	bls.n	800dcb0 <rmw_validate_full_topic_name+0x7c>
 800dca0:	2304      	movs	r3, #4
 800dca2:	602b      	str	r3, [r5, #0]
 800dca4:	2e00      	cmp	r6, #0
 800dca6:	d0df      	beq.n	800dc68 <rmw_validate_full_topic_name+0x34>
 800dca8:	f8c6 8000 	str.w	r8, [r6]
 800dcac:	2000      	movs	r0, #0
 800dcae:	e7d5      	b.n	800dc5c <rmw_validate_full_topic_name+0x28>
 800dcb0:	454b      	cmp	r3, r9
 800dcb2:	d1e5      	bne.n	800dc80 <rmw_validate_full_topic_name+0x4c>
 800dcb4:	f8df e084 	ldr.w	lr, [pc, #132]	; 800dd3c <rmw_validate_full_topic_name+0x108>
 800dcb8:	2300      	movs	r3, #0
 800dcba:	f107 0801 	add.w	r8, r7, #1
 800dcbe:	e005      	b.n	800dccc <rmw_validate_full_topic_name+0x98>
 800dcc0:	4611      	mov	r1, r2
 800dcc2:	4288      	cmp	r0, r1
 800dcc4:	4613      	mov	r3, r2
 800dcc6:	f104 0401 	add.w	r4, r4, #1
 800dcca:	d925      	bls.n	800dd18 <rmw_validate_full_topic_name+0xe4>
 800dccc:	429f      	cmp	r7, r3
 800dcce:	f103 0201 	add.w	r2, r3, #1
 800dcd2:	d01e      	beq.n	800dd12 <rmw_validate_full_topic_name+0xde>
 800dcd4:	7821      	ldrb	r1, [r4, #0]
 800dcd6:	292f      	cmp	r1, #47	; 0x2f
 800dcd8:	d1f2      	bne.n	800dcc0 <rmw_validate_full_topic_name+0x8c>
 800dcda:	f894 c001 	ldrb.w	ip, [r4, #1]
 800dcde:	1c5a      	adds	r2, r3, #1
 800dce0:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800dce4:	4611      	mov	r1, r2
 800dce6:	d024      	beq.n	800dd32 <rmw_validate_full_topic_name+0xfe>
 800dce8:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800dcec:	075b      	lsls	r3, r3, #29
 800dcee:	d5e8      	bpl.n	800dcc2 <rmw_validate_full_topic_name+0x8e>
 800dcf0:	2306      	movs	r3, #6
 800dcf2:	602b      	str	r3, [r5, #0]
 800dcf4:	2e00      	cmp	r6, #0
 800dcf6:	d0b7      	beq.n	800dc68 <rmw_validate_full_topic_name+0x34>
 800dcf8:	6032      	str	r2, [r6, #0]
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	e7ae      	b.n	800dc5c <rmw_validate_full_topic_name+0x28>
 800dcfe:	200b      	movs	r0, #11
 800dd00:	4770      	bx	lr
 800dd02:	200b      	movs	r0, #11
 800dd04:	e7aa      	b.n	800dc5c <rmw_validate_full_topic_name+0x28>
 800dd06:	2303      	movs	r3, #3
 800dd08:	602b      	str	r3, [r5, #0]
 800dd0a:	2e00      	cmp	r6, #0
 800dd0c:	d0ac      	beq.n	800dc68 <rmw_validate_full_topic_name+0x34>
 800dd0e:	6037      	str	r7, [r6, #0]
 800dd10:	e7aa      	b.n	800dc68 <rmw_validate_full_topic_name+0x34>
 800dd12:	4641      	mov	r1, r8
 800dd14:	1c7a      	adds	r2, r7, #1
 800dd16:	e7d4      	b.n	800dcc2 <rmw_validate_full_topic_name+0x8e>
 800dd18:	28f7      	cmp	r0, #247	; 0xf7
 800dd1a:	d802      	bhi.n	800dd22 <rmw_validate_full_topic_name+0xee>
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	6028      	str	r0, [r5, #0]
 800dd20:	e79c      	b.n	800dc5c <rmw_validate_full_topic_name+0x28>
 800dd22:	2307      	movs	r3, #7
 800dd24:	602b      	str	r3, [r5, #0]
 800dd26:	2e00      	cmp	r6, #0
 800dd28:	d09e      	beq.n	800dc68 <rmw_validate_full_topic_name+0x34>
 800dd2a:	23f6      	movs	r3, #246	; 0xf6
 800dd2c:	6033      	str	r3, [r6, #0]
 800dd2e:	2000      	movs	r0, #0
 800dd30:	e794      	b.n	800dc5c <rmw_validate_full_topic_name+0x28>
 800dd32:	2305      	movs	r3, #5
 800dd34:	602b      	str	r3, [r5, #0]
 800dd36:	2e00      	cmp	r6, #0
 800dd38:	d1de      	bne.n	800dcf8 <rmw_validate_full_topic_name+0xc4>
 800dd3a:	e795      	b.n	800dc68 <rmw_validate_full_topic_name+0x34>
 800dd3c:	0801a290 	.word	0x0801a290

0800dd40 <rmw_uros_set_custom_transport>:
 800dd40:	b470      	push	{r4, r5, r6}
 800dd42:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800dd46:	b162      	cbz	r2, 800dd62 <rmw_uros_set_custom_transport+0x22>
 800dd48:	b15b      	cbz	r3, 800dd62 <rmw_uros_set_custom_transport+0x22>
 800dd4a:	b155      	cbz	r5, 800dd62 <rmw_uros_set_custom_transport+0x22>
 800dd4c:	b14e      	cbz	r6, 800dd62 <rmw_uros_set_custom_transport+0x22>
 800dd4e:	4c06      	ldr	r4, [pc, #24]	; (800dd68 <rmw_uros_set_custom_transport+0x28>)
 800dd50:	7020      	strb	r0, [r4, #0]
 800dd52:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dd56:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dd5a:	6166      	str	r6, [r4, #20]
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	bc70      	pop	{r4, r5, r6}
 800dd60:	4770      	bx	lr
 800dd62:	200b      	movs	r0, #11
 800dd64:	bc70      	pop	{r4, r5, r6}
 800dd66:	4770      	bx	lr
 800dd68:	20009ea0 	.word	0x20009ea0

0800dd6c <flush_session>:
 800dd6c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800dd6e:	f002 bf03 	b.w	8010b78 <uxr_run_session_until_confirm_delivery>
 800dd72:	bf00      	nop

0800dd74 <rmw_publish>:
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d053      	beq.n	800de20 <rmw_publish+0xac>
 800dd78:	b570      	push	{r4, r5, r6, lr}
 800dd7a:	460d      	mov	r5, r1
 800dd7c:	b08e      	sub	sp, #56	; 0x38
 800dd7e:	2900      	cmp	r1, #0
 800dd80:	d04b      	beq.n	800de1a <rmw_publish+0xa6>
 800dd82:	4604      	mov	r4, r0
 800dd84:	6800      	ldr	r0, [r0, #0]
 800dd86:	f000 fe33 	bl	800e9f0 <is_uxrce_rmw_identifier_valid>
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	d045      	beq.n	800de1a <rmw_publish+0xa6>
 800dd8e:	6866      	ldr	r6, [r4, #4]
 800dd90:	2e00      	cmp	r6, #0
 800dd92:	d042      	beq.n	800de1a <rmw_publish+0xa6>
 800dd94:	69b4      	ldr	r4, [r6, #24]
 800dd96:	4628      	mov	r0, r5
 800dd98:	6923      	ldr	r3, [r4, #16]
 800dd9a:	4798      	blx	r3
 800dd9c:	69f3      	ldr	r3, [r6, #28]
 800dd9e:	9005      	str	r0, [sp, #20]
 800dda0:	b113      	cbz	r3, 800dda8 <rmw_publish+0x34>
 800dda2:	a805      	add	r0, sp, #20
 800dda4:	4798      	blx	r3
 800dda6:	9805      	ldr	r0, [sp, #20]
 800dda8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	9000      	str	r0, [sp, #0]
 800ddb0:	6972      	ldr	r2, [r6, #20]
 800ddb2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ddb4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ddb8:	ab06      	add	r3, sp, #24
 800ddba:	f003 fce5 	bl	8011788 <uxr_prepare_output_stream>
 800ddbe:	b1d8      	cbz	r0, 800ddf8 <rmw_publish+0x84>
 800ddc0:	68a3      	ldr	r3, [r4, #8]
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	a906      	add	r1, sp, #24
 800ddc6:	4798      	blx	r3
 800ddc8:	6a33      	ldr	r3, [r6, #32]
 800ddca:	4604      	mov	r4, r0
 800ddcc:	b10b      	cbz	r3, 800ddd2 <rmw_publish+0x5e>
 800ddce:	a806      	add	r0, sp, #24
 800ddd0:	4798      	blx	r3
 800ddd2:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800dddc:	d022      	beq.n	800de24 <rmw_publish+0xb0>
 800ddde:	6918      	ldr	r0, [r3, #16]
 800dde0:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800dde2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dde6:	f002 fec7 	bl	8010b78 <uxr_run_session_until_confirm_delivery>
 800ddea:	4020      	ands	r0, r4
 800ddec:	b2c4      	uxtb	r4, r0
 800ddee:	f084 0001 	eor.w	r0, r4, #1
 800ddf2:	b2c0      	uxtb	r0, r0
 800ddf4:	b00e      	add	sp, #56	; 0x38
 800ddf6:	bd70      	pop	{r4, r5, r6, pc}
 800ddf8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ddfc:	4a0c      	ldr	r2, [pc, #48]	; (800de30 <rmw_publish+0xbc>)
 800ddfe:	6918      	ldr	r0, [r3, #16]
 800de00:	9b05      	ldr	r3, [sp, #20]
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800de08:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de0c:	6972      	ldr	r2, [r6, #20]
 800de0e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800de10:	ab06      	add	r3, sp, #24
 800de12:	f003 fce9 	bl	80117e8 <uxr_prepare_output_stream_fragmented>
 800de16:	2800      	cmp	r0, #0
 800de18:	d1d2      	bne.n	800ddc0 <rmw_publish+0x4c>
 800de1a:	2001      	movs	r0, #1
 800de1c:	b00e      	add	sp, #56	; 0x38
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
 800de20:	2001      	movs	r0, #1
 800de22:	4770      	bx	lr
 800de24:	6918      	ldr	r0, [r3, #16]
 800de26:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de2a:	f002 fae9 	bl	8010400 <uxr_flash_output_streams>
 800de2e:	e7de      	b.n	800ddee <rmw_publish+0x7a>
 800de30:	0800dd6d 	.word	0x0800dd6d

0800de34 <rmw_create_publisher>:
 800de34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de38:	b087      	sub	sp, #28
 800de3a:	2800      	cmp	r0, #0
 800de3c:	f000 80cc 	beq.w	800dfd8 <rmw_create_publisher+0x1a4>
 800de40:	460e      	mov	r6, r1
 800de42:	2900      	cmp	r1, #0
 800de44:	f000 80c8 	beq.w	800dfd8 <rmw_create_publisher+0x1a4>
 800de48:	4604      	mov	r4, r0
 800de4a:	6800      	ldr	r0, [r0, #0]
 800de4c:	4615      	mov	r5, r2
 800de4e:	4698      	mov	r8, r3
 800de50:	f000 fdce 	bl	800e9f0 <is_uxrce_rmw_identifier_valid>
 800de54:	2800      	cmp	r0, #0
 800de56:	f000 80bf 	beq.w	800dfd8 <rmw_create_publisher+0x1a4>
 800de5a:	2d00      	cmp	r5, #0
 800de5c:	f000 80bc 	beq.w	800dfd8 <rmw_create_publisher+0x1a4>
 800de60:	782b      	ldrb	r3, [r5, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	f000 80b8 	beq.w	800dfd8 <rmw_create_publisher+0x1a4>
 800de68:	f1b8 0f00 	cmp.w	r8, #0
 800de6c:	f000 80b4 	beq.w	800dfd8 <rmw_create_publisher+0x1a4>
 800de70:	485c      	ldr	r0, [pc, #368]	; (800dfe4 <rmw_create_publisher+0x1b0>)
 800de72:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800de76:	f007 f953 	bl	8015120 <get_memory>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	f000 80ac 	beq.w	800dfd8 <rmw_create_publisher+0x1a4>
 800de80:	68c4      	ldr	r4, [r0, #12]
 800de82:	2300      	movs	r3, #0
 800de84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800de88:	f007 f9b2 	bl	80151f0 <rmw_get_implementation_identifier>
 800de8c:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800de90:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800de94:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800de98:	4628      	mov	r0, r5
 800de9a:	f7f2 f9ab 	bl	80001f4 <strlen>
 800de9e:	3001      	adds	r0, #1
 800dea0:	283c      	cmp	r0, #60	; 0x3c
 800dea2:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800dea6:	f200 8094 	bhi.w	800dfd2 <rmw_create_publisher+0x19e>
 800deaa:	4a4f      	ldr	r2, [pc, #316]	; (800dfe8 <rmw_create_publisher+0x1b4>)
 800deac:	462b      	mov	r3, r5
 800deae:	213c      	movs	r1, #60	; 0x3c
 800deb0:	4650      	mov	r0, sl
 800deb2:	f00a fa59 	bl	8018368 <sniprintf>
 800deb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800deba:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800debe:	4641      	mov	r1, r8
 800dec0:	2250      	movs	r2, #80	; 0x50
 800dec2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800dec6:	f00a fcce 	bl	8018866 <memcpy>
 800deca:	f898 3008 	ldrb.w	r3, [r8, #8]
 800dece:	4947      	ldr	r1, [pc, #284]	; (800dfec <rmw_create_publisher+0x1b8>)
 800ded0:	2b02      	cmp	r3, #2
 800ded2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ded6:	bf0c      	ite	eq
 800ded8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800dedc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800dee0:	67a3      	str	r3, [r4, #120]	; 0x78
 800dee2:	2300      	movs	r3, #0
 800dee4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800dee8:	4630      	mov	r0, r6
 800deea:	f000 fd8f 	bl	800ea0c <get_message_typesupport_handle>
 800deee:	2800      	cmp	r0, #0
 800def0:	d06f      	beq.n	800dfd2 <rmw_create_publisher+0x19e>
 800def2:	6842      	ldr	r2, [r0, #4]
 800def4:	61a2      	str	r2, [r4, #24]
 800def6:	2a00      	cmp	r2, #0
 800def8:	d06b      	beq.n	800dfd2 <rmw_create_publisher+0x19e>
 800defa:	4629      	mov	r1, r5
 800defc:	4643      	mov	r3, r8
 800defe:	4648      	mov	r0, r9
 800df00:	f007 fbc0 	bl	8015684 <create_topic>
 800df04:	6260      	str	r0, [r4, #36]	; 0x24
 800df06:	2800      	cmp	r0, #0
 800df08:	d063      	beq.n	800dfd2 <rmw_create_publisher+0x19e>
 800df0a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800df0e:	f241 5398 	movw	r3, #5528	; 0x1598
 800df12:	2103      	movs	r1, #3
 800df14:	5ad0      	ldrh	r0, [r2, r3]
 800df16:	1c45      	adds	r5, r0, #1
 800df18:	52d5      	strh	r5, [r2, r3]
 800df1a:	f001 ffff 	bl	800ff1c <uxr_object_id>
 800df1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df22:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800df26:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800df2a:	6912      	ldr	r2, [r2, #16]
 800df2c:	6120      	str	r0, [r4, #16]
 800df2e:	f04f 0a06 	mov.w	sl, #6
 800df32:	f8cd a000 	str.w	sl, [sp]
 800df36:	6819      	ldr	r1, [r3, #0]
 800df38:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800df3c:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800df40:	6922      	ldr	r2, [r4, #16]
 800df42:	f001 fe9b 	bl	800fc7c <uxr_buffer_create_publisher_bin>
 800df46:	4602      	mov	r2, r0
 800df48:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800df4c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800df50:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800df54:	f000 fccc 	bl	800e8f0 <run_xrce_session>
 800df58:	b3b8      	cbz	r0, 800dfca <rmw_create_publisher+0x196>
 800df5a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800df5e:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800df62:	f241 539a 	movw	r3, #5530	; 0x159a
 800df66:	2105      	movs	r1, #5
 800df68:	5ad0      	ldrh	r0, [r2, r3]
 800df6a:	1c45      	adds	r5, r0, #1
 800df6c:	52d5      	strh	r5, [r2, r3]
 800df6e:	f001 ffd5 	bl	800ff1c <uxr_object_id>
 800df72:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800df76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df7a:	6915      	ldr	r5, [r2, #16]
 800df7c:	6160      	str	r0, [r4, #20]
 800df7e:	ae04      	add	r6, sp, #16
 800df80:	4641      	mov	r1, r8
 800df82:	4630      	mov	r0, r6
 800df84:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800df88:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800df8c:	f000 fccc 	bl	800e928 <convert_qos_profile>
 800df90:	e896 0003 	ldmia.w	r6, {r0, r1}
 800df94:	f8cd a00c 	str.w	sl, [sp, #12]
 800df98:	9001      	str	r0, [sp, #4]
 800df9a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800df9e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800dfa8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800dfac:	f8d8 1000 	ldr.w	r1, [r8]
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	f001 fec1 	bl	800fd38 <uxr_buffer_create_datawriter_bin>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dfbc:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800dfc0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800dfc4:	f000 fc94 	bl	800e8f0 <run_xrce_session>
 800dfc8:	b938      	cbnz	r0, 800dfda <rmw_create_publisher+0x1a6>
 800dfca:	4806      	ldr	r0, [pc, #24]	; (800dfe4 <rmw_create_publisher+0x1b0>)
 800dfcc:	4621      	mov	r1, r4
 800dfce:	f007 f8b7 	bl	8015140 <put_memory>
 800dfd2:	4638      	mov	r0, r7
 800dfd4:	f000 fb3a 	bl	800e64c <rmw_uxrce_fini_publisher_memory>
 800dfd8:	2700      	movs	r7, #0
 800dfda:	4638      	mov	r0, r7
 800dfdc:	b007      	add	sp, #28
 800dfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe2:	bf00      	nop
 800dfe4:	20009ed0 	.word	0x20009ed0
 800dfe8:	08019afc 	.word	0x08019afc
 800dfec:	08019ac8 	.word	0x08019ac8

0800dff0 <rmw_publisher_get_actual_qos>:
 800dff0:	2000      	movs	r0, #0
 800dff2:	4770      	bx	lr

0800dff4 <rmw_destroy_publisher>:
 800dff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dff6:	b128      	cbz	r0, 800e004 <rmw_destroy_publisher+0x10>
 800dff8:	4604      	mov	r4, r0
 800dffa:	6800      	ldr	r0, [r0, #0]
 800dffc:	460d      	mov	r5, r1
 800dffe:	f000 fcf7 	bl	800e9f0 <is_uxrce_rmw_identifier_valid>
 800e002:	b910      	cbnz	r0, 800e00a <rmw_destroy_publisher+0x16>
 800e004:	2401      	movs	r4, #1
 800e006:	4620      	mov	r0, r4
 800e008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e00a:	6863      	ldr	r3, [r4, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d0f9      	beq.n	800e004 <rmw_destroy_publisher+0x10>
 800e010:	2d00      	cmp	r5, #0
 800e012:	d0f7      	beq.n	800e004 <rmw_destroy_publisher+0x10>
 800e014:	6828      	ldr	r0, [r5, #0]
 800e016:	f000 fceb 	bl	800e9f0 <is_uxrce_rmw_identifier_valid>
 800e01a:	2800      	cmp	r0, #0
 800e01c:	d0f2      	beq.n	800e004 <rmw_destroy_publisher+0x10>
 800e01e:	686c      	ldr	r4, [r5, #4]
 800e020:	2c00      	cmp	r4, #0
 800e022:	d0ef      	beq.n	800e004 <rmw_destroy_publisher+0x10>
 800e024:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e026:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800e02a:	f007 fb8d 	bl	8015748 <destroy_topic>
 800e02e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e032:	6962      	ldr	r2, [r4, #20]
 800e034:	6918      	ldr	r0, [r3, #16]
 800e036:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e03a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e03e:	6819      	ldr	r1, [r3, #0]
 800e040:	f001 fd6a 	bl	800fb18 <uxr_buffer_delete_entity>
 800e044:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800e048:	6922      	ldr	r2, [r4, #16]
 800e04a:	4603      	mov	r3, r0
 800e04c:	6908      	ldr	r0, [r1, #16]
 800e04e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e052:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e056:	6809      	ldr	r1, [r1, #0]
 800e058:	461c      	mov	r4, r3
 800e05a:	f001 fd5d 	bl	800fb18 <uxr_buffer_delete_entity>
 800e05e:	4606      	mov	r6, r0
 800e060:	6938      	ldr	r0, [r7, #16]
 800e062:	4622      	mov	r2, r4
 800e064:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e068:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e06c:	f000 fc40 	bl	800e8f0 <run_xrce_session>
 800e070:	4604      	mov	r4, r0
 800e072:	6938      	ldr	r0, [r7, #16]
 800e074:	4632      	mov	r2, r6
 800e076:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e07a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e07e:	f000 fc37 	bl	800e8f0 <run_xrce_session>
 800e082:	b12c      	cbz	r4, 800e090 <rmw_destroy_publisher+0x9c>
 800e084:	b120      	cbz	r0, 800e090 <rmw_destroy_publisher+0x9c>
 800e086:	2400      	movs	r4, #0
 800e088:	4628      	mov	r0, r5
 800e08a:	f000 fadf 	bl	800e64c <rmw_uxrce_fini_publisher_memory>
 800e08e:	e7ba      	b.n	800e006 <rmw_destroy_publisher+0x12>
 800e090:	2402      	movs	r4, #2
 800e092:	e7f9      	b.n	800e088 <rmw_destroy_publisher+0x94>

0800e094 <rmw_create_subscription>:
 800e094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e098:	b08d      	sub	sp, #52	; 0x34
 800e09a:	2800      	cmp	r0, #0
 800e09c:	f000 80cf 	beq.w	800e23e <rmw_create_subscription+0x1aa>
 800e0a0:	460e      	mov	r6, r1
 800e0a2:	2900      	cmp	r1, #0
 800e0a4:	f000 80cb 	beq.w	800e23e <rmw_create_subscription+0x1aa>
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	6800      	ldr	r0, [r0, #0]
 800e0ac:	4615      	mov	r5, r2
 800e0ae:	4698      	mov	r8, r3
 800e0b0:	f000 fc9e 	bl	800e9f0 <is_uxrce_rmw_identifier_valid>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	f000 80c2 	beq.w	800e23e <rmw_create_subscription+0x1aa>
 800e0ba:	2d00      	cmp	r5, #0
 800e0bc:	f000 80bf 	beq.w	800e23e <rmw_create_subscription+0x1aa>
 800e0c0:	782b      	ldrb	r3, [r5, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	f000 80bb 	beq.w	800e23e <rmw_create_subscription+0x1aa>
 800e0c8:	f1b8 0f00 	cmp.w	r8, #0
 800e0cc:	f000 80b7 	beq.w	800e23e <rmw_create_subscription+0x1aa>
 800e0d0:	485d      	ldr	r0, [pc, #372]	; (800e248 <rmw_create_subscription+0x1b4>)
 800e0d2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e0d6:	f007 f823 	bl	8015120 <get_memory>
 800e0da:	4604      	mov	r4, r0
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	f000 80af 	beq.w	800e240 <rmw_create_subscription+0x1ac>
 800e0e2:	68c7      	ldr	r7, [r0, #12]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e0ea:	f007 f881 	bl	80151f0 <rmw_get_implementation_identifier>
 800e0ee:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800e0f2:	67f8      	str	r0, [r7, #124]	; 0x7c
 800e0f4:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800e0f8:	4628      	mov	r0, r5
 800e0fa:	f7f2 f87b 	bl	80001f4 <strlen>
 800e0fe:	3001      	adds	r0, #1
 800e100:	283c      	cmp	r0, #60	; 0x3c
 800e102:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800e106:	f200 8097 	bhi.w	800e238 <rmw_create_subscription+0x1a4>
 800e10a:	4a50      	ldr	r2, [pc, #320]	; (800e24c <rmw_create_subscription+0x1b8>)
 800e10c:	462b      	mov	r3, r5
 800e10e:	213c      	movs	r1, #60	; 0x3c
 800e110:	4650      	mov	r0, sl
 800e112:	f00a f929 	bl	8018368 <sniprintf>
 800e116:	4641      	mov	r1, r8
 800e118:	f8c7 9020 	str.w	r9, [r7, #32]
 800e11c:	2250      	movs	r2, #80	; 0x50
 800e11e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e122:	f00a fba0 	bl	8018866 <memcpy>
 800e126:	494a      	ldr	r1, [pc, #296]	; (800e250 <rmw_create_subscription+0x1bc>)
 800e128:	4630      	mov	r0, r6
 800e12a:	f000 fc6f 	bl	800ea0c <get_message_typesupport_handle>
 800e12e:	2800      	cmp	r0, #0
 800e130:	f000 8082 	beq.w	800e238 <rmw_create_subscription+0x1a4>
 800e134:	6842      	ldr	r2, [r0, #4]
 800e136:	61ba      	str	r2, [r7, #24]
 800e138:	2a00      	cmp	r2, #0
 800e13a:	d07d      	beq.n	800e238 <rmw_create_subscription+0x1a4>
 800e13c:	4629      	mov	r1, r5
 800e13e:	4643      	mov	r3, r8
 800e140:	4648      	mov	r0, r9
 800e142:	f007 fa9f 	bl	8015684 <create_topic>
 800e146:	61f8      	str	r0, [r7, #28]
 800e148:	2800      	cmp	r0, #0
 800e14a:	d075      	beq.n	800e238 <rmw_create_subscription+0x1a4>
 800e14c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e150:	f241 539c 	movw	r3, #5532	; 0x159c
 800e154:	2104      	movs	r1, #4
 800e156:	5ad0      	ldrh	r0, [r2, r3]
 800e158:	1c45      	adds	r5, r0, #1
 800e15a:	52d5      	strh	r5, [r2, r3]
 800e15c:	f001 fede 	bl	800ff1c <uxr_object_id>
 800e160:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e164:	6138      	str	r0, [r7, #16]
 800e166:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800e16a:	2606      	movs	r6, #6
 800e16c:	9600      	str	r6, [sp, #0]
 800e16e:	6811      	ldr	r1, [r2, #0]
 800e170:	693a      	ldr	r2, [r7, #16]
 800e172:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800e176:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e17a:	f001 fdad 	bl	800fcd8 <uxr_buffer_create_subscriber_bin>
 800e17e:	4602      	mov	r2, r0
 800e180:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e184:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e188:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e18c:	f000 fbb0 	bl	800e8f0 <run_xrce_session>
 800e190:	2800      	cmp	r0, #0
 800e192:	d04d      	beq.n	800e230 <rmw_create_subscription+0x19c>
 800e194:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e198:	f241 539e 	movw	r3, #5534	; 0x159e
 800e19c:	4631      	mov	r1, r6
 800e19e:	5ad0      	ldrh	r0, [r2, r3]
 800e1a0:	1c45      	adds	r5, r0, #1
 800e1a2:	52d5      	strh	r5, [r2, r3]
 800e1a4:	f001 feba 	bl	800ff1c <uxr_object_id>
 800e1a8:	ad08      	add	r5, sp, #32
 800e1aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	6178      	str	r0, [r7, #20]
 800e1b2:	4641      	mov	r1, r8
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800e1ba:	9305      	str	r3, [sp, #20]
 800e1bc:	f000 fbb4 	bl	800e928 <convert_qos_profile>
 800e1c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e1c4:	9b05      	ldr	r3, [sp, #20]
 800e1c6:	9001      	str	r0, [sp, #4]
 800e1c8:	9603      	str	r6, [sp, #12]
 800e1ca:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e1ce:	691b      	ldr	r3, [r3, #16]
 800e1d0:	9300      	str	r3, [sp, #0]
 800e1d2:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800e1d6:	f8db 1000 	ldr.w	r1, [fp]
 800e1da:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800e1de:	f001 fe23 	bl	800fe28 <uxr_buffer_create_datareader_bin>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e1e8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e1ec:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e1f0:	f000 fb7e 	bl	800e8f0 <run_xrce_session>
 800e1f4:	b1e0      	cbz	r0, 800e230 <rmw_create_subscription+0x19c>
 800e1f6:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800e1fa:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e1fe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e202:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e206:	2200      	movs	r2, #0
 800e208:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800e20c:	2b02      	cmp	r3, #2
 800e20e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e212:	bf0c      	ite	eq
 800e214:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800e218:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800e21c:	9307      	str	r3, [sp, #28]
 800e21e:	aa0a      	add	r2, sp, #40	; 0x28
 800e220:	9200      	str	r2, [sp, #0]
 800e222:	697a      	ldr	r2, [r7, #20]
 800e224:	6809      	ldr	r1, [r1, #0]
 800e226:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e22a:	f001 fea5 	bl	800ff78 <uxr_buffer_request_data>
 800e22e:	e007      	b.n	800e240 <rmw_create_subscription+0x1ac>
 800e230:	4805      	ldr	r0, [pc, #20]	; (800e248 <rmw_create_subscription+0x1b4>)
 800e232:	4639      	mov	r1, r7
 800e234:	f006 ff84 	bl	8015140 <put_memory>
 800e238:	4620      	mov	r0, r4
 800e23a:	f000 fa1d 	bl	800e678 <rmw_uxrce_fini_subscription_memory>
 800e23e:	2400      	movs	r4, #0
 800e240:	4620      	mov	r0, r4
 800e242:	b00d      	add	sp, #52	; 0x34
 800e244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e248:	2000d12c 	.word	0x2000d12c
 800e24c:	08019afc 	.word	0x08019afc
 800e250:	08019ac8 	.word	0x08019ac8

0800e254 <rmw_subscription_get_actual_qos>:
 800e254:	2000      	movs	r0, #0
 800e256:	4770      	bx	lr

0800e258 <rmw_destroy_subscription>:
 800e258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e25a:	b128      	cbz	r0, 800e268 <rmw_destroy_subscription+0x10>
 800e25c:	4604      	mov	r4, r0
 800e25e:	6800      	ldr	r0, [r0, #0]
 800e260:	460d      	mov	r5, r1
 800e262:	f000 fbc5 	bl	800e9f0 <is_uxrce_rmw_identifier_valid>
 800e266:	b910      	cbnz	r0, 800e26e <rmw_destroy_subscription+0x16>
 800e268:	2401      	movs	r4, #1
 800e26a:	4620      	mov	r0, r4
 800e26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e26e:	6863      	ldr	r3, [r4, #4]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d0f9      	beq.n	800e268 <rmw_destroy_subscription+0x10>
 800e274:	2d00      	cmp	r5, #0
 800e276:	d0f7      	beq.n	800e268 <rmw_destroy_subscription+0x10>
 800e278:	6828      	ldr	r0, [r5, #0]
 800e27a:	f000 fbb9 	bl	800e9f0 <is_uxrce_rmw_identifier_valid>
 800e27e:	2800      	cmp	r0, #0
 800e280:	d0f2      	beq.n	800e268 <rmw_destroy_subscription+0x10>
 800e282:	686c      	ldr	r4, [r5, #4]
 800e284:	2c00      	cmp	r4, #0
 800e286:	d0ef      	beq.n	800e268 <rmw_destroy_subscription+0x10>
 800e288:	6a26      	ldr	r6, [r4, #32]
 800e28a:	6962      	ldr	r2, [r4, #20]
 800e28c:	6930      	ldr	r0, [r6, #16]
 800e28e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e292:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e296:	6819      	ldr	r1, [r3, #0]
 800e298:	f001 fea8 	bl	800ffec <uxr_buffer_cancel_data>
 800e29c:	4602      	mov	r2, r0
 800e29e:	6930      	ldr	r0, [r6, #16]
 800e2a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e2a4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e2a8:	f000 fb22 	bl	800e8f0 <run_xrce_session>
 800e2ac:	69e0      	ldr	r0, [r4, #28]
 800e2ae:	f007 fa4b 	bl	8015748 <destroy_topic>
 800e2b2:	6a23      	ldr	r3, [r4, #32]
 800e2b4:	6962      	ldr	r2, [r4, #20]
 800e2b6:	6918      	ldr	r0, [r3, #16]
 800e2b8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e2bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e2c0:	6819      	ldr	r1, [r3, #0]
 800e2c2:	f001 fc29 	bl	800fb18 <uxr_buffer_delete_entity>
 800e2c6:	6a21      	ldr	r1, [r4, #32]
 800e2c8:	6922      	ldr	r2, [r4, #16]
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	6908      	ldr	r0, [r1, #16]
 800e2ce:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e2d2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e2d6:	6809      	ldr	r1, [r1, #0]
 800e2d8:	461c      	mov	r4, r3
 800e2da:	f001 fc1d 	bl	800fb18 <uxr_buffer_delete_entity>
 800e2de:	4607      	mov	r7, r0
 800e2e0:	6930      	ldr	r0, [r6, #16]
 800e2e2:	4622      	mov	r2, r4
 800e2e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e2e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e2ec:	f000 fb00 	bl	800e8f0 <run_xrce_session>
 800e2f0:	4604      	mov	r4, r0
 800e2f2:	6930      	ldr	r0, [r6, #16]
 800e2f4:	463a      	mov	r2, r7
 800e2f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e2fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e2fe:	f000 faf7 	bl	800e8f0 <run_xrce_session>
 800e302:	b12c      	cbz	r4, 800e310 <rmw_destroy_subscription+0xb8>
 800e304:	b120      	cbz	r0, 800e310 <rmw_destroy_subscription+0xb8>
 800e306:	2400      	movs	r4, #0
 800e308:	4628      	mov	r0, r5
 800e30a:	f000 f9b5 	bl	800e678 <rmw_uxrce_fini_subscription_memory>
 800e30e:	e7ac      	b.n	800e26a <rmw_destroy_subscription+0x12>
 800e310:	2402      	movs	r4, #2
 800e312:	e7f9      	b.n	800e308 <rmw_destroy_subscription+0xb0>

0800e314 <rmw_take_with_info>:
 800e314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e316:	4604      	mov	r4, r0
 800e318:	6800      	ldr	r0, [r0, #0]
 800e31a:	b089      	sub	sp, #36	; 0x24
 800e31c:	460f      	mov	r7, r1
 800e31e:	4615      	mov	r5, r2
 800e320:	b128      	cbz	r0, 800e32e <rmw_take_with_info+0x1a>
 800e322:	4b24      	ldr	r3, [pc, #144]	; (800e3b4 <rmw_take_with_info+0xa0>)
 800e324:	6819      	ldr	r1, [r3, #0]
 800e326:	f7f1 ff5b 	bl	80001e0 <strcmp>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	d13e      	bne.n	800e3ac <rmw_take_with_info+0x98>
 800e32e:	b305      	cbz	r5, 800e372 <rmw_take_with_info+0x5e>
 800e330:	6864      	ldr	r4, [r4, #4]
 800e332:	2300      	movs	r3, #0
 800e334:	702b      	strb	r3, [r5, #0]
 800e336:	f000 fa63 	bl	800e800 <rmw_uxrce_clean_expired_static_input_buffer>
 800e33a:	4620      	mov	r0, r4
 800e33c:	f000 fa36 	bl	800e7ac <rmw_uxrce_find_static_input_buffer_by_owner>
 800e340:	4606      	mov	r6, r0
 800e342:	b1f0      	cbz	r0, 800e382 <rmw_take_with_info+0x6e>
 800e344:	68c1      	ldr	r1, [r0, #12]
 800e346:	4668      	mov	r0, sp
 800e348:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800e34c:	3110      	adds	r1, #16
 800e34e:	f001 fb73 	bl	800fa38 <ucdr_init_buffer>
 800e352:	69a3      	ldr	r3, [r4, #24]
 800e354:	4639      	mov	r1, r7
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	4668      	mov	r0, sp
 800e35a:	4798      	blx	r3
 800e35c:	4631      	mov	r1, r6
 800e35e:	4604      	mov	r4, r0
 800e360:	4815      	ldr	r0, [pc, #84]	; (800e3b8 <rmw_take_with_info+0xa4>)
 800e362:	f006 feed 	bl	8015140 <put_memory>
 800e366:	702c      	strb	r4, [r5, #0]
 800e368:	f084 0001 	eor.w	r0, r4, #1
 800e36c:	b2c0      	uxtb	r0, r0
 800e36e:	b009      	add	sp, #36	; 0x24
 800e370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e372:	6864      	ldr	r4, [r4, #4]
 800e374:	f000 fa44 	bl	800e800 <rmw_uxrce_clean_expired_static_input_buffer>
 800e378:	4620      	mov	r0, r4
 800e37a:	f000 fa17 	bl	800e7ac <rmw_uxrce_find_static_input_buffer_by_owner>
 800e37e:	4605      	mov	r5, r0
 800e380:	b910      	cbnz	r0, 800e388 <rmw_take_with_info+0x74>
 800e382:	2001      	movs	r0, #1
 800e384:	b009      	add	sp, #36	; 0x24
 800e386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e388:	68e9      	ldr	r1, [r5, #12]
 800e38a:	4668      	mov	r0, sp
 800e38c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800e390:	3110      	adds	r1, #16
 800e392:	f001 fb51 	bl	800fa38 <ucdr_init_buffer>
 800e396:	69a3      	ldr	r3, [r4, #24]
 800e398:	4639      	mov	r1, r7
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	4668      	mov	r0, sp
 800e39e:	4798      	blx	r3
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	4804      	ldr	r0, [pc, #16]	; (800e3b8 <rmw_take_with_info+0xa4>)
 800e3a6:	f006 fecb 	bl	8015140 <put_memory>
 800e3aa:	e7dd      	b.n	800e368 <rmw_take_with_info+0x54>
 800e3ac:	200c      	movs	r0, #12
 800e3ae:	b009      	add	sp, #36	; 0x24
 800e3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	0801a004 	.word	0x0801a004
 800e3b8:	20009ec0 	.word	0x20009ec0

0800e3bc <rmw_uxrce_init_service_memory>:
 800e3bc:	b1b2      	cbz	r2, 800e3ec <rmw_uxrce_init_service_memory+0x30>
 800e3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3c0:	7a07      	ldrb	r7, [r0, #8]
 800e3c2:	4605      	mov	r5, r0
 800e3c4:	b98f      	cbnz	r7, 800e3ea <rmw_uxrce_init_service_memory+0x2e>
 800e3c6:	e9c0 7700 	strd	r7, r7, [r0]
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	23c8      	movs	r3, #200	; 0xc8
 800e3ce:	2101      	movs	r1, #1
 800e3d0:	fb03 4602 	mla	r6, r3, r2, r4
 800e3d4:	60c3      	str	r3, [r0, #12]
 800e3d6:	7201      	strb	r1, [r0, #8]
 800e3d8:	4621      	mov	r1, r4
 800e3da:	4628      	mov	r0, r5
 800e3dc:	f006 feb0 	bl	8015140 <put_memory>
 800e3e0:	60e4      	str	r4, [r4, #12]
 800e3e2:	f804 7bc8 	strb.w	r7, [r4], #200
 800e3e6:	42a6      	cmp	r6, r4
 800e3e8:	d1f6      	bne.n	800e3d8 <rmw_uxrce_init_service_memory+0x1c>
 800e3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3ec:	4770      	bx	lr
 800e3ee:	bf00      	nop

0800e3f0 <rmw_uxrce_init_client_memory>:
 800e3f0:	b1b2      	cbz	r2, 800e420 <rmw_uxrce_init_client_memory+0x30>
 800e3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f4:	7a07      	ldrb	r7, [r0, #8]
 800e3f6:	4605      	mov	r5, r0
 800e3f8:	b98f      	cbnz	r7, 800e41e <rmw_uxrce_init_client_memory+0x2e>
 800e3fa:	e9c0 7700 	strd	r7, r7, [r0]
 800e3fe:	460c      	mov	r4, r1
 800e400:	23c8      	movs	r3, #200	; 0xc8
 800e402:	2101      	movs	r1, #1
 800e404:	fb03 4602 	mla	r6, r3, r2, r4
 800e408:	60c3      	str	r3, [r0, #12]
 800e40a:	7201      	strb	r1, [r0, #8]
 800e40c:	4621      	mov	r1, r4
 800e40e:	4628      	mov	r0, r5
 800e410:	f006 fe96 	bl	8015140 <put_memory>
 800e414:	60e4      	str	r4, [r4, #12]
 800e416:	f804 7bc8 	strb.w	r7, [r4], #200
 800e41a:	42a6      	cmp	r6, r4
 800e41c:	d1f6      	bne.n	800e40c <rmw_uxrce_init_client_memory+0x1c>
 800e41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop

0800e424 <rmw_uxrce_init_publisher_memory>:
 800e424:	b1b2      	cbz	r2, 800e454 <rmw_uxrce_init_publisher_memory+0x30>
 800e426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e428:	7a07      	ldrb	r7, [r0, #8]
 800e42a:	4605      	mov	r5, r0
 800e42c:	b98f      	cbnz	r7, 800e452 <rmw_uxrce_init_publisher_memory+0x2e>
 800e42e:	e9c0 7700 	strd	r7, r7, [r0]
 800e432:	460c      	mov	r4, r1
 800e434:	23d8      	movs	r3, #216	; 0xd8
 800e436:	2101      	movs	r1, #1
 800e438:	fb03 4602 	mla	r6, r3, r2, r4
 800e43c:	60c3      	str	r3, [r0, #12]
 800e43e:	7201      	strb	r1, [r0, #8]
 800e440:	4621      	mov	r1, r4
 800e442:	4628      	mov	r0, r5
 800e444:	f006 fe7c 	bl	8015140 <put_memory>
 800e448:	60e4      	str	r4, [r4, #12]
 800e44a:	f804 7bd8 	strb.w	r7, [r4], #216
 800e44e:	42a6      	cmp	r6, r4
 800e450:	d1f6      	bne.n	800e440 <rmw_uxrce_init_publisher_memory+0x1c>
 800e452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e454:	4770      	bx	lr
 800e456:	bf00      	nop

0800e458 <rmw_uxrce_init_subscription_memory>:
 800e458:	b1b2      	cbz	r2, 800e488 <rmw_uxrce_init_subscription_memory+0x30>
 800e45a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e45c:	7a07      	ldrb	r7, [r0, #8]
 800e45e:	4605      	mov	r5, r0
 800e460:	b98f      	cbnz	r7, 800e486 <rmw_uxrce_init_subscription_memory+0x2e>
 800e462:	e9c0 7700 	strd	r7, r7, [r0]
 800e466:	460c      	mov	r4, r1
 800e468:	23d0      	movs	r3, #208	; 0xd0
 800e46a:	2101      	movs	r1, #1
 800e46c:	fb03 4602 	mla	r6, r3, r2, r4
 800e470:	60c3      	str	r3, [r0, #12]
 800e472:	7201      	strb	r1, [r0, #8]
 800e474:	4621      	mov	r1, r4
 800e476:	4628      	mov	r0, r5
 800e478:	f006 fe62 	bl	8015140 <put_memory>
 800e47c:	60e4      	str	r4, [r4, #12]
 800e47e:	f804 7bd0 	strb.w	r7, [r4], #208
 800e482:	42a6      	cmp	r6, r4
 800e484:	d1f6      	bne.n	800e474 <rmw_uxrce_init_subscription_memory+0x1c>
 800e486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop

0800e48c <rmw_uxrce_init_node_memory>:
 800e48c:	b1b2      	cbz	r2, 800e4bc <rmw_uxrce_init_node_memory+0x30>
 800e48e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e490:	7a07      	ldrb	r7, [r0, #8]
 800e492:	4605      	mov	r5, r0
 800e494:	b98f      	cbnz	r7, 800e4ba <rmw_uxrce_init_node_memory+0x2e>
 800e496:	e9c0 7700 	strd	r7, r7, [r0]
 800e49a:	460c      	mov	r4, r1
 800e49c:	23a4      	movs	r3, #164	; 0xa4
 800e49e:	2101      	movs	r1, #1
 800e4a0:	fb03 4602 	mla	r6, r3, r2, r4
 800e4a4:	60c3      	str	r3, [r0, #12]
 800e4a6:	7201      	strb	r1, [r0, #8]
 800e4a8:	4621      	mov	r1, r4
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	f006 fe48 	bl	8015140 <put_memory>
 800e4b0:	60e4      	str	r4, [r4, #12]
 800e4b2:	f804 7ba4 	strb.w	r7, [r4], #164
 800e4b6:	42a6      	cmp	r6, r4
 800e4b8:	d1f6      	bne.n	800e4a8 <rmw_uxrce_init_node_memory+0x1c>
 800e4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop

0800e4c0 <rmw_uxrce_init_session_memory>:
 800e4c0:	b1d2      	cbz	r2, 800e4f8 <rmw_uxrce_init_session_memory+0x38>
 800e4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c6:	7a07      	ldrb	r7, [r0, #8]
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	b99f      	cbnz	r7, 800e4f4 <rmw_uxrce_init_session_memory+0x34>
 800e4cc:	e9c0 7700 	strd	r7, r7, [r0]
 800e4d0:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	2101      	movs	r1, #1
 800e4d8:	fb03 4602 	mla	r6, r3, r2, r4
 800e4dc:	60c3      	str	r3, [r0, #12]
 800e4de:	4698      	mov	r8, r3
 800e4e0:	7201      	strb	r1, [r0, #8]
 800e4e2:	4621      	mov	r1, r4
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	f006 fe2b 	bl	8015140 <put_memory>
 800e4ea:	60e4      	str	r4, [r4, #12]
 800e4ec:	7027      	strb	r7, [r4, #0]
 800e4ee:	4444      	add	r4, r8
 800e4f0:	42a6      	cmp	r6, r4
 800e4f2:	d1f6      	bne.n	800e4e2 <rmw_uxrce_init_session_memory+0x22>
 800e4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4f8:	4770      	bx	lr
 800e4fa:	bf00      	nop

0800e4fc <rmw_uxrce_init_topic_memory>:
 800e4fc:	b1c2      	cbz	r2, 800e530 <rmw_uxrce_init_topic_memory+0x34>
 800e4fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e500:	7a07      	ldrb	r7, [r0, #8]
 800e502:	4606      	mov	r6, r0
 800e504:	b99f      	cbnz	r7, 800e52e <rmw_uxrce_init_topic_memory+0x32>
 800e506:	e9c0 7700 	strd	r7, r7, [r0]
 800e50a:	460c      	mov	r4, r1
 800e50c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e510:	2101      	movs	r1, #1
 800e512:	231c      	movs	r3, #28
 800e514:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e518:	7201      	strb	r1, [r0, #8]
 800e51a:	60c3      	str	r3, [r0, #12]
 800e51c:	4621      	mov	r1, r4
 800e51e:	4630      	mov	r0, r6
 800e520:	f006 fe0e 	bl	8015140 <put_memory>
 800e524:	60e4      	str	r4, [r4, #12]
 800e526:	f804 7b1c 	strb.w	r7, [r4], #28
 800e52a:	42a5      	cmp	r5, r4
 800e52c:	d1f6      	bne.n	800e51c <rmw_uxrce_init_topic_memory+0x20>
 800e52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop

0800e534 <rmw_uxrce_init_static_input_buffer_memory>:
 800e534:	b1d2      	cbz	r2, 800e56c <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800e536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e538:	7a07      	ldrb	r7, [r0, #8]
 800e53a:	4606      	mov	r6, r0
 800e53c:	b9af      	cbnz	r7, 800e56a <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800e53e:	e9c0 7700 	strd	r7, r7, [r0]
 800e542:	460c      	mov	r4, r1
 800e544:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800e548:	2101      	movs	r1, #1
 800e54a:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800e54e:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800e552:	7201      	strb	r1, [r0, #8]
 800e554:	60c3      	str	r3, [r0, #12]
 800e556:	4621      	mov	r1, r4
 800e558:	4630      	mov	r0, r6
 800e55a:	f006 fdf1 	bl	8015140 <put_memory>
 800e55e:	60e4      	str	r4, [r4, #12]
 800e560:	7027      	strb	r7, [r4, #0]
 800e562:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800e566:	42a5      	cmp	r5, r4
 800e568:	d1f5      	bne.n	800e556 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop

0800e570 <rmw_uxrce_init_init_options_impl_memory>:
 800e570:	b1b2      	cbz	r2, 800e5a0 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800e572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e574:	7a07      	ldrb	r7, [r0, #8]
 800e576:	4605      	mov	r5, r0
 800e578:	b98f      	cbnz	r7, 800e59e <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800e57a:	e9c0 7700 	strd	r7, r7, [r0]
 800e57e:	460c      	mov	r4, r1
 800e580:	232c      	movs	r3, #44	; 0x2c
 800e582:	2101      	movs	r1, #1
 800e584:	fb03 4602 	mla	r6, r3, r2, r4
 800e588:	60c3      	str	r3, [r0, #12]
 800e58a:	7201      	strb	r1, [r0, #8]
 800e58c:	4621      	mov	r1, r4
 800e58e:	4628      	mov	r0, r5
 800e590:	f006 fdd6 	bl	8015140 <put_memory>
 800e594:	60e4      	str	r4, [r4, #12]
 800e596:	f804 7b2c 	strb.w	r7, [r4], #44
 800e59a:	42a6      	cmp	r6, r4
 800e59c:	d1f6      	bne.n	800e58c <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800e59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop

0800e5a4 <rmw_uxrce_init_wait_set_memory>:
 800e5a4:	b1c2      	cbz	r2, 800e5d8 <rmw_uxrce_init_wait_set_memory+0x34>
 800e5a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a8:	7a07      	ldrb	r7, [r0, #8]
 800e5aa:	4606      	mov	r6, r0
 800e5ac:	b99f      	cbnz	r7, 800e5d6 <rmw_uxrce_init_wait_set_memory+0x32>
 800e5ae:	e9c0 7700 	strd	r7, r7, [r0]
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e5b8:	2101      	movs	r1, #1
 800e5ba:	231c      	movs	r3, #28
 800e5bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e5c0:	7201      	strb	r1, [r0, #8]
 800e5c2:	60c3      	str	r3, [r0, #12]
 800e5c4:	4621      	mov	r1, r4
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	f006 fdba 	bl	8015140 <put_memory>
 800e5cc:	60e4      	str	r4, [r4, #12]
 800e5ce:	f804 7b1c 	strb.w	r7, [r4], #28
 800e5d2:	42a5      	cmp	r5, r4
 800e5d4:	d1f6      	bne.n	800e5c4 <rmw_uxrce_init_wait_set_memory+0x20>
 800e5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop

0800e5dc <rmw_uxrce_init_guard_condition_memory>:
 800e5dc:	b1b2      	cbz	r2, 800e60c <rmw_uxrce_init_guard_condition_memory+0x30>
 800e5de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5e0:	7a07      	ldrb	r7, [r0, #8]
 800e5e2:	4605      	mov	r5, r0
 800e5e4:	b98f      	cbnz	r7, 800e60a <rmw_uxrce_init_guard_condition_memory+0x2e>
 800e5e6:	e9c0 7700 	strd	r7, r7, [r0]
 800e5ea:	460c      	mov	r4, r1
 800e5ec:	2320      	movs	r3, #32
 800e5ee:	2101      	movs	r1, #1
 800e5f0:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800e5f4:	7201      	strb	r1, [r0, #8]
 800e5f6:	60c3      	str	r3, [r0, #12]
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f006 fda0 	bl	8015140 <put_memory>
 800e600:	60e4      	str	r4, [r4, #12]
 800e602:	f804 7b20 	strb.w	r7, [r4], #32
 800e606:	42a6      	cmp	r6, r4
 800e608:	d1f6      	bne.n	800e5f8 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800e60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop

0800e610 <rmw_uxrce_fini_session_memory>:
 800e610:	4601      	mov	r1, r0
 800e612:	4801      	ldr	r0, [pc, #4]	; (800e618 <rmw_uxrce_fini_session_memory+0x8>)
 800e614:	f006 bd94 	b.w	8015140 <put_memory>
 800e618:	2000d068 	.word	0x2000d068

0800e61c <rmw_uxrce_fini_node_memory>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	4604      	mov	r4, r0
 800e620:	6800      	ldr	r0, [r0, #0]
 800e622:	b128      	cbz	r0, 800e630 <rmw_uxrce_fini_node_memory+0x14>
 800e624:	4b07      	ldr	r3, [pc, #28]	; (800e644 <rmw_uxrce_fini_node_memory+0x28>)
 800e626:	6819      	ldr	r1, [r3, #0]
 800e628:	f7f1 fdda 	bl	80001e0 <strcmp>
 800e62c:	b940      	cbnz	r0, 800e640 <rmw_uxrce_fini_node_memory+0x24>
 800e62e:	6020      	str	r0, [r4, #0]
 800e630:	6861      	ldr	r1, [r4, #4]
 800e632:	b129      	cbz	r1, 800e640 <rmw_uxrce_fini_node_memory+0x24>
 800e634:	2500      	movs	r5, #0
 800e636:	4804      	ldr	r0, [pc, #16]	; (800e648 <rmw_uxrce_fini_node_memory+0x2c>)
 800e638:	610d      	str	r5, [r1, #16]
 800e63a:	f006 fd81 	bl	8015140 <put_memory>
 800e63e:	6065      	str	r5, [r4, #4]
 800e640:	bd38      	pop	{r3, r4, r5, pc}
 800e642:	bf00      	nop
 800e644:	0801a004 	.word	0x0801a004
 800e648:	2000ce94 	.word	0x2000ce94

0800e64c <rmw_uxrce_fini_publisher_memory>:
 800e64c:	b510      	push	{r4, lr}
 800e64e:	4604      	mov	r4, r0
 800e650:	6800      	ldr	r0, [r0, #0]
 800e652:	b128      	cbz	r0, 800e660 <rmw_uxrce_fini_publisher_memory+0x14>
 800e654:	4b06      	ldr	r3, [pc, #24]	; (800e670 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e656:	6819      	ldr	r1, [r3, #0]
 800e658:	f7f1 fdc2 	bl	80001e0 <strcmp>
 800e65c:	b938      	cbnz	r0, 800e66e <rmw_uxrce_fini_publisher_memory+0x22>
 800e65e:	6020      	str	r0, [r4, #0]
 800e660:	6861      	ldr	r1, [r4, #4]
 800e662:	b121      	cbz	r1, 800e66e <rmw_uxrce_fini_publisher_memory+0x22>
 800e664:	4803      	ldr	r0, [pc, #12]	; (800e674 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e666:	f006 fd6b 	bl	8015140 <put_memory>
 800e66a:	2300      	movs	r3, #0
 800e66c:	6063      	str	r3, [r4, #4]
 800e66e:	bd10      	pop	{r4, pc}
 800e670:	0801a004 	.word	0x0801a004
 800e674:	20009ed0 	.word	0x20009ed0

0800e678 <rmw_uxrce_fini_subscription_memory>:
 800e678:	b510      	push	{r4, lr}
 800e67a:	4604      	mov	r4, r0
 800e67c:	6800      	ldr	r0, [r0, #0]
 800e67e:	b128      	cbz	r0, 800e68c <rmw_uxrce_fini_subscription_memory+0x14>
 800e680:	4b06      	ldr	r3, [pc, #24]	; (800e69c <rmw_uxrce_fini_subscription_memory+0x24>)
 800e682:	6819      	ldr	r1, [r3, #0]
 800e684:	f7f1 fdac 	bl	80001e0 <strcmp>
 800e688:	b938      	cbnz	r0, 800e69a <rmw_uxrce_fini_subscription_memory+0x22>
 800e68a:	6020      	str	r0, [r4, #0]
 800e68c:	6861      	ldr	r1, [r4, #4]
 800e68e:	b121      	cbz	r1, 800e69a <rmw_uxrce_fini_subscription_memory+0x22>
 800e690:	4803      	ldr	r0, [pc, #12]	; (800e6a0 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e692:	f006 fd55 	bl	8015140 <put_memory>
 800e696:	2300      	movs	r3, #0
 800e698:	6063      	str	r3, [r4, #4]
 800e69a:	bd10      	pop	{r4, pc}
 800e69c:	0801a004 	.word	0x0801a004
 800e6a0:	2000d12c 	.word	0x2000d12c

0800e6a4 <rmw_uxrce_fini_service_memory>:
 800e6a4:	b510      	push	{r4, lr}
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	6800      	ldr	r0, [r0, #0]
 800e6aa:	b128      	cbz	r0, 800e6b8 <rmw_uxrce_fini_service_memory+0x14>
 800e6ac:	4b06      	ldr	r3, [pc, #24]	; (800e6c8 <rmw_uxrce_fini_service_memory+0x24>)
 800e6ae:	6819      	ldr	r1, [r3, #0]
 800e6b0:	f7f1 fd96 	bl	80001e0 <strcmp>
 800e6b4:	b938      	cbnz	r0, 800e6c6 <rmw_uxrce_fini_service_memory+0x22>
 800e6b6:	6020      	str	r0, [r4, #0]
 800e6b8:	6861      	ldr	r1, [r4, #4]
 800e6ba:	b121      	cbz	r1, 800e6c6 <rmw_uxrce_fini_service_memory+0x22>
 800e6bc:	4803      	ldr	r0, [pc, #12]	; (800e6cc <rmw_uxrce_fini_service_memory+0x28>)
 800e6be:	f006 fd3f 	bl	8015140 <put_memory>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	6063      	str	r3, [r4, #4]
 800e6c6:	bd10      	pop	{r4, pc}
 800e6c8:	0801a004 	.word	0x0801a004
 800e6cc:	2000d11c 	.word	0x2000d11c

0800e6d0 <rmw_uxrce_fini_client_memory>:
 800e6d0:	b510      	push	{r4, lr}
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	6800      	ldr	r0, [r0, #0]
 800e6d6:	b128      	cbz	r0, 800e6e4 <rmw_uxrce_fini_client_memory+0x14>
 800e6d8:	4b06      	ldr	r3, [pc, #24]	; (800e6f4 <rmw_uxrce_fini_client_memory+0x24>)
 800e6da:	6819      	ldr	r1, [r3, #0]
 800e6dc:	f7f1 fd80 	bl	80001e0 <strcmp>
 800e6e0:	b938      	cbnz	r0, 800e6f2 <rmw_uxrce_fini_client_memory+0x22>
 800e6e2:	6020      	str	r0, [r4, #0]
 800e6e4:	6861      	ldr	r1, [r4, #4]
 800e6e6:	b121      	cbz	r1, 800e6f2 <rmw_uxrce_fini_client_memory+0x22>
 800e6e8:	4803      	ldr	r0, [pc, #12]	; (800e6f8 <rmw_uxrce_fini_client_memory+0x28>)
 800e6ea:	f006 fd29 	bl	8015140 <put_memory>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	6063      	str	r3, [r4, #4]
 800e6f2:	bd10      	pop	{r4, pc}
 800e6f4:	0801a004 	.word	0x0801a004
 800e6f8:	2000a750 	.word	0x2000a750

0800e6fc <rmw_uxrce_fini_topic_memory>:
 800e6fc:	b510      	push	{r4, lr}
 800e6fe:	4601      	mov	r1, r0
 800e700:	4604      	mov	r4, r0
 800e702:	4803      	ldr	r0, [pc, #12]	; (800e710 <rmw_uxrce_fini_topic_memory+0x14>)
 800e704:	f006 fd1c 	bl	8015140 <put_memory>
 800e708:	2300      	movs	r3, #0
 800e70a:	61a3      	str	r3, [r4, #24]
 800e70c:	bd10      	pop	{r4, pc}
 800e70e:	bf00      	nop
 800e710:	2000d058 	.word	0x2000d058

0800e714 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e714:	b082      	sub	sp, #8
 800e716:	b4f0      	push	{r4, r5, r6, r7}
 800e718:	4923      	ldr	r1, [pc, #140]	; (800e7a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800e71a:	ac04      	add	r4, sp, #16
 800e71c:	e884 000c 	stmia.w	r4, {r2, r3}
 800e720:	680d      	ldr	r5, [r1, #0]
 800e722:	9c05      	ldr	r4, [sp, #20]
 800e724:	2d00      	cmp	r5, #0
 800e726:	d03d      	beq.n	800e7a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800e728:	462b      	mov	r3, r5
 800e72a:	2100      	movs	r1, #0
 800e72c:	68da      	ldr	r2, [r3, #12]
 800e72e:	689b      	ldr	r3, [r3, #8]
 800e730:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800e734:	4290      	cmp	r0, r2
 800e736:	bf08      	it	eq
 800e738:	3101      	addeq	r1, #1
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1f6      	bne.n	800e72c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e73e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e742:	2b02      	cmp	r3, #2
 800e744:	d026      	beq.n	800e794 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800e746:	d906      	bls.n	800e756 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800e748:	2b03      	cmp	r3, #3
 800e74a:	d004      	beq.n	800e756 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800e74c:	2100      	movs	r1, #0
 800e74e:	bcf0      	pop	{r4, r5, r6, r7}
 800e750:	4608      	mov	r0, r1
 800e752:	b002      	add	sp, #8
 800e754:	4770      	bx	lr
 800e756:	b304      	cbz	r4, 800e79a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e758:	428c      	cmp	r4, r1
 800e75a:	d81e      	bhi.n	800e79a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e75c:	2d00      	cmp	r5, #0
 800e75e:	d0f5      	beq.n	800e74c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e760:	2100      	movs	r1, #0
 800e762:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e766:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800e76a:	e002      	b.n	800e772 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800e76c:	68ad      	ldr	r5, [r5, #8]
 800e76e:	2d00      	cmp	r5, #0
 800e770:	d0ed      	beq.n	800e74e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e772:	68eb      	ldr	r3, [r5, #12]
 800e774:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800e778:	4290      	cmp	r0, r2
 800e77a:	d1f7      	bne.n	800e76c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e77c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800e780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e784:	42b2      	cmp	r2, r6
 800e786:	eb73 0407 	sbcs.w	r4, r3, r7
 800e78a:	daef      	bge.n	800e76c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e78c:	4616      	mov	r6, r2
 800e78e:	461f      	mov	r7, r3
 800e790:	4629      	mov	r1, r5
 800e792:	e7eb      	b.n	800e76c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e794:	b10c      	cbz	r4, 800e79a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e796:	428c      	cmp	r4, r1
 800e798:	d9d8      	bls.n	800e74c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e79a:	bcf0      	pop	{r4, r5, r6, r7}
 800e79c:	4802      	ldr	r0, [pc, #8]	; (800e7a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800e79e:	b002      	add	sp, #8
 800e7a0:	f006 bcbe 	b.w	8015120 <get_memory>
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	e7ca      	b.n	800e73e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e7a8:	20009ec0 	.word	0x20009ec0

0800e7ac <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e7ac:	4b12      	ldr	r3, [pc, #72]	; (800e7f8 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	b1fb      	cbz	r3, 800e7f2 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800e7b2:	b4f0      	push	{r4, r5, r6, r7}
 800e7b4:	f04f 0c00 	mov.w	ip, #0
 800e7b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e7bc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800e7c0:	e001      	b.n	800e7c6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800e7c2:	689b      	ldr	r3, [r3, #8]
 800e7c4:	b193      	cbz	r3, 800e7ec <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800e7c6:	68da      	ldr	r2, [r3, #12]
 800e7c8:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800e7cc:	4288      	cmp	r0, r1
 800e7ce:	d1f8      	bne.n	800e7c2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800e7d0:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800e7d4:	e9d2 6700 	ldrd	r6, r7, [r2]
 800e7d8:	42a6      	cmp	r6, r4
 800e7da:	eb77 0205 	sbcs.w	r2, r7, r5
 800e7de:	daf0      	bge.n	800e7c2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800e7e0:	469c      	mov	ip, r3
 800e7e2:	689b      	ldr	r3, [r3, #8]
 800e7e4:	4634      	mov	r4, r6
 800e7e6:	463d      	mov	r5, r7
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d1ec      	bne.n	800e7c6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800e7ec:	4660      	mov	r0, ip
 800e7ee:	bcf0      	pop	{r4, r5, r6, r7}
 800e7f0:	4770      	bx	lr
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop
 800e7f8:	20009ec0 	.word	0x20009ec0
 800e7fc:	00000000 	.word	0x00000000

0800e800 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e804:	4e38      	ldr	r6, [pc, #224]	; (800e8e8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800e806:	f8d6 8000 	ldr.w	r8, [r6]
 800e80a:	b083      	sub	sp, #12
 800e80c:	f007 fbd2 	bl	8015fb4 <rmw_uros_epoch_nanos>
 800e810:	f1b8 0f00 	cmp.w	r8, #0
 800e814:	d05f      	beq.n	800e8d6 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800e816:	46b1      	mov	r9, r6
 800e818:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800e81c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800e820:	2b04      	cmp	r3, #4
 800e822:	4682      	mov	sl, r0
 800e824:	468b      	mov	fp, r1
 800e826:	d02d      	beq.n	800e884 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800e828:	2b05      	cmp	r3, #5
 800e82a:	d041      	beq.n	800e8b0 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800e82c:	2b03      	cmp	r3, #3
 800e82e:	d029      	beq.n	800e884 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800e830:	2200      	movs	r2, #0
 800e832:	2300      	movs	r3, #0
 800e834:	e9cd 2300 	strd	r2, r3, [sp]
 800e838:	2001      	movs	r0, #1
 800e83a:	2100      	movs	r1, #0
 800e83c:	9b00      	ldr	r3, [sp, #0]
 800e83e:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800e842:	e9d6 6700 	ldrd	r6, r7, [r6]
 800e846:	18c2      	adds	r2, r0, r3
 800e848:	9b01      	ldr	r3, [sp, #4]
 800e84a:	eb41 0303 	adc.w	r3, r1, r3
 800e84e:	1994      	adds	r4, r2, r6
 800e850:	eb43 0507 	adc.w	r5, r3, r7
 800e854:	4554      	cmp	r4, sl
 800e856:	eb75 020b 	sbcs.w	r2, r5, fp
 800e85a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e85e:	db03      	blt.n	800e868 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e860:	45b2      	cmp	sl, r6
 800e862:	eb7b 0207 	sbcs.w	r2, fp, r7
 800e866:	da05      	bge.n	800e874 <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800e868:	4641      	mov	r1, r8
 800e86a:	4648      	mov	r0, r9
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	f006 fc67 	bl	8015140 <put_memory>
 800e872:	9b00      	ldr	r3, [sp, #0]
 800e874:	b37b      	cbz	r3, 800e8d6 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800e876:	4698      	mov	r8, r3
 800e878:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800e87c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800e880:	2b04      	cmp	r3, #4
 800e882:	d1d1      	bne.n	800e828 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800e884:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800e888:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800e88c:	e9cd 2300 	strd	r2, r3, [sp]
 800e890:	4313      	orrs	r3, r2
 800e892:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800e896:	d015      	beq.n	800e8c4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e898:	9a01      	ldr	r2, [sp, #4]
 800e89a:	4b14      	ldr	r3, [pc, #80]	; (800e8ec <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800e89c:	fb03 f702 	mul.w	r7, r3, r2
 800e8a0:	9a00      	ldr	r2, [sp, #0]
 800e8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8a6:	e9cd 2300 	strd	r2, r3, [sp]
 800e8aa:	443b      	add	r3, r7
 800e8ac:	9301      	str	r3, [sp, #4]
 800e8ae:	e7c5      	b.n	800e83c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800e8b0:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800e8b4:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800e8b8:	e9cd 2300 	strd	r2, r3, [sp]
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800e8c2:	d1e9      	bne.n	800e898 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800e8c4:	ea50 0301 	orrs.w	r3, r0, r1
 800e8c8:	bf02      	ittt	eq
 800e8ca:	a305      	addeq	r3, pc, #20	; (adr r3, 800e8e0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800e8cc:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800e8d0:	e9cd 2300 	strdeq	r2, r3, [sp]
 800e8d4:	e7b2      	b.n	800e83c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800e8d6:	b003      	add	sp, #12
 800e8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8dc:	f3af 8000 	nop.w
 800e8e0:	fc23ac00 	.word	0xfc23ac00
 800e8e4:	00000006 	.word	0x00000006
 800e8e8:	20009ec0 	.word	0x20009ec0
 800e8ec:	3b9aca00 	.word	0x3b9aca00

0800e8f0 <run_xrce_session>:
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	788c      	ldrb	r4, [r1, #2]
 800e8f4:	b086      	sub	sp, #24
 800e8f6:	2c01      	cmp	r4, #1
 800e8f8:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e8fc:	d00c      	beq.n	800e918 <run_xrce_session+0x28>
 800e8fe:	4619      	mov	r1, r3
 800e900:	2301      	movs	r3, #1
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	f10d 020e 	add.w	r2, sp, #14
 800e908:	f10d 0317 	add.w	r3, sp, #23
 800e90c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e910:	f002 f958 	bl	8010bc4 <uxr_run_session_until_all_status>
 800e914:	b006      	add	sp, #24
 800e916:	bd10      	pop	{r4, pc}
 800e918:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e91c:	f001 fd70 	bl	8010400 <uxr_flash_output_streams>
 800e920:	4620      	mov	r0, r4
 800e922:	b006      	add	sp, #24
 800e924:	bd10      	pop	{r4, pc}
 800e926:	bf00      	nop

0800e928 <convert_qos_profile>:
 800e928:	b430      	push	{r4, r5}
 800e92a:	7a0d      	ldrb	r5, [r1, #8]
 800e92c:	780c      	ldrb	r4, [r1, #0]
 800e92e:	7a4a      	ldrb	r2, [r1, #9]
 800e930:	8889      	ldrh	r1, [r1, #4]
 800e932:	8081      	strh	r1, [r0, #4]
 800e934:	f1a5 0502 	sub.w	r5, r5, #2
 800e938:	f1a4 0402 	sub.w	r4, r4, #2
 800e93c:	2a02      	cmp	r2, #2
 800e93e:	fab5 f585 	clz	r5, r5
 800e942:	fab4 f484 	clz	r4, r4
 800e946:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800e94a:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800e94e:	bf18      	it	ne
 800e950:	2200      	movne	r2, #0
 800e952:	7045      	strb	r5, [r0, #1]
 800e954:	7084      	strb	r4, [r0, #2]
 800e956:	7002      	strb	r2, [r0, #0]
 800e958:	bc30      	pop	{r4, r5}
 800e95a:	4770      	bx	lr

0800e95c <generate_type_name>:
 800e95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e95e:	2300      	movs	r3, #0
 800e960:	700b      	strb	r3, [r1, #0]
 800e962:	6803      	ldr	r3, [r0, #0]
 800e964:	b087      	sub	sp, #28
 800e966:	4614      	mov	r4, r2
 800e968:	b1d3      	cbz	r3, 800e9a0 <generate_type_name+0x44>
 800e96a:	4d0f      	ldr	r5, [pc, #60]	; (800e9a8 <generate_type_name+0x4c>)
 800e96c:	462f      	mov	r7, r5
 800e96e:	4a0f      	ldr	r2, [pc, #60]	; (800e9ac <generate_type_name+0x50>)
 800e970:	4e0f      	ldr	r6, [pc, #60]	; (800e9b0 <generate_type_name+0x54>)
 800e972:	6840      	ldr	r0, [r0, #4]
 800e974:	9004      	str	r0, [sp, #16]
 800e976:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800e97a:	4608      	mov	r0, r1
 800e97c:	9205      	str	r2, [sp, #20]
 800e97e:	9503      	str	r5, [sp, #12]
 800e980:	4a0c      	ldr	r2, [pc, #48]	; (800e9b4 <generate_type_name+0x58>)
 800e982:	9700      	str	r7, [sp, #0]
 800e984:	4621      	mov	r1, r4
 800e986:	f009 fcef 	bl	8018368 <sniprintf>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	db05      	blt.n	800e99a <generate_type_name+0x3e>
 800e98e:	4284      	cmp	r4, r0
 800e990:	bfd4      	ite	le
 800e992:	2000      	movle	r0, #0
 800e994:	2001      	movgt	r0, #1
 800e996:	b007      	add	sp, #28
 800e998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e99a:	2000      	movs	r0, #0
 800e99c:	b007      	add	sp, #28
 800e99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9a0:	4b05      	ldr	r3, [pc, #20]	; (800e9b8 <generate_type_name+0x5c>)
 800e9a2:	4d01      	ldr	r5, [pc, #4]	; (800e9a8 <generate_type_name+0x4c>)
 800e9a4:	461f      	mov	r7, r3
 800e9a6:	e7e2      	b.n	800e96e <generate_type_name+0x12>
 800e9a8:	08019aec 	.word	0x08019aec
 800e9ac:	08019b00 	.word	0x08019b00
 800e9b0:	08019b04 	.word	0x08019b04
 800e9b4:	08019af0 	.word	0x08019af0
 800e9b8:	08019ddc 	.word	0x08019ddc

0800e9bc <generate_topic_name>:
 800e9bc:	b510      	push	{r4, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	4b09      	ldr	r3, [pc, #36]	; (800e9e8 <generate_topic_name+0x2c>)
 800e9c2:	9000      	str	r0, [sp, #0]
 800e9c4:	4614      	mov	r4, r2
 800e9c6:	4608      	mov	r0, r1
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	4a08      	ldr	r2, [pc, #32]	; (800e9ec <generate_topic_name+0x30>)
 800e9cc:	f009 fccc 	bl	8018368 <sniprintf>
 800e9d0:	2800      	cmp	r0, #0
 800e9d2:	db05      	blt.n	800e9e0 <generate_topic_name+0x24>
 800e9d4:	4284      	cmp	r4, r0
 800e9d6:	bfd4      	ite	le
 800e9d8:	2000      	movle	r0, #0
 800e9da:	2001      	movgt	r0, #1
 800e9dc:	b002      	add	sp, #8
 800e9de:	bd10      	pop	{r4, pc}
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	b002      	add	sp, #8
 800e9e4:	bd10      	pop	{r4, pc}
 800e9e6:	bf00      	nop
 800e9e8:	08019b10 	.word	0x08019b10
 800e9ec:	08019b08 	.word	0x08019b08

0800e9f0 <is_uxrce_rmw_identifier_valid>:
 800e9f0:	b510      	push	{r4, lr}
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	b140      	cbz	r0, 800ea08 <is_uxrce_rmw_identifier_valid+0x18>
 800e9f6:	f006 fbfb 	bl	80151f0 <rmw_get_implementation_identifier>
 800e9fa:	4601      	mov	r1, r0
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f7f1 fbef 	bl	80001e0 <strcmp>
 800ea02:	fab0 f080 	clz	r0, r0
 800ea06:	0940      	lsrs	r0, r0, #5
 800ea08:	bd10      	pop	{r4, pc}
 800ea0a:	bf00      	nop

0800ea0c <get_message_typesupport_handle>:
 800ea0c:	6883      	ldr	r3, [r0, #8]
 800ea0e:	4718      	bx	r3

0800ea10 <get_message_typesupport_handle_function>:
 800ea10:	b510      	push	{r4, lr}
 800ea12:	4604      	mov	r4, r0
 800ea14:	6800      	ldr	r0, [r0, #0]
 800ea16:	f7f1 fbe3 	bl	80001e0 <strcmp>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	bf0c      	ite	eq
 800ea1e:	4620      	moveq	r0, r4
 800ea20:	2000      	movne	r0, #0
 800ea22:	bd10      	pop	{r4, pc}

0800ea24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ea24:	f000 b82a 	b.w	800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>

0800ea28 <_Int32__max_serialized_size>:
 800ea28:	b508      	push	{r3, lr}
 800ea2a:	2104      	movs	r1, #4
 800ea2c:	2000      	movs	r0, #0
 800ea2e:	f001 f807 	bl	800fa40 <ucdr_alignment>
 800ea32:	3004      	adds	r0, #4
 800ea34:	bd08      	pop	{r3, pc}
 800ea36:	bf00      	nop

0800ea38 <_Int32__cdr_deserialize>:
 800ea38:	b109      	cbz	r1, 800ea3e <_Int32__cdr_deserialize+0x6>
 800ea3a:	f000 bf1b 	b.w	800f874 <ucdr_deserialize_int32_t>
 800ea3e:	4608      	mov	r0, r1
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop

0800ea44 <get_serialized_size_std_msgs__msg__Int32>:
 800ea44:	b130      	cbz	r0, 800ea54 <get_serialized_size_std_msgs__msg__Int32+0x10>
 800ea46:	b508      	push	{r3, lr}
 800ea48:	4608      	mov	r0, r1
 800ea4a:	2104      	movs	r1, #4
 800ea4c:	f000 fff8 	bl	800fa40 <ucdr_alignment>
 800ea50:	3004      	adds	r0, #4
 800ea52:	bd08      	pop	{r3, pc}
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop

0800ea58 <_Int32__cdr_serialize>:
 800ea58:	460a      	mov	r2, r1
 800ea5a:	b118      	cbz	r0, 800ea64 <_Int32__cdr_serialize+0xc>
 800ea5c:	6801      	ldr	r1, [r0, #0]
 800ea5e:	4610      	mov	r0, r2
 800ea60:	f000 be70 	b.w	800f744 <ucdr_serialize_int32_t>
 800ea64:	4770      	bx	lr
 800ea66:	bf00      	nop

0800ea68 <_Int32__get_serialized_size>:
 800ea68:	b130      	cbz	r0, 800ea78 <_Int32__get_serialized_size+0x10>
 800ea6a:	b508      	push	{r3, lr}
 800ea6c:	2104      	movs	r1, #4
 800ea6e:	2000      	movs	r0, #0
 800ea70:	f000 ffe6 	bl	800fa40 <ucdr_alignment>
 800ea74:	3004      	adds	r0, #4
 800ea76:	bd08      	pop	{r3, pc}
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop

0800ea7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ea7c:	4800      	ldr	r0, [pc, #0]	; (800ea80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800ea7e:	4770      	bx	lr
 800ea80:	2000004c 	.word	0x2000004c

0800ea84 <ucdr_serialize_bool>:
 800ea84:	b538      	push	{r3, r4, r5, lr}
 800ea86:	460d      	mov	r5, r1
 800ea88:	2101      	movs	r1, #1
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	f000 ff8e 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800ea90:	b148      	cbz	r0, 800eaa6 <ucdr_serialize_bool+0x22>
 800ea92:	68a3      	ldr	r3, [r4, #8]
 800ea94:	701d      	strb	r5, [r3, #0]
 800ea96:	68a2      	ldr	r2, [r4, #8]
 800ea98:	6923      	ldr	r3, [r4, #16]
 800ea9a:	3201      	adds	r2, #1
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	2101      	movs	r1, #1
 800eaa0:	60a2      	str	r2, [r4, #8]
 800eaa2:	6123      	str	r3, [r4, #16]
 800eaa4:	7561      	strb	r1, [r4, #21]
 800eaa6:	7da0      	ldrb	r0, [r4, #22]
 800eaa8:	f080 0001 	eor.w	r0, r0, #1
 800eaac:	bd38      	pop	{r3, r4, r5, pc}
 800eaae:	bf00      	nop

0800eab0 <ucdr_deserialize_bool>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	460d      	mov	r5, r1
 800eab4:	2101      	movs	r1, #1
 800eab6:	4604      	mov	r4, r0
 800eab8:	f000 ff78 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800eabc:	b168      	cbz	r0, 800eada <ucdr_deserialize_bool+0x2a>
 800eabe:	68a2      	ldr	r2, [r4, #8]
 800eac0:	6923      	ldr	r3, [r4, #16]
 800eac2:	f812 1b01 	ldrb.w	r1, [r2], #1
 800eac6:	3900      	subs	r1, #0
 800eac8:	f103 0301 	add.w	r3, r3, #1
 800eacc:	bf18      	it	ne
 800eace:	2101      	movne	r1, #1
 800ead0:	2001      	movs	r0, #1
 800ead2:	7029      	strb	r1, [r5, #0]
 800ead4:	60a2      	str	r2, [r4, #8]
 800ead6:	6123      	str	r3, [r4, #16]
 800ead8:	7560      	strb	r0, [r4, #21]
 800eada:	7da0      	ldrb	r0, [r4, #22]
 800eadc:	f080 0001 	eor.w	r0, r0, #1
 800eae0:	bd38      	pop	{r3, r4, r5, pc}
 800eae2:	bf00      	nop

0800eae4 <ucdr_serialize_uint8_t>:
 800eae4:	b538      	push	{r3, r4, r5, lr}
 800eae6:	460d      	mov	r5, r1
 800eae8:	2101      	movs	r1, #1
 800eaea:	4604      	mov	r4, r0
 800eaec:	f000 ff5e 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800eaf0:	b148      	cbz	r0, 800eb06 <ucdr_serialize_uint8_t+0x22>
 800eaf2:	68a3      	ldr	r3, [r4, #8]
 800eaf4:	701d      	strb	r5, [r3, #0]
 800eaf6:	68a2      	ldr	r2, [r4, #8]
 800eaf8:	6923      	ldr	r3, [r4, #16]
 800eafa:	3201      	adds	r2, #1
 800eafc:	3301      	adds	r3, #1
 800eafe:	2101      	movs	r1, #1
 800eb00:	60a2      	str	r2, [r4, #8]
 800eb02:	6123      	str	r3, [r4, #16]
 800eb04:	7561      	strb	r1, [r4, #21]
 800eb06:	7da0      	ldrb	r0, [r4, #22]
 800eb08:	f080 0001 	eor.w	r0, r0, #1
 800eb0c:	bd38      	pop	{r3, r4, r5, pc}
 800eb0e:	bf00      	nop

0800eb10 <ucdr_deserialize_uint8_t>:
 800eb10:	b538      	push	{r3, r4, r5, lr}
 800eb12:	460d      	mov	r5, r1
 800eb14:	2101      	movs	r1, #1
 800eb16:	4604      	mov	r4, r0
 800eb18:	f000 ff48 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800eb1c:	b150      	cbz	r0, 800eb34 <ucdr_deserialize_uint8_t+0x24>
 800eb1e:	68a3      	ldr	r3, [r4, #8]
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	702b      	strb	r3, [r5, #0]
 800eb24:	68a2      	ldr	r2, [r4, #8]
 800eb26:	6923      	ldr	r3, [r4, #16]
 800eb28:	3201      	adds	r2, #1
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	2101      	movs	r1, #1
 800eb2e:	60a2      	str	r2, [r4, #8]
 800eb30:	6123      	str	r3, [r4, #16]
 800eb32:	7561      	strb	r1, [r4, #21]
 800eb34:	7da0      	ldrb	r0, [r4, #22]
 800eb36:	f080 0001 	eor.w	r0, r0, #1
 800eb3a:	bd38      	pop	{r3, r4, r5, pc}

0800eb3c <ucdr_serialize_uint16_t>:
 800eb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb40:	b082      	sub	sp, #8
 800eb42:	460b      	mov	r3, r1
 800eb44:	2102      	movs	r1, #2
 800eb46:	4604      	mov	r4, r0
 800eb48:	f8ad 3006 	strh.w	r3, [sp, #6]
 800eb4c:	f000 ff80 	bl	800fa50 <ucdr_buffer_alignment>
 800eb50:	4601      	mov	r1, r0
 800eb52:	4620      	mov	r0, r4
 800eb54:	7d67      	ldrb	r7, [r4, #21]
 800eb56:	f000 ffbf 	bl	800fad8 <ucdr_advance_buffer>
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	2102      	movs	r1, #2
 800eb5e:	f000 ff19 	bl	800f994 <ucdr_check_buffer_available_for>
 800eb62:	bb78      	cbnz	r0, 800ebc4 <ucdr_serialize_uint16_t+0x88>
 800eb64:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800eb68:	42b5      	cmp	r5, r6
 800eb6a:	d926      	bls.n	800ebba <ucdr_serialize_uint16_t+0x7e>
 800eb6c:	6922      	ldr	r2, [r4, #16]
 800eb6e:	60a5      	str	r5, [r4, #8]
 800eb70:	1bad      	subs	r5, r5, r6
 800eb72:	442a      	add	r2, r5
 800eb74:	f1c5 0802 	rsb	r8, r5, #2
 800eb78:	6122      	str	r2, [r4, #16]
 800eb7a:	4641      	mov	r1, r8
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	f000 ff15 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800eb82:	2800      	cmp	r0, #0
 800eb84:	d03b      	beq.n	800ebfe <ucdr_serialize_uint16_t+0xc2>
 800eb86:	7d23      	ldrb	r3, [r4, #20]
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d04a      	beq.n	800ec22 <ucdr_serialize_uint16_t+0xe6>
 800eb8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb90:	7033      	strb	r3, [r6, #0]
 800eb92:	2d00      	cmp	r5, #0
 800eb94:	d040      	beq.n	800ec18 <ucdr_serialize_uint16_t+0xdc>
 800eb96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb9a:	7073      	strb	r3, [r6, #1]
 800eb9c:	6923      	ldr	r3, [r4, #16]
 800eb9e:	68a2      	ldr	r2, [r4, #8]
 800eba0:	7da0      	ldrb	r0, [r4, #22]
 800eba2:	3302      	adds	r3, #2
 800eba4:	1b5b      	subs	r3, r3, r5
 800eba6:	4442      	add	r2, r8
 800eba8:	2102      	movs	r1, #2
 800ebaa:	f080 0001 	eor.w	r0, r0, #1
 800ebae:	6123      	str	r3, [r4, #16]
 800ebb0:	60a2      	str	r2, [r4, #8]
 800ebb2:	7561      	strb	r1, [r4, #21]
 800ebb4:	b002      	add	sp, #8
 800ebb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebba:	2102      	movs	r1, #2
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	f000 fef5 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800ebc2:	b190      	cbz	r0, 800ebea <ucdr_serialize_uint16_t+0xae>
 800ebc4:	7d23      	ldrb	r3, [r4, #20]
 800ebc6:	2b01      	cmp	r3, #1
 800ebc8:	68a3      	ldr	r3, [r4, #8]
 800ebca:	d014      	beq.n	800ebf6 <ucdr_serialize_uint16_t+0xba>
 800ebcc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ebd0:	701a      	strb	r2, [r3, #0]
 800ebd2:	68a3      	ldr	r3, [r4, #8]
 800ebd4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebd8:	705a      	strb	r2, [r3, #1]
 800ebda:	68a2      	ldr	r2, [r4, #8]
 800ebdc:	6923      	ldr	r3, [r4, #16]
 800ebde:	3202      	adds	r2, #2
 800ebe0:	3302      	adds	r3, #2
 800ebe2:	2102      	movs	r1, #2
 800ebe4:	60a2      	str	r2, [r4, #8]
 800ebe6:	6123      	str	r3, [r4, #16]
 800ebe8:	7561      	strb	r1, [r4, #21]
 800ebea:	7da0      	ldrb	r0, [r4, #22]
 800ebec:	f080 0001 	eor.w	r0, r0, #1
 800ebf0:	b002      	add	sp, #8
 800ebf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ebfa:	801a      	strh	r2, [r3, #0]
 800ebfc:	e7ed      	b.n	800ebda <ucdr_serialize_uint16_t+0x9e>
 800ebfe:	68a2      	ldr	r2, [r4, #8]
 800ec00:	6923      	ldr	r3, [r4, #16]
 800ec02:	7da0      	ldrb	r0, [r4, #22]
 800ec04:	7567      	strb	r7, [r4, #21]
 800ec06:	1b52      	subs	r2, r2, r5
 800ec08:	1b5b      	subs	r3, r3, r5
 800ec0a:	f080 0001 	eor.w	r0, r0, #1
 800ec0e:	60a2      	str	r2, [r4, #8]
 800ec10:	6123      	str	r3, [r4, #16]
 800ec12:	b002      	add	sp, #8
 800ec14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec18:	68a3      	ldr	r3, [r4, #8]
 800ec1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec1e:	701a      	strb	r2, [r3, #0]
 800ec20:	e7bc      	b.n	800eb9c <ucdr_serialize_uint16_t+0x60>
 800ec22:	4630      	mov	r0, r6
 800ec24:	f10d 0606 	add.w	r6, sp, #6
 800ec28:	4631      	mov	r1, r6
 800ec2a:	462a      	mov	r2, r5
 800ec2c:	f009 fe1b 	bl	8018866 <memcpy>
 800ec30:	68a0      	ldr	r0, [r4, #8]
 800ec32:	4642      	mov	r2, r8
 800ec34:	1971      	adds	r1, r6, r5
 800ec36:	f009 fe16 	bl	8018866 <memcpy>
 800ec3a:	e7af      	b.n	800eb9c <ucdr_serialize_uint16_t+0x60>

0800ec3c <ucdr_serialize_endian_uint16_t>:
 800ec3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec40:	b083      	sub	sp, #12
 800ec42:	460d      	mov	r5, r1
 800ec44:	2102      	movs	r1, #2
 800ec46:	4604      	mov	r4, r0
 800ec48:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ec4c:	f000 ff00 	bl	800fa50 <ucdr_buffer_alignment>
 800ec50:	4601      	mov	r1, r0
 800ec52:	4620      	mov	r0, r4
 800ec54:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ec58:	f000 ff3e 	bl	800fad8 <ucdr_advance_buffer>
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	2102      	movs	r1, #2
 800ec60:	f000 fe98 	bl	800f994 <ucdr_check_buffer_available_for>
 800ec64:	bb70      	cbnz	r0, 800ecc4 <ucdr_serialize_endian_uint16_t+0x88>
 800ec66:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ec6a:	42be      	cmp	r6, r7
 800ec6c:	d925      	bls.n	800ecba <ucdr_serialize_endian_uint16_t+0x7e>
 800ec6e:	6922      	ldr	r2, [r4, #16]
 800ec70:	60a6      	str	r6, [r4, #8]
 800ec72:	1bf6      	subs	r6, r6, r7
 800ec74:	4432      	add	r2, r6
 800ec76:	f1c6 0902 	rsb	r9, r6, #2
 800ec7a:	6122      	str	r2, [r4, #16]
 800ec7c:	4649      	mov	r1, r9
 800ec7e:	4620      	mov	r0, r4
 800ec80:	f000 fe94 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d039      	beq.n	800ecfc <ucdr_serialize_endian_uint16_t+0xc0>
 800ec88:	2d01      	cmp	r5, #1
 800ec8a:	d04a      	beq.n	800ed22 <ucdr_serialize_endian_uint16_t+0xe6>
 800ec8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec90:	703b      	strb	r3, [r7, #0]
 800ec92:	2e00      	cmp	r6, #0
 800ec94:	d040      	beq.n	800ed18 <ucdr_serialize_endian_uint16_t+0xdc>
 800ec96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ec9a:	707b      	strb	r3, [r7, #1]
 800ec9c:	6923      	ldr	r3, [r4, #16]
 800ec9e:	68a2      	ldr	r2, [r4, #8]
 800eca0:	7da0      	ldrb	r0, [r4, #22]
 800eca2:	3302      	adds	r3, #2
 800eca4:	1b9b      	subs	r3, r3, r6
 800eca6:	444a      	add	r2, r9
 800eca8:	2102      	movs	r1, #2
 800ecaa:	f080 0001 	eor.w	r0, r0, #1
 800ecae:	6123      	str	r3, [r4, #16]
 800ecb0:	60a2      	str	r2, [r4, #8]
 800ecb2:	7561      	strb	r1, [r4, #21]
 800ecb4:	b003      	add	sp, #12
 800ecb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecba:	2102      	movs	r1, #2
 800ecbc:	4620      	mov	r0, r4
 800ecbe:	f000 fe75 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800ecc2:	b188      	cbz	r0, 800ece8 <ucdr_serialize_endian_uint16_t+0xac>
 800ecc4:	2d01      	cmp	r5, #1
 800ecc6:	68a3      	ldr	r3, [r4, #8]
 800ecc8:	d014      	beq.n	800ecf4 <ucdr_serialize_endian_uint16_t+0xb8>
 800ecca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ecce:	701a      	strb	r2, [r3, #0]
 800ecd0:	68a3      	ldr	r3, [r4, #8]
 800ecd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ecd6:	705a      	strb	r2, [r3, #1]
 800ecd8:	68a2      	ldr	r2, [r4, #8]
 800ecda:	6923      	ldr	r3, [r4, #16]
 800ecdc:	3202      	adds	r2, #2
 800ecde:	3302      	adds	r3, #2
 800ece0:	2102      	movs	r1, #2
 800ece2:	60a2      	str	r2, [r4, #8]
 800ece4:	6123      	str	r3, [r4, #16]
 800ece6:	7561      	strb	r1, [r4, #21]
 800ece8:	7da0      	ldrb	r0, [r4, #22]
 800ecea:	f080 0001 	eor.w	r0, r0, #1
 800ecee:	b003      	add	sp, #12
 800ecf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecf4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ecf8:	801a      	strh	r2, [r3, #0]
 800ecfa:	e7ed      	b.n	800ecd8 <ucdr_serialize_endian_uint16_t+0x9c>
 800ecfc:	68a2      	ldr	r2, [r4, #8]
 800ecfe:	6923      	ldr	r3, [r4, #16]
 800ed00:	7da0      	ldrb	r0, [r4, #22]
 800ed02:	f884 8015 	strb.w	r8, [r4, #21]
 800ed06:	1b92      	subs	r2, r2, r6
 800ed08:	1b9b      	subs	r3, r3, r6
 800ed0a:	f080 0001 	eor.w	r0, r0, #1
 800ed0e:	60a2      	str	r2, [r4, #8]
 800ed10:	6123      	str	r3, [r4, #16]
 800ed12:	b003      	add	sp, #12
 800ed14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed18:	68a3      	ldr	r3, [r4, #8]
 800ed1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed1e:	701a      	strb	r2, [r3, #0]
 800ed20:	e7bc      	b.n	800ec9c <ucdr_serialize_endian_uint16_t+0x60>
 800ed22:	f10d 0506 	add.w	r5, sp, #6
 800ed26:	4629      	mov	r1, r5
 800ed28:	4632      	mov	r2, r6
 800ed2a:	4638      	mov	r0, r7
 800ed2c:	f009 fd9b 	bl	8018866 <memcpy>
 800ed30:	68a0      	ldr	r0, [r4, #8]
 800ed32:	464a      	mov	r2, r9
 800ed34:	19a9      	adds	r1, r5, r6
 800ed36:	f009 fd96 	bl	8018866 <memcpy>
 800ed3a:	e7af      	b.n	800ec9c <ucdr_serialize_endian_uint16_t+0x60>

0800ed3c <ucdr_deserialize_uint16_t>:
 800ed3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed40:	460d      	mov	r5, r1
 800ed42:	2102      	movs	r1, #2
 800ed44:	4604      	mov	r4, r0
 800ed46:	f000 fe83 	bl	800fa50 <ucdr_buffer_alignment>
 800ed4a:	4601      	mov	r1, r0
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ed52:	f000 fec1 	bl	800fad8 <ucdr_advance_buffer>
 800ed56:	4620      	mov	r0, r4
 800ed58:	2102      	movs	r1, #2
 800ed5a:	f000 fe1b 	bl	800f994 <ucdr_check_buffer_available_for>
 800ed5e:	bb60      	cbnz	r0, 800edba <ucdr_deserialize_uint16_t+0x7e>
 800ed60:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ed64:	42be      	cmp	r6, r7
 800ed66:	d923      	bls.n	800edb0 <ucdr_deserialize_uint16_t+0x74>
 800ed68:	6922      	ldr	r2, [r4, #16]
 800ed6a:	60a6      	str	r6, [r4, #8]
 800ed6c:	1bf6      	subs	r6, r6, r7
 800ed6e:	4432      	add	r2, r6
 800ed70:	f1c6 0902 	rsb	r9, r6, #2
 800ed74:	6122      	str	r2, [r4, #16]
 800ed76:	4649      	mov	r1, r9
 800ed78:	4620      	mov	r0, r4
 800ed7a:	f000 fe17 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	d034      	beq.n	800edec <ucdr_deserialize_uint16_t+0xb0>
 800ed82:	7d23      	ldrb	r3, [r4, #20]
 800ed84:	2b01      	cmp	r3, #1
 800ed86:	d042      	beq.n	800ee0e <ucdr_deserialize_uint16_t+0xd2>
 800ed88:	787b      	ldrb	r3, [r7, #1]
 800ed8a:	702b      	strb	r3, [r5, #0]
 800ed8c:	2e00      	cmp	r6, #0
 800ed8e:	d03a      	beq.n	800ee06 <ucdr_deserialize_uint16_t+0xca>
 800ed90:	783b      	ldrb	r3, [r7, #0]
 800ed92:	706b      	strb	r3, [r5, #1]
 800ed94:	6923      	ldr	r3, [r4, #16]
 800ed96:	68a2      	ldr	r2, [r4, #8]
 800ed98:	7da0      	ldrb	r0, [r4, #22]
 800ed9a:	2102      	movs	r1, #2
 800ed9c:	3302      	adds	r3, #2
 800ed9e:	1b9b      	subs	r3, r3, r6
 800eda0:	444a      	add	r2, r9
 800eda2:	7561      	strb	r1, [r4, #21]
 800eda4:	6123      	str	r3, [r4, #16]
 800eda6:	60a2      	str	r2, [r4, #8]
 800eda8:	f080 0001 	eor.w	r0, r0, #1
 800edac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edb0:	2102      	movs	r1, #2
 800edb2:	4620      	mov	r0, r4
 800edb4:	f000 fdfa 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800edb8:	b180      	cbz	r0, 800eddc <ucdr_deserialize_uint16_t+0xa0>
 800edba:	7d23      	ldrb	r3, [r4, #20]
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	68a3      	ldr	r3, [r4, #8]
 800edc0:	d011      	beq.n	800ede6 <ucdr_deserialize_uint16_t+0xaa>
 800edc2:	785b      	ldrb	r3, [r3, #1]
 800edc4:	702b      	strb	r3, [r5, #0]
 800edc6:	68a3      	ldr	r3, [r4, #8]
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	706b      	strb	r3, [r5, #1]
 800edcc:	68a2      	ldr	r2, [r4, #8]
 800edce:	6923      	ldr	r3, [r4, #16]
 800edd0:	3202      	adds	r2, #2
 800edd2:	3302      	adds	r3, #2
 800edd4:	2102      	movs	r1, #2
 800edd6:	60a2      	str	r2, [r4, #8]
 800edd8:	6123      	str	r3, [r4, #16]
 800edda:	7561      	strb	r1, [r4, #21]
 800eddc:	7da0      	ldrb	r0, [r4, #22]
 800edde:	f080 0001 	eor.w	r0, r0, #1
 800ede2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ede6:	881b      	ldrh	r3, [r3, #0]
 800ede8:	802b      	strh	r3, [r5, #0]
 800edea:	e7ef      	b.n	800edcc <ucdr_deserialize_uint16_t+0x90>
 800edec:	68a2      	ldr	r2, [r4, #8]
 800edee:	6923      	ldr	r3, [r4, #16]
 800edf0:	7da0      	ldrb	r0, [r4, #22]
 800edf2:	f884 8015 	strb.w	r8, [r4, #21]
 800edf6:	1b92      	subs	r2, r2, r6
 800edf8:	1b9b      	subs	r3, r3, r6
 800edfa:	60a2      	str	r2, [r4, #8]
 800edfc:	6123      	str	r3, [r4, #16]
 800edfe:	f080 0001 	eor.w	r0, r0, #1
 800ee02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee06:	68a3      	ldr	r3, [r4, #8]
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	706b      	strb	r3, [r5, #1]
 800ee0c:	e7c2      	b.n	800ed94 <ucdr_deserialize_uint16_t+0x58>
 800ee0e:	4639      	mov	r1, r7
 800ee10:	4632      	mov	r2, r6
 800ee12:	4628      	mov	r0, r5
 800ee14:	f009 fd27 	bl	8018866 <memcpy>
 800ee18:	68a1      	ldr	r1, [r4, #8]
 800ee1a:	464a      	mov	r2, r9
 800ee1c:	19a8      	adds	r0, r5, r6
 800ee1e:	f009 fd22 	bl	8018866 <memcpy>
 800ee22:	e7b7      	b.n	800ed94 <ucdr_deserialize_uint16_t+0x58>

0800ee24 <ucdr_deserialize_endian_uint16_t>:
 800ee24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee28:	460e      	mov	r6, r1
 800ee2a:	2102      	movs	r1, #2
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	4615      	mov	r5, r2
 800ee30:	f000 fe0e 	bl	800fa50 <ucdr_buffer_alignment>
 800ee34:	4601      	mov	r1, r0
 800ee36:	4620      	mov	r0, r4
 800ee38:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ee3c:	f000 fe4c 	bl	800fad8 <ucdr_advance_buffer>
 800ee40:	4620      	mov	r0, r4
 800ee42:	2102      	movs	r1, #2
 800ee44:	f000 fda6 	bl	800f994 <ucdr_check_buffer_available_for>
 800ee48:	bb70      	cbnz	r0, 800eea8 <ucdr_deserialize_endian_uint16_t+0x84>
 800ee4a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ee4e:	4547      	cmp	r7, r8
 800ee50:	d925      	bls.n	800ee9e <ucdr_deserialize_endian_uint16_t+0x7a>
 800ee52:	6922      	ldr	r2, [r4, #16]
 800ee54:	60a7      	str	r7, [r4, #8]
 800ee56:	eba7 0708 	sub.w	r7, r7, r8
 800ee5a:	443a      	add	r2, r7
 800ee5c:	f1c7 0a02 	rsb	sl, r7, #2
 800ee60:	6122      	str	r2, [r4, #16]
 800ee62:	4651      	mov	r1, sl
 800ee64:	4620      	mov	r0, r4
 800ee66:	f000 fda1 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d034      	beq.n	800eed8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ee6e:	2e01      	cmp	r6, #1
 800ee70:	d043      	beq.n	800eefa <ucdr_deserialize_endian_uint16_t+0xd6>
 800ee72:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ee76:	702b      	strb	r3, [r5, #0]
 800ee78:	2f00      	cmp	r7, #0
 800ee7a:	d03a      	beq.n	800eef2 <ucdr_deserialize_endian_uint16_t+0xce>
 800ee7c:	f898 3000 	ldrb.w	r3, [r8]
 800ee80:	706b      	strb	r3, [r5, #1]
 800ee82:	6923      	ldr	r3, [r4, #16]
 800ee84:	68a2      	ldr	r2, [r4, #8]
 800ee86:	7da0      	ldrb	r0, [r4, #22]
 800ee88:	2102      	movs	r1, #2
 800ee8a:	3302      	adds	r3, #2
 800ee8c:	1bdb      	subs	r3, r3, r7
 800ee8e:	4452      	add	r2, sl
 800ee90:	7561      	strb	r1, [r4, #21]
 800ee92:	6123      	str	r3, [r4, #16]
 800ee94:	60a2      	str	r2, [r4, #8]
 800ee96:	f080 0001 	eor.w	r0, r0, #1
 800ee9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee9e:	2102      	movs	r1, #2
 800eea0:	4620      	mov	r0, r4
 800eea2:	f000 fd83 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800eea6:	b178      	cbz	r0, 800eec8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800eea8:	2e01      	cmp	r6, #1
 800eeaa:	68a3      	ldr	r3, [r4, #8]
 800eeac:	d011      	beq.n	800eed2 <ucdr_deserialize_endian_uint16_t+0xae>
 800eeae:	785b      	ldrb	r3, [r3, #1]
 800eeb0:	702b      	strb	r3, [r5, #0]
 800eeb2:	68a3      	ldr	r3, [r4, #8]
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	706b      	strb	r3, [r5, #1]
 800eeb8:	68a2      	ldr	r2, [r4, #8]
 800eeba:	6923      	ldr	r3, [r4, #16]
 800eebc:	3202      	adds	r2, #2
 800eebe:	3302      	adds	r3, #2
 800eec0:	2102      	movs	r1, #2
 800eec2:	60a2      	str	r2, [r4, #8]
 800eec4:	6123      	str	r3, [r4, #16]
 800eec6:	7561      	strb	r1, [r4, #21]
 800eec8:	7da0      	ldrb	r0, [r4, #22]
 800eeca:	f080 0001 	eor.w	r0, r0, #1
 800eece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed2:	881b      	ldrh	r3, [r3, #0]
 800eed4:	802b      	strh	r3, [r5, #0]
 800eed6:	e7ef      	b.n	800eeb8 <ucdr_deserialize_endian_uint16_t+0x94>
 800eed8:	68a2      	ldr	r2, [r4, #8]
 800eeda:	6923      	ldr	r3, [r4, #16]
 800eedc:	7da0      	ldrb	r0, [r4, #22]
 800eede:	f884 9015 	strb.w	r9, [r4, #21]
 800eee2:	1bd2      	subs	r2, r2, r7
 800eee4:	1bdb      	subs	r3, r3, r7
 800eee6:	60a2      	str	r2, [r4, #8]
 800eee8:	6123      	str	r3, [r4, #16]
 800eeea:	f080 0001 	eor.w	r0, r0, #1
 800eeee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eef2:	68a3      	ldr	r3, [r4, #8]
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	706b      	strb	r3, [r5, #1]
 800eef8:	e7c3      	b.n	800ee82 <ucdr_deserialize_endian_uint16_t+0x5e>
 800eefa:	4641      	mov	r1, r8
 800eefc:	463a      	mov	r2, r7
 800eefe:	4628      	mov	r0, r5
 800ef00:	f009 fcb1 	bl	8018866 <memcpy>
 800ef04:	68a1      	ldr	r1, [r4, #8]
 800ef06:	4652      	mov	r2, sl
 800ef08:	19e8      	adds	r0, r5, r7
 800ef0a:	f009 fcac 	bl	8018866 <memcpy>
 800ef0e:	e7b8      	b.n	800ee82 <ucdr_deserialize_endian_uint16_t+0x5e>

0800ef10 <ucdr_serialize_uint32_t>:
 800ef10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef14:	b082      	sub	sp, #8
 800ef16:	4604      	mov	r4, r0
 800ef18:	9101      	str	r1, [sp, #4]
 800ef1a:	2104      	movs	r1, #4
 800ef1c:	f000 fd98 	bl	800fa50 <ucdr_buffer_alignment>
 800ef20:	4601      	mov	r1, r0
 800ef22:	4620      	mov	r0, r4
 800ef24:	7d67      	ldrb	r7, [r4, #21]
 800ef26:	f000 fdd7 	bl	800fad8 <ucdr_advance_buffer>
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	2104      	movs	r1, #4
 800ef2e:	f000 fd31 	bl	800f994 <ucdr_check_buffer_available_for>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d139      	bne.n	800efaa <ucdr_serialize_uint32_t+0x9a>
 800ef36:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800ef3a:	42ae      	cmp	r6, r5
 800ef3c:	d930      	bls.n	800efa0 <ucdr_serialize_uint32_t+0x90>
 800ef3e:	6922      	ldr	r2, [r4, #16]
 800ef40:	60a6      	str	r6, [r4, #8]
 800ef42:	1b76      	subs	r6, r6, r5
 800ef44:	4432      	add	r2, r6
 800ef46:	f1c6 0804 	rsb	r8, r6, #4
 800ef4a:	6122      	str	r2, [r4, #16]
 800ef4c:	4641      	mov	r1, r8
 800ef4e:	4620      	mov	r0, r4
 800ef50:	f000 fd2c 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800ef54:	2800      	cmp	r0, #0
 800ef56:	d04c      	beq.n	800eff2 <ucdr_serialize_uint32_t+0xe2>
 800ef58:	7d23      	ldrb	r3, [r4, #20]
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d063      	beq.n	800f026 <ucdr_serialize_uint32_t+0x116>
 800ef5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef62:	702b      	strb	r3, [r5, #0]
 800ef64:	2e00      	cmp	r6, #0
 800ef66:	d051      	beq.n	800f00c <ucdr_serialize_uint32_t+0xfc>
 800ef68:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ef6c:	706b      	strb	r3, [r5, #1]
 800ef6e:	2e01      	cmp	r6, #1
 800ef70:	d050      	beq.n	800f014 <ucdr_serialize_uint32_t+0x104>
 800ef72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ef76:	70ab      	strb	r3, [r5, #2]
 800ef78:	2e02      	cmp	r6, #2
 800ef7a:	d04f      	beq.n	800f01c <ucdr_serialize_uint32_t+0x10c>
 800ef7c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef80:	70eb      	strb	r3, [r5, #3]
 800ef82:	6923      	ldr	r3, [r4, #16]
 800ef84:	68a2      	ldr	r2, [r4, #8]
 800ef86:	7da0      	ldrb	r0, [r4, #22]
 800ef88:	3304      	adds	r3, #4
 800ef8a:	1b9b      	subs	r3, r3, r6
 800ef8c:	4442      	add	r2, r8
 800ef8e:	2104      	movs	r1, #4
 800ef90:	f080 0001 	eor.w	r0, r0, #1
 800ef94:	6123      	str	r3, [r4, #16]
 800ef96:	60a2      	str	r2, [r4, #8]
 800ef98:	7561      	strb	r1, [r4, #21]
 800ef9a:	b002      	add	sp, #8
 800ef9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa0:	2104      	movs	r1, #4
 800efa2:	4620      	mov	r0, r4
 800efa4:	f000 fd02 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800efa8:	b1d0      	cbz	r0, 800efe0 <ucdr_serialize_uint32_t+0xd0>
 800efaa:	7d23      	ldrb	r3, [r4, #20]
 800efac:	2b01      	cmp	r3, #1
 800efae:	68a3      	ldr	r3, [r4, #8]
 800efb0:	d01c      	beq.n	800efec <ucdr_serialize_uint32_t+0xdc>
 800efb2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800efb6:	701a      	strb	r2, [r3, #0]
 800efb8:	68a3      	ldr	r3, [r4, #8]
 800efba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800efbe:	705a      	strb	r2, [r3, #1]
 800efc0:	68a3      	ldr	r3, [r4, #8]
 800efc2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800efc6:	709a      	strb	r2, [r3, #2]
 800efc8:	68a3      	ldr	r3, [r4, #8]
 800efca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800efce:	70da      	strb	r2, [r3, #3]
 800efd0:	68a2      	ldr	r2, [r4, #8]
 800efd2:	6923      	ldr	r3, [r4, #16]
 800efd4:	3204      	adds	r2, #4
 800efd6:	3304      	adds	r3, #4
 800efd8:	2104      	movs	r1, #4
 800efda:	60a2      	str	r2, [r4, #8]
 800efdc:	6123      	str	r3, [r4, #16]
 800efde:	7561      	strb	r1, [r4, #21]
 800efe0:	7da0      	ldrb	r0, [r4, #22]
 800efe2:	f080 0001 	eor.w	r0, r0, #1
 800efe6:	b002      	add	sp, #8
 800efe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efec:	9a01      	ldr	r2, [sp, #4]
 800efee:	601a      	str	r2, [r3, #0]
 800eff0:	e7ee      	b.n	800efd0 <ucdr_serialize_uint32_t+0xc0>
 800eff2:	68a2      	ldr	r2, [r4, #8]
 800eff4:	6923      	ldr	r3, [r4, #16]
 800eff6:	7da0      	ldrb	r0, [r4, #22]
 800eff8:	7567      	strb	r7, [r4, #21]
 800effa:	1b92      	subs	r2, r2, r6
 800effc:	1b9b      	subs	r3, r3, r6
 800effe:	f080 0001 	eor.w	r0, r0, #1
 800f002:	60a2      	str	r2, [r4, #8]
 800f004:	6123      	str	r3, [r4, #16]
 800f006:	b002      	add	sp, #8
 800f008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f00c:	68a3      	ldr	r3, [r4, #8]
 800f00e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f012:	701a      	strb	r2, [r3, #0]
 800f014:	68a3      	ldr	r3, [r4, #8]
 800f016:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f01a:	701a      	strb	r2, [r3, #0]
 800f01c:	68a3      	ldr	r3, [r4, #8]
 800f01e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f022:	701a      	strb	r2, [r3, #0]
 800f024:	e7ad      	b.n	800ef82 <ucdr_serialize_uint32_t+0x72>
 800f026:	4628      	mov	r0, r5
 800f028:	ad01      	add	r5, sp, #4
 800f02a:	4629      	mov	r1, r5
 800f02c:	4632      	mov	r2, r6
 800f02e:	f009 fc1a 	bl	8018866 <memcpy>
 800f032:	68a0      	ldr	r0, [r4, #8]
 800f034:	4642      	mov	r2, r8
 800f036:	19a9      	adds	r1, r5, r6
 800f038:	f009 fc15 	bl	8018866 <memcpy>
 800f03c:	e7a1      	b.n	800ef82 <ucdr_serialize_uint32_t+0x72>
 800f03e:	bf00      	nop

0800f040 <ucdr_serialize_endian_uint32_t>:
 800f040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f044:	b083      	sub	sp, #12
 800f046:	460d      	mov	r5, r1
 800f048:	2104      	movs	r1, #4
 800f04a:	4604      	mov	r4, r0
 800f04c:	9201      	str	r2, [sp, #4]
 800f04e:	f000 fcff 	bl	800fa50 <ucdr_buffer_alignment>
 800f052:	4601      	mov	r1, r0
 800f054:	4620      	mov	r0, r4
 800f056:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f05a:	f000 fd3d 	bl	800fad8 <ucdr_advance_buffer>
 800f05e:	4620      	mov	r0, r4
 800f060:	2104      	movs	r1, #4
 800f062:	f000 fc97 	bl	800f994 <ucdr_check_buffer_available_for>
 800f066:	2800      	cmp	r0, #0
 800f068:	d138      	bne.n	800f0dc <ucdr_serialize_endian_uint32_t+0x9c>
 800f06a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f06e:	42b7      	cmp	r7, r6
 800f070:	d92f      	bls.n	800f0d2 <ucdr_serialize_endian_uint32_t+0x92>
 800f072:	6922      	ldr	r2, [r4, #16]
 800f074:	60a7      	str	r7, [r4, #8]
 800f076:	1bbf      	subs	r7, r7, r6
 800f078:	443a      	add	r2, r7
 800f07a:	f1c7 0904 	rsb	r9, r7, #4
 800f07e:	6122      	str	r2, [r4, #16]
 800f080:	4649      	mov	r1, r9
 800f082:	4620      	mov	r0, r4
 800f084:	f000 fc92 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f088:	2800      	cmp	r0, #0
 800f08a:	d04a      	beq.n	800f122 <ucdr_serialize_endian_uint32_t+0xe2>
 800f08c:	2d01      	cmp	r5, #1
 800f08e:	d063      	beq.n	800f158 <ucdr_serialize_endian_uint32_t+0x118>
 800f090:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f094:	7033      	strb	r3, [r6, #0]
 800f096:	2f00      	cmp	r7, #0
 800f098:	d051      	beq.n	800f13e <ucdr_serialize_endian_uint32_t+0xfe>
 800f09a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f09e:	7073      	strb	r3, [r6, #1]
 800f0a0:	2f01      	cmp	r7, #1
 800f0a2:	d050      	beq.n	800f146 <ucdr_serialize_endian_uint32_t+0x106>
 800f0a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f0a8:	70b3      	strb	r3, [r6, #2]
 800f0aa:	2f02      	cmp	r7, #2
 800f0ac:	d04f      	beq.n	800f14e <ucdr_serialize_endian_uint32_t+0x10e>
 800f0ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f0b2:	70f3      	strb	r3, [r6, #3]
 800f0b4:	6923      	ldr	r3, [r4, #16]
 800f0b6:	68a2      	ldr	r2, [r4, #8]
 800f0b8:	7da0      	ldrb	r0, [r4, #22]
 800f0ba:	3304      	adds	r3, #4
 800f0bc:	1bdb      	subs	r3, r3, r7
 800f0be:	444a      	add	r2, r9
 800f0c0:	2104      	movs	r1, #4
 800f0c2:	f080 0001 	eor.w	r0, r0, #1
 800f0c6:	6123      	str	r3, [r4, #16]
 800f0c8:	60a2      	str	r2, [r4, #8]
 800f0ca:	7561      	strb	r1, [r4, #21]
 800f0cc:	b003      	add	sp, #12
 800f0ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0d2:	2104      	movs	r1, #4
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	f000 fc69 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f0da:	b1c8      	cbz	r0, 800f110 <ucdr_serialize_endian_uint32_t+0xd0>
 800f0dc:	2d01      	cmp	r5, #1
 800f0de:	68a3      	ldr	r3, [r4, #8]
 800f0e0:	d01c      	beq.n	800f11c <ucdr_serialize_endian_uint32_t+0xdc>
 800f0e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f0e6:	701a      	strb	r2, [r3, #0]
 800f0e8:	68a3      	ldr	r3, [r4, #8]
 800f0ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f0ee:	705a      	strb	r2, [r3, #1]
 800f0f0:	68a3      	ldr	r3, [r4, #8]
 800f0f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f0f6:	709a      	strb	r2, [r3, #2]
 800f0f8:	68a3      	ldr	r3, [r4, #8]
 800f0fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f0fe:	70da      	strb	r2, [r3, #3]
 800f100:	68a2      	ldr	r2, [r4, #8]
 800f102:	6923      	ldr	r3, [r4, #16]
 800f104:	3204      	adds	r2, #4
 800f106:	3304      	adds	r3, #4
 800f108:	2104      	movs	r1, #4
 800f10a:	60a2      	str	r2, [r4, #8]
 800f10c:	6123      	str	r3, [r4, #16]
 800f10e:	7561      	strb	r1, [r4, #21]
 800f110:	7da0      	ldrb	r0, [r4, #22]
 800f112:	f080 0001 	eor.w	r0, r0, #1
 800f116:	b003      	add	sp, #12
 800f118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f11c:	9a01      	ldr	r2, [sp, #4]
 800f11e:	601a      	str	r2, [r3, #0]
 800f120:	e7ee      	b.n	800f100 <ucdr_serialize_endian_uint32_t+0xc0>
 800f122:	68a2      	ldr	r2, [r4, #8]
 800f124:	6923      	ldr	r3, [r4, #16]
 800f126:	7da0      	ldrb	r0, [r4, #22]
 800f128:	f884 8015 	strb.w	r8, [r4, #21]
 800f12c:	1bd2      	subs	r2, r2, r7
 800f12e:	1bdb      	subs	r3, r3, r7
 800f130:	f080 0001 	eor.w	r0, r0, #1
 800f134:	60a2      	str	r2, [r4, #8]
 800f136:	6123      	str	r3, [r4, #16]
 800f138:	b003      	add	sp, #12
 800f13a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f13e:	68a3      	ldr	r3, [r4, #8]
 800f140:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f144:	701a      	strb	r2, [r3, #0]
 800f146:	68a3      	ldr	r3, [r4, #8]
 800f148:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f14c:	701a      	strb	r2, [r3, #0]
 800f14e:	68a3      	ldr	r3, [r4, #8]
 800f150:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f154:	701a      	strb	r2, [r3, #0]
 800f156:	e7ad      	b.n	800f0b4 <ucdr_serialize_endian_uint32_t+0x74>
 800f158:	ad01      	add	r5, sp, #4
 800f15a:	4629      	mov	r1, r5
 800f15c:	463a      	mov	r2, r7
 800f15e:	4630      	mov	r0, r6
 800f160:	f009 fb81 	bl	8018866 <memcpy>
 800f164:	68a0      	ldr	r0, [r4, #8]
 800f166:	464a      	mov	r2, r9
 800f168:	19e9      	adds	r1, r5, r7
 800f16a:	f009 fb7c 	bl	8018866 <memcpy>
 800f16e:	e7a1      	b.n	800f0b4 <ucdr_serialize_endian_uint32_t+0x74>

0800f170 <ucdr_deserialize_uint32_t>:
 800f170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f174:	460d      	mov	r5, r1
 800f176:	2104      	movs	r1, #4
 800f178:	4604      	mov	r4, r0
 800f17a:	f000 fc69 	bl	800fa50 <ucdr_buffer_alignment>
 800f17e:	4601      	mov	r1, r0
 800f180:	4620      	mov	r0, r4
 800f182:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f186:	f000 fca7 	bl	800fad8 <ucdr_advance_buffer>
 800f18a:	4620      	mov	r0, r4
 800f18c:	2104      	movs	r1, #4
 800f18e:	f000 fc01 	bl	800f994 <ucdr_check_buffer_available_for>
 800f192:	2800      	cmp	r0, #0
 800f194:	d138      	bne.n	800f208 <ucdr_deserialize_uint32_t+0x98>
 800f196:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f19a:	42b7      	cmp	r7, r6
 800f19c:	d92f      	bls.n	800f1fe <ucdr_deserialize_uint32_t+0x8e>
 800f19e:	6922      	ldr	r2, [r4, #16]
 800f1a0:	60a7      	str	r7, [r4, #8]
 800f1a2:	1bbf      	subs	r7, r7, r6
 800f1a4:	443a      	add	r2, r7
 800f1a6:	f1c7 0904 	rsb	r9, r7, #4
 800f1aa:	6122      	str	r2, [r4, #16]
 800f1ac:	4649      	mov	r1, r9
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f000 fbfc 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	d046      	beq.n	800f246 <ucdr_deserialize_uint32_t+0xd6>
 800f1b8:	7d23      	ldrb	r3, [r4, #20]
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d05c      	beq.n	800f278 <ucdr_deserialize_uint32_t+0x108>
 800f1be:	78f3      	ldrb	r3, [r6, #3]
 800f1c0:	702b      	strb	r3, [r5, #0]
 800f1c2:	2f00      	cmp	r7, #0
 800f1c4:	d04c      	beq.n	800f260 <ucdr_deserialize_uint32_t+0xf0>
 800f1c6:	78b3      	ldrb	r3, [r6, #2]
 800f1c8:	706b      	strb	r3, [r5, #1]
 800f1ca:	2f01      	cmp	r7, #1
 800f1cc:	f105 0302 	add.w	r3, r5, #2
 800f1d0:	d04a      	beq.n	800f268 <ucdr_deserialize_uint32_t+0xf8>
 800f1d2:	7873      	ldrb	r3, [r6, #1]
 800f1d4:	70ab      	strb	r3, [r5, #2]
 800f1d6:	2f02      	cmp	r7, #2
 800f1d8:	f105 0303 	add.w	r3, r5, #3
 800f1dc:	d048      	beq.n	800f270 <ucdr_deserialize_uint32_t+0x100>
 800f1de:	7833      	ldrb	r3, [r6, #0]
 800f1e0:	70eb      	strb	r3, [r5, #3]
 800f1e2:	6923      	ldr	r3, [r4, #16]
 800f1e4:	68a2      	ldr	r2, [r4, #8]
 800f1e6:	7da0      	ldrb	r0, [r4, #22]
 800f1e8:	2104      	movs	r1, #4
 800f1ea:	3304      	adds	r3, #4
 800f1ec:	1bdb      	subs	r3, r3, r7
 800f1ee:	444a      	add	r2, r9
 800f1f0:	7561      	strb	r1, [r4, #21]
 800f1f2:	6123      	str	r3, [r4, #16]
 800f1f4:	60a2      	str	r2, [r4, #8]
 800f1f6:	f080 0001 	eor.w	r0, r0, #1
 800f1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1fe:	2104      	movs	r1, #4
 800f200:	4620      	mov	r0, r4
 800f202:	f000 fbd3 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f206:	b1b0      	cbz	r0, 800f236 <ucdr_deserialize_uint32_t+0xc6>
 800f208:	7d23      	ldrb	r3, [r4, #20]
 800f20a:	2b01      	cmp	r3, #1
 800f20c:	68a3      	ldr	r3, [r4, #8]
 800f20e:	d017      	beq.n	800f240 <ucdr_deserialize_uint32_t+0xd0>
 800f210:	78db      	ldrb	r3, [r3, #3]
 800f212:	702b      	strb	r3, [r5, #0]
 800f214:	68a3      	ldr	r3, [r4, #8]
 800f216:	789b      	ldrb	r3, [r3, #2]
 800f218:	706b      	strb	r3, [r5, #1]
 800f21a:	68a3      	ldr	r3, [r4, #8]
 800f21c:	785b      	ldrb	r3, [r3, #1]
 800f21e:	70ab      	strb	r3, [r5, #2]
 800f220:	68a3      	ldr	r3, [r4, #8]
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	70eb      	strb	r3, [r5, #3]
 800f226:	68a2      	ldr	r2, [r4, #8]
 800f228:	6923      	ldr	r3, [r4, #16]
 800f22a:	3204      	adds	r2, #4
 800f22c:	3304      	adds	r3, #4
 800f22e:	2104      	movs	r1, #4
 800f230:	60a2      	str	r2, [r4, #8]
 800f232:	6123      	str	r3, [r4, #16]
 800f234:	7561      	strb	r1, [r4, #21]
 800f236:	7da0      	ldrb	r0, [r4, #22]
 800f238:	f080 0001 	eor.w	r0, r0, #1
 800f23c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	602b      	str	r3, [r5, #0]
 800f244:	e7ef      	b.n	800f226 <ucdr_deserialize_uint32_t+0xb6>
 800f246:	68a2      	ldr	r2, [r4, #8]
 800f248:	6923      	ldr	r3, [r4, #16]
 800f24a:	7da0      	ldrb	r0, [r4, #22]
 800f24c:	f884 8015 	strb.w	r8, [r4, #21]
 800f250:	1bd2      	subs	r2, r2, r7
 800f252:	1bdb      	subs	r3, r3, r7
 800f254:	60a2      	str	r2, [r4, #8]
 800f256:	6123      	str	r3, [r4, #16]
 800f258:	f080 0001 	eor.w	r0, r0, #1
 800f25c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f260:	68a3      	ldr	r3, [r4, #8]
 800f262:	789b      	ldrb	r3, [r3, #2]
 800f264:	706b      	strb	r3, [r5, #1]
 800f266:	1cab      	adds	r3, r5, #2
 800f268:	68a2      	ldr	r2, [r4, #8]
 800f26a:	7852      	ldrb	r2, [r2, #1]
 800f26c:	f803 2b01 	strb.w	r2, [r3], #1
 800f270:	68a2      	ldr	r2, [r4, #8]
 800f272:	7812      	ldrb	r2, [r2, #0]
 800f274:	701a      	strb	r2, [r3, #0]
 800f276:	e7b4      	b.n	800f1e2 <ucdr_deserialize_uint32_t+0x72>
 800f278:	4631      	mov	r1, r6
 800f27a:	463a      	mov	r2, r7
 800f27c:	4628      	mov	r0, r5
 800f27e:	f009 faf2 	bl	8018866 <memcpy>
 800f282:	68a1      	ldr	r1, [r4, #8]
 800f284:	464a      	mov	r2, r9
 800f286:	19e8      	adds	r0, r5, r7
 800f288:	f009 faed 	bl	8018866 <memcpy>
 800f28c:	e7a9      	b.n	800f1e2 <ucdr_deserialize_uint32_t+0x72>
 800f28e:	bf00      	nop

0800f290 <ucdr_deserialize_endian_uint32_t>:
 800f290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f294:	460e      	mov	r6, r1
 800f296:	2104      	movs	r1, #4
 800f298:	4604      	mov	r4, r0
 800f29a:	4615      	mov	r5, r2
 800f29c:	f000 fbd8 	bl	800fa50 <ucdr_buffer_alignment>
 800f2a0:	4601      	mov	r1, r0
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f2a8:	f000 fc16 	bl	800fad8 <ucdr_advance_buffer>
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	2104      	movs	r1, #4
 800f2b0:	f000 fb70 	bl	800f994 <ucdr_check_buffer_available_for>
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	d13c      	bne.n	800f332 <ucdr_deserialize_endian_uint32_t+0xa2>
 800f2b8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f2bc:	42bb      	cmp	r3, r7
 800f2be:	d933      	bls.n	800f328 <ucdr_deserialize_endian_uint32_t+0x98>
 800f2c0:	6922      	ldr	r2, [r4, #16]
 800f2c2:	60a3      	str	r3, [r4, #8]
 800f2c4:	eba3 0807 	sub.w	r8, r3, r7
 800f2c8:	4442      	add	r2, r8
 800f2ca:	f1c8 0a04 	rsb	sl, r8, #4
 800f2ce:	6122      	str	r2, [r4, #16]
 800f2d0:	4651      	mov	r1, sl
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	f000 fb6a 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	d048      	beq.n	800f36e <ucdr_deserialize_endian_uint32_t+0xde>
 800f2dc:	2e01      	cmp	r6, #1
 800f2de:	d061      	beq.n	800f3a4 <ucdr_deserialize_endian_uint32_t+0x114>
 800f2e0:	78fb      	ldrb	r3, [r7, #3]
 800f2e2:	702b      	strb	r3, [r5, #0]
 800f2e4:	f1b8 0f00 	cmp.w	r8, #0
 800f2e8:	d050      	beq.n	800f38c <ucdr_deserialize_endian_uint32_t+0xfc>
 800f2ea:	78bb      	ldrb	r3, [r7, #2]
 800f2ec:	706b      	strb	r3, [r5, #1]
 800f2ee:	f1b8 0f01 	cmp.w	r8, #1
 800f2f2:	f105 0302 	add.w	r3, r5, #2
 800f2f6:	d04d      	beq.n	800f394 <ucdr_deserialize_endian_uint32_t+0x104>
 800f2f8:	787b      	ldrb	r3, [r7, #1]
 800f2fa:	70ab      	strb	r3, [r5, #2]
 800f2fc:	f1b8 0f02 	cmp.w	r8, #2
 800f300:	f105 0303 	add.w	r3, r5, #3
 800f304:	d04a      	beq.n	800f39c <ucdr_deserialize_endian_uint32_t+0x10c>
 800f306:	783b      	ldrb	r3, [r7, #0]
 800f308:	70eb      	strb	r3, [r5, #3]
 800f30a:	6923      	ldr	r3, [r4, #16]
 800f30c:	68a2      	ldr	r2, [r4, #8]
 800f30e:	7da0      	ldrb	r0, [r4, #22]
 800f310:	2104      	movs	r1, #4
 800f312:	3304      	adds	r3, #4
 800f314:	eba3 0308 	sub.w	r3, r3, r8
 800f318:	4452      	add	r2, sl
 800f31a:	7561      	strb	r1, [r4, #21]
 800f31c:	6123      	str	r3, [r4, #16]
 800f31e:	60a2      	str	r2, [r4, #8]
 800f320:	f080 0001 	eor.w	r0, r0, #1
 800f324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f328:	2104      	movs	r1, #4
 800f32a:	4620      	mov	r0, r4
 800f32c:	f000 fb3e 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f330:	b1a8      	cbz	r0, 800f35e <ucdr_deserialize_endian_uint32_t+0xce>
 800f332:	2e01      	cmp	r6, #1
 800f334:	68a3      	ldr	r3, [r4, #8]
 800f336:	d017      	beq.n	800f368 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f338:	78db      	ldrb	r3, [r3, #3]
 800f33a:	702b      	strb	r3, [r5, #0]
 800f33c:	68a3      	ldr	r3, [r4, #8]
 800f33e:	789b      	ldrb	r3, [r3, #2]
 800f340:	706b      	strb	r3, [r5, #1]
 800f342:	68a3      	ldr	r3, [r4, #8]
 800f344:	785b      	ldrb	r3, [r3, #1]
 800f346:	70ab      	strb	r3, [r5, #2]
 800f348:	68a3      	ldr	r3, [r4, #8]
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	70eb      	strb	r3, [r5, #3]
 800f34e:	68a2      	ldr	r2, [r4, #8]
 800f350:	6923      	ldr	r3, [r4, #16]
 800f352:	3204      	adds	r2, #4
 800f354:	3304      	adds	r3, #4
 800f356:	2104      	movs	r1, #4
 800f358:	60a2      	str	r2, [r4, #8]
 800f35a:	6123      	str	r3, [r4, #16]
 800f35c:	7561      	strb	r1, [r4, #21]
 800f35e:	7da0      	ldrb	r0, [r4, #22]
 800f360:	f080 0001 	eor.w	r0, r0, #1
 800f364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	602b      	str	r3, [r5, #0]
 800f36c:	e7ef      	b.n	800f34e <ucdr_deserialize_endian_uint32_t+0xbe>
 800f36e:	68a2      	ldr	r2, [r4, #8]
 800f370:	6923      	ldr	r3, [r4, #16]
 800f372:	7da0      	ldrb	r0, [r4, #22]
 800f374:	f884 9015 	strb.w	r9, [r4, #21]
 800f378:	eba2 0208 	sub.w	r2, r2, r8
 800f37c:	eba3 0308 	sub.w	r3, r3, r8
 800f380:	60a2      	str	r2, [r4, #8]
 800f382:	6123      	str	r3, [r4, #16]
 800f384:	f080 0001 	eor.w	r0, r0, #1
 800f388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f38c:	68a3      	ldr	r3, [r4, #8]
 800f38e:	789b      	ldrb	r3, [r3, #2]
 800f390:	706b      	strb	r3, [r5, #1]
 800f392:	1cab      	adds	r3, r5, #2
 800f394:	68a2      	ldr	r2, [r4, #8]
 800f396:	7852      	ldrb	r2, [r2, #1]
 800f398:	f803 2b01 	strb.w	r2, [r3], #1
 800f39c:	68a2      	ldr	r2, [r4, #8]
 800f39e:	7812      	ldrb	r2, [r2, #0]
 800f3a0:	701a      	strb	r2, [r3, #0]
 800f3a2:	e7b2      	b.n	800f30a <ucdr_deserialize_endian_uint32_t+0x7a>
 800f3a4:	4639      	mov	r1, r7
 800f3a6:	4642      	mov	r2, r8
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	f009 fa5c 	bl	8018866 <memcpy>
 800f3ae:	68a1      	ldr	r1, [r4, #8]
 800f3b0:	4652      	mov	r2, sl
 800f3b2:	eb05 0008 	add.w	r0, r5, r8
 800f3b6:	f009 fa56 	bl	8018866 <memcpy>
 800f3ba:	e7a6      	b.n	800f30a <ucdr_deserialize_endian_uint32_t+0x7a>

0800f3bc <ucdr_serialize_uint64_t>:
 800f3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c0:	2108      	movs	r1, #8
 800f3c2:	b082      	sub	sp, #8
 800f3c4:	4604      	mov	r4, r0
 800f3c6:	e9cd 2300 	strd	r2, r3, [sp]
 800f3ca:	f000 fb41 	bl	800fa50 <ucdr_buffer_alignment>
 800f3ce:	4601      	mov	r1, r0
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	7d67      	ldrb	r7, [r4, #21]
 800f3d4:	f000 fb80 	bl	800fad8 <ucdr_advance_buffer>
 800f3d8:	4620      	mov	r0, r4
 800f3da:	2108      	movs	r1, #8
 800f3dc:	f000 fada 	bl	800f994 <ucdr_check_buffer_available_for>
 800f3e0:	2800      	cmp	r0, #0
 800f3e2:	d14e      	bne.n	800f482 <ucdr_serialize_uint64_t+0xc6>
 800f3e4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800f3e8:	42b5      	cmp	r5, r6
 800f3ea:	d945      	bls.n	800f478 <ucdr_serialize_uint64_t+0xbc>
 800f3ec:	6923      	ldr	r3, [r4, #16]
 800f3ee:	60a5      	str	r5, [r4, #8]
 800f3f0:	1bad      	subs	r5, r5, r6
 800f3f2:	442b      	add	r3, r5
 800f3f4:	f1c5 0808 	rsb	r8, r5, #8
 800f3f8:	6123      	str	r3, [r4, #16]
 800f3fa:	4641      	mov	r1, r8
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f000 fad5 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f402:	2800      	cmp	r0, #0
 800f404:	d074      	beq.n	800f4f0 <ucdr_serialize_uint64_t+0x134>
 800f406:	7d23      	ldrb	r3, [r4, #20]
 800f408:	2b01      	cmp	r3, #1
 800f40a:	f000 809b 	beq.w	800f544 <ucdr_serialize_uint64_t+0x188>
 800f40e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f412:	7033      	strb	r3, [r6, #0]
 800f414:	2d00      	cmp	r5, #0
 800f416:	d078      	beq.n	800f50a <ucdr_serialize_uint64_t+0x14e>
 800f418:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f41c:	7073      	strb	r3, [r6, #1]
 800f41e:	2d01      	cmp	r5, #1
 800f420:	d077      	beq.n	800f512 <ucdr_serialize_uint64_t+0x156>
 800f422:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f426:	70b3      	strb	r3, [r6, #2]
 800f428:	2d02      	cmp	r5, #2
 800f42a:	d076      	beq.n	800f51a <ucdr_serialize_uint64_t+0x15e>
 800f42c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f430:	70f3      	strb	r3, [r6, #3]
 800f432:	2d03      	cmp	r5, #3
 800f434:	d075      	beq.n	800f522 <ucdr_serialize_uint64_t+0x166>
 800f436:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f43a:	7133      	strb	r3, [r6, #4]
 800f43c:	2d04      	cmp	r5, #4
 800f43e:	d074      	beq.n	800f52a <ucdr_serialize_uint64_t+0x16e>
 800f440:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f444:	7173      	strb	r3, [r6, #5]
 800f446:	2d05      	cmp	r5, #5
 800f448:	d073      	beq.n	800f532 <ucdr_serialize_uint64_t+0x176>
 800f44a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f44e:	71b3      	strb	r3, [r6, #6]
 800f450:	2d06      	cmp	r5, #6
 800f452:	d072      	beq.n	800f53a <ucdr_serialize_uint64_t+0x17e>
 800f454:	f89d 3000 	ldrb.w	r3, [sp]
 800f458:	71f3      	strb	r3, [r6, #7]
 800f45a:	6923      	ldr	r3, [r4, #16]
 800f45c:	68a2      	ldr	r2, [r4, #8]
 800f45e:	7da0      	ldrb	r0, [r4, #22]
 800f460:	3308      	adds	r3, #8
 800f462:	1b5d      	subs	r5, r3, r5
 800f464:	4442      	add	r2, r8
 800f466:	2308      	movs	r3, #8
 800f468:	f080 0001 	eor.w	r0, r0, #1
 800f46c:	6125      	str	r5, [r4, #16]
 800f46e:	60a2      	str	r2, [r4, #8]
 800f470:	7563      	strb	r3, [r4, #21]
 800f472:	b002      	add	sp, #8
 800f474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f478:	2108      	movs	r1, #8
 800f47a:	4620      	mov	r0, r4
 800f47c:	f000 fa96 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f480:	b350      	cbz	r0, 800f4d8 <ucdr_serialize_uint64_t+0x11c>
 800f482:	7d23      	ldrb	r3, [r4, #20]
 800f484:	2b01      	cmp	r3, #1
 800f486:	d02d      	beq.n	800f4e4 <ucdr_serialize_uint64_t+0x128>
 800f488:	68a3      	ldr	r3, [r4, #8]
 800f48a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f48e:	701a      	strb	r2, [r3, #0]
 800f490:	68a3      	ldr	r3, [r4, #8]
 800f492:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f496:	705a      	strb	r2, [r3, #1]
 800f498:	68a3      	ldr	r3, [r4, #8]
 800f49a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f49e:	709a      	strb	r2, [r3, #2]
 800f4a0:	68a3      	ldr	r3, [r4, #8]
 800f4a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f4a6:	70da      	strb	r2, [r3, #3]
 800f4a8:	68a3      	ldr	r3, [r4, #8]
 800f4aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f4ae:	711a      	strb	r2, [r3, #4]
 800f4b0:	68a3      	ldr	r3, [r4, #8]
 800f4b2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f4b6:	715a      	strb	r2, [r3, #5]
 800f4b8:	68a3      	ldr	r3, [r4, #8]
 800f4ba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f4be:	719a      	strb	r2, [r3, #6]
 800f4c0:	68a3      	ldr	r3, [r4, #8]
 800f4c2:	f89d 2000 	ldrb.w	r2, [sp]
 800f4c6:	71da      	strb	r2, [r3, #7]
 800f4c8:	68a2      	ldr	r2, [r4, #8]
 800f4ca:	6923      	ldr	r3, [r4, #16]
 800f4cc:	3208      	adds	r2, #8
 800f4ce:	3308      	adds	r3, #8
 800f4d0:	2108      	movs	r1, #8
 800f4d2:	60a2      	str	r2, [r4, #8]
 800f4d4:	6123      	str	r3, [r4, #16]
 800f4d6:	7561      	strb	r1, [r4, #21]
 800f4d8:	7da0      	ldrb	r0, [r4, #22]
 800f4da:	f080 0001 	eor.w	r0, r0, #1
 800f4de:	b002      	add	sp, #8
 800f4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e4:	466b      	mov	r3, sp
 800f4e6:	cb03      	ldmia	r3!, {r0, r1}
 800f4e8:	68a3      	ldr	r3, [r4, #8]
 800f4ea:	6018      	str	r0, [r3, #0]
 800f4ec:	6059      	str	r1, [r3, #4]
 800f4ee:	e7eb      	b.n	800f4c8 <ucdr_serialize_uint64_t+0x10c>
 800f4f0:	68a2      	ldr	r2, [r4, #8]
 800f4f2:	6923      	ldr	r3, [r4, #16]
 800f4f4:	7da0      	ldrb	r0, [r4, #22]
 800f4f6:	7567      	strb	r7, [r4, #21]
 800f4f8:	1b52      	subs	r2, r2, r5
 800f4fa:	f080 0001 	eor.w	r0, r0, #1
 800f4fe:	1b5d      	subs	r5, r3, r5
 800f500:	60a2      	str	r2, [r4, #8]
 800f502:	6125      	str	r5, [r4, #16]
 800f504:	b002      	add	sp, #8
 800f506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f50a:	68a3      	ldr	r3, [r4, #8]
 800f50c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f510:	701a      	strb	r2, [r3, #0]
 800f512:	68a3      	ldr	r3, [r4, #8]
 800f514:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f518:	701a      	strb	r2, [r3, #0]
 800f51a:	68a3      	ldr	r3, [r4, #8]
 800f51c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f520:	701a      	strb	r2, [r3, #0]
 800f522:	68a3      	ldr	r3, [r4, #8]
 800f524:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f528:	701a      	strb	r2, [r3, #0]
 800f52a:	68a3      	ldr	r3, [r4, #8]
 800f52c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f530:	701a      	strb	r2, [r3, #0]
 800f532:	68a3      	ldr	r3, [r4, #8]
 800f534:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f538:	701a      	strb	r2, [r3, #0]
 800f53a:	68a3      	ldr	r3, [r4, #8]
 800f53c:	f89d 2000 	ldrb.w	r2, [sp]
 800f540:	701a      	strb	r2, [r3, #0]
 800f542:	e78a      	b.n	800f45a <ucdr_serialize_uint64_t+0x9e>
 800f544:	4630      	mov	r0, r6
 800f546:	466e      	mov	r6, sp
 800f548:	4631      	mov	r1, r6
 800f54a:	462a      	mov	r2, r5
 800f54c:	f009 f98b 	bl	8018866 <memcpy>
 800f550:	68a0      	ldr	r0, [r4, #8]
 800f552:	4642      	mov	r2, r8
 800f554:	1971      	adds	r1, r6, r5
 800f556:	f009 f986 	bl	8018866 <memcpy>
 800f55a:	e77e      	b.n	800f45a <ucdr_serialize_uint64_t+0x9e>

0800f55c <ucdr_serialize_int16_t>:
 800f55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f560:	b082      	sub	sp, #8
 800f562:	460b      	mov	r3, r1
 800f564:	2102      	movs	r1, #2
 800f566:	4604      	mov	r4, r0
 800f568:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f56c:	f000 fa70 	bl	800fa50 <ucdr_buffer_alignment>
 800f570:	4601      	mov	r1, r0
 800f572:	4620      	mov	r0, r4
 800f574:	7d67      	ldrb	r7, [r4, #21]
 800f576:	f000 faaf 	bl	800fad8 <ucdr_advance_buffer>
 800f57a:	4620      	mov	r0, r4
 800f57c:	2102      	movs	r1, #2
 800f57e:	f000 fa09 	bl	800f994 <ucdr_check_buffer_available_for>
 800f582:	bb78      	cbnz	r0, 800f5e4 <ucdr_serialize_int16_t+0x88>
 800f584:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800f588:	42b5      	cmp	r5, r6
 800f58a:	d926      	bls.n	800f5da <ucdr_serialize_int16_t+0x7e>
 800f58c:	6922      	ldr	r2, [r4, #16]
 800f58e:	60a5      	str	r5, [r4, #8]
 800f590:	1bad      	subs	r5, r5, r6
 800f592:	442a      	add	r2, r5
 800f594:	f1c5 0802 	rsb	r8, r5, #2
 800f598:	6122      	str	r2, [r4, #16]
 800f59a:	4641      	mov	r1, r8
 800f59c:	4620      	mov	r0, r4
 800f59e:	f000 fa05 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	d03b      	beq.n	800f61e <ucdr_serialize_int16_t+0xc2>
 800f5a6:	7d23      	ldrb	r3, [r4, #20]
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d04a      	beq.n	800f642 <ucdr_serialize_int16_t+0xe6>
 800f5ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5b0:	7033      	strb	r3, [r6, #0]
 800f5b2:	2d00      	cmp	r5, #0
 800f5b4:	d040      	beq.n	800f638 <ucdr_serialize_int16_t+0xdc>
 800f5b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f5ba:	7073      	strb	r3, [r6, #1]
 800f5bc:	6923      	ldr	r3, [r4, #16]
 800f5be:	68a2      	ldr	r2, [r4, #8]
 800f5c0:	7da0      	ldrb	r0, [r4, #22]
 800f5c2:	3302      	adds	r3, #2
 800f5c4:	1b5b      	subs	r3, r3, r5
 800f5c6:	4442      	add	r2, r8
 800f5c8:	2102      	movs	r1, #2
 800f5ca:	f080 0001 	eor.w	r0, r0, #1
 800f5ce:	6123      	str	r3, [r4, #16]
 800f5d0:	60a2      	str	r2, [r4, #8]
 800f5d2:	7561      	strb	r1, [r4, #21]
 800f5d4:	b002      	add	sp, #8
 800f5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5da:	2102      	movs	r1, #2
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f000 f9e5 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f5e2:	b190      	cbz	r0, 800f60a <ucdr_serialize_int16_t+0xae>
 800f5e4:	7d23      	ldrb	r3, [r4, #20]
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	68a3      	ldr	r3, [r4, #8]
 800f5ea:	d014      	beq.n	800f616 <ucdr_serialize_int16_t+0xba>
 800f5ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f5f0:	701a      	strb	r2, [r3, #0]
 800f5f2:	68a3      	ldr	r3, [r4, #8]
 800f5f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5f8:	705a      	strb	r2, [r3, #1]
 800f5fa:	68a2      	ldr	r2, [r4, #8]
 800f5fc:	6923      	ldr	r3, [r4, #16]
 800f5fe:	3202      	adds	r2, #2
 800f600:	3302      	adds	r3, #2
 800f602:	2102      	movs	r1, #2
 800f604:	60a2      	str	r2, [r4, #8]
 800f606:	6123      	str	r3, [r4, #16]
 800f608:	7561      	strb	r1, [r4, #21]
 800f60a:	7da0      	ldrb	r0, [r4, #22]
 800f60c:	f080 0001 	eor.w	r0, r0, #1
 800f610:	b002      	add	sp, #8
 800f612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f616:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f61a:	801a      	strh	r2, [r3, #0]
 800f61c:	e7ed      	b.n	800f5fa <ucdr_serialize_int16_t+0x9e>
 800f61e:	68a2      	ldr	r2, [r4, #8]
 800f620:	6923      	ldr	r3, [r4, #16]
 800f622:	7da0      	ldrb	r0, [r4, #22]
 800f624:	7567      	strb	r7, [r4, #21]
 800f626:	1b52      	subs	r2, r2, r5
 800f628:	1b5b      	subs	r3, r3, r5
 800f62a:	f080 0001 	eor.w	r0, r0, #1
 800f62e:	60a2      	str	r2, [r4, #8]
 800f630:	6123      	str	r3, [r4, #16]
 800f632:	b002      	add	sp, #8
 800f634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f638:	68a3      	ldr	r3, [r4, #8]
 800f63a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f63e:	701a      	strb	r2, [r3, #0]
 800f640:	e7bc      	b.n	800f5bc <ucdr_serialize_int16_t+0x60>
 800f642:	4630      	mov	r0, r6
 800f644:	f10d 0606 	add.w	r6, sp, #6
 800f648:	4631      	mov	r1, r6
 800f64a:	462a      	mov	r2, r5
 800f64c:	f009 f90b 	bl	8018866 <memcpy>
 800f650:	68a0      	ldr	r0, [r4, #8]
 800f652:	4642      	mov	r2, r8
 800f654:	1971      	adds	r1, r6, r5
 800f656:	f009 f906 	bl	8018866 <memcpy>
 800f65a:	e7af      	b.n	800f5bc <ucdr_serialize_int16_t+0x60>

0800f65c <ucdr_deserialize_int16_t>:
 800f65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f660:	460d      	mov	r5, r1
 800f662:	2102      	movs	r1, #2
 800f664:	4604      	mov	r4, r0
 800f666:	f000 f9f3 	bl	800fa50 <ucdr_buffer_alignment>
 800f66a:	4601      	mov	r1, r0
 800f66c:	4620      	mov	r0, r4
 800f66e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f672:	f000 fa31 	bl	800fad8 <ucdr_advance_buffer>
 800f676:	4620      	mov	r0, r4
 800f678:	2102      	movs	r1, #2
 800f67a:	f000 f98b 	bl	800f994 <ucdr_check_buffer_available_for>
 800f67e:	bb60      	cbnz	r0, 800f6da <ucdr_deserialize_int16_t+0x7e>
 800f680:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f684:	42be      	cmp	r6, r7
 800f686:	d923      	bls.n	800f6d0 <ucdr_deserialize_int16_t+0x74>
 800f688:	6922      	ldr	r2, [r4, #16]
 800f68a:	60a6      	str	r6, [r4, #8]
 800f68c:	1bf6      	subs	r6, r6, r7
 800f68e:	4432      	add	r2, r6
 800f690:	f1c6 0902 	rsb	r9, r6, #2
 800f694:	6122      	str	r2, [r4, #16]
 800f696:	4649      	mov	r1, r9
 800f698:	4620      	mov	r0, r4
 800f69a:	f000 f987 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	d034      	beq.n	800f70c <ucdr_deserialize_int16_t+0xb0>
 800f6a2:	7d23      	ldrb	r3, [r4, #20]
 800f6a4:	2b01      	cmp	r3, #1
 800f6a6:	d042      	beq.n	800f72e <ucdr_deserialize_int16_t+0xd2>
 800f6a8:	787b      	ldrb	r3, [r7, #1]
 800f6aa:	702b      	strb	r3, [r5, #0]
 800f6ac:	2e00      	cmp	r6, #0
 800f6ae:	d03a      	beq.n	800f726 <ucdr_deserialize_int16_t+0xca>
 800f6b0:	783b      	ldrb	r3, [r7, #0]
 800f6b2:	706b      	strb	r3, [r5, #1]
 800f6b4:	6923      	ldr	r3, [r4, #16]
 800f6b6:	68a2      	ldr	r2, [r4, #8]
 800f6b8:	7da0      	ldrb	r0, [r4, #22]
 800f6ba:	2102      	movs	r1, #2
 800f6bc:	3302      	adds	r3, #2
 800f6be:	1b9b      	subs	r3, r3, r6
 800f6c0:	444a      	add	r2, r9
 800f6c2:	7561      	strb	r1, [r4, #21]
 800f6c4:	6123      	str	r3, [r4, #16]
 800f6c6:	60a2      	str	r2, [r4, #8]
 800f6c8:	f080 0001 	eor.w	r0, r0, #1
 800f6cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6d0:	2102      	movs	r1, #2
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	f000 f96a 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f6d8:	b180      	cbz	r0, 800f6fc <ucdr_deserialize_int16_t+0xa0>
 800f6da:	7d23      	ldrb	r3, [r4, #20]
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	68a3      	ldr	r3, [r4, #8]
 800f6e0:	d011      	beq.n	800f706 <ucdr_deserialize_int16_t+0xaa>
 800f6e2:	785b      	ldrb	r3, [r3, #1]
 800f6e4:	702b      	strb	r3, [r5, #0]
 800f6e6:	68a3      	ldr	r3, [r4, #8]
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	706b      	strb	r3, [r5, #1]
 800f6ec:	68a2      	ldr	r2, [r4, #8]
 800f6ee:	6923      	ldr	r3, [r4, #16]
 800f6f0:	3202      	adds	r2, #2
 800f6f2:	3302      	adds	r3, #2
 800f6f4:	2102      	movs	r1, #2
 800f6f6:	60a2      	str	r2, [r4, #8]
 800f6f8:	6123      	str	r3, [r4, #16]
 800f6fa:	7561      	strb	r1, [r4, #21]
 800f6fc:	7da0      	ldrb	r0, [r4, #22]
 800f6fe:	f080 0001 	eor.w	r0, r0, #1
 800f702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	802b      	strh	r3, [r5, #0]
 800f70a:	e7ef      	b.n	800f6ec <ucdr_deserialize_int16_t+0x90>
 800f70c:	68a2      	ldr	r2, [r4, #8]
 800f70e:	6923      	ldr	r3, [r4, #16]
 800f710:	7da0      	ldrb	r0, [r4, #22]
 800f712:	f884 8015 	strb.w	r8, [r4, #21]
 800f716:	1b92      	subs	r2, r2, r6
 800f718:	1b9b      	subs	r3, r3, r6
 800f71a:	60a2      	str	r2, [r4, #8]
 800f71c:	6123      	str	r3, [r4, #16]
 800f71e:	f080 0001 	eor.w	r0, r0, #1
 800f722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f726:	68a3      	ldr	r3, [r4, #8]
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	706b      	strb	r3, [r5, #1]
 800f72c:	e7c2      	b.n	800f6b4 <ucdr_deserialize_int16_t+0x58>
 800f72e:	4639      	mov	r1, r7
 800f730:	4632      	mov	r2, r6
 800f732:	4628      	mov	r0, r5
 800f734:	f009 f897 	bl	8018866 <memcpy>
 800f738:	68a1      	ldr	r1, [r4, #8]
 800f73a:	464a      	mov	r2, r9
 800f73c:	19a8      	adds	r0, r5, r6
 800f73e:	f009 f892 	bl	8018866 <memcpy>
 800f742:	e7b7      	b.n	800f6b4 <ucdr_deserialize_int16_t+0x58>

0800f744 <ucdr_serialize_int32_t>:
 800f744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f748:	b082      	sub	sp, #8
 800f74a:	4604      	mov	r4, r0
 800f74c:	9101      	str	r1, [sp, #4]
 800f74e:	2104      	movs	r1, #4
 800f750:	f000 f97e 	bl	800fa50 <ucdr_buffer_alignment>
 800f754:	4601      	mov	r1, r0
 800f756:	4620      	mov	r0, r4
 800f758:	7d67      	ldrb	r7, [r4, #21]
 800f75a:	f000 f9bd 	bl	800fad8 <ucdr_advance_buffer>
 800f75e:	4620      	mov	r0, r4
 800f760:	2104      	movs	r1, #4
 800f762:	f000 f917 	bl	800f994 <ucdr_check_buffer_available_for>
 800f766:	2800      	cmp	r0, #0
 800f768:	d139      	bne.n	800f7de <ucdr_serialize_int32_t+0x9a>
 800f76a:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800f76e:	42ae      	cmp	r6, r5
 800f770:	d930      	bls.n	800f7d4 <ucdr_serialize_int32_t+0x90>
 800f772:	6922      	ldr	r2, [r4, #16]
 800f774:	60a6      	str	r6, [r4, #8]
 800f776:	1b76      	subs	r6, r6, r5
 800f778:	4432      	add	r2, r6
 800f77a:	f1c6 0804 	rsb	r8, r6, #4
 800f77e:	6122      	str	r2, [r4, #16]
 800f780:	4641      	mov	r1, r8
 800f782:	4620      	mov	r0, r4
 800f784:	f000 f912 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f788:	2800      	cmp	r0, #0
 800f78a:	d04c      	beq.n	800f826 <ucdr_serialize_int32_t+0xe2>
 800f78c:	7d23      	ldrb	r3, [r4, #20]
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d063      	beq.n	800f85a <ucdr_serialize_int32_t+0x116>
 800f792:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f796:	702b      	strb	r3, [r5, #0]
 800f798:	2e00      	cmp	r6, #0
 800f79a:	d051      	beq.n	800f840 <ucdr_serialize_int32_t+0xfc>
 800f79c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f7a0:	706b      	strb	r3, [r5, #1]
 800f7a2:	2e01      	cmp	r6, #1
 800f7a4:	d050      	beq.n	800f848 <ucdr_serialize_int32_t+0x104>
 800f7a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f7aa:	70ab      	strb	r3, [r5, #2]
 800f7ac:	2e02      	cmp	r6, #2
 800f7ae:	d04f      	beq.n	800f850 <ucdr_serialize_int32_t+0x10c>
 800f7b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f7b4:	70eb      	strb	r3, [r5, #3]
 800f7b6:	6923      	ldr	r3, [r4, #16]
 800f7b8:	68a2      	ldr	r2, [r4, #8]
 800f7ba:	7da0      	ldrb	r0, [r4, #22]
 800f7bc:	3304      	adds	r3, #4
 800f7be:	1b9b      	subs	r3, r3, r6
 800f7c0:	4442      	add	r2, r8
 800f7c2:	2104      	movs	r1, #4
 800f7c4:	f080 0001 	eor.w	r0, r0, #1
 800f7c8:	6123      	str	r3, [r4, #16]
 800f7ca:	60a2      	str	r2, [r4, #8]
 800f7cc:	7561      	strb	r1, [r4, #21]
 800f7ce:	b002      	add	sp, #8
 800f7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7d4:	2104      	movs	r1, #4
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	f000 f8e8 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f7dc:	b1d0      	cbz	r0, 800f814 <ucdr_serialize_int32_t+0xd0>
 800f7de:	7d23      	ldrb	r3, [r4, #20]
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	68a3      	ldr	r3, [r4, #8]
 800f7e4:	d01c      	beq.n	800f820 <ucdr_serialize_int32_t+0xdc>
 800f7e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f7ea:	701a      	strb	r2, [r3, #0]
 800f7ec:	68a3      	ldr	r3, [r4, #8]
 800f7ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7f2:	705a      	strb	r2, [r3, #1]
 800f7f4:	68a3      	ldr	r3, [r4, #8]
 800f7f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f7fa:	709a      	strb	r2, [r3, #2]
 800f7fc:	68a3      	ldr	r3, [r4, #8]
 800f7fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f802:	70da      	strb	r2, [r3, #3]
 800f804:	68a2      	ldr	r2, [r4, #8]
 800f806:	6923      	ldr	r3, [r4, #16]
 800f808:	3204      	adds	r2, #4
 800f80a:	3304      	adds	r3, #4
 800f80c:	2104      	movs	r1, #4
 800f80e:	60a2      	str	r2, [r4, #8]
 800f810:	6123      	str	r3, [r4, #16]
 800f812:	7561      	strb	r1, [r4, #21]
 800f814:	7da0      	ldrb	r0, [r4, #22]
 800f816:	f080 0001 	eor.w	r0, r0, #1
 800f81a:	b002      	add	sp, #8
 800f81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f820:	9a01      	ldr	r2, [sp, #4]
 800f822:	601a      	str	r2, [r3, #0]
 800f824:	e7ee      	b.n	800f804 <ucdr_serialize_int32_t+0xc0>
 800f826:	68a2      	ldr	r2, [r4, #8]
 800f828:	6923      	ldr	r3, [r4, #16]
 800f82a:	7da0      	ldrb	r0, [r4, #22]
 800f82c:	7567      	strb	r7, [r4, #21]
 800f82e:	1b92      	subs	r2, r2, r6
 800f830:	1b9b      	subs	r3, r3, r6
 800f832:	f080 0001 	eor.w	r0, r0, #1
 800f836:	60a2      	str	r2, [r4, #8]
 800f838:	6123      	str	r3, [r4, #16]
 800f83a:	b002      	add	sp, #8
 800f83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f840:	68a3      	ldr	r3, [r4, #8]
 800f842:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f846:	701a      	strb	r2, [r3, #0]
 800f848:	68a3      	ldr	r3, [r4, #8]
 800f84a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f84e:	701a      	strb	r2, [r3, #0]
 800f850:	68a3      	ldr	r3, [r4, #8]
 800f852:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f856:	701a      	strb	r2, [r3, #0]
 800f858:	e7ad      	b.n	800f7b6 <ucdr_serialize_int32_t+0x72>
 800f85a:	4628      	mov	r0, r5
 800f85c:	ad01      	add	r5, sp, #4
 800f85e:	4629      	mov	r1, r5
 800f860:	4632      	mov	r2, r6
 800f862:	f009 f800 	bl	8018866 <memcpy>
 800f866:	68a0      	ldr	r0, [r4, #8]
 800f868:	4642      	mov	r2, r8
 800f86a:	19a9      	adds	r1, r5, r6
 800f86c:	f008 fffb 	bl	8018866 <memcpy>
 800f870:	e7a1      	b.n	800f7b6 <ucdr_serialize_int32_t+0x72>
 800f872:	bf00      	nop

0800f874 <ucdr_deserialize_int32_t>:
 800f874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f878:	460d      	mov	r5, r1
 800f87a:	2104      	movs	r1, #4
 800f87c:	4604      	mov	r4, r0
 800f87e:	f000 f8e7 	bl	800fa50 <ucdr_buffer_alignment>
 800f882:	4601      	mov	r1, r0
 800f884:	4620      	mov	r0, r4
 800f886:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f88a:	f000 f925 	bl	800fad8 <ucdr_advance_buffer>
 800f88e:	4620      	mov	r0, r4
 800f890:	2104      	movs	r1, #4
 800f892:	f000 f87f 	bl	800f994 <ucdr_check_buffer_available_for>
 800f896:	2800      	cmp	r0, #0
 800f898:	d138      	bne.n	800f90c <ucdr_deserialize_int32_t+0x98>
 800f89a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f89e:	42b7      	cmp	r7, r6
 800f8a0:	d92f      	bls.n	800f902 <ucdr_deserialize_int32_t+0x8e>
 800f8a2:	6922      	ldr	r2, [r4, #16]
 800f8a4:	60a7      	str	r7, [r4, #8]
 800f8a6:	1bbf      	subs	r7, r7, r6
 800f8a8:	443a      	add	r2, r7
 800f8aa:	f1c7 0904 	rsb	r9, r7, #4
 800f8ae:	6122      	str	r2, [r4, #16]
 800f8b0:	4649      	mov	r1, r9
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	f000 f87a 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	d046      	beq.n	800f94a <ucdr_deserialize_int32_t+0xd6>
 800f8bc:	7d23      	ldrb	r3, [r4, #20]
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	d05c      	beq.n	800f97c <ucdr_deserialize_int32_t+0x108>
 800f8c2:	78f3      	ldrb	r3, [r6, #3]
 800f8c4:	702b      	strb	r3, [r5, #0]
 800f8c6:	2f00      	cmp	r7, #0
 800f8c8:	d04c      	beq.n	800f964 <ucdr_deserialize_int32_t+0xf0>
 800f8ca:	78b3      	ldrb	r3, [r6, #2]
 800f8cc:	706b      	strb	r3, [r5, #1]
 800f8ce:	2f01      	cmp	r7, #1
 800f8d0:	f105 0302 	add.w	r3, r5, #2
 800f8d4:	d04a      	beq.n	800f96c <ucdr_deserialize_int32_t+0xf8>
 800f8d6:	7873      	ldrb	r3, [r6, #1]
 800f8d8:	70ab      	strb	r3, [r5, #2]
 800f8da:	2f02      	cmp	r7, #2
 800f8dc:	f105 0303 	add.w	r3, r5, #3
 800f8e0:	d048      	beq.n	800f974 <ucdr_deserialize_int32_t+0x100>
 800f8e2:	7833      	ldrb	r3, [r6, #0]
 800f8e4:	70eb      	strb	r3, [r5, #3]
 800f8e6:	6923      	ldr	r3, [r4, #16]
 800f8e8:	68a2      	ldr	r2, [r4, #8]
 800f8ea:	7da0      	ldrb	r0, [r4, #22]
 800f8ec:	2104      	movs	r1, #4
 800f8ee:	3304      	adds	r3, #4
 800f8f0:	1bdb      	subs	r3, r3, r7
 800f8f2:	444a      	add	r2, r9
 800f8f4:	7561      	strb	r1, [r4, #21]
 800f8f6:	6123      	str	r3, [r4, #16]
 800f8f8:	60a2      	str	r2, [r4, #8]
 800f8fa:	f080 0001 	eor.w	r0, r0, #1
 800f8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f902:	2104      	movs	r1, #4
 800f904:	4620      	mov	r0, r4
 800f906:	f000 f851 	bl	800f9ac <ucdr_check_final_buffer_behavior>
 800f90a:	b1b0      	cbz	r0, 800f93a <ucdr_deserialize_int32_t+0xc6>
 800f90c:	7d23      	ldrb	r3, [r4, #20]
 800f90e:	2b01      	cmp	r3, #1
 800f910:	68a3      	ldr	r3, [r4, #8]
 800f912:	d017      	beq.n	800f944 <ucdr_deserialize_int32_t+0xd0>
 800f914:	78db      	ldrb	r3, [r3, #3]
 800f916:	702b      	strb	r3, [r5, #0]
 800f918:	68a3      	ldr	r3, [r4, #8]
 800f91a:	789b      	ldrb	r3, [r3, #2]
 800f91c:	706b      	strb	r3, [r5, #1]
 800f91e:	68a3      	ldr	r3, [r4, #8]
 800f920:	785b      	ldrb	r3, [r3, #1]
 800f922:	70ab      	strb	r3, [r5, #2]
 800f924:	68a3      	ldr	r3, [r4, #8]
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	70eb      	strb	r3, [r5, #3]
 800f92a:	68a2      	ldr	r2, [r4, #8]
 800f92c:	6923      	ldr	r3, [r4, #16]
 800f92e:	3204      	adds	r2, #4
 800f930:	3304      	adds	r3, #4
 800f932:	2104      	movs	r1, #4
 800f934:	60a2      	str	r2, [r4, #8]
 800f936:	6123      	str	r3, [r4, #16]
 800f938:	7561      	strb	r1, [r4, #21]
 800f93a:	7da0      	ldrb	r0, [r4, #22]
 800f93c:	f080 0001 	eor.w	r0, r0, #1
 800f940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	602b      	str	r3, [r5, #0]
 800f948:	e7ef      	b.n	800f92a <ucdr_deserialize_int32_t+0xb6>
 800f94a:	68a2      	ldr	r2, [r4, #8]
 800f94c:	6923      	ldr	r3, [r4, #16]
 800f94e:	7da0      	ldrb	r0, [r4, #22]
 800f950:	f884 8015 	strb.w	r8, [r4, #21]
 800f954:	1bd2      	subs	r2, r2, r7
 800f956:	1bdb      	subs	r3, r3, r7
 800f958:	60a2      	str	r2, [r4, #8]
 800f95a:	6123      	str	r3, [r4, #16]
 800f95c:	f080 0001 	eor.w	r0, r0, #1
 800f960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f964:	68a3      	ldr	r3, [r4, #8]
 800f966:	789b      	ldrb	r3, [r3, #2]
 800f968:	706b      	strb	r3, [r5, #1]
 800f96a:	1cab      	adds	r3, r5, #2
 800f96c:	68a2      	ldr	r2, [r4, #8]
 800f96e:	7852      	ldrb	r2, [r2, #1]
 800f970:	f803 2b01 	strb.w	r2, [r3], #1
 800f974:	68a2      	ldr	r2, [r4, #8]
 800f976:	7812      	ldrb	r2, [r2, #0]
 800f978:	701a      	strb	r2, [r3, #0]
 800f97a:	e7b4      	b.n	800f8e6 <ucdr_deserialize_int32_t+0x72>
 800f97c:	4631      	mov	r1, r6
 800f97e:	463a      	mov	r2, r7
 800f980:	4628      	mov	r0, r5
 800f982:	f008 ff70 	bl	8018866 <memcpy>
 800f986:	68a1      	ldr	r1, [r4, #8]
 800f988:	464a      	mov	r2, r9
 800f98a:	19e8      	adds	r0, r5, r7
 800f98c:	f008 ff6b 	bl	8018866 <memcpy>
 800f990:	e7a9      	b.n	800f8e6 <ucdr_deserialize_int32_t+0x72>
 800f992:	bf00      	nop

0800f994 <ucdr_check_buffer_available_for>:
 800f994:	7d83      	ldrb	r3, [r0, #22]
 800f996:	b93b      	cbnz	r3, 800f9a8 <ucdr_check_buffer_available_for+0x14>
 800f998:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f99c:	4419      	add	r1, r3
 800f99e:	4288      	cmp	r0, r1
 800f9a0:	bf34      	ite	cc
 800f9a2:	2000      	movcc	r0, #0
 800f9a4:	2001      	movcs	r0, #1
 800f9a6:	4770      	bx	lr
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	4770      	bx	lr

0800f9ac <ucdr_check_final_buffer_behavior>:
 800f9ac:	7d83      	ldrb	r3, [r0, #22]
 800f9ae:	b943      	cbnz	r3, 800f9c2 <ucdr_check_final_buffer_behavior+0x16>
 800f9b0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f9b4:	4291      	cmp	r1, r2
 800f9b6:	b510      	push	{r4, lr}
 800f9b8:	4604      	mov	r4, r0
 800f9ba:	d205      	bcs.n	800f9c8 <ucdr_check_final_buffer_behavior+0x1c>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	4618      	mov	r0, r3
 800f9c0:	bd10      	pop	{r4, pc}
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	4770      	bx	lr
 800f9c8:	6982      	ldr	r2, [r0, #24]
 800f9ca:	b13a      	cbz	r2, 800f9dc <ucdr_check_final_buffer_behavior+0x30>
 800f9cc:	69c1      	ldr	r1, [r0, #28]
 800f9ce:	4790      	blx	r2
 800f9d0:	f080 0301 	eor.w	r3, r0, #1
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	75a0      	strb	r0, [r4, #22]
 800f9d8:	4618      	mov	r0, r3
 800f9da:	bd10      	pop	{r4, pc}
 800f9dc:	2001      	movs	r0, #1
 800f9de:	75a0      	strb	r0, [r4, #22]
 800f9e0:	e7fa      	b.n	800f9d8 <ucdr_check_final_buffer_behavior+0x2c>
 800f9e2:	bf00      	nop

0800f9e4 <ucdr_set_on_full_buffer_callback>:
 800f9e4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop

0800f9ec <ucdr_init_buffer_origin_offset_endian>:
 800f9ec:	b430      	push	{r4, r5}
 800f9ee:	9c02      	ldr	r4, [sp, #8]
 800f9f0:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800f9f4:	6001      	str	r1, [r0, #0]
 800f9f6:	440a      	add	r2, r1
 800f9f8:	60c3      	str	r3, [r0, #12]
 800f9fa:	4421      	add	r1, r4
 800f9fc:	441c      	add	r4, r3
 800f9fe:	2300      	movs	r3, #0
 800fa00:	6104      	str	r4, [r0, #16]
 800fa02:	7505      	strb	r5, [r0, #20]
 800fa04:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800fa08:	bc30      	pop	{r4, r5}
 800fa0a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800fa0e:	7543      	strb	r3, [r0, #21]
 800fa10:	7583      	strb	r3, [r0, #22]
 800fa12:	4770      	bx	lr

0800fa14 <ucdr_init_buffer_origin_offset>:
 800fa14:	b510      	push	{r4, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	9c04      	ldr	r4, [sp, #16]
 800fa1a:	9400      	str	r4, [sp, #0]
 800fa1c:	2401      	movs	r4, #1
 800fa1e:	9401      	str	r4, [sp, #4]
 800fa20:	f7ff ffe4 	bl	800f9ec <ucdr_init_buffer_origin_offset_endian>
 800fa24:	b002      	add	sp, #8
 800fa26:	bd10      	pop	{r4, pc}

0800fa28 <ucdr_init_buffer_origin>:
 800fa28:	b510      	push	{r4, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	2400      	movs	r4, #0
 800fa2e:	9400      	str	r4, [sp, #0]
 800fa30:	f7ff fff0 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 800fa34:	b002      	add	sp, #8
 800fa36:	bd10      	pop	{r4, pc}

0800fa38 <ucdr_init_buffer>:
 800fa38:	2300      	movs	r3, #0
 800fa3a:	f7ff bff5 	b.w	800fa28 <ucdr_init_buffer_origin>
 800fa3e:	bf00      	nop

0800fa40 <ucdr_alignment>:
 800fa40:	fbb0 f3f1 	udiv	r3, r0, r1
 800fa44:	fb03 0011 	mls	r0, r3, r1, r0
 800fa48:	1a08      	subs	r0, r1, r0
 800fa4a:	3901      	subs	r1, #1
 800fa4c:	4008      	ands	r0, r1
 800fa4e:	4770      	bx	lr

0800fa50 <ucdr_buffer_alignment>:
 800fa50:	7d43      	ldrb	r3, [r0, #21]
 800fa52:	428b      	cmp	r3, r1
 800fa54:	d208      	bcs.n	800fa68 <ucdr_buffer_alignment+0x18>
 800fa56:	6903      	ldr	r3, [r0, #16]
 800fa58:	fbb3 f0f1 	udiv	r0, r3, r1
 800fa5c:	fb01 3010 	mls	r0, r1, r0, r3
 800fa60:	1a08      	subs	r0, r1, r0
 800fa62:	3901      	subs	r1, #1
 800fa64:	4008      	ands	r0, r1
 800fa66:	4770      	bx	lr
 800fa68:	2000      	movs	r0, #0
 800fa6a:	4770      	bx	lr

0800fa6c <ucdr_align_to>:
 800fa6c:	b570      	push	{r4, r5, r6, lr}
 800fa6e:	4604      	mov	r4, r0
 800fa70:	460e      	mov	r6, r1
 800fa72:	f7ff ffed 	bl	800fa50 <ucdr_buffer_alignment>
 800fa76:	68a5      	ldr	r5, [r4, #8]
 800fa78:	6863      	ldr	r3, [r4, #4]
 800fa7a:	6922      	ldr	r2, [r4, #16]
 800fa7c:	7566      	strb	r6, [r4, #21]
 800fa7e:	4405      	add	r5, r0
 800fa80:	42ab      	cmp	r3, r5
 800fa82:	4410      	add	r0, r2
 800fa84:	bf28      	it	cs
 800fa86:	462b      	movcs	r3, r5
 800fa88:	6120      	str	r0, [r4, #16]
 800fa8a:	60a3      	str	r3, [r4, #8]
 800fa8c:	bd70      	pop	{r4, r5, r6, pc}
 800fa8e:	bf00      	nop

0800fa90 <ucdr_buffer_length>:
 800fa90:	6882      	ldr	r2, [r0, #8]
 800fa92:	6800      	ldr	r0, [r0, #0]
 800fa94:	1a10      	subs	r0, r2, r0
 800fa96:	4770      	bx	lr

0800fa98 <ucdr_buffer_remaining>:
 800fa98:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800fa9c:	1a10      	subs	r0, r2, r0
 800fa9e:	4770      	bx	lr

0800faa0 <ucdr_check_final_buffer_behavior_array>:
 800faa0:	b538      	push	{r3, r4, r5, lr}
 800faa2:	7d83      	ldrb	r3, [r0, #22]
 800faa4:	b963      	cbnz	r3, 800fac0 <ucdr_check_final_buffer_behavior_array+0x20>
 800faa6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800faaa:	429a      	cmp	r2, r3
 800faac:	4604      	mov	r4, r0
 800faae:	460d      	mov	r5, r1
 800fab0:	d308      	bcc.n	800fac4 <ucdr_check_final_buffer_behavior_array+0x24>
 800fab2:	b139      	cbz	r1, 800fac4 <ucdr_check_final_buffer_behavior_array+0x24>
 800fab4:	6983      	ldr	r3, [r0, #24]
 800fab6:	b163      	cbz	r3, 800fad2 <ucdr_check_final_buffer_behavior_array+0x32>
 800fab8:	69c1      	ldr	r1, [r0, #28]
 800faba:	4798      	blx	r3
 800fabc:	75a0      	strb	r0, [r4, #22]
 800fabe:	b108      	cbz	r0, 800fac4 <ucdr_check_final_buffer_behavior_array+0x24>
 800fac0:	2000      	movs	r0, #0
 800fac2:	bd38      	pop	{r3, r4, r5, pc}
 800fac4:	4620      	mov	r0, r4
 800fac6:	f7ff ffe7 	bl	800fa98 <ucdr_buffer_remaining>
 800faca:	42a8      	cmp	r0, r5
 800facc:	bf28      	it	cs
 800face:	4628      	movcs	r0, r5
 800fad0:	bd38      	pop	{r3, r4, r5, pc}
 800fad2:	2301      	movs	r3, #1
 800fad4:	7583      	strb	r3, [r0, #22]
 800fad6:	e7f3      	b.n	800fac0 <ucdr_check_final_buffer_behavior_array+0x20>

0800fad8 <ucdr_advance_buffer>:
 800fad8:	b538      	push	{r3, r4, r5, lr}
 800fada:	4604      	mov	r4, r0
 800fadc:	460d      	mov	r5, r1
 800fade:	f7ff ff59 	bl	800f994 <ucdr_check_buffer_available_for>
 800fae2:	b178      	cbz	r0, 800fb04 <ucdr_advance_buffer+0x2c>
 800fae4:	68a3      	ldr	r3, [r4, #8]
 800fae6:	6921      	ldr	r1, [r4, #16]
 800fae8:	442b      	add	r3, r5
 800faea:	60a3      	str	r3, [r4, #8]
 800faec:	2301      	movs	r3, #1
 800faee:	4429      	add	r1, r5
 800faf0:	7563      	strb	r3, [r4, #21]
 800faf2:	6121      	str	r1, [r4, #16]
 800faf4:	bd38      	pop	{r3, r4, r5, pc}
 800faf6:	68a2      	ldr	r2, [r4, #8]
 800faf8:	6923      	ldr	r3, [r4, #16]
 800fafa:	4402      	add	r2, r0
 800fafc:	4403      	add	r3, r0
 800fafe:	1a2d      	subs	r5, r5, r0
 800fb00:	60a2      	str	r2, [r4, #8]
 800fb02:	6123      	str	r3, [r4, #16]
 800fb04:	2201      	movs	r2, #1
 800fb06:	4629      	mov	r1, r5
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f7ff ffc9 	bl	800faa0 <ucdr_check_final_buffer_behavior_array>
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	d1f1      	bne.n	800faf6 <ucdr_advance_buffer+0x1e>
 800fb12:	2301      	movs	r3, #1
 800fb14:	7563      	strb	r3, [r4, #21]
 800fb16:	bd38      	pop	{r3, r4, r5, pc}

0800fb18 <uxr_buffer_delete_entity>:
 800fb18:	b530      	push	{r4, r5, lr}
 800fb1a:	b08f      	sub	sp, #60	; 0x3c
 800fb1c:	2403      	movs	r4, #3
 800fb1e:	2500      	movs	r5, #0
 800fb20:	e9cd 4500 	strd	r4, r5, [sp]
 800fb24:	9202      	str	r2, [sp, #8]
 800fb26:	ab06      	add	r3, sp, #24
 800fb28:	2204      	movs	r2, #4
 800fb2a:	9103      	str	r1, [sp, #12]
 800fb2c:	4604      	mov	r4, r0
 800fb2e:	f001 fa85 	bl	801103c <uxr_prepare_stream_to_write_submessage>
 800fb32:	b918      	cbnz	r0, 800fb3c <uxr_buffer_delete_entity+0x24>
 800fb34:	4604      	mov	r4, r0
 800fb36:	4620      	mov	r0, r4
 800fb38:	b00f      	add	sp, #60	; 0x3c
 800fb3a:	bd30      	pop	{r4, r5, pc}
 800fb3c:	9902      	ldr	r1, [sp, #8]
 800fb3e:	aa05      	add	r2, sp, #20
 800fb40:	4620      	mov	r0, r4
 800fb42:	f001 fbb5 	bl	80112b0 <uxr_init_base_object_request>
 800fb46:	a905      	add	r1, sp, #20
 800fb48:	4604      	mov	r4, r0
 800fb4a:	a806      	add	r0, sp, #24
 800fb4c:	f002 fdf0 	bl	8012730 <uxr_serialize_DELETE_Payload>
 800fb50:	4620      	mov	r0, r4
 800fb52:	b00f      	add	sp, #60	; 0x3c
 800fb54:	bd30      	pop	{r4, r5, pc}
 800fb56:	bf00      	nop

0800fb58 <uxr_common_create_entity>:
 800fb58:	b530      	push	{r4, r5, lr}
 800fb5a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800fb5e:	b08d      	sub	sp, #52	; 0x34
 800fb60:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fb64:	2d01      	cmp	r5, #1
 800fb66:	bf0c      	ite	eq
 800fb68:	f003 0201 	andeq.w	r2, r3, #1
 800fb6c:	2200      	movne	r2, #0
 800fb6e:	330e      	adds	r3, #14
 800fb70:	4604      	mov	r4, r0
 800fb72:	441a      	add	r2, r3
 800fb74:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800fb78:	9001      	str	r0, [sp, #4]
 800fb7a:	2101      	movs	r1, #1
 800fb7c:	9100      	str	r1, [sp, #0]
 800fb7e:	b292      	uxth	r2, r2
 800fb80:	9903      	ldr	r1, [sp, #12]
 800fb82:	ab04      	add	r3, sp, #16
 800fb84:	4620      	mov	r0, r4
 800fb86:	f001 fa59 	bl	801103c <uxr_prepare_stream_to_write_submessage>
 800fb8a:	b918      	cbnz	r0, 800fb94 <uxr_common_create_entity+0x3c>
 800fb8c:	4604      	mov	r4, r0
 800fb8e:	4620      	mov	r0, r4
 800fb90:	b00d      	add	sp, #52	; 0x34
 800fb92:	bd30      	pop	{r4, r5, pc}
 800fb94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fb96:	9902      	ldr	r1, [sp, #8]
 800fb98:	4620      	mov	r0, r4
 800fb9a:	f001 fb89 	bl	80112b0 <uxr_init_base_object_request>
 800fb9e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fba0:	4604      	mov	r4, r0
 800fba2:	a804      	add	r0, sp, #16
 800fba4:	f002 fd18 	bl	80125d8 <uxr_serialize_CREATE_Payload>
 800fba8:	4620      	mov	r0, r4
 800fbaa:	b00d      	add	sp, #52	; 0x34
 800fbac:	bd30      	pop	{r4, r5, pc}
 800fbae:	bf00      	nop

0800fbb0 <uxr_buffer_create_participant_bin>:
 800fbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbb2:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800fbb6:	ac11      	add	r4, sp, #68	; 0x44
 800fbb8:	9103      	str	r1, [sp, #12]
 800fbba:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800fbbc:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800fbc0:	2103      	movs	r1, #3
 800fbc2:	7221      	strb	r1, [r4, #8]
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	2100      	movs	r1, #0
 800fbc8:	7123      	strb	r3, [r4, #4]
 800fbca:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800fbce:	9202      	str	r2, [sp, #8]
 800fbd0:	4605      	mov	r5, r0
 800fbd2:	f88d 1014 	strb.w	r1, [sp, #20]
 800fbd6:	b1ce      	cbz	r6, 800fc0c <uxr_buffer_create_participant_bin+0x5c>
 800fbd8:	f88d 301c 	strb.w	r3, [sp, #28]
 800fbdc:	9608      	str	r6, [sp, #32]
 800fbde:	a809      	add	r0, sp, #36	; 0x24
 800fbe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fbe4:	a915      	add	r1, sp, #84	; 0x54
 800fbe6:	f7ff ff27 	bl	800fa38 <ucdr_init_buffer>
 800fbea:	a905      	add	r1, sp, #20
 800fbec:	a809      	add	r0, sp, #36	; 0x24
 800fbee:	f002 f8bb 	bl	8011d68 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fbf2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fbf4:	9401      	str	r4, [sp, #4]
 800fbf6:	b283      	uxth	r3, r0
 800fbf8:	9700      	str	r7, [sp, #0]
 800fbfa:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fbfe:	60e0      	str	r0, [r4, #12]
 800fc00:	4628      	mov	r0, r5
 800fc02:	f7ff ffa9 	bl	800fb58 <uxr_common_create_entity>
 800fc06:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800fc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc0c:	f88d 601c 	strb.w	r6, [sp, #28]
 800fc10:	e7e5      	b.n	800fbde <uxr_buffer_create_participant_bin+0x2e>
 800fc12:	bf00      	nop

0800fc14 <uxr_buffer_create_topic_bin>:
 800fc14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc16:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800fc1a:	ac13      	add	r4, sp, #76	; 0x4c
 800fc1c:	4605      	mov	r5, r0
 800fc1e:	9105      	str	r1, [sp, #20]
 800fc20:	4618      	mov	r0, r3
 800fc22:	a997      	add	r1, sp, #604	; 0x25c
 800fc24:	2602      	movs	r6, #2
 800fc26:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc2a:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800fc2e:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800fc32:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800fc34:	f000 f994 	bl	800ff60 <uxr_object_id_to_raw>
 800fc38:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800fc3a:	9206      	str	r2, [sp, #24]
 800fc3c:	2303      	movs	r3, #3
 800fc3e:	2101      	movs	r1, #1
 800fc40:	7223      	strb	r3, [r4, #8]
 800fc42:	a80b      	add	r0, sp, #44	; 0x2c
 800fc44:	2300      	movs	r3, #0
 800fc46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc4a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800fc4e:	a917      	add	r1, sp, #92	; 0x5c
 800fc50:	f88d 301c 	strb.w	r3, [sp, #28]
 800fc54:	960a      	str	r6, [sp, #40]	; 0x28
 800fc56:	f7ff feef 	bl	800fa38 <ucdr_init_buffer>
 800fc5a:	a906      	add	r1, sp, #24
 800fc5c:	a80b      	add	r0, sp, #44	; 0x2c
 800fc5e:	f002 f8a5 	bl	8011dac <uxr_serialize_OBJK_Topic_Binary>
 800fc62:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800fc64:	9401      	str	r4, [sp, #4]
 800fc66:	9700      	str	r7, [sp, #0]
 800fc68:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fc6c:	4628      	mov	r0, r5
 800fc6e:	b2b3      	uxth	r3, r6
 800fc70:	60e6      	str	r6, [r4, #12]
 800fc72:	f7ff ff71 	bl	800fb58 <uxr_common_create_entity>
 800fc76:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800fc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc7c <uxr_buffer_create_publisher_bin>:
 800fc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc7e:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fc82:	ac0e      	add	r4, sp, #56	; 0x38
 800fc84:	4605      	mov	r5, r0
 800fc86:	9105      	str	r1, [sp, #20]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	2603      	movs	r6, #3
 800fc8c:	a992      	add	r1, sp, #584	; 0x248
 800fc8e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc92:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fc96:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fc9a:	f000 f961 	bl	800ff60 <uxr_object_id_to_raw>
 800fc9e:	2300      	movs	r3, #0
 800fca0:	a806      	add	r0, sp, #24
 800fca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fca6:	a912      	add	r1, sp, #72	; 0x48
 800fca8:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fcac:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fcb0:	7226      	strb	r6, [r4, #8]
 800fcb2:	f7ff fec1 	bl	800fa38 <ucdr_init_buffer>
 800fcb6:	a993      	add	r1, sp, #588	; 0x24c
 800fcb8:	a806      	add	r0, sp, #24
 800fcba:	f002 f92b 	bl	8011f14 <uxr_serialize_OBJK_Publisher_Binary>
 800fcbe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fcc0:	9700      	str	r7, [sp, #0]
 800fcc2:	9401      	str	r4, [sp, #4]
 800fcc4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fcc8:	4628      	mov	r0, r5
 800fcca:	b2b3      	uxth	r3, r6
 800fccc:	60e6      	str	r6, [r4, #12]
 800fcce:	f7ff ff43 	bl	800fb58 <uxr_common_create_entity>
 800fcd2:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fcd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fcd8 <uxr_buffer_create_subscriber_bin>:
 800fcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcda:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fcde:	ac0e      	add	r4, sp, #56	; 0x38
 800fce0:	4605      	mov	r5, r0
 800fce2:	9105      	str	r1, [sp, #20]
 800fce4:	4618      	mov	r0, r3
 800fce6:	a992      	add	r1, sp, #584	; 0x248
 800fce8:	2604      	movs	r6, #4
 800fcea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fcee:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fcf2:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fcf6:	f000 f933 	bl	800ff60 <uxr_object_id_to_raw>
 800fcfa:	2103      	movs	r1, #3
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	a806      	add	r0, sp, #24
 800fd00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd04:	7221      	strb	r1, [r4, #8]
 800fd06:	a912      	add	r1, sp, #72	; 0x48
 800fd08:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fd0c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fd10:	f7ff fe92 	bl	800fa38 <ucdr_init_buffer>
 800fd14:	a993      	add	r1, sp, #588	; 0x24c
 800fd16:	a806      	add	r0, sp, #24
 800fd18:	f002 f9ac 	bl	8012074 <uxr_serialize_OBJK_Subscriber_Binary>
 800fd1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fd1e:	9700      	str	r7, [sp, #0]
 800fd20:	9401      	str	r4, [sp, #4]
 800fd22:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd26:	4628      	mov	r0, r5
 800fd28:	b2b3      	uxth	r3, r6
 800fd2a:	60e6      	str	r6, [r4, #12]
 800fd2c:	f7ff ff14 	bl	800fb58 <uxr_common_create_entity>
 800fd30:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fd34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd36:	bf00      	nop

0800fd38 <uxr_buffer_create_datawriter_bin>:
 800fd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd3c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800fd40:	ac1d      	add	r4, sp, #116	; 0x74
 800fd42:	2505      	movs	r5, #5
 800fd44:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fd48:	9105      	str	r1, [sp, #20]
 800fd4a:	4606      	mov	r6, r0
 800fd4c:	a9a1      	add	r1, sp, #644	; 0x284
 800fd4e:	4618      	mov	r0, r3
 800fd50:	7125      	strb	r5, [r4, #4]
 800fd52:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800fd56:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800fd5a:	2703      	movs	r7, #3
 800fd5c:	f000 f900 	bl	800ff60 <uxr_object_id_to_raw>
 800fd60:	a90e      	add	r1, sp, #56	; 0x38
 800fd62:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800fd64:	7227      	strb	r7, [r4, #8]
 800fd66:	f000 f8fb 	bl	800ff60 <uxr_object_id_to_raw>
 800fd6a:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800fd6e:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 800fd72:	3d00      	subs	r5, #0
 800fd74:	f04f 0300 	mov.w	r3, #0
 800fd78:	bf18      	it	ne
 800fd7a:	2501      	movne	r5, #1
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800fd82:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fd86:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fd8a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800fd8e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fd92:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fd96:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fd9a:	bb89      	cbnz	r1, 800fe00 <uxr_buffer_create_datawriter_bin+0xc8>
 800fd9c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fda0:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800fda4:	f04f 0c13 	mov.w	ip, #19
 800fda8:	250b      	movs	r5, #11
 800fdaa:	2221      	movs	r2, #33	; 0x21
 800fdac:	2111      	movs	r1, #17
 800fdae:	2009      	movs	r0, #9
 800fdb0:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800fdb4:	b923      	cbnz	r3, 800fdc0 <uxr_buffer_create_datawriter_bin+0x88>
 800fdb6:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800fdba:	4672      	mov	r2, lr
 800fdbc:	4661      	mov	r1, ip
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d025      	beq.n	800fe14 <uxr_buffer_create_datawriter_bin+0xdc>
 800fdc8:	2b03      	cmp	r3, #3
 800fdca:	d029      	beq.n	800fe20 <uxr_buffer_create_datawriter_bin+0xe8>
 800fdcc:	b32b      	cbz	r3, 800fe1a <uxr_buffer_create_datawriter_bin+0xe2>
 800fdce:	a806      	add	r0, sp, #24
 800fdd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fdd4:	a921      	add	r1, sp, #132	; 0x84
 800fdd6:	f7ff fe2f 	bl	800fa38 <ucdr_init_buffer>
 800fdda:	a90e      	add	r1, sp, #56	; 0x38
 800fddc:	a806      	add	r0, sp, #24
 800fdde:	f002 f9fb 	bl	80121d8 <uxr_serialize_OBJK_DataWriter_Binary>
 800fde2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fde4:	9401      	str	r4, [sp, #4]
 800fde6:	b283      	uxth	r3, r0
 800fde8:	f8cd 8000 	str.w	r8, [sp]
 800fdec:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fdf0:	60e0      	str	r0, [r4, #12]
 800fdf2:	4630      	mov	r0, r6
 800fdf4:	f7ff feb0 	bl	800fb58 <uxr_common_create_entity>
 800fdf8:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe00:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800fe04:	f04f 0c12 	mov.w	ip, #18
 800fe08:	250a      	movs	r5, #10
 800fe0a:	2220      	movs	r2, #32
 800fe0c:	2110      	movs	r1, #16
 800fe0e:	2008      	movs	r0, #8
 800fe10:	2702      	movs	r7, #2
 800fe12:	e7cd      	b.n	800fdb0 <uxr_buffer_create_datawriter_bin+0x78>
 800fe14:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800fe18:	e7d9      	b.n	800fdce <uxr_buffer_create_datawriter_bin+0x96>
 800fe1a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800fe1e:	e7d6      	b.n	800fdce <uxr_buffer_create_datawriter_bin+0x96>
 800fe20:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fe24:	e7d3      	b.n	800fdce <uxr_buffer_create_datawriter_bin+0x96>
 800fe26:	bf00      	nop

0800fe28 <uxr_buffer_create_datareader_bin>:
 800fe28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe2c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800fe30:	ac1f      	add	r4, sp, #124	; 0x7c
 800fe32:	2506      	movs	r5, #6
 800fe34:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fe38:	9105      	str	r1, [sp, #20]
 800fe3a:	4606      	mov	r6, r0
 800fe3c:	a9a3      	add	r1, sp, #652	; 0x28c
 800fe3e:	4618      	mov	r0, r3
 800fe40:	7125      	strb	r5, [r4, #4]
 800fe42:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800fe46:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800fe4a:	2703      	movs	r7, #3
 800fe4c:	f000 f888 	bl	800ff60 <uxr_object_id_to_raw>
 800fe50:	a90e      	add	r1, sp, #56	; 0x38
 800fe52:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800fe54:	7227      	strb	r7, [r4, #8]
 800fe56:	f000 f883 	bl	800ff60 <uxr_object_id_to_raw>
 800fe5a:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800fe5e:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 800fe62:	3d00      	subs	r5, #0
 800fe64:	f04f 0300 	mov.w	r3, #0
 800fe68:	bf18      	it	ne
 800fe6a:	2501      	movne	r5, #1
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800fe72:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fe76:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800fe7a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fe7e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800fe82:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fe86:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fe8a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fe8e:	bb89      	cbnz	r1, 800fef4 <uxr_buffer_create_datareader_bin+0xcc>
 800fe90:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fe94:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800fe98:	f04f 0c13 	mov.w	ip, #19
 800fe9c:	250b      	movs	r5, #11
 800fe9e:	2221      	movs	r2, #33	; 0x21
 800fea0:	2111      	movs	r1, #17
 800fea2:	2009      	movs	r0, #9
 800fea4:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800fea8:	b923      	cbnz	r3, 800feb4 <uxr_buffer_create_datareader_bin+0x8c>
 800feaa:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800feae:	4672      	mov	r2, lr
 800feb0:	4661      	mov	r1, ip
 800feb2:	4628      	mov	r0, r5
 800feb4:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d025      	beq.n	800ff08 <uxr_buffer_create_datareader_bin+0xe0>
 800febc:	2b03      	cmp	r3, #3
 800febe:	d029      	beq.n	800ff14 <uxr_buffer_create_datareader_bin+0xec>
 800fec0:	b32b      	cbz	r3, 800ff0e <uxr_buffer_create_datareader_bin+0xe6>
 800fec2:	a806      	add	r0, sp, #24
 800fec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fec8:	a923      	add	r1, sp, #140	; 0x8c
 800feca:	f7ff fdb5 	bl	800fa38 <ucdr_init_buffer>
 800fece:	a90e      	add	r1, sp, #56	; 0x38
 800fed0:	a806      	add	r0, sp, #24
 800fed2:	f002 f945 	bl	8012160 <uxr_serialize_OBJK_DataReader_Binary>
 800fed6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fed8:	9401      	str	r4, [sp, #4]
 800feda:	b283      	uxth	r3, r0
 800fedc:	f8cd 8000 	str.w	r8, [sp]
 800fee0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fee4:	60e0      	str	r0, [r4, #12]
 800fee6:	4630      	mov	r0, r6
 800fee8:	f7ff fe36 	bl	800fb58 <uxr_common_create_entity>
 800feec:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800fef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fef4:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800fef8:	f04f 0c12 	mov.w	ip, #18
 800fefc:	250a      	movs	r5, #10
 800fefe:	2220      	movs	r2, #32
 800ff00:	2110      	movs	r1, #16
 800ff02:	2008      	movs	r0, #8
 800ff04:	2702      	movs	r7, #2
 800ff06:	e7cd      	b.n	800fea4 <uxr_buffer_create_datareader_bin+0x7c>
 800ff08:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800ff0c:	e7d9      	b.n	800fec2 <uxr_buffer_create_datareader_bin+0x9a>
 800ff0e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800ff12:	e7d6      	b.n	800fec2 <uxr_buffer_create_datareader_bin+0x9a>
 800ff14:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ff18:	e7d3      	b.n	800fec2 <uxr_buffer_create_datareader_bin+0x9a>
 800ff1a:	bf00      	nop

0800ff1c <uxr_object_id>:
 800ff1c:	b082      	sub	sp, #8
 800ff1e:	2300      	movs	r3, #0
 800ff20:	f88d 1006 	strb.w	r1, [sp, #6]
 800ff24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ff28:	f360 030f 	bfi	r3, r0, #0, #16
 800ff2c:	f362 431f 	bfi	r3, r2, #16, #16
 800ff30:	4618      	mov	r0, r3
 800ff32:	b002      	add	sp, #8
 800ff34:	4770      	bx	lr
 800ff36:	bf00      	nop

0800ff38 <uxr_object_id_from_raw>:
 800ff38:	7843      	ldrb	r3, [r0, #1]
 800ff3a:	7801      	ldrb	r1, [r0, #0]
 800ff3c:	b082      	sub	sp, #8
 800ff3e:	f003 000f 	and.w	r0, r3, #15
 800ff42:	f88d 0006 	strb.w	r0, [sp, #6]
 800ff46:	091b      	lsrs	r3, r3, #4
 800ff48:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800ff52:	f363 020f 	bfi	r2, r3, #0, #16
 800ff56:	f361 421f 	bfi	r2, r1, #16, #16
 800ff5a:	4610      	mov	r0, r2
 800ff5c:	b002      	add	sp, #8
 800ff5e:	4770      	bx	lr

0800ff60 <uxr_object_id_to_raw>:
 800ff60:	4602      	mov	r2, r0
 800ff62:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ff66:	b082      	sub	sp, #8
 800ff68:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800ff6c:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800ff70:	700a      	strb	r2, [r1, #0]
 800ff72:	704b      	strb	r3, [r1, #1]
 800ff74:	b002      	add	sp, #8
 800ff76:	4770      	bx	lr

0800ff78 <uxr_buffer_request_data>:
 800ff78:	b530      	push	{r4, r5, lr}
 800ff7a:	b095      	sub	sp, #84	; 0x54
 800ff7c:	4604      	mov	r4, r0
 800ff7e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ff80:	9105      	str	r1, [sp, #20]
 800ff82:	2d00      	cmp	r5, #0
 800ff84:	bf14      	ite	ne
 800ff86:	2101      	movne	r1, #1
 800ff88:	2100      	moveq	r1, #0
 800ff8a:	9204      	str	r2, [sp, #16]
 800ff8c:	f04f 0200 	mov.w	r2, #0
 800ff90:	9303      	str	r3, [sp, #12]
 800ff92:	f88d 301c 	strb.w	r3, [sp, #28]
 800ff96:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800ff9a:	f88d 201d 	strb.w	r2, [sp, #29]
 800ff9e:	f88d 201e 	strb.w	r2, [sp, #30]
 800ffa2:	d021      	beq.n	800ffe8 <uxr_buffer_request_data+0x70>
 800ffa4:	686a      	ldr	r2, [r5, #4]
 800ffa6:	682b      	ldr	r3, [r5, #0]
 800ffa8:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800ffac:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800ffb0:	2210      	movs	r2, #16
 800ffb2:	2000      	movs	r0, #0
 800ffb4:	2108      	movs	r1, #8
 800ffb6:	e9cd 1000 	strd	r1, r0, [sp]
 800ffba:	ab0c      	add	r3, sp, #48	; 0x30
 800ffbc:	9905      	ldr	r1, [sp, #20]
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	f001 f83c 	bl	801103c <uxr_prepare_stream_to_write_submessage>
 800ffc4:	b918      	cbnz	r0, 800ffce <uxr_buffer_request_data+0x56>
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	4620      	mov	r0, r4
 800ffca:	b015      	add	sp, #84	; 0x54
 800ffcc:	bd30      	pop	{r4, r5, pc}
 800ffce:	9904      	ldr	r1, [sp, #16]
 800ffd0:	aa06      	add	r2, sp, #24
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	f001 f96c 	bl	80112b0 <uxr_init_base_object_request>
 800ffd8:	a906      	add	r1, sp, #24
 800ffda:	4604      	mov	r4, r0
 800ffdc:	a80c      	add	r0, sp, #48	; 0x30
 800ffde:	f002 fc51 	bl	8012884 <uxr_serialize_READ_DATA_Payload>
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	b015      	add	sp, #84	; 0x54
 800ffe6:	bd30      	pop	{r4, r5, pc}
 800ffe8:	2208      	movs	r2, #8
 800ffea:	e7e2      	b.n	800ffb2 <uxr_buffer_request_data+0x3a>

0800ffec <uxr_buffer_cancel_data>:
 800ffec:	b530      	push	{r4, r5, lr}
 800ffee:	b095      	sub	sp, #84	; 0x54
 800fff0:	2400      	movs	r4, #0
 800fff2:	2308      	movs	r3, #8
 800fff4:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800fff8:	9300      	str	r3, [sp, #0]
 800fffa:	9205      	str	r2, [sp, #20]
 800fffc:	2501      	movs	r5, #1
 800fffe:	ab0c      	add	r3, sp, #48	; 0x30
 8010000:	2210      	movs	r2, #16
 8010002:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010006:	f88d 401e 	strb.w	r4, [sp, #30]
 801000a:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 801000e:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 8010012:	9103      	str	r1, [sp, #12]
 8010014:	4604      	mov	r4, r0
 8010016:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801001a:	f001 f80f 	bl	801103c <uxr_prepare_stream_to_write_submessage>
 801001e:	b918      	cbnz	r0, 8010028 <uxr_buffer_cancel_data+0x3c>
 8010020:	4604      	mov	r4, r0
 8010022:	4620      	mov	r0, r4
 8010024:	b015      	add	sp, #84	; 0x54
 8010026:	bd30      	pop	{r4, r5, pc}
 8010028:	9905      	ldr	r1, [sp, #20]
 801002a:	aa06      	add	r2, sp, #24
 801002c:	4620      	mov	r0, r4
 801002e:	f001 f93f 	bl	80112b0 <uxr_init_base_object_request>
 8010032:	a906      	add	r1, sp, #24
 8010034:	4604      	mov	r4, r0
 8010036:	a80c      	add	r0, sp, #48	; 0x30
 8010038:	f002 fc24 	bl	8012884 <uxr_serialize_READ_DATA_Payload>
 801003c:	4620      	mov	r0, r4
 801003e:	b015      	add	sp, #84	; 0x54
 8010040:	bd30      	pop	{r4, r5, pc}
 8010042:	bf00      	nop

08010044 <read_submessage_format>:
 8010044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010048:	b095      	sub	sp, #84	; 0x54
 801004a:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 801004e:	b113      	cbz	r3, 8010056 <read_submessage_format+0x12>
 8010050:	b015      	add	sp, #84	; 0x54
 8010052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010056:	460c      	mov	r4, r1
 8010058:	4616      	mov	r6, r2
 801005a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801005e:	461d      	mov	r5, r3
 8010060:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010062:	9304      	str	r3, [sp, #16]
 8010064:	1a52      	subs	r2, r2, r1
 8010066:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010068:	9305      	str	r3, [sp, #20]
 801006a:	4607      	mov	r7, r0
 801006c:	a80c      	add	r0, sp, #48	; 0x30
 801006e:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8010072:	f7ff fce1 	bl	800fa38 <ucdr_init_buffer>
 8010076:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801007a:	a80c      	add	r0, sp, #48	; 0x30
 801007c:	f7ff fcb2 	bl	800f9e4 <ucdr_set_on_full_buffer_callback>
 8010080:	69e3      	ldr	r3, [r4, #28]
 8010082:	b193      	cbz	r3, 80100aa <read_submessage_format+0x66>
 8010084:	f1b8 0f07 	cmp.w	r8, #7
 8010088:	751d      	strb	r5, [r3, #20]
 801008a:	d03e      	beq.n	801010a <read_submessage_format+0xc6>
 801008c:	f1b8 0f08 	cmp.w	r8, #8
 8010090:	d02c      	beq.n	80100ec <read_submessage_format+0xa8>
 8010092:	f1b8 0f06 	cmp.w	r8, #6
 8010096:	d011      	beq.n	80100bc <read_submessage_format+0x78>
 8010098:	2201      	movs	r2, #1
 801009a:	751a      	strb	r2, [r3, #20]
 801009c:	4631      	mov	r1, r6
 801009e:	4620      	mov	r0, r4
 80100a0:	f7ff fd1a 	bl	800fad8 <ucdr_advance_buffer>
 80100a4:	b015      	add	sp, #84	; 0x54
 80100a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100aa:	f1b8 0f07 	cmp.w	r8, #7
 80100ae:	d02c      	beq.n	801010a <read_submessage_format+0xc6>
 80100b0:	f1b8 0f08 	cmp.w	r8, #8
 80100b4:	d01a      	beq.n	80100ec <read_submessage_format+0xa8>
 80100b6:	f1b8 0f06 	cmp.w	r8, #6
 80100ba:	d1ef      	bne.n	801009c <read_submessage_format+0x58>
 80100bc:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 80100c0:	b18d      	cbz	r5, 80100e6 <read_submessage_format+0xa2>
 80100c2:	2306      	movs	r3, #6
 80100c4:	f88d 3016 	strb.w	r3, [sp, #22]
 80100c8:	aa0c      	add	r2, sp, #48	; 0x30
 80100ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80100ce:	9302      	str	r3, [sp, #8]
 80100d0:	9200      	str	r2, [sp, #0]
 80100d2:	9b04      	ldr	r3, [sp, #16]
 80100d4:	9905      	ldr	r1, [sp, #20]
 80100d6:	9601      	str	r6, [sp, #4]
 80100d8:	464a      	mov	r2, r9
 80100da:	4638      	mov	r0, r7
 80100dc:	47a8      	blx	r5
 80100de:	2301      	movs	r3, #1
 80100e0:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80100e4:	69e3      	ldr	r3, [r4, #28]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d1d6      	bne.n	8010098 <read_submessage_format+0x54>
 80100ea:	e7d7      	b.n	801009c <read_submessage_format+0x58>
 80100ec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80100f0:	2a00      	cmp	r2, #0
 80100f2:	d0f8      	beq.n	80100e6 <read_submessage_format+0xa2>
 80100f4:	a906      	add	r1, sp, #24
 80100f6:	a80c      	add	r0, sp, #48	; 0x30
 80100f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80100fa:	f002 fc89 	bl	8012a10 <uxr_deserialize_SampleIdentity>
 80100fe:	2800      	cmp	r0, #0
 8010100:	d13c      	bne.n	801017c <read_submessage_format+0x138>
 8010102:	69e3      	ldr	r3, [r4, #28]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1c7      	bne.n	8010098 <read_submessage_format+0x54>
 8010108:	e7c8      	b.n	801009c <read_submessage_format+0x58>
 801010a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801010e:	b132      	cbz	r2, 801011e <read_submessage_format+0xda>
 8010110:	a906      	add	r1, sp, #24
 8010112:	a80c      	add	r0, sp, #48	; 0x30
 8010114:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010116:	f002 f939 	bl	801238c <uxr_deserialize_BaseObjectRequest>
 801011a:	b930      	cbnz	r0, 801012a <read_submessage_format+0xe6>
 801011c:	69e3      	ldr	r3, [r4, #28]
 801011e:	68a2      	ldr	r2, [r4, #8]
 8010120:	4432      	add	r2, r6
 8010122:	60a2      	str	r2, [r4, #8]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d1b7      	bne.n	8010098 <read_submessage_format+0x54>
 8010128:	e7b8      	b.n	801009c <read_submessage_format+0x58>
 801012a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801012e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010130:	1a52      	subs	r2, r2, r1
 8010132:	a80c      	add	r0, sp, #48	; 0x30
 8010134:	1aed      	subs	r5, r5, r3
 8010136:	f7ff fc7f 	bl	800fa38 <ucdr_init_buffer>
 801013a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801013e:	a80c      	add	r0, sp, #48	; 0x30
 8010140:	f7ff fc50 	bl	800f9e4 <ucdr_set_on_full_buffer_callback>
 8010144:	4435      	add	r5, r6
 8010146:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801014a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801014e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8010152:	9002      	str	r0, [sp, #8]
 8010154:	2207      	movs	r2, #7
 8010156:	f88d 2016 	strb.w	r2, [sp, #22]
 801015a:	b2ad      	uxth	r5, r5
 801015c:	aa0c      	add	r2, sp, #48	; 0x30
 801015e:	9200      	str	r2, [sp, #0]
 8010160:	9501      	str	r5, [sp, #4]
 8010162:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010166:	b29b      	uxth	r3, r3
 8010168:	9905      	ldr	r1, [sp, #20]
 801016a:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 801016e:	464a      	mov	r2, r9
 8010170:	4638      	mov	r0, r7
 8010172:	47a8      	blx	r5
 8010174:	2301      	movs	r3, #1
 8010176:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 801017a:	e7cf      	b.n	801011c <read_submessage_format+0xd8>
 801017c:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8010180:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010182:	1a52      	subs	r2, r2, r1
 8010184:	a80c      	add	r0, sp, #48	; 0x30
 8010186:	1aed      	subs	r5, r5, r3
 8010188:	f7ff fc56 	bl	800fa38 <ucdr_init_buffer>
 801018c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010190:	a80c      	add	r0, sp, #48	; 0x30
 8010192:	f7ff fc27 	bl	800f9e4 <ucdr_set_on_full_buffer_callback>
 8010196:	4435      	add	r5, r6
 8010198:	2308      	movs	r3, #8
 801019a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 801019e:	f88d 3016 	strb.w	r3, [sp, #22]
 80101a2:	b2ad      	uxth	r5, r5
 80101a4:	ab0c      	add	r3, sp, #48	; 0x30
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	9002      	str	r0, [sp, #8]
 80101aa:	9501      	str	r5, [sp, #4]
 80101ac:	ab06      	add	r3, sp, #24
 80101ae:	9905      	ldr	r1, [sp, #20]
 80101b0:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 80101b4:	464a      	mov	r2, r9
 80101b6:	4638      	mov	r0, r7
 80101b8:	47a8      	blx	r5
 80101ba:	2301      	movs	r3, #1
 80101bc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80101c0:	e79f      	b.n	8010102 <read_submessage_format+0xbe>
 80101c2:	bf00      	nop

080101c4 <on_get_fragmentation_info>:
 80101c4:	b500      	push	{lr}
 80101c6:	b08b      	sub	sp, #44	; 0x2c
 80101c8:	4601      	mov	r1, r0
 80101ca:	2204      	movs	r2, #4
 80101cc:	a802      	add	r0, sp, #8
 80101ce:	f7ff fc33 	bl	800fa38 <ucdr_init_buffer>
 80101d2:	f10d 0305 	add.w	r3, sp, #5
 80101d6:	a802      	add	r0, sp, #8
 80101d8:	f10d 0206 	add.w	r2, sp, #6
 80101dc:	a901      	add	r1, sp, #4
 80101de:	f001 f9eb 	bl	80115b8 <uxr_read_submessage_header>
 80101e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80101e6:	2b0d      	cmp	r3, #13
 80101e8:	d003      	beq.n	80101f2 <on_get_fragmentation_info+0x2e>
 80101ea:	2000      	movs	r0, #0
 80101ec:	b00b      	add	sp, #44	; 0x2c
 80101ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80101f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80101f6:	f013 0f02 	tst.w	r3, #2
 80101fa:	bf14      	ite	ne
 80101fc:	2002      	movne	r0, #2
 80101fe:	2001      	moveq	r0, #1
 8010200:	b00b      	add	sp, #44	; 0x2c
 8010202:	f85d fb04 	ldr.w	pc, [sp], #4
 8010206:	bf00      	nop

08010208 <read_submessage_get_info>:
 8010208:	b570      	push	{r4, r5, r6, lr}
 801020a:	2500      	movs	r5, #0
 801020c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8010210:	4604      	mov	r4, r0
 8010212:	f44f 7224 	mov.w	r2, #656	; 0x290
 8010216:	460e      	mov	r6, r1
 8010218:	a810      	add	r0, sp, #64	; 0x40
 801021a:	4629      	mov	r1, r5
 801021c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010220:	f008 fa02 	bl	8018628 <memset>
 8010224:	a903      	add	r1, sp, #12
 8010226:	4630      	mov	r0, r6
 8010228:	f002 fa6e 	bl	8012708 <uxr_deserialize_GET_INFO_Payload>
 801022c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010230:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010234:	4620      	mov	r0, r4
 8010236:	f001 f833 	bl	80112a0 <uxr_session_header_offset>
 801023a:	462b      	mov	r3, r5
 801023c:	9000      	str	r0, [sp, #0]
 801023e:	a905      	add	r1, sp, #20
 8010240:	a808      	add	r0, sp, #32
 8010242:	220c      	movs	r2, #12
 8010244:	f7ff fbe6 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 8010248:	a910      	add	r1, sp, #64	; 0x40
 801024a:	a808      	add	r0, sp, #32
 801024c:	f002 face 	bl	80127ec <uxr_serialize_INFO_Payload>
 8010250:	9b08      	ldr	r3, [sp, #32]
 8010252:	462a      	mov	r2, r5
 8010254:	4629      	mov	r1, r5
 8010256:	4620      	mov	r0, r4
 8010258:	f000 ffca 	bl	80111f0 <uxr_stamp_session_header>
 801025c:	a808      	add	r0, sp, #32
 801025e:	f7ff fc17 	bl	800fa90 <ucdr_buffer_length>
 8010262:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010264:	4602      	mov	r2, r0
 8010266:	a905      	add	r1, sp, #20
 8010268:	e9d3 0400 	ldrd	r0, r4, [r3]
 801026c:	47a0      	blx	r4
 801026e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8010272:	bd70      	pop	{r4, r5, r6, pc}

08010274 <write_submessage_acknack.isra.0>:
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	b092      	sub	sp, #72	; 0x48
 8010278:	4605      	mov	r5, r0
 801027a:	460e      	mov	r6, r1
 801027c:	4614      	mov	r4, r2
 801027e:	f001 f80f 	bl	80112a0 <uxr_session_header_offset>
 8010282:	a905      	add	r1, sp, #20
 8010284:	9000      	str	r0, [sp, #0]
 8010286:	2300      	movs	r3, #0
 8010288:	a80a      	add	r0, sp, #40	; 0x28
 801028a:	2211      	movs	r2, #17
 801028c:	f7ff fbc2 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 8010290:	2218      	movs	r2, #24
 8010292:	fb02 5404 	mla	r4, r2, r4, r5
 8010296:	2300      	movs	r3, #0
 8010298:	2205      	movs	r2, #5
 801029a:	3450      	adds	r4, #80	; 0x50
 801029c:	a80a      	add	r0, sp, #40	; 0x28
 801029e:	210a      	movs	r1, #10
 80102a0:	f001 f970 	bl	8011584 <uxr_buffer_submessage_header>
 80102a4:	a903      	add	r1, sp, #12
 80102a6:	4620      	mov	r0, r4
 80102a8:	f006 fa84 	bl	80167b4 <uxr_compute_acknack>
 80102ac:	a903      	add	r1, sp, #12
 80102ae:	ba43      	rev16	r3, r0
 80102b0:	a80a      	add	r0, sp, #40	; 0x28
 80102b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80102b6:	f88d 6010 	strb.w	r6, [sp, #16]
 80102ba:	f002 fb07 	bl	80128cc <uxr_serialize_ACKNACK_Payload>
 80102be:	2200      	movs	r2, #0
 80102c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102c2:	4611      	mov	r1, r2
 80102c4:	4628      	mov	r0, r5
 80102c6:	f000 ff93 	bl	80111f0 <uxr_stamp_session_header>
 80102ca:	a80a      	add	r0, sp, #40	; 0x28
 80102cc:	f7ff fbe0 	bl	800fa90 <ucdr_buffer_length>
 80102d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80102d2:	4602      	mov	r2, r0
 80102d4:	a905      	add	r1, sp, #20
 80102d6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80102da:	47a0      	blx	r4
 80102dc:	b012      	add	sp, #72	; 0x48
 80102de:	bd70      	pop	{r4, r5, r6, pc}

080102e0 <uxr_init_session>:
 80102e0:	b5d0      	push	{r4, r6, r7, lr}
 80102e2:	2300      	movs	r3, #0
 80102e4:	2600      	movs	r6, #0
 80102e6:	2700      	movs	r7, #0
 80102e8:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 80102ec:	4604      	mov	r4, r0
 80102ee:	6701      	str	r1, [r0, #112]	; 0x70
 80102f0:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 80102f4:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 80102f8:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 80102fc:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8010300:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8010304:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8010308:	2181      	movs	r1, #129	; 0x81
 801030a:	f000 fedb 	bl	80110c4 <uxr_init_session_info>
 801030e:	f104 0008 	add.w	r0, r4, #8
 8010312:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8010316:	f001 b851 	b.w	80113bc <uxr_init_stream_storage>
 801031a:	bf00      	nop

0801031c <uxr_set_status_callback>:
 801031c:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop

08010324 <uxr_set_topic_callback>:
 8010324:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8010328:	4770      	bx	lr
 801032a:	bf00      	nop

0801032c <uxr_set_request_callback>:
 801032c:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8010330:	4770      	bx	lr
 8010332:	bf00      	nop

08010334 <uxr_set_reply_callback>:
 8010334:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8010338:	4770      	bx	lr
 801033a:	bf00      	nop

0801033c <uxr_create_output_best_effort_stream>:
 801033c:	b510      	push	{r4, lr}
 801033e:	b084      	sub	sp, #16
 8010340:	e9cd 2100 	strd	r2, r1, [sp]
 8010344:	4604      	mov	r4, r0
 8010346:	f000 ffab 	bl	80112a0 <uxr_session_header_offset>
 801034a:	e9dd 2100 	ldrd	r2, r1, [sp]
 801034e:	4603      	mov	r3, r0
 8010350:	f104 0008 	add.w	r0, r4, #8
 8010354:	b004      	add	sp, #16
 8010356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801035a:	f001 b879 	b.w	8011450 <uxr_add_output_best_effort_buffer>
 801035e:	bf00      	nop

08010360 <uxr_create_output_reliable_stream>:
 8010360:	b530      	push	{r4, r5, lr}
 8010362:	b089      	sub	sp, #36	; 0x24
 8010364:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010368:	9303      	str	r3, [sp, #12]
 801036a:	4604      	mov	r4, r0
 801036c:	f000 ff98 	bl	80112a0 <uxr_session_header_offset>
 8010370:	4605      	mov	r5, r0
 8010372:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010376:	9905      	ldr	r1, [sp, #20]
 8010378:	9500      	str	r5, [sp, #0]
 801037a:	f104 0008 	add.w	r0, r4, #8
 801037e:	f001 f879 	bl	8011474 <uxr_add_output_reliable_buffer>
 8010382:	2200      	movs	r2, #0
 8010384:	b2c3      	uxtb	r3, r0
 8010386:	f363 0207 	bfi	r2, r3, #0, #8
 801038a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801038e:	f363 220f 	bfi	r2, r3, #8, #8
 8010392:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010396:	f363 4217 	bfi	r2, r3, #16, #8
 801039a:	0e03      	lsrs	r3, r0, #24
 801039c:	f363 621f 	bfi	r2, r3, #24, #8
 80103a0:	4610      	mov	r0, r2
 80103a2:	b009      	add	sp, #36	; 0x24
 80103a4:	bd30      	pop	{r4, r5, pc}
 80103a6:	bf00      	nop

080103a8 <uxr_create_input_best_effort_stream>:
 80103a8:	b082      	sub	sp, #8
 80103aa:	3008      	adds	r0, #8
 80103ac:	b002      	add	sp, #8
 80103ae:	f001 b87b 	b.w	80114a8 <uxr_add_input_best_effort_buffer>
 80103b2:	bf00      	nop

080103b4 <uxr_create_input_reliable_stream>:
 80103b4:	b510      	push	{r4, lr}
 80103b6:	b084      	sub	sp, #16
 80103b8:	4c0b      	ldr	r4, [pc, #44]	; (80103e8 <uxr_create_input_reliable_stream+0x34>)
 80103ba:	9400      	str	r4, [sp, #0]
 80103bc:	3008      	adds	r0, #8
 80103be:	f001 f889 	bl	80114d4 <uxr_add_input_reliable_buffer>
 80103c2:	2200      	movs	r2, #0
 80103c4:	b2c3      	uxtb	r3, r0
 80103c6:	f363 0207 	bfi	r2, r3, #0, #8
 80103ca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80103ce:	f363 220f 	bfi	r2, r3, #8, #8
 80103d2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80103d6:	f363 4217 	bfi	r2, r3, #16, #8
 80103da:	0e03      	lsrs	r3, r0, #24
 80103dc:	f363 621f 	bfi	r2, r3, #24, #8
 80103e0:	4610      	mov	r0, r2
 80103e2:	b004      	add	sp, #16
 80103e4:	bd10      	pop	{r4, pc}
 80103e6:	bf00      	nop
 80103e8:	080101c5 	.word	0x080101c5

080103ec <uxr_epoch_nanos>:
 80103ec:	b510      	push	{r4, lr}
 80103ee:	4604      	mov	r4, r0
 80103f0:	f001 f92a 	bl	8011648 <uxr_nanos>
 80103f4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80103f8:	1ac0      	subs	r0, r0, r3
 80103fa:	eb61 0102 	sbc.w	r1, r1, r2
 80103fe:	bd10      	pop	{r4, pc}

08010400 <uxr_flash_output_streams>:
 8010400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010404:	7e03      	ldrb	r3, [r0, #24]
 8010406:	b084      	sub	sp, #16
 8010408:	4604      	mov	r4, r0
 801040a:	b1fb      	cbz	r3, 801044c <uxr_flash_output_streams+0x4c>
 801040c:	f04f 0900 	mov.w	r9, #0
 8010410:	4648      	mov	r0, r9
 8010412:	f10d 0802 	add.w	r8, sp, #2
 8010416:	af03      	add	r7, sp, #12
 8010418:	ae02      	add	r6, sp, #8
 801041a:	2201      	movs	r2, #1
 801041c:	4611      	mov	r1, r2
 801041e:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010422:	f000 ff75 	bl	8011310 <uxr_stream_id>
 8010426:	3508      	adds	r5, #8
 8010428:	4684      	mov	ip, r0
 801042a:	4643      	mov	r3, r8
 801042c:	4628      	mov	r0, r5
 801042e:	463a      	mov	r2, r7
 8010430:	4631      	mov	r1, r6
 8010432:	f8cd c004 	str.w	ip, [sp, #4]
 8010436:	f006 fa45 	bl	80168c4 <uxr_prepare_best_effort_buffer_to_send>
 801043a:	2800      	cmp	r0, #0
 801043c:	d13d      	bne.n	80104ba <uxr_flash_output_streams+0xba>
 801043e:	7e23      	ldrb	r3, [r4, #24]
 8010440:	f109 0901 	add.w	r9, r9, #1
 8010444:	fa5f f089 	uxtb.w	r0, r9
 8010448:	4283      	cmp	r3, r0
 801044a:	d8e6      	bhi.n	801041a <uxr_flash_output_streams+0x1a>
 801044c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010450:	b383      	cbz	r3, 80104b4 <uxr_flash_output_streams+0xb4>
 8010452:	f04f 0900 	mov.w	r9, #0
 8010456:	4648      	mov	r0, r9
 8010458:	f10d 0802 	add.w	r8, sp, #2
 801045c:	af03      	add	r7, sp, #12
 801045e:	ae02      	add	r6, sp, #8
 8010460:	2201      	movs	r2, #1
 8010462:	2102      	movs	r1, #2
 8010464:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010468:	f000 ff52 	bl	8011310 <uxr_stream_id>
 801046c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010470:	3520      	adds	r5, #32
 8010472:	9001      	str	r0, [sp, #4]
 8010474:	e00c      	b.n	8010490 <uxr_flash_output_streams+0x90>
 8010476:	9b02      	ldr	r3, [sp, #8]
 8010478:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801047c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010480:	f000 feb6 	bl	80111f0 <uxr_stamp_session_header>
 8010484:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010486:	9a03      	ldr	r2, [sp, #12]
 8010488:	9902      	ldr	r1, [sp, #8]
 801048a:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801048e:	47d0      	blx	sl
 8010490:	4643      	mov	r3, r8
 8010492:	463a      	mov	r2, r7
 8010494:	4631      	mov	r1, r6
 8010496:	4628      	mov	r0, r5
 8010498:	f006 fc1c 	bl	8016cd4 <uxr_prepare_next_reliable_buffer_to_send>
 801049c:	4603      	mov	r3, r0
 801049e:	4620      	mov	r0, r4
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d1e8      	bne.n	8010476 <uxr_flash_output_streams+0x76>
 80104a4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80104a8:	f109 0901 	add.w	r9, r9, #1
 80104ac:	fa5f f089 	uxtb.w	r0, r9
 80104b0:	4283      	cmp	r3, r0
 80104b2:	d8d5      	bhi.n	8010460 <uxr_flash_output_streams+0x60>
 80104b4:	b004      	add	sp, #16
 80104b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ba:	9b02      	ldr	r3, [sp, #8]
 80104bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80104c0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80104c4:	4620      	mov	r0, r4
 80104c6:	f000 fe93 	bl	80111f0 <uxr_stamp_session_header>
 80104ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80104cc:	9a03      	ldr	r2, [sp, #12]
 80104ce:	9902      	ldr	r1, [sp, #8]
 80104d0:	e9d3 0500 	ldrd	r0, r5, [r3]
 80104d4:	47a8      	blx	r5
 80104d6:	f109 0901 	add.w	r9, r9, #1
 80104da:	7e23      	ldrb	r3, [r4, #24]
 80104dc:	fa5f f089 	uxtb.w	r0, r9
 80104e0:	4283      	cmp	r3, r0
 80104e2:	d89a      	bhi.n	801041a <uxr_flash_output_streams+0x1a>
 80104e4:	e7b2      	b.n	801044c <uxr_flash_output_streams+0x4c>
 80104e6:	bf00      	nop

080104e8 <read_submessage_info>:
 80104e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ec:	460d      	mov	r5, r1
 80104ee:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80104f2:	4669      	mov	r1, sp
 80104f4:	4607      	mov	r7, r0
 80104f6:	4628      	mov	r0, r5
 80104f8:	f002 f80c 	bl	8012514 <uxr_deserialize_BaseObjectReply>
 80104fc:	a902      	add	r1, sp, #8
 80104fe:	4604      	mov	r4, r0
 8010500:	4628      	mov	r0, r5
 8010502:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010506:	f7fe fad3 	bl	800eab0 <ucdr_deserialize_bool>
 801050a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801050e:	4004      	ands	r4, r0
 8010510:	b2e4      	uxtb	r4, r4
 8010512:	b95b      	cbnz	r3, 801052c <read_submessage_info+0x44>
 8010514:	a987      	add	r1, sp, #540	; 0x21c
 8010516:	4628      	mov	r0, r5
 8010518:	f7fe faca 	bl	800eab0 <ucdr_deserialize_bool>
 801051c:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8010520:	4606      	mov	r6, r0
 8010522:	b94b      	cbnz	r3, 8010538 <read_submessage_info+0x50>
 8010524:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8010528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801052c:	a903      	add	r1, sp, #12
 801052e:	4628      	mov	r0, r5
 8010530:	f001 fe7e 	bl	8012230 <uxr_deserialize_ObjectVariant>
 8010534:	4004      	ands	r4, r0
 8010536:	e7ed      	b.n	8010514 <read_submessage_info+0x2c>
 8010538:	a988      	add	r1, sp, #544	; 0x220
 801053a:	4628      	mov	r0, r5
 801053c:	f7fe fae8 	bl	800eb10 <ucdr_deserialize_uint8_t>
 8010540:	4234      	tst	r4, r6
 8010542:	d0ef      	beq.n	8010524 <read_submessage_info+0x3c>
 8010544:	2800      	cmp	r0, #0
 8010546:	d0ed      	beq.n	8010524 <read_submessage_info+0x3c>
 8010548:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 801054c:	2b0d      	cmp	r3, #13
 801054e:	d1e9      	bne.n	8010524 <read_submessage_info+0x3c>
 8010550:	4628      	mov	r0, r5
 8010552:	a98a      	add	r1, sp, #552	; 0x228
 8010554:	f7ff f882 	bl	800f65c <ucdr_deserialize_int16_t>
 8010558:	b140      	cbz	r0, 801056c <read_submessage_info+0x84>
 801055a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801055e:	2b00      	cmp	r3, #0
 8010560:	dd07      	ble.n	8010572 <read_submessage_info+0x8a>
 8010562:	f1b8 0f00 	cmp.w	r8, #0
 8010566:	bf14      	ite	ne
 8010568:	2001      	movne	r0, #1
 801056a:	2002      	moveq	r0, #2
 801056c:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 8010570:	e7d8      	b.n	8010524 <read_submessage_info+0x3c>
 8010572:	2000      	movs	r0, #0
 8010574:	e7fa      	b.n	801056c <read_submessage_info+0x84>
 8010576:	bf00      	nop

08010578 <read_submessage_list>:
 8010578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801057c:	b098      	sub	sp, #96	; 0x60
 801057e:	f8df 9304 	ldr.w	r9, [pc, #772]	; 8010884 <read_submessage_list+0x30c>
 8010582:	920b      	str	r2, [sp, #44]	; 0x2c
 8010584:	4604      	mov	r4, r0
 8010586:	4688      	mov	r8, r1
 8010588:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 801058c:	aa0e      	add	r2, sp, #56	; 0x38
 801058e:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8010592:	4640      	mov	r0, r8
 8010594:	f001 f810 	bl	80115b8 <uxr_read_submessage_header>
 8010598:	2800      	cmp	r0, #0
 801059a:	f000 813d 	beq.w	8010818 <read_submessage_list+0x2a0>
 801059e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80105a2:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 80105a6:	3b02      	subs	r3, #2
 80105a8:	2b0d      	cmp	r3, #13
 80105aa:	d8ed      	bhi.n	8010588 <read_submessage_list+0x10>
 80105ac:	a101      	add	r1, pc, #4	; (adr r1, 80105b4 <read_submessage_list+0x3c>)
 80105ae:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105b2:	bf00      	nop
 80105b4:	0801080f 	.word	0x0801080f
 80105b8:	08010589 	.word	0x08010589
 80105bc:	080107ff 	.word	0x080107ff
 80105c0:	080107a3 	.word	0x080107a3
 80105c4:	08010799 	.word	0x08010799
 80105c8:	08010589 	.word	0x08010589
 80105cc:	08010589 	.word	0x08010589
 80105d0:	080106fb 	.word	0x080106fb
 80105d4:	0801068d 	.word	0x0801068d
 80105d8:	0801064b 	.word	0x0801064b
 80105dc:	08010589 	.word	0x08010589
 80105e0:	08010589 	.word	0x08010589
 80105e4:	08010589 	.word	0x08010589
 80105e8:	080105ed 	.word	0x080105ed
 80105ec:	a912      	add	r1, sp, #72	; 0x48
 80105ee:	4640      	mov	r0, r8
 80105f0:	f002 f9bc 	bl	801296c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80105f4:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 80105f8:	2d00      	cmp	r5, #0
 80105fa:	f000 8115 	beq.w	8010828 <read_submessage_list+0x2b0>
 80105fe:	f001 f823 	bl	8011648 <uxr_nanos>
 8010602:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010604:	460b      	mov	r3, r1
 8010606:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010608:	2700      	movs	r7, #0
 801060a:	fbc9 6701 	smlal	r6, r7, r9, r1
 801060e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010612:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010614:	4602      	mov	r2, r0
 8010616:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010618:	460e      	mov	r6, r1
 801061a:	2700      	movs	r7, #0
 801061c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8010620:	9106      	str	r1, [sp, #24]
 8010622:	fbc9 6700 	smlal	r6, r7, r9, r0
 8010626:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010628:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801062c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801062e:	2700      	movs	r7, #0
 8010630:	4608      	mov	r0, r1
 8010632:	4639      	mov	r1, r7
 8010634:	fbc9 0106 	smlal	r0, r1, r9, r6
 8010638:	e9cd 0100 	strd	r0, r1, [sp]
 801063c:	4620      	mov	r0, r4
 801063e:	47a8      	blx	r5
 8010640:	f04f 0301 	mov.w	r3, #1
 8010644:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8010648:	e79e      	b.n	8010588 <read_submessage_list+0x10>
 801064a:	a912      	add	r1, sp, #72	; 0x48
 801064c:	4640      	mov	r0, r8
 801064e:	f002 f97b 	bl	8012948 <uxr_deserialize_HEARTBEAT_Payload>
 8010652:	2100      	movs	r1, #0
 8010654:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8010658:	f000 fe84 	bl	8011364 <uxr_stream_id_from_raw>
 801065c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010660:	4603      	mov	r3, r0
 8010662:	4629      	mov	r1, r5
 8010664:	f104 0008 	add.w	r0, r4, #8
 8010668:	9311      	str	r3, [sp, #68]	; 0x44
 801066a:	f000 ff69 	bl	8011540 <uxr_get_input_reliable_stream>
 801066e:	2800      	cmp	r0, #0
 8010670:	d08a      	beq.n	8010588 <read_submessage_list+0x10>
 8010672:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8010676:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 801067a:	f006 f88f 	bl	801679c <uxr_process_heartbeat>
 801067e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8010682:	462a      	mov	r2, r5
 8010684:	4620      	mov	r0, r4
 8010686:	f7ff fdf5 	bl	8010274 <write_submessage_acknack.isra.0>
 801068a:	e77d      	b.n	8010588 <read_submessage_list+0x10>
 801068c:	a912      	add	r1, sp, #72	; 0x48
 801068e:	4640      	mov	r0, r8
 8010690:	f002 f932 	bl	80128f8 <uxr_deserialize_ACKNACK_Payload>
 8010694:	2100      	movs	r1, #0
 8010696:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801069a:	f000 fe63 	bl	8011364 <uxr_stream_id_from_raw>
 801069e:	4603      	mov	r3, r0
 80106a0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80106a4:	f104 0008 	add.w	r0, r4, #8
 80106a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80106aa:	f000 ff33 	bl	8011514 <uxr_get_output_reliable_stream>
 80106ae:	4605      	mov	r5, r0
 80106b0:	2800      	cmp	r0, #0
 80106b2:	f43f af69 	beq.w	8010588 <read_submessage_list+0x10>
 80106b6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80106ba:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 80106be:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80106c2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80106c6:	b289      	uxth	r1, r1
 80106c8:	f006 fbac 	bl	8016e24 <uxr_process_acknack>
 80106cc:	4628      	mov	r0, r5
 80106ce:	f006 fb6f 	bl	8016db0 <uxr_begin_output_nack_buffer_it>
 80106d2:	af10      	add	r7, sp, #64	; 0x40
 80106d4:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 80106d8:	e005      	b.n	80106e6 <read_submessage_list+0x16e>
 80106da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80106dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80106de:	9910      	ldr	r1, [sp, #64]	; 0x40
 80106e0:	e9d3 0600 	ldrd	r0, r6, [r3]
 80106e4:	47b0      	blx	r6
 80106e6:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 80106ea:	aa11      	add	r2, sp, #68	; 0x44
 80106ec:	4639      	mov	r1, r7
 80106ee:	4628      	mov	r0, r5
 80106f0:	f006 fb60 	bl	8016db4 <uxr_next_reliable_nack_buffer_to_send>
 80106f4:	2800      	cmp	r0, #0
 80106f6:	d1f0      	bne.n	80106da <read_submessage_list+0x162>
 80106f8:	e746      	b.n	8010588 <read_submessage_list+0x10>
 80106fa:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80106fe:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8010702:	af10      	add	r7, sp, #64	; 0x40
 8010704:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8010708:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 801070c:	4639      	mov	r1, r7
 801070e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8010712:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 8010716:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801071a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 801071e:	4640      	mov	r0, r8
 8010720:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8010724:	f001 fe32 	bl	801238c <uxr_deserialize_BaseObjectRequest>
 8010728:	4638      	mov	r0, r7
 801072a:	a911      	add	r1, sp, #68	; 0x44
 801072c:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8010730:	f000 fddc 	bl	80112ec <uxr_parse_base_object_request>
 8010734:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8010738:	9911      	ldr	r1, [sp, #68]	; 0x44
 801073a:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 801073e:	9112      	str	r1, [sp, #72]	; 0x48
 8010740:	3d04      	subs	r5, #4
 8010742:	f006 060e 	and.w	r6, r6, #14
 8010746:	b2ad      	uxth	r5, r5
 8010748:	f1ba 0f00 	cmp.w	sl, #0
 801074c:	d006      	beq.n	801075c <read_submessage_list+0x1e4>
 801074e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010752:	9300      	str	r3, [sp, #0]
 8010754:	463a      	mov	r2, r7
 8010756:	2300      	movs	r3, #0
 8010758:	4620      	mov	r0, r4
 801075a:	47d0      	blx	sl
 801075c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801075e:	b168      	cbz	r0, 801077c <read_submessage_list+0x204>
 8010760:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8010762:	2300      	movs	r3, #0
 8010764:	3902      	subs	r1, #2
 8010766:	e002      	b.n	801076e <read_submessage_list+0x1f6>
 8010768:	3301      	adds	r3, #1
 801076a:	4283      	cmp	r3, r0
 801076c:	d006      	beq.n	801077c <read_submessage_list+0x204>
 801076e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8010772:	42ba      	cmp	r2, r7
 8010774:	d1f8      	bne.n	8010768 <read_submessage_list+0x1f0>
 8010776:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8010778:	2100      	movs	r1, #0
 801077a:	54d1      	strb	r1, [r2, r3]
 801077c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801077e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010780:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8010784:	9302      	str	r3, [sp, #8]
 8010786:	e9cd 1000 	strd	r1, r0, [sp]
 801078a:	4633      	mov	r3, r6
 801078c:	462a      	mov	r2, r5
 801078e:	4641      	mov	r1, r8
 8010790:	4620      	mov	r0, r4
 8010792:	f7ff fc57 	bl	8010044 <read_submessage_format>
 8010796:	e6f7      	b.n	8010588 <read_submessage_list+0x10>
 8010798:	4641      	mov	r1, r8
 801079a:	4620      	mov	r0, r4
 801079c:	f7ff fea4 	bl	80104e8 <read_submessage_info>
 80107a0:	e6f2      	b.n	8010588 <read_submessage_list+0x10>
 80107a2:	2a00      	cmp	r2, #0
 80107a4:	d03b      	beq.n	801081e <read_submessage_list+0x2a6>
 80107a6:	a912      	add	r1, sp, #72	; 0x48
 80107a8:	4640      	mov	r0, r8
 80107aa:	f002 f801 	bl	80127b0 <uxr_deserialize_STATUS_Payload>
 80107ae:	a910      	add	r1, sp, #64	; 0x40
 80107b0:	aa0f      	add	r2, sp, #60	; 0x3c
 80107b2:	a812      	add	r0, sp, #72	; 0x48
 80107b4:	f000 fd9a 	bl	80112ec <uxr_parse_base_object_request>
 80107b8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80107bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80107be:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80107c2:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80107c6:	9111      	str	r1, [sp, #68]	; 0x44
 80107c8:	b135      	cbz	r5, 80107d8 <read_submessage_list+0x260>
 80107ca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80107ce:	9300      	str	r3, [sp, #0]
 80107d0:	4632      	mov	r2, r6
 80107d2:	463b      	mov	r3, r7
 80107d4:	4620      	mov	r0, r4
 80107d6:	47a8      	blx	r5
 80107d8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80107da:	2b00      	cmp	r3, #0
 80107dc:	f43f aed4 	beq.w	8010588 <read_submessage_list+0x10>
 80107e0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80107e2:	2100      	movs	r1, #0
 80107e4:	3802      	subs	r0, #2
 80107e6:	e003      	b.n	80107f0 <read_submessage_list+0x278>
 80107e8:	3101      	adds	r1, #1
 80107ea:	4299      	cmp	r1, r3
 80107ec:	f43f aecc 	beq.w	8010588 <read_submessage_list+0x10>
 80107f0:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 80107f4:	42b2      	cmp	r2, r6
 80107f6:	d1f7      	bne.n	80107e8 <read_submessage_list+0x270>
 80107f8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80107fa:	545f      	strb	r7, [r3, r1]
 80107fc:	e6c4      	b.n	8010588 <read_submessage_list+0x10>
 80107fe:	2a00      	cmp	r2, #0
 8010800:	f47f aec2 	bne.w	8010588 <read_submessage_list+0x10>
 8010804:	4641      	mov	r1, r8
 8010806:	4620      	mov	r0, r4
 8010808:	f000 fcb4 	bl	8011174 <uxr_read_create_session_status>
 801080c:	e6bc      	b.n	8010588 <read_submessage_list+0x10>
 801080e:	4641      	mov	r1, r8
 8010810:	4620      	mov	r0, r4
 8010812:	f7ff fcf9 	bl	8010208 <read_submessage_get_info>
 8010816:	e6b7      	b.n	8010588 <read_submessage_list+0x10>
 8010818:	b018      	add	sp, #96	; 0x60
 801081a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801081e:	4641      	mov	r1, r8
 8010820:	4620      	mov	r0, r4
 8010822:	f000 fcb3 	bl	801118c <uxr_read_delete_session_status>
 8010826:	e6af      	b.n	8010588 <read_submessage_list+0x10>
 8010828:	f000 ff0e 	bl	8011648 <uxr_nanos>
 801082c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801082e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010830:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010832:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010834:	2700      	movs	r7, #0
 8010836:	fbc9 6703 	smlal	r6, r7, r9, r3
 801083a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801083c:	eb16 0c00 	adds.w	ip, r6, r0
 8010840:	4618      	mov	r0, r3
 8010842:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010844:	eb47 0e01 	adc.w	lr, r7, r1
 8010848:	461e      	mov	r6, r3
 801084a:	2100      	movs	r1, #0
 801084c:	2700      	movs	r7, #0
 801084e:	fbc9 0105 	smlal	r0, r1, r9, r5
 8010852:	fbc9 6702 	smlal	r6, r7, r9, r2
 8010856:	1983      	adds	r3, r0, r6
 8010858:	eb41 0207 	adc.w	r2, r1, r7
 801085c:	ebbc 0303 	subs.w	r3, ip, r3
 8010860:	9308      	str	r3, [sp, #32]
 8010862:	eb6e 0302 	sbc.w	r3, lr, r2
 8010866:	9309      	str	r3, [sp, #36]	; 0x24
 8010868:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801086c:	0fd3      	lsrs	r3, r2, #31
 801086e:	18c9      	adds	r1, r1, r3
 8010870:	f142 0200 	adc.w	r2, r2, #0
 8010874:	084b      	lsrs	r3, r1, #1
 8010876:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 801087a:	1052      	asrs	r2, r2, #1
 801087c:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8010880:	e6de      	b.n	8010640 <read_submessage_list+0xc8>
 8010882:	bf00      	nop
 8010884:	3b9aca00 	.word	0x3b9aca00

08010888 <listen_message_reliably>:
 8010888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801088c:	1e0b      	subs	r3, r1, #0
 801088e:	b09d      	sub	sp, #116	; 0x74
 8010890:	bfb8      	it	lt
 8010892:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8010896:	9305      	str	r3, [sp, #20]
 8010898:	4607      	mov	r7, r0
 801089a:	f000 feb9 	bl	8011610 <uxr_millis>
 801089e:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80108a2:	4681      	mov	r9, r0
 80108a4:	2a00      	cmp	r2, #0
 80108a6:	f000 8095 	beq.w	80109d4 <listen_message_reliably+0x14c>
 80108aa:	2600      	movs	r6, #0
 80108ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108b0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80108b4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80108b8:	4630      	mov	r0, r6
 80108ba:	4688      	mov	r8, r1
 80108bc:	46ca      	mov	sl, r9
 80108be:	e00f      	b.n	80108e0 <listen_message_reliably+0x58>
 80108c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80108c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80108c8:	42a2      	cmp	r2, r4
 80108ca:	eb73 0105 	sbcs.w	r1, r3, r5
 80108ce:	bfb8      	it	lt
 80108d0:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 80108d4:	3601      	adds	r6, #1
 80108d6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80108da:	b2f0      	uxtb	r0, r6
 80108dc:	4283      	cmp	r3, r0
 80108de:	d951      	bls.n	8010984 <listen_message_reliably+0xfc>
 80108e0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80108e4:	2201      	movs	r2, #1
 80108e6:	2102      	movs	r1, #2
 80108e8:	f000 fd12 	bl	8011310 <uxr_stream_id>
 80108ec:	00e4      	lsls	r4, r4, #3
 80108ee:	f104 0520 	add.w	r5, r4, #32
 80108f2:	443d      	add	r5, r7
 80108f4:	4601      	mov	r1, r0
 80108f6:	4643      	mov	r3, r8
 80108f8:	4652      	mov	r2, sl
 80108fa:	4628      	mov	r0, r5
 80108fc:	9109      	str	r1, [sp, #36]	; 0x24
 80108fe:	f006 fa2b 	bl	8016d58 <uxr_update_output_stream_heartbeat_timestamp>
 8010902:	193b      	adds	r3, r7, r4
 8010904:	2800      	cmp	r0, #0
 8010906:	d0db      	beq.n	80108c0 <listen_message_reliably+0x38>
 8010908:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 801090c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8010910:	4638      	mov	r0, r7
 8010912:	f000 fcc5 	bl	80112a0 <uxr_session_header_offset>
 8010916:	3501      	adds	r5, #1
 8010918:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 801091c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010920:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8010924:	9000      	str	r0, [sp, #0]
 8010926:	2300      	movs	r3, #0
 8010928:	4658      	mov	r0, fp
 801092a:	2211      	movs	r2, #17
 801092c:	a90c      	add	r1, sp, #48	; 0x30
 801092e:	f7ff f871 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 8010932:	2300      	movs	r3, #0
 8010934:	2205      	movs	r2, #5
 8010936:	210b      	movs	r1, #11
 8010938:	4658      	mov	r0, fp
 801093a:	f000 fe23 	bl	8011584 <uxr_buffer_submessage_header>
 801093e:	8968      	ldrh	r0, [r5, #10]
 8010940:	2101      	movs	r1, #1
 8010942:	f006 fac7 	bl	8016ed4 <uxr_seq_num_add>
 8010946:	892a      	ldrh	r2, [r5, #8]
 8010948:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801094c:	4603      	mov	r3, r0
 801094e:	a90a      	add	r1, sp, #40	; 0x28
 8010950:	4658      	mov	r0, fp
 8010952:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8010956:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 801095a:	f001 ffe1 	bl	8012920 <uxr_serialize_HEARTBEAT_Payload>
 801095e:	2200      	movs	r2, #0
 8010960:	4611      	mov	r1, r2
 8010962:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010964:	4638      	mov	r0, r7
 8010966:	f000 fc43 	bl	80111f0 <uxr_stamp_session_header>
 801096a:	4658      	mov	r0, fp
 801096c:	f7ff f890 	bl	800fa90 <ucdr_buffer_length>
 8010970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010972:	4602      	mov	r2, r0
 8010974:	a90c      	add	r1, sp, #48	; 0x30
 8010976:	e9d3 0500 	ldrd	r0, r5, [r3]
 801097a:	443c      	add	r4, r7
 801097c:	47a8      	blx	r5
 801097e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8010982:	e79f      	b.n	80108c4 <listen_message_reliably+0x3c>
 8010984:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8010988:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801098c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010990:	4294      	cmp	r4, r2
 8010992:	bf08      	it	eq
 8010994:	428b      	cmpeq	r3, r1
 8010996:	d01d      	beq.n	80109d4 <listen_message_reliably+0x14c>
 8010998:	eba3 030a 	sub.w	r3, r3, sl
 801099c:	9905      	ldr	r1, [sp, #20]
 801099e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	bf08      	it	eq
 80109a4:	2301      	moveq	r3, #1
 80109a6:	4299      	cmp	r1, r3
 80109a8:	bfa8      	it	ge
 80109aa:	4619      	movge	r1, r3
 80109ac:	6894      	ldr	r4, [r2, #8]
 80109ae:	6810      	ldr	r0, [r2, #0]
 80109b0:	4689      	mov	r9, r1
 80109b2:	460b      	mov	r3, r1
 80109b4:	aa08      	add	r2, sp, #32
 80109b6:	a907      	add	r1, sp, #28
 80109b8:	47a0      	blx	r4
 80109ba:	b968      	cbnz	r0, 80109d8 <listen_message_reliably+0x150>
 80109bc:	9b05      	ldr	r3, [sp, #20]
 80109be:	eba3 0309 	sub.w	r3, r3, r9
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	9305      	str	r3, [sp, #20]
 80109c6:	f73f af68 	bgt.w	801089a <listen_message_reliably+0x12>
 80109ca:	4604      	mov	r4, r0
 80109cc:	4620      	mov	r0, r4
 80109ce:	b01d      	add	sp, #116	; 0x74
 80109d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109d4:	9b05      	ldr	r3, [sp, #20]
 80109d6:	e7e1      	b.n	801099c <listen_message_reliably+0x114>
 80109d8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80109dc:	4604      	mov	r4, r0
 80109de:	a80c      	add	r0, sp, #48	; 0x30
 80109e0:	f7ff f82a 	bl	800fa38 <ucdr_init_buffer>
 80109e4:	2500      	movs	r5, #0
 80109e6:	a90c      	add	r1, sp, #48	; 0x30
 80109e8:	f10d 031a 	add.w	r3, sp, #26
 80109ec:	aa06      	add	r2, sp, #24
 80109ee:	4638      	mov	r0, r7
 80109f0:	f88d 5018 	strb.w	r5, [sp, #24]
 80109f4:	f000 fc12 	bl	801121c <uxr_read_session_header>
 80109f8:	b918      	cbnz	r0, 8010a02 <listen_message_reliably+0x17a>
 80109fa:	4620      	mov	r0, r4
 80109fc:	b01d      	add	sp, #116	; 0x74
 80109fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a02:	4629      	mov	r1, r5
 8010a04:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010a08:	f000 fcac 	bl	8011364 <uxr_stream_id_from_raw>
 8010a0c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010a10:	2e01      	cmp	r6, #1
 8010a12:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8010a16:	900a      	str	r0, [sp, #40]	; 0x28
 8010a18:	fa5f fa80 	uxtb.w	sl, r0
 8010a1c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010a20:	d04b      	beq.n	8010aba <listen_message_reliably+0x232>
 8010a22:	2e02      	cmp	r6, #2
 8010a24:	d00f      	beq.n	8010a46 <listen_message_reliably+0x1be>
 8010a26:	2e00      	cmp	r6, #0
 8010a28:	d1e7      	bne.n	80109fa <listen_message_reliably+0x172>
 8010a2a:	4631      	mov	r1, r6
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	f000 fc99 	bl	8011364 <uxr_stream_id_from_raw>
 8010a32:	a90c      	add	r1, sp, #48	; 0x30
 8010a34:	4602      	mov	r2, r0
 8010a36:	4638      	mov	r0, r7
 8010a38:	920a      	str	r2, [sp, #40]	; 0x28
 8010a3a:	f7ff fd9d 	bl	8010578 <read_submessage_list>
 8010a3e:	4620      	mov	r0, r4
 8010a40:	b01d      	add	sp, #116	; 0x74
 8010a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a46:	4629      	mov	r1, r5
 8010a48:	f107 0008 	add.w	r0, r7, #8
 8010a4c:	f000 fd78 	bl	8011540 <uxr_get_input_reliable_stream>
 8010a50:	4680      	mov	r8, r0
 8010a52:	b348      	cbz	r0, 8010aa8 <listen_message_reliably+0x220>
 8010a54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a56:	9202      	str	r2, [sp, #8]
 8010a58:	a80c      	add	r0, sp, #48	; 0x30
 8010a5a:	f7ff f81d 	bl	800fa98 <ucdr_buffer_remaining>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	f10d 0019 	add.w	r0, sp, #25
 8010a64:	9000      	str	r0, [sp, #0]
 8010a66:	9a02      	ldr	r2, [sp, #8]
 8010a68:	4649      	mov	r1, r9
 8010a6a:	4640      	mov	r0, r8
 8010a6c:	f005 fd98 	bl	80165a0 <uxr_receive_reliable_message>
 8010a70:	b1d0      	cbz	r0, 8010aa8 <listen_message_reliably+0x220>
 8010a72:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d037      	beq.n	8010aea <listen_message_reliably+0x262>
 8010a7a:	ae14      	add	r6, sp, #80	; 0x50
 8010a7c:	f04f 0902 	mov.w	r9, #2
 8010a80:	e008      	b.n	8010a94 <listen_message_reliably+0x20c>
 8010a82:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010a86:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010a8a:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8010a8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a90:	f7ff fd72 	bl	8010578 <read_submessage_list>
 8010a94:	4631      	mov	r1, r6
 8010a96:	2204      	movs	r2, #4
 8010a98:	4640      	mov	r0, r8
 8010a9a:	f005 fe01 	bl	80166a0 <uxr_next_input_reliable_buffer_available>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	4631      	mov	r1, r6
 8010aa2:	4638      	mov	r0, r7
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d1ec      	bne.n	8010a82 <listen_message_reliably+0x1fa>
 8010aa8:	4638      	mov	r0, r7
 8010aaa:	462a      	mov	r2, r5
 8010aac:	4651      	mov	r1, sl
 8010aae:	f7ff fbe1 	bl	8010274 <write_submessage_acknack.isra.0>
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	b01d      	add	sp, #116	; 0x74
 8010ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aba:	4629      	mov	r1, r5
 8010abc:	f107 0008 	add.w	r0, r7, #8
 8010ac0:	f000 fd34 	bl	801152c <uxr_get_input_best_effort_stream>
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	d098      	beq.n	80109fa <listen_message_reliably+0x172>
 8010ac8:	4649      	mov	r1, r9
 8010aca:	f005 fce5 	bl	8016498 <uxr_receive_best_effort_message>
 8010ace:	2800      	cmp	r0, #0
 8010ad0:	d093      	beq.n	80109fa <listen_message_reliably+0x172>
 8010ad2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010ad6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010ada:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ae0:	a90c      	add	r1, sp, #48	; 0x30
 8010ae2:	4638      	mov	r0, r7
 8010ae4:	f7ff fd48 	bl	8010578 <read_submessage_list>
 8010ae8:	e787      	b.n	80109fa <listen_message_reliably+0x172>
 8010aea:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010aee:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010af2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010af6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010af8:	a90c      	add	r1, sp, #48	; 0x30
 8010afa:	4638      	mov	r0, r7
 8010afc:	f7ff fd3c 	bl	8010578 <read_submessage_list>
 8010b00:	e7bb      	b.n	8010a7a <listen_message_reliably+0x1f2>
 8010b02:	bf00      	nop

08010b04 <uxr_run_session_timeout>:
 8010b04:	b570      	push	{r4, r5, r6, lr}
 8010b06:	4604      	mov	r4, r0
 8010b08:	460d      	mov	r5, r1
 8010b0a:	f000 fd81 	bl	8011610 <uxr_millis>
 8010b0e:	4606      	mov	r6, r0
 8010b10:	4620      	mov	r0, r4
 8010b12:	f7ff fc75 	bl	8010400 <uxr_flash_output_streams>
 8010b16:	4629      	mov	r1, r5
 8010b18:	4620      	mov	r0, r4
 8010b1a:	f7ff feb5 	bl	8010888 <listen_message_reliably>
 8010b1e:	f000 fd77 	bl	8011610 <uxr_millis>
 8010b22:	1b83      	subs	r3, r0, r6
 8010b24:	1ae9      	subs	r1, r5, r3
 8010b26:	2900      	cmp	r1, #0
 8010b28:	dcf6      	bgt.n	8010b18 <uxr_run_session_timeout+0x14>
 8010b2a:	f104 0008 	add.w	r0, r4, #8
 8010b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b32:	f000 bd11 	b.w	8011558 <uxr_output_streams_confirmed>
 8010b36:	bf00      	nop

08010b38 <uxr_run_session_until_data>:
 8010b38:	b570      	push	{r4, r5, r6, lr}
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	460d      	mov	r5, r1
 8010b3e:	f000 fd67 	bl	8011610 <uxr_millis>
 8010b42:	4606      	mov	r6, r0
 8010b44:	4620      	mov	r0, r4
 8010b46:	f7ff fc5b 	bl	8010400 <uxr_flash_output_streams>
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8010b50:	4629      	mov	r1, r5
 8010b52:	e005      	b.n	8010b60 <uxr_run_session_until_data+0x28>
 8010b54:	f000 fd5c 	bl	8011610 <uxr_millis>
 8010b58:	1b83      	subs	r3, r0, r6
 8010b5a:	1ae9      	subs	r1, r5, r3
 8010b5c:	2900      	cmp	r1, #0
 8010b5e:	dd07      	ble.n	8010b70 <uxr_run_session_until_data+0x38>
 8010b60:	4620      	mov	r0, r4
 8010b62:	f7ff fe91 	bl	8010888 <listen_message_reliably>
 8010b66:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8010b6a:	2800      	cmp	r0, #0
 8010b6c:	d0f2      	beq.n	8010b54 <uxr_run_session_until_data+0x1c>
 8010b6e:	bd70      	pop	{r4, r5, r6, pc}
 8010b70:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8010b74:	bd70      	pop	{r4, r5, r6, pc}
 8010b76:	bf00      	nop

08010b78 <uxr_run_session_until_confirm_delivery>:
 8010b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b7c:	4606      	mov	r6, r0
 8010b7e:	460d      	mov	r5, r1
 8010b80:	f000 fd46 	bl	8011610 <uxr_millis>
 8010b84:	4607      	mov	r7, r0
 8010b86:	4630      	mov	r0, r6
 8010b88:	f7ff fc3a 	bl	8010400 <uxr_flash_output_streams>
 8010b8c:	2d00      	cmp	r5, #0
 8010b8e:	f106 0808 	add.w	r8, r6, #8
 8010b92:	bfa8      	it	ge
 8010b94:	462c      	movge	r4, r5
 8010b96:	da07      	bge.n	8010ba8 <uxr_run_session_until_confirm_delivery+0x30>
 8010b98:	e00e      	b.n	8010bb8 <uxr_run_session_until_confirm_delivery+0x40>
 8010b9a:	f7ff fe75 	bl	8010888 <listen_message_reliably>
 8010b9e:	f000 fd37 	bl	8011610 <uxr_millis>
 8010ba2:	1bc3      	subs	r3, r0, r7
 8010ba4:	1aec      	subs	r4, r5, r3
 8010ba6:	d407      	bmi.n	8010bb8 <uxr_run_session_until_confirm_delivery+0x40>
 8010ba8:	4640      	mov	r0, r8
 8010baa:	f000 fcd5 	bl	8011558 <uxr_output_streams_confirmed>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d0f0      	beq.n	8010b9a <uxr_run_session_until_confirm_delivery+0x22>
 8010bb8:	4640      	mov	r0, r8
 8010bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bbe:	f000 bccb 	b.w	8011558 <uxr_output_streams_confirmed>
 8010bc2:	bf00      	nop

08010bc4 <uxr_run_session_until_all_status>:
 8010bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bc8:	9d08      	ldr	r5, [sp, #32]
 8010bca:	460f      	mov	r7, r1
 8010bcc:	4692      	mov	sl, r2
 8010bce:	461c      	mov	r4, r3
 8010bd0:	4606      	mov	r6, r0
 8010bd2:	f7ff fc15 	bl	8010400 <uxr_flash_output_streams>
 8010bd6:	b125      	cbz	r5, 8010be2 <uxr_run_session_until_all_status+0x1e>
 8010bd8:	462a      	mov	r2, r5
 8010bda:	21ff      	movs	r1, #255	; 0xff
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f007 fd23 	bl	8018628 <memset>
 8010be2:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 8010be6:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010be8:	f000 fd12 	bl	8011610 <uxr_millis>
 8010bec:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8010bf0:	f1aa 0a02 	sub.w	sl, sl, #2
 8010bf4:	4680      	mov	r8, r0
 8010bf6:	4639      	mov	r1, r7
 8010bf8:	4630      	mov	r0, r6
 8010bfa:	f7ff fe45 	bl	8010888 <listen_message_reliably>
 8010bfe:	f000 fd07 	bl	8011610 <uxr_millis>
 8010c02:	eba0 0008 	sub.w	r0, r0, r8
 8010c06:	1a39      	subs	r1, r7, r0
 8010c08:	b33d      	cbz	r5, 8010c5a <uxr_run_session_until_all_status+0x96>
 8010c0a:	46cc      	mov	ip, r9
 8010c0c:	464a      	mov	r2, r9
 8010c0e:	2301      	movs	r3, #1
 8010c10:	e002      	b.n	8010c18 <uxr_run_session_until_all_status+0x54>
 8010c12:	42ab      	cmp	r3, r5
 8010c14:	d20c      	bcs.n	8010c30 <uxr_run_session_until_all_status+0x6c>
 8010c16:	3301      	adds	r3, #1
 8010c18:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8010c1c:	2cff      	cmp	r4, #255	; 0xff
 8010c1e:	d1f8      	bne.n	8010c12 <uxr_run_session_until_all_status+0x4e>
 8010c20:	42ab      	cmp	r3, r5
 8010c22:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8010c26:	d213      	bcs.n	8010c50 <uxr_run_session_until_all_status+0x8c>
 8010c28:	2800      	cmp	r0, #0
 8010c2a:	d0f4      	beq.n	8010c16 <uxr_run_session_until_all_status+0x52>
 8010c2c:	2900      	cmp	r1, #0
 8010c2e:	dce3      	bgt.n	8010bf8 <uxr_run_session_until_all_status+0x34>
 8010c30:	2300      	movs	r3, #0
 8010c32:	444d      	add	r5, r9
 8010c34:	67f3      	str	r3, [r6, #124]	; 0x7c
 8010c36:	e001      	b.n	8010c3c <uxr_run_session_until_all_status+0x78>
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d812      	bhi.n	8010c62 <uxr_run_session_until_all_status+0x9e>
 8010c3c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010c40:	4565      	cmp	r5, ip
 8010c42:	d1f9      	bne.n	8010c38 <uxr_run_session_until_all_status+0x74>
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	bf8c      	ite	hi
 8010c48:	2000      	movhi	r0, #0
 8010c4a:	2001      	movls	r0, #1
 8010c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c50:	2900      	cmp	r1, #0
 8010c52:	dded      	ble.n	8010c30 <uxr_run_session_until_all_status+0x6c>
 8010c54:	2800      	cmp	r0, #0
 8010c56:	d1cf      	bne.n	8010bf8 <uxr_run_session_until_all_status+0x34>
 8010c58:	e7ea      	b.n	8010c30 <uxr_run_session_until_all_status+0x6c>
 8010c5a:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010c5c:	2001      	movs	r0, #1
 8010c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c62:	2000      	movs	r0, #0
 8010c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010c68 <uxr_create_session>:
 8010c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c6c:	ed2d 8b02 	vpush	{d8}
 8010c70:	f100 0808 	add.w	r8, r0, #8
 8010c74:	b0a9      	sub	sp, #164	; 0xa4
 8010c76:	4604      	mov	r4, r0
 8010c78:	4640      	mov	r0, r8
 8010c7a:	f000 fba9 	bl	80113d0 <uxr_reset_stream_storage>
 8010c7e:	4620      	mov	r0, r4
 8010c80:	f000 fb0e 	bl	80112a0 <uxr_session_header_offset>
 8010c84:	a909      	add	r1, sp, #36	; 0x24
 8010c86:	9000      	str	r0, [sp, #0]
 8010c88:	2300      	movs	r3, #0
 8010c8a:	a810      	add	r0, sp, #64	; 0x40
 8010c8c:	221c      	movs	r2, #28
 8010c8e:	f7fe fec1 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 8010c92:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010c94:	8a1a      	ldrh	r2, [r3, #16]
 8010c96:	3a04      	subs	r2, #4
 8010c98:	b292      	uxth	r2, r2
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	a910      	add	r1, sp, #64	; 0x40
 8010c9e:	f000 fa23 	bl	80110e8 <uxr_buffer_create_session>
 8010ca2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f000 fa8f 	bl	80111c8 <uxr_stamp_create_session_header>
 8010caa:	a810      	add	r0, sp, #64	; 0x40
 8010cac:	f7fe fef0 	bl	800fa90 <ucdr_buffer_length>
 8010cb0:	23ff      	movs	r3, #255	; 0xff
 8010cb2:	ee08 0a10 	vmov	s16, r0
 8010cb6:	7163      	strb	r3, [r4, #5]
 8010cb8:	f04f 090a 	mov.w	r9, #10
 8010cbc:	46c2      	mov	sl, r8
 8010cbe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010cc0:	ee18 2a10 	vmov	r2, s16
 8010cc4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010cc8:	a909      	add	r1, sp, #36	; 0x24
 8010cca:	47a8      	blx	r5
 8010ccc:	f000 fca0 	bl	8011610 <uxr_millis>
 8010cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010cd4:	9002      	str	r0, [sp, #8]
 8010cd6:	e00c      	b.n	8010cf2 <uxr_create_session+0x8a>
 8010cd8:	f000 fc9a 	bl	8011610 <uxr_millis>
 8010cdc:	9b02      	ldr	r3, [sp, #8]
 8010cde:	7962      	ldrb	r2, [r4, #5]
 8010ce0:	1ac0      	subs	r0, r0, r3
 8010ce2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	f340 8094 	ble.w	8010e14 <uxr_create_session+0x1ac>
 8010cec:	2aff      	cmp	r2, #255	; 0xff
 8010cee:	f040 8097 	bne.w	8010e20 <uxr_create_session+0x1b8>
 8010cf2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010cf4:	a905      	add	r1, sp, #20
 8010cf6:	6895      	ldr	r5, [r2, #8]
 8010cf8:	6810      	ldr	r0, [r2, #0]
 8010cfa:	aa06      	add	r2, sp, #24
 8010cfc:	47a8      	blx	r5
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d0ea      	beq.n	8010cd8 <uxr_create_session+0x70>
 8010d02:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8010d06:	a818      	add	r0, sp, #96	; 0x60
 8010d08:	f7fe fe96 	bl	800fa38 <ucdr_init_buffer>
 8010d0c:	2500      	movs	r5, #0
 8010d0e:	f10d 0312 	add.w	r3, sp, #18
 8010d12:	aa04      	add	r2, sp, #16
 8010d14:	a918      	add	r1, sp, #96	; 0x60
 8010d16:	4620      	mov	r0, r4
 8010d18:	f88d 5010 	strb.w	r5, [sp, #16]
 8010d1c:	f000 fa7e 	bl	801121c <uxr_read_session_header>
 8010d20:	2800      	cmp	r0, #0
 8010d22:	d0d9      	beq.n	8010cd8 <uxr_create_session+0x70>
 8010d24:	4629      	mov	r1, r5
 8010d26:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8010d2a:	f000 fb1b 	bl	8011364 <uxr_stream_id_from_raw>
 8010d2e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010d32:	2f01      	cmp	r7, #1
 8010d34:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8010d38:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8010d3c:	fa5f f880 	uxtb.w	r8, r0
 8010d40:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010d44:	d04d      	beq.n	8010de2 <uxr_create_session+0x17a>
 8010d46:	2f02      	cmp	r7, #2
 8010d48:	d00c      	beq.n	8010d64 <uxr_create_session+0xfc>
 8010d4a:	2f00      	cmp	r7, #0
 8010d4c:	d1c4      	bne.n	8010cd8 <uxr_create_session+0x70>
 8010d4e:	4639      	mov	r1, r7
 8010d50:	4638      	mov	r0, r7
 8010d52:	f000 fb07 	bl	8011364 <uxr_stream_id_from_raw>
 8010d56:	a918      	add	r1, sp, #96	; 0x60
 8010d58:	4602      	mov	r2, r0
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	9208      	str	r2, [sp, #32]
 8010d5e:	f7ff fc0b 	bl	8010578 <read_submessage_list>
 8010d62:	e7b9      	b.n	8010cd8 <uxr_create_session+0x70>
 8010d64:	4629      	mov	r1, r5
 8010d66:	4650      	mov	r0, sl
 8010d68:	f000 fbea 	bl	8011540 <uxr_get_input_reliable_stream>
 8010d6c:	4606      	mov	r6, r0
 8010d6e:	b390      	cbz	r0, 8010dd6 <uxr_create_session+0x16e>
 8010d70:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010d72:	9203      	str	r2, [sp, #12]
 8010d74:	a818      	add	r0, sp, #96	; 0x60
 8010d76:	f7fe fe8f 	bl	800fa98 <ucdr_buffer_remaining>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	f10d 0011 	add.w	r0, sp, #17
 8010d80:	9000      	str	r0, [sp, #0]
 8010d82:	9a03      	ldr	r2, [sp, #12]
 8010d84:	4659      	mov	r1, fp
 8010d86:	4630      	mov	r0, r6
 8010d88:	f005 fc0a 	bl	80165a0 <uxr_receive_reliable_message>
 8010d8c:	b318      	cbz	r0, 8010dd6 <uxr_create_session+0x16e>
 8010d8e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8010d92:	b9b3      	cbnz	r3, 8010dc2 <uxr_create_session+0x15a>
 8010d94:	f88d 8020 	strb.w	r8, [sp, #32]
 8010d98:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010d9c:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8010da0:	9a08      	ldr	r2, [sp, #32]
 8010da2:	a918      	add	r1, sp, #96	; 0x60
 8010da4:	4620      	mov	r0, r4
 8010da6:	f7ff fbe7 	bl	8010578 <read_submessage_list>
 8010daa:	e00a      	b.n	8010dc2 <uxr_create_session+0x15a>
 8010dac:	f04f 0302 	mov.w	r3, #2
 8010db0:	f88d 8020 	strb.w	r8, [sp, #32]
 8010db4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010db8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8010dbc:	9a08      	ldr	r2, [sp, #32]
 8010dbe:	f7ff fbdb 	bl	8010578 <read_submessage_list>
 8010dc2:	a920      	add	r1, sp, #128	; 0x80
 8010dc4:	2204      	movs	r2, #4
 8010dc6:	4630      	mov	r0, r6
 8010dc8:	f005 fc6a 	bl	80166a0 <uxr_next_input_reliable_buffer_available>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	a920      	add	r1, sp, #128	; 0x80
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d1ea      	bne.n	8010dac <uxr_create_session+0x144>
 8010dd6:	462a      	mov	r2, r5
 8010dd8:	4641      	mov	r1, r8
 8010dda:	4620      	mov	r0, r4
 8010ddc:	f7ff fa4a 	bl	8010274 <write_submessage_acknack.isra.0>
 8010de0:	e77a      	b.n	8010cd8 <uxr_create_session+0x70>
 8010de2:	4629      	mov	r1, r5
 8010de4:	4650      	mov	r0, sl
 8010de6:	f000 fba1 	bl	801152c <uxr_get_input_best_effort_stream>
 8010dea:	2800      	cmp	r0, #0
 8010dec:	f43f af74 	beq.w	8010cd8 <uxr_create_session+0x70>
 8010df0:	4659      	mov	r1, fp
 8010df2:	f005 fb51 	bl	8016498 <uxr_receive_best_effort_message>
 8010df6:	2800      	cmp	r0, #0
 8010df8:	f43f af6e 	beq.w	8010cd8 <uxr_create_session+0x70>
 8010dfc:	f88d 8020 	strb.w	r8, [sp, #32]
 8010e00:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010e04:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8010e08:	9a08      	ldr	r2, [sp, #32]
 8010e0a:	a918      	add	r1, sp, #96	; 0x60
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f7ff fbb3 	bl	8010578 <read_submessage_list>
 8010e12:	e761      	b.n	8010cd8 <uxr_create_session+0x70>
 8010e14:	f1b9 0901 	subs.w	r9, r9, #1
 8010e18:	d002      	beq.n	8010e20 <uxr_create_session+0x1b8>
 8010e1a:	2aff      	cmp	r2, #255	; 0xff
 8010e1c:	f43f af4f 	beq.w	8010cbe <uxr_create_session+0x56>
 8010e20:	b12a      	cbz	r2, 8010e2e <uxr_create_session+0x1c6>
 8010e22:	2000      	movs	r0, #0
 8010e24:	b029      	add	sp, #164	; 0xa4
 8010e26:	ecbd 8b02 	vpop	{d8}
 8010e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e2e:	4650      	mov	r0, sl
 8010e30:	f000 face 	bl	80113d0 <uxr_reset_stream_storage>
 8010e34:	2001      	movs	r0, #1
 8010e36:	b029      	add	sp, #164	; 0xa4
 8010e38:	ecbd 8b02 	vpop	{d8}
 8010e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e40 <wait_session_status>:
 8010e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e44:	4604      	mov	r4, r0
 8010e46:	b09d      	sub	sp, #116	; 0x74
 8010e48:	20ff      	movs	r0, #255	; 0xff
 8010e4a:	7160      	strb	r0, [r4, #5]
 8010e4c:	9304      	str	r3, [sp, #16]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	f000 80b8 	beq.w	8010fc4 <wait_session_status+0x184>
 8010e54:	2300      	movs	r3, #0
 8010e56:	468b      	mov	fp, r1
 8010e58:	4692      	mov	sl, r2
 8010e5a:	9303      	str	r3, [sp, #12]
 8010e5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010e5e:	4652      	mov	r2, sl
 8010e60:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010e64:	4659      	mov	r1, fp
 8010e66:	47a8      	blx	r5
 8010e68:	f000 fbd2 	bl	8011610 <uxr_millis>
 8010e6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010e70:	4605      	mov	r5, r0
 8010e72:	e009      	b.n	8010e88 <wait_session_status+0x48>
 8010e74:	f000 fbcc 	bl	8011610 <uxr_millis>
 8010e78:	1b40      	subs	r0, r0, r5
 8010e7a:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	dd42      	ble.n	8010f08 <wait_session_status+0xc8>
 8010e82:	7960      	ldrb	r0, [r4, #5]
 8010e84:	28ff      	cmp	r0, #255	; 0xff
 8010e86:	d148      	bne.n	8010f1a <wait_session_status+0xda>
 8010e88:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010e8a:	a908      	add	r1, sp, #32
 8010e8c:	6896      	ldr	r6, [r2, #8]
 8010e8e:	6810      	ldr	r0, [r2, #0]
 8010e90:	aa09      	add	r2, sp, #36	; 0x24
 8010e92:	47b0      	blx	r6
 8010e94:	2800      	cmp	r0, #0
 8010e96:	d0ed      	beq.n	8010e74 <wait_session_status+0x34>
 8010e98:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010e9c:	a80c      	add	r0, sp, #48	; 0x30
 8010e9e:	f7fe fdcb 	bl	800fa38 <ucdr_init_buffer>
 8010ea2:	2600      	movs	r6, #0
 8010ea4:	f10d 031e 	add.w	r3, sp, #30
 8010ea8:	aa07      	add	r2, sp, #28
 8010eaa:	a90c      	add	r1, sp, #48	; 0x30
 8010eac:	4620      	mov	r0, r4
 8010eae:	f88d 601c 	strb.w	r6, [sp, #28]
 8010eb2:	f000 f9b3 	bl	801121c <uxr_read_session_header>
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	d0dc      	beq.n	8010e74 <wait_session_status+0x34>
 8010eba:	4631      	mov	r1, r6
 8010ebc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010ec0:	f000 fa50 	bl	8011364 <uxr_stream_id_from_raw>
 8010ec4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010ec8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010ecc:	9302      	str	r3, [sp, #8]
 8010ece:	2f01      	cmp	r7, #1
 8010ed0:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8010ed4:	fa5f f880 	uxtb.w	r8, r0
 8010ed8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010edc:	d058      	beq.n	8010f90 <wait_session_status+0x150>
 8010ede:	2f02      	cmp	r7, #2
 8010ee0:	d021      	beq.n	8010f26 <wait_session_status+0xe6>
 8010ee2:	2f00      	cmp	r7, #0
 8010ee4:	d1c6      	bne.n	8010e74 <wait_session_status+0x34>
 8010ee6:	4639      	mov	r1, r7
 8010ee8:	4638      	mov	r0, r7
 8010eea:	f000 fa3b 	bl	8011364 <uxr_stream_id_from_raw>
 8010eee:	a90c      	add	r1, sp, #48	; 0x30
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	920b      	str	r2, [sp, #44]	; 0x2c
 8010ef6:	f7ff fb3f 	bl	8010578 <read_submessage_list>
 8010efa:	f000 fb89 	bl	8011610 <uxr_millis>
 8010efe:	1b40      	subs	r0, r0, r5
 8010f00:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	dcbc      	bgt.n	8010e82 <wait_session_status+0x42>
 8010f08:	9b03      	ldr	r3, [sp, #12]
 8010f0a:	9a04      	ldr	r2, [sp, #16]
 8010f0c:	7960      	ldrb	r0, [r4, #5]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	429a      	cmp	r2, r3
 8010f12:	9303      	str	r3, [sp, #12]
 8010f14:	d001      	beq.n	8010f1a <wait_session_status+0xda>
 8010f16:	28ff      	cmp	r0, #255	; 0xff
 8010f18:	d0a0      	beq.n	8010e5c <wait_session_status+0x1c>
 8010f1a:	38ff      	subs	r0, #255	; 0xff
 8010f1c:	bf18      	it	ne
 8010f1e:	2001      	movne	r0, #1
 8010f20:	b01d      	add	sp, #116	; 0x74
 8010f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f26:	4631      	mov	r1, r6
 8010f28:	f104 0008 	add.w	r0, r4, #8
 8010f2c:	f000 fb08 	bl	8011540 <uxr_get_input_reliable_stream>
 8010f30:	4681      	mov	r9, r0
 8010f32:	b338      	cbz	r0, 8010f84 <wait_session_status+0x144>
 8010f34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f36:	9205      	str	r2, [sp, #20]
 8010f38:	a80c      	add	r0, sp, #48	; 0x30
 8010f3a:	f7fe fdad 	bl	800fa98 <ucdr_buffer_remaining>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	f10d 001d 	add.w	r0, sp, #29
 8010f44:	9000      	str	r0, [sp, #0]
 8010f46:	9a05      	ldr	r2, [sp, #20]
 8010f48:	9902      	ldr	r1, [sp, #8]
 8010f4a:	4648      	mov	r0, r9
 8010f4c:	f005 fb28 	bl	80165a0 <uxr_receive_reliable_message>
 8010f50:	b1c0      	cbz	r0, 8010f84 <wait_session_status+0x144>
 8010f52:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010f56:	b95b      	cbnz	r3, 8010f70 <wait_session_status+0x130>
 8010f58:	e03c      	b.n	8010fd4 <wait_session_status+0x194>
 8010f5a:	f04f 0302 	mov.w	r3, #2
 8010f5e:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8010f62:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010f66:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8010f6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f6c:	f7ff fb04 	bl	8010578 <read_submessage_list>
 8010f70:	a914      	add	r1, sp, #80	; 0x50
 8010f72:	2204      	movs	r2, #4
 8010f74:	4648      	mov	r0, r9
 8010f76:	f005 fb93 	bl	80166a0 <uxr_next_input_reliable_buffer_available>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	a914      	add	r1, sp, #80	; 0x50
 8010f7e:	4620      	mov	r0, r4
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d1ea      	bne.n	8010f5a <wait_session_status+0x11a>
 8010f84:	4632      	mov	r2, r6
 8010f86:	4641      	mov	r1, r8
 8010f88:	4620      	mov	r0, r4
 8010f8a:	f7ff f973 	bl	8010274 <write_submessage_acknack.isra.0>
 8010f8e:	e771      	b.n	8010e74 <wait_session_status+0x34>
 8010f90:	4631      	mov	r1, r6
 8010f92:	f104 0008 	add.w	r0, r4, #8
 8010f96:	f000 fac9 	bl	801152c <uxr_get_input_best_effort_stream>
 8010f9a:	2800      	cmp	r0, #0
 8010f9c:	f43f af6a 	beq.w	8010e74 <wait_session_status+0x34>
 8010fa0:	9902      	ldr	r1, [sp, #8]
 8010fa2:	f005 fa79 	bl	8016498 <uxr_receive_best_effort_message>
 8010fa6:	2800      	cmp	r0, #0
 8010fa8:	f43f af64 	beq.w	8010e74 <wait_session_status+0x34>
 8010fac:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8010fb0:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010fb4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8010fb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010fba:	a90c      	add	r1, sp, #48	; 0x30
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f7ff fadb 	bl	8010578 <read_submessage_list>
 8010fc2:	e757      	b.n	8010e74 <wait_session_status+0x34>
 8010fc4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010fc6:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010fca:	47a0      	blx	r4
 8010fcc:	2001      	movs	r0, #1
 8010fce:	b01d      	add	sp, #116	; 0x74
 8010fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd4:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8010fd8:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010fdc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8010fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010fe2:	a90c      	add	r1, sp, #48	; 0x30
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	f7ff fac7 	bl	8010578 <read_submessage_list>
 8010fea:	e7c1      	b.n	8010f70 <wait_session_status+0x130>

08010fec <uxr_delete_session_retries>:
 8010fec:	b530      	push	{r4, r5, lr}
 8010fee:	b08f      	sub	sp, #60	; 0x3c
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	460d      	mov	r5, r1
 8010ff4:	f000 f954 	bl	80112a0 <uxr_session_header_offset>
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	2210      	movs	r2, #16
 8010ffc:	9000      	str	r0, [sp, #0]
 8010ffe:	a902      	add	r1, sp, #8
 8011000:	a806      	add	r0, sp, #24
 8011002:	f7fe fd07 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 8011006:	a906      	add	r1, sp, #24
 8011008:	4620      	mov	r0, r4
 801100a:	f000 f897 	bl	801113c <uxr_buffer_delete_session>
 801100e:	2200      	movs	r2, #0
 8011010:	4611      	mov	r1, r2
 8011012:	9b06      	ldr	r3, [sp, #24]
 8011014:	4620      	mov	r0, r4
 8011016:	f000 f8eb 	bl	80111f0 <uxr_stamp_session_header>
 801101a:	a806      	add	r0, sp, #24
 801101c:	f7fe fd38 	bl	800fa90 <ucdr_buffer_length>
 8011020:	462b      	mov	r3, r5
 8011022:	4602      	mov	r2, r0
 8011024:	a902      	add	r1, sp, #8
 8011026:	4620      	mov	r0, r4
 8011028:	f7ff ff0a 	bl	8010e40 <wait_session_status>
 801102c:	b118      	cbz	r0, 8011036 <uxr_delete_session_retries+0x4a>
 801102e:	7960      	ldrb	r0, [r4, #5]
 8011030:	fab0 f080 	clz	r0, r0
 8011034:	0940      	lsrs	r0, r0, #5
 8011036:	b00f      	add	sp, #60	; 0x3c
 8011038:	bd30      	pop	{r4, r5, pc}
 801103a:	bf00      	nop

0801103c <uxr_prepare_stream_to_write_submessage>:
 801103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011040:	b082      	sub	sp, #8
 8011042:	4682      	mov	sl, r0
 8011044:	4610      	mov	r0, r2
 8011046:	4615      	mov	r5, r2
 8011048:	461e      	mov	r6, r3
 801104a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801104e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8011052:	9101      	str	r1, [sp, #4]
 8011054:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011058:	f000 fad4 	bl	8011604 <uxr_submessage_padding>
 801105c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011060:	f105 0904 	add.w	r9, r5, #4
 8011064:	2b01      	cmp	r3, #1
 8011066:	4481      	add	r9, r0
 8011068:	d01d      	beq.n	80110a6 <uxr_prepare_stream_to_write_submessage+0x6a>
 801106a:	2b02      	cmp	r3, #2
 801106c:	d116      	bne.n	801109c <uxr_prepare_stream_to_write_submessage+0x60>
 801106e:	4621      	mov	r1, r4
 8011070:	f10a 0008 	add.w	r0, sl, #8
 8011074:	f000 fa4e 	bl	8011514 <uxr_get_output_reliable_stream>
 8011078:	4604      	mov	r4, r0
 801107a:	b158      	cbz	r0, 8011094 <uxr_prepare_stream_to_write_submessage+0x58>
 801107c:	4649      	mov	r1, r9
 801107e:	4632      	mov	r2, r6
 8011080:	f005 fcc4 	bl	8016a0c <uxr_prepare_reliable_buffer_to_write>
 8011084:	4604      	mov	r4, r0
 8011086:	b12c      	cbz	r4, 8011094 <uxr_prepare_stream_to_write_submessage+0x58>
 8011088:	4643      	mov	r3, r8
 801108a:	b2aa      	uxth	r2, r5
 801108c:	4639      	mov	r1, r7
 801108e:	4630      	mov	r0, r6
 8011090:	f000 fa78 	bl	8011584 <uxr_buffer_submessage_header>
 8011094:	4620      	mov	r0, r4
 8011096:	b002      	add	sp, #8
 8011098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801109c:	2400      	movs	r4, #0
 801109e:	4620      	mov	r0, r4
 80110a0:	b002      	add	sp, #8
 80110a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110a6:	4621      	mov	r1, r4
 80110a8:	f10a 0008 	add.w	r0, sl, #8
 80110ac:	f000 fa2a 	bl	8011504 <uxr_get_output_best_effort_stream>
 80110b0:	4604      	mov	r4, r0
 80110b2:	2800      	cmp	r0, #0
 80110b4:	d0ee      	beq.n	8011094 <uxr_prepare_stream_to_write_submessage+0x58>
 80110b6:	4649      	mov	r1, r9
 80110b8:	4632      	mov	r2, r6
 80110ba:	f005 fbe3 	bl	8016884 <uxr_prepare_best_effort_buffer_to_write>
 80110be:	4604      	mov	r4, r0
 80110c0:	e7e1      	b.n	8011086 <uxr_prepare_stream_to_write_submessage+0x4a>
 80110c2:	bf00      	nop

080110c4 <uxr_init_session_info>:
 80110c4:	b470      	push	{r4, r5, r6}
 80110c6:	7102      	strb	r2, [r0, #4]
 80110c8:	0e16      	lsrs	r6, r2, #24
 80110ca:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80110ce:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80110d2:	23ff      	movs	r3, #255	; 0xff
 80110d4:	2209      	movs	r2, #9
 80110d6:	7046      	strb	r6, [r0, #1]
 80110d8:	7085      	strb	r5, [r0, #2]
 80110da:	70c4      	strb	r4, [r0, #3]
 80110dc:	7001      	strb	r1, [r0, #0]
 80110de:	bc70      	pop	{r4, r5, r6}
 80110e0:	80c2      	strh	r2, [r0, #6]
 80110e2:	7143      	strb	r3, [r0, #5]
 80110e4:	4770      	bx	lr
 80110e6:	bf00      	nop

080110e8 <uxr_buffer_create_session>:
 80110e8:	b570      	push	{r4, r5, r6, lr}
 80110ea:	b088      	sub	sp, #32
 80110ec:	2300      	movs	r3, #0
 80110ee:	4d12      	ldr	r5, [pc, #72]	; (8011138 <uxr_buffer_create_session+0x50>)
 80110f0:	9307      	str	r3, [sp, #28]
 80110f2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80110f6:	7802      	ldrb	r2, [r0, #0]
 80110f8:	9303      	str	r3, [sp, #12]
 80110fa:	460c      	mov	r4, r1
 80110fc:	f88d 200c 	strb.w	r2, [sp, #12]
 8011100:	2101      	movs	r1, #1
 8011102:	682a      	ldr	r2, [r5, #0]
 8011104:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8011108:	88ad      	ldrh	r5, [r5, #4]
 801110a:	80c1      	strh	r1, [r0, #6]
 801110c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011110:	9200      	str	r2, [sp, #0]
 8011112:	4619      	mov	r1, r3
 8011114:	2210      	movs	r2, #16
 8011116:	4620      	mov	r0, r4
 8011118:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801111c:	9306      	str	r3, [sp, #24]
 801111e:	f88d 300d 	strb.w	r3, [sp, #13]
 8011122:	9602      	str	r6, [sp, #8]
 8011124:	f8ad 5006 	strh.w	r5, [sp, #6]
 8011128:	f000 fa2c 	bl	8011584 <uxr_buffer_submessage_header>
 801112c:	4620      	mov	r0, r4
 801112e:	4669      	mov	r1, sp
 8011130:	f001 fa50 	bl	80125d4 <uxr_serialize_CREATE_CLIENT_Payload>
 8011134:	b008      	add	sp, #32
 8011136:	bd70      	pop	{r4, r5, r6, pc}
 8011138:	080198b8 	.word	0x080198b8

0801113c <uxr_buffer_delete_session>:
 801113c:	b530      	push	{r4, r5, lr}
 801113e:	4b0c      	ldr	r3, [pc, #48]	; (8011170 <uxr_buffer_delete_session+0x34>)
 8011140:	b083      	sub	sp, #12
 8011142:	891b      	ldrh	r3, [r3, #8]
 8011144:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011148:	2202      	movs	r2, #2
 801114a:	460c      	mov	r4, r1
 801114c:	80c2      	strh	r2, [r0, #6]
 801114e:	2300      	movs	r3, #0
 8011150:	2204      	movs	r2, #4
 8011152:	4608      	mov	r0, r1
 8011154:	f44f 7500 	mov.w	r5, #512	; 0x200
 8011158:	2103      	movs	r1, #3
 801115a:	f8ad 5004 	strh.w	r5, [sp, #4]
 801115e:	f000 fa11 	bl	8011584 <uxr_buffer_submessage_header>
 8011162:	4620      	mov	r0, r4
 8011164:	a901      	add	r1, sp, #4
 8011166:	f001 fae3 	bl	8012730 <uxr_serialize_DELETE_Payload>
 801116a:	b003      	add	sp, #12
 801116c:	bd30      	pop	{r4, r5, pc}
 801116e:	bf00      	nop
 8011170:	080198b8 	.word	0x080198b8

08011174 <uxr_read_create_session_status>:
 8011174:	b510      	push	{r4, lr}
 8011176:	b088      	sub	sp, #32
 8011178:	4604      	mov	r4, r0
 801117a:	4608      	mov	r0, r1
 801117c:	a901      	add	r1, sp, #4
 801117e:	f001 fae7 	bl	8012750 <uxr_deserialize_STATUS_AGENT_Payload>
 8011182:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011186:	7163      	strb	r3, [r4, #5]
 8011188:	b008      	add	sp, #32
 801118a:	bd10      	pop	{r4, pc}

0801118c <uxr_read_delete_session_status>:
 801118c:	b510      	push	{r4, lr}
 801118e:	4604      	mov	r4, r0
 8011190:	b084      	sub	sp, #16
 8011192:	4608      	mov	r0, r1
 8011194:	a902      	add	r1, sp, #8
 8011196:	f001 fb0b 	bl	80127b0 <uxr_deserialize_STATUS_Payload>
 801119a:	88e3      	ldrh	r3, [r4, #6]
 801119c:	2b02      	cmp	r3, #2
 801119e:	d001      	beq.n	80111a4 <uxr_read_delete_session_status+0x18>
 80111a0:	b004      	add	sp, #16
 80111a2:	bd10      	pop	{r4, pc}
 80111a4:	f10d 000a 	add.w	r0, sp, #10
 80111a8:	f7fe fec6 	bl	800ff38 <uxr_object_id_from_raw>
 80111ac:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80111b0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80111b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	2b02      	cmp	r3, #2
 80111bc:	bf04      	itt	eq
 80111be:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80111c2:	7163      	strbeq	r3, [r4, #5]
 80111c4:	b004      	add	sp, #16
 80111c6:	bd10      	pop	{r4, pc}

080111c8 <uxr_stamp_create_session_header>:
 80111c8:	b510      	push	{r4, lr}
 80111ca:	4604      	mov	r4, r0
 80111cc:	b08a      	sub	sp, #40	; 0x28
 80111ce:	a802      	add	r0, sp, #8
 80111d0:	2208      	movs	r2, #8
 80111d2:	f7fe fc31 	bl	800fa38 <ucdr_init_buffer>
 80111d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111da:	9400      	str	r4, [sp, #0]
 80111dc:	2300      	movs	r3, #0
 80111de:	a802      	add	r0, sp, #8
 80111e0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80111e4:	461a      	mov	r2, r3
 80111e6:	f000 fbcb 	bl	8011980 <uxr_serialize_message_header>
 80111ea:	b00a      	add	sp, #40	; 0x28
 80111ec:	bd10      	pop	{r4, pc}
 80111ee:	bf00      	nop

080111f0 <uxr_stamp_session_header>:
 80111f0:	b570      	push	{r4, r5, r6, lr}
 80111f2:	4604      	mov	r4, r0
 80111f4:	b08c      	sub	sp, #48	; 0x30
 80111f6:	460d      	mov	r5, r1
 80111f8:	4616      	mov	r6, r2
 80111fa:	4619      	mov	r1, r3
 80111fc:	a804      	add	r0, sp, #16
 80111fe:	2208      	movs	r2, #8
 8011200:	9603      	str	r6, [sp, #12]
 8011202:	f7fe fc19 	bl	800fa38 <ucdr_init_buffer>
 8011206:	f814 1b01 	ldrb.w	r1, [r4], #1
 801120a:	9b03      	ldr	r3, [sp, #12]
 801120c:	9400      	str	r4, [sp, #0]
 801120e:	462a      	mov	r2, r5
 8011210:	a804      	add	r0, sp, #16
 8011212:	f000 fbb5 	bl	8011980 <uxr_serialize_message_header>
 8011216:	b00c      	add	sp, #48	; 0x30
 8011218:	bd70      	pop	{r4, r5, r6, pc}
 801121a:	bf00      	nop

0801121c <uxr_read_session_header>:
 801121c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011220:	4607      	mov	r7, r0
 8011222:	b084      	sub	sp, #16
 8011224:	4608      	mov	r0, r1
 8011226:	460c      	mov	r4, r1
 8011228:	4615      	mov	r5, r2
 801122a:	461e      	mov	r6, r3
 801122c:	f7fe fc34 	bl	800fa98 <ucdr_buffer_remaining>
 8011230:	2808      	cmp	r0, #8
 8011232:	d803      	bhi.n	801123c <uxr_read_session_header+0x20>
 8011234:	2000      	movs	r0, #0
 8011236:	b004      	add	sp, #16
 8011238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801123c:	f10d 080c 	add.w	r8, sp, #12
 8011240:	4633      	mov	r3, r6
 8011242:	462a      	mov	r2, r5
 8011244:	4620      	mov	r0, r4
 8011246:	f8cd 8000 	str.w	r8, [sp]
 801124a:	f10d 010b 	add.w	r1, sp, #11
 801124e:	f000 fbb5 	bl	80119bc <uxr_deserialize_message_header>
 8011252:	783a      	ldrb	r2, [r7, #0]
 8011254:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011258:	4293      	cmp	r3, r2
 801125a:	d1eb      	bne.n	8011234 <uxr_read_session_header+0x18>
 801125c:	061b      	lsls	r3, r3, #24
 801125e:	d41c      	bmi.n	801129a <uxr_read_session_header+0x7e>
 8011260:	f898 2000 	ldrb.w	r2, [r8]
 8011264:	787b      	ldrb	r3, [r7, #1]
 8011266:	429a      	cmp	r2, r3
 8011268:	d003      	beq.n	8011272 <uxr_read_session_header+0x56>
 801126a:	2001      	movs	r0, #1
 801126c:	f080 0001 	eor.w	r0, r0, #1
 8011270:	e7e1      	b.n	8011236 <uxr_read_session_header+0x1a>
 8011272:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011276:	78bb      	ldrb	r3, [r7, #2]
 8011278:	429a      	cmp	r2, r3
 801127a:	f107 0102 	add.w	r1, r7, #2
 801127e:	d1f4      	bne.n	801126a <uxr_read_session_header+0x4e>
 8011280:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011284:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011288:	429a      	cmp	r2, r3
 801128a:	d1ee      	bne.n	801126a <uxr_read_session_header+0x4e>
 801128c:	784b      	ldrb	r3, [r1, #1]
 801128e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011292:	429a      	cmp	r2, r3
 8011294:	d1e9      	bne.n	801126a <uxr_read_session_header+0x4e>
 8011296:	2000      	movs	r0, #0
 8011298:	e7e8      	b.n	801126c <uxr_read_session_header+0x50>
 801129a:	2001      	movs	r0, #1
 801129c:	e7cb      	b.n	8011236 <uxr_read_session_header+0x1a>
 801129e:	bf00      	nop

080112a0 <uxr_session_header_offset>:
 80112a0:	f990 3000 	ldrsb.w	r3, [r0]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	bfac      	ite	ge
 80112a8:	2008      	movge	r0, #8
 80112aa:	2004      	movlt	r0, #4
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop

080112b0 <uxr_init_base_object_request>:
 80112b0:	b530      	push	{r4, r5, lr}
 80112b2:	88c3      	ldrh	r3, [r0, #6]
 80112b4:	b083      	sub	sp, #12
 80112b6:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80112ba:	9101      	str	r1, [sp, #4]
 80112bc:	f1a3 010a 	sub.w	r1, r3, #10
 80112c0:	b289      	uxth	r1, r1
 80112c2:	42a1      	cmp	r1, r4
 80112c4:	d80e      	bhi.n	80112e4 <uxr_init_base_object_request+0x34>
 80112c6:	3301      	adds	r3, #1
 80112c8:	b29c      	uxth	r4, r3
 80112ca:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80112ce:	b2db      	uxtb	r3, r3
 80112d0:	80c4      	strh	r4, [r0, #6]
 80112d2:	1c91      	adds	r1, r2, #2
 80112d4:	9801      	ldr	r0, [sp, #4]
 80112d6:	7015      	strb	r5, [r2, #0]
 80112d8:	7053      	strb	r3, [r2, #1]
 80112da:	f7fe fe41 	bl	800ff60 <uxr_object_id_to_raw>
 80112de:	4620      	mov	r0, r4
 80112e0:	b003      	add	sp, #12
 80112e2:	bd30      	pop	{r4, r5, pc}
 80112e4:	230a      	movs	r3, #10
 80112e6:	461c      	mov	r4, r3
 80112e8:	2500      	movs	r5, #0
 80112ea:	e7f1      	b.n	80112d0 <uxr_init_base_object_request+0x20>

080112ec <uxr_parse_base_object_request>:
 80112ec:	b570      	push	{r4, r5, r6, lr}
 80112ee:	4604      	mov	r4, r0
 80112f0:	3002      	adds	r0, #2
 80112f2:	460d      	mov	r5, r1
 80112f4:	4616      	mov	r6, r2
 80112f6:	f7fe fe1f 	bl	800ff38 <uxr_object_id_from_raw>
 80112fa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80112fe:	8028      	strh	r0, [r5, #0]
 8011300:	806b      	strh	r3, [r5, #2]
 8011302:	7822      	ldrb	r2, [r4, #0]
 8011304:	7863      	ldrb	r3, [r4, #1]
 8011306:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801130a:	8033      	strh	r3, [r6, #0]
 801130c:	bd70      	pop	{r4, r5, r6, pc}
 801130e:	bf00      	nop

08011310 <uxr_stream_id>:
 8011310:	b410      	push	{r4}
 8011312:	2901      	cmp	r1, #1
 8011314:	b083      	sub	sp, #12
 8011316:	d01f      	beq.n	8011358 <uxr_stream_id+0x48>
 8011318:	2902      	cmp	r1, #2
 801131a:	f04f 0400 	mov.w	r4, #0
 801131e:	d01e      	beq.n	801135e <uxr_stream_id+0x4e>
 8011320:	2300      	movs	r3, #0
 8011322:	f364 0307 	bfi	r3, r4, #0, #8
 8011326:	f360 230f 	bfi	r3, r0, #8, #8
 801132a:	f361 4317 	bfi	r3, r1, #16, #8
 801132e:	f362 631f 	bfi	r3, r2, #24, #8
 8011332:	b2da      	uxtb	r2, r3
 8011334:	2000      	movs	r0, #0
 8011336:	f362 0007 	bfi	r0, r2, #0, #8
 801133a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801133e:	f362 200f 	bfi	r0, r2, #8, #8
 8011342:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011346:	f362 4017 	bfi	r0, r2, #16, #8
 801134a:	0e1b      	lsrs	r3, r3, #24
 801134c:	f363 601f 	bfi	r0, r3, #24, #8
 8011350:	b003      	add	sp, #12
 8011352:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011356:	4770      	bx	lr
 8011358:	1c44      	adds	r4, r0, #1
 801135a:	b2e4      	uxtb	r4, r4
 801135c:	e7e0      	b.n	8011320 <uxr_stream_id+0x10>
 801135e:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8011362:	e7dd      	b.n	8011320 <uxr_stream_id+0x10>

08011364 <uxr_stream_id_from_raw>:
 8011364:	b410      	push	{r4}
 8011366:	b083      	sub	sp, #12
 8011368:	b128      	cbz	r0, 8011376 <uxr_stream_id_from_raw+0x12>
 801136a:	0603      	lsls	r3, r0, #24
 801136c:	d421      	bmi.n	80113b2 <uxr_stream_id_from_raw+0x4e>
 801136e:	1e42      	subs	r2, r0, #1
 8011370:	b2d2      	uxtb	r2, r2
 8011372:	2401      	movs	r4, #1
 8011374:	e001      	b.n	801137a <uxr_stream_id_from_raw+0x16>
 8011376:	4604      	mov	r4, r0
 8011378:	4602      	mov	r2, r0
 801137a:	2300      	movs	r3, #0
 801137c:	f360 0307 	bfi	r3, r0, #0, #8
 8011380:	f362 230f 	bfi	r3, r2, #8, #8
 8011384:	f364 4317 	bfi	r3, r4, #16, #8
 8011388:	f361 631f 	bfi	r3, r1, #24, #8
 801138c:	b2da      	uxtb	r2, r3
 801138e:	2000      	movs	r0, #0
 8011390:	f362 0007 	bfi	r0, r2, #0, #8
 8011394:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011398:	f362 200f 	bfi	r0, r2, #8, #8
 801139c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80113a0:	f362 4017 	bfi	r0, r2, #16, #8
 80113a4:	0e1b      	lsrs	r3, r3, #24
 80113a6:	f363 601f 	bfi	r0, r3, #24, #8
 80113aa:	b003      	add	sp, #12
 80113ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113b0:	4770      	bx	lr
 80113b2:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80113b6:	2402      	movs	r4, #2
 80113b8:	e7df      	b.n	801137a <uxr_stream_id_from_raw+0x16>
 80113ba:	bf00      	nop

080113bc <uxr_init_stream_storage>:
 80113bc:	2300      	movs	r3, #0
 80113be:	7403      	strb	r3, [r0, #16]
 80113c0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80113c4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80113c8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80113cc:	4770      	bx	lr
 80113ce:	bf00      	nop

080113d0 <uxr_reset_stream_storage>:
 80113d0:	b570      	push	{r4, r5, r6, lr}
 80113d2:	7c03      	ldrb	r3, [r0, #16]
 80113d4:	4604      	mov	r4, r0
 80113d6:	b153      	cbz	r3, 80113ee <uxr_reset_stream_storage+0x1e>
 80113d8:	4606      	mov	r6, r0
 80113da:	2500      	movs	r5, #0
 80113dc:	4630      	mov	r0, r6
 80113de:	f005 fa4b 	bl	8016878 <uxr_reset_output_best_effort_stream>
 80113e2:	7c23      	ldrb	r3, [r4, #16]
 80113e4:	3501      	adds	r5, #1
 80113e6:	42ab      	cmp	r3, r5
 80113e8:	f106 0610 	add.w	r6, r6, #16
 80113ec:	d8f6      	bhi.n	80113dc <uxr_reset_stream_storage+0xc>
 80113ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80113f2:	b163      	cbz	r3, 801140e <uxr_reset_stream_storage+0x3e>
 80113f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80113f8:	2500      	movs	r5, #0
 80113fa:	4630      	mov	r0, r6
 80113fc:	f005 f848 	bl	8016490 <uxr_reset_input_best_effort_stream>
 8011400:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011404:	3501      	adds	r5, #1
 8011406:	42ab      	cmp	r3, r5
 8011408:	f106 0602 	add.w	r6, r6, #2
 801140c:	d8f5      	bhi.n	80113fa <uxr_reset_stream_storage+0x2a>
 801140e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011412:	b163      	cbz	r3, 801142e <uxr_reset_stream_storage+0x5e>
 8011414:	f104 0618 	add.w	r6, r4, #24
 8011418:	2500      	movs	r5, #0
 801141a:	4630      	mov	r0, r6
 801141c:	f005 facc 	bl	80169b8 <uxr_reset_output_reliable_stream>
 8011420:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011424:	3501      	adds	r5, #1
 8011426:	42ab      	cmp	r3, r5
 8011428:	f106 0628 	add.w	r6, r6, #40	; 0x28
 801142c:	d8f5      	bhi.n	801141a <uxr_reset_stream_storage+0x4a>
 801142e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011432:	b163      	cbz	r3, 801144e <uxr_reset_stream_storage+0x7e>
 8011434:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8011438:	2500      	movs	r5, #0
 801143a:	4630      	mov	r0, r6
 801143c:	f005 f890 	bl	8016560 <uxr_reset_input_reliable_stream>
 8011440:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011444:	3501      	adds	r5, #1
 8011446:	42ab      	cmp	r3, r5
 8011448:	f106 0618 	add.w	r6, r6, #24
 801144c:	d8f5      	bhi.n	801143a <uxr_reset_stream_storage+0x6a>
 801144e:	bd70      	pop	{r4, r5, r6, pc}

08011450 <uxr_add_output_best_effort_buffer>:
 8011450:	b530      	push	{r4, r5, lr}
 8011452:	7c04      	ldrb	r4, [r0, #16]
 8011454:	1c65      	adds	r5, r4, #1
 8011456:	b083      	sub	sp, #12
 8011458:	7405      	strb	r5, [r0, #16]
 801145a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801145e:	f005 f9ff 	bl	8016860 <uxr_init_output_best_effort_stream>
 8011462:	2201      	movs	r2, #1
 8011464:	4620      	mov	r0, r4
 8011466:	4611      	mov	r1, r2
 8011468:	b003      	add	sp, #12
 801146a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801146e:	f7ff bf4f 	b.w	8011310 <uxr_stream_id>
 8011472:	bf00      	nop

08011474 <uxr_add_output_reliable_buffer>:
 8011474:	b570      	push	{r4, r5, r6, lr}
 8011476:	b084      	sub	sp, #16
 8011478:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 801147c:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8011480:	9600      	str	r6, [sp, #0]
 8011482:	2528      	movs	r5, #40	; 0x28
 8011484:	1c66      	adds	r6, r4, #1
 8011486:	fb05 0504 	mla	r5, r5, r4, r0
 801148a:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 801148e:	f105 0018 	add.w	r0, r5, #24
 8011492:	f005 fa5f 	bl	8016954 <uxr_init_output_reliable_stream>
 8011496:	4620      	mov	r0, r4
 8011498:	2201      	movs	r2, #1
 801149a:	2102      	movs	r1, #2
 801149c:	b004      	add	sp, #16
 801149e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114a2:	f7ff bf35 	b.w	8011310 <uxr_stream_id>
 80114a6:	bf00      	nop

080114a8 <uxr_add_input_best_effort_buffer>:
 80114a8:	b510      	push	{r4, lr}
 80114aa:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80114ae:	1c62      	adds	r2, r4, #1
 80114b0:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80114b4:	b082      	sub	sp, #8
 80114b6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80114ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80114be:	f004 ffe3 	bl	8016488 <uxr_init_input_best_effort_stream>
 80114c2:	4620      	mov	r0, r4
 80114c4:	2200      	movs	r2, #0
 80114c6:	2101      	movs	r1, #1
 80114c8:	b002      	add	sp, #8
 80114ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114ce:	f7ff bf1f 	b.w	8011310 <uxr_stream_id>
 80114d2:	bf00      	nop

080114d4 <uxr_add_input_reliable_buffer>:
 80114d4:	b570      	push	{r4, r5, r6, lr}
 80114d6:	b084      	sub	sp, #16
 80114d8:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 80114dc:	9e08      	ldr	r6, [sp, #32]
 80114de:	9600      	str	r6, [sp, #0]
 80114e0:	2518      	movs	r5, #24
 80114e2:	1c66      	adds	r6, r4, #1
 80114e4:	fb05 0504 	mla	r5, r5, r4, r0
 80114e8:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 80114ec:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80114f0:	f005 f812 	bl	8016518 <uxr_init_input_reliable_stream>
 80114f4:	4620      	mov	r0, r4
 80114f6:	2200      	movs	r2, #0
 80114f8:	2102      	movs	r1, #2
 80114fa:	b004      	add	sp, #16
 80114fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011500:	f7ff bf06 	b.w	8011310 <uxr_stream_id>

08011504 <uxr_get_output_best_effort_stream>:
 8011504:	7c03      	ldrb	r3, [r0, #16]
 8011506:	428b      	cmp	r3, r1
 8011508:	bf8c      	ite	hi
 801150a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801150e:	2000      	movls	r0, #0
 8011510:	4770      	bx	lr
 8011512:	bf00      	nop

08011514 <uxr_get_output_reliable_stream>:
 8011514:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011518:	428b      	cmp	r3, r1
 801151a:	bf83      	ittte	hi
 801151c:	2328      	movhi	r3, #40	; 0x28
 801151e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8011522:	f101 0018 	addhi.w	r0, r1, #24
 8011526:	2000      	movls	r0, #0
 8011528:	4770      	bx	lr
 801152a:	bf00      	nop

0801152c <uxr_get_input_best_effort_stream>:
 801152c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8011530:	428b      	cmp	r3, r1
 8011532:	bf86      	itte	hi
 8011534:	3121      	addhi	r1, #33	; 0x21
 8011536:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801153a:	2000      	movls	r0, #0
 801153c:	4770      	bx	lr
 801153e:	bf00      	nop

08011540 <uxr_get_input_reliable_stream>:
 8011540:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8011544:	428b      	cmp	r3, r1
 8011546:	bf83      	ittte	hi
 8011548:	2318      	movhi	r3, #24
 801154a:	fb03 0101 	mlahi	r1, r3, r1, r0
 801154e:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 8011552:	2000      	movls	r0, #0
 8011554:	4770      	bx	lr
 8011556:	bf00      	nop

08011558 <uxr_output_streams_confirmed>:
 8011558:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801155c:	b183      	cbz	r3, 8011580 <uxr_output_streams_confirmed+0x28>
 801155e:	b570      	push	{r4, r5, r6, lr}
 8011560:	4606      	mov	r6, r0
 8011562:	f100 0518 	add.w	r5, r0, #24
 8011566:	2400      	movs	r4, #0
 8011568:	e001      	b.n	801156e <uxr_output_streams_confirmed+0x16>
 801156a:	3528      	adds	r5, #40	; 0x28
 801156c:	b138      	cbz	r0, 801157e <uxr_output_streams_confirmed+0x26>
 801156e:	4628      	mov	r0, r5
 8011570:	f005 fc86 	bl	8016e80 <uxr_is_output_up_to_date>
 8011574:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8011578:	3401      	adds	r4, #1
 801157a:	42a3      	cmp	r3, r4
 801157c:	d8f5      	bhi.n	801156a <uxr_output_streams_confirmed+0x12>
 801157e:	bd70      	pop	{r4, r5, r6, pc}
 8011580:	2001      	movs	r0, #1
 8011582:	4770      	bx	lr

08011584 <uxr_buffer_submessage_header>:
 8011584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011586:	4604      	mov	r4, r0
 8011588:	460e      	mov	r6, r1
 801158a:	2104      	movs	r1, #4
 801158c:	4615      	mov	r5, r2
 801158e:	461f      	mov	r7, r3
 8011590:	f7fe fa6c 	bl	800fa6c <ucdr_align_to>
 8011594:	2301      	movs	r3, #1
 8011596:	ea47 0203 	orr.w	r2, r7, r3
 801159a:	4631      	mov	r1, r6
 801159c:	7523      	strb	r3, [r4, #20]
 801159e:	4620      	mov	r0, r4
 80115a0:	462b      	mov	r3, r5
 80115a2:	f000 fa2b 	bl	80119fc <uxr_serialize_submessage_header>
 80115a6:	4620      	mov	r0, r4
 80115a8:	f7fe fa76 	bl	800fa98 <ucdr_buffer_remaining>
 80115ac:	42a8      	cmp	r0, r5
 80115ae:	bf34      	ite	cc
 80115b0:	2000      	movcc	r0, #0
 80115b2:	2001      	movcs	r0, #1
 80115b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115b6:	bf00      	nop

080115b8 <uxr_read_submessage_header>:
 80115b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115bc:	4604      	mov	r4, r0
 80115be:	460d      	mov	r5, r1
 80115c0:	2104      	movs	r1, #4
 80115c2:	4616      	mov	r6, r2
 80115c4:	4698      	mov	r8, r3
 80115c6:	f7fe fa51 	bl	800fa6c <ucdr_align_to>
 80115ca:	4620      	mov	r0, r4
 80115cc:	f7fe fa64 	bl	800fa98 <ucdr_buffer_remaining>
 80115d0:	2803      	cmp	r0, #3
 80115d2:	bf8c      	ite	hi
 80115d4:	2701      	movhi	r7, #1
 80115d6:	2700      	movls	r7, #0
 80115d8:	d802      	bhi.n	80115e0 <uxr_read_submessage_header+0x28>
 80115da:	4638      	mov	r0, r7
 80115dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e0:	4633      	mov	r3, r6
 80115e2:	4642      	mov	r2, r8
 80115e4:	4620      	mov	r0, r4
 80115e6:	4629      	mov	r1, r5
 80115e8:	f000 fa1c 	bl	8011a24 <uxr_deserialize_submessage_header>
 80115ec:	f898 3000 	ldrb.w	r3, [r8]
 80115f0:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80115f4:	f003 0301 	and.w	r3, r3, #1
 80115f8:	f888 2000 	strb.w	r2, [r8]
 80115fc:	7523      	strb	r3, [r4, #20]
 80115fe:	4638      	mov	r0, r7
 8011600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011604 <uxr_submessage_padding>:
 8011604:	f010 0003 	ands.w	r0, r0, #3
 8011608:	bf18      	it	ne
 801160a:	f1c0 0004 	rsbne	r0, r0, #4
 801160e:	4770      	bx	lr

08011610 <uxr_millis>:
 8011610:	b510      	push	{r4, lr}
 8011612:	b084      	sub	sp, #16
 8011614:	4669      	mov	r1, sp
 8011616:	2001      	movs	r0, #1
 8011618:	f7f1 f9d2 	bl	80029c0 <clock_gettime>
 801161c:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011620:	4907      	ldr	r1, [pc, #28]	; (8011640 <uxr_millis+0x30>)
 8011622:	9802      	ldr	r0, [sp, #8]
 8011624:	fba2 2301 	umull	r2, r3, r2, r1
 8011628:	fb01 3304 	mla	r3, r1, r4, r3
 801162c:	4604      	mov	r4, r0
 801162e:	1810      	adds	r0, r2, r0
 8011630:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8011634:	4a03      	ldr	r2, [pc, #12]	; (8011644 <uxr_millis+0x34>)
 8011636:	2300      	movs	r3, #0
 8011638:	f7ef fa58 	bl	8000aec <__aeabi_ldivmod>
 801163c:	b004      	add	sp, #16
 801163e:	bd10      	pop	{r4, pc}
 8011640:	3b9aca00 	.word	0x3b9aca00
 8011644:	000f4240 	.word	0x000f4240

08011648 <uxr_nanos>:
 8011648:	b510      	push	{r4, lr}
 801164a:	b084      	sub	sp, #16
 801164c:	4669      	mov	r1, sp
 801164e:	2001      	movs	r0, #1
 8011650:	f7f1 f9b6 	bl	80029c0 <clock_gettime>
 8011654:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011658:	4905      	ldr	r1, [pc, #20]	; (8011670 <uxr_nanos+0x28>)
 801165a:	9802      	ldr	r0, [sp, #8]
 801165c:	fba2 2301 	umull	r2, r3, r2, r1
 8011660:	fb01 3304 	mla	r3, r1, r4, r3
 8011664:	4604      	mov	r4, r0
 8011666:	1810      	adds	r0, r2, r0
 8011668:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 801166c:	b004      	add	sp, #16
 801166e:	bd10      	pop	{r4, pc}
 8011670:	3b9aca00 	.word	0x3b9aca00

08011674 <on_full_output_buffer_fragmented>:
 8011674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011678:	460c      	mov	r4, r1
 801167a:	b08a      	sub	sp, #40	; 0x28
 801167c:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8011680:	4606      	mov	r6, r0
 8011682:	f104 0008 	add.w	r0, r4, #8
 8011686:	f7ff ff45 	bl	8011514 <uxr_get_output_reliable_stream>
 801168a:	4605      	mov	r5, r0
 801168c:	f005 fc02 	bl	8016e94 <get_available_free_slots>
 8011690:	b968      	cbnz	r0, 80116ae <on_full_output_buffer_fragmented+0x3a>
 8011692:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8011696:	4620      	mov	r0, r4
 8011698:	4798      	blx	r3
 801169a:	b918      	cbnz	r0, 80116a4 <on_full_output_buffer_fragmented+0x30>
 801169c:	2001      	movs	r0, #1
 801169e:	b00a      	add	sp, #40	; 0x28
 80116a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116a4:	4628      	mov	r0, r5
 80116a6:	f005 fbf5 	bl	8016e94 <get_available_free_slots>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	d0f6      	beq.n	801169c <on_full_output_buffer_fragmented+0x28>
 80116ae:	8928      	ldrh	r0, [r5, #8]
 80116b0:	89eb      	ldrh	r3, [r5, #14]
 80116b2:	7b2a      	ldrb	r2, [r5, #12]
 80116b4:	fbb3 f1f0 	udiv	r1, r3, r0
 80116b8:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 80116bc:	fb00 3111 	mls	r1, r0, r1, r3
 80116c0:	b28b      	uxth	r3, r1
 80116c2:	32fc      	adds	r2, #252	; 0xfc
 80116c4:	6869      	ldr	r1, [r5, #4]
 80116c6:	fbb1 f1f0 	udiv	r1, r1, r0
 80116ca:	1f0f      	subs	r7, r1, #4
 80116cc:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 80116d0:	fb01 f103 	mul.w	r1, r1, r3
 80116d4:	443a      	add	r2, r7
 80116d6:	682b      	ldr	r3, [r5, #0]
 80116d8:	fa1f f882 	uxth.w	r8, r2
 80116dc:	3104      	adds	r1, #4
 80116de:	4419      	add	r1, r3
 80116e0:	eba0 0008 	sub.w	r0, r0, r8
 80116e4:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 80116e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116ec:	9300      	str	r3, [sp, #0]
 80116ee:	463a      	mov	r2, r7
 80116f0:	2300      	movs	r3, #0
 80116f2:	a802      	add	r0, sp, #8
 80116f4:	f7fe f98e 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 80116f8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80116fc:	f102 0308 	add.w	r3, r2, #8
 8011700:	42bb      	cmp	r3, r7
 8011702:	d927      	bls.n	8011754 <on_full_output_buffer_fragmented+0xe0>
 8011704:	4642      	mov	r2, r8
 8011706:	2300      	movs	r3, #0
 8011708:	210d      	movs	r1, #13
 801170a:	a802      	add	r0, sp, #8
 801170c:	f7ff ff3a 	bl	8011584 <uxr_buffer_submessage_header>
 8011710:	8928      	ldrh	r0, [r5, #8]
 8011712:	89eb      	ldrh	r3, [r5, #14]
 8011714:	fbb3 f1f0 	udiv	r1, r3, r0
 8011718:	fb00 3111 	mls	r1, r0, r1, r3
 801171c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011720:	b289      	uxth	r1, r1
 8011722:	fbb3 f3f0 	udiv	r3, r3, r0
 8011726:	fb03 f301 	mul.w	r3, r3, r1
 801172a:	50d7      	str	r7, [r2, r3]
 801172c:	89e8      	ldrh	r0, [r5, #14]
 801172e:	2101      	movs	r1, #1
 8011730:	f005 fbd0 	bl	8016ed4 <uxr_seq_num_add>
 8011734:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8011738:	81e8      	strh	r0, [r5, #14]
 801173a:	1a52      	subs	r2, r2, r1
 801173c:	4630      	mov	r0, r6
 801173e:	f7fe f97b 	bl	800fa38 <ucdr_init_buffer>
 8011742:	4630      	mov	r0, r6
 8011744:	490f      	ldr	r1, [pc, #60]	; (8011784 <on_full_output_buffer_fragmented+0x110>)
 8011746:	4622      	mov	r2, r4
 8011748:	f7fe f94c 	bl	800f9e4 <ucdr_set_on_full_buffer_callback>
 801174c:	2000      	movs	r0, #0
 801174e:	b00a      	add	sp, #40	; 0x28
 8011750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011754:	b292      	uxth	r2, r2
 8011756:	2302      	movs	r3, #2
 8011758:	210d      	movs	r1, #13
 801175a:	a802      	add	r0, sp, #8
 801175c:	f7ff ff12 	bl	8011584 <uxr_buffer_submessage_header>
 8011760:	8928      	ldrh	r0, [r5, #8]
 8011762:	89eb      	ldrh	r3, [r5, #14]
 8011764:	fbb3 f2f0 	udiv	r2, r3, r0
 8011768:	fb00 3212 	mls	r2, r0, r2, r3
 801176c:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8011770:	686b      	ldr	r3, [r5, #4]
 8011772:	fbb3 f3f0 	udiv	r3, r3, r0
 8011776:	b292      	uxth	r2, r2
 8011778:	6828      	ldr	r0, [r5, #0]
 801177a:	fb03 f302 	mul.w	r3, r3, r2
 801177e:	3108      	adds	r1, #8
 8011780:	50c1      	str	r1, [r0, r3]
 8011782:	e7d3      	b.n	801172c <on_full_output_buffer_fragmented+0xb8>
 8011784:	08011675 	.word	0x08011675

08011788 <uxr_prepare_output_stream>:
 8011788:	b5f0      	push	{r4, r5, r6, r7, lr}
 801178a:	b087      	sub	sp, #28
 801178c:	2407      	movs	r4, #7
 801178e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011790:	9202      	str	r2, [sp, #8]
 8011792:	2500      	movs	r5, #0
 8011794:	1d32      	adds	r2, r6, #4
 8011796:	e9cd 4500 	strd	r4, r5, [sp]
 801179a:	9103      	str	r1, [sp, #12]
 801179c:	461c      	mov	r4, r3
 801179e:	4606      	mov	r6, r0
 80117a0:	f7ff fc4c 	bl	801103c <uxr_prepare_stream_to_write_submessage>
 80117a4:	f080 0201 	eor.w	r2, r0, #1
 80117a8:	b2d2      	uxtb	r2, r2
 80117aa:	75a2      	strb	r2, [r4, #22]
 80117ac:	b112      	cbz	r2, 80117b4 <uxr_prepare_output_stream+0x2c>
 80117ae:	4628      	mov	r0, r5
 80117b0:	b007      	add	sp, #28
 80117b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117b4:	aa05      	add	r2, sp, #20
 80117b6:	9902      	ldr	r1, [sp, #8]
 80117b8:	4630      	mov	r0, r6
 80117ba:	f7ff fd79 	bl	80112b0 <uxr_init_base_object_request>
 80117be:	a905      	add	r1, sp, #20
 80117c0:	4605      	mov	r5, r0
 80117c2:	4620      	mov	r0, r4
 80117c4:	f001 f872 	bl	80128ac <uxr_serialize_WRITE_DATA_Payload_Data>
 80117c8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80117cc:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 80117d0:	1a52      	subs	r2, r2, r1
 80117d2:	4620      	mov	r0, r4
 80117d4:	f7fe f930 	bl	800fa38 <ucdr_init_buffer>
 80117d8:	4620      	mov	r0, r4
 80117da:	463a      	mov	r2, r7
 80117dc:	4631      	mov	r1, r6
 80117de:	f7fe f901 	bl	800f9e4 <ucdr_set_on_full_buffer_callback>
 80117e2:	4628      	mov	r0, r5
 80117e4:	b007      	add	sp, #28
 80117e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080117e8 <uxr_prepare_output_stream_fragmented>:
 80117e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ec:	b093      	sub	sp, #76	; 0x4c
 80117ee:	4605      	mov	r5, r0
 80117f0:	9107      	str	r1, [sp, #28]
 80117f2:	3008      	adds	r0, #8
 80117f4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80117f8:	9303      	str	r3, [sp, #12]
 80117fa:	9206      	str	r2, [sp, #24]
 80117fc:	f7ff fe8a 	bl	8011514 <uxr_get_output_reliable_stream>
 8011800:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011804:	2b01      	cmp	r3, #1
 8011806:	f000 8094 	beq.w	8011932 <uxr_prepare_output_stream_fragmented+0x14a>
 801180a:	4604      	mov	r4, r0
 801180c:	2800      	cmp	r0, #0
 801180e:	f000 8090 	beq.w	8011932 <uxr_prepare_output_stream_fragmented+0x14a>
 8011812:	f005 fb3f 	bl	8016e94 <get_available_free_slots>
 8011816:	2800      	cmp	r0, #0
 8011818:	f000 8086 	beq.w	8011928 <uxr_prepare_output_stream_fragmented+0x140>
 801181c:	8922      	ldrh	r2, [r4, #8]
 801181e:	89e7      	ldrh	r7, [r4, #14]
 8011820:	fbb7 f8f2 	udiv	r8, r7, r2
 8011824:	e9d4 3100 	ldrd	r3, r1, [r4]
 8011828:	fb02 7818 	mls	r8, r2, r8, r7
 801182c:	fa1f f888 	uxth.w	r8, r8
 8011830:	fbb1 f2f2 	udiv	r2, r1, r2
 8011834:	fb02 f808 	mul.w	r8, r2, r8
 8011838:	f108 0804 	add.w	r8, r8, #4
 801183c:	4498      	add	r8, r3
 801183e:	7b23      	ldrb	r3, [r4, #12]
 8011840:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8011844:	9204      	str	r2, [sp, #16]
 8011846:	4553      	cmp	r3, sl
 8011848:	f1a2 0b04 	sub.w	fp, r2, #4
 801184c:	d37d      	bcc.n	801194a <uxr_prepare_output_stream_fragmented+0x162>
 801184e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8011850:	f8cd a000 	str.w	sl, [sp]
 8011854:	f1ab 0904 	sub.w	r9, fp, #4
 8011858:	eba9 0903 	sub.w	r9, r9, r3
 801185c:	3608      	adds	r6, #8
 801185e:	a80a      	add	r0, sp, #40	; 0x28
 8011860:	2300      	movs	r3, #0
 8011862:	465a      	mov	r2, fp
 8011864:	4641      	mov	r1, r8
 8011866:	fa1f f989 	uxth.w	r9, r9
 801186a:	9605      	str	r6, [sp, #20]
 801186c:	f7fe f8d2 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 8011870:	455e      	cmp	r6, fp
 8011872:	bf34      	ite	cc
 8011874:	2302      	movcc	r3, #2
 8011876:	2300      	movcs	r3, #0
 8011878:	464a      	mov	r2, r9
 801187a:	210d      	movs	r1, #13
 801187c:	a80a      	add	r0, sp, #40	; 0x28
 801187e:	f7ff fe81 	bl	8011584 <uxr_buffer_submessage_header>
 8011882:	8920      	ldrh	r0, [r4, #8]
 8011884:	fbb7 f3f0 	udiv	r3, r7, r0
 8011888:	e9d4 2100 	ldrd	r2, r1, [r4]
 801188c:	fb00 7313 	mls	r3, r0, r3, r7
 8011890:	b29b      	uxth	r3, r3
 8011892:	fbb1 f1f0 	udiv	r1, r1, r0
 8011896:	fb03 f301 	mul.w	r3, r3, r1
 801189a:	4638      	mov	r0, r7
 801189c:	f842 b003 	str.w	fp, [r2, r3]
 80118a0:	2101      	movs	r1, #1
 80118a2:	f005 fb17 	bl	8016ed4 <uxr_seq_num_add>
 80118a6:	9b04      	ldr	r3, [sp, #16]
 80118a8:	9e03      	ldr	r6, [sp, #12]
 80118aa:	f1a3 0208 	sub.w	r2, r3, #8
 80118ae:	f10a 0104 	add.w	r1, sl, #4
 80118b2:	4607      	mov	r7, r0
 80118b4:	eba2 020a 	sub.w	r2, r2, sl
 80118b8:	4441      	add	r1, r8
 80118ba:	4630      	mov	r0, r6
 80118bc:	f7fe f8bc 	bl	800fa38 <ucdr_init_buffer>
 80118c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80118c2:	81e7      	strh	r7, [r4, #14]
 80118c4:	1d1a      	adds	r2, r3, #4
 80118c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80118ca:	bf28      	it	cs
 80118cc:	2200      	movcs	r2, #0
 80118ce:	b292      	uxth	r2, r2
 80118d0:	2300      	movs	r3, #0
 80118d2:	2107      	movs	r1, #7
 80118d4:	4630      	mov	r0, r6
 80118d6:	f7ff fe55 	bl	8011584 <uxr_buffer_submessage_header>
 80118da:	9906      	ldr	r1, [sp, #24]
 80118dc:	aa09      	add	r2, sp, #36	; 0x24
 80118de:	4628      	mov	r0, r5
 80118e0:	f7ff fce6 	bl	80112b0 <uxr_init_base_object_request>
 80118e4:	4604      	mov	r4, r0
 80118e6:	b328      	cbz	r0, 8011934 <uxr_prepare_output_stream_fragmented+0x14c>
 80118e8:	9e03      	ldr	r6, [sp, #12]
 80118ea:	a909      	add	r1, sp, #36	; 0x24
 80118ec:	4630      	mov	r0, r6
 80118ee:	f000 ffdd 	bl	80128ac <uxr_serialize_WRITE_DATA_Payload_Data>
 80118f2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80118f6:	4630      	mov	r0, r6
 80118f8:	1a52      	subs	r2, r2, r1
 80118fa:	f7fe f89d 	bl	800fa38 <ucdr_init_buffer>
 80118fe:	9a05      	ldr	r2, [sp, #20]
 8011900:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8011904:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011906:	9b07      	ldr	r3, [sp, #28]
 8011908:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 801190c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801190e:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 8011912:	4630      	mov	r0, r6
 8011914:	4919      	ldr	r1, [pc, #100]	; (801197c <uxr_prepare_output_stream_fragmented+0x194>)
 8011916:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801191a:	462a      	mov	r2, r5
 801191c:	f7fe f862 	bl	800f9e4 <ucdr_set_on_full_buffer_callback>
 8011920:	4620      	mov	r0, r4
 8011922:	b013      	add	sp, #76	; 0x4c
 8011924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011928:	991e      	ldr	r1, [sp, #120]	; 0x78
 801192a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801192c:	4628      	mov	r0, r5
 801192e:	4798      	blx	r3
 8011930:	b920      	cbnz	r0, 801193c <uxr_prepare_output_stream_fragmented+0x154>
 8011932:	2400      	movs	r4, #0
 8011934:	4620      	mov	r0, r4
 8011936:	b013      	add	sp, #76	; 0x4c
 8011938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193c:	4620      	mov	r0, r4
 801193e:	f005 faa9 	bl	8016e94 <get_available_free_slots>
 8011942:	2800      	cmp	r0, #0
 8011944:	f47f af6a 	bne.w	801181c <uxr_prepare_output_stream_fragmented+0x34>
 8011948:	e7f3      	b.n	8011932 <uxr_prepare_output_stream_fragmented+0x14a>
 801194a:	4638      	mov	r0, r7
 801194c:	2101      	movs	r1, #1
 801194e:	f005 fac1 	bl	8016ed4 <uxr_seq_num_add>
 8011952:	8922      	ldrh	r2, [r4, #8]
 8011954:	fbb0 f8f2 	udiv	r8, r0, r2
 8011958:	fb02 0818 	mls	r8, r2, r8, r0
 801195c:	fa1f f888 	uxth.w	r8, r8
 8011960:	6863      	ldr	r3, [r4, #4]
 8011962:	fbb3 f3f2 	udiv	r3, r3, r2
 8011966:	6822      	ldr	r2, [r4, #0]
 8011968:	fb08 f803 	mul.w	r8, r8, r3
 801196c:	f108 0804 	add.w	r8, r8, #4
 8011970:	4490      	add	r8, r2
 8011972:	7b23      	ldrb	r3, [r4, #12]
 8011974:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8011978:	4607      	mov	r7, r0
 801197a:	e768      	b.n	801184e <uxr_prepare_output_stream_fragmented+0x66>
 801197c:	08011675 	.word	0x08011675

08011980 <uxr_serialize_message_header>:
 8011980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011982:	b083      	sub	sp, #12
 8011984:	4616      	mov	r6, r2
 8011986:	4604      	mov	r4, r0
 8011988:	9301      	str	r3, [sp, #4]
 801198a:	460d      	mov	r5, r1
 801198c:	9f08      	ldr	r7, [sp, #32]
 801198e:	f7fd f8a9 	bl	800eae4 <ucdr_serialize_uint8_t>
 8011992:	4631      	mov	r1, r6
 8011994:	4620      	mov	r0, r4
 8011996:	f7fd f8a5 	bl	800eae4 <ucdr_serialize_uint8_t>
 801199a:	9a01      	ldr	r2, [sp, #4]
 801199c:	4620      	mov	r0, r4
 801199e:	2101      	movs	r1, #1
 80119a0:	f7fd f94c 	bl	800ec3c <ucdr_serialize_endian_uint16_t>
 80119a4:	062b      	lsls	r3, r5, #24
 80119a6:	d501      	bpl.n	80119ac <uxr_serialize_message_header+0x2c>
 80119a8:	b003      	add	sp, #12
 80119aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119ac:	4639      	mov	r1, r7
 80119ae:	4620      	mov	r0, r4
 80119b0:	2204      	movs	r2, #4
 80119b2:	b003      	add	sp, #12
 80119b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80119b8:	f004 bb6e 	b.w	8016098 <ucdr_serialize_array_uint8_t>

080119bc <uxr_deserialize_message_header>:
 80119bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119be:	b083      	sub	sp, #12
 80119c0:	4616      	mov	r6, r2
 80119c2:	4604      	mov	r4, r0
 80119c4:	9301      	str	r3, [sp, #4]
 80119c6:	460d      	mov	r5, r1
 80119c8:	9f08      	ldr	r7, [sp, #32]
 80119ca:	f7fd f8a1 	bl	800eb10 <ucdr_deserialize_uint8_t>
 80119ce:	4631      	mov	r1, r6
 80119d0:	4620      	mov	r0, r4
 80119d2:	f7fd f89d 	bl	800eb10 <ucdr_deserialize_uint8_t>
 80119d6:	9a01      	ldr	r2, [sp, #4]
 80119d8:	4620      	mov	r0, r4
 80119da:	2101      	movs	r1, #1
 80119dc:	f7fd fa22 	bl	800ee24 <ucdr_deserialize_endian_uint16_t>
 80119e0:	f995 3000 	ldrsb.w	r3, [r5]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	da01      	bge.n	80119ec <uxr_deserialize_message_header+0x30>
 80119e8:	b003      	add	sp, #12
 80119ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119ec:	4639      	mov	r1, r7
 80119ee:	4620      	mov	r0, r4
 80119f0:	2204      	movs	r2, #4
 80119f2:	b003      	add	sp, #12
 80119f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80119f8:	f004 bbb2 	b.w	8016160 <ucdr_deserialize_array_uint8_t>

080119fc <uxr_serialize_submessage_header>:
 80119fc:	b530      	push	{r4, r5, lr}
 80119fe:	b083      	sub	sp, #12
 8011a00:	4615      	mov	r5, r2
 8011a02:	4604      	mov	r4, r0
 8011a04:	9301      	str	r3, [sp, #4]
 8011a06:	f7fd f86d 	bl	800eae4 <ucdr_serialize_uint8_t>
 8011a0a:	4629      	mov	r1, r5
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f7fd f869 	bl	800eae4 <ucdr_serialize_uint8_t>
 8011a12:	9a01      	ldr	r2, [sp, #4]
 8011a14:	4620      	mov	r0, r4
 8011a16:	2101      	movs	r1, #1
 8011a18:	b003      	add	sp, #12
 8011a1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a1e:	f7fd b90d 	b.w	800ec3c <ucdr_serialize_endian_uint16_t>
 8011a22:	bf00      	nop

08011a24 <uxr_deserialize_submessage_header>:
 8011a24:	b530      	push	{r4, r5, lr}
 8011a26:	b083      	sub	sp, #12
 8011a28:	4615      	mov	r5, r2
 8011a2a:	4604      	mov	r4, r0
 8011a2c:	9301      	str	r3, [sp, #4]
 8011a2e:	f7fd f86f 	bl	800eb10 <ucdr_deserialize_uint8_t>
 8011a32:	4629      	mov	r1, r5
 8011a34:	4620      	mov	r0, r4
 8011a36:	f7fd f86b 	bl	800eb10 <ucdr_deserialize_uint8_t>
 8011a3a:	9a01      	ldr	r2, [sp, #4]
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	2101      	movs	r1, #1
 8011a40:	b003      	add	sp, #12
 8011a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a46:	f7fd b9ed 	b.w	800ee24 <ucdr_deserialize_endian_uint16_t>
 8011a4a:	bf00      	nop

08011a4c <uxr_serialize_CLIENT_Representation>:
 8011a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a50:	2204      	movs	r2, #4
 8011a52:	460c      	mov	r4, r1
 8011a54:	4605      	mov	r5, r0
 8011a56:	f004 fb1f 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8011a5a:	1d21      	adds	r1, r4, #4
 8011a5c:	4607      	mov	r7, r0
 8011a5e:	2202      	movs	r2, #2
 8011a60:	4628      	mov	r0, r5
 8011a62:	f004 fb19 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8011a66:	1da1      	adds	r1, r4, #6
 8011a68:	4007      	ands	r7, r0
 8011a6a:	2202      	movs	r2, #2
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	f004 fb13 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8011a72:	fa5f f887 	uxtb.w	r8, r7
 8011a76:	2204      	movs	r2, #4
 8011a78:	4607      	mov	r7, r0
 8011a7a:	f104 0108 	add.w	r1, r4, #8
 8011a7e:	4628      	mov	r0, r5
 8011a80:	f004 fb0a 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8011a84:	ea08 0707 	and.w	r7, r8, r7
 8011a88:	7b21      	ldrb	r1, [r4, #12]
 8011a8a:	4680      	mov	r8, r0
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	f7fd f829 	bl	800eae4 <ucdr_serialize_uint8_t>
 8011a92:	ea08 0807 	and.w	r8, r8, r7
 8011a96:	7b61      	ldrb	r1, [r4, #13]
 8011a98:	4607      	mov	r7, r0
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	f7fc fff2 	bl	800ea84 <ucdr_serialize_bool>
 8011aa0:	7b63      	ldrb	r3, [r4, #13]
 8011aa2:	ea08 0707 	and.w	r7, r8, r7
 8011aa6:	ea07 0600 	and.w	r6, r7, r0
 8011aaa:	b933      	cbnz	r3, 8011aba <uxr_serialize_CLIENT_Representation+0x6e>
 8011aac:	8ba1      	ldrh	r1, [r4, #28]
 8011aae:	4628      	mov	r0, r5
 8011ab0:	f7fd f844 	bl	800eb3c <ucdr_serialize_uint16_t>
 8011ab4:	4030      	ands	r0, r6
 8011ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aba:	6921      	ldr	r1, [r4, #16]
 8011abc:	4628      	mov	r0, r5
 8011abe:	f7fd fa27 	bl	800ef10 <ucdr_serialize_uint32_t>
 8011ac2:	6923      	ldr	r3, [r4, #16]
 8011ac4:	b1cb      	cbz	r3, 8011afa <uxr_serialize_CLIENT_Representation+0xae>
 8011ac6:	b1d0      	cbz	r0, 8011afe <uxr_serialize_CLIENT_Representation+0xb2>
 8011ac8:	46a0      	mov	r8, r4
 8011aca:	f04f 0900 	mov.w	r9, #0
 8011ace:	e002      	b.n	8011ad6 <uxr_serialize_CLIENT_Representation+0x8a>
 8011ad0:	f108 0808 	add.w	r8, r8, #8
 8011ad4:	b198      	cbz	r0, 8011afe <uxr_serialize_CLIENT_Representation+0xb2>
 8011ad6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011ada:	4628      	mov	r0, r5
 8011adc:	f004 fbfc 	bl	80162d8 <ucdr_serialize_string>
 8011ae0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011ae4:	4607      	mov	r7, r0
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	f004 fbf6 	bl	80162d8 <ucdr_serialize_string>
 8011aec:	6923      	ldr	r3, [r4, #16]
 8011aee:	f109 0901 	add.w	r9, r9, #1
 8011af2:	4038      	ands	r0, r7
 8011af4:	4599      	cmp	r9, r3
 8011af6:	b2c0      	uxtb	r0, r0
 8011af8:	d3ea      	bcc.n	8011ad0 <uxr_serialize_CLIENT_Representation+0x84>
 8011afa:	4006      	ands	r6, r0
 8011afc:	e7d6      	b.n	8011aac <uxr_serialize_CLIENT_Representation+0x60>
 8011afe:	2600      	movs	r6, #0
 8011b00:	e7d4      	b.n	8011aac <uxr_serialize_CLIENT_Representation+0x60>
 8011b02:	bf00      	nop

08011b04 <uxr_deserialize_CLIENT_Representation>:
 8011b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b08:	2204      	movs	r2, #4
 8011b0a:	460c      	mov	r4, r1
 8011b0c:	4605      	mov	r5, r0
 8011b0e:	f004 fb27 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8011b12:	1d21      	adds	r1, r4, #4
 8011b14:	4607      	mov	r7, r0
 8011b16:	2202      	movs	r2, #2
 8011b18:	4628      	mov	r0, r5
 8011b1a:	f004 fb21 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8011b1e:	1da1      	adds	r1, r4, #6
 8011b20:	4007      	ands	r7, r0
 8011b22:	2202      	movs	r2, #2
 8011b24:	4628      	mov	r0, r5
 8011b26:	f004 fb1b 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8011b2a:	fa5f f887 	uxtb.w	r8, r7
 8011b2e:	2204      	movs	r2, #4
 8011b30:	4607      	mov	r7, r0
 8011b32:	f104 0108 	add.w	r1, r4, #8
 8011b36:	4628      	mov	r0, r5
 8011b38:	f004 fb12 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8011b3c:	ea08 0707 	and.w	r7, r8, r7
 8011b40:	f104 010c 	add.w	r1, r4, #12
 8011b44:	4680      	mov	r8, r0
 8011b46:	4628      	mov	r0, r5
 8011b48:	f7fc ffe2 	bl	800eb10 <ucdr_deserialize_uint8_t>
 8011b4c:	ea08 0807 	and.w	r8, r8, r7
 8011b50:	f104 010d 	add.w	r1, r4, #13
 8011b54:	4607      	mov	r7, r0
 8011b56:	4628      	mov	r0, r5
 8011b58:	f7fc ffaa 	bl	800eab0 <ucdr_deserialize_bool>
 8011b5c:	7b63      	ldrb	r3, [r4, #13]
 8011b5e:	ea08 0707 	and.w	r7, r8, r7
 8011b62:	ea07 0600 	and.w	r6, r7, r0
 8011b66:	b93b      	cbnz	r3, 8011b78 <uxr_deserialize_CLIENT_Representation+0x74>
 8011b68:	f104 011c 	add.w	r1, r4, #28
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	f7fd f8e5 	bl	800ed3c <ucdr_deserialize_uint16_t>
 8011b72:	4030      	ands	r0, r6
 8011b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b78:	f104 0110 	add.w	r1, r4, #16
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	f7fd faf7 	bl	800f170 <ucdr_deserialize_uint32_t>
 8011b82:	6923      	ldr	r3, [r4, #16]
 8011b84:	2b01      	cmp	r3, #1
 8011b86:	d903      	bls.n	8011b90 <uxr_deserialize_CLIENT_Representation+0x8c>
 8011b88:	2301      	movs	r3, #1
 8011b8a:	75ab      	strb	r3, [r5, #22]
 8011b8c:	2600      	movs	r6, #0
 8011b8e:	e7eb      	b.n	8011b68 <uxr_deserialize_CLIENT_Representation+0x64>
 8011b90:	b1fb      	cbz	r3, 8011bd2 <uxr_deserialize_CLIENT_Representation+0xce>
 8011b92:	2800      	cmp	r0, #0
 8011b94:	d0fa      	beq.n	8011b8c <uxr_deserialize_CLIENT_Representation+0x88>
 8011b96:	46a0      	mov	r8, r4
 8011b98:	f04f 0900 	mov.w	r9, #0
 8011b9c:	e003      	b.n	8011ba6 <uxr_deserialize_CLIENT_Representation+0xa2>
 8011b9e:	f108 0808 	add.w	r8, r8, #8
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	d0f2      	beq.n	8011b8c <uxr_deserialize_CLIENT_Representation+0x88>
 8011ba6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011bae:	4628      	mov	r0, r5
 8011bb0:	f004 fba2 	bl	80162f8 <ucdr_deserialize_string>
 8011bb4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011bb8:	4607      	mov	r7, r0
 8011bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	f004 fb9a 	bl	80162f8 <ucdr_deserialize_string>
 8011bc4:	6923      	ldr	r3, [r4, #16]
 8011bc6:	f109 0901 	add.w	r9, r9, #1
 8011bca:	4038      	ands	r0, r7
 8011bcc:	4599      	cmp	r9, r3
 8011bce:	b2c0      	uxtb	r0, r0
 8011bd0:	d3e5      	bcc.n	8011b9e <uxr_deserialize_CLIENT_Representation+0x9a>
 8011bd2:	4006      	ands	r6, r0
 8011bd4:	e7c8      	b.n	8011b68 <uxr_deserialize_CLIENT_Representation+0x64>
 8011bd6:	bf00      	nop

08011bd8 <uxr_serialize_AGENT_Representation>:
 8011bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bdc:	2204      	movs	r2, #4
 8011bde:	460c      	mov	r4, r1
 8011be0:	4605      	mov	r5, r0
 8011be2:	f004 fa59 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8011be6:	1d21      	adds	r1, r4, #4
 8011be8:	4606      	mov	r6, r0
 8011bea:	2202      	movs	r2, #2
 8011bec:	4628      	mov	r0, r5
 8011bee:	f004 fa53 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8011bf2:	1da1      	adds	r1, r4, #6
 8011bf4:	4006      	ands	r6, r0
 8011bf6:	2202      	movs	r2, #2
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	f004 fa4d 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8011bfe:	b2f6      	uxtb	r6, r6
 8011c00:	4603      	mov	r3, r0
 8011c02:	7a21      	ldrb	r1, [r4, #8]
 8011c04:	4628      	mov	r0, r5
 8011c06:	401e      	ands	r6, r3
 8011c08:	f7fc ff3c 	bl	800ea84 <ucdr_serialize_bool>
 8011c0c:	7a23      	ldrb	r3, [r4, #8]
 8011c0e:	ea00 0706 	and.w	r7, r0, r6
 8011c12:	b913      	cbnz	r3, 8011c1a <uxr_serialize_AGENT_Representation+0x42>
 8011c14:	4638      	mov	r0, r7
 8011c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c1a:	68e1      	ldr	r1, [r4, #12]
 8011c1c:	4628      	mov	r0, r5
 8011c1e:	f7fd f977 	bl	800ef10 <ucdr_serialize_uint32_t>
 8011c22:	68e3      	ldr	r3, [r4, #12]
 8011c24:	b313      	cbz	r3, 8011c6c <uxr_serialize_AGENT_Representation+0x94>
 8011c26:	b1e8      	cbz	r0, 8011c64 <uxr_serialize_AGENT_Representation+0x8c>
 8011c28:	46a0      	mov	r8, r4
 8011c2a:	f04f 0900 	mov.w	r9, #0
 8011c2e:	e002      	b.n	8011c36 <uxr_serialize_AGENT_Representation+0x5e>
 8011c30:	f108 0808 	add.w	r8, r8, #8
 8011c34:	b1b3      	cbz	r3, 8011c64 <uxr_serialize_AGENT_Representation+0x8c>
 8011c36:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011c3a:	4628      	mov	r0, r5
 8011c3c:	f004 fb4c 	bl	80162d8 <ucdr_serialize_string>
 8011c40:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011c44:	4606      	mov	r6, r0
 8011c46:	4628      	mov	r0, r5
 8011c48:	f004 fb46 	bl	80162d8 <ucdr_serialize_string>
 8011c4c:	68e2      	ldr	r2, [r4, #12]
 8011c4e:	f109 0901 	add.w	r9, r9, #1
 8011c52:	ea06 0300 	and.w	r3, r6, r0
 8011c56:	4591      	cmp	r9, r2
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	d3e9      	bcc.n	8011c30 <uxr_serialize_AGENT_Representation+0x58>
 8011c5c:	401f      	ands	r7, r3
 8011c5e:	4638      	mov	r0, r7
 8011c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c64:	2700      	movs	r7, #0
 8011c66:	4638      	mov	r0, r7
 8011c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c6c:	4007      	ands	r7, r0
 8011c6e:	e7d1      	b.n	8011c14 <uxr_serialize_AGENT_Representation+0x3c>

08011c70 <uxr_serialize_ObjectVariant.part.0>:
 8011c70:	b570      	push	{r4, r5, r6, lr}
 8011c72:	780b      	ldrb	r3, [r1, #0]
 8011c74:	3b01      	subs	r3, #1
 8011c76:	460c      	mov	r4, r1
 8011c78:	4605      	mov	r5, r0
 8011c7a:	2b0d      	cmp	r3, #13
 8011c7c:	d869      	bhi.n	8011d52 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8011c7e:	e8df f003 	tbb	[pc, r3]
 8011c82:	074a      	.short	0x074a
 8011c84:	07073030 	.word	0x07073030
 8011c88:	21680707 	.word	0x21680707
 8011c8c:	45632121 	.word	0x45632121
 8011c90:	7909      	ldrb	r1, [r1, #4]
 8011c92:	f7fc ff27 	bl	800eae4 <ucdr_serialize_uint8_t>
 8011c96:	4606      	mov	r6, r0
 8011c98:	b158      	cbz	r0, 8011cb2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011c9a:	7923      	ldrb	r3, [r4, #4]
 8011c9c:	2b02      	cmp	r3, #2
 8011c9e:	d003      	beq.n	8011ca8 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011ca0:	2b03      	cmp	r3, #3
 8011ca2:	d029      	beq.n	8011cf8 <uxr_serialize_ObjectVariant.part.0+0x88>
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d104      	bne.n	8011cb2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011ca8:	68a1      	ldr	r1, [r4, #8]
 8011caa:	4628      	mov	r0, r5
 8011cac:	f004 fb14 	bl	80162d8 <ucdr_serialize_string>
 8011cb0:	4606      	mov	r6, r0
 8011cb2:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	2202      	movs	r2, #2
 8011cba:	f004 f9ed 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8011cbe:	4030      	ands	r0, r6
 8011cc0:	b2c0      	uxtb	r0, r0
 8011cc2:	bd70      	pop	{r4, r5, r6, pc}
 8011cc4:	7909      	ldrb	r1, [r1, #4]
 8011cc6:	f7fc ff0d 	bl	800eae4 <ucdr_serialize_uint8_t>
 8011cca:	b1e8      	cbz	r0, 8011d08 <uxr_serialize_ObjectVariant.part.0+0x98>
 8011ccc:	7923      	ldrb	r3, [r4, #4]
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d001      	beq.n	8011cd6 <uxr_serialize_ObjectVariant.part.0+0x66>
 8011cd2:	2b02      	cmp	r3, #2
 8011cd4:	d13d      	bne.n	8011d52 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8011cd6:	68a1      	ldr	r1, [r4, #8]
 8011cd8:	4628      	mov	r0, r5
 8011cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011cde:	f004 bafb 	b.w	80162d8 <ucdr_serialize_string>
 8011ce2:	7909      	ldrb	r1, [r1, #4]
 8011ce4:	f7fc fefe 	bl	800eae4 <ucdr_serialize_uint8_t>
 8011ce8:	4606      	mov	r6, r0
 8011cea:	2800      	cmp	r0, #0
 8011cec:	d0e1      	beq.n	8011cb2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011cee:	7923      	ldrb	r3, [r4, #4]
 8011cf0:	2b02      	cmp	r3, #2
 8011cf2:	d0d9      	beq.n	8011ca8 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011cf4:	2b03      	cmp	r3, #3
 8011cf6:	d1dc      	bne.n	8011cb2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011cf8:	68a2      	ldr	r2, [r4, #8]
 8011cfa:	f104 010c 	add.w	r1, r4, #12
 8011cfe:	4628      	mov	r0, r5
 8011d00:	f004 fabe 	bl	8016280 <ucdr_serialize_sequence_uint8_t>
 8011d04:	4606      	mov	r6, r0
 8011d06:	e7d4      	b.n	8011cb2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011d08:	2000      	movs	r0, #0
 8011d0a:	bd70      	pop	{r4, r5, r6, pc}
 8011d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d10:	3104      	adds	r1, #4
 8011d12:	f7ff be9b 	b.w	8011a4c <uxr_serialize_CLIENT_Representation>
 8011d16:	7909      	ldrb	r1, [r1, #4]
 8011d18:	f7fc fee4 	bl	800eae4 <ucdr_serialize_uint8_t>
 8011d1c:	4606      	mov	r6, r0
 8011d1e:	b158      	cbz	r0, 8011d38 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011d20:	7923      	ldrb	r3, [r4, #4]
 8011d22:	2b02      	cmp	r3, #2
 8011d24:	d003      	beq.n	8011d2e <uxr_serialize_ObjectVariant.part.0+0xbe>
 8011d26:	2b03      	cmp	r3, #3
 8011d28:	d015      	beq.n	8011d56 <uxr_serialize_ObjectVariant.part.0+0xe6>
 8011d2a:	2b01      	cmp	r3, #1
 8011d2c:	d104      	bne.n	8011d38 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011d2e:	68a1      	ldr	r1, [r4, #8]
 8011d30:	4628      	mov	r0, r5
 8011d32:	f004 fad1 	bl	80162d8 <ucdr_serialize_string>
 8011d36:	4606      	mov	r6, r0
 8011d38:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8011d3c:	4628      	mov	r0, r5
 8011d3e:	f7fd fc0d 	bl	800f55c <ucdr_serialize_int16_t>
 8011d42:	4030      	ands	r0, r6
 8011d44:	b2c0      	uxtb	r0, r0
 8011d46:	bd70      	pop	{r4, r5, r6, pc}
 8011d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d4c:	3104      	adds	r1, #4
 8011d4e:	f7ff bf43 	b.w	8011bd8 <uxr_serialize_AGENT_Representation>
 8011d52:	2001      	movs	r0, #1
 8011d54:	bd70      	pop	{r4, r5, r6, pc}
 8011d56:	68a2      	ldr	r2, [r4, #8]
 8011d58:	f104 010c 	add.w	r1, r4, #12
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	f004 fa8f 	bl	8016280 <ucdr_serialize_sequence_uint8_t>
 8011d62:	4606      	mov	r6, r0
 8011d64:	e7e8      	b.n	8011d38 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011d66:	bf00      	nop

08011d68 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011d68:	b570      	push	{r4, r5, r6, lr}
 8011d6a:	460d      	mov	r5, r1
 8011d6c:	7809      	ldrb	r1, [r1, #0]
 8011d6e:	4606      	mov	r6, r0
 8011d70:	f7fc fe88 	bl	800ea84 <ucdr_serialize_bool>
 8011d74:	782b      	ldrb	r3, [r5, #0]
 8011d76:	4604      	mov	r4, r0
 8011d78:	b94b      	cbnz	r3, 8011d8e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011d7a:	7a29      	ldrb	r1, [r5, #8]
 8011d7c:	4630      	mov	r0, r6
 8011d7e:	f7fc fe81 	bl	800ea84 <ucdr_serialize_bool>
 8011d82:	7a2b      	ldrb	r3, [r5, #8]
 8011d84:	4004      	ands	r4, r0
 8011d86:	b2e4      	uxtb	r4, r4
 8011d88:	b943      	cbnz	r3, 8011d9c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	bd70      	pop	{r4, r5, r6, pc}
 8011d8e:	6869      	ldr	r1, [r5, #4]
 8011d90:	4630      	mov	r0, r6
 8011d92:	f004 faa1 	bl	80162d8 <ucdr_serialize_string>
 8011d96:	4004      	ands	r4, r0
 8011d98:	b2e4      	uxtb	r4, r4
 8011d9a:	e7ee      	b.n	8011d7a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011d9c:	68e9      	ldr	r1, [r5, #12]
 8011d9e:	4630      	mov	r0, r6
 8011da0:	f004 fa9a 	bl	80162d8 <ucdr_serialize_string>
 8011da4:	4004      	ands	r4, r0
 8011da6:	4620      	mov	r0, r4
 8011da8:	bd70      	pop	{r4, r5, r6, pc}
 8011daa:	bf00      	nop

08011dac <uxr_serialize_OBJK_Topic_Binary>:
 8011dac:	b570      	push	{r4, r5, r6, lr}
 8011dae:	460d      	mov	r5, r1
 8011db0:	6809      	ldr	r1, [r1, #0]
 8011db2:	4606      	mov	r6, r0
 8011db4:	f004 fa90 	bl	80162d8 <ucdr_serialize_string>
 8011db8:	7929      	ldrb	r1, [r5, #4]
 8011dba:	4604      	mov	r4, r0
 8011dbc:	4630      	mov	r0, r6
 8011dbe:	f7fc fe61 	bl	800ea84 <ucdr_serialize_bool>
 8011dc2:	792b      	ldrb	r3, [r5, #4]
 8011dc4:	4004      	ands	r4, r0
 8011dc6:	b2e4      	uxtb	r4, r4
 8011dc8:	b943      	cbnz	r3, 8011ddc <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011dca:	7b29      	ldrb	r1, [r5, #12]
 8011dcc:	4630      	mov	r0, r6
 8011dce:	f7fc fe59 	bl	800ea84 <ucdr_serialize_bool>
 8011dd2:	7b2b      	ldrb	r3, [r5, #12]
 8011dd4:	4004      	ands	r4, r0
 8011dd6:	b93b      	cbnz	r3, 8011de8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011dd8:	4620      	mov	r0, r4
 8011dda:	bd70      	pop	{r4, r5, r6, pc}
 8011ddc:	68a9      	ldr	r1, [r5, #8]
 8011dde:	4630      	mov	r0, r6
 8011de0:	f004 fa7a 	bl	80162d8 <ucdr_serialize_string>
 8011de4:	4004      	ands	r4, r0
 8011de6:	e7f0      	b.n	8011dca <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011de8:	6929      	ldr	r1, [r5, #16]
 8011dea:	4630      	mov	r0, r6
 8011dec:	f004 fa74 	bl	80162d8 <ucdr_serialize_string>
 8011df0:	4004      	ands	r4, r0
 8011df2:	b2e4      	uxtb	r4, r4
 8011df4:	4620      	mov	r0, r4
 8011df6:	bd70      	pop	{r4, r5, r6, pc}

08011df8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dfc:	460c      	mov	r4, r1
 8011dfe:	7809      	ldrb	r1, [r1, #0]
 8011e00:	4606      	mov	r6, r0
 8011e02:	f7fc fe3f 	bl	800ea84 <ucdr_serialize_bool>
 8011e06:	7823      	ldrb	r3, [r4, #0]
 8011e08:	4605      	mov	r5, r0
 8011e0a:	b96b      	cbnz	r3, 8011e28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011e0c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8011e10:	4630      	mov	r0, r6
 8011e12:	f7fc fe37 	bl	800ea84 <ucdr_serialize_bool>
 8011e16:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011e1a:	4005      	ands	r5, r0
 8011e1c:	b2ed      	uxtb	r5, r5
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d169      	bne.n	8011ef6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011e22:	4628      	mov	r0, r5
 8011e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e28:	6861      	ldr	r1, [r4, #4]
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	f7fd f870 	bl	800ef10 <ucdr_serialize_uint32_t>
 8011e30:	6863      	ldr	r3, [r4, #4]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d06b      	beq.n	8011f0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011e36:	2800      	cmp	r0, #0
 8011e38:	d067      	beq.n	8011f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e3a:	68a1      	ldr	r1, [r4, #8]
 8011e3c:	4630      	mov	r0, r6
 8011e3e:	f004 fa4b 	bl	80162d8 <ucdr_serialize_string>
 8011e42:	6863      	ldr	r3, [r4, #4]
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	d953      	bls.n	8011ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	d05e      	beq.n	8011f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e4c:	68e1      	ldr	r1, [r4, #12]
 8011e4e:	4630      	mov	r0, r6
 8011e50:	f004 fa42 	bl	80162d8 <ucdr_serialize_string>
 8011e54:	6863      	ldr	r3, [r4, #4]
 8011e56:	2b02      	cmp	r3, #2
 8011e58:	d94a      	bls.n	8011ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e5a:	2800      	cmp	r0, #0
 8011e5c:	d055      	beq.n	8011f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e5e:	6921      	ldr	r1, [r4, #16]
 8011e60:	4630      	mov	r0, r6
 8011e62:	f004 fa39 	bl	80162d8 <ucdr_serialize_string>
 8011e66:	6863      	ldr	r3, [r4, #4]
 8011e68:	2b03      	cmp	r3, #3
 8011e6a:	d941      	bls.n	8011ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e6c:	2800      	cmp	r0, #0
 8011e6e:	d04c      	beq.n	8011f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e70:	6961      	ldr	r1, [r4, #20]
 8011e72:	4630      	mov	r0, r6
 8011e74:	f004 fa30 	bl	80162d8 <ucdr_serialize_string>
 8011e78:	6863      	ldr	r3, [r4, #4]
 8011e7a:	2b04      	cmp	r3, #4
 8011e7c:	d938      	bls.n	8011ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	d043      	beq.n	8011f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e82:	69a1      	ldr	r1, [r4, #24]
 8011e84:	4630      	mov	r0, r6
 8011e86:	f004 fa27 	bl	80162d8 <ucdr_serialize_string>
 8011e8a:	6863      	ldr	r3, [r4, #4]
 8011e8c:	2b05      	cmp	r3, #5
 8011e8e:	d92f      	bls.n	8011ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e90:	2800      	cmp	r0, #0
 8011e92:	d03a      	beq.n	8011f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e94:	69e1      	ldr	r1, [r4, #28]
 8011e96:	4630      	mov	r0, r6
 8011e98:	f004 fa1e 	bl	80162d8 <ucdr_serialize_string>
 8011e9c:	6863      	ldr	r3, [r4, #4]
 8011e9e:	2b06      	cmp	r3, #6
 8011ea0:	d926      	bls.n	8011ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011ea2:	b390      	cbz	r0, 8011f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011ea4:	6a21      	ldr	r1, [r4, #32]
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	f004 fa16 	bl	80162d8 <ucdr_serialize_string>
 8011eac:	6863      	ldr	r3, [r4, #4]
 8011eae:	2b07      	cmp	r3, #7
 8011eb0:	d91e      	bls.n	8011ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011eb2:	b350      	cbz	r0, 8011f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011eb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	f004 fa0e 	bl	80162d8 <ucdr_serialize_string>
 8011ebc:	6863      	ldr	r3, [r4, #4]
 8011ebe:	2b08      	cmp	r3, #8
 8011ec0:	d916      	bls.n	8011ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011ec2:	b310      	cbz	r0, 8011f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011ec4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	f004 fa06 	bl	80162d8 <ucdr_serialize_string>
 8011ecc:	6863      	ldr	r3, [r4, #4]
 8011ece:	2b09      	cmp	r3, #9
 8011ed0:	d90e      	bls.n	8011ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011ed2:	b1d0      	cbz	r0, 8011f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011ed4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8011ed8:	2709      	movs	r7, #9
 8011eda:	e000      	b.n	8011ede <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011edc:	b1a8      	cbz	r0, 8011f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011ede:	f858 1b04 	ldr.w	r1, [r8], #4
 8011ee2:	4630      	mov	r0, r6
 8011ee4:	f004 f9f8 	bl	80162d8 <ucdr_serialize_string>
 8011ee8:	6862      	ldr	r2, [r4, #4]
 8011eea:	3701      	adds	r7, #1
 8011eec:	4297      	cmp	r7, r2
 8011eee:	d3f5      	bcc.n	8011edc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011ef0:	4005      	ands	r5, r0
 8011ef2:	b2ed      	uxtb	r5, r5
 8011ef4:	e78a      	b.n	8011e0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011ef6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011ef8:	4630      	mov	r0, r6
 8011efa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011efe:	f004 f9bf 	bl	8016280 <ucdr_serialize_sequence_uint8_t>
 8011f02:	4005      	ands	r5, r0
 8011f04:	4628      	mov	r0, r5
 8011f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f0a:	2500      	movs	r5, #0
 8011f0c:	e77e      	b.n	8011e0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011f0e:	4028      	ands	r0, r5
 8011f10:	b2c5      	uxtb	r5, r0
 8011f12:	e77b      	b.n	8011e0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011f14 <uxr_serialize_OBJK_Publisher_Binary>:
 8011f14:	b570      	push	{r4, r5, r6, lr}
 8011f16:	460d      	mov	r5, r1
 8011f18:	7809      	ldrb	r1, [r1, #0]
 8011f1a:	4606      	mov	r6, r0
 8011f1c:	f7fc fdb2 	bl	800ea84 <ucdr_serialize_bool>
 8011f20:	782b      	ldrb	r3, [r5, #0]
 8011f22:	4604      	mov	r4, r0
 8011f24:	b94b      	cbnz	r3, 8011f3a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011f26:	7a29      	ldrb	r1, [r5, #8]
 8011f28:	4630      	mov	r0, r6
 8011f2a:	f7fc fdab 	bl	800ea84 <ucdr_serialize_bool>
 8011f2e:	7a2b      	ldrb	r3, [r5, #8]
 8011f30:	4004      	ands	r4, r0
 8011f32:	b2e4      	uxtb	r4, r4
 8011f34:	b943      	cbnz	r3, 8011f48 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011f36:	4620      	mov	r0, r4
 8011f38:	bd70      	pop	{r4, r5, r6, pc}
 8011f3a:	6869      	ldr	r1, [r5, #4]
 8011f3c:	4630      	mov	r0, r6
 8011f3e:	f004 f9cb 	bl	80162d8 <ucdr_serialize_string>
 8011f42:	4004      	ands	r4, r0
 8011f44:	b2e4      	uxtb	r4, r4
 8011f46:	e7ee      	b.n	8011f26 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011f48:	f105 010c 	add.w	r1, r5, #12
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	f7ff ff53 	bl	8011df8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011f52:	4004      	ands	r4, r0
 8011f54:	4620      	mov	r0, r4
 8011f56:	bd70      	pop	{r4, r5, r6, pc}

08011f58 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8011f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f5c:	460c      	mov	r4, r1
 8011f5e:	7809      	ldrb	r1, [r1, #0]
 8011f60:	4606      	mov	r6, r0
 8011f62:	f7fc fd8f 	bl	800ea84 <ucdr_serialize_bool>
 8011f66:	7823      	ldrb	r3, [r4, #0]
 8011f68:	4605      	mov	r5, r0
 8011f6a:	b96b      	cbnz	r3, 8011f88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8011f6c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8011f70:	4630      	mov	r0, r6
 8011f72:	f7fc fd87 	bl	800ea84 <ucdr_serialize_bool>
 8011f76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011f7a:	4005      	ands	r5, r0
 8011f7c:	b2ed      	uxtb	r5, r5
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d169      	bne.n	8012056 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8011f82:	4628      	mov	r0, r5
 8011f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f88:	6861      	ldr	r1, [r4, #4]
 8011f8a:	4630      	mov	r0, r6
 8011f8c:	f7fc ffc0 	bl	800ef10 <ucdr_serialize_uint32_t>
 8011f90:	6863      	ldr	r3, [r4, #4]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d06b      	beq.n	801206e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8011f96:	2800      	cmp	r0, #0
 8011f98:	d067      	beq.n	801206a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f9a:	68a1      	ldr	r1, [r4, #8]
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	f004 f99b 	bl	80162d8 <ucdr_serialize_string>
 8011fa2:	6863      	ldr	r3, [r4, #4]
 8011fa4:	2b01      	cmp	r3, #1
 8011fa6:	d953      	bls.n	8012050 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	d05e      	beq.n	801206a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011fac:	68e1      	ldr	r1, [r4, #12]
 8011fae:	4630      	mov	r0, r6
 8011fb0:	f004 f992 	bl	80162d8 <ucdr_serialize_string>
 8011fb4:	6863      	ldr	r3, [r4, #4]
 8011fb6:	2b02      	cmp	r3, #2
 8011fb8:	d94a      	bls.n	8012050 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011fba:	2800      	cmp	r0, #0
 8011fbc:	d055      	beq.n	801206a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011fbe:	6921      	ldr	r1, [r4, #16]
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	f004 f989 	bl	80162d8 <ucdr_serialize_string>
 8011fc6:	6863      	ldr	r3, [r4, #4]
 8011fc8:	2b03      	cmp	r3, #3
 8011fca:	d941      	bls.n	8012050 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	d04c      	beq.n	801206a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011fd0:	6961      	ldr	r1, [r4, #20]
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	f004 f980 	bl	80162d8 <ucdr_serialize_string>
 8011fd8:	6863      	ldr	r3, [r4, #4]
 8011fda:	2b04      	cmp	r3, #4
 8011fdc:	d938      	bls.n	8012050 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	d043      	beq.n	801206a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011fe2:	69a1      	ldr	r1, [r4, #24]
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	f004 f977 	bl	80162d8 <ucdr_serialize_string>
 8011fea:	6863      	ldr	r3, [r4, #4]
 8011fec:	2b05      	cmp	r3, #5
 8011fee:	d92f      	bls.n	8012050 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011ff0:	2800      	cmp	r0, #0
 8011ff2:	d03a      	beq.n	801206a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011ff4:	69e1      	ldr	r1, [r4, #28]
 8011ff6:	4630      	mov	r0, r6
 8011ff8:	f004 f96e 	bl	80162d8 <ucdr_serialize_string>
 8011ffc:	6863      	ldr	r3, [r4, #4]
 8011ffe:	2b06      	cmp	r3, #6
 8012000:	d926      	bls.n	8012050 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012002:	b390      	cbz	r0, 801206a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012004:	6a21      	ldr	r1, [r4, #32]
 8012006:	4630      	mov	r0, r6
 8012008:	f004 f966 	bl	80162d8 <ucdr_serialize_string>
 801200c:	6863      	ldr	r3, [r4, #4]
 801200e:	2b07      	cmp	r3, #7
 8012010:	d91e      	bls.n	8012050 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012012:	b350      	cbz	r0, 801206a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012014:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012016:	4630      	mov	r0, r6
 8012018:	f004 f95e 	bl	80162d8 <ucdr_serialize_string>
 801201c:	6863      	ldr	r3, [r4, #4]
 801201e:	2b08      	cmp	r3, #8
 8012020:	d916      	bls.n	8012050 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012022:	b310      	cbz	r0, 801206a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012024:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012026:	4630      	mov	r0, r6
 8012028:	f004 f956 	bl	80162d8 <ucdr_serialize_string>
 801202c:	6863      	ldr	r3, [r4, #4]
 801202e:	2b09      	cmp	r3, #9
 8012030:	d90e      	bls.n	8012050 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012032:	b1d0      	cbz	r0, 801206a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012034:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012038:	2709      	movs	r7, #9
 801203a:	e000      	b.n	801203e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801203c:	b1a8      	cbz	r0, 801206a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801203e:	f858 1b04 	ldr.w	r1, [r8], #4
 8012042:	4630      	mov	r0, r6
 8012044:	f004 f948 	bl	80162d8 <ucdr_serialize_string>
 8012048:	6862      	ldr	r2, [r4, #4]
 801204a:	3701      	adds	r7, #1
 801204c:	4297      	cmp	r7, r2
 801204e:	d3f5      	bcc.n	801203c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012050:	4005      	ands	r5, r0
 8012052:	b2ed      	uxtb	r5, r5
 8012054:	e78a      	b.n	8011f6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012056:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012058:	4630      	mov	r0, r6
 801205a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801205e:	f004 f90f 	bl	8016280 <ucdr_serialize_sequence_uint8_t>
 8012062:	4005      	ands	r5, r0
 8012064:	4628      	mov	r0, r5
 8012066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801206a:	2500      	movs	r5, #0
 801206c:	e77e      	b.n	8011f6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801206e:	4028      	ands	r0, r5
 8012070:	b2c5      	uxtb	r5, r0
 8012072:	e77b      	b.n	8011f6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012074 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012074:	b570      	push	{r4, r5, r6, lr}
 8012076:	460d      	mov	r5, r1
 8012078:	7809      	ldrb	r1, [r1, #0]
 801207a:	4606      	mov	r6, r0
 801207c:	f7fc fd02 	bl	800ea84 <ucdr_serialize_bool>
 8012080:	782b      	ldrb	r3, [r5, #0]
 8012082:	4604      	mov	r4, r0
 8012084:	b94b      	cbnz	r3, 801209a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012086:	7a29      	ldrb	r1, [r5, #8]
 8012088:	4630      	mov	r0, r6
 801208a:	f7fc fcfb 	bl	800ea84 <ucdr_serialize_bool>
 801208e:	7a2b      	ldrb	r3, [r5, #8]
 8012090:	4004      	ands	r4, r0
 8012092:	b2e4      	uxtb	r4, r4
 8012094:	b943      	cbnz	r3, 80120a8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012096:	4620      	mov	r0, r4
 8012098:	bd70      	pop	{r4, r5, r6, pc}
 801209a:	6869      	ldr	r1, [r5, #4]
 801209c:	4630      	mov	r0, r6
 801209e:	f004 f91b 	bl	80162d8 <ucdr_serialize_string>
 80120a2:	4004      	ands	r4, r0
 80120a4:	b2e4      	uxtb	r4, r4
 80120a6:	e7ee      	b.n	8012086 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80120a8:	f105 010c 	add.w	r1, r5, #12
 80120ac:	4630      	mov	r0, r6
 80120ae:	f7ff ff53 	bl	8011f58 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80120b2:	4004      	ands	r4, r0
 80120b4:	4620      	mov	r0, r4
 80120b6:	bd70      	pop	{r4, r5, r6, pc}

080120b8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80120b8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80120bc:	4688      	mov	r8, r1
 80120be:	8809      	ldrh	r1, [r1, #0]
 80120c0:	4681      	mov	r9, r0
 80120c2:	f7fc fd3b 	bl	800eb3c <ucdr_serialize_uint16_t>
 80120c6:	f898 1002 	ldrb.w	r1, [r8, #2]
 80120ca:	4606      	mov	r6, r0
 80120cc:	4648      	mov	r0, r9
 80120ce:	f7fc fcd9 	bl	800ea84 <ucdr_serialize_bool>
 80120d2:	f898 3002 	ldrb.w	r3, [r8, #2]
 80120d6:	4030      	ands	r0, r6
 80120d8:	b2c5      	uxtb	r5, r0
 80120da:	b9eb      	cbnz	r3, 8012118 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80120dc:	f898 1006 	ldrb.w	r1, [r8, #6]
 80120e0:	4648      	mov	r0, r9
 80120e2:	f7fc fccf 	bl	800ea84 <ucdr_serialize_bool>
 80120e6:	f898 3006 	ldrb.w	r3, [r8, #6]
 80120ea:	4005      	ands	r5, r0
 80120ec:	bb7b      	cbnz	r3, 801214e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80120ee:	f898 100c 	ldrb.w	r1, [r8, #12]
 80120f2:	4648      	mov	r0, r9
 80120f4:	f7fc fcc6 	bl	800ea84 <ucdr_serialize_bool>
 80120f8:	f898 300c 	ldrb.w	r3, [r8, #12]
 80120fc:	4005      	ands	r5, r0
 80120fe:	b9f3      	cbnz	r3, 801213e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012100:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012104:	4648      	mov	r0, r9
 8012106:	f7fc fcbd 	bl	800ea84 <ucdr_serialize_bool>
 801210a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801210e:	4005      	ands	r5, r0
 8012110:	b94b      	cbnz	r3, 8012126 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012112:	4628      	mov	r0, r5
 8012114:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012118:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801211c:	4648      	mov	r0, r9
 801211e:	f7fc fd0d 	bl	800eb3c <ucdr_serialize_uint16_t>
 8012122:	4005      	ands	r5, r0
 8012124:	e7da      	b.n	80120dc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012126:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801212a:	4648      	mov	r0, r9
 801212c:	f108 011c 	add.w	r1, r8, #28
 8012130:	f004 f8a6 	bl	8016280 <ucdr_serialize_sequence_uint8_t>
 8012134:	4028      	ands	r0, r5
 8012136:	b2c5      	uxtb	r5, r0
 8012138:	4628      	mov	r0, r5
 801213a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801213e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012142:	4648      	mov	r0, r9
 8012144:	f7fc fee4 	bl	800ef10 <ucdr_serialize_uint32_t>
 8012148:	4028      	ands	r0, r5
 801214a:	b2c5      	uxtb	r5, r0
 801214c:	e7d8      	b.n	8012100 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801214e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012152:	4648      	mov	r0, r9
 8012154:	f7fc fedc 	bl	800ef10 <ucdr_serialize_uint32_t>
 8012158:	4028      	ands	r0, r5
 801215a:	b2c5      	uxtb	r5, r0
 801215c:	e7c7      	b.n	80120ee <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801215e:	bf00      	nop

08012160 <uxr_serialize_OBJK_DataReader_Binary>:
 8012160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012162:	2202      	movs	r2, #2
 8012164:	460c      	mov	r4, r1
 8012166:	4606      	mov	r6, r0
 8012168:	f003 ff96 	bl	8016098 <ucdr_serialize_array_uint8_t>
 801216c:	78a1      	ldrb	r1, [r4, #2]
 801216e:	4605      	mov	r5, r0
 8012170:	4630      	mov	r0, r6
 8012172:	f7fc fc87 	bl	800ea84 <ucdr_serialize_bool>
 8012176:	78a3      	ldrb	r3, [r4, #2]
 8012178:	4005      	ands	r5, r0
 801217a:	b2ed      	uxtb	r5, r5
 801217c:	b90b      	cbnz	r3, 8012182 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801217e:	4628      	mov	r0, r5
 8012180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012182:	f104 0108 	add.w	r1, r4, #8
 8012186:	4630      	mov	r0, r6
 8012188:	f7ff ff96 	bl	80120b8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801218c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012190:	4607      	mov	r7, r0
 8012192:	4630      	mov	r0, r6
 8012194:	f7fc fc76 	bl	800ea84 <ucdr_serialize_bool>
 8012198:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801219c:	4038      	ands	r0, r7
 801219e:	b2c7      	uxtb	r7, r0
 80121a0:	b95b      	cbnz	r3, 80121ba <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80121a2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80121a6:	4630      	mov	r0, r6
 80121a8:	f7fc fc6c 	bl	800ea84 <ucdr_serialize_bool>
 80121ac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80121b0:	4007      	ands	r7, r0
 80121b2:	b94b      	cbnz	r3, 80121c8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80121b4:	403d      	ands	r5, r7
 80121b6:	4628      	mov	r0, r5
 80121b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121ba:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80121be:	4630      	mov	r0, r6
 80121c0:	f7fd f8fc 	bl	800f3bc <ucdr_serialize_uint64_t>
 80121c4:	4007      	ands	r7, r0
 80121c6:	e7ec      	b.n	80121a2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80121c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80121ca:	4630      	mov	r0, r6
 80121cc:	f004 f884 	bl	80162d8 <ucdr_serialize_string>
 80121d0:	4007      	ands	r7, r0
 80121d2:	b2ff      	uxtb	r7, r7
 80121d4:	e7ee      	b.n	80121b4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80121d6:	bf00      	nop

080121d8 <uxr_serialize_OBJK_DataWriter_Binary>:
 80121d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121da:	2202      	movs	r2, #2
 80121dc:	460d      	mov	r5, r1
 80121de:	4606      	mov	r6, r0
 80121e0:	f003 ff5a 	bl	8016098 <ucdr_serialize_array_uint8_t>
 80121e4:	78a9      	ldrb	r1, [r5, #2]
 80121e6:	4604      	mov	r4, r0
 80121e8:	4630      	mov	r0, r6
 80121ea:	f7fc fc4b 	bl	800ea84 <ucdr_serialize_bool>
 80121ee:	78ab      	ldrb	r3, [r5, #2]
 80121f0:	4004      	ands	r4, r0
 80121f2:	b2e4      	uxtb	r4, r4
 80121f4:	b90b      	cbnz	r3, 80121fa <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80121f6:	4620      	mov	r0, r4
 80121f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121fa:	f105 0108 	add.w	r1, r5, #8
 80121fe:	4630      	mov	r0, r6
 8012200:	f7ff ff5a 	bl	80120b8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012204:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8012208:	4607      	mov	r7, r0
 801220a:	4630      	mov	r0, r6
 801220c:	f7fc fc3a 	bl	800ea84 <ucdr_serialize_bool>
 8012210:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012214:	4007      	ands	r7, r0
 8012216:	b2ff      	uxtb	r7, r7
 8012218:	b913      	cbnz	r3, 8012220 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801221a:	403c      	ands	r4, r7
 801221c:	4620      	mov	r0, r4
 801221e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012220:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8012224:	4630      	mov	r0, r6
 8012226:	f7fd f8c9 	bl	800f3bc <ucdr_serialize_uint64_t>
 801222a:	4007      	ands	r7, r0
 801222c:	e7f5      	b.n	801221a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801222e:	bf00      	nop

08012230 <uxr_deserialize_ObjectVariant>:
 8012230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012232:	4605      	mov	r5, r0
 8012234:	460e      	mov	r6, r1
 8012236:	f7fc fc6b 	bl	800eb10 <ucdr_deserialize_uint8_t>
 801223a:	b320      	cbz	r0, 8012286 <uxr_deserialize_ObjectVariant+0x56>
 801223c:	7833      	ldrb	r3, [r6, #0]
 801223e:	3b01      	subs	r3, #1
 8012240:	4604      	mov	r4, r0
 8012242:	2b0d      	cmp	r3, #13
 8012244:	d81d      	bhi.n	8012282 <uxr_deserialize_ObjectVariant+0x52>
 8012246:	e8df f003 	tbb	[pc, r3]
 801224a:	2107      	.short	0x2107
 801224c:	21214b4b 	.word	0x21214b4b
 8012250:	381c2121 	.word	0x381c2121
 8012254:	876a3838 	.word	0x876a3838
 8012258:	1d31      	adds	r1, r6, #4
 801225a:	4628      	mov	r0, r5
 801225c:	f7fc fc58 	bl	800eb10 <ucdr_deserialize_uint8_t>
 8012260:	4607      	mov	r7, r0
 8012262:	b138      	cbz	r0, 8012274 <uxr_deserialize_ObjectVariant+0x44>
 8012264:	7933      	ldrb	r3, [r6, #4]
 8012266:	2b02      	cmp	r3, #2
 8012268:	d07c      	beq.n	8012364 <uxr_deserialize_ObjectVariant+0x134>
 801226a:	2b03      	cmp	r3, #3
 801226c:	f000 8082 	beq.w	8012374 <uxr_deserialize_ObjectVariant+0x144>
 8012270:	2b01      	cmp	r3, #1
 8012272:	d077      	beq.n	8012364 <uxr_deserialize_ObjectVariant+0x134>
 8012274:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012278:	4628      	mov	r0, r5
 801227a:	f7fd f9ef 	bl	800f65c <ucdr_deserialize_int16_t>
 801227e:	4038      	ands	r0, r7
 8012280:	b2c4      	uxtb	r4, r0
 8012282:	4620      	mov	r0, r4
 8012284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012286:	2400      	movs	r4, #0
 8012288:	4620      	mov	r0, r4
 801228a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801228c:	1d31      	adds	r1, r6, #4
 801228e:	4628      	mov	r0, r5
 8012290:	f7fc fc3e 	bl	800eb10 <ucdr_deserialize_uint8_t>
 8012294:	4607      	mov	r7, r0
 8012296:	b130      	cbz	r0, 80122a6 <uxr_deserialize_ObjectVariant+0x76>
 8012298:	7933      	ldrb	r3, [r6, #4]
 801229a:	2b02      	cmp	r3, #2
 801229c:	d037      	beq.n	801230e <uxr_deserialize_ObjectVariant+0xde>
 801229e:	2b03      	cmp	r3, #3
 80122a0:	d02a      	beq.n	80122f8 <uxr_deserialize_ObjectVariant+0xc8>
 80122a2:	2b01      	cmp	r3, #1
 80122a4:	d033      	beq.n	801230e <uxr_deserialize_ObjectVariant+0xde>
 80122a6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80122aa:	4628      	mov	r0, r5
 80122ac:	2202      	movs	r2, #2
 80122ae:	f003 ff57 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 80122b2:	4038      	ands	r0, r7
 80122b4:	b2c4      	uxtb	r4, r0
 80122b6:	4620      	mov	r0, r4
 80122b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122ba:	1d31      	adds	r1, r6, #4
 80122bc:	4628      	mov	r0, r5
 80122be:	f7fc fc27 	bl	800eb10 <ucdr_deserialize_uint8_t>
 80122c2:	2800      	cmp	r0, #0
 80122c4:	d0df      	beq.n	8012286 <uxr_deserialize_ObjectVariant+0x56>
 80122c6:	7933      	ldrb	r3, [r6, #4]
 80122c8:	2b01      	cmp	r3, #1
 80122ca:	d001      	beq.n	80122d0 <uxr_deserialize_ObjectVariant+0xa0>
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	d1d8      	bne.n	8012282 <uxr_deserialize_ObjectVariant+0x52>
 80122d0:	68b1      	ldr	r1, [r6, #8]
 80122d2:	4628      	mov	r0, r5
 80122d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80122dc:	f004 b80c 	b.w	80162f8 <ucdr_deserialize_string>
 80122e0:	1d31      	adds	r1, r6, #4
 80122e2:	4628      	mov	r0, r5
 80122e4:	f7fc fc14 	bl	800eb10 <ucdr_deserialize_uint8_t>
 80122e8:	4607      	mov	r7, r0
 80122ea:	2800      	cmp	r0, #0
 80122ec:	d0db      	beq.n	80122a6 <uxr_deserialize_ObjectVariant+0x76>
 80122ee:	7933      	ldrb	r3, [r6, #4]
 80122f0:	2b02      	cmp	r3, #2
 80122f2:	d00c      	beq.n	801230e <uxr_deserialize_ObjectVariant+0xde>
 80122f4:	2b03      	cmp	r3, #3
 80122f6:	d1d6      	bne.n	80122a6 <uxr_deserialize_ObjectVariant+0x76>
 80122f8:	f106 0308 	add.w	r3, r6, #8
 80122fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012300:	f106 010c 	add.w	r1, r6, #12
 8012304:	4628      	mov	r0, r5
 8012306:	f003 ffcd 	bl	80162a4 <ucdr_deserialize_sequence_uint8_t>
 801230a:	4607      	mov	r7, r0
 801230c:	e7cb      	b.n	80122a6 <uxr_deserialize_ObjectVariant+0x76>
 801230e:	68b1      	ldr	r1, [r6, #8]
 8012310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012314:	4628      	mov	r0, r5
 8012316:	f003 ffef 	bl	80162f8 <ucdr_deserialize_string>
 801231a:	4607      	mov	r7, r0
 801231c:	e7c3      	b.n	80122a6 <uxr_deserialize_ObjectVariant+0x76>
 801231e:	2204      	movs	r2, #4
 8012320:	18b1      	adds	r1, r6, r2
 8012322:	4628      	mov	r0, r5
 8012324:	f003 ff1c 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8012328:	2202      	movs	r2, #2
 801232a:	4604      	mov	r4, r0
 801232c:	f106 0108 	add.w	r1, r6, #8
 8012330:	4628      	mov	r0, r5
 8012332:	f003 ff15 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8012336:	2202      	movs	r2, #2
 8012338:	4004      	ands	r4, r0
 801233a:	f106 010a 	add.w	r1, r6, #10
 801233e:	4628      	mov	r0, r5
 8012340:	f003 ff0e 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8012344:	b2e4      	uxtb	r4, r4
 8012346:	4603      	mov	r3, r0
 8012348:	f106 010c 	add.w	r1, r6, #12
 801234c:	4628      	mov	r0, r5
 801234e:	401c      	ands	r4, r3
 8012350:	f7fc fbae 	bl	800eab0 <ucdr_deserialize_bool>
 8012354:	4004      	ands	r4, r0
 8012356:	e794      	b.n	8012282 <uxr_deserialize_ObjectVariant+0x52>
 8012358:	1d31      	adds	r1, r6, #4
 801235a:	4628      	mov	r0, r5
 801235c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012360:	f7ff bbd0 	b.w	8011b04 <uxr_deserialize_CLIENT_Representation>
 8012364:	68b1      	ldr	r1, [r6, #8]
 8012366:	f44f 7200 	mov.w	r2, #512	; 0x200
 801236a:	4628      	mov	r0, r5
 801236c:	f003 ffc4 	bl	80162f8 <ucdr_deserialize_string>
 8012370:	4607      	mov	r7, r0
 8012372:	e77f      	b.n	8012274 <uxr_deserialize_ObjectVariant+0x44>
 8012374:	f106 0308 	add.w	r3, r6, #8
 8012378:	f44f 7200 	mov.w	r2, #512	; 0x200
 801237c:	f106 010c 	add.w	r1, r6, #12
 8012380:	4628      	mov	r0, r5
 8012382:	f003 ff8f 	bl	80162a4 <ucdr_deserialize_sequence_uint8_t>
 8012386:	4607      	mov	r7, r0
 8012388:	e774      	b.n	8012274 <uxr_deserialize_ObjectVariant+0x44>
 801238a:	bf00      	nop

0801238c <uxr_deserialize_BaseObjectRequest>:
 801238c:	b570      	push	{r4, r5, r6, lr}
 801238e:	2202      	movs	r2, #2
 8012390:	4605      	mov	r5, r0
 8012392:	460e      	mov	r6, r1
 8012394:	f003 fee4 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8012398:	1cb1      	adds	r1, r6, #2
 801239a:	4604      	mov	r4, r0
 801239c:	2202      	movs	r2, #2
 801239e:	4628      	mov	r0, r5
 80123a0:	f003 fede 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 80123a4:	4020      	ands	r0, r4
 80123a6:	b2c0      	uxtb	r0, r0
 80123a8:	bd70      	pop	{r4, r5, r6, pc}
 80123aa:	bf00      	nop

080123ac <uxr_serialize_AGENT_ActivityInfo>:
 80123ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123b0:	460e      	mov	r6, r1
 80123b2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80123b6:	4607      	mov	r7, r0
 80123b8:	f7fd f8d0 	bl	800f55c <ucdr_serialize_int16_t>
 80123bc:	6871      	ldr	r1, [r6, #4]
 80123be:	4680      	mov	r8, r0
 80123c0:	4638      	mov	r0, r7
 80123c2:	f7fc fda5 	bl	800ef10 <ucdr_serialize_uint32_t>
 80123c6:	6873      	ldr	r3, [r6, #4]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d06a      	beq.n	80124a2 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 80123cc:	b318      	cbz	r0, 8012416 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 80123ce:	f106 0904 	add.w	r9, r6, #4
 80123d2:	2500      	movs	r5, #0
 80123d4:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80123d8:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 80123dc:	7a21      	ldrb	r1, [r4, #8]
 80123de:	4638      	mov	r0, r7
 80123e0:	f7fc fb80 	bl	800eae4 <ucdr_serialize_uint8_t>
 80123e4:	2800      	cmp	r0, #0
 80123e6:	d051      	beq.n	801248c <uxr_serialize_AGENT_ActivityInfo+0xe0>
 80123e8:	7a23      	ldrb	r3, [r4, #8]
 80123ea:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80123ee:	00c9      	lsls	r1, r1, #3
 80123f0:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 80123f4:	2b03      	cmp	r3, #3
 80123f6:	d859      	bhi.n	80124ac <uxr_serialize_AGENT_ActivityInfo+0x100>
 80123f8:	e8df f003 	tbb	[pc, r3]
 80123fc:	02122436 	.word	0x02122436
 8012400:	4449      	add	r1, r9
 8012402:	4638      	mov	r0, r7
 8012404:	6889      	ldr	r1, [r1, #8]
 8012406:	f003 ff67 	bl	80162d8 <ucdr_serialize_string>
 801240a:	6873      	ldr	r3, [r6, #4]
 801240c:	3501      	adds	r5, #1
 801240e:	429d      	cmp	r5, r3
 8012410:	d240      	bcs.n	8012494 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 8012412:	2800      	cmp	r0, #0
 8012414:	d1de      	bne.n	80123d4 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8012416:	f04f 0800 	mov.w	r8, #0
 801241a:	4640      	mov	r0, r8
 801241c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012420:	3108      	adds	r1, #8
 8012422:	4449      	add	r1, r9
 8012424:	2210      	movs	r2, #16
 8012426:	4638      	mov	r0, r7
 8012428:	f003 fe36 	bl	8016098 <ucdr_serialize_array_uint8_t>
 801242c:	44aa      	add	sl, r5
 801242e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012432:	4604      	mov	r4, r0
 8012434:	f8da 101c 	ldr.w	r1, [sl, #28]
 8012438:	4638      	mov	r0, r7
 801243a:	f7fc fd69 	bl	800ef10 <ucdr_serialize_uint32_t>
 801243e:	4020      	ands	r0, r4
 8012440:	b2c0      	uxtb	r0, r0
 8012442:	e7e2      	b.n	801240a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012444:	3108      	adds	r1, #8
 8012446:	4449      	add	r1, r9
 8012448:	2204      	movs	r2, #4
 801244a:	4638      	mov	r0, r7
 801244c:	f003 fe24 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8012450:	44aa      	add	sl, r5
 8012452:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012456:	4604      	mov	r4, r0
 8012458:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 801245c:	4638      	mov	r0, r7
 801245e:	f7fc fb6d 	bl	800eb3c <ucdr_serialize_uint16_t>
 8012462:	4020      	ands	r0, r4
 8012464:	b2c0      	uxtb	r0, r0
 8012466:	e7d0      	b.n	801240a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012468:	3108      	adds	r1, #8
 801246a:	4449      	add	r1, r9
 801246c:	2202      	movs	r2, #2
 801246e:	4638      	mov	r0, r7
 8012470:	f003 fe12 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8012474:	44aa      	add	sl, r5
 8012476:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801247a:	4604      	mov	r4, r0
 801247c:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8012480:	4638      	mov	r0, r7
 8012482:	f7fc fb2f 	bl	800eae4 <ucdr_serialize_uint8_t>
 8012486:	4020      	ands	r0, r4
 8012488:	b2c0      	uxtb	r0, r0
 801248a:	e7be      	b.n	801240a <uxr_serialize_AGENT_ActivityInfo+0x5e>
 801248c:	6873      	ldr	r3, [r6, #4]
 801248e:	3501      	adds	r5, #1
 8012490:	429d      	cmp	r5, r3
 8012492:	d3c0      	bcc.n	8012416 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8012494:	ea08 0000 	and.w	r0, r8, r0
 8012498:	fa5f f880 	uxtb.w	r8, r0
 801249c:	4640      	mov	r0, r8
 801249e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124a2:	ea08 0800 	and.w	r8, r8, r0
 80124a6:	fa5f f888 	uxtb.w	r8, r8
 80124aa:	e7b6      	b.n	801241a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 80124ac:	6873      	ldr	r3, [r6, #4]
 80124ae:	3501      	adds	r5, #1
 80124b0:	42ab      	cmp	r3, r5
 80124b2:	f104 0418 	add.w	r4, r4, #24
 80124b6:	d891      	bhi.n	80123dc <uxr_serialize_AGENT_ActivityInfo+0x30>
 80124b8:	e7af      	b.n	801241a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 80124ba:	bf00      	nop

080124bc <uxr_serialize_ActivityInfoVariant>:
 80124bc:	b570      	push	{r4, r5, r6, lr}
 80124be:	460d      	mov	r5, r1
 80124c0:	7809      	ldrb	r1, [r1, #0]
 80124c2:	4606      	mov	r6, r0
 80124c4:	f7fc fb0e 	bl	800eae4 <ucdr_serialize_uint8_t>
 80124c8:	b130      	cbz	r0, 80124d8 <uxr_serialize_ActivityInfoVariant+0x1c>
 80124ca:	782b      	ldrb	r3, [r5, #0]
 80124cc:	2b06      	cmp	r3, #6
 80124ce:	d019      	beq.n	8012504 <uxr_serialize_ActivityInfoVariant+0x48>
 80124d0:	2b0d      	cmp	r3, #13
 80124d2:	d010      	beq.n	80124f6 <uxr_serialize_ActivityInfoVariant+0x3a>
 80124d4:	2b05      	cmp	r3, #5
 80124d6:	d000      	beq.n	80124da <uxr_serialize_ActivityInfoVariant+0x1e>
 80124d8:	bd70      	pop	{r4, r5, r6, pc}
 80124da:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80124de:	4630      	mov	r0, r6
 80124e0:	f7fd f83c 	bl	800f55c <ucdr_serialize_int16_t>
 80124e4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80124e8:	4604      	mov	r4, r0
 80124ea:	4630      	mov	r0, r6
 80124ec:	f7fc ff66 	bl	800f3bc <ucdr_serialize_uint64_t>
 80124f0:	4020      	ands	r0, r4
 80124f2:	b2c0      	uxtb	r0, r0
 80124f4:	bd70      	pop	{r4, r5, r6, pc}
 80124f6:	f105 0108 	add.w	r1, r5, #8
 80124fa:	4630      	mov	r0, r6
 80124fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012500:	f7ff bf54 	b.w	80123ac <uxr_serialize_AGENT_ActivityInfo>
 8012504:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012508:	4630      	mov	r0, r6
 801250a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801250e:	f7fd b825 	b.w	800f55c <ucdr_serialize_int16_t>
 8012512:	bf00      	nop

08012514 <uxr_deserialize_BaseObjectReply>:
 8012514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012518:	2202      	movs	r2, #2
 801251a:	4606      	mov	r6, r0
 801251c:	460f      	mov	r7, r1
 801251e:	f003 fe1f 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8012522:	2202      	movs	r2, #2
 8012524:	1cb9      	adds	r1, r7, #2
 8012526:	4605      	mov	r5, r0
 8012528:	4630      	mov	r0, r6
 801252a:	f003 fe19 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 801252e:	1d39      	adds	r1, r7, #4
 8012530:	4680      	mov	r8, r0
 8012532:	4630      	mov	r0, r6
 8012534:	f7fc faec 	bl	800eb10 <ucdr_deserialize_uint8_t>
 8012538:	1d79      	adds	r1, r7, #5
 801253a:	4604      	mov	r4, r0
 801253c:	4630      	mov	r0, r6
 801253e:	f7fc fae7 	bl	800eb10 <ucdr_deserialize_uint8_t>
 8012542:	ea05 0508 	and.w	r5, r5, r8
 8012546:	402c      	ands	r4, r5
 8012548:	4020      	ands	r0, r4
 801254a:	b2c0      	uxtb	r0, r0
 801254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012550 <uxr_serialize_ReadSpecification>:
 8012550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012554:	460e      	mov	r6, r1
 8012556:	7809      	ldrb	r1, [r1, #0]
 8012558:	4607      	mov	r7, r0
 801255a:	f7fc fac3 	bl	800eae4 <ucdr_serialize_uint8_t>
 801255e:	7871      	ldrb	r1, [r6, #1]
 8012560:	4604      	mov	r4, r0
 8012562:	4638      	mov	r0, r7
 8012564:	f7fc fabe 	bl	800eae4 <ucdr_serialize_uint8_t>
 8012568:	78b1      	ldrb	r1, [r6, #2]
 801256a:	4004      	ands	r4, r0
 801256c:	4638      	mov	r0, r7
 801256e:	f7fc fa89 	bl	800ea84 <ucdr_serialize_bool>
 8012572:	78b3      	ldrb	r3, [r6, #2]
 8012574:	b2e4      	uxtb	r4, r4
 8012576:	4004      	ands	r4, r0
 8012578:	b94b      	cbnz	r3, 801258e <uxr_serialize_ReadSpecification+0x3e>
 801257a:	7a31      	ldrb	r1, [r6, #8]
 801257c:	4638      	mov	r0, r7
 801257e:	f7fc fa81 	bl	800ea84 <ucdr_serialize_bool>
 8012582:	7a33      	ldrb	r3, [r6, #8]
 8012584:	4004      	ands	r4, r0
 8012586:	b943      	cbnz	r3, 801259a <uxr_serialize_ReadSpecification+0x4a>
 8012588:	4620      	mov	r0, r4
 801258a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801258e:	6871      	ldr	r1, [r6, #4]
 8012590:	4638      	mov	r0, r7
 8012592:	f003 fea1 	bl	80162d8 <ucdr_serialize_string>
 8012596:	4004      	ands	r4, r0
 8012598:	e7ef      	b.n	801257a <uxr_serialize_ReadSpecification+0x2a>
 801259a:	8971      	ldrh	r1, [r6, #10]
 801259c:	4638      	mov	r0, r7
 801259e:	f7fc facd 	bl	800eb3c <ucdr_serialize_uint16_t>
 80125a2:	89b1      	ldrh	r1, [r6, #12]
 80125a4:	4605      	mov	r5, r0
 80125a6:	4638      	mov	r0, r7
 80125a8:	f7fc fac8 	bl	800eb3c <ucdr_serialize_uint16_t>
 80125ac:	89f1      	ldrh	r1, [r6, #14]
 80125ae:	4005      	ands	r5, r0
 80125b0:	4638      	mov	r0, r7
 80125b2:	f7fc fac3 	bl	800eb3c <ucdr_serialize_uint16_t>
 80125b6:	8a31      	ldrh	r1, [r6, #16]
 80125b8:	4680      	mov	r8, r0
 80125ba:	4638      	mov	r0, r7
 80125bc:	f7fc fabe 	bl	800eb3c <ucdr_serialize_uint16_t>
 80125c0:	b2ed      	uxtb	r5, r5
 80125c2:	4025      	ands	r5, r4
 80125c4:	ea08 0505 	and.w	r5, r8, r5
 80125c8:	ea00 0405 	and.w	r4, r0, r5
 80125cc:	4620      	mov	r0, r4
 80125ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d2:	bf00      	nop

080125d4 <uxr_serialize_CREATE_CLIENT_Payload>:
 80125d4:	f7ff ba3a 	b.w	8011a4c <uxr_serialize_CLIENT_Representation>

080125d8 <uxr_serialize_CREATE_Payload>:
 80125d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125da:	2202      	movs	r2, #2
 80125dc:	4606      	mov	r6, r0
 80125de:	460d      	mov	r5, r1
 80125e0:	f003 fd5a 	bl	8016098 <ucdr_serialize_array_uint8_t>
 80125e4:	1ca9      	adds	r1, r5, #2
 80125e6:	4604      	mov	r4, r0
 80125e8:	2202      	movs	r2, #2
 80125ea:	4630      	mov	r0, r6
 80125ec:	f003 fd54 	bl	8016098 <ucdr_serialize_array_uint8_t>
 80125f0:	7929      	ldrb	r1, [r5, #4]
 80125f2:	4607      	mov	r7, r0
 80125f4:	4630      	mov	r0, r6
 80125f6:	f7fc fa75 	bl	800eae4 <ucdr_serialize_uint8_t>
 80125fa:	b328      	cbz	r0, 8012648 <uxr_serialize_CREATE_Payload+0x70>
 80125fc:	792b      	ldrb	r3, [r5, #4]
 80125fe:	403c      	ands	r4, r7
 8012600:	3b01      	subs	r3, #1
 8012602:	b2e4      	uxtb	r4, r4
 8012604:	2b0d      	cmp	r3, #13
 8012606:	d81d      	bhi.n	8012644 <uxr_serialize_CREATE_Payload+0x6c>
 8012608:	e8df f003 	tbb	[pc, r3]
 801260c:	32320753 	.word	0x32320753
 8012610:	07070707 	.word	0x07070707
 8012614:	2121211c 	.word	0x2121211c
 8012618:	684c      	.short	0x684c
 801261a:	7a29      	ldrb	r1, [r5, #8]
 801261c:	4630      	mov	r0, r6
 801261e:	f7fc fa61 	bl	800eae4 <ucdr_serialize_uint8_t>
 8012622:	4607      	mov	r7, r0
 8012624:	b130      	cbz	r0, 8012634 <uxr_serialize_CREATE_Payload+0x5c>
 8012626:	7a2b      	ldrb	r3, [r5, #8]
 8012628:	2b02      	cmp	r3, #2
 801262a:	d035      	beq.n	8012698 <uxr_serialize_CREATE_Payload+0xc0>
 801262c:	2b03      	cmp	r3, #3
 801262e:	d02b      	beq.n	8012688 <uxr_serialize_CREATE_Payload+0xb0>
 8012630:	2b01      	cmp	r3, #1
 8012632:	d031      	beq.n	8012698 <uxr_serialize_CREATE_Payload+0xc0>
 8012634:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8012638:	4630      	mov	r0, r6
 801263a:	2202      	movs	r2, #2
 801263c:	f003 fd2c 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8012640:	4038      	ands	r0, r7
 8012642:	4004      	ands	r4, r0
 8012644:	4620      	mov	r0, r4
 8012646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012648:	2400      	movs	r4, #0
 801264a:	4620      	mov	r0, r4
 801264c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801264e:	7a29      	ldrb	r1, [r5, #8]
 8012650:	4630      	mov	r0, r6
 8012652:	f7fc fa47 	bl	800eae4 <ucdr_serialize_uint8_t>
 8012656:	2800      	cmp	r0, #0
 8012658:	d0f6      	beq.n	8012648 <uxr_serialize_CREATE_Payload+0x70>
 801265a:	7a2b      	ldrb	r3, [r5, #8]
 801265c:	2b01      	cmp	r3, #1
 801265e:	d001      	beq.n	8012664 <uxr_serialize_CREATE_Payload+0x8c>
 8012660:	2b02      	cmp	r3, #2
 8012662:	d1ef      	bne.n	8012644 <uxr_serialize_CREATE_Payload+0x6c>
 8012664:	68e9      	ldr	r1, [r5, #12]
 8012666:	4630      	mov	r0, r6
 8012668:	f003 fe36 	bl	80162d8 <ucdr_serialize_string>
 801266c:	4004      	ands	r4, r0
 801266e:	e7e9      	b.n	8012644 <uxr_serialize_CREATE_Payload+0x6c>
 8012670:	7a29      	ldrb	r1, [r5, #8]
 8012672:	4630      	mov	r0, r6
 8012674:	f7fc fa36 	bl	800eae4 <ucdr_serialize_uint8_t>
 8012678:	4607      	mov	r7, r0
 801267a:	2800      	cmp	r0, #0
 801267c:	d0da      	beq.n	8012634 <uxr_serialize_CREATE_Payload+0x5c>
 801267e:	7a2b      	ldrb	r3, [r5, #8]
 8012680:	2b02      	cmp	r3, #2
 8012682:	d009      	beq.n	8012698 <uxr_serialize_CREATE_Payload+0xc0>
 8012684:	2b03      	cmp	r3, #3
 8012686:	d1d5      	bne.n	8012634 <uxr_serialize_CREATE_Payload+0x5c>
 8012688:	68ea      	ldr	r2, [r5, #12]
 801268a:	f105 0110 	add.w	r1, r5, #16
 801268e:	4630      	mov	r0, r6
 8012690:	f003 fdf6 	bl	8016280 <ucdr_serialize_sequence_uint8_t>
 8012694:	4607      	mov	r7, r0
 8012696:	e7cd      	b.n	8012634 <uxr_serialize_CREATE_Payload+0x5c>
 8012698:	68e9      	ldr	r1, [r5, #12]
 801269a:	4630      	mov	r0, r6
 801269c:	f003 fe1c 	bl	80162d8 <ucdr_serialize_string>
 80126a0:	4607      	mov	r7, r0
 80126a2:	e7c7      	b.n	8012634 <uxr_serialize_CREATE_Payload+0x5c>
 80126a4:	f105 0108 	add.w	r1, r5, #8
 80126a8:	4630      	mov	r0, r6
 80126aa:	f7ff fa95 	bl	8011bd8 <uxr_serialize_AGENT_Representation>
 80126ae:	4004      	ands	r4, r0
 80126b0:	e7c8      	b.n	8012644 <uxr_serialize_CREATE_Payload+0x6c>
 80126b2:	7a29      	ldrb	r1, [r5, #8]
 80126b4:	4630      	mov	r0, r6
 80126b6:	f7fc fa15 	bl	800eae4 <ucdr_serialize_uint8_t>
 80126ba:	4607      	mov	r7, r0
 80126bc:	b130      	cbz	r0, 80126cc <uxr_serialize_CREATE_Payload+0xf4>
 80126be:	7a2b      	ldrb	r3, [r5, #8]
 80126c0:	2b02      	cmp	r3, #2
 80126c2:	d012      	beq.n	80126ea <uxr_serialize_CREATE_Payload+0x112>
 80126c4:	2b03      	cmp	r3, #3
 80126c6:	d016      	beq.n	80126f6 <uxr_serialize_CREATE_Payload+0x11e>
 80126c8:	2b01      	cmp	r3, #1
 80126ca:	d00e      	beq.n	80126ea <uxr_serialize_CREATE_Payload+0x112>
 80126cc:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 80126d0:	4630      	mov	r0, r6
 80126d2:	f7fc ff43 	bl	800f55c <ucdr_serialize_int16_t>
 80126d6:	4038      	ands	r0, r7
 80126d8:	4004      	ands	r4, r0
 80126da:	e7b3      	b.n	8012644 <uxr_serialize_CREATE_Payload+0x6c>
 80126dc:	f105 0108 	add.w	r1, r5, #8
 80126e0:	4630      	mov	r0, r6
 80126e2:	f7ff f9b3 	bl	8011a4c <uxr_serialize_CLIENT_Representation>
 80126e6:	4004      	ands	r4, r0
 80126e8:	e7ac      	b.n	8012644 <uxr_serialize_CREATE_Payload+0x6c>
 80126ea:	68e9      	ldr	r1, [r5, #12]
 80126ec:	4630      	mov	r0, r6
 80126ee:	f003 fdf3 	bl	80162d8 <ucdr_serialize_string>
 80126f2:	4607      	mov	r7, r0
 80126f4:	e7ea      	b.n	80126cc <uxr_serialize_CREATE_Payload+0xf4>
 80126f6:	68ea      	ldr	r2, [r5, #12]
 80126f8:	f105 0110 	add.w	r1, r5, #16
 80126fc:	4630      	mov	r0, r6
 80126fe:	f003 fdbf 	bl	8016280 <ucdr_serialize_sequence_uint8_t>
 8012702:	4607      	mov	r7, r0
 8012704:	e7e2      	b.n	80126cc <uxr_serialize_CREATE_Payload+0xf4>
 8012706:	bf00      	nop

08012708 <uxr_deserialize_GET_INFO_Payload>:
 8012708:	b570      	push	{r4, r5, r6, lr}
 801270a:	2202      	movs	r2, #2
 801270c:	4605      	mov	r5, r0
 801270e:	460e      	mov	r6, r1
 8012710:	f003 fd26 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8012714:	1cb1      	adds	r1, r6, #2
 8012716:	2202      	movs	r2, #2
 8012718:	4604      	mov	r4, r0
 801271a:	4628      	mov	r0, r5
 801271c:	f003 fd20 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8012720:	1d31      	adds	r1, r6, #4
 8012722:	4004      	ands	r4, r0
 8012724:	4628      	mov	r0, r5
 8012726:	f7fc fd23 	bl	800f170 <ucdr_deserialize_uint32_t>
 801272a:	b2e4      	uxtb	r4, r4
 801272c:	4020      	ands	r0, r4
 801272e:	bd70      	pop	{r4, r5, r6, pc}

08012730 <uxr_serialize_DELETE_Payload>:
 8012730:	b570      	push	{r4, r5, r6, lr}
 8012732:	2202      	movs	r2, #2
 8012734:	4605      	mov	r5, r0
 8012736:	460e      	mov	r6, r1
 8012738:	f003 fcae 	bl	8016098 <ucdr_serialize_array_uint8_t>
 801273c:	1cb1      	adds	r1, r6, #2
 801273e:	4604      	mov	r4, r0
 8012740:	2202      	movs	r2, #2
 8012742:	4628      	mov	r0, r5
 8012744:	f003 fca8 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8012748:	4020      	ands	r0, r4
 801274a:	b2c0      	uxtb	r0, r0
 801274c:	bd70      	pop	{r4, r5, r6, pc}
 801274e:	bf00      	nop

08012750 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012754:	4606      	mov	r6, r0
 8012756:	460f      	mov	r7, r1
 8012758:	f7fc f9da 	bl	800eb10 <ucdr_deserialize_uint8_t>
 801275c:	1c79      	adds	r1, r7, #1
 801275e:	4605      	mov	r5, r0
 8012760:	4630      	mov	r0, r6
 8012762:	f7fc f9d5 	bl	800eb10 <ucdr_deserialize_uint8_t>
 8012766:	1d39      	adds	r1, r7, #4
 8012768:	4681      	mov	r9, r0
 801276a:	2204      	movs	r2, #4
 801276c:	4630      	mov	r0, r6
 801276e:	f003 fcf7 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8012772:	f107 0108 	add.w	r1, r7, #8
 8012776:	4604      	mov	r4, r0
 8012778:	2202      	movs	r2, #2
 801277a:	4630      	mov	r0, r6
 801277c:	f003 fcf0 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8012780:	f107 010a 	add.w	r1, r7, #10
 8012784:	4680      	mov	r8, r0
 8012786:	2202      	movs	r2, #2
 8012788:	4630      	mov	r0, r6
 801278a:	f003 fce9 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 801278e:	ea05 0509 	and.w	r5, r5, r9
 8012792:	b2ed      	uxtb	r5, r5
 8012794:	402c      	ands	r4, r5
 8012796:	f107 010c 	add.w	r1, r7, #12
 801279a:	4605      	mov	r5, r0
 801279c:	4630      	mov	r0, r6
 801279e:	f7fc f987 	bl	800eab0 <ucdr_deserialize_bool>
 80127a2:	ea08 0404 	and.w	r4, r8, r4
 80127a6:	4025      	ands	r5, r4
 80127a8:	4028      	ands	r0, r5
 80127aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127ae:	bf00      	nop

080127b0 <uxr_deserialize_STATUS_Payload>:
 80127b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127b4:	2202      	movs	r2, #2
 80127b6:	4606      	mov	r6, r0
 80127b8:	460f      	mov	r7, r1
 80127ba:	f003 fcd1 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 80127be:	2202      	movs	r2, #2
 80127c0:	1cb9      	adds	r1, r7, #2
 80127c2:	4605      	mov	r5, r0
 80127c4:	4630      	mov	r0, r6
 80127c6:	f003 fccb 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 80127ca:	1d39      	adds	r1, r7, #4
 80127cc:	4680      	mov	r8, r0
 80127ce:	4630      	mov	r0, r6
 80127d0:	f7fc f99e 	bl	800eb10 <ucdr_deserialize_uint8_t>
 80127d4:	1d79      	adds	r1, r7, #5
 80127d6:	4604      	mov	r4, r0
 80127d8:	4630      	mov	r0, r6
 80127da:	f7fc f999 	bl	800eb10 <ucdr_deserialize_uint8_t>
 80127de:	ea05 0508 	and.w	r5, r5, r8
 80127e2:	402c      	ands	r4, r5
 80127e4:	4020      	ands	r0, r4
 80127e6:	b2c0      	uxtb	r0, r0
 80127e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080127ec <uxr_serialize_INFO_Payload>:
 80127ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f0:	2202      	movs	r2, #2
 80127f2:	460c      	mov	r4, r1
 80127f4:	4605      	mov	r5, r0
 80127f6:	f003 fc4f 	bl	8016098 <ucdr_serialize_array_uint8_t>
 80127fa:	2202      	movs	r2, #2
 80127fc:	4680      	mov	r8, r0
 80127fe:	1ca1      	adds	r1, r4, #2
 8012800:	4628      	mov	r0, r5
 8012802:	f003 fc49 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8012806:	7921      	ldrb	r1, [r4, #4]
 8012808:	4607      	mov	r7, r0
 801280a:	4628      	mov	r0, r5
 801280c:	f7fc f96a 	bl	800eae4 <ucdr_serialize_uint8_t>
 8012810:	7961      	ldrb	r1, [r4, #5]
 8012812:	4606      	mov	r6, r0
 8012814:	4628      	mov	r0, r5
 8012816:	f7fc f965 	bl	800eae4 <ucdr_serialize_uint8_t>
 801281a:	ea08 0807 	and.w	r8, r8, r7
 801281e:	ea06 0608 	and.w	r6, r6, r8
 8012822:	4006      	ands	r6, r0
 8012824:	7a21      	ldrb	r1, [r4, #8]
 8012826:	4628      	mov	r0, r5
 8012828:	f7fc f92c 	bl	800ea84 <ucdr_serialize_bool>
 801282c:	7a23      	ldrb	r3, [r4, #8]
 801282e:	b2f7      	uxtb	r7, r6
 8012830:	4606      	mov	r6, r0
 8012832:	b96b      	cbnz	r3, 8012850 <uxr_serialize_INFO_Payload+0x64>
 8012834:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8012838:	4628      	mov	r0, r5
 801283a:	f7fc f923 	bl	800ea84 <ucdr_serialize_bool>
 801283e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8012842:	4030      	ands	r0, r6
 8012844:	b2c6      	uxtb	r6, r0
 8012846:	b983      	cbnz	r3, 801286a <uxr_serialize_INFO_Payload+0x7e>
 8012848:	ea06 0007 	and.w	r0, r6, r7
 801284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012850:	7b21      	ldrb	r1, [r4, #12]
 8012852:	4628      	mov	r0, r5
 8012854:	f7fc f946 	bl	800eae4 <ucdr_serialize_uint8_t>
 8012858:	b188      	cbz	r0, 801287e <uxr_serialize_INFO_Payload+0x92>
 801285a:	f104 010c 	add.w	r1, r4, #12
 801285e:	4628      	mov	r0, r5
 8012860:	f7ff fa06 	bl	8011c70 <uxr_serialize_ObjectVariant.part.0>
 8012864:	4030      	ands	r0, r6
 8012866:	b2c6      	uxtb	r6, r0
 8012868:	e7e4      	b.n	8012834 <uxr_serialize_INFO_Payload+0x48>
 801286a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801286e:	4628      	mov	r0, r5
 8012870:	f7ff fe24 	bl	80124bc <uxr_serialize_ActivityInfoVariant>
 8012874:	4006      	ands	r6, r0
 8012876:	ea06 0007 	and.w	r0, r6, r7
 801287a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801287e:	4606      	mov	r6, r0
 8012880:	e7d8      	b.n	8012834 <uxr_serialize_INFO_Payload+0x48>
 8012882:	bf00      	nop

08012884 <uxr_serialize_READ_DATA_Payload>:
 8012884:	b570      	push	{r4, r5, r6, lr}
 8012886:	2202      	movs	r2, #2
 8012888:	4605      	mov	r5, r0
 801288a:	460e      	mov	r6, r1
 801288c:	f003 fc04 	bl	8016098 <ucdr_serialize_array_uint8_t>
 8012890:	1cb1      	adds	r1, r6, #2
 8012892:	2202      	movs	r2, #2
 8012894:	4604      	mov	r4, r0
 8012896:	4628      	mov	r0, r5
 8012898:	f003 fbfe 	bl	8016098 <ucdr_serialize_array_uint8_t>
 801289c:	1d31      	adds	r1, r6, #4
 801289e:	4004      	ands	r4, r0
 80128a0:	4628      	mov	r0, r5
 80128a2:	f7ff fe55 	bl	8012550 <uxr_serialize_ReadSpecification>
 80128a6:	b2e4      	uxtb	r4, r4
 80128a8:	4020      	ands	r0, r4
 80128aa:	bd70      	pop	{r4, r5, r6, pc}

080128ac <uxr_serialize_WRITE_DATA_Payload_Data>:
 80128ac:	b570      	push	{r4, r5, r6, lr}
 80128ae:	2202      	movs	r2, #2
 80128b0:	4605      	mov	r5, r0
 80128b2:	460e      	mov	r6, r1
 80128b4:	f003 fbf0 	bl	8016098 <ucdr_serialize_array_uint8_t>
 80128b8:	1cb1      	adds	r1, r6, #2
 80128ba:	4604      	mov	r4, r0
 80128bc:	2202      	movs	r2, #2
 80128be:	4628      	mov	r0, r5
 80128c0:	f003 fbea 	bl	8016098 <ucdr_serialize_array_uint8_t>
 80128c4:	4020      	ands	r0, r4
 80128c6:	b2c0      	uxtb	r0, r0
 80128c8:	bd70      	pop	{r4, r5, r6, pc}
 80128ca:	bf00      	nop

080128cc <uxr_serialize_ACKNACK_Payload>:
 80128cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ce:	460f      	mov	r7, r1
 80128d0:	460e      	mov	r6, r1
 80128d2:	f837 1b02 	ldrh.w	r1, [r7], #2
 80128d6:	4605      	mov	r5, r0
 80128d8:	f7fc f930 	bl	800eb3c <ucdr_serialize_uint16_t>
 80128dc:	4639      	mov	r1, r7
 80128de:	2202      	movs	r2, #2
 80128e0:	4604      	mov	r4, r0
 80128e2:	4628      	mov	r0, r5
 80128e4:	f003 fbd8 	bl	8016098 <ucdr_serialize_array_uint8_t>
 80128e8:	7931      	ldrb	r1, [r6, #4]
 80128ea:	4004      	ands	r4, r0
 80128ec:	4628      	mov	r0, r5
 80128ee:	f7fc f8f9 	bl	800eae4 <ucdr_serialize_uint8_t>
 80128f2:	b2e4      	uxtb	r4, r4
 80128f4:	4020      	ands	r0, r4
 80128f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080128f8 <uxr_deserialize_ACKNACK_Payload>:
 80128f8:	b570      	push	{r4, r5, r6, lr}
 80128fa:	4605      	mov	r5, r0
 80128fc:	460e      	mov	r6, r1
 80128fe:	f7fc fa1d 	bl	800ed3c <ucdr_deserialize_uint16_t>
 8012902:	1cb1      	adds	r1, r6, #2
 8012904:	2202      	movs	r2, #2
 8012906:	4604      	mov	r4, r0
 8012908:	4628      	mov	r0, r5
 801290a:	f003 fc29 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 801290e:	1d31      	adds	r1, r6, #4
 8012910:	4004      	ands	r4, r0
 8012912:	4628      	mov	r0, r5
 8012914:	f7fc f8fc 	bl	800eb10 <ucdr_deserialize_uint8_t>
 8012918:	b2e4      	uxtb	r4, r4
 801291a:	4020      	ands	r0, r4
 801291c:	bd70      	pop	{r4, r5, r6, pc}
 801291e:	bf00      	nop

08012920 <uxr_serialize_HEARTBEAT_Payload>:
 8012920:	b570      	push	{r4, r5, r6, lr}
 8012922:	460d      	mov	r5, r1
 8012924:	8809      	ldrh	r1, [r1, #0]
 8012926:	4606      	mov	r6, r0
 8012928:	f7fc f908 	bl	800eb3c <ucdr_serialize_uint16_t>
 801292c:	8869      	ldrh	r1, [r5, #2]
 801292e:	4604      	mov	r4, r0
 8012930:	4630      	mov	r0, r6
 8012932:	f7fc f903 	bl	800eb3c <ucdr_serialize_uint16_t>
 8012936:	7929      	ldrb	r1, [r5, #4]
 8012938:	4004      	ands	r4, r0
 801293a:	4630      	mov	r0, r6
 801293c:	f7fc f8d2 	bl	800eae4 <ucdr_serialize_uint8_t>
 8012940:	b2e4      	uxtb	r4, r4
 8012942:	4020      	ands	r0, r4
 8012944:	bd70      	pop	{r4, r5, r6, pc}
 8012946:	bf00      	nop

08012948 <uxr_deserialize_HEARTBEAT_Payload>:
 8012948:	b570      	push	{r4, r5, r6, lr}
 801294a:	4605      	mov	r5, r0
 801294c:	460e      	mov	r6, r1
 801294e:	f7fc f9f5 	bl	800ed3c <ucdr_deserialize_uint16_t>
 8012952:	1cb1      	adds	r1, r6, #2
 8012954:	4604      	mov	r4, r0
 8012956:	4628      	mov	r0, r5
 8012958:	f7fc f9f0 	bl	800ed3c <ucdr_deserialize_uint16_t>
 801295c:	1d31      	adds	r1, r6, #4
 801295e:	4004      	ands	r4, r0
 8012960:	4628      	mov	r0, r5
 8012962:	f7fc f8d5 	bl	800eb10 <ucdr_deserialize_uint8_t>
 8012966:	b2e4      	uxtb	r4, r4
 8012968:	4020      	ands	r0, r4
 801296a:	bd70      	pop	{r4, r5, r6, pc}

0801296c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012970:	4605      	mov	r5, r0
 8012972:	460e      	mov	r6, r1
 8012974:	f7fc ff7e 	bl	800f874 <ucdr_deserialize_int32_t>
 8012978:	1d31      	adds	r1, r6, #4
 801297a:	4607      	mov	r7, r0
 801297c:	4628      	mov	r0, r5
 801297e:	f7fc fbf7 	bl	800f170 <ucdr_deserialize_uint32_t>
 8012982:	f106 0108 	add.w	r1, r6, #8
 8012986:	4680      	mov	r8, r0
 8012988:	4628      	mov	r0, r5
 801298a:	f7fc ff73 	bl	800f874 <ucdr_deserialize_int32_t>
 801298e:	f106 010c 	add.w	r1, r6, #12
 8012992:	4604      	mov	r4, r0
 8012994:	4628      	mov	r0, r5
 8012996:	f7fc fbeb 	bl	800f170 <ucdr_deserialize_uint32_t>
 801299a:	ea07 0708 	and.w	r7, r7, r8
 801299e:	403c      	ands	r4, r7
 80129a0:	f106 0110 	add.w	r1, r6, #16
 80129a4:	4004      	ands	r4, r0
 80129a6:	4628      	mov	r0, r5
 80129a8:	f7fc ff64 	bl	800f874 <ucdr_deserialize_int32_t>
 80129ac:	f106 0114 	add.w	r1, r6, #20
 80129b0:	4603      	mov	r3, r0
 80129b2:	4628      	mov	r0, r5
 80129b4:	461d      	mov	r5, r3
 80129b6:	f7fc fbdb 	bl	800f170 <ucdr_deserialize_uint32_t>
 80129ba:	b2e4      	uxtb	r4, r4
 80129bc:	402c      	ands	r4, r5
 80129be:	4020      	ands	r0, r4
 80129c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080129c4 <uxr_serialize_SampleIdentity>:
 80129c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129c8:	220c      	movs	r2, #12
 80129ca:	4604      	mov	r4, r0
 80129cc:	460d      	mov	r5, r1
 80129ce:	f003 fb63 	bl	8016098 <ucdr_serialize_array_uint8_t>
 80129d2:	2203      	movs	r2, #3
 80129d4:	f105 010c 	add.w	r1, r5, #12
 80129d8:	4607      	mov	r7, r0
 80129da:	4620      	mov	r0, r4
 80129dc:	f003 fb5c 	bl	8016098 <ucdr_serialize_array_uint8_t>
 80129e0:	7be9      	ldrb	r1, [r5, #15]
 80129e2:	4680      	mov	r8, r0
 80129e4:	4620      	mov	r0, r4
 80129e6:	f7fc f87d 	bl	800eae4 <ucdr_serialize_uint8_t>
 80129ea:	6929      	ldr	r1, [r5, #16]
 80129ec:	4606      	mov	r6, r0
 80129ee:	4620      	mov	r0, r4
 80129f0:	f7fc fea8 	bl	800f744 <ucdr_serialize_int32_t>
 80129f4:	6969      	ldr	r1, [r5, #20]
 80129f6:	4603      	mov	r3, r0
 80129f8:	4620      	mov	r0, r4
 80129fa:	ea07 0708 	and.w	r7, r7, r8
 80129fe:	461c      	mov	r4, r3
 8012a00:	f7fc fa86 	bl	800ef10 <ucdr_serialize_uint32_t>
 8012a04:	403e      	ands	r6, r7
 8012a06:	4034      	ands	r4, r6
 8012a08:	4020      	ands	r0, r4
 8012a0a:	b2c0      	uxtb	r0, r0
 8012a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a10 <uxr_deserialize_SampleIdentity>:
 8012a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a14:	220c      	movs	r2, #12
 8012a16:	4604      	mov	r4, r0
 8012a18:	460d      	mov	r5, r1
 8012a1a:	f003 fba1 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8012a1e:	2203      	movs	r2, #3
 8012a20:	f105 010c 	add.w	r1, r5, #12
 8012a24:	4607      	mov	r7, r0
 8012a26:	4620      	mov	r0, r4
 8012a28:	f003 fb9a 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8012a2c:	f105 010f 	add.w	r1, r5, #15
 8012a30:	4680      	mov	r8, r0
 8012a32:	4620      	mov	r0, r4
 8012a34:	f7fc f86c 	bl	800eb10 <ucdr_deserialize_uint8_t>
 8012a38:	f105 0110 	add.w	r1, r5, #16
 8012a3c:	4606      	mov	r6, r0
 8012a3e:	4620      	mov	r0, r4
 8012a40:	f7fc ff18 	bl	800f874 <ucdr_deserialize_int32_t>
 8012a44:	f105 0114 	add.w	r1, r5, #20
 8012a48:	4603      	mov	r3, r0
 8012a4a:	4620      	mov	r0, r4
 8012a4c:	ea07 0708 	and.w	r7, r7, r8
 8012a50:	461c      	mov	r4, r3
 8012a52:	f7fc fb8d 	bl	800f170 <ucdr_deserialize_uint32_t>
 8012a56:	403e      	ands	r6, r7
 8012a58:	4034      	ands	r4, r6
 8012a5a:	4020      	ands	r0, r4
 8012a5c:	b2c0      	uxtb	r0, r0
 8012a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a62:	bf00      	nop

08012a64 <rcl_client_get_rmw_handle>:
 8012a64:	b110      	cbz	r0, 8012a6c <rcl_client_get_rmw_handle+0x8>
 8012a66:	6800      	ldr	r0, [r0, #0]
 8012a68:	b100      	cbz	r0, 8012a6c <rcl_client_get_rmw_handle+0x8>
 8012a6a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012a6c:	4770      	bx	lr
 8012a6e:	bf00      	nop

08012a70 <rcl_take_response>:
 8012a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a72:	460e      	mov	r6, r1
 8012a74:	460c      	mov	r4, r1
 8012a76:	4607      	mov	r7, r0
 8012a78:	4694      	mov	ip, r2
 8012a7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012a7c:	b08d      	sub	sp, #52	; 0x34
 8012a7e:	ad06      	add	r5, sp, #24
 8012a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012a82:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012a86:	e885 0003 	stmia.w	r5, {r0, r1}
 8012a8a:	b337      	cbz	r7, 8012ada <rcl_take_response+0x6a>
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	b323      	cbz	r3, 8012ada <rcl_take_response+0x6a>
 8012a90:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012a92:	b310      	cbz	r0, 8012ada <rcl_take_response+0x6a>
 8012a94:	4662      	mov	r2, ip
 8012a96:	b31a      	cbz	r2, 8012ae0 <rcl_take_response+0x70>
 8012a98:	2300      	movs	r3, #0
 8012a9a:	2600      	movs	r6, #0
 8012a9c:	2700      	movs	r7, #0
 8012a9e:	f88d 3007 	strb.w	r3, [sp, #7]
 8012aa2:	a902      	add	r1, sp, #8
 8012aa4:	f10d 0307 	add.w	r3, sp, #7
 8012aa8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012aac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012ab0:	f003 f83a 	bl	8015b28 <rmw_take_response>
 8012ab4:	4606      	mov	r6, r0
 8012ab6:	b9a8      	cbnz	r0, 8012ae4 <rcl_take_response+0x74>
 8012ab8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012abc:	f240 13f5 	movw	r3, #501	; 0x1f5
 8012ac0:	2a00      	cmp	r2, #0
 8012ac2:	bf08      	it	eq
 8012ac4:	461e      	moveq	r6, r3
 8012ac6:	ad06      	add	r5, sp, #24
 8012ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012acc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012ad0:	e884 0003 	stmia.w	r4, {r0, r1}
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	b00d      	add	sp, #52	; 0x34
 8012ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ada:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8012ade:	e7f2      	b.n	8012ac6 <rcl_take_response+0x56>
 8012ae0:	260b      	movs	r6, #11
 8012ae2:	e7f0      	b.n	8012ac6 <rcl_take_response+0x56>
 8012ae4:	2601      	movs	r6, #1
 8012ae6:	e7ee      	b.n	8012ac6 <rcl_take_response+0x56>

08012ae8 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012ae8:	280b      	cmp	r0, #11
 8012aea:	dc0d      	bgt.n	8012b08 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012aec:	2800      	cmp	r0, #0
 8012aee:	db09      	blt.n	8012b04 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012af0:	280b      	cmp	r0, #11
 8012af2:	d807      	bhi.n	8012b04 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012af4:	e8df f000 	tbb	[pc, r0]
 8012af8:	07060607 	.word	0x07060607
 8012afc:	06060606 	.word	0x06060606
 8012b00:	07070606 	.word	0x07070606
 8012b04:	2001      	movs	r0, #1
 8012b06:	4770      	bx	lr
 8012b08:	28cb      	cmp	r0, #203	; 0xcb
 8012b0a:	bf18      	it	ne
 8012b0c:	2001      	movne	r0, #1
 8012b0e:	4770      	bx	lr

08012b10 <rcl_get_zero_initialized_context>:
 8012b10:	4a03      	ldr	r2, [pc, #12]	; (8012b20 <rcl_get_zero_initialized_context+0x10>)
 8012b12:	4603      	mov	r3, r0
 8012b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b18:	e883 0003 	stmia.w	r3, {r0, r1}
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	4770      	bx	lr
 8012b20:	08019b2c 	.word	0x08019b2c

08012b24 <rcl_context_is_valid>:
 8012b24:	b118      	cbz	r0, 8012b2e <rcl_context_is_valid+0xa>
 8012b26:	6840      	ldr	r0, [r0, #4]
 8012b28:	3800      	subs	r0, #0
 8012b2a:	bf18      	it	ne
 8012b2c:	2001      	movne	r0, #1
 8012b2e:	4770      	bx	lr

08012b30 <__cleanup_context>:
 8012b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b34:	4606      	mov	r6, r0
 8012b36:	6800      	ldr	r0, [r0, #0]
 8012b38:	2300      	movs	r3, #0
 8012b3a:	6073      	str	r3, [r6, #4]
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	d04d      	beq.n	8012bdc <__cleanup_context+0xac>
 8012b40:	6947      	ldr	r7, [r0, #20]
 8012b42:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012b46:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012b4a:	b137      	cbz	r7, 8012b5a <__cleanup_context+0x2a>
 8012b4c:	3014      	adds	r0, #20
 8012b4e:	f000 fb1d 	bl	801318c <rcl_init_options_fini>
 8012b52:	4607      	mov	r7, r0
 8012b54:	2800      	cmp	r0, #0
 8012b56:	d148      	bne.n	8012bea <__cleanup_context+0xba>
 8012b58:	6830      	ldr	r0, [r6, #0]
 8012b5a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012b5c:	b143      	cbz	r3, 8012b70 <__cleanup_context+0x40>
 8012b5e:	3028      	adds	r0, #40	; 0x28
 8012b60:	f002 fd5e 	bl	8015620 <rmw_context_fini>
 8012b64:	b118      	cbz	r0, 8012b6e <__cleanup_context+0x3e>
 8012b66:	2f00      	cmp	r7, #0
 8012b68:	d042      	beq.n	8012bf0 <__cleanup_context+0xc0>
 8012b6a:	f7fa feb3 	bl	800d8d4 <rcutils_reset_error>
 8012b6e:	6830      	ldr	r0, [r6, #0]
 8012b70:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8012b74:	f1bc 0f00 	cmp.w	ip, #0
 8012b78:	d01c      	beq.n	8012bb4 <__cleanup_context+0x84>
 8012b7a:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012b7e:	2a01      	cmp	r2, #1
 8012b80:	f173 0100 	sbcs.w	r1, r3, #0
 8012b84:	db12      	blt.n	8012bac <__cleanup_context+0x7c>
 8012b86:	2400      	movs	r4, #0
 8012b88:	2500      	movs	r5, #0
 8012b8a:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8012b8e:	4649      	mov	r1, r9
 8012b90:	b1c0      	cbz	r0, 8012bc4 <__cleanup_context+0x94>
 8012b92:	47c0      	blx	r8
 8012b94:	6831      	ldr	r1, [r6, #0]
 8012b96:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8012b9a:	3401      	adds	r4, #1
 8012b9c:	f145 0500 	adc.w	r5, r5, #0
 8012ba0:	4294      	cmp	r4, r2
 8012ba2:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8012ba6:	eb75 0103 	sbcs.w	r1, r5, r3
 8012baa:	dbee      	blt.n	8012b8a <__cleanup_context+0x5a>
 8012bac:	4660      	mov	r0, ip
 8012bae:	4649      	mov	r1, r9
 8012bb0:	47c0      	blx	r8
 8012bb2:	6830      	ldr	r0, [r6, #0]
 8012bb4:	4649      	mov	r1, r9
 8012bb6:	47c0      	blx	r8
 8012bb8:	2300      	movs	r3, #0
 8012bba:	e9c6 3300 	strd	r3, r3, [r6]
 8012bbe:	4638      	mov	r0, r7
 8012bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bc4:	3401      	adds	r4, #1
 8012bc6:	f145 0500 	adc.w	r5, r5, #0
 8012bca:	4294      	cmp	r4, r2
 8012bcc:	eb75 0103 	sbcs.w	r1, r5, r3
 8012bd0:	dbdb      	blt.n	8012b8a <__cleanup_context+0x5a>
 8012bd2:	4660      	mov	r0, ip
 8012bd4:	4649      	mov	r1, r9
 8012bd6:	47c0      	blx	r8
 8012bd8:	6830      	ldr	r0, [r6, #0]
 8012bda:	e7eb      	b.n	8012bb4 <__cleanup_context+0x84>
 8012bdc:	4607      	mov	r7, r0
 8012bde:	2300      	movs	r3, #0
 8012be0:	e9c6 3300 	strd	r3, r3, [r6]
 8012be4:	4638      	mov	r0, r7
 8012be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bea:	f7fa fe73 	bl	800d8d4 <rcutils_reset_error>
 8012bee:	e7b3      	b.n	8012b58 <__cleanup_context+0x28>
 8012bf0:	f7ff ff7a 	bl	8012ae8 <rcl_convert_rmw_ret_to_rcl_ret>
 8012bf4:	4607      	mov	r7, r0
 8012bf6:	e7b8      	b.n	8012b6a <__cleanup_context+0x3a>

08012bf8 <rcl_expand_topic_name>:
 8012bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bfc:	b08b      	sub	sp, #44	; 0x2c
 8012bfe:	9306      	str	r3, [sp, #24]
 8012c00:	2800      	cmp	r0, #0
 8012c02:	f000 80d2 	beq.w	8012daa <rcl_expand_topic_name+0x1b2>
 8012c06:	460e      	mov	r6, r1
 8012c08:	2900      	cmp	r1, #0
 8012c0a:	f000 80ce 	beq.w	8012daa <rcl_expand_topic_name+0x1b2>
 8012c0e:	4617      	mov	r7, r2
 8012c10:	2a00      	cmp	r2, #0
 8012c12:	f000 80ca 	beq.w	8012daa <rcl_expand_topic_name+0x1b2>
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	f000 80c7 	beq.w	8012daa <rcl_expand_topic_name+0x1b2>
 8012c1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	f000 80c3 	beq.w	8012daa <rcl_expand_topic_name+0x1b2>
 8012c24:	a909      	add	r1, sp, #36	; 0x24
 8012c26:	2200      	movs	r2, #0
 8012c28:	4680      	mov	r8, r0
 8012c2a:	f001 f899 	bl	8013d60 <rcl_validate_topic_name>
 8012c2e:	4604      	mov	r4, r0
 8012c30:	2800      	cmp	r0, #0
 8012c32:	f040 80b6 	bne.w	8012da2 <rcl_expand_topic_name+0x1aa>
 8012c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	f040 80bf 	bne.w	8012dbc <rcl_expand_topic_name+0x1c4>
 8012c3e:	4602      	mov	r2, r0
 8012c40:	a909      	add	r1, sp, #36	; 0x24
 8012c42:	4630      	mov	r0, r6
 8012c44:	f002 fa0e 	bl	8015064 <rmw_validate_node_name>
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	f040 80b3 	bne.w	8012db4 <rcl_expand_topic_name+0x1bc>
 8012c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c50:	2a00      	cmp	r2, #0
 8012c52:	f040 80b8 	bne.w	8012dc6 <rcl_expand_topic_name+0x1ce>
 8012c56:	a909      	add	r1, sp, #36	; 0x24
 8012c58:	4638      	mov	r0, r7
 8012c5a:	f002 f9e5 	bl	8015028 <rmw_validate_namespace>
 8012c5e:	2800      	cmp	r0, #0
 8012c60:	f040 80a8 	bne.w	8012db4 <rcl_expand_topic_name+0x1bc>
 8012c64:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012c66:	2c00      	cmp	r4, #0
 8012c68:	f040 80f6 	bne.w	8012e58 <rcl_expand_topic_name+0x260>
 8012c6c:	217b      	movs	r1, #123	; 0x7b
 8012c6e:	4640      	mov	r0, r8
 8012c70:	f005 fce2 	bl	8018638 <strchr>
 8012c74:	f898 3000 	ldrb.w	r3, [r8]
 8012c78:	2b2f      	cmp	r3, #47	; 0x2f
 8012c7a:	4605      	mov	r5, r0
 8012c7c:	f000 80c4 	beq.w	8012e08 <rcl_expand_topic_name+0x210>
 8012c80:	2b7e      	cmp	r3, #126	; 0x7e
 8012c82:	d16f      	bne.n	8012d64 <rcl_expand_topic_name+0x16c>
 8012c84:	4638      	mov	r0, r7
 8012c86:	f7ed fab5 	bl	80001f4 <strlen>
 8012c8a:	4b87      	ldr	r3, [pc, #540]	; (8012ea8 <rcl_expand_topic_name+0x2b0>)
 8012c8c:	4987      	ldr	r1, [pc, #540]	; (8012eac <rcl_expand_topic_name+0x2b4>)
 8012c8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012c90:	9604      	str	r6, [sp, #16]
 8012c92:	2801      	cmp	r0, #1
 8012c94:	bf0c      	ite	eq
 8012c96:	4618      	moveq	r0, r3
 8012c98:	4608      	movne	r0, r1
 8012c9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012c9e:	e9cd 2300 	strd	r2, r3, [sp]
 8012ca2:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012ca6:	f108 0101 	add.w	r1, r8, #1
 8012caa:	9105      	str	r1, [sp, #20]
 8012cac:	ab14      	add	r3, sp, #80	; 0x50
 8012cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012cb0:	f001 ffe8 	bl	8014c84 <rcutils_format_string_limit>
 8012cb4:	4682      	mov	sl, r0
 8012cb6:	2800      	cmp	r0, #0
 8012cb8:	f000 80d0 	beq.w	8012e5c <rcl_expand_topic_name+0x264>
 8012cbc:	2d00      	cmp	r5, #0
 8012cbe:	f000 80aa 	beq.w	8012e16 <rcl_expand_topic_name+0x21e>
 8012cc2:	217b      	movs	r1, #123	; 0x7b
 8012cc4:	f005 fcb8 	bl	8018638 <strchr>
 8012cc8:	46d1      	mov	r9, sl
 8012cca:	4605      	mov	r5, r0
 8012ccc:	9407      	str	r4, [sp, #28]
 8012cce:	46d3      	mov	fp, sl
 8012cd0:	464c      	mov	r4, r9
 8012cd2:	2d00      	cmp	r5, #0
 8012cd4:	f000 80c7 	beq.w	8012e66 <rcl_expand_topic_name+0x26e>
 8012cd8:	217d      	movs	r1, #125	; 0x7d
 8012cda:	4620      	mov	r0, r4
 8012cdc:	f005 fcac 	bl	8018638 <strchr>
 8012ce0:	eba0 0905 	sub.w	r9, r0, r5
 8012ce4:	f109 0a01 	add.w	sl, r9, #1
 8012ce8:	4871      	ldr	r0, [pc, #452]	; (8012eb0 <rcl_expand_topic_name+0x2b8>)
 8012cea:	4652      	mov	r2, sl
 8012cec:	4629      	mov	r1, r5
 8012cee:	f005 fcb0 	bl	8018652 <strncmp>
 8012cf2:	2800      	cmp	r0, #0
 8012cf4:	f000 808d 	beq.w	8012e12 <rcl_expand_topic_name+0x21a>
 8012cf8:	486e      	ldr	r0, [pc, #440]	; (8012eb4 <rcl_expand_topic_name+0x2bc>)
 8012cfa:	4652      	mov	r2, sl
 8012cfc:	4629      	mov	r1, r5
 8012cfe:	f005 fca8 	bl	8018652 <strncmp>
 8012d02:	b130      	cbz	r0, 8012d12 <rcl_expand_topic_name+0x11a>
 8012d04:	486c      	ldr	r0, [pc, #432]	; (8012eb8 <rcl_expand_topic_name+0x2c0>)
 8012d06:	4652      	mov	r2, sl
 8012d08:	4629      	mov	r1, r5
 8012d0a:	f005 fca2 	bl	8018652 <strncmp>
 8012d0e:	2800      	cmp	r0, #0
 8012d10:	d15b      	bne.n	8012dca <rcl_expand_topic_name+0x1d2>
 8012d12:	46b9      	mov	r9, r7
 8012d14:	ab16      	add	r3, sp, #88	; 0x58
 8012d16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d1a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012d1e:	ab14      	add	r3, sp, #80	; 0x50
 8012d20:	4628      	mov	r0, r5
 8012d22:	cb0c      	ldmia	r3, {r2, r3}
 8012d24:	4651      	mov	r1, sl
 8012d26:	f002 f8f9 	bl	8014f1c <rcutils_strndup>
 8012d2a:	4605      	mov	r5, r0
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	f000 80a4 	beq.w	8012e7a <rcl_expand_topic_name+0x282>
 8012d32:	464a      	mov	r2, r9
 8012d34:	4620      	mov	r0, r4
 8012d36:	ab14      	add	r3, sp, #80	; 0x50
 8012d38:	4629      	mov	r1, r5
 8012d3a:	f001 fff5 	bl	8014d28 <rcutils_repl_str>
 8012d3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d40:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d42:	4604      	mov	r4, r0
 8012d44:	4628      	mov	r0, r5
 8012d46:	4798      	blx	r3
 8012d48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d4a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d4c:	4658      	mov	r0, fp
 8012d4e:	4798      	blx	r3
 8012d50:	2c00      	cmp	r4, #0
 8012d52:	f000 8083 	beq.w	8012e5c <rcl_expand_topic_name+0x264>
 8012d56:	217b      	movs	r1, #123	; 0x7b
 8012d58:	4620      	mov	r0, r4
 8012d5a:	f005 fc6d 	bl	8018638 <strchr>
 8012d5e:	46a3      	mov	fp, r4
 8012d60:	4605      	mov	r5, r0
 8012d62:	e7b6      	b.n	8012cd2 <rcl_expand_topic_name+0xda>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d151      	bne.n	8012e0c <rcl_expand_topic_name+0x214>
 8012d68:	4638      	mov	r0, r7
 8012d6a:	f7ed fa43 	bl	80001f4 <strlen>
 8012d6e:	4b53      	ldr	r3, [pc, #332]	; (8012ebc <rcl_expand_topic_name+0x2c4>)
 8012d70:	4a53      	ldr	r2, [pc, #332]	; (8012ec0 <rcl_expand_topic_name+0x2c8>)
 8012d72:	f8cd 8010 	str.w	r8, [sp, #16]
 8012d76:	2801      	cmp	r0, #1
 8012d78:	bf0c      	ite	eq
 8012d7a:	4618      	moveq	r0, r3
 8012d7c:	4610      	movne	r0, r2
 8012d7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012d84:	e9cd 3200 	strd	r3, r2, [sp]
 8012d88:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012d8c:	ab14      	add	r3, sp, #80	; 0x50
 8012d8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012d90:	f001 ff78 	bl	8014c84 <rcutils_format_string_limit>
 8012d94:	4682      	mov	sl, r0
 8012d96:	4653      	mov	r3, sl
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d05f      	beq.n	8012e5c <rcl_expand_topic_name+0x264>
 8012d9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d9e:	f8c3 a000 	str.w	sl, [r3]
 8012da2:	4620      	mov	r0, r4
 8012da4:	b00b      	add	sp, #44	; 0x2c
 8012da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012daa:	240b      	movs	r4, #11
 8012dac:	4620      	mov	r0, r4
 8012dae:	b00b      	add	sp, #44	; 0x2c
 8012db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012db4:	f7ff fe98 	bl	8012ae8 <rcl_convert_rmw_ret_to_rcl_ret>
 8012db8:	4604      	mov	r4, r0
 8012dba:	e7f2      	b.n	8012da2 <rcl_expand_topic_name+0x1aa>
 8012dbc:	2467      	movs	r4, #103	; 0x67
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	b00b      	add	sp, #44	; 0x2c
 8012dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dc6:	24c9      	movs	r4, #201	; 0xc9
 8012dc8:	e7eb      	b.n	8012da2 <rcl_expand_topic_name+0x1aa>
 8012dca:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8012dce:	9806      	ldr	r0, [sp, #24]
 8012dd0:	1c69      	adds	r1, r5, #1
 8012dd2:	f7fa fe95 	bl	800db00 <rcutils_string_map_getn>
 8012dd6:	4681      	mov	r9, r0
 8012dd8:	2800      	cmp	r0, #0
 8012dda:	d19b      	bne.n	8012d14 <rcl_expand_topic_name+0x11c>
 8012ddc:	aa16      	add	r2, sp, #88	; 0x58
 8012dde:	ca07      	ldmia	r2, {r0, r1, r2}
 8012de0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012de2:	f8c3 9000 	str.w	r9, [r3]
 8012de6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012dea:	ab14      	add	r3, sp, #80	; 0x50
 8012dec:	cb0c      	ldmia	r3, {r2, r3}
 8012dee:	4651      	mov	r1, sl
 8012df0:	4628      	mov	r0, r5
 8012df2:	f002 f893 	bl	8014f1c <rcutils_strndup>
 8012df6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012df8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012dfa:	4798      	blx	r3
 8012dfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012dfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012e00:	4658      	mov	r0, fp
 8012e02:	4798      	blx	r3
 8012e04:	2469      	movs	r4, #105	; 0x69
 8012e06:	e7cc      	b.n	8012da2 <rcl_expand_topic_name+0x1aa>
 8012e08:	2800      	cmp	r0, #0
 8012e0a:	d03e      	beq.n	8012e8a <rcl_expand_topic_name+0x292>
 8012e0c:	46c1      	mov	r9, r8
 8012e0e:	46a2      	mov	sl, r4
 8012e10:	e75c      	b.n	8012ccc <rcl_expand_topic_name+0xd4>
 8012e12:	46b1      	mov	r9, r6
 8012e14:	e77e      	b.n	8012d14 <rcl_expand_topic_name+0x11c>
 8012e16:	f89a 3000 	ldrb.w	r3, [sl]
 8012e1a:	2b2f      	cmp	r3, #47	; 0x2f
 8012e1c:	d0be      	beq.n	8012d9c <rcl_expand_topic_name+0x1a4>
 8012e1e:	4638      	mov	r0, r7
 8012e20:	f7ed f9e8 	bl	80001f4 <strlen>
 8012e24:	4b25      	ldr	r3, [pc, #148]	; (8012ebc <rcl_expand_topic_name+0x2c4>)
 8012e26:	4926      	ldr	r1, [pc, #152]	; (8012ec0 <rcl_expand_topic_name+0x2c8>)
 8012e28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012e2a:	f8cd a010 	str.w	sl, [sp, #16]
 8012e2e:	2801      	cmp	r0, #1
 8012e30:	bf0c      	ite	eq
 8012e32:	4618      	moveq	r0, r3
 8012e34:	4608      	movne	r0, r1
 8012e36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e3a:	e9cd 2300 	strd	r2, r3, [sp]
 8012e3e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012e42:	ab14      	add	r3, sp, #80	; 0x50
 8012e44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012e46:	f001 ff1d 	bl	8014c84 <rcutils_format_string_limit>
 8012e4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012e4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012e4e:	4603      	mov	r3, r0
 8012e50:	4650      	mov	r0, sl
 8012e52:	469a      	mov	sl, r3
 8012e54:	4790      	blx	r2
 8012e56:	e79e      	b.n	8012d96 <rcl_expand_topic_name+0x19e>
 8012e58:	24ca      	movs	r4, #202	; 0xca
 8012e5a:	e7a2      	b.n	8012da2 <rcl_expand_topic_name+0x1aa>
 8012e5c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012e5e:	2300      	movs	r3, #0
 8012e60:	6013      	str	r3, [r2, #0]
 8012e62:	240a      	movs	r4, #10
 8012e64:	e79d      	b.n	8012da2 <rcl_expand_topic_name+0x1aa>
 8012e66:	465b      	mov	r3, fp
 8012e68:	9c07      	ldr	r4, [sp, #28]
 8012e6a:	46da      	mov	sl, fp
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d1d2      	bne.n	8012e16 <rcl_expand_topic_name+0x21e>
 8012e70:	f898 3000 	ldrb.w	r3, [r8]
 8012e74:	2b2f      	cmp	r3, #47	; 0x2f
 8012e76:	d091      	beq.n	8012d9c <rcl_expand_topic_name+0x1a4>
 8012e78:	e776      	b.n	8012d68 <rcl_expand_topic_name+0x170>
 8012e7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e7c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012e7e:	601d      	str	r5, [r3, #0]
 8012e80:	4658      	mov	r0, fp
 8012e82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012e84:	4798      	blx	r3
 8012e86:	240a      	movs	r4, #10
 8012e88:	e78b      	b.n	8012da2 <rcl_expand_topic_name+0x1aa>
 8012e8a:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8012e8e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012e92:	ab14      	add	r3, sp, #80	; 0x50
 8012e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012e96:	4640      	mov	r0, r8
 8012e98:	f002 f81e 	bl	8014ed8 <rcutils_strdup>
 8012e9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	bf08      	it	eq
 8012ea2:	240a      	moveq	r4, #10
 8012ea4:	6018      	str	r0, [r3, #0]
 8012ea6:	e77c      	b.n	8012da2 <rcl_expand_topic_name+0x1aa>
 8012ea8:	08019af8 	.word	0x08019af8
 8012eac:	08019b34 	.word	0x08019b34
 8012eb0:	08019b44 	.word	0x08019b44
 8012eb4:	08019b4c 	.word	0x08019b4c
 8012eb8:	08019b54 	.word	0x08019b54
 8012ebc:	08019b08 	.word	0x08019b08
 8012ec0:	08019b3c 	.word	0x08019b3c

08012ec4 <rcl_get_default_topic_name_substitutions>:
 8012ec4:	2800      	cmp	r0, #0
 8012ec6:	bf0c      	ite	eq
 8012ec8:	200b      	moveq	r0, #11
 8012eca:	2000      	movne	r0, #0
 8012ecc:	4770      	bx	lr
 8012ece:	bf00      	nop

08012ed0 <rcl_init>:
 8012ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ed4:	1e07      	subs	r7, r0, #0
 8012ed6:	b09f      	sub	sp, #124	; 0x7c
 8012ed8:	4688      	mov	r8, r1
 8012eda:	4692      	mov	sl, r2
 8012edc:	4699      	mov	r9, r3
 8012ede:	f340 8097 	ble.w	8013010 <rcl_init+0x140>
 8012ee2:	2900      	cmp	r1, #0
 8012ee4:	f000 8097 	beq.w	8013016 <rcl_init+0x146>
 8012ee8:	1f0d      	subs	r5, r1, #4
 8012eea:	2400      	movs	r4, #0
 8012eec:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8012ef0:	3401      	adds	r4, #1
 8012ef2:	2e00      	cmp	r6, #0
 8012ef4:	f000 808f 	beq.w	8013016 <rcl_init+0x146>
 8012ef8:	42a7      	cmp	r7, r4
 8012efa:	d1f7      	bne.n	8012eec <rcl_init+0x1c>
 8012efc:	f1ba 0f00 	cmp.w	sl, #0
 8012f00:	f000 8089 	beq.w	8013016 <rcl_init+0x146>
 8012f04:	f8da 4000 	ldr.w	r4, [sl]
 8012f08:	2c00      	cmp	r4, #0
 8012f0a:	f000 8084 	beq.w	8013016 <rcl_init+0x146>
 8012f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f10:	ad19      	add	r5, sp, #100	; 0x64
 8012f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012f14:	6823      	ldr	r3, [r4, #0]
 8012f16:	602b      	str	r3, [r5, #0]
 8012f18:	a819      	add	r0, sp, #100	; 0x64
 8012f1a:	f7fa fcb7 	bl	800d88c <rcutils_allocator_is_valid>
 8012f1e:	2800      	cmp	r0, #0
 8012f20:	d079      	beq.n	8013016 <rcl_init+0x146>
 8012f22:	f1b9 0f00 	cmp.w	r9, #0
 8012f26:	d076      	beq.n	8013016 <rcl_init+0x146>
 8012f28:	f8d9 3000 	ldr.w	r3, [r9]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d177      	bne.n	8013020 <rcl_init+0x150>
 8012f30:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012f34:	2178      	movs	r1, #120	; 0x78
 8012f36:	2001      	movs	r0, #1
 8012f38:	4798      	blx	r3
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	f8c9 0000 	str.w	r0, [r9]
 8012f40:	2800      	cmp	r0, #0
 8012f42:	f000 80ba 	beq.w	80130ba <rcl_init+0x1ea>
 8012f46:	a802      	add	r0, sp, #8
 8012f48:	f002 f804 	bl	8014f54 <rmw_get_zero_initialized_context>
 8012f4c:	a902      	add	r1, sp, #8
 8012f4e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012f52:	2250      	movs	r2, #80	; 0x50
 8012f54:	ac19      	add	r4, sp, #100	; 0x64
 8012f56:	f005 fc86 	bl	8018866 <memcpy>
 8012f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f5c:	f8d9 5000 	ldr.w	r5, [r9]
 8012f60:	6826      	ldr	r6, [r4, #0]
 8012f62:	462c      	mov	r4, r5
 8012f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f66:	f105 0114 	add.w	r1, r5, #20
 8012f6a:	6026      	str	r6, [r4, #0]
 8012f6c:	4650      	mov	r0, sl
 8012f6e:	f000 f931 	bl	80131d4 <rcl_init_options_copy>
 8012f72:	4606      	mov	r6, r0
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d144      	bne.n	8013002 <rcl_init+0x132>
 8012f78:	f8d9 a000 	ldr.w	sl, [r9]
 8012f7c:	463c      	mov	r4, r7
 8012f7e:	17fd      	asrs	r5, r7, #31
 8012f80:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8012f84:	f8ca 0020 	str.w	r0, [sl, #32]
 8012f88:	2f00      	cmp	r7, #0
 8012f8a:	d050      	beq.n	801302e <rcl_init+0x15e>
 8012f8c:	f1b8 0f00 	cmp.w	r8, #0
 8012f90:	d04d      	beq.n	801302e <rcl_init+0x15e>
 8012f92:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012f96:	4638      	mov	r0, r7
 8012f98:	2104      	movs	r1, #4
 8012f9a:	4798      	blx	r3
 8012f9c:	f8ca 0020 	str.w	r0, [sl, #32]
 8012fa0:	f8d9 a000 	ldr.w	sl, [r9]
 8012fa4:	f8da 3020 	ldr.w	r3, [sl, #32]
 8012fa8:	46d3      	mov	fp, sl
 8012faa:	b34b      	cbz	r3, 8013000 <rcl_init+0x130>
 8012fac:	2f01      	cmp	r7, #1
 8012fae:	f175 0300 	sbcs.w	r3, r5, #0
 8012fb2:	db3c      	blt.n	801302e <rcl_init+0x15e>
 8012fb4:	f1a8 0804 	sub.w	r8, r8, #4
 8012fb8:	2600      	movs	r6, #0
 8012fba:	2700      	movs	r7, #0
 8012fbc:	e00c      	b.n	8012fd8 <rcl_init+0x108>
 8012fbe:	f8d8 1000 	ldr.w	r1, [r8]
 8012fc2:	f005 fc50 	bl	8018866 <memcpy>
 8012fc6:	3601      	adds	r6, #1
 8012fc8:	f147 0700 	adc.w	r7, r7, #0
 8012fcc:	42bd      	cmp	r5, r7
 8012fce:	bf08      	it	eq
 8012fd0:	42b4      	cmpeq	r4, r6
 8012fd2:	d02a      	beq.n	801302a <rcl_init+0x15a>
 8012fd4:	f8d9 b000 	ldr.w	fp, [r9]
 8012fd8:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8012fdc:	f7ed f90a 	bl	80001f4 <strlen>
 8012fe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012fe2:	991d      	ldr	r1, [sp, #116]	; 0x74
 8012fe4:	f8db a020 	ldr.w	sl, [fp, #32]
 8012fe8:	9001      	str	r0, [sp, #4]
 8012fea:	4798      	blx	r3
 8012fec:	f8d9 1000 	ldr.w	r1, [r9]
 8012ff0:	9a01      	ldr	r2, [sp, #4]
 8012ff2:	6a09      	ldr	r1, [r1, #32]
 8012ff4:	00b3      	lsls	r3, r6, #2
 8012ff6:	f84a 0003 	str.w	r0, [sl, r3]
 8012ffa:	58c8      	ldr	r0, [r1, r3]
 8012ffc:	2800      	cmp	r0, #0
 8012ffe:	d1de      	bne.n	8012fbe <rcl_init+0xee>
 8013000:	260a      	movs	r6, #10
 8013002:	4648      	mov	r0, r9
 8013004:	f7ff fd94 	bl	8012b30 <__cleanup_context>
 8013008:	4630      	mov	r0, r6
 801300a:	b01f      	add	sp, #124	; 0x7c
 801300c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013010:	2900      	cmp	r1, #0
 8013012:	f43f af73 	beq.w	8012efc <rcl_init+0x2c>
 8013016:	260b      	movs	r6, #11
 8013018:	4630      	mov	r0, r6
 801301a:	b01f      	add	sp, #124	; 0x7c
 801301c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013020:	2664      	movs	r6, #100	; 0x64
 8013022:	4630      	mov	r0, r6
 8013024:	b01f      	add	sp, #124	; 0x7c
 8013026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801302a:	f8d9 a000 	ldr.w	sl, [r9]
 801302e:	4a2c      	ldr	r2, [pc, #176]	; (80130e0 <rcl_init+0x210>)
 8013030:	6813      	ldr	r3, [r2, #0]
 8013032:	3301      	adds	r3, #1
 8013034:	d03b      	beq.n	80130ae <rcl_init+0x1de>
 8013036:	6013      	str	r3, [r2, #0]
 8013038:	4619      	mov	r1, r3
 801303a:	2000      	movs	r0, #0
 801303c:	f8da 4014 	ldr.w	r4, [sl, #20]
 8013040:	f8c9 3004 	str.w	r3, [r9, #4]
 8013044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013046:	3301      	adds	r3, #1
 8013048:	e9c4 1006 	strd	r1, r0, [r4, #24]
 801304c:	d039      	beq.n	80130c2 <rcl_init+0x1f2>
 801304e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8013052:	b94b      	cbnz	r3, 8013068 <rcl_init+0x198>
 8013054:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8013058:	f000 f962 	bl	8013320 <rcl_get_localhost_only>
 801305c:	4606      	mov	r6, r0
 801305e:	2800      	cmp	r0, #0
 8013060:	d1cf      	bne.n	8013002 <rcl_init+0x132>
 8013062:	f8d9 3000 	ldr.w	r3, [r9]
 8013066:	695c      	ldr	r4, [r3, #20]
 8013068:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801306a:	aa18      	add	r2, sp, #96	; 0x60
 801306c:	a917      	add	r1, sp, #92	; 0x5c
 801306e:	f000 fe65 	bl	8013d3c <rcl_validate_enclave_name>
 8013072:	4606      	mov	r6, r0
 8013074:	2800      	cmp	r0, #0
 8013076:	d1c4      	bne.n	8013002 <rcl_init+0x132>
 8013078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801307a:	bb03      	cbnz	r3, 80130be <rcl_init+0x1ee>
 801307c:	f8d9 1000 	ldr.w	r1, [r9]
 8013080:	694b      	ldr	r3, [r1, #20]
 8013082:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8013084:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8013088:	f000 fbb8 	bl	80137fc <rcl_get_security_options_from_environment>
 801308c:	4606      	mov	r6, r0
 801308e:	2800      	cmp	r0, #0
 8013090:	d1b7      	bne.n	8013002 <rcl_init+0x132>
 8013092:	f8d9 1000 	ldr.w	r1, [r9]
 8013096:	6948      	ldr	r0, [r1, #20]
 8013098:	3128      	adds	r1, #40	; 0x28
 801309a:	3018      	adds	r0, #24
 801309c:	f002 f988 	bl	80153b0 <rmw_init>
 80130a0:	4606      	mov	r6, r0
 80130a2:	2800      	cmp	r0, #0
 80130a4:	d0b8      	beq.n	8013018 <rcl_init+0x148>
 80130a6:	f7ff fd1f 	bl	8012ae8 <rcl_convert_rmw_ret_to_rcl_ret>
 80130aa:	4606      	mov	r6, r0
 80130ac:	e7a9      	b.n	8013002 <rcl_init+0x132>
 80130ae:	2401      	movs	r4, #1
 80130b0:	4618      	mov	r0, r3
 80130b2:	4621      	mov	r1, r4
 80130b4:	6014      	str	r4, [r2, #0]
 80130b6:	4623      	mov	r3, r4
 80130b8:	e7c0      	b.n	801303c <rcl_init+0x16c>
 80130ba:	260a      	movs	r6, #10
 80130bc:	e7ac      	b.n	8013018 <rcl_init+0x148>
 80130be:	2601      	movs	r6, #1
 80130c0:	e79f      	b.n	8013002 <rcl_init+0x132>
 80130c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80130c6:	f004 fba3 	bl	8017810 <rcl_get_default_domain_id>
 80130ca:	4606      	mov	r6, r0
 80130cc:	2800      	cmp	r0, #0
 80130ce:	d198      	bne.n	8013002 <rcl_init+0x132>
 80130d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130d2:	3301      	adds	r3, #1
 80130d4:	f8d9 3000 	ldr.w	r3, [r9]
 80130d8:	bf08      	it	eq
 80130da:	6260      	streq	r0, [r4, #36]	; 0x24
 80130dc:	695c      	ldr	r4, [r3, #20]
 80130de:	e7b6      	b.n	801304e <rcl_init+0x17e>
 80130e0:	20009c28 	.word	0x20009c28

080130e4 <rcl_get_zero_initialized_init_options>:
 80130e4:	2000      	movs	r0, #0
 80130e6:	4770      	bx	lr

080130e8 <rcl_init_options_init>:
 80130e8:	b084      	sub	sp, #16
 80130ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130ec:	b091      	sub	sp, #68	; 0x44
 80130ee:	af17      	add	r7, sp, #92	; 0x5c
 80130f0:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 80130f4:	2800      	cmp	r0, #0
 80130f6:	d044      	beq.n	8013182 <rcl_init_options_init+0x9a>
 80130f8:	6803      	ldr	r3, [r0, #0]
 80130fa:	4606      	mov	r6, r0
 80130fc:	b133      	cbz	r3, 801310c <rcl_init_options_init+0x24>
 80130fe:	2464      	movs	r4, #100	; 0x64
 8013100:	4620      	mov	r0, r4
 8013102:	b011      	add	sp, #68	; 0x44
 8013104:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013108:	b004      	add	sp, #16
 801310a:	4770      	bx	lr
 801310c:	4638      	mov	r0, r7
 801310e:	f7fa fbbd 	bl	800d88c <rcutils_allocator_is_valid>
 8013112:	2800      	cmp	r0, #0
 8013114:	d035      	beq.n	8013182 <rcl_init_options_init+0x9a>
 8013116:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013118:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801311a:	2050      	movs	r0, #80	; 0x50
 801311c:	4798      	blx	r3
 801311e:	4604      	mov	r4, r0
 8013120:	6030      	str	r0, [r6, #0]
 8013122:	2800      	cmp	r0, #0
 8013124:	d02f      	beq.n	8013186 <rcl_init_options_init+0x9e>
 8013126:	46bc      	mov	ip, r7
 8013128:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801312c:	4625      	mov	r5, r4
 801312e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013130:	f8dc 3000 	ldr.w	r3, [ip]
 8013134:	602b      	str	r3, [r5, #0]
 8013136:	a802      	add	r0, sp, #8
 8013138:	ad02      	add	r5, sp, #8
 801313a:	f001 ff13 	bl	8014f64 <rmw_get_zero_initialized_init_options>
 801313e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013140:	3418      	adds	r4, #24
 8013142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801314a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801314c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013150:	6833      	ldr	r3, [r6, #0]
 8013152:	e884 0003 	stmia.w	r4, {r0, r1}
 8013156:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 801315a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801315e:	f103 0018 	add.w	r0, r3, #24
 8013162:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8013166:	f002 f849 	bl	80151fc <rmw_init_options_init>
 801316a:	4604      	mov	r4, r0
 801316c:	2800      	cmp	r0, #0
 801316e:	d0c7      	beq.n	8013100 <rcl_init_options_init+0x18>
 8013170:	6830      	ldr	r0, [r6, #0]
 8013172:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013174:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8013176:	4798      	blx	r3
 8013178:	4620      	mov	r0, r4
 801317a:	f7ff fcb5 	bl	8012ae8 <rcl_convert_rmw_ret_to_rcl_ret>
 801317e:	4604      	mov	r4, r0
 8013180:	e7be      	b.n	8013100 <rcl_init_options_init+0x18>
 8013182:	240b      	movs	r4, #11
 8013184:	e7bc      	b.n	8013100 <rcl_init_options_init+0x18>
 8013186:	240a      	movs	r4, #10
 8013188:	e7ba      	b.n	8013100 <rcl_init_options_init+0x18>
 801318a:	bf00      	nop

0801318c <rcl_init_options_fini>:
 801318c:	b570      	push	{r4, r5, r6, lr}
 801318e:	b086      	sub	sp, #24
 8013190:	b1c0      	cbz	r0, 80131c4 <rcl_init_options_fini+0x38>
 8013192:	6804      	ldr	r4, [r0, #0]
 8013194:	4606      	mov	r6, r0
 8013196:	b1ac      	cbz	r4, 80131c4 <rcl_init_options_fini+0x38>
 8013198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801319a:	ad01      	add	r5, sp, #4
 801319c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801319e:	6823      	ldr	r3, [r4, #0]
 80131a0:	602b      	str	r3, [r5, #0]
 80131a2:	a801      	add	r0, sp, #4
 80131a4:	f7fa fb72 	bl	800d88c <rcutils_allocator_is_valid>
 80131a8:	b160      	cbz	r0, 80131c4 <rcl_init_options_fini+0x38>
 80131aa:	6830      	ldr	r0, [r6, #0]
 80131ac:	3018      	adds	r0, #24
 80131ae:	f002 f8bf 	bl	8015330 <rmw_init_options_fini>
 80131b2:	4604      	mov	r4, r0
 80131b4:	b950      	cbnz	r0, 80131cc <rcl_init_options_fini+0x40>
 80131b6:	6830      	ldr	r0, [r6, #0]
 80131b8:	9b02      	ldr	r3, [sp, #8]
 80131ba:	9905      	ldr	r1, [sp, #20]
 80131bc:	4798      	blx	r3
 80131be:	4620      	mov	r0, r4
 80131c0:	b006      	add	sp, #24
 80131c2:	bd70      	pop	{r4, r5, r6, pc}
 80131c4:	240b      	movs	r4, #11
 80131c6:	4620      	mov	r0, r4
 80131c8:	b006      	add	sp, #24
 80131ca:	bd70      	pop	{r4, r5, r6, pc}
 80131cc:	f7ff fc8c 	bl	8012ae8 <rcl_convert_rmw_ret_to_rcl_ret>
 80131d0:	4604      	mov	r4, r0
 80131d2:	e7f8      	b.n	80131c6 <rcl_init_options_fini+0x3a>

080131d4 <rcl_init_options_copy>:
 80131d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d8:	b096      	sub	sp, #88	; 0x58
 80131da:	2800      	cmp	r0, #0
 80131dc:	d063      	beq.n	80132a6 <rcl_init_options_copy+0xd2>
 80131de:	6806      	ldr	r6, [r0, #0]
 80131e0:	4605      	mov	r5, r0
 80131e2:	2e00      	cmp	r6, #0
 80131e4:	d05f      	beq.n	80132a6 <rcl_init_options_copy+0xd2>
 80131e6:	460c      	mov	r4, r1
 80131e8:	2900      	cmp	r1, #0
 80131ea:	d05c      	beq.n	80132a6 <rcl_init_options_copy+0xd2>
 80131ec:	680b      	ldr	r3, [r1, #0]
 80131ee:	b123      	cbz	r3, 80131fa <rcl_init_options_copy+0x26>
 80131f0:	2664      	movs	r6, #100	; 0x64
 80131f2:	4630      	mov	r0, r6
 80131f4:	b016      	add	sp, #88	; 0x58
 80131f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80131fc:	af11      	add	r7, sp, #68	; 0x44
 80131fe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013200:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8013204:	6833      	ldr	r3, [r6, #0]
 8013206:	603b      	str	r3, [r7, #0]
 8013208:	4640      	mov	r0, r8
 801320a:	f7fa fb3f 	bl	800d88c <rcutils_allocator_is_valid>
 801320e:	2800      	cmp	r0, #0
 8013210:	d049      	beq.n	80132a6 <rcl_init_options_copy+0xd2>
 8013212:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013214:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013216:	2050      	movs	r0, #80	; 0x50
 8013218:	4798      	blx	r3
 801321a:	4606      	mov	r6, r0
 801321c:	6020      	str	r0, [r4, #0]
 801321e:	2800      	cmp	r0, #0
 8013220:	d077      	beq.n	8013312 <rcl_init_options_copy+0x13e>
 8013222:	46c4      	mov	ip, r8
 8013224:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013228:	4637      	mov	r7, r6
 801322a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801322c:	f8dc 3000 	ldr.w	r3, [ip]
 8013230:	603b      	str	r3, [r7, #0]
 8013232:	a802      	add	r0, sp, #8
 8013234:	af02      	add	r7, sp, #8
 8013236:	f001 fe95 	bl	8014f64 <rmw_get_zero_initialized_init_options>
 801323a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801323c:	3618      	adds	r6, #24
 801323e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013240:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013242:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013244:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013246:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013248:	e897 0003 	ldmia.w	r7, {r0, r1}
 801324c:	ab16      	add	r3, sp, #88	; 0x58
 801324e:	e886 0003 	stmia.w	r6, {r0, r1}
 8013252:	e913 0003 	ldmdb	r3, {r0, r1}
 8013256:	6823      	ldr	r3, [r4, #0]
 8013258:	e88d 0003 	stmia.w	sp, {r0, r1}
 801325c:	f103 0018 	add.w	r0, r3, #24
 8013260:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8013264:	f001 ffca 	bl	80151fc <rmw_init_options_init>
 8013268:	4606      	mov	r6, r0
 801326a:	bb08      	cbnz	r0, 80132b0 <rcl_init_options_copy+0xdc>
 801326c:	682f      	ldr	r7, [r5, #0]
 801326e:	f8d4 c000 	ldr.w	ip, [r4]
 8013272:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013274:	4666      	mov	r6, ip
 8013276:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	6033      	str	r3, [r6, #0]
 801327c:	f10c 0018 	add.w	r0, ip, #24
 8013280:	f002 f856 	bl	8015330 <rmw_init_options_fini>
 8013284:	4607      	mov	r7, r0
 8013286:	b1f0      	cbz	r0, 80132c6 <rcl_init_options_copy+0xf2>
 8013288:	f7fa fb0e 	bl	800d8a8 <rcutils_get_error_string>
 801328c:	f7fa fb22 	bl	800d8d4 <rcutils_reset_error>
 8013290:	4620      	mov	r0, r4
 8013292:	f7ff ff7b 	bl	801318c <rcl_init_options_fini>
 8013296:	4606      	mov	r6, r0
 8013298:	2800      	cmp	r0, #0
 801329a:	d1aa      	bne.n	80131f2 <rcl_init_options_copy+0x1e>
 801329c:	4638      	mov	r0, r7
 801329e:	f7ff fc23 	bl	8012ae8 <rcl_convert_rmw_ret_to_rcl_ret>
 80132a2:	4606      	mov	r6, r0
 80132a4:	e7a5      	b.n	80131f2 <rcl_init_options_copy+0x1e>
 80132a6:	260b      	movs	r6, #11
 80132a8:	4630      	mov	r0, r6
 80132aa:	b016      	add	sp, #88	; 0x58
 80132ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80132b2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80132b4:	6820      	ldr	r0, [r4, #0]
 80132b6:	4798      	blx	r3
 80132b8:	4630      	mov	r0, r6
 80132ba:	f7ff fc15 	bl	8012ae8 <rcl_convert_rmw_ret_to_rcl_ret>
 80132be:	4606      	mov	r6, r0
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d0d3      	beq.n	801326c <rcl_init_options_copy+0x98>
 80132c4:	e795      	b.n	80131f2 <rcl_init_options_copy+0x1e>
 80132c6:	a802      	add	r0, sp, #8
 80132c8:	ae02      	add	r6, sp, #8
 80132ca:	6827      	ldr	r7, [r4, #0]
 80132cc:	f001 fe4a 	bl	8014f64 <rmw_get_zero_initialized_init_options>
 80132d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80132d2:	3718      	adds	r7, #24
 80132d4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80132d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80132d8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80132da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80132dc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80132de:	e896 0003 	ldmia.w	r6, {r0, r1}
 80132e2:	682a      	ldr	r2, [r5, #0]
 80132e4:	6823      	ldr	r3, [r4, #0]
 80132e6:	e887 0003 	stmia.w	r7, {r0, r1}
 80132ea:	f102 0018 	add.w	r0, r2, #24
 80132ee:	f103 0118 	add.w	r1, r3, #24
 80132f2:	f001 ffdb 	bl	80152ac <rmw_init_options_copy>
 80132f6:	4606      	mov	r6, r0
 80132f8:	2800      	cmp	r0, #0
 80132fa:	f43f af7a 	beq.w	80131f2 <rcl_init_options_copy+0x1e>
 80132fe:	f7fa fad3 	bl	800d8a8 <rcutils_get_error_string>
 8013302:	f7fa fae7 	bl	800d8d4 <rcutils_reset_error>
 8013306:	4620      	mov	r0, r4
 8013308:	f7ff ff40 	bl	801318c <rcl_init_options_fini>
 801330c:	b118      	cbz	r0, 8013316 <rcl_init_options_copy+0x142>
 801330e:	4606      	mov	r6, r0
 8013310:	e76f      	b.n	80131f2 <rcl_init_options_copy+0x1e>
 8013312:	260a      	movs	r6, #10
 8013314:	e76d      	b.n	80131f2 <rcl_init_options_copy+0x1e>
 8013316:	4630      	mov	r0, r6
 8013318:	f7ff fbe6 	bl	8012ae8 <rcl_convert_rmw_ret_to_rcl_ret>
 801331c:	4606      	mov	r6, r0
 801331e:	e768      	b.n	80131f2 <rcl_init_options_copy+0x1e>

08013320 <rcl_get_localhost_only>:
 8013320:	b510      	push	{r4, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	2300      	movs	r3, #0
 8013326:	9301      	str	r3, [sp, #4]
 8013328:	b1b8      	cbz	r0, 801335a <rcl_get_localhost_only+0x3a>
 801332a:	4604      	mov	r4, r0
 801332c:	a901      	add	r1, sp, #4
 801332e:	480c      	ldr	r0, [pc, #48]	; (8013360 <rcl_get_localhost_only+0x40>)
 8013330:	f001 fce2 	bl	8014cf8 <rcutils_get_env>
 8013334:	b110      	cbz	r0, 801333c <rcl_get_localhost_only+0x1c>
 8013336:	2001      	movs	r0, #1
 8013338:	b002      	add	sp, #8
 801333a:	bd10      	pop	{r4, pc}
 801333c:	9b01      	ldr	r3, [sp, #4]
 801333e:	b113      	cbz	r3, 8013346 <rcl_get_localhost_only+0x26>
 8013340:	781a      	ldrb	r2, [r3, #0]
 8013342:	2a31      	cmp	r2, #49	; 0x31
 8013344:	d004      	beq.n	8013350 <rcl_get_localhost_only+0x30>
 8013346:	2302      	movs	r3, #2
 8013348:	2000      	movs	r0, #0
 801334a:	7023      	strb	r3, [r4, #0]
 801334c:	b002      	add	sp, #8
 801334e:	bd10      	pop	{r4, pc}
 8013350:	785b      	ldrb	r3, [r3, #1]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d1f7      	bne.n	8013346 <rcl_get_localhost_only+0x26>
 8013356:	2301      	movs	r3, #1
 8013358:	e7f6      	b.n	8013348 <rcl_get_localhost_only+0x28>
 801335a:	200b      	movs	r0, #11
 801335c:	b002      	add	sp, #8
 801335e:	bd10      	pop	{r4, pc}
 8013360:	08019b60 	.word	0x08019b60

08013364 <rcl_get_zero_initialized_node>:
 8013364:	4a03      	ldr	r2, [pc, #12]	; (8013374 <rcl_get_zero_initialized_node+0x10>)
 8013366:	4603      	mov	r3, r0
 8013368:	e892 0003 	ldmia.w	r2, {r0, r1}
 801336c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013370:	4618      	mov	r0, r3
 8013372:	4770      	bx	lr
 8013374:	08019b80 	.word	0x08019b80

08013378 <rcl_node_init>:
 8013378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801337c:	b09b      	sub	sp, #108	; 0x6c
 801337e:	4604      	mov	r4, r0
 8013380:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8013384:	f04f 0c00 	mov.w	ip, #0
 8013388:	a815      	add	r0, sp, #84	; 0x54
 801338a:	460e      	mov	r6, r1
 801338c:	4615      	mov	r5, r2
 801338e:	461f      	mov	r7, r3
 8013390:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8013394:	f004 faf8 	bl	8017988 <rcl_guard_condition_get_default_options>
 8013398:	f1b8 0f00 	cmp.w	r8, #0
 801339c:	f000 80fd 	beq.w	801359a <rcl_node_init+0x222>
 80133a0:	f108 0b04 	add.w	fp, r8, #4
 80133a4:	4658      	mov	r0, fp
 80133a6:	f7fa fa71 	bl	800d88c <rcutils_allocator_is_valid>
 80133aa:	2800      	cmp	r0, #0
 80133ac:	f000 80f5 	beq.w	801359a <rcl_node_init+0x222>
 80133b0:	2e00      	cmp	r6, #0
 80133b2:	f000 80f2 	beq.w	801359a <rcl_node_init+0x222>
 80133b6:	2d00      	cmp	r5, #0
 80133b8:	f000 80ef 	beq.w	801359a <rcl_node_init+0x222>
 80133bc:	2c00      	cmp	r4, #0
 80133be:	f000 80ec 	beq.w	801359a <rcl_node_init+0x222>
 80133c2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80133c6:	f1b9 0f00 	cmp.w	r9, #0
 80133ca:	f040 8112 	bne.w	80135f2 <rcl_node_init+0x27a>
 80133ce:	2f00      	cmp	r7, #0
 80133d0:	f000 80e3 	beq.w	801359a <rcl_node_init+0x222>
 80133d4:	4638      	mov	r0, r7
 80133d6:	f7ff fba5 	bl	8012b24 <rcl_context_is_valid>
 80133da:	4682      	mov	sl, r0
 80133dc:	2800      	cmp	r0, #0
 80133de:	f000 80e2 	beq.w	80135a6 <rcl_node_init+0x22e>
 80133e2:	464a      	mov	r2, r9
 80133e4:	a914      	add	r1, sp, #80	; 0x50
 80133e6:	4630      	mov	r0, r6
 80133e8:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 80133ec:	f001 fe3a 	bl	8015064 <rmw_validate_node_name>
 80133f0:	4681      	mov	r9, r0
 80133f2:	2800      	cmp	r0, #0
 80133f4:	f040 80d3 	bne.w	801359e <rcl_node_init+0x226>
 80133f8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80133fa:	2800      	cmp	r0, #0
 80133fc:	f040 8105 	bne.w	801360a <rcl_node_init+0x292>
 8013400:	4628      	mov	r0, r5
 8013402:	f7ec fef7 	bl	80001f4 <strlen>
 8013406:	2800      	cmp	r0, #0
 8013408:	f040 80d0 	bne.w	80135ac <rcl_node_init+0x234>
 801340c:	4d8e      	ldr	r5, [pc, #568]	; (8013648 <rcl_node_init+0x2d0>)
 801340e:	a914      	add	r1, sp, #80	; 0x50
 8013410:	2200      	movs	r2, #0
 8013412:	4628      	mov	r0, r5
 8013414:	f001 fe08 	bl	8015028 <rmw_validate_namespace>
 8013418:	4681      	mov	r9, r0
 801341a:	2800      	cmp	r0, #0
 801341c:	f040 80bf 	bne.w	801359e <rcl_node_init+0x226>
 8013420:	4682      	mov	sl, r0
 8013422:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013424:	2b00      	cmp	r3, #0
 8013426:	f040 80f5 	bne.w	8013614 <rcl_node_init+0x29c>
 801342a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801342e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013432:	9307      	str	r3, [sp, #28]
 8013434:	2030      	movs	r0, #48	; 0x30
 8013436:	4790      	blx	r2
 8013438:	4681      	mov	r9, r0
 801343a:	6060      	str	r0, [r4, #4]
 801343c:	2800      	cmp	r0, #0
 801343e:	f000 80de 	beq.w	80135fe <rcl_node_init+0x286>
 8013442:	9b07      	ldr	r3, [sp, #28]
 8013444:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8013448:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 801344c:	a80a      	add	r0, sp, #40	; 0x28
 801344e:	f7f9 faad 	bl	800c9ac <rcl_node_get_default_options>
 8013452:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8013456:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801345a:	46cc      	mov	ip, r9
 801345c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013460:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8013464:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8013468:	6861      	ldr	r1, [r4, #4]
 801346a:	6027      	str	r7, [r4, #0]
 801346c:	4640      	mov	r0, r8
 801346e:	f7f9 fab9 	bl	800c9e4 <rcl_node_options_copy>
 8013472:	2800      	cmp	r0, #0
 8013474:	d167      	bne.n	8013546 <rcl_node_init+0x1ce>
 8013476:	4628      	mov	r0, r5
 8013478:	f7ec febc 	bl	80001f4 <strlen>
 801347c:	4428      	add	r0, r5
 801347e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013482:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013486:	2b2f      	cmp	r3, #47	; 0x2f
 8013488:	bf08      	it	eq
 801348a:	4970      	ldreq	r1, [pc, #448]	; (801364c <rcl_node_init+0x2d4>)
 801348c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013490:	bf18      	it	ne
 8013492:	496f      	ldrne	r1, [pc, #444]	; (8013650 <rcl_node_init+0x2d8>)
 8013494:	9604      	str	r6, [sp, #16]
 8013496:	e9cd 1502 	strd	r1, r5, [sp, #8]
 801349a:	e9cd 3200 	strd	r3, r2, [sp]
 801349e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80134a2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80134a6:	f001 fbed 	bl	8014c84 <rcutils_format_string_limit>
 80134aa:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 80134ae:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80134b2:	f8d9 3000 	ldr.w	r3, [r9]
 80134b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80134b8:	1c59      	adds	r1, r3, #1
 80134ba:	f000 80b7 	beq.w	801362c <rcl_node_init+0x2b4>
 80134be:	683a      	ldr	r2, [r7, #0]
 80134c0:	f8c9 301c 	str.w	r3, [r9, #28]
 80134c4:	6952      	ldr	r2, [r2, #20]
 80134c6:	6821      	ldr	r1, [r4, #0]
 80134c8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80134cc:	6808      	ldr	r0, [r1, #0]
 80134ce:	f1a2 0201 	sub.w	r2, r2, #1
 80134d2:	fab2 f282 	clz	r2, r2
 80134d6:	0952      	lsrs	r2, r2, #5
 80134d8:	9200      	str	r2, [sp, #0]
 80134da:	4631      	mov	r1, r6
 80134dc:	3028      	adds	r0, #40	; 0x28
 80134de:	462a      	mov	r2, r5
 80134e0:	f002 f9ce 	bl	8015880 <rmw_create_node>
 80134e4:	6863      	ldr	r3, [r4, #4]
 80134e6:	f8c9 0020 	str.w	r0, [r9, #32]
 80134ea:	6a18      	ldr	r0, [r3, #32]
 80134ec:	b368      	cbz	r0, 801354a <rcl_node_init+0x1d2>
 80134ee:	f002 fa59 	bl	80159a4 <rmw_node_get_graph_guard_condition>
 80134f2:	4681      	mov	r9, r0
 80134f4:	b338      	cbz	r0, 8013546 <rcl_node_init+0x1ce>
 80134f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80134fa:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80134fe:	6866      	ldr	r6, [r4, #4]
 8013500:	2008      	movs	r0, #8
 8013502:	4798      	blx	r3
 8013504:	6863      	ldr	r3, [r4, #4]
 8013506:	6270      	str	r0, [r6, #36]	; 0x24
 8013508:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 801350a:	b1f6      	cbz	r6, 801354a <rcl_node_init+0x1d2>
 801350c:	a808      	add	r0, sp, #32
 801350e:	f004 f9b3 	bl	8017878 <rcl_get_zero_initialized_guard_condition>
 8013512:	a808      	add	r0, sp, #32
 8013514:	c803      	ldmia	r0, {r0, r1}
 8013516:	e886 0003 	stmia.w	r6, {r0, r1}
 801351a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801351e:	ae15      	add	r6, sp, #84	; 0x54
 8013520:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013522:	f8db 3000 	ldr.w	r3, [fp]
 8013526:	6033      	str	r3, [r6, #0]
 8013528:	ab1a      	add	r3, sp, #104	; 0x68
 801352a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801352e:	6866      	ldr	r6, [r4, #4]
 8013530:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8013532:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013536:	4649      	mov	r1, r9
 8013538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801353a:	4630      	mov	r0, r6
 801353c:	463a      	mov	r2, r7
 801353e:	f004 f9a5 	bl	801788c <rcl_guard_condition_init_from_rmw>
 8013542:	4681      	mov	r9, r0
 8013544:	b328      	cbz	r0, 8013592 <rcl_node_init+0x21a>
 8013546:	6863      	ldr	r3, [r4, #4]
 8013548:	b1f3      	cbz	r3, 8013588 <rcl_node_init+0x210>
 801354a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801354c:	b128      	cbz	r0, 801355a <rcl_node_init+0x1e2>
 801354e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013552:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013556:	4798      	blx	r3
 8013558:	6863      	ldr	r3, [r4, #4]
 801355a:	6a18      	ldr	r0, [r3, #32]
 801355c:	b110      	cbz	r0, 8013564 <rcl_node_init+0x1ec>
 801355e:	f002 f9a7 	bl	80158b0 <rmw_destroy_node>
 8013562:	6863      	ldr	r3, [r4, #4]
 8013564:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013566:	b148      	cbz	r0, 801357c <rcl_node_init+0x204>
 8013568:	f004 f9e8 	bl	801793c <rcl_guard_condition_fini>
 801356c:	6862      	ldr	r2, [r4, #4]
 801356e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013572:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8013574:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013578:	4798      	blx	r3
 801357a:	6863      	ldr	r3, [r4, #4]
 801357c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8013580:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013584:	4618      	mov	r0, r3
 8013586:	4790      	blx	r2
 8013588:	2300      	movs	r3, #0
 801358a:	e9c4 3300 	strd	r3, r3, [r4]
 801358e:	f04f 0901 	mov.w	r9, #1
 8013592:	f1ba 0f00 	cmp.w	sl, #0
 8013596:	d125      	bne.n	80135e4 <rcl_node_init+0x26c>
 8013598:	e001      	b.n	801359e <rcl_node_init+0x226>
 801359a:	f04f 090b 	mov.w	r9, #11
 801359e:	4648      	mov	r0, r9
 80135a0:	b01b      	add	sp, #108	; 0x6c
 80135a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135a6:	f04f 0965 	mov.w	r9, #101	; 0x65
 80135aa:	e7f8      	b.n	801359e <rcl_node_init+0x226>
 80135ac:	782b      	ldrb	r3, [r5, #0]
 80135ae:	2b2f      	cmp	r3, #47	; 0x2f
 80135b0:	f43f af2d 	beq.w	801340e <rcl_node_init+0x96>
 80135b4:	4927      	ldr	r1, [pc, #156]	; (8013654 <rcl_node_init+0x2dc>)
 80135b6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80135ba:	9300      	str	r3, [sp, #0]
 80135bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80135c0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80135c4:	9503      	str	r5, [sp, #12]
 80135c6:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80135ca:	f001 fb5b 	bl	8014c84 <rcutils_format_string_limit>
 80135ce:	4605      	mov	r5, r0
 80135d0:	b348      	cbz	r0, 8013626 <rcl_node_init+0x2ae>
 80135d2:	2200      	movs	r2, #0
 80135d4:	a914      	add	r1, sp, #80	; 0x50
 80135d6:	9214      	str	r2, [sp, #80]	; 0x50
 80135d8:	f001 fd26 	bl	8015028 <rmw_validate_namespace>
 80135dc:	4681      	mov	r9, r0
 80135de:	2800      	cmp	r0, #0
 80135e0:	f43f af1f 	beq.w	8013422 <rcl_node_init+0xaa>
 80135e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135e8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80135ec:	4628      	mov	r0, r5
 80135ee:	4798      	blx	r3
 80135f0:	e7d5      	b.n	801359e <rcl_node_init+0x226>
 80135f2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80135f6:	4648      	mov	r0, r9
 80135f8:	b01b      	add	sp, #108	; 0x6c
 80135fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135fe:	f04f 090a 	mov.w	r9, #10
 8013602:	f1ba 0f00 	cmp.w	sl, #0
 8013606:	d1ed      	bne.n	80135e4 <rcl_node_init+0x26c>
 8013608:	e7c9      	b.n	801359e <rcl_node_init+0x226>
 801360a:	f001 fd7d 	bl	8015108 <rmw_node_name_validation_result_string>
 801360e:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8013612:	e7c4      	b.n	801359e <rcl_node_init+0x226>
 8013614:	4618      	mov	r0, r3
 8013616:	f001 fd19 	bl	801504c <rmw_namespace_validation_result_string>
 801361a:	f04f 09ca 	mov.w	r9, #202	; 0xca
 801361e:	f1ba 0f00 	cmp.w	sl, #0
 8013622:	d1df      	bne.n	80135e4 <rcl_node_init+0x26c>
 8013624:	e7bb      	b.n	801359e <rcl_node_init+0x226>
 8013626:	f04f 090a 	mov.w	r9, #10
 801362a:	e7b8      	b.n	801359e <rcl_node_init+0x226>
 801362c:	a813      	add	r0, sp, #76	; 0x4c
 801362e:	f004 f8ef 	bl	8017810 <rcl_get_default_domain_id>
 8013632:	2800      	cmp	r0, #0
 8013634:	d187      	bne.n	8013546 <rcl_node_init+0x1ce>
 8013636:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013638:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801363c:	1c5a      	adds	r2, r3, #1
 801363e:	bf04      	itt	eq
 8013640:	9013      	streq	r0, [sp, #76]	; 0x4c
 8013642:	4603      	moveq	r3, r0
 8013644:	e73b      	b.n	80134be <rcl_node_init+0x146>
 8013646:	bf00      	nop
 8013648:	08019b78 	.word	0x08019b78
 801364c:	08019b08 	.word	0x08019b08
 8013650:	08019b3c 	.word	0x08019b3c
 8013654:	08019b7c 	.word	0x08019b7c

08013658 <rcl_node_is_valid>:
 8013658:	b130      	cbz	r0, 8013668 <rcl_node_is_valid+0x10>
 801365a:	6843      	ldr	r3, [r0, #4]
 801365c:	b123      	cbz	r3, 8013668 <rcl_node_is_valid+0x10>
 801365e:	6a1b      	ldr	r3, [r3, #32]
 8013660:	b113      	cbz	r3, 8013668 <rcl_node_is_valid+0x10>
 8013662:	6800      	ldr	r0, [r0, #0]
 8013664:	f7ff ba5e 	b.w	8012b24 <rcl_context_is_valid>
 8013668:	2000      	movs	r0, #0
 801366a:	4770      	bx	lr

0801366c <rcl_node_get_name>:
 801366c:	b120      	cbz	r0, 8013678 <rcl_node_get_name+0xc>
 801366e:	6840      	ldr	r0, [r0, #4]
 8013670:	b110      	cbz	r0, 8013678 <rcl_node_get_name+0xc>
 8013672:	6a00      	ldr	r0, [r0, #32]
 8013674:	b100      	cbz	r0, 8013678 <rcl_node_get_name+0xc>
 8013676:	6880      	ldr	r0, [r0, #8]
 8013678:	4770      	bx	lr
 801367a:	bf00      	nop

0801367c <rcl_node_get_namespace>:
 801367c:	b120      	cbz	r0, 8013688 <rcl_node_get_namespace+0xc>
 801367e:	6840      	ldr	r0, [r0, #4]
 8013680:	b110      	cbz	r0, 8013688 <rcl_node_get_namespace+0xc>
 8013682:	6a00      	ldr	r0, [r0, #32]
 8013684:	b100      	cbz	r0, 8013688 <rcl_node_get_namespace+0xc>
 8013686:	68c0      	ldr	r0, [r0, #12]
 8013688:	4770      	bx	lr
 801368a:	bf00      	nop

0801368c <rcl_node_get_options>:
 801368c:	b128      	cbz	r0, 801369a <rcl_node_get_options+0xe>
 801368e:	6840      	ldr	r0, [r0, #4]
 8013690:	b118      	cbz	r0, 801369a <rcl_node_get_options+0xe>
 8013692:	6a03      	ldr	r3, [r0, #32]
 8013694:	2b00      	cmp	r3, #0
 8013696:	bf08      	it	eq
 8013698:	2000      	moveq	r0, #0
 801369a:	4770      	bx	lr

0801369c <rcl_node_get_rmw_handle>:
 801369c:	b110      	cbz	r0, 80136a4 <rcl_node_get_rmw_handle+0x8>
 801369e:	6840      	ldr	r0, [r0, #4]
 80136a0:	b100      	cbz	r0, 80136a4 <rcl_node_get_rmw_handle+0x8>
 80136a2:	6a00      	ldr	r0, [r0, #32]
 80136a4:	4770      	bx	lr
 80136a6:	bf00      	nop

080136a8 <exact_match_lookup>:
 80136a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136aa:	f102 0708 	add.w	r7, r2, #8
 80136ae:	460b      	mov	r3, r1
 80136b0:	4614      	mov	r4, r2
 80136b2:	4606      	mov	r6, r0
 80136b4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80136b8:	b085      	sub	sp, #20
 80136ba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80136be:	4618      	mov	r0, r3
 80136c0:	4918      	ldr	r1, [pc, #96]	; (8013724 <exact_match_lookup+0x7c>)
 80136c2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80136c6:	f001 facf 	bl	8014c68 <rcutils_join_path>
 80136ca:	7833      	ldrb	r3, [r6, #0]
 80136cc:	2b2f      	cmp	r3, #47	; 0x2f
 80136ce:	4605      	mov	r5, r0
 80136d0:	d021      	beq.n	8013716 <exact_match_lookup+0x6e>
 80136d2:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80136d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80136da:	1c70      	adds	r0, r6, #1
 80136dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80136e0:	f001 fac8 	bl	8014c74 <rcutils_to_native_path>
 80136e4:	4606      	mov	r6, r0
 80136e6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80136ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80136ee:	4631      	mov	r1, r6
 80136f0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80136f4:	4628      	mov	r0, r5
 80136f6:	f001 fab7 	bl	8014c68 <rcutils_join_path>
 80136fa:	6862      	ldr	r2, [r4, #4]
 80136fc:	6921      	ldr	r1, [r4, #16]
 80136fe:	4603      	mov	r3, r0
 8013700:	4630      	mov	r0, r6
 8013702:	461e      	mov	r6, r3
 8013704:	4790      	blx	r2
 8013706:	4628      	mov	r0, r5
 8013708:	6863      	ldr	r3, [r4, #4]
 801370a:	6921      	ldr	r1, [r4, #16]
 801370c:	4798      	blx	r3
 801370e:	4635      	mov	r5, r6
 8013710:	4628      	mov	r0, r5
 8013712:	b005      	add	sp, #20
 8013714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013716:	7873      	ldrb	r3, [r6, #1]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d1da      	bne.n	80136d2 <exact_match_lookup+0x2a>
 801371c:	4628      	mov	r0, r5
 801371e:	b005      	add	sp, #20
 8013720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013722:	bf00      	nop
 8013724:	08019bc4 	.word	0x08019bc4

08013728 <rcl_get_secure_root>:
 8013728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801372c:	b085      	sub	sp, #20
 801372e:	b168      	cbz	r0, 801374c <rcl_get_secure_root+0x24>
 8013730:	4607      	mov	r7, r0
 8013732:	4608      	mov	r0, r1
 8013734:	460c      	mov	r4, r1
 8013736:	f7fa f8a9 	bl	800d88c <rcutils_allocator_is_valid>
 801373a:	b138      	cbz	r0, 801374c <rcl_get_secure_root+0x24>
 801373c:	2300      	movs	r3, #0
 801373e:	482d      	ldr	r0, [pc, #180]	; (80137f4 <rcl_get_secure_root+0xcc>)
 8013740:	9303      	str	r3, [sp, #12]
 8013742:	a903      	add	r1, sp, #12
 8013744:	f001 fad8 	bl	8014cf8 <rcutils_get_env>
 8013748:	4605      	mov	r5, r0
 801374a:	b120      	cbz	r0, 8013756 <rcl_get_secure_root+0x2e>
 801374c:	2500      	movs	r5, #0
 801374e:	4628      	mov	r0, r5
 8013750:	b005      	add	sp, #20
 8013752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013756:	9b03      	ldr	r3, [sp, #12]
 8013758:	781a      	ldrb	r2, [r3, #0]
 801375a:	2a00      	cmp	r2, #0
 801375c:	d0f6      	beq.n	801374c <rcl_get_secure_root+0x24>
 801375e:	f104 090c 	add.w	r9, r4, #12
 8013762:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013766:	e88d 0003 	stmia.w	sp, {r0, r1}
 801376a:	4618      	mov	r0, r3
 801376c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013770:	f001 fbb2 	bl	8014ed8 <rcutils_strdup>
 8013774:	4680      	mov	r8, r0
 8013776:	2800      	cmp	r0, #0
 8013778:	d0e8      	beq.n	801374c <rcl_get_secure_root+0x24>
 801377a:	481f      	ldr	r0, [pc, #124]	; (80137f8 <rcl_get_secure_root+0xd0>)
 801377c:	9503      	str	r5, [sp, #12]
 801377e:	a903      	add	r1, sp, #12
 8013780:	f001 faba 	bl	8014cf8 <rcutils_get_env>
 8013784:	b160      	cbz	r0, 80137a0 <rcl_get_secure_root+0x78>
 8013786:	2600      	movs	r6, #0
 8013788:	6863      	ldr	r3, [r4, #4]
 801378a:	6921      	ldr	r1, [r4, #16]
 801378c:	4630      	mov	r0, r6
 801378e:	4798      	blx	r3
 8013790:	4640      	mov	r0, r8
 8013792:	6863      	ldr	r3, [r4, #4]
 8013794:	6921      	ldr	r1, [r4, #16]
 8013796:	4798      	blx	r3
 8013798:	4628      	mov	r0, r5
 801379a:	b005      	add	sp, #20
 801379c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137a0:	9b03      	ldr	r3, [sp, #12]
 80137a2:	781e      	ldrb	r6, [r3, #0]
 80137a4:	b1f6      	cbz	r6, 80137e4 <rcl_get_secure_root+0xbc>
 80137a6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80137aa:	e88d 0003 	stmia.w	sp, {r0, r1}
 80137ae:	4618      	mov	r0, r3
 80137b0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80137b4:	f001 fb90 	bl	8014ed8 <rcutils_strdup>
 80137b8:	4606      	mov	r6, r0
 80137ba:	2800      	cmp	r0, #0
 80137bc:	d0e3      	beq.n	8013786 <rcl_get_secure_root+0x5e>
 80137be:	4622      	mov	r2, r4
 80137c0:	4641      	mov	r1, r8
 80137c2:	f7ff ff71 	bl	80136a8 <exact_match_lookup>
 80137c6:	4605      	mov	r5, r0
 80137c8:	2d00      	cmp	r5, #0
 80137ca:	d0dd      	beq.n	8013788 <rcl_get_secure_root+0x60>
 80137cc:	4628      	mov	r0, r5
 80137ce:	f001 fa49 	bl	8014c64 <rcutils_is_directory>
 80137d2:	4607      	mov	r7, r0
 80137d4:	2800      	cmp	r0, #0
 80137d6:	d1d7      	bne.n	8013788 <rcl_get_secure_root+0x60>
 80137d8:	4628      	mov	r0, r5
 80137da:	6863      	ldr	r3, [r4, #4]
 80137dc:	6921      	ldr	r1, [r4, #16]
 80137de:	4798      	blx	r3
 80137e0:	463d      	mov	r5, r7
 80137e2:	e7d1      	b.n	8013788 <rcl_get_secure_root+0x60>
 80137e4:	4638      	mov	r0, r7
 80137e6:	4622      	mov	r2, r4
 80137e8:	4641      	mov	r1, r8
 80137ea:	f7ff ff5d 	bl	80136a8 <exact_match_lookup>
 80137ee:	4605      	mov	r5, r0
 80137f0:	e7ea      	b.n	80137c8 <rcl_get_secure_root+0xa0>
 80137f2:	bf00      	nop
 80137f4:	08019bd0 	.word	0x08019bd0
 80137f8:	08019be8 	.word	0x08019be8

080137fc <rcl_get_security_options_from_environment>:
 80137fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013800:	b082      	sub	sp, #8
 8013802:	4607      	mov	r7, r0
 8013804:	4688      	mov	r8, r1
 8013806:	2400      	movs	r4, #0
 8013808:	481d      	ldr	r0, [pc, #116]	; (8013880 <rcl_get_security_options_from_environment+0x84>)
 801380a:	9401      	str	r4, [sp, #4]
 801380c:	a901      	add	r1, sp, #4
 801380e:	4616      	mov	r6, r2
 8013810:	f001 fa72 	bl	8014cf8 <rcutils_get_env>
 8013814:	b120      	cbz	r0, 8013820 <rcl_get_security_options_from_environment+0x24>
 8013816:	2501      	movs	r5, #1
 8013818:	4628      	mov	r0, r5
 801381a:	b002      	add	sp, #8
 801381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013820:	4918      	ldr	r1, [pc, #96]	; (8013884 <rcl_get_security_options_from_environment+0x88>)
 8013822:	4604      	mov	r4, r0
 8013824:	9801      	ldr	r0, [sp, #4]
 8013826:	f7ec fcdb 	bl	80001e0 <strcmp>
 801382a:	4605      	mov	r5, r0
 801382c:	b9c8      	cbnz	r0, 8013862 <rcl_get_security_options_from_environment+0x66>
 801382e:	9001      	str	r0, [sp, #4]
 8013830:	b1ee      	cbz	r6, 801386e <rcl_get_security_options_from_environment+0x72>
 8013832:	4815      	ldr	r0, [pc, #84]	; (8013888 <rcl_get_security_options_from_environment+0x8c>)
 8013834:	a901      	add	r1, sp, #4
 8013836:	f001 fa5f 	bl	8014cf8 <rcutils_get_env>
 801383a:	2800      	cmp	r0, #0
 801383c:	d1eb      	bne.n	8013816 <rcl_get_security_options_from_environment+0x1a>
 801383e:	4913      	ldr	r1, [pc, #76]	; (801388c <rcl_get_security_options_from_environment+0x90>)
 8013840:	9801      	ldr	r0, [sp, #4]
 8013842:	f7ec fccd 	bl	80001e0 <strcmp>
 8013846:	fab0 f080 	clz	r0, r0
 801384a:	0940      	lsrs	r0, r0, #5
 801384c:	7030      	strb	r0, [r6, #0]
 801384e:	4641      	mov	r1, r8
 8013850:	4638      	mov	r0, r7
 8013852:	f7ff ff69 	bl	8013728 <rcl_get_secure_root>
 8013856:	b160      	cbz	r0, 8013872 <rcl_get_security_options_from_environment+0x76>
 8013858:	6070      	str	r0, [r6, #4]
 801385a:	4628      	mov	r0, r5
 801385c:	b002      	add	sp, #8
 801385e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013862:	4625      	mov	r5, r4
 8013864:	4628      	mov	r0, r5
 8013866:	7034      	strb	r4, [r6, #0]
 8013868:	b002      	add	sp, #8
 801386a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801386e:	250b      	movs	r5, #11
 8013870:	e7d2      	b.n	8013818 <rcl_get_security_options_from_environment+0x1c>
 8013872:	7835      	ldrb	r5, [r6, #0]
 8013874:	f1a5 0501 	sub.w	r5, r5, #1
 8013878:	fab5 f585 	clz	r5, r5
 801387c:	096d      	lsrs	r5, r5, #5
 801387e:	e7cb      	b.n	8013818 <rcl_get_security_options_from_environment+0x1c>
 8013880:	08019b88 	.word	0x08019b88
 8013884:	08019b9c 	.word	0x08019b9c
 8013888:	08019ba4 	.word	0x08019ba4
 801388c:	08019bbc 	.word	0x08019bbc

08013890 <rcl_service_get_rmw_handle>:
 8013890:	b110      	cbz	r0, 8013898 <rcl_service_get_rmw_handle+0x8>
 8013892:	6800      	ldr	r0, [r0, #0]
 8013894:	b100      	cbz	r0, 8013898 <rcl_service_get_rmw_handle+0x8>
 8013896:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013898:	4770      	bx	lr
 801389a:	bf00      	nop

0801389c <rcl_take_request>:
 801389c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801389e:	460e      	mov	r6, r1
 80138a0:	460c      	mov	r4, r1
 80138a2:	4607      	mov	r7, r0
 80138a4:	4694      	mov	ip, r2
 80138a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80138a8:	b08d      	sub	sp, #52	; 0x34
 80138aa:	ad06      	add	r5, sp, #24
 80138ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80138ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 80138b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80138b6:	b1e7      	cbz	r7, 80138f2 <rcl_take_request+0x56>
 80138b8:	683b      	ldr	r3, [r7, #0]
 80138ba:	b1d3      	cbz	r3, 80138f2 <rcl_take_request+0x56>
 80138bc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80138be:	b1c0      	cbz	r0, 80138f2 <rcl_take_request+0x56>
 80138c0:	4662      	mov	r2, ip
 80138c2:	b30a      	cbz	r2, 8013908 <rcl_take_request+0x6c>
 80138c4:	2500      	movs	r5, #0
 80138c6:	f10d 0307 	add.w	r3, sp, #7
 80138ca:	a902      	add	r1, sp, #8
 80138cc:	f88d 5007 	strb.w	r5, [sp, #7]
 80138d0:	f002 f86e 	bl	80159b0 <rmw_take_request>
 80138d4:	4606      	mov	r6, r0
 80138d6:	b178      	cbz	r0, 80138f8 <rcl_take_request+0x5c>
 80138d8:	280a      	cmp	r0, #10
 80138da:	bf18      	it	ne
 80138dc:	2601      	movne	r6, #1
 80138de:	ad06      	add	r5, sp, #24
 80138e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80138e8:	e884 0003 	stmia.w	r4, {r0, r1}
 80138ec:	4630      	mov	r0, r6
 80138ee:	b00d      	add	sp, #52	; 0x34
 80138f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138f2:	f44f 7616 	mov.w	r6, #600	; 0x258
 80138f6:	e7f2      	b.n	80138de <rcl_take_request+0x42>
 80138f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80138fc:	f240 2359 	movw	r3, #601	; 0x259
 8013900:	2a00      	cmp	r2, #0
 8013902:	bf08      	it	eq
 8013904:	461e      	moveq	r6, r3
 8013906:	e7ea      	b.n	80138de <rcl_take_request+0x42>
 8013908:	260b      	movs	r6, #11
 801390a:	e7e8      	b.n	80138de <rcl_take_request+0x42>

0801390c <rcl_send_response>:
 801390c:	b160      	cbz	r0, 8013928 <rcl_send_response+0x1c>
 801390e:	6800      	ldr	r0, [r0, #0]
 8013910:	b150      	cbz	r0, 8013928 <rcl_send_response+0x1c>
 8013912:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013914:	b140      	cbz	r0, 8013928 <rcl_send_response+0x1c>
 8013916:	b151      	cbz	r1, 801392e <rcl_send_response+0x22>
 8013918:	b510      	push	{r4, lr}
 801391a:	b152      	cbz	r2, 8013932 <rcl_send_response+0x26>
 801391c:	f002 f8a6 	bl	8015a6c <rmw_send_response>
 8013920:	3800      	subs	r0, #0
 8013922:	bf18      	it	ne
 8013924:	2001      	movne	r0, #1
 8013926:	bd10      	pop	{r4, pc}
 8013928:	f44f 7016 	mov.w	r0, #600	; 0x258
 801392c:	4770      	bx	lr
 801392e:	200b      	movs	r0, #11
 8013930:	4770      	bx	lr
 8013932:	200b      	movs	r0, #11
 8013934:	bd10      	pop	{r4, pc}
 8013936:	bf00      	nop

08013938 <rcl_get_system_time>:
 8013938:	4608      	mov	r0, r1
 801393a:	f7fa b913 	b.w	800db64 <rcutils_system_time_now>
 801393e:	bf00      	nop

08013940 <rcl_get_steady_time>:
 8013940:	4608      	mov	r0, r1
 8013942:	f7fa b937 	b.w	800dbb4 <rcutils_steady_time_now>
 8013946:	bf00      	nop

08013948 <rcl_get_ros_time>:
 8013948:	7a03      	ldrb	r3, [r0, #8]
 801394a:	b510      	push	{r4, lr}
 801394c:	460c      	mov	r4, r1
 801394e:	b133      	cbz	r3, 801395e <rcl_get_ros_time+0x16>
 8013950:	2105      	movs	r1, #5
 8013952:	f001 f8e5 	bl	8014b20 <__atomic_load_8>
 8013956:	e9c4 0100 	strd	r0, r1, [r4]
 801395a:	2000      	movs	r0, #0
 801395c:	bd10      	pop	{r4, pc}
 801395e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013962:	4608      	mov	r0, r1
 8013964:	f7fa b8fe 	b.w	800db64 <rcutils_system_time_now>

08013968 <rcl_clock_init>:
 8013968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801396c:	4606      	mov	r6, r0
 801396e:	4610      	mov	r0, r2
 8013970:	4614      	mov	r4, r2
 8013972:	460d      	mov	r5, r1
 8013974:	f7f9 ff8a 	bl	800d88c <rcutils_allocator_is_valid>
 8013978:	b128      	cbz	r0, 8013986 <rcl_clock_init+0x1e>
 801397a:	2e03      	cmp	r6, #3
 801397c:	d803      	bhi.n	8013986 <rcl_clock_init+0x1e>
 801397e:	e8df f006 	tbb	[pc, r6]
 8013982:	2c1b      	.short	0x2c1b
 8013984:	0554      	.short	0x0554
 8013986:	200b      	movs	r0, #11
 8013988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801398c:	2d00      	cmp	r5, #0
 801398e:	d0fa      	beq.n	8013986 <rcl_clock_init+0x1e>
 8013990:	2c00      	cmp	r4, #0
 8013992:	d0f8      	beq.n	8013986 <rcl_clock_init+0x1e>
 8013994:	2600      	movs	r6, #0
 8013996:	702e      	strb	r6, [r5, #0]
 8013998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801399a:	f105 0714 	add.w	r7, r5, #20
 801399e:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80139a2:	612e      	str	r6, [r5, #16]
 80139a4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80139a6:	6823      	ldr	r3, [r4, #0]
 80139a8:	603b      	str	r3, [r7, #0]
 80139aa:	2303      	movs	r3, #3
 80139ac:	4a2b      	ldr	r2, [pc, #172]	; (8013a5c <rcl_clock_init+0xf4>)
 80139ae:	702b      	strb	r3, [r5, #0]
 80139b0:	4630      	mov	r0, r6
 80139b2:	60ea      	str	r2, [r5, #12]
 80139b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139b8:	2d00      	cmp	r5, #0
 80139ba:	d0e4      	beq.n	8013986 <rcl_clock_init+0x1e>
 80139bc:	2600      	movs	r6, #0
 80139be:	702e      	strb	r6, [r5, #0]
 80139c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139c2:	f105 0714 	add.w	r7, r5, #20
 80139c6:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80139ca:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80139ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80139d0:	6823      	ldr	r3, [r4, #0]
 80139d2:	603b      	str	r3, [r7, #0]
 80139d4:	4630      	mov	r0, r6
 80139d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139da:	2d00      	cmp	r5, #0
 80139dc:	d0d3      	beq.n	8013986 <rcl_clock_init+0x1e>
 80139de:	2c00      	cmp	r4, #0
 80139e0:	d0d1      	beq.n	8013986 <rcl_clock_init+0x1e>
 80139e2:	2600      	movs	r6, #0
 80139e4:	702e      	strb	r6, [r5, #0]
 80139e6:	46a4      	mov	ip, r4
 80139e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139ec:	f105 0714 	add.w	r7, r5, #20
 80139f0:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80139f4:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80139f8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80139fa:	f8dc 3000 	ldr.w	r3, [ip]
 80139fe:	603b      	str	r3, [r7, #0]
 8013a00:	6921      	ldr	r1, [r4, #16]
 8013a02:	6823      	ldr	r3, [r4, #0]
 8013a04:	2010      	movs	r0, #16
 8013a06:	4798      	blx	r3
 8013a08:	4603      	mov	r3, r0
 8013a0a:	6128      	str	r0, [r5, #16]
 8013a0c:	b318      	cbz	r0, 8013a56 <rcl_clock_init+0xee>
 8013a0e:	f04f 0800 	mov.w	r8, #0
 8013a12:	f04f 0900 	mov.w	r9, #0
 8013a16:	7206      	strb	r6, [r0, #8]
 8013a18:	e9c3 8900 	strd	r8, r9, [r3]
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	4a10      	ldr	r2, [pc, #64]	; (8013a60 <rcl_clock_init+0xf8>)
 8013a20:	702b      	strb	r3, [r5, #0]
 8013a22:	4630      	mov	r0, r6
 8013a24:	60ea      	str	r2, [r5, #12]
 8013a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a2a:	2d00      	cmp	r5, #0
 8013a2c:	d0ab      	beq.n	8013986 <rcl_clock_init+0x1e>
 8013a2e:	2c00      	cmp	r4, #0
 8013a30:	d0a9      	beq.n	8013986 <rcl_clock_init+0x1e>
 8013a32:	2600      	movs	r6, #0
 8013a34:	702e      	strb	r6, [r5, #0]
 8013a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a38:	f105 0714 	add.w	r7, r5, #20
 8013a3c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8013a40:	612e      	str	r6, [r5, #16]
 8013a42:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013a44:	6823      	ldr	r3, [r4, #0]
 8013a46:	603b      	str	r3, [r7, #0]
 8013a48:	2302      	movs	r3, #2
 8013a4a:	4a06      	ldr	r2, [pc, #24]	; (8013a64 <rcl_clock_init+0xfc>)
 8013a4c:	702b      	strb	r3, [r5, #0]
 8013a4e:	4630      	mov	r0, r6
 8013a50:	60ea      	str	r2, [r5, #12]
 8013a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a56:	200a      	movs	r0, #10
 8013a58:	e796      	b.n	8013988 <rcl_clock_init+0x20>
 8013a5a:	bf00      	nop
 8013a5c:	08013941 	.word	0x08013941
 8013a60:	08013949 	.word	0x08013949
 8013a64:	08013939 	.word	0x08013939

08013a68 <rcl_clock_get_now>:
 8013a68:	b140      	cbz	r0, 8013a7c <rcl_clock_get_now+0x14>
 8013a6a:	b139      	cbz	r1, 8013a7c <rcl_clock_get_now+0x14>
 8013a6c:	7803      	ldrb	r3, [r0, #0]
 8013a6e:	b11b      	cbz	r3, 8013a78 <rcl_clock_get_now+0x10>
 8013a70:	68c3      	ldr	r3, [r0, #12]
 8013a72:	b10b      	cbz	r3, 8013a78 <rcl_clock_get_now+0x10>
 8013a74:	6900      	ldr	r0, [r0, #16]
 8013a76:	4718      	bx	r3
 8013a78:	2001      	movs	r0, #1
 8013a7a:	4770      	bx	lr
 8013a7c:	200b      	movs	r0, #11
 8013a7e:	4770      	bx	lr

08013a80 <rcl_timer_call>:
 8013a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a84:	b08b      	sub	sp, #44	; 0x2c
 8013a86:	2800      	cmp	r0, #0
 8013a88:	d06e      	beq.n	8013b68 <rcl_timer_call+0xe8>
 8013a8a:	6803      	ldr	r3, [r0, #0]
 8013a8c:	f3bf 8f5b 	dmb	ish
 8013a90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013a94:	f3bf 8f5b 	dmb	ish
 8013a98:	4604      	mov	r4, r0
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d159      	bne.n	8013b52 <rcl_timer_call+0xd2>
 8013a9e:	6803      	ldr	r3, [r0, #0]
 8013aa0:	a908      	add	r1, sp, #32
 8013aa2:	6818      	ldr	r0, [r3, #0]
 8013aa4:	f7ff ffe0 	bl	8013a68 <rcl_clock_get_now>
 8013aa8:	4605      	mov	r5, r0
 8013aaa:	2800      	cmp	r0, #0
 8013aac:	d14d      	bne.n	8013b4a <rcl_timer_call+0xca>
 8013aae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013ab2:	2a00      	cmp	r2, #0
 8013ab4:	f173 0100 	sbcs.w	r1, r3, #0
 8013ab8:	db51      	blt.n	8013b5e <rcl_timer_call+0xde>
 8013aba:	6820      	ldr	r0, [r4, #0]
 8013abc:	2605      	movs	r6, #5
 8013abe:	9600      	str	r6, [sp, #0]
 8013ac0:	3020      	adds	r0, #32
 8013ac2:	f001 f895 	bl	8014bf0 <__atomic_exchange_8>
 8013ac6:	6822      	ldr	r2, [r4, #0]
 8013ac8:	f3bf 8f5b 	dmb	ish
 8013acc:	4682      	mov	sl, r0
 8013ace:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8013ad2:	f3bf 8f5b 	dmb	ish
 8013ad6:	6820      	ldr	r0, [r4, #0]
 8013ad8:	460b      	mov	r3, r1
 8013ada:	3028      	adds	r0, #40	; 0x28
 8013adc:	4631      	mov	r1, r6
 8013ade:	9305      	str	r3, [sp, #20]
 8013ae0:	f001 f81e 	bl	8014b20 <__atomic_load_8>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	6820      	ldr	r0, [r4, #0]
 8013ae8:	460a      	mov	r2, r1
 8013aea:	3018      	adds	r0, #24
 8013aec:	4631      	mov	r1, r6
 8013aee:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8013af2:	f001 f815 	bl	8014b20 <__atomic_load_8>
 8013af6:	9b04      	ldr	r3, [sp, #16]
 8013af8:	9a03      	ldr	r2, [sp, #12]
 8013afa:	4606      	mov	r6, r0
 8013afc:	460f      	mov	r7, r1
 8013afe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013b02:	eb13 0806 	adds.w	r8, r3, r6
 8013b06:	eb42 0907 	adc.w	r9, r2, r7
 8013b0a:	4580      	cmp	r8, r0
 8013b0c:	eb79 0301 	sbcs.w	r3, r9, r1
 8013b10:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013b14:	460a      	mov	r2, r1
 8013b16:	da04      	bge.n	8013b22 <rcl_timer_call+0xa2>
 8013b18:	ea56 0307 	orrs.w	r3, r6, r7
 8013b1c:	d129      	bne.n	8013b72 <rcl_timer_call+0xf2>
 8013b1e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8013b22:	6820      	ldr	r0, [r4, #0]
 8013b24:	2105      	movs	r1, #5
 8013b26:	4642      	mov	r2, r8
 8013b28:	464b      	mov	r3, r9
 8013b2a:	3028      	adds	r0, #40	; 0x28
 8013b2c:	9100      	str	r1, [sp, #0]
 8013b2e:	f001 f82b 	bl	8014b88 <__atomic_store_8>
 8013b32:	f1bb 0f00 	cmp.w	fp, #0
 8013b36:	d008      	beq.n	8013b4a <rcl_timer_call+0xca>
 8013b38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013b3c:	9905      	ldr	r1, [sp, #20]
 8013b3e:	ebb2 020a 	subs.w	r2, r2, sl
 8013b42:	4620      	mov	r0, r4
 8013b44:	eb63 0301 	sbc.w	r3, r3, r1
 8013b48:	47d8      	blx	fp
 8013b4a:	4628      	mov	r0, r5
 8013b4c:	b00b      	add	sp, #44	; 0x2c
 8013b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b52:	f240 3521 	movw	r5, #801	; 0x321
 8013b56:	4628      	mov	r0, r5
 8013b58:	b00b      	add	sp, #44	; 0x2c
 8013b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b5e:	2501      	movs	r5, #1
 8013b60:	4628      	mov	r0, r5
 8013b62:	b00b      	add	sp, #44	; 0x2c
 8013b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b68:	250b      	movs	r5, #11
 8013b6a:	4628      	mov	r0, r5
 8013b6c:	b00b      	add	sp, #44	; 0x2c
 8013b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b72:	ebb0 0008 	subs.w	r0, r0, r8
 8013b76:	eb62 0109 	sbc.w	r1, r2, r9
 8013b7a:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8013b7e:	463b      	mov	r3, r7
 8013b80:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8013b84:	4632      	mov	r2, r6
 8013b86:	f7ec ffb1 	bl	8000aec <__aeabi_ldivmod>
 8013b8a:	1c43      	adds	r3, r0, #1
 8013b8c:	f141 0100 	adc.w	r1, r1, #0
 8013b90:	fb00 7007 	mla	r0, r0, r7, r7
 8013b94:	fb06 0001 	mla	r0, r6, r1, r0
 8013b98:	fba3 6706 	umull	r6, r7, r3, r6
 8013b9c:	4407      	add	r7, r0
 8013b9e:	eb18 0806 	adds.w	r8, r8, r6
 8013ba2:	eb49 0907 	adc.w	r9, r9, r7
 8013ba6:	e7bc      	b.n	8013b22 <rcl_timer_call+0xa2>

08013ba8 <rcl_timer_is_ready>:
 8013ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bac:	b082      	sub	sp, #8
 8013bae:	b310      	cbz	r0, 8013bf6 <rcl_timer_is_ready+0x4e>
 8013bb0:	4688      	mov	r8, r1
 8013bb2:	b301      	cbz	r1, 8013bf6 <rcl_timer_is_ready+0x4e>
 8013bb4:	6803      	ldr	r3, [r0, #0]
 8013bb6:	4604      	mov	r4, r0
 8013bb8:	4669      	mov	r1, sp
 8013bba:	6818      	ldr	r0, [r3, #0]
 8013bbc:	f7ff ff54 	bl	8013a68 <rcl_clock_get_now>
 8013bc0:	4605      	mov	r5, r0
 8013bc2:	b118      	cbz	r0, 8013bcc <rcl_timer_is_ready+0x24>
 8013bc4:	4628      	mov	r0, r5
 8013bc6:	b002      	add	sp, #8
 8013bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bcc:	6820      	ldr	r0, [r4, #0]
 8013bce:	2105      	movs	r1, #5
 8013bd0:	3028      	adds	r0, #40	; 0x28
 8013bd2:	f000 ffa5 	bl	8014b20 <__atomic_load_8>
 8013bd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013bda:	1ac6      	subs	r6, r0, r3
 8013bdc:	eb61 0702 	sbc.w	r7, r1, r2
 8013be0:	2e01      	cmp	r6, #1
 8013be2:	f177 0300 	sbcs.w	r3, r7, #0
 8013be6:	db0b      	blt.n	8013c00 <rcl_timer_is_ready+0x58>
 8013be8:	462b      	mov	r3, r5
 8013bea:	4628      	mov	r0, r5
 8013bec:	f888 3000 	strb.w	r3, [r8]
 8013bf0:	b002      	add	sp, #8
 8013bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bf6:	250b      	movs	r5, #11
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	b002      	add	sp, #8
 8013bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c00:	6823      	ldr	r3, [r4, #0]
 8013c02:	f3bf 8f5b 	dmb	ish
 8013c06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013c0a:	f3bf 8f5b 	dmb	ish
 8013c0e:	fab3 f383 	clz	r3, r3
 8013c12:	095b      	lsrs	r3, r3, #5
 8013c14:	e7e9      	b.n	8013bea <rcl_timer_is_ready+0x42>
 8013c16:	bf00      	nop

08013c18 <rcl_timer_get_time_until_next_call>:
 8013c18:	b570      	push	{r4, r5, r6, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	b1d8      	cbz	r0, 8013c56 <rcl_timer_get_time_until_next_call+0x3e>
 8013c1e:	460d      	mov	r5, r1
 8013c20:	b1c9      	cbz	r1, 8013c56 <rcl_timer_get_time_until_next_call+0x3e>
 8013c22:	6803      	ldr	r3, [r0, #0]
 8013c24:	4604      	mov	r4, r0
 8013c26:	4669      	mov	r1, sp
 8013c28:	6818      	ldr	r0, [r3, #0]
 8013c2a:	f7ff ff1d 	bl	8013a68 <rcl_clock_get_now>
 8013c2e:	4606      	mov	r6, r0
 8013c30:	b110      	cbz	r0, 8013c38 <rcl_timer_get_time_until_next_call+0x20>
 8013c32:	4630      	mov	r0, r6
 8013c34:	b002      	add	sp, #8
 8013c36:	bd70      	pop	{r4, r5, r6, pc}
 8013c38:	6820      	ldr	r0, [r4, #0]
 8013c3a:	2105      	movs	r1, #5
 8013c3c:	3028      	adds	r0, #40	; 0x28
 8013c3e:	f000 ff6f 	bl	8014b20 <__atomic_load_8>
 8013c42:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013c46:	1ac0      	subs	r0, r0, r3
 8013c48:	eb61 0102 	sbc.w	r1, r1, r2
 8013c4c:	e9c5 0100 	strd	r0, r1, [r5]
 8013c50:	4630      	mov	r0, r6
 8013c52:	b002      	add	sp, #8
 8013c54:	bd70      	pop	{r4, r5, r6, pc}
 8013c56:	260b      	movs	r6, #11
 8013c58:	4630      	mov	r0, r6
 8013c5a:	b002      	add	sp, #8
 8013c5c:	bd70      	pop	{r4, r5, r6, pc}
 8013c5e:	bf00      	nop

08013c60 <rcl_timer_is_canceled>:
 8013c60:	b168      	cbz	r0, 8013c7e <rcl_timer_is_canceled+0x1e>
 8013c62:	b161      	cbz	r1, 8013c7e <rcl_timer_is_canceled+0x1e>
 8013c64:	6803      	ldr	r3, [r0, #0]
 8013c66:	f3bf 8f5b 	dmb	ish
 8013c6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013c6e:	f3bf 8f5b 	dmb	ish
 8013c72:	3b00      	subs	r3, #0
 8013c74:	bf18      	it	ne
 8013c76:	2301      	movne	r3, #1
 8013c78:	700b      	strb	r3, [r1, #0]
 8013c7a:	2000      	movs	r0, #0
 8013c7c:	4770      	bx	lr
 8013c7e:	200b      	movs	r0, #11
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop

08013c84 <rcl_timer_get_guard_condition>:
 8013c84:	b130      	cbz	r0, 8013c94 <rcl_timer_get_guard_condition+0x10>
 8013c86:	6800      	ldr	r0, [r0, #0]
 8013c88:	b120      	cbz	r0, 8013c94 <rcl_timer_get_guard_condition+0x10>
 8013c8a:	68c3      	ldr	r3, [r0, #12]
 8013c8c:	b10b      	cbz	r3, 8013c92 <rcl_timer_get_guard_condition+0xe>
 8013c8e:	3008      	adds	r0, #8
 8013c90:	4770      	bx	lr
 8013c92:	4618      	mov	r0, r3
 8013c94:	4770      	bx	lr
 8013c96:	bf00      	nop

08013c98 <rcl_validate_enclave_name_with_size>:
 8013c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c9a:	b0c3      	sub	sp, #268	; 0x10c
 8013c9c:	b1d0      	cbz	r0, 8013cd4 <rcl_validate_enclave_name_with_size+0x3c>
 8013c9e:	4615      	mov	r5, r2
 8013ca0:	b1c2      	cbz	r2, 8013cd4 <rcl_validate_enclave_name_with_size+0x3c>
 8013ca2:	461f      	mov	r7, r3
 8013ca4:	466a      	mov	r2, sp
 8013ca6:	ab01      	add	r3, sp, #4
 8013ca8:	460e      	mov	r6, r1
 8013caa:	f001 f96f 	bl	8014f8c <rmw_validate_namespace_with_size>
 8013cae:	4604      	mov	r4, r0
 8013cb0:	b9e0      	cbnz	r0, 8013cec <rcl_validate_enclave_name_with_size+0x54>
 8013cb2:	9b00      	ldr	r3, [sp, #0]
 8013cb4:	b923      	cbnz	r3, 8013cc0 <rcl_validate_enclave_name_with_size+0x28>
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	602b      	str	r3, [r5, #0]
 8013cba:	4620      	mov	r0, r4
 8013cbc:	b043      	add	sp, #268	; 0x10c
 8013cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cc0:	2b07      	cmp	r3, #7
 8013cc2:	d00b      	beq.n	8013cdc <rcl_validate_enclave_name_with_size+0x44>
 8013cc4:	1e5a      	subs	r2, r3, #1
 8013cc6:	2a05      	cmp	r2, #5
 8013cc8:	d82e      	bhi.n	8013d28 <rcl_validate_enclave_name_with_size+0x90>
 8013cca:	e8df f002 	tbb	[pc, r2]
 8013cce:	211e      	.short	0x211e
 8013cd0:	152a2724 	.word	0x152a2724
 8013cd4:	240b      	movs	r4, #11
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	b043      	add	sp, #268	; 0x10c
 8013cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cdc:	2eff      	cmp	r6, #255	; 0xff
 8013cde:	d9ea      	bls.n	8013cb6 <rcl_validate_enclave_name_with_size+0x1e>
 8013ce0:	602b      	str	r3, [r5, #0]
 8013ce2:	2f00      	cmp	r7, #0
 8013ce4:	d0e9      	beq.n	8013cba <rcl_validate_enclave_name_with_size+0x22>
 8013ce6:	23fe      	movs	r3, #254	; 0xfe
 8013ce8:	603b      	str	r3, [r7, #0]
 8013cea:	e7e6      	b.n	8013cba <rcl_validate_enclave_name_with_size+0x22>
 8013cec:	f7fe fefc 	bl	8012ae8 <rcl_convert_rmw_ret_to_rcl_ret>
 8013cf0:	4604      	mov	r4, r0
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	b043      	add	sp, #268	; 0x10c
 8013cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cf8:	2306      	movs	r3, #6
 8013cfa:	602b      	str	r3, [r5, #0]
 8013cfc:	2f00      	cmp	r7, #0
 8013cfe:	d0dc      	beq.n	8013cba <rcl_validate_enclave_name_with_size+0x22>
 8013d00:	9b01      	ldr	r3, [sp, #4]
 8013d02:	603b      	str	r3, [r7, #0]
 8013d04:	4620      	mov	r0, r4
 8013d06:	b043      	add	sp, #268	; 0x10c
 8013d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	602b      	str	r3, [r5, #0]
 8013d0e:	e7f5      	b.n	8013cfc <rcl_validate_enclave_name_with_size+0x64>
 8013d10:	2302      	movs	r3, #2
 8013d12:	602b      	str	r3, [r5, #0]
 8013d14:	e7f2      	b.n	8013cfc <rcl_validate_enclave_name_with_size+0x64>
 8013d16:	2303      	movs	r3, #3
 8013d18:	602b      	str	r3, [r5, #0]
 8013d1a:	e7ef      	b.n	8013cfc <rcl_validate_enclave_name_with_size+0x64>
 8013d1c:	2304      	movs	r3, #4
 8013d1e:	602b      	str	r3, [r5, #0]
 8013d20:	e7ec      	b.n	8013cfc <rcl_validate_enclave_name_with_size+0x64>
 8013d22:	2305      	movs	r3, #5
 8013d24:	602b      	str	r3, [r5, #0]
 8013d26:	e7e9      	b.n	8013cfc <rcl_validate_enclave_name_with_size+0x64>
 8013d28:	4a03      	ldr	r2, [pc, #12]	; (8013d38 <rcl_validate_enclave_name_with_size+0xa0>)
 8013d2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013d2e:	a802      	add	r0, sp, #8
 8013d30:	f001 f8a6 	bl	8014e80 <rcutils_snprintf>
 8013d34:	2401      	movs	r4, #1
 8013d36:	e7c0      	b.n	8013cba <rcl_validate_enclave_name_with_size+0x22>
 8013d38:	08019c08 	.word	0x08019c08

08013d3c <rcl_validate_enclave_name>:
 8013d3c:	b168      	cbz	r0, 8013d5a <rcl_validate_enclave_name+0x1e>
 8013d3e:	b570      	push	{r4, r5, r6, lr}
 8013d40:	460d      	mov	r5, r1
 8013d42:	4616      	mov	r6, r2
 8013d44:	4604      	mov	r4, r0
 8013d46:	f7ec fa55 	bl	80001f4 <strlen>
 8013d4a:	4633      	mov	r3, r6
 8013d4c:	4601      	mov	r1, r0
 8013d4e:	462a      	mov	r2, r5
 8013d50:	4620      	mov	r0, r4
 8013d52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d56:	f7ff bf9f 	b.w	8013c98 <rcl_validate_enclave_name_with_size>
 8013d5a:	200b      	movs	r0, #11
 8013d5c:	4770      	bx	lr
 8013d5e:	bf00      	nop

08013d60 <rcl_validate_topic_name>:
 8013d60:	2800      	cmp	r0, #0
 8013d62:	f000 808b 	beq.w	8013e7c <rcl_validate_topic_name+0x11c>
 8013d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d6a:	460e      	mov	r6, r1
 8013d6c:	2900      	cmp	r1, #0
 8013d6e:	f000 808c 	beq.w	8013e8a <rcl_validate_topic_name+0x12a>
 8013d72:	4617      	mov	r7, r2
 8013d74:	4605      	mov	r5, r0
 8013d76:	f7ec fa3d 	bl	80001f4 <strlen>
 8013d7a:	b1b0      	cbz	r0, 8013daa <rcl_validate_topic_name+0x4a>
 8013d7c:	f895 9000 	ldrb.w	r9, [r5]
 8013d80:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8013f30 <rcl_validate_topic_name+0x1d0>
 8013d84:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8013d88:	f013 0304 	ands.w	r3, r3, #4
 8013d8c:	d178      	bne.n	8013e80 <rcl_validate_topic_name+0x120>
 8013d8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8013d92:	f815 2008 	ldrb.w	r2, [r5, r8]
 8013d96:	2a2f      	cmp	r2, #47	; 0x2f
 8013d98:	d10e      	bne.n	8013db8 <rcl_validate_topic_name+0x58>
 8013d9a:	2202      	movs	r2, #2
 8013d9c:	6032      	str	r2, [r6, #0]
 8013d9e:	b36f      	cbz	r7, 8013dfc <rcl_validate_topic_name+0x9c>
 8013da0:	f8c7 8000 	str.w	r8, [r7]
 8013da4:	4618      	mov	r0, r3
 8013da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013daa:	2301      	movs	r3, #1
 8013dac:	6033      	str	r3, [r6, #0]
 8013dae:	b32f      	cbz	r7, 8013dfc <rcl_validate_topic_name+0x9c>
 8013db0:	2000      	movs	r0, #0
 8013db2:	6038      	str	r0, [r7, #0]
 8013db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013db8:	461c      	mov	r4, r3
 8013dba:	4619      	mov	r1, r3
 8013dbc:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8013dc0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8013dc4:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013dc8:	f1be 0f09 	cmp.w	lr, #9
 8013dcc:	d946      	bls.n	8013e5c <rcl_validate_topic_name+0xfc>
 8013dce:	f022 0e20 	bic.w	lr, r2, #32
 8013dd2:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8013dd6:	f1be 0f19 	cmp.w	lr, #25
 8013dda:	d93f      	bls.n	8013e5c <rcl_validate_topic_name+0xfc>
 8013ddc:	2a5f      	cmp	r2, #95	; 0x5f
 8013dde:	d014      	beq.n	8013e0a <rcl_validate_topic_name+0xaa>
 8013de0:	2a2f      	cmp	r2, #47	; 0x2f
 8013de2:	d05b      	beq.n	8013e9c <rcl_validate_topic_name+0x13c>
 8013de4:	2a7e      	cmp	r2, #126	; 0x7e
 8013de6:	d052      	beq.n	8013e8e <rcl_validate_topic_name+0x12e>
 8013de8:	2a7b      	cmp	r2, #123	; 0x7b
 8013dea:	d00a      	beq.n	8013e02 <rcl_validate_topic_name+0xa2>
 8013dec:	2a7d      	cmp	r2, #125	; 0x7d
 8013dee:	d16f      	bne.n	8013ed0 <rcl_validate_topic_name+0x170>
 8013df0:	2c00      	cmp	r4, #0
 8013df2:	d15e      	bne.n	8013eb2 <rcl_validate_topic_name+0x152>
 8013df4:	2305      	movs	r3, #5
 8013df6:	6033      	str	r3, [r6, #0]
 8013df8:	b107      	cbz	r7, 8013dfc <rcl_validate_topic_name+0x9c>
 8013dfa:	6039      	str	r1, [r7, #0]
 8013dfc:	2000      	movs	r0, #0
 8013dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e02:	2c00      	cmp	r4, #0
 8013e04:	d14c      	bne.n	8013ea0 <rcl_validate_topic_name+0x140>
 8013e06:	460b      	mov	r3, r1
 8013e08:	2401      	movs	r4, #1
 8013e0a:	3101      	adds	r1, #1
 8013e0c:	4288      	cmp	r0, r1
 8013e0e:	d1d7      	bne.n	8013dc0 <rcl_validate_topic_name+0x60>
 8013e10:	2c00      	cmp	r4, #0
 8013e12:	d156      	bne.n	8013ec2 <rcl_validate_topic_name+0x162>
 8013e14:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8013e18:	4620      	mov	r0, r4
 8013e1a:	d061      	beq.n	8013ee0 <rcl_validate_topic_name+0x180>
 8013e1c:	f108 0e01 	add.w	lr, r8, #1
 8013e20:	e007      	b.n	8013e32 <rcl_validate_topic_name+0xd2>
 8013e22:	2801      	cmp	r0, #1
 8013e24:	d047      	beq.n	8013eb6 <rcl_validate_topic_name+0x156>
 8013e26:	461a      	mov	r2, r3
 8013e28:	4291      	cmp	r1, r2
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f105 0501 	add.w	r5, r5, #1
 8013e30:	d944      	bls.n	8013ebc <rcl_validate_topic_name+0x15c>
 8013e32:	4580      	cmp	r8, r0
 8013e34:	f100 0301 	add.w	r3, r0, #1
 8013e38:	d037      	beq.n	8013eaa <rcl_validate_topic_name+0x14a>
 8013e3a:	782a      	ldrb	r2, [r5, #0]
 8013e3c:	2a2f      	cmp	r2, #47	; 0x2f
 8013e3e:	d1f0      	bne.n	8013e22 <rcl_validate_topic_name+0xc2>
 8013e40:	786b      	ldrb	r3, [r5, #1]
 8013e42:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8013e46:	1c43      	adds	r3, r0, #1
 8013e48:	0760      	lsls	r0, r4, #29
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	d5ec      	bpl.n	8013e28 <rcl_validate_topic_name+0xc8>
 8013e4e:	2304      	movs	r3, #4
 8013e50:	6033      	str	r3, [r6, #0]
 8013e52:	2f00      	cmp	r7, #0
 8013e54:	d0d2      	beq.n	8013dfc <rcl_validate_topic_name+0x9c>
 8013e56:	603a      	str	r2, [r7, #0]
 8013e58:	2000      	movs	r0, #0
 8013e5a:	e7ab      	b.n	8013db4 <rcl_validate_topic_name+0x54>
 8013e5c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013e60:	0752      	lsls	r2, r2, #29
 8013e62:	d5d2      	bpl.n	8013e0a <rcl_validate_topic_name+0xaa>
 8013e64:	2c00      	cmp	r4, #0
 8013e66:	d0d0      	beq.n	8013e0a <rcl_validate_topic_name+0xaa>
 8013e68:	2900      	cmp	r1, #0
 8013e6a:	d0ce      	beq.n	8013e0a <rcl_validate_topic_name+0xaa>
 8013e6c:	1e4a      	subs	r2, r1, #1
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	d1cb      	bne.n	8013e0a <rcl_validate_topic_name+0xaa>
 8013e72:	2309      	movs	r3, #9
 8013e74:	6033      	str	r3, [r6, #0]
 8013e76:	2f00      	cmp	r7, #0
 8013e78:	d1bf      	bne.n	8013dfa <rcl_validate_topic_name+0x9a>
 8013e7a:	e7bf      	b.n	8013dfc <rcl_validate_topic_name+0x9c>
 8013e7c:	200b      	movs	r0, #11
 8013e7e:	4770      	bx	lr
 8013e80:	2304      	movs	r3, #4
 8013e82:	6033      	str	r3, [r6, #0]
 8013e84:	2f00      	cmp	r7, #0
 8013e86:	d193      	bne.n	8013db0 <rcl_validate_topic_name+0x50>
 8013e88:	e7b8      	b.n	8013dfc <rcl_validate_topic_name+0x9c>
 8013e8a:	200b      	movs	r0, #11
 8013e8c:	e792      	b.n	8013db4 <rcl_validate_topic_name+0x54>
 8013e8e:	2900      	cmp	r1, #0
 8013e90:	d0bb      	beq.n	8013e0a <rcl_validate_topic_name+0xaa>
 8013e92:	2306      	movs	r3, #6
 8013e94:	6033      	str	r3, [r6, #0]
 8013e96:	2f00      	cmp	r7, #0
 8013e98:	d1af      	bne.n	8013dfa <rcl_validate_topic_name+0x9a>
 8013e9a:	e7af      	b.n	8013dfc <rcl_validate_topic_name+0x9c>
 8013e9c:	2c00      	cmp	r4, #0
 8013e9e:	d0b4      	beq.n	8013e0a <rcl_validate_topic_name+0xaa>
 8013ea0:	2308      	movs	r3, #8
 8013ea2:	6033      	str	r3, [r6, #0]
 8013ea4:	2f00      	cmp	r7, #0
 8013ea6:	d1a8      	bne.n	8013dfa <rcl_validate_topic_name+0x9a>
 8013ea8:	e7a8      	b.n	8013dfc <rcl_validate_topic_name+0x9c>
 8013eaa:	4672      	mov	r2, lr
 8013eac:	f108 0301 	add.w	r3, r8, #1
 8013eb0:	e7ba      	b.n	8013e28 <rcl_validate_topic_name+0xc8>
 8013eb2:	2400      	movs	r4, #0
 8013eb4:	e7a9      	b.n	8013e0a <rcl_validate_topic_name+0xaa>
 8013eb6:	2202      	movs	r2, #2
 8013eb8:	4613      	mov	r3, r2
 8013eba:	e7b5      	b.n	8013e28 <rcl_validate_topic_name+0xc8>
 8013ebc:	2000      	movs	r0, #0
 8013ebe:	6030      	str	r0, [r6, #0]
 8013ec0:	e778      	b.n	8013db4 <rcl_validate_topic_name+0x54>
 8013ec2:	2205      	movs	r2, #5
 8013ec4:	6032      	str	r2, [r6, #0]
 8013ec6:	2f00      	cmp	r7, #0
 8013ec8:	d098      	beq.n	8013dfc <rcl_validate_topic_name+0x9c>
 8013eca:	603b      	str	r3, [r7, #0]
 8013ecc:	2000      	movs	r0, #0
 8013ece:	e771      	b.n	8013db4 <rcl_validate_topic_name+0x54>
 8013ed0:	2c00      	cmp	r4, #0
 8013ed2:	bf14      	ite	ne
 8013ed4:	2308      	movne	r3, #8
 8013ed6:	2303      	moveq	r3, #3
 8013ed8:	6033      	str	r3, [r6, #0]
 8013eda:	2f00      	cmp	r7, #0
 8013edc:	d18d      	bne.n	8013dfa <rcl_validate_topic_name+0x9a>
 8013ede:	e78d      	b.n	8013dfc <rcl_validate_topic_name+0x9c>
 8013ee0:	f108 0401 	add.w	r4, r8, #1
 8013ee4:	e007      	b.n	8013ef6 <rcl_validate_topic_name+0x196>
 8013ee6:	2801      	cmp	r0, #1
 8013ee8:	d019      	beq.n	8013f1e <rcl_validate_topic_name+0x1be>
 8013eea:	461a      	mov	r2, r3
 8013eec:	4291      	cmp	r1, r2
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f105 0501 	add.w	r5, r5, #1
 8013ef4:	d9e2      	bls.n	8013ebc <rcl_validate_topic_name+0x15c>
 8013ef6:	4580      	cmp	r8, r0
 8013ef8:	f100 0301 	add.w	r3, r0, #1
 8013efc:	d00b      	beq.n	8013f16 <rcl_validate_topic_name+0x1b6>
 8013efe:	782a      	ldrb	r2, [r5, #0]
 8013f00:	2a2f      	cmp	r2, #47	; 0x2f
 8013f02:	d1f0      	bne.n	8013ee6 <rcl_validate_topic_name+0x186>
 8013f04:	786b      	ldrb	r3, [r5, #1]
 8013f06:	f81c e003 	ldrb.w	lr, [ip, r3]
 8013f0a:	1c43      	adds	r3, r0, #1
 8013f0c:	f01e 0f04 	tst.w	lr, #4
 8013f10:	461a      	mov	r2, r3
 8013f12:	d0eb      	beq.n	8013eec <rcl_validate_topic_name+0x18c>
 8013f14:	e79b      	b.n	8013e4e <rcl_validate_topic_name+0xee>
 8013f16:	4622      	mov	r2, r4
 8013f18:	f108 0301 	add.w	r3, r8, #1
 8013f1c:	e7e6      	b.n	8013eec <rcl_validate_topic_name+0x18c>
 8013f1e:	2307      	movs	r3, #7
 8013f20:	6033      	str	r3, [r6, #0]
 8013f22:	2f00      	cmp	r7, #0
 8013f24:	f43f af6a 	beq.w	8013dfc <rcl_validate_topic_name+0x9c>
 8013f28:	6038      	str	r0, [r7, #0]
 8013f2a:	2000      	movs	r0, #0
 8013f2c:	e742      	b.n	8013db4 <rcl_validate_topic_name+0x54>
 8013f2e:	bf00      	nop
 8013f30:	0801a290 	.word	0x0801a290

08013f34 <rcl_get_zero_initialized_wait_set>:
 8013f34:	b470      	push	{r4, r5, r6}
 8013f36:	4d07      	ldr	r5, [pc, #28]	; (8013f54 <rcl_get_zero_initialized_wait_set+0x20>)
 8013f38:	4606      	mov	r6, r0
 8013f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f3c:	4634      	mov	r4, r6
 8013f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f48:	682b      	ldr	r3, [r5, #0]
 8013f4a:	6023      	str	r3, [r4, #0]
 8013f4c:	4630      	mov	r0, r6
 8013f4e:	bc70      	pop	{r4, r5, r6}
 8013f50:	4770      	bx	lr
 8013f52:	bf00      	nop
 8013f54:	08019c68 	.word	0x08019c68

08013f58 <rcl_wait_set_is_valid>:
 8013f58:	b118      	cbz	r0, 8013f62 <rcl_wait_set_is_valid+0xa>
 8013f5a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8013f5c:	3800      	subs	r0, #0
 8013f5e:	bf18      	it	ne
 8013f60:	2001      	movne	r0, #1
 8013f62:	4770      	bx	lr

08013f64 <rcl_wait_set_fini>:
 8013f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f68:	b082      	sub	sp, #8
 8013f6a:	2800      	cmp	r0, #0
 8013f6c:	f000 8095 	beq.w	801409a <rcl_wait_set_fini+0x136>
 8013f70:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8013f72:	4604      	mov	r4, r0
 8013f74:	2e00      	cmp	r6, #0
 8013f76:	f000 808c 	beq.w	8014092 <rcl_wait_set_fini+0x12e>
 8013f7a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8013f7c:	f002 f806 	bl	8015f8c <rmw_destroy_wait_set>
 8013f80:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013f82:	1e06      	subs	r6, r0, #0
 8013f84:	bf18      	it	ne
 8013f86:	f44f 7661 	movne.w	r6, #900	; 0x384
 8013f8a:	2d00      	cmp	r5, #0
 8013f8c:	f000 8081 	beq.w	8014092 <rcl_wait_set_fini+0x12e>
 8013f90:	6820      	ldr	r0, [r4, #0]
 8013f92:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8013f96:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013f98:	2700      	movs	r7, #0
 8013f9a:	6067      	str	r7, [r4, #4]
 8013f9c:	602f      	str	r7, [r5, #0]
 8013f9e:	b120      	cbz	r0, 8013faa <rcl_wait_set_fini+0x46>
 8013fa0:	9101      	str	r1, [sp, #4]
 8013fa2:	47c0      	blx	r8
 8013fa4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013fa6:	9901      	ldr	r1, [sp, #4]
 8013fa8:	6027      	str	r7, [r4, #0]
 8013faa:	68a8      	ldr	r0, [r5, #8]
 8013fac:	b120      	cbz	r0, 8013fb8 <rcl_wait_set_fini+0x54>
 8013fae:	47c0      	blx	r8
 8013fb0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013fb8:	68a0      	ldr	r0, [r4, #8]
 8013fba:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013fbc:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013fbe:	f04f 0800 	mov.w	r8, #0
 8013fc2:	f8c4 800c 	str.w	r8, [r4, #12]
 8013fc6:	f8c5 800c 	str.w	r8, [r5, #12]
 8013fca:	b128      	cbz	r0, 8013fd8 <rcl_wait_set_fini+0x74>
 8013fcc:	47b8      	blx	r7
 8013fce:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013fd0:	f8c4 8008 	str.w	r8, [r4, #8]
 8013fd4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013fd6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013fd8:	6968      	ldr	r0, [r5, #20]
 8013fda:	f04f 0800 	mov.w	r8, #0
 8013fde:	f8c5 8010 	str.w	r8, [r5, #16]
 8013fe2:	b128      	cbz	r0, 8013ff0 <rcl_wait_set_fini+0x8c>
 8013fe4:	47b8      	blx	r7
 8013fe6:	f8c5 8014 	str.w	r8, [r5, #20]
 8013fea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013fec:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013fee:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013ff0:	6920      	ldr	r0, [r4, #16]
 8013ff2:	f04f 0800 	mov.w	r8, #0
 8013ff6:	f8c4 8014 	str.w	r8, [r4, #20]
 8013ffa:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8013ffe:	b128      	cbz	r0, 801400c <rcl_wait_set_fini+0xa8>
 8014000:	47b8      	blx	r7
 8014002:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014004:	f8c4 8010 	str.w	r8, [r4, #16]
 8014008:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801400a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801400c:	69a0      	ldr	r0, [r4, #24]
 801400e:	f04f 0800 	mov.w	r8, #0
 8014012:	f8c4 801c 	str.w	r8, [r4, #28]
 8014016:	f8c5 8018 	str.w	r8, [r5, #24]
 801401a:	b128      	cbz	r0, 8014028 <rcl_wait_set_fini+0xc4>
 801401c:	9101      	str	r1, [sp, #4]
 801401e:	47b8      	blx	r7
 8014020:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014022:	9901      	ldr	r1, [sp, #4]
 8014024:	f8c4 8018 	str.w	r8, [r4, #24]
 8014028:	6a28      	ldr	r0, [r5, #32]
 801402a:	b120      	cbz	r0, 8014036 <rcl_wait_set_fini+0xd2>
 801402c:	47b8      	blx	r7
 801402e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014030:	2300      	movs	r3, #0
 8014032:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014036:	6a20      	ldr	r0, [r4, #32]
 8014038:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801403c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801403e:	2700      	movs	r7, #0
 8014040:	6267      	str	r7, [r4, #36]	; 0x24
 8014042:	626f      	str	r7, [r5, #36]	; 0x24
 8014044:	b120      	cbz	r0, 8014050 <rcl_wait_set_fini+0xec>
 8014046:	9101      	str	r1, [sp, #4]
 8014048:	47c0      	blx	r8
 801404a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801404c:	9901      	ldr	r1, [sp, #4]
 801404e:	6227      	str	r7, [r4, #32]
 8014050:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014052:	b120      	cbz	r0, 801405e <rcl_wait_set_fini+0xfa>
 8014054:	47c0      	blx	r8
 8014056:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014058:	2300      	movs	r3, #0
 801405a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801405e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014060:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8014064:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014066:	2700      	movs	r7, #0
 8014068:	62e7      	str	r7, [r4, #44]	; 0x2c
 801406a:	632f      	str	r7, [r5, #48]	; 0x30
 801406c:	b120      	cbz	r0, 8014078 <rcl_wait_set_fini+0x114>
 801406e:	9101      	str	r1, [sp, #4]
 8014070:	47c0      	blx	r8
 8014072:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014074:	9901      	ldr	r1, [sp, #4]
 8014076:	62a7      	str	r7, [r4, #40]	; 0x28
 8014078:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801407a:	b120      	cbz	r0, 8014086 <rcl_wait_set_fini+0x122>
 801407c:	47c0      	blx	r8
 801407e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014080:	2300      	movs	r3, #0
 8014082:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8014086:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8014088:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801408a:	4628      	mov	r0, r5
 801408c:	4798      	blx	r3
 801408e:	2300      	movs	r3, #0
 8014090:	6323      	str	r3, [r4, #48]	; 0x30
 8014092:	4630      	mov	r0, r6
 8014094:	b002      	add	sp, #8
 8014096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801409a:	260b      	movs	r6, #11
 801409c:	4630      	mov	r0, r6
 801409e:	b002      	add	sp, #8
 80140a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080140a4 <rcl_wait_set_add_subscription>:
 80140a4:	b320      	cbz	r0, 80140f0 <rcl_wait_set_add_subscription+0x4c>
 80140a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80140a8:	b570      	push	{r4, r5, r6, lr}
 80140aa:	4604      	mov	r4, r0
 80140ac:	b1d3      	cbz	r3, 80140e4 <rcl_wait_set_add_subscription+0x40>
 80140ae:	b319      	cbz	r1, 80140f8 <rcl_wait_set_add_subscription+0x54>
 80140b0:	681d      	ldr	r5, [r3, #0]
 80140b2:	6860      	ldr	r0, [r4, #4]
 80140b4:	4285      	cmp	r5, r0
 80140b6:	d218      	bcs.n	80140ea <rcl_wait_set_add_subscription+0x46>
 80140b8:	6820      	ldr	r0, [r4, #0]
 80140ba:	1c6e      	adds	r6, r5, #1
 80140bc:	601e      	str	r6, [r3, #0]
 80140be:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80140c2:	b102      	cbz	r2, 80140c6 <rcl_wait_set_add_subscription+0x22>
 80140c4:	6015      	str	r5, [r2, #0]
 80140c6:	4608      	mov	r0, r1
 80140c8:	f7f8 ff60 	bl	800cf8c <rcl_subscription_get_rmw_handle>
 80140cc:	b190      	cbz	r0, 80140f4 <rcl_wait_set_add_subscription+0x50>
 80140ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80140d0:	6842      	ldr	r2, [r0, #4]
 80140d2:	689b      	ldr	r3, [r3, #8]
 80140d4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80140d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80140da:	6853      	ldr	r3, [r2, #4]
 80140dc:	3301      	adds	r3, #1
 80140de:	6053      	str	r3, [r2, #4]
 80140e0:	2000      	movs	r0, #0
 80140e2:	bd70      	pop	{r4, r5, r6, pc}
 80140e4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80140e8:	bd70      	pop	{r4, r5, r6, pc}
 80140ea:	f240 3086 	movw	r0, #902	; 0x386
 80140ee:	bd70      	pop	{r4, r5, r6, pc}
 80140f0:	200b      	movs	r0, #11
 80140f2:	4770      	bx	lr
 80140f4:	2001      	movs	r0, #1
 80140f6:	bd70      	pop	{r4, r5, r6, pc}
 80140f8:	200b      	movs	r0, #11
 80140fa:	bd70      	pop	{r4, r5, r6, pc}

080140fc <rcl_wait_set_clear>:
 80140fc:	2800      	cmp	r0, #0
 80140fe:	d073      	beq.n	80141e8 <rcl_wait_set_clear+0xec>
 8014100:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014102:	b510      	push	{r4, lr}
 8014104:	4604      	mov	r4, r0
 8014106:	2b00      	cmp	r3, #0
 8014108:	d070      	beq.n	80141ec <rcl_wait_set_clear+0xf0>
 801410a:	6800      	ldr	r0, [r0, #0]
 801410c:	b138      	cbz	r0, 801411e <rcl_wait_set_clear+0x22>
 801410e:	6862      	ldr	r2, [r4, #4]
 8014110:	2100      	movs	r1, #0
 8014112:	0092      	lsls	r2, r2, #2
 8014114:	f004 fa88 	bl	8018628 <memset>
 8014118:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801411a:	2200      	movs	r2, #0
 801411c:	601a      	str	r2, [r3, #0]
 801411e:	68a0      	ldr	r0, [r4, #8]
 8014120:	b138      	cbz	r0, 8014132 <rcl_wait_set_clear+0x36>
 8014122:	68e2      	ldr	r2, [r4, #12]
 8014124:	2100      	movs	r1, #0
 8014126:	0092      	lsls	r2, r2, #2
 8014128:	f004 fa7e 	bl	8018628 <memset>
 801412c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801412e:	2200      	movs	r2, #0
 8014130:	60da      	str	r2, [r3, #12]
 8014132:	69a0      	ldr	r0, [r4, #24]
 8014134:	b138      	cbz	r0, 8014146 <rcl_wait_set_clear+0x4a>
 8014136:	69e2      	ldr	r2, [r4, #28]
 8014138:	2100      	movs	r1, #0
 801413a:	0092      	lsls	r2, r2, #2
 801413c:	f004 fa74 	bl	8018628 <memset>
 8014140:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014142:	2200      	movs	r2, #0
 8014144:	619a      	str	r2, [r3, #24]
 8014146:	6a20      	ldr	r0, [r4, #32]
 8014148:	b138      	cbz	r0, 801415a <rcl_wait_set_clear+0x5e>
 801414a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801414c:	2100      	movs	r1, #0
 801414e:	0092      	lsls	r2, r2, #2
 8014150:	f004 fa6a 	bl	8018628 <memset>
 8014154:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014156:	2200      	movs	r2, #0
 8014158:	625a      	str	r2, [r3, #36]	; 0x24
 801415a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801415c:	b138      	cbz	r0, 801416e <rcl_wait_set_clear+0x72>
 801415e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014160:	2100      	movs	r1, #0
 8014162:	0092      	lsls	r2, r2, #2
 8014164:	f004 fa60 	bl	8018628 <memset>
 8014168:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801416a:	2200      	movs	r2, #0
 801416c:	631a      	str	r2, [r3, #48]	; 0x30
 801416e:	6920      	ldr	r0, [r4, #16]
 8014170:	b138      	cbz	r0, 8014182 <rcl_wait_set_clear+0x86>
 8014172:	6962      	ldr	r2, [r4, #20]
 8014174:	2100      	movs	r1, #0
 8014176:	0092      	lsls	r2, r2, #2
 8014178:	f004 fa56 	bl	8018628 <memset>
 801417c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801417e:	2200      	movs	r2, #0
 8014180:	641a      	str	r2, [r3, #64]	; 0x40
 8014182:	6898      	ldr	r0, [r3, #8]
 8014184:	b138      	cbz	r0, 8014196 <rcl_wait_set_clear+0x9a>
 8014186:	685a      	ldr	r2, [r3, #4]
 8014188:	2100      	movs	r1, #0
 801418a:	0092      	lsls	r2, r2, #2
 801418c:	f004 fa4c 	bl	8018628 <memset>
 8014190:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014192:	2200      	movs	r2, #0
 8014194:	605a      	str	r2, [r3, #4]
 8014196:	6958      	ldr	r0, [r3, #20]
 8014198:	b138      	cbz	r0, 80141aa <rcl_wait_set_clear+0xae>
 801419a:	691a      	ldr	r2, [r3, #16]
 801419c:	2100      	movs	r1, #0
 801419e:	0092      	lsls	r2, r2, #2
 80141a0:	f004 fa42 	bl	8018628 <memset>
 80141a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141a6:	2200      	movs	r2, #0
 80141a8:	611a      	str	r2, [r3, #16]
 80141aa:	6a18      	ldr	r0, [r3, #32]
 80141ac:	b138      	cbz	r0, 80141be <rcl_wait_set_clear+0xc2>
 80141ae:	69da      	ldr	r2, [r3, #28]
 80141b0:	2100      	movs	r1, #0
 80141b2:	0092      	lsls	r2, r2, #2
 80141b4:	f004 fa38 	bl	8018628 <memset>
 80141b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141ba:	2200      	movs	r2, #0
 80141bc:	61da      	str	r2, [r3, #28]
 80141be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80141c0:	b138      	cbz	r0, 80141d2 <rcl_wait_set_clear+0xd6>
 80141c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80141c4:	2100      	movs	r1, #0
 80141c6:	0092      	lsls	r2, r2, #2
 80141c8:	f004 fa2e 	bl	8018628 <memset>
 80141cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141ce:	2200      	movs	r2, #0
 80141d0:	629a      	str	r2, [r3, #40]	; 0x28
 80141d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80141d4:	b138      	cbz	r0, 80141e6 <rcl_wait_set_clear+0xea>
 80141d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80141d8:	2100      	movs	r1, #0
 80141da:	0092      	lsls	r2, r2, #2
 80141dc:	f004 fa24 	bl	8018628 <memset>
 80141e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141e2:	2000      	movs	r0, #0
 80141e4:	6358      	str	r0, [r3, #52]	; 0x34
 80141e6:	bd10      	pop	{r4, pc}
 80141e8:	200b      	movs	r0, #11
 80141ea:	4770      	bx	lr
 80141ec:	f44f 7061 	mov.w	r0, #900	; 0x384
 80141f0:	bd10      	pop	{r4, pc}
 80141f2:	bf00      	nop

080141f4 <rcl_wait_set_resize>:
 80141f4:	2800      	cmp	r0, #0
 80141f6:	f000 81a6 	beq.w	8014546 <rcl_wait_set_resize+0x352>
 80141fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141fe:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8014202:	b083      	sub	sp, #12
 8014204:	4604      	mov	r4, r0
 8014206:	f1ba 0f00 	cmp.w	sl, #0
 801420a:	f000 819e 	beq.w	801454a <rcl_wait_set_resize+0x356>
 801420e:	461e      	mov	r6, r3
 8014210:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8014214:	f04f 0800 	mov.w	r8, #0
 8014218:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 801421c:	9300      	str	r3, [sp, #0]
 801421e:	f8c0 8004 	str.w	r8, [r0, #4]
 8014222:	460f      	mov	r7, r1
 8014224:	4615      	mov	r5, r2
 8014226:	f8ca 8000 	str.w	r8, [sl]
 801422a:	2900      	cmp	r1, #0
 801422c:	f000 80c9 	beq.w	80143c2 <rcl_wait_set_resize+0x1ce>
 8014230:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8014234:	6800      	ldr	r0, [r0, #0]
 8014236:	4651      	mov	r1, sl
 8014238:	464a      	mov	r2, r9
 801423a:	4798      	blx	r3
 801423c:	6020      	str	r0, [r4, #0]
 801423e:	2800      	cmp	r0, #0
 8014240:	f000 80d8 	beq.w	80143f4 <rcl_wait_set_resize+0x200>
 8014244:	4652      	mov	r2, sl
 8014246:	4641      	mov	r1, r8
 8014248:	f004 f9ee 	bl	8018628 <memset>
 801424c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801424e:	6067      	str	r7, [r4, #4]
 8014250:	6898      	ldr	r0, [r3, #8]
 8014252:	f8c3 8004 	str.w	r8, [r3, #4]
 8014256:	9301      	str	r3, [sp, #4]
 8014258:	464a      	mov	r2, r9
 801425a:	9b00      	ldr	r3, [sp, #0]
 801425c:	4651      	mov	r1, sl
 801425e:	4798      	blx	r3
 8014260:	9b01      	ldr	r3, [sp, #4]
 8014262:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014264:	6098      	str	r0, [r3, #8]
 8014266:	6897      	ldr	r7, [r2, #8]
 8014268:	2f00      	cmp	r7, #0
 801426a:	f000 80be 	beq.w	80143ea <rcl_wait_set_resize+0x1f6>
 801426e:	4652      	mov	r2, sl
 8014270:	4641      	mov	r1, r8
 8014272:	4638      	mov	r0, r7
 8014274:	f004 f9d8 	bl	8018628 <memset>
 8014278:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801427c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014280:	2700      	movs	r7, #0
 8014282:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8014286:	60e7      	str	r7, [r4, #12]
 8014288:	f8ca 700c 	str.w	r7, [sl, #12]
 801428c:	2d00      	cmp	r5, #0
 801428e:	f040 80b5 	bne.w	80143fc <rcl_wait_set_resize+0x208>
 8014292:	68a0      	ldr	r0, [r4, #8]
 8014294:	b130      	cbz	r0, 80142a4 <rcl_wait_set_resize+0xb0>
 8014296:	4641      	mov	r1, r8
 8014298:	4790      	blx	r2
 801429a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801429e:	60a5      	str	r5, [r4, #8]
 80142a0:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80142a4:	2700      	movs	r7, #0
 80142a6:	19ad      	adds	r5, r5, r6
 80142a8:	f8ca 7010 	str.w	r7, [sl, #16]
 80142ac:	f040 80be 	bne.w	801442c <rcl_wait_set_resize+0x238>
 80142b0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80142b4:	b148      	cbz	r0, 80142ca <rcl_wait_set_resize+0xd6>
 80142b6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80142ba:	4641      	mov	r1, r8
 80142bc:	4798      	blx	r3
 80142be:	f8ca 5014 	str.w	r5, [sl, #20]
 80142c2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80142c6:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80142ca:	2500      	movs	r5, #0
 80142cc:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80142d0:	6165      	str	r5, [r4, #20]
 80142d2:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 80142d6:	2e00      	cmp	r6, #0
 80142d8:	f040 80bf 	bne.w	801445a <rcl_wait_set_resize+0x266>
 80142dc:	6920      	ldr	r0, [r4, #16]
 80142de:	b140      	cbz	r0, 80142f2 <rcl_wait_set_resize+0xfe>
 80142e0:	4641      	mov	r1, r8
 80142e2:	47c8      	blx	r9
 80142e4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80142e8:	6126      	str	r6, [r4, #16]
 80142ea:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80142ee:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80142f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142f4:	2500      	movs	r5, #0
 80142f6:	61e5      	str	r5, [r4, #28]
 80142f8:	f8ca 5018 	str.w	r5, [sl, #24]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	f040 80c1 	bne.w	8014484 <rcl_wait_set_resize+0x290>
 8014302:	69a0      	ldr	r0, [r4, #24]
 8014304:	b128      	cbz	r0, 8014312 <rcl_wait_set_resize+0x11e>
 8014306:	4641      	mov	r1, r8
 8014308:	47c8      	blx	r9
 801430a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801430c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014310:	61a3      	str	r3, [r4, #24]
 8014312:	f8da 0020 	ldr.w	r0, [sl, #32]
 8014316:	b130      	cbz	r0, 8014326 <rcl_wait_set_resize+0x132>
 8014318:	4641      	mov	r1, r8
 801431a:	47c8      	blx	r9
 801431c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014320:	2300      	movs	r3, #0
 8014322:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8014326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014328:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 801432c:	2600      	movs	r6, #0
 801432e:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 8014332:	6266      	str	r6, [r4, #36]	; 0x24
 8014334:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8014338:	2b00      	cmp	r3, #0
 801433a:	f000 80c8 	beq.w	80144ce <rcl_wait_set_resize+0x2da>
 801433e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014342:	6a20      	ldr	r0, [r4, #32]
 8014344:	4651      	mov	r1, sl
 8014346:	463a      	mov	r2, r7
 8014348:	47c8      	blx	r9
 801434a:	6220      	str	r0, [r4, #32]
 801434c:	2800      	cmp	r0, #0
 801434e:	d051      	beq.n	80143f4 <rcl_wait_set_resize+0x200>
 8014350:	4652      	mov	r2, sl
 8014352:	4631      	mov	r1, r6
 8014354:	f004 f968 	bl	8018628 <memset>
 8014358:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801435a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801435c:	6263      	str	r3, [r4, #36]	; 0x24
 801435e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014360:	62ae      	str	r6, [r5, #40]	; 0x28
 8014362:	463a      	mov	r2, r7
 8014364:	4651      	mov	r1, sl
 8014366:	47c8      	blx	r9
 8014368:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801436a:	62e8      	str	r0, [r5, #44]	; 0x2c
 801436c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801436e:	2d00      	cmp	r5, #0
 8014370:	f000 8105 	beq.w	801457e <rcl_wait_set_resize+0x38a>
 8014374:	4652      	mov	r2, sl
 8014376:	4631      	mov	r1, r6
 8014378:	4628      	mov	r0, r5
 801437a:	f004 f955 	bl	8018628 <memset>
 801437e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014384:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8014388:	2500      	movs	r5, #0
 801438a:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 801438e:	62e5      	str	r5, [r4, #44]	; 0x2c
 8014390:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8014394:	2b00      	cmp	r3, #0
 8014396:	f040 80af 	bne.w	80144f8 <rcl_wait_set_resize+0x304>
 801439a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801439c:	b128      	cbz	r0, 80143aa <rcl_wait_set_resize+0x1b6>
 801439e:	4631      	mov	r1, r6
 80143a0:	47b8      	blx	r7
 80143a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80143a4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80143a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80143aa:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80143ae:	b310      	cbz	r0, 80143f6 <rcl_wait_set_resize+0x202>
 80143b0:	4631      	mov	r1, r6
 80143b2:	47b8      	blx	r7
 80143b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80143b6:	2000      	movs	r0, #0
 80143b8:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 80143bc:	b003      	add	sp, #12
 80143be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143c2:	6800      	ldr	r0, [r0, #0]
 80143c4:	b120      	cbz	r0, 80143d0 <rcl_wait_set_resize+0x1dc>
 80143c6:	4649      	mov	r1, r9
 80143c8:	47d8      	blx	fp
 80143ca:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80143ce:	6027      	str	r7, [r4, #0]
 80143d0:	f8da 0008 	ldr.w	r0, [sl, #8]
 80143d4:	2800      	cmp	r0, #0
 80143d6:	f43f af51 	beq.w	801427c <rcl_wait_set_resize+0x88>
 80143da:	4649      	mov	r1, r9
 80143dc:	47d8      	blx	fp
 80143de:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80143e2:	2300      	movs	r3, #0
 80143e4:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80143e8:	e748      	b.n	801427c <rcl_wait_set_resize+0x88>
 80143ea:	6820      	ldr	r0, [r4, #0]
 80143ec:	4649      	mov	r1, r9
 80143ee:	47d8      	blx	fp
 80143f0:	e9c4 7700 	strd	r7, r7, [r4]
 80143f4:	200a      	movs	r0, #10
 80143f6:	b003      	add	sp, #12
 80143f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143fc:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8014400:	68a0      	ldr	r0, [r4, #8]
 8014402:	4642      	mov	r2, r8
 8014404:	4649      	mov	r1, r9
 8014406:	4798      	blx	r3
 8014408:	60a0      	str	r0, [r4, #8]
 801440a:	2800      	cmp	r0, #0
 801440c:	d0f2      	beq.n	80143f4 <rcl_wait_set_resize+0x200>
 801440e:	4639      	mov	r1, r7
 8014410:	464a      	mov	r2, r9
 8014412:	f004 f909 	bl	8018628 <memset>
 8014416:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801441a:	60e5      	str	r5, [r4, #12]
 801441c:	2700      	movs	r7, #0
 801441e:	19ad      	adds	r5, r5, r6
 8014420:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014424:	f8ca 7010 	str.w	r7, [sl, #16]
 8014428:	f43f af42 	beq.w	80142b0 <rcl_wait_set_resize+0xbc>
 801442c:	00ad      	lsls	r5, r5, #2
 801442e:	4642      	mov	r2, r8
 8014430:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8014434:	f8da 0014 	ldr.w	r0, [sl, #20]
 8014438:	4629      	mov	r1, r5
 801443a:	4798      	blx	r3
 801443c:	4680      	mov	r8, r0
 801443e:	f8ca 0014 	str.w	r0, [sl, #20]
 8014442:	2800      	cmp	r0, #0
 8014444:	f000 8084 	beq.w	8014550 <rcl_wait_set_resize+0x35c>
 8014448:	462a      	mov	r2, r5
 801444a:	4639      	mov	r1, r7
 801444c:	f004 f8ec 	bl	8018628 <memset>
 8014450:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014454:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014458:	e737      	b.n	80142ca <rcl_wait_set_resize+0xd6>
 801445a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801445e:	6920      	ldr	r0, [r4, #16]
 8014460:	4642      	mov	r2, r8
 8014462:	4649      	mov	r1, r9
 8014464:	47b8      	blx	r7
 8014466:	6120      	str	r0, [r4, #16]
 8014468:	2800      	cmp	r0, #0
 801446a:	d0c3      	beq.n	80143f4 <rcl_wait_set_resize+0x200>
 801446c:	464a      	mov	r2, r9
 801446e:	4629      	mov	r1, r5
 8014470:	f004 f8da 	bl	8018628 <memset>
 8014474:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014478:	6166      	str	r6, [r4, #20]
 801447a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801447e:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014482:	e736      	b.n	80142f2 <rcl_wait_set_resize+0xfe>
 8014484:	009e      	lsls	r6, r3, #2
 8014486:	69a0      	ldr	r0, [r4, #24]
 8014488:	4631      	mov	r1, r6
 801448a:	4642      	mov	r2, r8
 801448c:	47b8      	blx	r7
 801448e:	61a0      	str	r0, [r4, #24]
 8014490:	2800      	cmp	r0, #0
 8014492:	d0af      	beq.n	80143f4 <rcl_wait_set_resize+0x200>
 8014494:	4632      	mov	r2, r6
 8014496:	4629      	mov	r1, r5
 8014498:	f004 f8c6 	bl	8018628 <memset>
 801449c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144a2:	61e3      	str	r3, [r4, #28]
 80144a4:	f8da 0020 	ldr.w	r0, [sl, #32]
 80144a8:	f8ca 501c 	str.w	r5, [sl, #28]
 80144ac:	4642      	mov	r2, r8
 80144ae:	4631      	mov	r1, r6
 80144b0:	47b8      	blx	r7
 80144b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80144b4:	f8ca 0020 	str.w	r0, [sl, #32]
 80144b8:	6a1f      	ldr	r7, [r3, #32]
 80144ba:	2f00      	cmp	r7, #0
 80144bc:	d058      	beq.n	8014570 <rcl_wait_set_resize+0x37c>
 80144be:	4632      	mov	r2, r6
 80144c0:	4629      	mov	r1, r5
 80144c2:	4638      	mov	r0, r7
 80144c4:	f004 f8b0 	bl	8018628 <memset>
 80144c8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144cc:	e72b      	b.n	8014326 <rcl_wait_set_resize+0x132>
 80144ce:	6a20      	ldr	r0, [r4, #32]
 80144d0:	b128      	cbz	r0, 80144de <rcl_wait_set_resize+0x2ea>
 80144d2:	4639      	mov	r1, r7
 80144d4:	47c0      	blx	r8
 80144d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144d8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144dc:	6223      	str	r3, [r4, #32]
 80144de:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 80144e2:	2800      	cmp	r0, #0
 80144e4:	f43f af4d 	beq.w	8014382 <rcl_wait_set_resize+0x18e>
 80144e8:	4639      	mov	r1, r7
 80144ea:	47c0      	blx	r8
 80144ec:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144f0:	2300      	movs	r3, #0
 80144f2:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 80144f6:	e744      	b.n	8014382 <rcl_wait_set_resize+0x18e>
 80144f8:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80144fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80144fe:	4641      	mov	r1, r8
 8014500:	4632      	mov	r2, r6
 8014502:	47c8      	blx	r9
 8014504:	62a0      	str	r0, [r4, #40]	; 0x28
 8014506:	2800      	cmp	r0, #0
 8014508:	f43f af74 	beq.w	80143f4 <rcl_wait_set_resize+0x200>
 801450c:	4642      	mov	r2, r8
 801450e:	4629      	mov	r1, r5
 8014510:	f004 f88a 	bl	8018628 <memset>
 8014514:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801451a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801451c:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8014520:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8014524:	4632      	mov	r2, r6
 8014526:	4641      	mov	r1, r8
 8014528:	47c8      	blx	r9
 801452a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801452c:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8014530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014532:	b35b      	cbz	r3, 801458c <rcl_wait_set_resize+0x398>
 8014534:	4642      	mov	r2, r8
 8014536:	4618      	mov	r0, r3
 8014538:	4629      	mov	r1, r5
 801453a:	f004 f875 	bl	8018628 <memset>
 801453e:	4628      	mov	r0, r5
 8014540:	b003      	add	sp, #12
 8014542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014546:	200b      	movs	r0, #11
 8014548:	4770      	bx	lr
 801454a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801454e:	e752      	b.n	80143f6 <rcl_wait_set_resize+0x202>
 8014550:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014552:	68a0      	ldr	r0, [r4, #8]
 8014554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014556:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8014558:	4790      	blx	r2
 801455a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801455c:	6920      	ldr	r0, [r4, #16]
 801455e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014560:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8014562:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8014566:	4790      	blx	r2
 8014568:	e9c4 8804 	strd	r8, r8, [r4, #16]
 801456c:	200a      	movs	r0, #10
 801456e:	e742      	b.n	80143f6 <rcl_wait_set_resize+0x202>
 8014570:	69a0      	ldr	r0, [r4, #24]
 8014572:	4641      	mov	r1, r8
 8014574:	47c8      	blx	r9
 8014576:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801457a:	200a      	movs	r0, #10
 801457c:	e73b      	b.n	80143f6 <rcl_wait_set_resize+0x202>
 801457e:	6a20      	ldr	r0, [r4, #32]
 8014580:	4639      	mov	r1, r7
 8014582:	47c0      	blx	r8
 8014584:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8014588:	200a      	movs	r0, #10
 801458a:	e734      	b.n	80143f6 <rcl_wait_set_resize+0x202>
 801458c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801458e:	9300      	str	r3, [sp, #0]
 8014590:	4631      	mov	r1, r6
 8014592:	47b8      	blx	r7
 8014594:	9b00      	ldr	r3, [sp, #0]
 8014596:	200a      	movs	r0, #10
 8014598:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801459c:	e72b      	b.n	80143f6 <rcl_wait_set_resize+0x202>
 801459e:	bf00      	nop

080145a0 <rcl_wait_set_init>:
 80145a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145a4:	b084      	sub	sp, #16
 80145a6:	4604      	mov	r4, r0
 80145a8:	a810      	add	r0, sp, #64	; 0x40
 80145aa:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80145ae:	460f      	mov	r7, r1
 80145b0:	4690      	mov	r8, r2
 80145b2:	4699      	mov	r9, r3
 80145b4:	f7f9 f96a 	bl	800d88c <rcutils_allocator_is_valid>
 80145b8:	2800      	cmp	r0, #0
 80145ba:	d06b      	beq.n	8014694 <rcl_wait_set_init+0xf4>
 80145bc:	2c00      	cmp	r4, #0
 80145be:	d069      	beq.n	8014694 <rcl_wait_set_init+0xf4>
 80145c0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80145c2:	b125      	cbz	r5, 80145ce <rcl_wait_set_init+0x2e>
 80145c4:	2564      	movs	r5, #100	; 0x64
 80145c6:	4628      	mov	r0, r5
 80145c8:	b004      	add	sp, #16
 80145ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145ce:	f1ba 0f00 	cmp.w	sl, #0
 80145d2:	d05f      	beq.n	8014694 <rcl_wait_set_init+0xf4>
 80145d4:	4650      	mov	r0, sl
 80145d6:	f7fe faa5 	bl	8012b24 <rcl_context_is_valid>
 80145da:	2800      	cmp	r0, #0
 80145dc:	d067      	beq.n	80146ae <rcl_wait_set_init+0x10e>
 80145de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145e0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80145e2:	205c      	movs	r0, #92	; 0x5c
 80145e4:	4798      	blx	r3
 80145e6:	6320      	str	r0, [r4, #48]	; 0x30
 80145e8:	2800      	cmp	r0, #0
 80145ea:	d062      	beq.n	80146b2 <rcl_wait_set_init+0x112>
 80145ec:	225c      	movs	r2, #92	; 0x5c
 80145ee:	4629      	mov	r1, r5
 80145f0:	f004 f81a 	bl	8018628 <memset>
 80145f4:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80145f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80145fc:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80145fe:	f8dc e000 	ldr.w	lr, [ip]
 8014602:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8014606:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 801460a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801460e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8014612:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8014616:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 801461a:	60b5      	str	r5, [r6, #8]
 801461c:	6075      	str	r5, [r6, #4]
 801461e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014622:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8014626:	1899      	adds	r1, r3, r2
 8014628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801462a:	f8da 0000 	ldr.w	r0, [sl]
 801462e:	f8cc e000 	str.w	lr, [ip]
 8014632:	4419      	add	r1, r3
 8014634:	4441      	add	r1, r8
 8014636:	3028      	adds	r0, #40	; 0x28
 8014638:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801463c:	f001 fc9c 	bl	8015f78 <rmw_create_wait_set>
 8014640:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014642:	63f0      	str	r0, [r6, #60]	; 0x3c
 8014644:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8014646:	b350      	cbz	r0, 801469e <rcl_wait_set_init+0xfe>
 8014648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801464a:	9302      	str	r3, [sp, #8]
 801464c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801464e:	9301      	str	r3, [sp, #4]
 8014650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014652:	9300      	str	r3, [sp, #0]
 8014654:	4642      	mov	r2, r8
 8014656:	464b      	mov	r3, r9
 8014658:	4639      	mov	r1, r7
 801465a:	4620      	mov	r0, r4
 801465c:	f7ff fdca 	bl	80141f4 <rcl_wait_set_resize>
 8014660:	4605      	mov	r5, r0
 8014662:	2800      	cmp	r0, #0
 8014664:	d0af      	beq.n	80145c6 <rcl_wait_set_init+0x26>
 8014666:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014668:	bb2b      	cbnz	r3, 80146b6 <rcl_wait_set_init+0x116>
 801466a:	2600      	movs	r6, #0
 801466c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014670:	9600      	str	r6, [sp, #0]
 8014672:	4633      	mov	r3, r6
 8014674:	4632      	mov	r2, r6
 8014676:	4631      	mov	r1, r6
 8014678:	4620      	mov	r0, r4
 801467a:	f7ff fdbb 	bl	80141f4 <rcl_wait_set_resize>
 801467e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014680:	2800      	cmp	r0, #0
 8014682:	d0a0      	beq.n	80145c6 <rcl_wait_set_init+0x26>
 8014684:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014686:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8014688:	4798      	blx	r3
 801468a:	4628      	mov	r0, r5
 801468c:	6326      	str	r6, [r4, #48]	; 0x30
 801468e:	b004      	add	sp, #16
 8014690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014694:	250b      	movs	r5, #11
 8014696:	4628      	mov	r0, r5
 8014698:	b004      	add	sp, #16
 801469a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801469e:	2501      	movs	r5, #1
 80146a0:	f001 fc74 	bl	8015f8c <rmw_destroy_wait_set>
 80146a4:	2800      	cmp	r0, #0
 80146a6:	bf18      	it	ne
 80146a8:	f44f 7561 	movne.w	r5, #900	; 0x384
 80146ac:	e7dd      	b.n	801466a <rcl_wait_set_init+0xca>
 80146ae:	2565      	movs	r5, #101	; 0x65
 80146b0:	e789      	b.n	80145c6 <rcl_wait_set_init+0x26>
 80146b2:	250a      	movs	r5, #10
 80146b4:	e787      	b.n	80145c6 <rcl_wait_set_init+0x26>
 80146b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80146b8:	e7f2      	b.n	80146a0 <rcl_wait_set_init+0x100>
 80146ba:	bf00      	nop

080146bc <rcl_wait_set_add_guard_condition>:
 80146bc:	b320      	cbz	r0, 8014708 <rcl_wait_set_add_guard_condition+0x4c>
 80146be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80146c0:	b570      	push	{r4, r5, r6, lr}
 80146c2:	4604      	mov	r4, r0
 80146c4:	b1d3      	cbz	r3, 80146fc <rcl_wait_set_add_guard_condition+0x40>
 80146c6:	b319      	cbz	r1, 8014710 <rcl_wait_set_add_guard_condition+0x54>
 80146c8:	68dd      	ldr	r5, [r3, #12]
 80146ca:	68e0      	ldr	r0, [r4, #12]
 80146cc:	4285      	cmp	r5, r0
 80146ce:	d218      	bcs.n	8014702 <rcl_wait_set_add_guard_condition+0x46>
 80146d0:	68a0      	ldr	r0, [r4, #8]
 80146d2:	1c6e      	adds	r6, r5, #1
 80146d4:	60de      	str	r6, [r3, #12]
 80146d6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80146da:	b102      	cbz	r2, 80146de <rcl_wait_set_add_guard_condition+0x22>
 80146dc:	6015      	str	r5, [r2, #0]
 80146de:	4608      	mov	r0, r1
 80146e0:	f003 f96c 	bl	80179bc <rcl_guard_condition_get_rmw_handle>
 80146e4:	b190      	cbz	r0, 801470c <rcl_wait_set_add_guard_condition+0x50>
 80146e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80146e8:	6842      	ldr	r2, [r0, #4]
 80146ea:	695b      	ldr	r3, [r3, #20]
 80146ec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80146f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80146f2:	6913      	ldr	r3, [r2, #16]
 80146f4:	3301      	adds	r3, #1
 80146f6:	6113      	str	r3, [r2, #16]
 80146f8:	2000      	movs	r0, #0
 80146fa:	bd70      	pop	{r4, r5, r6, pc}
 80146fc:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014700:	bd70      	pop	{r4, r5, r6, pc}
 8014702:	f240 3086 	movw	r0, #902	; 0x386
 8014706:	bd70      	pop	{r4, r5, r6, pc}
 8014708:	200b      	movs	r0, #11
 801470a:	4770      	bx	lr
 801470c:	2001      	movs	r0, #1
 801470e:	bd70      	pop	{r4, r5, r6, pc}
 8014710:	200b      	movs	r0, #11
 8014712:	bd70      	pop	{r4, r5, r6, pc}

08014714 <rcl_wait_set_add_timer>:
 8014714:	b340      	cbz	r0, 8014768 <rcl_wait_set_add_timer+0x54>
 8014716:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014718:	b570      	push	{r4, r5, r6, lr}
 801471a:	4604      	mov	r4, r0
 801471c:	b1f3      	cbz	r3, 801475c <rcl_wait_set_add_timer+0x48>
 801471e:	b329      	cbz	r1, 801476c <rcl_wait_set_add_timer+0x58>
 8014720:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8014722:	6965      	ldr	r5, [r4, #20]
 8014724:	42a8      	cmp	r0, r5
 8014726:	d21c      	bcs.n	8014762 <rcl_wait_set_add_timer+0x4e>
 8014728:	6925      	ldr	r5, [r4, #16]
 801472a:	1c46      	adds	r6, r0, #1
 801472c:	641e      	str	r6, [r3, #64]	; 0x40
 801472e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014732:	b102      	cbz	r2, 8014736 <rcl_wait_set_add_timer+0x22>
 8014734:	6010      	str	r0, [r2, #0]
 8014736:	4608      	mov	r0, r1
 8014738:	f7ff faa4 	bl	8013c84 <rcl_timer_get_guard_condition>
 801473c:	b168      	cbz	r0, 801475a <rcl_wait_set_add_timer+0x46>
 801473e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014740:	68e3      	ldr	r3, [r4, #12]
 8014742:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8014744:	3b01      	subs	r3, #1
 8014746:	441d      	add	r5, r3
 8014748:	f003 f938 	bl	80179bc <rcl_guard_condition_get_rmw_handle>
 801474c:	b180      	cbz	r0, 8014770 <rcl_wait_set_add_timer+0x5c>
 801474e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014750:	6842      	ldr	r2, [r0, #4]
 8014752:	695b      	ldr	r3, [r3, #20]
 8014754:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014758:	2000      	movs	r0, #0
 801475a:	bd70      	pop	{r4, r5, r6, pc}
 801475c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014760:	bd70      	pop	{r4, r5, r6, pc}
 8014762:	f240 3086 	movw	r0, #902	; 0x386
 8014766:	bd70      	pop	{r4, r5, r6, pc}
 8014768:	200b      	movs	r0, #11
 801476a:	4770      	bx	lr
 801476c:	200b      	movs	r0, #11
 801476e:	bd70      	pop	{r4, r5, r6, pc}
 8014770:	2001      	movs	r0, #1
 8014772:	bd70      	pop	{r4, r5, r6, pc}

08014774 <rcl_wait_set_add_client>:
 8014774:	b320      	cbz	r0, 80147c0 <rcl_wait_set_add_client+0x4c>
 8014776:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014778:	b570      	push	{r4, r5, r6, lr}
 801477a:	4604      	mov	r4, r0
 801477c:	b1d3      	cbz	r3, 80147b4 <rcl_wait_set_add_client+0x40>
 801477e:	b319      	cbz	r1, 80147c8 <rcl_wait_set_add_client+0x54>
 8014780:	699d      	ldr	r5, [r3, #24]
 8014782:	69e0      	ldr	r0, [r4, #28]
 8014784:	4285      	cmp	r5, r0
 8014786:	d218      	bcs.n	80147ba <rcl_wait_set_add_client+0x46>
 8014788:	69a0      	ldr	r0, [r4, #24]
 801478a:	1c6e      	adds	r6, r5, #1
 801478c:	619e      	str	r6, [r3, #24]
 801478e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014792:	b102      	cbz	r2, 8014796 <rcl_wait_set_add_client+0x22>
 8014794:	6015      	str	r5, [r2, #0]
 8014796:	4608      	mov	r0, r1
 8014798:	f7fe f964 	bl	8012a64 <rcl_client_get_rmw_handle>
 801479c:	b190      	cbz	r0, 80147c4 <rcl_wait_set_add_client+0x50>
 801479e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80147a0:	6842      	ldr	r2, [r0, #4]
 80147a2:	6a1b      	ldr	r3, [r3, #32]
 80147a4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80147a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80147aa:	69d3      	ldr	r3, [r2, #28]
 80147ac:	3301      	adds	r3, #1
 80147ae:	61d3      	str	r3, [r2, #28]
 80147b0:	2000      	movs	r0, #0
 80147b2:	bd70      	pop	{r4, r5, r6, pc}
 80147b4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80147b8:	bd70      	pop	{r4, r5, r6, pc}
 80147ba:	f240 3086 	movw	r0, #902	; 0x386
 80147be:	bd70      	pop	{r4, r5, r6, pc}
 80147c0:	200b      	movs	r0, #11
 80147c2:	4770      	bx	lr
 80147c4:	2001      	movs	r0, #1
 80147c6:	bd70      	pop	{r4, r5, r6, pc}
 80147c8:	200b      	movs	r0, #11
 80147ca:	bd70      	pop	{r4, r5, r6, pc}

080147cc <rcl_wait_set_add_service>:
 80147cc:	b320      	cbz	r0, 8014818 <rcl_wait_set_add_service+0x4c>
 80147ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80147d0:	b570      	push	{r4, r5, r6, lr}
 80147d2:	4604      	mov	r4, r0
 80147d4:	b1d3      	cbz	r3, 801480c <rcl_wait_set_add_service+0x40>
 80147d6:	b319      	cbz	r1, 8014820 <rcl_wait_set_add_service+0x54>
 80147d8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80147da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80147dc:	4285      	cmp	r5, r0
 80147de:	d218      	bcs.n	8014812 <rcl_wait_set_add_service+0x46>
 80147e0:	6a20      	ldr	r0, [r4, #32]
 80147e2:	1c6e      	adds	r6, r5, #1
 80147e4:	625e      	str	r6, [r3, #36]	; 0x24
 80147e6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80147ea:	b102      	cbz	r2, 80147ee <rcl_wait_set_add_service+0x22>
 80147ec:	6015      	str	r5, [r2, #0]
 80147ee:	4608      	mov	r0, r1
 80147f0:	f7ff f84e 	bl	8013890 <rcl_service_get_rmw_handle>
 80147f4:	b190      	cbz	r0, 801481c <rcl_wait_set_add_service+0x50>
 80147f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80147f8:	6842      	ldr	r2, [r0, #4]
 80147fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014800:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014802:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8014804:	3301      	adds	r3, #1
 8014806:	6293      	str	r3, [r2, #40]	; 0x28
 8014808:	2000      	movs	r0, #0
 801480a:	bd70      	pop	{r4, r5, r6, pc}
 801480c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014810:	bd70      	pop	{r4, r5, r6, pc}
 8014812:	f240 3086 	movw	r0, #902	; 0x386
 8014816:	bd70      	pop	{r4, r5, r6, pc}
 8014818:	200b      	movs	r0, #11
 801481a:	4770      	bx	lr
 801481c:	2001      	movs	r0, #1
 801481e:	bd70      	pop	{r4, r5, r6, pc}
 8014820:	200b      	movs	r0, #11
 8014822:	bd70      	pop	{r4, r5, r6, pc}
 8014824:	0000      	movs	r0, r0
	...

08014828 <rcl_wait>:
 8014828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801482c:	b08f      	sub	sp, #60	; 0x3c
 801482e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014832:	2800      	cmp	r0, #0
 8014834:	f000 814c 	beq.w	8014ad0 <rcl_wait+0x2a8>
 8014838:	6b05      	ldr	r5, [r0, #48]	; 0x30
 801483a:	4604      	mov	r4, r0
 801483c:	2d00      	cmp	r5, #0
 801483e:	f000 80bc 	beq.w	80149ba <rcl_wait+0x192>
 8014842:	6843      	ldr	r3, [r0, #4]
 8014844:	b973      	cbnz	r3, 8014864 <rcl_wait+0x3c>
 8014846:	68e3      	ldr	r3, [r4, #12]
 8014848:	b963      	cbnz	r3, 8014864 <rcl_wait+0x3c>
 801484a:	6963      	ldr	r3, [r4, #20]
 801484c:	b953      	cbnz	r3, 8014864 <rcl_wait+0x3c>
 801484e:	69e3      	ldr	r3, [r4, #28]
 8014850:	b943      	cbnz	r3, 8014864 <rcl_wait+0x3c>
 8014852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014854:	b933      	cbnz	r3, 8014864 <rcl_wait+0x3c>
 8014856:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014858:	b923      	cbnz	r3, 8014864 <rcl_wait+0x3c>
 801485a:	f240 3085 	movw	r0, #901	; 0x385
 801485e:	b00f      	add	sp, #60	; 0x3c
 8014860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014868:	2a01      	cmp	r2, #1
 801486a:	f173 0300 	sbcs.w	r3, r3, #0
 801486e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8014870:	db56      	blt.n	8014920 <rcl_wait+0xf8>
 8014872:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8014876:	2900      	cmp	r1, #0
 8014878:	f000 8149 	beq.w	8014b0e <rcl_wait+0x2e6>
 801487c:	2300      	movs	r3, #0
 801487e:	9307      	str	r3, [sp, #28]
 8014880:	469b      	mov	fp, r3
 8014882:	f04f 0800 	mov.w	r8, #0
 8014886:	f04f 0900 	mov.w	r9, #0
 801488a:	e00d      	b.n	80148a8 <rcl_wait+0x80>
 801488c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801488e:	6922      	ldr	r2, [r4, #16]
 8014890:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8014892:	f842 000a 	str.w	r0, [r2, sl]
 8014896:	f118 0801 	adds.w	r8, r8, #1
 801489a:	f149 0900 	adc.w	r9, r9, #0
 801489e:	2300      	movs	r3, #0
 80148a0:	4599      	cmp	r9, r3
 80148a2:	bf08      	it	eq
 80148a4:	4588      	cmpeq	r8, r1
 80148a6:	d243      	bcs.n	8014930 <rcl_wait+0x108>
 80148a8:	6922      	ldr	r2, [r4, #16]
 80148aa:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80148ae:	f852 000a 	ldr.w	r0, [r2, sl]
 80148b2:	2800      	cmp	r0, #0
 80148b4:	d0ef      	beq.n	8014896 <rcl_wait+0x6e>
 80148b6:	68e2      	ldr	r2, [r4, #12]
 80148b8:	6969      	ldr	r1, [r5, #20]
 80148ba:	4442      	add	r2, r8
 80148bc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80148c0:	b13b      	cbz	r3, 80148d2 <rcl_wait+0xaa>
 80148c2:	692a      	ldr	r2, [r5, #16]
 80148c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80148c8:	6921      	ldr	r1, [r4, #16]
 80148ca:	3201      	adds	r2, #1
 80148cc:	f851 000a 	ldr.w	r0, [r1, sl]
 80148d0:	612a      	str	r2, [r5, #16]
 80148d2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80148d6:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 80148da:	f7ff f9c1 	bl	8013c60 <rcl_timer_is_canceled>
 80148de:	2800      	cmp	r0, #0
 80148e0:	d1bd      	bne.n	801485e <rcl_wait+0x36>
 80148e2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80148e6:	2a00      	cmp	r2, #0
 80148e8:	d1d0      	bne.n	801488c <rcl_wait+0x64>
 80148ea:	6922      	ldr	r2, [r4, #16]
 80148ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80148f0:	f852 000a 	ldr.w	r0, [r2, sl]
 80148f4:	a90a      	add	r1, sp, #40	; 0x28
 80148f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80148fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80148fe:	f7ff f98b 	bl	8013c18 <rcl_timer_get_time_until_next_call>
 8014902:	2800      	cmp	r0, #0
 8014904:	d1ab      	bne.n	801485e <rcl_wait+0x36>
 8014906:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801490a:	42b2      	cmp	r2, r6
 801490c:	eb73 0107 	sbcs.w	r1, r3, r7
 8014910:	da03      	bge.n	801491a <rcl_wait+0xf2>
 8014912:	461f      	mov	r7, r3
 8014914:	2301      	movs	r3, #1
 8014916:	4616      	mov	r6, r2
 8014918:	9307      	str	r3, [sp, #28]
 801491a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801491c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801491e:	e7ba      	b.n	8014896 <rcl_wait+0x6e>
 8014920:	2900      	cmp	r1, #0
 8014922:	f000 80de 	beq.w	8014ae2 <rcl_wait+0x2ba>
 8014926:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801492a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801492e:	e7a5      	b.n	801487c <rcl_wait+0x54>
 8014930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014934:	4313      	orrs	r3, r2
 8014936:	d145      	bne.n	80149c4 <rcl_wait+0x19c>
 8014938:	2300      	movs	r3, #0
 801493a:	2200      	movs	r2, #0
 801493c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014940:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014944:	ab0a      	add	r3, sp, #40	; 0x28
 8014946:	9302      	str	r3, [sp, #8]
 8014948:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801494a:	9301      	str	r3, [sp, #4]
 801494c:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8014950:	9300      	str	r3, [sp, #0]
 8014952:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8014956:	f105 031c 	add.w	r3, r5, #28
 801495a:	f105 0110 	add.w	r1, r5, #16
 801495e:	1d28      	adds	r0, r5, #4
 8014960:	f001 f98a 	bl	8015c78 <rmw_wait>
 8014964:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014968:	4680      	mov	r8, r0
 801496a:	b30a      	cbz	r2, 80149b0 <rcl_wait+0x188>
 801496c:	2500      	movs	r5, #0
 801496e:	462f      	mov	r7, r5
 8014970:	e004      	b.n	801497c <rcl_wait+0x154>
 8014972:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014976:	3501      	adds	r5, #1
 8014978:	42aa      	cmp	r2, r5
 801497a:	d919      	bls.n	80149b0 <rcl_wait+0x188>
 801497c:	6922      	ldr	r2, [r4, #16]
 801497e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014982:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8014986:	00ae      	lsls	r6, r5, #2
 8014988:	2800      	cmp	r0, #0
 801498a:	d0f3      	beq.n	8014974 <rcl_wait+0x14c>
 801498c:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8014990:	f7ff f90a 	bl	8013ba8 <rcl_timer_is_ready>
 8014994:	2800      	cmp	r0, #0
 8014996:	f47f af62 	bne.w	801485e <rcl_wait+0x36>
 801499a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 801499e:	2a00      	cmp	r2, #0
 80149a0:	d1e7      	bne.n	8014972 <rcl_wait+0x14a>
 80149a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80149a4:	6921      	ldr	r1, [r4, #16]
 80149a6:	518a      	str	r2, [r1, r6]
 80149a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80149aa:	3501      	adds	r5, #1
 80149ac:	42aa      	cmp	r2, r5
 80149ae:	d8e5      	bhi.n	801497c <rcl_wait+0x154>
 80149b0:	f038 0002 	bics.w	r0, r8, #2
 80149b4:	d029      	beq.n	8014a0a <rcl_wait+0x1e2>
 80149b6:	2001      	movs	r0, #1
 80149b8:	e751      	b.n	801485e <rcl_wait+0x36>
 80149ba:	f44f 7061 	mov.w	r0, #900	; 0x384
 80149be:	b00f      	add	sp, #60	; 0x3c
 80149c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149c8:	2a01      	cmp	r2, #1
 80149ca:	f173 0300 	sbcs.w	r3, r3, #0
 80149ce:	f2c0 8083 	blt.w	8014ad8 <rcl_wait+0x2b0>
 80149d2:	2e00      	cmp	r6, #0
 80149d4:	f177 0300 	sbcs.w	r3, r7, #0
 80149d8:	bfbc      	itt	lt
 80149da:	2600      	movlt	r6, #0
 80149dc:	2700      	movlt	r7, #0
 80149de:	a34e      	add	r3, pc, #312	; (adr r3, 8014b18 <rcl_wait+0x2f0>)
 80149e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e4:	4630      	mov	r0, r6
 80149e6:	4639      	mov	r1, r7
 80149e8:	f7ec f880 	bl	8000aec <__aeabi_ldivmod>
 80149ec:	a34a      	add	r3, pc, #296	; (adr r3, 8014b18 <rcl_wait+0x2f0>)
 80149ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f2:	4680      	mov	r8, r0
 80149f4:	4689      	mov	r9, r1
 80149f6:	4630      	mov	r0, r6
 80149f8:	4639      	mov	r1, r7
 80149fa:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80149fe:	f7ec f875 	bl	8000aec <__aeabi_ldivmod>
 8014a02:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014a06:	ab0a      	add	r3, sp, #40	; 0x28
 8014a08:	e79d      	b.n	8014946 <rcl_wait+0x11e>
 8014a0a:	6866      	ldr	r6, [r4, #4]
 8014a0c:	4602      	mov	r2, r0
 8014a0e:	b91e      	cbnz	r6, 8014a18 <rcl_wait+0x1f0>
 8014a10:	e00d      	b.n	8014a2e <rcl_wait+0x206>
 8014a12:	3201      	adds	r2, #1
 8014a14:	42b2      	cmp	r2, r6
 8014a16:	d00a      	beq.n	8014a2e <rcl_wait+0x206>
 8014a18:	6899      	ldr	r1, [r3, #8]
 8014a1a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a1e:	2900      	cmp	r1, #0
 8014a20:	d1f7      	bne.n	8014a12 <rcl_wait+0x1ea>
 8014a22:	6825      	ldr	r5, [r4, #0]
 8014a24:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014a28:	3201      	adds	r2, #1
 8014a2a:	42b2      	cmp	r2, r6
 8014a2c:	d1f4      	bne.n	8014a18 <rcl_wait+0x1f0>
 8014a2e:	68e6      	ldr	r6, [r4, #12]
 8014a30:	2200      	movs	r2, #0
 8014a32:	b91e      	cbnz	r6, 8014a3c <rcl_wait+0x214>
 8014a34:	e00d      	b.n	8014a52 <rcl_wait+0x22a>
 8014a36:	3201      	adds	r2, #1
 8014a38:	42b2      	cmp	r2, r6
 8014a3a:	d00a      	beq.n	8014a52 <rcl_wait+0x22a>
 8014a3c:	6959      	ldr	r1, [r3, #20]
 8014a3e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a42:	2900      	cmp	r1, #0
 8014a44:	d1f7      	bne.n	8014a36 <rcl_wait+0x20e>
 8014a46:	68a5      	ldr	r5, [r4, #8]
 8014a48:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014a4c:	3201      	adds	r2, #1
 8014a4e:	42b2      	cmp	r2, r6
 8014a50:	d1f4      	bne.n	8014a3c <rcl_wait+0x214>
 8014a52:	69e6      	ldr	r6, [r4, #28]
 8014a54:	2200      	movs	r2, #0
 8014a56:	b91e      	cbnz	r6, 8014a60 <rcl_wait+0x238>
 8014a58:	e00d      	b.n	8014a76 <rcl_wait+0x24e>
 8014a5a:	3201      	adds	r2, #1
 8014a5c:	42b2      	cmp	r2, r6
 8014a5e:	d00a      	beq.n	8014a76 <rcl_wait+0x24e>
 8014a60:	6a19      	ldr	r1, [r3, #32]
 8014a62:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a66:	2900      	cmp	r1, #0
 8014a68:	d1f7      	bne.n	8014a5a <rcl_wait+0x232>
 8014a6a:	69a5      	ldr	r5, [r4, #24]
 8014a6c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014a70:	3201      	adds	r2, #1
 8014a72:	42b2      	cmp	r2, r6
 8014a74:	d1f4      	bne.n	8014a60 <rcl_wait+0x238>
 8014a76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014a78:	2200      	movs	r2, #0
 8014a7a:	b91e      	cbnz	r6, 8014a84 <rcl_wait+0x25c>
 8014a7c:	e00d      	b.n	8014a9a <rcl_wait+0x272>
 8014a7e:	3201      	adds	r2, #1
 8014a80:	4296      	cmp	r6, r2
 8014a82:	d00a      	beq.n	8014a9a <rcl_wait+0x272>
 8014a84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014a86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a8a:	2900      	cmp	r1, #0
 8014a8c:	d1f7      	bne.n	8014a7e <rcl_wait+0x256>
 8014a8e:	6a25      	ldr	r5, [r4, #32]
 8014a90:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014a94:	3201      	adds	r2, #1
 8014a96:	4296      	cmp	r6, r2
 8014a98:	d1f4      	bne.n	8014a84 <rcl_wait+0x25c>
 8014a9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	b91e      	cbnz	r6, 8014aa8 <rcl_wait+0x280>
 8014aa0:	e00d      	b.n	8014abe <rcl_wait+0x296>
 8014aa2:	3201      	adds	r2, #1
 8014aa4:	42b2      	cmp	r2, r6
 8014aa6:	d00a      	beq.n	8014abe <rcl_wait+0x296>
 8014aa8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8014aaa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014aae:	2900      	cmp	r1, #0
 8014ab0:	d1f7      	bne.n	8014aa2 <rcl_wait+0x27a>
 8014ab2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8014ab4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014ab8:	3201      	adds	r2, #1
 8014aba:	42b2      	cmp	r2, r6
 8014abc:	d1f4      	bne.n	8014aa8 <rcl_wait+0x280>
 8014abe:	f1b8 0f02 	cmp.w	r8, #2
 8014ac2:	f47f aecc 	bne.w	801485e <rcl_wait+0x36>
 8014ac6:	9b07      	ldr	r3, [sp, #28]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	bf08      	it	eq
 8014acc:	2002      	moveq	r0, #2
 8014ace:	e6c6      	b.n	801485e <rcl_wait+0x36>
 8014ad0:	200b      	movs	r0, #11
 8014ad2:	b00f      	add	sp, #60	; 0x3c
 8014ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ad8:	9b07      	ldr	r3, [sp, #28]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	f47f af79 	bne.w	80149d2 <rcl_wait+0x1aa>
 8014ae0:	e731      	b.n	8014946 <rcl_wait+0x11e>
 8014ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ae6:	4313      	orrs	r3, r2
 8014ae8:	bf08      	it	eq
 8014aea:	9107      	streq	r1, [sp, #28]
 8014aec:	f43f af24 	beq.w	8014938 <rcl_wait+0x110>
 8014af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014af4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8014af8:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8014afc:	2a01      	cmp	r2, #1
 8014afe:	f173 0300 	sbcs.w	r3, r3, #0
 8014b02:	f04f 0300 	mov.w	r3, #0
 8014b06:	9307      	str	r3, [sp, #28]
 8014b08:	f6bf af63 	bge.w	80149d2 <rcl_wait+0x1aa>
 8014b0c:	e71b      	b.n	8014946 <rcl_wait+0x11e>
 8014b0e:	4632      	mov	r2, r6
 8014b10:	463b      	mov	r3, r7
 8014b12:	e7f3      	b.n	8014afc <rcl_wait+0x2d4>
 8014b14:	f3af 8000 	nop.w
 8014b18:	3b9aca00 	.word	0x3b9aca00
 8014b1c:	00000000 	.word	0x00000000

08014b20 <__atomic_load_8>:
 8014b20:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014b24:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8014b28:	4b14      	ldr	r3, [pc, #80]	; (8014b7c <__atomic_load_8+0x5c>)
 8014b2a:	4a15      	ldr	r2, [pc, #84]	; (8014b80 <__atomic_load_8+0x60>)
 8014b2c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014b30:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014b34:	fb03 f301 	mul.w	r3, r3, r1
 8014b38:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8014b3c:	fba2 1203 	umull	r1, r2, r2, r3
 8014b40:	0912      	lsrs	r2, r2, #4
 8014b42:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8014b46:	b430      	push	{r4, r5}
 8014b48:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8014b4c:	4c0d      	ldr	r4, [pc, #52]	; (8014b84 <__atomic_load_8+0x64>)
 8014b4e:	1a9b      	subs	r3, r3, r2
 8014b50:	18e1      	adds	r1, r4, r3
 8014b52:	f04f 0501 	mov.w	r5, #1
 8014b56:	e8d1 2f4f 	ldrexb	r2, [r1]
 8014b5a:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8014b5e:	f1bc 0f00 	cmp.w	ip, #0
 8014b62:	d1f8      	bne.n	8014b56 <__atomic_load_8+0x36>
 8014b64:	f3bf 8f5b 	dmb	ish
 8014b68:	b2d2      	uxtb	r2, r2
 8014b6a:	2a00      	cmp	r2, #0
 8014b6c:	d1f3      	bne.n	8014b56 <__atomic_load_8+0x36>
 8014b6e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8014b72:	f3bf 8f5b 	dmb	ish
 8014b76:	54e2      	strb	r2, [r4, r3]
 8014b78:	bc30      	pop	{r4, r5}
 8014b7a:	4770      	bx	lr
 8014b7c:	27d4eb2d 	.word	0x27d4eb2d
 8014b80:	b21642c9 	.word	0xb21642c9
 8014b84:	20009c2c 	.word	0x20009c2c

08014b88 <__atomic_store_8>:
 8014b88:	b4f0      	push	{r4, r5, r6, r7}
 8014b8a:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8014b8e:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8014b92:	4914      	ldr	r1, [pc, #80]	; (8014be4 <__atomic_store_8+0x5c>)
 8014b94:	4c14      	ldr	r4, [pc, #80]	; (8014be8 <__atomic_store_8+0x60>)
 8014b96:	4e15      	ldr	r6, [pc, #84]	; (8014bec <__atomic_store_8+0x64>)
 8014b98:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8014b9c:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8014ba0:	fb01 f105 	mul.w	r1, r1, r5
 8014ba4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014ba8:	fba4 5401 	umull	r5, r4, r4, r1
 8014bac:	0924      	lsrs	r4, r4, #4
 8014bae:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8014bb2:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8014bb6:	1b09      	subs	r1, r1, r4
 8014bb8:	1875      	adds	r5, r6, r1
 8014bba:	f04f 0701 	mov.w	r7, #1
 8014bbe:	e8d5 4f4f 	ldrexb	r4, [r5]
 8014bc2:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8014bc6:	f1bc 0f00 	cmp.w	ip, #0
 8014bca:	d1f8      	bne.n	8014bbe <__atomic_store_8+0x36>
 8014bcc:	f3bf 8f5b 	dmb	ish
 8014bd0:	b2e4      	uxtb	r4, r4
 8014bd2:	2c00      	cmp	r4, #0
 8014bd4:	d1f3      	bne.n	8014bbe <__atomic_store_8+0x36>
 8014bd6:	e9c0 2300 	strd	r2, r3, [r0]
 8014bda:	f3bf 8f5b 	dmb	ish
 8014bde:	5474      	strb	r4, [r6, r1]
 8014be0:	bcf0      	pop	{r4, r5, r6, r7}
 8014be2:	4770      	bx	lr
 8014be4:	27d4eb2d 	.word	0x27d4eb2d
 8014be8:	b21642c9 	.word	0xb21642c9
 8014bec:	20009c2c 	.word	0x20009c2c

08014bf0 <__atomic_exchange_8>:
 8014bf0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8014bf4:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8014bf8:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8014bfc:	4c16      	ldr	r4, [pc, #88]	; (8014c58 <__atomic_exchange_8+0x68>)
 8014bfe:	4917      	ldr	r1, [pc, #92]	; (8014c5c <__atomic_exchange_8+0x6c>)
 8014c00:	4e17      	ldr	r6, [pc, #92]	; (8014c60 <__atomic_exchange_8+0x70>)
 8014c02:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8014c06:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8014c0a:	fb04 f505 	mul.w	r5, r4, r5
 8014c0e:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8014c12:	fba1 4105 	umull	r4, r1, r1, r5
 8014c16:	0909      	lsrs	r1, r1, #4
 8014c18:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8014c1c:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8014c20:	1a6c      	subs	r4, r5, r1
 8014c22:	1931      	adds	r1, r6, r4
 8014c24:	f04f 0701 	mov.w	r7, #1
 8014c28:	e8d1 5f4f 	ldrexb	r5, [r1]
 8014c2c:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8014c30:	f1bc 0f00 	cmp.w	ip, #0
 8014c34:	d1f8      	bne.n	8014c28 <__atomic_exchange_8+0x38>
 8014c36:	f3bf 8f5b 	dmb	ish
 8014c3a:	b2ed      	uxtb	r5, r5
 8014c3c:	2d00      	cmp	r5, #0
 8014c3e:	d1f3      	bne.n	8014c28 <__atomic_exchange_8+0x38>
 8014c40:	e9d0 8900 	ldrd	r8, r9, [r0]
 8014c44:	e9c0 2300 	strd	r2, r3, [r0]
 8014c48:	f3bf 8f5b 	dmb	ish
 8014c4c:	5535      	strb	r5, [r6, r4]
 8014c4e:	4640      	mov	r0, r8
 8014c50:	4649      	mov	r1, r9
 8014c52:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8014c56:	4770      	bx	lr
 8014c58:	27d4eb2d 	.word	0x27d4eb2d
 8014c5c:	b21642c9 	.word	0xb21642c9
 8014c60:	20009c2c 	.word	0x20009c2c

08014c64 <rcutils_is_directory>:
 8014c64:	2000      	movs	r0, #0
 8014c66:	4770      	bx	lr

08014c68 <rcutils_join_path>:
 8014c68:	b082      	sub	sp, #8
 8014c6a:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014c6e:	2000      	movs	r0, #0
 8014c70:	b002      	add	sp, #8
 8014c72:	4770      	bx	lr

08014c74 <rcutils_to_native_path>:
 8014c74:	b084      	sub	sp, #16
 8014c76:	a801      	add	r0, sp, #4
 8014c78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014c7c:	b004      	add	sp, #16
 8014c7e:	2000      	movs	r0, #0
 8014c80:	4770      	bx	lr
 8014c82:	bf00      	nop

08014c84 <rcutils_format_string_limit>:
 8014c84:	b40f      	push	{r0, r1, r2, r3}
 8014c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c88:	b083      	sub	sp, #12
 8014c8a:	ac08      	add	r4, sp, #32
 8014c8c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014c8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014c92:	b34e      	cbz	r6, 8014ce8 <rcutils_format_string_limit+0x64>
 8014c94:	a808      	add	r0, sp, #32
 8014c96:	f7f8 fdf9 	bl	800d88c <rcutils_allocator_is_valid>
 8014c9a:	b328      	cbz	r0, 8014ce8 <rcutils_format_string_limit+0x64>
 8014c9c:	2100      	movs	r1, #0
 8014c9e:	ab0f      	add	r3, sp, #60	; 0x3c
 8014ca0:	4608      	mov	r0, r1
 8014ca2:	4632      	mov	r2, r6
 8014ca4:	e9cd 3300 	strd	r3, r3, [sp]
 8014ca8:	f000 f904 	bl	8014eb4 <rcutils_vsnprintf>
 8014cac:	1c43      	adds	r3, r0, #1
 8014cae:	4605      	mov	r5, r0
 8014cb0:	d01a      	beq.n	8014ce8 <rcutils_format_string_limit+0x64>
 8014cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014cb6:	1c47      	adds	r7, r0, #1
 8014cb8:	429f      	cmp	r7, r3
 8014cba:	bf84      	itt	hi
 8014cbc:	461f      	movhi	r7, r3
 8014cbe:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8014cc2:	4638      	mov	r0, r7
 8014cc4:	9b08      	ldr	r3, [sp, #32]
 8014cc6:	4798      	blx	r3
 8014cc8:	4604      	mov	r4, r0
 8014cca:	b168      	cbz	r0, 8014ce8 <rcutils_format_string_limit+0x64>
 8014ccc:	9b01      	ldr	r3, [sp, #4]
 8014cce:	4632      	mov	r2, r6
 8014cd0:	4639      	mov	r1, r7
 8014cd2:	f000 f8ef 	bl	8014eb4 <rcutils_vsnprintf>
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	db02      	blt.n	8014ce0 <rcutils_format_string_limit+0x5c>
 8014cda:	2300      	movs	r3, #0
 8014cdc:	5563      	strb	r3, [r4, r5]
 8014cde:	e004      	b.n	8014cea <rcutils_format_string_limit+0x66>
 8014ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014ce4:	4620      	mov	r0, r4
 8014ce6:	4798      	blx	r3
 8014ce8:	2400      	movs	r4, #0
 8014cea:	4620      	mov	r0, r4
 8014cec:	b003      	add	sp, #12
 8014cee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014cf2:	b004      	add	sp, #16
 8014cf4:	4770      	bx	lr
 8014cf6:	bf00      	nop

08014cf8 <rcutils_get_env>:
 8014cf8:	b168      	cbz	r0, 8014d16 <rcutils_get_env+0x1e>
 8014cfa:	b510      	push	{r4, lr}
 8014cfc:	460c      	mov	r4, r1
 8014cfe:	b129      	cbz	r1, 8014d0c <rcutils_get_env+0x14>
 8014d00:	f002 ff8c 	bl	8017c1c <getenv>
 8014d04:	b120      	cbz	r0, 8014d10 <rcutils_get_env+0x18>
 8014d06:	6020      	str	r0, [r4, #0]
 8014d08:	2000      	movs	r0, #0
 8014d0a:	bd10      	pop	{r4, pc}
 8014d0c:	4803      	ldr	r0, [pc, #12]	; (8014d1c <rcutils_get_env+0x24>)
 8014d0e:	bd10      	pop	{r4, pc}
 8014d10:	4b03      	ldr	r3, [pc, #12]	; (8014d20 <rcutils_get_env+0x28>)
 8014d12:	6023      	str	r3, [r4, #0]
 8014d14:	bd10      	pop	{r4, pc}
 8014d16:	4803      	ldr	r0, [pc, #12]	; (8014d24 <rcutils_get_env+0x2c>)
 8014d18:	4770      	bx	lr
 8014d1a:	bf00      	nop
 8014d1c:	08019cb8 	.word	0x08019cb8
 8014d20:	08019ddc 	.word	0x08019ddc
 8014d24:	08019c9c 	.word	0x08019c9c

08014d28 <rcutils_repl_str>:
 8014d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d2c:	ed2d 8b02 	vpush	{d8}
 8014d30:	b087      	sub	sp, #28
 8014d32:	4680      	mov	r8, r0
 8014d34:	4608      	mov	r0, r1
 8014d36:	f8cd 8000 	str.w	r8, [sp]
 8014d3a:	ee08 2a10 	vmov	s16, r2
 8014d3e:	468a      	mov	sl, r1
 8014d40:	4699      	mov	r9, r3
 8014d42:	f7eb fa57 	bl	80001f4 <strlen>
 8014d46:	2600      	movs	r6, #0
 8014d48:	4647      	mov	r7, r8
 8014d4a:	9001      	str	r0, [sp, #4]
 8014d4c:	46b3      	mov	fp, r6
 8014d4e:	2510      	movs	r5, #16
 8014d50:	46b0      	mov	r8, r6
 8014d52:	e01d      	b.n	8014d90 <rcutils_repl_str+0x68>
 8014d54:	f10b 0b01 	add.w	fp, fp, #1
 8014d58:	455e      	cmp	r6, fp
 8014d5a:	d211      	bcs.n	8014d80 <rcutils_repl_str+0x58>
 8014d5c:	442e      	add	r6, r5
 8014d5e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014d62:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014d66:	00b1      	lsls	r1, r6, #2
 8014d68:	4798      	blx	r3
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	f000 8084 	beq.w	8014e78 <rcutils_repl_str+0x150>
 8014d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014d74:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8014d78:	bf28      	it	cs
 8014d7a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8014d7e:	4680      	mov	r8, r0
 8014d80:	9a00      	ldr	r2, [sp, #0]
 8014d82:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014d86:	1aa2      	subs	r2, r4, r2
 8014d88:	f843 2c04 	str.w	r2, [r3, #-4]
 8014d8c:	9b01      	ldr	r3, [sp, #4]
 8014d8e:	18e7      	adds	r7, r4, r3
 8014d90:	4651      	mov	r1, sl
 8014d92:	4638      	mov	r0, r7
 8014d94:	f003 fc6f 	bl	8018676 <strstr>
 8014d98:	4604      	mov	r4, r0
 8014d9a:	4640      	mov	r0, r8
 8014d9c:	2c00      	cmp	r4, #0
 8014d9e:	d1d9      	bne.n	8014d54 <rcutils_repl_str+0x2c>
 8014da0:	46b8      	mov	r8, r7
 8014da2:	4607      	mov	r7, r0
 8014da4:	4640      	mov	r0, r8
 8014da6:	f7eb fa25 	bl	80001f4 <strlen>
 8014daa:	9b00      	ldr	r3, [sp, #0]
 8014dac:	eba8 0303 	sub.w	r3, r8, r3
 8014db0:	181d      	adds	r5, r3, r0
 8014db2:	9504      	str	r5, [sp, #16]
 8014db4:	f1bb 0f00 	cmp.w	fp, #0
 8014db8:	d03d      	beq.n	8014e36 <rcutils_repl_str+0x10e>
 8014dba:	ee18 0a10 	vmov	r0, s16
 8014dbe:	f7eb fa19 	bl	80001f4 <strlen>
 8014dc2:	9b01      	ldr	r3, [sp, #4]
 8014dc4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014dc8:	1ac3      	subs	r3, r0, r3
 8014dca:	fb0b 5303 	mla	r3, fp, r3, r5
 8014dce:	9305      	str	r3, [sp, #20]
 8014dd0:	4606      	mov	r6, r0
 8014dd2:	1c58      	adds	r0, r3, #1
 8014dd4:	f8d9 3000 	ldr.w	r3, [r9]
 8014dd8:	4798      	blx	r3
 8014dda:	9003      	str	r0, [sp, #12]
 8014ddc:	2800      	cmp	r0, #0
 8014dde:	d04c      	beq.n	8014e7a <rcutils_repl_str+0x152>
 8014de0:	683a      	ldr	r2, [r7, #0]
 8014de2:	9900      	ldr	r1, [sp, #0]
 8014de4:	f003 fd3f 	bl	8018866 <memcpy>
 8014de8:	9b03      	ldr	r3, [sp, #12]
 8014dea:	683d      	ldr	r5, [r7, #0]
 8014dec:	ee18 8a10 	vmov	r8, s16
 8014df0:	441d      	add	r5, r3
 8014df2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8014df6:	9302      	str	r3, [sp, #8]
 8014df8:	46ba      	mov	sl, r7
 8014dfa:	4632      	mov	r2, r6
 8014dfc:	4641      	mov	r1, r8
 8014dfe:	4628      	mov	r0, r5
 8014e00:	f003 fd31 	bl	8018866 <memcpy>
 8014e04:	9b01      	ldr	r3, [sp, #4]
 8014e06:	f85a 2b04 	ldr.w	r2, [sl], #4
 8014e0a:	441a      	add	r2, r3
 8014e0c:	9b00      	ldr	r3, [sp, #0]
 8014e0e:	1899      	adds	r1, r3, r2
 8014e10:	9b02      	ldr	r3, [sp, #8]
 8014e12:	4435      	add	r5, r6
 8014e14:	429c      	cmp	r4, r3
 8014e16:	4628      	mov	r0, r5
 8014e18:	d025      	beq.n	8014e66 <rcutils_repl_str+0x13e>
 8014e1a:	f8da 3000 	ldr.w	r3, [sl]
 8014e1e:	3401      	adds	r4, #1
 8014e20:	1a9a      	subs	r2, r3, r2
 8014e22:	4415      	add	r5, r2
 8014e24:	f003 fd1f 	bl	8018866 <memcpy>
 8014e28:	455c      	cmp	r4, fp
 8014e2a:	d3e6      	bcc.n	8014dfa <rcutils_repl_str+0xd2>
 8014e2c:	9a03      	ldr	r2, [sp, #12]
 8014e2e:	9905      	ldr	r1, [sp, #20]
 8014e30:	2300      	movs	r3, #0
 8014e32:	5453      	strb	r3, [r2, r1]
 8014e34:	e00b      	b.n	8014e4e <rcutils_repl_str+0x126>
 8014e36:	4628      	mov	r0, r5
 8014e38:	f8d9 3000 	ldr.w	r3, [r9]
 8014e3c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014e40:	3001      	adds	r0, #1
 8014e42:	4798      	blx	r3
 8014e44:	9003      	str	r0, [sp, #12]
 8014e46:	b110      	cbz	r0, 8014e4e <rcutils_repl_str+0x126>
 8014e48:	9900      	ldr	r1, [sp, #0]
 8014e4a:	f003 fd04 	bl	8018856 <strcpy>
 8014e4e:	4638      	mov	r0, r7
 8014e50:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014e54:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014e58:	4798      	blx	r3
 8014e5a:	9803      	ldr	r0, [sp, #12]
 8014e5c:	b007      	add	sp, #28
 8014e5e:	ecbd 8b02 	vpop	{d8}
 8014e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e66:	9b04      	ldr	r3, [sp, #16]
 8014e68:	3401      	adds	r4, #1
 8014e6a:	1a9a      	subs	r2, r3, r2
 8014e6c:	4415      	add	r5, r2
 8014e6e:	f003 fcfa 	bl	8018866 <memcpy>
 8014e72:	455c      	cmp	r4, fp
 8014e74:	d3c1      	bcc.n	8014dfa <rcutils_repl_str+0xd2>
 8014e76:	e7d9      	b.n	8014e2c <rcutils_repl_str+0x104>
 8014e78:	4647      	mov	r7, r8
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	9303      	str	r3, [sp, #12]
 8014e7e:	e7e6      	b.n	8014e4e <rcutils_repl_str+0x126>

08014e80 <rcutils_snprintf>:
 8014e80:	b40c      	push	{r2, r3}
 8014e82:	b530      	push	{r4, r5, lr}
 8014e84:	b083      	sub	sp, #12
 8014e86:	ab06      	add	r3, sp, #24
 8014e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e8c:	9301      	str	r3, [sp, #4]
 8014e8e:	b152      	cbz	r2, 8014ea6 <rcutils_snprintf+0x26>
 8014e90:	b138      	cbz	r0, 8014ea2 <rcutils_snprintf+0x22>
 8014e92:	b141      	cbz	r1, 8014ea6 <rcutils_snprintf+0x26>
 8014e94:	f003 fb0a 	bl	80184ac <vsniprintf>
 8014e98:	b003      	add	sp, #12
 8014e9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e9e:	b002      	add	sp, #8
 8014ea0:	4770      	bx	lr
 8014ea2:	2900      	cmp	r1, #0
 8014ea4:	d0f6      	beq.n	8014e94 <rcutils_snprintf+0x14>
 8014ea6:	f003 fca9 	bl	80187fc <__errno>
 8014eaa:	2316      	movs	r3, #22
 8014eac:	6003      	str	r3, [r0, #0]
 8014eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014eb2:	e7f1      	b.n	8014e98 <rcutils_snprintf+0x18>

08014eb4 <rcutils_vsnprintf>:
 8014eb4:	b570      	push	{r4, r5, r6, lr}
 8014eb6:	b13a      	cbz	r2, 8014ec8 <rcutils_vsnprintf+0x14>
 8014eb8:	b120      	cbz	r0, 8014ec4 <rcutils_vsnprintf+0x10>
 8014eba:	b129      	cbz	r1, 8014ec8 <rcutils_vsnprintf+0x14>
 8014ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ec0:	f003 baf4 	b.w	80184ac <vsniprintf>
 8014ec4:	2900      	cmp	r1, #0
 8014ec6:	d0f9      	beq.n	8014ebc <rcutils_vsnprintf+0x8>
 8014ec8:	f003 fc98 	bl	80187fc <__errno>
 8014ecc:	2316      	movs	r3, #22
 8014ece:	6003      	str	r3, [r0, #0]
 8014ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ed4:	bd70      	pop	{r4, r5, r6, pc}
 8014ed6:	bf00      	nop

08014ed8 <rcutils_strdup>:
 8014ed8:	b084      	sub	sp, #16
 8014eda:	b570      	push	{r4, r5, r6, lr}
 8014edc:	b082      	sub	sp, #8
 8014ede:	ac07      	add	r4, sp, #28
 8014ee0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014ee4:	4605      	mov	r5, r0
 8014ee6:	b1b0      	cbz	r0, 8014f16 <rcutils_strdup+0x3e>
 8014ee8:	f7eb f984 	bl	80001f4 <strlen>
 8014eec:	1c42      	adds	r2, r0, #1
 8014eee:	9b07      	ldr	r3, [sp, #28]
 8014ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ef2:	9201      	str	r2, [sp, #4]
 8014ef4:	4606      	mov	r6, r0
 8014ef6:	4610      	mov	r0, r2
 8014ef8:	4798      	blx	r3
 8014efa:	4604      	mov	r4, r0
 8014efc:	b128      	cbz	r0, 8014f0a <rcutils_strdup+0x32>
 8014efe:	9a01      	ldr	r2, [sp, #4]
 8014f00:	4629      	mov	r1, r5
 8014f02:	f003 fcb0 	bl	8018866 <memcpy>
 8014f06:	2300      	movs	r3, #0
 8014f08:	55a3      	strb	r3, [r4, r6]
 8014f0a:	4620      	mov	r0, r4
 8014f0c:	b002      	add	sp, #8
 8014f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f12:	b004      	add	sp, #16
 8014f14:	4770      	bx	lr
 8014f16:	4604      	mov	r4, r0
 8014f18:	e7f7      	b.n	8014f0a <rcutils_strdup+0x32>
 8014f1a:	bf00      	nop

08014f1c <rcutils_strndup>:
 8014f1c:	b082      	sub	sp, #8
 8014f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f20:	460e      	mov	r6, r1
 8014f22:	a906      	add	r1, sp, #24
 8014f24:	e881 000c 	stmia.w	r1, {r2, r3}
 8014f28:	4605      	mov	r5, r0
 8014f2a:	b180      	cbz	r0, 8014f4e <rcutils_strndup+0x32>
 8014f2c:	1c77      	adds	r7, r6, #1
 8014f2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f30:	4638      	mov	r0, r7
 8014f32:	4790      	blx	r2
 8014f34:	4604      	mov	r4, r0
 8014f36:	b128      	cbz	r0, 8014f44 <rcutils_strndup+0x28>
 8014f38:	463a      	mov	r2, r7
 8014f3a:	4629      	mov	r1, r5
 8014f3c:	f003 fc93 	bl	8018866 <memcpy>
 8014f40:	2300      	movs	r3, #0
 8014f42:	55a3      	strb	r3, [r4, r6]
 8014f44:	4620      	mov	r0, r4
 8014f46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014f4a:	b002      	add	sp, #8
 8014f4c:	4770      	bx	lr
 8014f4e:	4604      	mov	r4, r0
 8014f50:	e7f8      	b.n	8014f44 <rcutils_strndup+0x28>
 8014f52:	bf00      	nop

08014f54 <rmw_get_zero_initialized_context>:
 8014f54:	b510      	push	{r4, lr}
 8014f56:	2250      	movs	r2, #80	; 0x50
 8014f58:	4604      	mov	r4, r0
 8014f5a:	2100      	movs	r1, #0
 8014f5c:	f003 fb64 	bl	8018628 <memset>
 8014f60:	4620      	mov	r0, r4
 8014f62:	bd10      	pop	{r4, pc}

08014f64 <rmw_get_zero_initialized_init_options>:
 8014f64:	b510      	push	{r4, lr}
 8014f66:	2238      	movs	r2, #56	; 0x38
 8014f68:	4604      	mov	r4, r0
 8014f6a:	2100      	movs	r1, #0
 8014f6c:	f003 fb5c 	bl	8018628 <memset>
 8014f70:	f104 0010 	add.w	r0, r4, #16
 8014f74:	f000 f806 	bl	8014f84 <rmw_get_default_security_options>
 8014f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f7c:	60e3      	str	r3, [r4, #12]
 8014f7e:	4620      	mov	r0, r4
 8014f80:	bd10      	pop	{r4, pc}
 8014f82:	bf00      	nop

08014f84 <rmw_get_default_security_options>:
 8014f84:	2200      	movs	r2, #0
 8014f86:	7002      	strb	r2, [r0, #0]
 8014f88:	6042      	str	r2, [r0, #4]
 8014f8a:	4770      	bx	lr

08014f8c <rmw_validate_namespace_with_size>:
 8014f8c:	b340      	cbz	r0, 8014fe0 <rmw_validate_namespace_with_size+0x54>
 8014f8e:	b5d0      	push	{r4, r6, r7, lr}
 8014f90:	4614      	mov	r4, r2
 8014f92:	b0c2      	sub	sp, #264	; 0x108
 8014f94:	b332      	cbz	r2, 8014fe4 <rmw_validate_namespace_with_size+0x58>
 8014f96:	2901      	cmp	r1, #1
 8014f98:	460f      	mov	r7, r1
 8014f9a:	461e      	mov	r6, r3
 8014f9c:	d102      	bne.n	8014fa4 <rmw_validate_namespace_with_size+0x18>
 8014f9e:	7803      	ldrb	r3, [r0, #0]
 8014fa0:	2b2f      	cmp	r3, #47	; 0x2f
 8014fa2:	d019      	beq.n	8014fd8 <rmw_validate_namespace_with_size+0x4c>
 8014fa4:	aa01      	add	r2, sp, #4
 8014fa6:	4669      	mov	r1, sp
 8014fa8:	f7f8 fe44 	bl	800dc34 <rmw_validate_full_topic_name>
 8014fac:	b990      	cbnz	r0, 8014fd4 <rmw_validate_namespace_with_size+0x48>
 8014fae:	9b00      	ldr	r3, [sp, #0]
 8014fb0:	b14b      	cbz	r3, 8014fc6 <rmw_validate_namespace_with_size+0x3a>
 8014fb2:	2b07      	cmp	r3, #7
 8014fb4:	d007      	beq.n	8014fc6 <rmw_validate_namespace_with_size+0x3a>
 8014fb6:	1e5a      	subs	r2, r3, #1
 8014fb8:	2a05      	cmp	r2, #5
 8014fba:	d82b      	bhi.n	8015014 <rmw_validate_namespace_with_size+0x88>
 8014fbc:	e8df f002 	tbb	[pc, r2]
 8014fc0:	24211e1b 	.word	0x24211e1b
 8014fc4:	1427      	.short	0x1427
 8014fc6:	2ff5      	cmp	r7, #245	; 0xf5
 8014fc8:	d906      	bls.n	8014fd8 <rmw_validate_namespace_with_size+0x4c>
 8014fca:	2307      	movs	r3, #7
 8014fcc:	6023      	str	r3, [r4, #0]
 8014fce:	b10e      	cbz	r6, 8014fd4 <rmw_validate_namespace_with_size+0x48>
 8014fd0:	23f4      	movs	r3, #244	; 0xf4
 8014fd2:	6033      	str	r3, [r6, #0]
 8014fd4:	b042      	add	sp, #264	; 0x108
 8014fd6:	bdd0      	pop	{r4, r6, r7, pc}
 8014fd8:	2000      	movs	r0, #0
 8014fda:	6020      	str	r0, [r4, #0]
 8014fdc:	b042      	add	sp, #264	; 0x108
 8014fde:	bdd0      	pop	{r4, r6, r7, pc}
 8014fe0:	200b      	movs	r0, #11
 8014fe2:	4770      	bx	lr
 8014fe4:	200b      	movs	r0, #11
 8014fe6:	e7f5      	b.n	8014fd4 <rmw_validate_namespace_with_size+0x48>
 8014fe8:	2306      	movs	r3, #6
 8014fea:	6023      	str	r3, [r4, #0]
 8014fec:	2e00      	cmp	r6, #0
 8014fee:	d0f1      	beq.n	8014fd4 <rmw_validate_namespace_with_size+0x48>
 8014ff0:	9b01      	ldr	r3, [sp, #4]
 8014ff2:	6033      	str	r3, [r6, #0]
 8014ff4:	e7ee      	b.n	8014fd4 <rmw_validate_namespace_with_size+0x48>
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	6023      	str	r3, [r4, #0]
 8014ffa:	e7f7      	b.n	8014fec <rmw_validate_namespace_with_size+0x60>
 8014ffc:	2302      	movs	r3, #2
 8014ffe:	6023      	str	r3, [r4, #0]
 8015000:	e7f4      	b.n	8014fec <rmw_validate_namespace_with_size+0x60>
 8015002:	2303      	movs	r3, #3
 8015004:	6023      	str	r3, [r4, #0]
 8015006:	e7f1      	b.n	8014fec <rmw_validate_namespace_with_size+0x60>
 8015008:	2304      	movs	r3, #4
 801500a:	6023      	str	r3, [r4, #0]
 801500c:	e7ee      	b.n	8014fec <rmw_validate_namespace_with_size+0x60>
 801500e:	2305      	movs	r3, #5
 8015010:	6023      	str	r3, [r4, #0]
 8015012:	e7eb      	b.n	8014fec <rmw_validate_namespace_with_size+0x60>
 8015014:	4a03      	ldr	r2, [pc, #12]	; (8015024 <rmw_validate_namespace_with_size+0x98>)
 8015016:	f44f 7180 	mov.w	r1, #256	; 0x100
 801501a:	a802      	add	r0, sp, #8
 801501c:	f7ff ff30 	bl	8014e80 <rcutils_snprintf>
 8015020:	2001      	movs	r0, #1
 8015022:	e7d7      	b.n	8014fd4 <rmw_validate_namespace_with_size+0x48>
 8015024:	08019cd4 	.word	0x08019cd4

08015028 <rmw_validate_namespace>:
 8015028:	b168      	cbz	r0, 8015046 <rmw_validate_namespace+0x1e>
 801502a:	b570      	push	{r4, r5, r6, lr}
 801502c:	460d      	mov	r5, r1
 801502e:	4616      	mov	r6, r2
 8015030:	4604      	mov	r4, r0
 8015032:	f7eb f8df 	bl	80001f4 <strlen>
 8015036:	4633      	mov	r3, r6
 8015038:	4601      	mov	r1, r0
 801503a:	462a      	mov	r2, r5
 801503c:	4620      	mov	r0, r4
 801503e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015042:	f7ff bfa3 	b.w	8014f8c <rmw_validate_namespace_with_size>
 8015046:	200b      	movs	r0, #11
 8015048:	4770      	bx	lr
 801504a:	bf00      	nop

0801504c <rmw_namespace_validation_result_string>:
 801504c:	2807      	cmp	r0, #7
 801504e:	bf9a      	itte	ls
 8015050:	4b02      	ldrls	r3, [pc, #8]	; (801505c <rmw_namespace_validation_result_string+0x10>)
 8015052:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015056:	4802      	ldrhi	r0, [pc, #8]	; (8015060 <rmw_namespace_validation_result_string+0x14>)
 8015058:	4770      	bx	lr
 801505a:	bf00      	nop
 801505c:	08019ecc 	.word	0x08019ecc
 8015060:	08019d24 	.word	0x08019d24

08015064 <rmw_validate_node_name>:
 8015064:	2800      	cmp	r0, #0
 8015066:	d03b      	beq.n	80150e0 <rmw_validate_node_name+0x7c>
 8015068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801506c:	460f      	mov	r7, r1
 801506e:	2900      	cmp	r1, #0
 8015070:	d038      	beq.n	80150e4 <rmw_validate_node_name+0x80>
 8015072:	4615      	mov	r5, r2
 8015074:	4604      	mov	r4, r0
 8015076:	f7eb f8bd 	bl	80001f4 <strlen>
 801507a:	b1e0      	cbz	r0, 80150b6 <rmw_validate_node_name+0x52>
 801507c:	1e63      	subs	r3, r4, #1
 801507e:	eb03 0e00 	add.w	lr, r3, r0
 8015082:	f1c4 0c01 	rsb	ip, r4, #1
 8015086:	eb0c 0803 	add.w	r8, ip, r3
 801508a:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 801508e:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8015092:	f026 0220 	bic.w	r2, r6, #32
 8015096:	2909      	cmp	r1, #9
 8015098:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 801509c:	d913      	bls.n	80150c6 <rmw_validate_node_name+0x62>
 801509e:	2a19      	cmp	r2, #25
 80150a0:	d911      	bls.n	80150c6 <rmw_validate_node_name+0x62>
 80150a2:	2e5f      	cmp	r6, #95	; 0x5f
 80150a4:	d00f      	beq.n	80150c6 <rmw_validate_node_name+0x62>
 80150a6:	2302      	movs	r3, #2
 80150a8:	603b      	str	r3, [r7, #0]
 80150aa:	b10d      	cbz	r5, 80150b0 <rmw_validate_node_name+0x4c>
 80150ac:	f8c5 8000 	str.w	r8, [r5]
 80150b0:	2000      	movs	r0, #0
 80150b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150b6:	2301      	movs	r3, #1
 80150b8:	603b      	str	r3, [r7, #0]
 80150ba:	2d00      	cmp	r5, #0
 80150bc:	d0f8      	beq.n	80150b0 <rmw_validate_node_name+0x4c>
 80150be:	2000      	movs	r0, #0
 80150c0:	6028      	str	r0, [r5, #0]
 80150c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150c6:	4573      	cmp	r3, lr
 80150c8:	d1dd      	bne.n	8015086 <rmw_validate_node_name+0x22>
 80150ca:	7822      	ldrb	r2, [r4, #0]
 80150cc:	4b0d      	ldr	r3, [pc, #52]	; (8015104 <rmw_validate_node_name+0xa0>)
 80150ce:	5cd3      	ldrb	r3, [r2, r3]
 80150d0:	f013 0304 	ands.w	r3, r3, #4
 80150d4:	d110      	bne.n	80150f8 <rmw_validate_node_name+0x94>
 80150d6:	28ff      	cmp	r0, #255	; 0xff
 80150d8:	d806      	bhi.n	80150e8 <rmw_validate_node_name+0x84>
 80150da:	603b      	str	r3, [r7, #0]
 80150dc:	4618      	mov	r0, r3
 80150de:	e7e8      	b.n	80150b2 <rmw_validate_node_name+0x4e>
 80150e0:	200b      	movs	r0, #11
 80150e2:	4770      	bx	lr
 80150e4:	200b      	movs	r0, #11
 80150e6:	e7e4      	b.n	80150b2 <rmw_validate_node_name+0x4e>
 80150e8:	2204      	movs	r2, #4
 80150ea:	603a      	str	r2, [r7, #0]
 80150ec:	2d00      	cmp	r5, #0
 80150ee:	d0df      	beq.n	80150b0 <rmw_validate_node_name+0x4c>
 80150f0:	22fe      	movs	r2, #254	; 0xfe
 80150f2:	4618      	mov	r0, r3
 80150f4:	602a      	str	r2, [r5, #0]
 80150f6:	e7dc      	b.n	80150b2 <rmw_validate_node_name+0x4e>
 80150f8:	2303      	movs	r3, #3
 80150fa:	603b      	str	r3, [r7, #0]
 80150fc:	2d00      	cmp	r5, #0
 80150fe:	d1de      	bne.n	80150be <rmw_validate_node_name+0x5a>
 8015100:	e7d6      	b.n	80150b0 <rmw_validate_node_name+0x4c>
 8015102:	bf00      	nop
 8015104:	0801a290 	.word	0x0801a290

08015108 <rmw_node_name_validation_result_string>:
 8015108:	2804      	cmp	r0, #4
 801510a:	bf9a      	itte	ls
 801510c:	4b02      	ldrls	r3, [pc, #8]	; (8015118 <rmw_node_name_validation_result_string+0x10>)
 801510e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015112:	4802      	ldrhi	r0, [pc, #8]	; (801511c <rmw_node_name_validation_result_string+0x14>)
 8015114:	4770      	bx	lr
 8015116:	bf00      	nop
 8015118:	08019fd8 	.word	0x08019fd8
 801511c:	08019eec 	.word	0x08019eec

08015120 <get_memory>:
 8015120:	4603      	mov	r3, r0
 8015122:	6840      	ldr	r0, [r0, #4]
 8015124:	b158      	cbz	r0, 801513e <get_memory+0x1e>
 8015126:	6882      	ldr	r2, [r0, #8]
 8015128:	605a      	str	r2, [r3, #4]
 801512a:	b10a      	cbz	r2, 8015130 <get_memory+0x10>
 801512c:	2100      	movs	r1, #0
 801512e:	6051      	str	r1, [r2, #4]
 8015130:	681a      	ldr	r2, [r3, #0]
 8015132:	6082      	str	r2, [r0, #8]
 8015134:	b102      	cbz	r2, 8015138 <get_memory+0x18>
 8015136:	6050      	str	r0, [r2, #4]
 8015138:	2200      	movs	r2, #0
 801513a:	6042      	str	r2, [r0, #4]
 801513c:	6018      	str	r0, [r3, #0]
 801513e:	4770      	bx	lr

08015140 <put_memory>:
 8015140:	684b      	ldr	r3, [r1, #4]
 8015142:	b10b      	cbz	r3, 8015148 <put_memory+0x8>
 8015144:	688a      	ldr	r2, [r1, #8]
 8015146:	609a      	str	r2, [r3, #8]
 8015148:	688a      	ldr	r2, [r1, #8]
 801514a:	b102      	cbz	r2, 801514e <put_memory+0xe>
 801514c:	6053      	str	r3, [r2, #4]
 801514e:	6803      	ldr	r3, [r0, #0]
 8015150:	428b      	cmp	r3, r1
 8015152:	6843      	ldr	r3, [r0, #4]
 8015154:	bf08      	it	eq
 8015156:	6002      	streq	r2, [r0, #0]
 8015158:	608b      	str	r3, [r1, #8]
 801515a:	b103      	cbz	r3, 801515e <put_memory+0x1e>
 801515c:	6059      	str	r1, [r3, #4]
 801515e:	2300      	movs	r3, #0
 8015160:	604b      	str	r3, [r1, #4]
 8015162:	6041      	str	r1, [r0, #4]
 8015164:	4770      	bx	lr
 8015166:	bf00      	nop

08015168 <rmw_destroy_client>:
 8015168:	b570      	push	{r4, r5, r6, lr}
 801516a:	b128      	cbz	r0, 8015178 <rmw_destroy_client+0x10>
 801516c:	4604      	mov	r4, r0
 801516e:	6800      	ldr	r0, [r0, #0]
 8015170:	460d      	mov	r5, r1
 8015172:	f7f9 fc3d 	bl	800e9f0 <is_uxrce_rmw_identifier_valid>
 8015176:	b910      	cbnz	r0, 801517e <rmw_destroy_client+0x16>
 8015178:	2401      	movs	r4, #1
 801517a:	4620      	mov	r0, r4
 801517c:	bd70      	pop	{r4, r5, r6, pc}
 801517e:	6863      	ldr	r3, [r4, #4]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d0f9      	beq.n	8015178 <rmw_destroy_client+0x10>
 8015184:	2d00      	cmp	r5, #0
 8015186:	d0f7      	beq.n	8015178 <rmw_destroy_client+0x10>
 8015188:	6828      	ldr	r0, [r5, #0]
 801518a:	f7f9 fc31 	bl	800e9f0 <is_uxrce_rmw_identifier_valid>
 801518e:	2800      	cmp	r0, #0
 8015190:	d0f2      	beq.n	8015178 <rmw_destroy_client+0x10>
 8015192:	686e      	ldr	r6, [r5, #4]
 8015194:	2e00      	cmp	r6, #0
 8015196:	d0ef      	beq.n	8015178 <rmw_destroy_client+0x10>
 8015198:	6864      	ldr	r4, [r4, #4]
 801519a:	6932      	ldr	r2, [r6, #16]
 801519c:	6920      	ldr	r0, [r4, #16]
 801519e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80151a2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80151a6:	6819      	ldr	r1, [r3, #0]
 80151a8:	f7fa ff20 	bl	800ffec <uxr_buffer_cancel_data>
 80151ac:	4602      	mov	r2, r0
 80151ae:	6920      	ldr	r0, [r4, #16]
 80151b0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80151b4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80151b8:	f7f9 fb9a 	bl	800e8f0 <run_xrce_session>
 80151bc:	6920      	ldr	r0, [r4, #16]
 80151be:	6932      	ldr	r2, [r6, #16]
 80151c0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80151c4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80151c8:	6819      	ldr	r1, [r3, #0]
 80151ca:	f7fa fca5 	bl	800fb18 <uxr_buffer_delete_entity>
 80151ce:	4602      	mov	r2, r0
 80151d0:	6920      	ldr	r0, [r4, #16]
 80151d2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80151d6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80151da:	f7f9 fb89 	bl	800e8f0 <run_xrce_session>
 80151de:	2800      	cmp	r0, #0
 80151e0:	4628      	mov	r0, r5
 80151e2:	bf14      	ite	ne
 80151e4:	2400      	movne	r4, #0
 80151e6:	2402      	moveq	r4, #2
 80151e8:	f7f9 fa72 	bl	800e6d0 <rmw_uxrce_fini_client_memory>
 80151ec:	e7c5      	b.n	801517a <rmw_destroy_client+0x12>
 80151ee:	bf00      	nop

080151f0 <rmw_get_implementation_identifier>:
 80151f0:	4b01      	ldr	r3, [pc, #4]	; (80151f8 <rmw_get_implementation_identifier+0x8>)
 80151f2:	6818      	ldr	r0, [r3, #0]
 80151f4:	4770      	bx	lr
 80151f6:	bf00      	nop
 80151f8:	0801a004 	.word	0x0801a004

080151fc <rmw_init_options_init>:
 80151fc:	b084      	sub	sp, #16
 80151fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015202:	ad09      	add	r5, sp, #36	; 0x24
 8015204:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015208:	b130      	cbz	r0, 8015218 <rmw_init_options_init+0x1c>
 801520a:	4604      	mov	r4, r0
 801520c:	4628      	mov	r0, r5
 801520e:	f7f8 fb3d 	bl	800d88c <rcutils_allocator_is_valid>
 8015212:	b108      	cbz	r0, 8015218 <rmw_init_options_init+0x1c>
 8015214:	68a3      	ldr	r3, [r4, #8]
 8015216:	b123      	cbz	r3, 8015222 <rmw_init_options_init+0x26>
 8015218:	200b      	movs	r0, #11
 801521a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801521e:	b004      	add	sp, #16
 8015220:	4770      	bx	lr
 8015222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015224:	4f1c      	ldr	r7, [pc, #112]	; (8015298 <rmw_init_options_init+0x9c>)
 8015226:	682e      	ldr	r6, [r5, #0]
 8015228:	683d      	ldr	r5, [r7, #0]
 801522a:	60a5      	str	r5, [r4, #8]
 801522c:	f04f 0800 	mov.w	r8, #0
 8015230:	f04f 0900 	mov.w	r9, #0
 8015234:	f104 0520 	add.w	r5, r4, #32
 8015238:	e9c4 8900 	strd	r8, r9, [r4]
 801523c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801523e:	4b17      	ldr	r3, [pc, #92]	; (801529c <rmw_init_options_init+0xa0>)
 8015240:	4817      	ldr	r0, [pc, #92]	; (80152a0 <rmw_init_options_init+0xa4>)
 8015242:	602e      	str	r6, [r5, #0]
 8015244:	4917      	ldr	r1, [pc, #92]	; (80152a4 <rmw_init_options_init+0xa8>)
 8015246:	61e3      	str	r3, [r4, #28]
 8015248:	2203      	movs	r2, #3
 801524a:	f7f9 f991 	bl	800e570 <rmw_uxrce_init_init_options_impl_memory>
 801524e:	4814      	ldr	r0, [pc, #80]	; (80152a0 <rmw_init_options_init+0xa4>)
 8015250:	f7ff ff66 	bl	8015120 <get_memory>
 8015254:	b1e8      	cbz	r0, 8015292 <rmw_init_options_init+0x96>
 8015256:	4a14      	ldr	r2, [pc, #80]	; (80152a8 <rmw_init_options_init+0xac>)
 8015258:	68c3      	ldr	r3, [r0, #12]
 801525a:	6851      	ldr	r1, [r2, #4]
 801525c:	7810      	ldrb	r0, [r2, #0]
 801525e:	6363      	str	r3, [r4, #52]	; 0x34
 8015260:	7418      	strb	r0, [r3, #16]
 8015262:	6159      	str	r1, [r3, #20]
 8015264:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 8015268:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 801526c:	e9c3 5006 	strd	r5, r0, [r3, #24]
 8015270:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8015274:	f7fc f9e8 	bl	8011648 <uxr_nanos>
 8015278:	f002 fdd4 	bl	8017e24 <srand>
 801527c:	f002 fe00 	bl	8017e80 <rand>
 8015280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015282:	6298      	str	r0, [r3, #40]	; 0x28
 8015284:	2800      	cmp	r0, #0
 8015286:	d0f9      	beq.n	801527c <rmw_init_options_init+0x80>
 8015288:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801528c:	2000      	movs	r0, #0
 801528e:	b004      	add	sp, #16
 8015290:	4770      	bx	lr
 8015292:	2001      	movs	r0, #1
 8015294:	e7c1      	b.n	801521a <rmw_init_options_init+0x1e>
 8015296:	bf00      	nop
 8015298:	0801a004 	.word	0x0801a004
 801529c:	08019b78 	.word	0x08019b78
 80152a0:	2000d1bc 	.word	0x2000d1bc
 80152a4:	2000ce10 	.word	0x2000ce10
 80152a8:	20009ea0 	.word	0x20009ea0

080152ac <rmw_init_options_copy>:
 80152ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ae:	b158      	cbz	r0, 80152c8 <rmw_init_options_copy+0x1c>
 80152b0:	460e      	mov	r6, r1
 80152b2:	b149      	cbz	r1, 80152c8 <rmw_init_options_copy+0x1c>
 80152b4:	4604      	mov	r4, r0
 80152b6:	6880      	ldr	r0, [r0, #8]
 80152b8:	b120      	cbz	r0, 80152c4 <rmw_init_options_copy+0x18>
 80152ba:	4b1b      	ldr	r3, [pc, #108]	; (8015328 <rmw_init_options_copy+0x7c>)
 80152bc:	6819      	ldr	r1, [r3, #0]
 80152be:	f7ea ff8f 	bl	80001e0 <strcmp>
 80152c2:	bb60      	cbnz	r0, 801531e <rmw_init_options_copy+0x72>
 80152c4:	68b3      	ldr	r3, [r6, #8]
 80152c6:	b113      	cbz	r3, 80152ce <rmw_init_options_copy+0x22>
 80152c8:	230b      	movs	r3, #11
 80152ca:	4618      	mov	r0, r3
 80152cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152ce:	4623      	mov	r3, r4
 80152d0:	4632      	mov	r2, r6
 80152d2:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80152d6:	681d      	ldr	r5, [r3, #0]
 80152d8:	6858      	ldr	r0, [r3, #4]
 80152da:	6899      	ldr	r1, [r3, #8]
 80152dc:	68df      	ldr	r7, [r3, #12]
 80152de:	60d7      	str	r7, [r2, #12]
 80152e0:	3310      	adds	r3, #16
 80152e2:	4563      	cmp	r3, ip
 80152e4:	6015      	str	r5, [r2, #0]
 80152e6:	6050      	str	r0, [r2, #4]
 80152e8:	6091      	str	r1, [r2, #8]
 80152ea:	f102 0210 	add.w	r2, r2, #16
 80152ee:	d1f2      	bne.n	80152d6 <rmw_init_options_copy+0x2a>
 80152f0:	6819      	ldr	r1, [r3, #0]
 80152f2:	685b      	ldr	r3, [r3, #4]
 80152f4:	480d      	ldr	r0, [pc, #52]	; (801532c <rmw_init_options_copy+0x80>)
 80152f6:	6053      	str	r3, [r2, #4]
 80152f8:	6011      	str	r1, [r2, #0]
 80152fa:	f7ff ff11 	bl	8015120 <get_memory>
 80152fe:	b188      	cbz	r0, 8015324 <rmw_init_options_copy+0x78>
 8015300:	68c5      	ldr	r5, [r0, #12]
 8015302:	6375      	str	r5, [r6, #52]	; 0x34
 8015304:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8015306:	3610      	adds	r6, #16
 8015308:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801530a:	f105 0410 	add.w	r4, r5, #16
 801530e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015310:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015314:	2300      	movs	r3, #0
 8015316:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801531a:	4618      	mov	r0, r3
 801531c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801531e:	230c      	movs	r3, #12
 8015320:	4618      	mov	r0, r3
 8015322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015324:	2301      	movs	r3, #1
 8015326:	e7d0      	b.n	80152ca <rmw_init_options_copy+0x1e>
 8015328:	0801a004 	.word	0x0801a004
 801532c:	2000d1bc 	.word	0x2000d1bc

08015330 <rmw_init_options_fini>:
 8015330:	2800      	cmp	r0, #0
 8015332:	d036      	beq.n	80153a2 <rmw_init_options_fini+0x72>
 8015334:	b530      	push	{r4, r5, lr}
 8015336:	4604      	mov	r4, r0
 8015338:	b08f      	sub	sp, #60	; 0x3c
 801533a:	3020      	adds	r0, #32
 801533c:	f7f8 faa6 	bl	800d88c <rcutils_allocator_is_valid>
 8015340:	b328      	cbz	r0, 801538e <rmw_init_options_fini+0x5e>
 8015342:	68a0      	ldr	r0, [r4, #8]
 8015344:	b120      	cbz	r0, 8015350 <rmw_init_options_fini+0x20>
 8015346:	4b18      	ldr	r3, [pc, #96]	; (80153a8 <rmw_init_options_fini+0x78>)
 8015348:	6819      	ldr	r1, [r3, #0]
 801534a:	f7ea ff49 	bl	80001e0 <strcmp>
 801534e:	bb30      	cbnz	r0, 801539e <rmw_init_options_fini+0x6e>
 8015350:	4b16      	ldr	r3, [pc, #88]	; (80153ac <rmw_init_options_fini+0x7c>)
 8015352:	6819      	ldr	r1, [r3, #0]
 8015354:	b1f9      	cbz	r1, 8015396 <rmw_init_options_fini+0x66>
 8015356:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015358:	e001      	b.n	801535e <rmw_init_options_fini+0x2e>
 801535a:	6889      	ldr	r1, [r1, #8]
 801535c:	b1d9      	cbz	r1, 8015396 <rmw_init_options_fini+0x66>
 801535e:	68cb      	ldr	r3, [r1, #12]
 8015360:	429a      	cmp	r2, r3
 8015362:	d1fa      	bne.n	801535a <rmw_init_options_fini+0x2a>
 8015364:	4811      	ldr	r0, [pc, #68]	; (80153ac <rmw_init_options_fini+0x7c>)
 8015366:	f7ff feeb 	bl	8015140 <put_memory>
 801536a:	466d      	mov	r5, sp
 801536c:	4668      	mov	r0, sp
 801536e:	f7ff fdf9 	bl	8014f64 <rmw_get_zero_initialized_init_options>
 8015372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801537a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801537c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801537e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015382:	e884 0003 	stmia.w	r4, {r0, r1}
 8015386:	2300      	movs	r3, #0
 8015388:	4618      	mov	r0, r3
 801538a:	b00f      	add	sp, #60	; 0x3c
 801538c:	bd30      	pop	{r4, r5, pc}
 801538e:	230b      	movs	r3, #11
 8015390:	4618      	mov	r0, r3
 8015392:	b00f      	add	sp, #60	; 0x3c
 8015394:	bd30      	pop	{r4, r5, pc}
 8015396:	2301      	movs	r3, #1
 8015398:	4618      	mov	r0, r3
 801539a:	b00f      	add	sp, #60	; 0x3c
 801539c:	bd30      	pop	{r4, r5, pc}
 801539e:	230c      	movs	r3, #12
 80153a0:	e7f2      	b.n	8015388 <rmw_init_options_fini+0x58>
 80153a2:	230b      	movs	r3, #11
 80153a4:	4618      	mov	r0, r3
 80153a6:	4770      	bx	lr
 80153a8:	0801a004 	.word	0x0801a004
 80153ac:	2000d1bc 	.word	0x2000d1bc

080153b0 <rmw_init>:
 80153b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153b4:	b082      	sub	sp, #8
 80153b6:	2800      	cmp	r0, #0
 80153b8:	f000 80d6 	beq.w	8015568 <rmw_init+0x1b8>
 80153bc:	460e      	mov	r6, r1
 80153be:	2900      	cmp	r1, #0
 80153c0:	f000 80d2 	beq.w	8015568 <rmw_init+0x1b8>
 80153c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80153c6:	4605      	mov	r5, r0
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	f000 80cd 	beq.w	8015568 <rmw_init+0x1b8>
 80153ce:	4b79      	ldr	r3, [pc, #484]	; (80155b4 <rmw_init+0x204>)
 80153d0:	6880      	ldr	r0, [r0, #8]
 80153d2:	f8d3 9000 	ldr.w	r9, [r3]
 80153d6:	b128      	cbz	r0, 80153e4 <rmw_init+0x34>
 80153d8:	4649      	mov	r1, r9
 80153da:	f7ea ff01 	bl	80001e0 <strcmp>
 80153de:	2800      	cmp	r0, #0
 80153e0:	f040 80cc 	bne.w	801557c <rmw_init+0x1cc>
 80153e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80153e8:	68eb      	ldr	r3, [r5, #12]
 80153ea:	61f3      	str	r3, [r6, #28]
 80153ec:	e9c6 0100 	strd	r0, r1, [r6]
 80153f0:	2201      	movs	r2, #1
 80153f2:	4971      	ldr	r1, [pc, #452]	; (80155b8 <rmw_init+0x208>)
 80153f4:	4871      	ldr	r0, [pc, #452]	; (80155bc <rmw_init+0x20c>)
 80153f6:	f8c6 9008 	str.w	r9, [r6, #8]
 80153fa:	f7f9 f861 	bl	800e4c0 <rmw_uxrce_init_session_memory>
 80153fe:	4870      	ldr	r0, [pc, #448]	; (80155c0 <rmw_init+0x210>)
 8015400:	4970      	ldr	r1, [pc, #448]	; (80155c4 <rmw_init+0x214>)
 8015402:	2204      	movs	r2, #4
 8015404:	f7f9 f896 	bl	800e534 <rmw_uxrce_init_static_input_buffer_memory>
 8015408:	486c      	ldr	r0, [pc, #432]	; (80155bc <rmw_init+0x20c>)
 801540a:	f7ff fe89 	bl	8015120 <get_memory>
 801540e:	2800      	cmp	r0, #0
 8015410:	f000 80af 	beq.w	8015572 <rmw_init+0x1c2>
 8015414:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8015416:	68c4      	ldr	r4, [r0, #12]
 8015418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801541a:	7c39      	ldrb	r1, [r7, #16]
 801541c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015420:	9001      	str	r0, [sp, #4]
 8015422:	6a38      	ldr	r0, [r7, #32]
 8015424:	9000      	str	r0, [sp, #0]
 8015426:	f104 0a10 	add.w	sl, r4, #16
 801542a:	4650      	mov	r0, sl
 801542c:	f000 ffe8 	bl	8016400 <uxr_set_custom_transport_callbacks>
 8015430:	f241 5294 	movw	r2, #5524	; 0x1594
 8015434:	f241 5398 	movw	r3, #5528	; 0x1598
 8015438:	f04f 0800 	mov.w	r8, #0
 801543c:	f241 509c 	movw	r0, #5532	; 0x159c
 8015440:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 8015444:	f844 8002 	str.w	r8, [r4, r2]
 8015448:	f844 8003 	str.w	r8, [r4, r3]
 801544c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015450:	f504 735e 	add.w	r3, r4, #888	; 0x378
 8015454:	f844 8000 	str.w	r8, [r4, r0]
 8015458:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 801545c:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8015460:	4859      	ldr	r0, [pc, #356]	; (80155c8 <rmw_init+0x218>)
 8015462:	f8c1 8000 	str.w	r8, [r1]
 8015466:	2201      	movs	r2, #1
 8015468:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 801546c:	4957      	ldr	r1, [pc, #348]	; (80155cc <rmw_init+0x21c>)
 801546e:	64b4      	str	r4, [r6, #72]	; 0x48
 8015470:	f7f9 f80c 	bl	800e48c <rmw_uxrce_init_node_memory>
 8015474:	4956      	ldr	r1, [pc, #344]	; (80155d0 <rmw_init+0x220>)
 8015476:	4857      	ldr	r0, [pc, #348]	; (80155d4 <rmw_init+0x224>)
 8015478:	2205      	movs	r2, #5
 801547a:	f7f8 ffed 	bl	800e458 <rmw_uxrce_init_subscription_memory>
 801547e:	4956      	ldr	r1, [pc, #344]	; (80155d8 <rmw_init+0x228>)
 8015480:	4856      	ldr	r0, [pc, #344]	; (80155dc <rmw_init+0x22c>)
 8015482:	220a      	movs	r2, #10
 8015484:	f7f8 ffce 	bl	800e424 <rmw_uxrce_init_publisher_memory>
 8015488:	4955      	ldr	r1, [pc, #340]	; (80155e0 <rmw_init+0x230>)
 801548a:	4856      	ldr	r0, [pc, #344]	; (80155e4 <rmw_init+0x234>)
 801548c:	2201      	movs	r2, #1
 801548e:	f7f8 ff95 	bl	800e3bc <rmw_uxrce_init_service_memory>
 8015492:	4955      	ldr	r1, [pc, #340]	; (80155e8 <rmw_init+0x238>)
 8015494:	4855      	ldr	r0, [pc, #340]	; (80155ec <rmw_init+0x23c>)
 8015496:	2201      	movs	r2, #1
 8015498:	f7f8 ffaa 	bl	800e3f0 <rmw_uxrce_init_client_memory>
 801549c:	4954      	ldr	r1, [pc, #336]	; (80155f0 <rmw_init+0x240>)
 801549e:	4855      	ldr	r0, [pc, #340]	; (80155f4 <rmw_init+0x244>)
 80154a0:	220f      	movs	r2, #15
 80154a2:	f7f9 f82b 	bl	800e4fc <rmw_uxrce_init_topic_memory>
 80154a6:	4954      	ldr	r1, [pc, #336]	; (80155f8 <rmw_init+0x248>)
 80154a8:	4854      	ldr	r0, [pc, #336]	; (80155fc <rmw_init+0x24c>)
 80154aa:	2203      	movs	r2, #3
 80154ac:	f7f9 f860 	bl	800e570 <rmw_uxrce_init_init_options_impl_memory>
 80154b0:	4953      	ldr	r1, [pc, #332]	; (8015600 <rmw_init+0x250>)
 80154b2:	4854      	ldr	r0, [pc, #336]	; (8015604 <rmw_init+0x254>)
 80154b4:	2204      	movs	r2, #4
 80154b6:	f7f9 f875 	bl	800e5a4 <rmw_uxrce_init_wait_set_memory>
 80154ba:	4953      	ldr	r1, [pc, #332]	; (8015608 <rmw_init+0x258>)
 80154bc:	4853      	ldr	r0, [pc, #332]	; (801560c <rmw_init+0x25c>)
 80154be:	2204      	movs	r2, #4
 80154c0:	f7f9 f88c 	bl	800e5dc <rmw_uxrce_init_guard_condition_memory>
 80154c4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80154c6:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 80154c8:	4642      	mov	r2, r8
 80154ca:	f000 fbbd 	bl	8015c48 <rmw_uxrce_transport_init>
 80154ce:	4607      	mov	r7, r0
 80154d0:	2800      	cmp	r0, #0
 80154d2:	d158      	bne.n	8015586 <rmw_init+0x1d6>
 80154d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80154d6:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80154da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80154dc:	4628      	mov	r0, r5
 80154de:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80154e2:	f7fa fefd 	bl	80102e0 <uxr_init_session>
 80154e6:	494a      	ldr	r1, [pc, #296]	; (8015610 <rmw_init+0x260>)
 80154e8:	4622      	mov	r2, r4
 80154ea:	4628      	mov	r0, r5
 80154ec:	f7fa ff1a 	bl	8010324 <uxr_set_topic_callback>
 80154f0:	4948      	ldr	r1, [pc, #288]	; (8015614 <rmw_init+0x264>)
 80154f2:	463a      	mov	r2, r7
 80154f4:	4628      	mov	r0, r5
 80154f6:	f7fa ff11 	bl	801031c <uxr_set_status_callback>
 80154fa:	4947      	ldr	r1, [pc, #284]	; (8015618 <rmw_init+0x268>)
 80154fc:	463a      	mov	r2, r7
 80154fe:	4628      	mov	r0, r5
 8015500:	f7fa ff14 	bl	801032c <uxr_set_request_callback>
 8015504:	4945      	ldr	r1, [pc, #276]	; (801561c <rmw_init+0x26c>)
 8015506:	463a      	mov	r2, r7
 8015508:	4628      	mov	r0, r5
 801550a:	f7fa ff13 	bl	8010334 <uxr_set_reply_callback>
 801550e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015512:	2304      	movs	r3, #4
 8015514:	0092      	lsls	r2, r2, #2
 8015516:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801551a:	4628      	mov	r0, r5
 801551c:	f7fa ff4a 	bl	80103b4 <uxr_create_input_reliable_stream>
 8015520:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015524:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8015528:	0092      	lsls	r2, r2, #2
 801552a:	2304      	movs	r3, #4
 801552c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8015530:	4628      	mov	r0, r5
 8015532:	f7fa ff15 	bl	8010360 <uxr_create_output_reliable_stream>
 8015536:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 801553a:	4628      	mov	r0, r5
 801553c:	f7fa ff34 	bl	80103a8 <uxr_create_input_best_effort_stream>
 8015540:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8015544:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8015548:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801554c:	4628      	mov	r0, r5
 801554e:	3114      	adds	r1, #20
 8015550:	f7fa fef4 	bl	801033c <uxr_create_output_best_effort_stream>
 8015554:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8015558:	4628      	mov	r0, r5
 801555a:	f7fb fb85 	bl	8010c68 <uxr_create_session>
 801555e:	b1f8      	cbz	r0, 80155a0 <rmw_init+0x1f0>
 8015560:	4638      	mov	r0, r7
 8015562:	b002      	add	sp, #8
 8015564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015568:	270b      	movs	r7, #11
 801556a:	4638      	mov	r0, r7
 801556c:	b002      	add	sp, #8
 801556e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015572:	2701      	movs	r7, #1
 8015574:	4638      	mov	r0, r7
 8015576:	b002      	add	sp, #8
 8015578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801557c:	270c      	movs	r7, #12
 801557e:	4638      	mov	r0, r7
 8015580:	b002      	add	sp, #8
 8015582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015586:	4650      	mov	r0, sl
 8015588:	f000 ff7a 	bl	8016480 <uxr_close_custom_transport>
 801558c:	480b      	ldr	r0, [pc, #44]	; (80155bc <rmw_init+0x20c>)
 801558e:	4621      	mov	r1, r4
 8015590:	f7ff fdd6 	bl	8015140 <put_memory>
 8015594:	4638      	mov	r0, r7
 8015596:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 801559a:	b002      	add	sp, #8
 801559c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155a0:	4650      	mov	r0, sl
 80155a2:	f000 ff6d 	bl	8016480 <uxr_close_custom_transport>
 80155a6:	4805      	ldr	r0, [pc, #20]	; (80155bc <rmw_init+0x20c>)
 80155a8:	4621      	mov	r1, r4
 80155aa:	f7ff fdc9 	bl	8015140 <put_memory>
 80155ae:	64b7      	str	r7, [r6, #72]	; 0x48
 80155b0:	2701      	movs	r7, #1
 80155b2:	e7d5      	b.n	8015560 <rmw_init+0x1b0>
 80155b4:	0801a004 	.word	0x0801a004
 80155b8:	2000d298 	.word	0x2000d298
 80155bc:	2000d068 	.word	0x2000d068
 80155c0:	20009ec0 	.word	0x20009ec0
 80155c4:	2000aca0 	.word	0x2000aca0
 80155c8:	2000ce94 	.word	0x2000ce94
 80155cc:	2000d078 	.word	0x2000d078
 80155d0:	2000a7c8 	.word	0x2000a7c8
 80155d4:	2000d12c 	.word	0x2000d12c
 80155d8:	20009ee0 	.word	0x20009ee0
 80155dc:	20009ed0 	.word	0x20009ed0
 80155e0:	2000d1d0 	.word	0x2000d1d0
 80155e4:	2000d11c 	.word	0x2000d11c
 80155e8:	2000abd8 	.word	0x2000abd8
 80155ec:	2000a750 	.word	0x2000a750
 80155f0:	2000cea4 	.word	0x2000cea4
 80155f4:	2000d058 	.word	0x2000d058
 80155f8:	2000ce10 	.word	0x2000ce10
 80155fc:	2000d1bc 	.word	0x2000d1bc
 8015600:	2000cda0 	.word	0x2000cda0
 8015604:	2000e840 	.word	0x2000e840
 8015608:	2000d13c 	.word	0x2000d13c
 801560c:	2000d048 	.word	0x2000d048
 8015610:	080179d1 	.word	0x080179d1
 8015614:	080179c9 	.word	0x080179c9
 8015618:	08017a65 	.word	0x08017a65
 801561c:	08017afd 	.word	0x08017afd

08015620 <rmw_context_fini>:
 8015620:	4b17      	ldr	r3, [pc, #92]	; (8015680 <rmw_context_fini+0x60>)
 8015622:	b570      	push	{r4, r5, r6, lr}
 8015624:	681c      	ldr	r4, [r3, #0]
 8015626:	4605      	mov	r5, r0
 8015628:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801562a:	b33c      	cbz	r4, 801567c <rmw_context_fini+0x5c>
 801562c:	2600      	movs	r6, #0
 801562e:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 8015632:	691a      	ldr	r2, [r3, #16]
 8015634:	4282      	cmp	r2, r0
 8015636:	d018      	beq.n	801566a <rmw_context_fini+0x4a>
 8015638:	2c00      	cmp	r4, #0
 801563a:	d1f8      	bne.n	801562e <rmw_context_fini+0xe>
 801563c:	b188      	cbz	r0, 8015662 <rmw_context_fini+0x42>
 801563e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015642:	789b      	ldrb	r3, [r3, #2]
 8015644:	2b01      	cmp	r3, #1
 8015646:	bf14      	ite	ne
 8015648:	210a      	movne	r1, #10
 801564a:	2100      	moveq	r1, #0
 801564c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015650:	f7fb fccc 	bl	8010fec <uxr_delete_session_retries>
 8015654:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8015656:	f7f8 ffdb 	bl	800e610 <rmw_uxrce_fini_session_memory>
 801565a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801565c:	3010      	adds	r0, #16
 801565e:	f000 ff0f 	bl	8016480 <uxr_close_custom_transport>
 8015662:	2300      	movs	r3, #0
 8015664:	4630      	mov	r0, r6
 8015666:	64ab      	str	r3, [r5, #72]	; 0x48
 8015668:	bd70      	pop	{r4, r5, r6, pc}
 801566a:	f103 0018 	add.w	r0, r3, #24
 801566e:	f000 f91f 	bl	80158b0 <rmw_destroy_node>
 8015672:	4606      	mov	r6, r0
 8015674:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8015676:	2c00      	cmp	r4, #0
 8015678:	d1d9      	bne.n	801562e <rmw_context_fini+0xe>
 801567a:	e7df      	b.n	801563c <rmw_context_fini+0x1c>
 801567c:	4626      	mov	r6, r4
 801567e:	e7dd      	b.n	801563c <rmw_context_fini+0x1c>
 8015680:	2000ce94 	.word	0x2000ce94

08015684 <create_topic>:
 8015684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015688:	4605      	mov	r5, r0
 801568a:	b084      	sub	sp, #16
 801568c:	482b      	ldr	r0, [pc, #172]	; (801573c <create_topic+0xb8>)
 801568e:	460f      	mov	r7, r1
 8015690:	4616      	mov	r6, r2
 8015692:	f7ff fd45 	bl	8015120 <get_memory>
 8015696:	4604      	mov	r4, r0
 8015698:	2800      	cmp	r0, #0
 801569a:	d036      	beq.n	801570a <create_topic+0x86>
 801569c:	692a      	ldr	r2, [r5, #16]
 801569e:	68c4      	ldr	r4, [r0, #12]
 80156a0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8015744 <create_topic+0xc0>
 80156a4:	61a5      	str	r5, [r4, #24]
 80156a6:	f241 5396 	movw	r3, #5526	; 0x1596
 80156aa:	6166      	str	r6, [r4, #20]
 80156ac:	5ad0      	ldrh	r0, [r2, r3]
 80156ae:	1c41      	adds	r1, r0, #1
 80156b0:	52d1      	strh	r1, [r2, r3]
 80156b2:	2102      	movs	r1, #2
 80156b4:	f7fa fc32 	bl	800ff1c <uxr_object_id>
 80156b8:	4641      	mov	r1, r8
 80156ba:	6120      	str	r0, [r4, #16]
 80156bc:	223c      	movs	r2, #60	; 0x3c
 80156be:	4638      	mov	r0, r7
 80156c0:	f7f9 f97c 	bl	800e9bc <generate_topic_name>
 80156c4:	4607      	mov	r7, r0
 80156c6:	b320      	cbz	r0, 8015712 <create_topic+0x8e>
 80156c8:	4f1d      	ldr	r7, [pc, #116]	; (8015740 <create_topic+0xbc>)
 80156ca:	4630      	mov	r0, r6
 80156cc:	4639      	mov	r1, r7
 80156ce:	2264      	movs	r2, #100	; 0x64
 80156d0:	f7f9 f944 	bl	800e95c <generate_type_name>
 80156d4:	4606      	mov	r6, r0
 80156d6:	b320      	cbz	r0, 8015722 <create_topic+0x9e>
 80156d8:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 80156dc:	2106      	movs	r1, #6
 80156de:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80156e2:	9701      	str	r7, [sp, #4]
 80156e4:	f8cd 8000 	str.w	r8, [sp]
 80156e8:	9102      	str	r1, [sp, #8]
 80156ea:	6811      	ldr	r1, [r2, #0]
 80156ec:	6922      	ldr	r2, [r4, #16]
 80156ee:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80156f2:	f7fa fa8f 	bl	800fc14 <uxr_buffer_create_topic_bin>
 80156f6:	4602      	mov	r2, r0
 80156f8:	6928      	ldr	r0, [r5, #16]
 80156fa:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80156fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015702:	f7f9 f8f5 	bl	800e8f0 <run_xrce_session>
 8015706:	4605      	mov	r5, r0
 8015708:	b198      	cbz	r0, 8015732 <create_topic+0xae>
 801570a:	4620      	mov	r0, r4
 801570c:	b004      	add	sp, #16
 801570e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015712:	4620      	mov	r0, r4
 8015714:	f7f8 fff2 	bl	800e6fc <rmw_uxrce_fini_topic_memory>
 8015718:	463c      	mov	r4, r7
 801571a:	4620      	mov	r0, r4
 801571c:	b004      	add	sp, #16
 801571e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015722:	4620      	mov	r0, r4
 8015724:	f7f8 ffea 	bl	800e6fc <rmw_uxrce_fini_topic_memory>
 8015728:	4634      	mov	r4, r6
 801572a:	4620      	mov	r0, r4
 801572c:	b004      	add	sp, #16
 801572e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015732:	4620      	mov	r0, r4
 8015734:	f7f8 ffe2 	bl	800e6fc <rmw_uxrce_fini_topic_memory>
 8015738:	462c      	mov	r4, r5
 801573a:	e7e6      	b.n	801570a <create_topic+0x86>
 801573c:	2000d058 	.word	0x2000d058
 8015740:	20009c80 	.word	0x20009c80
 8015744:	20009c44 	.word	0x20009c44

08015748 <destroy_topic>:
 8015748:	b538      	push	{r3, r4, r5, lr}
 801574a:	6985      	ldr	r5, [r0, #24]
 801574c:	b1d5      	cbz	r5, 8015784 <destroy_topic+0x3c>
 801574e:	4604      	mov	r4, r0
 8015750:	6928      	ldr	r0, [r5, #16]
 8015752:	6922      	ldr	r2, [r4, #16]
 8015754:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015758:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801575c:	6819      	ldr	r1, [r3, #0]
 801575e:	f7fa f9db 	bl	800fb18 <uxr_buffer_delete_entity>
 8015762:	4602      	mov	r2, r0
 8015764:	6928      	ldr	r0, [r5, #16]
 8015766:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801576a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801576e:	f7f9 f8bf 	bl	800e8f0 <run_xrce_session>
 8015772:	2800      	cmp	r0, #0
 8015774:	4620      	mov	r0, r4
 8015776:	bf14      	ite	ne
 8015778:	2400      	movne	r4, #0
 801577a:	2402      	moveq	r4, #2
 801577c:	f7f8 ffbe 	bl	800e6fc <rmw_uxrce_fini_topic_memory>
 8015780:	4620      	mov	r0, r4
 8015782:	bd38      	pop	{r3, r4, r5, pc}
 8015784:	2401      	movs	r4, #1
 8015786:	4620      	mov	r0, r4
 8015788:	bd38      	pop	{r3, r4, r5, pc}
 801578a:	bf00      	nop

0801578c <create_node>:
 801578c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015790:	b083      	sub	sp, #12
 8015792:	2b00      	cmp	r3, #0
 8015794:	d05f      	beq.n	8015856 <create_node+0xca>
 8015796:	4606      	mov	r6, r0
 8015798:	4835      	ldr	r0, [pc, #212]	; (8015870 <create_node+0xe4>)
 801579a:	460f      	mov	r7, r1
 801579c:	4690      	mov	r8, r2
 801579e:	461d      	mov	r5, r3
 80157a0:	f7ff fcbe 	bl	8015120 <get_memory>
 80157a4:	2800      	cmp	r0, #0
 80157a6:	d056      	beq.n	8015856 <create_node+0xca>
 80157a8:	68c4      	ldr	r4, [r0, #12]
 80157aa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80157ac:	6123      	str	r3, [r4, #16]
 80157ae:	f7ff fd1f 	bl	80151f0 <rmw_get_implementation_identifier>
 80157b2:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80157b6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80157ba:	f8c4 9020 	str.w	r9, [r4, #32]
 80157be:	4630      	mov	r0, r6
 80157c0:	f7ea fd18 	bl	80001f4 <strlen>
 80157c4:	1c42      	adds	r2, r0, #1
 80157c6:	2a3c      	cmp	r2, #60	; 0x3c
 80157c8:	f104 0518 	add.w	r5, r4, #24
 80157cc:	d840      	bhi.n	8015850 <create_node+0xc4>
 80157ce:	4648      	mov	r0, r9
 80157d0:	4631      	mov	r1, r6
 80157d2:	f104 0968 	add.w	r9, r4, #104	; 0x68
 80157d6:	f003 f846 	bl	8018866 <memcpy>
 80157da:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80157de:	4638      	mov	r0, r7
 80157e0:	f7ea fd08 	bl	80001f4 <strlen>
 80157e4:	1c42      	adds	r2, r0, #1
 80157e6:	2a3c      	cmp	r2, #60	; 0x3c
 80157e8:	d832      	bhi.n	8015850 <create_node+0xc4>
 80157ea:	4639      	mov	r1, r7
 80157ec:	4648      	mov	r0, r9
 80157ee:	f003 f83a 	bl	8018866 <memcpy>
 80157f2:	f241 5394 	movw	r3, #5524	; 0x1594
 80157f6:	6922      	ldr	r2, [r4, #16]
 80157f8:	5ad0      	ldrh	r0, [r2, r3]
 80157fa:	2101      	movs	r1, #1
 80157fc:	eb00 0c01 	add.w	ip, r0, r1
 8015800:	f822 c003 	strh.w	ip, [r2, r3]
 8015804:	f7fa fb8a 	bl	800ff1c <uxr_object_id>
 8015808:	6160      	str	r0, [r4, #20]
 801580a:	783b      	ldrb	r3, [r7, #0]
 801580c:	2b2f      	cmp	r3, #47	; 0x2f
 801580e:	d127      	bne.n	8015860 <create_node+0xd4>
 8015810:	787b      	ldrb	r3, [r7, #1]
 8015812:	bb2b      	cbnz	r3, 8015860 <create_node+0xd4>
 8015814:	4a17      	ldr	r2, [pc, #92]	; (8015874 <create_node+0xe8>)
 8015816:	4818      	ldr	r0, [pc, #96]	; (8015878 <create_node+0xec>)
 8015818:	4633      	mov	r3, r6
 801581a:	213c      	movs	r1, #60	; 0x3c
 801581c:	f002 fda4 	bl	8018368 <sniprintf>
 8015820:	6920      	ldr	r0, [r4, #16]
 8015822:	4b15      	ldr	r3, [pc, #84]	; (8015878 <create_node+0xec>)
 8015824:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015828:	9300      	str	r3, [sp, #0]
 801582a:	2306      	movs	r3, #6
 801582c:	9301      	str	r3, [sp, #4]
 801582e:	6811      	ldr	r1, [r2, #0]
 8015830:	6962      	ldr	r2, [r4, #20]
 8015832:	fa1f f388 	uxth.w	r3, r8
 8015836:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801583a:	f7fa f9b9 	bl	800fbb0 <uxr_buffer_create_participant_bin>
 801583e:	4602      	mov	r2, r0
 8015840:	6920      	ldr	r0, [r4, #16]
 8015842:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015846:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801584a:	f7f9 f851 	bl	800e8f0 <run_xrce_session>
 801584e:	b918      	cbnz	r0, 8015858 <create_node+0xcc>
 8015850:	4628      	mov	r0, r5
 8015852:	f7f8 fee3 	bl	800e61c <rmw_uxrce_fini_node_memory>
 8015856:	2500      	movs	r5, #0
 8015858:	4628      	mov	r0, r5
 801585a:	b003      	add	sp, #12
 801585c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015860:	4a06      	ldr	r2, [pc, #24]	; (801587c <create_node+0xf0>)
 8015862:	9600      	str	r6, [sp, #0]
 8015864:	463b      	mov	r3, r7
 8015866:	213c      	movs	r1, #60	; 0x3c
 8015868:	4803      	ldr	r0, [pc, #12]	; (8015878 <create_node+0xec>)
 801586a:	f002 fd7d 	bl	8018368 <sniprintf>
 801586e:	e7d7      	b.n	8015820 <create_node+0x94>
 8015870:	2000ce94 	.word	0x2000ce94
 8015874:	08019afc 	.word	0x08019afc
 8015878:	20009ce4 	.word	0x20009ce4
 801587c:	08019b3c 	.word	0x08019b3c

08015880 <rmw_create_node>:
 8015880:	b199      	cbz	r1, 80158aa <rmw_create_node+0x2a>
 8015882:	b430      	push	{r4, r5}
 8015884:	4615      	mov	r5, r2
 8015886:	461a      	mov	r2, r3
 8015888:	780b      	ldrb	r3, [r1, #0]
 801588a:	460c      	mov	r4, r1
 801588c:	b153      	cbz	r3, 80158a4 <rmw_create_node+0x24>
 801588e:	b14d      	cbz	r5, 80158a4 <rmw_create_node+0x24>
 8015890:	782b      	ldrb	r3, [r5, #0]
 8015892:	b13b      	cbz	r3, 80158a4 <rmw_create_node+0x24>
 8015894:	b902      	cbnz	r2, 8015898 <rmw_create_node+0x18>
 8015896:	69c2      	ldr	r2, [r0, #28]
 8015898:	4603      	mov	r3, r0
 801589a:	4629      	mov	r1, r5
 801589c:	4620      	mov	r0, r4
 801589e:	bc30      	pop	{r4, r5}
 80158a0:	f7ff bf74 	b.w	801578c <create_node>
 80158a4:	2000      	movs	r0, #0
 80158a6:	bc30      	pop	{r4, r5}
 80158a8:	4770      	bx	lr
 80158aa:	2000      	movs	r0, #0
 80158ac:	4770      	bx	lr
 80158ae:	bf00      	nop

080158b0 <rmw_destroy_node>:
 80158b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158b2:	2800      	cmp	r0, #0
 80158b4:	d066      	beq.n	8015984 <rmw_destroy_node+0xd4>
 80158b6:	4607      	mov	r7, r0
 80158b8:	6800      	ldr	r0, [r0, #0]
 80158ba:	b128      	cbz	r0, 80158c8 <rmw_destroy_node+0x18>
 80158bc:	4b34      	ldr	r3, [pc, #208]	; (8015990 <rmw_destroy_node+0xe0>)
 80158be:	6819      	ldr	r1, [r3, #0]
 80158c0:	f7ea fc8e 	bl	80001e0 <strcmp>
 80158c4:	2800      	cmp	r0, #0
 80158c6:	d15d      	bne.n	8015984 <rmw_destroy_node+0xd4>
 80158c8:	687c      	ldr	r4, [r7, #4]
 80158ca:	2c00      	cmp	r4, #0
 80158cc:	d05a      	beq.n	8015984 <rmw_destroy_node+0xd4>
 80158ce:	4b31      	ldr	r3, [pc, #196]	; (8015994 <rmw_destroy_node+0xe4>)
 80158d0:	681d      	ldr	r5, [r3, #0]
 80158d2:	2d00      	cmp	r5, #0
 80158d4:	d059      	beq.n	801598a <rmw_destroy_node+0xda>
 80158d6:	2600      	movs	r6, #0
 80158d8:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80158dc:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80158e0:	429c      	cmp	r4, r3
 80158e2:	d047      	beq.n	8015974 <rmw_destroy_node+0xc4>
 80158e4:	2d00      	cmp	r5, #0
 80158e6:	d1f7      	bne.n	80158d8 <rmw_destroy_node+0x28>
 80158e8:	4b2b      	ldr	r3, [pc, #172]	; (8015998 <rmw_destroy_node+0xe8>)
 80158ea:	681d      	ldr	r5, [r3, #0]
 80158ec:	b15d      	cbz	r5, 8015906 <rmw_destroy_node+0x56>
 80158ee:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80158f2:	6a0b      	ldr	r3, [r1, #32]
 80158f4:	429c      	cmp	r4, r3
 80158f6:	d1f9      	bne.n	80158ec <rmw_destroy_node+0x3c>
 80158f8:	317c      	adds	r1, #124	; 0x7c
 80158fa:	4638      	mov	r0, r7
 80158fc:	f7f8 fcac 	bl	800e258 <rmw_destroy_subscription>
 8015900:	4606      	mov	r6, r0
 8015902:	2d00      	cmp	r5, #0
 8015904:	d1f3      	bne.n	80158ee <rmw_destroy_node+0x3e>
 8015906:	4b25      	ldr	r3, [pc, #148]	; (801599c <rmw_destroy_node+0xec>)
 8015908:	681d      	ldr	r5, [r3, #0]
 801590a:	b15d      	cbz	r5, 8015924 <rmw_destroy_node+0x74>
 801590c:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8015910:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015912:	429c      	cmp	r4, r3
 8015914:	d1f9      	bne.n	801590a <rmw_destroy_node+0x5a>
 8015916:	317c      	adds	r1, #124	; 0x7c
 8015918:	4638      	mov	r0, r7
 801591a:	f000 f951 	bl	8015bc0 <rmw_destroy_service>
 801591e:	4606      	mov	r6, r0
 8015920:	2d00      	cmp	r5, #0
 8015922:	d1f3      	bne.n	801590c <rmw_destroy_node+0x5c>
 8015924:	4b1e      	ldr	r3, [pc, #120]	; (80159a0 <rmw_destroy_node+0xf0>)
 8015926:	681d      	ldr	r5, [r3, #0]
 8015928:	b15d      	cbz	r5, 8015942 <rmw_destroy_node+0x92>
 801592a:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 801592e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015930:	429c      	cmp	r4, r3
 8015932:	d1f9      	bne.n	8015928 <rmw_destroy_node+0x78>
 8015934:	317c      	adds	r1, #124	; 0x7c
 8015936:	4638      	mov	r0, r7
 8015938:	f7ff fc16 	bl	8015168 <rmw_destroy_client>
 801593c:	4606      	mov	r6, r0
 801593e:	2d00      	cmp	r5, #0
 8015940:	d1f3      	bne.n	801592a <rmw_destroy_node+0x7a>
 8015942:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8015946:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801594a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801594e:	6819      	ldr	r1, [r3, #0]
 8015950:	f7fa f8e2 	bl	800fb18 <uxr_buffer_delete_entity>
 8015954:	4602      	mov	r2, r0
 8015956:	6920      	ldr	r0, [r4, #16]
 8015958:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801595c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015960:	f7f8 ffc6 	bl	800e8f0 <run_xrce_session>
 8015964:	2800      	cmp	r0, #0
 8015966:	bf08      	it	eq
 8015968:	2602      	moveq	r6, #2
 801596a:	4638      	mov	r0, r7
 801596c:	f7f8 fe56 	bl	800e61c <rmw_uxrce_fini_node_memory>
 8015970:	4630      	mov	r0, r6
 8015972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015974:	3184      	adds	r1, #132	; 0x84
 8015976:	4638      	mov	r0, r7
 8015978:	f7f8 fb3c 	bl	800dff4 <rmw_destroy_publisher>
 801597c:	4606      	mov	r6, r0
 801597e:	2d00      	cmp	r5, #0
 8015980:	d1aa      	bne.n	80158d8 <rmw_destroy_node+0x28>
 8015982:	e7b1      	b.n	80158e8 <rmw_destroy_node+0x38>
 8015984:	2601      	movs	r6, #1
 8015986:	4630      	mov	r0, r6
 8015988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801598a:	462e      	mov	r6, r5
 801598c:	e7ac      	b.n	80158e8 <rmw_destroy_node+0x38>
 801598e:	bf00      	nop
 8015990:	0801a004 	.word	0x0801a004
 8015994:	20009ed0 	.word	0x20009ed0
 8015998:	2000d12c 	.word	0x2000d12c
 801599c:	2000d11c 	.word	0x2000d11c
 80159a0:	2000a750 	.word	0x2000a750

080159a4 <rmw_node_get_graph_guard_condition>:
 80159a4:	6843      	ldr	r3, [r0, #4]
 80159a6:	6918      	ldr	r0, [r3, #16]
 80159a8:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80159ac:	4770      	bx	lr
 80159ae:	bf00      	nop

080159b0 <rmw_take_request>:
 80159b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159b4:	4605      	mov	r5, r0
 80159b6:	6800      	ldr	r0, [r0, #0]
 80159b8:	b089      	sub	sp, #36	; 0x24
 80159ba:	460c      	mov	r4, r1
 80159bc:	4690      	mov	r8, r2
 80159be:	461e      	mov	r6, r3
 80159c0:	b128      	cbz	r0, 80159ce <rmw_take_request+0x1e>
 80159c2:	4b28      	ldr	r3, [pc, #160]	; (8015a64 <rmw_take_request+0xb4>)
 80159c4:	6819      	ldr	r1, [r3, #0]
 80159c6:	f7ea fc0b 	bl	80001e0 <strcmp>
 80159ca:	2800      	cmp	r0, #0
 80159cc:	d146      	bne.n	8015a5c <rmw_take_request+0xac>
 80159ce:	b10e      	cbz	r6, 80159d4 <rmw_take_request+0x24>
 80159d0:	2300      	movs	r3, #0
 80159d2:	7033      	strb	r3, [r6, #0]
 80159d4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80159d8:	f7f8 ff12 	bl	800e800 <rmw_uxrce_clean_expired_static_input_buffer>
 80159dc:	4648      	mov	r0, r9
 80159de:	f7f8 fee5 	bl	800e7ac <rmw_uxrce_find_static_input_buffer_by_owner>
 80159e2:	4607      	mov	r7, r0
 80159e4:	b3b0      	cbz	r0, 8015a54 <rmw_take_request+0xa4>
 80159e6:	68c5      	ldr	r5, [r0, #12]
 80159e8:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 80159ec:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 80159f0:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80159f4:	7423      	strb	r3, [r4, #16]
 80159f6:	e9c4 1208 	strd	r1, r2, [r4, #32]
 80159fa:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80159fe:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8015a02:	74e2      	strb	r2, [r4, #19]
 8015a04:	f8a4 3011 	strh.w	r3, [r4, #17]
 8015a08:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8015a0c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8015a10:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8015a14:	61e1      	str	r1, [r4, #28]
 8015a16:	6162      	str	r2, [r4, #20]
 8015a18:	61a3      	str	r3, [r4, #24]
 8015a1a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015a1e:	689b      	ldr	r3, [r3, #8]
 8015a20:	4798      	blx	r3
 8015a22:	6844      	ldr	r4, [r0, #4]
 8015a24:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8015a28:	f105 0110 	add.w	r1, r5, #16
 8015a2c:	4668      	mov	r0, sp
 8015a2e:	f7fa f803 	bl	800fa38 <ucdr_init_buffer>
 8015a32:	68e3      	ldr	r3, [r4, #12]
 8015a34:	4641      	mov	r1, r8
 8015a36:	4668      	mov	r0, sp
 8015a38:	4798      	blx	r3
 8015a3a:	4639      	mov	r1, r7
 8015a3c:	4604      	mov	r4, r0
 8015a3e:	480a      	ldr	r0, [pc, #40]	; (8015a68 <rmw_take_request+0xb8>)
 8015a40:	f7ff fb7e 	bl	8015140 <put_memory>
 8015a44:	b106      	cbz	r6, 8015a48 <rmw_take_request+0x98>
 8015a46:	7034      	strb	r4, [r6, #0]
 8015a48:	f084 0001 	eor.w	r0, r4, #1
 8015a4c:	b2c0      	uxtb	r0, r0
 8015a4e:	b009      	add	sp, #36	; 0x24
 8015a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a54:	2001      	movs	r0, #1
 8015a56:	b009      	add	sp, #36	; 0x24
 8015a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a5c:	200c      	movs	r0, #12
 8015a5e:	b009      	add	sp, #36	; 0x24
 8015a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a64:	0801a004 	.word	0x0801a004
 8015a68:	20009ec0 	.word	0x20009ec0

08015a6c <rmw_send_response>:
 8015a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a6e:	4605      	mov	r5, r0
 8015a70:	6800      	ldr	r0, [r0, #0]
 8015a72:	b091      	sub	sp, #68	; 0x44
 8015a74:	460c      	mov	r4, r1
 8015a76:	4617      	mov	r7, r2
 8015a78:	b128      	cbz	r0, 8015a86 <rmw_send_response+0x1a>
 8015a7a:	4b2a      	ldr	r3, [pc, #168]	; (8015b24 <rmw_send_response+0xb8>)
 8015a7c:	6819      	ldr	r1, [r3, #0]
 8015a7e:	f7ea fbaf 	bl	80001e0 <strcmp>
 8015a82:	2800      	cmp	r0, #0
 8015a84:	d143      	bne.n	8015b0e <rmw_send_response+0xa2>
 8015a86:	4623      	mov	r3, r4
 8015a88:	4626      	mov	r6, r4
 8015a8a:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8015a8e:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 8015a92:	6859      	ldr	r1, [r3, #4]
 8015a94:	686d      	ldr	r5, [r5, #4]
 8015a96:	689a      	ldr	r2, [r3, #8]
 8015a98:	78b3      	ldrb	r3, [r6, #2]
 8015a9a:	f894 c000 	ldrb.w	ip, [r4]
 8015a9e:	6966      	ldr	r6, [r4, #20]
 8015aa0:	f88d 3016 	strb.w	r3, [sp, #22]
 8015aa4:	ab02      	add	r3, sp, #8
 8015aa6:	f8ad e014 	strh.w	lr, [sp, #20]
 8015aaa:	f88d c017 	strb.w	ip, [sp, #23]
 8015aae:	9606      	str	r6, [sp, #24]
 8015ab0:	c307      	stmia	r3!, {r0, r1, r2}
 8015ab2:	696b      	ldr	r3, [r5, #20]
 8015ab4:	6922      	ldr	r2, [r4, #16]
 8015ab6:	9207      	str	r2, [sp, #28]
 8015ab8:	68db      	ldr	r3, [r3, #12]
 8015aba:	6fae      	ldr	r6, [r5, #120]	; 0x78
 8015abc:	4798      	blx	r3
 8015abe:	4603      	mov	r3, r0
 8015ac0:	4638      	mov	r0, r7
 8015ac2:	685c      	ldr	r4, [r3, #4]
 8015ac4:	6923      	ldr	r3, [r4, #16]
 8015ac6:	4798      	blx	r3
 8015ac8:	6933      	ldr	r3, [r6, #16]
 8015aca:	3018      	adds	r0, #24
 8015acc:	9000      	str	r0, [sp, #0]
 8015ace:	692a      	ldr	r2, [r5, #16]
 8015ad0:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8015ad2:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015ad6:	ab08      	add	r3, sp, #32
 8015ad8:	f7fb fe56 	bl	8011788 <uxr_prepare_output_stream>
 8015adc:	b910      	cbnz	r0, 8015ae4 <rmw_send_response+0x78>
 8015ade:	2001      	movs	r0, #1
 8015ae0:	b011      	add	sp, #68	; 0x44
 8015ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ae4:	a902      	add	r1, sp, #8
 8015ae6:	a808      	add	r0, sp, #32
 8015ae8:	f7fc ff6c 	bl	80129c4 <uxr_serialize_SampleIdentity>
 8015aec:	68a3      	ldr	r3, [r4, #8]
 8015aee:	a908      	add	r1, sp, #32
 8015af0:	4638      	mov	r0, r7
 8015af2:	4798      	blx	r3
 8015af4:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8015af8:	6930      	ldr	r0, [r6, #16]
 8015afa:	2b01      	cmp	r3, #1
 8015afc:	d00a      	beq.n	8015b14 <rmw_send_response+0xa8>
 8015afe:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8015b00:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015b04:	f7fb f838 	bl	8010b78 <uxr_run_session_until_confirm_delivery>
 8015b08:	2000      	movs	r0, #0
 8015b0a:	b011      	add	sp, #68	; 0x44
 8015b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b0e:	200c      	movs	r0, #12
 8015b10:	b011      	add	sp, #68	; 0x44
 8015b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b14:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015b18:	f7fa fc72 	bl	8010400 <uxr_flash_output_streams>
 8015b1c:	2000      	movs	r0, #0
 8015b1e:	b011      	add	sp, #68	; 0x44
 8015b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b22:	bf00      	nop
 8015b24:	0801a004 	.word	0x0801a004

08015b28 <rmw_take_response>:
 8015b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b2c:	4604      	mov	r4, r0
 8015b2e:	6800      	ldr	r0, [r0, #0]
 8015b30:	b089      	sub	sp, #36	; 0x24
 8015b32:	4688      	mov	r8, r1
 8015b34:	4617      	mov	r7, r2
 8015b36:	461d      	mov	r5, r3
 8015b38:	b120      	cbz	r0, 8015b44 <rmw_take_response+0x1c>
 8015b3a:	4b1f      	ldr	r3, [pc, #124]	; (8015bb8 <rmw_take_response+0x90>)
 8015b3c:	6819      	ldr	r1, [r3, #0]
 8015b3e:	f7ea fb4f 	bl	80001e0 <strcmp>
 8015b42:	bb88      	cbnz	r0, 8015ba8 <rmw_take_response+0x80>
 8015b44:	b10d      	cbz	r5, 8015b4a <rmw_take_response+0x22>
 8015b46:	2300      	movs	r3, #0
 8015b48:	702b      	strb	r3, [r5, #0]
 8015b4a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015b4e:	f7f8 fe57 	bl	800e800 <rmw_uxrce_clean_expired_static_input_buffer>
 8015b52:	4648      	mov	r0, r9
 8015b54:	f7f8 fe2a 	bl	800e7ac <rmw_uxrce_find_static_input_buffer_by_owner>
 8015b58:	4606      	mov	r6, r0
 8015b5a:	b348      	cbz	r0, 8015bb0 <rmw_take_response+0x88>
 8015b5c:	68c4      	ldr	r4, [r0, #12]
 8015b5e:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8015b62:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8015b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6a:	68c9      	ldr	r1, [r1, #12]
 8015b6c:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8015b70:	4788      	blx	r1
 8015b72:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015b76:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8015b7a:	f104 0110 	add.w	r1, r4, #16
 8015b7e:	4668      	mov	r0, sp
 8015b80:	f7f9 ff5a 	bl	800fa38 <ucdr_init_buffer>
 8015b84:	4639      	mov	r1, r7
 8015b86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b8a:	4668      	mov	r0, sp
 8015b8c:	4798      	blx	r3
 8015b8e:	4631      	mov	r1, r6
 8015b90:	4604      	mov	r4, r0
 8015b92:	480a      	ldr	r0, [pc, #40]	; (8015bbc <rmw_take_response+0x94>)
 8015b94:	f7ff fad4 	bl	8015140 <put_memory>
 8015b98:	b105      	cbz	r5, 8015b9c <rmw_take_response+0x74>
 8015b9a:	702c      	strb	r4, [r5, #0]
 8015b9c:	f084 0001 	eor.w	r0, r4, #1
 8015ba0:	b2c0      	uxtb	r0, r0
 8015ba2:	b009      	add	sp, #36	; 0x24
 8015ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ba8:	200c      	movs	r0, #12
 8015baa:	b009      	add	sp, #36	; 0x24
 8015bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bb0:	2001      	movs	r0, #1
 8015bb2:	b009      	add	sp, #36	; 0x24
 8015bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bb8:	0801a004 	.word	0x0801a004
 8015bbc:	20009ec0 	.word	0x20009ec0

08015bc0 <rmw_destroy_service>:
 8015bc0:	b570      	push	{r4, r5, r6, lr}
 8015bc2:	b128      	cbz	r0, 8015bd0 <rmw_destroy_service+0x10>
 8015bc4:	4604      	mov	r4, r0
 8015bc6:	6800      	ldr	r0, [r0, #0]
 8015bc8:	460d      	mov	r5, r1
 8015bca:	f7f8 ff11 	bl	800e9f0 <is_uxrce_rmw_identifier_valid>
 8015bce:	b910      	cbnz	r0, 8015bd6 <rmw_destroy_service+0x16>
 8015bd0:	2401      	movs	r4, #1
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	bd70      	pop	{r4, r5, r6, pc}
 8015bd6:	6863      	ldr	r3, [r4, #4]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d0f9      	beq.n	8015bd0 <rmw_destroy_service+0x10>
 8015bdc:	2d00      	cmp	r5, #0
 8015bde:	d0f7      	beq.n	8015bd0 <rmw_destroy_service+0x10>
 8015be0:	6828      	ldr	r0, [r5, #0]
 8015be2:	f7f8 ff05 	bl	800e9f0 <is_uxrce_rmw_identifier_valid>
 8015be6:	2800      	cmp	r0, #0
 8015be8:	d0f2      	beq.n	8015bd0 <rmw_destroy_service+0x10>
 8015bea:	686e      	ldr	r6, [r5, #4]
 8015bec:	2e00      	cmp	r6, #0
 8015bee:	d0ef      	beq.n	8015bd0 <rmw_destroy_service+0x10>
 8015bf0:	6864      	ldr	r4, [r4, #4]
 8015bf2:	6932      	ldr	r2, [r6, #16]
 8015bf4:	6920      	ldr	r0, [r4, #16]
 8015bf6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015bfa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015bfe:	6819      	ldr	r1, [r3, #0]
 8015c00:	f7fa f9f4 	bl	800ffec <uxr_buffer_cancel_data>
 8015c04:	4602      	mov	r2, r0
 8015c06:	6920      	ldr	r0, [r4, #16]
 8015c08:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015c0c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015c10:	f7f8 fe6e 	bl	800e8f0 <run_xrce_session>
 8015c14:	6920      	ldr	r0, [r4, #16]
 8015c16:	6932      	ldr	r2, [r6, #16]
 8015c18:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015c1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015c20:	6819      	ldr	r1, [r3, #0]
 8015c22:	f7f9 ff79 	bl	800fb18 <uxr_buffer_delete_entity>
 8015c26:	4602      	mov	r2, r0
 8015c28:	6920      	ldr	r0, [r4, #16]
 8015c2a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015c2e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015c32:	f7f8 fe5d 	bl	800e8f0 <run_xrce_session>
 8015c36:	2800      	cmp	r0, #0
 8015c38:	4628      	mov	r0, r5
 8015c3a:	bf14      	ite	ne
 8015c3c:	2400      	movne	r4, #0
 8015c3e:	2402      	moveq	r4, #2
 8015c40:	f7f8 fd30 	bl	800e6a4 <rmw_uxrce_fini_service_memory>
 8015c44:	e7c5      	b.n	8015bd2 <rmw_destroy_service+0x12>
 8015c46:	bf00      	nop

08015c48 <rmw_uxrce_transport_init>:
 8015c48:	b508      	push	{r3, lr}
 8015c4a:	b108      	cbz	r0, 8015c50 <rmw_uxrce_transport_init+0x8>
 8015c4c:	f100 0210 	add.w	r2, r0, #16
 8015c50:	b139      	cbz	r1, 8015c62 <rmw_uxrce_transport_init+0x1a>
 8015c52:	6949      	ldr	r1, [r1, #20]
 8015c54:	4610      	mov	r0, r2
 8015c56:	f000 fbdf 	bl	8016418 <uxr_init_custom_transport>
 8015c5a:	f080 0001 	eor.w	r0, r0, #1
 8015c5e:	b2c0      	uxtb	r0, r0
 8015c60:	bd08      	pop	{r3, pc}
 8015c62:	4b04      	ldr	r3, [pc, #16]	; (8015c74 <rmw_uxrce_transport_init+0x2c>)
 8015c64:	4610      	mov	r0, r2
 8015c66:	6859      	ldr	r1, [r3, #4]
 8015c68:	f000 fbd6 	bl	8016418 <uxr_init_custom_transport>
 8015c6c:	f080 0001 	eor.w	r0, r0, #1
 8015c70:	b2c0      	uxtb	r0, r0
 8015c72:	bd08      	pop	{r3, pc}
 8015c74:	20009ea0 	.word	0x20009ea0

08015c78 <rmw_wait>:
 8015c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c7c:	460f      	mov	r7, r1
 8015c7e:	4606      	mov	r6, r0
 8015c80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015c82:	469a      	mov	sl, r3
 8015c84:	4615      	mov	r5, r2
 8015c86:	2a00      	cmp	r2, #0
 8015c88:	f000 8122 	beq.w	8015ed0 <rmw_wait+0x258>
 8015c8c:	2900      	cmp	r1, #0
 8015c8e:	f000 812a 	beq.w	8015ee6 <rmw_wait+0x26e>
 8015c92:	e9d1 2300 	ldrd	r2, r3, [r1]
 8015c96:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8015c9a:	015c      	lsls	r4, r3, #5
 8015c9c:	ebbb 0b02 	subs.w	fp, fp, r2
 8015ca0:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8015ca4:	eb64 0403 	sbc.w	r4, r4, r3
 8015ca8:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8015cac:	00a4      	lsls	r4, r4, #2
 8015cae:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8015cb2:	eb10 0b02 	adds.w	fp, r0, r2
 8015cb6:	eb43 0404 	adc.w	r4, r3, r4
 8015cba:	4aad      	ldr	r2, [pc, #692]	; (8015f70 <rmw_wait+0x2f8>)
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8015cc2:	f7ea ff63 	bl	8000b8c <__aeabi_uldivmod>
 8015cc6:	00e4      	lsls	r4, r4, #3
 8015cc8:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8015ccc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8015cd0:	eb1b 0800 	adds.w	r8, fp, r0
 8015cd4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015cd8:	eb44 0901 	adc.w	r9, r4, r1
 8015cdc:	2300      	movs	r3, #0
 8015cde:	4542      	cmp	r2, r8
 8015ce0:	eb73 0109 	sbcs.w	r1, r3, r9
 8015ce4:	f2c0 80f2 	blt.w	8015ecc <rmw_wait+0x254>
 8015ce8:	f7f8 fd8a 	bl	800e800 <rmw_uxrce_clean_expired_static_input_buffer>
 8015cec:	4ba1      	ldr	r3, [pc, #644]	; (8015f74 <rmw_wait+0x2fc>)
 8015cee:	681c      	ldr	r4, [r3, #0]
 8015cf0:	b144      	cbz	r4, 8015d04 <rmw_wait+0x8c>
 8015cf2:	4623      	mov	r3, r4
 8015cf4:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8015cf8:	2100      	movs	r1, #0
 8015cfa:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8015cfe:	5411      	strb	r1, [r2, r0]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d1fa      	bne.n	8015cfa <rmw_wait+0x82>
 8015d04:	b185      	cbz	r5, 8015d28 <rmw_wait+0xb0>
 8015d06:	6829      	ldr	r1, [r5, #0]
 8015d08:	b171      	cbz	r1, 8015d28 <rmw_wait+0xb0>
 8015d0a:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8015d0e:	2300      	movs	r3, #0
 8015d10:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015d14:	2001      	movs	r0, #1
 8015d16:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8015d1a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8015d1c:	3301      	adds	r3, #1
 8015d1e:	6912      	ldr	r2, [r2, #16]
 8015d20:	4299      	cmp	r1, r3
 8015d22:	f802 000c 	strb.w	r0, [r2, ip]
 8015d26:	d1f6      	bne.n	8015d16 <rmw_wait+0x9e>
 8015d28:	f1ba 0f00 	cmp.w	sl, #0
 8015d2c:	d011      	beq.n	8015d52 <rmw_wait+0xda>
 8015d2e:	f8da 1000 	ldr.w	r1, [sl]
 8015d32:	b171      	cbz	r1, 8015d52 <rmw_wait+0xda>
 8015d34:	f8da e004 	ldr.w	lr, [sl, #4]
 8015d38:	2300      	movs	r3, #0
 8015d3a:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015d3e:	2001      	movs	r0, #1
 8015d40:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8015d44:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8015d46:	3301      	adds	r3, #1
 8015d48:	6912      	ldr	r2, [r2, #16]
 8015d4a:	4299      	cmp	r1, r3
 8015d4c:	f802 000c 	strb.w	r0, [r2, ip]
 8015d50:	d1f6      	bne.n	8015d40 <rmw_wait+0xc8>
 8015d52:	b186      	cbz	r6, 8015d76 <rmw_wait+0xfe>
 8015d54:	6831      	ldr	r1, [r6, #0]
 8015d56:	b171      	cbz	r1, 8015d76 <rmw_wait+0xfe>
 8015d58:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015d62:	2001      	movs	r0, #1
 8015d64:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8015d68:	6a12      	ldr	r2, [r2, #32]
 8015d6a:	3301      	adds	r3, #1
 8015d6c:	6912      	ldr	r2, [r2, #16]
 8015d6e:	4299      	cmp	r1, r3
 8015d70:	f802 000c 	strb.w	r0, [r2, ip]
 8015d74:	d1f6      	bne.n	8015d64 <rmw_wait+0xec>
 8015d76:	b34c      	cbz	r4, 8015dcc <rmw_wait+0x154>
 8015d78:	4622      	mov	r2, r4
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8015d80:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8015d84:	5c09      	ldrb	r1, [r1, r0]
 8015d86:	440b      	add	r3, r1
 8015d88:	b2db      	uxtb	r3, r3
 8015d8a:	2a00      	cmp	r2, #0
 8015d8c:	d1f8      	bne.n	8015d80 <rmw_wait+0x108>
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	f000 8082 	beq.w	8015e98 <rmw_wait+0x220>
 8015d94:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8015d98:	d00d      	beq.n	8015db6 <rmw_wait+0x13e>
 8015d9a:	ee07 8a90 	vmov	s15, r8
 8015d9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015da2:	ee07 3a90 	vmov	s15, r3
 8015da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015dae:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015db2:	ee17 8a90 	vmov	r8, s15
 8015db6:	f241 59a4 	movw	r9, #5540	; 0x15a4
 8015dba:	68e0      	ldr	r0, [r4, #12]
 8015dbc:	f810 3009 	ldrb.w	r3, [r0, r9]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	f040 8093 	bne.w	8015eec <rmw_wait+0x274>
 8015dc6:	68a4      	ldr	r4, [r4, #8]
 8015dc8:	2c00      	cmp	r4, #0
 8015dca:	d1f6      	bne.n	8015dba <rmw_wait+0x142>
 8015dcc:	2d00      	cmp	r5, #0
 8015dce:	f000 80ac 	beq.w	8015f2a <rmw_wait+0x2b2>
 8015dd2:	682b      	ldr	r3, [r5, #0]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	f000 8093 	beq.w	8015f00 <rmw_wait+0x288>
 8015dda:	2400      	movs	r4, #0
 8015ddc:	46a0      	mov	r8, r4
 8015dde:	686b      	ldr	r3, [r5, #4]
 8015de0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015de4:	f7f8 fce2 	bl	800e7ac <rmw_uxrce_find_static_input_buffer_by_owner>
 8015de8:	2800      	cmp	r0, #0
 8015dea:	d05f      	beq.n	8015eac <rmw_wait+0x234>
 8015dec:	682b      	ldr	r3, [r5, #0]
 8015dee:	3401      	adds	r4, #1
 8015df0:	42a3      	cmp	r3, r4
 8015df2:	f04f 0801 	mov.w	r8, #1
 8015df6:	d8f2      	bhi.n	8015dde <rmw_wait+0x166>
 8015df8:	f1ba 0f00 	cmp.w	sl, #0
 8015dfc:	d012      	beq.n	8015e24 <rmw_wait+0x1ac>
 8015dfe:	f8da 3000 	ldr.w	r3, [sl]
 8015e02:	b17b      	cbz	r3, 8015e24 <rmw_wait+0x1ac>
 8015e04:	2400      	movs	r4, #0
 8015e06:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015e0a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015e0e:	f7f8 fccd 	bl	800e7ac <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e12:	2800      	cmp	r0, #0
 8015e14:	d052      	beq.n	8015ebc <rmw_wait+0x244>
 8015e16:	f8da 3000 	ldr.w	r3, [sl]
 8015e1a:	3401      	adds	r4, #1
 8015e1c:	42a3      	cmp	r3, r4
 8015e1e:	f04f 0801 	mov.w	r8, #1
 8015e22:	d8f0      	bhi.n	8015e06 <rmw_wait+0x18e>
 8015e24:	b1e6      	cbz	r6, 8015e60 <rmw_wait+0x1e8>
 8015e26:	6833      	ldr	r3, [r6, #0]
 8015e28:	b1d3      	cbz	r3, 8015e60 <rmw_wait+0x1e8>
 8015e2a:	2400      	movs	r4, #0
 8015e2c:	6873      	ldr	r3, [r6, #4]
 8015e2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015e32:	f7f8 fcbb 	bl	800e7ac <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e36:	b160      	cbz	r0, 8015e52 <rmw_wait+0x1da>
 8015e38:	6833      	ldr	r3, [r6, #0]
 8015e3a:	3401      	adds	r4, #1
 8015e3c:	42a3      	cmp	r3, r4
 8015e3e:	d96c      	bls.n	8015f1a <rmw_wait+0x2a2>
 8015e40:	6873      	ldr	r3, [r6, #4]
 8015e42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015e46:	f04f 0801 	mov.w	r8, #1
 8015e4a:	f7f8 fcaf 	bl	800e7ac <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e4e:	2800      	cmp	r0, #0
 8015e50:	d1f2      	bne.n	8015e38 <rmw_wait+0x1c0>
 8015e52:	e9d6 3200 	ldrd	r3, r2, [r6]
 8015e56:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015e5a:	3401      	adds	r4, #1
 8015e5c:	42a3      	cmp	r3, r4
 8015e5e:	d8e5      	bhi.n	8015e2c <rmw_wait+0x1b4>
 8015e60:	b1a7      	cbz	r7, 8015e8c <rmw_wait+0x214>
 8015e62:	683c      	ldr	r4, [r7, #0]
 8015e64:	b194      	cbz	r4, 8015e8c <rmw_wait+0x214>
 8015e66:	2300      	movs	r3, #0
 8015e68:	461d      	mov	r5, r3
 8015e6a:	e004      	b.n	8015e76 <rmw_wait+0x1fe>
 8015e6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015e70:	3301      	adds	r3, #1
 8015e72:	42a3      	cmp	r3, r4
 8015e74:	d00a      	beq.n	8015e8c <rmw_wait+0x214>
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015e7c:	7c0a      	ldrb	r2, [r1, #16]
 8015e7e:	2a00      	cmp	r2, #0
 8015e80:	d0f4      	beq.n	8015e6c <rmw_wait+0x1f4>
 8015e82:	3301      	adds	r3, #1
 8015e84:	42a3      	cmp	r3, r4
 8015e86:	740d      	strb	r5, [r1, #16]
 8015e88:	4690      	mov	r8, r2
 8015e8a:	d1f4      	bne.n	8015e76 <rmw_wait+0x1fe>
 8015e8c:	f1b8 0f00 	cmp.w	r8, #0
 8015e90:	d040      	beq.n	8015f14 <rmw_wait+0x29c>
 8015e92:	2000      	movs	r0, #0
 8015e94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e98:	68e0      	ldr	r0, [r4, #12]
 8015e9a:	2100      	movs	r1, #0
 8015e9c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015ea0:	f7fa fe30 	bl	8010b04 <uxr_run_session_timeout>
 8015ea4:	68a4      	ldr	r4, [r4, #8]
 8015ea6:	2c00      	cmp	r4, #0
 8015ea8:	d1f6      	bne.n	8015e98 <rmw_wait+0x220>
 8015eaa:	e78f      	b.n	8015dcc <rmw_wait+0x154>
 8015eac:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015eb0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015eb4:	3401      	adds	r4, #1
 8015eb6:	42a3      	cmp	r3, r4
 8015eb8:	d891      	bhi.n	8015dde <rmw_wait+0x166>
 8015eba:	e79d      	b.n	8015df8 <rmw_wait+0x180>
 8015ebc:	e9da 3200 	ldrd	r3, r2, [sl]
 8015ec0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015ec4:	3401      	adds	r4, #1
 8015ec6:	429c      	cmp	r4, r3
 8015ec8:	d39d      	bcc.n	8015e06 <rmw_wait+0x18e>
 8015eca:	e7ab      	b.n	8015e24 <rmw_wait+0x1ac>
 8015ecc:	4690      	mov	r8, r2
 8015ece:	e70b      	b.n	8015ce8 <rmw_wait+0x70>
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	f47f aedb 	bne.w	8015c8c <rmw_wait+0x14>
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	f47f aed8 	bne.w	8015c8c <rmw_wait+0x14>
 8015edc:	2f00      	cmp	r7, #0
 8015ede:	d0d8      	beq.n	8015e92 <rmw_wait+0x21a>
 8015ee0:	2900      	cmp	r1, #0
 8015ee2:	f47f aed6 	bne.w	8015c92 <rmw_wait+0x1a>
 8015ee6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015eea:	e6fd      	b.n	8015ce8 <rmw_wait+0x70>
 8015eec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015ef0:	4641      	mov	r1, r8
 8015ef2:	f7fa fe21 	bl	8010b38 <uxr_run_session_until_data>
 8015ef6:	68a4      	ldr	r4, [r4, #8]
 8015ef8:	2c00      	cmp	r4, #0
 8015efa:	f47f af5e 	bne.w	8015dba <rmw_wait+0x142>
 8015efe:	e765      	b.n	8015dcc <rmw_wait+0x154>
 8015f00:	f1ba 0f00 	cmp.w	sl, #0
 8015f04:	d11e      	bne.n	8015f44 <rmw_wait+0x2cc>
 8015f06:	b35e      	cbz	r6, 8015f60 <rmw_wait+0x2e8>
 8015f08:	6833      	ldr	r3, [r6, #0]
 8015f0a:	46d0      	mov	r8, sl
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d18c      	bne.n	8015e2a <rmw_wait+0x1b2>
 8015f10:	2f00      	cmp	r7, #0
 8015f12:	d1a6      	bne.n	8015e62 <rmw_wait+0x1ea>
 8015f14:	2002      	movs	r0, #2
 8015f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f1a:	2f00      	cmp	r7, #0
 8015f1c:	d0b9      	beq.n	8015e92 <rmw_wait+0x21a>
 8015f1e:	683c      	ldr	r4, [r7, #0]
 8015f20:	f04f 0801 	mov.w	r8, #1
 8015f24:	2c00      	cmp	r4, #0
 8015f26:	d19e      	bne.n	8015e66 <rmw_wait+0x1ee>
 8015f28:	e7b3      	b.n	8015e92 <rmw_wait+0x21a>
 8015f2a:	f1ba 0f00 	cmp.w	sl, #0
 8015f2e:	d0ea      	beq.n	8015f06 <rmw_wait+0x28e>
 8015f30:	f8da 3000 	ldr.w	r3, [sl]
 8015f34:	46a8      	mov	r8, r5
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	f47f af64 	bne.w	8015e04 <rmw_wait+0x18c>
 8015f3c:	2e00      	cmp	r6, #0
 8015f3e:	f47f af72 	bne.w	8015e26 <rmw_wait+0x1ae>
 8015f42:	e009      	b.n	8015f58 <rmw_wait+0x2e0>
 8015f44:	f8da 2000 	ldr.w	r2, [sl]
 8015f48:	4698      	mov	r8, r3
 8015f4a:	2a00      	cmp	r2, #0
 8015f4c:	f47f af5a 	bne.w	8015e04 <rmw_wait+0x18c>
 8015f50:	4690      	mov	r8, r2
 8015f52:	2e00      	cmp	r6, #0
 8015f54:	f47f af67 	bne.w	8015e26 <rmw_wait+0x1ae>
 8015f58:	46b0      	mov	r8, r6
 8015f5a:	2f00      	cmp	r7, #0
 8015f5c:	d181      	bne.n	8015e62 <rmw_wait+0x1ea>
 8015f5e:	e7d9      	b.n	8015f14 <rmw_wait+0x29c>
 8015f60:	2f00      	cmp	r7, #0
 8015f62:	d0d7      	beq.n	8015f14 <rmw_wait+0x29c>
 8015f64:	683c      	ldr	r4, [r7, #0]
 8015f66:	46b0      	mov	r8, r6
 8015f68:	2c00      	cmp	r4, #0
 8015f6a:	f47f af7c 	bne.w	8015e66 <rmw_wait+0x1ee>
 8015f6e:	e7d1      	b.n	8015f14 <rmw_wait+0x29c>
 8015f70:	000f4240 	.word	0x000f4240
 8015f74:	2000d068 	.word	0x2000d068

08015f78 <rmw_create_wait_set>:
 8015f78:	b508      	push	{r3, lr}
 8015f7a:	4803      	ldr	r0, [pc, #12]	; (8015f88 <rmw_create_wait_set+0x10>)
 8015f7c:	f7ff f8d0 	bl	8015120 <get_memory>
 8015f80:	b108      	cbz	r0, 8015f86 <rmw_create_wait_set+0xe>
 8015f82:	68c0      	ldr	r0, [r0, #12]
 8015f84:	3010      	adds	r0, #16
 8015f86:	bd08      	pop	{r3, pc}
 8015f88:	2000e840 	.word	0x2000e840

08015f8c <rmw_destroy_wait_set>:
 8015f8c:	b508      	push	{r3, lr}
 8015f8e:	4b08      	ldr	r3, [pc, #32]	; (8015fb0 <rmw_destroy_wait_set+0x24>)
 8015f90:	6819      	ldr	r1, [r3, #0]
 8015f92:	b911      	cbnz	r1, 8015f9a <rmw_destroy_wait_set+0xe>
 8015f94:	e00a      	b.n	8015fac <rmw_destroy_wait_set+0x20>
 8015f96:	6889      	ldr	r1, [r1, #8]
 8015f98:	b141      	cbz	r1, 8015fac <rmw_destroy_wait_set+0x20>
 8015f9a:	68cb      	ldr	r3, [r1, #12]
 8015f9c:	3310      	adds	r3, #16
 8015f9e:	4298      	cmp	r0, r3
 8015fa0:	d1f9      	bne.n	8015f96 <rmw_destroy_wait_set+0xa>
 8015fa2:	4803      	ldr	r0, [pc, #12]	; (8015fb0 <rmw_destroy_wait_set+0x24>)
 8015fa4:	f7ff f8cc 	bl	8015140 <put_memory>
 8015fa8:	2000      	movs	r0, #0
 8015faa:	bd08      	pop	{r3, pc}
 8015fac:	2001      	movs	r0, #1
 8015fae:	bd08      	pop	{r3, pc}
 8015fb0:	2000e840 	.word	0x2000e840

08015fb4 <rmw_uros_epoch_nanos>:
 8015fb4:	4b05      	ldr	r3, [pc, #20]	; (8015fcc <rmw_uros_epoch_nanos+0x18>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	b123      	cbz	r3, 8015fc4 <rmw_uros_epoch_nanos+0x10>
 8015fba:	68d8      	ldr	r0, [r3, #12]
 8015fbc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015fc0:	f7fa ba14 	b.w	80103ec <uxr_epoch_nanos>
 8015fc4:	2000      	movs	r0, #0
 8015fc6:	2100      	movs	r1, #0
 8015fc8:	4770      	bx	lr
 8015fca:	bf00      	nop
 8015fcc:	2000d068 	.word	0x2000d068

08015fd0 <ucdr_serialize_endian_array_char>:
 8015fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fd4:	4619      	mov	r1, r3
 8015fd6:	461e      	mov	r6, r3
 8015fd8:	4690      	mov	r8, r2
 8015fda:	4604      	mov	r4, r0
 8015fdc:	f7f9 fcda 	bl	800f994 <ucdr_check_buffer_available_for>
 8015fe0:	b9e0      	cbnz	r0, 801601c <ucdr_serialize_endian_array_char+0x4c>
 8015fe2:	4637      	mov	r7, r6
 8015fe4:	e009      	b.n	8015ffa <ucdr_serialize_endian_array_char+0x2a>
 8015fe6:	68a0      	ldr	r0, [r4, #8]
 8015fe8:	f002 fc3d 	bl	8018866 <memcpy>
 8015fec:	68a2      	ldr	r2, [r4, #8]
 8015fee:	6923      	ldr	r3, [r4, #16]
 8015ff0:	442a      	add	r2, r5
 8015ff2:	442b      	add	r3, r5
 8015ff4:	1b7f      	subs	r7, r7, r5
 8015ff6:	60a2      	str	r2, [r4, #8]
 8015ff8:	6123      	str	r3, [r4, #16]
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	4639      	mov	r1, r7
 8015ffe:	4620      	mov	r0, r4
 8016000:	f7f9 fd4e 	bl	800faa0 <ucdr_check_final_buffer_behavior_array>
 8016004:	1bf1      	subs	r1, r6, r7
 8016006:	4441      	add	r1, r8
 8016008:	4605      	mov	r5, r0
 801600a:	4602      	mov	r2, r0
 801600c:	2800      	cmp	r0, #0
 801600e:	d1ea      	bne.n	8015fe6 <ucdr_serialize_endian_array_char+0x16>
 8016010:	2301      	movs	r3, #1
 8016012:	7da0      	ldrb	r0, [r4, #22]
 8016014:	7563      	strb	r3, [r4, #21]
 8016016:	4058      	eors	r0, r3
 8016018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801601c:	4632      	mov	r2, r6
 801601e:	68a0      	ldr	r0, [r4, #8]
 8016020:	4641      	mov	r1, r8
 8016022:	f002 fc20 	bl	8018866 <memcpy>
 8016026:	68a2      	ldr	r2, [r4, #8]
 8016028:	6923      	ldr	r3, [r4, #16]
 801602a:	4432      	add	r2, r6
 801602c:	4433      	add	r3, r6
 801602e:	60a2      	str	r2, [r4, #8]
 8016030:	6123      	str	r3, [r4, #16]
 8016032:	e7ed      	b.n	8016010 <ucdr_serialize_endian_array_char+0x40>

08016034 <ucdr_deserialize_endian_array_char>:
 8016034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016038:	4619      	mov	r1, r3
 801603a:	461e      	mov	r6, r3
 801603c:	4690      	mov	r8, r2
 801603e:	4604      	mov	r4, r0
 8016040:	f7f9 fca8 	bl	800f994 <ucdr_check_buffer_available_for>
 8016044:	b9e0      	cbnz	r0, 8016080 <ucdr_deserialize_endian_array_char+0x4c>
 8016046:	4637      	mov	r7, r6
 8016048:	e009      	b.n	801605e <ucdr_deserialize_endian_array_char+0x2a>
 801604a:	68a1      	ldr	r1, [r4, #8]
 801604c:	f002 fc0b 	bl	8018866 <memcpy>
 8016050:	68a2      	ldr	r2, [r4, #8]
 8016052:	6923      	ldr	r3, [r4, #16]
 8016054:	442a      	add	r2, r5
 8016056:	442b      	add	r3, r5
 8016058:	1b7f      	subs	r7, r7, r5
 801605a:	60a2      	str	r2, [r4, #8]
 801605c:	6123      	str	r3, [r4, #16]
 801605e:	2201      	movs	r2, #1
 8016060:	4639      	mov	r1, r7
 8016062:	4620      	mov	r0, r4
 8016064:	f7f9 fd1c 	bl	800faa0 <ucdr_check_final_buffer_behavior_array>
 8016068:	4605      	mov	r5, r0
 801606a:	1bf0      	subs	r0, r6, r7
 801606c:	4440      	add	r0, r8
 801606e:	462a      	mov	r2, r5
 8016070:	2d00      	cmp	r5, #0
 8016072:	d1ea      	bne.n	801604a <ucdr_deserialize_endian_array_char+0x16>
 8016074:	2301      	movs	r3, #1
 8016076:	7da0      	ldrb	r0, [r4, #22]
 8016078:	7563      	strb	r3, [r4, #21]
 801607a:	4058      	eors	r0, r3
 801607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016080:	4632      	mov	r2, r6
 8016082:	68a1      	ldr	r1, [r4, #8]
 8016084:	4640      	mov	r0, r8
 8016086:	f002 fbee 	bl	8018866 <memcpy>
 801608a:	68a2      	ldr	r2, [r4, #8]
 801608c:	6923      	ldr	r3, [r4, #16]
 801608e:	4432      	add	r2, r6
 8016090:	4433      	add	r3, r6
 8016092:	60a2      	str	r2, [r4, #8]
 8016094:	6123      	str	r3, [r4, #16]
 8016096:	e7ed      	b.n	8016074 <ucdr_deserialize_endian_array_char+0x40>

08016098 <ucdr_serialize_array_uint8_t>:
 8016098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801609c:	4688      	mov	r8, r1
 801609e:	4611      	mov	r1, r2
 80160a0:	4616      	mov	r6, r2
 80160a2:	4604      	mov	r4, r0
 80160a4:	f7f9 fc76 	bl	800f994 <ucdr_check_buffer_available_for>
 80160a8:	b9e0      	cbnz	r0, 80160e4 <ucdr_serialize_array_uint8_t+0x4c>
 80160aa:	4637      	mov	r7, r6
 80160ac:	e009      	b.n	80160c2 <ucdr_serialize_array_uint8_t+0x2a>
 80160ae:	68a0      	ldr	r0, [r4, #8]
 80160b0:	f002 fbd9 	bl	8018866 <memcpy>
 80160b4:	68a2      	ldr	r2, [r4, #8]
 80160b6:	6923      	ldr	r3, [r4, #16]
 80160b8:	442a      	add	r2, r5
 80160ba:	442b      	add	r3, r5
 80160bc:	1b7f      	subs	r7, r7, r5
 80160be:	60a2      	str	r2, [r4, #8]
 80160c0:	6123      	str	r3, [r4, #16]
 80160c2:	2201      	movs	r2, #1
 80160c4:	4639      	mov	r1, r7
 80160c6:	4620      	mov	r0, r4
 80160c8:	f7f9 fcea 	bl	800faa0 <ucdr_check_final_buffer_behavior_array>
 80160cc:	1bf1      	subs	r1, r6, r7
 80160ce:	4441      	add	r1, r8
 80160d0:	4605      	mov	r5, r0
 80160d2:	4602      	mov	r2, r0
 80160d4:	2800      	cmp	r0, #0
 80160d6:	d1ea      	bne.n	80160ae <ucdr_serialize_array_uint8_t+0x16>
 80160d8:	2301      	movs	r3, #1
 80160da:	7da0      	ldrb	r0, [r4, #22]
 80160dc:	7563      	strb	r3, [r4, #21]
 80160de:	4058      	eors	r0, r3
 80160e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160e4:	4632      	mov	r2, r6
 80160e6:	68a0      	ldr	r0, [r4, #8]
 80160e8:	4641      	mov	r1, r8
 80160ea:	f002 fbbc 	bl	8018866 <memcpy>
 80160ee:	68a3      	ldr	r3, [r4, #8]
 80160f0:	6922      	ldr	r2, [r4, #16]
 80160f2:	4433      	add	r3, r6
 80160f4:	4432      	add	r2, r6
 80160f6:	60a3      	str	r3, [r4, #8]
 80160f8:	6122      	str	r2, [r4, #16]
 80160fa:	e7ed      	b.n	80160d8 <ucdr_serialize_array_uint8_t+0x40>

080160fc <ucdr_serialize_endian_array_uint8_t>:
 80160fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016100:	4619      	mov	r1, r3
 8016102:	461e      	mov	r6, r3
 8016104:	4690      	mov	r8, r2
 8016106:	4604      	mov	r4, r0
 8016108:	f7f9 fc44 	bl	800f994 <ucdr_check_buffer_available_for>
 801610c:	b9e0      	cbnz	r0, 8016148 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801610e:	4637      	mov	r7, r6
 8016110:	e009      	b.n	8016126 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8016112:	68a0      	ldr	r0, [r4, #8]
 8016114:	f002 fba7 	bl	8018866 <memcpy>
 8016118:	68a2      	ldr	r2, [r4, #8]
 801611a:	6923      	ldr	r3, [r4, #16]
 801611c:	442a      	add	r2, r5
 801611e:	442b      	add	r3, r5
 8016120:	1b7f      	subs	r7, r7, r5
 8016122:	60a2      	str	r2, [r4, #8]
 8016124:	6123      	str	r3, [r4, #16]
 8016126:	2201      	movs	r2, #1
 8016128:	4639      	mov	r1, r7
 801612a:	4620      	mov	r0, r4
 801612c:	f7f9 fcb8 	bl	800faa0 <ucdr_check_final_buffer_behavior_array>
 8016130:	1bf1      	subs	r1, r6, r7
 8016132:	4441      	add	r1, r8
 8016134:	4605      	mov	r5, r0
 8016136:	4602      	mov	r2, r0
 8016138:	2800      	cmp	r0, #0
 801613a:	d1ea      	bne.n	8016112 <ucdr_serialize_endian_array_uint8_t+0x16>
 801613c:	2301      	movs	r3, #1
 801613e:	7da0      	ldrb	r0, [r4, #22]
 8016140:	7563      	strb	r3, [r4, #21]
 8016142:	4058      	eors	r0, r3
 8016144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016148:	4632      	mov	r2, r6
 801614a:	68a0      	ldr	r0, [r4, #8]
 801614c:	4641      	mov	r1, r8
 801614e:	f002 fb8a 	bl	8018866 <memcpy>
 8016152:	68a2      	ldr	r2, [r4, #8]
 8016154:	6923      	ldr	r3, [r4, #16]
 8016156:	4432      	add	r2, r6
 8016158:	4433      	add	r3, r6
 801615a:	60a2      	str	r2, [r4, #8]
 801615c:	6123      	str	r3, [r4, #16]
 801615e:	e7ed      	b.n	801613c <ucdr_serialize_endian_array_uint8_t+0x40>

08016160 <ucdr_deserialize_array_uint8_t>:
 8016160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016164:	4688      	mov	r8, r1
 8016166:	4611      	mov	r1, r2
 8016168:	4616      	mov	r6, r2
 801616a:	4604      	mov	r4, r0
 801616c:	f7f9 fc12 	bl	800f994 <ucdr_check_buffer_available_for>
 8016170:	b9e0      	cbnz	r0, 80161ac <ucdr_deserialize_array_uint8_t+0x4c>
 8016172:	4637      	mov	r7, r6
 8016174:	e009      	b.n	801618a <ucdr_deserialize_array_uint8_t+0x2a>
 8016176:	68a1      	ldr	r1, [r4, #8]
 8016178:	f002 fb75 	bl	8018866 <memcpy>
 801617c:	68a2      	ldr	r2, [r4, #8]
 801617e:	6923      	ldr	r3, [r4, #16]
 8016180:	442a      	add	r2, r5
 8016182:	442b      	add	r3, r5
 8016184:	1b7f      	subs	r7, r7, r5
 8016186:	60a2      	str	r2, [r4, #8]
 8016188:	6123      	str	r3, [r4, #16]
 801618a:	2201      	movs	r2, #1
 801618c:	4639      	mov	r1, r7
 801618e:	4620      	mov	r0, r4
 8016190:	f7f9 fc86 	bl	800faa0 <ucdr_check_final_buffer_behavior_array>
 8016194:	4605      	mov	r5, r0
 8016196:	1bf0      	subs	r0, r6, r7
 8016198:	4440      	add	r0, r8
 801619a:	462a      	mov	r2, r5
 801619c:	2d00      	cmp	r5, #0
 801619e:	d1ea      	bne.n	8016176 <ucdr_deserialize_array_uint8_t+0x16>
 80161a0:	2301      	movs	r3, #1
 80161a2:	7da0      	ldrb	r0, [r4, #22]
 80161a4:	7563      	strb	r3, [r4, #21]
 80161a6:	4058      	eors	r0, r3
 80161a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ac:	4632      	mov	r2, r6
 80161ae:	68a1      	ldr	r1, [r4, #8]
 80161b0:	4640      	mov	r0, r8
 80161b2:	f002 fb58 	bl	8018866 <memcpy>
 80161b6:	68a3      	ldr	r3, [r4, #8]
 80161b8:	6922      	ldr	r2, [r4, #16]
 80161ba:	4433      	add	r3, r6
 80161bc:	4432      	add	r2, r6
 80161be:	60a3      	str	r3, [r4, #8]
 80161c0:	6122      	str	r2, [r4, #16]
 80161c2:	e7ed      	b.n	80161a0 <ucdr_deserialize_array_uint8_t+0x40>

080161c4 <ucdr_deserialize_endian_array_uint8_t>:
 80161c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161c8:	4619      	mov	r1, r3
 80161ca:	461e      	mov	r6, r3
 80161cc:	4690      	mov	r8, r2
 80161ce:	4604      	mov	r4, r0
 80161d0:	f7f9 fbe0 	bl	800f994 <ucdr_check_buffer_available_for>
 80161d4:	b9e0      	cbnz	r0, 8016210 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80161d6:	4637      	mov	r7, r6
 80161d8:	e009      	b.n	80161ee <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80161da:	68a1      	ldr	r1, [r4, #8]
 80161dc:	f002 fb43 	bl	8018866 <memcpy>
 80161e0:	68a2      	ldr	r2, [r4, #8]
 80161e2:	6923      	ldr	r3, [r4, #16]
 80161e4:	442a      	add	r2, r5
 80161e6:	442b      	add	r3, r5
 80161e8:	1b7f      	subs	r7, r7, r5
 80161ea:	60a2      	str	r2, [r4, #8]
 80161ec:	6123      	str	r3, [r4, #16]
 80161ee:	2201      	movs	r2, #1
 80161f0:	4639      	mov	r1, r7
 80161f2:	4620      	mov	r0, r4
 80161f4:	f7f9 fc54 	bl	800faa0 <ucdr_check_final_buffer_behavior_array>
 80161f8:	4605      	mov	r5, r0
 80161fa:	1bf0      	subs	r0, r6, r7
 80161fc:	4440      	add	r0, r8
 80161fe:	462a      	mov	r2, r5
 8016200:	2d00      	cmp	r5, #0
 8016202:	d1ea      	bne.n	80161da <ucdr_deserialize_endian_array_uint8_t+0x16>
 8016204:	2301      	movs	r3, #1
 8016206:	7da0      	ldrb	r0, [r4, #22]
 8016208:	7563      	strb	r3, [r4, #21]
 801620a:	4058      	eors	r0, r3
 801620c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016210:	4632      	mov	r2, r6
 8016212:	68a1      	ldr	r1, [r4, #8]
 8016214:	4640      	mov	r0, r8
 8016216:	f002 fb26 	bl	8018866 <memcpy>
 801621a:	68a2      	ldr	r2, [r4, #8]
 801621c:	6923      	ldr	r3, [r4, #16]
 801621e:	4432      	add	r2, r6
 8016220:	4433      	add	r3, r6
 8016222:	60a2      	str	r2, [r4, #8]
 8016224:	6123      	str	r3, [r4, #16]
 8016226:	e7ed      	b.n	8016204 <ucdr_deserialize_endian_array_uint8_t+0x40>

08016228 <ucdr_serialize_sequence_char>:
 8016228:	b570      	push	{r4, r5, r6, lr}
 801622a:	460e      	mov	r6, r1
 801622c:	4615      	mov	r5, r2
 801622e:	7d01      	ldrb	r1, [r0, #20]
 8016230:	4604      	mov	r4, r0
 8016232:	f7f8 ff05 	bl	800f040 <ucdr_serialize_endian_uint32_t>
 8016236:	b90d      	cbnz	r5, 801623c <ucdr_serialize_sequence_char+0x14>
 8016238:	2001      	movs	r0, #1
 801623a:	bd70      	pop	{r4, r5, r6, pc}
 801623c:	7d21      	ldrb	r1, [r4, #20]
 801623e:	462b      	mov	r3, r5
 8016240:	4632      	mov	r2, r6
 8016242:	4620      	mov	r0, r4
 8016244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016248:	f7ff bec2 	b.w	8015fd0 <ucdr_serialize_endian_array_char>

0801624c <ucdr_deserialize_sequence_char>:
 801624c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016250:	461d      	mov	r5, r3
 8016252:	4616      	mov	r6, r2
 8016254:	460f      	mov	r7, r1
 8016256:	461a      	mov	r2, r3
 8016258:	7d01      	ldrb	r1, [r0, #20]
 801625a:	4604      	mov	r4, r0
 801625c:	f7f9 f818 	bl	800f290 <ucdr_deserialize_endian_uint32_t>
 8016260:	682b      	ldr	r3, [r5, #0]
 8016262:	429e      	cmp	r6, r3
 8016264:	bf3c      	itt	cc
 8016266:	2201      	movcc	r2, #1
 8016268:	75a2      	strbcc	r2, [r4, #22]
 801626a:	b913      	cbnz	r3, 8016272 <ucdr_deserialize_sequence_char+0x26>
 801626c:	2001      	movs	r0, #1
 801626e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016272:	7d21      	ldrb	r1, [r4, #20]
 8016274:	463a      	mov	r2, r7
 8016276:	4620      	mov	r0, r4
 8016278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801627c:	f7ff beda 	b.w	8016034 <ucdr_deserialize_endian_array_char>

08016280 <ucdr_serialize_sequence_uint8_t>:
 8016280:	b570      	push	{r4, r5, r6, lr}
 8016282:	460e      	mov	r6, r1
 8016284:	4615      	mov	r5, r2
 8016286:	7d01      	ldrb	r1, [r0, #20]
 8016288:	4604      	mov	r4, r0
 801628a:	f7f8 fed9 	bl	800f040 <ucdr_serialize_endian_uint32_t>
 801628e:	b90d      	cbnz	r5, 8016294 <ucdr_serialize_sequence_uint8_t+0x14>
 8016290:	2001      	movs	r0, #1
 8016292:	bd70      	pop	{r4, r5, r6, pc}
 8016294:	7d21      	ldrb	r1, [r4, #20]
 8016296:	462b      	mov	r3, r5
 8016298:	4632      	mov	r2, r6
 801629a:	4620      	mov	r0, r4
 801629c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162a0:	f7ff bf2c 	b.w	80160fc <ucdr_serialize_endian_array_uint8_t>

080162a4 <ucdr_deserialize_sequence_uint8_t>:
 80162a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162a8:	461d      	mov	r5, r3
 80162aa:	4616      	mov	r6, r2
 80162ac:	460f      	mov	r7, r1
 80162ae:	461a      	mov	r2, r3
 80162b0:	7d01      	ldrb	r1, [r0, #20]
 80162b2:	4604      	mov	r4, r0
 80162b4:	f7f8 ffec 	bl	800f290 <ucdr_deserialize_endian_uint32_t>
 80162b8:	682b      	ldr	r3, [r5, #0]
 80162ba:	429e      	cmp	r6, r3
 80162bc:	bf3c      	itt	cc
 80162be:	2201      	movcc	r2, #1
 80162c0:	75a2      	strbcc	r2, [r4, #22]
 80162c2:	b913      	cbnz	r3, 80162ca <ucdr_deserialize_sequence_uint8_t+0x26>
 80162c4:	2001      	movs	r0, #1
 80162c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ca:	7d21      	ldrb	r1, [r4, #20]
 80162cc:	463a      	mov	r2, r7
 80162ce:	4620      	mov	r0, r4
 80162d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162d4:	f7ff bf76 	b.w	80161c4 <ucdr_deserialize_endian_array_uint8_t>

080162d8 <ucdr_serialize_string>:
 80162d8:	b510      	push	{r4, lr}
 80162da:	b082      	sub	sp, #8
 80162dc:	4604      	mov	r4, r0
 80162de:	4608      	mov	r0, r1
 80162e0:	9101      	str	r1, [sp, #4]
 80162e2:	f7e9 ff87 	bl	80001f4 <strlen>
 80162e6:	9901      	ldr	r1, [sp, #4]
 80162e8:	4602      	mov	r2, r0
 80162ea:	3201      	adds	r2, #1
 80162ec:	4620      	mov	r0, r4
 80162ee:	b002      	add	sp, #8
 80162f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162f4:	f7ff bf98 	b.w	8016228 <ucdr_serialize_sequence_char>

080162f8 <ucdr_deserialize_string>:
 80162f8:	b500      	push	{lr}
 80162fa:	b083      	sub	sp, #12
 80162fc:	ab01      	add	r3, sp, #4
 80162fe:	f7ff ffa5 	bl	801624c <ucdr_deserialize_sequence_char>
 8016302:	b003      	add	sp, #12
 8016304:	f85d fb04 	ldr.w	pc, [sp], #4

08016308 <get_custom_error>:
 8016308:	4b01      	ldr	r3, [pc, #4]	; (8016310 <get_custom_error+0x8>)
 801630a:	7818      	ldrb	r0, [r3, #0]
 801630c:	4770      	bx	lr
 801630e:	bf00      	nop
 8016310:	20009d20 	.word	0x20009d20

08016314 <recv_custom_msg>:
 8016314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016318:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801631c:	b089      	sub	sp, #36	; 0x24
 801631e:	2600      	movs	r6, #0
 8016320:	4604      	mov	r4, r0
 8016322:	9305      	str	r3, [sp, #20]
 8016324:	468a      	mov	sl, r1
 8016326:	4693      	mov	fp, r2
 8016328:	f88d 601e 	strb.w	r6, [sp, #30]
 801632c:	b325      	cbz	r5, 8016378 <recv_custom_msg+0x64>
 801632e:	f200 2902 	addw	r9, r0, #514	; 0x202
 8016332:	f10d 081f 	add.w	r8, sp, #31
 8016336:	af05      	add	r7, sp, #20
 8016338:	f10d 061e 	add.w	r6, sp, #30
 801633c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8016340:	e002      	b.n	8016348 <recv_custom_msg+0x34>
 8016342:	9b05      	ldr	r3, [sp, #20]
 8016344:	2b00      	cmp	r3, #0
 8016346:	dd0f      	ble.n	8016368 <recv_custom_msg+0x54>
 8016348:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801634c:	e9cd 5600 	strd	r5, r6, [sp]
 8016350:	4623      	mov	r3, r4
 8016352:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8016356:	4622      	mov	r2, r4
 8016358:	4648      	mov	r0, r9
 801635a:	f000 ffc9 	bl	80172f0 <uxr_read_framed_msg>
 801635e:	2800      	cmp	r0, #0
 8016360:	d0ef      	beq.n	8016342 <recv_custom_msg+0x2e>
 8016362:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016366:	b1b3      	cbz	r3, 8016396 <recv_custom_msg+0x82>
 8016368:	4b0f      	ldr	r3, [pc, #60]	; (80163a8 <recv_custom_msg+0x94>)
 801636a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801636e:	701a      	strb	r2, [r3, #0]
 8016370:	2000      	movs	r0, #0
 8016372:	b009      	add	sp, #36	; 0x24
 8016374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016378:	f10d 021f 	add.w	r2, sp, #31
 801637c:	9200      	str	r2, [sp, #0]
 801637e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8016382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016386:	4601      	mov	r1, r0
 8016388:	47a8      	blx	r5
 801638a:	2800      	cmp	r0, #0
 801638c:	d0ec      	beq.n	8016368 <recv_custom_msg+0x54>
 801638e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d1e8      	bne.n	8016368 <recv_custom_msg+0x54>
 8016396:	f8cb 0000 	str.w	r0, [fp]
 801639a:	2001      	movs	r0, #1
 801639c:	f8ca 4000 	str.w	r4, [sl]
 80163a0:	b009      	add	sp, #36	; 0x24
 80163a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163a6:	bf00      	nop
 80163a8:	20009d20 	.word	0x20009d20

080163ac <send_custom_msg>:
 80163ac:	b570      	push	{r4, r5, r6, lr}
 80163ae:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80163b2:	b086      	sub	sp, #24
 80163b4:	4616      	mov	r6, r2
 80163b6:	b975      	cbnz	r5, 80163d6 <send_custom_msg+0x2a>
 80163b8:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 80163bc:	f10d 0317 	add.w	r3, sp, #23
 80163c0:	47a0      	blx	r4
 80163c2:	b108      	cbz	r0, 80163c8 <send_custom_msg+0x1c>
 80163c4:	42b0      	cmp	r0, r6
 80163c6:	d015      	beq.n	80163f4 <send_custom_msg+0x48>
 80163c8:	4b0c      	ldr	r3, [pc, #48]	; (80163fc <send_custom_msg+0x50>)
 80163ca:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80163ce:	701a      	strb	r2, [r3, #0]
 80163d0:	2000      	movs	r0, #0
 80163d2:	b006      	add	sp, #24
 80163d4:	bd70      	pop	{r4, r5, r6, pc}
 80163d6:	460b      	mov	r3, r1
 80163d8:	2200      	movs	r2, #0
 80163da:	f10d 0117 	add.w	r1, sp, #23
 80163de:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80163e2:	9600      	str	r6, [sp, #0]
 80163e4:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80163e8:	4602      	mov	r2, r0
 80163ea:	f200 2002 	addw	r0, r0, #514	; 0x202
 80163ee:	f000 fd97 	bl	8016f20 <uxr_write_framed_msg>
 80163f2:	e7e6      	b.n	80163c2 <send_custom_msg+0x16>
 80163f4:	2001      	movs	r0, #1
 80163f6:	b006      	add	sp, #24
 80163f8:	bd70      	pop	{r4, r5, r6, pc}
 80163fa:	bf00      	nop
 80163fc:	20009d20 	.word	0x20009d20

08016400 <uxr_set_custom_transport_callbacks>:
 8016400:	b430      	push	{r4, r5}
 8016402:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8016406:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801640a:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 801640e:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8016412:	bc30      	pop	{r4, r5}
 8016414:	4770      	bx	lr
 8016416:	bf00      	nop

08016418 <uxr_init_custom_transport>:
 8016418:	b538      	push	{r3, r4, r5, lr}
 801641a:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801641e:	b303      	cbz	r3, 8016462 <uxr_init_custom_transport+0x4a>
 8016420:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8016424:	4604      	mov	r4, r0
 8016426:	b1e2      	cbz	r2, 8016462 <uxr_init_custom_transport+0x4a>
 8016428:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 801642c:	b1ca      	cbz	r2, 8016462 <uxr_init_custom_transport+0x4a>
 801642e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8016432:	b1b2      	cbz	r2, 8016462 <uxr_init_custom_transport+0x4a>
 8016434:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8016438:	4798      	blx	r3
 801643a:	4605      	mov	r5, r0
 801643c:	b188      	cbz	r0, 8016462 <uxr_init_custom_transport+0x4a>
 801643e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8016442:	b98b      	cbnz	r3, 8016468 <uxr_init_custom_transport+0x50>
 8016444:	480b      	ldr	r0, [pc, #44]	; (8016474 <uxr_init_custom_transport+0x5c>)
 8016446:	490c      	ldr	r1, [pc, #48]	; (8016478 <uxr_init_custom_transport+0x60>)
 8016448:	4a0c      	ldr	r2, [pc, #48]	; (801647c <uxr_init_custom_transport+0x64>)
 801644a:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 801644e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016452:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 8016456:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801645a:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801645e:	4628      	mov	r0, r5
 8016460:	bd38      	pop	{r3, r4, r5, pc}
 8016462:	2500      	movs	r5, #0
 8016464:	4628      	mov	r0, r5
 8016466:	bd38      	pop	{r3, r4, r5, pc}
 8016468:	2100      	movs	r1, #0
 801646a:	f204 2002 	addw	r0, r4, #514	; 0x202
 801646e:	f000 fd51 	bl	8016f14 <uxr_init_framing_io>
 8016472:	e7e7      	b.n	8016444 <uxr_init_custom_transport+0x2c>
 8016474:	080163ad 	.word	0x080163ad
 8016478:	08016315 	.word	0x08016315
 801647c:	08016309 	.word	0x08016309

08016480 <uxr_close_custom_transport>:
 8016480:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8016484:	4718      	bx	r3
 8016486:	bf00      	nop

08016488 <uxr_init_input_best_effort_stream>:
 8016488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801648c:	8003      	strh	r3, [r0, #0]
 801648e:	4770      	bx	lr

08016490 <uxr_reset_input_best_effort_stream>:
 8016490:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016494:	8003      	strh	r3, [r0, #0]
 8016496:	4770      	bx	lr

08016498 <uxr_receive_best_effort_message>:
 8016498:	b538      	push	{r3, r4, r5, lr}
 801649a:	4604      	mov	r4, r0
 801649c:	8800      	ldrh	r0, [r0, #0]
 801649e:	460d      	mov	r5, r1
 80164a0:	f000 fd20 	bl	8016ee4 <uxr_seq_num_cmp>
 80164a4:	4603      	mov	r3, r0
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80164ac:	bfb8      	it	lt
 80164ae:	8025      	strhlt	r5, [r4, #0]
 80164b0:	bd38      	pop	{r3, r4, r5, pc}
 80164b2:	bf00      	nop

080164b4 <on_full_input_buffer>:
 80164b4:	b570      	push	{r4, r5, r6, lr}
 80164b6:	6802      	ldr	r2, [r0, #0]
 80164b8:	460d      	mov	r5, r1
 80164ba:	6809      	ldr	r1, [r1, #0]
 80164bc:	686c      	ldr	r4, [r5, #4]
 80164be:	1a53      	subs	r3, r2, r1
 80164c0:	4606      	mov	r6, r0
 80164c2:	8928      	ldrh	r0, [r5, #8]
 80164c4:	fbb4 f4f0 	udiv	r4, r4, r0
 80164c8:	fbb3 f3f4 	udiv	r3, r3, r4
 80164cc:	3301      	adds	r3, #1
 80164ce:	b29b      	uxth	r3, r3
 80164d0:	fbb3 f2f0 	udiv	r2, r3, r0
 80164d4:	fb00 3312 	mls	r3, r0, r2, r3
 80164d8:	b29b      	uxth	r3, r3
 80164da:	fb04 f403 	mul.w	r4, r4, r3
 80164de:	1d23      	adds	r3, r4, #4
 80164e0:	440b      	add	r3, r1
 80164e2:	7d28      	ldrb	r0, [r5, #20]
 80164e4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80164e8:	b110      	cbz	r0, 80164f0 <on_full_input_buffer+0x3c>
 80164ea:	2000      	movs	r0, #0
 80164ec:	f843 0c04 	str.w	r0, [r3, #-4]
 80164f0:	2a03      	cmp	r2, #3
 80164f2:	d801      	bhi.n	80164f8 <on_full_input_buffer+0x44>
 80164f4:	2001      	movs	r0, #1
 80164f6:	bd70      	pop	{r4, r5, r6, pc}
 80164f8:	3408      	adds	r4, #8
 80164fa:	6933      	ldr	r3, [r6, #16]
 80164fc:	4421      	add	r1, r4
 80164fe:	4630      	mov	r0, r6
 8016500:	3a04      	subs	r2, #4
 8016502:	f7f9 fa91 	bl	800fa28 <ucdr_init_buffer_origin>
 8016506:	4630      	mov	r0, r6
 8016508:	4902      	ldr	r1, [pc, #8]	; (8016514 <on_full_input_buffer+0x60>)
 801650a:	462a      	mov	r2, r5
 801650c:	f7f9 fa6a 	bl	800f9e4 <ucdr_set_on_full_buffer_callback>
 8016510:	2000      	movs	r0, #0
 8016512:	bd70      	pop	{r4, r5, r6, pc}
 8016514:	080164b5 	.word	0x080164b5

08016518 <uxr_init_input_reliable_stream>:
 8016518:	b470      	push	{r4, r5, r6}
 801651a:	9c03      	ldr	r4, [sp, #12]
 801651c:	6001      	str	r1, [r0, #0]
 801651e:	2600      	movs	r6, #0
 8016520:	8103      	strh	r3, [r0, #8]
 8016522:	6042      	str	r2, [r0, #4]
 8016524:	6104      	str	r4, [r0, #16]
 8016526:	7506      	strb	r6, [r0, #20]
 8016528:	b1ab      	cbz	r3, 8016556 <uxr_init_input_reliable_stream+0x3e>
 801652a:	600e      	str	r6, [r1, #0]
 801652c:	8901      	ldrh	r1, [r0, #8]
 801652e:	2901      	cmp	r1, #1
 8016530:	d911      	bls.n	8016556 <uxr_init_input_reliable_stream+0x3e>
 8016532:	2201      	movs	r2, #1
 8016534:	e9d0 5400 	ldrd	r5, r4, [r0]
 8016538:	fbb2 f3f1 	udiv	r3, r2, r1
 801653c:	fb01 2313 	mls	r3, r1, r3, r2
 8016540:	b29b      	uxth	r3, r3
 8016542:	fbb4 f1f1 	udiv	r1, r4, r1
 8016546:	fb03 f301 	mul.w	r3, r3, r1
 801654a:	3201      	adds	r2, #1
 801654c:	50ee      	str	r6, [r5, r3]
 801654e:	8901      	ldrh	r1, [r0, #8]
 8016550:	b292      	uxth	r2, r2
 8016552:	4291      	cmp	r1, r2
 8016554:	d8ee      	bhi.n	8016534 <uxr_init_input_reliable_stream+0x1c>
 8016556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801655a:	bc70      	pop	{r4, r5, r6}
 801655c:	60c3      	str	r3, [r0, #12]
 801655e:	4770      	bx	lr

08016560 <uxr_reset_input_reliable_stream>:
 8016560:	8902      	ldrh	r2, [r0, #8]
 8016562:	b1ca      	cbz	r2, 8016598 <uxr_reset_input_reliable_stream+0x38>
 8016564:	b470      	push	{r4, r5, r6}
 8016566:	2400      	movs	r4, #0
 8016568:	4621      	mov	r1, r4
 801656a:	4626      	mov	r6, r4
 801656c:	fbb1 f3f2 	udiv	r3, r1, r2
 8016570:	fb02 1313 	mls	r3, r2, r3, r1
 8016574:	e9d0 5100 	ldrd	r5, r1, [r0]
 8016578:	b29b      	uxth	r3, r3
 801657a:	fbb1 f2f2 	udiv	r2, r1, r2
 801657e:	fb03 f302 	mul.w	r3, r3, r2
 8016582:	3401      	adds	r4, #1
 8016584:	50ee      	str	r6, [r5, r3]
 8016586:	8902      	ldrh	r2, [r0, #8]
 8016588:	b2a1      	uxth	r1, r4
 801658a:	428a      	cmp	r2, r1
 801658c:	d8ee      	bhi.n	801656c <uxr_reset_input_reliable_stream+0xc>
 801658e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016592:	bc70      	pop	{r4, r5, r6}
 8016594:	60c3      	str	r3, [r0, #12]
 8016596:	4770      	bx	lr
 8016598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801659c:	60c3      	str	r3, [r0, #12]
 801659e:	4770      	bx	lr

080165a0 <uxr_receive_reliable_message>:
 80165a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165a4:	4604      	mov	r4, r0
 80165a6:	460d      	mov	r5, r1
 80165a8:	8901      	ldrh	r1, [r0, #8]
 80165aa:	8980      	ldrh	r0, [r0, #12]
 80165ac:	4690      	mov	r8, r2
 80165ae:	461f      	mov	r7, r3
 80165b0:	f000 fc90 	bl	8016ed4 <uxr_seq_num_add>
 80165b4:	4629      	mov	r1, r5
 80165b6:	4606      	mov	r6, r0
 80165b8:	89a0      	ldrh	r0, [r4, #12]
 80165ba:	f000 fc93 	bl	8016ee4 <uxr_seq_num_cmp>
 80165be:	2800      	cmp	r0, #0
 80165c0:	db0a      	blt.n	80165d8 <uxr_receive_reliable_message+0x38>
 80165c2:	2600      	movs	r6, #0
 80165c4:	89e0      	ldrh	r0, [r4, #14]
 80165c6:	4629      	mov	r1, r5
 80165c8:	f000 fc8c 	bl	8016ee4 <uxr_seq_num_cmp>
 80165cc:	2800      	cmp	r0, #0
 80165ce:	bfb8      	it	lt
 80165d0:	81e5      	strhlt	r5, [r4, #14]
 80165d2:	4630      	mov	r0, r6
 80165d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165d8:	4630      	mov	r0, r6
 80165da:	4629      	mov	r1, r5
 80165dc:	f000 fc82 	bl	8016ee4 <uxr_seq_num_cmp>
 80165e0:	2800      	cmp	r0, #0
 80165e2:	dbee      	blt.n	80165c2 <uxr_receive_reliable_message+0x22>
 80165e4:	6923      	ldr	r3, [r4, #16]
 80165e6:	4640      	mov	r0, r8
 80165e8:	4798      	blx	r3
 80165ea:	2101      	movs	r1, #1
 80165ec:	4681      	mov	r9, r0
 80165ee:	89a0      	ldrh	r0, [r4, #12]
 80165f0:	f000 fc70 	bl	8016ed4 <uxr_seq_num_add>
 80165f4:	f1b9 0f00 	cmp.w	r9, #0
 80165f8:	d101      	bne.n	80165fe <uxr_receive_reliable_message+0x5e>
 80165fa:	4285      	cmp	r5, r0
 80165fc:	d049      	beq.n	8016692 <uxr_receive_reliable_message+0xf2>
 80165fe:	8921      	ldrh	r1, [r4, #8]
 8016600:	fbb5 f3f1 	udiv	r3, r5, r1
 8016604:	fb01 5313 	mls	r3, r1, r3, r5
 8016608:	b29b      	uxth	r3, r3
 801660a:	6862      	ldr	r2, [r4, #4]
 801660c:	6820      	ldr	r0, [r4, #0]
 801660e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016612:	fb03 f302 	mul.w	r3, r3, r2
 8016616:	3304      	adds	r3, #4
 8016618:	4418      	add	r0, r3
 801661a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d1cf      	bne.n	80165c2 <uxr_receive_reliable_message+0x22>
 8016622:	4641      	mov	r1, r8
 8016624:	463a      	mov	r2, r7
 8016626:	f002 f91e 	bl	8018866 <memcpy>
 801662a:	8921      	ldrh	r1, [r4, #8]
 801662c:	fbb5 f3f1 	udiv	r3, r5, r1
 8016630:	fb01 5313 	mls	r3, r1, r3, r5
 8016634:	b29b      	uxth	r3, r3
 8016636:	6862      	ldr	r2, [r4, #4]
 8016638:	fbb2 f2f1 	udiv	r2, r2, r1
 801663c:	6821      	ldr	r1, [r4, #0]
 801663e:	fb03 f302 	mul.w	r3, r3, r2
 8016642:	2201      	movs	r2, #1
 8016644:	50cf      	str	r7, [r1, r3]
 8016646:	9b08      	ldr	r3, [sp, #32]
 8016648:	701a      	strb	r2, [r3, #0]
 801664a:	f1b9 0f00 	cmp.w	r9, #0
 801664e:	d0b8      	beq.n	80165c2 <uxr_receive_reliable_message+0x22>
 8016650:	89a6      	ldrh	r6, [r4, #12]
 8016652:	e001      	b.n	8016658 <uxr_receive_reliable_message+0xb8>
 8016654:	2801      	cmp	r0, #1
 8016656:	d1b4      	bne.n	80165c2 <uxr_receive_reliable_message+0x22>
 8016658:	4630      	mov	r0, r6
 801665a:	2101      	movs	r1, #1
 801665c:	f000 fc3a 	bl	8016ed4 <uxr_seq_num_add>
 8016660:	8921      	ldrh	r1, [r4, #8]
 8016662:	fbb0 f3f1 	udiv	r3, r0, r1
 8016666:	fb01 0313 	mls	r3, r1, r3, r0
 801666a:	b29b      	uxth	r3, r3
 801666c:	6862      	ldr	r2, [r4, #4]
 801666e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016672:	4606      	mov	r6, r0
 8016674:	fb03 f302 	mul.w	r3, r3, r2
 8016678:	6820      	ldr	r0, [r4, #0]
 801667a:	3304      	adds	r3, #4
 801667c:	4418      	add	r0, r3
 801667e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d09d      	beq.n	80165c2 <uxr_receive_reliable_message+0x22>
 8016686:	6923      	ldr	r3, [r4, #16]
 8016688:	4798      	blx	r3
 801668a:	2802      	cmp	r0, #2
 801668c:	d1e2      	bne.n	8016654 <uxr_receive_reliable_message+0xb4>
 801668e:	2601      	movs	r6, #1
 8016690:	e798      	b.n	80165c4 <uxr_receive_reliable_message+0x24>
 8016692:	9b08      	ldr	r3, [sp, #32]
 8016694:	81a5      	strh	r5, [r4, #12]
 8016696:	2601      	movs	r6, #1
 8016698:	f883 9000 	strb.w	r9, [r3]
 801669c:	e792      	b.n	80165c4 <uxr_receive_reliable_message+0x24>
 801669e:	bf00      	nop

080166a0 <uxr_next_input_reliable_buffer_available>:
 80166a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166a4:	4604      	mov	r4, r0
 80166a6:	460e      	mov	r6, r1
 80166a8:	8980      	ldrh	r0, [r0, #12]
 80166aa:	2101      	movs	r1, #1
 80166ac:	4617      	mov	r7, r2
 80166ae:	f000 fc11 	bl	8016ed4 <uxr_seq_num_add>
 80166b2:	8921      	ldrh	r1, [r4, #8]
 80166b4:	fbb0 f3f1 	udiv	r3, r0, r1
 80166b8:	fb01 0313 	mls	r3, r1, r3, r0
 80166bc:	b29b      	uxth	r3, r3
 80166be:	6862      	ldr	r2, [r4, #4]
 80166c0:	fbb2 f2f1 	udiv	r2, r2, r1
 80166c4:	fb03 f302 	mul.w	r3, r3, r2
 80166c8:	6822      	ldr	r2, [r4, #0]
 80166ca:	3304      	adds	r3, #4
 80166cc:	eb02 0803 	add.w	r8, r2, r3
 80166d0:	f858 9c04 	ldr.w	r9, [r8, #-4]
 80166d4:	f1b9 0f00 	cmp.w	r9, #0
 80166d8:	d025      	beq.n	8016726 <uxr_next_input_reliable_buffer_available+0x86>
 80166da:	6923      	ldr	r3, [r4, #16]
 80166dc:	4605      	mov	r5, r0
 80166de:	4640      	mov	r0, r8
 80166e0:	4798      	blx	r3
 80166e2:	4682      	mov	sl, r0
 80166e4:	b310      	cbz	r0, 801672c <uxr_next_input_reliable_buffer_available+0x8c>
 80166e6:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80166ea:	e005      	b.n	80166f8 <uxr_next_input_reliable_buffer_available+0x58>
 80166ec:	6923      	ldr	r3, [r4, #16]
 80166ee:	4798      	blx	r3
 80166f0:	2802      	cmp	r0, #2
 80166f2:	d032      	beq.n	801675a <uxr_next_input_reliable_buffer_available+0xba>
 80166f4:	2801      	cmp	r0, #1
 80166f6:	d116      	bne.n	8016726 <uxr_next_input_reliable_buffer_available+0x86>
 80166f8:	4650      	mov	r0, sl
 80166fa:	2101      	movs	r1, #1
 80166fc:	f000 fbea 	bl	8016ed4 <uxr_seq_num_add>
 8016700:	8921      	ldrh	r1, [r4, #8]
 8016702:	fbb0 f3f1 	udiv	r3, r0, r1
 8016706:	fb01 0313 	mls	r3, r1, r3, r0
 801670a:	b29b      	uxth	r3, r3
 801670c:	6862      	ldr	r2, [r4, #4]
 801670e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016712:	4682      	mov	sl, r0
 8016714:	fb03 f302 	mul.w	r3, r3, r2
 8016718:	6820      	ldr	r0, [r4, #0]
 801671a:	3304      	adds	r3, #4
 801671c:	4418      	add	r0, r3
 801671e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d1e2      	bne.n	80166ec <uxr_next_input_reliable_buffer_available+0x4c>
 8016726:	2000      	movs	r0, #0
 8016728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801672c:	464a      	mov	r2, r9
 801672e:	4641      	mov	r1, r8
 8016730:	4630      	mov	r0, r6
 8016732:	f7f9 f981 	bl	800fa38 <ucdr_init_buffer>
 8016736:	8921      	ldrh	r1, [r4, #8]
 8016738:	fbb5 f3f1 	udiv	r3, r5, r1
 801673c:	fb01 5313 	mls	r3, r1, r3, r5
 8016740:	b29b      	uxth	r3, r3
 8016742:	6862      	ldr	r2, [r4, #4]
 8016744:	fbb2 f2f1 	udiv	r2, r2, r1
 8016748:	6821      	ldr	r1, [r4, #0]
 801674a:	fb03 f302 	mul.w	r3, r3, r2
 801674e:	2001      	movs	r0, #1
 8016750:	f841 a003 	str.w	sl, [r1, r3]
 8016754:	81a5      	strh	r5, [r4, #12]
 8016756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801675a:	8922      	ldrh	r2, [r4, #8]
 801675c:	fbb5 f0f2 	udiv	r0, r5, r2
 8016760:	fb02 5510 	mls	r5, r2, r0, r5
 8016764:	b2ad      	uxth	r5, r5
 8016766:	6863      	ldr	r3, [r4, #4]
 8016768:	fbb3 f3f2 	udiv	r3, r3, r2
 801676c:	fb05 f503 	mul.w	r5, r5, r3
 8016770:	6823      	ldr	r3, [r4, #0]
 8016772:	2000      	movs	r0, #0
 8016774:	5158      	str	r0, [r3, r5]
 8016776:	eba9 0207 	sub.w	r2, r9, r7
 801677a:	eb08 0107 	add.w	r1, r8, r7
 801677e:	4630      	mov	r0, r6
 8016780:	f7f9 f95a 	bl	800fa38 <ucdr_init_buffer>
 8016784:	4630      	mov	r0, r6
 8016786:	4904      	ldr	r1, [pc, #16]	; (8016798 <uxr_next_input_reliable_buffer_available+0xf8>)
 8016788:	4622      	mov	r2, r4
 801678a:	f7f9 f92b 	bl	800f9e4 <ucdr_set_on_full_buffer_callback>
 801678e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016792:	2001      	movs	r0, #1
 8016794:	e7c8      	b.n	8016728 <uxr_next_input_reliable_buffer_available+0x88>
 8016796:	bf00      	nop
 8016798:	080164b5 	.word	0x080164b5

0801679c <uxr_process_heartbeat>:
 801679c:	b538      	push	{r3, r4, r5, lr}
 801679e:	4611      	mov	r1, r2
 80167a0:	4604      	mov	r4, r0
 80167a2:	89c0      	ldrh	r0, [r0, #14]
 80167a4:	4615      	mov	r5, r2
 80167a6:	f000 fb9d 	bl	8016ee4 <uxr_seq_num_cmp>
 80167aa:	2800      	cmp	r0, #0
 80167ac:	bfb8      	it	lt
 80167ae:	81e5      	strhlt	r5, [r4, #14]
 80167b0:	bd38      	pop	{r3, r4, r5, pc}
 80167b2:	bf00      	nop

080167b4 <uxr_compute_acknack>:
 80167b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167b8:	8903      	ldrh	r3, [r0, #8]
 80167ba:	8986      	ldrh	r6, [r0, #12]
 80167bc:	4604      	mov	r4, r0
 80167be:	460d      	mov	r5, r1
 80167c0:	b1d3      	cbz	r3, 80167f8 <uxr_compute_acknack+0x44>
 80167c2:	4630      	mov	r0, r6
 80167c4:	2701      	movs	r7, #1
 80167c6:	e003      	b.n	80167d0 <uxr_compute_acknack+0x1c>
 80167c8:	4567      	cmp	r7, ip
 80167ca:	d215      	bcs.n	80167f8 <uxr_compute_acknack+0x44>
 80167cc:	89a0      	ldrh	r0, [r4, #12]
 80167ce:	3701      	adds	r7, #1
 80167d0:	b2b9      	uxth	r1, r7
 80167d2:	f000 fb7f 	bl	8016ed4 <uxr_seq_num_add>
 80167d6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80167da:	fbb0 f2fc 	udiv	r2, r0, ip
 80167de:	e9d4 1300 	ldrd	r1, r3, [r4]
 80167e2:	fb0c 0212 	mls	r2, ip, r2, r0
 80167e6:	b292      	uxth	r2, r2
 80167e8:	fbb3 f3fc 	udiv	r3, r3, ip
 80167ec:	fb02 1303 	mla	r3, r2, r3, r1
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d1e8      	bne.n	80167c8 <uxr_compute_acknack+0x14>
 80167f6:	4606      	mov	r6, r0
 80167f8:	802e      	strh	r6, [r5, #0]
 80167fa:	4630      	mov	r0, r6
 80167fc:	2101      	movs	r1, #1
 80167fe:	89e6      	ldrh	r6, [r4, #14]
 8016800:	f000 fb6c 	bl	8016edc <uxr_seq_num_sub>
 8016804:	4601      	mov	r1, r0
 8016806:	4630      	mov	r0, r6
 8016808:	f000 fb68 	bl	8016edc <uxr_seq_num_sub>
 801680c:	4606      	mov	r6, r0
 801680e:	b318      	cbz	r0, 8016858 <uxr_compute_acknack+0xa4>
 8016810:	f04f 0900 	mov.w	r9, #0
 8016814:	464f      	mov	r7, r9
 8016816:	f04f 0801 	mov.w	r8, #1
 801681a:	fa1f f189 	uxth.w	r1, r9
 801681e:	8828      	ldrh	r0, [r5, #0]
 8016820:	f000 fb58 	bl	8016ed4 <uxr_seq_num_add>
 8016824:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016828:	6822      	ldr	r2, [r4, #0]
 801682a:	fbb0 f1fc 	udiv	r1, r0, ip
 801682e:	fb01 011c 	mls	r1, r1, ip, r0
 8016832:	b289      	uxth	r1, r1
 8016834:	6863      	ldr	r3, [r4, #4]
 8016836:	fbb3 f3fc 	udiv	r3, r3, ip
 801683a:	fb01 2303 	mla	r3, r1, r3, r2
 801683e:	fa08 f209 	lsl.w	r2, r8, r9
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	f109 0901 	add.w	r9, r9, #1
 8016848:	b90b      	cbnz	r3, 801684e <uxr_compute_acknack+0x9a>
 801684a:	4317      	orrs	r7, r2
 801684c:	b2bf      	uxth	r7, r7
 801684e:	454e      	cmp	r6, r9
 8016850:	d1e3      	bne.n	801681a <uxr_compute_acknack+0x66>
 8016852:	4638      	mov	r0, r7
 8016854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016858:	4607      	mov	r7, r0
 801685a:	4638      	mov	r0, r7
 801685c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016860 <uxr_init_output_best_effort_stream>:
 8016860:	b410      	push	{r4}
 8016862:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8016866:	81c4      	strh	r4, [r0, #14]
 8016868:	e9c0 1300 	strd	r1, r3, [r0]
 801686c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016870:	7303      	strb	r3, [r0, #12]
 8016872:	6082      	str	r2, [r0, #8]
 8016874:	4770      	bx	lr
 8016876:	bf00      	nop

08016878 <uxr_reset_output_best_effort_stream>:
 8016878:	7b02      	ldrb	r2, [r0, #12]
 801687a:	6042      	str	r2, [r0, #4]
 801687c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016880:	81c3      	strh	r3, [r0, #14]
 8016882:	4770      	bx	lr

08016884 <uxr_prepare_best_effort_buffer_to_write>:
 8016884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016886:	4604      	mov	r4, r0
 8016888:	b083      	sub	sp, #12
 801688a:	6840      	ldr	r0, [r0, #4]
 801688c:	460d      	mov	r5, r1
 801688e:	4616      	mov	r6, r2
 8016890:	f7fa feb8 	bl	8011604 <uxr_submessage_padding>
 8016894:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8016898:	4410      	add	r0, r2
 801689a:	1942      	adds	r2, r0, r5
 801689c:	4293      	cmp	r3, r2
 801689e:	bf2c      	ite	cs
 80168a0:	2701      	movcs	r7, #1
 80168a2:	2700      	movcc	r7, #0
 80168a4:	d202      	bcs.n	80168ac <uxr_prepare_best_effort_buffer_to_write+0x28>
 80168a6:	4638      	mov	r0, r7
 80168a8:	b003      	add	sp, #12
 80168aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168ac:	9000      	str	r0, [sp, #0]
 80168ae:	6821      	ldr	r1, [r4, #0]
 80168b0:	4630      	mov	r0, r6
 80168b2:	2300      	movs	r3, #0
 80168b4:	f7f9 f8ae 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 80168b8:	6861      	ldr	r1, [r4, #4]
 80168ba:	4638      	mov	r0, r7
 80168bc:	4429      	add	r1, r5
 80168be:	6061      	str	r1, [r4, #4]
 80168c0:	b003      	add	sp, #12
 80168c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080168c4 <uxr_prepare_best_effort_buffer_to_send>:
 80168c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168c8:	6845      	ldr	r5, [r0, #4]
 80168ca:	4604      	mov	r4, r0
 80168cc:	7b00      	ldrb	r0, [r0, #12]
 80168ce:	4285      	cmp	r5, r0
 80168d0:	bf8c      	ite	hi
 80168d2:	2701      	movhi	r7, #1
 80168d4:	2700      	movls	r7, #0
 80168d6:	d802      	bhi.n	80168de <uxr_prepare_best_effort_buffer_to_send+0x1a>
 80168d8:	4638      	mov	r0, r7
 80168da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168de:	4688      	mov	r8, r1
 80168e0:	89e0      	ldrh	r0, [r4, #14]
 80168e2:	2101      	movs	r1, #1
 80168e4:	4615      	mov	r5, r2
 80168e6:	461e      	mov	r6, r3
 80168e8:	f000 faf4 	bl	8016ed4 <uxr_seq_num_add>
 80168ec:	e9d4 2300 	ldrd	r2, r3, [r4]
 80168f0:	81e0      	strh	r0, [r4, #14]
 80168f2:	8030      	strh	r0, [r6, #0]
 80168f4:	f8c8 2000 	str.w	r2, [r8]
 80168f8:	602b      	str	r3, [r5, #0]
 80168fa:	7b23      	ldrb	r3, [r4, #12]
 80168fc:	6063      	str	r3, [r4, #4]
 80168fe:	4638      	mov	r0, r7
 8016900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016904 <on_full_output_buffer>:
 8016904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016906:	6802      	ldr	r2, [r0, #0]
 8016908:	460d      	mov	r5, r1
 801690a:	6809      	ldr	r1, [r1, #0]
 801690c:	892f      	ldrh	r7, [r5, #8]
 801690e:	686c      	ldr	r4, [r5, #4]
 8016910:	fbb4 f4f7 	udiv	r4, r4, r7
 8016914:	1a53      	subs	r3, r2, r1
 8016916:	fbb3 f3f4 	udiv	r3, r3, r4
 801691a:	3301      	adds	r3, #1
 801691c:	b29b      	uxth	r3, r3
 801691e:	fbb3 f2f7 	udiv	r2, r3, r7
 8016922:	fb07 3312 	mls	r3, r7, r2, r3
 8016926:	b29b      	uxth	r3, r3
 8016928:	fb04 f403 	mul.w	r4, r4, r3
 801692c:	7b2f      	ldrb	r7, [r5, #12]
 801692e:	590a      	ldr	r2, [r1, r4]
 8016930:	6903      	ldr	r3, [r0, #16]
 8016932:	443c      	add	r4, r7
 8016934:	3408      	adds	r4, #8
 8016936:	1bd2      	subs	r2, r2, r7
 8016938:	4606      	mov	r6, r0
 801693a:	4421      	add	r1, r4
 801693c:	3a04      	subs	r2, #4
 801693e:	f7f9 f873 	bl	800fa28 <ucdr_init_buffer_origin>
 8016942:	4630      	mov	r0, r6
 8016944:	4902      	ldr	r1, [pc, #8]	; (8016950 <on_full_output_buffer+0x4c>)
 8016946:	462a      	mov	r2, r5
 8016948:	f7f9 f84c 	bl	800f9e4 <ucdr_set_on_full_buffer_callback>
 801694c:	2000      	movs	r0, #0
 801694e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016950:	08016905 	.word	0x08016905

08016954 <uxr_init_output_reliable_stream>:
 8016954:	b430      	push	{r4, r5}
 8016956:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801695a:	6001      	str	r1, [r0, #0]
 801695c:	8103      	strh	r3, [r0, #8]
 801695e:	6042      	str	r2, [r0, #4]
 8016960:	7304      	strb	r4, [r0, #12]
 8016962:	b1b3      	cbz	r3, 8016992 <uxr_init_output_reliable_stream+0x3e>
 8016964:	600c      	str	r4, [r1, #0]
 8016966:	8901      	ldrh	r1, [r0, #8]
 8016968:	2901      	cmp	r1, #1
 801696a:	d912      	bls.n	8016992 <uxr_init_output_reliable_stream+0x3e>
 801696c:	2201      	movs	r2, #1
 801696e:	e9d0 5400 	ldrd	r5, r4, [r0]
 8016972:	fbb2 f3f1 	udiv	r3, r2, r1
 8016976:	fb01 2313 	mls	r3, r1, r3, r2
 801697a:	b29b      	uxth	r3, r3
 801697c:	fbb4 f1f1 	udiv	r1, r4, r1
 8016980:	fb03 f301 	mul.w	r3, r3, r1
 8016984:	7b01      	ldrb	r1, [r0, #12]
 8016986:	50e9      	str	r1, [r5, r3]
 8016988:	3201      	adds	r2, #1
 801698a:	8901      	ldrh	r1, [r0, #8]
 801698c:	b292      	uxth	r2, r2
 801698e:	4291      	cmp	r1, r2
 8016990:	d8ed      	bhi.n	801696e <uxr_init_output_reliable_stream+0x1a>
 8016992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016996:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801699a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801699e:	4b05      	ldr	r3, [pc, #20]	; (80169b4 <uxr_init_output_reliable_stream+0x60>)
 80169a0:	f8c0 300e 	str.w	r3, [r0, #14]
 80169a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80169a8:	2300      	movs	r3, #0
 80169aa:	bc30      	pop	{r4, r5}
 80169ac:	8242      	strh	r2, [r0, #18]
 80169ae:	8403      	strh	r3, [r0, #32]
 80169b0:	4770      	bx	lr
 80169b2:	bf00      	nop
 80169b4:	ffff0000 	.word	0xffff0000

080169b8 <uxr_reset_output_reliable_stream>:
 80169b8:	8902      	ldrh	r2, [r0, #8]
 80169ba:	b430      	push	{r4, r5}
 80169bc:	b19a      	cbz	r2, 80169e6 <uxr_reset_output_reliable_stream+0x2e>
 80169be:	2400      	movs	r4, #0
 80169c0:	4621      	mov	r1, r4
 80169c2:	fbb1 f3f2 	udiv	r3, r1, r2
 80169c6:	fb02 1313 	mls	r3, r2, r3, r1
 80169ca:	e9d0 5100 	ldrd	r5, r1, [r0]
 80169ce:	b29b      	uxth	r3, r3
 80169d0:	fbb1 f2f2 	udiv	r2, r1, r2
 80169d4:	fb03 f302 	mul.w	r3, r3, r2
 80169d8:	7b02      	ldrb	r2, [r0, #12]
 80169da:	50ea      	str	r2, [r5, r3]
 80169dc:	3401      	adds	r4, #1
 80169de:	8902      	ldrh	r2, [r0, #8]
 80169e0:	b2a1      	uxth	r1, r4
 80169e2:	428a      	cmp	r2, r1
 80169e4:	d8ed      	bhi.n	80169c2 <uxr_reset_output_reliable_stream+0xa>
 80169e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80169ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80169ee:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80169f2:	4b05      	ldr	r3, [pc, #20]	; (8016a08 <uxr_reset_output_reliable_stream+0x50>)
 80169f4:	f8c0 300e 	str.w	r3, [r0, #14]
 80169f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80169fc:	2300      	movs	r3, #0
 80169fe:	bc30      	pop	{r4, r5}
 8016a00:	8242      	strh	r2, [r0, #18]
 8016a02:	8403      	strh	r3, [r0, #32]
 8016a04:	4770      	bx	lr
 8016a06:	bf00      	nop
 8016a08:	ffff0000 	.word	0xffff0000

08016a0c <uxr_prepare_reliable_buffer_to_write>:
 8016a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a10:	89c5      	ldrh	r5, [r0, #14]
 8016a12:	4604      	mov	r4, r0
 8016a14:	8900      	ldrh	r0, [r0, #8]
 8016a16:	fbb5 f3f0 	udiv	r3, r5, r0
 8016a1a:	4688      	mov	r8, r1
 8016a1c:	e9d4 1600 	ldrd	r1, r6, [r4]
 8016a20:	fb00 5313 	mls	r3, r0, r3, r5
 8016a24:	b29b      	uxth	r3, r3
 8016a26:	fbb6 f0f0 	udiv	r0, r6, r0
 8016a2a:	fb00 f303 	mul.w	r3, r0, r3
 8016a2e:	3304      	adds	r3, #4
 8016a30:	18cb      	adds	r3, r1, r3
 8016a32:	b091      	sub	sp, #68	; 0x44
 8016a34:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8016a38:	9004      	str	r0, [sp, #16]
 8016a3a:	2104      	movs	r1, #4
 8016a3c:	4630      	mov	r0, r6
 8016a3e:	9305      	str	r3, [sp, #20]
 8016a40:	9206      	str	r2, [sp, #24]
 8016a42:	f7f8 fffd 	bl	800fa40 <ucdr_alignment>
 8016a46:	1833      	adds	r3, r6, r0
 8016a48:	9804      	ldr	r0, [sp, #16]
 8016a4a:	9303      	str	r3, [sp, #12]
 8016a4c:	eb03 0708 	add.w	r7, r3, r8
 8016a50:	1f06      	subs	r6, r0, #4
 8016a52:	42b7      	cmp	r7, r6
 8016a54:	f240 80dc 	bls.w	8016c10 <uxr_prepare_reliable_buffer_to_write+0x204>
 8016a58:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8016a5c:	eb0e 0308 	add.w	r3, lr, r8
 8016a60:	42b3      	cmp	r3, r6
 8016a62:	f240 80c2 	bls.w	8016bea <uxr_prepare_reliable_buffer_to_write+0x1de>
 8016a66:	9b03      	ldr	r3, [sp, #12]
 8016a68:	3304      	adds	r3, #4
 8016a6a:	42b3      	cmp	r3, r6
 8016a6c:	f080 8112 	bcs.w	8016c94 <uxr_prepare_reliable_buffer_to_write+0x288>
 8016a70:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016a74:	f1bc 0f00 	cmp.w	ip, #0
 8016a78:	f000 8127 	beq.w	8016cca <uxr_prepare_reliable_buffer_to_write+0x2be>
 8016a7c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8016a80:	2100      	movs	r1, #0
 8016a82:	4608      	mov	r0, r1
 8016a84:	460a      	mov	r2, r1
 8016a86:	fbb3 f9fc 	udiv	r9, r3, ip
 8016a8a:	fbb2 f3fc 	udiv	r3, r2, ip
 8016a8e:	fb0c 2313 	mls	r3, ip, r3, r2
 8016a92:	b29b      	uxth	r3, r3
 8016a94:	fb09 7303 	mla	r3, r9, r3, r7
 8016a98:	3101      	adds	r1, #1
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	459e      	cmp	lr, r3
 8016a9e:	bf08      	it	eq
 8016aa0:	3001      	addeq	r0, #1
 8016aa2:	b28a      	uxth	r2, r1
 8016aa4:	bf08      	it	eq
 8016aa6:	b280      	uxtheq	r0, r0
 8016aa8:	4562      	cmp	r2, ip
 8016aaa:	d3ee      	bcc.n	8016a8a <uxr_prepare_reliable_buffer_to_write+0x7e>
 8016aac:	9b03      	ldr	r3, [sp, #12]
 8016aae:	1f37      	subs	r7, r6, #4
 8016ab0:	b2bf      	uxth	r7, r7
 8016ab2:	eba7 0903 	sub.w	r9, r7, r3
 8016ab6:	fa1f f989 	uxth.w	r9, r9
 8016aba:	eba7 070e 	sub.w	r7, r7, lr
 8016abe:	b2bf      	uxth	r7, r7
 8016ac0:	eba8 0809 	sub.w	r8, r8, r9
 8016ac4:	fbb8 faf7 	udiv	sl, r8, r7
 8016ac8:	fb07 831a 	mls	r3, r7, sl, r8
 8016acc:	9707      	str	r7, [sp, #28]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	f040 80bf 	bne.w	8016c52 <uxr_prepare_reliable_buffer_to_write+0x246>
 8016ad4:	fa1f fa8a 	uxth.w	sl, sl
 8016ad8:	4582      	cmp	sl, r0
 8016ada:	f200 8095 	bhi.w	8016c08 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8016ade:	f10d 0b20 	add.w	fp, sp, #32
 8016ae2:	f1ba 0f00 	cmp.w	sl, #0
 8016ae6:	d03a      	beq.n	8016b5e <uxr_prepare_reliable_buffer_to_write+0x152>
 8016ae8:	f04f 0800 	mov.w	r8, #0
 8016aec:	f10d 0b20 	add.w	fp, sp, #32
 8016af0:	e000      	b.n	8016af4 <uxr_prepare_reliable_buffer_to_write+0xe8>
 8016af2:	46b9      	mov	r9, r7
 8016af4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8016af8:	fbb5 f1fc 	udiv	r1, r5, ip
 8016afc:	fb0c 5111 	mls	r1, ip, r1, r5
 8016b00:	b289      	uxth	r1, r1
 8016b02:	fbb2 f2fc 	udiv	r2, r2, ip
 8016b06:	fb01 f102 	mul.w	r1, r1, r2
 8016b0a:	3104      	adds	r1, #4
 8016b0c:	4419      	add	r1, r3
 8016b0e:	4632      	mov	r2, r6
 8016b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b14:	9300      	str	r3, [sp, #0]
 8016b16:	4658      	mov	r0, fp
 8016b18:	2300      	movs	r3, #0
 8016b1a:	f7f8 ff7b 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 8016b1e:	464a      	mov	r2, r9
 8016b20:	2300      	movs	r3, #0
 8016b22:	210d      	movs	r1, #13
 8016b24:	4658      	mov	r0, fp
 8016b26:	f7fa fd2d 	bl	8011584 <uxr_buffer_submessage_header>
 8016b2a:	8920      	ldrh	r0, [r4, #8]
 8016b2c:	fbb5 f3f0 	udiv	r3, r5, r0
 8016b30:	e9d4 2100 	ldrd	r2, r1, [r4]
 8016b34:	fb00 5313 	mls	r3, r0, r3, r5
 8016b38:	b29b      	uxth	r3, r3
 8016b3a:	fbb1 f1f0 	udiv	r1, r1, r0
 8016b3e:	fb03 f301 	mul.w	r3, r3, r1
 8016b42:	4628      	mov	r0, r5
 8016b44:	50d6      	str	r6, [r2, r3]
 8016b46:	2101      	movs	r1, #1
 8016b48:	f000 f9c4 	bl	8016ed4 <uxr_seq_num_add>
 8016b4c:	f108 0801 	add.w	r8, r8, #1
 8016b50:	fa1f f388 	uxth.w	r3, r8
 8016b54:	459a      	cmp	sl, r3
 8016b56:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016b5a:	4605      	mov	r5, r0
 8016b5c:	d8c9      	bhi.n	8016af2 <uxr_prepare_reliable_buffer_to_write+0xe6>
 8016b5e:	fbb5 f1fc 	udiv	r1, r5, ip
 8016b62:	fb0c 5111 	mls	r1, ip, r1, r5
 8016b66:	b289      	uxth	r1, r1
 8016b68:	6863      	ldr	r3, [r4, #4]
 8016b6a:	fbb3 fcfc 	udiv	ip, r3, ip
 8016b6e:	6823      	ldr	r3, [r4, #0]
 8016b70:	fb01 f10c 	mul.w	r1, r1, ip
 8016b74:	3104      	adds	r1, #4
 8016b76:	4419      	add	r1, r3
 8016b78:	4632      	mov	r2, r6
 8016b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b7e:	9300      	str	r3, [sp, #0]
 8016b80:	4658      	mov	r0, fp
 8016b82:	2300      	movs	r3, #0
 8016b84:	f7f8 ff46 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 8016b88:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016b8c:	4658      	mov	r0, fp
 8016b8e:	fa1f f288 	uxth.w	r2, r8
 8016b92:	2302      	movs	r3, #2
 8016b94:	210d      	movs	r1, #13
 8016b96:	f7fa fcf5 	bl	8011584 <uxr_buffer_submessage_header>
 8016b9a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8016b9e:	8921      	ldrh	r1, [r4, #8]
 8016ba0:	9f03      	ldr	r7, [sp, #12]
 8016ba2:	9307      	str	r3, [sp, #28]
 8016ba4:	9b05      	ldr	r3, [sp, #20]
 8016ba6:	7b26      	ldrb	r6, [r4, #12]
 8016ba8:	fbb5 f0f1 	udiv	r0, r5, r1
 8016bac:	fbb2 f2f1 	udiv	r2, r2, r1
 8016bb0:	fb01 5010 	mls	r0, r1, r0, r5
 8016bb4:	1d39      	adds	r1, r7, #4
 8016bb6:	440b      	add	r3, r1
 8016bb8:	b280      	uxth	r0, r0
 8016bba:	fb00 f002 	mul.w	r0, r0, r2
 8016bbe:	4619      	mov	r1, r3
 8016bc0:	3604      	adds	r6, #4
 8016bc2:	9b07      	ldr	r3, [sp, #28]
 8016bc4:	9a04      	ldr	r2, [sp, #16]
 8016bc6:	4446      	add	r6, r8
 8016bc8:	501e      	str	r6, [r3, r0]
 8016bca:	9e06      	ldr	r6, [sp, #24]
 8016bcc:	3a08      	subs	r2, #8
 8016bce:	1bd2      	subs	r2, r2, r7
 8016bd0:	4630      	mov	r0, r6
 8016bd2:	f7f8 ff31 	bl	800fa38 <ucdr_init_buffer>
 8016bd6:	4630      	mov	r0, r6
 8016bd8:	493d      	ldr	r1, [pc, #244]	; (8016cd0 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8016bda:	4622      	mov	r2, r4
 8016bdc:	f7f8 ff02 	bl	800f9e4 <ucdr_set_on_full_buffer_callback>
 8016be0:	2001      	movs	r0, #1
 8016be2:	81e5      	strh	r5, [r4, #14]
 8016be4:	b011      	add	sp, #68	; 0x44
 8016be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bea:	2101      	movs	r1, #1
 8016bec:	89e0      	ldrh	r0, [r4, #14]
 8016bee:	f000 f971 	bl	8016ed4 <uxr_seq_num_add>
 8016bf2:	8921      	ldrh	r1, [r4, #8]
 8016bf4:	4605      	mov	r5, r0
 8016bf6:	8a60      	ldrh	r0, [r4, #18]
 8016bf8:	f000 f96c 	bl	8016ed4 <uxr_seq_num_add>
 8016bfc:	4601      	mov	r1, r0
 8016bfe:	4628      	mov	r0, r5
 8016c00:	f000 f970 	bl	8016ee4 <uxr_seq_num_cmp>
 8016c04:	2800      	cmp	r0, #0
 8016c06:	dd2a      	ble.n	8016c5e <uxr_prepare_reliable_buffer_to_write+0x252>
 8016c08:	2000      	movs	r0, #0
 8016c0a:	b011      	add	sp, #68	; 0x44
 8016c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c10:	8921      	ldrh	r1, [r4, #8]
 8016c12:	8a60      	ldrh	r0, [r4, #18]
 8016c14:	f000 f95e 	bl	8016ed4 <uxr_seq_num_add>
 8016c18:	4601      	mov	r1, r0
 8016c1a:	4628      	mov	r0, r5
 8016c1c:	f000 f962 	bl	8016ee4 <uxr_seq_num_cmp>
 8016c20:	2800      	cmp	r0, #0
 8016c22:	dcf1      	bgt.n	8016c08 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8016c24:	8921      	ldrh	r1, [r4, #8]
 8016c26:	fbb5 f3f1 	udiv	r3, r5, r1
 8016c2a:	e9d4 4200 	ldrd	r4, r2, [r4]
 8016c2e:	fb01 5313 	mls	r3, r1, r3, r5
 8016c32:	b29b      	uxth	r3, r3
 8016c34:	fbb2 f2f1 	udiv	r2, r2, r1
 8016c38:	fb03 f302 	mul.w	r3, r3, r2
 8016c3c:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8016c40:	50e7      	str	r7, [r4, r3]
 8016c42:	9b03      	ldr	r3, [sp, #12]
 8016c44:	9300      	str	r3, [sp, #0]
 8016c46:	463a      	mov	r2, r7
 8016c48:	2300      	movs	r3, #0
 8016c4a:	f7f8 fee3 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 8016c4e:	2001      	movs	r0, #1
 8016c50:	e7db      	b.n	8016c0a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8016c52:	f10a 0a01 	add.w	sl, sl, #1
 8016c56:	fa1f fa8a 	uxth.w	sl, sl
 8016c5a:	9307      	str	r3, [sp, #28]
 8016c5c:	e73c      	b.n	8016ad8 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8016c5e:	8920      	ldrh	r0, [r4, #8]
 8016c60:	fbb5 f3f0 	udiv	r3, r5, r0
 8016c64:	fb00 5313 	mls	r3, r0, r3, r5
 8016c68:	b29b      	uxth	r3, r3
 8016c6a:	6862      	ldr	r2, [r4, #4]
 8016c6c:	6821      	ldr	r1, [r4, #0]
 8016c6e:	fbb2 f0f0 	udiv	r0, r2, r0
 8016c72:	fb03 f300 	mul.w	r3, r3, r0
 8016c76:	7b22      	ldrb	r2, [r4, #12]
 8016c78:	9806      	ldr	r0, [sp, #24]
 8016c7a:	3304      	adds	r3, #4
 8016c7c:	4419      	add	r1, r3
 8016c7e:	4442      	add	r2, r8
 8016c80:	f841 2c04 	str.w	r2, [r1, #-4]
 8016c84:	7b23      	ldrb	r3, [r4, #12]
 8016c86:	9300      	str	r3, [sp, #0]
 8016c88:	2300      	movs	r3, #0
 8016c8a:	f7f8 fec3 	bl	800fa14 <ucdr_init_buffer_origin_offset>
 8016c8e:	81e5      	strh	r5, [r4, #14]
 8016c90:	2001      	movs	r0, #1
 8016c92:	e7ba      	b.n	8016c0a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8016c94:	4628      	mov	r0, r5
 8016c96:	2101      	movs	r1, #1
 8016c98:	f000 f91c 	bl	8016ed4 <uxr_seq_num_add>
 8016c9c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016ca0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016ca4:	fbb3 f1fc 	udiv	r1, r3, ip
 8016ca8:	fbb0 f3fc 	udiv	r3, r0, ip
 8016cac:	fb0c 0313 	mls	r3, ip, r3, r0
 8016cb0:	b29b      	uxth	r3, r3
 8016cb2:	fb03 f301 	mul.w	r3, r3, r1
 8016cb6:	3304      	adds	r3, #4
 8016cb8:	18d3      	adds	r3, r2, r3
 8016cba:	9305      	str	r3, [sp, #20]
 8016cbc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016cc0:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8016cc4:	9303      	str	r3, [sp, #12]
 8016cc6:	4605      	mov	r5, r0
 8016cc8:	e6d4      	b.n	8016a74 <uxr_prepare_reliable_buffer_to_write+0x68>
 8016cca:	4660      	mov	r0, ip
 8016ccc:	e6ee      	b.n	8016aac <uxr_prepare_reliable_buffer_to_write+0xa0>
 8016cce:	bf00      	nop
 8016cd0:	08016905 	.word	0x08016905

08016cd4 <uxr_prepare_next_reliable_buffer_to_send>:
 8016cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cd8:	4605      	mov	r5, r0
 8016cda:	4688      	mov	r8, r1
 8016cdc:	8a00      	ldrh	r0, [r0, #16]
 8016cde:	2101      	movs	r1, #1
 8016ce0:	4617      	mov	r7, r2
 8016ce2:	461e      	mov	r6, r3
 8016ce4:	f000 f8f6 	bl	8016ed4 <uxr_seq_num_add>
 8016ce8:	8030      	strh	r0, [r6, #0]
 8016cea:	892a      	ldrh	r2, [r5, #8]
 8016cec:	fbb0 f3f2 	udiv	r3, r0, r2
 8016cf0:	fb02 0413 	mls	r4, r2, r3, r0
 8016cf4:	b2a4      	uxth	r4, r4
 8016cf6:	686b      	ldr	r3, [r5, #4]
 8016cf8:	fbb3 f2f2 	udiv	r2, r3, r2
 8016cfc:	682b      	ldr	r3, [r5, #0]
 8016cfe:	89e9      	ldrh	r1, [r5, #14]
 8016d00:	fb04 f402 	mul.w	r4, r4, r2
 8016d04:	3404      	adds	r4, #4
 8016d06:	4423      	add	r3, r4
 8016d08:	f8c8 3000 	str.w	r3, [r8]
 8016d0c:	682b      	ldr	r3, [r5, #0]
 8016d0e:	441c      	add	r4, r3
 8016d10:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016d14:	603b      	str	r3, [r7, #0]
 8016d16:	f000 f8e5 	bl	8016ee4 <uxr_seq_num_cmp>
 8016d1a:	2800      	cmp	r0, #0
 8016d1c:	dd02      	ble.n	8016d24 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8016d1e:	2000      	movs	r0, #0
 8016d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d24:	683a      	ldr	r2, [r7, #0]
 8016d26:	7b2b      	ldrb	r3, [r5, #12]
 8016d28:	429a      	cmp	r2, r3
 8016d2a:	d9f8      	bls.n	8016d1e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016d2c:	8a69      	ldrh	r1, [r5, #18]
 8016d2e:	8a28      	ldrh	r0, [r5, #16]
 8016d30:	f000 f8d4 	bl	8016edc <uxr_seq_num_sub>
 8016d34:	892b      	ldrh	r3, [r5, #8]
 8016d36:	4283      	cmp	r3, r0
 8016d38:	d0f1      	beq.n	8016d1e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016d3a:	8830      	ldrh	r0, [r6, #0]
 8016d3c:	89eb      	ldrh	r3, [r5, #14]
 8016d3e:	8228      	strh	r0, [r5, #16]
 8016d40:	4298      	cmp	r0, r3
 8016d42:	d002      	beq.n	8016d4a <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8016d44:	2001      	movs	r0, #1
 8016d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d4a:	2101      	movs	r1, #1
 8016d4c:	f000 f8c2 	bl	8016ed4 <uxr_seq_num_add>
 8016d50:	81e8      	strh	r0, [r5, #14]
 8016d52:	2001      	movs	r0, #1
 8016d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016d58 <uxr_update_output_stream_heartbeat_timestamp>:
 8016d58:	b5d0      	push	{r4, r6, r7, lr}
 8016d5a:	8a01      	ldrh	r1, [r0, #16]
 8016d5c:	4604      	mov	r4, r0
 8016d5e:	8a40      	ldrh	r0, [r0, #18]
 8016d60:	4616      	mov	r6, r2
 8016d62:	461f      	mov	r7, r3
 8016d64:	f000 f8be 	bl	8016ee4 <uxr_seq_num_cmp>
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	db07      	blt.n	8016d7c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016d70:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016d74:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016d78:	2000      	movs	r0, #0
 8016d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8016d7c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016d80:	b948      	cbnz	r0, 8016d96 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8016d82:	2301      	movs	r3, #1
 8016d84:	f884 3020 	strb.w	r3, [r4, #32]
 8016d88:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8016d8c:	f147 0200 	adc.w	r2, r7, #0
 8016d90:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8016d94:	bdd0      	pop	{r4, r6, r7, pc}
 8016d96:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016d9a:	4296      	cmp	r6, r2
 8016d9c:	eb77 0303 	sbcs.w	r3, r7, r3
 8016da0:	bfa5      	ittet	ge
 8016da2:	3001      	addge	r0, #1
 8016da4:	f884 0020 	strbge.w	r0, [r4, #32]
 8016da8:	2000      	movlt	r0, #0
 8016daa:	2001      	movge	r0, #1
 8016dac:	e7ec      	b.n	8016d88 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8016dae:	bf00      	nop

08016db0 <uxr_begin_output_nack_buffer_it>:
 8016db0:	8a40      	ldrh	r0, [r0, #18]
 8016db2:	4770      	bx	lr

08016db4 <uxr_next_reliable_nack_buffer_to_send>:
 8016db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016db8:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8016dbc:	f1b9 0f00 	cmp.w	r9, #0
 8016dc0:	d011      	beq.n	8016de6 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8016dc2:	4605      	mov	r5, r0
 8016dc4:	8818      	ldrh	r0, [r3, #0]
 8016dc6:	460f      	mov	r7, r1
 8016dc8:	4690      	mov	r8, r2
 8016dca:	461e      	mov	r6, r3
 8016dcc:	2101      	movs	r1, #1
 8016dce:	f000 f881 	bl	8016ed4 <uxr_seq_num_add>
 8016dd2:	8030      	strh	r0, [r6, #0]
 8016dd4:	8a29      	ldrh	r1, [r5, #16]
 8016dd6:	f000 f885 	bl	8016ee4 <uxr_seq_num_cmp>
 8016dda:	2800      	cmp	r0, #0
 8016ddc:	dd06      	ble.n	8016dec <uxr_next_reliable_nack_buffer_to_send+0x38>
 8016dde:	f04f 0900 	mov.w	r9, #0
 8016de2:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8016de6:	4648      	mov	r0, r9
 8016de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dec:	892a      	ldrh	r2, [r5, #8]
 8016dee:	8830      	ldrh	r0, [r6, #0]
 8016df0:	fbb0 f4f2 	udiv	r4, r0, r2
 8016df4:	fb02 0414 	mls	r4, r2, r4, r0
 8016df8:	b2a4      	uxth	r4, r4
 8016dfa:	686b      	ldr	r3, [r5, #4]
 8016dfc:	fbb3 f2f2 	udiv	r2, r3, r2
 8016e00:	682b      	ldr	r3, [r5, #0]
 8016e02:	fb04 f402 	mul.w	r4, r4, r2
 8016e06:	3404      	adds	r4, #4
 8016e08:	4423      	add	r3, r4
 8016e0a:	603b      	str	r3, [r7, #0]
 8016e0c:	682b      	ldr	r3, [r5, #0]
 8016e0e:	441c      	add	r4, r3
 8016e10:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016e14:	f8c8 3000 	str.w	r3, [r8]
 8016e18:	7b2a      	ldrb	r2, [r5, #12]
 8016e1a:	429a      	cmp	r2, r3
 8016e1c:	d0d6      	beq.n	8016dcc <uxr_next_reliable_nack_buffer_to_send+0x18>
 8016e1e:	4648      	mov	r0, r9
 8016e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016e24 <uxr_process_acknack>:
 8016e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e26:	4604      	mov	r4, r0
 8016e28:	460e      	mov	r6, r1
 8016e2a:	4610      	mov	r0, r2
 8016e2c:	2101      	movs	r1, #1
 8016e2e:	f000 f855 	bl	8016edc <uxr_seq_num_sub>
 8016e32:	8a61      	ldrh	r1, [r4, #18]
 8016e34:	f000 f852 	bl	8016edc <uxr_seq_num_sub>
 8016e38:	b1c0      	cbz	r0, 8016e6c <uxr_process_acknack+0x48>
 8016e3a:	4605      	mov	r5, r0
 8016e3c:	2700      	movs	r7, #0
 8016e3e:	2101      	movs	r1, #1
 8016e40:	8a60      	ldrh	r0, [r4, #18]
 8016e42:	f000 f847 	bl	8016ed4 <uxr_seq_num_add>
 8016e46:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016e4a:	fbb0 f3fc 	udiv	r3, r0, ip
 8016e4e:	e9d4 2100 	ldrd	r2, r1, [r4]
 8016e52:	fb0c 0313 	mls	r3, ip, r3, r0
 8016e56:	b29b      	uxth	r3, r3
 8016e58:	fbb1 f1fc 	udiv	r1, r1, ip
 8016e5c:	3701      	adds	r7, #1
 8016e5e:	fb03 f301 	mul.w	r3, r3, r1
 8016e62:	42bd      	cmp	r5, r7
 8016e64:	7b21      	ldrb	r1, [r4, #12]
 8016e66:	8260      	strh	r0, [r4, #18]
 8016e68:	50d1      	str	r1, [r2, r3]
 8016e6a:	d1e8      	bne.n	8016e3e <uxr_process_acknack+0x1a>
 8016e6c:	3e00      	subs	r6, #0
 8016e6e:	f04f 0300 	mov.w	r3, #0
 8016e72:	bf18      	it	ne
 8016e74:	2601      	movne	r6, #1
 8016e76:	f884 3020 	strb.w	r3, [r4, #32]
 8016e7a:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8016e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016e80 <uxr_is_output_up_to_date>:
 8016e80:	8a01      	ldrh	r1, [r0, #16]
 8016e82:	8a40      	ldrh	r0, [r0, #18]
 8016e84:	b508      	push	{r3, lr}
 8016e86:	f000 f82d 	bl	8016ee4 <uxr_seq_num_cmp>
 8016e8a:	fab0 f080 	clz	r0, r0
 8016e8e:	0940      	lsrs	r0, r0, #5
 8016e90:	bd08      	pop	{r3, pc}
 8016e92:	bf00      	nop

08016e94 <get_available_free_slots>:
 8016e94:	8901      	ldrh	r1, [r0, #8]
 8016e96:	b1d9      	cbz	r1, 8016ed0 <get_available_free_slots+0x3c>
 8016e98:	b4f0      	push	{r4, r5, r6, r7}
 8016e9a:	2400      	movs	r4, #0
 8016e9c:	6845      	ldr	r5, [r0, #4]
 8016e9e:	6807      	ldr	r7, [r0, #0]
 8016ea0:	7b06      	ldrb	r6, [r0, #12]
 8016ea2:	fbb5 f5f1 	udiv	r5, r5, r1
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	4622      	mov	r2, r4
 8016eaa:	fbb2 f3f1 	udiv	r3, r2, r1
 8016eae:	fb01 2313 	mls	r3, r1, r3, r2
 8016eb2:	b29b      	uxth	r3, r3
 8016eb4:	fb05 7303 	mla	r3, r5, r3, r7
 8016eb8:	3401      	adds	r4, #1
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	429e      	cmp	r6, r3
 8016ebe:	bf08      	it	eq
 8016ec0:	3001      	addeq	r0, #1
 8016ec2:	b2a2      	uxth	r2, r4
 8016ec4:	bf08      	it	eq
 8016ec6:	b280      	uxtheq	r0, r0
 8016ec8:	428a      	cmp	r2, r1
 8016eca:	d3ee      	bcc.n	8016eaa <get_available_free_slots+0x16>
 8016ecc:	bcf0      	pop	{r4, r5, r6, r7}
 8016ece:	4770      	bx	lr
 8016ed0:	4608      	mov	r0, r1
 8016ed2:	4770      	bx	lr

08016ed4 <uxr_seq_num_add>:
 8016ed4:	4408      	add	r0, r1
 8016ed6:	b280      	uxth	r0, r0
 8016ed8:	4770      	bx	lr
 8016eda:	bf00      	nop

08016edc <uxr_seq_num_sub>:
 8016edc:	1a40      	subs	r0, r0, r1
 8016ede:	b280      	uxth	r0, r0
 8016ee0:	4770      	bx	lr
 8016ee2:	bf00      	nop

08016ee4 <uxr_seq_num_cmp>:
 8016ee4:	4288      	cmp	r0, r1
 8016ee6:	d011      	beq.n	8016f0c <uxr_seq_num_cmp+0x28>
 8016ee8:	d309      	bcc.n	8016efe <uxr_seq_num_cmp+0x1a>
 8016eea:	4288      	cmp	r0, r1
 8016eec:	d910      	bls.n	8016f10 <uxr_seq_num_cmp+0x2c>
 8016eee:	1a40      	subs	r0, r0, r1
 8016ef0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8016ef4:	bfd4      	ite	le
 8016ef6:	2001      	movle	r0, #1
 8016ef8:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8016efc:	4770      	bx	lr
 8016efe:	1a0b      	subs	r3, r1, r0
 8016f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016f04:	daf1      	bge.n	8016eea <uxr_seq_num_cmp+0x6>
 8016f06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f0a:	4770      	bx	lr
 8016f0c:	2000      	movs	r0, #0
 8016f0e:	4770      	bx	lr
 8016f10:	2001      	movs	r0, #1
 8016f12:	4770      	bx	lr

08016f14 <uxr_init_framing_io>:
 8016f14:	2300      	movs	r3, #0
 8016f16:	7041      	strb	r1, [r0, #1]
 8016f18:	7003      	strb	r3, [r0, #0]
 8016f1a:	8583      	strh	r3, [r0, #44]	; 0x2c
 8016f1c:	4770      	bx	lr
 8016f1e:	bf00      	nop

08016f20 <uxr_write_framed_msg>:
 8016f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f24:	7845      	ldrb	r5, [r0, #1]
 8016f26:	b085      	sub	sp, #20
 8016f28:	4604      	mov	r4, r0
 8016f2a:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8016f2e:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8016f32:	f1bc 0f01 	cmp.w	ip, #1
 8016f36:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8016f3a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8016f3e:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8016f42:	460e      	mov	r6, r1
 8016f44:	4617      	mov	r7, r2
 8016f46:	469b      	mov	fp, r3
 8016f48:	f240 8116 	bls.w	8017178 <uxr_write_framed_msg+0x258>
 8016f4c:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8016f50:	2302      	movs	r3, #2
 8016f52:	2a01      	cmp	r2, #1
 8016f54:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8016f58:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016f5c:	f240 8091 	bls.w	8017082 <uxr_write_framed_msg+0x162>
 8016f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f62:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8016f66:	b2d9      	uxtb	r1, r3
 8016f68:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8016f6c:	2203      	movs	r2, #3
 8016f6e:	2b01      	cmp	r3, #1
 8016f70:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016f74:	f240 809a 	bls.w	80170ac <uxr_write_framed_msg+0x18c>
 8016f78:	18a3      	adds	r3, r4, r2
 8016f7a:	3201      	adds	r2, #1
 8016f7c:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8016f80:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016f84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f86:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016f8a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016f8e:	2901      	cmp	r1, #1
 8016f90:	eb04 0102 	add.w	r1, r4, r2
 8016f94:	f240 8101 	bls.w	801719a <uxr_write_framed_msg+0x27a>
 8016f98:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8016f9c:	3201      	adds	r2, #1
 8016f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016fa0:	b2d2      	uxtb	r2, r2
 8016fa2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	f000 8106 	beq.w	80171b8 <uxr_write_framed_msg+0x298>
 8016fac:	f04f 0a00 	mov.w	sl, #0
 8016fb0:	46d1      	mov	r9, sl
 8016fb2:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8016fb6:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016fba:	2901      	cmp	r1, #1
 8016fbc:	f240 80a3 	bls.w	8017106 <uxr_write_framed_msg+0x1e6>
 8016fc0:	2a29      	cmp	r2, #41	; 0x29
 8016fc2:	d87f      	bhi.n	80170c4 <uxr_write_framed_msg+0x1a4>
 8016fc4:	18a1      	adds	r1, r4, r2
 8016fc6:	3201      	adds	r2, #1
 8016fc8:	b2d2      	uxtb	r2, r2
 8016fca:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8016fce:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016fd2:	ea8a 0303 	eor.w	r3, sl, r3
 8016fd6:	4984      	ldr	r1, [pc, #528]	; (80171e8 <uxr_write_framed_msg+0x2c8>)
 8016fd8:	b2db      	uxtb	r3, r3
 8016fda:	f109 0901 	add.w	r9, r9, #1
 8016fde:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016fe2:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8016fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016fe8:	454b      	cmp	r3, r9
 8016fea:	d8e2      	bhi.n	8016fb2 <uxr_write_framed_msg+0x92>
 8016fec:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016ff0:	fa5f f98a 	uxtb.w	r9, sl
 8016ff4:	9301      	str	r3, [sp, #4]
 8016ff6:	f04f 0b00 	mov.w	fp, #0
 8016ffa:	f88d 900c 	strb.w	r9, [sp, #12]
 8016ffe:	f88d 300d 	strb.w	r3, [sp, #13]
 8017002:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8017006:	fa5f f18a 	uxtb.w	r1, sl
 801700a:	2901      	cmp	r1, #1
 801700c:	d920      	bls.n	8017050 <uxr_write_framed_msg+0x130>
 801700e:	2a29      	cmp	r2, #41	; 0x29
 8017010:	f240 808b 	bls.w	801712a <uxr_write_framed_msg+0x20a>
 8017014:	2500      	movs	r5, #0
 8017016:	e000      	b.n	801701a <uxr_write_framed_msg+0xfa>
 8017018:	b160      	cbz	r0, 8017034 <uxr_write_framed_msg+0x114>
 801701a:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801701e:	1b52      	subs	r2, r2, r5
 8017020:	4421      	add	r1, r4
 8017022:	4643      	mov	r3, r8
 8017024:	4638      	mov	r0, r7
 8017026:	47b0      	blx	r6
 8017028:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801702c:	4405      	add	r5, r0
 801702e:	4295      	cmp	r5, r2
 8017030:	d3f2      	bcc.n	8017018 <uxr_write_framed_msg+0xf8>
 8017032:	d003      	beq.n	801703c <uxr_write_framed_msg+0x11c>
 8017034:	2000      	movs	r0, #0
 8017036:	b005      	add	sp, #20
 8017038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801703c:	fa5f f18a 	uxtb.w	r1, sl
 8017040:	f04f 0300 	mov.w	r3, #0
 8017044:	2901      	cmp	r1, #1
 8017046:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801704a:	f04f 0200 	mov.w	r2, #0
 801704e:	d86c      	bhi.n	801712a <uxr_write_framed_msg+0x20a>
 8017050:	1c51      	adds	r1, r2, #1
 8017052:	b2c9      	uxtb	r1, r1
 8017054:	2929      	cmp	r1, #41	; 0x29
 8017056:	d8dd      	bhi.n	8017014 <uxr_write_framed_msg+0xf4>
 8017058:	18a0      	adds	r0, r4, r2
 801705a:	3202      	adds	r2, #2
 801705c:	f089 0920 	eor.w	r9, r9, #32
 8017060:	b2d2      	uxtb	r2, r2
 8017062:	4659      	mov	r1, fp
 8017064:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8017068:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 801706c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8017070:	f04f 0b01 	mov.w	fp, #1
 8017074:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017078:	2900      	cmp	r1, #0
 801707a:	d162      	bne.n	8017142 <uxr_write_framed_msg+0x222>
 801707c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017080:	e7bf      	b.n	8017002 <uxr_write_framed_msg+0xe2>
 8017082:	2204      	movs	r2, #4
 8017084:	2503      	movs	r5, #3
 8017086:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017088:	4423      	add	r3, r4
 801708a:	b2c9      	uxtb	r1, r1
 801708c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8017090:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8017094:	4425      	add	r5, r4
 8017096:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801709a:	f080 0020 	eor.w	r0, r0, #32
 801709e:	2b01      	cmp	r3, #1
 80170a0:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 80170a4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80170a8:	f63f af66 	bhi.w	8016f78 <uxr_write_framed_msg+0x58>
 80170ac:	18a3      	adds	r3, r4, r2
 80170ae:	f081 0120 	eor.w	r1, r1, #32
 80170b2:	3202      	adds	r2, #2
 80170b4:	207d      	movs	r0, #125	; 0x7d
 80170b6:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 80170ba:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 80170be:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80170c2:	e75f      	b.n	8016f84 <uxr_write_framed_msg+0x64>
 80170c4:	2500      	movs	r5, #0
 80170c6:	e001      	b.n	80170cc <uxr_write_framed_msg+0x1ac>
 80170c8:	2800      	cmp	r0, #0
 80170ca:	d0b3      	beq.n	8017034 <uxr_write_framed_msg+0x114>
 80170cc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80170d0:	1b52      	subs	r2, r2, r5
 80170d2:	4421      	add	r1, r4
 80170d4:	4643      	mov	r3, r8
 80170d6:	4638      	mov	r0, r7
 80170d8:	47b0      	blx	r6
 80170da:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80170de:	4405      	add	r5, r0
 80170e0:	4295      	cmp	r5, r2
 80170e2:	d3f1      	bcc.n	80170c8 <uxr_write_framed_msg+0x1a8>
 80170e4:	d1a6      	bne.n	8017034 <uxr_write_framed_msg+0x114>
 80170e6:	f04f 0300 	mov.w	r3, #0
 80170ea:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80170ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170f0:	454b      	cmp	r3, r9
 80170f2:	d971      	bls.n	80171d8 <uxr_write_framed_msg+0x2b8>
 80170f4:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80170f8:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80170fc:	2901      	cmp	r1, #1
 80170fe:	f04f 0200 	mov.w	r2, #0
 8017102:	f63f af5d 	bhi.w	8016fc0 <uxr_write_framed_msg+0xa0>
 8017106:	1c51      	adds	r1, r2, #1
 8017108:	b2c9      	uxtb	r1, r1
 801710a:	2929      	cmp	r1, #41	; 0x29
 801710c:	d8da      	bhi.n	80170c4 <uxr_write_framed_msg+0x1a4>
 801710e:	18a0      	adds	r0, r4, r2
 8017110:	3202      	adds	r2, #2
 8017112:	b2d2      	uxtb	r2, r2
 8017114:	f083 0120 	eor.w	r1, r3, #32
 8017118:	f04f 057d 	mov.w	r5, #125	; 0x7d
 801711c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8017120:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8017124:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017128:	e753      	b.n	8016fd2 <uxr_write_framed_msg+0xb2>
 801712a:	18a0      	adds	r0, r4, r2
 801712c:	3201      	adds	r2, #1
 801712e:	b2d2      	uxtb	r2, r2
 8017130:	4659      	mov	r1, fp
 8017132:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8017136:	f04f 0b01 	mov.w	fp, #1
 801713a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801713e:	2900      	cmp	r1, #0
 8017140:	d09c      	beq.n	801707c <uxr_write_framed_msg+0x15c>
 8017142:	2500      	movs	r5, #0
 8017144:	e002      	b.n	801714c <uxr_write_framed_msg+0x22c>
 8017146:	2800      	cmp	r0, #0
 8017148:	f43f af74 	beq.w	8017034 <uxr_write_framed_msg+0x114>
 801714c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8017150:	1b52      	subs	r2, r2, r5
 8017152:	4421      	add	r1, r4
 8017154:	4643      	mov	r3, r8
 8017156:	4638      	mov	r0, r7
 8017158:	47b0      	blx	r6
 801715a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801715e:	4405      	add	r5, r0
 8017160:	4295      	cmp	r5, r2
 8017162:	d3f0      	bcc.n	8017146 <uxr_write_framed_msg+0x226>
 8017164:	f47f af66 	bne.w	8017034 <uxr_write_framed_msg+0x114>
 8017168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801716a:	2300      	movs	r3, #0
 801716c:	b290      	uxth	r0, r2
 801716e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8017172:	b005      	add	sp, #20
 8017174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017178:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801717c:	f085 0520 	eor.w	r5, r5, #32
 8017180:	2303      	movs	r3, #3
 8017182:	217d      	movs	r1, #125	; 0x7d
 8017184:	2a01      	cmp	r2, #1
 8017186:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 801718a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801718e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8017192:	d814      	bhi.n	80171be <uxr_write_framed_msg+0x29e>
 8017194:	2205      	movs	r2, #5
 8017196:	2504      	movs	r5, #4
 8017198:	e775      	b.n	8017086 <uxr_write_framed_msg+0x166>
 801719a:	f083 0320 	eor.w	r3, r3, #32
 801719e:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 80171a2:	3202      	adds	r2, #2
 80171a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171a6:	b2d2      	uxtb	r2, r2
 80171a8:	207d      	movs	r0, #125	; 0x7d
 80171aa:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80171ae:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	f47f aefa 	bne.w	8016fac <uxr_write_framed_msg+0x8c>
 80171b8:	9301      	str	r3, [sp, #4]
 80171ba:	4699      	mov	r9, r3
 80171bc:	e71b      	b.n	8016ff6 <uxr_write_framed_msg+0xd6>
 80171be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171c0:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80171c4:	b2d9      	uxtb	r1, r3
 80171c6:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80171ca:	2204      	movs	r2, #4
 80171cc:	2b01      	cmp	r3, #1
 80171ce:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80171d2:	f63f aed1 	bhi.w	8016f78 <uxr_write_framed_msg+0x58>
 80171d6:	e769      	b.n	80170ac <uxr_write_framed_msg+0x18c>
 80171d8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80171dc:	fa5f f98a 	uxtb.w	r9, sl
 80171e0:	9301      	str	r3, [sp, #4]
 80171e2:	2200      	movs	r2, #0
 80171e4:	e707      	b.n	8016ff6 <uxr_write_framed_msg+0xd6>
 80171e6:	bf00      	nop
 80171e8:	0801a008 	.word	0x0801a008

080171ec <uxr_framing_read_transport>:
 80171ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171f0:	4604      	mov	r4, r0
 80171f2:	b083      	sub	sp, #12
 80171f4:	461f      	mov	r7, r3
 80171f6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80171fa:	4689      	mov	r9, r1
 80171fc:	4692      	mov	sl, r2
 80171fe:	f7fa fa07 	bl	8011610 <uxr_millis>
 8017202:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017206:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 801720a:	42b3      	cmp	r3, r6
 801720c:	4680      	mov	r8, r0
 801720e:	d05f      	beq.n	80172d0 <uxr_framing_read_transport+0xe4>
 8017210:	d81b      	bhi.n	801724a <uxr_framing_read_transport+0x5e>
 8017212:	1e75      	subs	r5, r6, #1
 8017214:	1aed      	subs	r5, r5, r3
 8017216:	b2ed      	uxtb	r5, r5
 8017218:	2600      	movs	r6, #0
 801721a:	455d      	cmp	r5, fp
 801721c:	d81e      	bhi.n	801725c <uxr_framing_read_transport+0x70>
 801721e:	19ab      	adds	r3, r5, r6
 8017220:	455b      	cmp	r3, fp
 8017222:	bf84      	itt	hi
 8017224:	ebab 0605 	subhi.w	r6, fp, r5
 8017228:	b2f6      	uxtbhi	r6, r6
 801722a:	b9e5      	cbnz	r5, 8017266 <uxr_framing_read_transport+0x7a>
 801722c:	f04f 0b00 	mov.w	fp, #0
 8017230:	f7fa f9ee 	bl	8011610 <uxr_millis>
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	eba0 0008 	sub.w	r0, r0, r8
 801723a:	1a1b      	subs	r3, r3, r0
 801723c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017240:	4658      	mov	r0, fp
 8017242:	603b      	str	r3, [r7, #0]
 8017244:	b003      	add	sp, #12
 8017246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801724a:	2e00      	cmp	r6, #0
 801724c:	d048      	beq.n	80172e0 <uxr_framing_read_transport+0xf4>
 801724e:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8017252:	b2ed      	uxtb	r5, r5
 8017254:	3e01      	subs	r6, #1
 8017256:	455d      	cmp	r5, fp
 8017258:	b2f6      	uxtb	r6, r6
 801725a:	d9e0      	bls.n	801721e <uxr_framing_read_transport+0x32>
 801725c:	fa5f f58b 	uxtb.w	r5, fp
 8017260:	2600      	movs	r6, #0
 8017262:	2d00      	cmp	r5, #0
 8017264:	d0e2      	beq.n	801722c <uxr_framing_read_transport+0x40>
 8017266:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801726a:	3102      	adds	r1, #2
 801726c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801726e:	9300      	str	r3, [sp, #0]
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	4421      	add	r1, r4
 8017274:	462a      	mov	r2, r5
 8017276:	4650      	mov	r0, sl
 8017278:	47c8      	blx	r9
 801727a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801727e:	4a1b      	ldr	r2, [pc, #108]	; (80172ec <uxr_framing_read_transport+0x100>)
 8017280:	4403      	add	r3, r0
 8017282:	0859      	lsrs	r1, r3, #1
 8017284:	fba2 2101 	umull	r2, r1, r2, r1
 8017288:	0889      	lsrs	r1, r1, #2
 801728a:	222a      	movs	r2, #42	; 0x2a
 801728c:	fb02 3111 	mls	r1, r2, r1, r3
 8017290:	4683      	mov	fp, r0
 8017292:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8017296:	2800      	cmp	r0, #0
 8017298:	d0c8      	beq.n	801722c <uxr_framing_read_transport+0x40>
 801729a:	42a8      	cmp	r0, r5
 801729c:	d1c8      	bne.n	8017230 <uxr_framing_read_transport+0x44>
 801729e:	b31e      	cbz	r6, 80172e8 <uxr_framing_read_transport+0xfc>
 80172a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172a2:	9300      	str	r3, [sp, #0]
 80172a4:	3102      	adds	r1, #2
 80172a6:	4421      	add	r1, r4
 80172a8:	4632      	mov	r2, r6
 80172aa:	2300      	movs	r3, #0
 80172ac:	4650      	mov	r0, sl
 80172ae:	47c8      	blx	r9
 80172b0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80172b4:	490d      	ldr	r1, [pc, #52]	; (80172ec <uxr_framing_read_transport+0x100>)
 80172b6:	181a      	adds	r2, r3, r0
 80172b8:	0853      	lsrs	r3, r2, #1
 80172ba:	fba1 1303 	umull	r1, r3, r1, r3
 80172be:	089b      	lsrs	r3, r3, #2
 80172c0:	212a      	movs	r1, #42	; 0x2a
 80172c2:	fb01 2313 	mls	r3, r1, r3, r2
 80172c6:	eb00 0b05 	add.w	fp, r0, r5
 80172ca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80172ce:	e7af      	b.n	8017230 <uxr_framing_read_transport+0x44>
 80172d0:	2600      	movs	r6, #0
 80172d2:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80172d6:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80172d8:	d9c0      	bls.n	801725c <uxr_framing_read_transport+0x70>
 80172da:	2102      	movs	r1, #2
 80172dc:	2529      	movs	r5, #41	; 0x29
 80172de:	e7c5      	b.n	801726c <uxr_framing_read_transport+0x80>
 80172e0:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80172e4:	b2ed      	uxtb	r5, r5
 80172e6:	e798      	b.n	801721a <uxr_framing_read_transport+0x2e>
 80172e8:	46ab      	mov	fp, r5
 80172ea:	e7a1      	b.n	8017230 <uxr_framing_read_transport+0x44>
 80172ec:	30c30c31 	.word	0x30c30c31

080172f0 <uxr_read_framed_msg>:
 80172f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172f4:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 80172f8:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 80172fc:	42ae      	cmp	r6, r5
 80172fe:	b083      	sub	sp, #12
 8017300:	4604      	mov	r4, r0
 8017302:	461f      	mov	r7, r3
 8017304:	4689      	mov	r9, r1
 8017306:	4692      	mov	sl, r2
 8017308:	f000 817d 	beq.w	8017606 <uxr_read_framed_msg+0x316>
 801730c:	7823      	ldrb	r3, [r4, #0]
 801730e:	4ecc      	ldr	r6, [pc, #816]	; (8017640 <uxr_read_framed_msg+0x350>)
 8017310:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8017644 <uxr_read_framed_msg+0x354>
 8017314:	2b07      	cmp	r3, #7
 8017316:	d8fd      	bhi.n	8017314 <uxr_read_framed_msg+0x24>
 8017318:	e8df f013 	tbh	[pc, r3, lsl #1]
 801731c:	00f40113 	.word	0x00f40113
 8017320:	00b700d4 	.word	0x00b700d4
 8017324:	004d008e 	.word	0x004d008e
 8017328:	00080030 	.word	0x00080030
 801732c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017330:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017334:	4298      	cmp	r0, r3
 8017336:	f000 8141 	beq.w	80175bc <uxr_read_framed_msg+0x2cc>
 801733a:	18e2      	adds	r2, r4, r3
 801733c:	7891      	ldrb	r1, [r2, #2]
 801733e:	297d      	cmp	r1, #125	; 0x7d
 8017340:	f000 81a2 	beq.w	8017688 <uxr_read_framed_msg+0x398>
 8017344:	3301      	adds	r3, #1
 8017346:	085a      	lsrs	r2, r3, #1
 8017348:	fba6 0202 	umull	r0, r2, r6, r2
 801734c:	0892      	lsrs	r2, r2, #2
 801734e:	202a      	movs	r0, #42	; 0x2a
 8017350:	fb00 3312 	mls	r3, r0, r2, r3
 8017354:	297e      	cmp	r1, #126	; 0x7e
 8017356:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801735a:	f000 8251 	beq.w	8017800 <uxr_read_framed_msg+0x510>
 801735e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017360:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017362:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017366:	b29b      	uxth	r3, r3
 8017368:	2100      	movs	r1, #0
 801736a:	429a      	cmp	r2, r3
 801736c:	86a3      	strh	r3, [r4, #52]	; 0x34
 801736e:	7021      	strb	r1, [r4, #0]
 8017370:	f000 8182 	beq.w	8017678 <uxr_read_framed_msg+0x388>
 8017374:	2000      	movs	r0, #0
 8017376:	b003      	add	sp, #12
 8017378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801737c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017380:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017384:	4298      	cmp	r0, r3
 8017386:	f000 8128 	beq.w	80175da <uxr_read_framed_msg+0x2ea>
 801738a:	18e2      	adds	r2, r4, r3
 801738c:	7891      	ldrb	r1, [r2, #2]
 801738e:	297d      	cmp	r1, #125	; 0x7d
 8017390:	f000 8196 	beq.w	80176c0 <uxr_read_framed_msg+0x3d0>
 8017394:	3301      	adds	r3, #1
 8017396:	085a      	lsrs	r2, r3, #1
 8017398:	fba6 0202 	umull	r0, r2, r6, r2
 801739c:	0892      	lsrs	r2, r2, #2
 801739e:	202a      	movs	r0, #42	; 0x2a
 80173a0:	fb00 3312 	mls	r3, r0, r2, r3
 80173a4:	297e      	cmp	r1, #126	; 0x7e
 80173a6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80173aa:	f000 8219 	beq.w	80177e0 <uxr_read_framed_msg+0x4f0>
 80173ae:	2307      	movs	r3, #7
 80173b0:	86a1      	strh	r1, [r4, #52]	; 0x34
 80173b2:	7023      	strb	r3, [r4, #0]
 80173b4:	e7ae      	b.n	8017314 <uxr_read_framed_msg+0x24>
 80173b6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80173b8:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80173ba:	429d      	cmp	r5, r3
 80173bc:	d937      	bls.n	801742e <uxr_read_framed_msg+0x13e>
 80173be:	ee07 9a90 	vmov	s15, r9
 80173c2:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80173c6:	e01e      	b.n	8017406 <uxr_read_framed_msg+0x116>
 80173c8:	f89e e002 	ldrb.w	lr, [lr, #2]
 80173cc:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 80173d0:	f000 80d2 	beq.w	8017578 <uxr_read_framed_msg+0x288>
 80173d4:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80173d8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80173dc:	f000 8214 	beq.w	8017808 <uxr_read_framed_msg+0x518>
 80173e0:	f807 e003 	strb.w	lr, [r7, r3]
 80173e4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80173e6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80173e8:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80173ea:	ea80 010e 	eor.w	r1, r0, lr
 80173ee:	b2c9      	uxtb	r1, r1
 80173f0:	3301      	adds	r3, #1
 80173f2:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 80173f6:	b29b      	uxth	r3, r3
 80173f8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80173fc:	42ab      	cmp	r3, r5
 80173fe:	86e2      	strh	r2, [r4, #54]	; 0x36
 8017400:	8663      	strh	r3, [r4, #50]	; 0x32
 8017402:	f080 8121 	bcs.w	8017648 <uxr_read_framed_msg+0x358>
 8017406:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 801740a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801740e:	f101 0b01 	add.w	fp, r1, #1
 8017412:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8017416:	fba6 9202 	umull	r9, r2, r6, r2
 801741a:	0892      	lsrs	r2, r2, #2
 801741c:	4288      	cmp	r0, r1
 801741e:	eb04 0e01 	add.w	lr, r4, r1
 8017422:	fb0c b212 	mls	r2, ip, r2, fp
 8017426:	d1cf      	bne.n	80173c8 <uxr_read_framed_msg+0xd8>
 8017428:	ee17 9a90 	vmov	r9, s15
 801742c:	429d      	cmp	r5, r3
 801742e:	f040 8112 	bne.w	8017656 <uxr_read_framed_msg+0x366>
 8017432:	2306      	movs	r3, #6
 8017434:	7023      	strb	r3, [r4, #0]
 8017436:	e76d      	b.n	8017314 <uxr_read_framed_msg+0x24>
 8017438:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801743c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017440:	4298      	cmp	r0, r3
 8017442:	f000 80bb 	beq.w	80175bc <uxr_read_framed_msg+0x2cc>
 8017446:	18e2      	adds	r2, r4, r3
 8017448:	7891      	ldrb	r1, [r2, #2]
 801744a:	297d      	cmp	r1, #125	; 0x7d
 801744c:	f000 8153 	beq.w	80176f6 <uxr_read_framed_msg+0x406>
 8017450:	3301      	adds	r3, #1
 8017452:	085a      	lsrs	r2, r3, #1
 8017454:	fba6 0202 	umull	r0, r2, r6, r2
 8017458:	0892      	lsrs	r2, r2, #2
 801745a:	202a      	movs	r0, #42	; 0x2a
 801745c:	fb00 3212 	mls	r2, r0, r2, r3
 8017460:	297e      	cmp	r1, #126	; 0x7e
 8017462:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017466:	f000 81cb 	beq.w	8017800 <uxr_read_framed_msg+0x510>
 801746a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801746c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017470:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017472:	b29b      	uxth	r3, r3
 8017474:	2000      	movs	r0, #0
 8017476:	428b      	cmp	r3, r1
 8017478:	8623      	strh	r3, [r4, #48]	; 0x30
 801747a:	8660      	strh	r0, [r4, #50]	; 0x32
 801747c:	86e0      	strh	r0, [r4, #54]	; 0x36
 801747e:	f240 80db 	bls.w	8017638 <uxr_read_framed_msg+0x348>
 8017482:	7020      	strb	r0, [r4, #0]
 8017484:	b003      	add	sp, #12
 8017486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801748a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801748e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017492:	4298      	cmp	r0, r3
 8017494:	f000 80a1 	beq.w	80175da <uxr_read_framed_msg+0x2ea>
 8017498:	18e2      	adds	r2, r4, r3
 801749a:	7891      	ldrb	r1, [r2, #2]
 801749c:	297d      	cmp	r1, #125	; 0x7d
 801749e:	f000 8167 	beq.w	8017770 <uxr_read_framed_msg+0x480>
 80174a2:	3301      	adds	r3, #1
 80174a4:	085a      	lsrs	r2, r3, #1
 80174a6:	fba6 0202 	umull	r0, r2, r6, r2
 80174aa:	0892      	lsrs	r2, r2, #2
 80174ac:	202a      	movs	r0, #42	; 0x2a
 80174ae:	fb00 3312 	mls	r3, r0, r2, r3
 80174b2:	297e      	cmp	r1, #126	; 0x7e
 80174b4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80174b8:	f000 8192 	beq.w	80177e0 <uxr_read_framed_msg+0x4f0>
 80174bc:	2304      	movs	r3, #4
 80174be:	8621      	strh	r1, [r4, #48]	; 0x30
 80174c0:	7023      	strb	r3, [r4, #0]
 80174c2:	e727      	b.n	8017314 <uxr_read_framed_msg+0x24>
 80174c4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80174c8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80174cc:	4290      	cmp	r0, r2
 80174ce:	f000 80b1 	beq.w	8017634 <uxr_read_framed_msg+0x344>
 80174d2:	18a3      	adds	r3, r4, r2
 80174d4:	7899      	ldrb	r1, [r3, #2]
 80174d6:	297d      	cmp	r1, #125	; 0x7d
 80174d8:	f000 8166 	beq.w	80177a8 <uxr_read_framed_msg+0x4b8>
 80174dc:	3201      	adds	r2, #1
 80174de:	0850      	lsrs	r0, r2, #1
 80174e0:	fba6 3000 	umull	r3, r0, r6, r0
 80174e4:	0880      	lsrs	r0, r0, #2
 80174e6:	232a      	movs	r3, #42	; 0x2a
 80174e8:	fb03 2210 	mls	r2, r3, r0, r2
 80174ec:	297e      	cmp	r1, #126	; 0x7e
 80174ee:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80174f2:	f000 8187 	beq.w	8017804 <uxr_read_framed_msg+0x514>
 80174f6:	7863      	ldrb	r3, [r4, #1]
 80174f8:	428b      	cmp	r3, r1
 80174fa:	bf0c      	ite	eq
 80174fc:	2303      	moveq	r3, #3
 80174fe:	2300      	movne	r3, #0
 8017500:	7023      	strb	r3, [r4, #0]
 8017502:	e707      	b.n	8017314 <uxr_read_framed_msg+0x24>
 8017504:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017508:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801750c:	2200      	movs	r2, #0
 801750e:	4299      	cmp	r1, r3
 8017510:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8017514:	d063      	beq.n	80175de <uxr_read_framed_msg+0x2ee>
 8017516:	18e2      	adds	r2, r4, r3
 8017518:	7892      	ldrb	r2, [r2, #2]
 801751a:	2a7d      	cmp	r2, #125	; 0x7d
 801751c:	f000 8107 	beq.w	801772e <uxr_read_framed_msg+0x43e>
 8017520:	1c59      	adds	r1, r3, #1
 8017522:	084b      	lsrs	r3, r1, #1
 8017524:	fba6 0303 	umull	r0, r3, r6, r3
 8017528:	089b      	lsrs	r3, r3, #2
 801752a:	202a      	movs	r0, #42	; 0x2a
 801752c:	fb00 1313 	mls	r3, r0, r3, r1
 8017530:	2a7e      	cmp	r2, #126	; 0x7e
 8017532:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8017536:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801753a:	d050      	beq.n	80175de <uxr_read_framed_msg+0x2ee>
 801753c:	2302      	movs	r3, #2
 801753e:	7023      	strb	r3, [r4, #0]
 8017540:	e6e8      	b.n	8017314 <uxr_read_framed_msg+0x24>
 8017542:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8017546:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801754a:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801754e:	1c51      	adds	r1, r2, #1
 8017550:	084b      	lsrs	r3, r1, #1
 8017552:	fba6 5303 	umull	r5, r3, r6, r3
 8017556:	089b      	lsrs	r3, r3, #2
 8017558:	fb0c 1313 	mls	r3, ip, r3, r1
 801755c:	4596      	cmp	lr, r2
 801755e:	eb04 0002 	add.w	r0, r4, r2
 8017562:	b2da      	uxtb	r2, r3
 8017564:	f43f af06 	beq.w	8017374 <uxr_read_framed_msg+0x84>
 8017568:	7883      	ldrb	r3, [r0, #2]
 801756a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801756e:	2b7e      	cmp	r3, #126	; 0x7e
 8017570:	d1ed      	bne.n	801754e <uxr_read_framed_msg+0x25e>
 8017572:	2301      	movs	r3, #1
 8017574:	7023      	strb	r3, [r4, #0]
 8017576:	e6cd      	b.n	8017314 <uxr_read_framed_msg+0x24>
 8017578:	f101 0b01 	add.w	fp, r1, #1
 801757c:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8017580:	fba6 e202 	umull	lr, r2, r6, r2
 8017584:	3102      	adds	r1, #2
 8017586:	0892      	lsrs	r2, r2, #2
 8017588:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 801758c:	fb0c b212 	mls	r2, ip, r2, fp
 8017590:	fba6 9e0e 	umull	r9, lr, r6, lr
 8017594:	eb04 0b02 	add.w	fp, r4, r2
 8017598:	b2d2      	uxtb	r2, r2
 801759a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801759e:	4290      	cmp	r0, r2
 80175a0:	fb0c 111e 	mls	r1, ip, lr, r1
 80175a4:	f43f af40 	beq.w	8017428 <uxr_read_framed_msg+0x138>
 80175a8:	f89b e002 	ldrb.w	lr, [fp, #2]
 80175ac:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80175b0:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80175b4:	d036      	beq.n	8017624 <uxr_read_framed_msg+0x334>
 80175b6:	f08e 0e20 	eor.w	lr, lr, #32
 80175ba:	e711      	b.n	80173e0 <uxr_read_framed_msg+0xf0>
 80175bc:	2301      	movs	r3, #1
 80175be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80175c0:	4649      	mov	r1, r9
 80175c2:	e9cd 2300 	strd	r2, r3, [sp]
 80175c6:	4620      	mov	r0, r4
 80175c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175ca:	4652      	mov	r2, sl
 80175cc:	f7ff fe0e 	bl	80171ec <uxr_framing_read_transport>
 80175d0:	2800      	cmp	r0, #0
 80175d2:	f43f aecf 	beq.w	8017374 <uxr_read_framed_msg+0x84>
 80175d6:	7823      	ldrb	r3, [r4, #0]
 80175d8:	e69c      	b.n	8017314 <uxr_read_framed_msg+0x24>
 80175da:	2302      	movs	r3, #2
 80175dc:	e7ef      	b.n	80175be <uxr_read_framed_msg+0x2ce>
 80175de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80175e0:	2304      	movs	r3, #4
 80175e2:	e9cd 2300 	strd	r2, r3, [sp]
 80175e6:	4649      	mov	r1, r9
 80175e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175ea:	4652      	mov	r2, sl
 80175ec:	4620      	mov	r0, r4
 80175ee:	f7ff fdfd 	bl	80171ec <uxr_framing_read_transport>
 80175f2:	2800      	cmp	r0, #0
 80175f4:	d1ef      	bne.n	80175d6 <uxr_read_framed_msg+0x2e6>
 80175f6:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80175fa:	387e      	subs	r0, #126	; 0x7e
 80175fc:	bf18      	it	ne
 80175fe:	2001      	movne	r0, #1
 8017600:	2800      	cmp	r0, #0
 8017602:	d0e8      	beq.n	80175d6 <uxr_read_framed_msg+0x2e6>
 8017604:	e6b6      	b.n	8017374 <uxr_read_framed_msg+0x84>
 8017606:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017608:	2305      	movs	r3, #5
 801760a:	e9cd 5300 	strd	r5, r3, [sp]
 801760e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017610:	f7ff fdec 	bl	80171ec <uxr_framing_read_transport>
 8017614:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017618:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801761c:	429a      	cmp	r2, r3
 801761e:	f43f aea9 	beq.w	8017374 <uxr_read_framed_msg+0x84>
 8017622:	e673      	b.n	801730c <uxr_read_framed_msg+0x1c>
 8017624:	429d      	cmp	r5, r3
 8017626:	ee17 9a90 	vmov	r9, s15
 801762a:	f43f af02 	beq.w	8017432 <uxr_read_framed_msg+0x142>
 801762e:	2301      	movs	r3, #1
 8017630:	7023      	strb	r3, [r4, #0]
 8017632:	e66f      	b.n	8017314 <uxr_read_framed_msg+0x24>
 8017634:	2303      	movs	r3, #3
 8017636:	e7c2      	b.n	80175be <uxr_read_framed_msg+0x2ce>
 8017638:	2305      	movs	r3, #5
 801763a:	7023      	strb	r3, [r4, #0]
 801763c:	e66a      	b.n	8017314 <uxr_read_framed_msg+0x24>
 801763e:	bf00      	nop
 8017640:	30c30c31 	.word	0x30c30c31
 8017644:	0801a008 	.word	0x0801a008
 8017648:	ee17 9a90 	vmov	r9, s15
 801764c:	f43f aef1 	beq.w	8017432 <uxr_read_framed_msg+0x142>
 8017650:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8017654:	d08d      	beq.n	8017572 <uxr_read_framed_msg+0x282>
 8017656:	1aeb      	subs	r3, r5, r3
 8017658:	3302      	adds	r3, #2
 801765a:	9301      	str	r3, [sp, #4]
 801765c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801765e:	9300      	str	r3, [sp, #0]
 8017660:	4652      	mov	r2, sl
 8017662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017664:	4649      	mov	r1, r9
 8017666:	4620      	mov	r0, r4
 8017668:	f7ff fdc0 	bl	80171ec <uxr_framing_read_transport>
 801766c:	fab0 f080 	clz	r0, r0
 8017670:	0940      	lsrs	r0, r0, #5
 8017672:	2800      	cmp	r0, #0
 8017674:	d0af      	beq.n	80175d6 <uxr_read_framed_msg+0x2e6>
 8017676:	e67d      	b.n	8017374 <uxr_read_framed_msg+0x84>
 8017678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801767a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801767e:	7013      	strb	r3, [r2, #0]
 8017680:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8017682:	b003      	add	sp, #12
 8017684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017688:	1c59      	adds	r1, r3, #1
 801768a:	084a      	lsrs	r2, r1, #1
 801768c:	fba6 5202 	umull	r5, r2, r6, r2
 8017690:	0892      	lsrs	r2, r2, #2
 8017692:	252a      	movs	r5, #42	; 0x2a
 8017694:	fb05 1212 	mls	r2, r5, r2, r1
 8017698:	b2d1      	uxtb	r1, r2
 801769a:	4288      	cmp	r0, r1
 801769c:	d08e      	beq.n	80175bc <uxr_read_framed_msg+0x2cc>
 801769e:	3302      	adds	r3, #2
 80176a0:	4422      	add	r2, r4
 80176a2:	0858      	lsrs	r0, r3, #1
 80176a4:	fba6 1000 	umull	r1, r0, r6, r0
 80176a8:	7891      	ldrb	r1, [r2, #2]
 80176aa:	0882      	lsrs	r2, r0, #2
 80176ac:	fb05 3312 	mls	r3, r5, r2, r3
 80176b0:	297e      	cmp	r1, #126	; 0x7e
 80176b2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80176b6:	f000 80a3 	beq.w	8017800 <uxr_read_framed_msg+0x510>
 80176ba:	f081 0120 	eor.w	r1, r1, #32
 80176be:	e64e      	b.n	801735e <uxr_read_framed_msg+0x6e>
 80176c0:	1c59      	adds	r1, r3, #1
 80176c2:	084a      	lsrs	r2, r1, #1
 80176c4:	fba6 5202 	umull	r5, r2, r6, r2
 80176c8:	0892      	lsrs	r2, r2, #2
 80176ca:	252a      	movs	r5, #42	; 0x2a
 80176cc:	fb05 1212 	mls	r2, r5, r2, r1
 80176d0:	b2d1      	uxtb	r1, r2
 80176d2:	4288      	cmp	r0, r1
 80176d4:	d081      	beq.n	80175da <uxr_read_framed_msg+0x2ea>
 80176d6:	3302      	adds	r3, #2
 80176d8:	4422      	add	r2, r4
 80176da:	0858      	lsrs	r0, r3, #1
 80176dc:	fba6 1000 	umull	r1, r0, r6, r0
 80176e0:	7891      	ldrb	r1, [r2, #2]
 80176e2:	0882      	lsrs	r2, r0, #2
 80176e4:	fb05 3312 	mls	r3, r5, r2, r3
 80176e8:	297e      	cmp	r1, #126	; 0x7e
 80176ea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80176ee:	d077      	beq.n	80177e0 <uxr_read_framed_msg+0x4f0>
 80176f0:	f081 0120 	eor.w	r1, r1, #32
 80176f4:	e65b      	b.n	80173ae <uxr_read_framed_msg+0xbe>
 80176f6:	1c59      	adds	r1, r3, #1
 80176f8:	084a      	lsrs	r2, r1, #1
 80176fa:	fba6 5202 	umull	r5, r2, r6, r2
 80176fe:	0892      	lsrs	r2, r2, #2
 8017700:	252a      	movs	r5, #42	; 0x2a
 8017702:	fb05 1212 	mls	r2, r5, r2, r1
 8017706:	b2d1      	uxtb	r1, r2
 8017708:	4288      	cmp	r0, r1
 801770a:	f43f af57 	beq.w	80175bc <uxr_read_framed_msg+0x2cc>
 801770e:	3302      	adds	r3, #2
 8017710:	4422      	add	r2, r4
 8017712:	0858      	lsrs	r0, r3, #1
 8017714:	fba6 1000 	umull	r1, r0, r6, r0
 8017718:	7891      	ldrb	r1, [r2, #2]
 801771a:	0882      	lsrs	r2, r0, #2
 801771c:	fb05 3312 	mls	r3, r5, r2, r3
 8017720:	297e      	cmp	r1, #126	; 0x7e
 8017722:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017726:	d06b      	beq.n	8017800 <uxr_read_framed_msg+0x510>
 8017728:	f081 0120 	eor.w	r1, r1, #32
 801772c:	e69d      	b.n	801746a <uxr_read_framed_msg+0x17a>
 801772e:	1c5d      	adds	r5, r3, #1
 8017730:	086a      	lsrs	r2, r5, #1
 8017732:	fba6 0202 	umull	r0, r2, r6, r2
 8017736:	0892      	lsrs	r2, r2, #2
 8017738:	202a      	movs	r0, #42	; 0x2a
 801773a:	fb00 5212 	mls	r2, r0, r2, r5
 801773e:	b2d5      	uxtb	r5, r2
 8017740:	42a9      	cmp	r1, r5
 8017742:	f43f af4c 	beq.w	80175de <uxr_read_framed_msg+0x2ee>
 8017746:	3302      	adds	r3, #2
 8017748:	4422      	add	r2, r4
 801774a:	0859      	lsrs	r1, r3, #1
 801774c:	fba6 5101 	umull	r5, r1, r6, r1
 8017750:	7895      	ldrb	r5, [r2, #2]
 8017752:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8017756:	088a      	lsrs	r2, r1, #2
 8017758:	fb00 3312 	mls	r3, r0, r2, r3
 801775c:	2d7e      	cmp	r5, #126	; 0x7e
 801775e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017762:	f43f af3c 	beq.w	80175de <uxr_read_framed_msg+0x2ee>
 8017766:	f085 0520 	eor.w	r5, r5, #32
 801776a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801776e:	e6e5      	b.n	801753c <uxr_read_framed_msg+0x24c>
 8017770:	1c59      	adds	r1, r3, #1
 8017772:	084a      	lsrs	r2, r1, #1
 8017774:	fba6 5202 	umull	r5, r2, r6, r2
 8017778:	0892      	lsrs	r2, r2, #2
 801777a:	252a      	movs	r5, #42	; 0x2a
 801777c:	fb05 1212 	mls	r2, r5, r2, r1
 8017780:	b2d1      	uxtb	r1, r2
 8017782:	4288      	cmp	r0, r1
 8017784:	f43f af29 	beq.w	80175da <uxr_read_framed_msg+0x2ea>
 8017788:	3302      	adds	r3, #2
 801778a:	4422      	add	r2, r4
 801778c:	0858      	lsrs	r0, r3, #1
 801778e:	fba6 1000 	umull	r1, r0, r6, r0
 8017792:	7891      	ldrb	r1, [r2, #2]
 8017794:	0882      	lsrs	r2, r0, #2
 8017796:	fb05 3312 	mls	r3, r5, r2, r3
 801779a:	297e      	cmp	r1, #126	; 0x7e
 801779c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80177a0:	d01e      	beq.n	80177e0 <uxr_read_framed_msg+0x4f0>
 80177a2:	f081 0120 	eor.w	r1, r1, #32
 80177a6:	e689      	b.n	80174bc <uxr_read_framed_msg+0x1cc>
 80177a8:	1c51      	adds	r1, r2, #1
 80177aa:	084b      	lsrs	r3, r1, #1
 80177ac:	fba6 5303 	umull	r5, r3, r6, r3
 80177b0:	089b      	lsrs	r3, r3, #2
 80177b2:	252a      	movs	r5, #42	; 0x2a
 80177b4:	fb05 1313 	mls	r3, r5, r3, r1
 80177b8:	b2d9      	uxtb	r1, r3
 80177ba:	4288      	cmp	r0, r1
 80177bc:	f43f af3a 	beq.w	8017634 <uxr_read_framed_msg+0x344>
 80177c0:	3202      	adds	r2, #2
 80177c2:	4423      	add	r3, r4
 80177c4:	0850      	lsrs	r0, r2, #1
 80177c6:	789b      	ldrb	r3, [r3, #2]
 80177c8:	fba6 1000 	umull	r1, r0, r6, r0
 80177cc:	0880      	lsrs	r0, r0, #2
 80177ce:	fb05 2210 	mls	r2, r5, r0, r2
 80177d2:	2b7e      	cmp	r3, #126	; 0x7e
 80177d4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80177d8:	d014      	beq.n	8017804 <uxr_read_framed_msg+0x514>
 80177da:	f083 0120 	eor.w	r1, r3, #32
 80177de:	e68a      	b.n	80174f6 <uxr_read_framed_msg+0x206>
 80177e0:	2302      	movs	r3, #2
 80177e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177e4:	4649      	mov	r1, r9
 80177e6:	e9cd 2300 	strd	r2, r3, [sp]
 80177ea:	4620      	mov	r0, r4
 80177ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177ee:	4652      	mov	r2, sl
 80177f0:	f7ff fcfc 	bl	80171ec <uxr_framing_read_transport>
 80177f4:	2800      	cmp	r0, #0
 80177f6:	f47f aeee 	bne.w	80175d6 <uxr_read_framed_msg+0x2e6>
 80177fa:	2301      	movs	r3, #1
 80177fc:	7023      	strb	r3, [r4, #0]
 80177fe:	e589      	b.n	8017314 <uxr_read_framed_msg+0x24>
 8017800:	2301      	movs	r3, #1
 8017802:	e7ee      	b.n	80177e2 <uxr_read_framed_msg+0x4f2>
 8017804:	2303      	movs	r3, #3
 8017806:	e7ec      	b.n	80177e2 <uxr_read_framed_msg+0x4f2>
 8017808:	ee17 9a90 	vmov	r9, s15
 801780c:	e6b1      	b.n	8017572 <uxr_read_framed_msg+0x282>
 801780e:	bf00      	nop

08017810 <rcl_get_default_domain_id>:
 8017810:	b530      	push	{r4, r5, lr}
 8017812:	b083      	sub	sp, #12
 8017814:	2300      	movs	r3, #0
 8017816:	9300      	str	r3, [sp, #0]
 8017818:	b1d0      	cbz	r0, 8017850 <rcl_get_default_domain_id+0x40>
 801781a:	4604      	mov	r4, r0
 801781c:	4669      	mov	r1, sp
 801781e:	4815      	ldr	r0, [pc, #84]	; (8017874 <rcl_get_default_domain_id+0x64>)
 8017820:	f7fd fa6a 	bl	8014cf8 <rcutils_get_env>
 8017824:	4602      	mov	r2, r0
 8017826:	b110      	cbz	r0, 801782e <rcl_get_default_domain_id+0x1e>
 8017828:	2001      	movs	r0, #1
 801782a:	b003      	add	sp, #12
 801782c:	bd30      	pop	{r4, r5, pc}
 801782e:	9b00      	ldr	r3, [sp, #0]
 8017830:	b18b      	cbz	r3, 8017856 <rcl_get_default_domain_id+0x46>
 8017832:	7818      	ldrb	r0, [r3, #0]
 8017834:	2800      	cmp	r0, #0
 8017836:	d0f8      	beq.n	801782a <rcl_get_default_domain_id+0x1a>
 8017838:	4618      	mov	r0, r3
 801783a:	a901      	add	r1, sp, #4
 801783c:	9201      	str	r2, [sp, #4]
 801783e:	f000 fc07 	bl	8018050 <strtoul>
 8017842:	4605      	mov	r5, r0
 8017844:	b150      	cbz	r0, 801785c <rcl_get_default_domain_id+0x4c>
 8017846:	1c43      	adds	r3, r0, #1
 8017848:	d00d      	beq.n	8017866 <rcl_get_default_domain_id+0x56>
 801784a:	6025      	str	r5, [r4, #0]
 801784c:	2000      	movs	r0, #0
 801784e:	e7ec      	b.n	801782a <rcl_get_default_domain_id+0x1a>
 8017850:	200b      	movs	r0, #11
 8017852:	b003      	add	sp, #12
 8017854:	bd30      	pop	{r4, r5, pc}
 8017856:	4618      	mov	r0, r3
 8017858:	b003      	add	sp, #12
 801785a:	bd30      	pop	{r4, r5, pc}
 801785c:	9b01      	ldr	r3, [sp, #4]
 801785e:	781b      	ldrb	r3, [r3, #0]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d0f2      	beq.n	801784a <rcl_get_default_domain_id+0x3a>
 8017864:	e7e0      	b.n	8017828 <rcl_get_default_domain_id+0x18>
 8017866:	f000 ffc9 	bl	80187fc <__errno>
 801786a:	6803      	ldr	r3, [r0, #0]
 801786c:	2b22      	cmp	r3, #34	; 0x22
 801786e:	d1ec      	bne.n	801784a <rcl_get_default_domain_id+0x3a>
 8017870:	e7da      	b.n	8017828 <rcl_get_default_domain_id+0x18>
 8017872:	bf00      	nop
 8017874:	0801a208 	.word	0x0801a208

08017878 <rcl_get_zero_initialized_guard_condition>:
 8017878:	4a03      	ldr	r2, [pc, #12]	; (8017888 <rcl_get_zero_initialized_guard_condition+0x10>)
 801787a:	4603      	mov	r3, r0
 801787c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017880:	e883 0003 	stmia.w	r3, {r0, r1}
 8017884:	4618      	mov	r0, r3
 8017886:	4770      	bx	lr
 8017888:	0801a218 	.word	0x0801a218

0801788c <rcl_guard_condition_init_from_rmw>:
 801788c:	b082      	sub	sp, #8
 801788e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017892:	b086      	sub	sp, #24
 8017894:	ac0c      	add	r4, sp, #48	; 0x30
 8017896:	4684      	mov	ip, r0
 8017898:	f844 3f04 	str.w	r3, [r4, #4]!
 801789c:	460f      	mov	r7, r1
 801789e:	4690      	mov	r8, r2
 80178a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178a2:	ad01      	add	r5, sp, #4
 80178a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80178a6:	6823      	ldr	r3, [r4, #0]
 80178a8:	602b      	str	r3, [r5, #0]
 80178aa:	a801      	add	r0, sp, #4
 80178ac:	4664      	mov	r4, ip
 80178ae:	f7f5 ffed 	bl	800d88c <rcutils_allocator_is_valid>
 80178b2:	b328      	cbz	r0, 8017900 <rcl_guard_condition_init_from_rmw+0x74>
 80178b4:	b324      	cbz	r4, 8017900 <rcl_guard_condition_init_from_rmw+0x74>
 80178b6:	6866      	ldr	r6, [r4, #4]
 80178b8:	b9e6      	cbnz	r6, 80178f4 <rcl_guard_condition_init_from_rmw+0x68>
 80178ba:	f1b8 0f00 	cmp.w	r8, #0
 80178be:	d01f      	beq.n	8017900 <rcl_guard_condition_init_from_rmw+0x74>
 80178c0:	4640      	mov	r0, r8
 80178c2:	f7fb f92f 	bl	8012b24 <rcl_context_is_valid>
 80178c6:	b308      	cbz	r0, 801790c <rcl_guard_condition_init_from_rmw+0x80>
 80178c8:	9b01      	ldr	r3, [sp, #4]
 80178ca:	9905      	ldr	r1, [sp, #20]
 80178cc:	201c      	movs	r0, #28
 80178ce:	4798      	blx	r3
 80178d0:	4605      	mov	r5, r0
 80178d2:	6060      	str	r0, [r4, #4]
 80178d4:	b340      	cbz	r0, 8017928 <rcl_guard_condition_init_from_rmw+0x9c>
 80178d6:	b1df      	cbz	r7, 8017910 <rcl_guard_condition_init_from_rmw+0x84>
 80178d8:	6007      	str	r7, [r0, #0]
 80178da:	7106      	strb	r6, [r0, #4]
 80178dc:	ac01      	add	r4, sp, #4
 80178de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178e0:	3508      	adds	r5, #8
 80178e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80178e4:	6823      	ldr	r3, [r4, #0]
 80178e6:	602b      	str	r3, [r5, #0]
 80178e8:	2000      	movs	r0, #0
 80178ea:	b006      	add	sp, #24
 80178ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178f0:	b002      	add	sp, #8
 80178f2:	4770      	bx	lr
 80178f4:	2064      	movs	r0, #100	; 0x64
 80178f6:	b006      	add	sp, #24
 80178f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178fc:	b002      	add	sp, #8
 80178fe:	4770      	bx	lr
 8017900:	200b      	movs	r0, #11
 8017902:	b006      	add	sp, #24
 8017904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017908:	b002      	add	sp, #8
 801790a:	4770      	bx	lr
 801790c:	2065      	movs	r0, #101	; 0x65
 801790e:	e7f2      	b.n	80178f6 <rcl_guard_condition_init_from_rmw+0x6a>
 8017910:	f8d8 0000 	ldr.w	r0, [r8]
 8017914:	3028      	adds	r0, #40	; 0x28
 8017916:	f000 f93b 	bl	8017b90 <rmw_create_guard_condition>
 801791a:	6028      	str	r0, [r5, #0]
 801791c:	6865      	ldr	r5, [r4, #4]
 801791e:	682e      	ldr	r6, [r5, #0]
 8017920:	b126      	cbz	r6, 801792c <rcl_guard_condition_init_from_rmw+0xa0>
 8017922:	2301      	movs	r3, #1
 8017924:	712b      	strb	r3, [r5, #4]
 8017926:	e7d9      	b.n	80178dc <rcl_guard_condition_init_from_rmw+0x50>
 8017928:	200a      	movs	r0, #10
 801792a:	e7e4      	b.n	80178f6 <rcl_guard_condition_init_from_rmw+0x6a>
 801792c:	4628      	mov	r0, r5
 801792e:	9b02      	ldr	r3, [sp, #8]
 8017930:	9905      	ldr	r1, [sp, #20]
 8017932:	4798      	blx	r3
 8017934:	6066      	str	r6, [r4, #4]
 8017936:	2001      	movs	r0, #1
 8017938:	e7dd      	b.n	80178f6 <rcl_guard_condition_init_from_rmw+0x6a>
 801793a:	bf00      	nop

0801793c <rcl_guard_condition_fini>:
 801793c:	b570      	push	{r4, r5, r6, lr}
 801793e:	b082      	sub	sp, #8
 8017940:	b1f0      	cbz	r0, 8017980 <rcl_guard_condition_fini+0x44>
 8017942:	4604      	mov	r4, r0
 8017944:	6840      	ldr	r0, [r0, #4]
 8017946:	b158      	cbz	r0, 8017960 <rcl_guard_condition_fini+0x24>
 8017948:	6803      	ldr	r3, [r0, #0]
 801794a:	68c6      	ldr	r6, [r0, #12]
 801794c:	6981      	ldr	r1, [r0, #24]
 801794e:	b15b      	cbz	r3, 8017968 <rcl_guard_condition_fini+0x2c>
 8017950:	7905      	ldrb	r5, [r0, #4]
 8017952:	b95d      	cbnz	r5, 801796c <rcl_guard_condition_fini+0x30>
 8017954:	47b0      	blx	r6
 8017956:	2300      	movs	r3, #0
 8017958:	4628      	mov	r0, r5
 801795a:	6063      	str	r3, [r4, #4]
 801795c:	b002      	add	sp, #8
 801795e:	bd70      	pop	{r4, r5, r6, pc}
 8017960:	4605      	mov	r5, r0
 8017962:	4628      	mov	r0, r5
 8017964:	b002      	add	sp, #8
 8017966:	bd70      	pop	{r4, r5, r6, pc}
 8017968:	461d      	mov	r5, r3
 801796a:	e7f3      	b.n	8017954 <rcl_guard_condition_fini+0x18>
 801796c:	4618      	mov	r0, r3
 801796e:	9101      	str	r1, [sp, #4]
 8017970:	f000 f922 	bl	8017bb8 <rmw_destroy_guard_condition>
 8017974:	1e05      	subs	r5, r0, #0
 8017976:	9901      	ldr	r1, [sp, #4]
 8017978:	6860      	ldr	r0, [r4, #4]
 801797a:	bf18      	it	ne
 801797c:	2501      	movne	r5, #1
 801797e:	e7e9      	b.n	8017954 <rcl_guard_condition_fini+0x18>
 8017980:	250b      	movs	r5, #11
 8017982:	4628      	mov	r0, r5
 8017984:	b002      	add	sp, #8
 8017986:	bd70      	pop	{r4, r5, r6, pc}

08017988 <rcl_guard_condition_get_default_options>:
 8017988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801798a:	b087      	sub	sp, #28
 801798c:	4607      	mov	r7, r0
 801798e:	466c      	mov	r4, sp
 8017990:	4668      	mov	r0, sp
 8017992:	f7f5 ff6d 	bl	800d870 <rcutils_get_default_allocator>
 8017996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017998:	4d07      	ldr	r5, [pc, #28]	; (80179b8 <rcl_guard_condition_get_default_options+0x30>)
 801799a:	f8d4 c000 	ldr.w	ip, [r4]
 801799e:	462e      	mov	r6, r5
 80179a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80179a2:	462c      	mov	r4, r5
 80179a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179a6:	463c      	mov	r4, r7
 80179a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179aa:	4638      	mov	r0, r7
 80179ac:	f8c6 c000 	str.w	ip, [r6]
 80179b0:	f8c4 c000 	str.w	ip, [r4]
 80179b4:	b007      	add	sp, #28
 80179b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179b8:	20009d24 	.word	0x20009d24

080179bc <rcl_guard_condition_get_rmw_handle>:
 80179bc:	b110      	cbz	r0, 80179c4 <rcl_guard_condition_get_rmw_handle+0x8>
 80179be:	6840      	ldr	r0, [r0, #4]
 80179c0:	b100      	cbz	r0, 80179c4 <rcl_guard_condition_get_rmw_handle+0x8>
 80179c2:	6800      	ldr	r0, [r0, #0]
 80179c4:	4770      	bx	lr
 80179c6:	bf00      	nop

080179c8 <on_status>:
 80179c8:	b082      	sub	sp, #8
 80179ca:	b002      	add	sp, #8
 80179cc:	4770      	bx	lr
 80179ce:	bf00      	nop

080179d0 <on_topic>:
 80179d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179d4:	4a21      	ldr	r2, [pc, #132]	; (8017a5c <on_topic+0x8c>)
 80179d6:	b094      	sub	sp, #80	; 0x50
 80179d8:	6812      	ldr	r2, [r2, #0]
 80179da:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80179dc:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80179e0:	9113      	str	r1, [sp, #76]	; 0x4c
 80179e2:	9312      	str	r3, [sp, #72]	; 0x48
 80179e4:	b3ba      	cbz	r2, 8017a56 <on_topic+0x86>
 80179e6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80179ea:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80179ee:	e001      	b.n	80179f4 <on_topic+0x24>
 80179f0:	6892      	ldr	r2, [r2, #8]
 80179f2:	b382      	cbz	r2, 8017a56 <on_topic+0x86>
 80179f4:	68d4      	ldr	r4, [r2, #12]
 80179f6:	8aa3      	ldrh	r3, [r4, #20]
 80179f8:	428b      	cmp	r3, r1
 80179fa:	d1f9      	bne.n	80179f0 <on_topic+0x20>
 80179fc:	7da3      	ldrb	r3, [r4, #22]
 80179fe:	4283      	cmp	r3, r0
 8017a00:	d1f6      	bne.n	80179f0 <on_topic+0x20>
 8017a02:	2248      	movs	r2, #72	; 0x48
 8017a04:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8017a08:	4668      	mov	r0, sp
 8017a0a:	f000 ff2c 	bl	8018866 <memcpy>
 8017a0e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8017a12:	4620      	mov	r0, r4
 8017a14:	f7f6 fe7e 	bl	800e714 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017a18:	4607      	mov	r7, r0
 8017a1a:	b1e0      	cbz	r0, 8017a56 <on_topic+0x86>
 8017a1c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017a20:	462a      	mov	r2, r5
 8017a22:	4630      	mov	r0, r6
 8017a24:	f108 0110 	add.w	r1, r8, #16
 8017a28:	f7fe fb9a 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8017a2c:	b930      	cbnz	r0, 8017a3c <on_topic+0x6c>
 8017a2e:	480c      	ldr	r0, [pc, #48]	; (8017a60 <on_topic+0x90>)
 8017a30:	4639      	mov	r1, r7
 8017a32:	b014      	add	sp, #80	; 0x50
 8017a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a38:	f7fd bb82 	b.w	8015140 <put_memory>
 8017a3c:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8017a40:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8017a44:	f7fe fab6 	bl	8015fb4 <rmw_uros_epoch_nanos>
 8017a48:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8017a4c:	2305      	movs	r3, #5
 8017a4e:	e9c2 0100 	strd	r0, r1, [r2]
 8017a52:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8017a56:	b014      	add	sp, #80	; 0x50
 8017a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a5c:	2000d12c 	.word	0x2000d12c
 8017a60:	20009ec0 	.word	0x20009ec0

08017a64 <on_request>:
 8017a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a68:	4822      	ldr	r0, [pc, #136]	; (8017af4 <on_request+0x90>)
 8017a6a:	b095      	sub	sp, #84	; 0x54
 8017a6c:	9113      	str	r1, [sp, #76]	; 0x4c
 8017a6e:	6801      	ldr	r1, [r0, #0]
 8017a70:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8017a72:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8017a76:	2900      	cmp	r1, #0
 8017a78:	d039      	beq.n	8017aee <on_request+0x8a>
 8017a7a:	461d      	mov	r5, r3
 8017a7c:	e001      	b.n	8017a82 <on_request+0x1e>
 8017a7e:	6889      	ldr	r1, [r1, #8]
 8017a80:	b3a9      	cbz	r1, 8017aee <on_request+0x8a>
 8017a82:	68cc      	ldr	r4, [r1, #12]
 8017a84:	8b20      	ldrh	r0, [r4, #24]
 8017a86:	4290      	cmp	r0, r2
 8017a88:	d1f9      	bne.n	8017a7e <on_request+0x1a>
 8017a8a:	2248      	movs	r2, #72	; 0x48
 8017a8c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017a90:	4668      	mov	r0, sp
 8017a92:	f000 fee8 	bl	8018866 <memcpy>
 8017a96:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8017a9a:	4620      	mov	r0, r4
 8017a9c:	f7f6 fe3a 	bl	800e714 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017aa0:	4680      	mov	r8, r0
 8017aa2:	b320      	cbz	r0, 8017aee <on_request+0x8a>
 8017aa4:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8017aa8:	4632      	mov	r2, r6
 8017aaa:	4638      	mov	r0, r7
 8017aac:	f109 0110 	add.w	r1, r9, #16
 8017ab0:	f7fe fb56 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8017ab4:	b930      	cbnz	r0, 8017ac4 <on_request+0x60>
 8017ab6:	4810      	ldr	r0, [pc, #64]	; (8017af8 <on_request+0x94>)
 8017ab8:	4641      	mov	r1, r8
 8017aba:	b015      	add	sp, #84	; 0x54
 8017abc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ac0:	f7fd bb3e 	b.w	8015140 <put_memory>
 8017ac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ac6:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8017aca:	f609 0428 	addw	r4, r9, #2088	; 0x828
 8017ace:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8017ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017ad4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017ad8:	e884 0003 	stmia.w	r4, {r0, r1}
 8017adc:	f7fe fa6a 	bl	8015fb4 <rmw_uros_epoch_nanos>
 8017ae0:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8017ae4:	2303      	movs	r3, #3
 8017ae6:	e9c2 0100 	strd	r0, r1, [r2]
 8017aea:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8017aee:	b015      	add	sp, #84	; 0x54
 8017af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017af4:	2000d11c 	.word	0x2000d11c
 8017af8:	20009ec0 	.word	0x20009ec0

08017afc <on_reply>:
 8017afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b00:	4821      	ldr	r0, [pc, #132]	; (8017b88 <on_reply+0x8c>)
 8017b02:	b095      	sub	sp, #84	; 0x54
 8017b04:	9113      	str	r1, [sp, #76]	; 0x4c
 8017b06:	6801      	ldr	r1, [r0, #0]
 8017b08:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8017b0a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8017b0e:	b3b9      	cbz	r1, 8017b80 <on_reply+0x84>
 8017b10:	461d      	mov	r5, r3
 8017b12:	e001      	b.n	8017b18 <on_reply+0x1c>
 8017b14:	6889      	ldr	r1, [r1, #8]
 8017b16:	b399      	cbz	r1, 8017b80 <on_reply+0x84>
 8017b18:	68cc      	ldr	r4, [r1, #12]
 8017b1a:	8b20      	ldrh	r0, [r4, #24]
 8017b1c:	4290      	cmp	r0, r2
 8017b1e:	d1f9      	bne.n	8017b14 <on_reply+0x18>
 8017b20:	2248      	movs	r2, #72	; 0x48
 8017b22:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017b26:	4668      	mov	r0, sp
 8017b28:	f000 fe9d 	bl	8018866 <memcpy>
 8017b2c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8017b30:	4620      	mov	r0, r4
 8017b32:	f7f6 fdef 	bl	800e714 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017b36:	4680      	mov	r8, r0
 8017b38:	b310      	cbz	r0, 8017b80 <on_reply+0x84>
 8017b3a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8017b3e:	4632      	mov	r2, r6
 8017b40:	4638      	mov	r0, r7
 8017b42:	f109 0110 	add.w	r1, r9, #16
 8017b46:	f7fe fb0b 	bl	8016160 <ucdr_deserialize_array_uint8_t>
 8017b4a:	b930      	cbnz	r0, 8017b5a <on_reply+0x5e>
 8017b4c:	480f      	ldr	r0, [pc, #60]	; (8017b8c <on_reply+0x90>)
 8017b4e:	4641      	mov	r1, r8
 8017b50:	b015      	add	sp, #84	; 0x54
 8017b52:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b56:	f7fd baf3 	b.w	8015140 <put_memory>
 8017b5a:	b2aa      	uxth	r2, r5
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8017b62:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8017b66:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8017b6a:	e9c1 2300 	strd	r2, r3, [r1]
 8017b6e:	f7fe fa21 	bl	8015fb4 <rmw_uros_epoch_nanos>
 8017b72:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8017b76:	2304      	movs	r3, #4
 8017b78:	e9c2 0100 	strd	r0, r1, [r2]
 8017b7c:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8017b80:	b015      	add	sp, #84	; 0x54
 8017b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b86:	bf00      	nop
 8017b88:	2000a750 	.word	0x2000a750
 8017b8c:	20009ec0 	.word	0x20009ec0

08017b90 <rmw_create_guard_condition>:
 8017b90:	b538      	push	{r3, r4, r5, lr}
 8017b92:	4605      	mov	r5, r0
 8017b94:	4807      	ldr	r0, [pc, #28]	; (8017bb4 <rmw_create_guard_condition+0x24>)
 8017b96:	f7fd fac3 	bl	8015120 <get_memory>
 8017b9a:	b148      	cbz	r0, 8017bb0 <rmw_create_guard_condition+0x20>
 8017b9c:	68c4      	ldr	r4, [r0, #12]
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	61e5      	str	r5, [r4, #28]
 8017ba2:	7423      	strb	r3, [r4, #16]
 8017ba4:	f7fd fb24 	bl	80151f0 <rmw_get_implementation_identifier>
 8017ba8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017bac:	f104 0014 	add.w	r0, r4, #20
 8017bb0:	bd38      	pop	{r3, r4, r5, pc}
 8017bb2:	bf00      	nop
 8017bb4:	2000d048 	.word	0x2000d048

08017bb8 <rmw_destroy_guard_condition>:
 8017bb8:	b508      	push	{r3, lr}
 8017bba:	4b08      	ldr	r3, [pc, #32]	; (8017bdc <rmw_destroy_guard_condition+0x24>)
 8017bbc:	6819      	ldr	r1, [r3, #0]
 8017bbe:	b911      	cbnz	r1, 8017bc6 <rmw_destroy_guard_condition+0xe>
 8017bc0:	e00a      	b.n	8017bd8 <rmw_destroy_guard_condition+0x20>
 8017bc2:	6889      	ldr	r1, [r1, #8]
 8017bc4:	b141      	cbz	r1, 8017bd8 <rmw_destroy_guard_condition+0x20>
 8017bc6:	68cb      	ldr	r3, [r1, #12]
 8017bc8:	3314      	adds	r3, #20
 8017bca:	4298      	cmp	r0, r3
 8017bcc:	d1f9      	bne.n	8017bc2 <rmw_destroy_guard_condition+0xa>
 8017bce:	4803      	ldr	r0, [pc, #12]	; (8017bdc <rmw_destroy_guard_condition+0x24>)
 8017bd0:	f7fd fab6 	bl	8015140 <put_memory>
 8017bd4:	2000      	movs	r0, #0
 8017bd6:	bd08      	pop	{r3, pc}
 8017bd8:	2001      	movs	r0, #1
 8017bda:	bd08      	pop	{r3, pc}
 8017bdc:	2000d048 	.word	0x2000d048

08017be0 <calloc>:
 8017be0:	4b02      	ldr	r3, [pc, #8]	; (8017bec <calloc+0xc>)
 8017be2:	460a      	mov	r2, r1
 8017be4:	4601      	mov	r1, r0
 8017be6:	6818      	ldr	r0, [r3, #0]
 8017be8:	f000 b802 	b.w	8017bf0 <_calloc_r>
 8017bec:	200000cc 	.word	0x200000cc

08017bf0 <_calloc_r>:
 8017bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017bf2:	fba1 2402 	umull	r2, r4, r1, r2
 8017bf6:	b94c      	cbnz	r4, 8017c0c <_calloc_r+0x1c>
 8017bf8:	4611      	mov	r1, r2
 8017bfa:	9201      	str	r2, [sp, #4]
 8017bfc:	f000 f886 	bl	8017d0c <_malloc_r>
 8017c00:	9a01      	ldr	r2, [sp, #4]
 8017c02:	4605      	mov	r5, r0
 8017c04:	b930      	cbnz	r0, 8017c14 <_calloc_r+0x24>
 8017c06:	4628      	mov	r0, r5
 8017c08:	b003      	add	sp, #12
 8017c0a:	bd30      	pop	{r4, r5, pc}
 8017c0c:	220c      	movs	r2, #12
 8017c0e:	6002      	str	r2, [r0, #0]
 8017c10:	2500      	movs	r5, #0
 8017c12:	e7f8      	b.n	8017c06 <_calloc_r+0x16>
 8017c14:	4621      	mov	r1, r4
 8017c16:	f000 fd07 	bl	8018628 <memset>
 8017c1a:	e7f4      	b.n	8017c06 <_calloc_r+0x16>

08017c1c <getenv>:
 8017c1c:	b507      	push	{r0, r1, r2, lr}
 8017c1e:	4b04      	ldr	r3, [pc, #16]	; (8017c30 <getenv+0x14>)
 8017c20:	4601      	mov	r1, r0
 8017c22:	aa01      	add	r2, sp, #4
 8017c24:	6818      	ldr	r0, [r3, #0]
 8017c26:	f000 f805 	bl	8017c34 <_findenv_r>
 8017c2a:	b003      	add	sp, #12
 8017c2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c30:	200000cc 	.word	0x200000cc

08017c34 <_findenv_r>:
 8017c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c38:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8017ca8 <_findenv_r+0x74>
 8017c3c:	4607      	mov	r7, r0
 8017c3e:	4689      	mov	r9, r1
 8017c40:	4616      	mov	r6, r2
 8017c42:	f000 fe3d 	bl	80188c0 <__env_lock>
 8017c46:	f8da 4000 	ldr.w	r4, [sl]
 8017c4a:	b134      	cbz	r4, 8017c5a <_findenv_r+0x26>
 8017c4c:	464b      	mov	r3, r9
 8017c4e:	4698      	mov	r8, r3
 8017c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c54:	b13a      	cbz	r2, 8017c66 <_findenv_r+0x32>
 8017c56:	2a3d      	cmp	r2, #61	; 0x3d
 8017c58:	d1f9      	bne.n	8017c4e <_findenv_r+0x1a>
 8017c5a:	4638      	mov	r0, r7
 8017c5c:	f000 fe36 	bl	80188cc <__env_unlock>
 8017c60:	2000      	movs	r0, #0
 8017c62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c66:	eba8 0809 	sub.w	r8, r8, r9
 8017c6a:	46a3      	mov	fp, r4
 8017c6c:	f854 0b04 	ldr.w	r0, [r4], #4
 8017c70:	2800      	cmp	r0, #0
 8017c72:	d0f2      	beq.n	8017c5a <_findenv_r+0x26>
 8017c74:	4642      	mov	r2, r8
 8017c76:	4649      	mov	r1, r9
 8017c78:	f000 fceb 	bl	8018652 <strncmp>
 8017c7c:	2800      	cmp	r0, #0
 8017c7e:	d1f4      	bne.n	8017c6a <_findenv_r+0x36>
 8017c80:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017c84:	eb03 0508 	add.w	r5, r3, r8
 8017c88:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017c8c:	2b3d      	cmp	r3, #61	; 0x3d
 8017c8e:	d1ec      	bne.n	8017c6a <_findenv_r+0x36>
 8017c90:	f8da 3000 	ldr.w	r3, [sl]
 8017c94:	ebab 0303 	sub.w	r3, fp, r3
 8017c98:	109b      	asrs	r3, r3, #2
 8017c9a:	4638      	mov	r0, r7
 8017c9c:	6033      	str	r3, [r6, #0]
 8017c9e:	f000 fe15 	bl	80188cc <__env_unlock>
 8017ca2:	1c68      	adds	r0, r5, #1
 8017ca4:	e7dd      	b.n	8017c62 <_findenv_r+0x2e>
 8017ca6:	bf00      	nop
 8017ca8:	200000d0 	.word	0x200000d0

08017cac <malloc>:
 8017cac:	4b02      	ldr	r3, [pc, #8]	; (8017cb8 <malloc+0xc>)
 8017cae:	4601      	mov	r1, r0
 8017cb0:	6818      	ldr	r0, [r3, #0]
 8017cb2:	f000 b82b 	b.w	8017d0c <_malloc_r>
 8017cb6:	bf00      	nop
 8017cb8:	200000cc 	.word	0x200000cc

08017cbc <free>:
 8017cbc:	4b02      	ldr	r3, [pc, #8]	; (8017cc8 <free+0xc>)
 8017cbe:	4601      	mov	r1, r0
 8017cc0:	6818      	ldr	r0, [r3, #0]
 8017cc2:	f000 be09 	b.w	80188d8 <_free_r>
 8017cc6:	bf00      	nop
 8017cc8:	200000cc 	.word	0x200000cc

08017ccc <sbrk_aligned>:
 8017ccc:	b570      	push	{r4, r5, r6, lr}
 8017cce:	4e0e      	ldr	r6, [pc, #56]	; (8017d08 <sbrk_aligned+0x3c>)
 8017cd0:	460c      	mov	r4, r1
 8017cd2:	6831      	ldr	r1, [r6, #0]
 8017cd4:	4605      	mov	r5, r0
 8017cd6:	b911      	cbnz	r1, 8017cde <sbrk_aligned+0x12>
 8017cd8:	f000 fd6e 	bl	80187b8 <_sbrk_r>
 8017cdc:	6030      	str	r0, [r6, #0]
 8017cde:	4621      	mov	r1, r4
 8017ce0:	4628      	mov	r0, r5
 8017ce2:	f000 fd69 	bl	80187b8 <_sbrk_r>
 8017ce6:	1c43      	adds	r3, r0, #1
 8017ce8:	d00a      	beq.n	8017d00 <sbrk_aligned+0x34>
 8017cea:	1cc4      	adds	r4, r0, #3
 8017cec:	f024 0403 	bic.w	r4, r4, #3
 8017cf0:	42a0      	cmp	r0, r4
 8017cf2:	d007      	beq.n	8017d04 <sbrk_aligned+0x38>
 8017cf4:	1a21      	subs	r1, r4, r0
 8017cf6:	4628      	mov	r0, r5
 8017cf8:	f000 fd5e 	bl	80187b8 <_sbrk_r>
 8017cfc:	3001      	adds	r0, #1
 8017cfe:	d101      	bne.n	8017d04 <sbrk_aligned+0x38>
 8017d00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017d04:	4620      	mov	r0, r4
 8017d06:	bd70      	pop	{r4, r5, r6, pc}
 8017d08:	20009d3c 	.word	0x20009d3c

08017d0c <_malloc_r>:
 8017d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d10:	1ccd      	adds	r5, r1, #3
 8017d12:	f025 0503 	bic.w	r5, r5, #3
 8017d16:	3508      	adds	r5, #8
 8017d18:	2d0c      	cmp	r5, #12
 8017d1a:	bf38      	it	cc
 8017d1c:	250c      	movcc	r5, #12
 8017d1e:	2d00      	cmp	r5, #0
 8017d20:	4607      	mov	r7, r0
 8017d22:	db01      	blt.n	8017d28 <_malloc_r+0x1c>
 8017d24:	42a9      	cmp	r1, r5
 8017d26:	d905      	bls.n	8017d34 <_malloc_r+0x28>
 8017d28:	230c      	movs	r3, #12
 8017d2a:	603b      	str	r3, [r7, #0]
 8017d2c:	2600      	movs	r6, #0
 8017d2e:	4630      	mov	r0, r6
 8017d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017e08 <_malloc_r+0xfc>
 8017d38:	f000 f868 	bl	8017e0c <__malloc_lock>
 8017d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8017d40:	461c      	mov	r4, r3
 8017d42:	bb5c      	cbnz	r4, 8017d9c <_malloc_r+0x90>
 8017d44:	4629      	mov	r1, r5
 8017d46:	4638      	mov	r0, r7
 8017d48:	f7ff ffc0 	bl	8017ccc <sbrk_aligned>
 8017d4c:	1c43      	adds	r3, r0, #1
 8017d4e:	4604      	mov	r4, r0
 8017d50:	d155      	bne.n	8017dfe <_malloc_r+0xf2>
 8017d52:	f8d8 4000 	ldr.w	r4, [r8]
 8017d56:	4626      	mov	r6, r4
 8017d58:	2e00      	cmp	r6, #0
 8017d5a:	d145      	bne.n	8017de8 <_malloc_r+0xdc>
 8017d5c:	2c00      	cmp	r4, #0
 8017d5e:	d048      	beq.n	8017df2 <_malloc_r+0xe6>
 8017d60:	6823      	ldr	r3, [r4, #0]
 8017d62:	4631      	mov	r1, r6
 8017d64:	4638      	mov	r0, r7
 8017d66:	eb04 0903 	add.w	r9, r4, r3
 8017d6a:	f000 fd25 	bl	80187b8 <_sbrk_r>
 8017d6e:	4581      	cmp	r9, r0
 8017d70:	d13f      	bne.n	8017df2 <_malloc_r+0xe6>
 8017d72:	6821      	ldr	r1, [r4, #0]
 8017d74:	1a6d      	subs	r5, r5, r1
 8017d76:	4629      	mov	r1, r5
 8017d78:	4638      	mov	r0, r7
 8017d7a:	f7ff ffa7 	bl	8017ccc <sbrk_aligned>
 8017d7e:	3001      	adds	r0, #1
 8017d80:	d037      	beq.n	8017df2 <_malloc_r+0xe6>
 8017d82:	6823      	ldr	r3, [r4, #0]
 8017d84:	442b      	add	r3, r5
 8017d86:	6023      	str	r3, [r4, #0]
 8017d88:	f8d8 3000 	ldr.w	r3, [r8]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d038      	beq.n	8017e02 <_malloc_r+0xf6>
 8017d90:	685a      	ldr	r2, [r3, #4]
 8017d92:	42a2      	cmp	r2, r4
 8017d94:	d12b      	bne.n	8017dee <_malloc_r+0xe2>
 8017d96:	2200      	movs	r2, #0
 8017d98:	605a      	str	r2, [r3, #4]
 8017d9a:	e00f      	b.n	8017dbc <_malloc_r+0xb0>
 8017d9c:	6822      	ldr	r2, [r4, #0]
 8017d9e:	1b52      	subs	r2, r2, r5
 8017da0:	d41f      	bmi.n	8017de2 <_malloc_r+0xd6>
 8017da2:	2a0b      	cmp	r2, #11
 8017da4:	d917      	bls.n	8017dd6 <_malloc_r+0xca>
 8017da6:	1961      	adds	r1, r4, r5
 8017da8:	42a3      	cmp	r3, r4
 8017daa:	6025      	str	r5, [r4, #0]
 8017dac:	bf18      	it	ne
 8017dae:	6059      	strne	r1, [r3, #4]
 8017db0:	6863      	ldr	r3, [r4, #4]
 8017db2:	bf08      	it	eq
 8017db4:	f8c8 1000 	streq.w	r1, [r8]
 8017db8:	5162      	str	r2, [r4, r5]
 8017dba:	604b      	str	r3, [r1, #4]
 8017dbc:	4638      	mov	r0, r7
 8017dbe:	f104 060b 	add.w	r6, r4, #11
 8017dc2:	f000 f829 	bl	8017e18 <__malloc_unlock>
 8017dc6:	f026 0607 	bic.w	r6, r6, #7
 8017dca:	1d23      	adds	r3, r4, #4
 8017dcc:	1af2      	subs	r2, r6, r3
 8017dce:	d0ae      	beq.n	8017d2e <_malloc_r+0x22>
 8017dd0:	1b9b      	subs	r3, r3, r6
 8017dd2:	50a3      	str	r3, [r4, r2]
 8017dd4:	e7ab      	b.n	8017d2e <_malloc_r+0x22>
 8017dd6:	42a3      	cmp	r3, r4
 8017dd8:	6862      	ldr	r2, [r4, #4]
 8017dda:	d1dd      	bne.n	8017d98 <_malloc_r+0x8c>
 8017ddc:	f8c8 2000 	str.w	r2, [r8]
 8017de0:	e7ec      	b.n	8017dbc <_malloc_r+0xb0>
 8017de2:	4623      	mov	r3, r4
 8017de4:	6864      	ldr	r4, [r4, #4]
 8017de6:	e7ac      	b.n	8017d42 <_malloc_r+0x36>
 8017de8:	4634      	mov	r4, r6
 8017dea:	6876      	ldr	r6, [r6, #4]
 8017dec:	e7b4      	b.n	8017d58 <_malloc_r+0x4c>
 8017dee:	4613      	mov	r3, r2
 8017df0:	e7cc      	b.n	8017d8c <_malloc_r+0x80>
 8017df2:	230c      	movs	r3, #12
 8017df4:	603b      	str	r3, [r7, #0]
 8017df6:	4638      	mov	r0, r7
 8017df8:	f000 f80e 	bl	8017e18 <__malloc_unlock>
 8017dfc:	e797      	b.n	8017d2e <_malloc_r+0x22>
 8017dfe:	6025      	str	r5, [r4, #0]
 8017e00:	e7dc      	b.n	8017dbc <_malloc_r+0xb0>
 8017e02:	605b      	str	r3, [r3, #4]
 8017e04:	deff      	udf	#255	; 0xff
 8017e06:	bf00      	nop
 8017e08:	20009d38 	.word	0x20009d38

08017e0c <__malloc_lock>:
 8017e0c:	4801      	ldr	r0, [pc, #4]	; (8017e14 <__malloc_lock+0x8>)
 8017e0e:	f000 bd20 	b.w	8018852 <__retarget_lock_acquire_recursive>
 8017e12:	bf00      	nop
 8017e14:	20009e81 	.word	0x20009e81

08017e18 <__malloc_unlock>:
 8017e18:	4801      	ldr	r0, [pc, #4]	; (8017e20 <__malloc_unlock+0x8>)
 8017e1a:	f000 bd1b 	b.w	8018854 <__retarget_lock_release_recursive>
 8017e1e:	bf00      	nop
 8017e20:	20009e81 	.word	0x20009e81

08017e24 <srand>:
 8017e24:	b538      	push	{r3, r4, r5, lr}
 8017e26:	4b10      	ldr	r3, [pc, #64]	; (8017e68 <srand+0x44>)
 8017e28:	681d      	ldr	r5, [r3, #0]
 8017e2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017e2c:	4604      	mov	r4, r0
 8017e2e:	b9b3      	cbnz	r3, 8017e5e <srand+0x3a>
 8017e30:	2018      	movs	r0, #24
 8017e32:	f7ff ff3b 	bl	8017cac <malloc>
 8017e36:	4602      	mov	r2, r0
 8017e38:	6328      	str	r0, [r5, #48]	; 0x30
 8017e3a:	b920      	cbnz	r0, 8017e46 <srand+0x22>
 8017e3c:	4b0b      	ldr	r3, [pc, #44]	; (8017e6c <srand+0x48>)
 8017e3e:	480c      	ldr	r0, [pc, #48]	; (8017e70 <srand+0x4c>)
 8017e40:	2146      	movs	r1, #70	; 0x46
 8017e42:	f000 fd1f 	bl	8018884 <__assert_func>
 8017e46:	490b      	ldr	r1, [pc, #44]	; (8017e74 <srand+0x50>)
 8017e48:	4b0b      	ldr	r3, [pc, #44]	; (8017e78 <srand+0x54>)
 8017e4a:	e9c0 1300 	strd	r1, r3, [r0]
 8017e4e:	4b0b      	ldr	r3, [pc, #44]	; (8017e7c <srand+0x58>)
 8017e50:	6083      	str	r3, [r0, #8]
 8017e52:	230b      	movs	r3, #11
 8017e54:	8183      	strh	r3, [r0, #12]
 8017e56:	2100      	movs	r1, #0
 8017e58:	2001      	movs	r0, #1
 8017e5a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017e5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017e60:	2200      	movs	r2, #0
 8017e62:	611c      	str	r4, [r3, #16]
 8017e64:	615a      	str	r2, [r3, #20]
 8017e66:	bd38      	pop	{r3, r4, r5, pc}
 8017e68:	200000cc 	.word	0x200000cc
 8017e6c:	0801a220 	.word	0x0801a220
 8017e70:	0801a237 	.word	0x0801a237
 8017e74:	abcd330e 	.word	0xabcd330e
 8017e78:	e66d1234 	.word	0xe66d1234
 8017e7c:	0005deec 	.word	0x0005deec

08017e80 <rand>:
 8017e80:	4b16      	ldr	r3, [pc, #88]	; (8017edc <rand+0x5c>)
 8017e82:	b510      	push	{r4, lr}
 8017e84:	681c      	ldr	r4, [r3, #0]
 8017e86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017e88:	b9b3      	cbnz	r3, 8017eb8 <rand+0x38>
 8017e8a:	2018      	movs	r0, #24
 8017e8c:	f7ff ff0e 	bl	8017cac <malloc>
 8017e90:	4602      	mov	r2, r0
 8017e92:	6320      	str	r0, [r4, #48]	; 0x30
 8017e94:	b920      	cbnz	r0, 8017ea0 <rand+0x20>
 8017e96:	4b12      	ldr	r3, [pc, #72]	; (8017ee0 <rand+0x60>)
 8017e98:	4812      	ldr	r0, [pc, #72]	; (8017ee4 <rand+0x64>)
 8017e9a:	2152      	movs	r1, #82	; 0x52
 8017e9c:	f000 fcf2 	bl	8018884 <__assert_func>
 8017ea0:	4911      	ldr	r1, [pc, #68]	; (8017ee8 <rand+0x68>)
 8017ea2:	4b12      	ldr	r3, [pc, #72]	; (8017eec <rand+0x6c>)
 8017ea4:	e9c0 1300 	strd	r1, r3, [r0]
 8017ea8:	4b11      	ldr	r3, [pc, #68]	; (8017ef0 <rand+0x70>)
 8017eaa:	6083      	str	r3, [r0, #8]
 8017eac:	230b      	movs	r3, #11
 8017eae:	8183      	strh	r3, [r0, #12]
 8017eb0:	2100      	movs	r1, #0
 8017eb2:	2001      	movs	r0, #1
 8017eb4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017eb8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017eba:	480e      	ldr	r0, [pc, #56]	; (8017ef4 <rand+0x74>)
 8017ebc:	690b      	ldr	r3, [r1, #16]
 8017ebe:	694c      	ldr	r4, [r1, #20]
 8017ec0:	4a0d      	ldr	r2, [pc, #52]	; (8017ef8 <rand+0x78>)
 8017ec2:	4358      	muls	r0, r3
 8017ec4:	fb02 0004 	mla	r0, r2, r4, r0
 8017ec8:	fba3 3202 	umull	r3, r2, r3, r2
 8017ecc:	3301      	adds	r3, #1
 8017ece:	eb40 0002 	adc.w	r0, r0, r2
 8017ed2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017ed6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017eda:	bd10      	pop	{r4, pc}
 8017edc:	200000cc 	.word	0x200000cc
 8017ee0:	0801a220 	.word	0x0801a220
 8017ee4:	0801a237 	.word	0x0801a237
 8017ee8:	abcd330e 	.word	0xabcd330e
 8017eec:	e66d1234 	.word	0xe66d1234
 8017ef0:	0005deec 	.word	0x0005deec
 8017ef4:	5851f42d 	.word	0x5851f42d
 8017ef8:	4c957f2d 	.word	0x4c957f2d

08017efc <realloc>:
 8017efc:	4b02      	ldr	r3, [pc, #8]	; (8017f08 <realloc+0xc>)
 8017efe:	460a      	mov	r2, r1
 8017f00:	4601      	mov	r1, r0
 8017f02:	6818      	ldr	r0, [r3, #0]
 8017f04:	f000 b802 	b.w	8017f0c <_realloc_r>
 8017f08:	200000cc 	.word	0x200000cc

08017f0c <_realloc_r>:
 8017f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f10:	4680      	mov	r8, r0
 8017f12:	4614      	mov	r4, r2
 8017f14:	460e      	mov	r6, r1
 8017f16:	b921      	cbnz	r1, 8017f22 <_realloc_r+0x16>
 8017f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f1c:	4611      	mov	r1, r2
 8017f1e:	f7ff bef5 	b.w	8017d0c <_malloc_r>
 8017f22:	b92a      	cbnz	r2, 8017f30 <_realloc_r+0x24>
 8017f24:	f000 fcd8 	bl	80188d8 <_free_r>
 8017f28:	4625      	mov	r5, r4
 8017f2a:	4628      	mov	r0, r5
 8017f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f30:	f000 fd1e 	bl	8018970 <_malloc_usable_size_r>
 8017f34:	4284      	cmp	r4, r0
 8017f36:	4607      	mov	r7, r0
 8017f38:	d802      	bhi.n	8017f40 <_realloc_r+0x34>
 8017f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017f3e:	d812      	bhi.n	8017f66 <_realloc_r+0x5a>
 8017f40:	4621      	mov	r1, r4
 8017f42:	4640      	mov	r0, r8
 8017f44:	f7ff fee2 	bl	8017d0c <_malloc_r>
 8017f48:	4605      	mov	r5, r0
 8017f4a:	2800      	cmp	r0, #0
 8017f4c:	d0ed      	beq.n	8017f2a <_realloc_r+0x1e>
 8017f4e:	42bc      	cmp	r4, r7
 8017f50:	4622      	mov	r2, r4
 8017f52:	4631      	mov	r1, r6
 8017f54:	bf28      	it	cs
 8017f56:	463a      	movcs	r2, r7
 8017f58:	f000 fc85 	bl	8018866 <memcpy>
 8017f5c:	4631      	mov	r1, r6
 8017f5e:	4640      	mov	r0, r8
 8017f60:	f000 fcba 	bl	80188d8 <_free_r>
 8017f64:	e7e1      	b.n	8017f2a <_realloc_r+0x1e>
 8017f66:	4635      	mov	r5, r6
 8017f68:	e7df      	b.n	8017f2a <_realloc_r+0x1e>
	...

08017f6c <_strtoul_l.constprop.0>:
 8017f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f70:	4f36      	ldr	r7, [pc, #216]	; (801804c <_strtoul_l.constprop.0+0xe0>)
 8017f72:	4686      	mov	lr, r0
 8017f74:	460d      	mov	r5, r1
 8017f76:	4628      	mov	r0, r5
 8017f78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f7c:	5d3e      	ldrb	r6, [r7, r4]
 8017f7e:	f016 0608 	ands.w	r6, r6, #8
 8017f82:	d1f8      	bne.n	8017f76 <_strtoul_l.constprop.0+0xa>
 8017f84:	2c2d      	cmp	r4, #45	; 0x2d
 8017f86:	d130      	bne.n	8017fea <_strtoul_l.constprop.0+0x7e>
 8017f88:	782c      	ldrb	r4, [r5, #0]
 8017f8a:	2601      	movs	r6, #1
 8017f8c:	1c85      	adds	r5, r0, #2
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d057      	beq.n	8018042 <_strtoul_l.constprop.0+0xd6>
 8017f92:	2b10      	cmp	r3, #16
 8017f94:	d109      	bne.n	8017faa <_strtoul_l.constprop.0+0x3e>
 8017f96:	2c30      	cmp	r4, #48	; 0x30
 8017f98:	d107      	bne.n	8017faa <_strtoul_l.constprop.0+0x3e>
 8017f9a:	7828      	ldrb	r0, [r5, #0]
 8017f9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017fa0:	2858      	cmp	r0, #88	; 0x58
 8017fa2:	d149      	bne.n	8018038 <_strtoul_l.constprop.0+0xcc>
 8017fa4:	786c      	ldrb	r4, [r5, #1]
 8017fa6:	2310      	movs	r3, #16
 8017fa8:	3502      	adds	r5, #2
 8017faa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017fae:	2700      	movs	r7, #0
 8017fb0:	fbb8 f8f3 	udiv	r8, r8, r3
 8017fb4:	fb03 f908 	mul.w	r9, r3, r8
 8017fb8:	ea6f 0909 	mvn.w	r9, r9
 8017fbc:	4638      	mov	r0, r7
 8017fbe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017fc2:	f1bc 0f09 	cmp.w	ip, #9
 8017fc6:	d815      	bhi.n	8017ff4 <_strtoul_l.constprop.0+0x88>
 8017fc8:	4664      	mov	r4, ip
 8017fca:	42a3      	cmp	r3, r4
 8017fcc:	dd23      	ble.n	8018016 <_strtoul_l.constprop.0+0xaa>
 8017fce:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8017fd2:	d007      	beq.n	8017fe4 <_strtoul_l.constprop.0+0x78>
 8017fd4:	4580      	cmp	r8, r0
 8017fd6:	d31b      	bcc.n	8018010 <_strtoul_l.constprop.0+0xa4>
 8017fd8:	d101      	bne.n	8017fde <_strtoul_l.constprop.0+0x72>
 8017fda:	45a1      	cmp	r9, r4
 8017fdc:	db18      	blt.n	8018010 <_strtoul_l.constprop.0+0xa4>
 8017fde:	fb00 4003 	mla	r0, r0, r3, r4
 8017fe2:	2701      	movs	r7, #1
 8017fe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017fe8:	e7e9      	b.n	8017fbe <_strtoul_l.constprop.0+0x52>
 8017fea:	2c2b      	cmp	r4, #43	; 0x2b
 8017fec:	bf04      	itt	eq
 8017fee:	782c      	ldrbeq	r4, [r5, #0]
 8017ff0:	1c85      	addeq	r5, r0, #2
 8017ff2:	e7cc      	b.n	8017f8e <_strtoul_l.constprop.0+0x22>
 8017ff4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017ff8:	f1bc 0f19 	cmp.w	ip, #25
 8017ffc:	d801      	bhi.n	8018002 <_strtoul_l.constprop.0+0x96>
 8017ffe:	3c37      	subs	r4, #55	; 0x37
 8018000:	e7e3      	b.n	8017fca <_strtoul_l.constprop.0+0x5e>
 8018002:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018006:	f1bc 0f19 	cmp.w	ip, #25
 801800a:	d804      	bhi.n	8018016 <_strtoul_l.constprop.0+0xaa>
 801800c:	3c57      	subs	r4, #87	; 0x57
 801800e:	e7dc      	b.n	8017fca <_strtoul_l.constprop.0+0x5e>
 8018010:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018014:	e7e6      	b.n	8017fe4 <_strtoul_l.constprop.0+0x78>
 8018016:	1c7b      	adds	r3, r7, #1
 8018018:	d106      	bne.n	8018028 <_strtoul_l.constprop.0+0xbc>
 801801a:	2322      	movs	r3, #34	; 0x22
 801801c:	f8ce 3000 	str.w	r3, [lr]
 8018020:	4638      	mov	r0, r7
 8018022:	b932      	cbnz	r2, 8018032 <_strtoul_l.constprop.0+0xc6>
 8018024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018028:	b106      	cbz	r6, 801802c <_strtoul_l.constprop.0+0xc0>
 801802a:	4240      	negs	r0, r0
 801802c:	2a00      	cmp	r2, #0
 801802e:	d0f9      	beq.n	8018024 <_strtoul_l.constprop.0+0xb8>
 8018030:	b107      	cbz	r7, 8018034 <_strtoul_l.constprop.0+0xc8>
 8018032:	1e69      	subs	r1, r5, #1
 8018034:	6011      	str	r1, [r2, #0]
 8018036:	e7f5      	b.n	8018024 <_strtoul_l.constprop.0+0xb8>
 8018038:	2430      	movs	r4, #48	; 0x30
 801803a:	2b00      	cmp	r3, #0
 801803c:	d1b5      	bne.n	8017faa <_strtoul_l.constprop.0+0x3e>
 801803e:	2308      	movs	r3, #8
 8018040:	e7b3      	b.n	8017faa <_strtoul_l.constprop.0+0x3e>
 8018042:	2c30      	cmp	r4, #48	; 0x30
 8018044:	d0a9      	beq.n	8017f9a <_strtoul_l.constprop.0+0x2e>
 8018046:	230a      	movs	r3, #10
 8018048:	e7af      	b.n	8017faa <_strtoul_l.constprop.0+0x3e>
 801804a:	bf00      	nop
 801804c:	0801a290 	.word	0x0801a290

08018050 <strtoul>:
 8018050:	4613      	mov	r3, r2
 8018052:	460a      	mov	r2, r1
 8018054:	4601      	mov	r1, r0
 8018056:	4802      	ldr	r0, [pc, #8]	; (8018060 <strtoul+0x10>)
 8018058:	6800      	ldr	r0, [r0, #0]
 801805a:	f7ff bf87 	b.w	8017f6c <_strtoul_l.constprop.0>
 801805e:	bf00      	nop
 8018060:	200000cc 	.word	0x200000cc

08018064 <std>:
 8018064:	2300      	movs	r3, #0
 8018066:	b510      	push	{r4, lr}
 8018068:	4604      	mov	r4, r0
 801806a:	e9c0 3300 	strd	r3, r3, [r0]
 801806e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018072:	6083      	str	r3, [r0, #8]
 8018074:	8181      	strh	r1, [r0, #12]
 8018076:	6643      	str	r3, [r0, #100]	; 0x64
 8018078:	81c2      	strh	r2, [r0, #14]
 801807a:	6183      	str	r3, [r0, #24]
 801807c:	4619      	mov	r1, r3
 801807e:	2208      	movs	r2, #8
 8018080:	305c      	adds	r0, #92	; 0x5c
 8018082:	f000 fad1 	bl	8018628 <memset>
 8018086:	4b0d      	ldr	r3, [pc, #52]	; (80180bc <std+0x58>)
 8018088:	6263      	str	r3, [r4, #36]	; 0x24
 801808a:	4b0d      	ldr	r3, [pc, #52]	; (80180c0 <std+0x5c>)
 801808c:	62a3      	str	r3, [r4, #40]	; 0x28
 801808e:	4b0d      	ldr	r3, [pc, #52]	; (80180c4 <std+0x60>)
 8018090:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018092:	4b0d      	ldr	r3, [pc, #52]	; (80180c8 <std+0x64>)
 8018094:	6323      	str	r3, [r4, #48]	; 0x30
 8018096:	4b0d      	ldr	r3, [pc, #52]	; (80180cc <std+0x68>)
 8018098:	6224      	str	r4, [r4, #32]
 801809a:	429c      	cmp	r4, r3
 801809c:	d006      	beq.n	80180ac <std+0x48>
 801809e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80180a2:	4294      	cmp	r4, r2
 80180a4:	d002      	beq.n	80180ac <std+0x48>
 80180a6:	33d0      	adds	r3, #208	; 0xd0
 80180a8:	429c      	cmp	r4, r3
 80180aa:	d105      	bne.n	80180b8 <std+0x54>
 80180ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80180b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180b4:	f000 bbcc 	b.w	8018850 <__retarget_lock_init_recursive>
 80180b8:	bd10      	pop	{r4, pc}
 80180ba:	bf00      	nop
 80180bc:	080183d1 	.word	0x080183d1
 80180c0:	080183f3 	.word	0x080183f3
 80180c4:	0801842b 	.word	0x0801842b
 80180c8:	0801844f 	.word	0x0801844f
 80180cc:	20009d40 	.word	0x20009d40

080180d0 <stdio_exit_handler>:
 80180d0:	4a02      	ldr	r2, [pc, #8]	; (80180dc <stdio_exit_handler+0xc>)
 80180d2:	4903      	ldr	r1, [pc, #12]	; (80180e0 <stdio_exit_handler+0x10>)
 80180d4:	4803      	ldr	r0, [pc, #12]	; (80180e4 <stdio_exit_handler+0x14>)
 80180d6:	f000 b869 	b.w	80181ac <_fwalk_sglue>
 80180da:	bf00      	nop
 80180dc:	20000074 	.word	0x20000074
 80180e0:	080192e5 	.word	0x080192e5
 80180e4:	20000080 	.word	0x20000080

080180e8 <cleanup_stdio>:
 80180e8:	6841      	ldr	r1, [r0, #4]
 80180ea:	4b0c      	ldr	r3, [pc, #48]	; (801811c <cleanup_stdio+0x34>)
 80180ec:	4299      	cmp	r1, r3
 80180ee:	b510      	push	{r4, lr}
 80180f0:	4604      	mov	r4, r0
 80180f2:	d001      	beq.n	80180f8 <cleanup_stdio+0x10>
 80180f4:	f001 f8f6 	bl	80192e4 <_fflush_r>
 80180f8:	68a1      	ldr	r1, [r4, #8]
 80180fa:	4b09      	ldr	r3, [pc, #36]	; (8018120 <cleanup_stdio+0x38>)
 80180fc:	4299      	cmp	r1, r3
 80180fe:	d002      	beq.n	8018106 <cleanup_stdio+0x1e>
 8018100:	4620      	mov	r0, r4
 8018102:	f001 f8ef 	bl	80192e4 <_fflush_r>
 8018106:	68e1      	ldr	r1, [r4, #12]
 8018108:	4b06      	ldr	r3, [pc, #24]	; (8018124 <cleanup_stdio+0x3c>)
 801810a:	4299      	cmp	r1, r3
 801810c:	d004      	beq.n	8018118 <cleanup_stdio+0x30>
 801810e:	4620      	mov	r0, r4
 8018110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018114:	f001 b8e6 	b.w	80192e4 <_fflush_r>
 8018118:	bd10      	pop	{r4, pc}
 801811a:	bf00      	nop
 801811c:	20009d40 	.word	0x20009d40
 8018120:	20009da8 	.word	0x20009da8
 8018124:	20009e10 	.word	0x20009e10

08018128 <global_stdio_init.part.0>:
 8018128:	b510      	push	{r4, lr}
 801812a:	4b0b      	ldr	r3, [pc, #44]	; (8018158 <global_stdio_init.part.0+0x30>)
 801812c:	4c0b      	ldr	r4, [pc, #44]	; (801815c <global_stdio_init.part.0+0x34>)
 801812e:	4a0c      	ldr	r2, [pc, #48]	; (8018160 <global_stdio_init.part.0+0x38>)
 8018130:	601a      	str	r2, [r3, #0]
 8018132:	4620      	mov	r0, r4
 8018134:	2200      	movs	r2, #0
 8018136:	2104      	movs	r1, #4
 8018138:	f7ff ff94 	bl	8018064 <std>
 801813c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018140:	2201      	movs	r2, #1
 8018142:	2109      	movs	r1, #9
 8018144:	f7ff ff8e 	bl	8018064 <std>
 8018148:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801814c:	2202      	movs	r2, #2
 801814e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018152:	2112      	movs	r1, #18
 8018154:	f7ff bf86 	b.w	8018064 <std>
 8018158:	20009e78 	.word	0x20009e78
 801815c:	20009d40 	.word	0x20009d40
 8018160:	080180d1 	.word	0x080180d1

08018164 <__sfp_lock_acquire>:
 8018164:	4801      	ldr	r0, [pc, #4]	; (801816c <__sfp_lock_acquire+0x8>)
 8018166:	f000 bb74 	b.w	8018852 <__retarget_lock_acquire_recursive>
 801816a:	bf00      	nop
 801816c:	20009e82 	.word	0x20009e82

08018170 <__sfp_lock_release>:
 8018170:	4801      	ldr	r0, [pc, #4]	; (8018178 <__sfp_lock_release+0x8>)
 8018172:	f000 bb6f 	b.w	8018854 <__retarget_lock_release_recursive>
 8018176:	bf00      	nop
 8018178:	20009e82 	.word	0x20009e82

0801817c <__sinit>:
 801817c:	b510      	push	{r4, lr}
 801817e:	4604      	mov	r4, r0
 8018180:	f7ff fff0 	bl	8018164 <__sfp_lock_acquire>
 8018184:	6a23      	ldr	r3, [r4, #32]
 8018186:	b11b      	cbz	r3, 8018190 <__sinit+0x14>
 8018188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801818c:	f7ff bff0 	b.w	8018170 <__sfp_lock_release>
 8018190:	4b04      	ldr	r3, [pc, #16]	; (80181a4 <__sinit+0x28>)
 8018192:	6223      	str	r3, [r4, #32]
 8018194:	4b04      	ldr	r3, [pc, #16]	; (80181a8 <__sinit+0x2c>)
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d1f5      	bne.n	8018188 <__sinit+0xc>
 801819c:	f7ff ffc4 	bl	8018128 <global_stdio_init.part.0>
 80181a0:	e7f2      	b.n	8018188 <__sinit+0xc>
 80181a2:	bf00      	nop
 80181a4:	080180e9 	.word	0x080180e9
 80181a8:	20009e78 	.word	0x20009e78

080181ac <_fwalk_sglue>:
 80181ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181b0:	4607      	mov	r7, r0
 80181b2:	4688      	mov	r8, r1
 80181b4:	4614      	mov	r4, r2
 80181b6:	2600      	movs	r6, #0
 80181b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181bc:	f1b9 0901 	subs.w	r9, r9, #1
 80181c0:	d505      	bpl.n	80181ce <_fwalk_sglue+0x22>
 80181c2:	6824      	ldr	r4, [r4, #0]
 80181c4:	2c00      	cmp	r4, #0
 80181c6:	d1f7      	bne.n	80181b8 <_fwalk_sglue+0xc>
 80181c8:	4630      	mov	r0, r6
 80181ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181ce:	89ab      	ldrh	r3, [r5, #12]
 80181d0:	2b01      	cmp	r3, #1
 80181d2:	d907      	bls.n	80181e4 <_fwalk_sglue+0x38>
 80181d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80181d8:	3301      	adds	r3, #1
 80181da:	d003      	beq.n	80181e4 <_fwalk_sglue+0x38>
 80181dc:	4629      	mov	r1, r5
 80181de:	4638      	mov	r0, r7
 80181e0:	47c0      	blx	r8
 80181e2:	4306      	orrs	r6, r0
 80181e4:	3568      	adds	r5, #104	; 0x68
 80181e6:	e7e9      	b.n	80181bc <_fwalk_sglue+0x10>

080181e8 <iprintf>:
 80181e8:	b40f      	push	{r0, r1, r2, r3}
 80181ea:	b507      	push	{r0, r1, r2, lr}
 80181ec:	4906      	ldr	r1, [pc, #24]	; (8018208 <iprintf+0x20>)
 80181ee:	ab04      	add	r3, sp, #16
 80181f0:	6808      	ldr	r0, [r1, #0]
 80181f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80181f6:	6881      	ldr	r1, [r0, #8]
 80181f8:	9301      	str	r3, [sp, #4]
 80181fa:	f000 fd43 	bl	8018c84 <_vfiprintf_r>
 80181fe:	b003      	add	sp, #12
 8018200:	f85d eb04 	ldr.w	lr, [sp], #4
 8018204:	b004      	add	sp, #16
 8018206:	4770      	bx	lr
 8018208:	200000cc 	.word	0x200000cc

0801820c <setvbuf>:
 801820c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018210:	461d      	mov	r5, r3
 8018212:	4b54      	ldr	r3, [pc, #336]	; (8018364 <setvbuf+0x158>)
 8018214:	681f      	ldr	r7, [r3, #0]
 8018216:	4604      	mov	r4, r0
 8018218:	460e      	mov	r6, r1
 801821a:	4690      	mov	r8, r2
 801821c:	b127      	cbz	r7, 8018228 <setvbuf+0x1c>
 801821e:	6a3b      	ldr	r3, [r7, #32]
 8018220:	b913      	cbnz	r3, 8018228 <setvbuf+0x1c>
 8018222:	4638      	mov	r0, r7
 8018224:	f7ff ffaa 	bl	801817c <__sinit>
 8018228:	f1b8 0f02 	cmp.w	r8, #2
 801822c:	d006      	beq.n	801823c <setvbuf+0x30>
 801822e:	f1b8 0f01 	cmp.w	r8, #1
 8018232:	f200 8094 	bhi.w	801835e <setvbuf+0x152>
 8018236:	2d00      	cmp	r5, #0
 8018238:	f2c0 8091 	blt.w	801835e <setvbuf+0x152>
 801823c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801823e:	07da      	lsls	r2, r3, #31
 8018240:	d405      	bmi.n	801824e <setvbuf+0x42>
 8018242:	89a3      	ldrh	r3, [r4, #12]
 8018244:	059b      	lsls	r3, r3, #22
 8018246:	d402      	bmi.n	801824e <setvbuf+0x42>
 8018248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801824a:	f000 fb02 	bl	8018852 <__retarget_lock_acquire_recursive>
 801824e:	4621      	mov	r1, r4
 8018250:	4638      	mov	r0, r7
 8018252:	f001 f847 	bl	80192e4 <_fflush_r>
 8018256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018258:	b141      	cbz	r1, 801826c <setvbuf+0x60>
 801825a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801825e:	4299      	cmp	r1, r3
 8018260:	d002      	beq.n	8018268 <setvbuf+0x5c>
 8018262:	4638      	mov	r0, r7
 8018264:	f000 fb38 	bl	80188d8 <_free_r>
 8018268:	2300      	movs	r3, #0
 801826a:	6363      	str	r3, [r4, #52]	; 0x34
 801826c:	2300      	movs	r3, #0
 801826e:	61a3      	str	r3, [r4, #24]
 8018270:	6063      	str	r3, [r4, #4]
 8018272:	89a3      	ldrh	r3, [r4, #12]
 8018274:	0618      	lsls	r0, r3, #24
 8018276:	d503      	bpl.n	8018280 <setvbuf+0x74>
 8018278:	6921      	ldr	r1, [r4, #16]
 801827a:	4638      	mov	r0, r7
 801827c:	f000 fb2c 	bl	80188d8 <_free_r>
 8018280:	89a3      	ldrh	r3, [r4, #12]
 8018282:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8018286:	f023 0303 	bic.w	r3, r3, #3
 801828a:	f1b8 0f02 	cmp.w	r8, #2
 801828e:	81a3      	strh	r3, [r4, #12]
 8018290:	d05f      	beq.n	8018352 <setvbuf+0x146>
 8018292:	ab01      	add	r3, sp, #4
 8018294:	466a      	mov	r2, sp
 8018296:	4621      	mov	r1, r4
 8018298:	4638      	mov	r0, r7
 801829a:	f001 f85d 	bl	8019358 <__swhatbuf_r>
 801829e:	89a3      	ldrh	r3, [r4, #12]
 80182a0:	4318      	orrs	r0, r3
 80182a2:	81a0      	strh	r0, [r4, #12]
 80182a4:	bb2d      	cbnz	r5, 80182f2 <setvbuf+0xe6>
 80182a6:	9d00      	ldr	r5, [sp, #0]
 80182a8:	4628      	mov	r0, r5
 80182aa:	f7ff fcff 	bl	8017cac <malloc>
 80182ae:	4606      	mov	r6, r0
 80182b0:	2800      	cmp	r0, #0
 80182b2:	d150      	bne.n	8018356 <setvbuf+0x14a>
 80182b4:	f8dd 9000 	ldr.w	r9, [sp]
 80182b8:	45a9      	cmp	r9, r5
 80182ba:	d13e      	bne.n	801833a <setvbuf+0x12e>
 80182bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80182c0:	2200      	movs	r2, #0
 80182c2:	60a2      	str	r2, [r4, #8]
 80182c4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80182c8:	6022      	str	r2, [r4, #0]
 80182ca:	6122      	str	r2, [r4, #16]
 80182cc:	2201      	movs	r2, #1
 80182ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182d2:	6162      	str	r2, [r4, #20]
 80182d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80182d6:	f043 0302 	orr.w	r3, r3, #2
 80182da:	07d1      	lsls	r1, r2, #31
 80182dc:	81a3      	strh	r3, [r4, #12]
 80182de:	d404      	bmi.n	80182ea <setvbuf+0xde>
 80182e0:	059b      	lsls	r3, r3, #22
 80182e2:	d402      	bmi.n	80182ea <setvbuf+0xde>
 80182e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182e6:	f000 fab5 	bl	8018854 <__retarget_lock_release_recursive>
 80182ea:	4628      	mov	r0, r5
 80182ec:	b003      	add	sp, #12
 80182ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182f2:	2e00      	cmp	r6, #0
 80182f4:	d0d8      	beq.n	80182a8 <setvbuf+0x9c>
 80182f6:	6a3b      	ldr	r3, [r7, #32]
 80182f8:	b913      	cbnz	r3, 8018300 <setvbuf+0xf4>
 80182fa:	4638      	mov	r0, r7
 80182fc:	f7ff ff3e 	bl	801817c <__sinit>
 8018300:	f1b8 0f01 	cmp.w	r8, #1
 8018304:	bf08      	it	eq
 8018306:	89a3      	ldrheq	r3, [r4, #12]
 8018308:	6026      	str	r6, [r4, #0]
 801830a:	bf04      	itt	eq
 801830c:	f043 0301 	orreq.w	r3, r3, #1
 8018310:	81a3      	strheq	r3, [r4, #12]
 8018312:	89a3      	ldrh	r3, [r4, #12]
 8018314:	f013 0208 	ands.w	r2, r3, #8
 8018318:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801831c:	d01d      	beq.n	801835a <setvbuf+0x14e>
 801831e:	07da      	lsls	r2, r3, #31
 8018320:	bf41      	itttt	mi
 8018322:	2200      	movmi	r2, #0
 8018324:	426d      	negmi	r5, r5
 8018326:	60a2      	strmi	r2, [r4, #8]
 8018328:	61a5      	strmi	r5, [r4, #24]
 801832a:	bf58      	it	pl
 801832c:	60a5      	strpl	r5, [r4, #8]
 801832e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8018330:	f015 0501 	ands.w	r5, r5, #1
 8018334:	d0d4      	beq.n	80182e0 <setvbuf+0xd4>
 8018336:	2500      	movs	r5, #0
 8018338:	e7d7      	b.n	80182ea <setvbuf+0xde>
 801833a:	4648      	mov	r0, r9
 801833c:	f7ff fcb6 	bl	8017cac <malloc>
 8018340:	4606      	mov	r6, r0
 8018342:	2800      	cmp	r0, #0
 8018344:	d0ba      	beq.n	80182bc <setvbuf+0xb0>
 8018346:	89a3      	ldrh	r3, [r4, #12]
 8018348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801834c:	81a3      	strh	r3, [r4, #12]
 801834e:	464d      	mov	r5, r9
 8018350:	e7d1      	b.n	80182f6 <setvbuf+0xea>
 8018352:	2500      	movs	r5, #0
 8018354:	e7b4      	b.n	80182c0 <setvbuf+0xb4>
 8018356:	46a9      	mov	r9, r5
 8018358:	e7f5      	b.n	8018346 <setvbuf+0x13a>
 801835a:	60a2      	str	r2, [r4, #8]
 801835c:	e7e7      	b.n	801832e <setvbuf+0x122>
 801835e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018362:	e7c2      	b.n	80182ea <setvbuf+0xde>
 8018364:	200000cc 	.word	0x200000cc

08018368 <sniprintf>:
 8018368:	b40c      	push	{r2, r3}
 801836a:	b530      	push	{r4, r5, lr}
 801836c:	4b17      	ldr	r3, [pc, #92]	; (80183cc <sniprintf+0x64>)
 801836e:	1e0c      	subs	r4, r1, #0
 8018370:	681d      	ldr	r5, [r3, #0]
 8018372:	b09d      	sub	sp, #116	; 0x74
 8018374:	da08      	bge.n	8018388 <sniprintf+0x20>
 8018376:	238b      	movs	r3, #139	; 0x8b
 8018378:	602b      	str	r3, [r5, #0]
 801837a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801837e:	b01d      	add	sp, #116	; 0x74
 8018380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018384:	b002      	add	sp, #8
 8018386:	4770      	bx	lr
 8018388:	f44f 7302 	mov.w	r3, #520	; 0x208
 801838c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018390:	bf14      	ite	ne
 8018392:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8018396:	4623      	moveq	r3, r4
 8018398:	9304      	str	r3, [sp, #16]
 801839a:	9307      	str	r3, [sp, #28]
 801839c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80183a0:	9002      	str	r0, [sp, #8]
 80183a2:	9006      	str	r0, [sp, #24]
 80183a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80183a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80183aa:	ab21      	add	r3, sp, #132	; 0x84
 80183ac:	a902      	add	r1, sp, #8
 80183ae:	4628      	mov	r0, r5
 80183b0:	9301      	str	r3, [sp, #4]
 80183b2:	f000 fb3f 	bl	8018a34 <_svfiprintf_r>
 80183b6:	1c43      	adds	r3, r0, #1
 80183b8:	bfbc      	itt	lt
 80183ba:	238b      	movlt	r3, #139	; 0x8b
 80183bc:	602b      	strlt	r3, [r5, #0]
 80183be:	2c00      	cmp	r4, #0
 80183c0:	d0dd      	beq.n	801837e <sniprintf+0x16>
 80183c2:	9b02      	ldr	r3, [sp, #8]
 80183c4:	2200      	movs	r2, #0
 80183c6:	701a      	strb	r2, [r3, #0]
 80183c8:	e7d9      	b.n	801837e <sniprintf+0x16>
 80183ca:	bf00      	nop
 80183cc:	200000cc 	.word	0x200000cc

080183d0 <__sread>:
 80183d0:	b510      	push	{r4, lr}
 80183d2:	460c      	mov	r4, r1
 80183d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183d8:	f000 f9dc 	bl	8018794 <_read_r>
 80183dc:	2800      	cmp	r0, #0
 80183de:	bfab      	itete	ge
 80183e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80183e2:	89a3      	ldrhlt	r3, [r4, #12]
 80183e4:	181b      	addge	r3, r3, r0
 80183e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80183ea:	bfac      	ite	ge
 80183ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80183ee:	81a3      	strhlt	r3, [r4, #12]
 80183f0:	bd10      	pop	{r4, pc}

080183f2 <__swrite>:
 80183f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183f6:	461f      	mov	r7, r3
 80183f8:	898b      	ldrh	r3, [r1, #12]
 80183fa:	05db      	lsls	r3, r3, #23
 80183fc:	4605      	mov	r5, r0
 80183fe:	460c      	mov	r4, r1
 8018400:	4616      	mov	r6, r2
 8018402:	d505      	bpl.n	8018410 <__swrite+0x1e>
 8018404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018408:	2302      	movs	r3, #2
 801840a:	2200      	movs	r2, #0
 801840c:	f000 f9b0 	bl	8018770 <_lseek_r>
 8018410:	89a3      	ldrh	r3, [r4, #12]
 8018412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801841a:	81a3      	strh	r3, [r4, #12]
 801841c:	4632      	mov	r2, r6
 801841e:	463b      	mov	r3, r7
 8018420:	4628      	mov	r0, r5
 8018422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018426:	f000 b9d7 	b.w	80187d8 <_write_r>

0801842a <__sseek>:
 801842a:	b510      	push	{r4, lr}
 801842c:	460c      	mov	r4, r1
 801842e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018432:	f000 f99d 	bl	8018770 <_lseek_r>
 8018436:	1c43      	adds	r3, r0, #1
 8018438:	89a3      	ldrh	r3, [r4, #12]
 801843a:	bf15      	itete	ne
 801843c:	6560      	strne	r0, [r4, #84]	; 0x54
 801843e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018446:	81a3      	strheq	r3, [r4, #12]
 8018448:	bf18      	it	ne
 801844a:	81a3      	strhne	r3, [r4, #12]
 801844c:	bd10      	pop	{r4, pc}

0801844e <__sclose>:
 801844e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018452:	f000 b927 	b.w	80186a4 <_close_r>

08018456 <_vsniprintf_r>:
 8018456:	b530      	push	{r4, r5, lr}
 8018458:	4614      	mov	r4, r2
 801845a:	2c00      	cmp	r4, #0
 801845c:	b09b      	sub	sp, #108	; 0x6c
 801845e:	4605      	mov	r5, r0
 8018460:	461a      	mov	r2, r3
 8018462:	da05      	bge.n	8018470 <_vsniprintf_r+0x1a>
 8018464:	238b      	movs	r3, #139	; 0x8b
 8018466:	6003      	str	r3, [r0, #0]
 8018468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801846c:	b01b      	add	sp, #108	; 0x6c
 801846e:	bd30      	pop	{r4, r5, pc}
 8018470:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018474:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018478:	bf14      	ite	ne
 801847a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801847e:	4623      	moveq	r3, r4
 8018480:	9302      	str	r3, [sp, #8]
 8018482:	9305      	str	r3, [sp, #20]
 8018484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018488:	9100      	str	r1, [sp, #0]
 801848a:	9104      	str	r1, [sp, #16]
 801848c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018490:	4669      	mov	r1, sp
 8018492:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018494:	f000 face 	bl	8018a34 <_svfiprintf_r>
 8018498:	1c43      	adds	r3, r0, #1
 801849a:	bfbc      	itt	lt
 801849c:	238b      	movlt	r3, #139	; 0x8b
 801849e:	602b      	strlt	r3, [r5, #0]
 80184a0:	2c00      	cmp	r4, #0
 80184a2:	d0e3      	beq.n	801846c <_vsniprintf_r+0x16>
 80184a4:	9b00      	ldr	r3, [sp, #0]
 80184a6:	2200      	movs	r2, #0
 80184a8:	701a      	strb	r2, [r3, #0]
 80184aa:	e7df      	b.n	801846c <_vsniprintf_r+0x16>

080184ac <vsniprintf>:
 80184ac:	b507      	push	{r0, r1, r2, lr}
 80184ae:	9300      	str	r3, [sp, #0]
 80184b0:	4613      	mov	r3, r2
 80184b2:	460a      	mov	r2, r1
 80184b4:	4601      	mov	r1, r0
 80184b6:	4803      	ldr	r0, [pc, #12]	; (80184c4 <vsniprintf+0x18>)
 80184b8:	6800      	ldr	r0, [r0, #0]
 80184ba:	f7ff ffcc 	bl	8018456 <_vsniprintf_r>
 80184be:	b003      	add	sp, #12
 80184c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80184c4:	200000cc 	.word	0x200000cc

080184c8 <__swbuf_r>:
 80184c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ca:	460e      	mov	r6, r1
 80184cc:	4614      	mov	r4, r2
 80184ce:	4605      	mov	r5, r0
 80184d0:	b118      	cbz	r0, 80184da <__swbuf_r+0x12>
 80184d2:	6a03      	ldr	r3, [r0, #32]
 80184d4:	b90b      	cbnz	r3, 80184da <__swbuf_r+0x12>
 80184d6:	f7ff fe51 	bl	801817c <__sinit>
 80184da:	69a3      	ldr	r3, [r4, #24]
 80184dc:	60a3      	str	r3, [r4, #8]
 80184de:	89a3      	ldrh	r3, [r4, #12]
 80184e0:	071a      	lsls	r2, r3, #28
 80184e2:	d525      	bpl.n	8018530 <__swbuf_r+0x68>
 80184e4:	6923      	ldr	r3, [r4, #16]
 80184e6:	b31b      	cbz	r3, 8018530 <__swbuf_r+0x68>
 80184e8:	6823      	ldr	r3, [r4, #0]
 80184ea:	6922      	ldr	r2, [r4, #16]
 80184ec:	1a98      	subs	r0, r3, r2
 80184ee:	6963      	ldr	r3, [r4, #20]
 80184f0:	b2f6      	uxtb	r6, r6
 80184f2:	4283      	cmp	r3, r0
 80184f4:	4637      	mov	r7, r6
 80184f6:	dc04      	bgt.n	8018502 <__swbuf_r+0x3a>
 80184f8:	4621      	mov	r1, r4
 80184fa:	4628      	mov	r0, r5
 80184fc:	f000 fef2 	bl	80192e4 <_fflush_r>
 8018500:	b9e0      	cbnz	r0, 801853c <__swbuf_r+0x74>
 8018502:	68a3      	ldr	r3, [r4, #8]
 8018504:	3b01      	subs	r3, #1
 8018506:	60a3      	str	r3, [r4, #8]
 8018508:	6823      	ldr	r3, [r4, #0]
 801850a:	1c5a      	adds	r2, r3, #1
 801850c:	6022      	str	r2, [r4, #0]
 801850e:	701e      	strb	r6, [r3, #0]
 8018510:	6962      	ldr	r2, [r4, #20]
 8018512:	1c43      	adds	r3, r0, #1
 8018514:	429a      	cmp	r2, r3
 8018516:	d004      	beq.n	8018522 <__swbuf_r+0x5a>
 8018518:	89a3      	ldrh	r3, [r4, #12]
 801851a:	07db      	lsls	r3, r3, #31
 801851c:	d506      	bpl.n	801852c <__swbuf_r+0x64>
 801851e:	2e0a      	cmp	r6, #10
 8018520:	d104      	bne.n	801852c <__swbuf_r+0x64>
 8018522:	4621      	mov	r1, r4
 8018524:	4628      	mov	r0, r5
 8018526:	f000 fedd 	bl	80192e4 <_fflush_r>
 801852a:	b938      	cbnz	r0, 801853c <__swbuf_r+0x74>
 801852c:	4638      	mov	r0, r7
 801852e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018530:	4621      	mov	r1, r4
 8018532:	4628      	mov	r0, r5
 8018534:	f000 f806 	bl	8018544 <__swsetup_r>
 8018538:	2800      	cmp	r0, #0
 801853a:	d0d5      	beq.n	80184e8 <__swbuf_r+0x20>
 801853c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018540:	e7f4      	b.n	801852c <__swbuf_r+0x64>
	...

08018544 <__swsetup_r>:
 8018544:	b538      	push	{r3, r4, r5, lr}
 8018546:	4b2a      	ldr	r3, [pc, #168]	; (80185f0 <__swsetup_r+0xac>)
 8018548:	4605      	mov	r5, r0
 801854a:	6818      	ldr	r0, [r3, #0]
 801854c:	460c      	mov	r4, r1
 801854e:	b118      	cbz	r0, 8018558 <__swsetup_r+0x14>
 8018550:	6a03      	ldr	r3, [r0, #32]
 8018552:	b90b      	cbnz	r3, 8018558 <__swsetup_r+0x14>
 8018554:	f7ff fe12 	bl	801817c <__sinit>
 8018558:	89a3      	ldrh	r3, [r4, #12]
 801855a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801855e:	0718      	lsls	r0, r3, #28
 8018560:	d422      	bmi.n	80185a8 <__swsetup_r+0x64>
 8018562:	06d9      	lsls	r1, r3, #27
 8018564:	d407      	bmi.n	8018576 <__swsetup_r+0x32>
 8018566:	2309      	movs	r3, #9
 8018568:	602b      	str	r3, [r5, #0]
 801856a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801856e:	81a3      	strh	r3, [r4, #12]
 8018570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018574:	e034      	b.n	80185e0 <__swsetup_r+0x9c>
 8018576:	0758      	lsls	r0, r3, #29
 8018578:	d512      	bpl.n	80185a0 <__swsetup_r+0x5c>
 801857a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801857c:	b141      	cbz	r1, 8018590 <__swsetup_r+0x4c>
 801857e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018582:	4299      	cmp	r1, r3
 8018584:	d002      	beq.n	801858c <__swsetup_r+0x48>
 8018586:	4628      	mov	r0, r5
 8018588:	f000 f9a6 	bl	80188d8 <_free_r>
 801858c:	2300      	movs	r3, #0
 801858e:	6363      	str	r3, [r4, #52]	; 0x34
 8018590:	89a3      	ldrh	r3, [r4, #12]
 8018592:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018596:	81a3      	strh	r3, [r4, #12]
 8018598:	2300      	movs	r3, #0
 801859a:	6063      	str	r3, [r4, #4]
 801859c:	6923      	ldr	r3, [r4, #16]
 801859e:	6023      	str	r3, [r4, #0]
 80185a0:	89a3      	ldrh	r3, [r4, #12]
 80185a2:	f043 0308 	orr.w	r3, r3, #8
 80185a6:	81a3      	strh	r3, [r4, #12]
 80185a8:	6923      	ldr	r3, [r4, #16]
 80185aa:	b94b      	cbnz	r3, 80185c0 <__swsetup_r+0x7c>
 80185ac:	89a3      	ldrh	r3, [r4, #12]
 80185ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80185b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80185b6:	d003      	beq.n	80185c0 <__swsetup_r+0x7c>
 80185b8:	4621      	mov	r1, r4
 80185ba:	4628      	mov	r0, r5
 80185bc:	f000 fef2 	bl	80193a4 <__smakebuf_r>
 80185c0:	89a0      	ldrh	r0, [r4, #12]
 80185c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80185c6:	f010 0301 	ands.w	r3, r0, #1
 80185ca:	d00a      	beq.n	80185e2 <__swsetup_r+0x9e>
 80185cc:	2300      	movs	r3, #0
 80185ce:	60a3      	str	r3, [r4, #8]
 80185d0:	6963      	ldr	r3, [r4, #20]
 80185d2:	425b      	negs	r3, r3
 80185d4:	61a3      	str	r3, [r4, #24]
 80185d6:	6923      	ldr	r3, [r4, #16]
 80185d8:	b943      	cbnz	r3, 80185ec <__swsetup_r+0xa8>
 80185da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80185de:	d1c4      	bne.n	801856a <__swsetup_r+0x26>
 80185e0:	bd38      	pop	{r3, r4, r5, pc}
 80185e2:	0781      	lsls	r1, r0, #30
 80185e4:	bf58      	it	pl
 80185e6:	6963      	ldrpl	r3, [r4, #20]
 80185e8:	60a3      	str	r3, [r4, #8]
 80185ea:	e7f4      	b.n	80185d6 <__swsetup_r+0x92>
 80185ec:	2000      	movs	r0, #0
 80185ee:	e7f7      	b.n	80185e0 <__swsetup_r+0x9c>
 80185f0:	200000cc 	.word	0x200000cc

080185f4 <memmove>:
 80185f4:	4288      	cmp	r0, r1
 80185f6:	b510      	push	{r4, lr}
 80185f8:	eb01 0402 	add.w	r4, r1, r2
 80185fc:	d902      	bls.n	8018604 <memmove+0x10>
 80185fe:	4284      	cmp	r4, r0
 8018600:	4623      	mov	r3, r4
 8018602:	d807      	bhi.n	8018614 <memmove+0x20>
 8018604:	1e43      	subs	r3, r0, #1
 8018606:	42a1      	cmp	r1, r4
 8018608:	d008      	beq.n	801861c <memmove+0x28>
 801860a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801860e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018612:	e7f8      	b.n	8018606 <memmove+0x12>
 8018614:	4402      	add	r2, r0
 8018616:	4601      	mov	r1, r0
 8018618:	428a      	cmp	r2, r1
 801861a:	d100      	bne.n	801861e <memmove+0x2a>
 801861c:	bd10      	pop	{r4, pc}
 801861e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018626:	e7f7      	b.n	8018618 <memmove+0x24>

08018628 <memset>:
 8018628:	4402      	add	r2, r0
 801862a:	4603      	mov	r3, r0
 801862c:	4293      	cmp	r3, r2
 801862e:	d100      	bne.n	8018632 <memset+0xa>
 8018630:	4770      	bx	lr
 8018632:	f803 1b01 	strb.w	r1, [r3], #1
 8018636:	e7f9      	b.n	801862c <memset+0x4>

08018638 <strchr>:
 8018638:	b2c9      	uxtb	r1, r1
 801863a:	4603      	mov	r3, r0
 801863c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018640:	b11a      	cbz	r2, 801864a <strchr+0x12>
 8018642:	428a      	cmp	r2, r1
 8018644:	d1f9      	bne.n	801863a <strchr+0x2>
 8018646:	4618      	mov	r0, r3
 8018648:	4770      	bx	lr
 801864a:	2900      	cmp	r1, #0
 801864c:	bf18      	it	ne
 801864e:	2300      	movne	r3, #0
 8018650:	e7f9      	b.n	8018646 <strchr+0xe>

08018652 <strncmp>:
 8018652:	b510      	push	{r4, lr}
 8018654:	b16a      	cbz	r2, 8018672 <strncmp+0x20>
 8018656:	3901      	subs	r1, #1
 8018658:	1884      	adds	r4, r0, r2
 801865a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801865e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018662:	429a      	cmp	r2, r3
 8018664:	d103      	bne.n	801866e <strncmp+0x1c>
 8018666:	42a0      	cmp	r0, r4
 8018668:	d001      	beq.n	801866e <strncmp+0x1c>
 801866a:	2a00      	cmp	r2, #0
 801866c:	d1f5      	bne.n	801865a <strncmp+0x8>
 801866e:	1ad0      	subs	r0, r2, r3
 8018670:	bd10      	pop	{r4, pc}
 8018672:	4610      	mov	r0, r2
 8018674:	e7fc      	b.n	8018670 <strncmp+0x1e>

08018676 <strstr>:
 8018676:	780a      	ldrb	r2, [r1, #0]
 8018678:	b570      	push	{r4, r5, r6, lr}
 801867a:	b96a      	cbnz	r2, 8018698 <strstr+0x22>
 801867c:	bd70      	pop	{r4, r5, r6, pc}
 801867e:	429a      	cmp	r2, r3
 8018680:	d109      	bne.n	8018696 <strstr+0x20>
 8018682:	460c      	mov	r4, r1
 8018684:	4605      	mov	r5, r0
 8018686:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801868a:	2b00      	cmp	r3, #0
 801868c:	d0f6      	beq.n	801867c <strstr+0x6>
 801868e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018692:	429e      	cmp	r6, r3
 8018694:	d0f7      	beq.n	8018686 <strstr+0x10>
 8018696:	3001      	adds	r0, #1
 8018698:	7803      	ldrb	r3, [r0, #0]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d1ef      	bne.n	801867e <strstr+0x8>
 801869e:	4618      	mov	r0, r3
 80186a0:	e7ec      	b.n	801867c <strstr+0x6>
	...

080186a4 <_close_r>:
 80186a4:	b538      	push	{r3, r4, r5, lr}
 80186a6:	4d06      	ldr	r5, [pc, #24]	; (80186c0 <_close_r+0x1c>)
 80186a8:	2300      	movs	r3, #0
 80186aa:	4604      	mov	r4, r0
 80186ac:	4608      	mov	r0, r1
 80186ae:	602b      	str	r3, [r5, #0]
 80186b0:	f7ea fc7e 	bl	8002fb0 <_close>
 80186b4:	1c43      	adds	r3, r0, #1
 80186b6:	d102      	bne.n	80186be <_close_r+0x1a>
 80186b8:	682b      	ldr	r3, [r5, #0]
 80186ba:	b103      	cbz	r3, 80186be <_close_r+0x1a>
 80186bc:	6023      	str	r3, [r4, #0]
 80186be:	bd38      	pop	{r3, r4, r5, pc}
 80186c0:	20009e7c 	.word	0x20009e7c

080186c4 <_reclaim_reent>:
 80186c4:	4b29      	ldr	r3, [pc, #164]	; (801876c <_reclaim_reent+0xa8>)
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	4283      	cmp	r3, r0
 80186ca:	b570      	push	{r4, r5, r6, lr}
 80186cc:	4604      	mov	r4, r0
 80186ce:	d04b      	beq.n	8018768 <_reclaim_reent+0xa4>
 80186d0:	69c3      	ldr	r3, [r0, #28]
 80186d2:	b143      	cbz	r3, 80186e6 <_reclaim_reent+0x22>
 80186d4:	68db      	ldr	r3, [r3, #12]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d144      	bne.n	8018764 <_reclaim_reent+0xa0>
 80186da:	69e3      	ldr	r3, [r4, #28]
 80186dc:	6819      	ldr	r1, [r3, #0]
 80186de:	b111      	cbz	r1, 80186e6 <_reclaim_reent+0x22>
 80186e0:	4620      	mov	r0, r4
 80186e2:	f000 f8f9 	bl	80188d8 <_free_r>
 80186e6:	6961      	ldr	r1, [r4, #20]
 80186e8:	b111      	cbz	r1, 80186f0 <_reclaim_reent+0x2c>
 80186ea:	4620      	mov	r0, r4
 80186ec:	f000 f8f4 	bl	80188d8 <_free_r>
 80186f0:	69e1      	ldr	r1, [r4, #28]
 80186f2:	b111      	cbz	r1, 80186fa <_reclaim_reent+0x36>
 80186f4:	4620      	mov	r0, r4
 80186f6:	f000 f8ef 	bl	80188d8 <_free_r>
 80186fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80186fc:	b111      	cbz	r1, 8018704 <_reclaim_reent+0x40>
 80186fe:	4620      	mov	r0, r4
 8018700:	f000 f8ea 	bl	80188d8 <_free_r>
 8018704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018706:	b111      	cbz	r1, 801870e <_reclaim_reent+0x4a>
 8018708:	4620      	mov	r0, r4
 801870a:	f000 f8e5 	bl	80188d8 <_free_r>
 801870e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018710:	b111      	cbz	r1, 8018718 <_reclaim_reent+0x54>
 8018712:	4620      	mov	r0, r4
 8018714:	f000 f8e0 	bl	80188d8 <_free_r>
 8018718:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801871a:	b111      	cbz	r1, 8018722 <_reclaim_reent+0x5e>
 801871c:	4620      	mov	r0, r4
 801871e:	f000 f8db 	bl	80188d8 <_free_r>
 8018722:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018724:	b111      	cbz	r1, 801872c <_reclaim_reent+0x68>
 8018726:	4620      	mov	r0, r4
 8018728:	f000 f8d6 	bl	80188d8 <_free_r>
 801872c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801872e:	b111      	cbz	r1, 8018736 <_reclaim_reent+0x72>
 8018730:	4620      	mov	r0, r4
 8018732:	f000 f8d1 	bl	80188d8 <_free_r>
 8018736:	6a23      	ldr	r3, [r4, #32]
 8018738:	b1b3      	cbz	r3, 8018768 <_reclaim_reent+0xa4>
 801873a:	4620      	mov	r0, r4
 801873c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018740:	4718      	bx	r3
 8018742:	5949      	ldr	r1, [r1, r5]
 8018744:	b941      	cbnz	r1, 8018758 <_reclaim_reent+0x94>
 8018746:	3504      	adds	r5, #4
 8018748:	69e3      	ldr	r3, [r4, #28]
 801874a:	2d80      	cmp	r5, #128	; 0x80
 801874c:	68d9      	ldr	r1, [r3, #12]
 801874e:	d1f8      	bne.n	8018742 <_reclaim_reent+0x7e>
 8018750:	4620      	mov	r0, r4
 8018752:	f000 f8c1 	bl	80188d8 <_free_r>
 8018756:	e7c0      	b.n	80186da <_reclaim_reent+0x16>
 8018758:	680e      	ldr	r6, [r1, #0]
 801875a:	4620      	mov	r0, r4
 801875c:	f000 f8bc 	bl	80188d8 <_free_r>
 8018760:	4631      	mov	r1, r6
 8018762:	e7ef      	b.n	8018744 <_reclaim_reent+0x80>
 8018764:	2500      	movs	r5, #0
 8018766:	e7ef      	b.n	8018748 <_reclaim_reent+0x84>
 8018768:	bd70      	pop	{r4, r5, r6, pc}
 801876a:	bf00      	nop
 801876c:	200000cc 	.word	0x200000cc

08018770 <_lseek_r>:
 8018770:	b538      	push	{r3, r4, r5, lr}
 8018772:	4d07      	ldr	r5, [pc, #28]	; (8018790 <_lseek_r+0x20>)
 8018774:	4604      	mov	r4, r0
 8018776:	4608      	mov	r0, r1
 8018778:	4611      	mov	r1, r2
 801877a:	2200      	movs	r2, #0
 801877c:	602a      	str	r2, [r5, #0]
 801877e:	461a      	mov	r2, r3
 8018780:	f7ea fc2d 	bl	8002fde <_lseek>
 8018784:	1c43      	adds	r3, r0, #1
 8018786:	d102      	bne.n	801878e <_lseek_r+0x1e>
 8018788:	682b      	ldr	r3, [r5, #0]
 801878a:	b103      	cbz	r3, 801878e <_lseek_r+0x1e>
 801878c:	6023      	str	r3, [r4, #0]
 801878e:	bd38      	pop	{r3, r4, r5, pc}
 8018790:	20009e7c 	.word	0x20009e7c

08018794 <_read_r>:
 8018794:	b538      	push	{r3, r4, r5, lr}
 8018796:	4d07      	ldr	r5, [pc, #28]	; (80187b4 <_read_r+0x20>)
 8018798:	4604      	mov	r4, r0
 801879a:	4608      	mov	r0, r1
 801879c:	4611      	mov	r1, r2
 801879e:	2200      	movs	r2, #0
 80187a0:	602a      	str	r2, [r5, #0]
 80187a2:	461a      	mov	r2, r3
 80187a4:	f7ea fc2c 	bl	8003000 <_read>
 80187a8:	1c43      	adds	r3, r0, #1
 80187aa:	d102      	bne.n	80187b2 <_read_r+0x1e>
 80187ac:	682b      	ldr	r3, [r5, #0]
 80187ae:	b103      	cbz	r3, 80187b2 <_read_r+0x1e>
 80187b0:	6023      	str	r3, [r4, #0]
 80187b2:	bd38      	pop	{r3, r4, r5, pc}
 80187b4:	20009e7c 	.word	0x20009e7c

080187b8 <_sbrk_r>:
 80187b8:	b538      	push	{r3, r4, r5, lr}
 80187ba:	4d06      	ldr	r5, [pc, #24]	; (80187d4 <_sbrk_r+0x1c>)
 80187bc:	2300      	movs	r3, #0
 80187be:	4604      	mov	r4, r0
 80187c0:	4608      	mov	r0, r1
 80187c2:	602b      	str	r3, [r5, #0]
 80187c4:	f7eb f8b6 	bl	8003934 <_sbrk>
 80187c8:	1c43      	adds	r3, r0, #1
 80187ca:	d102      	bne.n	80187d2 <_sbrk_r+0x1a>
 80187cc:	682b      	ldr	r3, [r5, #0]
 80187ce:	b103      	cbz	r3, 80187d2 <_sbrk_r+0x1a>
 80187d0:	6023      	str	r3, [r4, #0]
 80187d2:	bd38      	pop	{r3, r4, r5, pc}
 80187d4:	20009e7c 	.word	0x20009e7c

080187d8 <_write_r>:
 80187d8:	b538      	push	{r3, r4, r5, lr}
 80187da:	4d07      	ldr	r5, [pc, #28]	; (80187f8 <_write_r+0x20>)
 80187dc:	4604      	mov	r4, r0
 80187de:	4608      	mov	r0, r1
 80187e0:	4611      	mov	r1, r2
 80187e2:	2200      	movs	r2, #0
 80187e4:	602a      	str	r2, [r5, #0]
 80187e6:	461a      	mov	r2, r3
 80187e8:	f7ea fbb6 	bl	8002f58 <_write>
 80187ec:	1c43      	adds	r3, r0, #1
 80187ee:	d102      	bne.n	80187f6 <_write_r+0x1e>
 80187f0:	682b      	ldr	r3, [r5, #0]
 80187f2:	b103      	cbz	r3, 80187f6 <_write_r+0x1e>
 80187f4:	6023      	str	r3, [r4, #0]
 80187f6:	bd38      	pop	{r3, r4, r5, pc}
 80187f8:	20009e7c 	.word	0x20009e7c

080187fc <__errno>:
 80187fc:	4b01      	ldr	r3, [pc, #4]	; (8018804 <__errno+0x8>)
 80187fe:	6818      	ldr	r0, [r3, #0]
 8018800:	4770      	bx	lr
 8018802:	bf00      	nop
 8018804:	200000cc 	.word	0x200000cc

08018808 <__libc_init_array>:
 8018808:	b570      	push	{r4, r5, r6, lr}
 801880a:	4d0d      	ldr	r5, [pc, #52]	; (8018840 <__libc_init_array+0x38>)
 801880c:	4c0d      	ldr	r4, [pc, #52]	; (8018844 <__libc_init_array+0x3c>)
 801880e:	1b64      	subs	r4, r4, r5
 8018810:	10a4      	asrs	r4, r4, #2
 8018812:	2600      	movs	r6, #0
 8018814:	42a6      	cmp	r6, r4
 8018816:	d109      	bne.n	801882c <__libc_init_array+0x24>
 8018818:	4d0b      	ldr	r5, [pc, #44]	; (8018848 <__libc_init_array+0x40>)
 801881a:	4c0c      	ldr	r4, [pc, #48]	; (801884c <__libc_init_array+0x44>)
 801881c:	f000 fe6e 	bl	80194fc <_init>
 8018820:	1b64      	subs	r4, r4, r5
 8018822:	10a4      	asrs	r4, r4, #2
 8018824:	2600      	movs	r6, #0
 8018826:	42a6      	cmp	r6, r4
 8018828:	d105      	bne.n	8018836 <__libc_init_array+0x2e>
 801882a:	bd70      	pop	{r4, r5, r6, pc}
 801882c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018830:	4798      	blx	r3
 8018832:	3601      	adds	r6, #1
 8018834:	e7ee      	b.n	8018814 <__libc_init_array+0xc>
 8018836:	f855 3b04 	ldr.w	r3, [r5], #4
 801883a:	4798      	blx	r3
 801883c:	3601      	adds	r6, #1
 801883e:	e7f2      	b.n	8018826 <__libc_init_array+0x1e>
 8018840:	0801a408 	.word	0x0801a408
 8018844:	0801a408 	.word	0x0801a408
 8018848:	0801a408 	.word	0x0801a408
 801884c:	0801a40c 	.word	0x0801a40c

08018850 <__retarget_lock_init_recursive>:
 8018850:	4770      	bx	lr

08018852 <__retarget_lock_acquire_recursive>:
 8018852:	4770      	bx	lr

08018854 <__retarget_lock_release_recursive>:
 8018854:	4770      	bx	lr

08018856 <strcpy>:
 8018856:	4603      	mov	r3, r0
 8018858:	f811 2b01 	ldrb.w	r2, [r1], #1
 801885c:	f803 2b01 	strb.w	r2, [r3], #1
 8018860:	2a00      	cmp	r2, #0
 8018862:	d1f9      	bne.n	8018858 <strcpy+0x2>
 8018864:	4770      	bx	lr

08018866 <memcpy>:
 8018866:	440a      	add	r2, r1
 8018868:	4291      	cmp	r1, r2
 801886a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801886e:	d100      	bne.n	8018872 <memcpy+0xc>
 8018870:	4770      	bx	lr
 8018872:	b510      	push	{r4, lr}
 8018874:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018878:	f803 4f01 	strb.w	r4, [r3, #1]!
 801887c:	4291      	cmp	r1, r2
 801887e:	d1f9      	bne.n	8018874 <memcpy+0xe>
 8018880:	bd10      	pop	{r4, pc}
	...

08018884 <__assert_func>:
 8018884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018886:	4614      	mov	r4, r2
 8018888:	461a      	mov	r2, r3
 801888a:	4b09      	ldr	r3, [pc, #36]	; (80188b0 <__assert_func+0x2c>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	4605      	mov	r5, r0
 8018890:	68d8      	ldr	r0, [r3, #12]
 8018892:	b14c      	cbz	r4, 80188a8 <__assert_func+0x24>
 8018894:	4b07      	ldr	r3, [pc, #28]	; (80188b4 <__assert_func+0x30>)
 8018896:	9100      	str	r1, [sp, #0]
 8018898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801889c:	4906      	ldr	r1, [pc, #24]	; (80188b8 <__assert_func+0x34>)
 801889e:	462b      	mov	r3, r5
 80188a0:	f000 fd48 	bl	8019334 <fiprintf>
 80188a4:	f000 fddc 	bl	8019460 <abort>
 80188a8:	4b04      	ldr	r3, [pc, #16]	; (80188bc <__assert_func+0x38>)
 80188aa:	461c      	mov	r4, r3
 80188ac:	e7f3      	b.n	8018896 <__assert_func+0x12>
 80188ae:	bf00      	nop
 80188b0:	200000cc 	.word	0x200000cc
 80188b4:	0801a390 	.word	0x0801a390
 80188b8:	0801a39d 	.word	0x0801a39d
 80188bc:	0801a3cb 	.word	0x0801a3cb

080188c0 <__env_lock>:
 80188c0:	4801      	ldr	r0, [pc, #4]	; (80188c8 <__env_lock+0x8>)
 80188c2:	f7ff bfc6 	b.w	8018852 <__retarget_lock_acquire_recursive>
 80188c6:	bf00      	nop
 80188c8:	20009e80 	.word	0x20009e80

080188cc <__env_unlock>:
 80188cc:	4801      	ldr	r0, [pc, #4]	; (80188d4 <__env_unlock+0x8>)
 80188ce:	f7ff bfc1 	b.w	8018854 <__retarget_lock_release_recursive>
 80188d2:	bf00      	nop
 80188d4:	20009e80 	.word	0x20009e80

080188d8 <_free_r>:
 80188d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188da:	2900      	cmp	r1, #0
 80188dc:	d044      	beq.n	8018968 <_free_r+0x90>
 80188de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188e2:	9001      	str	r0, [sp, #4]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	f1a1 0404 	sub.w	r4, r1, #4
 80188ea:	bfb8      	it	lt
 80188ec:	18e4      	addlt	r4, r4, r3
 80188ee:	f7ff fa8d 	bl	8017e0c <__malloc_lock>
 80188f2:	4a1e      	ldr	r2, [pc, #120]	; (801896c <_free_r+0x94>)
 80188f4:	9801      	ldr	r0, [sp, #4]
 80188f6:	6813      	ldr	r3, [r2, #0]
 80188f8:	b933      	cbnz	r3, 8018908 <_free_r+0x30>
 80188fa:	6063      	str	r3, [r4, #4]
 80188fc:	6014      	str	r4, [r2, #0]
 80188fe:	b003      	add	sp, #12
 8018900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018904:	f7ff ba88 	b.w	8017e18 <__malloc_unlock>
 8018908:	42a3      	cmp	r3, r4
 801890a:	d908      	bls.n	801891e <_free_r+0x46>
 801890c:	6825      	ldr	r5, [r4, #0]
 801890e:	1961      	adds	r1, r4, r5
 8018910:	428b      	cmp	r3, r1
 8018912:	bf01      	itttt	eq
 8018914:	6819      	ldreq	r1, [r3, #0]
 8018916:	685b      	ldreq	r3, [r3, #4]
 8018918:	1949      	addeq	r1, r1, r5
 801891a:	6021      	streq	r1, [r4, #0]
 801891c:	e7ed      	b.n	80188fa <_free_r+0x22>
 801891e:	461a      	mov	r2, r3
 8018920:	685b      	ldr	r3, [r3, #4]
 8018922:	b10b      	cbz	r3, 8018928 <_free_r+0x50>
 8018924:	42a3      	cmp	r3, r4
 8018926:	d9fa      	bls.n	801891e <_free_r+0x46>
 8018928:	6811      	ldr	r1, [r2, #0]
 801892a:	1855      	adds	r5, r2, r1
 801892c:	42a5      	cmp	r5, r4
 801892e:	d10b      	bne.n	8018948 <_free_r+0x70>
 8018930:	6824      	ldr	r4, [r4, #0]
 8018932:	4421      	add	r1, r4
 8018934:	1854      	adds	r4, r2, r1
 8018936:	42a3      	cmp	r3, r4
 8018938:	6011      	str	r1, [r2, #0]
 801893a:	d1e0      	bne.n	80188fe <_free_r+0x26>
 801893c:	681c      	ldr	r4, [r3, #0]
 801893e:	685b      	ldr	r3, [r3, #4]
 8018940:	6053      	str	r3, [r2, #4]
 8018942:	440c      	add	r4, r1
 8018944:	6014      	str	r4, [r2, #0]
 8018946:	e7da      	b.n	80188fe <_free_r+0x26>
 8018948:	d902      	bls.n	8018950 <_free_r+0x78>
 801894a:	230c      	movs	r3, #12
 801894c:	6003      	str	r3, [r0, #0]
 801894e:	e7d6      	b.n	80188fe <_free_r+0x26>
 8018950:	6825      	ldr	r5, [r4, #0]
 8018952:	1961      	adds	r1, r4, r5
 8018954:	428b      	cmp	r3, r1
 8018956:	bf04      	itt	eq
 8018958:	6819      	ldreq	r1, [r3, #0]
 801895a:	685b      	ldreq	r3, [r3, #4]
 801895c:	6063      	str	r3, [r4, #4]
 801895e:	bf04      	itt	eq
 8018960:	1949      	addeq	r1, r1, r5
 8018962:	6021      	streq	r1, [r4, #0]
 8018964:	6054      	str	r4, [r2, #4]
 8018966:	e7ca      	b.n	80188fe <_free_r+0x26>
 8018968:	b003      	add	sp, #12
 801896a:	bd30      	pop	{r4, r5, pc}
 801896c:	20009d38 	.word	0x20009d38

08018970 <_malloc_usable_size_r>:
 8018970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018974:	1f18      	subs	r0, r3, #4
 8018976:	2b00      	cmp	r3, #0
 8018978:	bfbc      	itt	lt
 801897a:	580b      	ldrlt	r3, [r1, r0]
 801897c:	18c0      	addlt	r0, r0, r3
 801897e:	4770      	bx	lr

08018980 <__ssputs_r>:
 8018980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018984:	688e      	ldr	r6, [r1, #8]
 8018986:	461f      	mov	r7, r3
 8018988:	42be      	cmp	r6, r7
 801898a:	680b      	ldr	r3, [r1, #0]
 801898c:	4682      	mov	sl, r0
 801898e:	460c      	mov	r4, r1
 8018990:	4690      	mov	r8, r2
 8018992:	d82c      	bhi.n	80189ee <__ssputs_r+0x6e>
 8018994:	898a      	ldrh	r2, [r1, #12]
 8018996:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801899a:	d026      	beq.n	80189ea <__ssputs_r+0x6a>
 801899c:	6965      	ldr	r5, [r4, #20]
 801899e:	6909      	ldr	r1, [r1, #16]
 80189a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80189a4:	eba3 0901 	sub.w	r9, r3, r1
 80189a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80189ac:	1c7b      	adds	r3, r7, #1
 80189ae:	444b      	add	r3, r9
 80189b0:	106d      	asrs	r5, r5, #1
 80189b2:	429d      	cmp	r5, r3
 80189b4:	bf38      	it	cc
 80189b6:	461d      	movcc	r5, r3
 80189b8:	0553      	lsls	r3, r2, #21
 80189ba:	d527      	bpl.n	8018a0c <__ssputs_r+0x8c>
 80189bc:	4629      	mov	r1, r5
 80189be:	f7ff f9a5 	bl	8017d0c <_malloc_r>
 80189c2:	4606      	mov	r6, r0
 80189c4:	b360      	cbz	r0, 8018a20 <__ssputs_r+0xa0>
 80189c6:	6921      	ldr	r1, [r4, #16]
 80189c8:	464a      	mov	r2, r9
 80189ca:	f7ff ff4c 	bl	8018866 <memcpy>
 80189ce:	89a3      	ldrh	r3, [r4, #12]
 80189d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80189d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80189d8:	81a3      	strh	r3, [r4, #12]
 80189da:	6126      	str	r6, [r4, #16]
 80189dc:	6165      	str	r5, [r4, #20]
 80189de:	444e      	add	r6, r9
 80189e0:	eba5 0509 	sub.w	r5, r5, r9
 80189e4:	6026      	str	r6, [r4, #0]
 80189e6:	60a5      	str	r5, [r4, #8]
 80189e8:	463e      	mov	r6, r7
 80189ea:	42be      	cmp	r6, r7
 80189ec:	d900      	bls.n	80189f0 <__ssputs_r+0x70>
 80189ee:	463e      	mov	r6, r7
 80189f0:	6820      	ldr	r0, [r4, #0]
 80189f2:	4632      	mov	r2, r6
 80189f4:	4641      	mov	r1, r8
 80189f6:	f7ff fdfd 	bl	80185f4 <memmove>
 80189fa:	68a3      	ldr	r3, [r4, #8]
 80189fc:	1b9b      	subs	r3, r3, r6
 80189fe:	60a3      	str	r3, [r4, #8]
 8018a00:	6823      	ldr	r3, [r4, #0]
 8018a02:	4433      	add	r3, r6
 8018a04:	6023      	str	r3, [r4, #0]
 8018a06:	2000      	movs	r0, #0
 8018a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a0c:	462a      	mov	r2, r5
 8018a0e:	f7ff fa7d 	bl	8017f0c <_realloc_r>
 8018a12:	4606      	mov	r6, r0
 8018a14:	2800      	cmp	r0, #0
 8018a16:	d1e0      	bne.n	80189da <__ssputs_r+0x5a>
 8018a18:	6921      	ldr	r1, [r4, #16]
 8018a1a:	4650      	mov	r0, sl
 8018a1c:	f7ff ff5c 	bl	80188d8 <_free_r>
 8018a20:	230c      	movs	r3, #12
 8018a22:	f8ca 3000 	str.w	r3, [sl]
 8018a26:	89a3      	ldrh	r3, [r4, #12]
 8018a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a2c:	81a3      	strh	r3, [r4, #12]
 8018a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a32:	e7e9      	b.n	8018a08 <__ssputs_r+0x88>

08018a34 <_svfiprintf_r>:
 8018a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a38:	4698      	mov	r8, r3
 8018a3a:	898b      	ldrh	r3, [r1, #12]
 8018a3c:	061b      	lsls	r3, r3, #24
 8018a3e:	b09d      	sub	sp, #116	; 0x74
 8018a40:	4607      	mov	r7, r0
 8018a42:	460d      	mov	r5, r1
 8018a44:	4614      	mov	r4, r2
 8018a46:	d50e      	bpl.n	8018a66 <_svfiprintf_r+0x32>
 8018a48:	690b      	ldr	r3, [r1, #16]
 8018a4a:	b963      	cbnz	r3, 8018a66 <_svfiprintf_r+0x32>
 8018a4c:	2140      	movs	r1, #64	; 0x40
 8018a4e:	f7ff f95d 	bl	8017d0c <_malloc_r>
 8018a52:	6028      	str	r0, [r5, #0]
 8018a54:	6128      	str	r0, [r5, #16]
 8018a56:	b920      	cbnz	r0, 8018a62 <_svfiprintf_r+0x2e>
 8018a58:	230c      	movs	r3, #12
 8018a5a:	603b      	str	r3, [r7, #0]
 8018a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a60:	e0d0      	b.n	8018c04 <_svfiprintf_r+0x1d0>
 8018a62:	2340      	movs	r3, #64	; 0x40
 8018a64:	616b      	str	r3, [r5, #20]
 8018a66:	2300      	movs	r3, #0
 8018a68:	9309      	str	r3, [sp, #36]	; 0x24
 8018a6a:	2320      	movs	r3, #32
 8018a6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018a70:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a74:	2330      	movs	r3, #48	; 0x30
 8018a76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018c1c <_svfiprintf_r+0x1e8>
 8018a7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018a7e:	f04f 0901 	mov.w	r9, #1
 8018a82:	4623      	mov	r3, r4
 8018a84:	469a      	mov	sl, r3
 8018a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a8a:	b10a      	cbz	r2, 8018a90 <_svfiprintf_r+0x5c>
 8018a8c:	2a25      	cmp	r2, #37	; 0x25
 8018a8e:	d1f9      	bne.n	8018a84 <_svfiprintf_r+0x50>
 8018a90:	ebba 0b04 	subs.w	fp, sl, r4
 8018a94:	d00b      	beq.n	8018aae <_svfiprintf_r+0x7a>
 8018a96:	465b      	mov	r3, fp
 8018a98:	4622      	mov	r2, r4
 8018a9a:	4629      	mov	r1, r5
 8018a9c:	4638      	mov	r0, r7
 8018a9e:	f7ff ff6f 	bl	8018980 <__ssputs_r>
 8018aa2:	3001      	adds	r0, #1
 8018aa4:	f000 80a9 	beq.w	8018bfa <_svfiprintf_r+0x1c6>
 8018aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018aaa:	445a      	add	r2, fp
 8018aac:	9209      	str	r2, [sp, #36]	; 0x24
 8018aae:	f89a 3000 	ldrb.w	r3, [sl]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	f000 80a1 	beq.w	8018bfa <_svfiprintf_r+0x1c6>
 8018ab8:	2300      	movs	r3, #0
 8018aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018abe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018ac2:	f10a 0a01 	add.w	sl, sl, #1
 8018ac6:	9304      	str	r3, [sp, #16]
 8018ac8:	9307      	str	r3, [sp, #28]
 8018aca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018ace:	931a      	str	r3, [sp, #104]	; 0x68
 8018ad0:	4654      	mov	r4, sl
 8018ad2:	2205      	movs	r2, #5
 8018ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ad8:	4850      	ldr	r0, [pc, #320]	; (8018c1c <_svfiprintf_r+0x1e8>)
 8018ada:	f7e7 fb99 	bl	8000210 <memchr>
 8018ade:	9a04      	ldr	r2, [sp, #16]
 8018ae0:	b9d8      	cbnz	r0, 8018b1a <_svfiprintf_r+0xe6>
 8018ae2:	06d0      	lsls	r0, r2, #27
 8018ae4:	bf44      	itt	mi
 8018ae6:	2320      	movmi	r3, #32
 8018ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018aec:	0711      	lsls	r1, r2, #28
 8018aee:	bf44      	itt	mi
 8018af0:	232b      	movmi	r3, #43	; 0x2b
 8018af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018af6:	f89a 3000 	ldrb.w	r3, [sl]
 8018afa:	2b2a      	cmp	r3, #42	; 0x2a
 8018afc:	d015      	beq.n	8018b2a <_svfiprintf_r+0xf6>
 8018afe:	9a07      	ldr	r2, [sp, #28]
 8018b00:	4654      	mov	r4, sl
 8018b02:	2000      	movs	r0, #0
 8018b04:	f04f 0c0a 	mov.w	ip, #10
 8018b08:	4621      	mov	r1, r4
 8018b0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b0e:	3b30      	subs	r3, #48	; 0x30
 8018b10:	2b09      	cmp	r3, #9
 8018b12:	d94d      	bls.n	8018bb0 <_svfiprintf_r+0x17c>
 8018b14:	b1b0      	cbz	r0, 8018b44 <_svfiprintf_r+0x110>
 8018b16:	9207      	str	r2, [sp, #28]
 8018b18:	e014      	b.n	8018b44 <_svfiprintf_r+0x110>
 8018b1a:	eba0 0308 	sub.w	r3, r0, r8
 8018b1e:	fa09 f303 	lsl.w	r3, r9, r3
 8018b22:	4313      	orrs	r3, r2
 8018b24:	9304      	str	r3, [sp, #16]
 8018b26:	46a2      	mov	sl, r4
 8018b28:	e7d2      	b.n	8018ad0 <_svfiprintf_r+0x9c>
 8018b2a:	9b03      	ldr	r3, [sp, #12]
 8018b2c:	1d19      	adds	r1, r3, #4
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	9103      	str	r1, [sp, #12]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	bfbb      	ittet	lt
 8018b36:	425b      	neglt	r3, r3
 8018b38:	f042 0202 	orrlt.w	r2, r2, #2
 8018b3c:	9307      	strge	r3, [sp, #28]
 8018b3e:	9307      	strlt	r3, [sp, #28]
 8018b40:	bfb8      	it	lt
 8018b42:	9204      	strlt	r2, [sp, #16]
 8018b44:	7823      	ldrb	r3, [r4, #0]
 8018b46:	2b2e      	cmp	r3, #46	; 0x2e
 8018b48:	d10c      	bne.n	8018b64 <_svfiprintf_r+0x130>
 8018b4a:	7863      	ldrb	r3, [r4, #1]
 8018b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8018b4e:	d134      	bne.n	8018bba <_svfiprintf_r+0x186>
 8018b50:	9b03      	ldr	r3, [sp, #12]
 8018b52:	1d1a      	adds	r2, r3, #4
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	9203      	str	r2, [sp, #12]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	bfb8      	it	lt
 8018b5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018b60:	3402      	adds	r4, #2
 8018b62:	9305      	str	r3, [sp, #20]
 8018b64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018c2c <_svfiprintf_r+0x1f8>
 8018b68:	7821      	ldrb	r1, [r4, #0]
 8018b6a:	2203      	movs	r2, #3
 8018b6c:	4650      	mov	r0, sl
 8018b6e:	f7e7 fb4f 	bl	8000210 <memchr>
 8018b72:	b138      	cbz	r0, 8018b84 <_svfiprintf_r+0x150>
 8018b74:	9b04      	ldr	r3, [sp, #16]
 8018b76:	eba0 000a 	sub.w	r0, r0, sl
 8018b7a:	2240      	movs	r2, #64	; 0x40
 8018b7c:	4082      	lsls	r2, r0
 8018b7e:	4313      	orrs	r3, r2
 8018b80:	3401      	adds	r4, #1
 8018b82:	9304      	str	r3, [sp, #16]
 8018b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b88:	4825      	ldr	r0, [pc, #148]	; (8018c20 <_svfiprintf_r+0x1ec>)
 8018b8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018b8e:	2206      	movs	r2, #6
 8018b90:	f7e7 fb3e 	bl	8000210 <memchr>
 8018b94:	2800      	cmp	r0, #0
 8018b96:	d038      	beq.n	8018c0a <_svfiprintf_r+0x1d6>
 8018b98:	4b22      	ldr	r3, [pc, #136]	; (8018c24 <_svfiprintf_r+0x1f0>)
 8018b9a:	bb1b      	cbnz	r3, 8018be4 <_svfiprintf_r+0x1b0>
 8018b9c:	9b03      	ldr	r3, [sp, #12]
 8018b9e:	3307      	adds	r3, #7
 8018ba0:	f023 0307 	bic.w	r3, r3, #7
 8018ba4:	3308      	adds	r3, #8
 8018ba6:	9303      	str	r3, [sp, #12]
 8018ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018baa:	4433      	add	r3, r6
 8018bac:	9309      	str	r3, [sp, #36]	; 0x24
 8018bae:	e768      	b.n	8018a82 <_svfiprintf_r+0x4e>
 8018bb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8018bb4:	460c      	mov	r4, r1
 8018bb6:	2001      	movs	r0, #1
 8018bb8:	e7a6      	b.n	8018b08 <_svfiprintf_r+0xd4>
 8018bba:	2300      	movs	r3, #0
 8018bbc:	3401      	adds	r4, #1
 8018bbe:	9305      	str	r3, [sp, #20]
 8018bc0:	4619      	mov	r1, r3
 8018bc2:	f04f 0c0a 	mov.w	ip, #10
 8018bc6:	4620      	mov	r0, r4
 8018bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018bcc:	3a30      	subs	r2, #48	; 0x30
 8018bce:	2a09      	cmp	r2, #9
 8018bd0:	d903      	bls.n	8018bda <_svfiprintf_r+0x1a6>
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d0c6      	beq.n	8018b64 <_svfiprintf_r+0x130>
 8018bd6:	9105      	str	r1, [sp, #20]
 8018bd8:	e7c4      	b.n	8018b64 <_svfiprintf_r+0x130>
 8018bda:	fb0c 2101 	mla	r1, ip, r1, r2
 8018bde:	4604      	mov	r4, r0
 8018be0:	2301      	movs	r3, #1
 8018be2:	e7f0      	b.n	8018bc6 <_svfiprintf_r+0x192>
 8018be4:	ab03      	add	r3, sp, #12
 8018be6:	9300      	str	r3, [sp, #0]
 8018be8:	462a      	mov	r2, r5
 8018bea:	4b0f      	ldr	r3, [pc, #60]	; (8018c28 <_svfiprintf_r+0x1f4>)
 8018bec:	a904      	add	r1, sp, #16
 8018bee:	4638      	mov	r0, r7
 8018bf0:	f3af 8000 	nop.w
 8018bf4:	1c42      	adds	r2, r0, #1
 8018bf6:	4606      	mov	r6, r0
 8018bf8:	d1d6      	bne.n	8018ba8 <_svfiprintf_r+0x174>
 8018bfa:	89ab      	ldrh	r3, [r5, #12]
 8018bfc:	065b      	lsls	r3, r3, #25
 8018bfe:	f53f af2d 	bmi.w	8018a5c <_svfiprintf_r+0x28>
 8018c02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c04:	b01d      	add	sp, #116	; 0x74
 8018c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c0a:	ab03      	add	r3, sp, #12
 8018c0c:	9300      	str	r3, [sp, #0]
 8018c0e:	462a      	mov	r2, r5
 8018c10:	4b05      	ldr	r3, [pc, #20]	; (8018c28 <_svfiprintf_r+0x1f4>)
 8018c12:	a904      	add	r1, sp, #16
 8018c14:	4638      	mov	r0, r7
 8018c16:	f000 f9bd 	bl	8018f94 <_printf_i>
 8018c1a:	e7eb      	b.n	8018bf4 <_svfiprintf_r+0x1c0>
 8018c1c:	0801a3cc 	.word	0x0801a3cc
 8018c20:	0801a3d6 	.word	0x0801a3d6
 8018c24:	00000000 	.word	0x00000000
 8018c28:	08018981 	.word	0x08018981
 8018c2c:	0801a3d2 	.word	0x0801a3d2

08018c30 <__sfputc_r>:
 8018c30:	6893      	ldr	r3, [r2, #8]
 8018c32:	3b01      	subs	r3, #1
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	b410      	push	{r4}
 8018c38:	6093      	str	r3, [r2, #8]
 8018c3a:	da08      	bge.n	8018c4e <__sfputc_r+0x1e>
 8018c3c:	6994      	ldr	r4, [r2, #24]
 8018c3e:	42a3      	cmp	r3, r4
 8018c40:	db01      	blt.n	8018c46 <__sfputc_r+0x16>
 8018c42:	290a      	cmp	r1, #10
 8018c44:	d103      	bne.n	8018c4e <__sfputc_r+0x1e>
 8018c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c4a:	f7ff bc3d 	b.w	80184c8 <__swbuf_r>
 8018c4e:	6813      	ldr	r3, [r2, #0]
 8018c50:	1c58      	adds	r0, r3, #1
 8018c52:	6010      	str	r0, [r2, #0]
 8018c54:	7019      	strb	r1, [r3, #0]
 8018c56:	4608      	mov	r0, r1
 8018c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c5c:	4770      	bx	lr

08018c5e <__sfputs_r>:
 8018c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c60:	4606      	mov	r6, r0
 8018c62:	460f      	mov	r7, r1
 8018c64:	4614      	mov	r4, r2
 8018c66:	18d5      	adds	r5, r2, r3
 8018c68:	42ac      	cmp	r4, r5
 8018c6a:	d101      	bne.n	8018c70 <__sfputs_r+0x12>
 8018c6c:	2000      	movs	r0, #0
 8018c6e:	e007      	b.n	8018c80 <__sfputs_r+0x22>
 8018c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c74:	463a      	mov	r2, r7
 8018c76:	4630      	mov	r0, r6
 8018c78:	f7ff ffda 	bl	8018c30 <__sfputc_r>
 8018c7c:	1c43      	adds	r3, r0, #1
 8018c7e:	d1f3      	bne.n	8018c68 <__sfputs_r+0xa>
 8018c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018c84 <_vfiprintf_r>:
 8018c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c88:	460d      	mov	r5, r1
 8018c8a:	b09d      	sub	sp, #116	; 0x74
 8018c8c:	4614      	mov	r4, r2
 8018c8e:	4698      	mov	r8, r3
 8018c90:	4606      	mov	r6, r0
 8018c92:	b118      	cbz	r0, 8018c9c <_vfiprintf_r+0x18>
 8018c94:	6a03      	ldr	r3, [r0, #32]
 8018c96:	b90b      	cbnz	r3, 8018c9c <_vfiprintf_r+0x18>
 8018c98:	f7ff fa70 	bl	801817c <__sinit>
 8018c9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c9e:	07d9      	lsls	r1, r3, #31
 8018ca0:	d405      	bmi.n	8018cae <_vfiprintf_r+0x2a>
 8018ca2:	89ab      	ldrh	r3, [r5, #12]
 8018ca4:	059a      	lsls	r2, r3, #22
 8018ca6:	d402      	bmi.n	8018cae <_vfiprintf_r+0x2a>
 8018ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018caa:	f7ff fdd2 	bl	8018852 <__retarget_lock_acquire_recursive>
 8018cae:	89ab      	ldrh	r3, [r5, #12]
 8018cb0:	071b      	lsls	r3, r3, #28
 8018cb2:	d501      	bpl.n	8018cb8 <_vfiprintf_r+0x34>
 8018cb4:	692b      	ldr	r3, [r5, #16]
 8018cb6:	b99b      	cbnz	r3, 8018ce0 <_vfiprintf_r+0x5c>
 8018cb8:	4629      	mov	r1, r5
 8018cba:	4630      	mov	r0, r6
 8018cbc:	f7ff fc42 	bl	8018544 <__swsetup_r>
 8018cc0:	b170      	cbz	r0, 8018ce0 <_vfiprintf_r+0x5c>
 8018cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018cc4:	07dc      	lsls	r4, r3, #31
 8018cc6:	d504      	bpl.n	8018cd2 <_vfiprintf_r+0x4e>
 8018cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ccc:	b01d      	add	sp, #116	; 0x74
 8018cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cd2:	89ab      	ldrh	r3, [r5, #12]
 8018cd4:	0598      	lsls	r0, r3, #22
 8018cd6:	d4f7      	bmi.n	8018cc8 <_vfiprintf_r+0x44>
 8018cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018cda:	f7ff fdbb 	bl	8018854 <__retarget_lock_release_recursive>
 8018cde:	e7f3      	b.n	8018cc8 <_vfiprintf_r+0x44>
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8018ce4:	2320      	movs	r3, #32
 8018ce6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8018cee:	2330      	movs	r3, #48	; 0x30
 8018cf0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018ea4 <_vfiprintf_r+0x220>
 8018cf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018cf8:	f04f 0901 	mov.w	r9, #1
 8018cfc:	4623      	mov	r3, r4
 8018cfe:	469a      	mov	sl, r3
 8018d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d04:	b10a      	cbz	r2, 8018d0a <_vfiprintf_r+0x86>
 8018d06:	2a25      	cmp	r2, #37	; 0x25
 8018d08:	d1f9      	bne.n	8018cfe <_vfiprintf_r+0x7a>
 8018d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8018d0e:	d00b      	beq.n	8018d28 <_vfiprintf_r+0xa4>
 8018d10:	465b      	mov	r3, fp
 8018d12:	4622      	mov	r2, r4
 8018d14:	4629      	mov	r1, r5
 8018d16:	4630      	mov	r0, r6
 8018d18:	f7ff ffa1 	bl	8018c5e <__sfputs_r>
 8018d1c:	3001      	adds	r0, #1
 8018d1e:	f000 80a9 	beq.w	8018e74 <_vfiprintf_r+0x1f0>
 8018d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d24:	445a      	add	r2, fp
 8018d26:	9209      	str	r2, [sp, #36]	; 0x24
 8018d28:	f89a 3000 	ldrb.w	r3, [sl]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	f000 80a1 	beq.w	8018e74 <_vfiprintf_r+0x1f0>
 8018d32:	2300      	movs	r3, #0
 8018d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d3c:	f10a 0a01 	add.w	sl, sl, #1
 8018d40:	9304      	str	r3, [sp, #16]
 8018d42:	9307      	str	r3, [sp, #28]
 8018d44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018d48:	931a      	str	r3, [sp, #104]	; 0x68
 8018d4a:	4654      	mov	r4, sl
 8018d4c:	2205      	movs	r2, #5
 8018d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d52:	4854      	ldr	r0, [pc, #336]	; (8018ea4 <_vfiprintf_r+0x220>)
 8018d54:	f7e7 fa5c 	bl	8000210 <memchr>
 8018d58:	9a04      	ldr	r2, [sp, #16]
 8018d5a:	b9d8      	cbnz	r0, 8018d94 <_vfiprintf_r+0x110>
 8018d5c:	06d1      	lsls	r1, r2, #27
 8018d5e:	bf44      	itt	mi
 8018d60:	2320      	movmi	r3, #32
 8018d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d66:	0713      	lsls	r3, r2, #28
 8018d68:	bf44      	itt	mi
 8018d6a:	232b      	movmi	r3, #43	; 0x2b
 8018d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d70:	f89a 3000 	ldrb.w	r3, [sl]
 8018d74:	2b2a      	cmp	r3, #42	; 0x2a
 8018d76:	d015      	beq.n	8018da4 <_vfiprintf_r+0x120>
 8018d78:	9a07      	ldr	r2, [sp, #28]
 8018d7a:	4654      	mov	r4, sl
 8018d7c:	2000      	movs	r0, #0
 8018d7e:	f04f 0c0a 	mov.w	ip, #10
 8018d82:	4621      	mov	r1, r4
 8018d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d88:	3b30      	subs	r3, #48	; 0x30
 8018d8a:	2b09      	cmp	r3, #9
 8018d8c:	d94d      	bls.n	8018e2a <_vfiprintf_r+0x1a6>
 8018d8e:	b1b0      	cbz	r0, 8018dbe <_vfiprintf_r+0x13a>
 8018d90:	9207      	str	r2, [sp, #28]
 8018d92:	e014      	b.n	8018dbe <_vfiprintf_r+0x13a>
 8018d94:	eba0 0308 	sub.w	r3, r0, r8
 8018d98:	fa09 f303 	lsl.w	r3, r9, r3
 8018d9c:	4313      	orrs	r3, r2
 8018d9e:	9304      	str	r3, [sp, #16]
 8018da0:	46a2      	mov	sl, r4
 8018da2:	e7d2      	b.n	8018d4a <_vfiprintf_r+0xc6>
 8018da4:	9b03      	ldr	r3, [sp, #12]
 8018da6:	1d19      	adds	r1, r3, #4
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	9103      	str	r1, [sp, #12]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	bfbb      	ittet	lt
 8018db0:	425b      	neglt	r3, r3
 8018db2:	f042 0202 	orrlt.w	r2, r2, #2
 8018db6:	9307      	strge	r3, [sp, #28]
 8018db8:	9307      	strlt	r3, [sp, #28]
 8018dba:	bfb8      	it	lt
 8018dbc:	9204      	strlt	r2, [sp, #16]
 8018dbe:	7823      	ldrb	r3, [r4, #0]
 8018dc0:	2b2e      	cmp	r3, #46	; 0x2e
 8018dc2:	d10c      	bne.n	8018dde <_vfiprintf_r+0x15a>
 8018dc4:	7863      	ldrb	r3, [r4, #1]
 8018dc6:	2b2a      	cmp	r3, #42	; 0x2a
 8018dc8:	d134      	bne.n	8018e34 <_vfiprintf_r+0x1b0>
 8018dca:	9b03      	ldr	r3, [sp, #12]
 8018dcc:	1d1a      	adds	r2, r3, #4
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	9203      	str	r2, [sp, #12]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	bfb8      	it	lt
 8018dd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018dda:	3402      	adds	r4, #2
 8018ddc:	9305      	str	r3, [sp, #20]
 8018dde:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018eb4 <_vfiprintf_r+0x230>
 8018de2:	7821      	ldrb	r1, [r4, #0]
 8018de4:	2203      	movs	r2, #3
 8018de6:	4650      	mov	r0, sl
 8018de8:	f7e7 fa12 	bl	8000210 <memchr>
 8018dec:	b138      	cbz	r0, 8018dfe <_vfiprintf_r+0x17a>
 8018dee:	9b04      	ldr	r3, [sp, #16]
 8018df0:	eba0 000a 	sub.w	r0, r0, sl
 8018df4:	2240      	movs	r2, #64	; 0x40
 8018df6:	4082      	lsls	r2, r0
 8018df8:	4313      	orrs	r3, r2
 8018dfa:	3401      	adds	r4, #1
 8018dfc:	9304      	str	r3, [sp, #16]
 8018dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e02:	4829      	ldr	r0, [pc, #164]	; (8018ea8 <_vfiprintf_r+0x224>)
 8018e04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018e08:	2206      	movs	r2, #6
 8018e0a:	f7e7 fa01 	bl	8000210 <memchr>
 8018e0e:	2800      	cmp	r0, #0
 8018e10:	d03f      	beq.n	8018e92 <_vfiprintf_r+0x20e>
 8018e12:	4b26      	ldr	r3, [pc, #152]	; (8018eac <_vfiprintf_r+0x228>)
 8018e14:	bb1b      	cbnz	r3, 8018e5e <_vfiprintf_r+0x1da>
 8018e16:	9b03      	ldr	r3, [sp, #12]
 8018e18:	3307      	adds	r3, #7
 8018e1a:	f023 0307 	bic.w	r3, r3, #7
 8018e1e:	3308      	adds	r3, #8
 8018e20:	9303      	str	r3, [sp, #12]
 8018e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e24:	443b      	add	r3, r7
 8018e26:	9309      	str	r3, [sp, #36]	; 0x24
 8018e28:	e768      	b.n	8018cfc <_vfiprintf_r+0x78>
 8018e2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e2e:	460c      	mov	r4, r1
 8018e30:	2001      	movs	r0, #1
 8018e32:	e7a6      	b.n	8018d82 <_vfiprintf_r+0xfe>
 8018e34:	2300      	movs	r3, #0
 8018e36:	3401      	adds	r4, #1
 8018e38:	9305      	str	r3, [sp, #20]
 8018e3a:	4619      	mov	r1, r3
 8018e3c:	f04f 0c0a 	mov.w	ip, #10
 8018e40:	4620      	mov	r0, r4
 8018e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e46:	3a30      	subs	r2, #48	; 0x30
 8018e48:	2a09      	cmp	r2, #9
 8018e4a:	d903      	bls.n	8018e54 <_vfiprintf_r+0x1d0>
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d0c6      	beq.n	8018dde <_vfiprintf_r+0x15a>
 8018e50:	9105      	str	r1, [sp, #20]
 8018e52:	e7c4      	b.n	8018dde <_vfiprintf_r+0x15a>
 8018e54:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e58:	4604      	mov	r4, r0
 8018e5a:	2301      	movs	r3, #1
 8018e5c:	e7f0      	b.n	8018e40 <_vfiprintf_r+0x1bc>
 8018e5e:	ab03      	add	r3, sp, #12
 8018e60:	9300      	str	r3, [sp, #0]
 8018e62:	462a      	mov	r2, r5
 8018e64:	4b12      	ldr	r3, [pc, #72]	; (8018eb0 <_vfiprintf_r+0x22c>)
 8018e66:	a904      	add	r1, sp, #16
 8018e68:	4630      	mov	r0, r6
 8018e6a:	f3af 8000 	nop.w
 8018e6e:	4607      	mov	r7, r0
 8018e70:	1c78      	adds	r0, r7, #1
 8018e72:	d1d6      	bne.n	8018e22 <_vfiprintf_r+0x19e>
 8018e74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e76:	07d9      	lsls	r1, r3, #31
 8018e78:	d405      	bmi.n	8018e86 <_vfiprintf_r+0x202>
 8018e7a:	89ab      	ldrh	r3, [r5, #12]
 8018e7c:	059a      	lsls	r2, r3, #22
 8018e7e:	d402      	bmi.n	8018e86 <_vfiprintf_r+0x202>
 8018e80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e82:	f7ff fce7 	bl	8018854 <__retarget_lock_release_recursive>
 8018e86:	89ab      	ldrh	r3, [r5, #12]
 8018e88:	065b      	lsls	r3, r3, #25
 8018e8a:	f53f af1d 	bmi.w	8018cc8 <_vfiprintf_r+0x44>
 8018e8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e90:	e71c      	b.n	8018ccc <_vfiprintf_r+0x48>
 8018e92:	ab03      	add	r3, sp, #12
 8018e94:	9300      	str	r3, [sp, #0]
 8018e96:	462a      	mov	r2, r5
 8018e98:	4b05      	ldr	r3, [pc, #20]	; (8018eb0 <_vfiprintf_r+0x22c>)
 8018e9a:	a904      	add	r1, sp, #16
 8018e9c:	4630      	mov	r0, r6
 8018e9e:	f000 f879 	bl	8018f94 <_printf_i>
 8018ea2:	e7e4      	b.n	8018e6e <_vfiprintf_r+0x1ea>
 8018ea4:	0801a3cc 	.word	0x0801a3cc
 8018ea8:	0801a3d6 	.word	0x0801a3d6
 8018eac:	00000000 	.word	0x00000000
 8018eb0:	08018c5f 	.word	0x08018c5f
 8018eb4:	0801a3d2 	.word	0x0801a3d2

08018eb8 <_printf_common>:
 8018eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ebc:	4616      	mov	r6, r2
 8018ebe:	4699      	mov	r9, r3
 8018ec0:	688a      	ldr	r2, [r1, #8]
 8018ec2:	690b      	ldr	r3, [r1, #16]
 8018ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018ec8:	4293      	cmp	r3, r2
 8018eca:	bfb8      	it	lt
 8018ecc:	4613      	movlt	r3, r2
 8018ece:	6033      	str	r3, [r6, #0]
 8018ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018ed4:	4607      	mov	r7, r0
 8018ed6:	460c      	mov	r4, r1
 8018ed8:	b10a      	cbz	r2, 8018ede <_printf_common+0x26>
 8018eda:	3301      	adds	r3, #1
 8018edc:	6033      	str	r3, [r6, #0]
 8018ede:	6823      	ldr	r3, [r4, #0]
 8018ee0:	0699      	lsls	r1, r3, #26
 8018ee2:	bf42      	ittt	mi
 8018ee4:	6833      	ldrmi	r3, [r6, #0]
 8018ee6:	3302      	addmi	r3, #2
 8018ee8:	6033      	strmi	r3, [r6, #0]
 8018eea:	6825      	ldr	r5, [r4, #0]
 8018eec:	f015 0506 	ands.w	r5, r5, #6
 8018ef0:	d106      	bne.n	8018f00 <_printf_common+0x48>
 8018ef2:	f104 0a19 	add.w	sl, r4, #25
 8018ef6:	68e3      	ldr	r3, [r4, #12]
 8018ef8:	6832      	ldr	r2, [r6, #0]
 8018efa:	1a9b      	subs	r3, r3, r2
 8018efc:	42ab      	cmp	r3, r5
 8018efe:	dc26      	bgt.n	8018f4e <_printf_common+0x96>
 8018f00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018f04:	1e13      	subs	r3, r2, #0
 8018f06:	6822      	ldr	r2, [r4, #0]
 8018f08:	bf18      	it	ne
 8018f0a:	2301      	movne	r3, #1
 8018f0c:	0692      	lsls	r2, r2, #26
 8018f0e:	d42b      	bmi.n	8018f68 <_printf_common+0xb0>
 8018f10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018f14:	4649      	mov	r1, r9
 8018f16:	4638      	mov	r0, r7
 8018f18:	47c0      	blx	r8
 8018f1a:	3001      	adds	r0, #1
 8018f1c:	d01e      	beq.n	8018f5c <_printf_common+0xa4>
 8018f1e:	6823      	ldr	r3, [r4, #0]
 8018f20:	6922      	ldr	r2, [r4, #16]
 8018f22:	f003 0306 	and.w	r3, r3, #6
 8018f26:	2b04      	cmp	r3, #4
 8018f28:	bf02      	ittt	eq
 8018f2a:	68e5      	ldreq	r5, [r4, #12]
 8018f2c:	6833      	ldreq	r3, [r6, #0]
 8018f2e:	1aed      	subeq	r5, r5, r3
 8018f30:	68a3      	ldr	r3, [r4, #8]
 8018f32:	bf0c      	ite	eq
 8018f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018f38:	2500      	movne	r5, #0
 8018f3a:	4293      	cmp	r3, r2
 8018f3c:	bfc4      	itt	gt
 8018f3e:	1a9b      	subgt	r3, r3, r2
 8018f40:	18ed      	addgt	r5, r5, r3
 8018f42:	2600      	movs	r6, #0
 8018f44:	341a      	adds	r4, #26
 8018f46:	42b5      	cmp	r5, r6
 8018f48:	d11a      	bne.n	8018f80 <_printf_common+0xc8>
 8018f4a:	2000      	movs	r0, #0
 8018f4c:	e008      	b.n	8018f60 <_printf_common+0xa8>
 8018f4e:	2301      	movs	r3, #1
 8018f50:	4652      	mov	r2, sl
 8018f52:	4649      	mov	r1, r9
 8018f54:	4638      	mov	r0, r7
 8018f56:	47c0      	blx	r8
 8018f58:	3001      	adds	r0, #1
 8018f5a:	d103      	bne.n	8018f64 <_printf_common+0xac>
 8018f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f64:	3501      	adds	r5, #1
 8018f66:	e7c6      	b.n	8018ef6 <_printf_common+0x3e>
 8018f68:	18e1      	adds	r1, r4, r3
 8018f6a:	1c5a      	adds	r2, r3, #1
 8018f6c:	2030      	movs	r0, #48	; 0x30
 8018f6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018f72:	4422      	add	r2, r4
 8018f74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018f78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018f7c:	3302      	adds	r3, #2
 8018f7e:	e7c7      	b.n	8018f10 <_printf_common+0x58>
 8018f80:	2301      	movs	r3, #1
 8018f82:	4622      	mov	r2, r4
 8018f84:	4649      	mov	r1, r9
 8018f86:	4638      	mov	r0, r7
 8018f88:	47c0      	blx	r8
 8018f8a:	3001      	adds	r0, #1
 8018f8c:	d0e6      	beq.n	8018f5c <_printf_common+0xa4>
 8018f8e:	3601      	adds	r6, #1
 8018f90:	e7d9      	b.n	8018f46 <_printf_common+0x8e>
	...

08018f94 <_printf_i>:
 8018f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018f98:	7e0f      	ldrb	r7, [r1, #24]
 8018f9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018f9c:	2f78      	cmp	r7, #120	; 0x78
 8018f9e:	4691      	mov	r9, r2
 8018fa0:	4680      	mov	r8, r0
 8018fa2:	460c      	mov	r4, r1
 8018fa4:	469a      	mov	sl, r3
 8018fa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018faa:	d807      	bhi.n	8018fbc <_printf_i+0x28>
 8018fac:	2f62      	cmp	r7, #98	; 0x62
 8018fae:	d80a      	bhi.n	8018fc6 <_printf_i+0x32>
 8018fb0:	2f00      	cmp	r7, #0
 8018fb2:	f000 80d4 	beq.w	801915e <_printf_i+0x1ca>
 8018fb6:	2f58      	cmp	r7, #88	; 0x58
 8018fb8:	f000 80c0 	beq.w	801913c <_printf_i+0x1a8>
 8018fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018fc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018fc4:	e03a      	b.n	801903c <_printf_i+0xa8>
 8018fc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018fca:	2b15      	cmp	r3, #21
 8018fcc:	d8f6      	bhi.n	8018fbc <_printf_i+0x28>
 8018fce:	a101      	add	r1, pc, #4	; (adr r1, 8018fd4 <_printf_i+0x40>)
 8018fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018fd4:	0801902d 	.word	0x0801902d
 8018fd8:	08019041 	.word	0x08019041
 8018fdc:	08018fbd 	.word	0x08018fbd
 8018fe0:	08018fbd 	.word	0x08018fbd
 8018fe4:	08018fbd 	.word	0x08018fbd
 8018fe8:	08018fbd 	.word	0x08018fbd
 8018fec:	08019041 	.word	0x08019041
 8018ff0:	08018fbd 	.word	0x08018fbd
 8018ff4:	08018fbd 	.word	0x08018fbd
 8018ff8:	08018fbd 	.word	0x08018fbd
 8018ffc:	08018fbd 	.word	0x08018fbd
 8019000:	08019145 	.word	0x08019145
 8019004:	0801906d 	.word	0x0801906d
 8019008:	080190ff 	.word	0x080190ff
 801900c:	08018fbd 	.word	0x08018fbd
 8019010:	08018fbd 	.word	0x08018fbd
 8019014:	08019167 	.word	0x08019167
 8019018:	08018fbd 	.word	0x08018fbd
 801901c:	0801906d 	.word	0x0801906d
 8019020:	08018fbd 	.word	0x08018fbd
 8019024:	08018fbd 	.word	0x08018fbd
 8019028:	08019107 	.word	0x08019107
 801902c:	682b      	ldr	r3, [r5, #0]
 801902e:	1d1a      	adds	r2, r3, #4
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	602a      	str	r2, [r5, #0]
 8019034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801903c:	2301      	movs	r3, #1
 801903e:	e09f      	b.n	8019180 <_printf_i+0x1ec>
 8019040:	6820      	ldr	r0, [r4, #0]
 8019042:	682b      	ldr	r3, [r5, #0]
 8019044:	0607      	lsls	r7, r0, #24
 8019046:	f103 0104 	add.w	r1, r3, #4
 801904a:	6029      	str	r1, [r5, #0]
 801904c:	d501      	bpl.n	8019052 <_printf_i+0xbe>
 801904e:	681e      	ldr	r6, [r3, #0]
 8019050:	e003      	b.n	801905a <_printf_i+0xc6>
 8019052:	0646      	lsls	r6, r0, #25
 8019054:	d5fb      	bpl.n	801904e <_printf_i+0xba>
 8019056:	f9b3 6000 	ldrsh.w	r6, [r3]
 801905a:	2e00      	cmp	r6, #0
 801905c:	da03      	bge.n	8019066 <_printf_i+0xd2>
 801905e:	232d      	movs	r3, #45	; 0x2d
 8019060:	4276      	negs	r6, r6
 8019062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019066:	485a      	ldr	r0, [pc, #360]	; (80191d0 <_printf_i+0x23c>)
 8019068:	230a      	movs	r3, #10
 801906a:	e012      	b.n	8019092 <_printf_i+0xfe>
 801906c:	682b      	ldr	r3, [r5, #0]
 801906e:	6820      	ldr	r0, [r4, #0]
 8019070:	1d19      	adds	r1, r3, #4
 8019072:	6029      	str	r1, [r5, #0]
 8019074:	0605      	lsls	r5, r0, #24
 8019076:	d501      	bpl.n	801907c <_printf_i+0xe8>
 8019078:	681e      	ldr	r6, [r3, #0]
 801907a:	e002      	b.n	8019082 <_printf_i+0xee>
 801907c:	0641      	lsls	r1, r0, #25
 801907e:	d5fb      	bpl.n	8019078 <_printf_i+0xe4>
 8019080:	881e      	ldrh	r6, [r3, #0]
 8019082:	4853      	ldr	r0, [pc, #332]	; (80191d0 <_printf_i+0x23c>)
 8019084:	2f6f      	cmp	r7, #111	; 0x6f
 8019086:	bf0c      	ite	eq
 8019088:	2308      	moveq	r3, #8
 801908a:	230a      	movne	r3, #10
 801908c:	2100      	movs	r1, #0
 801908e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019092:	6865      	ldr	r5, [r4, #4]
 8019094:	60a5      	str	r5, [r4, #8]
 8019096:	2d00      	cmp	r5, #0
 8019098:	bfa2      	ittt	ge
 801909a:	6821      	ldrge	r1, [r4, #0]
 801909c:	f021 0104 	bicge.w	r1, r1, #4
 80190a0:	6021      	strge	r1, [r4, #0]
 80190a2:	b90e      	cbnz	r6, 80190a8 <_printf_i+0x114>
 80190a4:	2d00      	cmp	r5, #0
 80190a6:	d04b      	beq.n	8019140 <_printf_i+0x1ac>
 80190a8:	4615      	mov	r5, r2
 80190aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80190ae:	fb03 6711 	mls	r7, r3, r1, r6
 80190b2:	5dc7      	ldrb	r7, [r0, r7]
 80190b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80190b8:	4637      	mov	r7, r6
 80190ba:	42bb      	cmp	r3, r7
 80190bc:	460e      	mov	r6, r1
 80190be:	d9f4      	bls.n	80190aa <_printf_i+0x116>
 80190c0:	2b08      	cmp	r3, #8
 80190c2:	d10b      	bne.n	80190dc <_printf_i+0x148>
 80190c4:	6823      	ldr	r3, [r4, #0]
 80190c6:	07de      	lsls	r6, r3, #31
 80190c8:	d508      	bpl.n	80190dc <_printf_i+0x148>
 80190ca:	6923      	ldr	r3, [r4, #16]
 80190cc:	6861      	ldr	r1, [r4, #4]
 80190ce:	4299      	cmp	r1, r3
 80190d0:	bfde      	ittt	le
 80190d2:	2330      	movle	r3, #48	; 0x30
 80190d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80190d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80190dc:	1b52      	subs	r2, r2, r5
 80190de:	6122      	str	r2, [r4, #16]
 80190e0:	f8cd a000 	str.w	sl, [sp]
 80190e4:	464b      	mov	r3, r9
 80190e6:	aa03      	add	r2, sp, #12
 80190e8:	4621      	mov	r1, r4
 80190ea:	4640      	mov	r0, r8
 80190ec:	f7ff fee4 	bl	8018eb8 <_printf_common>
 80190f0:	3001      	adds	r0, #1
 80190f2:	d14a      	bne.n	801918a <_printf_i+0x1f6>
 80190f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190f8:	b004      	add	sp, #16
 80190fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190fe:	6823      	ldr	r3, [r4, #0]
 8019100:	f043 0320 	orr.w	r3, r3, #32
 8019104:	6023      	str	r3, [r4, #0]
 8019106:	4833      	ldr	r0, [pc, #204]	; (80191d4 <_printf_i+0x240>)
 8019108:	2778      	movs	r7, #120	; 0x78
 801910a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801910e:	6823      	ldr	r3, [r4, #0]
 8019110:	6829      	ldr	r1, [r5, #0]
 8019112:	061f      	lsls	r7, r3, #24
 8019114:	f851 6b04 	ldr.w	r6, [r1], #4
 8019118:	d402      	bmi.n	8019120 <_printf_i+0x18c>
 801911a:	065f      	lsls	r7, r3, #25
 801911c:	bf48      	it	mi
 801911e:	b2b6      	uxthmi	r6, r6
 8019120:	07df      	lsls	r7, r3, #31
 8019122:	bf48      	it	mi
 8019124:	f043 0320 	orrmi.w	r3, r3, #32
 8019128:	6029      	str	r1, [r5, #0]
 801912a:	bf48      	it	mi
 801912c:	6023      	strmi	r3, [r4, #0]
 801912e:	b91e      	cbnz	r6, 8019138 <_printf_i+0x1a4>
 8019130:	6823      	ldr	r3, [r4, #0]
 8019132:	f023 0320 	bic.w	r3, r3, #32
 8019136:	6023      	str	r3, [r4, #0]
 8019138:	2310      	movs	r3, #16
 801913a:	e7a7      	b.n	801908c <_printf_i+0xf8>
 801913c:	4824      	ldr	r0, [pc, #144]	; (80191d0 <_printf_i+0x23c>)
 801913e:	e7e4      	b.n	801910a <_printf_i+0x176>
 8019140:	4615      	mov	r5, r2
 8019142:	e7bd      	b.n	80190c0 <_printf_i+0x12c>
 8019144:	682b      	ldr	r3, [r5, #0]
 8019146:	6826      	ldr	r6, [r4, #0]
 8019148:	6961      	ldr	r1, [r4, #20]
 801914a:	1d18      	adds	r0, r3, #4
 801914c:	6028      	str	r0, [r5, #0]
 801914e:	0635      	lsls	r5, r6, #24
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	d501      	bpl.n	8019158 <_printf_i+0x1c4>
 8019154:	6019      	str	r1, [r3, #0]
 8019156:	e002      	b.n	801915e <_printf_i+0x1ca>
 8019158:	0670      	lsls	r0, r6, #25
 801915a:	d5fb      	bpl.n	8019154 <_printf_i+0x1c0>
 801915c:	8019      	strh	r1, [r3, #0]
 801915e:	2300      	movs	r3, #0
 8019160:	6123      	str	r3, [r4, #16]
 8019162:	4615      	mov	r5, r2
 8019164:	e7bc      	b.n	80190e0 <_printf_i+0x14c>
 8019166:	682b      	ldr	r3, [r5, #0]
 8019168:	1d1a      	adds	r2, r3, #4
 801916a:	602a      	str	r2, [r5, #0]
 801916c:	681d      	ldr	r5, [r3, #0]
 801916e:	6862      	ldr	r2, [r4, #4]
 8019170:	2100      	movs	r1, #0
 8019172:	4628      	mov	r0, r5
 8019174:	f7e7 f84c 	bl	8000210 <memchr>
 8019178:	b108      	cbz	r0, 801917e <_printf_i+0x1ea>
 801917a:	1b40      	subs	r0, r0, r5
 801917c:	6060      	str	r0, [r4, #4]
 801917e:	6863      	ldr	r3, [r4, #4]
 8019180:	6123      	str	r3, [r4, #16]
 8019182:	2300      	movs	r3, #0
 8019184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019188:	e7aa      	b.n	80190e0 <_printf_i+0x14c>
 801918a:	6923      	ldr	r3, [r4, #16]
 801918c:	462a      	mov	r2, r5
 801918e:	4649      	mov	r1, r9
 8019190:	4640      	mov	r0, r8
 8019192:	47d0      	blx	sl
 8019194:	3001      	adds	r0, #1
 8019196:	d0ad      	beq.n	80190f4 <_printf_i+0x160>
 8019198:	6823      	ldr	r3, [r4, #0]
 801919a:	079b      	lsls	r3, r3, #30
 801919c:	d413      	bmi.n	80191c6 <_printf_i+0x232>
 801919e:	68e0      	ldr	r0, [r4, #12]
 80191a0:	9b03      	ldr	r3, [sp, #12]
 80191a2:	4298      	cmp	r0, r3
 80191a4:	bfb8      	it	lt
 80191a6:	4618      	movlt	r0, r3
 80191a8:	e7a6      	b.n	80190f8 <_printf_i+0x164>
 80191aa:	2301      	movs	r3, #1
 80191ac:	4632      	mov	r2, r6
 80191ae:	4649      	mov	r1, r9
 80191b0:	4640      	mov	r0, r8
 80191b2:	47d0      	blx	sl
 80191b4:	3001      	adds	r0, #1
 80191b6:	d09d      	beq.n	80190f4 <_printf_i+0x160>
 80191b8:	3501      	adds	r5, #1
 80191ba:	68e3      	ldr	r3, [r4, #12]
 80191bc:	9903      	ldr	r1, [sp, #12]
 80191be:	1a5b      	subs	r3, r3, r1
 80191c0:	42ab      	cmp	r3, r5
 80191c2:	dcf2      	bgt.n	80191aa <_printf_i+0x216>
 80191c4:	e7eb      	b.n	801919e <_printf_i+0x20a>
 80191c6:	2500      	movs	r5, #0
 80191c8:	f104 0619 	add.w	r6, r4, #25
 80191cc:	e7f5      	b.n	80191ba <_printf_i+0x226>
 80191ce:	bf00      	nop
 80191d0:	0801a3dd 	.word	0x0801a3dd
 80191d4:	0801a3ee 	.word	0x0801a3ee

080191d8 <__sflush_r>:
 80191d8:	898a      	ldrh	r2, [r1, #12]
 80191da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191de:	4605      	mov	r5, r0
 80191e0:	0710      	lsls	r0, r2, #28
 80191e2:	460c      	mov	r4, r1
 80191e4:	d458      	bmi.n	8019298 <__sflush_r+0xc0>
 80191e6:	684b      	ldr	r3, [r1, #4]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	dc05      	bgt.n	80191f8 <__sflush_r+0x20>
 80191ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	dc02      	bgt.n	80191f8 <__sflush_r+0x20>
 80191f2:	2000      	movs	r0, #0
 80191f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80191fa:	2e00      	cmp	r6, #0
 80191fc:	d0f9      	beq.n	80191f2 <__sflush_r+0x1a>
 80191fe:	2300      	movs	r3, #0
 8019200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019204:	682f      	ldr	r7, [r5, #0]
 8019206:	6a21      	ldr	r1, [r4, #32]
 8019208:	602b      	str	r3, [r5, #0]
 801920a:	d032      	beq.n	8019272 <__sflush_r+0x9a>
 801920c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801920e:	89a3      	ldrh	r3, [r4, #12]
 8019210:	075a      	lsls	r2, r3, #29
 8019212:	d505      	bpl.n	8019220 <__sflush_r+0x48>
 8019214:	6863      	ldr	r3, [r4, #4]
 8019216:	1ac0      	subs	r0, r0, r3
 8019218:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801921a:	b10b      	cbz	r3, 8019220 <__sflush_r+0x48>
 801921c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801921e:	1ac0      	subs	r0, r0, r3
 8019220:	2300      	movs	r3, #0
 8019222:	4602      	mov	r2, r0
 8019224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019226:	6a21      	ldr	r1, [r4, #32]
 8019228:	4628      	mov	r0, r5
 801922a:	47b0      	blx	r6
 801922c:	1c43      	adds	r3, r0, #1
 801922e:	89a3      	ldrh	r3, [r4, #12]
 8019230:	d106      	bne.n	8019240 <__sflush_r+0x68>
 8019232:	6829      	ldr	r1, [r5, #0]
 8019234:	291d      	cmp	r1, #29
 8019236:	d82b      	bhi.n	8019290 <__sflush_r+0xb8>
 8019238:	4a29      	ldr	r2, [pc, #164]	; (80192e0 <__sflush_r+0x108>)
 801923a:	410a      	asrs	r2, r1
 801923c:	07d6      	lsls	r6, r2, #31
 801923e:	d427      	bmi.n	8019290 <__sflush_r+0xb8>
 8019240:	2200      	movs	r2, #0
 8019242:	6062      	str	r2, [r4, #4]
 8019244:	04d9      	lsls	r1, r3, #19
 8019246:	6922      	ldr	r2, [r4, #16]
 8019248:	6022      	str	r2, [r4, #0]
 801924a:	d504      	bpl.n	8019256 <__sflush_r+0x7e>
 801924c:	1c42      	adds	r2, r0, #1
 801924e:	d101      	bne.n	8019254 <__sflush_r+0x7c>
 8019250:	682b      	ldr	r3, [r5, #0]
 8019252:	b903      	cbnz	r3, 8019256 <__sflush_r+0x7e>
 8019254:	6560      	str	r0, [r4, #84]	; 0x54
 8019256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019258:	602f      	str	r7, [r5, #0]
 801925a:	2900      	cmp	r1, #0
 801925c:	d0c9      	beq.n	80191f2 <__sflush_r+0x1a>
 801925e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019262:	4299      	cmp	r1, r3
 8019264:	d002      	beq.n	801926c <__sflush_r+0x94>
 8019266:	4628      	mov	r0, r5
 8019268:	f7ff fb36 	bl	80188d8 <_free_r>
 801926c:	2000      	movs	r0, #0
 801926e:	6360      	str	r0, [r4, #52]	; 0x34
 8019270:	e7c0      	b.n	80191f4 <__sflush_r+0x1c>
 8019272:	2301      	movs	r3, #1
 8019274:	4628      	mov	r0, r5
 8019276:	47b0      	blx	r6
 8019278:	1c41      	adds	r1, r0, #1
 801927a:	d1c8      	bne.n	801920e <__sflush_r+0x36>
 801927c:	682b      	ldr	r3, [r5, #0]
 801927e:	2b00      	cmp	r3, #0
 8019280:	d0c5      	beq.n	801920e <__sflush_r+0x36>
 8019282:	2b1d      	cmp	r3, #29
 8019284:	d001      	beq.n	801928a <__sflush_r+0xb2>
 8019286:	2b16      	cmp	r3, #22
 8019288:	d101      	bne.n	801928e <__sflush_r+0xb6>
 801928a:	602f      	str	r7, [r5, #0]
 801928c:	e7b1      	b.n	80191f2 <__sflush_r+0x1a>
 801928e:	89a3      	ldrh	r3, [r4, #12]
 8019290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019294:	81a3      	strh	r3, [r4, #12]
 8019296:	e7ad      	b.n	80191f4 <__sflush_r+0x1c>
 8019298:	690f      	ldr	r7, [r1, #16]
 801929a:	2f00      	cmp	r7, #0
 801929c:	d0a9      	beq.n	80191f2 <__sflush_r+0x1a>
 801929e:	0793      	lsls	r3, r2, #30
 80192a0:	680e      	ldr	r6, [r1, #0]
 80192a2:	bf08      	it	eq
 80192a4:	694b      	ldreq	r3, [r1, #20]
 80192a6:	600f      	str	r7, [r1, #0]
 80192a8:	bf18      	it	ne
 80192aa:	2300      	movne	r3, #0
 80192ac:	eba6 0807 	sub.w	r8, r6, r7
 80192b0:	608b      	str	r3, [r1, #8]
 80192b2:	f1b8 0f00 	cmp.w	r8, #0
 80192b6:	dd9c      	ble.n	80191f2 <__sflush_r+0x1a>
 80192b8:	6a21      	ldr	r1, [r4, #32]
 80192ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80192bc:	4643      	mov	r3, r8
 80192be:	463a      	mov	r2, r7
 80192c0:	4628      	mov	r0, r5
 80192c2:	47b0      	blx	r6
 80192c4:	2800      	cmp	r0, #0
 80192c6:	dc06      	bgt.n	80192d6 <__sflush_r+0xfe>
 80192c8:	89a3      	ldrh	r3, [r4, #12]
 80192ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192ce:	81a3      	strh	r3, [r4, #12]
 80192d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192d4:	e78e      	b.n	80191f4 <__sflush_r+0x1c>
 80192d6:	4407      	add	r7, r0
 80192d8:	eba8 0800 	sub.w	r8, r8, r0
 80192dc:	e7e9      	b.n	80192b2 <__sflush_r+0xda>
 80192de:	bf00      	nop
 80192e0:	dfbffffe 	.word	0xdfbffffe

080192e4 <_fflush_r>:
 80192e4:	b538      	push	{r3, r4, r5, lr}
 80192e6:	690b      	ldr	r3, [r1, #16]
 80192e8:	4605      	mov	r5, r0
 80192ea:	460c      	mov	r4, r1
 80192ec:	b913      	cbnz	r3, 80192f4 <_fflush_r+0x10>
 80192ee:	2500      	movs	r5, #0
 80192f0:	4628      	mov	r0, r5
 80192f2:	bd38      	pop	{r3, r4, r5, pc}
 80192f4:	b118      	cbz	r0, 80192fe <_fflush_r+0x1a>
 80192f6:	6a03      	ldr	r3, [r0, #32]
 80192f8:	b90b      	cbnz	r3, 80192fe <_fflush_r+0x1a>
 80192fa:	f7fe ff3f 	bl	801817c <__sinit>
 80192fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019302:	2b00      	cmp	r3, #0
 8019304:	d0f3      	beq.n	80192ee <_fflush_r+0xa>
 8019306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019308:	07d0      	lsls	r0, r2, #31
 801930a:	d404      	bmi.n	8019316 <_fflush_r+0x32>
 801930c:	0599      	lsls	r1, r3, #22
 801930e:	d402      	bmi.n	8019316 <_fflush_r+0x32>
 8019310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019312:	f7ff fa9e 	bl	8018852 <__retarget_lock_acquire_recursive>
 8019316:	4628      	mov	r0, r5
 8019318:	4621      	mov	r1, r4
 801931a:	f7ff ff5d 	bl	80191d8 <__sflush_r>
 801931e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019320:	07da      	lsls	r2, r3, #31
 8019322:	4605      	mov	r5, r0
 8019324:	d4e4      	bmi.n	80192f0 <_fflush_r+0xc>
 8019326:	89a3      	ldrh	r3, [r4, #12]
 8019328:	059b      	lsls	r3, r3, #22
 801932a:	d4e1      	bmi.n	80192f0 <_fflush_r+0xc>
 801932c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801932e:	f7ff fa91 	bl	8018854 <__retarget_lock_release_recursive>
 8019332:	e7dd      	b.n	80192f0 <_fflush_r+0xc>

08019334 <fiprintf>:
 8019334:	b40e      	push	{r1, r2, r3}
 8019336:	b503      	push	{r0, r1, lr}
 8019338:	4601      	mov	r1, r0
 801933a:	ab03      	add	r3, sp, #12
 801933c:	4805      	ldr	r0, [pc, #20]	; (8019354 <fiprintf+0x20>)
 801933e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019342:	6800      	ldr	r0, [r0, #0]
 8019344:	9301      	str	r3, [sp, #4]
 8019346:	f7ff fc9d 	bl	8018c84 <_vfiprintf_r>
 801934a:	b002      	add	sp, #8
 801934c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019350:	b003      	add	sp, #12
 8019352:	4770      	bx	lr
 8019354:	200000cc 	.word	0x200000cc

08019358 <__swhatbuf_r>:
 8019358:	b570      	push	{r4, r5, r6, lr}
 801935a:	460c      	mov	r4, r1
 801935c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019360:	2900      	cmp	r1, #0
 8019362:	b096      	sub	sp, #88	; 0x58
 8019364:	4615      	mov	r5, r2
 8019366:	461e      	mov	r6, r3
 8019368:	da0d      	bge.n	8019386 <__swhatbuf_r+0x2e>
 801936a:	89a3      	ldrh	r3, [r4, #12]
 801936c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019370:	f04f 0100 	mov.w	r1, #0
 8019374:	bf0c      	ite	eq
 8019376:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801937a:	2340      	movne	r3, #64	; 0x40
 801937c:	2000      	movs	r0, #0
 801937e:	6031      	str	r1, [r6, #0]
 8019380:	602b      	str	r3, [r5, #0]
 8019382:	b016      	add	sp, #88	; 0x58
 8019384:	bd70      	pop	{r4, r5, r6, pc}
 8019386:	466a      	mov	r2, sp
 8019388:	f000 f848 	bl	801941c <_fstat_r>
 801938c:	2800      	cmp	r0, #0
 801938e:	dbec      	blt.n	801936a <__swhatbuf_r+0x12>
 8019390:	9901      	ldr	r1, [sp, #4]
 8019392:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019396:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801939a:	4259      	negs	r1, r3
 801939c:	4159      	adcs	r1, r3
 801939e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80193a2:	e7eb      	b.n	801937c <__swhatbuf_r+0x24>

080193a4 <__smakebuf_r>:
 80193a4:	898b      	ldrh	r3, [r1, #12]
 80193a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80193a8:	079d      	lsls	r5, r3, #30
 80193aa:	4606      	mov	r6, r0
 80193ac:	460c      	mov	r4, r1
 80193ae:	d507      	bpl.n	80193c0 <__smakebuf_r+0x1c>
 80193b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80193b4:	6023      	str	r3, [r4, #0]
 80193b6:	6123      	str	r3, [r4, #16]
 80193b8:	2301      	movs	r3, #1
 80193ba:	6163      	str	r3, [r4, #20]
 80193bc:	b002      	add	sp, #8
 80193be:	bd70      	pop	{r4, r5, r6, pc}
 80193c0:	ab01      	add	r3, sp, #4
 80193c2:	466a      	mov	r2, sp
 80193c4:	f7ff ffc8 	bl	8019358 <__swhatbuf_r>
 80193c8:	9900      	ldr	r1, [sp, #0]
 80193ca:	4605      	mov	r5, r0
 80193cc:	4630      	mov	r0, r6
 80193ce:	f7fe fc9d 	bl	8017d0c <_malloc_r>
 80193d2:	b948      	cbnz	r0, 80193e8 <__smakebuf_r+0x44>
 80193d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80193d8:	059a      	lsls	r2, r3, #22
 80193da:	d4ef      	bmi.n	80193bc <__smakebuf_r+0x18>
 80193dc:	f023 0303 	bic.w	r3, r3, #3
 80193e0:	f043 0302 	orr.w	r3, r3, #2
 80193e4:	81a3      	strh	r3, [r4, #12]
 80193e6:	e7e3      	b.n	80193b0 <__smakebuf_r+0xc>
 80193e8:	89a3      	ldrh	r3, [r4, #12]
 80193ea:	6020      	str	r0, [r4, #0]
 80193ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80193f0:	81a3      	strh	r3, [r4, #12]
 80193f2:	9b00      	ldr	r3, [sp, #0]
 80193f4:	6163      	str	r3, [r4, #20]
 80193f6:	9b01      	ldr	r3, [sp, #4]
 80193f8:	6120      	str	r0, [r4, #16]
 80193fa:	b15b      	cbz	r3, 8019414 <__smakebuf_r+0x70>
 80193fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019400:	4630      	mov	r0, r6
 8019402:	f000 f81d 	bl	8019440 <_isatty_r>
 8019406:	b128      	cbz	r0, 8019414 <__smakebuf_r+0x70>
 8019408:	89a3      	ldrh	r3, [r4, #12]
 801940a:	f023 0303 	bic.w	r3, r3, #3
 801940e:	f043 0301 	orr.w	r3, r3, #1
 8019412:	81a3      	strh	r3, [r4, #12]
 8019414:	89a3      	ldrh	r3, [r4, #12]
 8019416:	431d      	orrs	r5, r3
 8019418:	81a5      	strh	r5, [r4, #12]
 801941a:	e7cf      	b.n	80193bc <__smakebuf_r+0x18>

0801941c <_fstat_r>:
 801941c:	b538      	push	{r3, r4, r5, lr}
 801941e:	4d07      	ldr	r5, [pc, #28]	; (801943c <_fstat_r+0x20>)
 8019420:	2300      	movs	r3, #0
 8019422:	4604      	mov	r4, r0
 8019424:	4608      	mov	r0, r1
 8019426:	4611      	mov	r1, r2
 8019428:	602b      	str	r3, [r5, #0]
 801942a:	f7e9 fe11 	bl	8003050 <_fstat>
 801942e:	1c43      	adds	r3, r0, #1
 8019430:	d102      	bne.n	8019438 <_fstat_r+0x1c>
 8019432:	682b      	ldr	r3, [r5, #0]
 8019434:	b103      	cbz	r3, 8019438 <_fstat_r+0x1c>
 8019436:	6023      	str	r3, [r4, #0]
 8019438:	bd38      	pop	{r3, r4, r5, pc}
 801943a:	bf00      	nop
 801943c:	20009e7c 	.word	0x20009e7c

08019440 <_isatty_r>:
 8019440:	b538      	push	{r3, r4, r5, lr}
 8019442:	4d06      	ldr	r5, [pc, #24]	; (801945c <_isatty_r+0x1c>)
 8019444:	2300      	movs	r3, #0
 8019446:	4604      	mov	r4, r0
 8019448:	4608      	mov	r0, r1
 801944a:	602b      	str	r3, [r5, #0]
 801944c:	f7e9 fd6e 	bl	8002f2c <_isatty>
 8019450:	1c43      	adds	r3, r0, #1
 8019452:	d102      	bne.n	801945a <_isatty_r+0x1a>
 8019454:	682b      	ldr	r3, [r5, #0]
 8019456:	b103      	cbz	r3, 801945a <_isatty_r+0x1a>
 8019458:	6023      	str	r3, [r4, #0]
 801945a:	bd38      	pop	{r3, r4, r5, pc}
 801945c:	20009e7c 	.word	0x20009e7c

08019460 <abort>:
 8019460:	b508      	push	{r3, lr}
 8019462:	2006      	movs	r0, #6
 8019464:	f000 f82c 	bl	80194c0 <raise>
 8019468:	2001      	movs	r0, #1
 801946a:	f000 f845 	bl	80194f8 <_exit>

0801946e <_raise_r>:
 801946e:	291f      	cmp	r1, #31
 8019470:	b538      	push	{r3, r4, r5, lr}
 8019472:	4604      	mov	r4, r0
 8019474:	460d      	mov	r5, r1
 8019476:	d904      	bls.n	8019482 <_raise_r+0x14>
 8019478:	2316      	movs	r3, #22
 801947a:	6003      	str	r3, [r0, #0]
 801947c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019480:	bd38      	pop	{r3, r4, r5, pc}
 8019482:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019484:	b112      	cbz	r2, 801948c <_raise_r+0x1e>
 8019486:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801948a:	b94b      	cbnz	r3, 80194a0 <_raise_r+0x32>
 801948c:	4620      	mov	r0, r4
 801948e:	f000 f831 	bl	80194f4 <_getpid_r>
 8019492:	462a      	mov	r2, r5
 8019494:	4601      	mov	r1, r0
 8019496:	4620      	mov	r0, r4
 8019498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801949c:	f000 b818 	b.w	80194d0 <_kill_r>
 80194a0:	2b01      	cmp	r3, #1
 80194a2:	d00a      	beq.n	80194ba <_raise_r+0x4c>
 80194a4:	1c59      	adds	r1, r3, #1
 80194a6:	d103      	bne.n	80194b0 <_raise_r+0x42>
 80194a8:	2316      	movs	r3, #22
 80194aa:	6003      	str	r3, [r0, #0]
 80194ac:	2001      	movs	r0, #1
 80194ae:	e7e7      	b.n	8019480 <_raise_r+0x12>
 80194b0:	2400      	movs	r4, #0
 80194b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80194b6:	4628      	mov	r0, r5
 80194b8:	4798      	blx	r3
 80194ba:	2000      	movs	r0, #0
 80194bc:	e7e0      	b.n	8019480 <_raise_r+0x12>
	...

080194c0 <raise>:
 80194c0:	4b02      	ldr	r3, [pc, #8]	; (80194cc <raise+0xc>)
 80194c2:	4601      	mov	r1, r0
 80194c4:	6818      	ldr	r0, [r3, #0]
 80194c6:	f7ff bfd2 	b.w	801946e <_raise_r>
 80194ca:	bf00      	nop
 80194cc:	200000cc 	.word	0x200000cc

080194d0 <_kill_r>:
 80194d0:	b538      	push	{r3, r4, r5, lr}
 80194d2:	4d07      	ldr	r5, [pc, #28]	; (80194f0 <_kill_r+0x20>)
 80194d4:	2300      	movs	r3, #0
 80194d6:	4604      	mov	r4, r0
 80194d8:	4608      	mov	r0, r1
 80194da:	4611      	mov	r1, r2
 80194dc:	602b      	str	r3, [r5, #0]
 80194de:	f7e9 fdda 	bl	8003096 <_kill>
 80194e2:	1c43      	adds	r3, r0, #1
 80194e4:	d102      	bne.n	80194ec <_kill_r+0x1c>
 80194e6:	682b      	ldr	r3, [r5, #0]
 80194e8:	b103      	cbz	r3, 80194ec <_kill_r+0x1c>
 80194ea:	6023      	str	r3, [r4, #0]
 80194ec:	bd38      	pop	{r3, r4, r5, pc}
 80194ee:	bf00      	nop
 80194f0:	20009e7c 	.word	0x20009e7c

080194f4 <_getpid_r>:
 80194f4:	f7e9 bdc7 	b.w	8003086 <_getpid>

080194f8 <_exit>:
 80194f8:	e7fe      	b.n	80194f8 <_exit>
	...

080194fc <_init>:
 80194fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194fe:	bf00      	nop
 8019500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019502:	bc08      	pop	{r3}
 8019504:	469e      	mov	lr, r3
 8019506:	4770      	bx	lr

08019508 <_fini>:
 8019508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801950a:	bf00      	nop
 801950c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801950e:	bc08      	pop	{r3}
 8019510:	469e      	mov	lr, r3
 8019512:	4770      	bx	lr
