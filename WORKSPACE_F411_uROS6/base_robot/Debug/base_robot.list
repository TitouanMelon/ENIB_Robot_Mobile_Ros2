
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019364  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee8  08019508  08019508  00029508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a3f0  0801a3f0  000300d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801a3f0  0801a3f0  0002a3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a3f8  0801a3f8  000300d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a3f8  0801a3f8  0002a3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a3fc  0801a3fc  0002a3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0801a400  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e778  200000d8  0801a4d4  000300d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e850  0801a4d4  0003e850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 13 .debug_info   000e45b1  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00017c0a  00000000  00000000  00114751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004160  00000000  00000000  0012c360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000157d  00000000  00000000  001304c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c3a8  00000000  00000000  00131a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006ac58  00000000  00000000  0013dde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8198  00000000  00000000  001a8a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00010318  00000000  00000000  00260bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00270ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00057b45  00000000  00000000  00270f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00009b50  00000000  00000000  002c8a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080194ec 	.word	0x080194ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	080194ec 	.word	0x080194ec

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_ldivmod>:
 8000aec:	b97b      	cbnz	r3, 8000b0e <__aeabi_ldivmod+0x22>
 8000aee:	b972      	cbnz	r2, 8000b0e <__aeabi_ldivmod+0x22>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bfbe      	ittt	lt
 8000af4:	2000      	movlt	r0, #0
 8000af6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000afa:	e006      	blt.n	8000b0a <__aeabi_ldivmod+0x1e>
 8000afc:	bf08      	it	eq
 8000afe:	2800      	cmpeq	r0, #0
 8000b00:	bf1c      	itt	ne
 8000b02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b06:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b0a:	f000 b9bb 	b.w	8000e84 <__aeabi_idiv0>
 8000b0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b16:	2900      	cmp	r1, #0
 8000b18:	db09      	blt.n	8000b2e <__aeabi_ldivmod+0x42>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db1a      	blt.n	8000b54 <__aeabi_ldivmod+0x68>
 8000b1e:	f000 f84d 	bl	8000bbc <__udivmoddi4>
 8000b22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr
 8000b2e:	4240      	negs	r0, r0
 8000b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db1b      	blt.n	8000b70 <__aeabi_ldivmod+0x84>
 8000b38:	f000 f840 	bl	8000bbc <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	4252      	negs	r2, r2
 8000b4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b52:	4770      	bx	lr
 8000b54:	4252      	negs	r2, r2
 8000b56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5a:	f000 f82f 	bl	8000bbc <__udivmoddi4>
 8000b5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b66:	b004      	add	sp, #16
 8000b68:	4240      	negs	r0, r0
 8000b6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f821 	bl	8000bbc <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <captDistIR_Init+0x60>)
 8000e90:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 8000eda:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000edc:	f002 fe68 	bl	8003bb0 <HAL_ADC_Init>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200000f4 	.word	0x200000f4
 8000ee8:	40012000 	.word	0x40012000

08000eec <captDistIR_Get>:
//=================================================================
//			IR GET (POLL METHOD)
//=================================================================

int  captDistIR_Get(int* tab)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	sConfig.Channel      = ADC_CHANNEL_4;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <captDistIR_Get+0x80>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <captDistIR_Get+0x80>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <captDistIR_Get+0x80>)
 8000f02:	2203      	movs	r2, #3
 8000f04:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8000f06:	4919      	ldr	r1, [pc, #100]	; (8000f6c <captDistIR_Get+0x80>)
 8000f08:	4819      	ldr	r0, [pc, #100]	; (8000f70 <captDistIR_Get+0x84>)
 8000f0a:	f002 ff3d 	bl	8003d88 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);					//Start the conversion
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <captDistIR_Get+0x84>)
 8000f10:	f002 fe82 	bl	8003c18 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);	//Processing the conversion
 8000f14:	210a      	movs	r1, #10
 8000f16:	4816      	ldr	r0, [pc, #88]	; (8000f70 <captDistIR_Get+0x84>)
 8000f18:	f002 feea 	bl	8003cf0 <HAL_ADC_PollForConversion>
	tab[0]=HAL_ADC_GetValue(&adcHandle); 		//Return the converted data
 8000f1c:	4814      	ldr	r0, [pc, #80]	; (8000f70 <captDistIR_Get+0x84>)
 8000f1e:	f002 ff26 	bl	8003d6e <HAL_ADC_GetValue>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	601a      	str	r2, [r3, #0]

	sConfig.Channel      = ADC_CHANNEL_8;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <captDistIR_Get+0x80>)
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <captDistIR_Get+0x80>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <captDistIR_Get+0x80>)
 8000f38:	2203      	movs	r2, #3
 8000f3a:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8000f3c:	490b      	ldr	r1, [pc, #44]	; (8000f6c <captDistIR_Get+0x80>)
 8000f3e:	480c      	ldr	r0, [pc, #48]	; (8000f70 <captDistIR_Get+0x84>)
 8000f40:	f002 ff22 	bl	8003d88 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);						//Start the conversion
 8000f44:	480a      	ldr	r0, [pc, #40]	; (8000f70 <captDistIR_Get+0x84>)
 8000f46:	f002 fe67 	bl	8003c18 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);		//Processing the conversion
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <captDistIR_Get+0x84>)
 8000f4e:	f002 fecf 	bl	8003cf0 <HAL_ADC_PollForConversion>
	tab[1]=HAL_ADC_GetValue(&adcHandle); 			//Return the converted data
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <captDistIR_Get+0x84>)
 8000f54:	f002 ff0b 	bl	8003d6e <HAL_ADC_GetValue>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	601a      	str	r2, [r3, #0]

	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000138 	.word	0x20000138
 8000f70:	200000f4 	.word	0x200000f4

08000f74 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f80:	f009 ff98 	bl	800aeb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f84:	4b58      	ldr	r3, [pc, #352]	; (80010e8 <pvPortMallocMicroROS+0x174>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f8c:	f000 f98c 	bl	80012a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f90:	4b56      	ldr	r3, [pc, #344]	; (80010ec <pvPortMallocMicroROS+0x178>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f040 808e 	bne.w	80010ba <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d01d      	beq.n	8000fe0 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d014      	beq.n	8000fe0 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f023 0307 	bic.w	r3, r3, #7
 8000fbc:	3308      	adds	r3, #8
 8000fbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00a      	beq.n	8000fe0 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fce:	f383 8811 	msr	BASEPRI, r3
 8000fd2:	f3bf 8f6f 	isb	sy
 8000fd6:	f3bf 8f4f 	dsb	sy
 8000fda:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fdc:	bf00      	nop
 8000fde:	e7fe      	b.n	8000fde <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d069      	beq.n	80010ba <pvPortMallocMicroROS+0x146>
 8000fe6:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d864      	bhi.n	80010ba <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ff0:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <pvPortMallocMicroROS+0x180>)
 8000ff2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000ff4:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <pvPortMallocMicroROS+0x180>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ffa:	e004      	b.n	8001006 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	d903      	bls.n	8001018 <pvPortMallocMicroROS+0xa4>
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f1      	bne.n	8000ffc <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <pvPortMallocMicroROS+0x174>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101e:	429a      	cmp	r2, r3
 8001020:	d04b      	beq.n	80010ba <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2208      	movs	r2, #8
 8001028:	4413      	add	r3, r2
 800102a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	1ad2      	subs	r2, r2, r3
 800103c:	2308      	movs	r3, #8
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	429a      	cmp	r2, r3
 8001042:	d91f      	bls.n	8001084 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00a      	beq.n	800106c <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8001056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	613b      	str	r3, [r7, #16]
}
 8001068:	bf00      	nop
 800106a:	e7fe      	b.n	800106a <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1ad2      	subs	r2, r2, r3
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800107e:	69b8      	ldr	r0, [r7, #24]
 8001080:	f000 f974 	bl	800136c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8001090:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <pvPortMallocMicroROS+0x184>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d203      	bcs.n	80010a6 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <pvPortMallocMicroROS+0x184>)
 80010a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <pvPortMallocMicroROS+0x178>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010ba:	f009 ff09 	bl	800aed0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00a      	beq.n	80010de <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80010c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010cc:	f383 8811 	msr	BASEPRI, r3
 80010d0:	f3bf 8f6f 	isb	sy
 80010d4:	f3bf 8f4f 	dsb	sy
 80010d8:	60fb      	str	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	e7fe      	b.n	80010dc <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80010de:	69fb      	ldr	r3, [r7, #28]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20004150 	.word	0x20004150
 80010ec:	2000415c 	.word	0x2000415c
 80010f0:	20004154 	.word	0x20004154
 80010f4:	20004148 	.word	0x20004148
 80010f8:	20004158 	.word	0x20004158

080010fc <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d048      	beq.n	80011a0 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800110e:	2308      	movs	r3, #8
 8001110:	425b      	negs	r3, r3
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <vPortFreeMicroROS+0xac>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10a      	bne.n	8001140 <vPortFreeMicroROS+0x44>
	__asm volatile
 800112a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800112e:	f383 8811 	msr	BASEPRI, r3
 8001132:	f3bf 8f6f 	isb	sy
 8001136:	f3bf 8f4f 	dsb	sy
 800113a:	60fb      	str	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	e7fe      	b.n	800113e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00a      	beq.n	800115e <vPortFreeMicroROS+0x62>
	__asm volatile
 8001148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	60bb      	str	r3, [r7, #8]
}
 800115a:	bf00      	nop
 800115c:	e7fe      	b.n	800115c <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <vPortFreeMicroROS+0xac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d019      	beq.n	80011a0 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d115      	bne.n	80011a0 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <vPortFreeMicroROS+0xac>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	43db      	mvns	r3, r3
 800117e:	401a      	ands	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001184:	f009 fe96 	bl	800aeb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <vPortFreeMicroROS+0xb0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4413      	add	r3, r2
 8001192:	4a06      	ldr	r2, [pc, #24]	; (80011ac <vPortFreeMicroROS+0xb0>)
 8001194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001196:	6938      	ldr	r0, [r7, #16]
 8001198:	f000 f8e8 	bl	800136c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800119c:	f009 fe98 	bl	800aed0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000415c 	.word	0x2000415c
 80011ac:	20004154 	.word	0x20004154

080011b0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011bc:	2308      	movs	r3, #8
 80011be:	425b      	negs	r3, r3
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <getBlockSize+0x38>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]

	return count;
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000415c 	.word	0x2000415c

080011ec <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80011f6:	f009 fe5d 	bl	800aeb4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80011fa:	6838      	ldr	r0, [r7, #0]
 80011fc:	f7ff feba 	bl	8000f74 <pvPortMallocMicroROS>
 8001200:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001206:	2308      	movs	r3, #8
 8001208:	425b      	negs	r3, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <pvPortReallocMicroROS+0x70>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	43db      	mvns	r3, r3
 8001226:	4013      	ands	r3, r2
 8001228:	617b      	str	r3, [r7, #20]

  	while(count--)
 800122a:	e007      	b.n	800123c <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	1c53      	adds	r3, r2, #1
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1c59      	adds	r1, r3, #1
 8001236:	61b9      	str	r1, [r7, #24]
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	1e5a      	subs	r2, r3, #1
 8001240:	617a      	str	r2, [r7, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f2      	bne.n	800122c <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff58 	bl	80010fc <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 800124c:	f009 fe40 	bl	800aed0 <xTaskResumeAll>

	return newmem;
 8001250:	693b      	ldr	r3, [r7, #16]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000415c 	.word	0x2000415c

08001260 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800126a:	f009 fe23 	bl	800aeb4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001278:	6978      	ldr	r0, [r7, #20]
 800127a:	f7ff fe7b 	bl	8000f74 <pvPortMallocMicroROS>
 800127e:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001284:	e004      	b.n	8001290 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	613a      	str	r2, [r7, #16]
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	617a      	str	r2, [r7, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f5      	bne.n	8001286 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800129a:	f009 fe19 	bl	800aed0 <xTaskResumeAll>
  	return mem;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <prvHeapInit+0xac>)
 80012b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00c      	beq.n	80012dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3307      	adds	r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f023 0307 	bic.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <prvHeapInit+0xac>)
 80012d8:	4413      	add	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <prvHeapInit+0xb0>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <prvHeapInit+0xb0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	4413      	add	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012f4:	2208      	movs	r2, #8
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f023 0307 	bic.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <prvHeapInit+0xb4>)
 8001308:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <prvHeapInit+0xb4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <prvHeapInit+0xb4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	1ad2      	subs	r2, r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <prvHeapInit+0xb4>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <prvHeapInit+0xb8>)
 8001336:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	4a09      	ldr	r2, [pc, #36]	; (8001364 <prvHeapInit+0xbc>)
 800133e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <prvHeapInit+0xc0>)
 8001342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000148 	.word	0x20000148
 8001358:	20004148 	.word	0x20004148
 800135c:	20004150 	.word	0x20004150
 8001360:	20004158 	.word	0x20004158
 8001364:	20004154 	.word	0x20004154
 8001368:	2000415c 	.word	0x2000415c

0800136c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <prvInsertBlockIntoFreeList+0xac>)
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e002      	b.n	8001380 <prvInsertBlockIntoFreeList+0x14>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	429a      	cmp	r2, r3
 8001388:	d8f7      	bhi.n	800137a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4413      	add	r3, r2
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	d108      	bne.n	80013ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	441a      	add	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	441a      	add	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d118      	bne.n	80013f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <prvInsertBlockIntoFreeList+0xb0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d00d      	beq.n	80013ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	441a      	add	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e008      	b.n	80013fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <prvInsertBlockIntoFreeList+0xb0>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e003      	b.n	80013fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d002      	beq.n	800140a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20004148 	.word	0x20004148
 800141c:	20004150 	.word	0x20004150

08001420 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800142e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001434:	4904      	ldr	r1, [pc, #16]	; (8001448 <cubemx_transport_open+0x28>)
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f007 f8d4 	bl	80085e4 <HAL_UART_Receive_DMA>
    return true;
 800143c:	2301      	movs	r3, #1
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20004160 	.word	0x20004160

0800144c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800145a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f007 f8f1 	bl	8008644 <HAL_UART_DMAStop>
    return true;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001480:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b20      	cmp	r3, #32
 800148c:	d11c      	bne.n	80014c8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	b29b      	uxth	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f007 f826 	bl	80084e8 <HAL_UART_Transmit_DMA>
 800149c:	4603      	mov	r3, r0
 800149e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80014a0:	e002      	b.n	80014a8 <cubemx_transport_write+0x3c>
            osDelay(1);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f008 fb3e 	bl	8009b24 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80014a8:	7cfb      	ldrb	r3, [r7, #19]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <cubemx_transport_write+0x4e>
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	d1f3      	bne.n	80014a2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80014ba:	7cfb      	ldrb	r3, [r7, #19]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <cubemx_transport_write+0x58>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	e002      	b.n	80014ca <cubemx_transport_write+0x5e>
 80014c4:	2300      	movs	r3, #0
 80014c6:	e000      	b.n	80014ca <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80014c8:	2300      	movs	r3, #0
    }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80014e8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ee:	b672      	cpsid	i
}
 80014f0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <cubemx_transport_read+0x9c>)
 8001500:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001502:	b662      	cpsie	i
}
 8001504:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800150c:	2001      	movs	r0, #1
 800150e:	f008 fb09 	bl	8009b24 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <cubemx_transport_read+0xa0>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <cubemx_transport_read+0x9c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d103      	bne.n	8001526 <cubemx_transport_read+0x52>
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbe3      	blt.n	80014ee <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800152a:	e011      	b.n	8001550 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <cubemx_transport_read+0xa0>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	440b      	add	r3, r1
 8001536:	4910      	ldr	r1, [pc, #64]	; (8001578 <cubemx_transport_read+0xa4>)
 8001538:	5c8a      	ldrb	r2, [r1, r2]
 800153a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <cubemx_transport_read+0xa0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <cubemx_transport_read+0xa0>)
 8001548:	6013      	str	r3, [r2, #0]
        wrote++;
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	3301      	adds	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <cubemx_transport_read+0xa0>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <cubemx_transport_read+0x9c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d003      	beq.n	8001564 <cubemx_transport_read+0x90>
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d3e3      	bcc.n	800152c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001564:	69bb      	ldr	r3, [r7, #24]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20004964 	.word	0x20004964
 8001574:	20004960 	.word	0x20004960
 8001578:	20004160 	.word	0x20004160

0800157c <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <MX_GPIO_Init+0xd0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a2c      	ldr	r2, [pc, #176]	; (800164c <MX_GPIO_Init+0xd0>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <MX_GPIO_Init+0xd0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <MX_GPIO_Init+0xd0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a25      	ldr	r2, [pc, #148]	; (800164c <MX_GPIO_Init+0xd0>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <MX_GPIO_Init+0xd0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_GPIO_Init+0xd0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <MX_GPIO_Init+0xd0>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_GPIO_Init+0xd0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_GPIO_Init+0xd0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <MX_GPIO_Init+0xd0>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_GPIO_Init+0xd0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2120      	movs	r1, #32
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <MX_GPIO_Init+0xd4>)
 8001608:	f003 fc18 	bl	8004e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800160c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001612:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_GPIO_Init+0xd8>)
 8001624:	f003 fa86 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001628:	2320      	movs	r3, #32
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_GPIO_Init+0xd4>)
 8001640:	f003 fa78 	bl	8004b34 <HAL_GPIO_Init>

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020800 	.word	0x40020800

08001658 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001668:	d017      	beq.n	800169a <HAL_GPIO_EXTI_Callback+0x42>
 800166a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166e:	dc16      	bgt.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 8001670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001674:	d00e      	beq.n	8001694 <HAL_GPIO_EXTI_Callback+0x3c>
 8001676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167a:	dc10      	bgt.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 800167c:	2b08      	cmp	r3, #8
 800167e:	d010      	beq.n	80016a2 <HAL_GPIO_EXTI_Callback+0x4a>
 8001680:	2b08      	cmp	r3, #8
 8001682:	dc0c      	bgt.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 8001684:	2b01      	cmp	r3, #1
 8001686:	d002      	beq.n	800168e <HAL_GPIO_EXTI_Callback+0x36>
 8001688:	2b02      	cmp	r3, #2
 800168a:	d00c      	beq.n	80016a6 <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 800168c:	e007      	b.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 800168e:	f001 fc0b 	bl	8002ea8 <quadEncoder_CallbackIndexR>
					break;
 8001692:	e009      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8001694:	f001 fbe2 	bl	8002e5c <quadEncoder_CallbackIndexL>
					break;
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 800169a:	bf00      	nop
 800169c:	e004      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 800169e:	bf00      	nop
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 80016a2:	bf00      	nop
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 80016a6:	bf00      	nop


	}
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f003 fbd7 	bl	8004ea0 <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f8:	f001 f82c 	bl	8002754 <Error_Handler>
  }

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20004968 	.word	0x20004968
 8001704:	40005400 	.word	0x40005400
 8001708:	000186a0 	.word	0x000186a0

0800170c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;


void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART1_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001744:	f006 fd4f 	bl	80081e6 <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f001 f801 	bl	8002754 <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200049bc 	.word	0x200049bc
 800175c:	40011000 	.word	0x40011000

08001760 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f006 fd25 	bl	80081e6 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 ffd7 	bl	8002754 <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20004a00 	.word	0x20004a00
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <MX_DMA_Init+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a1e      	ldr	r2, [pc, #120]	; (800183c <MX_DMA_Init+0x88>)
 80017c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <MX_DMA_Init+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_DMA_Init+0x88>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <MX_DMA_Init+0x88>)
 80017e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_DMA_Init+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2105      	movs	r1, #5
 80017f6:	2010      	movs	r0, #16
 80017f8:	f002 fd62 	bl	80042c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017fc:	2010      	movs	r0, #16
 80017fe:	f002 fd7b 	bl	80042f8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2105      	movs	r1, #5
 8001806:	2011      	movs	r0, #17
 8001808:	f002 fd5a 	bl	80042c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800180c:	2011      	movs	r0, #17
 800180e:	f002 fd73 	bl	80042f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	203a      	movs	r0, #58	; 0x3a
 8001818:	f002 fd52 	bl	80042c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800181c:	203a      	movs	r0, #58	; 0x3a
 800181e:	f002 fd6b 	bl	80042f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2105      	movs	r1, #5
 8001826:	2046      	movs	r0, #70	; 0x46
 8001828:	f002 fd4a 	bl	80042c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800182c:	2046      	movs	r0, #70	; 0x46
 800182e:	f002 fd63 	bl	80042f8 <HAL_NVIC_EnableIRQ>

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <CHECKMRRET>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);


void CHECKMRRET(rcl_ret_t ret, char* msg){
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	if (ret != RCL_RET_OK){ printf("Error : %d\r\nMsg : %s\r\n", (int)ret, msg); }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <CHECKMRRET+0x1a>
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <CHECKMRRET+0x24>)
 8001856:	f016 fcbf 	bl	80181d8 <iprintf>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	08019514 	.word	0x08019514

08001868 <SubscriberCallbackFunction>:

void SubscriberCallbackFunction(const void *msgin){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
#if SYNCHRO_EX == EXTEST_MICROROS
	std_msgs__msg__String * msg = (std_msgs__msg__String * )msgin;
	printf("\r\nMessage recue : %s\r\n", msg->data->data);
#elif SYNCHRO_EX == EXFINAL
	std_msgs__msg__Int32 * msg = (std_msgs__msg__Int32 * )msgin;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60fb      	str	r3, [r7, #12]
	printf("\r\nMessage recue : %ld\r\n", msg->data);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <SubscriberCallbackFunction+0x20>)
 800187c:	f016 fcac 	bl	80181d8 <iprintf>
#endif //SYNCHRO_EX
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	0801952c 	.word	0x0801952c

0800188c <microros_task>:



void microros_task(void *argument)
{
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	b0ec      	sub	sp, #432	; 0x1b0
 8001890:	af02      	add	r7, sp, #8
 8001892:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001896:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800189a:	6018      	str	r0, [r3, #0]
	rcl_node_t node;
	rcl_node_options_t node_opt;
	rclc_executor_t executor;

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 800189c:	4bd5      	ldr	r3, [pc, #852]	; (8001bf4 <microros_task+0x368>)
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	4bd5      	ldr	r3, [pc, #852]	; (8001bf8 <microros_task+0x36c>)
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	4bd5      	ldr	r3, [pc, #852]	; (8001bfc <microros_task+0x370>)
 80018a6:	4ad6      	ldr	r2, [pc, #856]	; (8001c00 <microros_task+0x374>)
 80018a8:	49d6      	ldr	r1, [pc, #856]	; (8001c04 <microros_task+0x378>)
 80018aa:	2001      	movs	r0, #1
 80018ac:	f00c fa40 	bl	800dd30 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80018b0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00b ffa3 	bl	800d804 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80018be:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018c2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018c6:	4ad0      	ldr	r2, [pc, #832]	; (8001c08 <microros_task+0x37c>)
 80018c8:	601a      	str	r2, [r3, #0]
	freeRTOS_allocator.deallocate = microros_deallocate;
 80018ca:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018ce:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018d2:	4ace      	ldr	r2, [pc, #824]	; (8001c0c <microros_task+0x380>)
 80018d4:	605a      	str	r2, [r3, #4]
	freeRTOS_allocator.reallocate = microros_reallocate;
 80018d6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018da:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018de:	4acc      	ldr	r2, [pc, #816]	; (8001c10 <microros_task+0x384>)
 80018e0:	609a      	str	r2, [r3, #8]
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80018e2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80018e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018ea:	4aca      	ldr	r2, [pc, #808]	; (8001c14 <microros_task+0x388>)
 80018ec:	60da      	str	r2, [r3, #12]

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80018ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00b ff94 	bl	800d820 <rcutils_set_default_allocator>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <microros_task+0x80>
		printf("Error on default allocators (line %d)\r\n", __LINE__);
 8001904:	21b1      	movs	r1, #177	; 0xb1
 8001906:	48c4      	ldr	r0, [pc, #784]	; (8001c18 <microros_task+0x38c>)
 8001908:	f016 fc66 	bl	80181d8 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 800190c:	463b      	mov	r3, r7
 800190e:	4618      	mov	r0, r3
 8001910:	f00b ffa6 	bl	800d860 <rcutils_get_default_allocator>
 8001914:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001918:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800191c:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8001920:	461d      	mov	r5, r3
 8001922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	6023      	str	r3, [r4, #0]
	//create init_options
	CHECKMRRET(rclc_support_init(&support, 0, NULL, &allocator), "error on init support");
 800192a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800192e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	f00b fe79 	bl	800d62c <rclc_support_init>
 800193a:	4603      	mov	r3, r0
 800193c:	49b7      	ldr	r1, [pc, #732]	; (8001c1c <microros_task+0x390>)
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff7e 	bl	8001840 <CHECKMRRET>
	// create node
	//CHECKMRRET(rclc_node_init_default(&node, "STM32_node", "", &support), "error on init node");
	node_opt = rcl_node_get_default_options();
 8001944:	463b      	mov	r3, r7
 8001946:	4618      	mov	r0, r3
 8001948:	f00b f828 	bl	800c99c <rcl_node_get_default_options>
 800194c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001950:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001954:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001958:	461d      	mov	r5, r3
 800195a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800195e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001962:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	node_opt.domain_id = ROS_DOMAIN_ID;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	CHECKMRRET(rclc_node_init_with_options(&node, "STM32_node", "", &support, &node_opt), "error on init node");
 800196c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001970:	f507 709a 	add.w	r0, r7, #308	; 0x134
 8001974:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	4613      	mov	r3, r2
 800197c:	4aa8      	ldr	r2, [pc, #672]	; (8001c20 <microros_task+0x394>)
 800197e:	49a9      	ldr	r1, [pc, #676]	; (8001c24 <microros_task+0x398>)
 8001980:	f00b fea2 	bl	800d6c8 <rclc_node_init_with_options>
 8001984:	4603      	mov	r3, r0
 8001986:	49a8      	ldr	r1, [pc, #672]	; (8001c28 <microros_task+0x39c>)
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff59 	bl	8001840 <CHECKMRRET>
	{
		ret = rclc_executor_spin_some(&executor, 100*1000*1000);
		vTaskDelay(SAMPLING_PERIOD_ms);
	}
#elif SYNCHRO_EX == EXFINAL
	MicroRosPubMsg MsgToPub = {'N', 0, 0};
 800198e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001996:	224e      	movs	r2, #78	; 0x4e
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800199e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80019aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
	MicroRosSubMsg SubToMsg = {STOP, 0, 0, MODE_OBS, LOW};
 80019b2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80019b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80019ba:	4a9c      	ldr	r2, [pc, #624]	; (8001c2c <microros_task+0x3a0>)
 80019bc:	461c      	mov	r4, r3
 80019be:	4615      	mov	r5, r2
 80019c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c4:	682b      	ldr	r3, [r5, #0]
 80019c6:	6023      	str	r3, [r4, #0]
	/* PUBLISHER */
	//Use to publish the direction of robot in sensor mode
	rcl_publisher_t capteur_dir_pub;
	char* capteur_dir_topic = CAPTEUR_DIR_TOPIC;
 80019c8:	4b99      	ldr	r3, [pc, #612]	; (8001c30 <microros_task+0x3a4>)
 80019ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	std_msgs__msg__Int32 capteur_dir_msg;
	//Use to publish the actual mode of the robot
	rcl_publisher_t etat_mode_pub;
	char* etat_mode_topic = ETAT_MODE_TOPIC;
 80019ce:	4b99      	ldr	r3, [pc, #612]	; (8001c34 <microros_task+0x3a8>)
 80019d0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	std_msgs__msg__Int32 etat_mode_msg;
	//Use to publish the actual speed of the robot
	rcl_publisher_t etat_speed_pub;
	char* etat_speed_topic = ETAT_SPEED_TOPIC;
 80019d4:	4b98      	ldr	r3, [pc, #608]	; (8001c38 <microros_task+0x3ac>)
 80019d6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	std_msgs__msg__Int32 etat_speed_msg;
	/* SUBSCRIBER */
	//Use to receive the x position of object see by the camera
	rcl_subscription_t camera_x_sub;
	char* camera_x_topic = CAMERA_X_TOPIC;
 80019da:	4b98      	ldr	r3, [pc, #608]	; (8001c3c <microros_task+0x3b0>)
 80019dc:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	std_msgs__msg__Int32 camera_x_msg;
	//Use to receive the y position of object see by the camera
	rcl_subscription_t camera_y_sub;
	char* camera_y_topic = CAMERA_Y_TOPIC;
 80019e0:	4b97      	ldr	r3, [pc, #604]	; (8001c40 <microros_task+0x3b4>)
 80019e2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	std_msgs__msg__Int32 camera_y_msg;
	//Use to receive the remote control in remote mode
	rcl_subscription_t telecommande_dir_sub;
	char* telecommande_dir_topic = TELECOMMANDE_DIR_TOPIC;
 80019e6:	4b97      	ldr	r3, [pc, #604]	; (8001c44 <microros_task+0x3b8>)
 80019e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	std_msgs__msg__Int32 telecommande_dir_msg;
	//Use to receive the mode config
	rcl_subscription_t config_mode_sub;
	char* config_mode_topic = CONFIG_MODE_TOPIC;
 80019ec:	4b96      	ldr	r3, [pc, #600]	; (8001c48 <microros_task+0x3bc>)
 80019ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	std_msgs__msg__Int32 config_mode_msg;
	//Use to receive the speed config
	rcl_subscription_t config_speed_sub;
	char* config_speed_topic = CONFIG_SPEED_TOPIC;
 80019f2:	4b96      	ldr	r3, [pc, #600]	; (8001c4c <microros_task+0x3c0>)
 80019f4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	std_msgs__msg__Int32 config_speed_msg;

	// create publisher
	createPublisher(&capteur_dir_pub, &node,
 80019f8:	f00d f80c 	bl	800ea14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a02:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001a06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a10:	f000 fea6 	bl	8002760 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		capteur_dir_topic, &capteur_dir_msg);

	createPublisher(&etat_mode_pub, &node,
 8001a14:	f00c fffe 	bl	800ea14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a1e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001a22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a2c:	f000 fe98 	bl	8002760 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_mode_topic, &etat_mode_msg);

	createPublisher(&etat_speed_pub, &node,
 8001a30:	f00c fff0 	bl	800ea14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a3a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001a3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001a48:	f000 fe8a 	bl	8002760 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_speed_topic, &etat_speed_msg);

	//create subscriber
	createSubscriber(&camera_x_sub,&node,
 8001a4c:	f00c ffe2 	bl	800ea14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a56:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001a5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001a64:	f000 fe98 	bl	8002798 <createSubscriber>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		camera_x_topic, &camera_x_msg);

	createSubscriber(&camera_y_sub,&node,
 8001a68:	f00c ffd4 	bl	800ea14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a72:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001a76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a80:	f000 fe8a 	bl	8002798 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			camera_y_topic, &camera_y_msg);

	createSubscriber(&telecommande_dir_sub,&node,
 8001a84:	f00c ffc6 	bl	800ea14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001a8e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001a92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a9c:	f000 fe7c 	bl	8002798 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			telecommande_dir_topic, &telecommande_dir_msg);

	createSubscriber(&config_mode_sub,&node,
 8001aa0:	f00c ffb8 	bl	800ea14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001aaa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ab8:	f000 fe6e 	bl	8002798 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_mode_topic, &config_mode_msg);

	createSubscriber(&config_speed_sub,&node,
 8001abc:	f00c ffaa 	bl	800ea14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8001ac6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ad4:	f000 fe60 	bl	8002798 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_speed_topic, &config_speed_msg);

	CHECKMRRET(rclc_executor_init(&executor, &support.context, 5, &allocator), "Error on init executor");
 8001ad8:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001adc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ae0:	1d19      	adds	r1, r3, #4
 8001ae2:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	2205      	movs	r2, #5
 8001aea:	f00b fb41 	bl	800d170 <rclc_executor_init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4957      	ldr	r1, [pc, #348]	; (8001c50 <microros_task+0x3c4>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fea4 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_x_sub, &camera_x_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_x_sub");
 8001af8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001afc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b00:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b04:	2300      	movs	r3, #0
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4b52      	ldr	r3, [pc, #328]	; (8001c54 <microros_task+0x3c8>)
 8001b0a:	f00b fba5 	bl	800d258 <rclc_executor_add_subscription>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4951      	ldr	r1, [pc, #324]	; (8001c58 <microros_task+0x3cc>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fe94 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_y_sub, &camera_y_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_y_sub");
 8001b18:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b1c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001b20:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b24:	2300      	movs	r3, #0
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <microros_task+0x3c8>)
 8001b2a:	f00b fb95 	bl	800d258 <rclc_executor_add_subscription>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	494a      	ldr	r1, [pc, #296]	; (8001c5c <microros_task+0x3d0>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fe84 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &telecommande_dir_sub, &telecommande_dir_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add telecommande_dir_sub");
 8001b38:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b3c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b40:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <microros_task+0x3c8>)
 8001b4a:	f00b fb85 	bl	800d258 <rclc_executor_add_subscription>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4943      	ldr	r1, [pc, #268]	; (8001c60 <microros_task+0x3d4>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fe74 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_mode_sub, &config_mode_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_mode_sub");
 8001b58:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001b5c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b60:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b64:	2300      	movs	r3, #0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <microros_task+0x3c8>)
 8001b6a:	f00b fb75 	bl	800d258 <rclc_executor_add_subscription>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	493c      	ldr	r1, [pc, #240]	; (8001c64 <microros_task+0x3d8>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fe64 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_speed_sub, &config_speed_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_speed_sub");
 8001b78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001b7c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b80:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b84:	2300      	movs	r3, #0
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <microros_task+0x3c8>)
 8001b8a:	f00b fb65 	bl	800d258 <rclc_executor_add_subscription>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4935      	ldr	r1, [pc, #212]	; (8001c68 <microros_task+0x3dc>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fe54 	bl	8001840 <CHECKMRRET>

	for(;;)
	{
		if (!uxQueueMessagesWaiting(qhMR_sub))
 8001b98:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <microros_task+0x3e0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f008 fd89 	bl	800a6b4 <uxQueueMessagesWaiting>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d108      	bne.n	8001bba <microros_task+0x32e>
			xQueueSend(qhMR_sub, ( void * ) &SubToMsg, portMAX_DELAY);
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <microros_task+0x3e0>)
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb6:	f008 f9f7 	bl	8009fa8 <xQueueGenericSend>
		rclc_executor_spin_some(&executor, 1*1000*1000);
 8001bba:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001bbe:	4a2c      	ldr	r2, [pc, #176]	; (8001c70 <microros_task+0x3e4>)
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	f00b fcfb 	bl	800d5c0 <rclc_executor_spin_some>
		SubToMsg.dir = telecommande_dir_msg.data;
 8001bca:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001bce:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001bd8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001bdc:	601a      	str	r2, [r3, #0]
		SubToMsg.x = camera_x_msg.data;
 8001bde:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001be2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001bec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	e03f      	b.n	8001c74 <microros_task+0x3e8>
 8001bf4:	080014d5 	.word	0x080014d5
 8001bf8:	0800146d 	.word	0x0800146d
 8001bfc:	0800144d 	.word	0x0800144d
 8001c00:	08001421 	.word	0x08001421
 8001c04:	200049bc 	.word	0x200049bc
 8001c08:	080027dd 	.word	0x080027dd
 8001c0c:	08002821 	.word	0x08002821
 8001c10:	08002859 	.word	0x08002859
 8001c14:	080028c5 	.word	0x080028c5
 8001c18:	08019544 	.word	0x08019544
 8001c1c:	0801956c 	.word	0x0801956c
 8001c20:	08019584 	.word	0x08019584
 8001c24:	08019588 	.word	0x08019588
 8001c28:	08019594 	.word	0x08019594
 8001c2c:	08019714 	.word	0x08019714
 8001c30:	080195a8 	.word	0x080195a8
 8001c34:	080195b4 	.word	0x080195b4
 8001c38:	080195c0 	.word	0x080195c0
 8001c3c:	080195cc 	.word	0x080195cc
 8001c40:	080195d8 	.word	0x080195d8
 8001c44:	080195e4 	.word	0x080195e4
 8001c48:	080195f8 	.word	0x080195f8
 8001c4c:	08019604 	.word	0x08019604
 8001c50:	08019614 	.word	0x08019614
 8001c54:	08001869 	.word	0x08001869
 8001c58:	0801962c 	.word	0x0801962c
 8001c5c:	08019644 	.word	0x08019644
 8001c60:	0801965c 	.word	0x0801965c
 8001c64:	0801967c 	.word	0x0801967c
 8001c68:	08019698 	.word	0x08019698
 8001c6c:	20004bd0 	.word	0x20004bd0
 8001c70:	000f4240 	.word	0x000f4240
		SubToMsg.y = camera_y_msg.data;
 8001c74:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c78:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c86:	609a      	str	r2, [r3, #8]
		SubToMsg.mode = config_mode_msg.data;
 8001c88:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c8c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001c96:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c9a:	60da      	str	r2, [r3, #12]
		SubToMsg.speed = config_speed_msg.data;
 8001c9c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001ca0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001caa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001cae:	611a      	str	r2, [r3, #16]

		if (uxQueueMessagesWaiting(qhMR_pub))
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <microros_task+0x4dc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f008 fcfd 	bl	800a6b4 <uxQueueMessagesWaiting>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d04e      	beq.n	8001d5e <microros_task+0x4d2>
		{
			xQueueReceive(qhMR_pub, &MsgToPub, portMAX_DELAY);
 8001cc0:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <microros_task+0x4dc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f008 fb05 	bl	800a2dc <xQueueReceive>
			capteur_dir_msg.data = (int)MsgToPub.dir;
 8001cd2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001ce2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ce6:	601a      	str	r2, [r3, #0]
			etat_mode_msg.data = MsgToPub.mode;
 8001ce8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001cf6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001cfa:	601a      	str	r2, [r3, #0]
			etat_speed_msg.data = MsgToPub.speed;
 8001cfc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d0a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001d0e:	601a      	str	r2, [r3, #0]
			CHECKMRRET(rcl_publish(&capteur_dir_pub, &capteur_dir_msg, NULL), "erreur publish capteur_dir_pub");
 8001d10:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001d14:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f00a ff96 	bl	800cc4c <rcl_publish>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4912      	ldr	r1, [pc, #72]	; (8001d6c <microros_task+0x4e0>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fd8b 	bl	8001840 <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_mode_pub, &etat_mode_msg, NULL), "erreur publish etat_mode_pub");
 8001d2a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001d2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d32:	2200      	movs	r2, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00a ff89 	bl	800cc4c <rcl_publish>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	490c      	ldr	r1, [pc, #48]	; (8001d70 <microros_task+0x4e4>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fd7e 	bl	8001840 <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_speed_pub, &etat_speed_msg, NULL), "erreur publish etat_speed_pub");
 8001d44:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001d48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f00a ff7c 	bl	800cc4c <rcl_publish>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4907      	ldr	r1, [pc, #28]	; (8001d74 <microros_task+0x4e8>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fd71 	bl	8001840 <CHECKMRRET>
			#if DEBUG_PRINTF
			printf("\r\nReceive from decision :\r\nDirection : %d\r\nMode : %d\r\nSpeed : %d\r\n", capteur_dir_msg.data, etat_mode_msg.data, etat_speed_msg.data);
			#endif //DEBUG_PRINTF
		}
		vTaskDelay(SAMPLING_PERIOD_ms);
 8001d5e:	2005      	movs	r0, #5
 8001d60:	f009 f804 	bl	800ad6c <vTaskDelay>
		if (!uxQueueMessagesWaiting(qhMR_sub))
 8001d64:	e718      	b.n	8001b98 <microros_task+0x30c>
 8001d66:	bf00      	nop
 8001d68:	20004bd4 	.word	0x20004bd4
 8001d6c:	080196b4 	.word	0x080196b4
 8001d70:	080196d4 	.word	0x080196d4
 8001d74:	080196f4 	.word	0x080196f4

08001d78 <task_Motor_Left>:
	}
#endif //SYNCHRO_EX
}
//========================================================================
static void task_Motor_Left(void *pvParameters)
{
 8001d78:	b5b0      	push	{r4, r5, r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	81fb      	strh	r3, [r7, #14]

	float ui = 0.0;
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
	float up = 0.0;
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
	int err = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
	int speed = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]

	for (;;)
	{
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
 8001d98:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <task_Motor_Left+0xf8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f107 010e 	add.w	r1, r7, #14
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001da4:	4618      	mov	r0, r3
 8001da6:	f008 fa99 	bl	800a2dc <xQueueReceive>

		speed = quadEncoder_GetSpeedL();
 8001daa:	f000 ffb3 	bl	8002d14 <quadEncoder_GetSpeedL>
 8001dae:	4603      	mov	r3, r0
 8001db0:	613b      	str	r3, [r7, #16]
		err=consigne-speed;
 8001db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001db6:	461a      	mov	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	617b      	str	r3, [r7, #20]
		up=LKp*(float)err;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc8:	ee17 0a90 	vmov	r0, s15
 8001dcc:	f7fe fbd4 	bl	8000578 <__aeabi_f2d>
 8001dd0:	a323      	add	r3, pc, #140	; (adr r3, 8001e60 <task_Motor_Left+0xe8>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fc27 	bl	8000628 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fe33 	bl	8000a4c <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	61bb      	str	r3, [r7, #24]
		ui=ui+LKp*LKi*(float)err;
 8001dea:	69f8      	ldr	r0, [r7, #28]
 8001dec:	f7fe fbc4 	bl	8000578 <__aeabi_f2d>
 8001df0:	4604      	mov	r4, r0
 8001df2:	460d      	mov	r5, r1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfe:	ee17 0a90 	vmov	r0, s15
 8001e02:	f7fe fbb9 	bl	8000578 <__aeabi_f2d>
 8001e06:	a318      	add	r3, pc, #96	; (adr r3, 8001e68 <task_Motor_Left+0xf0>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	f7fe fc0c 	bl	8000628 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fa50 	bl	80002bc <__adddf3>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7fe fe12 	bl	8000a4c <__aeabi_d2f>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	61fb      	str	r3, [r7, #28]

		motorLeft_SetDuty(100+(int)(up+ui));
 8001e2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e3c:	ee17 3a90 	vmov	r3, s15
 8001e40:	3364      	adds	r3, #100	; 0x64
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fe8a 	bl	8002b5c <motorLeft_SetDuty>

		xSemaphoreGive(xSem_Supervision);
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <task_Motor_Left+0xfc>)
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	f008 f8a9 	bl	8009fa8 <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8001e56:	2005      	movs	r0, #5
 8001e58:	f008 ff88 	bl	800ad6c <vTaskDelay>
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
 8001e5c:	e79c      	b.n	8001d98 <task_Motor_Left+0x20>
 8001e5e:	bf00      	nop
 8001e60:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e64:	3f50624d 	.word	0x3f50624d
 8001e68:	47ae147b 	.word	0x47ae147b
 8001e6c:	3f547ae1 	.word	0x3f547ae1
 8001e70:	20004bc8 	.word	0x20004bc8
 8001e74:	20004bc4 	.word	0x20004bc4

08001e78 <task_Motor_Right>:
	}
}

//=========================================================================
static void task_Motor_Right(void *pvParameters)
{
 8001e78:	b5b0      	push	{r4, r5, r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	81fb      	strh	r3, [r7, #14]

	float ui= 0.0;
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
	float up = 0.0;
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
	int err = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
	int speed = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]

	for (;;)
	{
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
 8001e98:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <task_Motor_Right+0xf8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f107 010e 	add.w	r1, r7, #14
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f008 fa19 	bl	800a2dc <xQueueReceive>

		speed = quadEncoder_GetSpeedR();
 8001eaa:	f000 ff85 	bl	8002db8 <quadEncoder_GetSpeedR>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	613b      	str	r3, [r7, #16]
		err=consigne-speed;
 8001eb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
		up=RKp*(float)err;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec8:	ee17 0a90 	vmov	r0, s15
 8001ecc:	f7fe fb54 	bl	8000578 <__aeabi_f2d>
 8001ed0:	a323      	add	r3, pc, #140	; (adr r3, 8001f60 <task_Motor_Right+0xe8>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f7fe fba7 	bl	8000628 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f7fe fdb3 	bl	8000a4c <__aeabi_d2f>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
		ui=ui+RKp*RKi*(float)err;
 8001eea:	69f8      	ldr	r0, [r7, #28]
 8001eec:	f7fe fb44 	bl	8000578 <__aeabi_f2d>
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	460d      	mov	r5, r1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efe:	ee17 0a90 	vmov	r0, s15
 8001f02:	f7fe fb39 	bl	8000578 <__aeabi_f2d>
 8001f06:	a318      	add	r3, pc, #96	; (adr r3, 8001f68 <task_Motor_Right+0xf0>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb8c 	bl	8000628 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe f9d0 	bl	80002bc <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fd92 	bl	8000a4c <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	61fb      	str	r3, [r7, #28]

		motorRight_SetDuty(100+(int)(up+ui));
 8001f2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3c:	ee17 3a90 	vmov	r3, s15
 8001f40:	3364      	adds	r3, #100	; 0x64
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fe1a 	bl	8002b7c <motorRight_SetDuty>

		xSemaphoreGive(xSem_Supervision);
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <task_Motor_Right+0xfc>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	f008 f829 	bl	8009fa8 <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8001f56:	2005      	movs	r0, #5
 8001f58:	f008 ff08 	bl	800ad6c <vTaskDelay>
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
 8001f5c:	e79c      	b.n	8001e98 <task_Motor_Right+0x20>
 8001f5e:	bf00      	nop
 8001f60:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f64:	3f50624d 	.word	0x3f50624d
 8001f68:	47ae147b 	.word	0x47ae147b
 8001f6c:	3f547ae1 	.word	0x3f547ae1
 8001f70:	20004bcc 	.word	0x20004bcc
 8001f74:	20004bc4 	.word	0x20004bc4

08001f78 <task_Supervision>:
}
#endif

//=========================================================================
static void task_Supervision(void *pvParameters)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08e      	sub	sp, #56	; 0x38
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
#elif SYNCHRO_EX == EXFINAL
	int16_t speedLeft;
	int16_t speedRight;

	int table[2];
	int vl53 = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	637b      	str	r3, [r7, #52]	; 0x34
#endif //MICROROS

	for (;;)
	{
		#if MICROROS
		if (uxQueueMessagesWaiting(qhMR_sub))
 8001f84:	4b9c      	ldr	r3, [pc, #624]	; (80021f8 <task_Supervision+0x280>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f008 fb93 	bl	800a6b4 <uxQueueMessagesWaiting>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d029      	beq.n	8001fe8 <task_Supervision+0x70>
		{
			xQueueReceive(qhMR_sub, &SubToMsg, portMAX_DELAY);
 8001f94:	4b98      	ldr	r3, [pc, #608]	; (80021f8 <task_Supervision+0x280>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f107 0114 	add.w	r1, r7, #20
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f008 f99b 	bl	800a2dc <xQueueReceive>
			if (SubToMsg.mode >= 0 && SubToMsg.mode < LAST_MODE)
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db05      	blt.n	8001fb8 <task_Supervision+0x40>
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	dc02      	bgt.n	8001fb8 <task_Supervision+0x40>
				mode = SubToMsg.mode;
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	4a91      	ldr	r2, [pc, #580]	; (80021fc <task_Supervision+0x284>)
 8001fb6:	6013      	str	r3, [r2, #0]
			if (SubToMsg.dir >= 0 && SubToMsg.dir < LAST_DIR)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db05      	blt.n	8001fca <task_Supervision+0x52>
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	dc02      	bgt.n	8001fca <task_Supervision+0x52>
				direction = SubToMsg.dir;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	4a8e      	ldr	r2, [pc, #568]	; (8002200 <task_Supervision+0x288>)
 8001fc8:	6013      	str	r3, [r2, #0]
			if (SubToMsg.speed > 0 && SubToMsg.speed < LAST_SPEED)
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	dd05      	ble.n	8001fdc <task_Supervision+0x64>
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	dc02      	bgt.n	8001fdc <task_Supervision+0x64>
				speed = SubToMsg.speed;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	4a8a      	ldr	r2, [pc, #552]	; (8002204 <task_Supervision+0x28c>)
 8001fda:	6013      	str	r3, [r2, #0]
			x = SubToMsg.x;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	4a8a      	ldr	r2, [pc, #552]	; (8002208 <task_Supervision+0x290>)
 8001fe0:	6013      	str	r3, [r2, #0]
			y = SubToMsg.y;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4a89      	ldr	r2, [pc, #548]	; (800220c <task_Supervision+0x294>)
 8001fe6:	6013      	str	r3, [r2, #0]
			printf("%cc%c[2J%c[0;0HVariable to make decision : \n\rDirection : %d\r\nMode: %d\r\nSpeed : %d\r\nX: %d\r\nY : %d\r\n", 0x1b, 0x1b, 0x1b, direction, mode, speed, x, y);
			#endif //DEBUG_PRINTF
		}
		#endif //MICROROS

		if (mode == MODE_ZIG)
 8001fe8:	4b84      	ldr	r3, [pc, #528]	; (80021fc <task_Supervision+0x284>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	f040 8113 	bne.w	8002218 <task_Supervision+0x2a0>
		{
			dir = 'N';
 8001ff2:	4b87      	ldr	r3, [pc, #540]	; (8002210 <task_Supervision+0x298>)
 8001ff4:	224e      	movs	r2, #78	; 0x4e
 8001ff6:	701a      	strb	r2, [r3, #0]
			obs = 0;
 8001ff8:	4b86      	ldr	r3, [pc, #536]	; (8002214 <task_Supervision+0x29c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
			switch(direction)
 8001ffe:	4b80      	ldr	r3, [pc, #512]	; (8002200 <task_Supervision+0x288>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b08      	cmp	r3, #8
 8002004:	f200 80f3 	bhi.w	80021ee <task_Supervision+0x276>
 8002008:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <task_Supervision+0x98>)
 800200a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200e:	bf00      	nop
 8002010:	0800203f 	.word	0x0800203f
 8002014:	080020e1 	.word	0x080020e1
 8002018:	08002071 	.word	0x08002071
 800201c:	080020ab 	.word	0x080020ab
 8002020:	08002035 	.word	0x08002035
 8002024:	08002117 	.word	0x08002117
 8002028:	08002149 	.word	0x08002149
 800202c:	0800217b 	.word	0x0800217b
 8002030:	080021b5 	.word	0x080021b5
			{
				case STOP:
					speedLeft = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 800203c:	e269      	b.n	8002512 <task_Supervision+0x59a>
				case AVANT:
					speedLeft = VITESSE_KART*speed;
 800203e:	4b71      	ldr	r3, [pc, #452]	; (8002204 <task_Supervision+0x28c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	0152      	lsls	r2, r2, #5
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	0092      	lsls	r2, r2, #2
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	b29b      	uxth	r3, r3
 8002052:	b21b      	sxth	r3, r3
 8002054:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = VITESSE_KART*speed;
 8002056:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <task_Supervision+0x28c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	0152      	lsls	r2, r2, #5
 8002060:	1ad2      	subs	r2, r2, r3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	b29b      	uxth	r3, r3
 800206a:	b21b      	sxth	r3, r3
 800206c:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 800206e:	e250      	b.n	8002512 <task_Supervision+0x59a>
				case RECULE:
					speedLeft = -VITESSE_KART*speed;
 8002070:	4b64      	ldr	r3, [pc, #400]	; (8002204 <task_Supervision+0x28c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	01d2      	lsls	r2, r2, #7
 800207a:	1ad2      	subs	r2, r2, r3
 800207c:	0192      	lsls	r2, r2, #6
 800207e:	441a      	add	r2, r3
 8002080:	0052      	lsls	r2, r2, #1
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	b29b      	uxth	r3, r3
 8002088:	b21b      	sxth	r3, r3
 800208a:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_KART*speed;
 800208c:	4b5d      	ldr	r3, [pc, #372]	; (8002204 <task_Supervision+0x28c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	01d2      	lsls	r2, r2, #7
 8002096:	1ad2      	subs	r2, r2, r3
 8002098:	0192      	lsls	r2, r2, #6
 800209a:	441a      	add	r2, r3
 800209c:	0052      	lsls	r2, r2, #1
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80020a8:	e233      	b.n	8002512 <task_Supervision+0x59a>
				case DROITE:
					speedLeft = VITESSE_KART*speed;
 80020aa:	4b56      	ldr	r3, [pc, #344]	; (8002204 <task_Supervision+0x28c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	0152      	lsls	r2, r2, #5
 80020b4:	1ad2      	subs	r2, r2, r3
 80020b6:	0092      	lsls	r2, r2, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	b29b      	uxth	r3, r3
 80020be:	b21b      	sxth	r3, r3
 80020c0:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_KART*speed;
 80020c2:	4b50      	ldr	r3, [pc, #320]	; (8002204 <task_Supervision+0x28c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	01d2      	lsls	r2, r2, #7
 80020cc:	1ad2      	subs	r2, r2, r3
 80020ce:	0192      	lsls	r2, r2, #6
 80020d0:	441a      	add	r2, r3
 80020d2:	0052      	lsls	r2, r2, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b21b      	sxth	r3, r3
 80020dc:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80020de:	e218      	b.n	8002512 <task_Supervision+0x59a>
				case GAUCHE:
					speedLeft = -VITESSE_KART*speed;
 80020e0:	4b48      	ldr	r3, [pc, #288]	; (8002204 <task_Supervision+0x28c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	01d2      	lsls	r2, r2, #7
 80020ea:	1ad2      	subs	r2, r2, r3
 80020ec:	0192      	lsls	r2, r2, #6
 80020ee:	441a      	add	r2, r3
 80020f0:	0052      	lsls	r2, r2, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = VITESSE_KART*speed;
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <task_Supervision+0x28c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	0152      	lsls	r2, r2, #5
 8002106:	1ad2      	subs	r2, r2, r3
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	b29b      	uxth	r3, r3
 8002110:	b21b      	sxth	r3, r3
 8002112:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002114:	e1fd      	b.n	8002512 <task_Supervision+0x59a>
				case AVANT_GAUCHE:
					speedLeft = (VITESSE_KART/2)*speed;
 8002116:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <task_Supervision+0x28c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	0152      	lsls	r2, r2, #5
 8002120:	1ad2      	subs	r2, r2, r3
 8002122:	0092      	lsls	r2, r2, #2
 8002124:	4413      	add	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	b29b      	uxth	r3, r3
 800212a:	b21b      	sxth	r3, r3
 800212c:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = VITESSE_KART*speed;
 800212e:	4b35      	ldr	r3, [pc, #212]	; (8002204 <task_Supervision+0x28c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	0152      	lsls	r2, r2, #5
 8002138:	1ad2      	subs	r2, r2, r3
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	b29b      	uxth	r3, r3
 8002142:	b21b      	sxth	r3, r3
 8002144:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002146:	e1e4      	b.n	8002512 <task_Supervision+0x59a>
				case AVANT_DROITE:
					speedLeft = VITESSE_KART*speed;
 8002148:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <task_Supervision+0x28c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	0152      	lsls	r2, r2, #5
 8002152:	1ad2      	subs	r2, r2, r3
 8002154:	0092      	lsls	r2, r2, #2
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	b29b      	uxth	r3, r3
 800215c:	b21b      	sxth	r3, r3
 800215e:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = (VITESSE_KART/2)*speed;
 8002160:	4b28      	ldr	r3, [pc, #160]	; (8002204 <task_Supervision+0x28c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	0152      	lsls	r2, r2, #5
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	4413      	add	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	b29b      	uxth	r3, r3
 8002174:	b21b      	sxth	r3, r3
 8002176:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002178:	e1cb      	b.n	8002512 <task_Supervision+0x59a>
				case RECULE_GAUCHE:
					speedLeft = -VITESSE_KART*speed;
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <task_Supervision+0x28c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	01d2      	lsls	r2, r2, #7
 8002184:	1ad2      	subs	r2, r2, r3
 8002186:	0192      	lsls	r2, r2, #6
 8002188:	441a      	add	r2, r3
 800218a:	0052      	lsls	r2, r2, #1
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	b29b      	uxth	r3, r3
 8002192:	b21b      	sxth	r3, r3
 8002194:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = (-VITESSE_KART/2)*speed;
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <task_Supervision+0x28c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	0212      	lsls	r2, r2, #8
 80021a0:	1ad2      	subs	r2, r2, r3
 80021a2:	0192      	lsls	r2, r2, #6
 80021a4:	441a      	add	r2, r3
 80021a6:	0052      	lsls	r2, r2, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80021b2:	e1ae      	b.n	8002512 <task_Supervision+0x59a>
				case RECULE_DROITE:
					speedLeft = (-VITESSE_KART/2)*speed;
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <task_Supervision+0x28c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	0212      	lsls	r2, r2, #8
 80021be:	1ad2      	subs	r2, r2, r3
 80021c0:	0192      	lsls	r2, r2, #6
 80021c2:	441a      	add	r2, r3
 80021c4:	0052      	lsls	r2, r2, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_KART*speed;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <task_Supervision+0x28c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	01d2      	lsls	r2, r2, #7
 80021da:	1ad2      	subs	r2, r2, r3
 80021dc:	0192      	lsls	r2, r2, #6
 80021de:	441a      	add	r2, r3
 80021e0:	0052      	lsls	r2, r2, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80021ec:	e191      	b.n	8002512 <task_Supervision+0x59a>
				default:
					speedLeft = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80021f6:	e18c      	b.n	8002512 <task_Supervision+0x59a>
 80021f8:	20004bd0 	.word	0x20004bd0
 80021fc:	20004be0 	.word	0x20004be0
 8002200:	20000000 	.word	0x20000000
 8002204:	20000004 	.word	0x20000004
 8002208:	20004be4 	.word	0x20004be4
 800220c:	20004be8 	.word	0x20004be8
 8002210:	20000008 	.word	0x20000008
 8002214:	20004bec 	.word	0x20004bec
			}
		}
		else if (mode == MODE_OBS)
 8002218:	4b8d      	ldr	r3, [pc, #564]	; (8002450 <task_Supervision+0x4d8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d16c      	bne.n	80022fa <task_Supervision+0x382>
		{
			captDistIR_Get(table);
 8002220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fe61 	bl	8000eec <captDistIR_Get>
				dir = 'S';
				obs = 1;
			}
			else
			#endif //VL53
			if (table[0] > 1000 || table[1] > 1000)
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002230:	dc03      	bgt.n	800223a <task_Supervision+0x2c2>
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002238:	dd52      	ble.n	80022e0 <task_Supervision+0x368>
			{
				if (obs > 10)
 800223a:	4b86      	ldr	r3, [pc, #536]	; (8002454 <task_Supervision+0x4dc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b0a      	cmp	r3, #10
 8002240:	dd09      	ble.n	8002256 <task_Supervision+0x2de>
				{
					speedLeft = VITESSE_OBS;
 8002242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002246:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_OBS/2;
 8002248:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 800224c:	863b      	strh	r3, [r7, #48]	; 0x30
					dir = 'G';
 800224e:	4b82      	ldr	r3, [pc, #520]	; (8002458 <task_Supervision+0x4e0>)
 8002250:	2247      	movs	r2, #71	; 0x47
 8002252:	701a      	strb	r2, [r3, #0]
				if (obs > 10)
 8002254:	e15c      	b.n	8002510 <task_Supervision+0x598>
				}
				else
				{
					speedLeft = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	863b      	strh	r3, [r7, #48]	; 0x30

					if (table[0] > table[1] && table[0] > 1000)
 800225e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	429a      	cmp	r2, r3
 8002264:	dd18      	ble.n	8002298 <task_Supervision+0x320>
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800226c:	dd14      	ble.n	8002298 <task_Supervision+0x320>
					{
						dir = 'G';
 800226e:	4b7a      	ldr	r3, [pc, #488]	; (8002458 <task_Supervision+0x4e0>)
 8002270:	2247      	movs	r2, #71	; 0x47
 8002272:	701a      	strb	r2, [r3, #0]
						speedLeft = VITESSE_OBS/2;
 8002274:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002278:	867b      	strh	r3, [r7, #50]	; 0x32
						speedRight = -VITESSE_OBS/2;
 800227a:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 800227e:	863b      	strh	r3, [r7, #48]	; 0x30
						if (obs%2 == 0)
 8002280:	4b74      	ldr	r3, [pc, #464]	; (8002454 <task_Supervision+0x4dc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d128      	bne.n	80022de <task_Supervision+0x366>
							obs++;
 800228c:	4b71      	ldr	r3, [pc, #452]	; (8002454 <task_Supervision+0x4dc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	4a70      	ldr	r2, [pc, #448]	; (8002454 <task_Supervision+0x4dc>)
 8002294:	6013      	str	r3, [r2, #0]
						if (obs%2 == 0)
 8002296:	e022      	b.n	80022de <task_Supervision+0x366>
					}
					else if (table[0] < table[1] && table[1] > 1000)
 8002298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800229a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229c:	429a      	cmp	r2, r3
 800229e:	f280 8137 	bge.w	8002510 <task_Supervision+0x598>
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022a8:	f340 8132 	ble.w	8002510 <task_Supervision+0x598>
					{
						dir = 'D';
 80022ac:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <task_Supervision+0x4e0>)
 80022ae:	2244      	movs	r2, #68	; 0x44
 80022b0:	701a      	strb	r2, [r3, #0]
						speedLeft = -VITESSE_OBS/2;
 80022b2:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80022b6:	867b      	strh	r3, [r7, #50]	; 0x32
						speedRight = VITESSE_OBS/2;
 80022b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80022bc:	863b      	strh	r3, [r7, #48]	; 0x30
						if (obs%2 == 1)
 80022be:	4b65      	ldr	r3, [pc, #404]	; (8002454 <task_Supervision+0x4dc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	bfb8      	it	lt
 80022ca:	425b      	neglt	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	f040 811f 	bne.w	8002510 <task_Supervision+0x598>
							obs++;
 80022d2:	4b60      	ldr	r3, [pc, #384]	; (8002454 <task_Supervision+0x4dc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3301      	adds	r3, #1
 80022d8:	4a5e      	ldr	r2, [pc, #376]	; (8002454 <task_Supervision+0x4dc>)
 80022da:	6013      	str	r3, [r2, #0]
				if (obs > 10)
 80022dc:	e118      	b.n	8002510 <task_Supervision+0x598>
 80022de:	e117      	b.n	8002510 <task_Supervision+0x598>
					}
				}
			}
			else
			{
				speedLeft = VITESSE_OBS;
 80022e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e4:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_OBS;
 80022e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ea:	863b      	strh	r3, [r7, #48]	; 0x30
				dir = 'F';
 80022ec:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <task_Supervision+0x4e0>)
 80022ee:	2246      	movs	r2, #70	; 0x46
 80022f0:	701a      	strb	r2, [r3, #0]
				obs = 0;
 80022f2:	4b58      	ldr	r3, [pc, #352]	; (8002454 <task_Supervision+0x4dc>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e10b      	b.n	8002512 <task_Supervision+0x59a>
			}
		}
		else if (mode == MODE_CAM)
 80022fa:	4b55      	ldr	r3, [pc, #340]	; (8002450 <task_Supervision+0x4d8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	f040 8107 	bne.w	8002512 <task_Supervision+0x59a>
		{
			dir = 'N';
 8002304:	4b54      	ldr	r3, [pc, #336]	; (8002458 <task_Supervision+0x4e0>)
 8002306:	224e      	movs	r2, #78	; 0x4e
 8002308:	701a      	strb	r2, [r3, #0]
			obs = 0;
 800230a:	4b52      	ldr	r3, [pc, #328]	; (8002454 <task_Supervision+0x4dc>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

			if (x > CAMERA_X_MIN+CAMERA_X_TIER && x < CAMERA_X_MAX-CAMERA_X_TIER && y > CAMERA_Y_MIN && y <CAMERA_Y_MIN+CAMERA_Y_TIER) //AVANT
 8002310:	4b52      	ldr	r3, [pc, #328]	; (800245c <task_Supervision+0x4e4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8002318:	db15      	blt.n	8002346 <task_Supervision+0x3ce>
 800231a:	4b50      	ldr	r3, [pc, #320]	; (800245c <task_Supervision+0x4e4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f240 22aa 	movw	r2, #682	; 0x2aa
 8002322:	4293      	cmp	r3, r2
 8002324:	dc0f      	bgt.n	8002346 <task_Supervision+0x3ce>
 8002326:	4b4e      	ldr	r3, [pc, #312]	; (8002460 <task_Supervision+0x4e8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	dd0b      	ble.n	8002346 <task_Supervision+0x3ce>
 800232e:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <task_Supervision+0x4e8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002336:	dc06      	bgt.n	8002346 <task_Supervision+0x3ce>
			{
				speedLeft = VITESSE_CAM;
 8002338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233c:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM;
 800233e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002342:	863b      	strh	r3, [r7, #48]	; 0x30
 8002344:	e0e5      	b.n	8002512 <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MAX-CAMERA_X_TIER && x < CAMERA_X_MAX && y > CAMERA_Y_MIN && y < CAMERA_Y_MIN+CAMERA_Y_TIER) //AVANT_DROITE:
 8002346:	4b45      	ldr	r3, [pc, #276]	; (800245c <task_Supervision+0x4e4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 800234e:	db14      	blt.n	800237a <task_Supervision+0x402>
 8002350:	4b42      	ldr	r3, [pc, #264]	; (800245c <task_Supervision+0x4e4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002358:	da0f      	bge.n	800237a <task_Supervision+0x402>
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <task_Supervision+0x4e8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	dd0b      	ble.n	800237a <task_Supervision+0x402>
 8002362:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <task_Supervision+0x4e8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800236a:	dc06      	bgt.n	800237a <task_Supervision+0x402>
			{
				speedLeft = VITESSE_CAM;
 800236c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002370:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM/2;
 8002372:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002376:	863b      	strh	r3, [r7, #48]	; 0x30
 8002378:	e0cb      	b.n	8002512 <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MIN && x < CAMERA_X_MIN+CAMERA_X_TIER && y > CAMERA_Y_MIN && y < CAMERA_Y_MIN+CAMERA_Y_TIER) //AVANT_GAUCHE:
 800237a:	4b38      	ldr	r3, [pc, #224]	; (800245c <task_Supervision+0x4e4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	dd14      	ble.n	80023ac <task_Supervision+0x434>
 8002382:	4b36      	ldr	r3, [pc, #216]	; (800245c <task_Supervision+0x4e4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800238a:	dc0f      	bgt.n	80023ac <task_Supervision+0x434>
 800238c:	4b34      	ldr	r3, [pc, #208]	; (8002460 <task_Supervision+0x4e8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	dd0b      	ble.n	80023ac <task_Supervision+0x434>
 8002394:	4b32      	ldr	r3, [pc, #200]	; (8002460 <task_Supervision+0x4e8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800239c:	dc06      	bgt.n	80023ac <task_Supervision+0x434>
			{
				speedLeft = VITESSE_CAM/2;
 800239e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023a2:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM;
 80023a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a8:	863b      	strh	r3, [r7, #48]	; 0x30
 80023aa:	e0b2      	b.n	8002512 <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MIN+CAMERA_X_TIER && x < CAMERA_X_MAX-CAMERA_X_TIER && y > CAMERA_Y_MIN+CAMERA_Y_TIER && y <CAMERA_Y_MAX-CAMERA_Y_TIER) //STOP
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <task_Supervision+0x4e4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80023b4:	db15      	blt.n	80023e2 <task_Supervision+0x46a>
 80023b6:	4b29      	ldr	r3, [pc, #164]	; (800245c <task_Supervision+0x4e4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f240 22aa 	movw	r2, #682	; 0x2aa
 80023be:	4293      	cmp	r3, r2
 80023c0:	dc0f      	bgt.n	80023e2 <task_Supervision+0x46a>
 80023c2:	4b27      	ldr	r3, [pc, #156]	; (8002460 <task_Supervision+0x4e8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80023ca:	db0a      	blt.n	80023e2 <task_Supervision+0x46a>
 80023cc:	4b24      	ldr	r3, [pc, #144]	; (8002460 <task_Supervision+0x4e8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f240 22aa 	movw	r2, #682	; 0x2aa
 80023d4:	4293      	cmp	r3, r2
 80023d6:	dc04      	bgt.n	80023e2 <task_Supervision+0x46a>
			{
				speedLeft = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	863b      	strh	r3, [r7, #48]	; 0x30
 80023e0:	e097      	b.n	8002512 <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MAX-CAMERA_X_TIER && x < CAMERA_X_MAX && y > CAMERA_Y_MIN+CAMERA_Y_TIER && y <CAMERA_Y_MAX-CAMERA_Y_TIER) //DROITE
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <task_Supervision+0x4e4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80023ea:	db16      	blt.n	800241a <task_Supervision+0x4a2>
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <task_Supervision+0x4e4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f4:	da11      	bge.n	800241a <task_Supervision+0x4a2>
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <task_Supervision+0x4e8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80023fe:	db0c      	blt.n	800241a <task_Supervision+0x4a2>
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <task_Supervision+0x4e8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f240 22aa 	movw	r2, #682	; 0x2aa
 8002408:	4293      	cmp	r3, r2
 800240a:	dc06      	bgt.n	800241a <task_Supervision+0x4a2>
			{
				speedLeft = VITESSE_CAM;
 800240c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002410:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = -VITESSE_CAM;
 8002412:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002416:	863b      	strh	r3, [r7, #48]	; 0x30
 8002418:	e07b      	b.n	8002512 <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MIN && x < CAMERA_X_MIN+CAMERA_X_TIER && y > CAMERA_Y_MIN+CAMERA_Y_TIER && y <CAMERA_Y_MAX-CAMERA_Y_TIER) //GAUCHE
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <task_Supervision+0x4e4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	dd20      	ble.n	8002464 <task_Supervision+0x4ec>
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <task_Supervision+0x4e4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800242a:	dc1b      	bgt.n	8002464 <task_Supervision+0x4ec>
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <task_Supervision+0x4e8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8002434:	db16      	blt.n	8002464 <task_Supervision+0x4ec>
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <task_Supervision+0x4e8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f240 22aa 	movw	r2, #682	; 0x2aa
 800243e:	4293      	cmp	r3, r2
 8002440:	dc10      	bgt.n	8002464 <task_Supervision+0x4ec>
			{
				speedLeft = -VITESSE_CAM;
 8002442:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002446:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM;
 8002448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244c:	863b      	strh	r3, [r7, #48]	; 0x30
 800244e:	e060      	b.n	8002512 <task_Supervision+0x59a>
 8002450:	20004be0 	.word	0x20004be0
 8002454:	20004bec 	.word	0x20004bec
 8002458:	20000008 	.word	0x20000008
 800245c:	20004be4 	.word	0x20004be4
 8002460:	20004be8 	.word	0x20004be8
			}
			else if (x > CAMERA_X_MIN+CAMERA_X_TIER && x < CAMERA_X_MAX-CAMERA_X_TIER && y > CAMERA_Y_MAX-CAMERA_Y_TIER && y < CAMERA_Y_MAX) //RECULE:
 8002464:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <task_Supervision+0x618>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 800246c:	db16      	blt.n	800249c <task_Supervision+0x524>
 800246e:	4b48      	ldr	r3, [pc, #288]	; (8002590 <task_Supervision+0x618>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f240 22aa 	movw	r2, #682	; 0x2aa
 8002476:	4293      	cmp	r3, r2
 8002478:	dc10      	bgt.n	800249c <task_Supervision+0x524>
 800247a:	4b46      	ldr	r3, [pc, #280]	; (8002594 <task_Supervision+0x61c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 8002482:	db0b      	blt.n	800249c <task_Supervision+0x524>
 8002484:	4b43      	ldr	r3, [pc, #268]	; (8002594 <task_Supervision+0x61c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800248c:	da06      	bge.n	800249c <task_Supervision+0x524>
			{
				speedLeft = -VITESSE_CAM;
 800248e:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002492:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = -VITESSE_CAM;
 8002494:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002498:	863b      	strh	r3, [r7, #48]	; 0x30
 800249a:	e03a      	b.n	8002512 <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MAX-CAMERA_X_TIER && x < CAMERA_X_MAX && y > CAMERA_Y_MAX-CAMERA_Y_TIER && y < CAMERA_Y_MAX) //RECULE_DROITE:
 800249c:	4b3c      	ldr	r3, [pc, #240]	; (8002590 <task_Supervision+0x618>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80024a4:	db15      	blt.n	80024d2 <task_Supervision+0x55a>
 80024a6:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <task_Supervision+0x618>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ae:	da10      	bge.n	80024d2 <task_Supervision+0x55a>
 80024b0:	4b38      	ldr	r3, [pc, #224]	; (8002594 <task_Supervision+0x61c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80024b8:	db0b      	blt.n	80024d2 <task_Supervision+0x55a>
 80024ba:	4b36      	ldr	r3, [pc, #216]	; (8002594 <task_Supervision+0x61c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c2:	da06      	bge.n	80024d2 <task_Supervision+0x55a>
			{
				speedLeft = -VITESSE_CAM/2;
 80024c4:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80024c8:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = -VITESSE_CAM;
 80024ca:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80024ce:	863b      	strh	r3, [r7, #48]	; 0x30
 80024d0:	e01f      	b.n	8002512 <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MIN && x < CAMERA_X_MIN+CAMERA_X_TIER && y > CAMERA_Y_MAX-CAMERA_Y_TIER && y < CAMERA_Y_MAX) //RECULE_GAUCHE:
 80024d2:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <task_Supervision+0x618>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	dd15      	ble.n	8002506 <task_Supervision+0x58e>
 80024da:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <task_Supervision+0x618>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80024e2:	dc10      	bgt.n	8002506 <task_Supervision+0x58e>
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <task_Supervision+0x61c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80024ec:	db0b      	blt.n	8002506 <task_Supervision+0x58e>
 80024ee:	4b29      	ldr	r3, [pc, #164]	; (8002594 <task_Supervision+0x61c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f6:	da06      	bge.n	8002506 <task_Supervision+0x58e>
			{
				speedLeft = -VITESSE_CAM;
 80024f8:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80024fc:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = -VITESSE_CAM/2;
 80024fe:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8002502:	863b      	strh	r3, [r7, #48]	; 0x30
 8002504:	e005      	b.n	8002512 <task_Supervision+0x59a>
			}
			else
			{
				speedLeft = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	863b      	strh	r3, [r7, #48]	; 0x30
 800250e:	e000      	b.n	8002512 <task_Supervision+0x59a>
				if (obs > 10)
 8002510:	bf00      	nop

		#if DEBUG_MOTOR
		printf("Motor L : %d || R : %d\r\n", speedLeft, speedRight);
		#endif

		xQueueSend( q_mot_L, ( void * ) &speedLeft,  portMAX_DELAY );
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <task_Supervision+0x620>)
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	f107 0132 	add.w	r1, r7, #50	; 0x32
 800251a:	2300      	movs	r3, #0
 800251c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002520:	f007 fd42 	bl	8009fa8 <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 8002524:	4b1d      	ldr	r3, [pc, #116]	; (800259c <task_Supervision+0x624>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800252c:	4618      	mov	r0, r3
 800252e:	f007 ffb5 	bl	800a49c <xQueueSemaphoreTake>

		xQueueSend( q_mot_R, ( void * ) &speedRight,  portMAX_DELAY );
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <task_Supervision+0x628>)
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800253a:	2300      	movs	r3, #0
 800253c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002540:	f007 fd32 	bl	8009fa8 <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 8002544:	4b15      	ldr	r3, [pc, #84]	; (800259c <task_Supervision+0x624>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800254c:	4618      	mov	r0, r3
 800254e:	f007 ffa5 	bl	800a49c <xQueueSemaphoreTake>

	#if MICROROS
		MsgToPub.dir = dir;
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <task_Supervision+0x62c>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	723b      	strb	r3, [r7, #8]
		MsgToPub.mode = mode;
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <task_Supervision+0x630>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
		MsgToPub.speed = speed;
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <task_Supervision+0x634>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	613b      	str	r3, [r7, #16]
		if (!uxQueueMessagesWaiting(qhMR_pub))
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <task_Supervision+0x638>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f008 f8a3 	bl	800a6b4 <uxQueueMessagesWaiting>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d108      	bne.n	8002586 <task_Supervision+0x60e>
			xQueueSend(qhMR_pub, ( void * ) &MsgToPub, portMAX_DELAY);
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <task_Supervision+0x638>)
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	f107 0108 	add.w	r1, r7, #8
 800257c:	2300      	movs	r3, #0
 800257e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002582:	f007 fd11 	bl	8009fa8 <xQueueGenericSend>
			pxMessage.command=dir;
			xQueueSend( qhLCD, ( void * ) &pxMessage, portMAX_DELAY);
		}
	#endif //LCD

		vTaskDelay(SAMPLING_PERIOD_ms);
 8002586:	2005      	movs	r0, #5
 8002588:	f008 fbf0 	bl	800ad6c <vTaskDelay>
		if (uxQueueMessagesWaiting(qhMR_sub))
 800258c:	e4fa      	b.n	8001f84 <task_Supervision+0xc>
 800258e:	bf00      	nop
 8002590:	20004be4 	.word	0x20004be4
 8002594:	20004be8 	.word	0x20004be8
 8002598:	20004bc8 	.word	0x20004bc8
 800259c:	20004bc4 	.word	0x20004bc4
 80025a0:	20004bcc 	.word	0x20004bcc
 80025a4:	20000008 	.word	0x20000008
 80025a8:	20004be0 	.word	0x20004be0
 80025ac:	20000004 	.word	0x20000004
 80025b0:	20004bd4 	.word	0x20004bd4

080025b4 <main>:
#endif //SYNCHRO_EX
}

//=========================================================================
int main(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af02      	add	r7, sp, #8
  HAL_Init();
 80025ba:	f001 fa93 	bl	8003ae4 <HAL_Init>
  SystemClock_Config();
 80025be:	f001 f9fd 	bl	80039bc <SystemClock_Config>
  MX_GPIO_Init();
 80025c2:	f7fe ffdb 	bl	800157c <MX_GPIO_Init>
  MX_DMA_Init();
 80025c6:	f7ff f8f5 	bl	80017b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80025ca:	f7ff f8c9 	bl	8001760 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80025ce:	f7ff f86f 	bl	80016b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80025d2:	f7ff f89b 	bl	800170c <MX_USART1_UART_Init>

  RetargetInit(&huart2); //make printf and scanf work with uart2
 80025d6:	4845      	ldr	r0, [pc, #276]	; (80026ec <main+0x138>)
 80025d8:	f000 fc8c 	bl	8002ef4 <RetargetInit>
  printf("%cc%c[2J%c[0;0HTitouan//Jeremy//Louanne\r\n", 0x1b, 0x1b, 0x1b);
 80025dc:	231b      	movs	r3, #27
 80025de:	221b      	movs	r2, #27
 80025e0:	211b      	movs	r1, #27
 80025e2:	4843      	ldr	r0, [pc, #268]	; (80026f0 <main+0x13c>)
 80025e4:	f015 fdf8 	bl	80181d8 <iprintf>

  motorCommand_Init();
 80025e8:	f000 fa5e 	bl	8002aa8 <motorCommand_Init>
  quadEncoder_Init();
 80025ec:	f000 fad6 	bl	8002b9c <quadEncoder_Init>
  captDistIR_Init();
 80025f0:	f7fe fc4a 	bl	8000e88 <captDistIR_Init>

  HAL_Delay(500);
 80025f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025f8:	f001 fab6 	bl	8003b68 <HAL_Delay>
  groveLCD_setColor(1);
  groveLCD_term_printf("Titouan//Jeremy//Louanne");
  HAL_Delay(1000);
#endif

  osKernelInitialize();
 80025fc:	f007 fa48 	bl	8009a90 <osKernelInitialize>
	xTaskCreate(test_vl53, ( const portCHAR * ) "test_vl53", 128 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXTEST_MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXFINAL
	#if MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, 24, NULL);
 8002600:	2300      	movs	r3, #0
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	2318      	movs	r3, #24
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2300      	movs	r3, #0
 800260a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800260e:	4939      	ldr	r1, [pc, #228]	; (80026f4 <main+0x140>)
 8002610:	4839      	ldr	r0, [pc, #228]	; (80026f8 <main+0x144>)
 8002612:	f008 fa50 	bl	800aab6 <xTaskCreate>
	#endif //MICROROS
    xTaskCreate(task_Supervision, ( const portCHAR * ) "task Supervision", 128 /* stack size */, NULL, 27, NULL);
 8002616:	2300      	movs	r3, #0
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	231b      	movs	r3, #27
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2300      	movs	r3, #0
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	4936      	ldr	r1, [pc, #216]	; (80026fc <main+0x148>)
 8002624:	4836      	ldr	r0, [pc, #216]	; (8002700 <main+0x14c>)
 8002626:	f008 fa46 	bl	800aab6 <xTaskCreate>
	xTaskCreate(task_Motor_Left, ( const portCHAR * ) "task Motor Left", 128 /* stack size */, NULL, 25, NULL);
 800262a:	2300      	movs	r3, #0
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	2319      	movs	r3, #25
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2300      	movs	r3, #0
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	4933      	ldr	r1, [pc, #204]	; (8002704 <main+0x150>)
 8002638:	4833      	ldr	r0, [pc, #204]	; (8002708 <main+0x154>)
 800263a:	f008 fa3c 	bl	800aab6 <xTaskCreate>
	xTaskCreate(task_Motor_Right, ( const portCHAR * ) "task Motor Right", 128 /* stack size */, NULL, 26, NULL);
 800263e:	2300      	movs	r3, #0
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	231a      	movs	r3, #26
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2300      	movs	r3, #0
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	4930      	ldr	r1, [pc, #192]	; (800270c <main+0x158>)
 800264c:	4830      	ldr	r0, [pc, #192]	; (8002710 <main+0x15c>)
 800264e:	f008 fa32 	bl	800aab6 <xTaskCreate>
	#if LCD
	xTaskCreate(task_Grove_LCD, ( const portCHAR * ) "task LCD", 128 /* stack size */, NULL, 23, NULL);
	#endif
#endif

    vSemaphoreCreateBinary(xSem_Supervision);
 8002652:	2203      	movs	r2, #3
 8002654:	2100      	movs	r1, #0
 8002656:	2001      	movs	r0, #1
 8002658:	f007 fc48 	bl	8009eec <xQueueGenericCreate>
 800265c:	4603      	mov	r3, r0
 800265e:	4a2d      	ldr	r2, [pc, #180]	; (8002714 <main+0x160>)
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <main+0x160>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d006      	beq.n	8002678 <main+0xc4>
 800266a:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <main+0x160>)
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	2300      	movs	r3, #0
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	f007 fc98 	bl	8009fa8 <xQueueGenericSend>
    xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <main+0x160>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002680:	4618      	mov	r0, r3
 8002682:	f007 ff0b 	bl	800a49c <xQueueSemaphoreTake>

    q_mot_L = xQueueCreate(1, sizeof(int16_t));
 8002686:	2200      	movs	r2, #0
 8002688:	2102      	movs	r1, #2
 800268a:	2001      	movs	r0, #1
 800268c:	f007 fc2e 	bl	8009eec <xQueueGenericCreate>
 8002690:	4603      	mov	r3, r0
 8002692:	4a21      	ldr	r2, [pc, #132]	; (8002718 <main+0x164>)
 8002694:	6013      	str	r3, [r2, #0]
    q_mot_R = xQueueCreate(1, sizeof(int16_t));
 8002696:	2200      	movs	r2, #0
 8002698:	2102      	movs	r1, #2
 800269a:	2001      	movs	r0, #1
 800269c:	f007 fc26 	bl	8009eec <xQueueGenericCreate>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4a1e      	ldr	r2, [pc, #120]	; (800271c <main+0x168>)
 80026a4:	6013      	str	r3, [r2, #0]
    qhVl53 = xQueueCreate(1, sizeof(int));
 80026a6:	2200      	movs	r2, #0
 80026a8:	2104      	movs	r1, #4
 80026aa:	2001      	movs	r0, #1
 80026ac:	f007 fc1e 	bl	8009eec <xQueueGenericCreate>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <main+0x16c>)
 80026b4:	6013      	str	r3, [r2, #0]

    qhMR_sub = xQueueCreate(1, sizeof(MicroRosSubMsg));
 80026b6:	2200      	movs	r2, #0
 80026b8:	2114      	movs	r1, #20
 80026ba:	2001      	movs	r0, #1
 80026bc:	f007 fc16 	bl	8009eec <xQueueGenericCreate>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4a18      	ldr	r2, [pc, #96]	; (8002724 <main+0x170>)
 80026c4:	6013      	str	r3, [r2, #0]
    qhMR_pub = xQueueCreate(1, sizeof(MicroRosPubMsg));
 80026c6:	2200      	movs	r2, #0
 80026c8:	210c      	movs	r1, #12
 80026ca:	2001      	movs	r0, #1
 80026cc:	f007 fc0e 	bl	8009eec <xQueueGenericCreate>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4a15      	ldr	r2, [pc, #84]	; (8002728 <main+0x174>)
 80026d4:	6013      	str	r3, [r2, #0]
    qhLCD = xQueueCreate(1, sizeof(AMessage));
 80026d6:	2200      	movs	r2, #0
 80026d8:	2108      	movs	r1, #8
 80026da:	2001      	movs	r0, #1
 80026dc:	f007 fc06 	bl	8009eec <xQueueGenericCreate>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <main+0x178>)
 80026e4:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80026e6:	f007 f9f7 	bl	8009ad8 <osKernelStart>
  while(1)
 80026ea:	e7fe      	b.n	80026ea <main+0x136>
 80026ec:	20004a00 	.word	0x20004a00
 80026f0:	08019728 	.word	0x08019728
 80026f4:	08019754 	.word	0x08019754
 80026f8:	0800188d 	.word	0x0800188d
 80026fc:	08019764 	.word	0x08019764
 8002700:	08001f79 	.word	0x08001f79
 8002704:	08019778 	.word	0x08019778
 8002708:	08001d79 	.word	0x08001d79
 800270c:	08019788 	.word	0x08019788
 8002710:	08001e79 	.word	0x08001e79
 8002714:	20004bc4 	.word	0x20004bc4
 8002718:	20004bc8 	.word	0x20004bc8
 800271c:	20004bcc 	.word	0x20004bcc
 8002720:	20004bdc 	.word	0x20004bdc
 8002724:	20004bd0 	.word	0x20004bd0
 8002728:	20004bd4 	.word	0x20004bd4
 800272c:	20004bd8 	.word	0x20004bd8

08002730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d101      	bne.n	8002746 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002742:	f001 f9f1 	bl	8003b28 <HAL_IncTick>
  }
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40000800 	.word	0x40000800

08002754 <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002758:	b672      	cpsid	i
}
 800275a:	bf00      	nop
  __disable_irq();
  while (1)
 800275c:	e7fe      	b.n	800275c <Error_Handler+0x8>
	...

08002760 <createPublisher>:
void createPublisher(rcl_publisher_t* publisher,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
	rcl_ret_t ret = rclc_publisher_init_default(publisher, node, type_support, topic_name);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f00a ffd5 	bl	800d724 <rclc_publisher_init_default>
 800277a:	6178      	str	r0, [r7, #20]
	printf("Publisher %s is created with result %d\r\n", topic_name, (int)ret);
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	4804      	ldr	r0, [pc, #16]	; (8002794 <createPublisher+0x34>)
 8002782:	f015 fd29 	bl	80181d8 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
#endif

}
 800278c:	bf00      	nop
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	08019804 	.word	0x08019804

08002798 <createSubscriber>:
void createSubscriber(rcl_subscription_t* subscription,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
	*subscription = rcl_get_zero_initialized_subscription();
 80027a6:	f00a fa75 	bl	800cc94 <rcl_get_zero_initialized_subscription>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	601a      	str	r2, [r3, #0]

	rcl_ret_t ret = rclc_subscription_init_default(subscription, node,
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f00a ffe8 	bl	800d78c <rclc_subscription_init_default>
 80027bc:	6178      	str	r0, [r7, #20]
		type_support, topic_name);
	printf("Subscription %s is created with result %d\r\n", topic_name, (int)ret);
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	6839      	ldr	r1, [r7, #0]
 80027c2:	4805      	ldr	r0, [pc, #20]	; (80027d8 <createSubscriber+0x40>)
 80027c4:	f015 fd08 	bl	80181d8 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
#endif
}
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	08019830 	.word	0x08019830

080027dc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <microros_allocate+0x3c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <microros_allocate+0x3c>)
 80027f4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <microros_allocate+0x40>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	461a      	mov	r2, r3
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <microros_allocate+0x40>)
 8002804:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fbb4 	bl	8000f74 <pvPortMallocMicroROS>
 800280c:	4603      	mov	r3, r0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20004bf0 	.word	0x20004bf0
 800281c:	20004bf4 	.word	0x20004bf4

08002820 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00c      	beq.n	800284a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7fe fcbd 	bl	80011b0 <getBlockSize>
 8002836:	4603      	mov	r3, r0
 8002838:	4a06      	ldr	r2, [pc, #24]	; (8002854 <microros_deallocate+0x34>)
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	461a      	mov	r2, r3
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <microros_deallocate+0x34>)
 8002842:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7fe fc59 	bl	80010fc <vPortFreeMicroROS>
  }
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20004bf4 	.word	0x20004bf4

08002858 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <microros_reallocate+0x64>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4413      	add	r3, r2
 800286e:	461a      	mov	r2, r3
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <microros_reallocate+0x64>)
 8002872:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <microros_reallocate+0x68>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	4413      	add	r3, r2
 800287e:	461a      	mov	r2, r3
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <microros_reallocate+0x68>)
 8002882:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d104      	bne.n	8002894 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800288a:	68b8      	ldr	r0, [r7, #8]
 800288c:	f7fe fb72 	bl	8000f74 <pvPortMallocMicroROS>
 8002890:	4603      	mov	r3, r0
 8002892:	e00e      	b.n	80028b2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7fe fc8b 	bl	80011b0 <getBlockSize>
 800289a:	4603      	mov	r3, r0
 800289c:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <microros_reallocate+0x68>)
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <microros_reallocate+0x68>)
 80028a6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7fe fc9e 	bl	80011ec <pvPortReallocMicroROS>
 80028b0:	4603      	mov	r3, r0
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20004bf0 	.word	0x20004bf0
 80028c0:	20004bf4 	.word	0x20004bf4

080028c4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	fb02 f303 	mul.w	r3, r2, r3
 80028d8:	4a0c      	ldr	r2, [pc, #48]	; (800290c <microros_zero_allocate+0x48>)
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	461a      	mov	r2, r3
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <microros_zero_allocate+0x48>)
 80028e2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	4a08      	ldr	r2, [pc, #32]	; (8002910 <microros_zero_allocate+0x4c>)
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <microros_zero_allocate+0x4c>)
 80028f6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7fe fcb0 	bl	8001260 <pvPortCallocMicroROS>
 8002900:	4603      	mov	r3, r0
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20004bf0 	.word	0x20004bf0
 8002910:	20004bf4 	.word	0x20004bf4
 8002914:	00000000 	.word	0x00000000

08002918 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002918:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800292a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800292e:	a320      	add	r3, pc, #128	; (adr r3, 80029b0 <UTILS_NanosecondsToTimespec+0x98>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fe f8da 	bl	8000aec <__aeabi_ldivmod>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002946:	a31a      	add	r3, pc, #104	; (adr r3, 80029b0 <UTILS_NanosecondsToTimespec+0x98>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fe f8ce 	bl	8000aec <__aeabi_ldivmod>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	da20      	bge.n	800299e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <UTILS_NanosecondsToTimespec+0x90>)
 8002962:	fb82 1203 	smull	r1, r2, r2, r3
 8002966:	1712      	asrs	r2, r2, #28
 8002968:	17db      	asrs	r3, r3, #31
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	3301      	adds	r3, #1
 800296e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	6979      	ldr	r1, [r7, #20]
 8002978:	17c8      	asrs	r0, r1, #31
 800297a:	460c      	mov	r4, r1
 800297c:	4605      	mov	r5, r0
 800297e:	ebb2 0804 	subs.w	r8, r2, r4
 8002982:	eb63 0905 	sbc.w	r9, r3, r5
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	4906      	ldr	r1, [pc, #24]	; (80029ac <UTILS_NanosecondsToTimespec+0x94>)
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	441a      	add	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	609a      	str	r2, [r3, #8]
    }
}
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029a8:	44b82fa1 	.word	0x44b82fa1
 80029ac:	3b9aca00 	.word	0x3b9aca00
 80029b0:	3b9aca00 	.word	0x3b9aca00
 80029b4:	00000000 	.word	0x00000000

080029b8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b08e      	sub	sp, #56	; 0x38
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6278      	str	r0, [r7, #36]	; 0x24
 80029c2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80029c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029c8:	2300      	movs	r3, #0
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80029da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029de:	4618      	mov	r0, r3
 80029e0:	f008 fcf6 	bl	800b3d0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	17da      	asrs	r2, r3, #31
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	61fa      	str	r2, [r7, #28]
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	69b9      	ldr	r1, [r7, #24]
 80029f6:	000b      	movs	r3, r1
 80029f8:	2200      	movs	r2, #0
 80029fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	2200      	movs	r2, #0
 8002a02:	461c      	mov	r4, r3
 8002a04:	4615      	mov	r5, r2
 8002a06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a0a:	1911      	adds	r1, r2, r4
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	416b      	adcs	r3, r5
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002a16:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002a1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	f04f 0400 	mov.w	r4, #0
 8002a26:	f04f 0500 	mov.w	r5, #0
 8002a2a:	015d      	lsls	r5, r3, #5
 8002a2c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002a30:	0154      	lsls	r4, r2, #5
 8002a32:	4622      	mov	r2, r4
 8002a34:	462b      	mov	r3, r5
 8002a36:	ebb2 0800 	subs.w	r8, r2, r0
 8002a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002a4a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002a4e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002a52:	4690      	mov	r8, r2
 8002a54:	4699      	mov	r9, r3
 8002a56:	eb18 0a00 	adds.w	sl, r8, r0
 8002a5a:	eb49 0b01 	adc.w	fp, r9, r1
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a6a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a6e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a72:	ebb2 040a 	subs.w	r4, r2, sl
 8002a76:	603c      	str	r4, [r7, #0]
 8002a78:	eb63 030b 	sbc.w	r3, r3, fp
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a82:	4623      	mov	r3, r4
 8002a84:	181b      	adds	r3, r3, r0
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	462b      	mov	r3, r5
 8002a8a:	eb41 0303 	adc.w	r3, r1, r3
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	6a3a      	ldr	r2, [r7, #32]
 8002a92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a96:	f7ff ff3f 	bl	8002918 <UTILS_NanosecondsToTimespec>

    return 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3738      	adds	r7, #56	; 0x38
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002aa8 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 8002ab2:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <motorCommand_Init+0x9c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <motorCommand_Init+0xa0>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	0d9b      	lsrs	r3, r3, #22
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <motorCommand_Init+0xa4>)
 8002ac4:	4a22      	ldr	r2, [pc, #136]	; (8002b50 <motorCommand_Init+0xa8>)
 8002ac6:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8002ac8:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <motorCommand_Init+0xa4>)
 8002aca:	22c7      	movs	r2, #199	; 0xc7
 8002acc:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 8002ace:	4a1f      	ldr	r2, [pc, #124]	; (8002b4c <motorCommand_Init+0xa4>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <motorCommand_Init+0xa4>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <motorCommand_Init+0xa4>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8002ae0:	481a      	ldr	r0, [pc, #104]	; (8002b4c <motorCommand_Init+0xa4>)
 8002ae2:	f004 fc9f 	bl	8007424 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae6:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <motorCommand_Init+0xac>)
 8002ae8:	2260      	movs	r2, #96	; 0x60
 8002aea:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <motorCommand_Init+0xac>)
 8002aee:	2205      	movs	r2, #5
 8002af0:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002af2:	4b18      	ldr	r3, [pc, #96]	; (8002b54 <motorCommand_Init+0xac>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <motorCommand_Init+0xac>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 8002afe:	2200      	movs	r2, #0
 8002b00:	4914      	ldr	r1, [pc, #80]	; (8002b54 <motorCommand_Init+0xac>)
 8002b02:	4812      	ldr	r0, [pc, #72]	; (8002b4c <motorCommand_Init+0xa4>)
 8002b04:	f005 f840 	bl	8007b88 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8002b08:	2204      	movs	r2, #4
 8002b0a:	4912      	ldr	r1, [pc, #72]	; (8002b54 <motorCommand_Init+0xac>)
 8002b0c:	480f      	ldr	r0, [pc, #60]	; (8002b4c <motorCommand_Init+0xa4>)
 8002b0e:	f005 f83b 	bl	8007b88 <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <motorCommand_Init+0xa4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2264      	movs	r2, #100	; 0x64
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <motorCommand_Init+0xa4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2264      	movs	r2, #100	; 0x64
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 8002b22:	2100      	movs	r1, #0
 8002b24:	4809      	ldr	r0, [pc, #36]	; (8002b4c <motorCommand_Init+0xa4>)
 8002b26:	f004 fd39 	bl	800759c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 8002b2a:	2104      	movs	r1, #4
 8002b2c:	4807      	ldr	r0, [pc, #28]	; (8002b4c <motorCommand_Init+0xa4>)
 8002b2e:	f004 fd35 	bl	800759c <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2108      	movs	r1, #8
 8002b36:	4808      	ldr	r0, [pc, #32]	; (8002b58 <motorCommand_Init+0xb0>)
 8002b38:	f002 f980 	bl	8004e3c <HAL_GPIO_WritePin>
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	2000000c 	.word	0x2000000c
 8002b48:	6b5fca6b 	.word	0x6b5fca6b
 8002b4c:	20004bf8 	.word	0x20004bf8
 8002b50:	40000400 	.word	0x40000400
 8002b54:	20004c40 	.word	0x20004c40
 8002b58:	40020400 	.word	0x40020400

08002b5c <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <motorLeft_SetDuty+0x1c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	20004bf8 	.word	0x20004bf8

08002b7c <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <motorRight_SetDuty+0x1c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	20004bf8 	.word	0x20004bf8

08002b9c <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 8002ba2:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <quadEncoder_Init+0xdc>)
 8002ba4:	4a35      	ldr	r2, [pc, #212]	; (8002c7c <quadEncoder_Init+0xe0>)
 8002ba6:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 8002ba8:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <quadEncoder_Init+0xdc>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bae:	4b32      	ldr	r3, [pc, #200]	; (8002c78 <quadEncoder_Init+0xdc>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <quadEncoder_Init+0xdc>)
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbc:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <quadEncoder_Init+0xdc>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002bce:	2308      	movs	r3, #8
 8002bd0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002bd2:	230f      	movs	r3, #15
 8002bd4:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002bde:	2308      	movs	r3, #8
 8002be0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002be2:	230f      	movs	r3, #15
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 8002be6:	1d3b      	adds	r3, r7, #4
 8002be8:	4619      	mov	r1, r3
 8002bea:	4823      	ldr	r0, [pc, #140]	; (8002c78 <quadEncoder_Init+0xdc>)
 8002bec:	f004 fd86 	bl	80076fc <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8002bf0:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <quadEncoder_Init+0xdc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	481f      	ldr	r0, [pc, #124]	; (8002c78 <quadEncoder_Init+0xdc>)
 8002bfc:	f004 fe2e 	bl	800785c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002c00:	2104      	movs	r1, #4
 8002c02:	481d      	ldr	r0, [pc, #116]	; (8002c78 <quadEncoder_Init+0xdc>)
 8002c04:	f004 fe2a 	bl	800785c <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 8002c08:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <quadEncoder_Init+0xe4>)
 8002c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c0e:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <quadEncoder_Init+0xe4>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <quadEncoder_Init+0xe4>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8002c1c:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <quadEncoder_Init+0xe4>)
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <quadEncoder_Init+0xe4>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c32:	2301      	movs	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002c36:	2308      	movs	r3, #8
 8002c38:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002c3a:	230f      	movs	r3, #15
 8002c3c:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002c42:	2301      	movs	r3, #1
 8002c44:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002c46:	2308      	movs	r3, #8
 8002c48:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002c4a:	230f      	movs	r3, #15
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	4619      	mov	r1, r3
 8002c52:	480b      	ldr	r0, [pc, #44]	; (8002c80 <quadEncoder_Init+0xe4>)
 8002c54:	f004 fd52 	bl	80076fc <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8002c58:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <quadEncoder_Init+0xe4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002c60:	2100      	movs	r1, #0
 8002c62:	4807      	ldr	r0, [pc, #28]	; (8002c80 <quadEncoder_Init+0xe4>)
 8002c64:	f004 fdfa 	bl	800785c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002c68:	2104      	movs	r1, #4
 8002c6a:	4805      	ldr	r0, [pc, #20]	; (8002c80 <quadEncoder_Init+0xe4>)
 8002c6c:	f004 fdf6 	bl	800785c <HAL_TIM_Encoder_Start>
}
 8002c70:	bf00      	nop
 8002c72:	3728      	adds	r7, #40	; 0x28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20004c5c 	.word	0x20004c5c
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	20004ca4 	.word	0x20004ca4

08002c84 <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <quadEncoder_PosCalcL+0x40>)
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f641 129b 	movw	r2, #6555	; 0x199b
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	4a07      	ldr	r2, [pc, #28]	; (8002cc8 <quadEncoder_PosCalcL+0x44>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	601a      	str	r2, [r3, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	10624dd3 	.word	0x10624dd3

08002ccc <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 8002cd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f641 129b 	movw	r2, #6555	; 0x199b
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
 8002cf4:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <quadEncoder_PosCalcR+0x44>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	099b      	lsrs	r3, r3, #6
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	10624dd3 	.word	0x10624dd3

08002d14 <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 8002d18:	4824      	ldr	r0, [pc, #144]	; (8002dac <quadEncoder_GetSpeedL+0x98>)
 8002d1a:	f7ff ffb3 	bl	8002c84 <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 8002d1e:	4b23      	ldr	r3, [pc, #140]	; (8002dac <quadEncoder_GetSpeedL+0x98>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <quadEncoder_GetSpeedL+0x98>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	b21a      	sxth	r2, r3
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <quadEncoder_GetSpeedL+0x9c>)
 8002d32:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 8002d34:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <quadEncoder_GetSpeedL+0x9c>)
 8002d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db10      	blt.n	8002d60 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 8002d3e:	4b1c      	ldr	r3, [pc, #112]	; (8002db0 <quadEncoder_GetSpeedL+0x9c>)
 8002d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d48:	db1a      	blt.n	8002d80 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 8002d4a:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <quadEncoder_GetSpeedL+0x9c>)
 8002d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	b21a      	sxth	r2, r3
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <quadEncoder_GetSpeedL+0x9c>)
 8002d5c:	801a      	strh	r2, [r3, #0]
 8002d5e:	e00f      	b.n	8002d80 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 8002d60:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <quadEncoder_GetSpeedL+0x9c>)
 8002d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d66:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8002d6a:	da09      	bge.n	8002d80 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 8002d6c:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <quadEncoder_GetSpeedL+0x9c>)
 8002d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	b21a      	sxth	r2, r3
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <quadEncoder_GetSpeedL+0x9c>)
 8002d7e:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <quadEncoder_GetSpeedL+0x9c>)
 8002d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <quadEncoder_GetSpeedL+0xa0>)
 8002d92:	fb82 1203 	smull	r1, r2, r2, r3
 8002d96:	1412      	asrs	r2, r2, #16
 8002d98:	17db      	asrs	r3, r3, #31
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b21a      	sxth	r2, r3
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <quadEncoder_GetSpeedL+0x9c>)
 8002da0:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 8002da2:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <quadEncoder_GetSpeedL+0x9c>)
 8002da4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20004cf4 	.word	0x20004cf4
 8002db0:	20004cfc 	.word	0x20004cfc
 8002db4:	66673335 	.word	0x66673335

08002db8 <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 8002dbc:	4824      	ldr	r0, [pc, #144]	; (8002e50 <quadEncoder_GetSpeedR+0x98>)
 8002dbe:	f7ff ff85 	bl	8002ccc <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 8002dc2:	4b23      	ldr	r3, [pc, #140]	; (8002e50 <quadEncoder_GetSpeedR+0x98>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <quadEncoder_GetSpeedR+0x98>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	b21a      	sxth	r2, r3
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <quadEncoder_GetSpeedR+0x9c>)
 8002dd6:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <quadEncoder_GetSpeedR+0x9c>)
 8002dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	db10      	blt.n	8002e04 <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 8002de2:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <quadEncoder_GetSpeedR+0x9c>)
 8002de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dec:	db1a      	blt.n	8002e24 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 8002dee:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <quadEncoder_GetSpeedR+0x9c>)
 8002df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	b21a      	sxth	r2, r3
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <quadEncoder_GetSpeedR+0x9c>)
 8002e00:	801a      	strh	r2, [r3, #0]
 8002e02:	e00f      	b.n	8002e24 <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <quadEncoder_GetSpeedR+0x9c>)
 8002e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e0a:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8002e0e:	da09      	bge.n	8002e24 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8002e10:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <quadEncoder_GetSpeedR+0x9c>)
 8002e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	b21a      	sxth	r2, r3
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <quadEncoder_GetSpeedR+0x9c>)
 8002e22:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <quadEncoder_GetSpeedR+0x9c>)
 8002e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e30:	fb02 f303 	mul.w	r3, r2, r3
 8002e34:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <quadEncoder_GetSpeedR+0xa0>)
 8002e36:	fb82 1203 	smull	r1, r2, r2, r3
 8002e3a:	1412      	asrs	r2, r2, #16
 8002e3c:	17db      	asrs	r3, r3, #31
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	b21a      	sxth	r2, r3
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <quadEncoder_GetSpeedR+0x9c>)
 8002e44:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 8002e46:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <quadEncoder_GetSpeedR+0x9c>)
 8002e48:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20004d00 	.word	0x20004d00
 8002e54:	20004d08 	.word	0x20004d08
 8002e58:	66673335 	.word	0x66673335

08002e5c <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <quadEncoder_CallbackIndexL+0x44>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b10      	cmp	r3, #16
 8002e6c:	d105      	bne.n	8002e7a <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <quadEncoder_CallbackIndexL+0x48>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <quadEncoder_CallbackIndexL+0x48>)
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	e004      	b.n	8002e84 <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <quadEncoder_CallbackIndexL+0x48>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	4a08      	ldr	r2, [pc, #32]	; (8002ea4 <quadEncoder_CallbackIndexL+0x48>)
 8002e82:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <quadEncoder_CallbackIndexL+0x44>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4804      	ldr	r0, [pc, #16]	; (8002ea0 <quadEncoder_CallbackIndexL+0x44>)
 8002e90:	f004 fce4 	bl	800785c <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002e94:	2104      	movs	r1, #4
 8002e96:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <quadEncoder_CallbackIndexL+0x44>)
 8002e98:	f004 fce0 	bl	800785c <HAL_TIM_Encoder_Start>

}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20004c5c 	.word	0x20004c5c
 8002ea4:	20004cec 	.word	0x20004cec

08002ea8 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8002eac:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <quadEncoder_CallbackIndexR+0x44>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d105      	bne.n	8002ec6 <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <quadEncoder_CallbackIndexR+0x48>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <quadEncoder_CallbackIndexR+0x48>)
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	e004      	b.n	8002ed0 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <quadEncoder_CallbackIndexR+0x48>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <quadEncoder_CallbackIndexR+0x48>)
 8002ece:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <quadEncoder_CallbackIndexR+0x44>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4804      	ldr	r0, [pc, #16]	; (8002eec <quadEncoder_CallbackIndexR+0x44>)
 8002edc:	f004 fcbe 	bl	800785c <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002ee0:	2104      	movs	r1, #4
 8002ee2:	4802      	ldr	r0, [pc, #8]	; (8002eec <quadEncoder_CallbackIndexR+0x44>)
 8002ee4:	f004 fcba 	bl	800785c <HAL_TIM_Encoder_Start>

}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20004ca4 	.word	0x20004ca4
 8002ef0:	20004cf0 	.word	0x20004cf0

08002ef4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002efc:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <RetargetInit+0x28>)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <RetargetInit+0x2c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6898      	ldr	r0, [r3, #8]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	f015 f975 	bl	80181fc <setvbuf>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20004d0c 	.word	0x20004d0c
 8002f20:	200000cc 	.word	0x200000cc

08002f24 <_isatty>:

int _isatty(int fd) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	db04      	blt.n	8002f3c <_isatty+0x18>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	dc01      	bgt.n	8002f3c <_isatty+0x18>
    return 1;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e005      	b.n	8002f48 <_isatty+0x24>

  errno = EBADF;
 8002f3c:	f015 fc56 	bl	80187ec <__errno>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2209      	movs	r2, #9
 8002f44:	601a      	str	r2, [r3, #0]
  return 0;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <_write>:

int _write(int fd, char* ptr, int len) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d002      	beq.n	8002f68 <_write+0x18>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d111      	bne.n	8002f8c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <_write+0x54>)
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	f005 f983 	bl	8008280 <HAL_UART_Transmit>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <_write+0x38>
      return len;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	e008      	b.n	8002f9a <_write+0x4a>
    else
      return EIO;
 8002f88:	2305      	movs	r3, #5
 8002f8a:	e006      	b.n	8002f9a <_write+0x4a>
  }
  errno = EBADF;
 8002f8c:	f015 fc2e 	bl	80187ec <__errno>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2209      	movs	r2, #9
 8002f94:	601a      	str	r2, [r3, #0]
  return -1;
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20004d0c 	.word	0x20004d0c

08002fa8 <_close>:

int _close(int fd) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	db04      	blt.n	8002fc0 <_close+0x18>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	dc01      	bgt.n	8002fc0 <_close+0x18>
    return 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e006      	b.n	8002fce <_close+0x26>

  errno = EBADF;
 8002fc0:	f015 fc14 	bl	80187ec <__errno>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2209      	movs	r2, #9
 8002fc8:	601a      	str	r2, [r3, #0]
  return -1;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002fe2:	f015 fc03 	bl	80187ec <__errno>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2209      	movs	r2, #9
 8002fea:	601a      	str	r2, [r3, #0]
  return -1;
 8002fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_read>:

int _read(int fd, char* ptr, int len) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d110      	bne.n	800302c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <_read+0x4c>)
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003012:	2201      	movs	r2, #1
 8003014:	68b9      	ldr	r1, [r7, #8]
 8003016:	f005 f9c5 	bl	80083a4 <HAL_UART_Receive>
 800301a:	4603      	mov	r3, r0
 800301c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <_read+0x30>
      return 1;
 8003024:	2301      	movs	r3, #1
 8003026:	e008      	b.n	800303a <_read+0x42>
    else
      return EIO;
 8003028:	2305      	movs	r3, #5
 800302a:	e006      	b.n	800303a <_read+0x42>
  }
  errno = EBADF;
 800302c:	f015 fbde 	bl	80187ec <__errno>
 8003030:	4603      	mov	r3, r0
 8003032:	2209      	movs	r2, #9
 8003034:	601a      	str	r2, [r3, #0]
  return -1;
 8003036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	20004d0c 	.word	0x20004d0c

08003048 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	db08      	blt.n	800306a <_fstat+0x22>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	dc05      	bgt.n	800306a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003064:	605a      	str	r2, [r3, #4]
    return 0;
 8003066:	2300      	movs	r3, #0
 8003068:	e005      	b.n	8003076 <_fstat+0x2e>
  }

  errno = EBADF;
 800306a:	f015 fbbf 	bl	80187ec <__errno>
 800306e:	4603      	mov	r3, r0
 8003070:	2209      	movs	r2, #9
 8003072:	601a      	str	r2, [r3, #0]
  return 0;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <_getpid>:

int _getpid(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
	return 1;
 8003082:	2301      	movs	r3, #1
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <_kill>:

int _kill(int pid, int sig)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003098:	f015 fba8 	bl	80187ec <__errno>
 800309c:	4603      	mov	r3, r0
 800309e:	2216      	movs	r2, #22
 80030a0:	601a      	str	r2, [r3, #0]
	return -1;
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_MspInit>:
void HAL_Encoder_Timer1_MspInit(void);
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);

void HAL_MspInit(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	4b33      	ldr	r3, [pc, #204]	; (8003188 <HAL_MspInit+0xd8>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	4a32      	ldr	r2, [pc, #200]	; (8003188 <HAL_MspInit+0xd8>)
 80030c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c4:	6453      	str	r3, [r2, #68]	; 0x44
 80030c6:	4b30      	ldr	r3, [pc, #192]	; (8003188 <HAL_MspInit+0xd8>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	4b2c      	ldr	r3, [pc, #176]	; (8003188 <HAL_MspInit+0xd8>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <HAL_MspInit+0xd8>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e0:	6413      	str	r3, [r2, #64]	; 0x40
 80030e2:	4b29      	ldr	r3, [pc, #164]	; (8003188 <HAL_MspInit+0xd8>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b25      	ldr	r3, [pc, #148]	; (8003188 <HAL_MspInit+0xd8>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	4a24      	ldr	r2, [pc, #144]	; (8003188 <HAL_MspInit+0xd8>)
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	6313      	str	r3, [r2, #48]	; 0x30
 80030fe:	4b22      	ldr	r3, [pc, #136]	; (8003188 <HAL_MspInit+0xd8>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <HAL_MspInit+0xd8>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_MspInit+0xd8>)
 8003114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_MspInit+0xd8>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	4b17      	ldr	r3, [pc, #92]	; (8003188 <HAL_MspInit+0xd8>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a16      	ldr	r2, [pc, #88]	; (8003188 <HAL_MspInit+0xd8>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b14      	ldr	r3, [pc, #80]	; (8003188 <HAL_MspInit+0xd8>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_MspInit+0xd8>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	4a0f      	ldr	r2, [pc, #60]	; (8003188 <HAL_MspInit+0xd8>)
 800314c:	f043 0302 	orr.w	r3, r3, #2
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <HAL_MspInit+0xd8>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	210f      	movs	r1, #15
 8003162:	f06f 0001 	mvn.w	r0, #1
 8003166:	f001 f8ab 	bl	80042c0 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 800316a:	f000 f895 	bl	8003298 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 800316e:	f000 f815 	bl	800319c <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 8003172:	f000 f853 	bl	800321c <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 8003176:	f000 f8ed 	bl	8003354 <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 800317a:	f000 f807 	bl	800318c <HAL_GPIO_MspInit>

}
 800317e:	bf00      	nop
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800

0800318c <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
	  //GPIO_InitStruct.Pull = GPIO_NOPULL;
	  //GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;

	  //HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <HAL_Encoder_Timer1_MspInit+0x74>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	4a19      	ldr	r2, [pc, #100]	; (8003210 <HAL_Encoder_Timer1_MspInit+0x74>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6453      	str	r3, [r2, #68]	; 0x44
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <HAL_Encoder_Timer1_MspInit+0x74>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80031be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031c2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 80031c4:	2302      	movs	r3, #2
 80031c6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c8:	2301      	movs	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80031cc:	2301      	movs	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 80031d0:	2301      	movs	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	4619      	mov	r1, r3
 80031d8:	480e      	ldr	r0, [pc, #56]	; (8003214 <HAL_Encoder_Timer1_MspInit+0x78>)
 80031da:	f001 fcab 	bl	8004b34 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80031e8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4809      	ldr	r0, [pc, #36]	; (8003218 <HAL_Encoder_Timer1_MspInit+0x7c>)
 80031f4:	f001 fc9e 	bl	8004b34 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 80031f8:	2200      	movs	r2, #0
 80031fa:	2107      	movs	r1, #7
 80031fc:	2028      	movs	r0, #40	; 0x28
 80031fe:	f001 f85f 	bl	80042c0 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003202:	2028      	movs	r0, #40	; 0x28
 8003204:	f001 f878 	bl	80042f8 <HAL_NVIC_EnableIRQ>
}
 8003208:	bf00      	nop
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	40020000 	.word	0x40020000
 8003218:	40020400 	.word	0x40020400

0800321c <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_Encoder_Timer2_MspInit+0x70>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a18      	ldr	r2, [pc, #96]	; (800328c <HAL_Encoder_Timer2_MspInit+0x70>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <HAL_Encoder_Timer2_MspInit+0x70>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800323e:	2303      	movs	r3, #3
 8003240:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003242:	2302      	movs	r3, #2
 8003244:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003246:	2301      	movs	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800324a:	2301      	movs	r3, #1
 800324c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 800324e:	2301      	movs	r3, #1
 8003250:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003252:	1d3b      	adds	r3, r7, #4
 8003254:	4619      	mov	r1, r3
 8003256:	480e      	ldr	r0, [pc, #56]	; (8003290 <HAL_Encoder_Timer2_MspInit+0x74>)
 8003258:	f001 fc6c 	bl	8004b34 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800325c:	2301      	movs	r3, #1
 800325e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003260:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003264:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800326a:	1d3b      	adds	r3, r7, #4
 800326c:	4619      	mov	r1, r3
 800326e:	4809      	ldr	r0, [pc, #36]	; (8003294 <HAL_Encoder_Timer2_MspInit+0x78>)
 8003270:	f001 fc60 	bl	8004b34 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	2106      	movs	r1, #6
 8003278:	2006      	movs	r0, #6
 800327a:	f001 f821 	bl	80042c0 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800327e:	2006      	movs	r0, #6
 8003280:	f001 f83a 	bl	80042f8 <HAL_NVIC_EnableIRQ>
}
 8003284:	bf00      	nop
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40023800 	.word	0x40023800
 8003290:	40020000 	.word	0x40020000
 8003294:	40020800 	.word	0x40020800

08003298 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	4b28      	ldr	r3, [pc, #160]	; (8003344 <HAL_PWM_Timer3_MspInit+0xac>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a27      	ldr	r2, [pc, #156]	; (8003344 <HAL_PWM_Timer3_MspInit+0xac>)
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_PWM_Timer3_MspInit+0xac>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032ba:	2340      	movs	r3, #64	; 0x40
 80032bc:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032c2:	2301      	movs	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80032c6:	2301      	movs	r3, #1
 80032c8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80032ca:	2302      	movs	r3, #2
 80032cc:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	4619      	mov	r1, r3
 80032d2:	481d      	ldr	r0, [pc, #116]	; (8003348 <HAL_PWM_Timer3_MspInit+0xb0>)
 80032d4:	f001 fc2e 	bl	8004b34 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032dc:	2302      	movs	r3, #2
 80032de:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e0:	2301      	movs	r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80032e4:	2301      	movs	r3, #1
 80032e6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80032e8:	2302      	movs	r3, #2
 80032ea:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	4619      	mov	r1, r3
 80032f0:	4816      	ldr	r0, [pc, #88]	; (800334c <HAL_PWM_Timer3_MspInit+0xb4>)
 80032f2:	f001 fc1f 	bl	8004b34 <HAL_GPIO_Init>

	  // ENABLE MOTEUR : SORTIE LOGIQUE PB3
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	4619      	mov	r1, r3
 8003306:	4810      	ldr	r0, [pc, #64]	; (8003348 <HAL_PWM_Timer3_MspInit+0xb0>)
 8003308:	f001 fc14 	bl	8004b34 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 800330c:	2201      	movs	r2, #1
 800330e:	2180      	movs	r1, #128	; 0x80
 8003310:	480d      	ldr	r0, [pc, #52]	; (8003348 <HAL_PWM_Timer3_MspInit+0xb0>)
 8003312:	f001 fd93 	bl	8004e3c <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003316:	2308      	movs	r3, #8
 8003318:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800331a:	2301      	movs	r3, #1
 800331c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800331e:	2301      	movs	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003322:	2302      	movs	r3, #2
 8003324:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4809      	ldr	r0, [pc, #36]	; (8003350 <HAL_PWM_Timer3_MspInit+0xb8>)
 800332c:	f001 fc02 	bl	8004b34 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8003330:	2201      	movs	r2, #1
 8003332:	2108      	movs	r1, #8
 8003334:	4806      	ldr	r0, [pc, #24]	; (8003350 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003336:	f001 fd81 	bl	8004e3c <HAL_GPIO_WritePin>




}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800
 8003348:	40020000 	.word	0x40020000
 800334c:	40020800 	.word	0x40020800
 8003350:	40020400 	.word	0x40020400

08003354 <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <HAL_adcir_MspInit+0x58>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <HAL_adcir_MspInit+0x58>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	6453      	str	r3, [r2, #68]	; 0x44
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <HAL_adcir_MspInit+0x58>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 8003376:	2310      	movs	r3, #16
 8003378:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800337a:	2303      	movs	r3, #3
 800337c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	4619      	mov	r1, r3
 8003386:	480a      	ldr	r0, [pc, #40]	; (80033b0 <HAL_adcir_MspInit+0x5c>)
 8003388:	f001 fbd4 	bl	8004b34 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 800338c:	2301      	movs	r3, #1
 800338e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003390:	2303      	movs	r3, #3
 8003392:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	4619      	mov	r1, r3
 800339c:	4805      	ldr	r0, [pc, #20]	; (80033b4 <HAL_adcir_MspInit+0x60>)
 800339e:	f001 fbc9 	bl	8004b34 <HAL_GPIO_Init>

}
 80033a2:	bf00      	nop
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40020000 	.word	0x40020000
 80033b4:	40020400 	.word	0x40020400

080033b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a21      	ldr	r2, [pc, #132]	; (800345c <HAL_I2C_MspInit+0xa4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d13c      	bne.n	8003454 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b20      	ldr	r3, [pc, #128]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 80033e4:	f043 0302 	orr.w	r3, r3, #2
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033fc:	2312      	movs	r3, #18
 80033fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003404:	2303      	movs	r3, #3
 8003406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003408:	2304      	movs	r3, #4
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4619      	mov	r1, r3
 8003412:	4814      	ldr	r0, [pc, #80]	; (8003464 <HAL_I2C_MspInit+0xac>)
 8003414:	f001 fb8e 	bl	8004b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	4a0f      	ldr	r2, [pc, #60]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 8003422:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003426:	6413      	str	r3, [r2, #64]	; 0x40
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8003434:	2200      	movs	r2, #0
 8003436:	2102      	movs	r1, #2
 8003438:	2020      	movs	r0, #32
 800343a:	f000 ff41 	bl	80042c0 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800343e:	2020      	movs	r0, #32
 8003440:	f000 ff5a 	bl	80042f8 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8003444:	2200      	movs	r2, #0
 8003446:	210b      	movs	r1, #11
 8003448:	201f      	movs	r0, #31
 800344a:	f000 ff39 	bl	80042c0 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800344e:	201f      	movs	r0, #31
 8003450:	f000 ff52 	bl	80042f8 <HAL_NVIC_EnableIRQ>



  }

}
 8003454:	bf00      	nop
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40005400 	.word	0x40005400
 8003460:	40023800 	.word	0x40023800
 8003464:	40020400 	.word	0x40020400

08003468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08c      	sub	sp, #48	; 0x30
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003470:	f107 031c 	add.w	r3, r7, #28
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4aa2      	ldr	r2, [pc, #648]	; (8003710 <HAL_UART_MspInit+0x2a8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	f040 80a5 	bne.w	80035d6 <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	4ba0      	ldr	r3, [pc, #640]	; (8003714 <HAL_UART_MspInit+0x2ac>)
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	4a9f      	ldr	r2, [pc, #636]	; (8003714 <HAL_UART_MspInit+0x2ac>)
 8003496:	f043 0310 	orr.w	r3, r3, #16
 800349a:	6453      	str	r3, [r2, #68]	; 0x44
 800349c:	4b9d      	ldr	r3, [pc, #628]	; (8003714 <HAL_UART_MspInit+0x2ac>)
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	4b99      	ldr	r3, [pc, #612]	; (8003714 <HAL_UART_MspInit+0x2ac>)
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	4a98      	ldr	r2, [pc, #608]	; (8003714 <HAL_UART_MspInit+0x2ac>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6313      	str	r3, [r2, #48]	; 0x30
 80034b8:	4b96      	ldr	r3, [pc, #600]	; (8003714 <HAL_UART_MspInit+0x2ac>)
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034d6:	2307      	movs	r3, #7
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034da:	f107 031c 	add.w	r3, r7, #28
 80034de:	4619      	mov	r1, r3
 80034e0:	488d      	ldr	r0, [pc, #564]	; (8003718 <HAL_UART_MspInit+0x2b0>)
 80034e2:	f001 fb27 	bl	8004b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034e6:	2340      	movs	r3, #64	; 0x40
 80034e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ea:	2302      	movs	r3, #2
 80034ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f2:	2303      	movs	r3, #3
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034f6:	2307      	movs	r3, #7
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fa:	f107 031c 	add.w	r3, r7, #28
 80034fe:	4619      	mov	r1, r3
 8003500:	4886      	ldr	r0, [pc, #536]	; (800371c <HAL_UART_MspInit+0x2b4>)
 8003502:	f001 fb17 	bl	8004b34 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003506:	4b86      	ldr	r3, [pc, #536]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 8003508:	4a86      	ldr	r2, [pc, #536]	; (8003724 <HAL_UART_MspInit+0x2bc>)
 800350a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800350c:	4b84      	ldr	r3, [pc, #528]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 800350e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003512:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003514:	4b82      	ldr	r3, [pc, #520]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800351a:	4b81      	ldr	r3, [pc, #516]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 800351c:	2200      	movs	r2, #0
 800351e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003520:	4b7f      	ldr	r3, [pc, #508]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 8003522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003526:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003528:	4b7d      	ldr	r3, [pc, #500]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 800352a:	2200      	movs	r2, #0
 800352c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800352e:	4b7c      	ldr	r3, [pc, #496]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 8003530:	2200      	movs	r2, #0
 8003532:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003534:	4b7a      	ldr	r3, [pc, #488]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 8003536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800353a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800353c:	4b78      	ldr	r3, [pc, #480]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 800353e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003542:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003544:	4b76      	ldr	r3, [pc, #472]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 8003546:	2200      	movs	r2, #0
 8003548:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800354a:	4875      	ldr	r0, [pc, #468]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 800354c:	f000 fee2 	bl	8004314 <HAL_DMA_Init>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8003556:	f7ff f8fd 	bl	8002754 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a70      	ldr	r2, [pc, #448]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 800355e:	639a      	str	r2, [r3, #56]	; 0x38
 8003560:	4a6f      	ldr	r2, [pc, #444]	; (8003720 <HAL_UART_MspInit+0x2b8>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003566:	4b70      	ldr	r3, [pc, #448]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 8003568:	4a70      	ldr	r2, [pc, #448]	; (800372c <HAL_UART_MspInit+0x2c4>)
 800356a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800356c:	4b6e      	ldr	r3, [pc, #440]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 800356e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003572:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003574:	4b6c      	ldr	r3, [pc, #432]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 8003576:	2240      	movs	r2, #64	; 0x40
 8003578:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800357a:	4b6b      	ldr	r3, [pc, #428]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 800357c:	2200      	movs	r2, #0
 800357e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003580:	4b69      	ldr	r3, [pc, #420]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 8003582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003586:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003588:	4b67      	ldr	r3, [pc, #412]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 800358a:	2200      	movs	r2, #0
 800358c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800358e:	4b66      	ldr	r3, [pc, #408]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 8003590:	2200      	movs	r2, #0
 8003592:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003594:	4b64      	ldr	r3, [pc, #400]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 8003596:	2200      	movs	r2, #0
 8003598:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800359a:	4b63      	ldr	r3, [pc, #396]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 800359c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80035a0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035a2:	4b61      	ldr	r3, [pc, #388]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80035a8:	485f      	ldr	r0, [pc, #380]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 80035aa:	f000 feb3 	bl	8004314 <HAL_DMA_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 80035b4:	f7ff f8ce 	bl	8002754 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a5b      	ldr	r2, [pc, #364]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 80035bc:	635a      	str	r2, [r3, #52]	; 0x34
 80035be:	4a5a      	ldr	r2, [pc, #360]	; (8003728 <HAL_UART_MspInit+0x2c0>)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80035c4:	2200      	movs	r2, #0
 80035c6:	2105      	movs	r1, #5
 80035c8:	2025      	movs	r0, #37	; 0x25
 80035ca:	f000 fe79 	bl	80042c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035ce:	2025      	movs	r0, #37	; 0x25
 80035d0:	f000 fe92 	bl	80042f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035d4:	e098      	b.n	8003708 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a55      	ldr	r2, [pc, #340]	; (8003730 <HAL_UART_MspInit+0x2c8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	f040 8093 	bne.w	8003708 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	4b4b      	ldr	r3, [pc, #300]	; (8003714 <HAL_UART_MspInit+0x2ac>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a4a      	ldr	r2, [pc, #296]	; (8003714 <HAL_UART_MspInit+0x2ac>)
 80035ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
 80035f2:	4b48      	ldr	r3, [pc, #288]	; (8003714 <HAL_UART_MspInit+0x2ac>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	4b44      	ldr	r3, [pc, #272]	; (8003714 <HAL_UART_MspInit+0x2ac>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a43      	ldr	r2, [pc, #268]	; (8003714 <HAL_UART_MspInit+0x2ac>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b41      	ldr	r3, [pc, #260]	; (8003714 <HAL_UART_MspInit+0x2ac>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800361a:	230c      	movs	r3, #12
 800361c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361e:	2302      	movs	r3, #2
 8003620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003626:	2303      	movs	r3, #3
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800362a:	2307      	movs	r3, #7
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362e:	f107 031c 	add.w	r3, r7, #28
 8003632:	4619      	mov	r1, r3
 8003634:	4838      	ldr	r0, [pc, #224]	; (8003718 <HAL_UART_MspInit+0x2b0>)
 8003636:	f001 fa7d 	bl	8004b34 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800363a:	4b3e      	ldr	r3, [pc, #248]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 800363c:	4a3e      	ldr	r2, [pc, #248]	; (8003738 <HAL_UART_MspInit+0x2d0>)
 800363e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003640:	4b3c      	ldr	r3, [pc, #240]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 8003642:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003646:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003648:	4b3a      	ldr	r3, [pc, #232]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800364e:	4b39      	ldr	r3, [pc, #228]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 8003650:	2200      	movs	r2, #0
 8003652:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003654:	4b37      	ldr	r3, [pc, #220]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 8003656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800365a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800365c:	4b35      	ldr	r3, [pc, #212]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003662:	4b34      	ldr	r3, [pc, #208]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 8003664:	2200      	movs	r2, #0
 8003666:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003668:	4b32      	ldr	r3, [pc, #200]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 800366a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800366e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003670:	4b30      	ldr	r3, [pc, #192]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 8003672:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003676:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003678:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 800367a:	2200      	movs	r2, #0
 800367c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800367e:	482d      	ldr	r0, [pc, #180]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 8003680:	f000 fe48 	bl	8004314 <HAL_DMA_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_UART_MspInit+0x226>
      Error_Handler();
 800368a:	f7ff f863 	bl	8002754 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a28      	ldr	r2, [pc, #160]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 8003692:	639a      	str	r2, [r3, #56]	; 0x38
 8003694:	4a27      	ldr	r2, [pc, #156]	; (8003734 <HAL_UART_MspInit+0x2cc>)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800369a:	4b28      	ldr	r3, [pc, #160]	; (800373c <HAL_UART_MspInit+0x2d4>)
 800369c:	4a28      	ldr	r2, [pc, #160]	; (8003740 <HAL_UART_MspInit+0x2d8>)
 800369e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80036a0:	4b26      	ldr	r3, [pc, #152]	; (800373c <HAL_UART_MspInit+0x2d4>)
 80036a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_UART_MspInit+0x2d4>)
 80036aa:	2240      	movs	r2, #64	; 0x40
 80036ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ae:	4b23      	ldr	r3, [pc, #140]	; (800373c <HAL_UART_MspInit+0x2d4>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036b4:	4b21      	ldr	r3, [pc, #132]	; (800373c <HAL_UART_MspInit+0x2d4>)
 80036b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036bc:	4b1f      	ldr	r3, [pc, #124]	; (800373c <HAL_UART_MspInit+0x2d4>)
 80036be:	2200      	movs	r2, #0
 80036c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036c2:	4b1e      	ldr	r3, [pc, #120]	; (800373c <HAL_UART_MspInit+0x2d4>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80036c8:	4b1c      	ldr	r3, [pc, #112]	; (800373c <HAL_UART_MspInit+0x2d4>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036ce:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_UART_MspInit+0x2d4>)
 80036d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036d4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036d6:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_UART_MspInit+0x2d4>)
 80036d8:	2200      	movs	r2, #0
 80036da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80036dc:	4817      	ldr	r0, [pc, #92]	; (800373c <HAL_UART_MspInit+0x2d4>)
 80036de:	f000 fe19 	bl	8004314 <HAL_DMA_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_UART_MspInit+0x284>
      Error_Handler();
 80036e8:	f7ff f834 	bl	8002754 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a13      	ldr	r2, [pc, #76]	; (800373c <HAL_UART_MspInit+0x2d4>)
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <HAL_UART_MspInit+0x2d4>)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80036f8:	2200      	movs	r2, #0
 80036fa:	2105      	movs	r1, #5
 80036fc:	2026      	movs	r0, #38	; 0x26
 80036fe:	f000 fddf 	bl	80042c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003702:	2026      	movs	r0, #38	; 0x26
 8003704:	f000 fdf8 	bl	80042f8 <HAL_NVIC_EnableIRQ>
}
 8003708:	bf00      	nop
 800370a:	3730      	adds	r7, #48	; 0x30
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40011000 	.word	0x40011000
 8003714:	40023800 	.word	0x40023800
 8003718:	40020000 	.word	0x40020000
 800371c:	40020400 	.word	0x40020400
 8003720:	20004a44 	.word	0x20004a44
 8003724:	40026440 	.word	0x40026440
 8003728:	20004aa4 	.word	0x20004aa4
 800372c:	400264b8 	.word	0x400264b8
 8003730:	40004400 	.word	0x40004400
 8003734:	20004b04 	.word	0x20004b04
 8003738:	40026088 	.word	0x40026088
 800373c:	20004b64 	.word	0x20004b64
 8003740:	400260a0 	.word	0x400260a0

08003744 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003754:	2300      	movs	r3, #0
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	4b2f      	ldr	r3, [pc, #188]	; (8003818 <HAL_InitTick+0xd4>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	4a2e      	ldr	r2, [pc, #184]	; (8003818 <HAL_InitTick+0xd4>)
 800375e:	f043 0304 	orr.w	r3, r3, #4
 8003762:	6413      	str	r3, [r2, #64]	; 0x40
 8003764:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <HAL_InitTick+0xd4>)
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003770:	f107 020c 	add.w	r2, r7, #12
 8003774:	f107 0310 	add.w	r3, r7, #16
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f003 fe20 	bl	80073c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003780:	f003 fe0a 	bl	8007398 <HAL_RCC_GetPCLK2Freq>
 8003784:	4603      	mov	r3, r0
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	4a23      	ldr	r2, [pc, #140]	; (800381c <HAL_InitTick+0xd8>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	0c9b      	lsrs	r3, r3, #18
 8003794:	3b01      	subs	r3, #1
 8003796:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 8003798:	4b21      	ldr	r3, [pc, #132]	; (8003820 <HAL_InitTick+0xdc>)
 800379a:	4a22      	ldr	r2, [pc, #136]	; (8003824 <HAL_InitTick+0xe0>)
 800379c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800379e:	4b20      	ldr	r3, [pc, #128]	; (8003820 <HAL_InitTick+0xdc>)
 80037a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037a4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80037a6:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <HAL_InitTick+0xdc>)
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80037ac:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <HAL_InitTick+0xdc>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b2:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_InitTick+0xdc>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_InitTick+0xdc>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80037be:	4818      	ldr	r0, [pc, #96]	; (8003820 <HAL_InitTick+0xdc>)
 80037c0:	f003 fe30 	bl	8007424 <HAL_TIM_Base_Init>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80037ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d11b      	bne.n	800380a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80037d2:	4813      	ldr	r0, [pc, #76]	; (8003820 <HAL_InitTick+0xdc>)
 80037d4:	f003 fe80 	bl	80074d8 <HAL_TIM_Base_Start_IT>
 80037d8:	4603      	mov	r3, r0
 80037da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80037de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d111      	bne.n	800380a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037e6:	201e      	movs	r0, #30
 80037e8:	f000 fd86 	bl	80042f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b0f      	cmp	r3, #15
 80037f0:	d808      	bhi.n	8003804 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80037f2:	2200      	movs	r2, #0
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	201e      	movs	r0, #30
 80037f8:	f000 fd62 	bl	80042c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037fc:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <HAL_InitTick+0xe4>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e002      	b.n	800380a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800380a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800380e:	4618      	mov	r0, r3
 8003810:	3730      	adds	r7, #48	; 0x30
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
 800381c:	431bde83 	.word	0x431bde83
 8003820:	20004d10 	.word	0x20004d10
 8003824:	40000800 	.word	0x40000800
 8003828:	20000010 	.word	0x20000010

0800382c <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  while (1)
 8003830:	e7fe      	b.n	8003830 <NMI_Handler+0x4>

08003832 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0

  while (1)
 8003836:	e7fe      	b.n	8003836 <HardFault_Handler+0x4>

08003838 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  while (1)
 800383c:	e7fe      	b.n	800383c <MemManage_Handler+0x4>

0800383e <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0
  while (1)
 8003842:	e7fe      	b.n	8003842 <BusFault_Handler+0x4>

08003844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  while (1)
 8003848:	e7fe      	b.n	8003848 <UsageFault_Handler+0x4>

0800384a <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 800384a:	b480      	push	{r7}
 800384c:	af00      	add	r7, sp, #0
}
 800384e:	bf00      	nop
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <DMA1_Stream5_IRQHandler+0x10>)
 800385e:	f000 fef1 	bl	8004644 <HAL_DMA_IRQHandler>
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20004b04 	.word	0x20004b04

0800386c <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <DMA1_Stream6_IRQHandler+0x10>)
 8003872:	f000 fee7 	bl	8004644 <HAL_DMA_IRQHandler>
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20004b64 	.word	0x20004b64

08003880 <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <TIM4_IRQHandler+0x10>)
 8003886:	f004 f877 	bl	8007978 <HAL_TIM_IRQHandler>
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20004d10 	.word	0x20004d10

08003894 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <USART1_IRQHandler+0x10>)
 800389a:	f004 ff53 	bl	8008744 <HAL_UART_IRQHandler>
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200049bc 	.word	0x200049bc

080038a8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <USART2_IRQHandler+0x10>)
 80038ae:	f004 ff49 	bl	8008744 <HAL_UART_IRQHandler>
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20004a00 	.word	0x20004a00

080038bc <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <DMA2_Stream2_IRQHandler+0x10>)
 80038c2:	f000 febf 	bl	8004644 <HAL_DMA_IRQHandler>
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20004a44 	.word	0x20004a44

080038d0 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <DMA2_Stream7_IRQHandler+0x10>)
 80038d6:	f000 feb5 	bl	8004644 <HAL_DMA_IRQHandler>
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20004aa4 	.word	0x20004aa4

080038e4 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80038e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80038ec:	f001 fac0 	bl	8004e70 <HAL_GPIO_EXTI_IRQHandler>
}
 80038f0:	bf00      	nop
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80038f8:	2001      	movs	r0, #1
 80038fa:	f001 fab9 	bl	8004e70 <HAL_GPIO_EXTI_IRQHandler>
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <I2C1_EV_IRQHandler+0x10>)
 800390a:	f001 fc0d 	bl	8005128 <HAL_I2C_EV_IRQHandler>
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20004968 	.word	0x20004968

08003918 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <I2C1_ER_IRQHandler+0x10>)
 800391e:	f001 fd56 	bl	80053ce <HAL_I2C_ER_IRQHandler>
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20004968 	.word	0x20004968

0800392c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <_sbrk+0x5c>)
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <_sbrk+0x60>)
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <_sbrk+0x64>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <_sbrk+0x64>)
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <_sbrk+0x68>)
 800394c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <_sbrk+0x64>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	429a      	cmp	r2, r3
 800395a:	d207      	bcs.n	800396c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800395c:	f014 ff46 	bl	80187ec <__errno>
 8003960:	4603      	mov	r3, r0
 8003962:	220c      	movs	r2, #12
 8003964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800396a:	e009      	b.n	8003980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <_sbrk+0x64>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <_sbrk+0x64>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	4a05      	ldr	r2, [pc, #20]	; (8003990 <_sbrk+0x64>)
 800397c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800397e:	68fb      	ldr	r3, [r7, #12]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20020000 	.word	0x20020000
 800398c:	00000400 	.word	0x00000400
 8003990:	20004d58 	.word	0x20004d58
 8003994:	2000e850 	.word	0x2000e850

08003998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <SystemInit+0x20>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <SystemInit+0x20>)
 80039a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b094      	sub	sp, #80	; 0x50
 80039c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039c2:	f107 0320 	add.w	r3, r7, #32
 80039c6:	2230      	movs	r2, #48	; 0x30
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f014 fe24 	bl	8018618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039d0:	f107 030c 	add.w	r3, r7, #12
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	2300      	movs	r3, #0
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <SystemClock_Config+0xcc>)
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <SystemClock_Config+0xcc>)
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ee:	6413      	str	r3, [r2, #64]	; 0x40
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <SystemClock_Config+0xcc>)
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039fc:	2300      	movs	r3, #0
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <SystemClock_Config+0xd0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <SystemClock_Config+0xd0>)
 8003a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b1f      	ldr	r3, [pc, #124]	; (8003a8c <SystemClock_Config+0xd0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003a1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a22:	2302      	movs	r3, #2
 8003a24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a2c:	2308      	movs	r3, #8
 8003a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003a30:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8003a34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003a36:	2306      	movs	r3, #6
 8003a38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a3e:	f107 0320 	add.w	r3, r7, #32
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 f824 	bl	8006a90 <HAL_RCC_OscConfig>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003a4e:	f7fe fe81 	bl	8002754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a52:	230f      	movs	r3, #15
 8003a54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a56:	2302      	movs	r3, #2
 8003a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003a64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a6a:	f107 030c 	add.w	r3, r7, #12
 8003a6e:	2102      	movs	r1, #2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f003 fa85 	bl	8006f80 <HAL_RCC_ClockConfig>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003a7c:	f7fe fe6a 	bl	8002754 <Error_Handler>
  }
}
 8003a80:	bf00      	nop
 8003a82:	3750      	adds	r7, #80	; 0x50
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40007000 	.word	0x40007000

08003a90 <Reset_Handler>:
 8003a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ac8 <LoopFillZerobss+0x12>
 8003a94:	480d      	ldr	r0, [pc, #52]	; (8003acc <LoopFillZerobss+0x16>)
 8003a96:	490e      	ldr	r1, [pc, #56]	; (8003ad0 <LoopFillZerobss+0x1a>)
 8003a98:	4a0e      	ldr	r2, [pc, #56]	; (8003ad4 <LoopFillZerobss+0x1e>)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e002      	b.n	8003aa4 <LoopCopyDataInit>

08003a9e <CopyDataInit>:
 8003a9e:	58d4      	ldr	r4, [r2, r3]
 8003aa0:	50c4      	str	r4, [r0, r3]
 8003aa2:	3304      	adds	r3, #4

08003aa4 <LoopCopyDataInit>:
 8003aa4:	18c4      	adds	r4, r0, r3
 8003aa6:	428c      	cmp	r4, r1
 8003aa8:	d3f9      	bcc.n	8003a9e <CopyDataInit>
 8003aaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ad8 <LoopFillZerobss+0x22>)
 8003aac:	4c0b      	ldr	r4, [pc, #44]	; (8003adc <LoopFillZerobss+0x26>)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e001      	b.n	8003ab6 <LoopFillZerobss>

08003ab2 <FillZerobss>:
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	3204      	adds	r2, #4

08003ab6 <LoopFillZerobss>:
 8003ab6:	42a2      	cmp	r2, r4
 8003ab8:	d3fb      	bcc.n	8003ab2 <FillZerobss>
 8003aba:	f7ff ff6d 	bl	8003998 <SystemInit>
 8003abe:	f014 fe9b 	bl	80187f8 <__libc_init_array>
 8003ac2:	f7fe fd77 	bl	80025b4 <main>
 8003ac6:	4770      	bx	lr
 8003ac8:	20020000 	.word	0x20020000
 8003acc:	20000000 	.word	0x20000000
 8003ad0:	200000d4 	.word	0x200000d4
 8003ad4:	0801a400 	.word	0x0801a400
 8003ad8:	200000d8 	.word	0x200000d8
 8003adc:	2000e850 	.word	0x2000e850

08003ae0 <ADC_IRQHandler>:
 8003ae0:	e7fe      	b.n	8003ae0 <ADC_IRQHandler>
	...

08003ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <HAL_Init+0x40>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <HAL_Init+0x40>)
 8003aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_Init+0x40>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <HAL_Init+0x40>)
 8003afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_Init+0x40>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a07      	ldr	r2, [pc, #28]	; (8003b24 <HAL_Init+0x40>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b0c:	2003      	movs	r0, #3
 8003b0e:	f000 fbcc 	bl	80042aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b12:	200f      	movs	r0, #15
 8003b14:	f7ff fe16 	bl	8003744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b18:	f7ff faca 	bl	80030b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023c00 	.word	0x40023c00

08003b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <HAL_IncTick+0x20>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_IncTick+0x24>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4413      	add	r3, r2
 8003b38:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <HAL_IncTick+0x24>)
 8003b3a:	6013      	str	r3, [r2, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000014 	.word	0x20000014
 8003b4c:	20004d5c 	.word	0x20004d5c

08003b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return uwTick;
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <HAL_GetTick+0x14>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20004d5c 	.word	0x20004d5c

08003b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b70:	f7ff ffee 	bl	8003b50 <HAL_GetTick>
 8003b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b80:	d005      	beq.n	8003b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <HAL_Delay+0x44>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b8e:	bf00      	nop
 8003b90:	f7ff ffde 	bl	8003b50 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d8f7      	bhi.n	8003b90 <HAL_Delay+0x28>
  {
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000014 	.word	0x20000014

08003bb0 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e01b      	b.n	8003bfa <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f817 	bl	8003c02 <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f9d7 	bl	8003f90 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_ADC_Start+0x1a>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e053      	b.n	8003cda <HAL_ADC_Start+0xc2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b22      	cmp	r3, #34	; 0x22
 8003c44:	d104      	bne.n	8003c50 <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2232      	movs	r2, #50	; 0x32
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c4e:	e003      	b.n	8003c58 <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2212      	movs	r2, #18
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d010      	beq.n	8003c88 <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0201 	orr.w	r2, r2, #1
 8003c74:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilization */
    for(; i <= 540; i++)
 8003c76:	e003      	b.n	8003c80 <HAL_ADC_Start+0x68>
    {
      __NOP();
 8003c78:	bf00      	nop
    for(; i <= 540; i++)
 8003c7a:	89fb      	ldrh	r3, [r7, #14]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	81fb      	strh	r3, [r7, #14]
 8003c80:	89fb      	ldrh	r3, [r7, #14]
 8003c82:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8003c86:	d9f7      	bls.n	8003c78 <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003c88:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <HAL_ADC_Start+0xd0>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10c      	bne.n	8003cae <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d119      	bne.n	8003cd0 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	e010      	b.n	8003cd0 <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <HAL_ADC_Start+0xd4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_ADC_Start+0xb8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d107      	bne.n	8003cd0 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cce:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40012300 	.word	0x40012300
 8003cec:	40012000 	.word	0x40012000

08003cf0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003cfe:	f7ff ff27 	bl	8003b50 <HAL_GetTick>
 8003d02:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d04:	e018      	b.n	8003d38 <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d0c:	d014      	beq.n	8003d38 <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <HAL_ADC_PollForConversion+0x34>
 8003d14:	f7ff ff1c 	bl	8003b50 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d209      	bcs.n	8003d38 <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2203      	movs	r2, #3
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e016      	b.n	8003d66 <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d1df      	bne.n	8003d06 <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b25      	cmp	r3, #37	; 0x25
 8003d50:	d104      	bne.n	8003d5c <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2235      	movs	r2, #53	; 0x35
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d5a:	e003      	b.n	8003d64 <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2215      	movs	r2, #21
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x18>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e0ed      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x1f4>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b09      	cmp	r3, #9
 8003dae:	d925      	bls.n	8003dfc <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68d9      	ldr	r1, [r3, #12]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3b1e      	subs	r3, #30
 8003dc6:	2207      	movs	r2, #7
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43da      	mvns	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68d9      	ldr	r1, [r3, #12]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	4618      	mov	r0, r3
 8003de8:	4603      	mov	r3, r0
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4403      	add	r3, r0
 8003dee:	3b1e      	subs	r3, #30
 8003df0:	409a      	lsls	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	e022      	b.n	8003e42 <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6919      	ldr	r1, [r3, #16]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	2207      	movs	r2, #7
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	400a      	ands	r2, r1
 8003e1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6919      	ldr	r1, [r3, #16]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689a      	ldr	r2, [r3, #8]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	4618      	mov	r0, r3
 8003e32:	4603      	mov	r3, r0
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	4403      	add	r3, r0
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d824      	bhi.n	8003e94 <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	3b05      	subs	r3, #5
 8003e5c:	221f      	movs	r2, #31
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43da      	mvns	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	400a      	ands	r2, r1
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	4618      	mov	r0, r3
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	3b05      	subs	r3, #5
 8003e86:	fa00 f203 	lsl.w	r2, r0, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	635a      	str	r2, [r3, #52]	; 0x34
 8003e92:	e04c      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	d824      	bhi.n	8003ee6 <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	3b23      	subs	r3, #35	; 0x23
 8003eae:	221f      	movs	r2, #31
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	43da      	mvns	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	400a      	ands	r2, r1
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	4618      	mov	r0, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3b23      	subs	r3, #35	; 0x23
 8003ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ee4:	e023      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3b41      	subs	r3, #65	; 0x41
 8003ef8:	221f      	movs	r2, #31
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43da      	mvns	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	400a      	ands	r2, r1
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	4618      	mov	r0, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	3b41      	subs	r3, #65	; 0x41
 8003f22:	fa00 f203 	lsl.w	r2, r0, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <HAL_ADC_ConfigChannel+0x200>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d109      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x1c4>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b12      	cmp	r3, #18
 8003f3e:	d105      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_ADC_ConfigChannel+0x204>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4a11      	ldr	r2, [pc, #68]	; (8003f8c <HAL_ADC_ConfigChannel+0x204>)
 8003f46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f4a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a0d      	ldr	r2, [pc, #52]	; (8003f88 <HAL_ADC_ConfigChannel+0x200>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d10d      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x1ea>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b10      	cmp	r3, #16
 8003f5c:	d003      	beq.n	8003f66 <HAL_ADC_ConfigChannel+0x1de>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b11      	cmp	r3, #17
 8003f64:	d105      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x1ea>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_ADC_ConfigChannel+0x204>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4a08      	ldr	r2, [pc, #32]	; (8003f8c <HAL_ADC_ConfigChannel+0x204>)
 8003f6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f70:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40012000 	.word	0x40012000
 8003f8c:	40012300 	.word	0x40012300

08003f90 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003f98:	4b6c      	ldr	r3, [pc, #432]	; (800414c <ADC_Init+0x1bc>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a6b      	ldr	r2, [pc, #428]	; (800414c <ADC_Init+0x1bc>)
 8003f9e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003fa2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003fa4:	4b69      	ldr	r3, [pc, #420]	; (800414c <ADC_Init+0x1bc>)
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4967      	ldr	r1, [pc, #412]	; (800414c <ADC_Init+0x1bc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	021a      	lsls	r2, r3, #8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004006:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6899      	ldr	r1, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6899      	ldr	r1, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800404a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6899      	ldr	r1, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0202 	bic.w	r2, r2, #2
 800406c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6899      	ldr	r1, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	005a      	lsls	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01b      	beq.n	80040c2 <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004098:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040a8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6859      	ldr	r1, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	3b01      	subs	r3, #1
 80040b6:	035a      	lsls	r2, r3, #13
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	e007      	b.n	80040d2 <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040d0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80040e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	051a      	lsls	r2, r3, #20
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6899      	ldr	r1, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	025a      	lsls	r2, r3, #9
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6899      	ldr	r1, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	029a      	lsls	r2, r3, #10
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40012300 	.word	0x40012300

08004150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <__NVIC_SetPriorityGrouping+0x44>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800416c:	4013      	ands	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800417c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004182:	4a04      	ldr	r2, [pc, #16]	; (8004194 <__NVIC_SetPriorityGrouping+0x44>)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	60d3      	str	r3, [r2, #12]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <__NVIC_GetPriorityGrouping+0x18>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	f003 0307 	and.w	r3, r3, #7
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	db0b      	blt.n	80041de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	f003 021f 	and.w	r2, r3, #31
 80041cc:	4907      	ldr	r1, [pc, #28]	; (80041ec <__NVIC_EnableIRQ+0x38>)
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2001      	movs	r0, #1
 80041d6:	fa00 f202 	lsl.w	r2, r0, r2
 80041da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	e000e100 	.word	0xe000e100

080041f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	6039      	str	r1, [r7, #0]
 80041fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004200:	2b00      	cmp	r3, #0
 8004202:	db0a      	blt.n	800421a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	490c      	ldr	r1, [pc, #48]	; (800423c <__NVIC_SetPriority+0x4c>)
 800420a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420e:	0112      	lsls	r2, r2, #4
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	440b      	add	r3, r1
 8004214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004218:	e00a      	b.n	8004230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4908      	ldr	r1, [pc, #32]	; (8004240 <__NVIC_SetPriority+0x50>)
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	3b04      	subs	r3, #4
 8004228:	0112      	lsls	r2, r2, #4
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	440b      	add	r3, r1
 800422e:	761a      	strb	r2, [r3, #24]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000e100 	.word	0xe000e100
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004244:	b480      	push	{r7}
 8004246:	b089      	sub	sp, #36	; 0x24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f1c3 0307 	rsb	r3, r3, #7
 800425e:	2b04      	cmp	r3, #4
 8004260:	bf28      	it	cs
 8004262:	2304      	movcs	r3, #4
 8004264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	3304      	adds	r3, #4
 800426a:	2b06      	cmp	r3, #6
 800426c:	d902      	bls.n	8004274 <NVIC_EncodePriority+0x30>
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	3b03      	subs	r3, #3
 8004272:	e000      	b.n	8004276 <NVIC_EncodePriority+0x32>
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43da      	mvns	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	401a      	ands	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800428c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	fa01 f303 	lsl.w	r3, r1, r3
 8004296:	43d9      	mvns	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800429c:	4313      	orrs	r3, r2
         );
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3724      	adds	r7, #36	; 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff ff4c 	bl	8004150 <__NVIC_SetPriorityGrouping>
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042d2:	f7ff ff61 	bl	8004198 <__NVIC_GetPriorityGrouping>
 80042d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	68b9      	ldr	r1, [r7, #8]
 80042dc:	6978      	ldr	r0, [r7, #20]
 80042de:	f7ff ffb1 	bl	8004244 <NVIC_EncodePriority>
 80042e2:	4602      	mov	r2, r0
 80042e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e8:	4611      	mov	r1, r2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff80 	bl	80041f0 <__NVIC_SetPriority>
}
 80042f0:	bf00      	nop
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff ff54 	bl	80041b4 <__NVIC_EnableIRQ>
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004320:	f7ff fc16 	bl	8003b50 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e099      	b.n	8004464 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0201 	bic.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004350:	e00f      	b.n	8004372 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004352:	f7ff fbfd 	bl	8003b50 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b05      	cmp	r3, #5
 800435e:	d908      	bls.n	8004372 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2203      	movs	r2, #3
 800436a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e078      	b.n	8004464 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e8      	bne.n	8004352 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4b38      	ldr	r3, [pc, #224]	; (800446c <HAL_DMA_Init+0x158>)
 800438c:	4013      	ands	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800439e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d107      	bne.n	80043dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	4313      	orrs	r3, r2
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0307 	bic.w	r3, r3, #7
 80043f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	2b04      	cmp	r3, #4
 8004404:	d117      	bne.n	8004436 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00e      	beq.n	8004436 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fb0f 	bl	8004a3c <DMA_CheckFifoParam>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2240      	movs	r2, #64	; 0x40
 8004428:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004432:	2301      	movs	r3, #1
 8004434:	e016      	b.n	8004464 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fac6 	bl	80049d0 <DMA_CalcBaseAndBitshift>
 8004444:	4603      	mov	r3, r0
 8004446:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	223f      	movs	r2, #63	; 0x3f
 800444e:	409a      	lsls	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	f010803f 	.word	0xf010803f

08004470 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_DMA_Start_IT+0x26>
 8004492:	2302      	movs	r3, #2
 8004494:	e040      	b.n	8004518 <HAL_DMA_Start_IT+0xa8>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d12f      	bne.n	800450a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fa58 	bl	8004974 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c8:	223f      	movs	r2, #63	; 0x3f
 80044ca:	409a      	lsls	r2, r3
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0216 	orr.w	r2, r2, #22
 80044de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d007      	beq.n	80044f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0208 	orr.w	r2, r2, #8
 80044f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	e005      	b.n	8004516 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004512:	2302      	movs	r3, #2
 8004514:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004516:	7dfb      	ldrb	r3, [r7, #23]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800452e:	f7ff fb0f 	bl	8003b50 <HAL_GetTick>
 8004532:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d008      	beq.n	8004552 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2280      	movs	r2, #128	; 0x80
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e052      	b.n	80045f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0216 	bic.w	r2, r2, #22
 8004560:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004570:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <HAL_DMA_Abort+0x62>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0208 	bic.w	r2, r2, #8
 8004590:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0201 	bic.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045a2:	e013      	b.n	80045cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045a4:	f7ff fad4 	bl	8003b50 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d90c      	bls.n	80045cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2203      	movs	r2, #3
 80045bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e015      	b.n	80045f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e4      	bne.n	80045a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045de:	223f      	movs	r2, #63	; 0x3f
 80045e0:	409a      	lsls	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d004      	beq.n	800461e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2280      	movs	r2, #128	; 0x80
 8004618:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e00c      	b.n	8004638 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2205      	movs	r2, #5
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004650:	4b8e      	ldr	r3, [pc, #568]	; (800488c <HAL_DMA_IRQHandler+0x248>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a8e      	ldr	r2, [pc, #568]	; (8004890 <HAL_DMA_IRQHandler+0x24c>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	0a9b      	lsrs	r3, r3, #10
 800465c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466e:	2208      	movs	r2, #8
 8004670:	409a      	lsls	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d01a      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0204 	bic.w	r2, r2, #4
 8004696:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469c:	2208      	movs	r2, #8
 800469e:	409a      	lsls	r2, r3
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a8:	f043 0201 	orr.w	r2, r3, #1
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b4:	2201      	movs	r2, #1
 80046b6:	409a      	lsls	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d012      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d2:	2201      	movs	r2, #1
 80046d4:	409a      	lsls	r2, r3
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046de:	f043 0202 	orr.w	r2, r3, #2
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ea:	2204      	movs	r2, #4
 80046ec:	409a      	lsls	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d012      	beq.n	800471c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	2204      	movs	r2, #4
 800470a:	409a      	lsls	r2, r3
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	f043 0204 	orr.w	r2, r3, #4
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004720:	2210      	movs	r2, #16
 8004722:	409a      	lsls	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d043      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d03c      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473e:	2210      	movs	r2, #16
 8004740:	409a      	lsls	r2, r3
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d018      	beq.n	8004786 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d108      	bne.n	8004774 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d024      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
 8004772:	e01f      	b.n	80047b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01b      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4798      	blx	r3
 8004784:	e016      	b.n	80047b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0208 	bic.w	r2, r2, #8
 80047a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b8:	2220      	movs	r2, #32
 80047ba:	409a      	lsls	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 808f 	beq.w	80048e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8087 	beq.w	80048e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047da:	2220      	movs	r2, #32
 80047dc:	409a      	lsls	r2, r3
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b05      	cmp	r3, #5
 80047ec:	d136      	bne.n	800485c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0216 	bic.w	r2, r2, #22
 80047fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800480c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <HAL_DMA_IRQHandler+0x1da>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0208 	bic.w	r2, r2, #8
 800482c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	223f      	movs	r2, #63	; 0x3f
 8004834:	409a      	lsls	r2, r3
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484e:	2b00      	cmp	r3, #0
 8004850:	d07e      	beq.n	8004950 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	4798      	blx	r3
        }
        return;
 800485a:	e079      	b.n	8004950 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d01d      	beq.n	80048a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10d      	bne.n	8004894 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487c:	2b00      	cmp	r3, #0
 800487e:	d031      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	4798      	blx	r3
 8004888:	e02c      	b.n	80048e4 <HAL_DMA_IRQHandler+0x2a0>
 800488a:	bf00      	nop
 800488c:	2000000c 	.word	0x2000000c
 8004890:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d023      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
 80048a4:	e01e      	b.n	80048e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10f      	bne.n	80048d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0210 	bic.w	r2, r2, #16
 80048c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d032      	beq.n	8004952 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d022      	beq.n	800493e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2205      	movs	r2, #5
 80048fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	3301      	adds	r3, #1
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	429a      	cmp	r2, r3
 800491a:	d307      	bcc.n	800492c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f2      	bne.n	8004910 <HAL_DMA_IRQHandler+0x2cc>
 800492a:	e000      	b.n	800492e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800492c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
 800494e:	e000      	b.n	8004952 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004950:	bf00      	nop
    }
  }
}
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004966:	b2db      	uxtb	r3, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004990:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d108      	bne.n	80049b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049b2:	e007      	b.n	80049c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	60da      	str	r2, [r3, #12]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	3b10      	subs	r3, #16
 80049e0:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <DMA_CalcBaseAndBitshift+0x64>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	091b      	lsrs	r3, r3, #4
 80049e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049ea:	4a13      	ldr	r2, [pc, #76]	; (8004a38 <DMA_CalcBaseAndBitshift+0x68>)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d909      	bls.n	8004a12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	1d1a      	adds	r2, r3, #4
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a10:	e007      	b.n	8004a22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a1a:	f023 0303 	bic.w	r3, r3, #3
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	aaaaaaab 	.word	0xaaaaaaab
 8004a38:	080198cc 	.word	0x080198cc

08004a3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d11f      	bne.n	8004a96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d856      	bhi.n	8004b0a <DMA_CheckFifoParam+0xce>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <DMA_CheckFifoParam+0x28>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a75 	.word	0x08004a75
 8004a68:	08004a87 	.word	0x08004a87
 8004a6c:	08004a75 	.word	0x08004a75
 8004a70:	08004b0b 	.word	0x08004b0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d046      	beq.n	8004b0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a84:	e043      	b.n	8004b0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a8e:	d140      	bne.n	8004b12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a94:	e03d      	b.n	8004b12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a9e:	d121      	bne.n	8004ae4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d837      	bhi.n	8004b16 <DMA_CheckFifoParam+0xda>
 8004aa6:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <DMA_CheckFifoParam+0x70>)
 8004aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aac:	08004abd 	.word	0x08004abd
 8004ab0:	08004ac3 	.word	0x08004ac3
 8004ab4:	08004abd 	.word	0x08004abd
 8004ab8:	08004ad5 	.word	0x08004ad5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac0:	e030      	b.n	8004b24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d025      	beq.n	8004b1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad2:	e022      	b.n	8004b1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004adc:	d11f      	bne.n	8004b1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ae2:	e01c      	b.n	8004b1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d903      	bls.n	8004af2 <DMA_CheckFifoParam+0xb6>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d003      	beq.n	8004af8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004af0:	e018      	b.n	8004b24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
      break;
 8004af6:	e015      	b.n	8004b24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00e      	beq.n	8004b22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
      break;
 8004b08:	e00b      	b.n	8004b22 <DMA_CheckFifoParam+0xe6>
      break;
 8004b0a:	bf00      	nop
 8004b0c:	e00a      	b.n	8004b24 <DMA_CheckFifoParam+0xe8>
      break;
 8004b0e:	bf00      	nop
 8004b10:	e008      	b.n	8004b24 <DMA_CheckFifoParam+0xe8>
      break;
 8004b12:	bf00      	nop
 8004b14:	e006      	b.n	8004b24 <DMA_CheckFifoParam+0xe8>
      break;
 8004b16:	bf00      	nop
 8004b18:	e004      	b.n	8004b24 <DMA_CheckFifoParam+0xe8>
      break;
 8004b1a:	bf00      	nop
 8004b1c:	e002      	b.n	8004b24 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b1e:	bf00      	nop
 8004b20:	e000      	b.n	8004b24 <DMA_CheckFifoParam+0xe8>
      break;
 8004b22:	bf00      	nop
    }
  } 
  
  return status; 
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop

08004b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b089      	sub	sp, #36	; 0x24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
 8004b4e:	e159      	b.n	8004e04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b50:	2201      	movs	r2, #1
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4013      	ands	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	f040 8148 	bne.w	8004dfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d005      	beq.n	8004b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d130      	bne.n	8004be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	2203      	movs	r2, #3
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	43db      	mvns	r3, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	f003 0201 	and.w	r2, r3, #1
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d017      	beq.n	8004c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	2203      	movs	r2, #3
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	43db      	mvns	r3, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f003 0303 	and.w	r3, r3, #3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d123      	bne.n	8004c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	08da      	lsrs	r2, r3, #3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3208      	adds	r2, #8
 8004c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	220f      	movs	r2, #15
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4013      	ands	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	08da      	lsrs	r2, r3, #3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3208      	adds	r2, #8
 8004c72:	69b9      	ldr	r1, [r7, #24]
 8004c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	2203      	movs	r2, #3
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f003 0203 	and.w	r2, r3, #3
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 80a2 	beq.w	8004dfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	4b57      	ldr	r3, [pc, #348]	; (8004e1c <HAL_GPIO_Init+0x2e8>)
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	4a56      	ldr	r2, [pc, #344]	; (8004e1c <HAL_GPIO_Init+0x2e8>)
 8004cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8004cca:	4b54      	ldr	r3, [pc, #336]	; (8004e1c <HAL_GPIO_Init+0x2e8>)
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cd6:	4a52      	ldr	r2, [pc, #328]	; (8004e20 <HAL_GPIO_Init+0x2ec>)
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	089b      	lsrs	r3, r3, #2
 8004cdc:	3302      	adds	r3, #2
 8004cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	220f      	movs	r2, #15
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a49      	ldr	r2, [pc, #292]	; (8004e24 <HAL_GPIO_Init+0x2f0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d019      	beq.n	8004d36 <HAL_GPIO_Init+0x202>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a48      	ldr	r2, [pc, #288]	; (8004e28 <HAL_GPIO_Init+0x2f4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <HAL_GPIO_Init+0x1fe>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a47      	ldr	r2, [pc, #284]	; (8004e2c <HAL_GPIO_Init+0x2f8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00d      	beq.n	8004d2e <HAL_GPIO_Init+0x1fa>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a46      	ldr	r2, [pc, #280]	; (8004e30 <HAL_GPIO_Init+0x2fc>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d007      	beq.n	8004d2a <HAL_GPIO_Init+0x1f6>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a45      	ldr	r2, [pc, #276]	; (8004e34 <HAL_GPIO_Init+0x300>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <HAL_GPIO_Init+0x1f2>
 8004d22:	2304      	movs	r3, #4
 8004d24:	e008      	b.n	8004d38 <HAL_GPIO_Init+0x204>
 8004d26:	2307      	movs	r3, #7
 8004d28:	e006      	b.n	8004d38 <HAL_GPIO_Init+0x204>
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e004      	b.n	8004d38 <HAL_GPIO_Init+0x204>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e002      	b.n	8004d38 <HAL_GPIO_Init+0x204>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <HAL_GPIO_Init+0x204>
 8004d36:	2300      	movs	r3, #0
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	f002 0203 	and.w	r2, r2, #3
 8004d3e:	0092      	lsls	r2, r2, #2
 8004d40:	4093      	lsls	r3, r2
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d48:	4935      	ldr	r1, [pc, #212]	; (8004e20 <HAL_GPIO_Init+0x2ec>)
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	089b      	lsrs	r3, r3, #2
 8004d4e:	3302      	adds	r3, #2
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d56:	4b38      	ldr	r3, [pc, #224]	; (8004e38 <HAL_GPIO_Init+0x304>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4013      	ands	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d7a:	4a2f      	ldr	r2, [pc, #188]	; (8004e38 <HAL_GPIO_Init+0x304>)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d80:	4b2d      	ldr	r3, [pc, #180]	; (8004e38 <HAL_GPIO_Init+0x304>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004da4:	4a24      	ldr	r2, [pc, #144]	; (8004e38 <HAL_GPIO_Init+0x304>)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004daa:	4b23      	ldr	r3, [pc, #140]	; (8004e38 <HAL_GPIO_Init+0x304>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	43db      	mvns	r3, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4013      	ands	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dce:	4a1a      	ldr	r2, [pc, #104]	; (8004e38 <HAL_GPIO_Init+0x304>)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dd4:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <HAL_GPIO_Init+0x304>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004df8:	4a0f      	ldr	r2, [pc, #60]	; (8004e38 <HAL_GPIO_Init+0x304>)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	3301      	adds	r3, #1
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2b0f      	cmp	r3, #15
 8004e08:	f67f aea2 	bls.w	8004b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	3724      	adds	r7, #36	; 0x24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	40013800 	.word	0x40013800
 8004e24:	40020000 	.word	0x40020000
 8004e28:	40020400 	.word	0x40020400
 8004e2c:	40020800 	.word	0x40020800
 8004e30:	40020c00 	.word	0x40020c00
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40013c00 	.word	0x40013c00

08004e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	807b      	strh	r3, [r7, #2]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e4c:	787b      	ldrb	r3, [r7, #1]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e58:	e003      	b.n	8004e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e5a:	887b      	ldrh	r3, [r7, #2]
 8004e5c:	041a      	lsls	r2, r3, #16
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	619a      	str	r2, [r3, #24]
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e7a:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d006      	beq.n	8004e94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e86:	4a05      	ldr	r2, [pc, #20]	; (8004e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fc fbe2 	bl	8001658 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40013c00 	.word	0x40013c00

08004ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e12b      	b.n	800510a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fe fa76 	bl	80033b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	; 0x24
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0201 	bic.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f04:	f002 fa34 	bl	8007370 <HAL_RCC_GetPCLK1Freq>
 8004f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4a81      	ldr	r2, [pc, #516]	; (8005114 <HAL_I2C_Init+0x274>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d807      	bhi.n	8004f24 <HAL_I2C_Init+0x84>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4a80      	ldr	r2, [pc, #512]	; (8005118 <HAL_I2C_Init+0x278>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	bf94      	ite	ls
 8004f1c:	2301      	movls	r3, #1
 8004f1e:	2300      	movhi	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e006      	b.n	8004f32 <HAL_I2C_Init+0x92>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a7d      	ldr	r2, [pc, #500]	; (800511c <HAL_I2C_Init+0x27c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	bf94      	ite	ls
 8004f2c:	2301      	movls	r3, #1
 8004f2e:	2300      	movhi	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0e7      	b.n	800510a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a78      	ldr	r2, [pc, #480]	; (8005120 <HAL_I2C_Init+0x280>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	0c9b      	lsrs	r3, r3, #18
 8004f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4a6a      	ldr	r2, [pc, #424]	; (8005114 <HAL_I2C_Init+0x274>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d802      	bhi.n	8004f74 <HAL_I2C_Init+0xd4>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3301      	adds	r3, #1
 8004f72:	e009      	b.n	8004f88 <HAL_I2C_Init+0xe8>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
 8004f7e:	4a69      	ldr	r2, [pc, #420]	; (8005124 <HAL_I2C_Init+0x284>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	099b      	lsrs	r3, r3, #6
 8004f86:	3301      	adds	r3, #1
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	495c      	ldr	r1, [pc, #368]	; (8005114 <HAL_I2C_Init+0x274>)
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	d819      	bhi.n	8004fdc <HAL_I2C_Init+0x13c>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	1e59      	subs	r1, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fb6:	1c59      	adds	r1, r3, #1
 8004fb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fbc:	400b      	ands	r3, r1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_I2C_Init+0x138>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1e59      	subs	r1, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd6:	e051      	b.n	800507c <HAL_I2C_Init+0x1dc>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	e04f      	b.n	800507c <HAL_I2C_Init+0x1dc>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d111      	bne.n	8005008 <HAL_I2C_Init+0x168>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	1e58      	subs	r0, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6859      	ldr	r1, [r3, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	440b      	add	r3, r1
 8004ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	e012      	b.n	800502e <HAL_I2C_Init+0x18e>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1e58      	subs	r0, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6859      	ldr	r1, [r3, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	0099      	lsls	r1, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	fbb0 f3f3 	udiv	r3, r0, r3
 800501e:	3301      	adds	r3, #1
 8005020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005024:	2b00      	cmp	r3, #0
 8005026:	bf0c      	ite	eq
 8005028:	2301      	moveq	r3, #1
 800502a:	2300      	movne	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_I2C_Init+0x196>
 8005032:	2301      	movs	r3, #1
 8005034:	e022      	b.n	800507c <HAL_I2C_Init+0x1dc>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10e      	bne.n	800505c <HAL_I2C_Init+0x1bc>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1e58      	subs	r0, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6859      	ldr	r1, [r3, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	440b      	add	r3, r1
 800504c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005050:	3301      	adds	r3, #1
 8005052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505a:	e00f      	b.n	800507c <HAL_I2C_Init+0x1dc>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	1e58      	subs	r0, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6859      	ldr	r1, [r3, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	0099      	lsls	r1, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005072:	3301      	adds	r3, #1
 8005074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	6809      	ldr	r1, [r1, #0]
 8005080:	4313      	orrs	r3, r2
 8005082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69da      	ldr	r2, [r3, #28]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80050aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	6911      	ldr	r1, [r2, #16]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68d2      	ldr	r2, [r2, #12]
 80050b6:	4311      	orrs	r1, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6812      	ldr	r2, [r2, #0]
 80050bc:	430b      	orrs	r3, r1
 80050be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	000186a0 	.word	0x000186a0
 8005118:	001e847f 	.word	0x001e847f
 800511c:	003d08ff 	.word	0x003d08ff
 8005120:	431bde83 	.word	0x431bde83
 8005124:	10624dd3 	.word	0x10624dd3

08005128 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005148:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005150:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	2b10      	cmp	r3, #16
 8005156:	d003      	beq.n	8005160 <HAL_I2C_EV_IRQHandler+0x38>
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	2b40      	cmp	r3, #64	; 0x40
 800515c:	f040 80b1 	bne.w	80052c2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10d      	bne.n	8005196 <HAL_I2C_EV_IRQHandler+0x6e>
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005180:	d003      	beq.n	800518a <HAL_I2C_EV_IRQHandler+0x62>
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005188:	d101      	bne.n	800518e <HAL_I2C_EV_IRQHandler+0x66>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <HAL_I2C_EV_IRQHandler+0x68>
 800518e:	2300      	movs	r3, #0
 8005190:	2b01      	cmp	r3, #1
 8005192:	f000 8114 	beq.w	80053be <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00b      	beq.n	80051b8 <HAL_I2C_EV_IRQHandler+0x90>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f001 fc54 	bl	8006a58 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fd5e 	bl	8005c72 <I2C_Master_SB>
 80051b6:	e083      	b.n	80052c0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d008      	beq.n	80051d4 <HAL_I2C_EV_IRQHandler+0xac>
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fdd6 	bl	8005d7e <I2C_Master_ADD10>
 80051d2:	e075      	b.n	80052c0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <HAL_I2C_EV_IRQHandler+0xc8>
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fdf2 	bl	8005dd2 <I2C_Master_ADDR>
 80051ee:	e067      	b.n	80052c0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d036      	beq.n	8005268 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005208:	f000 80db 	beq.w	80053c2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00d      	beq.n	8005232 <HAL_I2C_EV_IRQHandler+0x10a>
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_I2C_EV_IRQHandler+0x10a>
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f9d6 	bl	80055dc <I2C_MasterTransmit_TXE>
 8005230:	e046      	b.n	80052c0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 80c2 	beq.w	80053c2 <HAL_I2C_EV_IRQHandler+0x29a>
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80bc 	beq.w	80053c2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800524a:	7bbb      	ldrb	r3, [r7, #14]
 800524c:	2b21      	cmp	r3, #33	; 0x21
 800524e:	d103      	bne.n	8005258 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fa5f 	bl	8005714 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005256:	e0b4      	b.n	80053c2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	f040 80b1 	bne.w	80053c2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 facd 	bl	8005800 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005266:	e0ac      	b.n	80053c2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005276:	f000 80a4 	beq.w	80053c2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00d      	beq.n	80052a0 <HAL_I2C_EV_IRQHandler+0x178>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <HAL_I2C_EV_IRQHandler+0x178>
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d103      	bne.n	80052a0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fb45 	bl	8005928 <I2C_MasterReceive_RXNE>
 800529e:	e00f      	b.n	80052c0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 808b 	beq.w	80053c2 <HAL_I2C_EV_IRQHandler+0x29a>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 8085 	beq.w	80053c2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fbf0 	bl	8005a9e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052be:	e080      	b.n	80053c2 <HAL_I2C_EV_IRQHandler+0x29a>
 80052c0:	e07f      	b.n	80053c2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d004      	beq.n	80052d4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	e007      	b.n	80052e4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d011      	beq.n	8005312 <HAL_I2C_EV_IRQHandler+0x1ea>
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00c      	beq.n	8005312 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005308:	69b9      	ldr	r1, [r7, #24]
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 ffb0 	bl	8006270 <I2C_Slave_ADDR>
 8005310:	e05a      	b.n	80053c8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_I2C_EV_IRQHandler+0x206>
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 ffea 	bl	8006300 <I2C_Slave_STOPF>
 800532c:	e04c      	b.n	80053c8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800532e:	7bbb      	ldrb	r3, [r7, #14]
 8005330:	2b21      	cmp	r3, #33	; 0x21
 8005332:	d002      	beq.n	800533a <HAL_I2C_EV_IRQHandler+0x212>
 8005334:	7bbb      	ldrb	r3, [r7, #14]
 8005336:	2b29      	cmp	r3, #41	; 0x29
 8005338:	d120      	bne.n	800537c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00d      	beq.n	8005360 <HAL_I2C_EV_IRQHandler+0x238>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534a:	2b00      	cmp	r3, #0
 800534c:	d008      	beq.n	8005360 <HAL_I2C_EV_IRQHandler+0x238>
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fecb 	bl	80060f4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800535e:	e032      	b.n	80053c6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	d02d      	beq.n	80053c6 <HAL_I2C_EV_IRQHandler+0x29e>
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005370:	2b00      	cmp	r3, #0
 8005372:	d028      	beq.n	80053c6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fefa 	bl	800616e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800537a:	e024      	b.n	80053c6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <HAL_I2C_EV_IRQHandler+0x27a>
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_I2C_EV_IRQHandler+0x27a>
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	d103      	bne.n	80053a2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 ff08 	bl	80061b0 <I2C_SlaveReceive_RXNE>
 80053a0:	e012      	b.n	80053c8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00d      	beq.n	80053c8 <HAL_I2C_EV_IRQHandler+0x2a0>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d008      	beq.n	80053c8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 ff38 	bl	800622c <I2C_SlaveReceive_BTF>
 80053bc:	e004      	b.n	80053c8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80053be:	bf00      	nop
 80053c0:	e002      	b.n	80053c8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053c2:	bf00      	nop
 80053c4:	e000      	b.n	80053c8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053c6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b08a      	sub	sp, #40	; 0x28
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80053e6:	2300      	movs	r3, #0
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053f0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00d      	beq.n	8005418 <HAL_I2C_ER_IRQHandler+0x4a>
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005416:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00d      	beq.n	800543e <HAL_I2C_ER_IRQHandler+0x70>
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	f043 0302 	orr.w	r3, r3, #2
 8005432:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800543c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005444:	2b00      	cmp	r3, #0
 8005446:	d03e      	beq.n	80054c6 <HAL_I2C_ER_IRQHandler+0xf8>
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d039      	beq.n	80054c6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8005452:	7efb      	ldrb	r3, [r7, #27]
 8005454:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545a:	b29b      	uxth	r3, r3
 800545c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005464:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800546c:	7ebb      	ldrb	r3, [r7, #26]
 800546e:	2b20      	cmp	r3, #32
 8005470:	d112      	bne.n	8005498 <HAL_I2C_ER_IRQHandler+0xca>
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10f      	bne.n	8005498 <HAL_I2C_ER_IRQHandler+0xca>
 8005478:	7cfb      	ldrb	r3, [r7, #19]
 800547a:	2b21      	cmp	r3, #33	; 0x21
 800547c:	d008      	beq.n	8005490 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800547e:	7cfb      	ldrb	r3, [r7, #19]
 8005480:	2b29      	cmp	r3, #41	; 0x29
 8005482:	d005      	beq.n	8005490 <HAL_I2C_ER_IRQHandler+0xc2>
 8005484:	7cfb      	ldrb	r3, [r7, #19]
 8005486:	2b28      	cmp	r3, #40	; 0x28
 8005488:	d106      	bne.n	8005498 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b21      	cmp	r3, #33	; 0x21
 800548e:	d103      	bne.n	8005498 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f001 f865 	bl	8006560 <I2C_Slave_AF>
 8005496:	e016      	b.n	80054c6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054a0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	f043 0304 	orr.w	r3, r3, #4
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80054aa:	7efb      	ldrb	r3, [r7, #27]
 80054ac:	2b10      	cmp	r3, #16
 80054ae:	d002      	beq.n	80054b6 <HAL_I2C_ER_IRQHandler+0xe8>
 80054b0:	7efb      	ldrb	r3, [r7, #27]
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d107      	bne.n	80054c6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00d      	beq.n	80054ec <HAL_I2C_ER_IRQHandler+0x11e>
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d008      	beq.n	80054ec <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	f043 0308 	orr.w	r3, r3, #8
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80054ea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d008      	beq.n	8005504 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f001 f89e 	bl	8006640 <I2C_ITError>
  }
}
 8005504:	bf00      	nop
 8005506:	3728      	adds	r7, #40	; 0x28
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
 8005568:	4613      	mov	r3, r2
 800556a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d150      	bne.n	80056a4 <I2C_MasterTransmit_TXE+0xc8>
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b21      	cmp	r3, #33	; 0x21
 8005606:	d14d      	bne.n	80056a4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b08      	cmp	r3, #8
 800560c:	d01d      	beq.n	800564a <I2C_MasterTransmit_TXE+0x6e>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b20      	cmp	r3, #32
 8005612:	d01a      	beq.n	800564a <I2C_MasterTransmit_TXE+0x6e>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800561a:	d016      	beq.n	800564a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800562a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2211      	movs	r2, #17
 8005630:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff ff62 	bl	800550c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005648:	e060      	b.n	800570c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005658:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005668:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d107      	bne.n	8005694 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff ff7d 	bl	800558c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005692:	e03b      	b.n	800570c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ff35 	bl	800550c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056a2:	e033      	b.n	800570c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b21      	cmp	r3, #33	; 0x21
 80056a8:	d005      	beq.n	80056b6 <I2C_MasterTransmit_TXE+0xda>
 80056aa:	7bbb      	ldrb	r3, [r7, #14]
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d12d      	bne.n	800570c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b22      	cmp	r3, #34	; 0x22
 80056b4:	d12a      	bne.n	800570c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d108      	bne.n	80056d2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80056d0:	e01c      	b.n	800570c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b40      	cmp	r3, #64	; 0x40
 80056dc:	d103      	bne.n	80056e6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f88e 	bl	8005800 <I2C_MemoryTransmit_TXE_BTF>
}
 80056e4:	e012      	b.n	800570c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	781a      	ldrb	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800570a:	e7ff      	b.n	800570c <I2C_MasterTransmit_TXE+0x130>
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b21      	cmp	r3, #33	; 0x21
 800572c:	d164      	bne.n	80057f8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d012      	beq.n	800575e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	781a      	ldrb	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005752:	b29b      	uxth	r3, r3
 8005754:	3b01      	subs	r3, #1
 8005756:	b29a      	uxth	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800575c:	e04c      	b.n	80057f8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b08      	cmp	r3, #8
 8005762:	d01d      	beq.n	80057a0 <I2C_MasterTransmit_BTF+0x8c>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b20      	cmp	r3, #32
 8005768:	d01a      	beq.n	80057a0 <I2C_MasterTransmit_BTF+0x8c>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005770:	d016      	beq.n	80057a0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005780:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2211      	movs	r2, #17
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff feb7 	bl	800550c <HAL_I2C_MasterTxCpltCallback>
}
 800579e:	e02b      	b.n	80057f8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057ae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057be:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d107      	bne.n	80057ea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff fed2 	bl	800558c <HAL_I2C_MemTxCpltCallback>
}
 80057e8:	e006      	b.n	80057f8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fe8a 	bl	800550c <HAL_I2C_MasterTxCpltCallback>
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005814:	2b00      	cmp	r3, #0
 8005816:	d11d      	bne.n	8005854 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d10b      	bne.n	8005838 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005824:	b2da      	uxtb	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005830:	1c9a      	adds	r2, r3, #2
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005836:	e073      	b.n	8005920 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583c:	b29b      	uxth	r3, r3
 800583e:	121b      	asrs	r3, r3, #8
 8005840:	b2da      	uxtb	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005852:	e065      	b.n	8005920 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005858:	2b01      	cmp	r3, #1
 800585a:	d10b      	bne.n	8005874 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005860:	b2da      	uxtb	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005872:	e055      	b.n	8005920 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005878:	2b02      	cmp	r3, #2
 800587a:	d151      	bne.n	8005920 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b22      	cmp	r3, #34	; 0x22
 8005880:	d10d      	bne.n	800589e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005890:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800589c:	e040      	b.n	8005920 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d015      	beq.n	80058d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	2b21      	cmp	r3, #33	; 0x21
 80058ac:	d112      	bne.n	80058d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	781a      	ldrb	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058d2:	e025      	b.n	8005920 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d120      	bne.n	8005920 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	2b21      	cmp	r3, #33	; 0x21
 80058e2:	d11d      	bne.n	8005920 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058f2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005902:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fe36 	bl	800558c <HAL_I2C_MemTxCpltCallback>
}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b22      	cmp	r3, #34	; 0x22
 800593a:	f040 80ac 	bne.w	8005a96 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005942:	b29b      	uxth	r3, r3
 8005944:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b03      	cmp	r3, #3
 800594a:	d921      	bls.n	8005990 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691a      	ldr	r2, [r3, #16]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b03      	cmp	r3, #3
 800597a:	f040 808c 	bne.w	8005a96 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800598e:	e082      	b.n	8005a96 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	2b02      	cmp	r3, #2
 8005996:	d075      	beq.n	8005a84 <I2C_MasterReceive_RXNE+0x15c>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d002      	beq.n	80059a4 <I2C_MasterReceive_RXNE+0x7c>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d16f      	bne.n	8005a84 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f001 f825 	bl	80069f4 <I2C_WaitOnSTOPRequestThroughIT>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d142      	bne.n	8005a36 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059be:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d10a      	bne.n	8005a20 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff fdc1 	bl	80055a0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a1e:	e03a      	b.n	8005a96 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2212      	movs	r2, #18
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7ff fd76 	bl	8005520 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a34:	e02f      	b.n	8005a96 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a44:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff fd99 	bl	80055b4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a82:	e008      	b.n	8005a96 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a92:	605a      	str	r2, [r3, #4]
}
 8005a94:	e7ff      	b.n	8005a96 <I2C_MasterReceive_RXNE+0x16e>
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d11b      	bne.n	8005aee <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ac4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005aec:	e0bd      	b.n	8005c6a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d129      	bne.n	8005b4c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b06:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d00a      	beq.n	8005b24 <I2C_MasterReceive_BTF+0x86>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d007      	beq.n	8005b24 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b22:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b4a:	e08e      	b.n	8005c6a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d176      	bne.n	8005c44 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d002      	beq.n	8005b62 <I2C_MasterReceive_BTF+0xc4>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b10      	cmp	r3, #16
 8005b60:	d108      	bne.n	8005b74 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	e019      	b.n	8005ba8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d002      	beq.n	8005b80 <I2C_MasterReceive_BTF+0xe2>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d108      	bne.n	8005b92 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	e00a      	b.n	8005ba8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b10      	cmp	r3, #16
 8005b96:	d007      	beq.n	8005ba8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c02:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	d10a      	bne.n	8005c2e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7ff fcba 	bl	80055a0 <HAL_I2C_MemRxCpltCallback>
}
 8005c2c:	e01d      	b.n	8005c6a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2212      	movs	r2, #18
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff fc6f 	bl	8005520 <HAL_I2C_MasterRxCpltCallback>
}
 8005c42:	e012      	b.n	8005c6a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c6a:	bf00      	nop
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b40      	cmp	r3, #64	; 0x40
 8005c84:	d117      	bne.n	8005cb6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d109      	bne.n	8005ca2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c9e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005ca0:	e067      	b.n	8005d72 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	611a      	str	r2, [r3, #16]
}
 8005cb4:	e05d      	b.n	8005d72 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cbe:	d133      	bne.n	8005d28 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b21      	cmp	r3, #33	; 0x21
 8005cca:	d109      	bne.n	8005ce0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cdc:	611a      	str	r2, [r3, #16]
 8005cde:	e008      	b.n	8005cf2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <I2C_Master_SB+0x92>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d108      	bne.n	8005d16 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d032      	beq.n	8005d72 <I2C_Master_SB+0x100>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d02d      	beq.n	8005d72 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d24:	605a      	str	r2, [r3, #4]
}
 8005d26:	e024      	b.n	8005d72 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10e      	bne.n	8005d4e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	11db      	asrs	r3, r3, #7
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f003 0306 	and.w	r3, r3, #6
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f063 030f 	orn	r3, r3, #15
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	611a      	str	r2, [r3, #16]
}
 8005d4c:	e011      	b.n	8005d72 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d10d      	bne.n	8005d72 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	11db      	asrs	r3, r3, #7
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f003 0306 	and.w	r3, r3, #6
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	f063 030e 	orn	r3, r3, #14
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	611a      	str	r2, [r3, #16]
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d004      	beq.n	8005da4 <I2C_Master_ADD10+0x26>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d108      	bne.n	8005db6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00c      	beq.n	8005dc6 <I2C_Master_ADD10+0x48>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dc4:	605a      	str	r2, [r3, #4]
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b091      	sub	sp, #68	; 0x44
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005de0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b22      	cmp	r3, #34	; 0x22
 8005dfa:	f040 8169 	bne.w	80060d0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10f      	bne.n	8005e26 <I2C_Master_ADDR+0x54>
 8005e06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	d10b      	bne.n	8005e26 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	633b      	str	r3, [r7, #48]	; 0x30
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	633b      	str	r3, [r7, #48]	; 0x30
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	633b      	str	r3, [r7, #48]	; 0x30
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	e160      	b.n	80060e8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d11d      	bne.n	8005e6a <I2C_Master_ADDR+0x98>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e36:	d118      	bne.n	8005e6a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e38:	2300      	movs	r3, #0
 8005e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e5c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	651a      	str	r2, [r3, #80]	; 0x50
 8005e68:	e13e      	b.n	80060e8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d113      	bne.n	8005e9c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e74:	2300      	movs	r3, #0
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e115      	b.n	80060c8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	f040 808a 	bne.w	8005fbc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005eae:	d137      	bne.n	8005f20 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ebe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ece:	d113      	bne.n	8005ef8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ede:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	e0e7      	b.n	80060c8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef8:	2300      	movs	r3, #0
 8005efa:	623b      	str	r3, [r7, #32]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	623b      	str	r3, [r7, #32]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	623b      	str	r3, [r7, #32]
 8005f0c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	e0d3      	b.n	80060c8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	d02e      	beq.n	8005f84 <I2C_Master_ADDR+0x1b2>
 8005f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f28:	2b20      	cmp	r3, #32
 8005f2a:	d02b      	beq.n	8005f84 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2e:	2b12      	cmp	r3, #18
 8005f30:	d102      	bne.n	8005f38 <I2C_Master_ADDR+0x166>
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d125      	bne.n	8005f84 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d00e      	beq.n	8005f5c <I2C_Master_ADDR+0x18a>
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d00b      	beq.n	8005f5c <I2C_Master_ADDR+0x18a>
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d008      	beq.n	8005f5c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	e007      	b.n	8005f6c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f6a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	61fb      	str	r3, [r7, #28]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	61fb      	str	r3, [r7, #28]
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	e0a1      	b.n	80060c8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f92:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f94:	2300      	movs	r3, #0
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	e085      	b.n	80060c8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d14d      	bne.n	8006062 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d016      	beq.n	8005ffa <I2C_Master_ADDR+0x228>
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d013      	beq.n	8005ffa <I2C_Master_ADDR+0x228>
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	2b10      	cmp	r3, #16
 8005fd6:	d010      	beq.n	8005ffa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	e007      	b.n	800600a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006008:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006018:	d117      	bne.n	800604a <I2C_Master_ADDR+0x278>
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006020:	d00b      	beq.n	800603a <I2C_Master_ADDR+0x268>
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	2b01      	cmp	r3, #1
 8006026:	d008      	beq.n	800603a <I2C_Master_ADDR+0x268>
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	2b08      	cmp	r3, #8
 800602c:	d005      	beq.n	800603a <I2C_Master_ADDR+0x268>
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	2b10      	cmp	r3, #16
 8006032:	d002      	beq.n	800603a <I2C_Master_ADDR+0x268>
 8006034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006036:	2b20      	cmp	r3, #32
 8006038:	d107      	bne.n	800604a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006048:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	e032      	b.n	80060c8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006070:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800607c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006080:	d117      	bne.n	80060b2 <I2C_Master_ADDR+0x2e0>
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006088:	d00b      	beq.n	80060a2 <I2C_Master_ADDR+0x2d0>
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	2b01      	cmp	r3, #1
 800608e:	d008      	beq.n	80060a2 <I2C_Master_ADDR+0x2d0>
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	2b08      	cmp	r3, #8
 8006094:	d005      	beq.n	80060a2 <I2C_Master_ADDR+0x2d0>
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	2b10      	cmp	r3, #16
 800609a:	d002      	beq.n	80060a2 <I2C_Master_ADDR+0x2d0>
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d107      	bne.n	80060b2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060b2:	2300      	movs	r3, #0
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80060ce:	e00b      	b.n	80060e8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	68fb      	ldr	r3, [r7, #12]
}
 80060e6:	e7ff      	b.n	80060e8 <I2C_Master_ADDR+0x316>
 80060e8:	bf00      	nop
 80060ea:	3744      	adds	r7, #68	; 0x44
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006102:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d02b      	beq.n	8006166 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	781a      	ldrb	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d114      	bne.n	8006166 <I2C_SlaveTransmit_TXE+0x72>
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	2b29      	cmp	r3, #41	; 0x29
 8006140:	d111      	bne.n	8006166 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006150:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2221      	movs	r2, #33	; 0x21
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2228      	movs	r2, #40	; 0x28
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff f9e7 	bl	8005534 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d011      	beq.n	80061a4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d02c      	beq.n	8006224 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d114      	bne.n	8006224 <I2C_SlaveReceive_RXNE+0x74>
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	2b2a      	cmp	r3, #42	; 0x2a
 80061fe:	d111      	bne.n	8006224 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2222      	movs	r2, #34	; 0x22
 8006214:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2228      	movs	r2, #40	; 0x28
 800621a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff f992 	bl	8005548 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d012      	beq.n	8006264 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	1c5a      	adds	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800628a:	2b28      	cmp	r3, #40	; 0x28
 800628c:	d125      	bne.n	80062da <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800629c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80062a8:	2301      	movs	r3, #1
 80062aa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d103      	bne.n	80062be <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	81bb      	strh	r3, [r7, #12]
 80062bc:	e002      	b.n	80062c4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80062cc:	89ba      	ldrh	r2, [r7, #12]
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff f942 	bl	800555c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80062d8:	e00e      	b.n	80062f8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062da:	2300      	movs	r3, #0
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	60bb      	str	r3, [r7, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	60bb      	str	r3, [r7, #8]
 80062ee:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80062f8:	bf00      	nop
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800631e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006320:	2300      	movs	r3, #0
 8006322:	60bb      	str	r3, [r7, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	60bb      	str	r3, [r7, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0201 	orr.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800634c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800635c:	d172      	bne.n	8006444 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b22      	cmp	r3, #34	; 0x22
 8006362:	d002      	beq.n	800636a <I2C_Slave_STOPF+0x6a>
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	2b2a      	cmp	r3, #42	; 0x2a
 8006368:	d135      	bne.n	80063d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d005      	beq.n	800638e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f043 0204 	orr.w	r2, r3, #4
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800639c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe fad8 	bl	8004958 <HAL_DMA_GetState>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d049      	beq.n	8006442 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	4a69      	ldr	r2, [pc, #420]	; (8006558 <I2C_Slave_STOPF+0x258>)
 80063b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fe f920 	bl	8004600 <HAL_DMA_Abort_IT>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d03d      	beq.n	8006442 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063d0:	4610      	mov	r0, r2
 80063d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063d4:	e035      	b.n	8006442 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	b29a      	uxth	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d005      	beq.n	80063fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	f043 0204 	orr.w	r2, r3, #4
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006408:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe faa2 	bl	8004958 <HAL_DMA_GetState>
 8006414:	4603      	mov	r3, r0
 8006416:	2b01      	cmp	r3, #1
 8006418:	d014      	beq.n	8006444 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641e:	4a4e      	ldr	r2, [pc, #312]	; (8006558 <I2C_Slave_STOPF+0x258>)
 8006420:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006426:	4618      	mov	r0, r3
 8006428:	f7fe f8ea 	bl	8004600 <HAL_DMA_Abort_IT>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800643c:	4610      	mov	r0, r2
 800643e:	4798      	blx	r3
 8006440:	e000      	b.n	8006444 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006442:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006448:	b29b      	uxth	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d03e      	beq.n	80064cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b04      	cmp	r3, #4
 800645a:	d112      	bne.n	8006482 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691a      	ldr	r2, [r3, #16]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b40      	cmp	r3, #64	; 0x40
 800648e:	d112      	bne.n	80064b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	f043 0204 	orr.w	r2, r3, #4
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f8b3 	bl	8006640 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80064da:	e039      	b.n	8006550 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b2a      	cmp	r3, #42	; 0x2a
 80064e0:	d109      	bne.n	80064f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2228      	movs	r2, #40	; 0x28
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff f829 	bl	8005548 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b28      	cmp	r3, #40	; 0x28
 8006500:	d111      	bne.n	8006526 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a15      	ldr	r2, [pc, #84]	; (800655c <I2C_Slave_STOPF+0x25c>)
 8006506:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff f82a 	bl	8005578 <HAL_I2C_ListenCpltCallback>
}
 8006524:	e014      	b.n	8006550 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	2b22      	cmp	r3, #34	; 0x22
 800652c:	d002      	beq.n	8006534 <I2C_Slave_STOPF+0x234>
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b22      	cmp	r3, #34	; 0x22
 8006532:	d10d      	bne.n	8006550 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fe fffc 	bl	8005548 <HAL_I2C_SlaveRxCpltCallback>
}
 8006550:	bf00      	nop
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	080068a5 	.word	0x080068a5
 800655c:	ffff0000 	.word	0xffff0000

08006560 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b08      	cmp	r3, #8
 800657a:	d002      	beq.n	8006582 <I2C_Slave_AF+0x22>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b20      	cmp	r3, #32
 8006580:	d129      	bne.n	80065d6 <I2C_Slave_AF+0x76>
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b28      	cmp	r3, #40	; 0x28
 8006586:	d126      	bne.n	80065d6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a2c      	ldr	r2, [pc, #176]	; (800663c <I2C_Slave_AF+0xdc>)
 800658c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800659c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065a6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fe ffd2 	bl	8005578 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80065d4:	e02e      	b.n	8006634 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	2b21      	cmp	r3, #33	; 0x21
 80065da:	d126      	bne.n	800662a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a17      	ldr	r2, [pc, #92]	; (800663c <I2C_Slave_AF+0xdc>)
 80065e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2221      	movs	r2, #33	; 0x21
 80065e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006606:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006610:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006620:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fe ff86 	bl	8005534 <HAL_I2C_SlaveTxCpltCallback>
}
 8006628:	e004      	b.n	8006634 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006632:	615a      	str	r2, [r3, #20]
}
 8006634:	bf00      	nop
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	ffff0000 	.word	0xffff0000

08006640 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006656:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b10      	cmp	r3, #16
 800665c:	d002      	beq.n	8006664 <I2C_ITError+0x24>
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d10a      	bne.n	800667a <I2C_ITError+0x3a>
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	2b22      	cmp	r3, #34	; 0x22
 8006668:	d107      	bne.n	800667a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006678:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006680:	2b28      	cmp	r3, #40	; 0x28
 8006682:	d107      	bne.n	8006694 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2228      	movs	r2, #40	; 0x28
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006692:	e015      	b.n	80066c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800669e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a2:	d00a      	beq.n	80066ba <I2C_ITError+0x7a>
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2b60      	cmp	r3, #96	; 0x60
 80066a8:	d007      	beq.n	80066ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ce:	d162      	bne.n	8006796 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d020      	beq.n	8006730 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f2:	4a6a      	ldr	r2, [pc, #424]	; (800689c <I2C_ITError+0x25c>)
 80066f4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fd ff80 	bl	8004600 <HAL_DMA_Abort_IT>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 8089 	beq.w	800681a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0201 	bic.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800672a:	4610      	mov	r0, r2
 800672c:	4798      	blx	r3
 800672e:	e074      	b.n	800681a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	4a59      	ldr	r2, [pc, #356]	; (800689c <I2C_ITError+0x25c>)
 8006736:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	4618      	mov	r0, r3
 800673e:	f7fd ff5f 	bl	8004600 <HAL_DMA_Abort_IT>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d068      	beq.n	800681a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b40      	cmp	r3, #64	; 0x40
 8006754:	d10b      	bne.n	800676e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	b2d2      	uxtb	r2, r2
 8006762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0201 	bic.w	r2, r2, #1
 800677c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
 8006794:	e041      	b.n	800681a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b60      	cmp	r3, #96	; 0x60
 80067a0:	d125      	bne.n	80067ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ba:	2b40      	cmp	r3, #64	; 0x40
 80067bc:	d10b      	bne.n	80067d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0201 	bic.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fe feee 	bl	80055c8 <HAL_I2C_AbortCpltCallback>
 80067ec:	e015      	b.n	800681a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f8:	2b40      	cmp	r3, #64	; 0x40
 80067fa:	d10b      	bne.n	8006814 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691a      	ldr	r2, [r3, #16]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7fe fecd 	bl	80055b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10e      	bne.n	8006848 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006830:	2b00      	cmp	r3, #0
 8006832:	d109      	bne.n	8006848 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800683a:	2b00      	cmp	r3, #0
 800683c:	d104      	bne.n	8006848 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006844:	2b00      	cmp	r3, #0
 8006846:	d007      	beq.n	8006858 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006856:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b04      	cmp	r3, #4
 800686a:	d113      	bne.n	8006894 <I2C_ITError+0x254>
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b28      	cmp	r3, #40	; 0x28
 8006870:	d110      	bne.n	8006894 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a0a      	ldr	r2, [pc, #40]	; (80068a0 <I2C_ITError+0x260>)
 8006876:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7fe fe72 	bl	8005578 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006894:	bf00      	nop
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	080068a5 	.word	0x080068a5
 80068a0:	ffff0000 	.word	0xffff0000

080068a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80068be:	4b4b      	ldr	r3, [pc, #300]	; (80069ec <I2C_DMAAbort+0x148>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	08db      	lsrs	r3, r3, #3
 80068c4:	4a4a      	ldr	r2, [pc, #296]	; (80069f0 <I2C_DMAAbort+0x14c>)
 80068c6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ca:	0a1a      	lsrs	r2, r3, #8
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	00da      	lsls	r2, r3, #3
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d106      	bne.n	80068ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f043 0220 	orr.w	r2, r3, #32
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80068ea:	e00a      	b.n	8006902 <I2C_DMAAbort+0x5e>
    }
    count--;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006900:	d0ea      	beq.n	80068d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	2200      	movs	r2, #0
 8006910:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	2200      	movs	r2, #0
 8006920:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006930:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2200      	movs	r2, #0
 8006936:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006944:	2200      	movs	r2, #0
 8006946:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	2200      	movs	r2, #0
 8006956:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b60      	cmp	r3, #96	; 0x60
 8006972:	d10e      	bne.n	8006992 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2200      	movs	r2, #0
 8006988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800698a:	6978      	ldr	r0, [r7, #20]
 800698c:	f7fe fe1c 	bl	80055c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006990:	e027      	b.n	80069e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006992:	7cfb      	ldrb	r3, [r7, #19]
 8006994:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006998:	2b28      	cmp	r3, #40	; 0x28
 800699a:	d117      	bne.n	80069cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2200      	movs	r2, #0
 80069c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2228      	movs	r2, #40	; 0x28
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069ca:	e007      	b.n	80069dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2220      	movs	r2, #32
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80069dc:	6978      	ldr	r0, [r7, #20]
 80069de:	f7fe fde9 	bl	80055b4 <HAL_I2C_ErrorCallback>
}
 80069e2:	bf00      	nop
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	2000000c 	.word	0x2000000c
 80069f0:	14f8b589 	.word	0x14f8b589

080069f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a00:	4b13      	ldr	r3, [pc, #76]	; (8006a50 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	08db      	lsrs	r3, r3, #3
 8006a06:	4a13      	ldr	r2, [pc, #76]	; (8006a54 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	0a1a      	lsrs	r2, r3, #8
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d107      	bne.n	8006a32 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	f043 0220 	orr.w	r2, r3, #32
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e008      	b.n	8006a44 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a40:	d0e9      	beq.n	8006a16 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	2000000c 	.word	0x2000000c
 8006a54:	14f8b589 	.word	0x14f8b589

08006a58 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a64:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a68:	d103      	bne.n	8006a72 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a70:	e007      	b.n	8006a82 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a7a:	d102      	bne.n	8006a82 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2208      	movs	r2, #8
 8006a80:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e267      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d075      	beq.n	8006b9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aae:	4b88      	ldr	r3, [pc, #544]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d00c      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aba:	4b85      	ldr	r3, [pc, #532]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d112      	bne.n	8006aec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ac6:	4b82      	ldr	r3, [pc, #520]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad2:	d10b      	bne.n	8006aec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad4:	4b7e      	ldr	r3, [pc, #504]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d05b      	beq.n	8006b98 <HAL_RCC_OscConfig+0x108>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d157      	bne.n	8006b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e242      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af4:	d106      	bne.n	8006b04 <HAL_RCC_OscConfig+0x74>
 8006af6:	4b76      	ldr	r3, [pc, #472]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a75      	ldr	r2, [pc, #468]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	e01d      	b.n	8006b40 <HAL_RCC_OscConfig+0xb0>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b0c:	d10c      	bne.n	8006b28 <HAL_RCC_OscConfig+0x98>
 8006b0e:	4b70      	ldr	r3, [pc, #448]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a6f      	ldr	r2, [pc, #444]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	4b6d      	ldr	r3, [pc, #436]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a6c      	ldr	r2, [pc, #432]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	e00b      	b.n	8006b40 <HAL_RCC_OscConfig+0xb0>
 8006b28:	4b69      	ldr	r3, [pc, #420]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a68      	ldr	r2, [pc, #416]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	4b66      	ldr	r3, [pc, #408]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a65      	ldr	r2, [pc, #404]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d013      	beq.n	8006b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b48:	f7fd f802 	bl	8003b50 <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b50:	f7fc fffe 	bl	8003b50 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b64      	cmp	r3, #100	; 0x64
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e207      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b62:	4b5b      	ldr	r3, [pc, #364]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f0      	beq.n	8006b50 <HAL_RCC_OscConfig+0xc0>
 8006b6e:	e014      	b.n	8006b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b70:	f7fc ffee 	bl	8003b50 <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b78:	f7fc ffea 	bl	8003b50 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b64      	cmp	r3, #100	; 0x64
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e1f3      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b8a:	4b51      	ldr	r3, [pc, #324]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1f0      	bne.n	8006b78 <HAL_RCC_OscConfig+0xe8>
 8006b96:	e000      	b.n	8006b9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d063      	beq.n	8006c6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ba6:	4b4a      	ldr	r3, [pc, #296]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 030c 	and.w	r3, r3, #12
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00b      	beq.n	8006bca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bb2:	4b47      	ldr	r3, [pc, #284]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d11c      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bbe:	4b44      	ldr	r3, [pc, #272]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d116      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bca:	4b41      	ldr	r3, [pc, #260]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <HAL_RCC_OscConfig+0x152>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d001      	beq.n	8006be2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e1c7      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be2:	4b3b      	ldr	r3, [pc, #236]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	4937      	ldr	r1, [pc, #220]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bf6:	e03a      	b.n	8006c6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d020      	beq.n	8006c42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c00:	4b34      	ldr	r3, [pc, #208]	; (8006cd4 <HAL_RCC_OscConfig+0x244>)
 8006c02:	2201      	movs	r2, #1
 8006c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c06:	f7fc ffa3 	bl	8003b50 <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c0e:	f7fc ff9f 	bl	8003b50 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e1a8      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c20:	4b2b      	ldr	r3, [pc, #172]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0f0      	beq.n	8006c0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c2c:	4b28      	ldr	r3, [pc, #160]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	4925      	ldr	r1, [pc, #148]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	600b      	str	r3, [r1, #0]
 8006c40:	e015      	b.n	8006c6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c42:	4b24      	ldr	r3, [pc, #144]	; (8006cd4 <HAL_RCC_OscConfig+0x244>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c48:	f7fc ff82 	bl	8003b50 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c50:	f7fc ff7e 	bl	8003b50 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e187      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c62:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f0      	bne.n	8006c50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d036      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d016      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c82:	4b15      	ldr	r3, [pc, #84]	; (8006cd8 <HAL_RCC_OscConfig+0x248>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c88:	f7fc ff62 	bl	8003b50 <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c90:	f7fc ff5e 	bl	8003b50 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e167      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0f0      	beq.n	8006c90 <HAL_RCC_OscConfig+0x200>
 8006cae:	e01b      	b.n	8006ce8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cb0:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <HAL_RCC_OscConfig+0x248>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cb6:	f7fc ff4b 	bl	8003b50 <HAL_GetTick>
 8006cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cbc:	e00e      	b.n	8006cdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cbe:	f7fc ff47 	bl	8003b50 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d907      	bls.n	8006cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e150      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	42470000 	.word	0x42470000
 8006cd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cdc:	4b88      	ldr	r3, [pc, #544]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1ea      	bne.n	8006cbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8097 	beq.w	8006e24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cfa:	4b81      	ldr	r3, [pc, #516]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10f      	bne.n	8006d26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d06:	2300      	movs	r3, #0
 8006d08:	60bb      	str	r3, [r7, #8]
 8006d0a:	4b7d      	ldr	r3, [pc, #500]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	4a7c      	ldr	r2, [pc, #496]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d14:	6413      	str	r3, [r2, #64]	; 0x40
 8006d16:	4b7a      	ldr	r3, [pc, #488]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d22:	2301      	movs	r3, #1
 8006d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d26:	4b77      	ldr	r3, [pc, #476]	; (8006f04 <HAL_RCC_OscConfig+0x474>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d118      	bne.n	8006d64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d32:	4b74      	ldr	r3, [pc, #464]	; (8006f04 <HAL_RCC_OscConfig+0x474>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a73      	ldr	r2, [pc, #460]	; (8006f04 <HAL_RCC_OscConfig+0x474>)
 8006d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d3e:	f7fc ff07 	bl	8003b50 <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d46:	f7fc ff03 	bl	8003b50 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e10c      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d58:	4b6a      	ldr	r3, [pc, #424]	; (8006f04 <HAL_RCC_OscConfig+0x474>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0f0      	beq.n	8006d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d106      	bne.n	8006d7a <HAL_RCC_OscConfig+0x2ea>
 8006d6c:	4b64      	ldr	r3, [pc, #400]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d70:	4a63      	ldr	r2, [pc, #396]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d72:	f043 0301 	orr.w	r3, r3, #1
 8006d76:	6713      	str	r3, [r2, #112]	; 0x70
 8006d78:	e01c      	b.n	8006db4 <HAL_RCC_OscConfig+0x324>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	2b05      	cmp	r3, #5
 8006d80:	d10c      	bne.n	8006d9c <HAL_RCC_OscConfig+0x30c>
 8006d82:	4b5f      	ldr	r3, [pc, #380]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	4a5e      	ldr	r2, [pc, #376]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d88:	f043 0304 	orr.w	r3, r3, #4
 8006d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d8e:	4b5c      	ldr	r3, [pc, #368]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d92:	4a5b      	ldr	r2, [pc, #364]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d94:	f043 0301 	orr.w	r3, r3, #1
 8006d98:	6713      	str	r3, [r2, #112]	; 0x70
 8006d9a:	e00b      	b.n	8006db4 <HAL_RCC_OscConfig+0x324>
 8006d9c:	4b58      	ldr	r3, [pc, #352]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da0:	4a57      	ldr	r2, [pc, #348]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006da2:	f023 0301 	bic.w	r3, r3, #1
 8006da6:	6713      	str	r3, [r2, #112]	; 0x70
 8006da8:	4b55      	ldr	r3, [pc, #340]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dac:	4a54      	ldr	r2, [pc, #336]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006dae:	f023 0304 	bic.w	r3, r3, #4
 8006db2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d015      	beq.n	8006de8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dbc:	f7fc fec8 	bl	8003b50 <HAL_GetTick>
 8006dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc2:	e00a      	b.n	8006dda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dc4:	f7fc fec4 	bl	8003b50 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e0cb      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dda:	4b49      	ldr	r3, [pc, #292]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0ee      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x334>
 8006de6:	e014      	b.n	8006e12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006de8:	f7fc feb2 	bl	8003b50 <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dee:	e00a      	b.n	8006e06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006df0:	f7fc feae 	bl	8003b50 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e0b5      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e06:	4b3e      	ldr	r3, [pc, #248]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1ee      	bne.n	8006df0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d105      	bne.n	8006e24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e18:	4b39      	ldr	r3, [pc, #228]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	4a38      	ldr	r2, [pc, #224]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 80a1 	beq.w	8006f70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e2e:	4b34      	ldr	r3, [pc, #208]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f003 030c 	and.w	r3, r3, #12
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d05c      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d141      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e42:	4b31      	ldr	r3, [pc, #196]	; (8006f08 <HAL_RCC_OscConfig+0x478>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e48:	f7fc fe82 	bl	8003b50 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e50:	f7fc fe7e 	bl	8003b50 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e087      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e62:	4b27      	ldr	r3, [pc, #156]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f0      	bne.n	8006e50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69da      	ldr	r2, [r3, #28]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	019b      	lsls	r3, r3, #6
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e84:	085b      	lsrs	r3, r3, #1
 8006e86:	3b01      	subs	r3, #1
 8006e88:	041b      	lsls	r3, r3, #16
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	061b      	lsls	r3, r3, #24
 8006e92:	491b      	ldr	r1, [pc, #108]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e98:	4b1b      	ldr	r3, [pc, #108]	; (8006f08 <HAL_RCC_OscConfig+0x478>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e9e:	f7fc fe57 	bl	8003b50 <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ea6:	f7fc fe53 	bl	8003b50 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e05c      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eb8:	4b11      	ldr	r3, [pc, #68]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x416>
 8006ec4:	e054      	b.n	8006f70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec6:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <HAL_RCC_OscConfig+0x478>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ecc:	f7fc fe40 	bl	8003b50 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ed4:	f7fc fe3c 	bl	8003b50 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e045      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee6:	4b06      	ldr	r3, [pc, #24]	; (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f0      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x444>
 8006ef2:	e03d      	b.n	8006f70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d107      	bne.n	8006f0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e038      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
 8006f00:	40023800 	.word	0x40023800
 8006f04:	40007000 	.word	0x40007000
 8006f08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f0c:	4b1b      	ldr	r3, [pc, #108]	; (8006f7c <HAL_RCC_OscConfig+0x4ec>)
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d028      	beq.n	8006f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d121      	bne.n	8006f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d11a      	bne.n	8006f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d111      	bne.n	8006f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	3b01      	subs	r3, #1
 8006f56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d107      	bne.n	8006f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d001      	beq.n	8006f70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40023800 	.word	0x40023800

08006f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0cc      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f94:	4b68      	ldr	r3, [pc, #416]	; (8007138 <HAL_RCC_ClockConfig+0x1b8>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d90c      	bls.n	8006fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fa2:	4b65      	ldr	r3, [pc, #404]	; (8007138 <HAL_RCC_ClockConfig+0x1b8>)
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006faa:	4b63      	ldr	r3, [pc, #396]	; (8007138 <HAL_RCC_ClockConfig+0x1b8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d001      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0b8      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d020      	beq.n	800700a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0304 	and.w	r3, r3, #4
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fd4:	4b59      	ldr	r3, [pc, #356]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	4a58      	ldr	r2, [pc, #352]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8006fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0308 	and.w	r3, r3, #8
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fec:	4b53      	ldr	r3, [pc, #332]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	4a52      	ldr	r2, [pc, #328]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ff8:	4b50      	ldr	r3, [pc, #320]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	494d      	ldr	r1, [pc, #308]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	4313      	orrs	r3, r2
 8007008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d044      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d107      	bne.n	800702e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800701e:	4b47      	ldr	r3, [pc, #284]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d119      	bne.n	800705e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e07f      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d003      	beq.n	800703e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800703a:	2b03      	cmp	r3, #3
 800703c:	d107      	bne.n	800704e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800703e:	4b3f      	ldr	r3, [pc, #252]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d109      	bne.n	800705e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e06f      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800704e:	4b3b      	ldr	r3, [pc, #236]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e067      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800705e:	4b37      	ldr	r3, [pc, #220]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f023 0203 	bic.w	r2, r3, #3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	4934      	ldr	r1, [pc, #208]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 800706c:	4313      	orrs	r3, r2
 800706e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007070:	f7fc fd6e 	bl	8003b50 <HAL_GetTick>
 8007074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007076:	e00a      	b.n	800708e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007078:	f7fc fd6a 	bl	8003b50 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	f241 3288 	movw	r2, #5000	; 0x1388
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e04f      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800708e:	4b2b      	ldr	r3, [pc, #172]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 020c 	and.w	r2, r3, #12
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	429a      	cmp	r2, r3
 800709e:	d1eb      	bne.n	8007078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070a0:	4b25      	ldr	r3, [pc, #148]	; (8007138 <HAL_RCC_ClockConfig+0x1b8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d20c      	bcs.n	80070c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ae:	4b22      	ldr	r3, [pc, #136]	; (8007138 <HAL_RCC_ClockConfig+0x1b8>)
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070b6:	4b20      	ldr	r3, [pc, #128]	; (8007138 <HAL_RCC_ClockConfig+0x1b8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d001      	beq.n	80070c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e032      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d008      	beq.n	80070e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070d4:	4b19      	ldr	r3, [pc, #100]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	4916      	ldr	r1, [pc, #88]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d009      	beq.n	8007106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070f2:	4b12      	ldr	r3, [pc, #72]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	490e      	ldr	r1, [pc, #56]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	4313      	orrs	r3, r2
 8007104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007106:	f000 f821 	bl	800714c <HAL_RCC_GetSysClockFreq>
 800710a:	4602      	mov	r2, r0
 800710c:	4b0b      	ldr	r3, [pc, #44]	; (800713c <HAL_RCC_ClockConfig+0x1bc>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	091b      	lsrs	r3, r3, #4
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	490a      	ldr	r1, [pc, #40]	; (8007140 <HAL_RCC_ClockConfig+0x1c0>)
 8007118:	5ccb      	ldrb	r3, [r1, r3]
 800711a:	fa22 f303 	lsr.w	r3, r2, r3
 800711e:	4a09      	ldr	r2, [pc, #36]	; (8007144 <HAL_RCC_ClockConfig+0x1c4>)
 8007120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007122:	4b09      	ldr	r3, [pc, #36]	; (8007148 <HAL_RCC_ClockConfig+0x1c8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f7fc fb0c 	bl	8003744 <HAL_InitTick>

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40023c00 	.word	0x40023c00
 800713c:	40023800 	.word	0x40023800
 8007140:	080198b4 	.word	0x080198b4
 8007144:	2000000c 	.word	0x2000000c
 8007148:	20000010 	.word	0x20000010

0800714c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800714c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007150:	b094      	sub	sp, #80	; 0x50
 8007152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	647b      	str	r3, [r7, #68]	; 0x44
 8007158:	2300      	movs	r3, #0
 800715a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800715c:	2300      	movs	r3, #0
 800715e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007164:	4b79      	ldr	r3, [pc, #484]	; (800734c <HAL_RCC_GetSysClockFreq+0x200>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 030c 	and.w	r3, r3, #12
 800716c:	2b08      	cmp	r3, #8
 800716e:	d00d      	beq.n	800718c <HAL_RCC_GetSysClockFreq+0x40>
 8007170:	2b08      	cmp	r3, #8
 8007172:	f200 80e1 	bhi.w	8007338 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_RCC_GetSysClockFreq+0x34>
 800717a:	2b04      	cmp	r3, #4
 800717c:	d003      	beq.n	8007186 <HAL_RCC_GetSysClockFreq+0x3a>
 800717e:	e0db      	b.n	8007338 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007180:	4b73      	ldr	r3, [pc, #460]	; (8007350 <HAL_RCC_GetSysClockFreq+0x204>)
 8007182:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007184:	e0db      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007186:	4b73      	ldr	r3, [pc, #460]	; (8007354 <HAL_RCC_GetSysClockFreq+0x208>)
 8007188:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800718a:	e0d8      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800718c:	4b6f      	ldr	r3, [pc, #444]	; (800734c <HAL_RCC_GetSysClockFreq+0x200>)
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007194:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007196:	4b6d      	ldr	r3, [pc, #436]	; (800734c <HAL_RCC_GetSysClockFreq+0x200>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d063      	beq.n	800726a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071a2:	4b6a      	ldr	r3, [pc, #424]	; (800734c <HAL_RCC_GetSysClockFreq+0x200>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	099b      	lsrs	r3, r3, #6
 80071a8:	2200      	movs	r2, #0
 80071aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80071ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b4:	633b      	str	r3, [r7, #48]	; 0x30
 80071b6:	2300      	movs	r3, #0
 80071b8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80071be:	4622      	mov	r2, r4
 80071c0:	462b      	mov	r3, r5
 80071c2:	f04f 0000 	mov.w	r0, #0
 80071c6:	f04f 0100 	mov.w	r1, #0
 80071ca:	0159      	lsls	r1, r3, #5
 80071cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071d0:	0150      	lsls	r0, r2, #5
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4621      	mov	r1, r4
 80071d8:	1a51      	subs	r1, r2, r1
 80071da:	6139      	str	r1, [r7, #16]
 80071dc:	4629      	mov	r1, r5
 80071de:	eb63 0301 	sbc.w	r3, r3, r1
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	f04f 0300 	mov.w	r3, #0
 80071ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071f0:	4659      	mov	r1, fp
 80071f2:	018b      	lsls	r3, r1, #6
 80071f4:	4651      	mov	r1, sl
 80071f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071fa:	4651      	mov	r1, sl
 80071fc:	018a      	lsls	r2, r1, #6
 80071fe:	4651      	mov	r1, sl
 8007200:	ebb2 0801 	subs.w	r8, r2, r1
 8007204:	4659      	mov	r1, fp
 8007206:	eb63 0901 	sbc.w	r9, r3, r1
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800721a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800721e:	4690      	mov	r8, r2
 8007220:	4699      	mov	r9, r3
 8007222:	4623      	mov	r3, r4
 8007224:	eb18 0303 	adds.w	r3, r8, r3
 8007228:	60bb      	str	r3, [r7, #8]
 800722a:	462b      	mov	r3, r5
 800722c:	eb49 0303 	adc.w	r3, r9, r3
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800723e:	4629      	mov	r1, r5
 8007240:	024b      	lsls	r3, r1, #9
 8007242:	4621      	mov	r1, r4
 8007244:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007248:	4621      	mov	r1, r4
 800724a:	024a      	lsls	r2, r1, #9
 800724c:	4610      	mov	r0, r2
 800724e:	4619      	mov	r1, r3
 8007250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007252:	2200      	movs	r2, #0
 8007254:	62bb      	str	r3, [r7, #40]	; 0x28
 8007256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007258:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800725c:	f7f9 fc96 	bl	8000b8c <__aeabi_uldivmod>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4613      	mov	r3, r2
 8007266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007268:	e058      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800726a:	4b38      	ldr	r3, [pc, #224]	; (800734c <HAL_RCC_GetSysClockFreq+0x200>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	099b      	lsrs	r3, r3, #6
 8007270:	2200      	movs	r2, #0
 8007272:	4618      	mov	r0, r3
 8007274:	4611      	mov	r1, r2
 8007276:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800727a:	623b      	str	r3, [r7, #32]
 800727c:	2300      	movs	r3, #0
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
 8007280:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007284:	4642      	mov	r2, r8
 8007286:	464b      	mov	r3, r9
 8007288:	f04f 0000 	mov.w	r0, #0
 800728c:	f04f 0100 	mov.w	r1, #0
 8007290:	0159      	lsls	r1, r3, #5
 8007292:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007296:	0150      	lsls	r0, r2, #5
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4641      	mov	r1, r8
 800729e:	ebb2 0a01 	subs.w	sl, r2, r1
 80072a2:	4649      	mov	r1, r9
 80072a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80072b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80072b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80072bc:	ebb2 040a 	subs.w	r4, r2, sl
 80072c0:	eb63 050b 	sbc.w	r5, r3, fp
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	00eb      	lsls	r3, r5, #3
 80072ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072d2:	00e2      	lsls	r2, r4, #3
 80072d4:	4614      	mov	r4, r2
 80072d6:	461d      	mov	r5, r3
 80072d8:	4643      	mov	r3, r8
 80072da:	18e3      	adds	r3, r4, r3
 80072dc:	603b      	str	r3, [r7, #0]
 80072de:	464b      	mov	r3, r9
 80072e0:	eb45 0303 	adc.w	r3, r5, r3
 80072e4:	607b      	str	r3, [r7, #4]
 80072e6:	f04f 0200 	mov.w	r2, #0
 80072ea:	f04f 0300 	mov.w	r3, #0
 80072ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072f2:	4629      	mov	r1, r5
 80072f4:	028b      	lsls	r3, r1, #10
 80072f6:	4621      	mov	r1, r4
 80072f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072fc:	4621      	mov	r1, r4
 80072fe:	028a      	lsls	r2, r1, #10
 8007300:	4610      	mov	r0, r2
 8007302:	4619      	mov	r1, r3
 8007304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007306:	2200      	movs	r2, #0
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	61fa      	str	r2, [r7, #28]
 800730c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007310:	f7f9 fc3c 	bl	8000b8c <__aeabi_uldivmod>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4613      	mov	r3, r2
 800731a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <HAL_RCC_GetSysClockFreq+0x200>)
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	0c1b      	lsrs	r3, r3, #16
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	3301      	adds	r3, #1
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800732c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800732e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007330:	fbb2 f3f3 	udiv	r3, r2, r3
 8007334:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007336:	e002      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <HAL_RCC_GetSysClockFreq+0x204>)
 800733a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800733c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800733e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007340:	4618      	mov	r0, r3
 8007342:	3750      	adds	r7, #80	; 0x50
 8007344:	46bd      	mov	sp, r7
 8007346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800734a:	bf00      	nop
 800734c:	40023800 	.word	0x40023800
 8007350:	00f42400 	.word	0x00f42400
 8007354:	007a1200 	.word	0x007a1200

08007358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800735c:	4b03      	ldr	r3, [pc, #12]	; (800736c <HAL_RCC_GetHCLKFreq+0x14>)
 800735e:	681b      	ldr	r3, [r3, #0]
}
 8007360:	4618      	mov	r0, r3
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	2000000c 	.word	0x2000000c

08007370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007374:	f7ff fff0 	bl	8007358 <HAL_RCC_GetHCLKFreq>
 8007378:	4602      	mov	r2, r0
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	0a9b      	lsrs	r3, r3, #10
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	4903      	ldr	r1, [pc, #12]	; (8007394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007386:	5ccb      	ldrb	r3, [r1, r3]
 8007388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800738c:	4618      	mov	r0, r3
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40023800 	.word	0x40023800
 8007394:	080198c4 	.word	0x080198c4

08007398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800739c:	f7ff ffdc 	bl	8007358 <HAL_RCC_GetHCLKFreq>
 80073a0:	4602      	mov	r2, r0
 80073a2:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	0b5b      	lsrs	r3, r3, #13
 80073a8:	f003 0307 	and.w	r3, r3, #7
 80073ac:	4903      	ldr	r1, [pc, #12]	; (80073bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80073ae:	5ccb      	ldrb	r3, [r1, r3]
 80073b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40023800 	.word	0x40023800
 80073bc:	080198c4 	.word	0x080198c4

080073c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	220f      	movs	r2, #15
 80073ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073d0:	4b12      	ldr	r3, [pc, #72]	; (800741c <HAL_RCC_GetClockConfig+0x5c>)
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f003 0203 	and.w	r2, r3, #3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80073dc:	4b0f      	ldr	r3, [pc, #60]	; (800741c <HAL_RCC_GetClockConfig+0x5c>)
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80073e8:	4b0c      	ldr	r3, [pc, #48]	; (800741c <HAL_RCC_GetClockConfig+0x5c>)
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80073f4:	4b09      	ldr	r3, [pc, #36]	; (800741c <HAL_RCC_GetClockConfig+0x5c>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	08db      	lsrs	r3, r3, #3
 80073fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007402:	4b07      	ldr	r3, [pc, #28]	; (8007420 <HAL_RCC_GetClockConfig+0x60>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0207 	and.w	r2, r3, #7
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	601a      	str	r2, [r3, #0]
}
 800740e:	bf00      	nop
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	40023800 	.word	0x40023800
 8007420:	40023c00 	.word	0x40023c00

08007424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e041      	b.n	80074ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d106      	bne.n	8007450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f839 	bl	80074c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3304      	adds	r3, #4
 8007460:	4619      	mov	r1, r3
 8007462:	4610      	mov	r0, r2
 8007464:	f000 fc7a 	bl	8007d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074ca:	bf00      	nop
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
	...

080074d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d001      	beq.n	80074f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e044      	b.n	800757a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0201 	orr.w	r2, r2, #1
 8007506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1e      	ldr	r2, [pc, #120]	; (8007588 <HAL_TIM_Base_Start_IT+0xb0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d018      	beq.n	8007544 <HAL_TIM_Base_Start_IT+0x6c>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751a:	d013      	beq.n	8007544 <HAL_TIM_Base_Start_IT+0x6c>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1a      	ldr	r2, [pc, #104]	; (800758c <HAL_TIM_Base_Start_IT+0xb4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00e      	beq.n	8007544 <HAL_TIM_Base_Start_IT+0x6c>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a19      	ldr	r2, [pc, #100]	; (8007590 <HAL_TIM_Base_Start_IT+0xb8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d009      	beq.n	8007544 <HAL_TIM_Base_Start_IT+0x6c>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a17      	ldr	r2, [pc, #92]	; (8007594 <HAL_TIM_Base_Start_IT+0xbc>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d004      	beq.n	8007544 <HAL_TIM_Base_Start_IT+0x6c>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a16      	ldr	r2, [pc, #88]	; (8007598 <HAL_TIM_Base_Start_IT+0xc0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d111      	bne.n	8007568 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b06      	cmp	r3, #6
 8007554:	d010      	beq.n	8007578 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0201 	orr.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007566:	e007      	b.n	8007578 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0201 	orr.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40010000 	.word	0x40010000
 800758c:	40000400 	.word	0x40000400
 8007590:	40000800 	.word	0x40000800
 8007594:	40000c00 	.word	0x40000c00
 8007598:	40014000 	.word	0x40014000

0800759c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d109      	bne.n	80075c0 <HAL_TIM_PWM_Start+0x24>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	bf14      	ite	ne
 80075b8:	2301      	movne	r3, #1
 80075ba:	2300      	moveq	r3, #0
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	e022      	b.n	8007606 <HAL_TIM_PWM_Start+0x6a>
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d109      	bne.n	80075da <HAL_TIM_PWM_Start+0x3e>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	bf14      	ite	ne
 80075d2:	2301      	movne	r3, #1
 80075d4:	2300      	moveq	r3, #0
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	e015      	b.n	8007606 <HAL_TIM_PWM_Start+0x6a>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d109      	bne.n	80075f4 <HAL_TIM_PWM_Start+0x58>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	bf14      	ite	ne
 80075ec:	2301      	movne	r3, #1
 80075ee:	2300      	moveq	r3, #0
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	e008      	b.n	8007606 <HAL_TIM_PWM_Start+0x6a>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	bf14      	ite	ne
 8007600:	2301      	movne	r3, #1
 8007602:	2300      	moveq	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e068      	b.n	80076e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d104      	bne.n	800761e <HAL_TIM_PWM_Start+0x82>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800761c:	e013      	b.n	8007646 <HAL_TIM_PWM_Start+0xaa>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b04      	cmp	r3, #4
 8007622:	d104      	bne.n	800762e <HAL_TIM_PWM_Start+0x92>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800762c:	e00b      	b.n	8007646 <HAL_TIM_PWM_Start+0xaa>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b08      	cmp	r3, #8
 8007632:	d104      	bne.n	800763e <HAL_TIM_PWM_Start+0xa2>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800763c:	e003      	b.n	8007646 <HAL_TIM_PWM_Start+0xaa>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2202      	movs	r2, #2
 8007642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2201      	movs	r2, #1
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 fd90 	bl	8008174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a23      	ldr	r2, [pc, #140]	; (80076e8 <HAL_TIM_PWM_Start+0x14c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d107      	bne.n	800766e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800766c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a1d      	ldr	r2, [pc, #116]	; (80076e8 <HAL_TIM_PWM_Start+0x14c>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d018      	beq.n	80076aa <HAL_TIM_PWM_Start+0x10e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007680:	d013      	beq.n	80076aa <HAL_TIM_PWM_Start+0x10e>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a19      	ldr	r2, [pc, #100]	; (80076ec <HAL_TIM_PWM_Start+0x150>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d00e      	beq.n	80076aa <HAL_TIM_PWM_Start+0x10e>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a17      	ldr	r2, [pc, #92]	; (80076f0 <HAL_TIM_PWM_Start+0x154>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d009      	beq.n	80076aa <HAL_TIM_PWM_Start+0x10e>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a16      	ldr	r2, [pc, #88]	; (80076f4 <HAL_TIM_PWM_Start+0x158>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d004      	beq.n	80076aa <HAL_TIM_PWM_Start+0x10e>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a14      	ldr	r2, [pc, #80]	; (80076f8 <HAL_TIM_PWM_Start+0x15c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d111      	bne.n	80076ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b06      	cmp	r3, #6
 80076ba:	d010      	beq.n	80076de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0201 	orr.w	r2, r2, #1
 80076ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076cc:	e007      	b.n	80076de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f042 0201 	orr.w	r2, r2, #1
 80076dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	40010000 	.word	0x40010000
 80076ec:	40000400 	.word	0x40000400
 80076f0:	40000800 	.word	0x40000800
 80076f4:	40000c00 	.word	0x40000c00
 80076f8:	40014000 	.word	0x40014000

080076fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e097      	b.n	8007840 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d106      	bne.n	800772a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f88f 	bl	8007848 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2202      	movs	r2, #2
 800772e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007740:	f023 0307 	bic.w	r3, r3, #7
 8007744:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3304      	adds	r3, #4
 800774e:	4619      	mov	r1, r3
 8007750:	4610      	mov	r0, r2
 8007752:	f000 fb03 	bl	8007d5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800777e:	f023 0303 	bic.w	r3, r3, #3
 8007782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	4313      	orrs	r3, r2
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800779c:	f023 030c 	bic.w	r3, r3, #12
 80077a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68da      	ldr	r2, [r3, #12]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	021b      	lsls	r3, r3, #8
 80077b8:	4313      	orrs	r3, r2
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	011a      	lsls	r2, r3, #4
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	031b      	lsls	r3, r3, #12
 80077cc:	4313      	orrs	r3, r2
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80077da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80077e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	4313      	orrs	r3, r2
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800786c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007874:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800787c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007884:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d110      	bne.n	80078ae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d102      	bne.n	8007898 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007892:	7b7b      	ldrb	r3, [r7, #13]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d001      	beq.n	800789c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e069      	b.n	8007970 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078ac:	e031      	b.n	8007912 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d110      	bne.n	80078d6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d102      	bne.n	80078c0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078ba:	7b3b      	ldrb	r3, [r7, #12]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d001      	beq.n	80078c4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e055      	b.n	8007970 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078d4:	e01d      	b.n	8007912 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d108      	bne.n	80078ee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d105      	bne.n	80078ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078e2:	7b7b      	ldrb	r3, [r7, #13]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d102      	bne.n	80078ee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078e8:	7b3b      	ldrb	r3, [r7, #12]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d001      	beq.n	80078f2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e03e      	b.n	8007970 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2202      	movs	r2, #2
 80078f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2202      	movs	r2, #2
 800790e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <HAL_TIM_Encoder_Start+0xc4>
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b04      	cmp	r3, #4
 800791c:	d008      	beq.n	8007930 <HAL_TIM_Encoder_Start+0xd4>
 800791e:	e00f      	b.n	8007940 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2201      	movs	r2, #1
 8007926:	2100      	movs	r1, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fc23 	bl	8008174 <TIM_CCxChannelCmd>
      break;
 800792e:	e016      	b.n	800795e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2201      	movs	r2, #1
 8007936:	2104      	movs	r1, #4
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fc1b 	bl	8008174 <TIM_CCxChannelCmd>
      break;
 800793e:	e00e      	b.n	800795e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2201      	movs	r2, #1
 8007946:	2100      	movs	r1, #0
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fc13 	bl	8008174 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2201      	movs	r2, #1
 8007954:	2104      	movs	r1, #4
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fc0c 	bl	8008174 <TIM_CCxChannelCmd>
      break;
 800795c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0201 	orr.w	r2, r2, #1
 800796c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b02      	cmp	r3, #2
 800798c:	d122      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b02      	cmp	r3, #2
 800799a:	d11b      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f06f 0202 	mvn.w	r2, #2
 80079a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f9b0 	bl	8007d20 <HAL_TIM_IC_CaptureCallback>
 80079c0:	e005      	b.n	80079ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f9a2 	bl	8007d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f9b3 	bl	8007d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d122      	bne.n	8007a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d11b      	bne.n	8007a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f06f 0204 	mvn.w	r2, #4
 80079f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f986 	bl	8007d20 <HAL_TIM_IC_CaptureCallback>
 8007a14:	e005      	b.n	8007a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f978 	bl	8007d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f989 	bl	8007d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f003 0308 	and.w	r3, r3, #8
 8007a32:	2b08      	cmp	r3, #8
 8007a34:	d122      	bne.n	8007a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f003 0308 	and.w	r3, r3, #8
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	d11b      	bne.n	8007a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f06f 0208 	mvn.w	r2, #8
 8007a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2204      	movs	r2, #4
 8007a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f95c 	bl	8007d20 <HAL_TIM_IC_CaptureCallback>
 8007a68:	e005      	b.n	8007a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f94e 	bl	8007d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f95f 	bl	8007d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f003 0310 	and.w	r3, r3, #16
 8007a86:	2b10      	cmp	r3, #16
 8007a88:	d122      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b10      	cmp	r3, #16
 8007a96:	d11b      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f06f 0210 	mvn.w	r2, #16
 8007aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2208      	movs	r2, #8
 8007aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f932 	bl	8007d20 <HAL_TIM_IC_CaptureCallback>
 8007abc:	e005      	b.n	8007aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f924 	bl	8007d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f935 	bl	8007d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d10e      	bne.n	8007afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d107      	bne.n	8007afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f06f 0201 	mvn.w	r2, #1
 8007af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7fa fe1a 	bl	8002730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b06:	2b80      	cmp	r3, #128	; 0x80
 8007b08:	d10e      	bne.n	8007b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b14:	2b80      	cmp	r3, #128	; 0x80
 8007b16:	d107      	bne.n	8007b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fb55 	bl	80081d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d10e      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	d107      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8fa 	bl	8007d48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	d10e      	bne.n	8007b80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d107      	bne.n	8007b80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f06f 0220 	mvn.w	r2, #32
 8007b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fb1f 	bl	80081be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	e0ae      	b.n	8007d04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b0c      	cmp	r3, #12
 8007bb2:	f200 809f 	bhi.w	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bf1 	.word	0x08007bf1
 8007bc0:	08007cf5 	.word	0x08007cf5
 8007bc4:	08007cf5 	.word	0x08007cf5
 8007bc8:	08007cf5 	.word	0x08007cf5
 8007bcc:	08007c31 	.word	0x08007c31
 8007bd0:	08007cf5 	.word	0x08007cf5
 8007bd4:	08007cf5 	.word	0x08007cf5
 8007bd8:	08007cf5 	.word	0x08007cf5
 8007bdc:	08007c73 	.word	0x08007c73
 8007be0:	08007cf5 	.word	0x08007cf5
 8007be4:	08007cf5 	.word	0x08007cf5
 8007be8:	08007cf5 	.word	0x08007cf5
 8007bec:	08007cb3 	.word	0x08007cb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 f930 	bl	8007e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699a      	ldr	r2, [r3, #24]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f042 0208 	orr.w	r2, r2, #8
 8007c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 0204 	bic.w	r2, r2, #4
 8007c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6999      	ldr	r1, [r3, #24]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	691a      	ldr	r2, [r3, #16]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	619a      	str	r2, [r3, #24]
      break;
 8007c2e:	e064      	b.n	8007cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68b9      	ldr	r1, [r7, #8]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 f976 	bl	8007f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699a      	ldr	r2, [r3, #24]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6999      	ldr	r1, [r3, #24]
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	021a      	lsls	r2, r3, #8
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	619a      	str	r2, [r3, #24]
      break;
 8007c70:	e043      	b.n	8007cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68b9      	ldr	r1, [r7, #8]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 f9c1 	bl	8008000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69da      	ldr	r2, [r3, #28]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f042 0208 	orr.w	r2, r2, #8
 8007c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69da      	ldr	r2, [r3, #28]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0204 	bic.w	r2, r2, #4
 8007c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69d9      	ldr	r1, [r3, #28]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	61da      	str	r2, [r3, #28]
      break;
 8007cb0:	e023      	b.n	8007cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68b9      	ldr	r1, [r7, #8]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 fa0b 	bl	80080d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69da      	ldr	r2, [r3, #28]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69d9      	ldr	r1, [r3, #28]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	021a      	lsls	r2, r3, #8
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	61da      	str	r2, [r3, #28]
      break;
 8007cf2:	e002      	b.n	8007cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a34      	ldr	r2, [pc, #208]	; (8007e40 <TIM_Base_SetConfig+0xe4>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d00f      	beq.n	8007d94 <TIM_Base_SetConfig+0x38>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7a:	d00b      	beq.n	8007d94 <TIM_Base_SetConfig+0x38>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a31      	ldr	r2, [pc, #196]	; (8007e44 <TIM_Base_SetConfig+0xe8>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d007      	beq.n	8007d94 <TIM_Base_SetConfig+0x38>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a30      	ldr	r2, [pc, #192]	; (8007e48 <TIM_Base_SetConfig+0xec>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d003      	beq.n	8007d94 <TIM_Base_SetConfig+0x38>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a2f      	ldr	r2, [pc, #188]	; (8007e4c <TIM_Base_SetConfig+0xf0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d108      	bne.n	8007da6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a25      	ldr	r2, [pc, #148]	; (8007e40 <TIM_Base_SetConfig+0xe4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01b      	beq.n	8007de6 <TIM_Base_SetConfig+0x8a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db4:	d017      	beq.n	8007de6 <TIM_Base_SetConfig+0x8a>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a22      	ldr	r2, [pc, #136]	; (8007e44 <TIM_Base_SetConfig+0xe8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <TIM_Base_SetConfig+0x8a>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a21      	ldr	r2, [pc, #132]	; (8007e48 <TIM_Base_SetConfig+0xec>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00f      	beq.n	8007de6 <TIM_Base_SetConfig+0x8a>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a20      	ldr	r2, [pc, #128]	; (8007e4c <TIM_Base_SetConfig+0xf0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00b      	beq.n	8007de6 <TIM_Base_SetConfig+0x8a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a1f      	ldr	r2, [pc, #124]	; (8007e50 <TIM_Base_SetConfig+0xf4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d007      	beq.n	8007de6 <TIM_Base_SetConfig+0x8a>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a1e      	ldr	r2, [pc, #120]	; (8007e54 <TIM_Base_SetConfig+0xf8>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d003      	beq.n	8007de6 <TIM_Base_SetConfig+0x8a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a1d      	ldr	r2, [pc, #116]	; (8007e58 <TIM_Base_SetConfig+0xfc>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d108      	bne.n	8007df8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a08      	ldr	r2, [pc, #32]	; (8007e40 <TIM_Base_SetConfig+0xe4>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d103      	bne.n	8007e2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	615a      	str	r2, [r3, #20]
}
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40010000 	.word	0x40010000
 8007e44:	40000400 	.word	0x40000400
 8007e48:	40000800 	.word	0x40000800
 8007e4c:	40000c00 	.word	0x40000c00
 8007e50:	40014000 	.word	0x40014000
 8007e54:	40014400 	.word	0x40014400
 8007e58:	40014800 	.word	0x40014800

08007e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	f023 0201 	bic.w	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0303 	bic.w	r3, r3, #3
 8007e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f023 0302 	bic.w	r3, r3, #2
 8007ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a1c      	ldr	r2, [pc, #112]	; (8007f24 <TIM_OC1_SetConfig+0xc8>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d10c      	bne.n	8007ed2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f023 0308 	bic.w	r3, r3, #8
 8007ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f023 0304 	bic.w	r3, r3, #4
 8007ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a13      	ldr	r2, [pc, #76]	; (8007f24 <TIM_OC1_SetConfig+0xc8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d111      	bne.n	8007efe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	40010000 	.word	0x40010000

08007f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	f023 0210 	bic.w	r2, r3, #16
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f023 0320 	bic.w	r3, r3, #32
 8007f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a1e      	ldr	r2, [pc, #120]	; (8007ffc <TIM_OC2_SetConfig+0xd4>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d10d      	bne.n	8007fa4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a15      	ldr	r2, [pc, #84]	; (8007ffc <TIM_OC2_SetConfig+0xd4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d113      	bne.n	8007fd4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	621a      	str	r2, [r3, #32]
}
 8007fee:	bf00      	nop
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	40010000 	.word	0x40010000

08008000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f023 0303 	bic.w	r3, r3, #3
 8008036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	021b      	lsls	r3, r3, #8
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	4313      	orrs	r3, r2
 8008054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a1d      	ldr	r2, [pc, #116]	; (80080d0 <TIM_OC3_SetConfig+0xd0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d10d      	bne.n	800807a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	021b      	lsls	r3, r3, #8
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	4313      	orrs	r3, r2
 8008070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a14      	ldr	r2, [pc, #80]	; (80080d0 <TIM_OC3_SetConfig+0xd0>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d113      	bne.n	80080aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	621a      	str	r2, [r3, #32]
}
 80080c4:	bf00      	nop
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	40010000 	.word	0x40010000

080080d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800810a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	021b      	lsls	r3, r3, #8
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4313      	orrs	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800811e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	031b      	lsls	r3, r3, #12
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	4313      	orrs	r3, r2
 800812a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a10      	ldr	r2, [pc, #64]	; (8008170 <TIM_OC4_SetConfig+0x9c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d109      	bne.n	8008148 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800813a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	695b      	ldr	r3, [r3, #20]
 8008140:	019b      	lsls	r3, r3, #6
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	4313      	orrs	r3, r2
 8008146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	621a      	str	r2, [r3, #32]
}
 8008162:	bf00      	nop
 8008164:	371c      	adds	r7, #28
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	40010000 	.word	0x40010000

08008174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f003 031f 	and.w	r3, r3, #31
 8008186:	2201      	movs	r2, #1
 8008188:	fa02 f303 	lsl.w	r3, r2, r3
 800818c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6a1a      	ldr	r2, [r3, #32]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	43db      	mvns	r3, r3
 8008196:	401a      	ands	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6a1a      	ldr	r2, [r3, #32]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	f003 031f 	and.w	r3, r3, #31
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	fa01 f303 	lsl.w	r3, r1, r3
 80081ac:	431a      	orrs	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	621a      	str	r2, [r3, #32]
}
 80081b2:	bf00      	nop
 80081b4:	371c      	adds	r7, #28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b082      	sub	sp, #8
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e03f      	b.n	8008278 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7fb f92b 	bl	8003468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2224      	movs	r2, #36	; 0x24
 8008216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008228:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f001 f978 	bl	8009520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	691a      	ldr	r2, [r3, #16]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800823e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	695a      	ldr	r2, [r3, #20]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800824e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800825e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2220      	movs	r2, #32
 800826a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b08a      	sub	sp, #40	; 0x28
 8008284:	af02      	add	r7, sp, #8
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	603b      	str	r3, [r7, #0]
 800828c:	4613      	mov	r3, r2
 800828e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b20      	cmp	r3, #32
 800829e:	d17c      	bne.n	800839a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d002      	beq.n	80082ac <HAL_UART_Transmit+0x2c>
 80082a6:	88fb      	ldrh	r3, [r7, #6]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e075      	b.n	800839c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d101      	bne.n	80082be <HAL_UART_Transmit+0x3e>
 80082ba:	2302      	movs	r3, #2
 80082bc:	e06e      	b.n	800839c <HAL_UART_Transmit+0x11c>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2221      	movs	r2, #33	; 0x21
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082d4:	f7fb fc3c 	bl	8003b50 <HAL_GetTick>
 80082d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	88fa      	ldrh	r2, [r7, #6]
 80082de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	88fa      	ldrh	r2, [r7, #6]
 80082e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ee:	d108      	bne.n	8008302 <HAL_UART_Transmit+0x82>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d104      	bne.n	8008302 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	61bb      	str	r3, [r7, #24]
 8008300:	e003      	b.n	800830a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008312:	e02a      	b.n	800836a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2200      	movs	r2, #0
 800831c:	2180      	movs	r1, #128	; 0x80
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 fe2f 	bl	8008f82 <UART_WaitOnFlagUntilTimeout>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e036      	b.n	800839c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10b      	bne.n	800834c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008342:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	3302      	adds	r3, #2
 8008348:	61bb      	str	r3, [r7, #24]
 800834a:	e007      	b.n	800835c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	781a      	ldrb	r2, [r3, #0]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	3301      	adds	r3, #1
 800835a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008360:	b29b      	uxth	r3, r3
 8008362:	3b01      	subs	r3, #1
 8008364:	b29a      	uxth	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1cf      	bne.n	8008314 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	2200      	movs	r2, #0
 800837c:	2140      	movs	r1, #64	; 0x40
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 fdff 	bl	8008f82 <UART_WaitOnFlagUntilTimeout>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e006      	b.n	800839c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2220      	movs	r2, #32
 8008392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	e000      	b.n	800839c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800839a:	2302      	movs	r3, #2
  }
}
 800839c:	4618      	mov	r0, r3
 800839e:	3720      	adds	r7, #32
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08a      	sub	sp, #40	; 0x28
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	603b      	str	r3, [r7, #0]
 80083b0:	4613      	mov	r3, r2
 80083b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	f040 808c 	bne.w	80084de <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <HAL_UART_Receive+0x2e>
 80083cc:	88fb      	ldrh	r3, [r7, #6]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e084      	b.n	80084e0 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d101      	bne.n	80083e4 <HAL_UART_Receive+0x40>
 80083e0:	2302      	movs	r3, #2
 80083e2:	e07d      	b.n	80084e0 <HAL_UART_Receive+0x13c>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2222      	movs	r2, #34	; 0x22
 80083f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008400:	f7fb fba6 	bl	8003b50 <HAL_GetTick>
 8008404:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	88fa      	ldrh	r2, [r7, #6]
 800840a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	88fa      	ldrh	r2, [r7, #6]
 8008410:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841a:	d108      	bne.n	800842e <HAL_UART_Receive+0x8a>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d104      	bne.n	800842e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008424:	2300      	movs	r3, #0
 8008426:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	61bb      	str	r3, [r7, #24]
 800842c:	e003      	b.n	8008436 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008432:	2300      	movs	r3, #0
 8008434:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800843e:	e043      	b.n	80084c8 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2200      	movs	r2, #0
 8008448:	2120      	movs	r1, #32
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 fd99 	bl	8008f82 <UART_WaitOnFlagUntilTimeout>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e042      	b.n	80084e0 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10c      	bne.n	800847a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	b29b      	uxth	r3, r3
 8008468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800846c:	b29a      	uxth	r2, r3
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	3302      	adds	r3, #2
 8008476:	61bb      	str	r3, [r7, #24]
 8008478:	e01f      	b.n	80084ba <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008482:	d007      	beq.n	8008494 <HAL_UART_Receive+0xf0>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10a      	bne.n	80084a2 <HAL_UART_Receive+0xfe>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d106      	bne.n	80084a2 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	b2da      	uxtb	r2, r3
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	701a      	strb	r2, [r3, #0]
 80084a0:	e008      	b.n	80084b4 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	3301      	adds	r3, #1
 80084b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1b6      	bne.n	8008440 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	e000      	b.n	80084e0 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80084de:	2302      	movs	r3, #2
  }
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3720      	adds	r7, #32
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08c      	sub	sp, #48	; 0x30
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4613      	mov	r3, r2
 80084f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b20      	cmp	r3, #32
 8008500:	d165      	bne.n	80085ce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <HAL_UART_Transmit_DMA+0x26>
 8008508:	88fb      	ldrh	r3, [r7, #6]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e05e      	b.n	80085d0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008518:	2b01      	cmp	r3, #1
 800851a:	d101      	bne.n	8008520 <HAL_UART_Transmit_DMA+0x38>
 800851c:	2302      	movs	r3, #2
 800851e:	e057      	b.n	80085d0 <HAL_UART_Transmit_DMA+0xe8>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	88fa      	ldrh	r2, [r7, #6]
 8008532:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	88fa      	ldrh	r2, [r7, #6]
 8008538:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2221      	movs	r2, #33	; 0x21
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854c:	4a22      	ldr	r2, [pc, #136]	; (80085d8 <HAL_UART_Transmit_DMA+0xf0>)
 800854e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008554:	4a21      	ldr	r2, [pc, #132]	; (80085dc <HAL_UART_Transmit_DMA+0xf4>)
 8008556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855c:	4a20      	ldr	r2, [pc, #128]	; (80085e0 <HAL_UART_Transmit_DMA+0xf8>)
 800855e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008564:	2200      	movs	r2, #0
 8008566:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008568:	f107 0308 	add.w	r3, r7, #8
 800856c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	6819      	ldr	r1, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3304      	adds	r3, #4
 800857c:	461a      	mov	r2, r3
 800857e:	88fb      	ldrh	r3, [r7, #6]
 8008580:	f7fb ff76 	bl	8004470 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800858c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3314      	adds	r3, #20
 800859c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	617b      	str	r3, [r7, #20]
   return(result);
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3314      	adds	r3, #20
 80085b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085b6:	627a      	str	r2, [r7, #36]	; 0x24
 80085b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6a39      	ldr	r1, [r7, #32]
 80085bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e5      	bne.n	8008596 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	e000      	b.n	80085d0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80085ce:	2302      	movs	r3, #2
  }
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3730      	adds	r7, #48	; 0x30
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	08008cdd 	.word	0x08008cdd
 80085dc:	08008d77 	.word	0x08008d77
 80085e0:	08008eef 	.word	0x08008eef

080085e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	4613      	mov	r3, r2
 80085f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d11d      	bne.n	800863a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <HAL_UART_Receive_DMA+0x26>
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e016      	b.n	800863c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008614:	2b01      	cmp	r3, #1
 8008616:	d101      	bne.n	800861c <HAL_UART_Receive_DMA+0x38>
 8008618:	2302      	movs	r3, #2
 800861a:	e00f      	b.n	800863c <HAL_UART_Receive_DMA+0x58>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800862a:	88fb      	ldrh	r3, [r7, #6]
 800862c:	461a      	mov	r2, r3
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 fd15 	bl	8009060 <UART_Start_Receive_DMA>
 8008636:	4603      	mov	r3, r0
 8008638:	e000      	b.n	800863c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800863a:	2302      	movs	r3, #2
  }
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b090      	sub	sp, #64	; 0x40
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800864c:	2300      	movs	r3, #0
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865a:	2b80      	cmp	r3, #128	; 0x80
 800865c:	bf0c      	ite	eq
 800865e:	2301      	moveq	r3, #1
 8008660:	2300      	movne	r3, #0
 8008662:	b2db      	uxtb	r3, r3
 8008664:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b21      	cmp	r3, #33	; 0x21
 8008670:	d128      	bne.n	80086c4 <HAL_UART_DMAStop+0x80>
 8008672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d025      	beq.n	80086c4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3314      	adds	r3, #20
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	623b      	str	r3, [r7, #32]
   return(result);
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800868e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3314      	adds	r3, #20
 8008696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008698:	633a      	str	r2, [r7, #48]	; 0x30
 800869a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800869e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e5      	bne.n	8008678 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d004      	beq.n	80086be <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fb ff31 	bl	8004520 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fd6c 	bl	800919c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ce:	2b40      	cmp	r3, #64	; 0x40
 80086d0:	bf0c      	ite	eq
 80086d2:	2301      	moveq	r3, #1
 80086d4:	2300      	movne	r3, #0
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b22      	cmp	r3, #34	; 0x22
 80086e4:	d128      	bne.n	8008738 <HAL_UART_DMAStop+0xf4>
 80086e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d025      	beq.n	8008738 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3314      	adds	r3, #20
 80086f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	e853 3f00 	ldrex	r3, [r3]
 80086fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3314      	adds	r3, #20
 800870a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800870c:	61fa      	str	r2, [r7, #28]
 800870e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008710:	69b9      	ldr	r1, [r7, #24]
 8008712:	69fa      	ldr	r2, [r7, #28]
 8008714:	e841 2300 	strex	r3, r2, [r1]
 8008718:	617b      	str	r3, [r7, #20]
   return(result);
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1e5      	bne.n	80086ec <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	2b00      	cmp	r3, #0
 8008726:	d004      	beq.n	8008732 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872c:	4618      	mov	r0, r3
 800872e:	f7fb fef7 	bl	8004520 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fd5a 	bl	80091ec <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3740      	adds	r7, #64	; 0x40
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b0ba      	sub	sp, #232	; 0xe8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800876a:	2300      	movs	r3, #0
 800876c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008770:	2300      	movs	r3, #0
 8008772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800877a:	f003 030f 	and.w	r3, r3, #15
 800877e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10f      	bne.n	80087aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800878a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b00      	cmp	r3, #0
 8008794:	d009      	beq.n	80087aa <HAL_UART_IRQHandler+0x66>
 8008796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fe01 	bl	80093aa <UART_Receive_IT>
      return;
 80087a8:	e256      	b.n	8008c58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f000 80de 	beq.w	8008970 <HAL_UART_IRQHandler+0x22c>
 80087b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d106      	bne.n	80087ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 80d1 	beq.w	8008970 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00b      	beq.n	80087f2 <HAL_UART_IRQHandler+0xae>
 80087da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d005      	beq.n	80087f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	f043 0201 	orr.w	r2, r3, #1
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f6:	f003 0304 	and.w	r3, r3, #4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00b      	beq.n	8008816 <HAL_UART_IRQHandler+0xd2>
 80087fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d005      	beq.n	8008816 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880e:	f043 0202 	orr.w	r2, r3, #2
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00b      	beq.n	800883a <HAL_UART_IRQHandler+0xf6>
 8008822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d005      	beq.n	800883a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	f043 0204 	orr.w	r2, r3, #4
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800883a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800883e:	f003 0308 	and.w	r3, r3, #8
 8008842:	2b00      	cmp	r3, #0
 8008844:	d011      	beq.n	800886a <HAL_UART_IRQHandler+0x126>
 8008846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800884a:	f003 0320 	and.w	r3, r3, #32
 800884e:	2b00      	cmp	r3, #0
 8008850:	d105      	bne.n	800885e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	2b00      	cmp	r3, #0
 800885c:	d005      	beq.n	800886a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	f043 0208 	orr.w	r2, r3, #8
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 81ed 	beq.w	8008c4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008878:	f003 0320 	and.w	r3, r3, #32
 800887c:	2b00      	cmp	r3, #0
 800887e:	d008      	beq.n	8008892 <HAL_UART_IRQHandler+0x14e>
 8008880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008884:	f003 0320 	and.w	r3, r3, #32
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fd8c 	bl	80093aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889c:	2b40      	cmp	r3, #64	; 0x40
 800889e:	bf0c      	ite	eq
 80088a0:	2301      	moveq	r3, #1
 80088a2:	2300      	movne	r3, #0
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ae:	f003 0308 	and.w	r3, r3, #8
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d103      	bne.n	80088be <HAL_UART_IRQHandler+0x17a>
 80088b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d04f      	beq.n	800895e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fc94 	bl	80091ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	d141      	bne.n	8008956 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3314      	adds	r3, #20
 80088d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80088e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3314      	adds	r3, #20
 80088fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80088fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800890a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1d9      	bne.n	80088d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008922:	2b00      	cmp	r3, #0
 8008924:	d013      	beq.n	800894e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892a:	4a7d      	ldr	r2, [pc, #500]	; (8008b20 <HAL_UART_IRQHandler+0x3dc>)
 800892c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	4618      	mov	r0, r3
 8008934:	f7fb fe64 	bl	8004600 <HAL_DMA_Abort_IT>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d016      	beq.n	800896c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008948:	4610      	mov	r0, r2
 800894a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800894c:	e00e      	b.n	800896c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f9ae 	bl	8008cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008954:	e00a      	b.n	800896c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9aa 	bl	8008cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895c:	e006      	b.n	800896c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f9a6 	bl	8008cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800896a:	e170      	b.n	8008c4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800896c:	bf00      	nop
    return;
 800896e:	e16e      	b.n	8008c4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008974:	2b01      	cmp	r3, #1
 8008976:	f040 814a 	bne.w	8008c0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800897a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897e:	f003 0310 	and.w	r3, r3, #16
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 8143 	beq.w	8008c0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800898c:	f003 0310 	and.w	r3, r3, #16
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 813c 	beq.w	8008c0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008996:	2300      	movs	r3, #0
 8008998:	60bb      	str	r3, [r7, #8]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	60bb      	str	r3, [r7, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b6:	2b40      	cmp	r3, #64	; 0x40
 80089b8:	f040 80b4 	bne.w	8008b24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 8140 	beq.w	8008c52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089da:	429a      	cmp	r2, r3
 80089dc:	f080 8139 	bcs.w	8008c52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f2:	f000 8088 	beq.w	8008b06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	330c      	adds	r3, #12
 80089fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	330c      	adds	r3, #12
 8008a1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a32:	e841 2300 	strex	r3, r2, [r1]
 8008a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1d9      	bne.n	80089f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3314      	adds	r3, #20
 8008a48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a54:	f023 0301 	bic.w	r3, r3, #1
 8008a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3314      	adds	r3, #20
 8008a62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a72:	e841 2300 	strex	r3, r2, [r1]
 8008a76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1e1      	bne.n	8008a42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3314      	adds	r3, #20
 8008a84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a88:	e853 3f00 	ldrex	r3, [r3]
 8008a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3314      	adds	r3, #20
 8008a9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008aa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008aa4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008aa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e3      	bne.n	8008a7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	330c      	adds	r3, #12
 8008aca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ace:	e853 3f00 	ldrex	r3, [r3]
 8008ad2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad6:	f023 0310 	bic.w	r3, r3, #16
 8008ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	330c      	adds	r3, #12
 8008ae4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008ae8:	65ba      	str	r2, [r7, #88]	; 0x58
 8008aea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008aee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008af0:	e841 2300 	strex	r3, r2, [r1]
 8008af4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1e3      	bne.n	8008ac4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fb fd0d 	bl	8004520 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f8d4 	bl	8008cc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b1c:	e099      	b.n	8008c52 <HAL_UART_IRQHandler+0x50e>
 8008b1e:	bf00      	nop
 8008b20:	080092b3 	.word	0x080092b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 808b 	beq.w	8008c56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 8086 	beq.w	8008c56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	330c      	adds	r3, #12
 8008b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	330c      	adds	r3, #12
 8008b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b6e:	647a      	str	r2, [r7, #68]	; 0x44
 8008b70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e3      	bne.n	8008b4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3314      	adds	r3, #20
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	623b      	str	r3, [r7, #32]
   return(result);
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	f023 0301 	bic.w	r3, r3, #1
 8008b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3314      	adds	r3, #20
 8008ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8008ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e3      	bne.n	8008b82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	330c      	adds	r3, #12
 8008bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	e853 3f00 	ldrex	r3, [r3]
 8008bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0310 	bic.w	r3, r3, #16
 8008bde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	330c      	adds	r3, #12
 8008be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008bec:	61fa      	str	r2, [r7, #28]
 8008bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	69b9      	ldr	r1, [r7, #24]
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e3      	bne.n	8008bc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f85c 	bl	8008cc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c0c:	e023      	b.n	8008c56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d009      	beq.n	8008c2e <HAL_UART_IRQHandler+0x4ea>
 8008c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fb57 	bl	80092da <UART_Transmit_IT>
    return;
 8008c2c:	e014      	b.n	8008c58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00e      	beq.n	8008c58 <HAL_UART_IRQHandler+0x514>
 8008c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d008      	beq.n	8008c58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fb97 	bl	800937a <UART_EndTransmit_IT>
    return;
 8008c4c:	e004      	b.n	8008c58 <HAL_UART_IRQHandler+0x514>
    return;
 8008c4e:	bf00      	nop
 8008c50:	e002      	b.n	8008c58 <HAL_UART_IRQHandler+0x514>
      return;
 8008c52:	bf00      	nop
 8008c54:	e000      	b.n	8008c58 <HAL_UART_IRQHandler+0x514>
      return;
 8008c56:	bf00      	nop
  }
}
 8008c58:	37e8      	adds	r7, #232	; 0xe8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop

08008c60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b090      	sub	sp, #64	; 0x40
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d137      	bne.n	8008d68 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3314      	adds	r3, #20
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3314      	adds	r3, #20
 8008d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d1e:	633a      	str	r2, [r7, #48]	; 0x30
 8008d20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e5      	bne.n	8008cfe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	330c      	adds	r3, #12
 8008d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d48:	637b      	str	r3, [r7, #52]	; 0x34
 8008d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	330c      	adds	r3, #12
 8008d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d52:	61fa      	str	r2, [r7, #28]
 8008d54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	69b9      	ldr	r1, [r7, #24]
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e5      	bne.n	8008d32 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d66:	e002      	b.n	8008d6e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008d68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008d6a:	f7ff ff79 	bl	8008c60 <HAL_UART_TxCpltCallback>
}
 8008d6e:	bf00      	nop
 8008d70:	3740      	adds	r7, #64	; 0x40
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f7ff ff75 	bl	8008c74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d8a:	bf00      	nop
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b09c      	sub	sp, #112	; 0x70
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d172      	bne.n	8008e94 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008db0:	2200      	movs	r2, #0
 8008db2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	330c      	adds	r3, #12
 8008dba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dbe:	e853 3f00 	ldrex	r3, [r3]
 8008dc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	330c      	adds	r3, #12
 8008dd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8008dd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008dda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ddc:	e841 2300 	strex	r3, r2, [r1]
 8008de0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e5      	bne.n	8008db4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3314      	adds	r3, #20
 8008dee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df2:	e853 3f00 	ldrex	r3, [r3]
 8008df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfa:	f023 0301 	bic.w	r3, r3, #1
 8008dfe:	667b      	str	r3, [r7, #100]	; 0x64
 8008e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3314      	adds	r3, #20
 8008e06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008e08:	647a      	str	r2, [r7, #68]	; 0x44
 8008e0a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e5      	bne.n	8008de8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3314      	adds	r3, #20
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	e853 3f00 	ldrex	r3, [r3]
 8008e2a:	623b      	str	r3, [r7, #32]
   return(result);
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e32:	663b      	str	r3, [r7, #96]	; 0x60
 8008e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3314      	adds	r3, #20
 8008e3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e3c:	633a      	str	r2, [r7, #48]	; 0x30
 8008e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e44:	e841 2300 	strex	r3, r2, [r1]
 8008e48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e5      	bne.n	8008e1c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e52:	2220      	movs	r2, #32
 8008e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d119      	bne.n	8008e94 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	330c      	adds	r3, #12
 8008e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	e853 3f00 	ldrex	r3, [r3]
 8008e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f023 0310 	bic.w	r3, r3, #16
 8008e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	330c      	adds	r3, #12
 8008e7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e80:	61fa      	str	r2, [r7, #28]
 8008e82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	69b9      	ldr	r1, [r7, #24]
 8008e86:	69fa      	ldr	r2, [r7, #28]
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e5      	bne.n	8008e60 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d106      	bne.n	8008eaa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ea4:	f7ff ff0e 	bl	8008cc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ea8:	e002      	b.n	8008eb0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008eaa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008eac:	f7ff feec 	bl	8008c88 <HAL_UART_RxCpltCallback>
}
 8008eb0:	bf00      	nop
 8008eb2:	3770      	adds	r7, #112	; 0x70
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d108      	bne.n	8008ee0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ed2:	085b      	lsrs	r3, r3, #1
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7ff fef3 	bl	8008cc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ede:	e002      	b.n	8008ee6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f7ff fedb 	bl	8008c9c <HAL_UART_RxHalfCpltCallback>
}
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0a:	2b80      	cmp	r3, #128	; 0x80
 8008f0c:	bf0c      	ite	eq
 8008f0e:	2301      	moveq	r3, #1
 8008f10:	2300      	movne	r3, #0
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b21      	cmp	r3, #33	; 0x21
 8008f20:	d108      	bne.n	8008f34 <UART_DMAError+0x46>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d005      	beq.n	8008f34 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008f2e:	68b8      	ldr	r0, [r7, #8]
 8008f30:	f000 f934 	bl	800919c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3e:	2b40      	cmp	r3, #64	; 0x40
 8008f40:	bf0c      	ite	eq
 8008f42:	2301      	moveq	r3, #1
 8008f44:	2300      	movne	r3, #0
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b22      	cmp	r3, #34	; 0x22
 8008f54:	d108      	bne.n	8008f68 <UART_DMAError+0x7a>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d005      	beq.n	8008f68 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008f62:	68b8      	ldr	r0, [r7, #8]
 8008f64:	f000 f942 	bl	80091ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6c:	f043 0210 	orr.w	r2, r3, #16
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f74:	68b8      	ldr	r0, [r7, #8]
 8008f76:	f7ff fe9b 	bl	8008cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f7a:	bf00      	nop
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b090      	sub	sp, #64	; 0x40
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	60b9      	str	r1, [r7, #8]
 8008f8c:	603b      	str	r3, [r7, #0]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f92:	e050      	b.n	8009036 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f9a:	d04c      	beq.n	8009036 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d007      	beq.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fa2:	f7fa fdd5 	bl	8003b50 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d241      	bcs.n	8009036 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	330c      	adds	r3, #12
 8008fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	330c      	adds	r3, #12
 8008fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008fd2:	637a      	str	r2, [r7, #52]	; 0x34
 8008fd4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e5      	bne.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3314      	adds	r3, #20
 8008fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f023 0301 	bic.w	r3, r3, #1
 8008ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3314      	adds	r3, #20
 8009004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009006:	623a      	str	r2, [r7, #32]
 8009008:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	69f9      	ldr	r1, [r7, #28]
 800900c:	6a3a      	ldr	r2, [r7, #32]
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	61bb      	str	r3, [r7, #24]
   return(result);
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e5      	bne.n	8008fe6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2220      	movs	r2, #32
 800901e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2220      	movs	r2, #32
 8009026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e00f      	b.n	8009056 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	4013      	ands	r3, r2
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	429a      	cmp	r2, r3
 8009044:	bf0c      	ite	eq
 8009046:	2301      	moveq	r3, #1
 8009048:	2300      	movne	r3, #0
 800904a:	b2db      	uxtb	r3, r3
 800904c:	461a      	mov	r2, r3
 800904e:	79fb      	ldrb	r3, [r7, #7]
 8009050:	429a      	cmp	r2, r3
 8009052:	d09f      	beq.n	8008f94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3740      	adds	r7, #64	; 0x40
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
	...

08009060 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b098      	sub	sp, #96	; 0x60
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	4613      	mov	r3, r2
 800906c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	88fa      	ldrh	r2, [r7, #6]
 8009078:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2222      	movs	r2, #34	; 0x22
 8009084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908c:	4a40      	ldr	r2, [pc, #256]	; (8009190 <UART_Start_Receive_DMA+0x130>)
 800908e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009094:	4a3f      	ldr	r2, [pc, #252]	; (8009194 <UART_Start_Receive_DMA+0x134>)
 8009096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909c:	4a3e      	ldr	r2, [pc, #248]	; (8009198 <UART_Start_Receive_DMA+0x138>)
 800909e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a4:	2200      	movs	r2, #0
 80090a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80090a8:	f107 0308 	add.w	r3, r7, #8
 80090ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3304      	adds	r3, #4
 80090b8:	4619      	mov	r1, r3
 80090ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	88fb      	ldrh	r3, [r7, #6]
 80090c0:	f7fb f9d6 	bl	8004470 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80090c4:	2300      	movs	r3, #0
 80090c6:	613b      	str	r3, [r7, #16]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	613b      	str	r3, [r7, #16]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	613b      	str	r3, [r7, #16]
 80090d8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d019      	beq.n	800911e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	330c      	adds	r3, #12
 80090f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090f4:	e853 3f00 	ldrex	r3, [r3]
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009100:	65bb      	str	r3, [r7, #88]	; 0x58
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	330c      	adds	r3, #12
 8009108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800910a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800910c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009112:	e841 2300 	strex	r3, r2, [r1]
 8009116:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1e5      	bne.n	80090ea <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3314      	adds	r3, #20
 8009124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009128:	e853 3f00 	ldrex	r3, [r3]
 800912c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009130:	f043 0301 	orr.w	r3, r3, #1
 8009134:	657b      	str	r3, [r7, #84]	; 0x54
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3314      	adds	r3, #20
 800913c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800913e:	63ba      	str	r2, [r7, #56]	; 0x38
 8009140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009142:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009146:	e841 2300 	strex	r3, r2, [r1]
 800914a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1e5      	bne.n	800911e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3314      	adds	r3, #20
 8009158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	617b      	str	r3, [r7, #20]
   return(result);
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009168:	653b      	str	r3, [r7, #80]	; 0x50
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	3314      	adds	r3, #20
 8009170:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009172:	627a      	str	r2, [r7, #36]	; 0x24
 8009174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009176:	6a39      	ldr	r1, [r7, #32]
 8009178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800917a:	e841 2300 	strex	r3, r2, [r1]
 800917e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e5      	bne.n	8009152 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3760      	adds	r7, #96	; 0x60
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	08008d93 	.word	0x08008d93
 8009194:	08008eb9 	.word	0x08008eb9
 8009198:	08008eef 	.word	0x08008eef

0800919c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800919c:	b480      	push	{r7}
 800919e:	b089      	sub	sp, #36	; 0x24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	330c      	adds	r3, #12
 80091aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	e853 3f00 	ldrex	r3, [r3]
 80091b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80091ba:	61fb      	str	r3, [r7, #28]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	69fa      	ldr	r2, [r7, #28]
 80091c4:	61ba      	str	r2, [r7, #24]
 80091c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c8:	6979      	ldr	r1, [r7, #20]
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	e841 2300 	strex	r3, r2, [r1]
 80091d0:	613b      	str	r3, [r7, #16]
   return(result);
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e5      	bne.n	80091a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2220      	movs	r2, #32
 80091dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80091e0:	bf00      	nop
 80091e2:	3724      	adds	r7, #36	; 0x24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b095      	sub	sp, #84	; 0x54
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	330c      	adds	r3, #12
 80091fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fe:	e853 3f00 	ldrex	r3, [r3]
 8009202:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800920a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	330c      	adds	r3, #12
 8009212:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009214:	643a      	str	r2, [r7, #64]	; 0x40
 8009216:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009218:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800921a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800921c:	e841 2300 	strex	r3, r2, [r1]
 8009220:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e5      	bne.n	80091f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3314      	adds	r3, #20
 800922e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	e853 3f00 	ldrex	r3, [r3]
 8009236:	61fb      	str	r3, [r7, #28]
   return(result);
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	f023 0301 	bic.w	r3, r3, #1
 800923e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3314      	adds	r3, #20
 8009246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800924a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800924e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009250:	e841 2300 	strex	r3, r2, [r1]
 8009254:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1e5      	bne.n	8009228 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009260:	2b01      	cmp	r3, #1
 8009262:	d119      	bne.n	8009298 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	330c      	adds	r3, #12
 800926a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	60bb      	str	r3, [r7, #8]
   return(result);
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f023 0310 	bic.w	r3, r3, #16
 800927a:	647b      	str	r3, [r7, #68]	; 0x44
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	330c      	adds	r3, #12
 8009282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009284:	61ba      	str	r2, [r7, #24]
 8009286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	6979      	ldr	r1, [r7, #20]
 800928a:	69ba      	ldr	r2, [r7, #24]
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	613b      	str	r3, [r7, #16]
   return(result);
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e5      	bne.n	8009264 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2220      	movs	r2, #32
 800929c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80092a6:	bf00      	nop
 80092a8:	3754      	adds	r7, #84	; 0x54
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092cc:	68f8      	ldr	r0, [r7, #12]
 80092ce:	f7ff fcef 	bl	8008cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092d2:	bf00      	nop
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092da:	b480      	push	{r7}
 80092dc:	b085      	sub	sp, #20
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b21      	cmp	r3, #33	; 0x21
 80092ec:	d13e      	bne.n	800936c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092f6:	d114      	bne.n	8009322 <UART_Transmit_IT+0x48>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d110      	bne.n	8009322 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a1b      	ldr	r3, [r3, #32]
 8009304:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009314:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	1c9a      	adds	r2, r3, #2
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	621a      	str	r2, [r3, #32]
 8009320:	e008      	b.n	8009334 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	1c59      	adds	r1, r3, #1
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	6211      	str	r1, [r2, #32]
 800932c:	781a      	ldrb	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009338:	b29b      	uxth	r3, r3
 800933a:	3b01      	subs	r3, #1
 800933c:	b29b      	uxth	r3, r3
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	4619      	mov	r1, r3
 8009342:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10f      	bne.n	8009368 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68da      	ldr	r2, [r3, #12]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009356:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009366:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	e000      	b.n	800936e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800936c:	2302      	movs	r3, #2
  }
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b082      	sub	sp, #8
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68da      	ldr	r2, [r3, #12]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009390:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2220      	movs	r2, #32
 8009396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff fc60 	bl	8008c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b08c      	sub	sp, #48	; 0x30
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b22      	cmp	r3, #34	; 0x22
 80093bc:	f040 80ab 	bne.w	8009516 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093c8:	d117      	bne.n	80093fa <UART_Receive_IT+0x50>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d113      	bne.n	80093fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f2:	1c9a      	adds	r2, r3, #2
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	629a      	str	r2, [r3, #40]	; 0x28
 80093f8:	e026      	b.n	8009448 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009400:	2300      	movs	r3, #0
 8009402:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800940c:	d007      	beq.n	800941e <UART_Receive_IT+0x74>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10a      	bne.n	800942c <UART_Receive_IT+0x82>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	b2da      	uxtb	r2, r3
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	701a      	strb	r2, [r3, #0]
 800942a:	e008      	b.n	800943e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009438:	b2da      	uxtb	r2, r3
 800943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800944c:	b29b      	uxth	r3, r3
 800944e:	3b01      	subs	r3, #1
 8009450:	b29b      	uxth	r3, r3
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	4619      	mov	r1, r3
 8009456:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009458:	2b00      	cmp	r3, #0
 800945a:	d15a      	bne.n	8009512 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68da      	ldr	r2, [r3, #12]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f022 0220 	bic.w	r2, r2, #32
 800946a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800947a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	695a      	ldr	r2, [r3, #20]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0201 	bic.w	r2, r2, #1
 800948a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2220      	movs	r2, #32
 8009490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009498:	2b01      	cmp	r3, #1
 800949a:	d135      	bne.n	8009508 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	330c      	adds	r3, #12
 80094a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	e853 3f00 	ldrex	r3, [r3]
 80094b0:	613b      	str	r3, [r7, #16]
   return(result);
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	f023 0310 	bic.w	r3, r3, #16
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	330c      	adds	r3, #12
 80094c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c2:	623a      	str	r2, [r7, #32]
 80094c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	69f9      	ldr	r1, [r7, #28]
 80094c8:	6a3a      	ldr	r2, [r7, #32]
 80094ca:	e841 2300 	strex	r3, r2, [r1]
 80094ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1e5      	bne.n	80094a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0310 	and.w	r3, r3, #16
 80094e0:	2b10      	cmp	r3, #16
 80094e2:	d10a      	bne.n	80094fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094e4:	2300      	movs	r3, #0
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7ff fbdf 	bl	8008cc4 <HAL_UARTEx_RxEventCallback>
 8009506:	e002      	b.n	800950e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7ff fbbd 	bl	8008c88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	e002      	b.n	8009518 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	e000      	b.n	8009518 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009516:	2302      	movs	r3, #2
  }
}
 8009518:	4618      	mov	r0, r3
 800951a:	3730      	adds	r7, #48	; 0x30
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009524:	b0c0      	sub	sp, #256	; 0x100
 8009526:	af00      	add	r7, sp, #0
 8009528:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800952c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953c:	68d9      	ldr	r1, [r3, #12]
 800953e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	ea40 0301 	orr.w	r3, r0, r1
 8009548:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800954a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954e:	689a      	ldr	r2, [r3, #8]
 8009550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	431a      	orrs	r2, r3
 8009558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	431a      	orrs	r2, r3
 8009560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	4313      	orrs	r3, r2
 8009568:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800956c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009578:	f021 010c 	bic.w	r1, r1, #12
 800957c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009586:	430b      	orrs	r3, r1
 8009588:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800958a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800959a:	6999      	ldr	r1, [r3, #24]
 800959c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	ea40 0301 	orr.w	r3, r0, r1
 80095a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80095a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	4b8f      	ldr	r3, [pc, #572]	; (80097ec <UART_SetConfig+0x2cc>)
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d005      	beq.n	80095c0 <UART_SetConfig+0xa0>
 80095b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	4b8d      	ldr	r3, [pc, #564]	; (80097f0 <UART_SetConfig+0x2d0>)
 80095bc:	429a      	cmp	r2, r3
 80095be:	d104      	bne.n	80095ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095c0:	f7fd feea 	bl	8007398 <HAL_RCC_GetPCLK2Freq>
 80095c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095c8:	e003      	b.n	80095d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095ca:	f7fd fed1 	bl	8007370 <HAL_RCC_GetPCLK1Freq>
 80095ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095dc:	f040 810c 	bne.w	80097f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095f2:	4622      	mov	r2, r4
 80095f4:	462b      	mov	r3, r5
 80095f6:	1891      	adds	r1, r2, r2
 80095f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80095fa:	415b      	adcs	r3, r3
 80095fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009602:	4621      	mov	r1, r4
 8009604:	eb12 0801 	adds.w	r8, r2, r1
 8009608:	4629      	mov	r1, r5
 800960a:	eb43 0901 	adc.w	r9, r3, r1
 800960e:	f04f 0200 	mov.w	r2, #0
 8009612:	f04f 0300 	mov.w	r3, #0
 8009616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800961a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800961e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009622:	4690      	mov	r8, r2
 8009624:	4699      	mov	r9, r3
 8009626:	4623      	mov	r3, r4
 8009628:	eb18 0303 	adds.w	r3, r8, r3
 800962c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009630:	462b      	mov	r3, r5
 8009632:	eb49 0303 	adc.w	r3, r9, r3
 8009636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800963a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009646:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800964a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800964e:	460b      	mov	r3, r1
 8009650:	18db      	adds	r3, r3, r3
 8009652:	653b      	str	r3, [r7, #80]	; 0x50
 8009654:	4613      	mov	r3, r2
 8009656:	eb42 0303 	adc.w	r3, r2, r3
 800965a:	657b      	str	r3, [r7, #84]	; 0x54
 800965c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009660:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009664:	f7f7 fa92 	bl	8000b8c <__aeabi_uldivmod>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	4b61      	ldr	r3, [pc, #388]	; (80097f4 <UART_SetConfig+0x2d4>)
 800966e:	fba3 2302 	umull	r2, r3, r3, r2
 8009672:	095b      	lsrs	r3, r3, #5
 8009674:	011c      	lsls	r4, r3, #4
 8009676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800967a:	2200      	movs	r2, #0
 800967c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009680:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009684:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009688:	4642      	mov	r2, r8
 800968a:	464b      	mov	r3, r9
 800968c:	1891      	adds	r1, r2, r2
 800968e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009690:	415b      	adcs	r3, r3
 8009692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009694:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009698:	4641      	mov	r1, r8
 800969a:	eb12 0a01 	adds.w	sl, r2, r1
 800969e:	4649      	mov	r1, r9
 80096a0:	eb43 0b01 	adc.w	fp, r3, r1
 80096a4:	f04f 0200 	mov.w	r2, #0
 80096a8:	f04f 0300 	mov.w	r3, #0
 80096ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096b8:	4692      	mov	sl, r2
 80096ba:	469b      	mov	fp, r3
 80096bc:	4643      	mov	r3, r8
 80096be:	eb1a 0303 	adds.w	r3, sl, r3
 80096c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096c6:	464b      	mov	r3, r9
 80096c8:	eb4b 0303 	adc.w	r3, fp, r3
 80096cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096e4:	460b      	mov	r3, r1
 80096e6:	18db      	adds	r3, r3, r3
 80096e8:	643b      	str	r3, [r7, #64]	; 0x40
 80096ea:	4613      	mov	r3, r2
 80096ec:	eb42 0303 	adc.w	r3, r2, r3
 80096f0:	647b      	str	r3, [r7, #68]	; 0x44
 80096f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096fa:	f7f7 fa47 	bl	8000b8c <__aeabi_uldivmod>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	4611      	mov	r1, r2
 8009704:	4b3b      	ldr	r3, [pc, #236]	; (80097f4 <UART_SetConfig+0x2d4>)
 8009706:	fba3 2301 	umull	r2, r3, r3, r1
 800970a:	095b      	lsrs	r3, r3, #5
 800970c:	2264      	movs	r2, #100	; 0x64
 800970e:	fb02 f303 	mul.w	r3, r2, r3
 8009712:	1acb      	subs	r3, r1, r3
 8009714:	00db      	lsls	r3, r3, #3
 8009716:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800971a:	4b36      	ldr	r3, [pc, #216]	; (80097f4 <UART_SetConfig+0x2d4>)
 800971c:	fba3 2302 	umull	r2, r3, r3, r2
 8009720:	095b      	lsrs	r3, r3, #5
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009728:	441c      	add	r4, r3
 800972a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800972e:	2200      	movs	r2, #0
 8009730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009734:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009738:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800973c:	4642      	mov	r2, r8
 800973e:	464b      	mov	r3, r9
 8009740:	1891      	adds	r1, r2, r2
 8009742:	63b9      	str	r1, [r7, #56]	; 0x38
 8009744:	415b      	adcs	r3, r3
 8009746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800974c:	4641      	mov	r1, r8
 800974e:	1851      	adds	r1, r2, r1
 8009750:	6339      	str	r1, [r7, #48]	; 0x30
 8009752:	4649      	mov	r1, r9
 8009754:	414b      	adcs	r3, r1
 8009756:	637b      	str	r3, [r7, #52]	; 0x34
 8009758:	f04f 0200 	mov.w	r2, #0
 800975c:	f04f 0300 	mov.w	r3, #0
 8009760:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009764:	4659      	mov	r1, fp
 8009766:	00cb      	lsls	r3, r1, #3
 8009768:	4651      	mov	r1, sl
 800976a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800976e:	4651      	mov	r1, sl
 8009770:	00ca      	lsls	r2, r1, #3
 8009772:	4610      	mov	r0, r2
 8009774:	4619      	mov	r1, r3
 8009776:	4603      	mov	r3, r0
 8009778:	4642      	mov	r2, r8
 800977a:	189b      	adds	r3, r3, r2
 800977c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009780:	464b      	mov	r3, r9
 8009782:	460a      	mov	r2, r1
 8009784:	eb42 0303 	adc.w	r3, r2, r3
 8009788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800978c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009798:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800979c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80097a0:	460b      	mov	r3, r1
 80097a2:	18db      	adds	r3, r3, r3
 80097a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80097a6:	4613      	mov	r3, r2
 80097a8:	eb42 0303 	adc.w	r3, r2, r3
 80097ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80097b6:	f7f7 f9e9 	bl	8000b8c <__aeabi_uldivmod>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <UART_SetConfig+0x2d4>)
 80097c0:	fba3 1302 	umull	r1, r3, r3, r2
 80097c4:	095b      	lsrs	r3, r3, #5
 80097c6:	2164      	movs	r1, #100	; 0x64
 80097c8:	fb01 f303 	mul.w	r3, r1, r3
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	3332      	adds	r3, #50	; 0x32
 80097d2:	4a08      	ldr	r2, [pc, #32]	; (80097f4 <UART_SetConfig+0x2d4>)
 80097d4:	fba2 2303 	umull	r2, r3, r2, r3
 80097d8:	095b      	lsrs	r3, r3, #5
 80097da:	f003 0207 	and.w	r2, r3, #7
 80097de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4422      	add	r2, r4
 80097e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097e8:	e106      	b.n	80099f8 <UART_SetConfig+0x4d8>
 80097ea:	bf00      	nop
 80097ec:	40011000 	.word	0x40011000
 80097f0:	40011400 	.word	0x40011400
 80097f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097fc:	2200      	movs	r2, #0
 80097fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009802:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009806:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800980a:	4642      	mov	r2, r8
 800980c:	464b      	mov	r3, r9
 800980e:	1891      	adds	r1, r2, r2
 8009810:	6239      	str	r1, [r7, #32]
 8009812:	415b      	adcs	r3, r3
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
 8009816:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800981a:	4641      	mov	r1, r8
 800981c:	1854      	adds	r4, r2, r1
 800981e:	4649      	mov	r1, r9
 8009820:	eb43 0501 	adc.w	r5, r3, r1
 8009824:	f04f 0200 	mov.w	r2, #0
 8009828:	f04f 0300 	mov.w	r3, #0
 800982c:	00eb      	lsls	r3, r5, #3
 800982e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009832:	00e2      	lsls	r2, r4, #3
 8009834:	4614      	mov	r4, r2
 8009836:	461d      	mov	r5, r3
 8009838:	4643      	mov	r3, r8
 800983a:	18e3      	adds	r3, r4, r3
 800983c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009840:	464b      	mov	r3, r9
 8009842:	eb45 0303 	adc.w	r3, r5, r3
 8009846:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800984a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009856:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800985a:	f04f 0200 	mov.w	r2, #0
 800985e:	f04f 0300 	mov.w	r3, #0
 8009862:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009866:	4629      	mov	r1, r5
 8009868:	008b      	lsls	r3, r1, #2
 800986a:	4621      	mov	r1, r4
 800986c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009870:	4621      	mov	r1, r4
 8009872:	008a      	lsls	r2, r1, #2
 8009874:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009878:	f7f7 f988 	bl	8000b8c <__aeabi_uldivmod>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4b60      	ldr	r3, [pc, #384]	; (8009a04 <UART_SetConfig+0x4e4>)
 8009882:	fba3 2302 	umull	r2, r3, r3, r2
 8009886:	095b      	lsrs	r3, r3, #5
 8009888:	011c      	lsls	r4, r3, #4
 800988a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800988e:	2200      	movs	r2, #0
 8009890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009894:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009898:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800989c:	4642      	mov	r2, r8
 800989e:	464b      	mov	r3, r9
 80098a0:	1891      	adds	r1, r2, r2
 80098a2:	61b9      	str	r1, [r7, #24]
 80098a4:	415b      	adcs	r3, r3
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098ac:	4641      	mov	r1, r8
 80098ae:	1851      	adds	r1, r2, r1
 80098b0:	6139      	str	r1, [r7, #16]
 80098b2:	4649      	mov	r1, r9
 80098b4:	414b      	adcs	r3, r1
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	f04f 0200 	mov.w	r2, #0
 80098bc:	f04f 0300 	mov.w	r3, #0
 80098c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098c4:	4659      	mov	r1, fp
 80098c6:	00cb      	lsls	r3, r1, #3
 80098c8:	4651      	mov	r1, sl
 80098ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098ce:	4651      	mov	r1, sl
 80098d0:	00ca      	lsls	r2, r1, #3
 80098d2:	4610      	mov	r0, r2
 80098d4:	4619      	mov	r1, r3
 80098d6:	4603      	mov	r3, r0
 80098d8:	4642      	mov	r2, r8
 80098da:	189b      	adds	r3, r3, r2
 80098dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098e0:	464b      	mov	r3, r9
 80098e2:	460a      	mov	r2, r1
 80098e4:	eb42 0303 	adc.w	r3, r2, r3
 80098e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80098f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098f8:	f04f 0200 	mov.w	r2, #0
 80098fc:	f04f 0300 	mov.w	r3, #0
 8009900:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009904:	4649      	mov	r1, r9
 8009906:	008b      	lsls	r3, r1, #2
 8009908:	4641      	mov	r1, r8
 800990a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800990e:	4641      	mov	r1, r8
 8009910:	008a      	lsls	r2, r1, #2
 8009912:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009916:	f7f7 f939 	bl	8000b8c <__aeabi_uldivmod>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4611      	mov	r1, r2
 8009920:	4b38      	ldr	r3, [pc, #224]	; (8009a04 <UART_SetConfig+0x4e4>)
 8009922:	fba3 2301 	umull	r2, r3, r3, r1
 8009926:	095b      	lsrs	r3, r3, #5
 8009928:	2264      	movs	r2, #100	; 0x64
 800992a:	fb02 f303 	mul.w	r3, r2, r3
 800992e:	1acb      	subs	r3, r1, r3
 8009930:	011b      	lsls	r3, r3, #4
 8009932:	3332      	adds	r3, #50	; 0x32
 8009934:	4a33      	ldr	r2, [pc, #204]	; (8009a04 <UART_SetConfig+0x4e4>)
 8009936:	fba2 2303 	umull	r2, r3, r2, r3
 800993a:	095b      	lsrs	r3, r3, #5
 800993c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009940:	441c      	add	r4, r3
 8009942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009946:	2200      	movs	r2, #0
 8009948:	673b      	str	r3, [r7, #112]	; 0x70
 800994a:	677a      	str	r2, [r7, #116]	; 0x74
 800994c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009950:	4642      	mov	r2, r8
 8009952:	464b      	mov	r3, r9
 8009954:	1891      	adds	r1, r2, r2
 8009956:	60b9      	str	r1, [r7, #8]
 8009958:	415b      	adcs	r3, r3
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009960:	4641      	mov	r1, r8
 8009962:	1851      	adds	r1, r2, r1
 8009964:	6039      	str	r1, [r7, #0]
 8009966:	4649      	mov	r1, r9
 8009968:	414b      	adcs	r3, r1
 800996a:	607b      	str	r3, [r7, #4]
 800996c:	f04f 0200 	mov.w	r2, #0
 8009970:	f04f 0300 	mov.w	r3, #0
 8009974:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009978:	4659      	mov	r1, fp
 800997a:	00cb      	lsls	r3, r1, #3
 800997c:	4651      	mov	r1, sl
 800997e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009982:	4651      	mov	r1, sl
 8009984:	00ca      	lsls	r2, r1, #3
 8009986:	4610      	mov	r0, r2
 8009988:	4619      	mov	r1, r3
 800998a:	4603      	mov	r3, r0
 800998c:	4642      	mov	r2, r8
 800998e:	189b      	adds	r3, r3, r2
 8009990:	66bb      	str	r3, [r7, #104]	; 0x68
 8009992:	464b      	mov	r3, r9
 8009994:	460a      	mov	r2, r1
 8009996:	eb42 0303 	adc.w	r3, r2, r3
 800999a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800999c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	663b      	str	r3, [r7, #96]	; 0x60
 80099a6:	667a      	str	r2, [r7, #100]	; 0x64
 80099a8:	f04f 0200 	mov.w	r2, #0
 80099ac:	f04f 0300 	mov.w	r3, #0
 80099b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80099b4:	4649      	mov	r1, r9
 80099b6:	008b      	lsls	r3, r1, #2
 80099b8:	4641      	mov	r1, r8
 80099ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099be:	4641      	mov	r1, r8
 80099c0:	008a      	lsls	r2, r1, #2
 80099c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80099c6:	f7f7 f8e1 	bl	8000b8c <__aeabi_uldivmod>
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	4b0d      	ldr	r3, [pc, #52]	; (8009a04 <UART_SetConfig+0x4e4>)
 80099d0:	fba3 1302 	umull	r1, r3, r3, r2
 80099d4:	095b      	lsrs	r3, r3, #5
 80099d6:	2164      	movs	r1, #100	; 0x64
 80099d8:	fb01 f303 	mul.w	r3, r1, r3
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	011b      	lsls	r3, r3, #4
 80099e0:	3332      	adds	r3, #50	; 0x32
 80099e2:	4a08      	ldr	r2, [pc, #32]	; (8009a04 <UART_SetConfig+0x4e4>)
 80099e4:	fba2 2303 	umull	r2, r3, r2, r3
 80099e8:	095b      	lsrs	r3, r3, #5
 80099ea:	f003 020f 	and.w	r2, r3, #15
 80099ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4422      	add	r2, r4
 80099f6:	609a      	str	r2, [r3, #8]
}
 80099f8:	bf00      	nop
 80099fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099fe:	46bd      	mov	sp, r7
 8009a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a04:	51eb851f 	.word	0x51eb851f

08009a08 <__NVIC_SetPriority>:
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	6039      	str	r1, [r7, #0]
 8009a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	db0a      	blt.n	8009a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	490c      	ldr	r1, [pc, #48]	; (8009a54 <__NVIC_SetPriority+0x4c>)
 8009a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a26:	0112      	lsls	r2, r2, #4
 8009a28:	b2d2      	uxtb	r2, r2
 8009a2a:	440b      	add	r3, r1
 8009a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a30:	e00a      	b.n	8009a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	4908      	ldr	r1, [pc, #32]	; (8009a58 <__NVIC_SetPriority+0x50>)
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	f003 030f 	and.w	r3, r3, #15
 8009a3e:	3b04      	subs	r3, #4
 8009a40:	0112      	lsls	r2, r2, #4
 8009a42:	b2d2      	uxtb	r2, r2
 8009a44:	440b      	add	r3, r1
 8009a46:	761a      	strb	r2, [r3, #24]
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	e000e100 	.word	0xe000e100
 8009a58:	e000ed00 	.word	0xe000ed00

08009a5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a60:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <SysTick_Handler+0x1c>)
 8009a62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a64:	f001 fe38 	bl	800b6d8 <xTaskGetSchedulerState>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d001      	beq.n	8009a72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a6e:	f002 fd1b 	bl	800c4a8 <xPortSysTickHandler>
  }
}
 8009a72:	bf00      	nop
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	e000e010 	.word	0xe000e010

08009a7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a80:	2100      	movs	r1, #0
 8009a82:	f06f 0004 	mvn.w	r0, #4
 8009a86:	f7ff ffbf 	bl	8009a08 <__NVIC_SetPriority>
#endif
}
 8009a8a:	bf00      	nop
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a96:	f3ef 8305 	mrs	r3, IPSR
 8009a9a:	603b      	str	r3, [r7, #0]
  return(result);
 8009a9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d003      	beq.n	8009aaa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009aa2:	f06f 0305 	mvn.w	r3, #5
 8009aa6:	607b      	str	r3, [r7, #4]
 8009aa8:	e00c      	b.n	8009ac4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009aaa:	4b0a      	ldr	r3, [pc, #40]	; (8009ad4 <osKernelInitialize+0x44>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d105      	bne.n	8009abe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009ab2:	4b08      	ldr	r3, [pc, #32]	; (8009ad4 <osKernelInitialize+0x44>)
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	607b      	str	r3, [r7, #4]
 8009abc:	e002      	b.n	8009ac4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ac2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ac4:	687b      	ldr	r3, [r7, #4]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	20004d60 	.word	0x20004d60

08009ad8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ade:	f3ef 8305 	mrs	r3, IPSR
 8009ae2:	603b      	str	r3, [r7, #0]
  return(result);
 8009ae4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009aea:	f06f 0305 	mvn.w	r3, #5
 8009aee:	607b      	str	r3, [r7, #4]
 8009af0:	e010      	b.n	8009b14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009af2:	4b0b      	ldr	r3, [pc, #44]	; (8009b20 <osKernelStart+0x48>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d109      	bne.n	8009b0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009afa:	f7ff ffbf 	bl	8009a7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009afe:	4b08      	ldr	r3, [pc, #32]	; (8009b20 <osKernelStart+0x48>)
 8009b00:	2202      	movs	r2, #2
 8009b02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b04:	f001 f966 	bl	800add4 <vTaskStartScheduler>
      stat = osOK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	607b      	str	r3, [r7, #4]
 8009b0c:	e002      	b.n	8009b14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b14:	687b      	ldr	r3, [r7, #4]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20004d60 	.word	0x20004d60

08009b24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b2c:	f3ef 8305 	mrs	r3, IPSR
 8009b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d003      	beq.n	8009b40 <osDelay+0x1c>
    stat = osErrorISR;
 8009b38:	f06f 0305 	mvn.w	r3, #5
 8009b3c:	60fb      	str	r3, [r7, #12]
 8009b3e:	e007      	b.n	8009b50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f001 f90e 	bl	800ad6c <vTaskDelay>
    }
  }

  return (stat);
 8009b50:	68fb      	ldr	r3, [r7, #12]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	4a07      	ldr	r2, [pc, #28]	; (8009b88 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	4a06      	ldr	r2, [pc, #24]	; (8009b8c <vApplicationGetIdleTaskMemory+0x30>)
 8009b72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2280      	movs	r2, #128	; 0x80
 8009b78:	601a      	str	r2, [r3, #0]
}
 8009b7a:	bf00      	nop
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	20004d64 	.word	0x20004d64
 8009b8c:	20004e0c 	.word	0x20004e0c

08009b90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4a07      	ldr	r2, [pc, #28]	; (8009bbc <vApplicationGetTimerTaskMemory+0x2c>)
 8009ba0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	4a06      	ldr	r2, [pc, #24]	; (8009bc0 <vApplicationGetTimerTaskMemory+0x30>)
 8009ba6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bae:	601a      	str	r2, [r3, #0]
}
 8009bb0:	bf00      	nop
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	2000500c 	.word	0x2000500c
 8009bc0:	200050b4 	.word	0x200050b4

08009bc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f103 0208 	add.w	r2, r3, #8
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f103 0208 	add.w	r2, r3, #8
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f103 0208 	add.w	r2, r3, #8
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c12:	bf00      	nop
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b085      	sub	sp, #20
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	689a      	ldr	r2, [r3, #8]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	683a      	ldr	r2, [r7, #0]
 8009c42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	1c5a      	adds	r2, r3, #1
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	601a      	str	r2, [r3, #0]
}
 8009c5a:	bf00      	nop
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c66:	b480      	push	{r7}
 8009c68:	b085      	sub	sp, #20
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c7c:	d103      	bne.n	8009c86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	60fb      	str	r3, [r7, #12]
 8009c84:	e00c      	b.n	8009ca0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	3308      	adds	r3, #8
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	e002      	b.n	8009c94 <vListInsert+0x2e>
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d2f6      	bcs.n	8009c8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	1c5a      	adds	r2, r3, #1
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	601a      	str	r2, [r3, #0]
}
 8009ccc:	bf00      	nop
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	6892      	ldr	r2, [r2, #8]
 8009cee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	6852      	ldr	r2, [r2, #4]
 8009cf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d103      	bne.n	8009d0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	1e5a      	subs	r2, r3, #1
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10a      	bne.n	8009d56 <xQueueGenericReset+0x2a>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	60bb      	str	r3, [r7, #8]
}
 8009d52:	bf00      	nop
 8009d54:	e7fe      	b.n	8009d54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d56:	f002 fb15 	bl	800c384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d62:	68f9      	ldr	r1, [r7, #12]
 8009d64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d66:	fb01 f303 	mul.w	r3, r1, r3
 8009d6a:	441a      	add	r2, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d86:	3b01      	subs	r3, #1
 8009d88:	68f9      	ldr	r1, [r7, #12]
 8009d8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d8c:	fb01 f303 	mul.w	r3, r1, r3
 8009d90:	441a      	add	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	22ff      	movs	r2, #255	; 0xff
 8009d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	22ff      	movs	r2, #255	; 0xff
 8009da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d114      	bne.n	8009dd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d01a      	beq.n	8009dea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3310      	adds	r3, #16
 8009db8:	4618      	mov	r0, r3
 8009dba:	f001 faa5 	bl	800b308 <xTaskRemoveFromEventList>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d012      	beq.n	8009dea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	; (8009df8 <xQueueGenericReset+0xcc>)
 8009dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	e009      	b.n	8009dea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	3310      	adds	r3, #16
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7ff fef2 	bl	8009bc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	3324      	adds	r3, #36	; 0x24
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7ff feed 	bl	8009bc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009dea:	f002 fafb 	bl	800c3e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009dee:	2301      	movs	r3, #1
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	e000ed04 	.word	0xe000ed04

08009dfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08e      	sub	sp, #56	; 0x38
 8009e00:	af02      	add	r7, sp, #8
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10a      	bne.n	8009e26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e22:	bf00      	nop
 8009e24:	e7fe      	b.n	8009e24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10a      	bne.n	8009e42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d002      	beq.n	8009e4e <xQueueGenericCreateStatic+0x52>
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <xQueueGenericCreateStatic+0x56>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e000      	b.n	8009e54 <xQueueGenericCreateStatic+0x58>
 8009e52:	2300      	movs	r3, #0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10a      	bne.n	8009e6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	623b      	str	r3, [r7, #32]
}
 8009e6a:	bf00      	nop
 8009e6c:	e7fe      	b.n	8009e6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d102      	bne.n	8009e7a <xQueueGenericCreateStatic+0x7e>
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <xQueueGenericCreateStatic+0x82>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e000      	b.n	8009e80 <xQueueGenericCreateStatic+0x84>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	61fb      	str	r3, [r7, #28]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e9a:	2350      	movs	r3, #80	; 0x50
 8009e9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b50      	cmp	r3, #80	; 0x50
 8009ea2:	d00a      	beq.n	8009eba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	61bb      	str	r3, [r7, #24]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009eba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00d      	beq.n	8009ee2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ece:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	68b9      	ldr	r1, [r7, #8]
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 f83f 	bl	8009f60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3730      	adds	r7, #48	; 0x30
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08a      	sub	sp, #40	; 0x28
 8009ef0:	af02      	add	r7, sp, #8
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	613b      	str	r3, [r7, #16]
}
 8009f12:	bf00      	nop
 8009f14:	e7fe      	b.n	8009f14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	fb02 f303 	mul.w	r3, r2, r3
 8009f1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	3350      	adds	r3, #80	; 0x50
 8009f24:	4618      	mov	r0, r3
 8009f26:	f002 fb4f 	bl	800c5c8 <pvPortMalloc>
 8009f2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d011      	beq.n	8009f56 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	3350      	adds	r3, #80	; 0x50
 8009f3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f44:	79fa      	ldrb	r2, [r7, #7]
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	68b9      	ldr	r1, [r7, #8]
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 f805 	bl	8009f60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f56:	69bb      	ldr	r3, [r7, #24]
	}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3720      	adds	r7, #32
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
 8009f6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d103      	bne.n	8009f7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	69ba      	ldr	r2, [r7, #24]
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	e002      	b.n	8009f82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f8e:	2101      	movs	r1, #1
 8009f90:	69b8      	ldr	r0, [r7, #24]
 8009f92:	f7ff fecb 	bl	8009d2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	78fa      	ldrb	r2, [r7, #3]
 8009f9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f9e:	bf00      	nop
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08e      	sub	sp, #56	; 0x38
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10a      	bne.n	8009fda <xQueueGenericSend+0x32>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fd6:	bf00      	nop
 8009fd8:	e7fe      	b.n	8009fd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d103      	bne.n	8009fe8 <xQueueGenericSend+0x40>
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d101      	bne.n	8009fec <xQueueGenericSend+0x44>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e000      	b.n	8009fee <xQueueGenericSend+0x46>
 8009fec:	2300      	movs	r3, #0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10a      	bne.n	800a008 <xQueueGenericSend+0x60>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a004:	bf00      	nop
 800a006:	e7fe      	b.n	800a006 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d103      	bne.n	800a016 <xQueueGenericSend+0x6e>
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a012:	2b01      	cmp	r3, #1
 800a014:	d101      	bne.n	800a01a <xQueueGenericSend+0x72>
 800a016:	2301      	movs	r3, #1
 800a018:	e000      	b.n	800a01c <xQueueGenericSend+0x74>
 800a01a:	2300      	movs	r3, #0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <xQueueGenericSend+0x8e>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	623b      	str	r3, [r7, #32]
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a036:	f001 fb4f 	bl	800b6d8 <xTaskGetSchedulerState>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d102      	bne.n	800a046 <xQueueGenericSend+0x9e>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <xQueueGenericSend+0xa2>
 800a046:	2301      	movs	r3, #1
 800a048:	e000      	b.n	800a04c <xQueueGenericSend+0xa4>
 800a04a:	2300      	movs	r3, #0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <xQueueGenericSend+0xbe>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	61fb      	str	r3, [r7, #28]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a066:	f002 f98d 	bl	800c384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a072:	429a      	cmp	r2, r3
 800a074:	d302      	bcc.n	800a07c <xQueueGenericSend+0xd4>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d129      	bne.n	800a0d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	68b9      	ldr	r1, [r7, #8]
 800a080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a082:	f000 fb4d 	bl	800a720 <prvCopyDataToQueue>
 800a086:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d010      	beq.n	800a0b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a092:	3324      	adds	r3, #36	; 0x24
 800a094:	4618      	mov	r0, r3
 800a096:	f001 f937 	bl	800b308 <xTaskRemoveFromEventList>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d013      	beq.n	800a0c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0a0:	4b3f      	ldr	r3, [pc, #252]	; (800a1a0 <xQueueGenericSend+0x1f8>)
 800a0a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a6:	601a      	str	r2, [r3, #0]
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	e00a      	b.n	800a0c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d007      	beq.n	800a0c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0b8:	4b39      	ldr	r3, [pc, #228]	; (800a1a0 <xQueueGenericSend+0x1f8>)
 800a0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0c8:	f002 f98c 	bl	800c3e4 <vPortExitCritical>
				return pdPASS;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e063      	b.n	800a198 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d103      	bne.n	800a0de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0d6:	f002 f985 	bl	800c3e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e05c      	b.n	800a198 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d106      	bne.n	800a0f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0e4:	f107 0314 	add.w	r3, r7, #20
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f001 f997 	bl	800b41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0f2:	f002 f977 	bl	800c3e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0f6:	f000 fedd 	bl	800aeb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0fa:	f002 f943 	bl	800c384 <vPortEnterCritical>
 800a0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a104:	b25b      	sxtb	r3, r3
 800a106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a10a:	d103      	bne.n	800a114 <xQueueGenericSend+0x16c>
 800a10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a11a:	b25b      	sxtb	r3, r3
 800a11c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a120:	d103      	bne.n	800a12a <xQueueGenericSend+0x182>
 800a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a12a:	f002 f95b 	bl	800c3e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a12e:	1d3a      	adds	r2, r7, #4
 800a130:	f107 0314 	add.w	r3, r7, #20
 800a134:	4611      	mov	r1, r2
 800a136:	4618      	mov	r0, r3
 800a138:	f001 f986 	bl	800b448 <xTaskCheckForTimeOut>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d124      	bne.n	800a18c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a142:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a144:	f000 fbe4 	bl	800a910 <prvIsQueueFull>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d018      	beq.n	800a180 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	3310      	adds	r3, #16
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	4611      	mov	r1, r2
 800a156:	4618      	mov	r0, r3
 800a158:	f001 f886 	bl	800b268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a15c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a15e:	f000 fb6f 	bl	800a840 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a162:	f000 feb5 	bl	800aed0 <xTaskResumeAll>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f47f af7c 	bne.w	800a066 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a16e:	4b0c      	ldr	r3, [pc, #48]	; (800a1a0 <xQueueGenericSend+0x1f8>)
 800a170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	e772      	b.n	800a066 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a182:	f000 fb5d 	bl	800a840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a186:	f000 fea3 	bl	800aed0 <xTaskResumeAll>
 800a18a:	e76c      	b.n	800a066 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a18c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a18e:	f000 fb57 	bl	800a840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a192:	f000 fe9d 	bl	800aed0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a196:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3738      	adds	r7, #56	; 0x38
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	e000ed04 	.word	0xe000ed04

0800a1a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b090      	sub	sp, #64	; 0x40
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
 800a1b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10a      	bne.n	800a1d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d103      	bne.n	800a1e0 <xQueueGenericSendFromISR+0x3c>
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <xQueueGenericSendFromISR+0x40>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e000      	b.n	800a1e6 <xQueueGenericSendFromISR+0x42>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10a      	bne.n	800a200 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	2b02      	cmp	r3, #2
 800a204:	d103      	bne.n	800a20e <xQueueGenericSendFromISR+0x6a>
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d101      	bne.n	800a212 <xQueueGenericSendFromISR+0x6e>
 800a20e:	2301      	movs	r3, #1
 800a210:	e000      	b.n	800a214 <xQueueGenericSendFromISR+0x70>
 800a212:	2300      	movs	r3, #0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	623b      	str	r3, [r7, #32]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a22e:	f002 f98b 	bl	800c548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a232:	f3ef 8211 	mrs	r2, BASEPRI
 800a236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	61fa      	str	r2, [r7, #28]
 800a248:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a24a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a24c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a256:	429a      	cmp	r2, r3
 800a258:	d302      	bcc.n	800a260 <xQueueGenericSendFromISR+0xbc>
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d12f      	bne.n	800a2c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	68b9      	ldr	r1, [r7, #8]
 800a274:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a276:	f000 fa53 	bl	800a720 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a27a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a282:	d112      	bne.n	800a2aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d016      	beq.n	800a2ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28e:	3324      	adds	r3, #36	; 0x24
 800a290:	4618      	mov	r0, r3
 800a292:	f001 f839 	bl	800b308 <xTaskRemoveFromEventList>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00e      	beq.n	800a2ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00b      	beq.n	800a2ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]
 800a2a8:	e007      	b.n	800a2ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	b25a      	sxtb	r2, r3
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a2be:	e001      	b.n	800a2c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3740      	adds	r7, #64	; 0x40
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b08c      	sub	sp, #48	; 0x30
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10a      	bne.n	800a30c <xQueueReceive+0x30>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	623b      	str	r3, [r7, #32]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d103      	bne.n	800a31a <xQueueReceive+0x3e>
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <xQueueReceive+0x42>
 800a31a:	2301      	movs	r3, #1
 800a31c:	e000      	b.n	800a320 <xQueueReceive+0x44>
 800a31e:	2300      	movs	r3, #0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10a      	bne.n	800a33a <xQueueReceive+0x5e>
	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	61fb      	str	r3, [r7, #28]
}
 800a336:	bf00      	nop
 800a338:	e7fe      	b.n	800a338 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a33a:	f001 f9cd 	bl	800b6d8 <xTaskGetSchedulerState>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d102      	bne.n	800a34a <xQueueReceive+0x6e>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <xQueueReceive+0x72>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e000      	b.n	800a350 <xQueueReceive+0x74>
 800a34e:	2300      	movs	r3, #0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10a      	bne.n	800a36a <xQueueReceive+0x8e>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	61bb      	str	r3, [r7, #24]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a36a:	f002 f80b 	bl	800c384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a372:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	2b00      	cmp	r3, #0
 800a378:	d01f      	beq.n	800a3ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a37a:	68b9      	ldr	r1, [r7, #8]
 800a37c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a37e:	f000 fa39 	bl	800a7f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a384:	1e5a      	subs	r2, r3, #1
 800a386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a388:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00f      	beq.n	800a3b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	3310      	adds	r3, #16
 800a396:	4618      	mov	r0, r3
 800a398:	f000 ffb6 	bl	800b308 <xTaskRemoveFromEventList>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d007      	beq.n	800a3b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3a2:	4b3d      	ldr	r3, [pc, #244]	; (800a498 <xQueueReceive+0x1bc>)
 800a3a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3b2:	f002 f817 	bl	800c3e4 <vPortExitCritical>
				return pdPASS;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e069      	b.n	800a48e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d103      	bne.n	800a3c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3c0:	f002 f810 	bl	800c3e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	e062      	b.n	800a48e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d106      	bne.n	800a3dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3ce:	f107 0310 	add.w	r3, r7, #16
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f001 f822 	bl	800b41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3dc:	f002 f802 	bl	800c3e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3e0:	f000 fd68 	bl	800aeb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3e4:	f001 ffce 	bl	800c384 <vPortEnterCritical>
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3ee:	b25b      	sxtb	r3, r3
 800a3f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3f4:	d103      	bne.n	800a3fe <xQueueReceive+0x122>
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a404:	b25b      	sxtb	r3, r3
 800a406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a40a:	d103      	bne.n	800a414 <xQueueReceive+0x138>
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a414:	f001 ffe6 	bl	800c3e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a418:	1d3a      	adds	r2, r7, #4
 800a41a:	f107 0310 	add.w	r3, r7, #16
 800a41e:	4611      	mov	r1, r2
 800a420:	4618      	mov	r0, r3
 800a422:	f001 f811 	bl	800b448 <xTaskCheckForTimeOut>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d123      	bne.n	800a474 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a42c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a42e:	f000 fa59 	bl	800a8e4 <prvIsQueueEmpty>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d017      	beq.n	800a468 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	3324      	adds	r3, #36	; 0x24
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	4611      	mov	r1, r2
 800a440:	4618      	mov	r0, r3
 800a442:	f000 ff11 	bl	800b268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a448:	f000 f9fa 	bl	800a840 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a44c:	f000 fd40 	bl	800aed0 <xTaskResumeAll>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d189      	bne.n	800a36a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a456:	4b10      	ldr	r3, [pc, #64]	; (800a498 <xQueueReceive+0x1bc>)
 800a458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	e780      	b.n	800a36a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a46a:	f000 f9e9 	bl	800a840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a46e:	f000 fd2f 	bl	800aed0 <xTaskResumeAll>
 800a472:	e77a      	b.n	800a36a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a476:	f000 f9e3 	bl	800a840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a47a:	f000 fd29 	bl	800aed0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a47e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a480:	f000 fa30 	bl	800a8e4 <prvIsQueueEmpty>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	f43f af6f 	beq.w	800a36a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a48c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3730      	adds	r7, #48	; 0x30
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	e000ed04 	.word	0xe000ed04

0800a49c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b08e      	sub	sp, #56	; 0x38
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d10a      	bne.n	800a4ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4bc:	f383 8811 	msr	BASEPRI, r3
 800a4c0:	f3bf 8f6f 	isb	sy
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	623b      	str	r3, [r7, #32]
}
 800a4ca:	bf00      	nop
 800a4cc:	e7fe      	b.n	800a4cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	61fb      	str	r3, [r7, #28]
}
 800a4e8:	bf00      	nop
 800a4ea:	e7fe      	b.n	800a4ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4ec:	f001 f8f4 	bl	800b6d8 <xTaskGetSchedulerState>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d102      	bne.n	800a4fc <xQueueSemaphoreTake+0x60>
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d101      	bne.n	800a500 <xQueueSemaphoreTake+0x64>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e000      	b.n	800a502 <xQueueSemaphoreTake+0x66>
 800a500:	2300      	movs	r3, #0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10a      	bne.n	800a51c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	61bb      	str	r3, [r7, #24]
}
 800a518:	bf00      	nop
 800a51a:	e7fe      	b.n	800a51a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a51c:	f001 ff32 	bl	800c384 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a524:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d024      	beq.n	800a576 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52e:	1e5a      	subs	r2, r3, #1
 800a530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a532:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d104      	bne.n	800a546 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a53c:	f001 fa42 	bl	800b9c4 <pvTaskIncrementMutexHeldCount>
 800a540:	4602      	mov	r2, r0
 800a542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a544:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00f      	beq.n	800a56e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a550:	3310      	adds	r3, #16
 800a552:	4618      	mov	r0, r3
 800a554:	f000 fed8 	bl	800b308 <xTaskRemoveFromEventList>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d007      	beq.n	800a56e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a55e:	4b54      	ldr	r3, [pc, #336]	; (800a6b0 <xQueueSemaphoreTake+0x214>)
 800a560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a56e:	f001 ff39 	bl	800c3e4 <vPortExitCritical>
				return pdPASS;
 800a572:	2301      	movs	r3, #1
 800a574:	e097      	b.n	800a6a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d111      	bne.n	800a5a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00a      	beq.n	800a598 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	617b      	str	r3, [r7, #20]
}
 800a594:	bf00      	nop
 800a596:	e7fe      	b.n	800a596 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a598:	f001 ff24 	bl	800c3e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a59c:	2300      	movs	r3, #0
 800a59e:	e082      	b.n	800a6a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d106      	bne.n	800a5b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5a6:	f107 030c 	add.w	r3, r7, #12
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 ff36 	bl	800b41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5b4:	f001 ff16 	bl	800c3e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5b8:	f000 fc7c 	bl	800aeb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5bc:	f001 fee2 	bl	800c384 <vPortEnterCritical>
 800a5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5c6:	b25b      	sxtb	r3, r3
 800a5c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5cc:	d103      	bne.n	800a5d6 <xQueueSemaphoreTake+0x13a>
 800a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5dc:	b25b      	sxtb	r3, r3
 800a5de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5e2:	d103      	bne.n	800a5ec <xQueueSemaphoreTake+0x150>
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5ec:	f001 fefa 	bl	800c3e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5f0:	463a      	mov	r2, r7
 800a5f2:	f107 030c 	add.w	r3, r7, #12
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 ff25 	bl	800b448 <xTaskCheckForTimeOut>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d132      	bne.n	800a66a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a606:	f000 f96d 	bl	800a8e4 <prvIsQueueEmpty>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d026      	beq.n	800a65e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d109      	bne.n	800a62c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a618:	f001 feb4 	bl	800c384 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	4618      	mov	r0, r3
 800a622:	f001 f877 	bl	800b714 <xTaskPriorityInherit>
 800a626:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a628:	f001 fedc 	bl	800c3e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62e:	3324      	adds	r3, #36	; 0x24
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	4611      	mov	r1, r2
 800a634:	4618      	mov	r0, r3
 800a636:	f000 fe17 	bl	800b268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a63a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a63c:	f000 f900 	bl	800a840 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a640:	f000 fc46 	bl	800aed0 <xTaskResumeAll>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	f47f af68 	bne.w	800a51c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a64c:	4b18      	ldr	r3, [pc, #96]	; (800a6b0 <xQueueSemaphoreTake+0x214>)
 800a64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	e75e      	b.n	800a51c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a65e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a660:	f000 f8ee 	bl	800a840 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a664:	f000 fc34 	bl	800aed0 <xTaskResumeAll>
 800a668:	e758      	b.n	800a51c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a66a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a66c:	f000 f8e8 	bl	800a840 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a670:	f000 fc2e 	bl	800aed0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a676:	f000 f935 	bl	800a8e4 <prvIsQueueEmpty>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f43f af4d 	beq.w	800a51c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00d      	beq.n	800a6a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a688:	f001 fe7c 	bl	800c384 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a68c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a68e:	f000 f82f 	bl	800a6f0 <prvGetDisinheritPriorityAfterTimeout>
 800a692:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a69a:	4618      	mov	r0, r3
 800a69c:	f001 f910 	bl	800b8c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a6a0:	f001 fea0 	bl	800c3e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3738      	adds	r7, #56	; 0x38
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	e000ed04 	.word	0xe000ed04

0800a6b4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10a      	bne.n	800a6d8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	60bb      	str	r3, [r7, #8]
}
 800a6d4:	bf00      	nop
 800a6d6:	e7fe      	b.n	800a6d6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a6d8:	f001 fe54 	bl	800c384 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a6e2:	f001 fe7f 	bl	800c3e4 <vPortExitCritical>

	return uxReturn;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d006      	beq.n	800a70e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	e001      	b.n	800a712 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a70e:	2300      	movs	r3, #0
 800a710:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a712:	68fb      	ldr	r3, [r7, #12]
	}
 800a714:	4618      	mov	r0, r3
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a72c:	2300      	movs	r3, #0
 800a72e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a734:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10d      	bne.n	800a75a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d14d      	bne.n	800a7e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f001 f84a 	bl	800b7e4 <xTaskPriorityDisinherit>
 800a750:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	609a      	str	r2, [r3, #8]
 800a758:	e043      	b.n	800a7e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d119      	bne.n	800a794 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6858      	ldr	r0, [r3, #4]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a768:	461a      	mov	r2, r3
 800a76a:	68b9      	ldr	r1, [r7, #8]
 800a76c:	f00e f873 	bl	8018856 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a778:	441a      	add	r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	685a      	ldr	r2, [r3, #4]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	429a      	cmp	r2, r3
 800a788:	d32b      	bcc.n	800a7e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	605a      	str	r2, [r3, #4]
 800a792:	e026      	b.n	800a7e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	68d8      	ldr	r0, [r3, #12]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79c:	461a      	mov	r2, r3
 800a79e:	68b9      	ldr	r1, [r7, #8]
 800a7a0:	f00e f859 	bl	8018856 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	68da      	ldr	r2, [r3, #12]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ac:	425b      	negs	r3, r3
 800a7ae:	441a      	add	r2, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d207      	bcs.n	800a7d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	689a      	ldr	r2, [r3, #8]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c8:	425b      	negs	r3, r3
 800a7ca:	441a      	add	r2, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d105      	bne.n	800a7e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a7ea:	697b      	ldr	r3, [r7, #20]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3718      	adds	r7, #24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a802:	2b00      	cmp	r3, #0
 800a804:	d018      	beq.n	800a838 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	441a      	add	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	68da      	ldr	r2, [r3, #12]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d303      	bcc.n	800a828 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68d9      	ldr	r1, [r3, #12]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a830:	461a      	mov	r2, r3
 800a832:	6838      	ldr	r0, [r7, #0]
 800a834:	f00e f80f 	bl	8018856 <memcpy>
	}
}
 800a838:	bf00      	nop
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a848:	f001 fd9c 	bl	800c384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a852:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a854:	e011      	b.n	800a87a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d012      	beq.n	800a884 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	3324      	adds	r3, #36	; 0x24
 800a862:	4618      	mov	r0, r3
 800a864:	f000 fd50 	bl	800b308 <xTaskRemoveFromEventList>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a86e:	f000 fe4d 	bl	800b50c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	3b01      	subs	r3, #1
 800a876:	b2db      	uxtb	r3, r3
 800a878:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a87a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	dce9      	bgt.n	800a856 <prvUnlockQueue+0x16>
 800a882:	e000      	b.n	800a886 <prvUnlockQueue+0x46>
					break;
 800a884:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	22ff      	movs	r2, #255	; 0xff
 800a88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a88e:	f001 fda9 	bl	800c3e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a892:	f001 fd77 	bl	800c384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a89c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a89e:	e011      	b.n	800a8c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d012      	beq.n	800a8ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3310      	adds	r3, #16
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 fd2b 	bl	800b308 <xTaskRemoveFromEventList>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d001      	beq.n	800a8bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8b8:	f000 fe28 	bl	800b50c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	dce9      	bgt.n	800a8a0 <prvUnlockQueue+0x60>
 800a8cc:	e000      	b.n	800a8d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	22ff      	movs	r2, #255	; 0xff
 800a8d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a8d8:	f001 fd84 	bl	800c3e4 <vPortExitCritical>
}
 800a8dc:	bf00      	nop
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8ec:	f001 fd4a 	bl	800c384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	e001      	b.n	800a902 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a8fe:	2300      	movs	r3, #0
 800a900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a902:	f001 fd6f 	bl	800c3e4 <vPortExitCritical>

	return xReturn;
 800a906:	68fb      	ldr	r3, [r7, #12]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a918:	f001 fd34 	bl	800c384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a924:	429a      	cmp	r2, r3
 800a926:	d102      	bne.n	800a92e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a928:	2301      	movs	r3, #1
 800a92a:	60fb      	str	r3, [r7, #12]
 800a92c:	e001      	b.n	800a932 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a92e:	2300      	movs	r3, #0
 800a930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a932:	f001 fd57 	bl	800c3e4 <vPortExitCritical>

	return xReturn;
 800a936:	68fb      	ldr	r3, [r7, #12]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]
 800a94e:	e014      	b.n	800a97a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a950:	4a0f      	ldr	r2, [pc, #60]	; (800a990 <vQueueAddToRegistry+0x50>)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10b      	bne.n	800a974 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a95c:	490c      	ldr	r1, [pc, #48]	; (800a990 <vQueueAddToRegistry+0x50>)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a966:	4a0a      	ldr	r2, [pc, #40]	; (800a990 <vQueueAddToRegistry+0x50>)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	00db      	lsls	r3, r3, #3
 800a96c:	4413      	add	r3, r2
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a972:	e006      	b.n	800a982 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3301      	adds	r3, #1
 800a978:	60fb      	str	r3, [r7, #12]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b07      	cmp	r3, #7
 800a97e:	d9e7      	bls.n	800a950 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a980:	bf00      	nop
 800a982:	bf00      	nop
 800a984:	3714      	adds	r7, #20
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	200054b4 	.word	0x200054b4

0800a994 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9a4:	f001 fcee 	bl	800c384 <vPortEnterCritical>
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ae:	b25b      	sxtb	r3, r3
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9b4:	d103      	bne.n	800a9be <vQueueWaitForMessageRestricted+0x2a>
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9c4:	b25b      	sxtb	r3, r3
 800a9c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ca:	d103      	bne.n	800a9d4 <vQueueWaitForMessageRestricted+0x40>
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9d4:	f001 fd06 	bl	800c3e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d106      	bne.n	800a9ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	3324      	adds	r3, #36	; 0x24
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	68b9      	ldr	r1, [r7, #8]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 fc61 	bl	800b2b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a9ee:	6978      	ldr	r0, [r7, #20]
 800a9f0:	f7ff ff26 	bl	800a840 <prvUnlockQueue>
	}
 800a9f4:	bf00      	nop
 800a9f6:	3718      	adds	r7, #24
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b08e      	sub	sp, #56	; 0x38
 800aa00:	af04      	add	r7, sp, #16
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
 800aa08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10a      	bne.n	800aa26 <xTaskCreateStatic+0x2a>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	623b      	str	r3, [r7, #32]
}
 800aa22:	bf00      	nop
 800aa24:	e7fe      	b.n	800aa24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10a      	bne.n	800aa42 <xTaskCreateStatic+0x46>
	__asm volatile
 800aa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	61fb      	str	r3, [r7, #28]
}
 800aa3e:	bf00      	nop
 800aa40:	e7fe      	b.n	800aa40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa42:	23a8      	movs	r3, #168	; 0xa8
 800aa44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	2ba8      	cmp	r3, #168	; 0xa8
 800aa4a:	d00a      	beq.n	800aa62 <xTaskCreateStatic+0x66>
	__asm volatile
 800aa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa50:	f383 8811 	msr	BASEPRI, r3
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	61bb      	str	r3, [r7, #24]
}
 800aa5e:	bf00      	nop
 800aa60:	e7fe      	b.n	800aa60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d01e      	beq.n	800aaa8 <xTaskCreateStatic+0xac>
 800aa6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d01b      	beq.n	800aaa8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa82:	2300      	movs	r3, #0
 800aa84:	9303      	str	r3, [sp, #12]
 800aa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa88:	9302      	str	r3, [sp, #8]
 800aa8a:	f107 0314 	add.w	r3, r7, #20
 800aa8e:	9301      	str	r3, [sp, #4]
 800aa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	68b9      	ldr	r1, [r7, #8]
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 f850 	bl	800ab40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aaa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaa2:	f000 f8f3 	bl	800ac8c <prvAddNewTaskToReadyList>
 800aaa6:	e001      	b.n	800aaac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aaac:	697b      	ldr	r3, [r7, #20]
	}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3728      	adds	r7, #40	; 0x28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b08c      	sub	sp, #48	; 0x30
 800aaba:	af04      	add	r7, sp, #16
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	60b9      	str	r1, [r7, #8]
 800aac0:	603b      	str	r3, [r7, #0]
 800aac2:	4613      	mov	r3, r2
 800aac4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aac6:	88fb      	ldrh	r3, [r7, #6]
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4618      	mov	r0, r3
 800aacc:	f001 fd7c 	bl	800c5c8 <pvPortMalloc>
 800aad0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00e      	beq.n	800aaf6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aad8:	20a8      	movs	r0, #168	; 0xa8
 800aada:	f001 fd75 	bl	800c5c8 <pvPortMalloc>
 800aade:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d003      	beq.n	800aaee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	697a      	ldr	r2, [r7, #20]
 800aaea:	631a      	str	r2, [r3, #48]	; 0x30
 800aaec:	e005      	b.n	800aafa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aaee:	6978      	ldr	r0, [r7, #20]
 800aaf0:	f001 fe36 	bl	800c760 <vPortFree>
 800aaf4:	e001      	b.n	800aafa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d017      	beq.n	800ab30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab08:	88fa      	ldrh	r2, [r7, #6]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	9303      	str	r3, [sp, #12]
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	9302      	str	r3, [sp, #8]
 800ab12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	68b9      	ldr	r1, [r7, #8]
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 f80e 	bl	800ab40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab24:	69f8      	ldr	r0, [r7, #28]
 800ab26:	f000 f8b1 	bl	800ac8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	61bb      	str	r3, [r7, #24]
 800ab2e:	e002      	b.n	800ab36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab36:	69bb      	ldr	r3, [r7, #24]
	}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3720      	adds	r7, #32
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b088      	sub	sp, #32
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
 800ab4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	461a      	mov	r2, r3
 800ab58:	21a5      	movs	r1, #165	; 0xa5
 800ab5a:	f00d fd5d 	bl	8018618 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	f023 0307 	bic.w	r3, r3, #7
 800ab76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	f003 0307 	and.w	r3, r3, #7
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00a      	beq.n	800ab98 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	617b      	str	r3, [r7, #20]
}
 800ab94:	bf00      	nop
 800ab96:	e7fe      	b.n	800ab96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d01f      	beq.n	800abde <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab9e:	2300      	movs	r3, #0
 800aba0:	61fb      	str	r3, [r7, #28]
 800aba2:	e012      	b.n	800abca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	4413      	add	r3, r2
 800abaa:	7819      	ldrb	r1, [r3, #0]
 800abac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	4413      	add	r3, r2
 800abb2:	3334      	adds	r3, #52	; 0x34
 800abb4:	460a      	mov	r2, r1
 800abb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	4413      	add	r3, r2
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d006      	beq.n	800abd2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	3301      	adds	r3, #1
 800abc8:	61fb      	str	r3, [r7, #28]
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	2b0f      	cmp	r3, #15
 800abce:	d9e9      	bls.n	800aba4 <prvInitialiseNewTask+0x64>
 800abd0:	e000      	b.n	800abd4 <prvInitialiseNewTask+0x94>
			{
				break;
 800abd2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abdc:	e003      	b.n	800abe6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800abde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe8:	2b37      	cmp	r3, #55	; 0x37
 800abea:	d901      	bls.n	800abf0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800abec:	2337      	movs	r3, #55	; 0x37
 800abee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800abf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abf4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abfa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	2200      	movs	r2, #0
 800ac00:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	3304      	adds	r3, #4
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fe fffc 	bl	8009c04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	3318      	adds	r3, #24
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7fe fff7 	bl	8009c04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	3354      	adds	r3, #84	; 0x54
 800ac40:	224c      	movs	r2, #76	; 0x4c
 800ac42:	2100      	movs	r1, #0
 800ac44:	4618      	mov	r0, r3
 800ac46:	f00d fce7 	bl	8018618 <memset>
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	4a0c      	ldr	r2, [pc, #48]	; (800ac80 <prvInitialiseNewTask+0x140>)
 800ac4e:	659a      	str	r2, [r3, #88]	; 0x58
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	4a0c      	ldr	r2, [pc, #48]	; (800ac84 <prvInitialiseNewTask+0x144>)
 800ac54:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac58:	4a0b      	ldr	r2, [pc, #44]	; (800ac88 <prvInitialiseNewTask+0x148>)
 800ac5a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	68f9      	ldr	r1, [r7, #12]
 800ac60:	69b8      	ldr	r0, [r7, #24]
 800ac62:	f001 fa65 	bl	800c130 <pxPortInitialiseStack>
 800ac66:	4602      	mov	r2, r0
 800ac68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d002      	beq.n	800ac78 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac78:	bf00      	nop
 800ac7a:	3720      	adds	r7, #32
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	20009d40 	.word	0x20009d40
 800ac84:	20009da8 	.word	0x20009da8
 800ac88:	20009e10 	.word	0x20009e10

0800ac8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac94:	f001 fb76 	bl	800c384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac98:	4b2d      	ldr	r3, [pc, #180]	; (800ad50 <prvAddNewTaskToReadyList+0xc4>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	4a2c      	ldr	r2, [pc, #176]	; (800ad50 <prvAddNewTaskToReadyList+0xc4>)
 800aca0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aca2:	4b2c      	ldr	r3, [pc, #176]	; (800ad54 <prvAddNewTaskToReadyList+0xc8>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d109      	bne.n	800acbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acaa:	4a2a      	ldr	r2, [pc, #168]	; (800ad54 <prvAddNewTaskToReadyList+0xc8>)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800acb0:	4b27      	ldr	r3, [pc, #156]	; (800ad50 <prvAddNewTaskToReadyList+0xc4>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d110      	bne.n	800acda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800acb8:	f000 fc4c 	bl	800b554 <prvInitialiseTaskLists>
 800acbc:	e00d      	b.n	800acda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800acbe:	4b26      	ldr	r3, [pc, #152]	; (800ad58 <prvAddNewTaskToReadyList+0xcc>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d109      	bne.n	800acda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800acc6:	4b23      	ldr	r3, [pc, #140]	; (800ad54 <prvAddNewTaskToReadyList+0xc8>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d802      	bhi.n	800acda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acd4:	4a1f      	ldr	r2, [pc, #124]	; (800ad54 <prvAddNewTaskToReadyList+0xc8>)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800acda:	4b20      	ldr	r3, [pc, #128]	; (800ad5c <prvAddNewTaskToReadyList+0xd0>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	3301      	adds	r3, #1
 800ace0:	4a1e      	ldr	r2, [pc, #120]	; (800ad5c <prvAddNewTaskToReadyList+0xd0>)
 800ace2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ace4:	4b1d      	ldr	r3, [pc, #116]	; (800ad5c <prvAddNewTaskToReadyList+0xd0>)
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf0:	4b1b      	ldr	r3, [pc, #108]	; (800ad60 <prvAddNewTaskToReadyList+0xd4>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d903      	bls.n	800ad00 <prvAddNewTaskToReadyList+0x74>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfc:	4a18      	ldr	r2, [pc, #96]	; (800ad60 <prvAddNewTaskToReadyList+0xd4>)
 800acfe:	6013      	str	r3, [r2, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad04:	4613      	mov	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4a15      	ldr	r2, [pc, #84]	; (800ad64 <prvAddNewTaskToReadyList+0xd8>)
 800ad0e:	441a      	add	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3304      	adds	r3, #4
 800ad14:	4619      	mov	r1, r3
 800ad16:	4610      	mov	r0, r2
 800ad18:	f7fe ff81 	bl	8009c1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad1c:	f001 fb62 	bl	800c3e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad20:	4b0d      	ldr	r3, [pc, #52]	; (800ad58 <prvAddNewTaskToReadyList+0xcc>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00e      	beq.n	800ad46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad28:	4b0a      	ldr	r3, [pc, #40]	; (800ad54 <prvAddNewTaskToReadyList+0xc8>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d207      	bcs.n	800ad46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad36:	4b0c      	ldr	r3, [pc, #48]	; (800ad68 <prvAddNewTaskToReadyList+0xdc>)
 800ad38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad46:	bf00      	nop
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	200059c8 	.word	0x200059c8
 800ad54:	200054f4 	.word	0x200054f4
 800ad58:	200059d4 	.word	0x200059d4
 800ad5c:	200059e4 	.word	0x200059e4
 800ad60:	200059d0 	.word	0x200059d0
 800ad64:	200054f8 	.word	0x200054f8
 800ad68:	e000ed04 	.word	0xe000ed04

0800ad6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad74:	2300      	movs	r3, #0
 800ad76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d017      	beq.n	800adae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad7e:	4b13      	ldr	r3, [pc, #76]	; (800adcc <vTaskDelay+0x60>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00a      	beq.n	800ad9c <vTaskDelay+0x30>
	__asm volatile
 800ad86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	60bb      	str	r3, [r7, #8]
}
 800ad98:	bf00      	nop
 800ad9a:	e7fe      	b.n	800ad9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad9c:	f000 f88a 	bl	800aeb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ada0:	2100      	movs	r1, #0
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fe22 	bl	800b9ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ada8:	f000 f892 	bl	800aed0 <xTaskResumeAll>
 800adac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d107      	bne.n	800adc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800adb4:	4b06      	ldr	r3, [pc, #24]	; (800add0 <vTaskDelay+0x64>)
 800adb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adba:	601a      	str	r2, [r3, #0]
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800adc4:	bf00      	nop
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	200059f0 	.word	0x200059f0
 800add0:	e000ed04 	.word	0xe000ed04

0800add4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b08a      	sub	sp, #40	; 0x28
 800add8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800adda:	2300      	movs	r3, #0
 800addc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800adde:	2300      	movs	r3, #0
 800ade0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ade2:	463a      	mov	r2, r7
 800ade4:	1d39      	adds	r1, r7, #4
 800ade6:	f107 0308 	add.w	r3, r7, #8
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe feb6 	bl	8009b5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	68ba      	ldr	r2, [r7, #8]
 800adf6:	9202      	str	r2, [sp, #8]
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	2300      	movs	r3, #0
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	2300      	movs	r3, #0
 800ae00:	460a      	mov	r2, r1
 800ae02:	4924      	ldr	r1, [pc, #144]	; (800ae94 <vTaskStartScheduler+0xc0>)
 800ae04:	4824      	ldr	r0, [pc, #144]	; (800ae98 <vTaskStartScheduler+0xc4>)
 800ae06:	f7ff fdf9 	bl	800a9fc <xTaskCreateStatic>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	4a23      	ldr	r2, [pc, #140]	; (800ae9c <vTaskStartScheduler+0xc8>)
 800ae0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae10:	4b22      	ldr	r3, [pc, #136]	; (800ae9c <vTaskStartScheduler+0xc8>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	617b      	str	r3, [r7, #20]
 800ae1c:	e001      	b.n	800ae22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d102      	bne.n	800ae2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae28:	f000 fe34 	bl	800ba94 <xTimerCreateTimerTask>
 800ae2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d11b      	bne.n	800ae6c <vTaskStartScheduler+0x98>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	613b      	str	r3, [r7, #16]
}
 800ae46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae48:	4b15      	ldr	r3, [pc, #84]	; (800aea0 <vTaskStartScheduler+0xcc>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	3354      	adds	r3, #84	; 0x54
 800ae4e:	4a15      	ldr	r2, [pc, #84]	; (800aea4 <vTaskStartScheduler+0xd0>)
 800ae50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae52:	4b15      	ldr	r3, [pc, #84]	; (800aea8 <vTaskStartScheduler+0xd4>)
 800ae54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae5a:	4b14      	ldr	r3, [pc, #80]	; (800aeac <vTaskStartScheduler+0xd8>)
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae60:	4b13      	ldr	r3, [pc, #76]	; (800aeb0 <vTaskStartScheduler+0xdc>)
 800ae62:	2200      	movs	r2, #0
 800ae64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae66:	f001 f9eb 	bl	800c240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae6a:	e00e      	b.n	800ae8a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae72:	d10a      	bne.n	800ae8a <vTaskStartScheduler+0xb6>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	60fb      	str	r3, [r7, #12]
}
 800ae86:	bf00      	nop
 800ae88:	e7fe      	b.n	800ae88 <vTaskStartScheduler+0xb4>
}
 800ae8a:	bf00      	nop
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	0801985c 	.word	0x0801985c
 800ae98:	0800b525 	.word	0x0800b525
 800ae9c:	200059ec 	.word	0x200059ec
 800aea0:	200054f4 	.word	0x200054f4
 800aea4:	200000cc 	.word	0x200000cc
 800aea8:	200059e8 	.word	0x200059e8
 800aeac:	200059d4 	.word	0x200059d4
 800aeb0:	200059cc 	.word	0x200059cc

0800aeb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aeb8:	4b04      	ldr	r3, [pc, #16]	; (800aecc <vTaskSuspendAll+0x18>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3301      	adds	r3, #1
 800aebe:	4a03      	ldr	r2, [pc, #12]	; (800aecc <vTaskSuspendAll+0x18>)
 800aec0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aec2:	bf00      	nop
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	200059f0 	.word	0x200059f0

0800aed0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aed6:	2300      	movs	r3, #0
 800aed8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aeda:	2300      	movs	r3, #0
 800aedc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aede:	4b42      	ldr	r3, [pc, #264]	; (800afe8 <xTaskResumeAll+0x118>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10a      	bne.n	800aefc <xTaskResumeAll+0x2c>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	603b      	str	r3, [r7, #0]
}
 800aef8:	bf00      	nop
 800aefa:	e7fe      	b.n	800aefa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aefc:	f001 fa42 	bl	800c384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af00:	4b39      	ldr	r3, [pc, #228]	; (800afe8 <xTaskResumeAll+0x118>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	3b01      	subs	r3, #1
 800af06:	4a38      	ldr	r2, [pc, #224]	; (800afe8 <xTaskResumeAll+0x118>)
 800af08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af0a:	4b37      	ldr	r3, [pc, #220]	; (800afe8 <xTaskResumeAll+0x118>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d162      	bne.n	800afd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af12:	4b36      	ldr	r3, [pc, #216]	; (800afec <xTaskResumeAll+0x11c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d05e      	beq.n	800afd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af1a:	e02f      	b.n	800af7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af1c:	4b34      	ldr	r3, [pc, #208]	; (800aff0 <xTaskResumeAll+0x120>)
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	3318      	adds	r3, #24
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fe fed5 	bl	8009cd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	3304      	adds	r3, #4
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe fed0 	bl	8009cd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3c:	4b2d      	ldr	r3, [pc, #180]	; (800aff4 <xTaskResumeAll+0x124>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	429a      	cmp	r2, r3
 800af42:	d903      	bls.n	800af4c <xTaskResumeAll+0x7c>
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	4a2a      	ldr	r2, [pc, #168]	; (800aff4 <xTaskResumeAll+0x124>)
 800af4a:	6013      	str	r3, [r2, #0]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af50:	4613      	mov	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4a27      	ldr	r2, [pc, #156]	; (800aff8 <xTaskResumeAll+0x128>)
 800af5a:	441a      	add	r2, r3
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	3304      	adds	r3, #4
 800af60:	4619      	mov	r1, r3
 800af62:	4610      	mov	r0, r2
 800af64:	f7fe fe5b 	bl	8009c1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af6c:	4b23      	ldr	r3, [pc, #140]	; (800affc <xTaskResumeAll+0x12c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af72:	429a      	cmp	r2, r3
 800af74:	d302      	bcc.n	800af7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af76:	4b22      	ldr	r3, [pc, #136]	; (800b000 <xTaskResumeAll+0x130>)
 800af78:	2201      	movs	r2, #1
 800af7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af7c:	4b1c      	ldr	r3, [pc, #112]	; (800aff0 <xTaskResumeAll+0x120>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1cb      	bne.n	800af1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af8a:	f000 fb85 	bl	800b698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af8e:	4b1d      	ldr	r3, [pc, #116]	; (800b004 <xTaskResumeAll+0x134>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d010      	beq.n	800afbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af9a:	f000 f847 	bl	800b02c <xTaskIncrementTick>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800afa4:	4b16      	ldr	r3, [pc, #88]	; (800b000 <xTaskResumeAll+0x130>)
 800afa6:	2201      	movs	r2, #1
 800afa8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	3b01      	subs	r3, #1
 800afae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1f1      	bne.n	800af9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800afb6:	4b13      	ldr	r3, [pc, #76]	; (800b004 <xTaskResumeAll+0x134>)
 800afb8:	2200      	movs	r2, #0
 800afba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800afbc:	4b10      	ldr	r3, [pc, #64]	; (800b000 <xTaskResumeAll+0x130>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d009      	beq.n	800afd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800afc4:	2301      	movs	r3, #1
 800afc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800afc8:	4b0f      	ldr	r3, [pc, #60]	; (800b008 <xTaskResumeAll+0x138>)
 800afca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afce:	601a      	str	r2, [r3, #0]
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afd8:	f001 fa04 	bl	800c3e4 <vPortExitCritical>

	return xAlreadyYielded;
 800afdc:	68bb      	ldr	r3, [r7, #8]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	200059f0 	.word	0x200059f0
 800afec:	200059c8 	.word	0x200059c8
 800aff0:	20005988 	.word	0x20005988
 800aff4:	200059d0 	.word	0x200059d0
 800aff8:	200054f8 	.word	0x200054f8
 800affc:	200054f4 	.word	0x200054f4
 800b000:	200059dc 	.word	0x200059dc
 800b004:	200059d8 	.word	0x200059d8
 800b008:	e000ed04 	.word	0xe000ed04

0800b00c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b012:	4b05      	ldr	r3, [pc, #20]	; (800b028 <xTaskGetTickCount+0x1c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b018:	687b      	ldr	r3, [r7, #4]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	370c      	adds	r7, #12
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	200059cc 	.word	0x200059cc

0800b02c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b032:	2300      	movs	r3, #0
 800b034:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b036:	4b4f      	ldr	r3, [pc, #316]	; (800b174 <xTaskIncrementTick+0x148>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f040 808f 	bne.w	800b15e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b040:	4b4d      	ldr	r3, [pc, #308]	; (800b178 <xTaskIncrementTick+0x14c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3301      	adds	r3, #1
 800b046:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b048:	4a4b      	ldr	r2, [pc, #300]	; (800b178 <xTaskIncrementTick+0x14c>)
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d120      	bne.n	800b096 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b054:	4b49      	ldr	r3, [pc, #292]	; (800b17c <xTaskIncrementTick+0x150>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00a      	beq.n	800b074 <xTaskIncrementTick+0x48>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	603b      	str	r3, [r7, #0]
}
 800b070:	bf00      	nop
 800b072:	e7fe      	b.n	800b072 <xTaskIncrementTick+0x46>
 800b074:	4b41      	ldr	r3, [pc, #260]	; (800b17c <xTaskIncrementTick+0x150>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	4b41      	ldr	r3, [pc, #260]	; (800b180 <xTaskIncrementTick+0x154>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a3f      	ldr	r2, [pc, #252]	; (800b17c <xTaskIncrementTick+0x150>)
 800b080:	6013      	str	r3, [r2, #0]
 800b082:	4a3f      	ldr	r2, [pc, #252]	; (800b180 <xTaskIncrementTick+0x154>)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	4b3e      	ldr	r3, [pc, #248]	; (800b184 <xTaskIncrementTick+0x158>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3301      	adds	r3, #1
 800b08e:	4a3d      	ldr	r2, [pc, #244]	; (800b184 <xTaskIncrementTick+0x158>)
 800b090:	6013      	str	r3, [r2, #0]
 800b092:	f000 fb01 	bl	800b698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b096:	4b3c      	ldr	r3, [pc, #240]	; (800b188 <xTaskIncrementTick+0x15c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	693a      	ldr	r2, [r7, #16]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d349      	bcc.n	800b134 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0a0:	4b36      	ldr	r3, [pc, #216]	; (800b17c <xTaskIncrementTick+0x150>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d104      	bne.n	800b0b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0aa:	4b37      	ldr	r3, [pc, #220]	; (800b188 <xTaskIncrementTick+0x15c>)
 800b0ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0b0:	601a      	str	r2, [r3, #0]
					break;
 800b0b2:	e03f      	b.n	800b134 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0b4:	4b31      	ldr	r3, [pc, #196]	; (800b17c <xTaskIncrementTick+0x150>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d203      	bcs.n	800b0d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0cc:	4a2e      	ldr	r2, [pc, #184]	; (800b188 <xTaskIncrementTick+0x15c>)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b0d2:	e02f      	b.n	800b134 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fe fdfd 	bl	8009cd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d004      	beq.n	800b0f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	3318      	adds	r3, #24
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fe fdf4 	bl	8009cd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f4:	4b25      	ldr	r3, [pc, #148]	; (800b18c <xTaskIncrementTick+0x160>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d903      	bls.n	800b104 <xTaskIncrementTick+0xd8>
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b100:	4a22      	ldr	r2, [pc, #136]	; (800b18c <xTaskIncrementTick+0x160>)
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b108:	4613      	mov	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	4413      	add	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4a1f      	ldr	r2, [pc, #124]	; (800b190 <xTaskIncrementTick+0x164>)
 800b112:	441a      	add	r2, r3
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	3304      	adds	r3, #4
 800b118:	4619      	mov	r1, r3
 800b11a:	4610      	mov	r0, r2
 800b11c:	f7fe fd7f 	bl	8009c1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b124:	4b1b      	ldr	r3, [pc, #108]	; (800b194 <xTaskIncrementTick+0x168>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d3b8      	bcc.n	800b0a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b12e:	2301      	movs	r3, #1
 800b130:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b132:	e7b5      	b.n	800b0a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b134:	4b17      	ldr	r3, [pc, #92]	; (800b194 <xTaskIncrementTick+0x168>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13a:	4915      	ldr	r1, [pc, #84]	; (800b190 <xTaskIncrementTick+0x164>)
 800b13c:	4613      	mov	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	440b      	add	r3, r1
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d901      	bls.n	800b150 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b14c:	2301      	movs	r3, #1
 800b14e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b150:	4b11      	ldr	r3, [pc, #68]	; (800b198 <xTaskIncrementTick+0x16c>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d007      	beq.n	800b168 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b158:	2301      	movs	r3, #1
 800b15a:	617b      	str	r3, [r7, #20]
 800b15c:	e004      	b.n	800b168 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b15e:	4b0f      	ldr	r3, [pc, #60]	; (800b19c <xTaskIncrementTick+0x170>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3301      	adds	r3, #1
 800b164:	4a0d      	ldr	r2, [pc, #52]	; (800b19c <xTaskIncrementTick+0x170>)
 800b166:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b168:	697b      	ldr	r3, [r7, #20]
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	200059f0 	.word	0x200059f0
 800b178:	200059cc 	.word	0x200059cc
 800b17c:	20005980 	.word	0x20005980
 800b180:	20005984 	.word	0x20005984
 800b184:	200059e0 	.word	0x200059e0
 800b188:	200059e8 	.word	0x200059e8
 800b18c:	200059d0 	.word	0x200059d0
 800b190:	200054f8 	.word	0x200054f8
 800b194:	200054f4 	.word	0x200054f4
 800b198:	200059dc 	.word	0x200059dc
 800b19c:	200059d8 	.word	0x200059d8

0800b1a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1a6:	4b2a      	ldr	r3, [pc, #168]	; (800b250 <vTaskSwitchContext+0xb0>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b1ae:	4b29      	ldr	r3, [pc, #164]	; (800b254 <vTaskSwitchContext+0xb4>)
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1b4:	e046      	b.n	800b244 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b1b6:	4b27      	ldr	r3, [pc, #156]	; (800b254 <vTaskSwitchContext+0xb4>)
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1bc:	4b26      	ldr	r3, [pc, #152]	; (800b258 <vTaskSwitchContext+0xb8>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	e010      	b.n	800b1e6 <vTaskSwitchContext+0x46>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10a      	bne.n	800b1e0 <vTaskSwitchContext+0x40>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	607b      	str	r3, [r7, #4]
}
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <vTaskSwitchContext+0x3e>
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	60fb      	str	r3, [r7, #12]
 800b1e6:	491d      	ldr	r1, [pc, #116]	; (800b25c <vTaskSwitchContext+0xbc>)
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	440b      	add	r3, r1
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d0e4      	beq.n	800b1c4 <vTaskSwitchContext+0x24>
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4a15      	ldr	r2, [pc, #84]	; (800b25c <vTaskSwitchContext+0xbc>)
 800b206:	4413      	add	r3, r2
 800b208:	60bb      	str	r3, [r7, #8]
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	605a      	str	r2, [r3, #4]
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	685a      	ldr	r2, [r3, #4]
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	3308      	adds	r3, #8
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d104      	bne.n	800b22a <vTaskSwitchContext+0x8a>
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	605a      	str	r2, [r3, #4]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	4a0b      	ldr	r2, [pc, #44]	; (800b260 <vTaskSwitchContext+0xc0>)
 800b232:	6013      	str	r3, [r2, #0]
 800b234:	4a08      	ldr	r2, [pc, #32]	; (800b258 <vTaskSwitchContext+0xb8>)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b23a:	4b09      	ldr	r3, [pc, #36]	; (800b260 <vTaskSwitchContext+0xc0>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3354      	adds	r3, #84	; 0x54
 800b240:	4a08      	ldr	r2, [pc, #32]	; (800b264 <vTaskSwitchContext+0xc4>)
 800b242:	6013      	str	r3, [r2, #0]
}
 800b244:	bf00      	nop
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	200059f0 	.word	0x200059f0
 800b254:	200059dc 	.word	0x200059dc
 800b258:	200059d0 	.word	0x200059d0
 800b25c:	200054f8 	.word	0x200054f8
 800b260:	200054f4 	.word	0x200054f4
 800b264:	200000cc 	.word	0x200000cc

0800b268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10a      	bne.n	800b28e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	60fb      	str	r3, [r7, #12]
}
 800b28a:	bf00      	nop
 800b28c:	e7fe      	b.n	800b28c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b28e:	4b07      	ldr	r3, [pc, #28]	; (800b2ac <vTaskPlaceOnEventList+0x44>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3318      	adds	r3, #24
 800b294:	4619      	mov	r1, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7fe fce5 	bl	8009c66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b29c:	2101      	movs	r1, #1
 800b29e:	6838      	ldr	r0, [r7, #0]
 800b2a0:	f000 fba4 	bl	800b9ec <prvAddCurrentTaskToDelayedList>
}
 800b2a4:	bf00      	nop
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	200054f4 	.word	0x200054f4

0800b2b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10a      	bne.n	800b2d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	617b      	str	r3, [r7, #20]
}
 800b2d4:	bf00      	nop
 800b2d6:	e7fe      	b.n	800b2d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2d8:	4b0a      	ldr	r3, [pc, #40]	; (800b304 <vTaskPlaceOnEventListRestricted+0x54>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	3318      	adds	r3, #24
 800b2de:	4619      	mov	r1, r3
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f7fe fc9c 	bl	8009c1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b2ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2f2:	6879      	ldr	r1, [r7, #4]
 800b2f4:	68b8      	ldr	r0, [r7, #8]
 800b2f6:	f000 fb79 	bl	800b9ec <prvAddCurrentTaskToDelayedList>
	}
 800b2fa:	bf00      	nop
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	200054f4 	.word	0x200054f4

0800b308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10a      	bne.n	800b334 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	60fb      	str	r3, [r7, #12]
}
 800b330:	bf00      	nop
 800b332:	e7fe      	b.n	800b332 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	3318      	adds	r3, #24
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fe fccd 	bl	8009cd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b33e:	4b1e      	ldr	r3, [pc, #120]	; (800b3b8 <xTaskRemoveFromEventList+0xb0>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d11d      	bne.n	800b382 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	3304      	adds	r3, #4
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fe fcc4 	bl	8009cd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b354:	4b19      	ldr	r3, [pc, #100]	; (800b3bc <xTaskRemoveFromEventList+0xb4>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d903      	bls.n	800b364 <xTaskRemoveFromEventList+0x5c>
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b360:	4a16      	ldr	r2, [pc, #88]	; (800b3bc <xTaskRemoveFromEventList+0xb4>)
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b368:	4613      	mov	r3, r2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4a13      	ldr	r2, [pc, #76]	; (800b3c0 <xTaskRemoveFromEventList+0xb8>)
 800b372:	441a      	add	r2, r3
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	3304      	adds	r3, #4
 800b378:	4619      	mov	r1, r3
 800b37a:	4610      	mov	r0, r2
 800b37c:	f7fe fc4f 	bl	8009c1e <vListInsertEnd>
 800b380:	e005      	b.n	800b38e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	3318      	adds	r3, #24
 800b386:	4619      	mov	r1, r3
 800b388:	480e      	ldr	r0, [pc, #56]	; (800b3c4 <xTaskRemoveFromEventList+0xbc>)
 800b38a:	f7fe fc48 	bl	8009c1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b392:	4b0d      	ldr	r3, [pc, #52]	; (800b3c8 <xTaskRemoveFromEventList+0xc0>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b398:	429a      	cmp	r2, r3
 800b39a:	d905      	bls.n	800b3a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b39c:	2301      	movs	r3, #1
 800b39e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3a0:	4b0a      	ldr	r3, [pc, #40]	; (800b3cc <xTaskRemoveFromEventList+0xc4>)
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	e001      	b.n	800b3ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b3ac:	697b      	ldr	r3, [r7, #20]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	200059f0 	.word	0x200059f0
 800b3bc:	200059d0 	.word	0x200059d0
 800b3c0:	200054f8 	.word	0x200054f8
 800b3c4:	20005988 	.word	0x20005988
 800b3c8:	200054f4 	.word	0x200054f4
 800b3cc:	200059dc 	.word	0x200059dc

0800b3d0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10a      	bne.n	800b3f4 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	60fb      	str	r3, [r7, #12]
}
 800b3f0:	bf00      	nop
 800b3f2:	e7fe      	b.n	800b3f2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b3f4:	f000 ffc6 	bl	800c384 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3f8:	4b06      	ldr	r3, [pc, #24]	; (800b414 <vTaskSetTimeOutState+0x44>)
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b400:	4b05      	ldr	r3, [pc, #20]	; (800b418 <vTaskSetTimeOutState+0x48>)
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b408:	f000 ffec 	bl	800c3e4 <vPortExitCritical>
}
 800b40c:	bf00      	nop
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	200059e0 	.word	0x200059e0
 800b418:	200059cc 	.word	0x200059cc

0800b41c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b424:	4b06      	ldr	r3, [pc, #24]	; (800b440 <vTaskInternalSetTimeOutState+0x24>)
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b42c:	4b05      	ldr	r3, [pc, #20]	; (800b444 <vTaskInternalSetTimeOutState+0x28>)
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	605a      	str	r2, [r3, #4]
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	200059e0 	.word	0x200059e0
 800b444:	200059cc 	.word	0x200059cc

0800b448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b088      	sub	sp, #32
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10a      	bne.n	800b46e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	613b      	str	r3, [r7, #16]
}
 800b46a:	bf00      	nop
 800b46c:	e7fe      	b.n	800b46c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10a      	bne.n	800b48a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b478:	f383 8811 	msr	BASEPRI, r3
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	60fb      	str	r3, [r7, #12]
}
 800b486:	bf00      	nop
 800b488:	e7fe      	b.n	800b488 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b48a:	f000 ff7b 	bl	800c384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b48e:	4b1d      	ldr	r3, [pc, #116]	; (800b504 <xTaskCheckForTimeOut+0xbc>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	69ba      	ldr	r2, [r7, #24]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4a6:	d102      	bne.n	800b4ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	61fb      	str	r3, [r7, #28]
 800b4ac:	e023      	b.n	800b4f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	4b15      	ldr	r3, [pc, #84]	; (800b508 <xTaskCheckForTimeOut+0xc0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d007      	beq.n	800b4ca <xTaskCheckForTimeOut+0x82>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	69ba      	ldr	r2, [r7, #24]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d302      	bcc.n	800b4ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	61fb      	str	r3, [r7, #28]
 800b4c8:	e015      	b.n	800b4f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	697a      	ldr	r2, [r7, #20]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d20b      	bcs.n	800b4ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	1ad2      	subs	r2, r2, r3
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7ff ff9b 	bl	800b41c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	61fb      	str	r3, [r7, #28]
 800b4ea:	e004      	b.n	800b4f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4f6:	f000 ff75 	bl	800c3e4 <vPortExitCritical>

	return xReturn;
 800b4fa:	69fb      	ldr	r3, [r7, #28]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3720      	adds	r7, #32
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	200059cc 	.word	0x200059cc
 800b508:	200059e0 	.word	0x200059e0

0800b50c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b50c:	b480      	push	{r7}
 800b50e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b510:	4b03      	ldr	r3, [pc, #12]	; (800b520 <vTaskMissedYield+0x14>)
 800b512:	2201      	movs	r2, #1
 800b514:	601a      	str	r2, [r3, #0]
}
 800b516:	bf00      	nop
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr
 800b520:	200059dc 	.word	0x200059dc

0800b524 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b52c:	f000 f852 	bl	800b5d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b530:	4b06      	ldr	r3, [pc, #24]	; (800b54c <prvIdleTask+0x28>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d9f9      	bls.n	800b52c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b538:	4b05      	ldr	r3, [pc, #20]	; (800b550 <prvIdleTask+0x2c>)
 800b53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b53e:	601a      	str	r2, [r3, #0]
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b548:	e7f0      	b.n	800b52c <prvIdleTask+0x8>
 800b54a:	bf00      	nop
 800b54c:	200054f8 	.word	0x200054f8
 800b550:	e000ed04 	.word	0xe000ed04

0800b554 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b55a:	2300      	movs	r3, #0
 800b55c:	607b      	str	r3, [r7, #4]
 800b55e:	e00c      	b.n	800b57a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	4613      	mov	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4413      	add	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	4a12      	ldr	r2, [pc, #72]	; (800b5b4 <prvInitialiseTaskLists+0x60>)
 800b56c:	4413      	add	r3, r2
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fe fb28 	bl	8009bc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3301      	adds	r3, #1
 800b578:	607b      	str	r3, [r7, #4]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b37      	cmp	r3, #55	; 0x37
 800b57e:	d9ef      	bls.n	800b560 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b580:	480d      	ldr	r0, [pc, #52]	; (800b5b8 <prvInitialiseTaskLists+0x64>)
 800b582:	f7fe fb1f 	bl	8009bc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b586:	480d      	ldr	r0, [pc, #52]	; (800b5bc <prvInitialiseTaskLists+0x68>)
 800b588:	f7fe fb1c 	bl	8009bc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b58c:	480c      	ldr	r0, [pc, #48]	; (800b5c0 <prvInitialiseTaskLists+0x6c>)
 800b58e:	f7fe fb19 	bl	8009bc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b592:	480c      	ldr	r0, [pc, #48]	; (800b5c4 <prvInitialiseTaskLists+0x70>)
 800b594:	f7fe fb16 	bl	8009bc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b598:	480b      	ldr	r0, [pc, #44]	; (800b5c8 <prvInitialiseTaskLists+0x74>)
 800b59a:	f7fe fb13 	bl	8009bc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b59e:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <prvInitialiseTaskLists+0x78>)
 800b5a0:	4a05      	ldr	r2, [pc, #20]	; (800b5b8 <prvInitialiseTaskLists+0x64>)
 800b5a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b5a4:	4b0a      	ldr	r3, [pc, #40]	; (800b5d0 <prvInitialiseTaskLists+0x7c>)
 800b5a6:	4a05      	ldr	r2, [pc, #20]	; (800b5bc <prvInitialiseTaskLists+0x68>)
 800b5a8:	601a      	str	r2, [r3, #0]
}
 800b5aa:	bf00      	nop
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	200054f8 	.word	0x200054f8
 800b5b8:	20005958 	.word	0x20005958
 800b5bc:	2000596c 	.word	0x2000596c
 800b5c0:	20005988 	.word	0x20005988
 800b5c4:	2000599c 	.word	0x2000599c
 800b5c8:	200059b4 	.word	0x200059b4
 800b5cc:	20005980 	.word	0x20005980
 800b5d0:	20005984 	.word	0x20005984

0800b5d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5da:	e019      	b.n	800b610 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5dc:	f000 fed2 	bl	800c384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e0:	4b10      	ldr	r3, [pc, #64]	; (800b624 <prvCheckTasksWaitingTermination+0x50>)
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3304      	adds	r3, #4
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7fe fb73 	bl	8009cd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5f2:	4b0d      	ldr	r3, [pc, #52]	; (800b628 <prvCheckTasksWaitingTermination+0x54>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	4a0b      	ldr	r2, [pc, #44]	; (800b628 <prvCheckTasksWaitingTermination+0x54>)
 800b5fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5fc:	4b0b      	ldr	r3, [pc, #44]	; (800b62c <prvCheckTasksWaitingTermination+0x58>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	3b01      	subs	r3, #1
 800b602:	4a0a      	ldr	r2, [pc, #40]	; (800b62c <prvCheckTasksWaitingTermination+0x58>)
 800b604:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b606:	f000 feed 	bl	800c3e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f810 	bl	800b630 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b610:	4b06      	ldr	r3, [pc, #24]	; (800b62c <prvCheckTasksWaitingTermination+0x58>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d1e1      	bne.n	800b5dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b618:	bf00      	nop
 800b61a:	bf00      	nop
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	2000599c 	.word	0x2000599c
 800b628:	200059c8 	.word	0x200059c8
 800b62c:	200059b0 	.word	0x200059b0

0800b630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3354      	adds	r3, #84	; 0x54
 800b63c:	4618      	mov	r0, r3
 800b63e:	f00d f839 	bl	80186b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d108      	bne.n	800b65e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b650:	4618      	mov	r0, r3
 800b652:	f001 f885 	bl	800c760 <vPortFree>
				vPortFree( pxTCB );
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f001 f882 	bl	800c760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b65c:	e018      	b.n	800b690 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b664:	2b01      	cmp	r3, #1
 800b666:	d103      	bne.n	800b670 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f001 f879 	bl	800c760 <vPortFree>
	}
 800b66e:	e00f      	b.n	800b690 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b676:	2b02      	cmp	r3, #2
 800b678:	d00a      	beq.n	800b690 <prvDeleteTCB+0x60>
	__asm volatile
 800b67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67e:	f383 8811 	msr	BASEPRI, r3
 800b682:	f3bf 8f6f 	isb	sy
 800b686:	f3bf 8f4f 	dsb	sy
 800b68a:	60fb      	str	r3, [r7, #12]
}
 800b68c:	bf00      	nop
 800b68e:	e7fe      	b.n	800b68e <prvDeleteTCB+0x5e>
	}
 800b690:	bf00      	nop
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b69e:	4b0c      	ldr	r3, [pc, #48]	; (800b6d0 <prvResetNextTaskUnblockTime+0x38>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d104      	bne.n	800b6b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b6a8:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <prvResetNextTaskUnblockTime+0x3c>)
 800b6aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b6b0:	e008      	b.n	800b6c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6b2:	4b07      	ldr	r3, [pc, #28]	; (800b6d0 <prvResetNextTaskUnblockTime+0x38>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	4a04      	ldr	r2, [pc, #16]	; (800b6d4 <prvResetNextTaskUnblockTime+0x3c>)
 800b6c2:	6013      	str	r3, [r2, #0]
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	20005980 	.word	0x20005980
 800b6d4:	200059e8 	.word	0x200059e8

0800b6d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6de:	4b0b      	ldr	r3, [pc, #44]	; (800b70c <xTaskGetSchedulerState+0x34>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d102      	bne.n	800b6ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	607b      	str	r3, [r7, #4]
 800b6ea:	e008      	b.n	800b6fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ec:	4b08      	ldr	r3, [pc, #32]	; (800b710 <xTaskGetSchedulerState+0x38>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d102      	bne.n	800b6fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	607b      	str	r3, [r7, #4]
 800b6f8:	e001      	b.n	800b6fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6fe:	687b      	ldr	r3, [r7, #4]
	}
 800b700:	4618      	mov	r0, r3
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	200059d4 	.word	0x200059d4
 800b710:	200059f0 	.word	0x200059f0

0800b714 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b720:	2300      	movs	r3, #0
 800b722:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d051      	beq.n	800b7ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72e:	4b2a      	ldr	r3, [pc, #168]	; (800b7d8 <xTaskPriorityInherit+0xc4>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b734:	429a      	cmp	r2, r3
 800b736:	d241      	bcs.n	800b7bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	db06      	blt.n	800b74e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b740:	4b25      	ldr	r3, [pc, #148]	; (800b7d8 <xTaskPriorityInherit+0xc4>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b746:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	6959      	ldr	r1, [r3, #20]
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b756:	4613      	mov	r3, r2
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	4413      	add	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4a1f      	ldr	r2, [pc, #124]	; (800b7dc <xTaskPriorityInherit+0xc8>)
 800b760:	4413      	add	r3, r2
 800b762:	4299      	cmp	r1, r3
 800b764:	d122      	bne.n	800b7ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	3304      	adds	r3, #4
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fe fab4 	bl	8009cd8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b770:	4b19      	ldr	r3, [pc, #100]	; (800b7d8 <xTaskPriorityInherit+0xc4>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77e:	4b18      	ldr	r3, [pc, #96]	; (800b7e0 <xTaskPriorityInherit+0xcc>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	429a      	cmp	r2, r3
 800b784:	d903      	bls.n	800b78e <xTaskPriorityInherit+0x7a>
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78a:	4a15      	ldr	r2, [pc, #84]	; (800b7e0 <xTaskPriorityInherit+0xcc>)
 800b78c:	6013      	str	r3, [r2, #0]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b792:	4613      	mov	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4a10      	ldr	r2, [pc, #64]	; (800b7dc <xTaskPriorityInherit+0xc8>)
 800b79c:	441a      	add	r2, r3
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	f7fe fa3a 	bl	8009c1e <vListInsertEnd>
 800b7aa:	e004      	b.n	800b7b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7ac:	4b0a      	ldr	r3, [pc, #40]	; (800b7d8 <xTaskPriorityInherit+0xc4>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	60fb      	str	r3, [r7, #12]
 800b7ba:	e008      	b.n	800b7ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7c0:	4b05      	ldr	r3, [pc, #20]	; (800b7d8 <xTaskPriorityInherit+0xc4>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d201      	bcs.n	800b7ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
	}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	200054f4 	.word	0x200054f4
 800b7dc:	200054f8 	.word	0x200054f8
 800b7e0:	200059d0 	.word	0x200059d0

0800b7e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d056      	beq.n	800b8a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b7fa:	4b2e      	ldr	r3, [pc, #184]	; (800b8b4 <xTaskPriorityDisinherit+0xd0>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	693a      	ldr	r2, [r7, #16]
 800b800:	429a      	cmp	r2, r3
 800b802:	d00a      	beq.n	800b81a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	60fb      	str	r3, [r7, #12]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	60bb      	str	r3, [r7, #8]
}
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b83c:	1e5a      	subs	r2, r3, #1
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d02c      	beq.n	800b8a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b852:	2b00      	cmp	r3, #0
 800b854:	d128      	bne.n	800b8a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	3304      	adds	r3, #4
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fe fa3c 	bl	8009cd8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b878:	4b0f      	ldr	r3, [pc, #60]	; (800b8b8 <xTaskPriorityDisinherit+0xd4>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d903      	bls.n	800b888 <xTaskPriorityDisinherit+0xa4>
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b884:	4a0c      	ldr	r2, [pc, #48]	; (800b8b8 <xTaskPriorityDisinherit+0xd4>)
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88c:	4613      	mov	r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	4413      	add	r3, r2
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	4a09      	ldr	r2, [pc, #36]	; (800b8bc <xTaskPriorityDisinherit+0xd8>)
 800b896:	441a      	add	r2, r3
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	3304      	adds	r3, #4
 800b89c:	4619      	mov	r1, r3
 800b89e:	4610      	mov	r0, r2
 800b8a0:	f7fe f9bd 	bl	8009c1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8a8:	697b      	ldr	r3, [r7, #20]
	}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3718      	adds	r7, #24
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	200054f4 	.word	0x200054f4
 800b8b8:	200059d0 	.word	0x200059d0
 800b8bc:	200054f8 	.word	0x200054f8

0800b8c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b088      	sub	sp, #32
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d06a      	beq.n	800b9ae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10a      	bne.n	800b8f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	60fb      	str	r3, [r7, #12]
}
 800b8f2:	bf00      	nop
 800b8f4:	e7fe      	b.n	800b8f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d902      	bls.n	800b906 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	61fb      	str	r3, [r7, #28]
 800b904:	e002      	b.n	800b90c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b90a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b910:	69fa      	ldr	r2, [r7, #28]
 800b912:	429a      	cmp	r2, r3
 800b914:	d04b      	beq.n	800b9ae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d146      	bne.n	800b9ae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b920:	4b25      	ldr	r3, [pc, #148]	; (800b9b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	69ba      	ldr	r2, [r7, #24]
 800b926:	429a      	cmp	r2, r3
 800b928:	d10a      	bne.n	800b940 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	60bb      	str	r3, [r7, #8]
}
 800b93c:	bf00      	nop
 800b93e:	e7fe      	b.n	800b93e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b944:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	69fa      	ldr	r2, [r7, #28]
 800b94a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	2b00      	cmp	r3, #0
 800b952:	db04      	blt.n	800b95e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	6959      	ldr	r1, [r3, #20]
 800b962:	693a      	ldr	r2, [r7, #16]
 800b964:	4613      	mov	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4413      	add	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	4a13      	ldr	r2, [pc, #76]	; (800b9bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b96e:	4413      	add	r3, r2
 800b970:	4299      	cmp	r1, r3
 800b972:	d11c      	bne.n	800b9ae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	3304      	adds	r3, #4
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fe f9ad 	bl	8009cd8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b982:	4b0f      	ldr	r3, [pc, #60]	; (800b9c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d903      	bls.n	800b992 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98e:	4a0c      	ldr	r2, [pc, #48]	; (800b9c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b990:	6013      	str	r3, [r2, #0]
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b996:	4613      	mov	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4a07      	ldr	r2, [pc, #28]	; (800b9bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b9a0:	441a      	add	r2, r3
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	4610      	mov	r0, r2
 800b9aa:	f7fe f938 	bl	8009c1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9ae:	bf00      	nop
 800b9b0:	3720      	adds	r7, #32
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	200054f4 	.word	0x200054f4
 800b9bc:	200054f8 	.word	0x200054f8
 800b9c0:	200059d0 	.word	0x200059d0

0800b9c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b9c4:	b480      	push	{r7}
 800b9c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b9c8:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d004      	beq.n	800b9da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b9d0:	4b05      	ldr	r3, [pc, #20]	; (800b9e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9d6:	3201      	adds	r2, #1
 800b9d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b9da:	4b03      	ldr	r3, [pc, #12]	; (800b9e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
	}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	200054f4 	.word	0x200054f4

0800b9ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b9f6:	4b21      	ldr	r3, [pc, #132]	; (800ba7c <prvAddCurrentTaskToDelayedList+0x90>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9fc:	4b20      	ldr	r3, [pc, #128]	; (800ba80 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3304      	adds	r3, #4
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fe f968 	bl	8009cd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba0e:	d10a      	bne.n	800ba26 <prvAddCurrentTaskToDelayedList+0x3a>
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d007      	beq.n	800ba26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba16:	4b1a      	ldr	r3, [pc, #104]	; (800ba80 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	4819      	ldr	r0, [pc, #100]	; (800ba84 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba20:	f7fe f8fd 	bl	8009c1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba24:	e026      	b.n	800ba74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba2e:	4b14      	ldr	r3, [pc, #80]	; (800ba80 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d209      	bcs.n	800ba52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba3e:	4b12      	ldr	r3, [pc, #72]	; (800ba88 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	4b0f      	ldr	r3, [pc, #60]	; (800ba80 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3304      	adds	r3, #4
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	f7fe f90b 	bl	8009c66 <vListInsert>
}
 800ba50:	e010      	b.n	800ba74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba52:	4b0e      	ldr	r3, [pc, #56]	; (800ba8c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	4b0a      	ldr	r3, [pc, #40]	; (800ba80 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4610      	mov	r0, r2
 800ba60:	f7fe f901 	bl	8009c66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba64:	4b0a      	ldr	r3, [pc, #40]	; (800ba90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d202      	bcs.n	800ba74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ba6e:	4a08      	ldr	r2, [pc, #32]	; (800ba90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	6013      	str	r3, [r2, #0]
}
 800ba74:	bf00      	nop
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	200059cc 	.word	0x200059cc
 800ba80:	200054f4 	.word	0x200054f4
 800ba84:	200059b4 	.word	0x200059b4
 800ba88:	20005984 	.word	0x20005984
 800ba8c:	20005980 	.word	0x20005980
 800ba90:	200059e8 	.word	0x200059e8

0800ba94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b08a      	sub	sp, #40	; 0x28
 800ba98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba9e:	f000 fb07 	bl	800c0b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800baa2:	4b1c      	ldr	r3, [pc, #112]	; (800bb14 <xTimerCreateTimerTask+0x80>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d021      	beq.n	800baee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bab2:	1d3a      	adds	r2, r7, #4
 800bab4:	f107 0108 	add.w	r1, r7, #8
 800bab8:	f107 030c 	add.w	r3, r7, #12
 800babc:	4618      	mov	r0, r3
 800babe:	f7fe f867 	bl	8009b90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bac2:	6879      	ldr	r1, [r7, #4]
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	9202      	str	r2, [sp, #8]
 800baca:	9301      	str	r3, [sp, #4]
 800bacc:	2302      	movs	r3, #2
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	2300      	movs	r3, #0
 800bad2:	460a      	mov	r2, r1
 800bad4:	4910      	ldr	r1, [pc, #64]	; (800bb18 <xTimerCreateTimerTask+0x84>)
 800bad6:	4811      	ldr	r0, [pc, #68]	; (800bb1c <xTimerCreateTimerTask+0x88>)
 800bad8:	f7fe ff90 	bl	800a9fc <xTaskCreateStatic>
 800badc:	4603      	mov	r3, r0
 800bade:	4a10      	ldr	r2, [pc, #64]	; (800bb20 <xTimerCreateTimerTask+0x8c>)
 800bae0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bae2:	4b0f      	ldr	r3, [pc, #60]	; (800bb20 <xTimerCreateTimerTask+0x8c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800baea:	2301      	movs	r3, #1
 800baec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10a      	bne.n	800bb0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800baf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	613b      	str	r3, [r7, #16]
}
 800bb06:	bf00      	nop
 800bb08:	e7fe      	b.n	800bb08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb0a:	697b      	ldr	r3, [r7, #20]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3718      	adds	r7, #24
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	20005a24 	.word	0x20005a24
 800bb18:	08019864 	.word	0x08019864
 800bb1c:	0800bc59 	.word	0x0800bc59
 800bb20:	20005a28 	.word	0x20005a28

0800bb24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b08a      	sub	sp, #40	; 0x28
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
 800bb30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10a      	bne.n	800bb52 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb40:	f383 8811 	msr	BASEPRI, r3
 800bb44:	f3bf 8f6f 	isb	sy
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	623b      	str	r3, [r7, #32]
}
 800bb4e:	bf00      	nop
 800bb50:	e7fe      	b.n	800bb50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb52:	4b1a      	ldr	r3, [pc, #104]	; (800bbbc <xTimerGenericCommand+0x98>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d02a      	beq.n	800bbb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	2b05      	cmp	r3, #5
 800bb6a:	dc18      	bgt.n	800bb9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb6c:	f7ff fdb4 	bl	800b6d8 <xTaskGetSchedulerState>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d109      	bne.n	800bb8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb76:	4b11      	ldr	r3, [pc, #68]	; (800bbbc <xTimerGenericCommand+0x98>)
 800bb78:	6818      	ldr	r0, [r3, #0]
 800bb7a:	f107 0110 	add.w	r1, r7, #16
 800bb7e:	2300      	movs	r3, #0
 800bb80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb82:	f7fe fa11 	bl	8009fa8 <xQueueGenericSend>
 800bb86:	6278      	str	r0, [r7, #36]	; 0x24
 800bb88:	e012      	b.n	800bbb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb8a:	4b0c      	ldr	r3, [pc, #48]	; (800bbbc <xTimerGenericCommand+0x98>)
 800bb8c:	6818      	ldr	r0, [r3, #0]
 800bb8e:	f107 0110 	add.w	r1, r7, #16
 800bb92:	2300      	movs	r3, #0
 800bb94:	2200      	movs	r2, #0
 800bb96:	f7fe fa07 	bl	8009fa8 <xQueueGenericSend>
 800bb9a:	6278      	str	r0, [r7, #36]	; 0x24
 800bb9c:	e008      	b.n	800bbb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb9e:	4b07      	ldr	r3, [pc, #28]	; (800bbbc <xTimerGenericCommand+0x98>)
 800bba0:	6818      	ldr	r0, [r3, #0]
 800bba2:	f107 0110 	add.w	r1, r7, #16
 800bba6:	2300      	movs	r3, #0
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	f7fe fafb 	bl	800a1a4 <xQueueGenericSendFromISR>
 800bbae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3728      	adds	r7, #40	; 0x28
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20005a24 	.word	0x20005a24

0800bbc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b088      	sub	sp, #32
 800bbc4:	af02      	add	r7, sp, #8
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbca:	4b22      	ldr	r3, [pc, #136]	; (800bc54 <prvProcessExpiredTimer+0x94>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fe f87d 	bl	8009cd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbe4:	f003 0304 	and.w	r3, r3, #4
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d022      	beq.n	800bc32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	699a      	ldr	r2, [r3, #24]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	18d1      	adds	r1, r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	6978      	ldr	r0, [r7, #20]
 800bbfa:	f000 f8d1 	bl	800bda0 <prvInsertTimerInActiveList>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d01f      	beq.n	800bc44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc04:	2300      	movs	r3, #0
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	6978      	ldr	r0, [r7, #20]
 800bc10:	f7ff ff88 	bl	800bb24 <xTimerGenericCommand>
 800bc14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d113      	bne.n	800bc44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	60fb      	str	r3, [r7, #12]
}
 800bc2e:	bf00      	nop
 800bc30:	e7fe      	b.n	800bc30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc38:	f023 0301 	bic.w	r3, r3, #1
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	6a1b      	ldr	r3, [r3, #32]
 800bc48:	6978      	ldr	r0, [r7, #20]
 800bc4a:	4798      	blx	r3
}
 800bc4c:	bf00      	nop
 800bc4e:	3718      	adds	r7, #24
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	20005a1c 	.word	0x20005a1c

0800bc58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc60:	f107 0308 	add.w	r3, r7, #8
 800bc64:	4618      	mov	r0, r3
 800bc66:	f000 f857 	bl	800bd18 <prvGetNextExpireTime>
 800bc6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	4619      	mov	r1, r3
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f000 f803 	bl	800bc7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc76:	f000 f8d5 	bl	800be24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc7a:	e7f1      	b.n	800bc60 <prvTimerTask+0x8>

0800bc7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc86:	f7ff f915 	bl	800aeb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc8a:	f107 0308 	add.w	r3, r7, #8
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 f866 	bl	800bd60 <prvSampleTimeNow>
 800bc94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d130      	bne.n	800bcfe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10a      	bne.n	800bcb8 <prvProcessTimerOrBlockTask+0x3c>
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d806      	bhi.n	800bcb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bcaa:	f7ff f911 	bl	800aed0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bcae:	68f9      	ldr	r1, [r7, #12]
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff ff85 	bl	800bbc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bcb6:	e024      	b.n	800bd02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d008      	beq.n	800bcd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bcbe:	4b13      	ldr	r3, [pc, #76]	; (800bd0c <prvProcessTimerOrBlockTask+0x90>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <prvProcessTimerOrBlockTask+0x50>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e000      	b.n	800bcce <prvProcessTimerOrBlockTask+0x52>
 800bccc:	2300      	movs	r3, #0
 800bcce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bcd0:	4b0f      	ldr	r3, [pc, #60]	; (800bd10 <prvProcessTimerOrBlockTask+0x94>)
 800bcd2:	6818      	ldr	r0, [r3, #0]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	1ad3      	subs	r3, r2, r3
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	f7fe fe59 	bl	800a994 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bce2:	f7ff f8f5 	bl	800aed0 <xTaskResumeAll>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10a      	bne.n	800bd02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bcec:	4b09      	ldr	r3, [pc, #36]	; (800bd14 <prvProcessTimerOrBlockTask+0x98>)
 800bcee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	f3bf 8f6f 	isb	sy
}
 800bcfc:	e001      	b.n	800bd02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bcfe:	f7ff f8e7 	bl	800aed0 <xTaskResumeAll>
}
 800bd02:	bf00      	nop
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	20005a20 	.word	0x20005a20
 800bd10:	20005a24 	.word	0x20005a24
 800bd14:	e000ed04 	.word	0xe000ed04

0800bd18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd20:	4b0e      	ldr	r3, [pc, #56]	; (800bd5c <prvGetNextExpireTime+0x44>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d101      	bne.n	800bd2e <prvGetNextExpireTime+0x16>
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	e000      	b.n	800bd30 <prvGetNextExpireTime+0x18>
 800bd2e:	2200      	movs	r2, #0
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d105      	bne.n	800bd48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd3c:	4b07      	ldr	r3, [pc, #28]	; (800bd5c <prvGetNextExpireTime+0x44>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	60fb      	str	r3, [r7, #12]
 800bd46:	e001      	b.n	800bd4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3714      	adds	r7, #20
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	20005a1c 	.word	0x20005a1c

0800bd60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd68:	f7ff f950 	bl	800b00c <xTaskGetTickCount>
 800bd6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd6e:	4b0b      	ldr	r3, [pc, #44]	; (800bd9c <prvSampleTimeNow+0x3c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d205      	bcs.n	800bd84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd78:	f000 f936 	bl	800bfe8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	601a      	str	r2, [r3, #0]
 800bd82:	e002      	b.n	800bd8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd8a:	4a04      	ldr	r2, [pc, #16]	; (800bd9c <prvSampleTimeNow+0x3c>)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd90:	68fb      	ldr	r3, [r7, #12]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20005a2c 	.word	0x20005a2c

0800bda0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
 800bdac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bdbe:	68ba      	ldr	r2, [r7, #8]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d812      	bhi.n	800bdec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	1ad2      	subs	r2, r2, r3
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	699b      	ldr	r3, [r3, #24]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d302      	bcc.n	800bdda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	617b      	str	r3, [r7, #20]
 800bdd8:	e01b      	b.n	800be12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bdda:	4b10      	ldr	r3, [pc, #64]	; (800be1c <prvInsertTimerInActiveList+0x7c>)
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3304      	adds	r3, #4
 800bde2:	4619      	mov	r1, r3
 800bde4:	4610      	mov	r0, r2
 800bde6:	f7fd ff3e 	bl	8009c66 <vListInsert>
 800bdea:	e012      	b.n	800be12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d206      	bcs.n	800be02 <prvInsertTimerInActiveList+0x62>
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d302      	bcc.n	800be02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	617b      	str	r3, [r7, #20]
 800be00:	e007      	b.n	800be12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be02:	4b07      	ldr	r3, [pc, #28]	; (800be20 <prvInsertTimerInActiveList+0x80>)
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3304      	adds	r3, #4
 800be0a:	4619      	mov	r1, r3
 800be0c:	4610      	mov	r0, r2
 800be0e:	f7fd ff2a 	bl	8009c66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be12:	697b      	ldr	r3, [r7, #20]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3718      	adds	r7, #24
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	20005a20 	.word	0x20005a20
 800be20:	20005a1c 	.word	0x20005a1c

0800be24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08e      	sub	sp, #56	; 0x38
 800be28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be2a:	e0ca      	b.n	800bfc2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	da18      	bge.n	800be64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be32:	1d3b      	adds	r3, r7, #4
 800be34:	3304      	adds	r3, #4
 800be36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d10a      	bne.n	800be54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	61fb      	str	r3, [r7, #28]
}
 800be50:	bf00      	nop
 800be52:	e7fe      	b.n	800be52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be5a:	6850      	ldr	r0, [r2, #4]
 800be5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be5e:	6892      	ldr	r2, [r2, #8]
 800be60:	4611      	mov	r1, r2
 800be62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	f2c0 80ab 	blt.w	800bfc2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be72:	695b      	ldr	r3, [r3, #20]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d004      	beq.n	800be82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	3304      	adds	r3, #4
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7fd ff2b 	bl	8009cd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be82:	463b      	mov	r3, r7
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff ff6b 	bl	800bd60 <prvSampleTimeNow>
 800be8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b09      	cmp	r3, #9
 800be90:	f200 8096 	bhi.w	800bfc0 <prvProcessReceivedCommands+0x19c>
 800be94:	a201      	add	r2, pc, #4	; (adr r2, 800be9c <prvProcessReceivedCommands+0x78>)
 800be96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9a:	bf00      	nop
 800be9c:	0800bec5 	.word	0x0800bec5
 800bea0:	0800bec5 	.word	0x0800bec5
 800bea4:	0800bec5 	.word	0x0800bec5
 800bea8:	0800bf39 	.word	0x0800bf39
 800beac:	0800bf4d 	.word	0x0800bf4d
 800beb0:	0800bf97 	.word	0x0800bf97
 800beb4:	0800bec5 	.word	0x0800bec5
 800beb8:	0800bec5 	.word	0x0800bec5
 800bebc:	0800bf39 	.word	0x0800bf39
 800bec0:	0800bf4d 	.word	0x0800bf4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beca:	f043 0301 	orr.w	r3, r3, #1
 800bece:	b2da      	uxtb	r2, r3
 800bed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bed6:	68ba      	ldr	r2, [r7, #8]
 800bed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	18d1      	adds	r1, r2, r3
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bee4:	f7ff ff5c 	bl	800bda0 <prvInsertTimerInActiveList>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d069      	beq.n	800bfc2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800beee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef0:	6a1b      	ldr	r3, [r3, #32]
 800bef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800befc:	f003 0304 	and.w	r3, r3, #4
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d05e      	beq.n	800bfc2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	441a      	add	r2, r3
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	2300      	movs	r3, #0
 800bf12:	2100      	movs	r1, #0
 800bf14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf16:	f7ff fe05 	bl	800bb24 <xTimerGenericCommand>
 800bf1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf1c:	6a3b      	ldr	r3, [r7, #32]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d14f      	bne.n	800bfc2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	61bb      	str	r3, [r7, #24]
}
 800bf34:	bf00      	nop
 800bf36:	e7fe      	b.n	800bf36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf3e:	f023 0301 	bic.w	r3, r3, #1
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bf4a:	e03a      	b.n	800bfc2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf52:	f043 0301 	orr.w	r3, r3, #1
 800bf56:	b2da      	uxtb	r2, r3
 800bf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bf5e:	68ba      	ldr	r2, [r7, #8]
 800bf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf66:	699b      	ldr	r3, [r3, #24]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10a      	bne.n	800bf82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf70:	f383 8811 	msr	BASEPRI, r3
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	f3bf 8f4f 	dsb	sy
 800bf7c:	617b      	str	r3, [r7, #20]
}
 800bf7e:	bf00      	nop
 800bf80:	e7fe      	b.n	800bf80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf84:	699a      	ldr	r2, [r3, #24]
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	18d1      	adds	r1, r2, r3
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf90:	f7ff ff06 	bl	800bda0 <prvInsertTimerInActiveList>
					break;
 800bf94:	e015      	b.n	800bfc2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d103      	bne.n	800bfac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bfa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfa6:	f000 fbdb 	bl	800c760 <vPortFree>
 800bfaa:	e00a      	b.n	800bfc2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfb2:	f023 0301 	bic.w	r3, r3, #1
 800bfb6:	b2da      	uxtb	r2, r3
 800bfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bfbe:	e000      	b.n	800bfc2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bfc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfc2:	4b08      	ldr	r3, [pc, #32]	; (800bfe4 <prvProcessReceivedCommands+0x1c0>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	1d39      	adds	r1, r7, #4
 800bfc8:	2200      	movs	r2, #0
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe f986 	bl	800a2dc <xQueueReceive>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f47f af2a 	bne.w	800be2c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bfd8:	bf00      	nop
 800bfda:	bf00      	nop
 800bfdc:	3730      	adds	r7, #48	; 0x30
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	20005a24 	.word	0x20005a24

0800bfe8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b088      	sub	sp, #32
 800bfec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfee:	e048      	b.n	800c082 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bff0:	4b2d      	ldr	r3, [pc, #180]	; (800c0a8 <prvSwitchTimerLists+0xc0>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bffa:	4b2b      	ldr	r3, [pc, #172]	; (800c0a8 <prvSwitchTimerLists+0xc0>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	3304      	adds	r3, #4
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fd fe65 	bl	8009cd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c01c:	f003 0304 	and.w	r3, r3, #4
 800c020:	2b00      	cmp	r3, #0
 800c022:	d02e      	beq.n	800c082 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	699b      	ldr	r3, [r3, #24]
 800c028:	693a      	ldr	r2, [r7, #16]
 800c02a:	4413      	add	r3, r2
 800c02c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c02e:	68ba      	ldr	r2, [r7, #8]
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	429a      	cmp	r2, r3
 800c034:	d90e      	bls.n	800c054 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c042:	4b19      	ldr	r3, [pc, #100]	; (800c0a8 <prvSwitchTimerLists+0xc0>)
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	3304      	adds	r3, #4
 800c04a:	4619      	mov	r1, r3
 800c04c:	4610      	mov	r0, r2
 800c04e:	f7fd fe0a 	bl	8009c66 <vListInsert>
 800c052:	e016      	b.n	800c082 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c054:	2300      	movs	r3, #0
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	2300      	movs	r3, #0
 800c05a:	693a      	ldr	r2, [r7, #16]
 800c05c:	2100      	movs	r1, #0
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f7ff fd60 	bl	800bb24 <xTimerGenericCommand>
 800c064:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10a      	bne.n	800c082 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c070:	f383 8811 	msr	BASEPRI, r3
 800c074:	f3bf 8f6f 	isb	sy
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	603b      	str	r3, [r7, #0]
}
 800c07e:	bf00      	nop
 800c080:	e7fe      	b.n	800c080 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c082:	4b09      	ldr	r3, [pc, #36]	; (800c0a8 <prvSwitchTimerLists+0xc0>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d1b1      	bne.n	800bff0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c08c:	4b06      	ldr	r3, [pc, #24]	; (800c0a8 <prvSwitchTimerLists+0xc0>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c092:	4b06      	ldr	r3, [pc, #24]	; (800c0ac <prvSwitchTimerLists+0xc4>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a04      	ldr	r2, [pc, #16]	; (800c0a8 <prvSwitchTimerLists+0xc0>)
 800c098:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c09a:	4a04      	ldr	r2, [pc, #16]	; (800c0ac <prvSwitchTimerLists+0xc4>)
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	6013      	str	r3, [r2, #0]
}
 800c0a0:	bf00      	nop
 800c0a2:	3718      	adds	r7, #24
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	20005a1c 	.word	0x20005a1c
 800c0ac:	20005a20 	.word	0x20005a20

0800c0b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c0b6:	f000 f965 	bl	800c384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c0ba:	4b15      	ldr	r3, [pc, #84]	; (800c110 <prvCheckForValidListAndQueue+0x60>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d120      	bne.n	800c104 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c0c2:	4814      	ldr	r0, [pc, #80]	; (800c114 <prvCheckForValidListAndQueue+0x64>)
 800c0c4:	f7fd fd7e 	bl	8009bc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c0c8:	4813      	ldr	r0, [pc, #76]	; (800c118 <prvCheckForValidListAndQueue+0x68>)
 800c0ca:	f7fd fd7b 	bl	8009bc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c0ce:	4b13      	ldr	r3, [pc, #76]	; (800c11c <prvCheckForValidListAndQueue+0x6c>)
 800c0d0:	4a10      	ldr	r2, [pc, #64]	; (800c114 <prvCheckForValidListAndQueue+0x64>)
 800c0d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c0d4:	4b12      	ldr	r3, [pc, #72]	; (800c120 <prvCheckForValidListAndQueue+0x70>)
 800c0d6:	4a10      	ldr	r2, [pc, #64]	; (800c118 <prvCheckForValidListAndQueue+0x68>)
 800c0d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c0da:	2300      	movs	r3, #0
 800c0dc:	9300      	str	r3, [sp, #0]
 800c0de:	4b11      	ldr	r3, [pc, #68]	; (800c124 <prvCheckForValidListAndQueue+0x74>)
 800c0e0:	4a11      	ldr	r2, [pc, #68]	; (800c128 <prvCheckForValidListAndQueue+0x78>)
 800c0e2:	2110      	movs	r1, #16
 800c0e4:	200a      	movs	r0, #10
 800c0e6:	f7fd fe89 	bl	8009dfc <xQueueGenericCreateStatic>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	4a08      	ldr	r2, [pc, #32]	; (800c110 <prvCheckForValidListAndQueue+0x60>)
 800c0ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c0f0:	4b07      	ldr	r3, [pc, #28]	; (800c110 <prvCheckForValidListAndQueue+0x60>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d005      	beq.n	800c104 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c0f8:	4b05      	ldr	r3, [pc, #20]	; (800c110 <prvCheckForValidListAndQueue+0x60>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	490b      	ldr	r1, [pc, #44]	; (800c12c <prvCheckForValidListAndQueue+0x7c>)
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fe fc1e 	bl	800a940 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c104:	f000 f96e 	bl	800c3e4 <vPortExitCritical>
}
 800c108:	bf00      	nop
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20005a24 	.word	0x20005a24
 800c114:	200059f4 	.word	0x200059f4
 800c118:	20005a08 	.word	0x20005a08
 800c11c:	20005a1c 	.word	0x20005a1c
 800c120:	20005a20 	.word	0x20005a20
 800c124:	20005ad0 	.word	0x20005ad0
 800c128:	20005a30 	.word	0x20005a30
 800c12c:	0801986c 	.word	0x0801986c

0800c130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	3b04      	subs	r3, #4
 800c140:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	3b04      	subs	r3, #4
 800c14e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	f023 0201 	bic.w	r2, r3, #1
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	3b04      	subs	r3, #4
 800c15e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c160:	4a0c      	ldr	r2, [pc, #48]	; (800c194 <pxPortInitialiseStack+0x64>)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	3b14      	subs	r3, #20
 800c16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3b04      	subs	r3, #4
 800c176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f06f 0202 	mvn.w	r2, #2
 800c17e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	3b20      	subs	r3, #32
 800c184:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c186:	68fb      	ldr	r3, [r7, #12]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3714      	adds	r7, #20
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr
 800c194:	0800c199 	.word	0x0800c199

0800c198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1a2:	4b12      	ldr	r3, [pc, #72]	; (800c1ec <prvTaskExitError+0x54>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1aa:	d00a      	beq.n	800c1c2 <prvTaskExitError+0x2a>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	60fb      	str	r3, [r7, #12]
}
 800c1be:	bf00      	nop
 800c1c0:	e7fe      	b.n	800c1c0 <prvTaskExitError+0x28>
	__asm volatile
 800c1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	60bb      	str	r3, [r7, #8]
}
 800c1d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1d6:	bf00      	nop
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d0fc      	beq.n	800c1d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c1de:	bf00      	nop
 800c1e0:	bf00      	nop
 800c1e2:	3714      	adds	r7, #20
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr
 800c1ec:	20000018 	.word	0x20000018

0800c1f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c1f0:	4b07      	ldr	r3, [pc, #28]	; (800c210 <pxCurrentTCBConst2>)
 800c1f2:	6819      	ldr	r1, [r3, #0]
 800c1f4:	6808      	ldr	r0, [r1, #0]
 800c1f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1fa:	f380 8809 	msr	PSP, r0
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f04f 0000 	mov.w	r0, #0
 800c206:	f380 8811 	msr	BASEPRI, r0
 800c20a:	4770      	bx	lr
 800c20c:	f3af 8000 	nop.w

0800c210 <pxCurrentTCBConst2>:
 800c210:	200054f4 	.word	0x200054f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c214:	bf00      	nop
 800c216:	bf00      	nop

0800c218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c218:	4808      	ldr	r0, [pc, #32]	; (800c23c <prvPortStartFirstTask+0x24>)
 800c21a:	6800      	ldr	r0, [r0, #0]
 800c21c:	6800      	ldr	r0, [r0, #0]
 800c21e:	f380 8808 	msr	MSP, r0
 800c222:	f04f 0000 	mov.w	r0, #0
 800c226:	f380 8814 	msr	CONTROL, r0
 800c22a:	b662      	cpsie	i
 800c22c:	b661      	cpsie	f
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	df00      	svc	0
 800c238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c23a:	bf00      	nop
 800c23c:	e000ed08 	.word	0xe000ed08

0800c240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c246:	4b46      	ldr	r3, [pc, #280]	; (800c360 <xPortStartScheduler+0x120>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a46      	ldr	r2, [pc, #280]	; (800c364 <xPortStartScheduler+0x124>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d10a      	bne.n	800c266 <xPortStartScheduler+0x26>
	__asm volatile
 800c250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	613b      	str	r3, [r7, #16]
}
 800c262:	bf00      	nop
 800c264:	e7fe      	b.n	800c264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c266:	4b3e      	ldr	r3, [pc, #248]	; (800c360 <xPortStartScheduler+0x120>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a3f      	ldr	r2, [pc, #252]	; (800c368 <xPortStartScheduler+0x128>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d10a      	bne.n	800c286 <xPortStartScheduler+0x46>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	60fb      	str	r3, [r7, #12]
}
 800c282:	bf00      	nop
 800c284:	e7fe      	b.n	800c284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c286:	4b39      	ldr	r3, [pc, #228]	; (800c36c <xPortStartScheduler+0x12c>)
 800c288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	781b      	ldrb	r3, [r3, #0]
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	22ff      	movs	r2, #255	; 0xff
 800c296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2a0:	78fb      	ldrb	r3, [r7, #3]
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c2a8:	b2da      	uxtb	r2, r3
 800c2aa:	4b31      	ldr	r3, [pc, #196]	; (800c370 <xPortStartScheduler+0x130>)
 800c2ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2ae:	4b31      	ldr	r3, [pc, #196]	; (800c374 <xPortStartScheduler+0x134>)
 800c2b0:	2207      	movs	r2, #7
 800c2b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2b4:	e009      	b.n	800c2ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c2b6:	4b2f      	ldr	r3, [pc, #188]	; (800c374 <xPortStartScheduler+0x134>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	4a2d      	ldr	r2, [pc, #180]	; (800c374 <xPortStartScheduler+0x134>)
 800c2be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2c0:	78fb      	ldrb	r3, [r7, #3]
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	005b      	lsls	r3, r3, #1
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2ca:	78fb      	ldrb	r3, [r7, #3]
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2d2:	2b80      	cmp	r3, #128	; 0x80
 800c2d4:	d0ef      	beq.n	800c2b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c2d6:	4b27      	ldr	r3, [pc, #156]	; (800c374 <xPortStartScheduler+0x134>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f1c3 0307 	rsb	r3, r3, #7
 800c2de:	2b04      	cmp	r3, #4
 800c2e0:	d00a      	beq.n	800c2f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e6:	f383 8811 	msr	BASEPRI, r3
 800c2ea:	f3bf 8f6f 	isb	sy
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	60bb      	str	r3, [r7, #8]
}
 800c2f4:	bf00      	nop
 800c2f6:	e7fe      	b.n	800c2f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c2f8:	4b1e      	ldr	r3, [pc, #120]	; (800c374 <xPortStartScheduler+0x134>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	021b      	lsls	r3, r3, #8
 800c2fe:	4a1d      	ldr	r2, [pc, #116]	; (800c374 <xPortStartScheduler+0x134>)
 800c300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c302:	4b1c      	ldr	r3, [pc, #112]	; (800c374 <xPortStartScheduler+0x134>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c30a:	4a1a      	ldr	r2, [pc, #104]	; (800c374 <xPortStartScheduler+0x134>)
 800c30c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	b2da      	uxtb	r2, r3
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c316:	4b18      	ldr	r3, [pc, #96]	; (800c378 <xPortStartScheduler+0x138>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a17      	ldr	r2, [pc, #92]	; (800c378 <xPortStartScheduler+0x138>)
 800c31c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c322:	4b15      	ldr	r3, [pc, #84]	; (800c378 <xPortStartScheduler+0x138>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a14      	ldr	r2, [pc, #80]	; (800c378 <xPortStartScheduler+0x138>)
 800c328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c32c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c32e:	f000 f8dd 	bl	800c4ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c332:	4b12      	ldr	r3, [pc, #72]	; (800c37c <xPortStartScheduler+0x13c>)
 800c334:	2200      	movs	r2, #0
 800c336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c338:	f000 f8fc 	bl	800c534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c33c:	4b10      	ldr	r3, [pc, #64]	; (800c380 <xPortStartScheduler+0x140>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a0f      	ldr	r2, [pc, #60]	; (800c380 <xPortStartScheduler+0x140>)
 800c342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c348:	f7ff ff66 	bl	800c218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c34c:	f7fe ff28 	bl	800b1a0 <vTaskSwitchContext>
	prvTaskExitError();
 800c350:	f7ff ff22 	bl	800c198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3718      	adds	r7, #24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	e000ed00 	.word	0xe000ed00
 800c364:	410fc271 	.word	0x410fc271
 800c368:	410fc270 	.word	0x410fc270
 800c36c:	e000e400 	.word	0xe000e400
 800c370:	20005b20 	.word	0x20005b20
 800c374:	20005b24 	.word	0x20005b24
 800c378:	e000ed20 	.word	0xe000ed20
 800c37c:	20000018 	.word	0x20000018
 800c380:	e000ef34 	.word	0xe000ef34

0800c384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
	__asm volatile
 800c38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	607b      	str	r3, [r7, #4]
}
 800c39c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c39e:	4b0f      	ldr	r3, [pc, #60]	; (800c3dc <vPortEnterCritical+0x58>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	4a0d      	ldr	r2, [pc, #52]	; (800c3dc <vPortEnterCritical+0x58>)
 800c3a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3a8:	4b0c      	ldr	r3, [pc, #48]	; (800c3dc <vPortEnterCritical+0x58>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d10f      	bne.n	800c3d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3b0:	4b0b      	ldr	r3, [pc, #44]	; (800c3e0 <vPortEnterCritical+0x5c>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00a      	beq.n	800c3d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	603b      	str	r3, [r7, #0]
}
 800c3cc:	bf00      	nop
 800c3ce:	e7fe      	b.n	800c3ce <vPortEnterCritical+0x4a>
	}
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	20000018 	.word	0x20000018
 800c3e0:	e000ed04 	.word	0xe000ed04

0800c3e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c3ea:	4b12      	ldr	r3, [pc, #72]	; (800c434 <vPortExitCritical+0x50>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d10a      	bne.n	800c408 <vPortExitCritical+0x24>
	__asm volatile
 800c3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f6:	f383 8811 	msr	BASEPRI, r3
 800c3fa:	f3bf 8f6f 	isb	sy
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	607b      	str	r3, [r7, #4]
}
 800c404:	bf00      	nop
 800c406:	e7fe      	b.n	800c406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c408:	4b0a      	ldr	r3, [pc, #40]	; (800c434 <vPortExitCritical+0x50>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	3b01      	subs	r3, #1
 800c40e:	4a09      	ldr	r2, [pc, #36]	; (800c434 <vPortExitCritical+0x50>)
 800c410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c412:	4b08      	ldr	r3, [pc, #32]	; (800c434 <vPortExitCritical+0x50>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d105      	bne.n	800c426 <vPortExitCritical+0x42>
 800c41a:	2300      	movs	r3, #0
 800c41c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	f383 8811 	msr	BASEPRI, r3
}
 800c424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c426:	bf00      	nop
 800c428:	370c      	adds	r7, #12
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	20000018 	.word	0x20000018
	...

0800c440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c440:	f3ef 8009 	mrs	r0, PSP
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	4b15      	ldr	r3, [pc, #84]	; (800c4a0 <pxCurrentTCBConst>)
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	f01e 0f10 	tst.w	lr, #16
 800c450:	bf08      	it	eq
 800c452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c45a:	6010      	str	r0, [r2, #0]
 800c45c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c460:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c464:	f380 8811 	msr	BASEPRI, r0
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	f3bf 8f6f 	isb	sy
 800c470:	f7fe fe96 	bl	800b1a0 <vTaskSwitchContext>
 800c474:	f04f 0000 	mov.w	r0, #0
 800c478:	f380 8811 	msr	BASEPRI, r0
 800c47c:	bc09      	pop	{r0, r3}
 800c47e:	6819      	ldr	r1, [r3, #0]
 800c480:	6808      	ldr	r0, [r1, #0]
 800c482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c486:	f01e 0f10 	tst.w	lr, #16
 800c48a:	bf08      	it	eq
 800c48c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c490:	f380 8809 	msr	PSP, r0
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	4770      	bx	lr
 800c49a:	bf00      	nop
 800c49c:	f3af 8000 	nop.w

0800c4a0 <pxCurrentTCBConst>:
 800c4a0:	200054f4 	.word	0x200054f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop

0800c4a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	607b      	str	r3, [r7, #4]
}
 800c4c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4c2:	f7fe fdb3 	bl	800b02c <xTaskIncrementTick>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d003      	beq.n	800c4d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4cc:	4b06      	ldr	r3, [pc, #24]	; (800c4e8 <xPortSysTickHandler+0x40>)
 800c4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d2:	601a      	str	r2, [r3, #0]
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	f383 8811 	msr	BASEPRI, r3
}
 800c4de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c4e0:	bf00      	nop
 800c4e2:	3708      	adds	r7, #8
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	e000ed04 	.word	0xe000ed04

0800c4ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c4f0:	4b0b      	ldr	r3, [pc, #44]	; (800c520 <vPortSetupTimerInterrupt+0x34>)
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c4f6:	4b0b      	ldr	r3, [pc, #44]	; (800c524 <vPortSetupTimerInterrupt+0x38>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c4fc:	4b0a      	ldr	r3, [pc, #40]	; (800c528 <vPortSetupTimerInterrupt+0x3c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a0a      	ldr	r2, [pc, #40]	; (800c52c <vPortSetupTimerInterrupt+0x40>)
 800c502:	fba2 2303 	umull	r2, r3, r2, r3
 800c506:	099b      	lsrs	r3, r3, #6
 800c508:	4a09      	ldr	r2, [pc, #36]	; (800c530 <vPortSetupTimerInterrupt+0x44>)
 800c50a:	3b01      	subs	r3, #1
 800c50c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c50e:	4b04      	ldr	r3, [pc, #16]	; (800c520 <vPortSetupTimerInterrupt+0x34>)
 800c510:	2207      	movs	r2, #7
 800c512:	601a      	str	r2, [r3, #0]
}
 800c514:	bf00      	nop
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	e000e010 	.word	0xe000e010
 800c524:	e000e018 	.word	0xe000e018
 800c528:	2000000c 	.word	0x2000000c
 800c52c:	10624dd3 	.word	0x10624dd3
 800c530:	e000e014 	.word	0xe000e014

0800c534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c544 <vPortEnableVFP+0x10>
 800c538:	6801      	ldr	r1, [r0, #0]
 800c53a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c53e:	6001      	str	r1, [r0, #0]
 800c540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c542:	bf00      	nop
 800c544:	e000ed88 	.word	0xe000ed88

0800c548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c54e:	f3ef 8305 	mrs	r3, IPSR
 800c552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2b0f      	cmp	r3, #15
 800c558:	d914      	bls.n	800c584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c55a:	4a17      	ldr	r2, [pc, #92]	; (800c5b8 <vPortValidateInterruptPriority+0x70>)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4413      	add	r3, r2
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c564:	4b15      	ldr	r3, [pc, #84]	; (800c5bc <vPortValidateInterruptPriority+0x74>)
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	7afa      	ldrb	r2, [r7, #11]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d20a      	bcs.n	800c584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	607b      	str	r3, [r7, #4]
}
 800c580:	bf00      	nop
 800c582:	e7fe      	b.n	800c582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c584:	4b0e      	ldr	r3, [pc, #56]	; (800c5c0 <vPortValidateInterruptPriority+0x78>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c58c:	4b0d      	ldr	r3, [pc, #52]	; (800c5c4 <vPortValidateInterruptPriority+0x7c>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	429a      	cmp	r2, r3
 800c592:	d90a      	bls.n	800c5aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c598:	f383 8811 	msr	BASEPRI, r3
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	603b      	str	r3, [r7, #0]
}
 800c5a6:	bf00      	nop
 800c5a8:	e7fe      	b.n	800c5a8 <vPortValidateInterruptPriority+0x60>
	}
 800c5aa:	bf00      	nop
 800c5ac:	3714      	adds	r7, #20
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop
 800c5b8:	e000e3f0 	.word	0xe000e3f0
 800c5bc:	20005b20 	.word	0x20005b20
 800c5c0:	e000ed0c 	.word	0xe000ed0c
 800c5c4:	20005b24 	.word	0x20005b24

0800c5c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08a      	sub	sp, #40	; 0x28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c5d4:	f7fe fc6e 	bl	800aeb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c5d8:	4b5b      	ldr	r3, [pc, #364]	; (800c748 <pvPortMalloc+0x180>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d101      	bne.n	800c5e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c5e0:	f000 f920 	bl	800c824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c5e4:	4b59      	ldr	r3, [pc, #356]	; (800c74c <pvPortMalloc+0x184>)
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f040 8093 	bne.w	800c718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d01d      	beq.n	800c634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c5f8:	2208      	movs	r2, #8
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f003 0307 	and.w	r3, r3, #7
 800c606:	2b00      	cmp	r3, #0
 800c608:	d014      	beq.n	800c634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f023 0307 	bic.w	r3, r3, #7
 800c610:	3308      	adds	r3, #8
 800c612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f003 0307 	and.w	r3, r3, #7
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00a      	beq.n	800c634 <pvPortMalloc+0x6c>
	__asm volatile
 800c61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c622:	f383 8811 	msr	BASEPRI, r3
 800c626:	f3bf 8f6f 	isb	sy
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	617b      	str	r3, [r7, #20]
}
 800c630:	bf00      	nop
 800c632:	e7fe      	b.n	800c632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d06e      	beq.n	800c718 <pvPortMalloc+0x150>
 800c63a:	4b45      	ldr	r3, [pc, #276]	; (800c750 <pvPortMalloc+0x188>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	429a      	cmp	r2, r3
 800c642:	d869      	bhi.n	800c718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c644:	4b43      	ldr	r3, [pc, #268]	; (800c754 <pvPortMalloc+0x18c>)
 800c646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c648:	4b42      	ldr	r3, [pc, #264]	; (800c754 <pvPortMalloc+0x18c>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c64e:	e004      	b.n	800c65a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	429a      	cmp	r2, r3
 800c662:	d903      	bls.n	800c66c <pvPortMalloc+0xa4>
 800c664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1f1      	bne.n	800c650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c66c:	4b36      	ldr	r3, [pc, #216]	; (800c748 <pvPortMalloc+0x180>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c672:	429a      	cmp	r2, r3
 800c674:	d050      	beq.n	800c718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c676:	6a3b      	ldr	r3, [r7, #32]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	2208      	movs	r2, #8
 800c67c:	4413      	add	r3, r2
 800c67e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68a:	685a      	ldr	r2, [r3, #4]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	1ad2      	subs	r2, r2, r3
 800c690:	2308      	movs	r3, #8
 800c692:	005b      	lsls	r3, r3, #1
 800c694:	429a      	cmp	r2, r3
 800c696:	d91f      	bls.n	800c6d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4413      	add	r3, r2
 800c69e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	f003 0307 	and.w	r3, r3, #7
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00a      	beq.n	800c6c0 <pvPortMalloc+0xf8>
	__asm volatile
 800c6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ae:	f383 8811 	msr	BASEPRI, r3
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	f3bf 8f4f 	dsb	sy
 800c6ba:	613b      	str	r3, [r7, #16]
}
 800c6bc:	bf00      	nop
 800c6be:	e7fe      	b.n	800c6be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c2:	685a      	ldr	r2, [r3, #4]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	1ad2      	subs	r2, r2, r3
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c6d2:	69b8      	ldr	r0, [r7, #24]
 800c6d4:	f000 f908 	bl	800c8e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c6d8:	4b1d      	ldr	r3, [pc, #116]	; (800c750 <pvPortMalloc+0x188>)
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	4a1b      	ldr	r2, [pc, #108]	; (800c750 <pvPortMalloc+0x188>)
 800c6e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c6e6:	4b1a      	ldr	r3, [pc, #104]	; (800c750 <pvPortMalloc+0x188>)
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	4b1b      	ldr	r3, [pc, #108]	; (800c758 <pvPortMalloc+0x190>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d203      	bcs.n	800c6fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c6f2:	4b17      	ldr	r3, [pc, #92]	; (800c750 <pvPortMalloc+0x188>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a18      	ldr	r2, [pc, #96]	; (800c758 <pvPortMalloc+0x190>)
 800c6f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	4b13      	ldr	r3, [pc, #76]	; (800c74c <pvPortMalloc+0x184>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	431a      	orrs	r2, r3
 800c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70a:	2200      	movs	r2, #0
 800c70c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c70e:	4b13      	ldr	r3, [pc, #76]	; (800c75c <pvPortMalloc+0x194>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	3301      	adds	r3, #1
 800c714:	4a11      	ldr	r2, [pc, #68]	; (800c75c <pvPortMalloc+0x194>)
 800c716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c718:	f7fe fbda 	bl	800aed0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	f003 0307 	and.w	r3, r3, #7
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00a      	beq.n	800c73c <pvPortMalloc+0x174>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	60fb      	str	r3, [r7, #12]
}
 800c738:	bf00      	nop
 800c73a:	e7fe      	b.n	800c73a <pvPortMalloc+0x172>
	return pvReturn;
 800c73c:	69fb      	ldr	r3, [r7, #28]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3728      	adds	r7, #40	; 0x28
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20009b30 	.word	0x20009b30
 800c74c:	20009b44 	.word	0x20009b44
 800c750:	20009b34 	.word	0x20009b34
 800c754:	20009b28 	.word	0x20009b28
 800c758:	20009b38 	.word	0x20009b38
 800c75c:	20009b3c 	.word	0x20009b3c

0800c760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d04d      	beq.n	800c80e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c772:	2308      	movs	r3, #8
 800c774:	425b      	negs	r3, r3
 800c776:	697a      	ldr	r2, [r7, #20]
 800c778:	4413      	add	r3, r2
 800c77a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	685a      	ldr	r2, [r3, #4]
 800c784:	4b24      	ldr	r3, [pc, #144]	; (800c818 <vPortFree+0xb8>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4013      	ands	r3, r2
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10a      	bne.n	800c7a4 <vPortFree+0x44>
	__asm volatile
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	60fb      	str	r3, [r7, #12]
}
 800c7a0:	bf00      	nop
 800c7a2:	e7fe      	b.n	800c7a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00a      	beq.n	800c7c2 <vPortFree+0x62>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	60bb      	str	r3, [r7, #8]
}
 800c7be:	bf00      	nop
 800c7c0:	e7fe      	b.n	800c7c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	685a      	ldr	r2, [r3, #4]
 800c7c6:	4b14      	ldr	r3, [pc, #80]	; (800c818 <vPortFree+0xb8>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d01e      	beq.n	800c80e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d11a      	bne.n	800c80e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	685a      	ldr	r2, [r3, #4]
 800c7dc:	4b0e      	ldr	r3, [pc, #56]	; (800c818 <vPortFree+0xb8>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	43db      	mvns	r3, r3
 800c7e2:	401a      	ands	r2, r3
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c7e8:	f7fe fb64 	bl	800aeb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	4b0a      	ldr	r3, [pc, #40]	; (800c81c <vPortFree+0xbc>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	4a09      	ldr	r2, [pc, #36]	; (800c81c <vPortFree+0xbc>)
 800c7f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c7fa:	6938      	ldr	r0, [r7, #16]
 800c7fc:	f000 f874 	bl	800c8e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c800:	4b07      	ldr	r3, [pc, #28]	; (800c820 <vPortFree+0xc0>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	3301      	adds	r3, #1
 800c806:	4a06      	ldr	r2, [pc, #24]	; (800c820 <vPortFree+0xc0>)
 800c808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c80a:	f7fe fb61 	bl	800aed0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c80e:	bf00      	nop
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	20009b44 	.word	0x20009b44
 800c81c:	20009b34 	.word	0x20009b34
 800c820:	20009b40 	.word	0x20009b40

0800c824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c82a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c82e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c830:	4b27      	ldr	r3, [pc, #156]	; (800c8d0 <prvHeapInit+0xac>)
 800c832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f003 0307 	and.w	r3, r3, #7
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00c      	beq.n	800c858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	3307      	adds	r3, #7
 800c842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f023 0307 	bic.w	r3, r3, #7
 800c84a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	4a1f      	ldr	r2, [pc, #124]	; (800c8d0 <prvHeapInit+0xac>)
 800c854:	4413      	add	r3, r2
 800c856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c85c:	4a1d      	ldr	r2, [pc, #116]	; (800c8d4 <prvHeapInit+0xb0>)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c862:	4b1c      	ldr	r3, [pc, #112]	; (800c8d4 <prvHeapInit+0xb0>)
 800c864:	2200      	movs	r2, #0
 800c866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	4413      	add	r3, r2
 800c86e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c870:	2208      	movs	r2, #8
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	1a9b      	subs	r3, r3, r2
 800c876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f023 0307 	bic.w	r3, r3, #7
 800c87e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	4a15      	ldr	r2, [pc, #84]	; (800c8d8 <prvHeapInit+0xb4>)
 800c884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c886:	4b14      	ldr	r3, [pc, #80]	; (800c8d8 <prvHeapInit+0xb4>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2200      	movs	r2, #0
 800c88c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c88e:	4b12      	ldr	r3, [pc, #72]	; (800c8d8 <prvHeapInit+0xb4>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2200      	movs	r2, #0
 800c894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	1ad2      	subs	r2, r2, r3
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8a4:	4b0c      	ldr	r3, [pc, #48]	; (800c8d8 <prvHeapInit+0xb4>)
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	4a0a      	ldr	r2, [pc, #40]	; (800c8dc <prvHeapInit+0xb8>)
 800c8b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	4a09      	ldr	r2, [pc, #36]	; (800c8e0 <prvHeapInit+0xbc>)
 800c8ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8bc:	4b09      	ldr	r3, [pc, #36]	; (800c8e4 <prvHeapInit+0xc0>)
 800c8be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8c2:	601a      	str	r2, [r3, #0]
}
 800c8c4:	bf00      	nop
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr
 800c8d0:	20005b28 	.word	0x20005b28
 800c8d4:	20009b28 	.word	0x20009b28
 800c8d8:	20009b30 	.word	0x20009b30
 800c8dc:	20009b38 	.word	0x20009b38
 800c8e0:	20009b34 	.word	0x20009b34
 800c8e4:	20009b44 	.word	0x20009b44

0800c8e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c8f0:	4b28      	ldr	r3, [pc, #160]	; (800c994 <prvInsertBlockIntoFreeList+0xac>)
 800c8f2:	60fb      	str	r3, [r7, #12]
 800c8f4:	e002      	b.n	800c8fc <prvInsertBlockIntoFreeList+0x14>
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	60fb      	str	r3, [r7, #12]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	429a      	cmp	r2, r3
 800c904:	d8f7      	bhi.n	800c8f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	68ba      	ldr	r2, [r7, #8]
 800c910:	4413      	add	r3, r2
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	429a      	cmp	r2, r3
 800c916:	d108      	bne.n	800c92a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	685a      	ldr	r2, [r3, #4]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	441a      	add	r2, r3
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	68ba      	ldr	r2, [r7, #8]
 800c934:	441a      	add	r2, r3
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d118      	bne.n	800c970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	4b15      	ldr	r3, [pc, #84]	; (800c998 <prvInsertBlockIntoFreeList+0xb0>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	429a      	cmp	r2, r3
 800c948:	d00d      	beq.n	800c966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	441a      	add	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	601a      	str	r2, [r3, #0]
 800c964:	e008      	b.n	800c978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c966:	4b0c      	ldr	r3, [pc, #48]	; (800c998 <prvInsertBlockIntoFreeList+0xb0>)
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	601a      	str	r2, [r3, #0]
 800c96e:	e003      	b.n	800c978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d002      	beq.n	800c986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c986:	bf00      	nop
 800c988:	3714      	adds	r7, #20
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	20009b28 	.word	0x20009b28
 800c998:	20009b30 	.word	0x20009b30

0800c99c <rcl_node_get_default_options>:
 800c99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c99e:	b087      	sub	sp, #28
 800c9a0:	4607      	mov	r7, r0
 800c9a2:	466d      	mov	r5, sp
 800c9a4:	4668      	mov	r0, sp
 800c9a6:	f000 ff5b 	bl	800d860 <rcutils_get_default_allocator>
 800c9aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9ac:	4c08      	ldr	r4, [pc, #32]	; (800c9d0 <rcl_node_get_default_options+0x34>)
 800c9ae:	f8d5 c000 	ldr.w	ip, [r5]
 800c9b2:	1d26      	adds	r6, r4, #4
 800c9b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c9b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9b8:	463d      	mov	r5, r7
 800c9ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c9bc:	f8c6 c000 	str.w	ip, [r6]
 800c9c0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c9c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c9c8:	4638      	mov	r0, r7
 800c9ca:	b007      	add	sp, #28
 800c9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	2000001c 	.word	0x2000001c

0800c9d4 <rcl_node_options_copy>:
 800c9d4:	b1c8      	cbz	r0, 800ca0a <rcl_node_options_copy+0x36>
 800c9d6:	b4f0      	push	{r4, r5, r6, r7}
 800c9d8:	460f      	mov	r7, r1
 800c9da:	b199      	cbz	r1, 800ca04 <rcl_node_options_copy+0x30>
 800c9dc:	4288      	cmp	r0, r1
 800c9de:	4606      	mov	r6, r0
 800c9e0:	d010      	beq.n	800ca04 <rcl_node_options_copy+0x30>
 800c9e2:	4605      	mov	r5, r0
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9ea:	f844 3b04 	str.w	r3, [r4], #4
 800c9ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9f2:	7e32      	ldrb	r2, [r6, #24]
 800c9f4:	6829      	ldr	r1, [r5, #0]
 800c9f6:	7e73      	ldrb	r3, [r6, #25]
 800c9f8:	6021      	str	r1, [r4, #0]
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	763a      	strb	r2, [r7, #24]
 800c9fe:	767b      	strb	r3, [r7, #25]
 800ca00:	bcf0      	pop	{r4, r5, r6, r7}
 800ca02:	4770      	bx	lr
 800ca04:	200b      	movs	r0, #11
 800ca06:	bcf0      	pop	{r4, r5, r6, r7}
 800ca08:	4770      	bx	lr
 800ca0a:	200b      	movs	r0, #11
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop

0800ca10 <rcl_get_zero_initialized_publisher>:
 800ca10:	4b01      	ldr	r3, [pc, #4]	; (800ca18 <rcl_get_zero_initialized_publisher+0x8>)
 800ca12:	6818      	ldr	r0, [r3, #0]
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	080198d4 	.word	0x080198d4

0800ca1c <rcl_publisher_init>:
 800ca1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca20:	b091      	sub	sp, #68	; 0x44
 800ca22:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ca24:	b3d7      	cbz	r7, 800ca9c <rcl_publisher_init+0x80>
 800ca26:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	4648      	mov	r0, r9
 800ca2e:	4688      	mov	r8, r1
 800ca30:	4616      	mov	r6, r2
 800ca32:	461d      	mov	r5, r3
 800ca34:	f000 ff22 	bl	800d87c <rcutils_allocator_is_valid>
 800ca38:	b380      	cbz	r0, 800ca9c <rcl_publisher_init+0x80>
 800ca3a:	b37c      	cbz	r4, 800ca9c <rcl_publisher_init+0x80>
 800ca3c:	f8d4 a000 	ldr.w	sl, [r4]
 800ca40:	f1ba 0f00 	cmp.w	sl, #0
 800ca44:	d004      	beq.n	800ca50 <rcl_publisher_init+0x34>
 800ca46:	2564      	movs	r5, #100	; 0x64
 800ca48:	4628      	mov	r0, r5
 800ca4a:	b011      	add	sp, #68	; 0x44
 800ca4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca50:	4640      	mov	r0, r8
 800ca52:	f006 fdf9 	bl	8013648 <rcl_node_is_valid>
 800ca56:	b330      	cbz	r0, 800caa6 <rcl_publisher_init+0x8a>
 800ca58:	b306      	cbz	r6, 800ca9c <rcl_publisher_init+0x80>
 800ca5a:	b1fd      	cbz	r5, 800ca9c <rcl_publisher_init+0x80>
 800ca5c:	46ce      	mov	lr, r9
 800ca5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ca62:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800ca66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca6a:	f8de 3000 	ldr.w	r3, [lr]
 800ca6e:	f8cc 3000 	str.w	r3, [ip]
 800ca72:	f000 ff3f 	bl	800d8f4 <rcutils_get_zero_initialized_string_map>
 800ca76:	ab10      	add	r3, sp, #64	; 0x40
 800ca78:	4684      	mov	ip, r0
 800ca7a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ca7e:	f8cd c020 	str.w	ip, [sp, #32]
 800ca82:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ca86:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800ca8a:	4651      	mov	r1, sl
 800ca8c:	a808      	add	r0, sp, #32
 800ca8e:	f000 ffab 	bl	800d9e8 <rcutils_string_map_init>
 800ca92:	b150      	cbz	r0, 800caaa <rcl_publisher_init+0x8e>
 800ca94:	280a      	cmp	r0, #10
 800ca96:	d013      	beq.n	800cac0 <rcl_publisher_init+0xa4>
 800ca98:	2501      	movs	r5, #1
 800ca9a:	e7d5      	b.n	800ca48 <rcl_publisher_init+0x2c>
 800ca9c:	250b      	movs	r5, #11
 800ca9e:	4628      	mov	r0, r5
 800caa0:	b011      	add	sp, #68	; 0x44
 800caa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa6:	25c8      	movs	r5, #200	; 0xc8
 800caa8:	e7ce      	b.n	800ca48 <rcl_publisher_init+0x2c>
 800caaa:	a808      	add	r0, sp, #32
 800caac:	f006 fa02 	bl	8012eb4 <rcl_get_default_topic_name_substitutions>
 800cab0:	4682      	mov	sl, r0
 800cab2:	b138      	cbz	r0, 800cac4 <rcl_publisher_init+0xa8>
 800cab4:	a808      	add	r0, sp, #32
 800cab6:	f000 ffd7 	bl	800da68 <rcutils_string_map_fini>
 800caba:	f1ba 0f0a 	cmp.w	sl, #10
 800cabe:	d1eb      	bne.n	800ca98 <rcl_publisher_init+0x7c>
 800cac0:	250a      	movs	r5, #10
 800cac2:	e7c1      	b.n	800ca48 <rcl_publisher_init+0x2c>
 800cac4:	4640      	mov	r0, r8
 800cac6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800caca:	f006 fdc7 	bl	801365c <rcl_node_get_name>
 800cace:	4682      	mov	sl, r0
 800cad0:	4640      	mov	r0, r8
 800cad2:	f006 fdcb 	bl	801366c <rcl_node_get_namespace>
 800cad6:	4686      	mov	lr, r0
 800cad8:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800cadc:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800cae0:	46ec      	mov	ip, sp
 800cae2:	f8cd b014 	str.w	fp, [sp, #20]
 800cae6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800caea:	f8d9 3000 	ldr.w	r3, [r9]
 800caee:	f8cc 3000 	str.w	r3, [ip]
 800caf2:	4628      	mov	r0, r5
 800caf4:	4651      	mov	r1, sl
 800caf6:	4672      	mov	r2, lr
 800caf8:	ab08      	add	r3, sp, #32
 800cafa:	f006 f875 	bl	8012be8 <rcl_expand_topic_name>
 800cafe:	4605      	mov	r5, r0
 800cb00:	a808      	add	r0, sp, #32
 800cb02:	f000 ffb1 	bl	800da68 <rcutils_string_map_fini>
 800cb06:	b920      	cbnz	r0, 800cb12 <rcl_publisher_init+0xf6>
 800cb08:	b15d      	cbz	r5, 800cb22 <rcl_publisher_init+0x106>
 800cb0a:	2d67      	cmp	r5, #103	; 0x67
 800cb0c:	d002      	beq.n	800cb14 <rcl_publisher_init+0xf8>
 800cb0e:	2d69      	cmp	r5, #105	; 0x69
 800cb10:	d05f      	beq.n	800cbd2 <rcl_publisher_init+0x1b6>
 800cb12:	2501      	movs	r5, #1
 800cb14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d096      	beq.n	800ca48 <rcl_publisher_init+0x2c>
 800cb1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb1c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb1e:	4798      	blx	r3
 800cb20:	e792      	b.n	800ca48 <rcl_publisher_init+0x2c>
 800cb22:	4640      	mov	r0, r8
 800cb24:	f006 fdaa 	bl	801367c <rcl_node_get_options>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d0f2      	beq.n	800cb12 <rcl_publisher_init+0xf6>
 800cb2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb2e:	f7f3 fb61 	bl	80001f4 <strlen>
 800cb32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb34:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb36:	3001      	adds	r0, #1
 800cb38:	4798      	blx	r3
 800cb3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb3c:	9107      	str	r1, [sp, #28]
 800cb3e:	4681      	mov	r9, r0
 800cb40:	4608      	mov	r0, r1
 800cb42:	f7f3 fb57 	bl	80001f4 <strlen>
 800cb46:	9907      	ldr	r1, [sp, #28]
 800cb48:	1c42      	adds	r2, r0, #1
 800cb4a:	4648      	mov	r0, r9
 800cb4c:	f00b fe83 	bl	8018856 <memcpy>
 800cb50:	462a      	mov	r2, r5
 800cb52:	4648      	mov	r0, r9
 800cb54:	a90a      	add	r1, sp, #40	; 0x28
 800cb56:	f001 f865 	bl	800dc24 <rmw_validate_full_topic_name>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d137      	bne.n	800cbce <rcl_publisher_init+0x1b2>
 800cb5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d138      	bne.n	800cbd6 <rcl_publisher_init+0x1ba>
 800cb64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb68:	20c0      	movs	r0, #192	; 0xc0
 800cb6a:	4798      	blx	r3
 800cb6c:	6020      	str	r0, [r4, #0]
 800cb6e:	b3a0      	cbz	r0, 800cbda <rcl_publisher_init+0x1be>
 800cb70:	4640      	mov	r0, r8
 800cb72:	f006 fd8b 	bl	801368c <rcl_node_get_rmw_handle>
 800cb76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	4631      	mov	r1, r6
 800cb7e:	463b      	mov	r3, r7
 800cb80:	464a      	mov	r2, r9
 800cb82:	6825      	ldr	r5, [r4, #0]
 800cb84:	f001 f94e 	bl	800de24 <rmw_create_publisher>
 800cb88:	6821      	ldr	r1, [r4, #0]
 800cb8a:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800cb8e:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800cb92:	b388      	cbz	r0, 800cbf8 <rcl_publisher_init+0x1dc>
 800cb94:	3168      	adds	r1, #104	; 0x68
 800cb96:	f001 fa23 	bl	800dfe0 <rmw_publisher_get_actual_qos>
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	4605      	mov	r5, r0
 800cb9e:	b9f0      	cbnz	r0, 800cbde <rcl_publisher_init+0x1c2>
 800cba0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800cba4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800cba8:	4618      	mov	r0, r3
 800cbaa:	2268      	movs	r2, #104	; 0x68
 800cbac:	4639      	mov	r1, r7
 800cbae:	f00b fe52 	bl	8018856 <memcpy>
 800cbb2:	f8d8 2000 	ldr.w	r2, [r8]
 800cbb6:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800cbba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbbc:	b110      	cbz	r0, 800cbc4 <rcl_publisher_init+0x1a8>
 800cbbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbc0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cbc2:	4798      	blx	r3
 800cbc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbc6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cbc8:	4648      	mov	r0, r9
 800cbca:	4798      	blx	r3
 800cbcc:	e73c      	b.n	800ca48 <rcl_publisher_init+0x2c>
 800cbce:	2501      	movs	r5, #1
 800cbd0:	e7f3      	b.n	800cbba <rcl_publisher_init+0x19e>
 800cbd2:	2567      	movs	r5, #103	; 0x67
 800cbd4:	e79e      	b.n	800cb14 <rcl_publisher_init+0xf8>
 800cbd6:	2567      	movs	r5, #103	; 0x67
 800cbd8:	e7ef      	b.n	800cbba <rcl_publisher_init+0x19e>
 800cbda:	250a      	movs	r5, #10
 800cbdc:	e7ed      	b.n	800cbba <rcl_publisher_init+0x19e>
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d0f5      	beq.n	800cbce <rcl_publisher_init+0x1b2>
 800cbe2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cbe6:	b13b      	cbz	r3, 800cbf8 <rcl_publisher_init+0x1dc>
 800cbe8:	4640      	mov	r0, r8
 800cbea:	f006 fd4f 	bl	801368c <rcl_node_get_rmw_handle>
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800cbf4:	f001 f9f6 	bl	800dfe4 <rmw_destroy_publisher>
 800cbf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbfa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cbfc:	6820      	ldr	r0, [r4, #0]
 800cbfe:	4798      	blx	r3
 800cc00:	2300      	movs	r3, #0
 800cc02:	6023      	str	r3, [r4, #0]
 800cc04:	2501      	movs	r5, #1
 800cc06:	e7d8      	b.n	800cbba <rcl_publisher_init+0x19e>

0800cc08 <rcl_publisher_get_default_options>:
 800cc08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc0a:	4f0e      	ldr	r7, [pc, #56]	; (800cc44 <rcl_publisher_get_default_options+0x3c>)
 800cc0c:	490e      	ldr	r1, [pc, #56]	; (800cc48 <rcl_publisher_get_default_options+0x40>)
 800cc0e:	b087      	sub	sp, #28
 800cc10:	4606      	mov	r6, r0
 800cc12:	2250      	movs	r2, #80	; 0x50
 800cc14:	4638      	mov	r0, r7
 800cc16:	f00b fe1e 	bl	8018856 <memcpy>
 800cc1a:	466c      	mov	r4, sp
 800cc1c:	4668      	mov	r0, sp
 800cc1e:	f000 fe1f 	bl	800d860 <rcutils_get_default_allocator>
 800cc22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc24:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800cc28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc2a:	6823      	ldr	r3, [r4, #0]
 800cc2c:	602b      	str	r3, [r5, #0]
 800cc2e:	f000 ffe1 	bl	800dbf4 <rmw_get_default_publisher_options>
 800cc32:	4639      	mov	r1, r7
 800cc34:	6678      	str	r0, [r7, #100]	; 0x64
 800cc36:	2268      	movs	r2, #104	; 0x68
 800cc38:	4630      	mov	r0, r6
 800cc3a:	f00b fe0c 	bl	8018856 <memcpy>
 800cc3e:	4630      	mov	r0, r6
 800cc40:	b007      	add	sp, #28
 800cc42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc44:	20009b48 	.word	0x20009b48
 800cc48:	080198d8 	.word	0x080198d8

0800cc4c <rcl_publish>:
 800cc4c:	b1f8      	cbz	r0, 800cc8e <rcl_publish+0x42>
 800cc4e:	6803      	ldr	r3, [r0, #0]
 800cc50:	b570      	push	{r4, r5, r6, lr}
 800cc52:	4604      	mov	r4, r0
 800cc54:	b1b3      	cbz	r3, 800cc84 <rcl_publish+0x38>
 800cc56:	4616      	mov	r6, r2
 800cc58:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800cc5c:	b192      	cbz	r2, 800cc84 <rcl_publish+0x38>
 800cc5e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800cc62:	460d      	mov	r5, r1
 800cc64:	f005 ff56 	bl	8012b14 <rcl_context_is_valid>
 800cc68:	b160      	cbz	r0, 800cc84 <rcl_publish+0x38>
 800cc6a:	6823      	ldr	r3, [r4, #0]
 800cc6c:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800cc70:	b140      	cbz	r0, 800cc84 <rcl_publish+0x38>
 800cc72:	b155      	cbz	r5, 800cc8a <rcl_publish+0x3e>
 800cc74:	4632      	mov	r2, r6
 800cc76:	4629      	mov	r1, r5
 800cc78:	f001 f874 	bl	800dd64 <rmw_publish>
 800cc7c:	3800      	subs	r0, #0
 800cc7e:	bf18      	it	ne
 800cc80:	2001      	movne	r0, #1
 800cc82:	bd70      	pop	{r4, r5, r6, pc}
 800cc84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cc88:	bd70      	pop	{r4, r5, r6, pc}
 800cc8a:	200b      	movs	r0, #11
 800cc8c:	bd70      	pop	{r4, r5, r6, pc}
 800cc8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cc92:	4770      	bx	lr

0800cc94 <rcl_get_zero_initialized_subscription>:
 800cc94:	4b01      	ldr	r3, [pc, #4]	; (800cc9c <rcl_get_zero_initialized_subscription+0x8>)
 800cc96:	6818      	ldr	r0, [r3, #0]
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	08019928 	.word	0x08019928

0800cca0 <rcl_subscription_init>:
 800cca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca4:	b091      	sub	sp, #68	; 0x44
 800cca6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800cca8:	b1d7      	cbz	r7, 800cce0 <rcl_subscription_init+0x40>
 800ccaa:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800ccae:	4604      	mov	r4, r0
 800ccb0:	4648      	mov	r0, r9
 800ccb2:	4688      	mov	r8, r1
 800ccb4:	4616      	mov	r6, r2
 800ccb6:	461d      	mov	r5, r3
 800ccb8:	f000 fde0 	bl	800d87c <rcutils_allocator_is_valid>
 800ccbc:	b180      	cbz	r0, 800cce0 <rcl_subscription_init+0x40>
 800ccbe:	b17c      	cbz	r4, 800cce0 <rcl_subscription_init+0x40>
 800ccc0:	4640      	mov	r0, r8
 800ccc2:	f006 fcc1 	bl	8013648 <rcl_node_is_valid>
 800ccc6:	b380      	cbz	r0, 800cd2a <rcl_subscription_init+0x8a>
 800ccc8:	b156      	cbz	r6, 800cce0 <rcl_subscription_init+0x40>
 800ccca:	b14d      	cbz	r5, 800cce0 <rcl_subscription_init+0x40>
 800cccc:	f8d4 a000 	ldr.w	sl, [r4]
 800ccd0:	f1ba 0f00 	cmp.w	sl, #0
 800ccd4:	d009      	beq.n	800ccea <rcl_subscription_init+0x4a>
 800ccd6:	2564      	movs	r5, #100	; 0x64
 800ccd8:	4628      	mov	r0, r5
 800ccda:	b011      	add	sp, #68	; 0x44
 800ccdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce0:	250b      	movs	r5, #11
 800cce2:	4628      	mov	r0, r5
 800cce4:	b011      	add	sp, #68	; 0x44
 800cce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccea:	46ce      	mov	lr, r9
 800ccec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ccf0:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800ccf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ccf8:	f8de 3000 	ldr.w	r3, [lr]
 800ccfc:	f8cc 3000 	str.w	r3, [ip]
 800cd00:	f000 fdf8 	bl	800d8f4 <rcutils_get_zero_initialized_string_map>
 800cd04:	ab10      	add	r3, sp, #64	; 0x40
 800cd06:	4684      	mov	ip, r0
 800cd08:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800cd0c:	f8cd c020 	str.w	ip, [sp, #32]
 800cd10:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cd14:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800cd18:	4651      	mov	r1, sl
 800cd1a:	a808      	add	r0, sp, #32
 800cd1c:	f000 fe64 	bl	800d9e8 <rcutils_string_map_init>
 800cd20:	b140      	cbz	r0, 800cd34 <rcl_subscription_init+0x94>
 800cd22:	280a      	cmp	r0, #10
 800cd24:	d011      	beq.n	800cd4a <rcl_subscription_init+0xaa>
 800cd26:	2501      	movs	r5, #1
 800cd28:	e7db      	b.n	800cce2 <rcl_subscription_init+0x42>
 800cd2a:	25c8      	movs	r5, #200	; 0xc8
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	b011      	add	sp, #68	; 0x44
 800cd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd34:	a808      	add	r0, sp, #32
 800cd36:	f006 f8bd 	bl	8012eb4 <rcl_get_default_topic_name_substitutions>
 800cd3a:	4682      	mov	sl, r0
 800cd3c:	b138      	cbz	r0, 800cd4e <rcl_subscription_init+0xae>
 800cd3e:	a808      	add	r0, sp, #32
 800cd40:	f000 fe92 	bl	800da68 <rcutils_string_map_fini>
 800cd44:	f1ba 0f0a 	cmp.w	sl, #10
 800cd48:	d1ed      	bne.n	800cd26 <rcl_subscription_init+0x86>
 800cd4a:	250a      	movs	r5, #10
 800cd4c:	e7c9      	b.n	800cce2 <rcl_subscription_init+0x42>
 800cd4e:	4640      	mov	r0, r8
 800cd50:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cd54:	f006 fc82 	bl	801365c <rcl_node_get_name>
 800cd58:	4682      	mov	sl, r0
 800cd5a:	4640      	mov	r0, r8
 800cd5c:	f006 fc86 	bl	801366c <rcl_node_get_namespace>
 800cd60:	4686      	mov	lr, r0
 800cd62:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800cd66:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800cd6a:	46ec      	mov	ip, sp
 800cd6c:	f8cd b014 	str.w	fp, [sp, #20]
 800cd70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd74:	f8d9 3000 	ldr.w	r3, [r9]
 800cd78:	f8cc 3000 	str.w	r3, [ip]
 800cd7c:	4628      	mov	r0, r5
 800cd7e:	4651      	mov	r1, sl
 800cd80:	4672      	mov	r2, lr
 800cd82:	ab08      	add	r3, sp, #32
 800cd84:	f005 ff30 	bl	8012be8 <rcl_expand_topic_name>
 800cd88:	4605      	mov	r5, r0
 800cd8a:	a808      	add	r0, sp, #32
 800cd8c:	f000 fe6c 	bl	800da68 <rcutils_string_map_fini>
 800cd90:	b920      	cbnz	r0, 800cd9c <rcl_subscription_init+0xfc>
 800cd92:	b15d      	cbz	r5, 800cdac <rcl_subscription_init+0x10c>
 800cd94:	2d67      	cmp	r5, #103	; 0x67
 800cd96:	d002      	beq.n	800cd9e <rcl_subscription_init+0xfe>
 800cd98:	2d69      	cmp	r5, #105	; 0x69
 800cd9a:	d05a      	beq.n	800ce52 <rcl_subscription_init+0x1b2>
 800cd9c:	2501      	movs	r5, #1
 800cd9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cda0:	2800      	cmp	r0, #0
 800cda2:	d09e      	beq.n	800cce2 <rcl_subscription_init+0x42>
 800cda4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cda6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cda8:	4798      	blx	r3
 800cdaa:	e79a      	b.n	800cce2 <rcl_subscription_init+0x42>
 800cdac:	4640      	mov	r0, r8
 800cdae:	f006 fc65 	bl	801367c <rcl_node_get_options>
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	d0f2      	beq.n	800cd9c <rcl_subscription_init+0xfc>
 800cdb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdb8:	f7f3 fa1c 	bl	80001f4 <strlen>
 800cdbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdbe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cdc0:	3001      	adds	r0, #1
 800cdc2:	4798      	blx	r3
 800cdc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cdc6:	9107      	str	r1, [sp, #28]
 800cdc8:	4681      	mov	r9, r0
 800cdca:	4608      	mov	r0, r1
 800cdcc:	f7f3 fa12 	bl	80001f4 <strlen>
 800cdd0:	9907      	ldr	r1, [sp, #28]
 800cdd2:	1c42      	adds	r2, r0, #1
 800cdd4:	4648      	mov	r0, r9
 800cdd6:	f00b fd3e 	bl	8018856 <memcpy>
 800cdda:	462a      	mov	r2, r5
 800cddc:	4648      	mov	r0, r9
 800cdde:	a90a      	add	r1, sp, #40	; 0x28
 800cde0:	f000 ff20 	bl	800dc24 <rmw_validate_full_topic_name>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	d132      	bne.n	800ce4e <rcl_subscription_init+0x1ae>
 800cde8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d133      	bne.n	800ce56 <rcl_subscription_init+0x1b6>
 800cdee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdf0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cdf2:	20c8      	movs	r0, #200	; 0xc8
 800cdf4:	4798      	blx	r3
 800cdf6:	6020      	str	r0, [r4, #0]
 800cdf8:	b378      	cbz	r0, 800ce5a <rcl_subscription_init+0x1ba>
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	f006 fc46 	bl	801368c <rcl_node_get_rmw_handle>
 800ce00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	4631      	mov	r1, r6
 800ce08:	463b      	mov	r3, r7
 800ce0a:	464a      	mov	r2, r9
 800ce0c:	6825      	ldr	r5, [r4, #0]
 800ce0e:	f001 f939 	bl	800e084 <rmw_create_subscription>
 800ce12:	6821      	ldr	r1, [r4, #0]
 800ce14:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800ce18:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800ce1c:	b368      	cbz	r0, 800ce7a <rcl_subscription_init+0x1da>
 800ce1e:	3170      	adds	r1, #112	; 0x70
 800ce20:	f001 fa10 	bl	800e244 <rmw_subscription_get_actual_qos>
 800ce24:	4605      	mov	r5, r0
 800ce26:	b9d0      	cbnz	r0, 800ce5e <rcl_subscription_init+0x1be>
 800ce28:	6820      	ldr	r0, [r4, #0]
 800ce2a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ce2e:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800ce32:	2270      	movs	r2, #112	; 0x70
 800ce34:	4639      	mov	r1, r7
 800ce36:	f00b fd0e 	bl	8018856 <memcpy>
 800ce3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce3c:	b110      	cbz	r0, 800ce44 <rcl_subscription_init+0x1a4>
 800ce3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce40:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce42:	4798      	blx	r3
 800ce44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce48:	4648      	mov	r0, r9
 800ce4a:	4798      	blx	r3
 800ce4c:	e749      	b.n	800cce2 <rcl_subscription_init+0x42>
 800ce4e:	2501      	movs	r5, #1
 800ce50:	e7f3      	b.n	800ce3a <rcl_subscription_init+0x19a>
 800ce52:	2567      	movs	r5, #103	; 0x67
 800ce54:	e7a3      	b.n	800cd9e <rcl_subscription_init+0xfe>
 800ce56:	2567      	movs	r5, #103	; 0x67
 800ce58:	e7ef      	b.n	800ce3a <rcl_subscription_init+0x19a>
 800ce5a:	250a      	movs	r5, #10
 800ce5c:	e7ed      	b.n	800ce3a <rcl_subscription_init+0x19a>
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d0f4      	beq.n	800ce4e <rcl_subscription_init+0x1ae>
 800ce64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ce68:	b13b      	cbz	r3, 800ce7a <rcl_subscription_init+0x1da>
 800ce6a:	4640      	mov	r0, r8
 800ce6c:	f006 fc0e 	bl	801368c <rcl_node_get_rmw_handle>
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800ce76:	f001 f9e7 	bl	800e248 <rmw_destroy_subscription>
 800ce7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce7c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ce7e:	6820      	ldr	r0, [r4, #0]
 800ce80:	4798      	blx	r3
 800ce82:	2300      	movs	r3, #0
 800ce84:	6023      	str	r3, [r4, #0]
 800ce86:	2501      	movs	r5, #1
 800ce88:	e7d7      	b.n	800ce3a <rcl_subscription_init+0x19a>
 800ce8a:	bf00      	nop

0800ce8c <rcl_subscription_get_default_options>:
 800ce8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce90:	4f12      	ldr	r7, [pc, #72]	; (800cedc <rcl_subscription_get_default_options+0x50>)
 800ce92:	4913      	ldr	r1, [pc, #76]	; (800cee0 <rcl_subscription_get_default_options+0x54>)
 800ce94:	b088      	sub	sp, #32
 800ce96:	4606      	mov	r6, r0
 800ce98:	2250      	movs	r2, #80	; 0x50
 800ce9a:	4638      	mov	r0, r7
 800ce9c:	f00b fcdb 	bl	8018856 <memcpy>
 800cea0:	ac02      	add	r4, sp, #8
 800cea2:	a802      	add	r0, sp, #8
 800cea4:	f000 fcdc 	bl	800d860 <rcutils_get_default_allocator>
 800cea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ceaa:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ceae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ceb0:	46e8      	mov	r8, sp
 800ceb2:	6823      	ldr	r3, [r4, #0]
 800ceb4:	602b      	str	r3, [r5, #0]
 800ceb6:	4640      	mov	r0, r8
 800ceb8:	f000 fe9e 	bl	800dbf8 <rmw_get_default_subscription_options>
 800cebc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cec0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cec4:	e883 0003 	stmia.w	r3, {r0, r1}
 800cec8:	2270      	movs	r2, #112	; 0x70
 800ceca:	4639      	mov	r1, r7
 800cecc:	4630      	mov	r0, r6
 800cece:	f00b fcc2 	bl	8018856 <memcpy>
 800ced2:	4630      	mov	r0, r6
 800ced4:	b008      	add	sp, #32
 800ced6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceda:	bf00      	nop
 800cedc:	20009bb0 	.word	0x20009bb0
 800cee0:	08019930 	.word	0x08019930

0800cee4 <rcl_take>:
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d03f      	beq.n	800cf68 <rcl_take+0x84>
 800cee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ceec:	4617      	mov	r7, r2
 800ceee:	6802      	ldr	r2, [r0, #0]
 800cef0:	b09d      	sub	sp, #116	; 0x74
 800cef2:	4606      	mov	r6, r0
 800cef4:	b382      	cbz	r2, 800cf58 <rcl_take+0x74>
 800cef6:	4699      	mov	r9, r3
 800cef8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800cefc:	b363      	cbz	r3, 800cf58 <rcl_take+0x74>
 800cefe:	4688      	mov	r8, r1
 800cf00:	b381      	cbz	r1, 800cf64 <rcl_take+0x80>
 800cf02:	2f00      	cmp	r7, #0
 800cf04:	d034      	beq.n	800cf70 <rcl_take+0x8c>
 800cf06:	a802      	add	r0, sp, #8
 800cf08:	ac02      	add	r4, sp, #8
 800cf0a:	f000 fe79 	bl	800dc00 <rmw_get_zero_initialized_message_info>
 800cf0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf10:	463d      	mov	r5, r7
 800cf12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cf18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cf1c:	6834      	ldr	r4, [r6, #0]
 800cf1e:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800cf22:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800cf26:	2400      	movs	r4, #0
 800cf28:	463b      	mov	r3, r7
 800cf2a:	4630      	mov	r0, r6
 800cf2c:	f8cd 9000 	str.w	r9, [sp]
 800cf30:	4641      	mov	r1, r8
 800cf32:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800cf36:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800cf3a:	f001 f9e3 	bl	800e304 <rmw_take_with_info>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	b9c0      	cbnz	r0, 800cf74 <rcl_take+0x90>
 800cf42:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800cf46:	f240 1291 	movw	r2, #401	; 0x191
 800cf4a:	2900      	cmp	r1, #0
 800cf4c:	bf08      	it	eq
 800cf4e:	4613      	moveq	r3, r2
 800cf50:	4618      	mov	r0, r3
 800cf52:	b01d      	add	sp, #116	; 0x74
 800cf54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf58:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	b01d      	add	sp, #116	; 0x74
 800cf60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf64:	230b      	movs	r3, #11
 800cf66:	e7f3      	b.n	800cf50 <rcl_take+0x6c>
 800cf68:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	4770      	bx	lr
 800cf70:	af10      	add	r7, sp, #64	; 0x40
 800cf72:	e7c8      	b.n	800cf06 <rcl_take+0x22>
 800cf74:	f005 fdb0 	bl	8012ad8 <rcl_convert_rmw_ret_to_rcl_ret>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	e7e9      	b.n	800cf50 <rcl_take+0x6c>

0800cf7c <rcl_subscription_get_rmw_handle>:
 800cf7c:	b118      	cbz	r0, 800cf86 <rcl_subscription_get_rmw_handle+0xa>
 800cf7e:	6800      	ldr	r0, [r0, #0]
 800cf80:	b108      	cbz	r0, 800cf86 <rcl_subscription_get_rmw_handle+0xa>
 800cf82:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800cf86:	4770      	bx	lr

0800cf88 <_rclc_check_for_new_data>:
 800cf88:	b1e0      	cbz	r0, 800cfc4 <_rclc_check_for_new_data+0x3c>
 800cf8a:	7803      	ldrb	r3, [r0, #0]
 800cf8c:	2b08      	cmp	r3, #8
 800cf8e:	d81b      	bhi.n	800cfc8 <_rclc_check_for_new_data+0x40>
 800cf90:	e8df f003 	tbb	[pc, r3]
 800cf94:	12161010 	.word	0x12161010
 800cf98:	05050512 	.word	0x05050512
 800cf9c:	14          	.byte	0x14
 800cf9d:	00          	.byte	0x00
 800cf9e:	6a0b      	ldr	r3, [r1, #32]
 800cfa0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cfa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa6:	3b00      	subs	r3, #0
 800cfa8:	bf18      	it	ne
 800cfaa:	2301      	movne	r3, #1
 800cfac:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	4770      	bx	lr
 800cfb4:	680b      	ldr	r3, [r1, #0]
 800cfb6:	e7f3      	b.n	800cfa0 <_rclc_check_for_new_data+0x18>
 800cfb8:	698b      	ldr	r3, [r1, #24]
 800cfba:	e7f1      	b.n	800cfa0 <_rclc_check_for_new_data+0x18>
 800cfbc:	688b      	ldr	r3, [r1, #8]
 800cfbe:	e7ef      	b.n	800cfa0 <_rclc_check_for_new_data+0x18>
 800cfc0:	690b      	ldr	r3, [r1, #16]
 800cfc2:	e7ed      	b.n	800cfa0 <_rclc_check_for_new_data+0x18>
 800cfc4:	200b      	movs	r0, #11
 800cfc6:	4770      	bx	lr
 800cfc8:	2300      	movs	r3, #0
 800cfca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800cfce:	2001      	movs	r0, #1
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop

0800cfd4 <_rclc_take_new_data>:
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d049      	beq.n	800d06c <_rclc_take_new_data+0x98>
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	7803      	ldrb	r3, [r0, #0]
 800cfdc:	b08e      	sub	sp, #56	; 0x38
 800cfde:	4604      	mov	r4, r0
 800cfe0:	2b08      	cmp	r3, #8
 800cfe2:	d84a      	bhi.n	800d07a <_rclc_take_new_data+0xa6>
 800cfe4:	e8df f003 	tbb	[pc, r3]
 800cfe8:	2b121515 	.word	0x2b121515
 800cfec:	0505052b 	.word	0x0505052b
 800cff0:	12          	.byte	0x12
 800cff1:	00          	.byte	0x00
 800cff2:	6a0b      	ldr	r3, [r1, #32]
 800cff4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cffa:	b13b      	cbz	r3, 800d00c <_rclc_take_new_data+0x38>
 800cffc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d000:	f104 0110 	add.w	r1, r4, #16
 800d004:	f006 fc42 	bl	801388c <rcl_take_request>
 800d008:	2800      	cmp	r0, #0
 800d00a:	d131      	bne.n	800d070 <_rclc_take_new_data+0x9c>
 800d00c:	2000      	movs	r0, #0
 800d00e:	b00e      	add	sp, #56	; 0x38
 800d010:	bd10      	pop	{r4, pc}
 800d012:	680b      	ldr	r3, [r1, #0]
 800d014:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d0f6      	beq.n	800d00c <_rclc_take_new_data+0x38>
 800d01e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d022:	2300      	movs	r3, #0
 800d024:	aa02      	add	r2, sp, #8
 800d026:	f7ff ff5d 	bl	800cee4 <rcl_take>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d0ef      	beq.n	800d00e <_rclc_take_new_data+0x3a>
 800d02e:	f240 1391 	movw	r3, #401	; 0x191
 800d032:	4298      	cmp	r0, r3
 800d034:	d115      	bne.n	800d062 <_rclc_take_new_data+0x8e>
 800d036:	2300      	movs	r3, #0
 800d038:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800d03c:	e7e7      	b.n	800d00e <_rclc_take_new_data+0x3a>
 800d03e:	698b      	ldr	r3, [r1, #24]
 800d040:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d0e0      	beq.n	800d00c <_rclc_take_new_data+0x38>
 800d04a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d04e:	f104 0110 	add.w	r1, r4, #16
 800d052:	f005 fd05 	bl	8012a60 <rcl_take_response>
 800d056:	2800      	cmp	r0, #0
 800d058:	d0d8      	beq.n	800d00c <_rclc_take_new_data+0x38>
 800d05a:	f240 13f5 	movw	r3, #501	; 0x1f5
 800d05e:	4298      	cmp	r0, r3
 800d060:	d0d5      	beq.n	800d00e <_rclc_take_new_data+0x3a>
 800d062:	9001      	str	r0, [sp, #4]
 800d064:	f000 fc2e 	bl	800d8c4 <rcutils_reset_error>
 800d068:	9801      	ldr	r0, [sp, #4]
 800d06a:	e7d0      	b.n	800d00e <_rclc_take_new_data+0x3a>
 800d06c:	200b      	movs	r0, #11
 800d06e:	4770      	bx	lr
 800d070:	f240 2359 	movw	r3, #601	; 0x259
 800d074:	4298      	cmp	r0, r3
 800d076:	d0de      	beq.n	800d036 <_rclc_take_new_data+0x62>
 800d078:	e7f3      	b.n	800d062 <_rclc_take_new_data+0x8e>
 800d07a:	2001      	movs	r0, #1
 800d07c:	e7c7      	b.n	800d00e <_rclc_take_new_data+0x3a>
 800d07e:	bf00      	nop

0800d080 <rclc_executor_trigger_any>:
 800d080:	b170      	cbz	r0, 800d0a0 <rclc_executor_trigger_any+0x20>
 800d082:	b179      	cbz	r1, 800d0a4 <rclc_executor_trigger_any+0x24>
 800d084:	4603      	mov	r3, r0
 800d086:	2200      	movs	r2, #0
 800d088:	e005      	b.n	800d096 <rclc_executor_trigger_any+0x16>
 800d08a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800d08e:	3340      	adds	r3, #64	; 0x40
 800d090:	b930      	cbnz	r0, 800d0a0 <rclc_executor_trigger_any+0x20>
 800d092:	4291      	cmp	r1, r2
 800d094:	d005      	beq.n	800d0a2 <rclc_executor_trigger_any+0x22>
 800d096:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800d09a:	3201      	adds	r2, #1
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d1f4      	bne.n	800d08a <rclc_executor_trigger_any+0xa>
 800d0a0:	4770      	bx	lr
 800d0a2:	4770      	bx	lr
 800d0a4:	4608      	mov	r0, r1
 800d0a6:	e7fb      	b.n	800d0a0 <rclc_executor_trigger_any+0x20>

0800d0a8 <_rclc_execute.part.0>:
 800d0a8:	b530      	push	{r4, r5, lr}
 800d0aa:	7803      	ldrb	r3, [r0, #0]
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	2b08      	cmp	r3, #8
 800d0b2:	d85b      	bhi.n	800d16c <_rclc_execute.part.0+0xc4>
 800d0b4:	e8df f003 	tbb	[pc, r3]
 800d0b8:	3036271f 	.word	0x3036271f
 800d0bc:	0505053f 	.word	0x0505053f
 800d0c0:	1a          	.byte	0x1a
 800d0c1:	00          	.byte	0x00
 800d0c2:	2b06      	cmp	r3, #6
 800d0c4:	d049      	beq.n	800d15a <_rclc_execute.part.0+0xb2>
 800d0c6:	2b07      	cmp	r3, #7
 800d0c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d0ca:	d140      	bne.n	800d14e <_rclc_execute.part.0+0xa6>
 800d0cc:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800d0d0:	6880      	ldr	r0, [r0, #8]
 800d0d2:	4798      	blx	r3
 800d0d4:	f104 0110 	add.w	r1, r4, #16
 800d0d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d0da:	6860      	ldr	r0, [r4, #4]
 800d0dc:	f006 fc0e 	bl	80138fc <rcl_send_response>
 800d0e0:	b138      	cbz	r0, 800d0f2 <_rclc_execute.part.0+0x4a>
 800d0e2:	9001      	str	r0, [sp, #4]
 800d0e4:	f000 fbee 	bl	800d8c4 <rcutils_reset_error>
 800d0e8:	9801      	ldr	r0, [sp, #4]
 800d0ea:	e002      	b.n	800d0f2 <_rclc_execute.part.0+0x4a>
 800d0ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d0ee:	4798      	blx	r3
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	b003      	add	sp, #12
 800d0f4:	bd30      	pop	{r4, r5, pc}
 800d0f6:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800d0fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d0fc:	b96d      	cbnz	r5, 800d11a <_rclc_execute.part.0+0x72>
 800d0fe:	4628      	mov	r0, r5
 800d100:	4798      	blx	r3
 800d102:	4628      	mov	r0, r5
 800d104:	e7f5      	b.n	800d0f2 <_rclc_execute.part.0+0x4a>
 800d106:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800d10a:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800d10e:	b1d5      	cbz	r5, 800d146 <_rclc_execute.part.0+0x9e>
 800d110:	6880      	ldr	r0, [r0, #8]
 800d112:	4798      	blx	r3
 800d114:	2000      	movs	r0, #0
 800d116:	e7ec      	b.n	800d0f2 <_rclc_execute.part.0+0x4a>
 800d118:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d11a:	68a0      	ldr	r0, [r4, #8]
 800d11c:	4798      	blx	r3
 800d11e:	2000      	movs	r0, #0
 800d120:	b003      	add	sp, #12
 800d122:	bd30      	pop	{r4, r5, pc}
 800d124:	6840      	ldr	r0, [r0, #4]
 800d126:	f006 fca3 	bl	8013a70 <rcl_timer_call>
 800d12a:	f240 3321 	movw	r3, #801	; 0x321
 800d12e:	4298      	cmp	r0, r3
 800d130:	d1d6      	bne.n	800d0e0 <_rclc_execute.part.0+0x38>
 800d132:	2000      	movs	r0, #0
 800d134:	e7dd      	b.n	800d0f2 <_rclc_execute.part.0+0x4a>
 800d136:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d138:	6880      	ldr	r0, [r0, #8]
 800d13a:	f104 0110 	add.w	r1, r4, #16
 800d13e:	4798      	blx	r3
 800d140:	2000      	movs	r0, #0
 800d142:	b003      	add	sp, #12
 800d144:	bd30      	pop	{r4, r5, pc}
 800d146:	4628      	mov	r0, r5
 800d148:	4798      	blx	r3
 800d14a:	4628      	mov	r0, r5
 800d14c:	e7d1      	b.n	800d0f2 <_rclc_execute.part.0+0x4a>
 800d14e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d150:	6880      	ldr	r0, [r0, #8]
 800d152:	4798      	blx	r3
 800d154:	f104 0110 	add.w	r1, r4, #16
 800d158:	e7be      	b.n	800d0d8 <_rclc_execute.part.0+0x30>
 800d15a:	f100 0110 	add.w	r1, r0, #16
 800d15e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d160:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d162:	6880      	ldr	r0, [r0, #8]
 800d164:	9101      	str	r1, [sp, #4]
 800d166:	4798      	blx	r3
 800d168:	9901      	ldr	r1, [sp, #4]
 800d16a:	e7b5      	b.n	800d0d8 <_rclc_execute.part.0+0x30>
 800d16c:	2001      	movs	r0, #1
 800d16e:	e7c0      	b.n	800d0f2 <_rclc_execute.part.0+0x4a>

0800d170 <rclc_executor_init>:
 800d170:	2800      	cmp	r0, #0
 800d172:	d063      	beq.n	800d23c <rclc_executor_init+0xcc>
 800d174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d178:	460f      	mov	r7, r1
 800d17a:	b0ae      	sub	sp, #184	; 0xb8
 800d17c:	2900      	cmp	r1, #0
 800d17e:	d055      	beq.n	800d22c <rclc_executor_init+0xbc>
 800d180:	4605      	mov	r5, r0
 800d182:	4618      	mov	r0, r3
 800d184:	4616      	mov	r6, r2
 800d186:	4698      	mov	r8, r3
 800d188:	f000 fb78 	bl	800d87c <rcutils_allocator_is_valid>
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d04d      	beq.n	800d22c <rclc_executor_init+0xbc>
 800d190:	2e00      	cmp	r6, #0
 800d192:	d04b      	beq.n	800d22c <rclc_executor_init+0xbc>
 800d194:	492e      	ldr	r1, [pc, #184]	; (800d250 <rclc_executor_init+0xe0>)
 800d196:	2280      	movs	r2, #128	; 0x80
 800d198:	a80e      	add	r0, sp, #56	; 0x38
 800d19a:	f00b fb5c 	bl	8018856 <memcpy>
 800d19e:	2400      	movs	r4, #0
 800d1a0:	a90e      	add	r1, sp, #56	; 0x38
 800d1a2:	2280      	movs	r2, #128	; 0x80
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	f00b fb56 	bl	8018856 <memcpy>
 800d1aa:	602f      	str	r7, [r5, #0]
 800d1ac:	4668      	mov	r0, sp
 800d1ae:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800d1b2:	466f      	mov	r7, sp
 800d1b4:	f006 feb6 	bl	8013f24 <rcl_get_zero_initialized_wait_set>
 800d1b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d1ba:	f105 0c14 	add.w	ip, r5, #20
 800d1be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d1c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d1ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1ce:	a31e      	add	r3, pc, #120	; (adr r3, 800d248 <rclc_executor_init+0xd8>)
 800d1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	f8cc 1000 	str.w	r1, [ip]
 800d1da:	f8d8 7000 	ldr.w	r7, [r8]
 800d1de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d1e2:	f8c5 8010 	str.w	r8, [r5, #16]
 800d1e6:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800d1ea:	01b0      	lsls	r0, r6, #6
 800d1ec:	47b8      	blx	r7
 800d1ee:	6068      	str	r0, [r5, #4]
 800d1f0:	b908      	cbnz	r0, 800d1f6 <rclc_executor_init+0x86>
 800d1f2:	e025      	b.n	800d240 <rclc_executor_init+0xd0>
 800d1f4:	6868      	ldr	r0, [r5, #4]
 800d1f6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d1fa:	4631      	mov	r1, r6
 800d1fc:	3401      	adds	r4, #1
 800d1fe:	f000 fa01 	bl	800d604 <rclc_executor_handle_init>
 800d202:	42a6      	cmp	r6, r4
 800d204:	d1f6      	bne.n	800d1f4 <rclc_executor_init+0x84>
 800d206:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800d20a:	f000 f9ef 	bl	800d5ec <rclc_executor_handle_counters_zero_init>
 800d20e:	686b      	ldr	r3, [r5, #4]
 800d210:	4a10      	ldr	r2, [pc, #64]	; (800d254 <rclc_executor_init+0xe4>)
 800d212:	672a      	str	r2, [r5, #112]	; 0x70
 800d214:	2000      	movs	r0, #0
 800d216:	6768      	str	r0, [r5, #116]	; 0x74
 800d218:	b163      	cbz	r3, 800d234 <rclc_executor_init+0xc4>
 800d21a:	692b      	ldr	r3, [r5, #16]
 800d21c:	b153      	cbz	r3, 800d234 <rclc_executor_init+0xc4>
 800d21e:	68ab      	ldr	r3, [r5, #8]
 800d220:	b143      	cbz	r3, 800d234 <rclc_executor_init+0xc4>
 800d222:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800d226:	b02e      	add	sp, #184	; 0xb8
 800d228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d22c:	200b      	movs	r0, #11
 800d22e:	b02e      	add	sp, #184	; 0xb8
 800d230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d234:	4618      	mov	r0, r3
 800d236:	b02e      	add	sp, #184	; 0xb8
 800d238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d23c:	200b      	movs	r0, #11
 800d23e:	4770      	bx	lr
 800d240:	200a      	movs	r0, #10
 800d242:	e7f4      	b.n	800d22e <rclc_executor_init+0xbe>
 800d244:	f3af 8000 	nop.w
 800d248:	3b9aca00 	.word	0x3b9aca00
 800d24c:	00000000 	.word	0x00000000
 800d250:	08019980 	.word	0x08019980
 800d254:	0800d081 	.word	0x0800d081

0800d258 <rclc_executor_add_subscription>:
 800d258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d25c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800d260:	b358      	cbz	r0, 800d2ba <rclc_executor_add_subscription+0x62>
 800d262:	b351      	cbz	r1, 800d2ba <rclc_executor_add_subscription+0x62>
 800d264:	b34a      	cbz	r2, 800d2ba <rclc_executor_add_subscription+0x62>
 800d266:	b343      	cbz	r3, 800d2ba <rclc_executor_add_subscription+0x62>
 800d268:	4604      	mov	r4, r0
 800d26a:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800d26e:	4285      	cmp	r5, r0
 800d270:	d302      	bcc.n	800d278 <rclc_executor_add_subscription+0x20>
 800d272:	2001      	movs	r0, #1
 800d274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d278:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800d27c:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800d280:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800d284:	f04f 0c00 	mov.w	ip, #0
 800d288:	f80e c008 	strb.w	ip, [lr, r8]
 800d28c:	2001      	movs	r0, #1
 800d28e:	3501      	adds	r5, #1
 800d290:	f104 0814 	add.w	r8, r4, #20
 800d294:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800d298:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800d29c:	6333      	str	r3, [r6, #48]	; 0x30
 800d29e:	7077      	strb	r7, [r6, #1]
 800d2a0:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800d2a4:	4640      	mov	r0, r8
 800d2a6:	60e5      	str	r5, [r4, #12]
 800d2a8:	f006 fe4e 	bl	8013f48 <rcl_wait_set_is_valid>
 800d2ac:	b940      	cbnz	r0, 800d2c0 <rclc_executor_add_subscription+0x68>
 800d2ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	64a3      	str	r3, [r4, #72]	; 0x48
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ba:	200b      	movs	r0, #11
 800d2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c0:	4640      	mov	r0, r8
 800d2c2:	f006 fe47 	bl	8013f54 <rcl_wait_set_fini>
 800d2c6:	2800      	cmp	r0, #0
 800d2c8:	d0f1      	beq.n	800d2ae <rclc_executor_add_subscription+0x56>
 800d2ca:	e7d3      	b.n	800d274 <rclc_executor_add_subscription+0x1c>

0800d2cc <rclc_executor_prepare>:
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d03d      	beq.n	800d34c <rclc_executor_prepare+0x80>
 800d2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d4:	f100 0814 	add.w	r8, r0, #20
 800d2d8:	b09a      	sub	sp, #104	; 0x68
 800d2da:	4604      	mov	r4, r0
 800d2dc:	4640      	mov	r0, r8
 800d2de:	f006 fe33 	bl	8013f48 <rcl_wait_set_is_valid>
 800d2e2:	b118      	cbz	r0, 800d2ec <rclc_executor_prepare+0x20>
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	b01a      	add	sp, #104	; 0x68
 800d2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ec:	4640      	mov	r0, r8
 800d2ee:	f006 fe31 	bl	8013f54 <rcl_wait_set_fini>
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d127      	bne.n	800d346 <rclc_executor_prepare+0x7a>
 800d2f6:	a80c      	add	r0, sp, #48	; 0x30
 800d2f8:	ad0c      	add	r5, sp, #48	; 0x30
 800d2fa:	f006 fe13 	bl	8013f24 <rcl_get_zero_initialized_wait_set>
 800d2fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d300:	4646      	mov	r6, r8
 800d302:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d306:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d30a:	6927      	ldr	r7, [r4, #16]
 800d30c:	682d      	ldr	r5, [r5, #0]
 800d30e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d310:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d312:	6035      	str	r5, [r6, #0]
 800d314:	ad04      	add	r5, sp, #16
 800d316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d318:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800d31c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d31e:	6826      	ldr	r6, [r4, #0]
 800d320:	6838      	ldr	r0, [r7, #0]
 800d322:	6028      	str	r0, [r5, #0]
 800d324:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800d328:	e9cd 3200 	strd	r3, r2, [sp]
 800d32c:	4640      	mov	r0, r8
 800d32e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d330:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800d332:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d334:	f007 f92c 	bl	8014590 <rcl_wait_set_init>
 800d338:	2800      	cmp	r0, #0
 800d33a:	d0d4      	beq.n	800d2e6 <rclc_executor_prepare+0x1a>
 800d33c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d33e:	f000 fac1 	bl	800d8c4 <rcutils_reset_error>
 800d342:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d344:	e7cf      	b.n	800d2e6 <rclc_executor_prepare+0x1a>
 800d346:	f000 fabd 	bl	800d8c4 <rcutils_reset_error>
 800d34a:	e7d4      	b.n	800d2f6 <rclc_executor_prepare+0x2a>
 800d34c:	200b      	movs	r0, #11
 800d34e:	4770      	bx	lr

0800d350 <rclc_executor_spin_some.part.0>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	f100 0814 	add.w	r8, r0, #20
 800d358:	b083      	sub	sp, #12
 800d35a:	4692      	mov	sl, r2
 800d35c:	4699      	mov	r9, r3
 800d35e:	4605      	mov	r5, r0
 800d360:	f7ff ffb4 	bl	800d2cc <rclc_executor_prepare>
 800d364:	4640      	mov	r0, r8
 800d366:	f006 fec1 	bl	80140ec <rcl_wait_set_clear>
 800d36a:	4607      	mov	r7, r0
 800d36c:	2800      	cmp	r0, #0
 800d36e:	f040 80be 	bne.w	800d4ee <rclc_executor_spin_some.part.0+0x19e>
 800d372:	68ab      	ldr	r3, [r5, #8]
 800d374:	4604      	mov	r4, r0
 800d376:	b1eb      	cbz	r3, 800d3b4 <rclc_executor_spin_some.part.0+0x64>
 800d378:	686e      	ldr	r6, [r5, #4]
 800d37a:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800d37e:	01a2      	lsls	r2, r4, #6
 800d380:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800d384:	b1b3      	cbz	r3, 800d3b4 <rclc_executor_spin_some.part.0+0x64>
 800d386:	5cb3      	ldrb	r3, [r6, r2]
 800d388:	2b08      	cmp	r3, #8
 800d38a:	f200 80a9 	bhi.w	800d4e0 <rclc_executor_spin_some.part.0+0x190>
 800d38e:	e8df f003 	tbb	[pc, r3]
 800d392:	8989      	.short	0x8989
 800d394:	057b7b93 	.word	0x057b7b93
 800d398:	0505      	.short	0x0505
 800d39a:	9d          	.byte	0x9d
 800d39b:	00          	.byte	0x00
 800d39c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d3a0:	4640      	mov	r0, r8
 800d3a2:	6849      	ldr	r1, [r1, #4]
 800d3a4:	f007 fa0a 	bl	80147bc <rcl_wait_set_add_service>
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	d175      	bne.n	800d498 <rclc_executor_spin_some.part.0+0x148>
 800d3ac:	68ab      	ldr	r3, [r5, #8]
 800d3ae:	3401      	adds	r4, #1
 800d3b0:	429c      	cmp	r4, r3
 800d3b2:	d3e1      	bcc.n	800d378 <rclc_executor_spin_some.part.0+0x28>
 800d3b4:	464b      	mov	r3, r9
 800d3b6:	4652      	mov	r2, sl
 800d3b8:	4640      	mov	r0, r8
 800d3ba:	f007 fa2d 	bl	8014818 <rcl_wait>
 800d3be:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 809b 	beq.w	800d4fe <rclc_executor_spin_some.part.0+0x1ae>
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	f040 8089 	bne.w	800d4e0 <rclc_executor_spin_some.part.0+0x190>
 800d3ce:	68ab      	ldr	r3, [r5, #8]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f000 80ef 	beq.w	800d5b4 <rclc_executor_spin_some.part.0+0x264>
 800d3d6:	2400      	movs	r4, #0
 800d3d8:	4626      	mov	r6, r4
 800d3da:	f240 1991 	movw	r9, #401	; 0x191
 800d3de:	e00a      	b.n	800d3f6 <rclc_executor_spin_some.part.0+0xa6>
 800d3e0:	f7ff fdd2 	bl	800cf88 <_rclc_check_for_new_data>
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	b110      	cbz	r0, 800d3ee <rclc_executor_spin_some.part.0+0x9e>
 800d3e8:	4548      	cmp	r0, r9
 800d3ea:	f040 8086 	bne.w	800d4fa <rclc_executor_spin_some.part.0+0x1aa>
 800d3ee:	68ab      	ldr	r3, [r5, #8]
 800d3f0:	429e      	cmp	r6, r3
 800d3f2:	f080 80db 	bcs.w	800d5ac <rclc_executor_spin_some.part.0+0x25c>
 800d3f6:	686a      	ldr	r2, [r5, #4]
 800d3f8:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d3fc:	4641      	mov	r1, r8
 800d3fe:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d402:	3601      	adds	r6, #1
 800d404:	f1bc 0f00 	cmp.w	ip, #0
 800d408:	d1ea      	bne.n	800d3e0 <rclc_executor_spin_some.part.0+0x90>
 800d40a:	4619      	mov	r1, r3
 800d40c:	4610      	mov	r0, r2
 800d40e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800d412:	4798      	blx	r3
 800d414:	2800      	cmp	r0, #0
 800d416:	d070      	beq.n	800d4fa <rclc_executor_spin_some.part.0+0x1aa>
 800d418:	68aa      	ldr	r2, [r5, #8]
 800d41a:	2a00      	cmp	r2, #0
 800d41c:	d06d      	beq.n	800d4fa <rclc_executor_spin_some.part.0+0x1aa>
 800d41e:	2600      	movs	r6, #0
 800d420:	f240 1991 	movw	r9, #401	; 0x191
 800d424:	e008      	b.n	800d438 <rclc_executor_spin_some.part.0+0xe8>
 800d426:	f7ff fdd5 	bl	800cfd4 <_rclc_take_new_data>
 800d42a:	4604      	mov	r4, r0
 800d42c:	b108      	cbz	r0, 800d432 <rclc_executor_spin_some.part.0+0xe2>
 800d42e:	4548      	cmp	r0, r9
 800d430:	d163      	bne.n	800d4fa <rclc_executor_spin_some.part.0+0x1aa>
 800d432:	68aa      	ldr	r2, [r5, #8]
 800d434:	4296      	cmp	r6, r2
 800d436:	d208      	bcs.n	800d44a <rclc_executor_spin_some.part.0+0xfa>
 800d438:	6868      	ldr	r0, [r5, #4]
 800d43a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800d43e:	4641      	mov	r1, r8
 800d440:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d444:	3601      	adds	r6, #1
 800d446:	2b00      	cmp	r3, #0
 800d448:	d1ed      	bne.n	800d426 <rclc_executor_spin_some.part.0+0xd6>
 800d44a:	2600      	movs	r6, #0
 800d44c:	b932      	cbnz	r2, 800d45c <rclc_executor_spin_some.part.0+0x10c>
 800d44e:	e054      	b.n	800d4fa <rclc_executor_spin_some.part.0+0x1aa>
 800d450:	2901      	cmp	r1, #1
 800d452:	d012      	beq.n	800d47a <rclc_executor_spin_some.part.0+0x12a>
 800d454:	3601      	adds	r6, #1
 800d456:	4296      	cmp	r6, r2
 800d458:	d245      	bcs.n	800d4e6 <rclc_executor_spin_some.part.0+0x196>
 800d45a:	2400      	movs	r4, #0
 800d45c:	686b      	ldr	r3, [r5, #4]
 800d45e:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800d462:	4618      	mov	r0, r3
 800d464:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800d468:	2900      	cmp	r1, #0
 800d46a:	d046      	beq.n	800d4fa <rclc_executor_spin_some.part.0+0x1aa>
 800d46c:	7859      	ldrb	r1, [r3, #1]
 800d46e:	2900      	cmp	r1, #0
 800d470:	d1ee      	bne.n	800d450 <rclc_executor_spin_some.part.0+0x100>
 800d472:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d476:	2b00      	cmp	r3, #0
 800d478:	d0ec      	beq.n	800d454 <rclc_executor_spin_some.part.0+0x104>
 800d47a:	f7ff fe15 	bl	800d0a8 <_rclc_execute.part.0>
 800d47e:	2800      	cmp	r0, #0
 800d480:	f040 8096 	bne.w	800d5b0 <rclc_executor_spin_some.part.0+0x260>
 800d484:	68aa      	ldr	r2, [r5, #8]
 800d486:	e7e5      	b.n	800d454 <rclc_executor_spin_some.part.0+0x104>
 800d488:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d48c:	4640      	mov	r0, r8
 800d48e:	6849      	ldr	r1, [r1, #4]
 800d490:	f007 f968 	bl	8014764 <rcl_wait_set_add_client>
 800d494:	2800      	cmp	r0, #0
 800d496:	d089      	beq.n	800d3ac <rclc_executor_spin_some.part.0+0x5c>
 800d498:	9001      	str	r0, [sp, #4]
 800d49a:	f000 fa13 	bl	800d8c4 <rcutils_reset_error>
 800d49e:	9801      	ldr	r0, [sp, #4]
 800d4a0:	4607      	mov	r7, r0
 800d4a2:	e020      	b.n	800d4e6 <rclc_executor_spin_some.part.0+0x196>
 800d4a4:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d4a8:	4640      	mov	r0, r8
 800d4aa:	6849      	ldr	r1, [r1, #4]
 800d4ac:	f006 fdf2 	bl	8014094 <rcl_wait_set_add_subscription>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	f43f af7b 	beq.w	800d3ac <rclc_executor_spin_some.part.0+0x5c>
 800d4b6:	e7ef      	b.n	800d498 <rclc_executor_spin_some.part.0+0x148>
 800d4b8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d4bc:	4640      	mov	r0, r8
 800d4be:	6849      	ldr	r1, [r1, #4]
 800d4c0:	f007 f920 	bl	8014704 <rcl_wait_set_add_timer>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	f43f af71 	beq.w	800d3ac <rclc_executor_spin_some.part.0+0x5c>
 800d4ca:	e7e5      	b.n	800d498 <rclc_executor_spin_some.part.0+0x148>
 800d4cc:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d4d0:	4640      	mov	r0, r8
 800d4d2:	6849      	ldr	r1, [r1, #4]
 800d4d4:	f007 f8ea 	bl	80146ac <rcl_wait_set_add_guard_condition>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	f43f af67 	beq.w	800d3ac <rclc_executor_spin_some.part.0+0x5c>
 800d4de:	e7db      	b.n	800d498 <rclc_executor_spin_some.part.0+0x148>
 800d4e0:	f000 f9f0 	bl	800d8c4 <rcutils_reset_error>
 800d4e4:	2701      	movs	r7, #1
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	b003      	add	sp, #12
 800d4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ee:	f000 f9e9 	bl	800d8c4 <rcutils_reset_error>
 800d4f2:	4638      	mov	r0, r7
 800d4f4:	b003      	add	sp, #12
 800d4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fa:	4627      	mov	r7, r4
 800d4fc:	e7f3      	b.n	800d4e6 <rclc_executor_spin_some.part.0+0x196>
 800d4fe:	68ab      	ldr	r3, [r5, #8]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d05a      	beq.n	800d5ba <rclc_executor_spin_some.part.0+0x26a>
 800d504:	2400      	movs	r4, #0
 800d506:	4626      	mov	r6, r4
 800d508:	f240 1991 	movw	r9, #401	; 0x191
 800d50c:	e008      	b.n	800d520 <rclc_executor_spin_some.part.0+0x1d0>
 800d50e:	f7ff fd3b 	bl	800cf88 <_rclc_check_for_new_data>
 800d512:	4604      	mov	r4, r0
 800d514:	b108      	cbz	r0, 800d51a <rclc_executor_spin_some.part.0+0x1ca>
 800d516:	4548      	cmp	r0, r9
 800d518:	d1ef      	bne.n	800d4fa <rclc_executor_spin_some.part.0+0x1aa>
 800d51a:	68ab      	ldr	r3, [r5, #8]
 800d51c:	429e      	cmp	r6, r3
 800d51e:	d243      	bcs.n	800d5a8 <rclc_executor_spin_some.part.0+0x258>
 800d520:	686a      	ldr	r2, [r5, #4]
 800d522:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d526:	4641      	mov	r1, r8
 800d528:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d52c:	3601      	adds	r6, #1
 800d52e:	f1bc 0f00 	cmp.w	ip, #0
 800d532:	d1ec      	bne.n	800d50e <rclc_executor_spin_some.part.0+0x1be>
 800d534:	4619      	mov	r1, r3
 800d536:	4610      	mov	r0, r2
 800d538:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800d53c:	4798      	blx	r3
 800d53e:	2800      	cmp	r0, #0
 800d540:	d0db      	beq.n	800d4fa <rclc_executor_spin_some.part.0+0x1aa>
 800d542:	68ab      	ldr	r3, [r5, #8]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d0d8      	beq.n	800d4fa <rclc_executor_spin_some.part.0+0x1aa>
 800d548:	f04f 0a00 	mov.w	sl, #0
 800d54c:	f240 1691 	movw	r6, #401	; 0x191
 800d550:	f240 2959 	movw	r9, #601	; 0x259
 800d554:	e00b      	b.n	800d56e <rclc_executor_spin_some.part.0+0x21e>
 800d556:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800d55a:	b113      	cbz	r3, 800d562 <rclc_executor_spin_some.part.0+0x212>
 800d55c:	f7ff fda4 	bl	800d0a8 <_rclc_execute.part.0>
 800d560:	bb30      	cbnz	r0, 800d5b0 <rclc_executor_spin_some.part.0+0x260>
 800d562:	68ab      	ldr	r3, [r5, #8]
 800d564:	f10a 0a01 	add.w	sl, sl, #1
 800d568:	459a      	cmp	sl, r3
 800d56a:	d2bc      	bcs.n	800d4e6 <rclc_executor_spin_some.part.0+0x196>
 800d56c:	2400      	movs	r4, #0
 800d56e:	6868      	ldr	r0, [r5, #4]
 800d570:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800d574:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d578:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d0bc      	beq.n	800d4fa <rclc_executor_spin_some.part.0+0x1aa>
 800d580:	4641      	mov	r1, r8
 800d582:	f7ff fd27 	bl	800cfd4 <_rclc_take_new_data>
 800d586:	b118      	cbz	r0, 800d590 <rclc_executor_spin_some.part.0+0x240>
 800d588:	42b0      	cmp	r0, r6
 800d58a:	d001      	beq.n	800d590 <rclc_executor_spin_some.part.0+0x240>
 800d58c:	4548      	cmp	r0, r9
 800d58e:	d10f      	bne.n	800d5b0 <rclc_executor_spin_some.part.0+0x260>
 800d590:	6868      	ldr	r0, [r5, #4]
 800d592:	eb10 000b 	adds.w	r0, r0, fp
 800d596:	d005      	beq.n	800d5a4 <rclc_executor_spin_some.part.0+0x254>
 800d598:	7843      	ldrb	r3, [r0, #1]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d0db      	beq.n	800d556 <rclc_executor_spin_some.part.0+0x206>
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d1df      	bne.n	800d562 <rclc_executor_spin_some.part.0+0x212>
 800d5a2:	e7db      	b.n	800d55c <rclc_executor_spin_some.part.0+0x20c>
 800d5a4:	270b      	movs	r7, #11
 800d5a6:	e79e      	b.n	800d4e6 <rclc_executor_spin_some.part.0+0x196>
 800d5a8:	686a      	ldr	r2, [r5, #4]
 800d5aa:	e7c3      	b.n	800d534 <rclc_executor_spin_some.part.0+0x1e4>
 800d5ac:	686a      	ldr	r2, [r5, #4]
 800d5ae:	e72c      	b.n	800d40a <rclc_executor_spin_some.part.0+0xba>
 800d5b0:	4607      	mov	r7, r0
 800d5b2:	e798      	b.n	800d4e6 <rclc_executor_spin_some.part.0+0x196>
 800d5b4:	686a      	ldr	r2, [r5, #4]
 800d5b6:	461c      	mov	r4, r3
 800d5b8:	e727      	b.n	800d40a <rclc_executor_spin_some.part.0+0xba>
 800d5ba:	686a      	ldr	r2, [r5, #4]
 800d5bc:	461c      	mov	r4, r3
 800d5be:	e7b9      	b.n	800d534 <rclc_executor_spin_some.part.0+0x1e4>

0800d5c0 <rclc_executor_spin_some>:
 800d5c0:	b190      	cbz	r0, 800d5e8 <rclc_executor_spin_some+0x28>
 800d5c2:	b570      	push	{r4, r5, r6, lr}
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	6800      	ldr	r0, [r0, #0]
 800d5c8:	4616      	mov	r6, r2
 800d5ca:	461d      	mov	r5, r3
 800d5cc:	f005 faa2 	bl	8012b14 <rcl_context_is_valid>
 800d5d0:	b130      	cbz	r0, 800d5e0 <rclc_executor_spin_some+0x20>
 800d5d2:	4632      	mov	r2, r6
 800d5d4:	462b      	mov	r3, r5
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5dc:	f7ff beb8 	b.w	800d350 <rclc_executor_spin_some.part.0>
 800d5e0:	f000 f970 	bl	800d8c4 <rcutils_reset_error>
 800d5e4:	2001      	movs	r0, #1
 800d5e6:	bd70      	pop	{r4, r5, r6, pc}
 800d5e8:	200b      	movs	r0, #11
 800d5ea:	4770      	bx	lr

0800d5ec <rclc_executor_handle_counters_zero_init>:
 800d5ec:	b140      	cbz	r0, 800d600 <rclc_executor_handle_counters_zero_init+0x14>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	6003      	str	r3, [r0, #0]
 800d5f2:	6043      	str	r3, [r0, #4]
 800d5f4:	6083      	str	r3, [r0, #8]
 800d5f6:	60c3      	str	r3, [r0, #12]
 800d5f8:	6103      	str	r3, [r0, #16]
 800d5fa:	6143      	str	r3, [r0, #20]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	4770      	bx	lr
 800d600:	200b      	movs	r0, #11
 800d602:	4770      	bx	lr

0800d604 <rclc_executor_handle_init>:
 800d604:	b178      	cbz	r0, 800d626 <rclc_executor_handle_init+0x22>
 800d606:	b430      	push	{r4, r5}
 800d608:	4603      	mov	r3, r0
 800d60a:	2209      	movs	r2, #9
 800d60c:	2000      	movs	r0, #0
 800d60e:	2400      	movs	r4, #0
 800d610:	2500      	movs	r5, #0
 800d612:	801a      	strh	r2, [r3, #0]
 800d614:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800d618:	bc30      	pop	{r4, r5}
 800d61a:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800d61e:	6359      	str	r1, [r3, #52]	; 0x34
 800d620:	6318      	str	r0, [r3, #48]	; 0x30
 800d622:	8718      	strh	r0, [r3, #56]	; 0x38
 800d624:	4770      	bx	lr
 800d626:	200b      	movs	r0, #11
 800d628:	4770      	bx	lr
 800d62a:	bf00      	nop

0800d62c <rclc_support_init>:
 800d62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d630:	b086      	sub	sp, #24
 800d632:	2800      	cmp	r0, #0
 800d634:	d042      	beq.n	800d6bc <rclc_support_init+0x90>
 800d636:	461c      	mov	r4, r3
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d03f      	beq.n	800d6bc <rclc_support_init+0x90>
 800d63c:	460f      	mov	r7, r1
 800d63e:	4690      	mov	r8, r2
 800d640:	4606      	mov	r6, r0
 800d642:	f005 fd47 	bl	80130d4 <rcl_get_zero_initialized_init_options>
 800d646:	4603      	mov	r3, r0
 800d648:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800d64c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d650:	9305      	str	r3, [sp, #20]
 800d652:	a805      	add	r0, sp, #20
 800d654:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d658:	f005 fd3e 	bl	80130d8 <rcl_init_options_init>
 800d65c:	4605      	mov	r5, r0
 800d65e:	bb38      	cbnz	r0, 800d6b0 <rclc_support_init+0x84>
 800d660:	f005 fd38 	bl	80130d4 <rcl_get_zero_initialized_init_options>
 800d664:	4631      	mov	r1, r6
 800d666:	6030      	str	r0, [r6, #0]
 800d668:	a805      	add	r0, sp, #20
 800d66a:	f005 fdab 	bl	80131c4 <rcl_init_options_copy>
 800d66e:	4605      	mov	r5, r0
 800d670:	b9c0      	cbnz	r0, 800d6a4 <rclc_support_init+0x78>
 800d672:	ad02      	add	r5, sp, #8
 800d674:	4628      	mov	r0, r5
 800d676:	f005 fa43 	bl	8012b00 <rcl_get_zero_initialized_context>
 800d67a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d67e:	1d33      	adds	r3, r6, #4
 800d680:	e883 0003 	stmia.w	r3, {r0, r1}
 800d684:	4632      	mov	r2, r6
 800d686:	4641      	mov	r1, r8
 800d688:	4638      	mov	r0, r7
 800d68a:	f005 fc19 	bl	8012ec0 <rcl_init>
 800d68e:	4605      	mov	r5, r0
 800d690:	b940      	cbnz	r0, 800d6a4 <rclc_support_init+0x78>
 800d692:	60f4      	str	r4, [r6, #12]
 800d694:	4622      	mov	r2, r4
 800d696:	f106 0110 	add.w	r1, r6, #16
 800d69a:	2003      	movs	r0, #3
 800d69c:	f006 f95c 	bl	8013958 <rcl_clock_init>
 800d6a0:	4605      	mov	r5, r0
 800d6a2:	b108      	cbz	r0, 800d6a8 <rclc_support_init+0x7c>
 800d6a4:	f000 f90e 	bl	800d8c4 <rcutils_reset_error>
 800d6a8:	a805      	add	r0, sp, #20
 800d6aa:	f005 fd67 	bl	801317c <rcl_init_options_fini>
 800d6ae:	b108      	cbz	r0, 800d6b4 <rclc_support_init+0x88>
 800d6b0:	f000 f908 	bl	800d8c4 <rcutils_reset_error>
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	b006      	add	sp, #24
 800d6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6bc:	250b      	movs	r5, #11
 800d6be:	4628      	mov	r0, r5
 800d6c0:	b006      	add	sp, #24
 800d6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c6:	bf00      	nop

0800d6c8 <rclc_node_init_with_options>:
 800d6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6cc:	b087      	sub	sp, #28
 800d6ce:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800d6d0:	b1e0      	cbz	r0, 800d70c <rclc_node_init_with_options+0x44>
 800d6d2:	460d      	mov	r5, r1
 800d6d4:	b1d1      	cbz	r1, 800d70c <rclc_node_init_with_options+0x44>
 800d6d6:	4616      	mov	r6, r2
 800d6d8:	b1c2      	cbz	r2, 800d70c <rclc_node_init_with_options+0x44>
 800d6da:	4698      	mov	r8, r3
 800d6dc:	b1b3      	cbz	r3, 800d70c <rclc_node_init_with_options+0x44>
 800d6de:	b1af      	cbz	r7, 800d70c <rclc_node_init_with_options+0x44>
 800d6e0:	f10d 0910 	add.w	r9, sp, #16
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	4648      	mov	r0, r9
 800d6e8:	f005 fe34 	bl	8013354 <rcl_get_zero_initialized_node>
 800d6ec:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d6f0:	f108 0304 	add.w	r3, r8, #4
 800d6f4:	9700      	str	r7, [sp, #0]
 800d6f6:	4632      	mov	r2, r6
 800d6f8:	e884 0003 	stmia.w	r4, {r0, r1}
 800d6fc:	4629      	mov	r1, r5
 800d6fe:	4620      	mov	r0, r4
 800d700:	f005 fe32 	bl	8013368 <rcl_node_init>
 800d704:	b930      	cbnz	r0, 800d714 <rclc_node_init_with_options+0x4c>
 800d706:	b007      	add	sp, #28
 800d708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d70c:	200b      	movs	r0, #11
 800d70e:	b007      	add	sp, #28
 800d710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d714:	9003      	str	r0, [sp, #12]
 800d716:	f000 f8d5 	bl	800d8c4 <rcutils_reset_error>
 800d71a:	9803      	ldr	r0, [sp, #12]
 800d71c:	b007      	add	sp, #28
 800d71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d722:	bf00      	nop

0800d724 <rclc_publisher_init_default>:
 800d724:	b368      	cbz	r0, 800d782 <rclc_publisher_init_default+0x5e>
 800d726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d72a:	460d      	mov	r5, r1
 800d72c:	b09e      	sub	sp, #120	; 0x78
 800d72e:	b321      	cbz	r1, 800d77a <rclc_publisher_init_default+0x56>
 800d730:	4616      	mov	r6, r2
 800d732:	b312      	cbz	r2, 800d77a <rclc_publisher_init_default+0x56>
 800d734:	461f      	mov	r7, r3
 800d736:	b303      	cbz	r3, 800d77a <rclc_publisher_init_default+0x56>
 800d738:	4604      	mov	r4, r0
 800d73a:	f7ff f969 	bl	800ca10 <rcl_get_zero_initialized_publisher>
 800d73e:	f10d 0810 	add.w	r8, sp, #16
 800d742:	6020      	str	r0, [r4, #0]
 800d744:	4640      	mov	r0, r8
 800d746:	f7ff fa5f 	bl	800cc08 <rcl_publisher_get_default_options>
 800d74a:	490f      	ldr	r1, [pc, #60]	; (800d788 <rclc_publisher_init_default+0x64>)
 800d74c:	2250      	movs	r2, #80	; 0x50
 800d74e:	4640      	mov	r0, r8
 800d750:	f00b f881 	bl	8018856 <memcpy>
 800d754:	f8cd 8000 	str.w	r8, [sp]
 800d758:	463b      	mov	r3, r7
 800d75a:	4632      	mov	r2, r6
 800d75c:	4629      	mov	r1, r5
 800d75e:	4620      	mov	r0, r4
 800d760:	f7ff f95c 	bl	800ca1c <rcl_publisher_init>
 800d764:	b910      	cbnz	r0, 800d76c <rclc_publisher_init_default+0x48>
 800d766:	b01e      	add	sp, #120	; 0x78
 800d768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d76c:	9003      	str	r0, [sp, #12]
 800d76e:	f000 f8a9 	bl	800d8c4 <rcutils_reset_error>
 800d772:	9803      	ldr	r0, [sp, #12]
 800d774:	b01e      	add	sp, #120	; 0x78
 800d776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d77a:	200b      	movs	r0, #11
 800d77c:	b01e      	add	sp, #120	; 0x78
 800d77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d782:	200b      	movs	r0, #11
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop
 800d788:	08019a00 	.word	0x08019a00

0800d78c <rclc_subscription_init_default>:
 800d78c:	b368      	cbz	r0, 800d7ea <rclc_subscription_init_default+0x5e>
 800d78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d792:	460d      	mov	r5, r1
 800d794:	b0a0      	sub	sp, #128	; 0x80
 800d796:	b321      	cbz	r1, 800d7e2 <rclc_subscription_init_default+0x56>
 800d798:	4616      	mov	r6, r2
 800d79a:	b312      	cbz	r2, 800d7e2 <rclc_subscription_init_default+0x56>
 800d79c:	461f      	mov	r7, r3
 800d79e:	b303      	cbz	r3, 800d7e2 <rclc_subscription_init_default+0x56>
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	f7ff fa77 	bl	800cc94 <rcl_get_zero_initialized_subscription>
 800d7a6:	f10d 0810 	add.w	r8, sp, #16
 800d7aa:	6020      	str	r0, [r4, #0]
 800d7ac:	4640      	mov	r0, r8
 800d7ae:	f7ff fb6d 	bl	800ce8c <rcl_subscription_get_default_options>
 800d7b2:	490f      	ldr	r1, [pc, #60]	; (800d7f0 <rclc_subscription_init_default+0x64>)
 800d7b4:	2250      	movs	r2, #80	; 0x50
 800d7b6:	4640      	mov	r0, r8
 800d7b8:	f00b f84d 	bl	8018856 <memcpy>
 800d7bc:	f8cd 8000 	str.w	r8, [sp]
 800d7c0:	463b      	mov	r3, r7
 800d7c2:	4632      	mov	r2, r6
 800d7c4:	4629      	mov	r1, r5
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	f7ff fa6a 	bl	800cca0 <rcl_subscription_init>
 800d7cc:	b910      	cbnz	r0, 800d7d4 <rclc_subscription_init_default+0x48>
 800d7ce:	b020      	add	sp, #128	; 0x80
 800d7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d4:	9003      	str	r0, [sp, #12]
 800d7d6:	f000 f875 	bl	800d8c4 <rcutils_reset_error>
 800d7da:	9803      	ldr	r0, [sp, #12]
 800d7dc:	b020      	add	sp, #128	; 0x80
 800d7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e2:	200b      	movs	r0, #11
 800d7e4:	b020      	add	sp, #128	; 0x80
 800d7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ea:	200b      	movs	r0, #11
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	08019a50 	.word	0x08019a50

0800d7f4 <__default_zero_allocate>:
 800d7f4:	f00a b9ec 	b.w	8017bd0 <calloc>

0800d7f8 <__default_reallocate>:
 800d7f8:	f00a bb78 	b.w	8017eec <realloc>

0800d7fc <__default_deallocate>:
 800d7fc:	f00a ba56 	b.w	8017cac <free>

0800d800 <__default_allocate>:
 800d800:	f00a ba4c 	b.w	8017c9c <malloc>

0800d804 <rcutils_get_zero_initialized_allocator>:
 800d804:	b470      	push	{r4, r5, r6}
 800d806:	4d05      	ldr	r5, [pc, #20]	; (800d81c <rcutils_get_zero_initialized_allocator+0x18>)
 800d808:	4606      	mov	r6, r0
 800d80a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d80c:	4634      	mov	r4, r6
 800d80e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d810:	682b      	ldr	r3, [r5, #0]
 800d812:	6023      	str	r3, [r4, #0]
 800d814:	4630      	mov	r0, r6
 800d816:	bc70      	pop	{r4, r5, r6}
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	08019aa0 	.word	0x08019aa0

0800d820 <rcutils_set_default_allocator>:
 800d820:	b1a0      	cbz	r0, 800d84c <rcutils_set_default_allocator+0x2c>
 800d822:	6801      	ldr	r1, [r0, #0]
 800d824:	b199      	cbz	r1, 800d84e <rcutils_set_default_allocator+0x2e>
 800d826:	b430      	push	{r4, r5}
 800d828:	6844      	ldr	r4, [r0, #4]
 800d82a:	b194      	cbz	r4, 800d852 <rcutils_set_default_allocator+0x32>
 800d82c:	68c5      	ldr	r5, [r0, #12]
 800d82e:	b15d      	cbz	r5, 800d848 <rcutils_set_default_allocator+0x28>
 800d830:	6883      	ldr	r3, [r0, #8]
 800d832:	b18b      	cbz	r3, 800d858 <rcutils_set_default_allocator+0x38>
 800d834:	4a09      	ldr	r2, [pc, #36]	; (800d85c <rcutils_set_default_allocator+0x3c>)
 800d836:	e9c2 1400 	strd	r1, r4, [r2]
 800d83a:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800d83e:	2000      	movs	r0, #0
 800d840:	6110      	str	r0, [r2, #16]
 800d842:	2001      	movs	r0, #1
 800d844:	bc30      	pop	{r4, r5}
 800d846:	4770      	bx	lr
 800d848:	4628      	mov	r0, r5
 800d84a:	e7fb      	b.n	800d844 <rcutils_set_default_allocator+0x24>
 800d84c:	4770      	bx	lr
 800d84e:	4608      	mov	r0, r1
 800d850:	4770      	bx	lr
 800d852:	4620      	mov	r0, r4
 800d854:	bc30      	pop	{r4, r5}
 800d856:	4770      	bx	lr
 800d858:	4618      	mov	r0, r3
 800d85a:	e7f3      	b.n	800d844 <rcutils_set_default_allocator+0x24>
 800d85c:	20000038 	.word	0x20000038

0800d860 <rcutils_get_default_allocator>:
 800d860:	b470      	push	{r4, r5, r6}
 800d862:	4d05      	ldr	r5, [pc, #20]	; (800d878 <rcutils_get_default_allocator+0x18>)
 800d864:	4606      	mov	r6, r0
 800d866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d868:	4634      	mov	r4, r6
 800d86a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d86c:	682b      	ldr	r3, [r5, #0]
 800d86e:	6023      	str	r3, [r4, #0]
 800d870:	4630      	mov	r0, r6
 800d872:	bc70      	pop	{r4, r5, r6}
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	20000038 	.word	0x20000038

0800d87c <rcutils_allocator_is_valid>:
 800d87c:	b158      	cbz	r0, 800d896 <rcutils_allocator_is_valid+0x1a>
 800d87e:	6803      	ldr	r3, [r0, #0]
 800d880:	b143      	cbz	r3, 800d894 <rcutils_allocator_is_valid+0x18>
 800d882:	6843      	ldr	r3, [r0, #4]
 800d884:	b133      	cbz	r3, 800d894 <rcutils_allocator_is_valid+0x18>
 800d886:	68c3      	ldr	r3, [r0, #12]
 800d888:	b123      	cbz	r3, 800d894 <rcutils_allocator_is_valid+0x18>
 800d88a:	6880      	ldr	r0, [r0, #8]
 800d88c:	3800      	subs	r0, #0
 800d88e:	bf18      	it	ne
 800d890:	2001      	movne	r0, #1
 800d892:	4770      	bx	lr
 800d894:	4618      	mov	r0, r3
 800d896:	4770      	bx	lr

0800d898 <rcutils_get_error_string>:
 800d898:	4b06      	ldr	r3, [pc, #24]	; (800d8b4 <rcutils_get_error_string+0x1c>)
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	b13b      	cbz	r3, 800d8ae <rcutils_get_error_string+0x16>
 800d89e:	4b06      	ldr	r3, [pc, #24]	; (800d8b8 <rcutils_get_error_string+0x20>)
 800d8a0:	781a      	ldrb	r2, [r3, #0]
 800d8a2:	b90a      	cbnz	r2, 800d8a8 <rcutils_get_error_string+0x10>
 800d8a4:	2201      	movs	r2, #1
 800d8a6:	701a      	strb	r2, [r3, #0]
 800d8a8:	4b04      	ldr	r3, [pc, #16]	; (800d8bc <rcutils_get_error_string+0x24>)
 800d8aa:	7818      	ldrb	r0, [r3, #0]
 800d8ac:	4770      	bx	lr
 800d8ae:	4b04      	ldr	r3, [pc, #16]	; (800d8c0 <rcutils_get_error_string+0x28>)
 800d8b0:	7818      	ldrb	r0, [r3, #0]
 800d8b2:	4770      	bx	lr
 800d8b4:	20009c20 	.word	0x20009c20
 800d8b8:	20009c21 	.word	0x20009c21
 800d8bc:	20009e88 	.word	0x20009e88
 800d8c0:	08019ab4 	.word	0x08019ab4

0800d8c4 <rcutils_reset_error>:
 800d8c4:	b4d0      	push	{r4, r6, r7}
 800d8c6:	4a07      	ldr	r2, [pc, #28]	; (800d8e4 <rcutils_reset_error+0x20>)
 800d8c8:	4807      	ldr	r0, [pc, #28]	; (800d8e8 <rcutils_reset_error+0x24>)
 800d8ca:	4c08      	ldr	r4, [pc, #32]	; (800d8ec <rcutils_reset_error+0x28>)
 800d8cc:	4908      	ldr	r1, [pc, #32]	; (800d8f0 <rcutils_reset_error+0x2c>)
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	2600      	movs	r6, #0
 800d8d2:	2700      	movs	r7, #0
 800d8d4:	8013      	strh	r3, [r2, #0]
 800d8d6:	7003      	strb	r3, [r0, #0]
 800d8d8:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800d8dc:	7023      	strb	r3, [r4, #0]
 800d8de:	700b      	strb	r3, [r1, #0]
 800d8e0:	bcd0      	pop	{r4, r6, r7}
 800d8e2:	4770      	bx	lr
 800d8e4:	20009e90 	.word	0x20009e90
 800d8e8:	20009e88 	.word	0x20009e88
 800d8ec:	20009c21 	.word	0x20009c21
 800d8f0:	20009c20 	.word	0x20009c20

0800d8f4 <rcutils_get_zero_initialized_string_map>:
 800d8f4:	4b01      	ldr	r3, [pc, #4]	; (800d8fc <rcutils_get_zero_initialized_string_map+0x8>)
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	6018      	str	r0, [r3, #0]
 800d8fa:	4770      	bx	lr
 800d8fc:	20009c24 	.word	0x20009c24

0800d900 <rcutils_string_map_reserve>:
 800d900:	2800      	cmp	r0, #0
 800d902:	d061      	beq.n	800d9c8 <rcutils_string_map_reserve+0xc8>
 800d904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d908:	6805      	ldr	r5, [r0, #0]
 800d90a:	b083      	sub	sp, #12
 800d90c:	460c      	mov	r4, r1
 800d90e:	4606      	mov	r6, r0
 800d910:	b12d      	cbz	r5, 800d91e <rcutils_string_map_reserve+0x1e>
 800d912:	68eb      	ldr	r3, [r5, #12]
 800d914:	42a3      	cmp	r3, r4
 800d916:	d906      	bls.n	800d926 <rcutils_string_map_reserve+0x26>
 800d918:	461c      	mov	r4, r3
 800d91a:	2d00      	cmp	r5, #0
 800d91c:	d1f9      	bne.n	800d912 <rcutils_string_map_reserve+0x12>
 800d91e:	201f      	movs	r0, #31
 800d920:	b003      	add	sp, #12
 800d922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d926:	68ab      	ldr	r3, [r5, #8]
 800d928:	42a3      	cmp	r3, r4
 800d92a:	d049      	beq.n	800d9c0 <rcutils_string_map_reserve+0xc0>
 800d92c:	6a2f      	ldr	r7, [r5, #32]
 800d92e:	2c00      	cmp	r4, #0
 800d930:	d035      	beq.n	800d99e <rcutils_string_map_reserve+0x9e>
 800d932:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800d936:	d245      	bcs.n	800d9c4 <rcutils_string_map_reserve+0xc4>
 800d938:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800d93c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800d940:	6828      	ldr	r0, [r5, #0]
 800d942:	4641      	mov	r1, r8
 800d944:	463a      	mov	r2, r7
 800d946:	47c8      	blx	r9
 800d948:	2800      	cmp	r0, #0
 800d94a:	d03b      	beq.n	800d9c4 <rcutils_string_map_reserve+0xc4>
 800d94c:	6833      	ldr	r3, [r6, #0]
 800d94e:	463a      	mov	r2, r7
 800d950:	6018      	str	r0, [r3, #0]
 800d952:	4641      	mov	r1, r8
 800d954:	6858      	ldr	r0, [r3, #4]
 800d956:	47c8      	blx	r9
 800d958:	2800      	cmp	r0, #0
 800d95a:	d033      	beq.n	800d9c4 <rcutils_string_map_reserve+0xc4>
 800d95c:	6835      	ldr	r5, [r6, #0]
 800d95e:	68ab      	ldr	r3, [r5, #8]
 800d960:	6068      	str	r0, [r5, #4]
 800d962:	42a3      	cmp	r3, r4
 800d964:	d227      	bcs.n	800d9b6 <rcutils_string_map_reserve+0xb6>
 800d966:	682a      	ldr	r2, [r5, #0]
 800d968:	eb00 0108 	add.w	r1, r0, r8
 800d96c:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800d970:	428f      	cmp	r7, r1
 800d972:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d976:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800d97a:	d203      	bcs.n	800d984 <rcutils_string_map_reserve+0x84>
 800d97c:	eb02 0108 	add.w	r1, r2, r8
 800d980:	428e      	cmp	r6, r1
 800d982:	d323      	bcc.n	800d9cc <rcutils_string_map_reserve+0xcc>
 800d984:	1ae3      	subs	r3, r4, r3
 800d986:	009a      	lsls	r2, r3, #2
 800d988:	4638      	mov	r0, r7
 800d98a:	2100      	movs	r1, #0
 800d98c:	9201      	str	r2, [sp, #4]
 800d98e:	f00a fe43 	bl	8018618 <memset>
 800d992:	9a01      	ldr	r2, [sp, #4]
 800d994:	4630      	mov	r0, r6
 800d996:	2100      	movs	r1, #0
 800d998:	f00a fe3e 	bl	8018618 <memset>
 800d99c:	e00b      	b.n	800d9b6 <rcutils_string_map_reserve+0xb6>
 800d99e:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800d9a2:	6828      	ldr	r0, [r5, #0]
 800d9a4:	4639      	mov	r1, r7
 800d9a6:	47c0      	blx	r8
 800d9a8:	6833      	ldr	r3, [r6, #0]
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	6858      	ldr	r0, [r3, #4]
 800d9ae:	601c      	str	r4, [r3, #0]
 800d9b0:	47c0      	blx	r8
 800d9b2:	6835      	ldr	r5, [r6, #0]
 800d9b4:	606c      	str	r4, [r5, #4]
 800d9b6:	2000      	movs	r0, #0
 800d9b8:	60ac      	str	r4, [r5, #8]
 800d9ba:	b003      	add	sp, #12
 800d9bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9c0:	2000      	movs	r0, #0
 800d9c2:	e7ad      	b.n	800d920 <rcutils_string_map_reserve+0x20>
 800d9c4:	200a      	movs	r0, #10
 800d9c6:	e7ab      	b.n	800d920 <rcutils_string_map_reserve+0x20>
 800d9c8:	200b      	movs	r0, #11
 800d9ca:	4770      	bx	lr
 800d9cc:	1f13      	subs	r3, r2, #4
 800d9ce:	f1ac 0c04 	sub.w	ip, ip, #4
 800d9d2:	4498      	add	r8, r3
 800d9d4:	4460      	add	r0, ip
 800d9d6:	4462      	add	r2, ip
 800d9d8:	2300      	movs	r3, #0
 800d9da:	f842 3f04 	str.w	r3, [r2, #4]!
 800d9de:	4542      	cmp	r2, r8
 800d9e0:	f840 3f04 	str.w	r3, [r0, #4]!
 800d9e4:	d1f9      	bne.n	800d9da <rcutils_string_map_reserve+0xda>
 800d9e6:	e7e6      	b.n	800d9b6 <rcutils_string_map_reserve+0xb6>

0800d9e8 <rcutils_string_map_init>:
 800d9e8:	b082      	sub	sp, #8
 800d9ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ec:	460e      	mov	r6, r1
 800d9ee:	a906      	add	r1, sp, #24
 800d9f0:	e881 000c 	stmia.w	r1, {r2, r3}
 800d9f4:	b380      	cbz	r0, 800da58 <rcutils_string_map_init+0x70>
 800d9f6:	6807      	ldr	r7, [r0, #0]
 800d9f8:	4604      	mov	r4, r0
 800d9fa:	b12f      	cbz	r7, 800da08 <rcutils_string_map_init+0x20>
 800d9fc:	251e      	movs	r5, #30
 800d9fe:	4628      	mov	r0, r5
 800da00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da04:	b002      	add	sp, #8
 800da06:	4770      	bx	lr
 800da08:	a806      	add	r0, sp, #24
 800da0a:	f7ff ff37 	bl	800d87c <rcutils_allocator_is_valid>
 800da0e:	b318      	cbz	r0, 800da58 <rcutils_string_map_init+0x70>
 800da10:	9b06      	ldr	r3, [sp, #24]
 800da12:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da14:	2024      	movs	r0, #36	; 0x24
 800da16:	4798      	blx	r3
 800da18:	4605      	mov	r5, r0
 800da1a:	6020      	str	r0, [r4, #0]
 800da1c:	b310      	cbz	r0, 800da64 <rcutils_string_map_init+0x7c>
 800da1e:	f10d 0e18 	add.w	lr, sp, #24
 800da22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800da26:	f105 0c10 	add.w	ip, r5, #16
 800da2a:	e9c5 7700 	strd	r7, r7, [r5]
 800da2e:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800da32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da36:	f8de 3000 	ldr.w	r3, [lr]
 800da3a:	f8cc 3000 	str.w	r3, [ip]
 800da3e:	4631      	mov	r1, r6
 800da40:	4620      	mov	r0, r4
 800da42:	f7ff ff5d 	bl	800d900 <rcutils_string_map_reserve>
 800da46:	4605      	mov	r5, r0
 800da48:	2800      	cmp	r0, #0
 800da4a:	d0d8      	beq.n	800d9fe <rcutils_string_map_init+0x16>
 800da4c:	9b07      	ldr	r3, [sp, #28]
 800da4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da50:	6820      	ldr	r0, [r4, #0]
 800da52:	4798      	blx	r3
 800da54:	6027      	str	r7, [r4, #0]
 800da56:	e7d2      	b.n	800d9fe <rcutils_string_map_init+0x16>
 800da58:	250b      	movs	r5, #11
 800da5a:	4628      	mov	r0, r5
 800da5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da60:	b002      	add	sp, #8
 800da62:	4770      	bx	lr
 800da64:	250a      	movs	r5, #10
 800da66:	e7ca      	b.n	800d9fe <rcutils_string_map_init+0x16>

0800da68 <rcutils_string_map_fini>:
 800da68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6c:	b082      	sub	sp, #8
 800da6e:	2800      	cmp	r0, #0
 800da70:	d039      	beq.n	800dae6 <rcutils_string_map_fini+0x7e>
 800da72:	6804      	ldr	r4, [r0, #0]
 800da74:	4606      	mov	r6, r0
 800da76:	2c00      	cmp	r4, #0
 800da78:	d031      	beq.n	800dade <rcutils_string_map_fini+0x76>
 800da7a:	68a3      	ldr	r3, [r4, #8]
 800da7c:	b323      	cbz	r3, 800dac8 <rcutils_string_map_fini+0x60>
 800da7e:	2500      	movs	r5, #0
 800da80:	6822      	ldr	r2, [r4, #0]
 800da82:	46a8      	mov	r8, r5
 800da84:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800da88:	b1d8      	cbz	r0, 800dac2 <rcutils_string_map_fini+0x5a>
 800da8a:	6a21      	ldr	r1, [r4, #32]
 800da8c:	6967      	ldr	r7, [r4, #20]
 800da8e:	9101      	str	r1, [sp, #4]
 800da90:	47b8      	blx	r7
 800da92:	e9d4 2300 	ldrd	r2, r3, [r4]
 800da96:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800da9a:	9901      	ldr	r1, [sp, #4]
 800da9c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800daa0:	47b8      	blx	r7
 800daa2:	68e3      	ldr	r3, [r4, #12]
 800daa4:	6862      	ldr	r2, [r4, #4]
 800daa6:	3b01      	subs	r3, #1
 800daa8:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800daac:	60e3      	str	r3, [r4, #12]
 800daae:	6834      	ldr	r4, [r6, #0]
 800dab0:	68a3      	ldr	r3, [r4, #8]
 800dab2:	3501      	adds	r5, #1
 800dab4:	429d      	cmp	r5, r3
 800dab6:	d207      	bcs.n	800dac8 <rcutils_string_map_fini+0x60>
 800dab8:	6822      	ldr	r2, [r4, #0]
 800daba:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800dabe:	2800      	cmp	r0, #0
 800dac0:	d1e3      	bne.n	800da8a <rcutils_string_map_fini+0x22>
 800dac2:	3501      	adds	r5, #1
 800dac4:	429d      	cmp	r5, r3
 800dac6:	d3dd      	bcc.n	800da84 <rcutils_string_map_fini+0x1c>
 800dac8:	2100      	movs	r1, #0
 800daca:	4630      	mov	r0, r6
 800dacc:	f7ff ff18 	bl	800d900 <rcutils_string_map_reserve>
 800dad0:	4604      	mov	r4, r0
 800dad2:	b920      	cbnz	r0, 800dade <rcutils_string_map_fini+0x76>
 800dad4:	6830      	ldr	r0, [r6, #0]
 800dad6:	6943      	ldr	r3, [r0, #20]
 800dad8:	6a01      	ldr	r1, [r0, #32]
 800dada:	4798      	blx	r3
 800dadc:	6034      	str	r4, [r6, #0]
 800dade:	4620      	mov	r0, r4
 800dae0:	b002      	add	sp, #8
 800dae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae6:	240b      	movs	r4, #11
 800dae8:	4620      	mov	r0, r4
 800daea:	b002      	add	sp, #8
 800daec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800daf0 <rcutils_string_map_getn>:
 800daf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800daf4:	b082      	sub	sp, #8
 800daf6:	b308      	cbz	r0, 800db3c <rcutils_string_map_getn+0x4c>
 800daf8:	6804      	ldr	r4, [r0, #0]
 800dafa:	b304      	cbz	r4, 800db3e <rcutils_string_map_getn+0x4e>
 800dafc:	460d      	mov	r5, r1
 800dafe:	b1e9      	cbz	r1, 800db3c <rcutils_string_map_getn+0x4c>
 800db00:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800db04:	6827      	ldr	r7, [r4, #0]
 800db06:	f1b9 0f00 	cmp.w	r9, #0
 800db0a:	d017      	beq.n	800db3c <rcutils_string_map_getn+0x4c>
 800db0c:	4690      	mov	r8, r2
 800db0e:	3f04      	subs	r7, #4
 800db10:	2600      	movs	r6, #0
 800db12:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800db16:	9101      	str	r1, [sp, #4]
 800db18:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800db1c:	4608      	mov	r0, r1
 800db1e:	3601      	adds	r6, #1
 800db20:	b151      	cbz	r1, 800db38 <rcutils_string_map_getn+0x48>
 800db22:	f7f2 fb67 	bl	80001f4 <strlen>
 800db26:	4540      	cmp	r0, r8
 800db28:	4602      	mov	r2, r0
 800db2a:	9901      	ldr	r1, [sp, #4]
 800db2c:	bf38      	it	cc
 800db2e:	4642      	movcc	r2, r8
 800db30:	4628      	mov	r0, r5
 800db32:	f00a fd86 	bl	8018642 <strncmp>
 800db36:	b130      	cbz	r0, 800db46 <rcutils_string_map_getn+0x56>
 800db38:	45b1      	cmp	r9, r6
 800db3a:	d1ea      	bne.n	800db12 <rcutils_string_map_getn+0x22>
 800db3c:	2400      	movs	r4, #0
 800db3e:	4620      	mov	r0, r4
 800db40:	b002      	add	sp, #8
 800db42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db46:	6863      	ldr	r3, [r4, #4]
 800db48:	f853 400a 	ldr.w	r4, [r3, sl]
 800db4c:	4620      	mov	r0, r4
 800db4e:	b002      	add	sp, #8
 800db50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800db54 <rcutils_system_time_now>:
 800db54:	b310      	cbz	r0, 800db9c <rcutils_system_time_now+0x48>
 800db56:	b570      	push	{r4, r5, r6, lr}
 800db58:	b084      	sub	sp, #16
 800db5a:	4669      	mov	r1, sp
 800db5c:	4604      	mov	r4, r0
 800db5e:	2001      	movs	r0, #1
 800db60:	f7f4 ff2a 	bl	80029b8 <clock_gettime>
 800db64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db68:	2800      	cmp	r0, #0
 800db6a:	f171 0300 	sbcs.w	r3, r1, #0
 800db6e:	db12      	blt.n	800db96 <rcutils_system_time_now+0x42>
 800db70:	9d02      	ldr	r5, [sp, #8]
 800db72:	2d00      	cmp	r5, #0
 800db74:	db0c      	blt.n	800db90 <rcutils_system_time_now+0x3c>
 800db76:	4e0a      	ldr	r6, [pc, #40]	; (800dba0 <rcutils_system_time_now+0x4c>)
 800db78:	fba0 2306 	umull	r2, r3, r0, r6
 800db7c:	1952      	adds	r2, r2, r5
 800db7e:	fb06 3301 	mla	r3, r6, r1, r3
 800db82:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800db86:	2000      	movs	r0, #0
 800db88:	e9c4 2300 	strd	r2, r3, [r4]
 800db8c:	b004      	add	sp, #16
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	ea50 0301 	orrs.w	r3, r0, r1
 800db94:	d1ef      	bne.n	800db76 <rcutils_system_time_now+0x22>
 800db96:	2002      	movs	r0, #2
 800db98:	b004      	add	sp, #16
 800db9a:	bd70      	pop	{r4, r5, r6, pc}
 800db9c:	200b      	movs	r0, #11
 800db9e:	4770      	bx	lr
 800dba0:	3b9aca00 	.word	0x3b9aca00

0800dba4 <rcutils_steady_time_now>:
 800dba4:	b310      	cbz	r0, 800dbec <rcutils_steady_time_now+0x48>
 800dba6:	b570      	push	{r4, r5, r6, lr}
 800dba8:	b084      	sub	sp, #16
 800dbaa:	4669      	mov	r1, sp
 800dbac:	4604      	mov	r4, r0
 800dbae:	2000      	movs	r0, #0
 800dbb0:	f7f4 ff02 	bl	80029b8 <clock_gettime>
 800dbb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	f171 0300 	sbcs.w	r3, r1, #0
 800dbbe:	db12      	blt.n	800dbe6 <rcutils_steady_time_now+0x42>
 800dbc0:	9d02      	ldr	r5, [sp, #8]
 800dbc2:	2d00      	cmp	r5, #0
 800dbc4:	db0c      	blt.n	800dbe0 <rcutils_steady_time_now+0x3c>
 800dbc6:	4e0a      	ldr	r6, [pc, #40]	; (800dbf0 <rcutils_steady_time_now+0x4c>)
 800dbc8:	fba0 2306 	umull	r2, r3, r0, r6
 800dbcc:	1952      	adds	r2, r2, r5
 800dbce:	fb06 3301 	mla	r3, r6, r1, r3
 800dbd2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800dbd6:	2000      	movs	r0, #0
 800dbd8:	e9c4 2300 	strd	r2, r3, [r4]
 800dbdc:	b004      	add	sp, #16
 800dbde:	bd70      	pop	{r4, r5, r6, pc}
 800dbe0:	ea50 0301 	orrs.w	r3, r0, r1
 800dbe4:	d1ef      	bne.n	800dbc6 <rcutils_steady_time_now+0x22>
 800dbe6:	2002      	movs	r0, #2
 800dbe8:	b004      	add	sp, #16
 800dbea:	bd70      	pop	{r4, r5, r6, pc}
 800dbec:	200b      	movs	r0, #11
 800dbee:	4770      	bx	lr
 800dbf0:	3b9aca00 	.word	0x3b9aca00

0800dbf4 <rmw_get_default_publisher_options>:
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	4770      	bx	lr

0800dbf8 <rmw_get_default_subscription_options>:
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	6002      	str	r2, [r0, #0]
 800dbfc:	7102      	strb	r2, [r0, #4]
 800dbfe:	4770      	bx	lr

0800dc00 <rmw_get_zero_initialized_message_info>:
 800dc00:	b470      	push	{r4, r5, r6}
 800dc02:	4d07      	ldr	r5, [pc, #28]	; (800dc20 <rmw_get_zero_initialized_message_info+0x20>)
 800dc04:	4606      	mov	r6, r0
 800dc06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc08:	4634      	mov	r4, r6
 800dc0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dc0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dc10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dc14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc18:	4630      	mov	r0, r6
 800dc1a:	bc70      	pop	{r4, r5, r6}
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	08019878 	.word	0x08019878

0800dc24 <rmw_validate_full_topic_name>:
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d062      	beq.n	800dcee <rmw_validate_full_topic_name+0xca>
 800dc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc2c:	460d      	mov	r5, r1
 800dc2e:	2900      	cmp	r1, #0
 800dc30:	d05f      	beq.n	800dcf2 <rmw_validate_full_topic_name+0xce>
 800dc32:	4616      	mov	r6, r2
 800dc34:	4604      	mov	r4, r0
 800dc36:	f7f2 fadd 	bl	80001f4 <strlen>
 800dc3a:	b148      	cbz	r0, 800dc50 <rmw_validate_full_topic_name+0x2c>
 800dc3c:	7823      	ldrb	r3, [r4, #0]
 800dc3e:	2b2f      	cmp	r3, #47	; 0x2f
 800dc40:	d00d      	beq.n	800dc5e <rmw_validate_full_topic_name+0x3a>
 800dc42:	2302      	movs	r3, #2
 800dc44:	602b      	str	r3, [r5, #0]
 800dc46:	b13e      	cbz	r6, 800dc58 <rmw_validate_full_topic_name+0x34>
 800dc48:	2000      	movs	r0, #0
 800dc4a:	6030      	str	r0, [r6, #0]
 800dc4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc50:	2301      	movs	r3, #1
 800dc52:	602b      	str	r3, [r5, #0]
 800dc54:	2e00      	cmp	r6, #0
 800dc56:	d1f7      	bne.n	800dc48 <rmw_validate_full_topic_name+0x24>
 800dc58:	2000      	movs	r0, #0
 800dc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc5e:	1e47      	subs	r7, r0, #1
 800dc60:	5de3      	ldrb	r3, [r4, r7]
 800dc62:	2b2f      	cmp	r3, #47	; 0x2f
 800dc64:	d047      	beq.n	800dcf6 <rmw_validate_full_topic_name+0xd2>
 800dc66:	1e63      	subs	r3, r4, #1
 800dc68:	eb03 0900 	add.w	r9, r3, r0
 800dc6c:	f1c4 0e01 	rsb	lr, r4, #1
 800dc70:	eb0e 0803 	add.w	r8, lr, r3
 800dc74:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800dc78:	f021 0220 	bic.w	r2, r1, #32
 800dc7c:	3a41      	subs	r2, #65	; 0x41
 800dc7e:	2a19      	cmp	r2, #25
 800dc80:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800dc84:	d90c      	bls.n	800dca0 <rmw_validate_full_topic_name+0x7c>
 800dc86:	295f      	cmp	r1, #95	; 0x5f
 800dc88:	d00a      	beq.n	800dca0 <rmw_validate_full_topic_name+0x7c>
 800dc8a:	f1bc 0f0a 	cmp.w	ip, #10
 800dc8e:	d907      	bls.n	800dca0 <rmw_validate_full_topic_name+0x7c>
 800dc90:	2304      	movs	r3, #4
 800dc92:	602b      	str	r3, [r5, #0]
 800dc94:	2e00      	cmp	r6, #0
 800dc96:	d0df      	beq.n	800dc58 <rmw_validate_full_topic_name+0x34>
 800dc98:	f8c6 8000 	str.w	r8, [r6]
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	e7d5      	b.n	800dc4c <rmw_validate_full_topic_name+0x28>
 800dca0:	454b      	cmp	r3, r9
 800dca2:	d1e5      	bne.n	800dc70 <rmw_validate_full_topic_name+0x4c>
 800dca4:	f8df e084 	ldr.w	lr, [pc, #132]	; 800dd2c <rmw_validate_full_topic_name+0x108>
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f107 0801 	add.w	r8, r7, #1
 800dcae:	e005      	b.n	800dcbc <rmw_validate_full_topic_name+0x98>
 800dcb0:	4611      	mov	r1, r2
 800dcb2:	4288      	cmp	r0, r1
 800dcb4:	4613      	mov	r3, r2
 800dcb6:	f104 0401 	add.w	r4, r4, #1
 800dcba:	d925      	bls.n	800dd08 <rmw_validate_full_topic_name+0xe4>
 800dcbc:	429f      	cmp	r7, r3
 800dcbe:	f103 0201 	add.w	r2, r3, #1
 800dcc2:	d01e      	beq.n	800dd02 <rmw_validate_full_topic_name+0xde>
 800dcc4:	7821      	ldrb	r1, [r4, #0]
 800dcc6:	292f      	cmp	r1, #47	; 0x2f
 800dcc8:	d1f2      	bne.n	800dcb0 <rmw_validate_full_topic_name+0x8c>
 800dcca:	f894 c001 	ldrb.w	ip, [r4, #1]
 800dcce:	1c5a      	adds	r2, r3, #1
 800dcd0:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	d024      	beq.n	800dd22 <rmw_validate_full_topic_name+0xfe>
 800dcd8:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800dcdc:	075b      	lsls	r3, r3, #29
 800dcde:	d5e8      	bpl.n	800dcb2 <rmw_validate_full_topic_name+0x8e>
 800dce0:	2306      	movs	r3, #6
 800dce2:	602b      	str	r3, [r5, #0]
 800dce4:	2e00      	cmp	r6, #0
 800dce6:	d0b7      	beq.n	800dc58 <rmw_validate_full_topic_name+0x34>
 800dce8:	6032      	str	r2, [r6, #0]
 800dcea:	2000      	movs	r0, #0
 800dcec:	e7ae      	b.n	800dc4c <rmw_validate_full_topic_name+0x28>
 800dcee:	200b      	movs	r0, #11
 800dcf0:	4770      	bx	lr
 800dcf2:	200b      	movs	r0, #11
 800dcf4:	e7aa      	b.n	800dc4c <rmw_validate_full_topic_name+0x28>
 800dcf6:	2303      	movs	r3, #3
 800dcf8:	602b      	str	r3, [r5, #0]
 800dcfa:	2e00      	cmp	r6, #0
 800dcfc:	d0ac      	beq.n	800dc58 <rmw_validate_full_topic_name+0x34>
 800dcfe:	6037      	str	r7, [r6, #0]
 800dd00:	e7aa      	b.n	800dc58 <rmw_validate_full_topic_name+0x34>
 800dd02:	4641      	mov	r1, r8
 800dd04:	1c7a      	adds	r2, r7, #1
 800dd06:	e7d4      	b.n	800dcb2 <rmw_validate_full_topic_name+0x8e>
 800dd08:	28f7      	cmp	r0, #247	; 0xf7
 800dd0a:	d802      	bhi.n	800dd12 <rmw_validate_full_topic_name+0xee>
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	6028      	str	r0, [r5, #0]
 800dd10:	e79c      	b.n	800dc4c <rmw_validate_full_topic_name+0x28>
 800dd12:	2307      	movs	r3, #7
 800dd14:	602b      	str	r3, [r5, #0]
 800dd16:	2e00      	cmp	r6, #0
 800dd18:	d09e      	beq.n	800dc58 <rmw_validate_full_topic_name+0x34>
 800dd1a:	23f6      	movs	r3, #246	; 0xf6
 800dd1c:	6033      	str	r3, [r6, #0]
 800dd1e:	2000      	movs	r0, #0
 800dd20:	e794      	b.n	800dc4c <rmw_validate_full_topic_name+0x28>
 800dd22:	2305      	movs	r3, #5
 800dd24:	602b      	str	r3, [r5, #0]
 800dd26:	2e00      	cmp	r6, #0
 800dd28:	d1de      	bne.n	800dce8 <rmw_validate_full_topic_name+0xc4>
 800dd2a:	e795      	b.n	800dc58 <rmw_validate_full_topic_name+0x34>
 800dd2c:	0801a280 	.word	0x0801a280

0800dd30 <rmw_uros_set_custom_transport>:
 800dd30:	b470      	push	{r4, r5, r6}
 800dd32:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800dd36:	b162      	cbz	r2, 800dd52 <rmw_uros_set_custom_transport+0x22>
 800dd38:	b15b      	cbz	r3, 800dd52 <rmw_uros_set_custom_transport+0x22>
 800dd3a:	b155      	cbz	r5, 800dd52 <rmw_uros_set_custom_transport+0x22>
 800dd3c:	b14e      	cbz	r6, 800dd52 <rmw_uros_set_custom_transport+0x22>
 800dd3e:	4c06      	ldr	r4, [pc, #24]	; (800dd58 <rmw_uros_set_custom_transport+0x28>)
 800dd40:	7020      	strb	r0, [r4, #0]
 800dd42:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dd46:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dd4a:	6166      	str	r6, [r4, #20]
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	bc70      	pop	{r4, r5, r6}
 800dd50:	4770      	bx	lr
 800dd52:	200b      	movs	r0, #11
 800dd54:	bc70      	pop	{r4, r5, r6}
 800dd56:	4770      	bx	lr
 800dd58:	20009ea0 	.word	0x20009ea0

0800dd5c <flush_session>:
 800dd5c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800dd5e:	f002 bf03 	b.w	8010b68 <uxr_run_session_until_confirm_delivery>
 800dd62:	bf00      	nop

0800dd64 <rmw_publish>:
 800dd64:	2800      	cmp	r0, #0
 800dd66:	d053      	beq.n	800de10 <rmw_publish+0xac>
 800dd68:	b570      	push	{r4, r5, r6, lr}
 800dd6a:	460d      	mov	r5, r1
 800dd6c:	b08e      	sub	sp, #56	; 0x38
 800dd6e:	2900      	cmp	r1, #0
 800dd70:	d04b      	beq.n	800de0a <rmw_publish+0xa6>
 800dd72:	4604      	mov	r4, r0
 800dd74:	6800      	ldr	r0, [r0, #0]
 800dd76:	f000 fe33 	bl	800e9e0 <is_uxrce_rmw_identifier_valid>
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	d045      	beq.n	800de0a <rmw_publish+0xa6>
 800dd7e:	6866      	ldr	r6, [r4, #4]
 800dd80:	2e00      	cmp	r6, #0
 800dd82:	d042      	beq.n	800de0a <rmw_publish+0xa6>
 800dd84:	69b4      	ldr	r4, [r6, #24]
 800dd86:	4628      	mov	r0, r5
 800dd88:	6923      	ldr	r3, [r4, #16]
 800dd8a:	4798      	blx	r3
 800dd8c:	69f3      	ldr	r3, [r6, #28]
 800dd8e:	9005      	str	r0, [sp, #20]
 800dd90:	b113      	cbz	r3, 800dd98 <rmw_publish+0x34>
 800dd92:	a805      	add	r0, sp, #20
 800dd94:	4798      	blx	r3
 800dd96:	9805      	ldr	r0, [sp, #20]
 800dd98:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	9000      	str	r0, [sp, #0]
 800dda0:	6972      	ldr	r2, [r6, #20]
 800dda2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800dda4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800dda8:	ab06      	add	r3, sp, #24
 800ddaa:	f003 fce5 	bl	8011778 <uxr_prepare_output_stream>
 800ddae:	b1d8      	cbz	r0, 800dde8 <rmw_publish+0x84>
 800ddb0:	68a3      	ldr	r3, [r4, #8]
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	a906      	add	r1, sp, #24
 800ddb6:	4798      	blx	r3
 800ddb8:	6a33      	ldr	r3, [r6, #32]
 800ddba:	4604      	mov	r4, r0
 800ddbc:	b10b      	cbz	r3, 800ddc2 <rmw_publish+0x5e>
 800ddbe:	a806      	add	r0, sp, #24
 800ddc0:	4798      	blx	r3
 800ddc2:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ddcc:	d022      	beq.n	800de14 <rmw_publish+0xb0>
 800ddce:	6918      	ldr	r0, [r3, #16]
 800ddd0:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800ddd2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ddd6:	f002 fec7 	bl	8010b68 <uxr_run_session_until_confirm_delivery>
 800ddda:	4020      	ands	r0, r4
 800dddc:	b2c4      	uxtb	r4, r0
 800ddde:	f084 0001 	eor.w	r0, r4, #1
 800dde2:	b2c0      	uxtb	r0, r0
 800dde4:	b00e      	add	sp, #56	; 0x38
 800dde6:	bd70      	pop	{r4, r5, r6, pc}
 800dde8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ddec:	4a0c      	ldr	r2, [pc, #48]	; (800de20 <rmw_publish+0xbc>)
 800ddee:	6918      	ldr	r0, [r3, #16]
 800ddf0:	9b05      	ldr	r3, [sp, #20]
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800ddf8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ddfc:	6972      	ldr	r2, [r6, #20]
 800ddfe:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800de00:	ab06      	add	r3, sp, #24
 800de02:	f003 fce9 	bl	80117d8 <uxr_prepare_output_stream_fragmented>
 800de06:	2800      	cmp	r0, #0
 800de08:	d1d2      	bne.n	800ddb0 <rmw_publish+0x4c>
 800de0a:	2001      	movs	r0, #1
 800de0c:	b00e      	add	sp, #56	; 0x38
 800de0e:	bd70      	pop	{r4, r5, r6, pc}
 800de10:	2001      	movs	r0, #1
 800de12:	4770      	bx	lr
 800de14:	6918      	ldr	r0, [r3, #16]
 800de16:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de1a:	f002 fae9 	bl	80103f0 <uxr_flash_output_streams>
 800de1e:	e7de      	b.n	800ddde <rmw_publish+0x7a>
 800de20:	0800dd5d 	.word	0x0800dd5d

0800de24 <rmw_create_publisher>:
 800de24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de28:	b087      	sub	sp, #28
 800de2a:	2800      	cmp	r0, #0
 800de2c:	f000 80cc 	beq.w	800dfc8 <rmw_create_publisher+0x1a4>
 800de30:	460e      	mov	r6, r1
 800de32:	2900      	cmp	r1, #0
 800de34:	f000 80c8 	beq.w	800dfc8 <rmw_create_publisher+0x1a4>
 800de38:	4604      	mov	r4, r0
 800de3a:	6800      	ldr	r0, [r0, #0]
 800de3c:	4615      	mov	r5, r2
 800de3e:	4698      	mov	r8, r3
 800de40:	f000 fdce 	bl	800e9e0 <is_uxrce_rmw_identifier_valid>
 800de44:	2800      	cmp	r0, #0
 800de46:	f000 80bf 	beq.w	800dfc8 <rmw_create_publisher+0x1a4>
 800de4a:	2d00      	cmp	r5, #0
 800de4c:	f000 80bc 	beq.w	800dfc8 <rmw_create_publisher+0x1a4>
 800de50:	782b      	ldrb	r3, [r5, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	f000 80b8 	beq.w	800dfc8 <rmw_create_publisher+0x1a4>
 800de58:	f1b8 0f00 	cmp.w	r8, #0
 800de5c:	f000 80b4 	beq.w	800dfc8 <rmw_create_publisher+0x1a4>
 800de60:	485c      	ldr	r0, [pc, #368]	; (800dfd4 <rmw_create_publisher+0x1b0>)
 800de62:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800de66:	f007 f953 	bl	8015110 <get_memory>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	f000 80ac 	beq.w	800dfc8 <rmw_create_publisher+0x1a4>
 800de70:	68c4      	ldr	r4, [r0, #12]
 800de72:	2300      	movs	r3, #0
 800de74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800de78:	f007 f9b2 	bl	80151e0 <rmw_get_implementation_identifier>
 800de7c:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800de80:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800de84:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800de88:	4628      	mov	r0, r5
 800de8a:	f7f2 f9b3 	bl	80001f4 <strlen>
 800de8e:	3001      	adds	r0, #1
 800de90:	283c      	cmp	r0, #60	; 0x3c
 800de92:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800de96:	f200 8094 	bhi.w	800dfc2 <rmw_create_publisher+0x19e>
 800de9a:	4a4f      	ldr	r2, [pc, #316]	; (800dfd8 <rmw_create_publisher+0x1b4>)
 800de9c:	462b      	mov	r3, r5
 800de9e:	213c      	movs	r1, #60	; 0x3c
 800dea0:	4650      	mov	r0, sl
 800dea2:	f00a fa59 	bl	8018358 <sniprintf>
 800dea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800deaa:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800deae:	4641      	mov	r1, r8
 800deb0:	2250      	movs	r2, #80	; 0x50
 800deb2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800deb6:	f00a fcce 	bl	8018856 <memcpy>
 800deba:	f898 3008 	ldrb.w	r3, [r8, #8]
 800debe:	4947      	ldr	r1, [pc, #284]	; (800dfdc <rmw_create_publisher+0x1b8>)
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dec6:	bf0c      	ite	eq
 800dec8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800decc:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800ded0:	67a3      	str	r3, [r4, #120]	; 0x78
 800ded2:	2300      	movs	r3, #0
 800ded4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ded8:	4630      	mov	r0, r6
 800deda:	f000 fd8f 	bl	800e9fc <get_message_typesupport_handle>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d06f      	beq.n	800dfc2 <rmw_create_publisher+0x19e>
 800dee2:	6842      	ldr	r2, [r0, #4]
 800dee4:	61a2      	str	r2, [r4, #24]
 800dee6:	2a00      	cmp	r2, #0
 800dee8:	d06b      	beq.n	800dfc2 <rmw_create_publisher+0x19e>
 800deea:	4629      	mov	r1, r5
 800deec:	4643      	mov	r3, r8
 800deee:	4648      	mov	r0, r9
 800def0:	f007 fbc0 	bl	8015674 <create_topic>
 800def4:	6260      	str	r0, [r4, #36]	; 0x24
 800def6:	2800      	cmp	r0, #0
 800def8:	d063      	beq.n	800dfc2 <rmw_create_publisher+0x19e>
 800defa:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800defe:	f241 5398 	movw	r3, #5528	; 0x1598
 800df02:	2103      	movs	r1, #3
 800df04:	5ad0      	ldrh	r0, [r2, r3]
 800df06:	1c45      	adds	r5, r0, #1
 800df08:	52d5      	strh	r5, [r2, r3]
 800df0a:	f001 ffff 	bl	800ff0c <uxr_object_id>
 800df0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df12:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800df16:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800df1a:	6912      	ldr	r2, [r2, #16]
 800df1c:	6120      	str	r0, [r4, #16]
 800df1e:	f04f 0a06 	mov.w	sl, #6
 800df22:	f8cd a000 	str.w	sl, [sp]
 800df26:	6819      	ldr	r1, [r3, #0]
 800df28:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800df2c:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800df30:	6922      	ldr	r2, [r4, #16]
 800df32:	f001 fe9b 	bl	800fc6c <uxr_buffer_create_publisher_bin>
 800df36:	4602      	mov	r2, r0
 800df38:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800df3c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800df40:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800df44:	f000 fccc 	bl	800e8e0 <run_xrce_session>
 800df48:	b3b8      	cbz	r0, 800dfba <rmw_create_publisher+0x196>
 800df4a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800df4e:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800df52:	f241 539a 	movw	r3, #5530	; 0x159a
 800df56:	2105      	movs	r1, #5
 800df58:	5ad0      	ldrh	r0, [r2, r3]
 800df5a:	1c45      	adds	r5, r0, #1
 800df5c:	52d5      	strh	r5, [r2, r3]
 800df5e:	f001 ffd5 	bl	800ff0c <uxr_object_id>
 800df62:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800df66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df6a:	6915      	ldr	r5, [r2, #16]
 800df6c:	6160      	str	r0, [r4, #20]
 800df6e:	ae04      	add	r6, sp, #16
 800df70:	4641      	mov	r1, r8
 800df72:	4630      	mov	r0, r6
 800df74:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800df78:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800df7c:	f000 fccc 	bl	800e918 <convert_qos_profile>
 800df80:	e896 0003 	ldmia.w	r6, {r0, r1}
 800df84:	f8cd a00c 	str.w	sl, [sp, #12]
 800df88:	9001      	str	r0, [sp, #4]
 800df8a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800df8e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800df98:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800df9c:	f8d8 1000 	ldr.w	r1, [r8]
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	f001 fec1 	bl	800fd28 <uxr_buffer_create_datawriter_bin>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dfac:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800dfb0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800dfb4:	f000 fc94 	bl	800e8e0 <run_xrce_session>
 800dfb8:	b938      	cbnz	r0, 800dfca <rmw_create_publisher+0x1a6>
 800dfba:	4806      	ldr	r0, [pc, #24]	; (800dfd4 <rmw_create_publisher+0x1b0>)
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	f007 f8b7 	bl	8015130 <put_memory>
 800dfc2:	4638      	mov	r0, r7
 800dfc4:	f000 fb3a 	bl	800e63c <rmw_uxrce_fini_publisher_memory>
 800dfc8:	2700      	movs	r7, #0
 800dfca:	4638      	mov	r0, r7
 800dfcc:	b007      	add	sp, #28
 800dfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd2:	bf00      	nop
 800dfd4:	20009ed0 	.word	0x20009ed0
 800dfd8:	08019aec 	.word	0x08019aec
 800dfdc:	08019ab8 	.word	0x08019ab8

0800dfe0 <rmw_publisher_get_actual_qos>:
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	4770      	bx	lr

0800dfe4 <rmw_destroy_publisher>:
 800dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe6:	b128      	cbz	r0, 800dff4 <rmw_destroy_publisher+0x10>
 800dfe8:	4604      	mov	r4, r0
 800dfea:	6800      	ldr	r0, [r0, #0]
 800dfec:	460d      	mov	r5, r1
 800dfee:	f000 fcf7 	bl	800e9e0 <is_uxrce_rmw_identifier_valid>
 800dff2:	b910      	cbnz	r0, 800dffa <rmw_destroy_publisher+0x16>
 800dff4:	2401      	movs	r4, #1
 800dff6:	4620      	mov	r0, r4
 800dff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dffa:	6863      	ldr	r3, [r4, #4]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d0f9      	beq.n	800dff4 <rmw_destroy_publisher+0x10>
 800e000:	2d00      	cmp	r5, #0
 800e002:	d0f7      	beq.n	800dff4 <rmw_destroy_publisher+0x10>
 800e004:	6828      	ldr	r0, [r5, #0]
 800e006:	f000 fceb 	bl	800e9e0 <is_uxrce_rmw_identifier_valid>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d0f2      	beq.n	800dff4 <rmw_destroy_publisher+0x10>
 800e00e:	686c      	ldr	r4, [r5, #4]
 800e010:	2c00      	cmp	r4, #0
 800e012:	d0ef      	beq.n	800dff4 <rmw_destroy_publisher+0x10>
 800e014:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e016:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800e01a:	f007 fb8d 	bl	8015738 <destroy_topic>
 800e01e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e022:	6962      	ldr	r2, [r4, #20]
 800e024:	6918      	ldr	r0, [r3, #16]
 800e026:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e02a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e02e:	6819      	ldr	r1, [r3, #0]
 800e030:	f001 fd6a 	bl	800fb08 <uxr_buffer_delete_entity>
 800e034:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800e038:	6922      	ldr	r2, [r4, #16]
 800e03a:	4603      	mov	r3, r0
 800e03c:	6908      	ldr	r0, [r1, #16]
 800e03e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e042:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e046:	6809      	ldr	r1, [r1, #0]
 800e048:	461c      	mov	r4, r3
 800e04a:	f001 fd5d 	bl	800fb08 <uxr_buffer_delete_entity>
 800e04e:	4606      	mov	r6, r0
 800e050:	6938      	ldr	r0, [r7, #16]
 800e052:	4622      	mov	r2, r4
 800e054:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e058:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e05c:	f000 fc40 	bl	800e8e0 <run_xrce_session>
 800e060:	4604      	mov	r4, r0
 800e062:	6938      	ldr	r0, [r7, #16]
 800e064:	4632      	mov	r2, r6
 800e066:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e06a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e06e:	f000 fc37 	bl	800e8e0 <run_xrce_session>
 800e072:	b12c      	cbz	r4, 800e080 <rmw_destroy_publisher+0x9c>
 800e074:	b120      	cbz	r0, 800e080 <rmw_destroy_publisher+0x9c>
 800e076:	2400      	movs	r4, #0
 800e078:	4628      	mov	r0, r5
 800e07a:	f000 fadf 	bl	800e63c <rmw_uxrce_fini_publisher_memory>
 800e07e:	e7ba      	b.n	800dff6 <rmw_destroy_publisher+0x12>
 800e080:	2402      	movs	r4, #2
 800e082:	e7f9      	b.n	800e078 <rmw_destroy_publisher+0x94>

0800e084 <rmw_create_subscription>:
 800e084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e088:	b08d      	sub	sp, #52	; 0x34
 800e08a:	2800      	cmp	r0, #0
 800e08c:	f000 80cf 	beq.w	800e22e <rmw_create_subscription+0x1aa>
 800e090:	460e      	mov	r6, r1
 800e092:	2900      	cmp	r1, #0
 800e094:	f000 80cb 	beq.w	800e22e <rmw_create_subscription+0x1aa>
 800e098:	4604      	mov	r4, r0
 800e09a:	6800      	ldr	r0, [r0, #0]
 800e09c:	4615      	mov	r5, r2
 800e09e:	4698      	mov	r8, r3
 800e0a0:	f000 fc9e 	bl	800e9e0 <is_uxrce_rmw_identifier_valid>
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	f000 80c2 	beq.w	800e22e <rmw_create_subscription+0x1aa>
 800e0aa:	2d00      	cmp	r5, #0
 800e0ac:	f000 80bf 	beq.w	800e22e <rmw_create_subscription+0x1aa>
 800e0b0:	782b      	ldrb	r3, [r5, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f000 80bb 	beq.w	800e22e <rmw_create_subscription+0x1aa>
 800e0b8:	f1b8 0f00 	cmp.w	r8, #0
 800e0bc:	f000 80b7 	beq.w	800e22e <rmw_create_subscription+0x1aa>
 800e0c0:	485d      	ldr	r0, [pc, #372]	; (800e238 <rmw_create_subscription+0x1b4>)
 800e0c2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e0c6:	f007 f823 	bl	8015110 <get_memory>
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	f000 80af 	beq.w	800e230 <rmw_create_subscription+0x1ac>
 800e0d2:	68c7      	ldr	r7, [r0, #12]
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e0da:	f007 f881 	bl	80151e0 <rmw_get_implementation_identifier>
 800e0de:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800e0e2:	67f8      	str	r0, [r7, #124]	; 0x7c
 800e0e4:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	f7f2 f883 	bl	80001f4 <strlen>
 800e0ee:	3001      	adds	r0, #1
 800e0f0:	283c      	cmp	r0, #60	; 0x3c
 800e0f2:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800e0f6:	f200 8097 	bhi.w	800e228 <rmw_create_subscription+0x1a4>
 800e0fa:	4a50      	ldr	r2, [pc, #320]	; (800e23c <rmw_create_subscription+0x1b8>)
 800e0fc:	462b      	mov	r3, r5
 800e0fe:	213c      	movs	r1, #60	; 0x3c
 800e100:	4650      	mov	r0, sl
 800e102:	f00a f929 	bl	8018358 <sniprintf>
 800e106:	4641      	mov	r1, r8
 800e108:	f8c7 9020 	str.w	r9, [r7, #32]
 800e10c:	2250      	movs	r2, #80	; 0x50
 800e10e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e112:	f00a fba0 	bl	8018856 <memcpy>
 800e116:	494a      	ldr	r1, [pc, #296]	; (800e240 <rmw_create_subscription+0x1bc>)
 800e118:	4630      	mov	r0, r6
 800e11a:	f000 fc6f 	bl	800e9fc <get_message_typesupport_handle>
 800e11e:	2800      	cmp	r0, #0
 800e120:	f000 8082 	beq.w	800e228 <rmw_create_subscription+0x1a4>
 800e124:	6842      	ldr	r2, [r0, #4]
 800e126:	61ba      	str	r2, [r7, #24]
 800e128:	2a00      	cmp	r2, #0
 800e12a:	d07d      	beq.n	800e228 <rmw_create_subscription+0x1a4>
 800e12c:	4629      	mov	r1, r5
 800e12e:	4643      	mov	r3, r8
 800e130:	4648      	mov	r0, r9
 800e132:	f007 fa9f 	bl	8015674 <create_topic>
 800e136:	61f8      	str	r0, [r7, #28]
 800e138:	2800      	cmp	r0, #0
 800e13a:	d075      	beq.n	800e228 <rmw_create_subscription+0x1a4>
 800e13c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e140:	f241 539c 	movw	r3, #5532	; 0x159c
 800e144:	2104      	movs	r1, #4
 800e146:	5ad0      	ldrh	r0, [r2, r3]
 800e148:	1c45      	adds	r5, r0, #1
 800e14a:	52d5      	strh	r5, [r2, r3]
 800e14c:	f001 fede 	bl	800ff0c <uxr_object_id>
 800e150:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e154:	6138      	str	r0, [r7, #16]
 800e156:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800e15a:	2606      	movs	r6, #6
 800e15c:	9600      	str	r6, [sp, #0]
 800e15e:	6811      	ldr	r1, [r2, #0]
 800e160:	693a      	ldr	r2, [r7, #16]
 800e162:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800e166:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e16a:	f001 fdad 	bl	800fcc8 <uxr_buffer_create_subscriber_bin>
 800e16e:	4602      	mov	r2, r0
 800e170:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e174:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e178:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e17c:	f000 fbb0 	bl	800e8e0 <run_xrce_session>
 800e180:	2800      	cmp	r0, #0
 800e182:	d04d      	beq.n	800e220 <rmw_create_subscription+0x19c>
 800e184:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e188:	f241 539e 	movw	r3, #5534	; 0x159e
 800e18c:	4631      	mov	r1, r6
 800e18e:	5ad0      	ldrh	r0, [r2, r3]
 800e190:	1c45      	adds	r5, r0, #1
 800e192:	52d5      	strh	r5, [r2, r3]
 800e194:	f001 feba 	bl	800ff0c <uxr_object_id>
 800e198:	ad08      	add	r5, sp, #32
 800e19a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	6178      	str	r0, [r7, #20]
 800e1a2:	4641      	mov	r1, r8
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800e1aa:	9305      	str	r3, [sp, #20]
 800e1ac:	f000 fbb4 	bl	800e918 <convert_qos_profile>
 800e1b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e1b4:	9b05      	ldr	r3, [sp, #20]
 800e1b6:	9001      	str	r0, [sp, #4]
 800e1b8:	9603      	str	r6, [sp, #12]
 800e1ba:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e1be:	691b      	ldr	r3, [r3, #16]
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800e1c6:	f8db 1000 	ldr.w	r1, [fp]
 800e1ca:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800e1ce:	f001 fe23 	bl	800fe18 <uxr_buffer_create_datareader_bin>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e1d8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e1dc:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e1e0:	f000 fb7e 	bl	800e8e0 <run_xrce_session>
 800e1e4:	b1e0      	cbz	r0, 800e220 <rmw_create_subscription+0x19c>
 800e1e6:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800e1ea:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e1ee:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e1f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e202:	bf0c      	ite	eq
 800e204:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800e208:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800e20c:	9307      	str	r3, [sp, #28]
 800e20e:	aa0a      	add	r2, sp, #40	; 0x28
 800e210:	9200      	str	r2, [sp, #0]
 800e212:	697a      	ldr	r2, [r7, #20]
 800e214:	6809      	ldr	r1, [r1, #0]
 800e216:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e21a:	f001 fea5 	bl	800ff68 <uxr_buffer_request_data>
 800e21e:	e007      	b.n	800e230 <rmw_create_subscription+0x1ac>
 800e220:	4805      	ldr	r0, [pc, #20]	; (800e238 <rmw_create_subscription+0x1b4>)
 800e222:	4639      	mov	r1, r7
 800e224:	f006 ff84 	bl	8015130 <put_memory>
 800e228:	4620      	mov	r0, r4
 800e22a:	f000 fa1d 	bl	800e668 <rmw_uxrce_fini_subscription_memory>
 800e22e:	2400      	movs	r4, #0
 800e230:	4620      	mov	r0, r4
 800e232:	b00d      	add	sp, #52	; 0x34
 800e234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e238:	2000d12c 	.word	0x2000d12c
 800e23c:	08019aec 	.word	0x08019aec
 800e240:	08019ab8 	.word	0x08019ab8

0800e244 <rmw_subscription_get_actual_qos>:
 800e244:	2000      	movs	r0, #0
 800e246:	4770      	bx	lr

0800e248 <rmw_destroy_subscription>:
 800e248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e24a:	b128      	cbz	r0, 800e258 <rmw_destroy_subscription+0x10>
 800e24c:	4604      	mov	r4, r0
 800e24e:	6800      	ldr	r0, [r0, #0]
 800e250:	460d      	mov	r5, r1
 800e252:	f000 fbc5 	bl	800e9e0 <is_uxrce_rmw_identifier_valid>
 800e256:	b910      	cbnz	r0, 800e25e <rmw_destroy_subscription+0x16>
 800e258:	2401      	movs	r4, #1
 800e25a:	4620      	mov	r0, r4
 800e25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e25e:	6863      	ldr	r3, [r4, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d0f9      	beq.n	800e258 <rmw_destroy_subscription+0x10>
 800e264:	2d00      	cmp	r5, #0
 800e266:	d0f7      	beq.n	800e258 <rmw_destroy_subscription+0x10>
 800e268:	6828      	ldr	r0, [r5, #0]
 800e26a:	f000 fbb9 	bl	800e9e0 <is_uxrce_rmw_identifier_valid>
 800e26e:	2800      	cmp	r0, #0
 800e270:	d0f2      	beq.n	800e258 <rmw_destroy_subscription+0x10>
 800e272:	686c      	ldr	r4, [r5, #4]
 800e274:	2c00      	cmp	r4, #0
 800e276:	d0ef      	beq.n	800e258 <rmw_destroy_subscription+0x10>
 800e278:	6a26      	ldr	r6, [r4, #32]
 800e27a:	6962      	ldr	r2, [r4, #20]
 800e27c:	6930      	ldr	r0, [r6, #16]
 800e27e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e282:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e286:	6819      	ldr	r1, [r3, #0]
 800e288:	f001 fea8 	bl	800ffdc <uxr_buffer_cancel_data>
 800e28c:	4602      	mov	r2, r0
 800e28e:	6930      	ldr	r0, [r6, #16]
 800e290:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e294:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e298:	f000 fb22 	bl	800e8e0 <run_xrce_session>
 800e29c:	69e0      	ldr	r0, [r4, #28]
 800e29e:	f007 fa4b 	bl	8015738 <destroy_topic>
 800e2a2:	6a23      	ldr	r3, [r4, #32]
 800e2a4:	6962      	ldr	r2, [r4, #20]
 800e2a6:	6918      	ldr	r0, [r3, #16]
 800e2a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e2ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e2b0:	6819      	ldr	r1, [r3, #0]
 800e2b2:	f001 fc29 	bl	800fb08 <uxr_buffer_delete_entity>
 800e2b6:	6a21      	ldr	r1, [r4, #32]
 800e2b8:	6922      	ldr	r2, [r4, #16]
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	6908      	ldr	r0, [r1, #16]
 800e2be:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e2c2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e2c6:	6809      	ldr	r1, [r1, #0]
 800e2c8:	461c      	mov	r4, r3
 800e2ca:	f001 fc1d 	bl	800fb08 <uxr_buffer_delete_entity>
 800e2ce:	4607      	mov	r7, r0
 800e2d0:	6930      	ldr	r0, [r6, #16]
 800e2d2:	4622      	mov	r2, r4
 800e2d4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e2d8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e2dc:	f000 fb00 	bl	800e8e0 <run_xrce_session>
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	6930      	ldr	r0, [r6, #16]
 800e2e4:	463a      	mov	r2, r7
 800e2e6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e2ea:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e2ee:	f000 faf7 	bl	800e8e0 <run_xrce_session>
 800e2f2:	b12c      	cbz	r4, 800e300 <rmw_destroy_subscription+0xb8>
 800e2f4:	b120      	cbz	r0, 800e300 <rmw_destroy_subscription+0xb8>
 800e2f6:	2400      	movs	r4, #0
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	f000 f9b5 	bl	800e668 <rmw_uxrce_fini_subscription_memory>
 800e2fe:	e7ac      	b.n	800e25a <rmw_destroy_subscription+0x12>
 800e300:	2402      	movs	r4, #2
 800e302:	e7f9      	b.n	800e2f8 <rmw_destroy_subscription+0xb0>

0800e304 <rmw_take_with_info>:
 800e304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e306:	4604      	mov	r4, r0
 800e308:	6800      	ldr	r0, [r0, #0]
 800e30a:	b089      	sub	sp, #36	; 0x24
 800e30c:	460f      	mov	r7, r1
 800e30e:	4615      	mov	r5, r2
 800e310:	b128      	cbz	r0, 800e31e <rmw_take_with_info+0x1a>
 800e312:	4b24      	ldr	r3, [pc, #144]	; (800e3a4 <rmw_take_with_info+0xa0>)
 800e314:	6819      	ldr	r1, [r3, #0]
 800e316:	f7f1 ff63 	bl	80001e0 <strcmp>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d13e      	bne.n	800e39c <rmw_take_with_info+0x98>
 800e31e:	b305      	cbz	r5, 800e362 <rmw_take_with_info+0x5e>
 800e320:	6864      	ldr	r4, [r4, #4]
 800e322:	2300      	movs	r3, #0
 800e324:	702b      	strb	r3, [r5, #0]
 800e326:	f000 fa63 	bl	800e7f0 <rmw_uxrce_clean_expired_static_input_buffer>
 800e32a:	4620      	mov	r0, r4
 800e32c:	f000 fa36 	bl	800e79c <rmw_uxrce_find_static_input_buffer_by_owner>
 800e330:	4606      	mov	r6, r0
 800e332:	b1f0      	cbz	r0, 800e372 <rmw_take_with_info+0x6e>
 800e334:	68c1      	ldr	r1, [r0, #12]
 800e336:	4668      	mov	r0, sp
 800e338:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800e33c:	3110      	adds	r1, #16
 800e33e:	f001 fb73 	bl	800fa28 <ucdr_init_buffer>
 800e342:	69a3      	ldr	r3, [r4, #24]
 800e344:	4639      	mov	r1, r7
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	4668      	mov	r0, sp
 800e34a:	4798      	blx	r3
 800e34c:	4631      	mov	r1, r6
 800e34e:	4604      	mov	r4, r0
 800e350:	4815      	ldr	r0, [pc, #84]	; (800e3a8 <rmw_take_with_info+0xa4>)
 800e352:	f006 feed 	bl	8015130 <put_memory>
 800e356:	702c      	strb	r4, [r5, #0]
 800e358:	f084 0001 	eor.w	r0, r4, #1
 800e35c:	b2c0      	uxtb	r0, r0
 800e35e:	b009      	add	sp, #36	; 0x24
 800e360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e362:	6864      	ldr	r4, [r4, #4]
 800e364:	f000 fa44 	bl	800e7f0 <rmw_uxrce_clean_expired_static_input_buffer>
 800e368:	4620      	mov	r0, r4
 800e36a:	f000 fa17 	bl	800e79c <rmw_uxrce_find_static_input_buffer_by_owner>
 800e36e:	4605      	mov	r5, r0
 800e370:	b910      	cbnz	r0, 800e378 <rmw_take_with_info+0x74>
 800e372:	2001      	movs	r0, #1
 800e374:	b009      	add	sp, #36	; 0x24
 800e376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e378:	68e9      	ldr	r1, [r5, #12]
 800e37a:	4668      	mov	r0, sp
 800e37c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800e380:	3110      	adds	r1, #16
 800e382:	f001 fb51 	bl	800fa28 <ucdr_init_buffer>
 800e386:	69a3      	ldr	r3, [r4, #24]
 800e388:	4639      	mov	r1, r7
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	4668      	mov	r0, sp
 800e38e:	4798      	blx	r3
 800e390:	4629      	mov	r1, r5
 800e392:	4604      	mov	r4, r0
 800e394:	4804      	ldr	r0, [pc, #16]	; (800e3a8 <rmw_take_with_info+0xa4>)
 800e396:	f006 fecb 	bl	8015130 <put_memory>
 800e39a:	e7dd      	b.n	800e358 <rmw_take_with_info+0x54>
 800e39c:	200c      	movs	r0, #12
 800e39e:	b009      	add	sp, #36	; 0x24
 800e3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	08019ff4 	.word	0x08019ff4
 800e3a8:	20009ec0 	.word	0x20009ec0

0800e3ac <rmw_uxrce_init_service_memory>:
 800e3ac:	b1b2      	cbz	r2, 800e3dc <rmw_uxrce_init_service_memory+0x30>
 800e3ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b0:	7a07      	ldrb	r7, [r0, #8]
 800e3b2:	4605      	mov	r5, r0
 800e3b4:	b98f      	cbnz	r7, 800e3da <rmw_uxrce_init_service_memory+0x2e>
 800e3b6:	e9c0 7700 	strd	r7, r7, [r0]
 800e3ba:	460c      	mov	r4, r1
 800e3bc:	23c8      	movs	r3, #200	; 0xc8
 800e3be:	2101      	movs	r1, #1
 800e3c0:	fb03 4602 	mla	r6, r3, r2, r4
 800e3c4:	60c3      	str	r3, [r0, #12]
 800e3c6:	7201      	strb	r1, [r0, #8]
 800e3c8:	4621      	mov	r1, r4
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	f006 feb0 	bl	8015130 <put_memory>
 800e3d0:	60e4      	str	r4, [r4, #12]
 800e3d2:	f804 7bc8 	strb.w	r7, [r4], #200
 800e3d6:	42a6      	cmp	r6, r4
 800e3d8:	d1f6      	bne.n	800e3c8 <rmw_uxrce_init_service_memory+0x1c>
 800e3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop

0800e3e0 <rmw_uxrce_init_client_memory>:
 800e3e0:	b1b2      	cbz	r2, 800e410 <rmw_uxrce_init_client_memory+0x30>
 800e3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e4:	7a07      	ldrb	r7, [r0, #8]
 800e3e6:	4605      	mov	r5, r0
 800e3e8:	b98f      	cbnz	r7, 800e40e <rmw_uxrce_init_client_memory+0x2e>
 800e3ea:	e9c0 7700 	strd	r7, r7, [r0]
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	23c8      	movs	r3, #200	; 0xc8
 800e3f2:	2101      	movs	r1, #1
 800e3f4:	fb03 4602 	mla	r6, r3, r2, r4
 800e3f8:	60c3      	str	r3, [r0, #12]
 800e3fa:	7201      	strb	r1, [r0, #8]
 800e3fc:	4621      	mov	r1, r4
 800e3fe:	4628      	mov	r0, r5
 800e400:	f006 fe96 	bl	8015130 <put_memory>
 800e404:	60e4      	str	r4, [r4, #12]
 800e406:	f804 7bc8 	strb.w	r7, [r4], #200
 800e40a:	42a6      	cmp	r6, r4
 800e40c:	d1f6      	bne.n	800e3fc <rmw_uxrce_init_client_memory+0x1c>
 800e40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop

0800e414 <rmw_uxrce_init_publisher_memory>:
 800e414:	b1b2      	cbz	r2, 800e444 <rmw_uxrce_init_publisher_memory+0x30>
 800e416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e418:	7a07      	ldrb	r7, [r0, #8]
 800e41a:	4605      	mov	r5, r0
 800e41c:	b98f      	cbnz	r7, 800e442 <rmw_uxrce_init_publisher_memory+0x2e>
 800e41e:	e9c0 7700 	strd	r7, r7, [r0]
 800e422:	460c      	mov	r4, r1
 800e424:	23d8      	movs	r3, #216	; 0xd8
 800e426:	2101      	movs	r1, #1
 800e428:	fb03 4602 	mla	r6, r3, r2, r4
 800e42c:	60c3      	str	r3, [r0, #12]
 800e42e:	7201      	strb	r1, [r0, #8]
 800e430:	4621      	mov	r1, r4
 800e432:	4628      	mov	r0, r5
 800e434:	f006 fe7c 	bl	8015130 <put_memory>
 800e438:	60e4      	str	r4, [r4, #12]
 800e43a:	f804 7bd8 	strb.w	r7, [r4], #216
 800e43e:	42a6      	cmp	r6, r4
 800e440:	d1f6      	bne.n	800e430 <rmw_uxrce_init_publisher_memory+0x1c>
 800e442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e444:	4770      	bx	lr
 800e446:	bf00      	nop

0800e448 <rmw_uxrce_init_subscription_memory>:
 800e448:	b1b2      	cbz	r2, 800e478 <rmw_uxrce_init_subscription_memory+0x30>
 800e44a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44c:	7a07      	ldrb	r7, [r0, #8]
 800e44e:	4605      	mov	r5, r0
 800e450:	b98f      	cbnz	r7, 800e476 <rmw_uxrce_init_subscription_memory+0x2e>
 800e452:	e9c0 7700 	strd	r7, r7, [r0]
 800e456:	460c      	mov	r4, r1
 800e458:	23d0      	movs	r3, #208	; 0xd0
 800e45a:	2101      	movs	r1, #1
 800e45c:	fb03 4602 	mla	r6, r3, r2, r4
 800e460:	60c3      	str	r3, [r0, #12]
 800e462:	7201      	strb	r1, [r0, #8]
 800e464:	4621      	mov	r1, r4
 800e466:	4628      	mov	r0, r5
 800e468:	f006 fe62 	bl	8015130 <put_memory>
 800e46c:	60e4      	str	r4, [r4, #12]
 800e46e:	f804 7bd0 	strb.w	r7, [r4], #208
 800e472:	42a6      	cmp	r6, r4
 800e474:	d1f6      	bne.n	800e464 <rmw_uxrce_init_subscription_memory+0x1c>
 800e476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop

0800e47c <rmw_uxrce_init_node_memory>:
 800e47c:	b1b2      	cbz	r2, 800e4ac <rmw_uxrce_init_node_memory+0x30>
 800e47e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e480:	7a07      	ldrb	r7, [r0, #8]
 800e482:	4605      	mov	r5, r0
 800e484:	b98f      	cbnz	r7, 800e4aa <rmw_uxrce_init_node_memory+0x2e>
 800e486:	e9c0 7700 	strd	r7, r7, [r0]
 800e48a:	460c      	mov	r4, r1
 800e48c:	23a4      	movs	r3, #164	; 0xa4
 800e48e:	2101      	movs	r1, #1
 800e490:	fb03 4602 	mla	r6, r3, r2, r4
 800e494:	60c3      	str	r3, [r0, #12]
 800e496:	7201      	strb	r1, [r0, #8]
 800e498:	4621      	mov	r1, r4
 800e49a:	4628      	mov	r0, r5
 800e49c:	f006 fe48 	bl	8015130 <put_memory>
 800e4a0:	60e4      	str	r4, [r4, #12]
 800e4a2:	f804 7ba4 	strb.w	r7, [r4], #164
 800e4a6:	42a6      	cmp	r6, r4
 800e4a8:	d1f6      	bne.n	800e498 <rmw_uxrce_init_node_memory+0x1c>
 800e4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop

0800e4b0 <rmw_uxrce_init_session_memory>:
 800e4b0:	b1d2      	cbz	r2, 800e4e8 <rmw_uxrce_init_session_memory+0x38>
 800e4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b6:	7a07      	ldrb	r7, [r0, #8]
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	b99f      	cbnz	r7, 800e4e4 <rmw_uxrce_init_session_memory+0x34>
 800e4bc:	e9c0 7700 	strd	r7, r7, [r0]
 800e4c0:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800e4c4:	460c      	mov	r4, r1
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	fb03 4602 	mla	r6, r3, r2, r4
 800e4cc:	60c3      	str	r3, [r0, #12]
 800e4ce:	4698      	mov	r8, r3
 800e4d0:	7201      	strb	r1, [r0, #8]
 800e4d2:	4621      	mov	r1, r4
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	f006 fe2b 	bl	8015130 <put_memory>
 800e4da:	60e4      	str	r4, [r4, #12]
 800e4dc:	7027      	strb	r7, [r4, #0]
 800e4de:	4444      	add	r4, r8
 800e4e0:	42a6      	cmp	r6, r4
 800e4e2:	d1f6      	bne.n	800e4d2 <rmw_uxrce_init_session_memory+0x22>
 800e4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop

0800e4ec <rmw_uxrce_init_topic_memory>:
 800e4ec:	b1c2      	cbz	r2, 800e520 <rmw_uxrce_init_topic_memory+0x34>
 800e4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f0:	7a07      	ldrb	r7, [r0, #8]
 800e4f2:	4606      	mov	r6, r0
 800e4f4:	b99f      	cbnz	r7, 800e51e <rmw_uxrce_init_topic_memory+0x32>
 800e4f6:	e9c0 7700 	strd	r7, r7, [r0]
 800e4fa:	460c      	mov	r4, r1
 800e4fc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e500:	2101      	movs	r1, #1
 800e502:	231c      	movs	r3, #28
 800e504:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e508:	7201      	strb	r1, [r0, #8]
 800e50a:	60c3      	str	r3, [r0, #12]
 800e50c:	4621      	mov	r1, r4
 800e50e:	4630      	mov	r0, r6
 800e510:	f006 fe0e 	bl	8015130 <put_memory>
 800e514:	60e4      	str	r4, [r4, #12]
 800e516:	f804 7b1c 	strb.w	r7, [r4], #28
 800e51a:	42a5      	cmp	r5, r4
 800e51c:	d1f6      	bne.n	800e50c <rmw_uxrce_init_topic_memory+0x20>
 800e51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop

0800e524 <rmw_uxrce_init_static_input_buffer_memory>:
 800e524:	b1d2      	cbz	r2, 800e55c <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800e526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e528:	7a07      	ldrb	r7, [r0, #8]
 800e52a:	4606      	mov	r6, r0
 800e52c:	b9af      	cbnz	r7, 800e55a <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800e52e:	e9c0 7700 	strd	r7, r7, [r0]
 800e532:	460c      	mov	r4, r1
 800e534:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800e538:	2101      	movs	r1, #1
 800e53a:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800e53e:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800e542:	7201      	strb	r1, [r0, #8]
 800e544:	60c3      	str	r3, [r0, #12]
 800e546:	4621      	mov	r1, r4
 800e548:	4630      	mov	r0, r6
 800e54a:	f006 fdf1 	bl	8015130 <put_memory>
 800e54e:	60e4      	str	r4, [r4, #12]
 800e550:	7027      	strb	r7, [r4, #0]
 800e552:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800e556:	42a5      	cmp	r5, r4
 800e558:	d1f5      	bne.n	800e546 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop

0800e560 <rmw_uxrce_init_init_options_impl_memory>:
 800e560:	b1b2      	cbz	r2, 800e590 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800e562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e564:	7a07      	ldrb	r7, [r0, #8]
 800e566:	4605      	mov	r5, r0
 800e568:	b98f      	cbnz	r7, 800e58e <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800e56a:	e9c0 7700 	strd	r7, r7, [r0]
 800e56e:	460c      	mov	r4, r1
 800e570:	232c      	movs	r3, #44	; 0x2c
 800e572:	2101      	movs	r1, #1
 800e574:	fb03 4602 	mla	r6, r3, r2, r4
 800e578:	60c3      	str	r3, [r0, #12]
 800e57a:	7201      	strb	r1, [r0, #8]
 800e57c:	4621      	mov	r1, r4
 800e57e:	4628      	mov	r0, r5
 800e580:	f006 fdd6 	bl	8015130 <put_memory>
 800e584:	60e4      	str	r4, [r4, #12]
 800e586:	f804 7b2c 	strb.w	r7, [r4], #44
 800e58a:	42a6      	cmp	r6, r4
 800e58c:	d1f6      	bne.n	800e57c <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800e58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e590:	4770      	bx	lr
 800e592:	bf00      	nop

0800e594 <rmw_uxrce_init_wait_set_memory>:
 800e594:	b1c2      	cbz	r2, 800e5c8 <rmw_uxrce_init_wait_set_memory+0x34>
 800e596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e598:	7a07      	ldrb	r7, [r0, #8]
 800e59a:	4606      	mov	r6, r0
 800e59c:	b99f      	cbnz	r7, 800e5c6 <rmw_uxrce_init_wait_set_memory+0x32>
 800e59e:	e9c0 7700 	strd	r7, r7, [r0]
 800e5a2:	460c      	mov	r4, r1
 800e5a4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e5a8:	2101      	movs	r1, #1
 800e5aa:	231c      	movs	r3, #28
 800e5ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e5b0:	7201      	strb	r1, [r0, #8]
 800e5b2:	60c3      	str	r3, [r0, #12]
 800e5b4:	4621      	mov	r1, r4
 800e5b6:	4630      	mov	r0, r6
 800e5b8:	f006 fdba 	bl	8015130 <put_memory>
 800e5bc:	60e4      	str	r4, [r4, #12]
 800e5be:	f804 7b1c 	strb.w	r7, [r4], #28
 800e5c2:	42a5      	cmp	r5, r4
 800e5c4:	d1f6      	bne.n	800e5b4 <rmw_uxrce_init_wait_set_memory+0x20>
 800e5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop

0800e5cc <rmw_uxrce_init_guard_condition_memory>:
 800e5cc:	b1b2      	cbz	r2, 800e5fc <rmw_uxrce_init_guard_condition_memory+0x30>
 800e5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d0:	7a07      	ldrb	r7, [r0, #8]
 800e5d2:	4605      	mov	r5, r0
 800e5d4:	b98f      	cbnz	r7, 800e5fa <rmw_uxrce_init_guard_condition_memory+0x2e>
 800e5d6:	e9c0 7700 	strd	r7, r7, [r0]
 800e5da:	460c      	mov	r4, r1
 800e5dc:	2320      	movs	r3, #32
 800e5de:	2101      	movs	r1, #1
 800e5e0:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800e5e4:	7201      	strb	r1, [r0, #8]
 800e5e6:	60c3      	str	r3, [r0, #12]
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f006 fda0 	bl	8015130 <put_memory>
 800e5f0:	60e4      	str	r4, [r4, #12]
 800e5f2:	f804 7b20 	strb.w	r7, [r4], #32
 800e5f6:	42a6      	cmp	r6, r4
 800e5f8:	d1f6      	bne.n	800e5e8 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800e5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop

0800e600 <rmw_uxrce_fini_session_memory>:
 800e600:	4601      	mov	r1, r0
 800e602:	4801      	ldr	r0, [pc, #4]	; (800e608 <rmw_uxrce_fini_session_memory+0x8>)
 800e604:	f006 bd94 	b.w	8015130 <put_memory>
 800e608:	2000d068 	.word	0x2000d068

0800e60c <rmw_uxrce_fini_node_memory>:
 800e60c:	b538      	push	{r3, r4, r5, lr}
 800e60e:	4604      	mov	r4, r0
 800e610:	6800      	ldr	r0, [r0, #0]
 800e612:	b128      	cbz	r0, 800e620 <rmw_uxrce_fini_node_memory+0x14>
 800e614:	4b07      	ldr	r3, [pc, #28]	; (800e634 <rmw_uxrce_fini_node_memory+0x28>)
 800e616:	6819      	ldr	r1, [r3, #0]
 800e618:	f7f1 fde2 	bl	80001e0 <strcmp>
 800e61c:	b940      	cbnz	r0, 800e630 <rmw_uxrce_fini_node_memory+0x24>
 800e61e:	6020      	str	r0, [r4, #0]
 800e620:	6861      	ldr	r1, [r4, #4]
 800e622:	b129      	cbz	r1, 800e630 <rmw_uxrce_fini_node_memory+0x24>
 800e624:	2500      	movs	r5, #0
 800e626:	4804      	ldr	r0, [pc, #16]	; (800e638 <rmw_uxrce_fini_node_memory+0x2c>)
 800e628:	610d      	str	r5, [r1, #16]
 800e62a:	f006 fd81 	bl	8015130 <put_memory>
 800e62e:	6065      	str	r5, [r4, #4]
 800e630:	bd38      	pop	{r3, r4, r5, pc}
 800e632:	bf00      	nop
 800e634:	08019ff4 	.word	0x08019ff4
 800e638:	2000ce94 	.word	0x2000ce94

0800e63c <rmw_uxrce_fini_publisher_memory>:
 800e63c:	b510      	push	{r4, lr}
 800e63e:	4604      	mov	r4, r0
 800e640:	6800      	ldr	r0, [r0, #0]
 800e642:	b128      	cbz	r0, 800e650 <rmw_uxrce_fini_publisher_memory+0x14>
 800e644:	4b06      	ldr	r3, [pc, #24]	; (800e660 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e646:	6819      	ldr	r1, [r3, #0]
 800e648:	f7f1 fdca 	bl	80001e0 <strcmp>
 800e64c:	b938      	cbnz	r0, 800e65e <rmw_uxrce_fini_publisher_memory+0x22>
 800e64e:	6020      	str	r0, [r4, #0]
 800e650:	6861      	ldr	r1, [r4, #4]
 800e652:	b121      	cbz	r1, 800e65e <rmw_uxrce_fini_publisher_memory+0x22>
 800e654:	4803      	ldr	r0, [pc, #12]	; (800e664 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e656:	f006 fd6b 	bl	8015130 <put_memory>
 800e65a:	2300      	movs	r3, #0
 800e65c:	6063      	str	r3, [r4, #4]
 800e65e:	bd10      	pop	{r4, pc}
 800e660:	08019ff4 	.word	0x08019ff4
 800e664:	20009ed0 	.word	0x20009ed0

0800e668 <rmw_uxrce_fini_subscription_memory>:
 800e668:	b510      	push	{r4, lr}
 800e66a:	4604      	mov	r4, r0
 800e66c:	6800      	ldr	r0, [r0, #0]
 800e66e:	b128      	cbz	r0, 800e67c <rmw_uxrce_fini_subscription_memory+0x14>
 800e670:	4b06      	ldr	r3, [pc, #24]	; (800e68c <rmw_uxrce_fini_subscription_memory+0x24>)
 800e672:	6819      	ldr	r1, [r3, #0]
 800e674:	f7f1 fdb4 	bl	80001e0 <strcmp>
 800e678:	b938      	cbnz	r0, 800e68a <rmw_uxrce_fini_subscription_memory+0x22>
 800e67a:	6020      	str	r0, [r4, #0]
 800e67c:	6861      	ldr	r1, [r4, #4]
 800e67e:	b121      	cbz	r1, 800e68a <rmw_uxrce_fini_subscription_memory+0x22>
 800e680:	4803      	ldr	r0, [pc, #12]	; (800e690 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e682:	f006 fd55 	bl	8015130 <put_memory>
 800e686:	2300      	movs	r3, #0
 800e688:	6063      	str	r3, [r4, #4]
 800e68a:	bd10      	pop	{r4, pc}
 800e68c:	08019ff4 	.word	0x08019ff4
 800e690:	2000d12c 	.word	0x2000d12c

0800e694 <rmw_uxrce_fini_service_memory>:
 800e694:	b510      	push	{r4, lr}
 800e696:	4604      	mov	r4, r0
 800e698:	6800      	ldr	r0, [r0, #0]
 800e69a:	b128      	cbz	r0, 800e6a8 <rmw_uxrce_fini_service_memory+0x14>
 800e69c:	4b06      	ldr	r3, [pc, #24]	; (800e6b8 <rmw_uxrce_fini_service_memory+0x24>)
 800e69e:	6819      	ldr	r1, [r3, #0]
 800e6a0:	f7f1 fd9e 	bl	80001e0 <strcmp>
 800e6a4:	b938      	cbnz	r0, 800e6b6 <rmw_uxrce_fini_service_memory+0x22>
 800e6a6:	6020      	str	r0, [r4, #0]
 800e6a8:	6861      	ldr	r1, [r4, #4]
 800e6aa:	b121      	cbz	r1, 800e6b6 <rmw_uxrce_fini_service_memory+0x22>
 800e6ac:	4803      	ldr	r0, [pc, #12]	; (800e6bc <rmw_uxrce_fini_service_memory+0x28>)
 800e6ae:	f006 fd3f 	bl	8015130 <put_memory>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	6063      	str	r3, [r4, #4]
 800e6b6:	bd10      	pop	{r4, pc}
 800e6b8:	08019ff4 	.word	0x08019ff4
 800e6bc:	2000d11c 	.word	0x2000d11c

0800e6c0 <rmw_uxrce_fini_client_memory>:
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	6800      	ldr	r0, [r0, #0]
 800e6c6:	b128      	cbz	r0, 800e6d4 <rmw_uxrce_fini_client_memory+0x14>
 800e6c8:	4b06      	ldr	r3, [pc, #24]	; (800e6e4 <rmw_uxrce_fini_client_memory+0x24>)
 800e6ca:	6819      	ldr	r1, [r3, #0]
 800e6cc:	f7f1 fd88 	bl	80001e0 <strcmp>
 800e6d0:	b938      	cbnz	r0, 800e6e2 <rmw_uxrce_fini_client_memory+0x22>
 800e6d2:	6020      	str	r0, [r4, #0]
 800e6d4:	6861      	ldr	r1, [r4, #4]
 800e6d6:	b121      	cbz	r1, 800e6e2 <rmw_uxrce_fini_client_memory+0x22>
 800e6d8:	4803      	ldr	r0, [pc, #12]	; (800e6e8 <rmw_uxrce_fini_client_memory+0x28>)
 800e6da:	f006 fd29 	bl	8015130 <put_memory>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	6063      	str	r3, [r4, #4]
 800e6e2:	bd10      	pop	{r4, pc}
 800e6e4:	08019ff4 	.word	0x08019ff4
 800e6e8:	2000a750 	.word	0x2000a750

0800e6ec <rmw_uxrce_fini_topic_memory>:
 800e6ec:	b510      	push	{r4, lr}
 800e6ee:	4601      	mov	r1, r0
 800e6f0:	4604      	mov	r4, r0
 800e6f2:	4803      	ldr	r0, [pc, #12]	; (800e700 <rmw_uxrce_fini_topic_memory+0x14>)
 800e6f4:	f006 fd1c 	bl	8015130 <put_memory>
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	61a3      	str	r3, [r4, #24]
 800e6fc:	bd10      	pop	{r4, pc}
 800e6fe:	bf00      	nop
 800e700:	2000d058 	.word	0x2000d058

0800e704 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e704:	b082      	sub	sp, #8
 800e706:	b4f0      	push	{r4, r5, r6, r7}
 800e708:	4923      	ldr	r1, [pc, #140]	; (800e798 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800e70a:	ac04      	add	r4, sp, #16
 800e70c:	e884 000c 	stmia.w	r4, {r2, r3}
 800e710:	680d      	ldr	r5, [r1, #0]
 800e712:	9c05      	ldr	r4, [sp, #20]
 800e714:	2d00      	cmp	r5, #0
 800e716:	d03d      	beq.n	800e794 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800e718:	462b      	mov	r3, r5
 800e71a:	2100      	movs	r1, #0
 800e71c:	68da      	ldr	r2, [r3, #12]
 800e71e:	689b      	ldr	r3, [r3, #8]
 800e720:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800e724:	4290      	cmp	r0, r2
 800e726:	bf08      	it	eq
 800e728:	3101      	addeq	r1, #1
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1f6      	bne.n	800e71c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e72e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e732:	2b02      	cmp	r3, #2
 800e734:	d026      	beq.n	800e784 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800e736:	d906      	bls.n	800e746 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800e738:	2b03      	cmp	r3, #3
 800e73a:	d004      	beq.n	800e746 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800e73c:	2100      	movs	r1, #0
 800e73e:	bcf0      	pop	{r4, r5, r6, r7}
 800e740:	4608      	mov	r0, r1
 800e742:	b002      	add	sp, #8
 800e744:	4770      	bx	lr
 800e746:	b304      	cbz	r4, 800e78a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e748:	428c      	cmp	r4, r1
 800e74a:	d81e      	bhi.n	800e78a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e74c:	2d00      	cmp	r5, #0
 800e74e:	d0f5      	beq.n	800e73c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e750:	2100      	movs	r1, #0
 800e752:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e756:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800e75a:	e002      	b.n	800e762 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800e75c:	68ad      	ldr	r5, [r5, #8]
 800e75e:	2d00      	cmp	r5, #0
 800e760:	d0ed      	beq.n	800e73e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e762:	68eb      	ldr	r3, [r5, #12]
 800e764:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800e768:	4290      	cmp	r0, r2
 800e76a:	d1f7      	bne.n	800e75c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e76c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800e770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e774:	42b2      	cmp	r2, r6
 800e776:	eb73 0407 	sbcs.w	r4, r3, r7
 800e77a:	daef      	bge.n	800e75c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e77c:	4616      	mov	r6, r2
 800e77e:	461f      	mov	r7, r3
 800e780:	4629      	mov	r1, r5
 800e782:	e7eb      	b.n	800e75c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e784:	b10c      	cbz	r4, 800e78a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e786:	428c      	cmp	r4, r1
 800e788:	d9d8      	bls.n	800e73c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e78a:	bcf0      	pop	{r4, r5, r6, r7}
 800e78c:	4802      	ldr	r0, [pc, #8]	; (800e798 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800e78e:	b002      	add	sp, #8
 800e790:	f006 bcbe 	b.w	8015110 <get_memory>
 800e794:	4629      	mov	r1, r5
 800e796:	e7ca      	b.n	800e72e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e798:	20009ec0 	.word	0x20009ec0

0800e79c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e79c:	4b12      	ldr	r3, [pc, #72]	; (800e7e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	b1fb      	cbz	r3, 800e7e2 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800e7a2:	b4f0      	push	{r4, r5, r6, r7}
 800e7a4:	f04f 0c00 	mov.w	ip, #0
 800e7a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e7ac:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800e7b0:	e001      	b.n	800e7b6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800e7b2:	689b      	ldr	r3, [r3, #8]
 800e7b4:	b193      	cbz	r3, 800e7dc <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800e7b6:	68da      	ldr	r2, [r3, #12]
 800e7b8:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800e7bc:	4288      	cmp	r0, r1
 800e7be:	d1f8      	bne.n	800e7b2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800e7c0:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800e7c4:	e9d2 6700 	ldrd	r6, r7, [r2]
 800e7c8:	42a6      	cmp	r6, r4
 800e7ca:	eb77 0205 	sbcs.w	r2, r7, r5
 800e7ce:	daf0      	bge.n	800e7b2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800e7d0:	469c      	mov	ip, r3
 800e7d2:	689b      	ldr	r3, [r3, #8]
 800e7d4:	4634      	mov	r4, r6
 800e7d6:	463d      	mov	r5, r7
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d1ec      	bne.n	800e7b6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800e7dc:	4660      	mov	r0, ip
 800e7de:	bcf0      	pop	{r4, r5, r6, r7}
 800e7e0:	4770      	bx	lr
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	4770      	bx	lr
 800e7e6:	bf00      	nop
 800e7e8:	20009ec0 	.word	0x20009ec0
 800e7ec:	00000000 	.word	0x00000000

0800e7f0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f4:	4e38      	ldr	r6, [pc, #224]	; (800e8d8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800e7f6:	f8d6 8000 	ldr.w	r8, [r6]
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	f007 fbd2 	bl	8015fa4 <rmw_uros_epoch_nanos>
 800e800:	f1b8 0f00 	cmp.w	r8, #0
 800e804:	d05f      	beq.n	800e8c6 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800e806:	46b1      	mov	r9, r6
 800e808:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800e80c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800e810:	2b04      	cmp	r3, #4
 800e812:	4682      	mov	sl, r0
 800e814:	468b      	mov	fp, r1
 800e816:	d02d      	beq.n	800e874 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800e818:	2b05      	cmp	r3, #5
 800e81a:	d041      	beq.n	800e8a0 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800e81c:	2b03      	cmp	r3, #3
 800e81e:	d029      	beq.n	800e874 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800e820:	2200      	movs	r2, #0
 800e822:	2300      	movs	r3, #0
 800e824:	e9cd 2300 	strd	r2, r3, [sp]
 800e828:	2001      	movs	r0, #1
 800e82a:	2100      	movs	r1, #0
 800e82c:	9b00      	ldr	r3, [sp, #0]
 800e82e:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800e832:	e9d6 6700 	ldrd	r6, r7, [r6]
 800e836:	18c2      	adds	r2, r0, r3
 800e838:	9b01      	ldr	r3, [sp, #4]
 800e83a:	eb41 0303 	adc.w	r3, r1, r3
 800e83e:	1994      	adds	r4, r2, r6
 800e840:	eb43 0507 	adc.w	r5, r3, r7
 800e844:	4554      	cmp	r4, sl
 800e846:	eb75 020b 	sbcs.w	r2, r5, fp
 800e84a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e84e:	db03      	blt.n	800e858 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e850:	45b2      	cmp	sl, r6
 800e852:	eb7b 0207 	sbcs.w	r2, fp, r7
 800e856:	da05      	bge.n	800e864 <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800e858:	4641      	mov	r1, r8
 800e85a:	4648      	mov	r0, r9
 800e85c:	9300      	str	r3, [sp, #0]
 800e85e:	f006 fc67 	bl	8015130 <put_memory>
 800e862:	9b00      	ldr	r3, [sp, #0]
 800e864:	b37b      	cbz	r3, 800e8c6 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800e866:	4698      	mov	r8, r3
 800e868:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800e86c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800e870:	2b04      	cmp	r3, #4
 800e872:	d1d1      	bne.n	800e818 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800e874:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800e878:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800e87c:	e9cd 2300 	strd	r2, r3, [sp]
 800e880:	4313      	orrs	r3, r2
 800e882:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800e886:	d015      	beq.n	800e8b4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e888:	9a01      	ldr	r2, [sp, #4]
 800e88a:	4b14      	ldr	r3, [pc, #80]	; (800e8dc <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800e88c:	fb03 f702 	mul.w	r7, r3, r2
 800e890:	9a00      	ldr	r2, [sp, #0]
 800e892:	fba2 2303 	umull	r2, r3, r2, r3
 800e896:	e9cd 2300 	strd	r2, r3, [sp]
 800e89a:	443b      	add	r3, r7
 800e89c:	9301      	str	r3, [sp, #4]
 800e89e:	e7c5      	b.n	800e82c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800e8a0:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800e8a4:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800e8a8:	e9cd 2300 	strd	r2, r3, [sp]
 800e8ac:	4313      	orrs	r3, r2
 800e8ae:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800e8b2:	d1e9      	bne.n	800e888 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800e8b4:	ea50 0301 	orrs.w	r3, r0, r1
 800e8b8:	bf02      	ittt	eq
 800e8ba:	a305      	addeq	r3, pc, #20	; (adr r3, 800e8d0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800e8bc:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800e8c0:	e9cd 2300 	strdeq	r2, r3, [sp]
 800e8c4:	e7b2      	b.n	800e82c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800e8c6:	b003      	add	sp, #12
 800e8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8cc:	f3af 8000 	nop.w
 800e8d0:	fc23ac00 	.word	0xfc23ac00
 800e8d4:	00000006 	.word	0x00000006
 800e8d8:	20009ec0 	.word	0x20009ec0
 800e8dc:	3b9aca00 	.word	0x3b9aca00

0800e8e0 <run_xrce_session>:
 800e8e0:	b510      	push	{r4, lr}
 800e8e2:	788c      	ldrb	r4, [r1, #2]
 800e8e4:	b086      	sub	sp, #24
 800e8e6:	2c01      	cmp	r4, #1
 800e8e8:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e8ec:	d00c      	beq.n	800e908 <run_xrce_session+0x28>
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	f10d 020e 	add.w	r2, sp, #14
 800e8f8:	f10d 0317 	add.w	r3, sp, #23
 800e8fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e900:	f002 f958 	bl	8010bb4 <uxr_run_session_until_all_status>
 800e904:	b006      	add	sp, #24
 800e906:	bd10      	pop	{r4, pc}
 800e908:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e90c:	f001 fd70 	bl	80103f0 <uxr_flash_output_streams>
 800e910:	4620      	mov	r0, r4
 800e912:	b006      	add	sp, #24
 800e914:	bd10      	pop	{r4, pc}
 800e916:	bf00      	nop

0800e918 <convert_qos_profile>:
 800e918:	b430      	push	{r4, r5}
 800e91a:	7a0d      	ldrb	r5, [r1, #8]
 800e91c:	780c      	ldrb	r4, [r1, #0]
 800e91e:	7a4a      	ldrb	r2, [r1, #9]
 800e920:	8889      	ldrh	r1, [r1, #4]
 800e922:	8081      	strh	r1, [r0, #4]
 800e924:	f1a5 0502 	sub.w	r5, r5, #2
 800e928:	f1a4 0402 	sub.w	r4, r4, #2
 800e92c:	2a02      	cmp	r2, #2
 800e92e:	fab5 f585 	clz	r5, r5
 800e932:	fab4 f484 	clz	r4, r4
 800e936:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800e93a:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800e93e:	bf18      	it	ne
 800e940:	2200      	movne	r2, #0
 800e942:	7045      	strb	r5, [r0, #1]
 800e944:	7084      	strb	r4, [r0, #2]
 800e946:	7002      	strb	r2, [r0, #0]
 800e948:	bc30      	pop	{r4, r5}
 800e94a:	4770      	bx	lr

0800e94c <generate_type_name>:
 800e94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e94e:	2300      	movs	r3, #0
 800e950:	700b      	strb	r3, [r1, #0]
 800e952:	6803      	ldr	r3, [r0, #0]
 800e954:	b087      	sub	sp, #28
 800e956:	4614      	mov	r4, r2
 800e958:	b1d3      	cbz	r3, 800e990 <generate_type_name+0x44>
 800e95a:	4d0f      	ldr	r5, [pc, #60]	; (800e998 <generate_type_name+0x4c>)
 800e95c:	462f      	mov	r7, r5
 800e95e:	4a0f      	ldr	r2, [pc, #60]	; (800e99c <generate_type_name+0x50>)
 800e960:	4e0f      	ldr	r6, [pc, #60]	; (800e9a0 <generate_type_name+0x54>)
 800e962:	6840      	ldr	r0, [r0, #4]
 800e964:	9004      	str	r0, [sp, #16]
 800e966:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800e96a:	4608      	mov	r0, r1
 800e96c:	9205      	str	r2, [sp, #20]
 800e96e:	9503      	str	r5, [sp, #12]
 800e970:	4a0c      	ldr	r2, [pc, #48]	; (800e9a4 <generate_type_name+0x58>)
 800e972:	9700      	str	r7, [sp, #0]
 800e974:	4621      	mov	r1, r4
 800e976:	f009 fcef 	bl	8018358 <sniprintf>
 800e97a:	2800      	cmp	r0, #0
 800e97c:	db05      	blt.n	800e98a <generate_type_name+0x3e>
 800e97e:	4284      	cmp	r4, r0
 800e980:	bfd4      	ite	le
 800e982:	2000      	movle	r0, #0
 800e984:	2001      	movgt	r0, #1
 800e986:	b007      	add	sp, #28
 800e988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e98a:	2000      	movs	r0, #0
 800e98c:	b007      	add	sp, #28
 800e98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e990:	4b05      	ldr	r3, [pc, #20]	; (800e9a8 <generate_type_name+0x5c>)
 800e992:	4d01      	ldr	r5, [pc, #4]	; (800e998 <generate_type_name+0x4c>)
 800e994:	461f      	mov	r7, r3
 800e996:	e7e2      	b.n	800e95e <generate_type_name+0x12>
 800e998:	08019adc 	.word	0x08019adc
 800e99c:	08019af0 	.word	0x08019af0
 800e9a0:	08019af4 	.word	0x08019af4
 800e9a4:	08019ae0 	.word	0x08019ae0
 800e9a8:	08019dcc 	.word	0x08019dcc

0800e9ac <generate_topic_name>:
 800e9ac:	b510      	push	{r4, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	4b09      	ldr	r3, [pc, #36]	; (800e9d8 <generate_topic_name+0x2c>)
 800e9b2:	9000      	str	r0, [sp, #0]
 800e9b4:	4614      	mov	r4, r2
 800e9b6:	4608      	mov	r0, r1
 800e9b8:	4611      	mov	r1, r2
 800e9ba:	4a08      	ldr	r2, [pc, #32]	; (800e9dc <generate_topic_name+0x30>)
 800e9bc:	f009 fccc 	bl	8018358 <sniprintf>
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	db05      	blt.n	800e9d0 <generate_topic_name+0x24>
 800e9c4:	4284      	cmp	r4, r0
 800e9c6:	bfd4      	ite	le
 800e9c8:	2000      	movle	r0, #0
 800e9ca:	2001      	movgt	r0, #1
 800e9cc:	b002      	add	sp, #8
 800e9ce:	bd10      	pop	{r4, pc}
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	b002      	add	sp, #8
 800e9d4:	bd10      	pop	{r4, pc}
 800e9d6:	bf00      	nop
 800e9d8:	08019b00 	.word	0x08019b00
 800e9dc:	08019af8 	.word	0x08019af8

0800e9e0 <is_uxrce_rmw_identifier_valid>:
 800e9e0:	b510      	push	{r4, lr}
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	b140      	cbz	r0, 800e9f8 <is_uxrce_rmw_identifier_valid+0x18>
 800e9e6:	f006 fbfb 	bl	80151e0 <rmw_get_implementation_identifier>
 800e9ea:	4601      	mov	r1, r0
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f7f1 fbf7 	bl	80001e0 <strcmp>
 800e9f2:	fab0 f080 	clz	r0, r0
 800e9f6:	0940      	lsrs	r0, r0, #5
 800e9f8:	bd10      	pop	{r4, pc}
 800e9fa:	bf00      	nop

0800e9fc <get_message_typesupport_handle>:
 800e9fc:	6883      	ldr	r3, [r0, #8]
 800e9fe:	4718      	bx	r3

0800ea00 <get_message_typesupport_handle_function>:
 800ea00:	b510      	push	{r4, lr}
 800ea02:	4604      	mov	r4, r0
 800ea04:	6800      	ldr	r0, [r0, #0]
 800ea06:	f7f1 fbeb 	bl	80001e0 <strcmp>
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	bf0c      	ite	eq
 800ea0e:	4620      	moveq	r0, r4
 800ea10:	2000      	movne	r0, #0
 800ea12:	bd10      	pop	{r4, pc}

0800ea14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ea14:	f000 b82a 	b.w	800ea6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>

0800ea18 <_Int32__max_serialized_size>:
 800ea18:	b508      	push	{r3, lr}
 800ea1a:	2104      	movs	r1, #4
 800ea1c:	2000      	movs	r0, #0
 800ea1e:	f001 f807 	bl	800fa30 <ucdr_alignment>
 800ea22:	3004      	adds	r0, #4
 800ea24:	bd08      	pop	{r3, pc}
 800ea26:	bf00      	nop

0800ea28 <_Int32__cdr_deserialize>:
 800ea28:	b109      	cbz	r1, 800ea2e <_Int32__cdr_deserialize+0x6>
 800ea2a:	f000 bf1b 	b.w	800f864 <ucdr_deserialize_int32_t>
 800ea2e:	4608      	mov	r0, r1
 800ea30:	4770      	bx	lr
 800ea32:	bf00      	nop

0800ea34 <get_serialized_size_std_msgs__msg__Int32>:
 800ea34:	b130      	cbz	r0, 800ea44 <get_serialized_size_std_msgs__msg__Int32+0x10>
 800ea36:	b508      	push	{r3, lr}
 800ea38:	4608      	mov	r0, r1
 800ea3a:	2104      	movs	r1, #4
 800ea3c:	f000 fff8 	bl	800fa30 <ucdr_alignment>
 800ea40:	3004      	adds	r0, #4
 800ea42:	bd08      	pop	{r3, pc}
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop

0800ea48 <_Int32__cdr_serialize>:
 800ea48:	460a      	mov	r2, r1
 800ea4a:	b118      	cbz	r0, 800ea54 <_Int32__cdr_serialize+0xc>
 800ea4c:	6801      	ldr	r1, [r0, #0]
 800ea4e:	4610      	mov	r0, r2
 800ea50:	f000 be70 	b.w	800f734 <ucdr_serialize_int32_t>
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop

0800ea58 <_Int32__get_serialized_size>:
 800ea58:	b130      	cbz	r0, 800ea68 <_Int32__get_serialized_size+0x10>
 800ea5a:	b508      	push	{r3, lr}
 800ea5c:	2104      	movs	r1, #4
 800ea5e:	2000      	movs	r0, #0
 800ea60:	f000 ffe6 	bl	800fa30 <ucdr_alignment>
 800ea64:	3004      	adds	r0, #4
 800ea66:	bd08      	pop	{r3, pc}
 800ea68:	4770      	bx	lr
 800ea6a:	bf00      	nop

0800ea6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ea6c:	4800      	ldr	r0, [pc, #0]	; (800ea70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800ea6e:	4770      	bx	lr
 800ea70:	2000004c 	.word	0x2000004c

0800ea74 <ucdr_serialize_bool>:
 800ea74:	b538      	push	{r3, r4, r5, lr}
 800ea76:	460d      	mov	r5, r1
 800ea78:	2101      	movs	r1, #1
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	f000 ff8e 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800ea80:	b148      	cbz	r0, 800ea96 <ucdr_serialize_bool+0x22>
 800ea82:	68a3      	ldr	r3, [r4, #8]
 800ea84:	701d      	strb	r5, [r3, #0]
 800ea86:	68a2      	ldr	r2, [r4, #8]
 800ea88:	6923      	ldr	r3, [r4, #16]
 800ea8a:	3201      	adds	r2, #1
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	2101      	movs	r1, #1
 800ea90:	60a2      	str	r2, [r4, #8]
 800ea92:	6123      	str	r3, [r4, #16]
 800ea94:	7561      	strb	r1, [r4, #21]
 800ea96:	7da0      	ldrb	r0, [r4, #22]
 800ea98:	f080 0001 	eor.w	r0, r0, #1
 800ea9c:	bd38      	pop	{r3, r4, r5, pc}
 800ea9e:	bf00      	nop

0800eaa0 <ucdr_deserialize_bool>:
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	460d      	mov	r5, r1
 800eaa4:	2101      	movs	r1, #1
 800eaa6:	4604      	mov	r4, r0
 800eaa8:	f000 ff78 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800eaac:	b168      	cbz	r0, 800eaca <ucdr_deserialize_bool+0x2a>
 800eaae:	68a2      	ldr	r2, [r4, #8]
 800eab0:	6923      	ldr	r3, [r4, #16]
 800eab2:	f812 1b01 	ldrb.w	r1, [r2], #1
 800eab6:	3900      	subs	r1, #0
 800eab8:	f103 0301 	add.w	r3, r3, #1
 800eabc:	bf18      	it	ne
 800eabe:	2101      	movne	r1, #1
 800eac0:	2001      	movs	r0, #1
 800eac2:	7029      	strb	r1, [r5, #0]
 800eac4:	60a2      	str	r2, [r4, #8]
 800eac6:	6123      	str	r3, [r4, #16]
 800eac8:	7560      	strb	r0, [r4, #21]
 800eaca:	7da0      	ldrb	r0, [r4, #22]
 800eacc:	f080 0001 	eor.w	r0, r0, #1
 800ead0:	bd38      	pop	{r3, r4, r5, pc}
 800ead2:	bf00      	nop

0800ead4 <ucdr_serialize_uint8_t>:
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	460d      	mov	r5, r1
 800ead8:	2101      	movs	r1, #1
 800eada:	4604      	mov	r4, r0
 800eadc:	f000 ff5e 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800eae0:	b148      	cbz	r0, 800eaf6 <ucdr_serialize_uint8_t+0x22>
 800eae2:	68a3      	ldr	r3, [r4, #8]
 800eae4:	701d      	strb	r5, [r3, #0]
 800eae6:	68a2      	ldr	r2, [r4, #8]
 800eae8:	6923      	ldr	r3, [r4, #16]
 800eaea:	3201      	adds	r2, #1
 800eaec:	3301      	adds	r3, #1
 800eaee:	2101      	movs	r1, #1
 800eaf0:	60a2      	str	r2, [r4, #8]
 800eaf2:	6123      	str	r3, [r4, #16]
 800eaf4:	7561      	strb	r1, [r4, #21]
 800eaf6:	7da0      	ldrb	r0, [r4, #22]
 800eaf8:	f080 0001 	eor.w	r0, r0, #1
 800eafc:	bd38      	pop	{r3, r4, r5, pc}
 800eafe:	bf00      	nop

0800eb00 <ucdr_deserialize_uint8_t>:
 800eb00:	b538      	push	{r3, r4, r5, lr}
 800eb02:	460d      	mov	r5, r1
 800eb04:	2101      	movs	r1, #1
 800eb06:	4604      	mov	r4, r0
 800eb08:	f000 ff48 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800eb0c:	b150      	cbz	r0, 800eb24 <ucdr_deserialize_uint8_t+0x24>
 800eb0e:	68a3      	ldr	r3, [r4, #8]
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	702b      	strb	r3, [r5, #0]
 800eb14:	68a2      	ldr	r2, [r4, #8]
 800eb16:	6923      	ldr	r3, [r4, #16]
 800eb18:	3201      	adds	r2, #1
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	2101      	movs	r1, #1
 800eb1e:	60a2      	str	r2, [r4, #8]
 800eb20:	6123      	str	r3, [r4, #16]
 800eb22:	7561      	strb	r1, [r4, #21]
 800eb24:	7da0      	ldrb	r0, [r4, #22]
 800eb26:	f080 0001 	eor.w	r0, r0, #1
 800eb2a:	bd38      	pop	{r3, r4, r5, pc}

0800eb2c <ucdr_serialize_uint16_t>:
 800eb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb30:	b082      	sub	sp, #8
 800eb32:	460b      	mov	r3, r1
 800eb34:	2102      	movs	r1, #2
 800eb36:	4604      	mov	r4, r0
 800eb38:	f8ad 3006 	strh.w	r3, [sp, #6]
 800eb3c:	f000 ff80 	bl	800fa40 <ucdr_buffer_alignment>
 800eb40:	4601      	mov	r1, r0
 800eb42:	4620      	mov	r0, r4
 800eb44:	7d67      	ldrb	r7, [r4, #21]
 800eb46:	f000 ffbf 	bl	800fac8 <ucdr_advance_buffer>
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	2102      	movs	r1, #2
 800eb4e:	f000 ff19 	bl	800f984 <ucdr_check_buffer_available_for>
 800eb52:	bb78      	cbnz	r0, 800ebb4 <ucdr_serialize_uint16_t+0x88>
 800eb54:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800eb58:	42b5      	cmp	r5, r6
 800eb5a:	d926      	bls.n	800ebaa <ucdr_serialize_uint16_t+0x7e>
 800eb5c:	6922      	ldr	r2, [r4, #16]
 800eb5e:	60a5      	str	r5, [r4, #8]
 800eb60:	1bad      	subs	r5, r5, r6
 800eb62:	442a      	add	r2, r5
 800eb64:	f1c5 0802 	rsb	r8, r5, #2
 800eb68:	6122      	str	r2, [r4, #16]
 800eb6a:	4641      	mov	r1, r8
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	f000 ff15 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d03b      	beq.n	800ebee <ucdr_serialize_uint16_t+0xc2>
 800eb76:	7d23      	ldrb	r3, [r4, #20]
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d04a      	beq.n	800ec12 <ucdr_serialize_uint16_t+0xe6>
 800eb7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb80:	7033      	strb	r3, [r6, #0]
 800eb82:	2d00      	cmp	r5, #0
 800eb84:	d040      	beq.n	800ec08 <ucdr_serialize_uint16_t+0xdc>
 800eb86:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb8a:	7073      	strb	r3, [r6, #1]
 800eb8c:	6923      	ldr	r3, [r4, #16]
 800eb8e:	68a2      	ldr	r2, [r4, #8]
 800eb90:	7da0      	ldrb	r0, [r4, #22]
 800eb92:	3302      	adds	r3, #2
 800eb94:	1b5b      	subs	r3, r3, r5
 800eb96:	4442      	add	r2, r8
 800eb98:	2102      	movs	r1, #2
 800eb9a:	f080 0001 	eor.w	r0, r0, #1
 800eb9e:	6123      	str	r3, [r4, #16]
 800eba0:	60a2      	str	r2, [r4, #8]
 800eba2:	7561      	strb	r1, [r4, #21]
 800eba4:	b002      	add	sp, #8
 800eba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebaa:	2102      	movs	r1, #2
 800ebac:	4620      	mov	r0, r4
 800ebae:	f000 fef5 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800ebb2:	b190      	cbz	r0, 800ebda <ucdr_serialize_uint16_t+0xae>
 800ebb4:	7d23      	ldrb	r3, [r4, #20]
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	68a3      	ldr	r3, [r4, #8]
 800ebba:	d014      	beq.n	800ebe6 <ucdr_serialize_uint16_t+0xba>
 800ebbc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ebc0:	701a      	strb	r2, [r3, #0]
 800ebc2:	68a3      	ldr	r3, [r4, #8]
 800ebc4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebc8:	705a      	strb	r2, [r3, #1]
 800ebca:	68a2      	ldr	r2, [r4, #8]
 800ebcc:	6923      	ldr	r3, [r4, #16]
 800ebce:	3202      	adds	r2, #2
 800ebd0:	3302      	adds	r3, #2
 800ebd2:	2102      	movs	r1, #2
 800ebd4:	60a2      	str	r2, [r4, #8]
 800ebd6:	6123      	str	r3, [r4, #16]
 800ebd8:	7561      	strb	r1, [r4, #21]
 800ebda:	7da0      	ldrb	r0, [r4, #22]
 800ebdc:	f080 0001 	eor.w	r0, r0, #1
 800ebe0:	b002      	add	sp, #8
 800ebe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ebea:	801a      	strh	r2, [r3, #0]
 800ebec:	e7ed      	b.n	800ebca <ucdr_serialize_uint16_t+0x9e>
 800ebee:	68a2      	ldr	r2, [r4, #8]
 800ebf0:	6923      	ldr	r3, [r4, #16]
 800ebf2:	7da0      	ldrb	r0, [r4, #22]
 800ebf4:	7567      	strb	r7, [r4, #21]
 800ebf6:	1b52      	subs	r2, r2, r5
 800ebf8:	1b5b      	subs	r3, r3, r5
 800ebfa:	f080 0001 	eor.w	r0, r0, #1
 800ebfe:	60a2      	str	r2, [r4, #8]
 800ec00:	6123      	str	r3, [r4, #16]
 800ec02:	b002      	add	sp, #8
 800ec04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec08:	68a3      	ldr	r3, [r4, #8]
 800ec0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec0e:	701a      	strb	r2, [r3, #0]
 800ec10:	e7bc      	b.n	800eb8c <ucdr_serialize_uint16_t+0x60>
 800ec12:	4630      	mov	r0, r6
 800ec14:	f10d 0606 	add.w	r6, sp, #6
 800ec18:	4631      	mov	r1, r6
 800ec1a:	462a      	mov	r2, r5
 800ec1c:	f009 fe1b 	bl	8018856 <memcpy>
 800ec20:	68a0      	ldr	r0, [r4, #8]
 800ec22:	4642      	mov	r2, r8
 800ec24:	1971      	adds	r1, r6, r5
 800ec26:	f009 fe16 	bl	8018856 <memcpy>
 800ec2a:	e7af      	b.n	800eb8c <ucdr_serialize_uint16_t+0x60>

0800ec2c <ucdr_serialize_endian_uint16_t>:
 800ec2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec30:	b083      	sub	sp, #12
 800ec32:	460d      	mov	r5, r1
 800ec34:	2102      	movs	r1, #2
 800ec36:	4604      	mov	r4, r0
 800ec38:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ec3c:	f000 ff00 	bl	800fa40 <ucdr_buffer_alignment>
 800ec40:	4601      	mov	r1, r0
 800ec42:	4620      	mov	r0, r4
 800ec44:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ec48:	f000 ff3e 	bl	800fac8 <ucdr_advance_buffer>
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	2102      	movs	r1, #2
 800ec50:	f000 fe98 	bl	800f984 <ucdr_check_buffer_available_for>
 800ec54:	bb70      	cbnz	r0, 800ecb4 <ucdr_serialize_endian_uint16_t+0x88>
 800ec56:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ec5a:	42be      	cmp	r6, r7
 800ec5c:	d925      	bls.n	800ecaa <ucdr_serialize_endian_uint16_t+0x7e>
 800ec5e:	6922      	ldr	r2, [r4, #16]
 800ec60:	60a6      	str	r6, [r4, #8]
 800ec62:	1bf6      	subs	r6, r6, r7
 800ec64:	4432      	add	r2, r6
 800ec66:	f1c6 0902 	rsb	r9, r6, #2
 800ec6a:	6122      	str	r2, [r4, #16]
 800ec6c:	4649      	mov	r1, r9
 800ec6e:	4620      	mov	r0, r4
 800ec70:	f000 fe94 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d039      	beq.n	800ecec <ucdr_serialize_endian_uint16_t+0xc0>
 800ec78:	2d01      	cmp	r5, #1
 800ec7a:	d04a      	beq.n	800ed12 <ucdr_serialize_endian_uint16_t+0xe6>
 800ec7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec80:	703b      	strb	r3, [r7, #0]
 800ec82:	2e00      	cmp	r6, #0
 800ec84:	d040      	beq.n	800ed08 <ucdr_serialize_endian_uint16_t+0xdc>
 800ec86:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ec8a:	707b      	strb	r3, [r7, #1]
 800ec8c:	6923      	ldr	r3, [r4, #16]
 800ec8e:	68a2      	ldr	r2, [r4, #8]
 800ec90:	7da0      	ldrb	r0, [r4, #22]
 800ec92:	3302      	adds	r3, #2
 800ec94:	1b9b      	subs	r3, r3, r6
 800ec96:	444a      	add	r2, r9
 800ec98:	2102      	movs	r1, #2
 800ec9a:	f080 0001 	eor.w	r0, r0, #1
 800ec9e:	6123      	str	r3, [r4, #16]
 800eca0:	60a2      	str	r2, [r4, #8]
 800eca2:	7561      	strb	r1, [r4, #21]
 800eca4:	b003      	add	sp, #12
 800eca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecaa:	2102      	movs	r1, #2
 800ecac:	4620      	mov	r0, r4
 800ecae:	f000 fe75 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800ecb2:	b188      	cbz	r0, 800ecd8 <ucdr_serialize_endian_uint16_t+0xac>
 800ecb4:	2d01      	cmp	r5, #1
 800ecb6:	68a3      	ldr	r3, [r4, #8]
 800ecb8:	d014      	beq.n	800ece4 <ucdr_serialize_endian_uint16_t+0xb8>
 800ecba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ecbe:	701a      	strb	r2, [r3, #0]
 800ecc0:	68a3      	ldr	r3, [r4, #8]
 800ecc2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ecc6:	705a      	strb	r2, [r3, #1]
 800ecc8:	68a2      	ldr	r2, [r4, #8]
 800ecca:	6923      	ldr	r3, [r4, #16]
 800eccc:	3202      	adds	r2, #2
 800ecce:	3302      	adds	r3, #2
 800ecd0:	2102      	movs	r1, #2
 800ecd2:	60a2      	str	r2, [r4, #8]
 800ecd4:	6123      	str	r3, [r4, #16]
 800ecd6:	7561      	strb	r1, [r4, #21]
 800ecd8:	7da0      	ldrb	r0, [r4, #22]
 800ecda:	f080 0001 	eor.w	r0, r0, #1
 800ecde:	b003      	add	sp, #12
 800ece0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ece4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ece8:	801a      	strh	r2, [r3, #0]
 800ecea:	e7ed      	b.n	800ecc8 <ucdr_serialize_endian_uint16_t+0x9c>
 800ecec:	68a2      	ldr	r2, [r4, #8]
 800ecee:	6923      	ldr	r3, [r4, #16]
 800ecf0:	7da0      	ldrb	r0, [r4, #22]
 800ecf2:	f884 8015 	strb.w	r8, [r4, #21]
 800ecf6:	1b92      	subs	r2, r2, r6
 800ecf8:	1b9b      	subs	r3, r3, r6
 800ecfa:	f080 0001 	eor.w	r0, r0, #1
 800ecfe:	60a2      	str	r2, [r4, #8]
 800ed00:	6123      	str	r3, [r4, #16]
 800ed02:	b003      	add	sp, #12
 800ed04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed08:	68a3      	ldr	r3, [r4, #8]
 800ed0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ed0e:	701a      	strb	r2, [r3, #0]
 800ed10:	e7bc      	b.n	800ec8c <ucdr_serialize_endian_uint16_t+0x60>
 800ed12:	f10d 0506 	add.w	r5, sp, #6
 800ed16:	4629      	mov	r1, r5
 800ed18:	4632      	mov	r2, r6
 800ed1a:	4638      	mov	r0, r7
 800ed1c:	f009 fd9b 	bl	8018856 <memcpy>
 800ed20:	68a0      	ldr	r0, [r4, #8]
 800ed22:	464a      	mov	r2, r9
 800ed24:	19a9      	adds	r1, r5, r6
 800ed26:	f009 fd96 	bl	8018856 <memcpy>
 800ed2a:	e7af      	b.n	800ec8c <ucdr_serialize_endian_uint16_t+0x60>

0800ed2c <ucdr_deserialize_uint16_t>:
 800ed2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed30:	460d      	mov	r5, r1
 800ed32:	2102      	movs	r1, #2
 800ed34:	4604      	mov	r4, r0
 800ed36:	f000 fe83 	bl	800fa40 <ucdr_buffer_alignment>
 800ed3a:	4601      	mov	r1, r0
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ed42:	f000 fec1 	bl	800fac8 <ucdr_advance_buffer>
 800ed46:	4620      	mov	r0, r4
 800ed48:	2102      	movs	r1, #2
 800ed4a:	f000 fe1b 	bl	800f984 <ucdr_check_buffer_available_for>
 800ed4e:	bb60      	cbnz	r0, 800edaa <ucdr_deserialize_uint16_t+0x7e>
 800ed50:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ed54:	42be      	cmp	r6, r7
 800ed56:	d923      	bls.n	800eda0 <ucdr_deserialize_uint16_t+0x74>
 800ed58:	6922      	ldr	r2, [r4, #16]
 800ed5a:	60a6      	str	r6, [r4, #8]
 800ed5c:	1bf6      	subs	r6, r6, r7
 800ed5e:	4432      	add	r2, r6
 800ed60:	f1c6 0902 	rsb	r9, r6, #2
 800ed64:	6122      	str	r2, [r4, #16]
 800ed66:	4649      	mov	r1, r9
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f000 fe17 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d034      	beq.n	800eddc <ucdr_deserialize_uint16_t+0xb0>
 800ed72:	7d23      	ldrb	r3, [r4, #20]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d042      	beq.n	800edfe <ucdr_deserialize_uint16_t+0xd2>
 800ed78:	787b      	ldrb	r3, [r7, #1]
 800ed7a:	702b      	strb	r3, [r5, #0]
 800ed7c:	2e00      	cmp	r6, #0
 800ed7e:	d03a      	beq.n	800edf6 <ucdr_deserialize_uint16_t+0xca>
 800ed80:	783b      	ldrb	r3, [r7, #0]
 800ed82:	706b      	strb	r3, [r5, #1]
 800ed84:	6923      	ldr	r3, [r4, #16]
 800ed86:	68a2      	ldr	r2, [r4, #8]
 800ed88:	7da0      	ldrb	r0, [r4, #22]
 800ed8a:	2102      	movs	r1, #2
 800ed8c:	3302      	adds	r3, #2
 800ed8e:	1b9b      	subs	r3, r3, r6
 800ed90:	444a      	add	r2, r9
 800ed92:	7561      	strb	r1, [r4, #21]
 800ed94:	6123      	str	r3, [r4, #16]
 800ed96:	60a2      	str	r2, [r4, #8]
 800ed98:	f080 0001 	eor.w	r0, r0, #1
 800ed9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eda0:	2102      	movs	r1, #2
 800eda2:	4620      	mov	r0, r4
 800eda4:	f000 fdfa 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800eda8:	b180      	cbz	r0, 800edcc <ucdr_deserialize_uint16_t+0xa0>
 800edaa:	7d23      	ldrb	r3, [r4, #20]
 800edac:	2b01      	cmp	r3, #1
 800edae:	68a3      	ldr	r3, [r4, #8]
 800edb0:	d011      	beq.n	800edd6 <ucdr_deserialize_uint16_t+0xaa>
 800edb2:	785b      	ldrb	r3, [r3, #1]
 800edb4:	702b      	strb	r3, [r5, #0]
 800edb6:	68a3      	ldr	r3, [r4, #8]
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	706b      	strb	r3, [r5, #1]
 800edbc:	68a2      	ldr	r2, [r4, #8]
 800edbe:	6923      	ldr	r3, [r4, #16]
 800edc0:	3202      	adds	r2, #2
 800edc2:	3302      	adds	r3, #2
 800edc4:	2102      	movs	r1, #2
 800edc6:	60a2      	str	r2, [r4, #8]
 800edc8:	6123      	str	r3, [r4, #16]
 800edca:	7561      	strb	r1, [r4, #21]
 800edcc:	7da0      	ldrb	r0, [r4, #22]
 800edce:	f080 0001 	eor.w	r0, r0, #1
 800edd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edd6:	881b      	ldrh	r3, [r3, #0]
 800edd8:	802b      	strh	r3, [r5, #0]
 800edda:	e7ef      	b.n	800edbc <ucdr_deserialize_uint16_t+0x90>
 800eddc:	68a2      	ldr	r2, [r4, #8]
 800edde:	6923      	ldr	r3, [r4, #16]
 800ede0:	7da0      	ldrb	r0, [r4, #22]
 800ede2:	f884 8015 	strb.w	r8, [r4, #21]
 800ede6:	1b92      	subs	r2, r2, r6
 800ede8:	1b9b      	subs	r3, r3, r6
 800edea:	60a2      	str	r2, [r4, #8]
 800edec:	6123      	str	r3, [r4, #16]
 800edee:	f080 0001 	eor.w	r0, r0, #1
 800edf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edf6:	68a3      	ldr	r3, [r4, #8]
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	706b      	strb	r3, [r5, #1]
 800edfc:	e7c2      	b.n	800ed84 <ucdr_deserialize_uint16_t+0x58>
 800edfe:	4639      	mov	r1, r7
 800ee00:	4632      	mov	r2, r6
 800ee02:	4628      	mov	r0, r5
 800ee04:	f009 fd27 	bl	8018856 <memcpy>
 800ee08:	68a1      	ldr	r1, [r4, #8]
 800ee0a:	464a      	mov	r2, r9
 800ee0c:	19a8      	adds	r0, r5, r6
 800ee0e:	f009 fd22 	bl	8018856 <memcpy>
 800ee12:	e7b7      	b.n	800ed84 <ucdr_deserialize_uint16_t+0x58>

0800ee14 <ucdr_deserialize_endian_uint16_t>:
 800ee14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee18:	460e      	mov	r6, r1
 800ee1a:	2102      	movs	r1, #2
 800ee1c:	4604      	mov	r4, r0
 800ee1e:	4615      	mov	r5, r2
 800ee20:	f000 fe0e 	bl	800fa40 <ucdr_buffer_alignment>
 800ee24:	4601      	mov	r1, r0
 800ee26:	4620      	mov	r0, r4
 800ee28:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ee2c:	f000 fe4c 	bl	800fac8 <ucdr_advance_buffer>
 800ee30:	4620      	mov	r0, r4
 800ee32:	2102      	movs	r1, #2
 800ee34:	f000 fda6 	bl	800f984 <ucdr_check_buffer_available_for>
 800ee38:	bb70      	cbnz	r0, 800ee98 <ucdr_deserialize_endian_uint16_t+0x84>
 800ee3a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ee3e:	4547      	cmp	r7, r8
 800ee40:	d925      	bls.n	800ee8e <ucdr_deserialize_endian_uint16_t+0x7a>
 800ee42:	6922      	ldr	r2, [r4, #16]
 800ee44:	60a7      	str	r7, [r4, #8]
 800ee46:	eba7 0708 	sub.w	r7, r7, r8
 800ee4a:	443a      	add	r2, r7
 800ee4c:	f1c7 0a02 	rsb	sl, r7, #2
 800ee50:	6122      	str	r2, [r4, #16]
 800ee52:	4651      	mov	r1, sl
 800ee54:	4620      	mov	r0, r4
 800ee56:	f000 fda1 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	d034      	beq.n	800eec8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ee5e:	2e01      	cmp	r6, #1
 800ee60:	d043      	beq.n	800eeea <ucdr_deserialize_endian_uint16_t+0xd6>
 800ee62:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ee66:	702b      	strb	r3, [r5, #0]
 800ee68:	2f00      	cmp	r7, #0
 800ee6a:	d03a      	beq.n	800eee2 <ucdr_deserialize_endian_uint16_t+0xce>
 800ee6c:	f898 3000 	ldrb.w	r3, [r8]
 800ee70:	706b      	strb	r3, [r5, #1]
 800ee72:	6923      	ldr	r3, [r4, #16]
 800ee74:	68a2      	ldr	r2, [r4, #8]
 800ee76:	7da0      	ldrb	r0, [r4, #22]
 800ee78:	2102      	movs	r1, #2
 800ee7a:	3302      	adds	r3, #2
 800ee7c:	1bdb      	subs	r3, r3, r7
 800ee7e:	4452      	add	r2, sl
 800ee80:	7561      	strb	r1, [r4, #21]
 800ee82:	6123      	str	r3, [r4, #16]
 800ee84:	60a2      	str	r2, [r4, #8]
 800ee86:	f080 0001 	eor.w	r0, r0, #1
 800ee8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee8e:	2102      	movs	r1, #2
 800ee90:	4620      	mov	r0, r4
 800ee92:	f000 fd83 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800ee96:	b178      	cbz	r0, 800eeb8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ee98:	2e01      	cmp	r6, #1
 800ee9a:	68a3      	ldr	r3, [r4, #8]
 800ee9c:	d011      	beq.n	800eec2 <ucdr_deserialize_endian_uint16_t+0xae>
 800ee9e:	785b      	ldrb	r3, [r3, #1]
 800eea0:	702b      	strb	r3, [r5, #0]
 800eea2:	68a3      	ldr	r3, [r4, #8]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	706b      	strb	r3, [r5, #1]
 800eea8:	68a2      	ldr	r2, [r4, #8]
 800eeaa:	6923      	ldr	r3, [r4, #16]
 800eeac:	3202      	adds	r2, #2
 800eeae:	3302      	adds	r3, #2
 800eeb0:	2102      	movs	r1, #2
 800eeb2:	60a2      	str	r2, [r4, #8]
 800eeb4:	6123      	str	r3, [r4, #16]
 800eeb6:	7561      	strb	r1, [r4, #21]
 800eeb8:	7da0      	ldrb	r0, [r4, #22]
 800eeba:	f080 0001 	eor.w	r0, r0, #1
 800eebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eec2:	881b      	ldrh	r3, [r3, #0]
 800eec4:	802b      	strh	r3, [r5, #0]
 800eec6:	e7ef      	b.n	800eea8 <ucdr_deserialize_endian_uint16_t+0x94>
 800eec8:	68a2      	ldr	r2, [r4, #8]
 800eeca:	6923      	ldr	r3, [r4, #16]
 800eecc:	7da0      	ldrb	r0, [r4, #22]
 800eece:	f884 9015 	strb.w	r9, [r4, #21]
 800eed2:	1bd2      	subs	r2, r2, r7
 800eed4:	1bdb      	subs	r3, r3, r7
 800eed6:	60a2      	str	r2, [r4, #8]
 800eed8:	6123      	str	r3, [r4, #16]
 800eeda:	f080 0001 	eor.w	r0, r0, #1
 800eede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eee2:	68a3      	ldr	r3, [r4, #8]
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	706b      	strb	r3, [r5, #1]
 800eee8:	e7c3      	b.n	800ee72 <ucdr_deserialize_endian_uint16_t+0x5e>
 800eeea:	4641      	mov	r1, r8
 800eeec:	463a      	mov	r2, r7
 800eeee:	4628      	mov	r0, r5
 800eef0:	f009 fcb1 	bl	8018856 <memcpy>
 800eef4:	68a1      	ldr	r1, [r4, #8]
 800eef6:	4652      	mov	r2, sl
 800eef8:	19e8      	adds	r0, r5, r7
 800eefa:	f009 fcac 	bl	8018856 <memcpy>
 800eefe:	e7b8      	b.n	800ee72 <ucdr_deserialize_endian_uint16_t+0x5e>

0800ef00 <ucdr_serialize_uint32_t>:
 800ef00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef04:	b082      	sub	sp, #8
 800ef06:	4604      	mov	r4, r0
 800ef08:	9101      	str	r1, [sp, #4]
 800ef0a:	2104      	movs	r1, #4
 800ef0c:	f000 fd98 	bl	800fa40 <ucdr_buffer_alignment>
 800ef10:	4601      	mov	r1, r0
 800ef12:	4620      	mov	r0, r4
 800ef14:	7d67      	ldrb	r7, [r4, #21]
 800ef16:	f000 fdd7 	bl	800fac8 <ucdr_advance_buffer>
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	2104      	movs	r1, #4
 800ef1e:	f000 fd31 	bl	800f984 <ucdr_check_buffer_available_for>
 800ef22:	2800      	cmp	r0, #0
 800ef24:	d139      	bne.n	800ef9a <ucdr_serialize_uint32_t+0x9a>
 800ef26:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800ef2a:	42ae      	cmp	r6, r5
 800ef2c:	d930      	bls.n	800ef90 <ucdr_serialize_uint32_t+0x90>
 800ef2e:	6922      	ldr	r2, [r4, #16]
 800ef30:	60a6      	str	r6, [r4, #8]
 800ef32:	1b76      	subs	r6, r6, r5
 800ef34:	4432      	add	r2, r6
 800ef36:	f1c6 0804 	rsb	r8, r6, #4
 800ef3a:	6122      	str	r2, [r4, #16]
 800ef3c:	4641      	mov	r1, r8
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f000 fd2c 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d04c      	beq.n	800efe2 <ucdr_serialize_uint32_t+0xe2>
 800ef48:	7d23      	ldrb	r3, [r4, #20]
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d063      	beq.n	800f016 <ucdr_serialize_uint32_t+0x116>
 800ef4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef52:	702b      	strb	r3, [r5, #0]
 800ef54:	2e00      	cmp	r6, #0
 800ef56:	d051      	beq.n	800effc <ucdr_serialize_uint32_t+0xfc>
 800ef58:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ef5c:	706b      	strb	r3, [r5, #1]
 800ef5e:	2e01      	cmp	r6, #1
 800ef60:	d050      	beq.n	800f004 <ucdr_serialize_uint32_t+0x104>
 800ef62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ef66:	70ab      	strb	r3, [r5, #2]
 800ef68:	2e02      	cmp	r6, #2
 800ef6a:	d04f      	beq.n	800f00c <ucdr_serialize_uint32_t+0x10c>
 800ef6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef70:	70eb      	strb	r3, [r5, #3]
 800ef72:	6923      	ldr	r3, [r4, #16]
 800ef74:	68a2      	ldr	r2, [r4, #8]
 800ef76:	7da0      	ldrb	r0, [r4, #22]
 800ef78:	3304      	adds	r3, #4
 800ef7a:	1b9b      	subs	r3, r3, r6
 800ef7c:	4442      	add	r2, r8
 800ef7e:	2104      	movs	r1, #4
 800ef80:	f080 0001 	eor.w	r0, r0, #1
 800ef84:	6123      	str	r3, [r4, #16]
 800ef86:	60a2      	str	r2, [r4, #8]
 800ef88:	7561      	strb	r1, [r4, #21]
 800ef8a:	b002      	add	sp, #8
 800ef8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef90:	2104      	movs	r1, #4
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 fd02 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800ef98:	b1d0      	cbz	r0, 800efd0 <ucdr_serialize_uint32_t+0xd0>
 800ef9a:	7d23      	ldrb	r3, [r4, #20]
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	68a3      	ldr	r3, [r4, #8]
 800efa0:	d01c      	beq.n	800efdc <ucdr_serialize_uint32_t+0xdc>
 800efa2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800efa6:	701a      	strb	r2, [r3, #0]
 800efa8:	68a3      	ldr	r3, [r4, #8]
 800efaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800efae:	705a      	strb	r2, [r3, #1]
 800efb0:	68a3      	ldr	r3, [r4, #8]
 800efb2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800efb6:	709a      	strb	r2, [r3, #2]
 800efb8:	68a3      	ldr	r3, [r4, #8]
 800efba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800efbe:	70da      	strb	r2, [r3, #3]
 800efc0:	68a2      	ldr	r2, [r4, #8]
 800efc2:	6923      	ldr	r3, [r4, #16]
 800efc4:	3204      	adds	r2, #4
 800efc6:	3304      	adds	r3, #4
 800efc8:	2104      	movs	r1, #4
 800efca:	60a2      	str	r2, [r4, #8]
 800efcc:	6123      	str	r3, [r4, #16]
 800efce:	7561      	strb	r1, [r4, #21]
 800efd0:	7da0      	ldrb	r0, [r4, #22]
 800efd2:	f080 0001 	eor.w	r0, r0, #1
 800efd6:	b002      	add	sp, #8
 800efd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efdc:	9a01      	ldr	r2, [sp, #4]
 800efde:	601a      	str	r2, [r3, #0]
 800efe0:	e7ee      	b.n	800efc0 <ucdr_serialize_uint32_t+0xc0>
 800efe2:	68a2      	ldr	r2, [r4, #8]
 800efe4:	6923      	ldr	r3, [r4, #16]
 800efe6:	7da0      	ldrb	r0, [r4, #22]
 800efe8:	7567      	strb	r7, [r4, #21]
 800efea:	1b92      	subs	r2, r2, r6
 800efec:	1b9b      	subs	r3, r3, r6
 800efee:	f080 0001 	eor.w	r0, r0, #1
 800eff2:	60a2      	str	r2, [r4, #8]
 800eff4:	6123      	str	r3, [r4, #16]
 800eff6:	b002      	add	sp, #8
 800eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effc:	68a3      	ldr	r3, [r4, #8]
 800effe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f002:	701a      	strb	r2, [r3, #0]
 800f004:	68a3      	ldr	r3, [r4, #8]
 800f006:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f00a:	701a      	strb	r2, [r3, #0]
 800f00c:	68a3      	ldr	r3, [r4, #8]
 800f00e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f012:	701a      	strb	r2, [r3, #0]
 800f014:	e7ad      	b.n	800ef72 <ucdr_serialize_uint32_t+0x72>
 800f016:	4628      	mov	r0, r5
 800f018:	ad01      	add	r5, sp, #4
 800f01a:	4629      	mov	r1, r5
 800f01c:	4632      	mov	r2, r6
 800f01e:	f009 fc1a 	bl	8018856 <memcpy>
 800f022:	68a0      	ldr	r0, [r4, #8]
 800f024:	4642      	mov	r2, r8
 800f026:	19a9      	adds	r1, r5, r6
 800f028:	f009 fc15 	bl	8018856 <memcpy>
 800f02c:	e7a1      	b.n	800ef72 <ucdr_serialize_uint32_t+0x72>
 800f02e:	bf00      	nop

0800f030 <ucdr_serialize_endian_uint32_t>:
 800f030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f034:	b083      	sub	sp, #12
 800f036:	460d      	mov	r5, r1
 800f038:	2104      	movs	r1, #4
 800f03a:	4604      	mov	r4, r0
 800f03c:	9201      	str	r2, [sp, #4]
 800f03e:	f000 fcff 	bl	800fa40 <ucdr_buffer_alignment>
 800f042:	4601      	mov	r1, r0
 800f044:	4620      	mov	r0, r4
 800f046:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f04a:	f000 fd3d 	bl	800fac8 <ucdr_advance_buffer>
 800f04e:	4620      	mov	r0, r4
 800f050:	2104      	movs	r1, #4
 800f052:	f000 fc97 	bl	800f984 <ucdr_check_buffer_available_for>
 800f056:	2800      	cmp	r0, #0
 800f058:	d138      	bne.n	800f0cc <ucdr_serialize_endian_uint32_t+0x9c>
 800f05a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f05e:	42b7      	cmp	r7, r6
 800f060:	d92f      	bls.n	800f0c2 <ucdr_serialize_endian_uint32_t+0x92>
 800f062:	6922      	ldr	r2, [r4, #16]
 800f064:	60a7      	str	r7, [r4, #8]
 800f066:	1bbf      	subs	r7, r7, r6
 800f068:	443a      	add	r2, r7
 800f06a:	f1c7 0904 	rsb	r9, r7, #4
 800f06e:	6122      	str	r2, [r4, #16]
 800f070:	4649      	mov	r1, r9
 800f072:	4620      	mov	r0, r4
 800f074:	f000 fc92 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f078:	2800      	cmp	r0, #0
 800f07a:	d04a      	beq.n	800f112 <ucdr_serialize_endian_uint32_t+0xe2>
 800f07c:	2d01      	cmp	r5, #1
 800f07e:	d063      	beq.n	800f148 <ucdr_serialize_endian_uint32_t+0x118>
 800f080:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f084:	7033      	strb	r3, [r6, #0]
 800f086:	2f00      	cmp	r7, #0
 800f088:	d051      	beq.n	800f12e <ucdr_serialize_endian_uint32_t+0xfe>
 800f08a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f08e:	7073      	strb	r3, [r6, #1]
 800f090:	2f01      	cmp	r7, #1
 800f092:	d050      	beq.n	800f136 <ucdr_serialize_endian_uint32_t+0x106>
 800f094:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f098:	70b3      	strb	r3, [r6, #2]
 800f09a:	2f02      	cmp	r7, #2
 800f09c:	d04f      	beq.n	800f13e <ucdr_serialize_endian_uint32_t+0x10e>
 800f09e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f0a2:	70f3      	strb	r3, [r6, #3]
 800f0a4:	6923      	ldr	r3, [r4, #16]
 800f0a6:	68a2      	ldr	r2, [r4, #8]
 800f0a8:	7da0      	ldrb	r0, [r4, #22]
 800f0aa:	3304      	adds	r3, #4
 800f0ac:	1bdb      	subs	r3, r3, r7
 800f0ae:	444a      	add	r2, r9
 800f0b0:	2104      	movs	r1, #4
 800f0b2:	f080 0001 	eor.w	r0, r0, #1
 800f0b6:	6123      	str	r3, [r4, #16]
 800f0b8:	60a2      	str	r2, [r4, #8]
 800f0ba:	7561      	strb	r1, [r4, #21]
 800f0bc:	b003      	add	sp, #12
 800f0be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0c2:	2104      	movs	r1, #4
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f000 fc69 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f0ca:	b1c8      	cbz	r0, 800f100 <ucdr_serialize_endian_uint32_t+0xd0>
 800f0cc:	2d01      	cmp	r5, #1
 800f0ce:	68a3      	ldr	r3, [r4, #8]
 800f0d0:	d01c      	beq.n	800f10c <ucdr_serialize_endian_uint32_t+0xdc>
 800f0d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f0d6:	701a      	strb	r2, [r3, #0]
 800f0d8:	68a3      	ldr	r3, [r4, #8]
 800f0da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f0de:	705a      	strb	r2, [r3, #1]
 800f0e0:	68a3      	ldr	r3, [r4, #8]
 800f0e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f0e6:	709a      	strb	r2, [r3, #2]
 800f0e8:	68a3      	ldr	r3, [r4, #8]
 800f0ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f0ee:	70da      	strb	r2, [r3, #3]
 800f0f0:	68a2      	ldr	r2, [r4, #8]
 800f0f2:	6923      	ldr	r3, [r4, #16]
 800f0f4:	3204      	adds	r2, #4
 800f0f6:	3304      	adds	r3, #4
 800f0f8:	2104      	movs	r1, #4
 800f0fa:	60a2      	str	r2, [r4, #8]
 800f0fc:	6123      	str	r3, [r4, #16]
 800f0fe:	7561      	strb	r1, [r4, #21]
 800f100:	7da0      	ldrb	r0, [r4, #22]
 800f102:	f080 0001 	eor.w	r0, r0, #1
 800f106:	b003      	add	sp, #12
 800f108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f10c:	9a01      	ldr	r2, [sp, #4]
 800f10e:	601a      	str	r2, [r3, #0]
 800f110:	e7ee      	b.n	800f0f0 <ucdr_serialize_endian_uint32_t+0xc0>
 800f112:	68a2      	ldr	r2, [r4, #8]
 800f114:	6923      	ldr	r3, [r4, #16]
 800f116:	7da0      	ldrb	r0, [r4, #22]
 800f118:	f884 8015 	strb.w	r8, [r4, #21]
 800f11c:	1bd2      	subs	r2, r2, r7
 800f11e:	1bdb      	subs	r3, r3, r7
 800f120:	f080 0001 	eor.w	r0, r0, #1
 800f124:	60a2      	str	r2, [r4, #8]
 800f126:	6123      	str	r3, [r4, #16]
 800f128:	b003      	add	sp, #12
 800f12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f12e:	68a3      	ldr	r3, [r4, #8]
 800f130:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f134:	701a      	strb	r2, [r3, #0]
 800f136:	68a3      	ldr	r3, [r4, #8]
 800f138:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f13c:	701a      	strb	r2, [r3, #0]
 800f13e:	68a3      	ldr	r3, [r4, #8]
 800f140:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f144:	701a      	strb	r2, [r3, #0]
 800f146:	e7ad      	b.n	800f0a4 <ucdr_serialize_endian_uint32_t+0x74>
 800f148:	ad01      	add	r5, sp, #4
 800f14a:	4629      	mov	r1, r5
 800f14c:	463a      	mov	r2, r7
 800f14e:	4630      	mov	r0, r6
 800f150:	f009 fb81 	bl	8018856 <memcpy>
 800f154:	68a0      	ldr	r0, [r4, #8]
 800f156:	464a      	mov	r2, r9
 800f158:	19e9      	adds	r1, r5, r7
 800f15a:	f009 fb7c 	bl	8018856 <memcpy>
 800f15e:	e7a1      	b.n	800f0a4 <ucdr_serialize_endian_uint32_t+0x74>

0800f160 <ucdr_deserialize_uint32_t>:
 800f160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f164:	460d      	mov	r5, r1
 800f166:	2104      	movs	r1, #4
 800f168:	4604      	mov	r4, r0
 800f16a:	f000 fc69 	bl	800fa40 <ucdr_buffer_alignment>
 800f16e:	4601      	mov	r1, r0
 800f170:	4620      	mov	r0, r4
 800f172:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f176:	f000 fca7 	bl	800fac8 <ucdr_advance_buffer>
 800f17a:	4620      	mov	r0, r4
 800f17c:	2104      	movs	r1, #4
 800f17e:	f000 fc01 	bl	800f984 <ucdr_check_buffer_available_for>
 800f182:	2800      	cmp	r0, #0
 800f184:	d138      	bne.n	800f1f8 <ucdr_deserialize_uint32_t+0x98>
 800f186:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f18a:	42b7      	cmp	r7, r6
 800f18c:	d92f      	bls.n	800f1ee <ucdr_deserialize_uint32_t+0x8e>
 800f18e:	6922      	ldr	r2, [r4, #16]
 800f190:	60a7      	str	r7, [r4, #8]
 800f192:	1bbf      	subs	r7, r7, r6
 800f194:	443a      	add	r2, r7
 800f196:	f1c7 0904 	rsb	r9, r7, #4
 800f19a:	6122      	str	r2, [r4, #16]
 800f19c:	4649      	mov	r1, r9
 800f19e:	4620      	mov	r0, r4
 800f1a0:	f000 fbfc 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	d046      	beq.n	800f236 <ucdr_deserialize_uint32_t+0xd6>
 800f1a8:	7d23      	ldrb	r3, [r4, #20]
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d05c      	beq.n	800f268 <ucdr_deserialize_uint32_t+0x108>
 800f1ae:	78f3      	ldrb	r3, [r6, #3]
 800f1b0:	702b      	strb	r3, [r5, #0]
 800f1b2:	2f00      	cmp	r7, #0
 800f1b4:	d04c      	beq.n	800f250 <ucdr_deserialize_uint32_t+0xf0>
 800f1b6:	78b3      	ldrb	r3, [r6, #2]
 800f1b8:	706b      	strb	r3, [r5, #1]
 800f1ba:	2f01      	cmp	r7, #1
 800f1bc:	f105 0302 	add.w	r3, r5, #2
 800f1c0:	d04a      	beq.n	800f258 <ucdr_deserialize_uint32_t+0xf8>
 800f1c2:	7873      	ldrb	r3, [r6, #1]
 800f1c4:	70ab      	strb	r3, [r5, #2]
 800f1c6:	2f02      	cmp	r7, #2
 800f1c8:	f105 0303 	add.w	r3, r5, #3
 800f1cc:	d048      	beq.n	800f260 <ucdr_deserialize_uint32_t+0x100>
 800f1ce:	7833      	ldrb	r3, [r6, #0]
 800f1d0:	70eb      	strb	r3, [r5, #3]
 800f1d2:	6923      	ldr	r3, [r4, #16]
 800f1d4:	68a2      	ldr	r2, [r4, #8]
 800f1d6:	7da0      	ldrb	r0, [r4, #22]
 800f1d8:	2104      	movs	r1, #4
 800f1da:	3304      	adds	r3, #4
 800f1dc:	1bdb      	subs	r3, r3, r7
 800f1de:	444a      	add	r2, r9
 800f1e0:	7561      	strb	r1, [r4, #21]
 800f1e2:	6123      	str	r3, [r4, #16]
 800f1e4:	60a2      	str	r2, [r4, #8]
 800f1e6:	f080 0001 	eor.w	r0, r0, #1
 800f1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1ee:	2104      	movs	r1, #4
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f000 fbd3 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f1f6:	b1b0      	cbz	r0, 800f226 <ucdr_deserialize_uint32_t+0xc6>
 800f1f8:	7d23      	ldrb	r3, [r4, #20]
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	68a3      	ldr	r3, [r4, #8]
 800f1fe:	d017      	beq.n	800f230 <ucdr_deserialize_uint32_t+0xd0>
 800f200:	78db      	ldrb	r3, [r3, #3]
 800f202:	702b      	strb	r3, [r5, #0]
 800f204:	68a3      	ldr	r3, [r4, #8]
 800f206:	789b      	ldrb	r3, [r3, #2]
 800f208:	706b      	strb	r3, [r5, #1]
 800f20a:	68a3      	ldr	r3, [r4, #8]
 800f20c:	785b      	ldrb	r3, [r3, #1]
 800f20e:	70ab      	strb	r3, [r5, #2]
 800f210:	68a3      	ldr	r3, [r4, #8]
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	70eb      	strb	r3, [r5, #3]
 800f216:	68a2      	ldr	r2, [r4, #8]
 800f218:	6923      	ldr	r3, [r4, #16]
 800f21a:	3204      	adds	r2, #4
 800f21c:	3304      	adds	r3, #4
 800f21e:	2104      	movs	r1, #4
 800f220:	60a2      	str	r2, [r4, #8]
 800f222:	6123      	str	r3, [r4, #16]
 800f224:	7561      	strb	r1, [r4, #21]
 800f226:	7da0      	ldrb	r0, [r4, #22]
 800f228:	f080 0001 	eor.w	r0, r0, #1
 800f22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	602b      	str	r3, [r5, #0]
 800f234:	e7ef      	b.n	800f216 <ucdr_deserialize_uint32_t+0xb6>
 800f236:	68a2      	ldr	r2, [r4, #8]
 800f238:	6923      	ldr	r3, [r4, #16]
 800f23a:	7da0      	ldrb	r0, [r4, #22]
 800f23c:	f884 8015 	strb.w	r8, [r4, #21]
 800f240:	1bd2      	subs	r2, r2, r7
 800f242:	1bdb      	subs	r3, r3, r7
 800f244:	60a2      	str	r2, [r4, #8]
 800f246:	6123      	str	r3, [r4, #16]
 800f248:	f080 0001 	eor.w	r0, r0, #1
 800f24c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f250:	68a3      	ldr	r3, [r4, #8]
 800f252:	789b      	ldrb	r3, [r3, #2]
 800f254:	706b      	strb	r3, [r5, #1]
 800f256:	1cab      	adds	r3, r5, #2
 800f258:	68a2      	ldr	r2, [r4, #8]
 800f25a:	7852      	ldrb	r2, [r2, #1]
 800f25c:	f803 2b01 	strb.w	r2, [r3], #1
 800f260:	68a2      	ldr	r2, [r4, #8]
 800f262:	7812      	ldrb	r2, [r2, #0]
 800f264:	701a      	strb	r2, [r3, #0]
 800f266:	e7b4      	b.n	800f1d2 <ucdr_deserialize_uint32_t+0x72>
 800f268:	4631      	mov	r1, r6
 800f26a:	463a      	mov	r2, r7
 800f26c:	4628      	mov	r0, r5
 800f26e:	f009 faf2 	bl	8018856 <memcpy>
 800f272:	68a1      	ldr	r1, [r4, #8]
 800f274:	464a      	mov	r2, r9
 800f276:	19e8      	adds	r0, r5, r7
 800f278:	f009 faed 	bl	8018856 <memcpy>
 800f27c:	e7a9      	b.n	800f1d2 <ucdr_deserialize_uint32_t+0x72>
 800f27e:	bf00      	nop

0800f280 <ucdr_deserialize_endian_uint32_t>:
 800f280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f284:	460e      	mov	r6, r1
 800f286:	2104      	movs	r1, #4
 800f288:	4604      	mov	r4, r0
 800f28a:	4615      	mov	r5, r2
 800f28c:	f000 fbd8 	bl	800fa40 <ucdr_buffer_alignment>
 800f290:	4601      	mov	r1, r0
 800f292:	4620      	mov	r0, r4
 800f294:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f298:	f000 fc16 	bl	800fac8 <ucdr_advance_buffer>
 800f29c:	4620      	mov	r0, r4
 800f29e:	2104      	movs	r1, #4
 800f2a0:	f000 fb70 	bl	800f984 <ucdr_check_buffer_available_for>
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	d13c      	bne.n	800f322 <ucdr_deserialize_endian_uint32_t+0xa2>
 800f2a8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f2ac:	42bb      	cmp	r3, r7
 800f2ae:	d933      	bls.n	800f318 <ucdr_deserialize_endian_uint32_t+0x98>
 800f2b0:	6922      	ldr	r2, [r4, #16]
 800f2b2:	60a3      	str	r3, [r4, #8]
 800f2b4:	eba3 0807 	sub.w	r8, r3, r7
 800f2b8:	4442      	add	r2, r8
 800f2ba:	f1c8 0a04 	rsb	sl, r8, #4
 800f2be:	6122      	str	r2, [r4, #16]
 800f2c0:	4651      	mov	r1, sl
 800f2c2:	4620      	mov	r0, r4
 800f2c4:	f000 fb6a 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	d048      	beq.n	800f35e <ucdr_deserialize_endian_uint32_t+0xde>
 800f2cc:	2e01      	cmp	r6, #1
 800f2ce:	d061      	beq.n	800f394 <ucdr_deserialize_endian_uint32_t+0x114>
 800f2d0:	78fb      	ldrb	r3, [r7, #3]
 800f2d2:	702b      	strb	r3, [r5, #0]
 800f2d4:	f1b8 0f00 	cmp.w	r8, #0
 800f2d8:	d050      	beq.n	800f37c <ucdr_deserialize_endian_uint32_t+0xfc>
 800f2da:	78bb      	ldrb	r3, [r7, #2]
 800f2dc:	706b      	strb	r3, [r5, #1]
 800f2de:	f1b8 0f01 	cmp.w	r8, #1
 800f2e2:	f105 0302 	add.w	r3, r5, #2
 800f2e6:	d04d      	beq.n	800f384 <ucdr_deserialize_endian_uint32_t+0x104>
 800f2e8:	787b      	ldrb	r3, [r7, #1]
 800f2ea:	70ab      	strb	r3, [r5, #2]
 800f2ec:	f1b8 0f02 	cmp.w	r8, #2
 800f2f0:	f105 0303 	add.w	r3, r5, #3
 800f2f4:	d04a      	beq.n	800f38c <ucdr_deserialize_endian_uint32_t+0x10c>
 800f2f6:	783b      	ldrb	r3, [r7, #0]
 800f2f8:	70eb      	strb	r3, [r5, #3]
 800f2fa:	6923      	ldr	r3, [r4, #16]
 800f2fc:	68a2      	ldr	r2, [r4, #8]
 800f2fe:	7da0      	ldrb	r0, [r4, #22]
 800f300:	2104      	movs	r1, #4
 800f302:	3304      	adds	r3, #4
 800f304:	eba3 0308 	sub.w	r3, r3, r8
 800f308:	4452      	add	r2, sl
 800f30a:	7561      	strb	r1, [r4, #21]
 800f30c:	6123      	str	r3, [r4, #16]
 800f30e:	60a2      	str	r2, [r4, #8]
 800f310:	f080 0001 	eor.w	r0, r0, #1
 800f314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f318:	2104      	movs	r1, #4
 800f31a:	4620      	mov	r0, r4
 800f31c:	f000 fb3e 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f320:	b1a8      	cbz	r0, 800f34e <ucdr_deserialize_endian_uint32_t+0xce>
 800f322:	2e01      	cmp	r6, #1
 800f324:	68a3      	ldr	r3, [r4, #8]
 800f326:	d017      	beq.n	800f358 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f328:	78db      	ldrb	r3, [r3, #3]
 800f32a:	702b      	strb	r3, [r5, #0]
 800f32c:	68a3      	ldr	r3, [r4, #8]
 800f32e:	789b      	ldrb	r3, [r3, #2]
 800f330:	706b      	strb	r3, [r5, #1]
 800f332:	68a3      	ldr	r3, [r4, #8]
 800f334:	785b      	ldrb	r3, [r3, #1]
 800f336:	70ab      	strb	r3, [r5, #2]
 800f338:	68a3      	ldr	r3, [r4, #8]
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	70eb      	strb	r3, [r5, #3]
 800f33e:	68a2      	ldr	r2, [r4, #8]
 800f340:	6923      	ldr	r3, [r4, #16]
 800f342:	3204      	adds	r2, #4
 800f344:	3304      	adds	r3, #4
 800f346:	2104      	movs	r1, #4
 800f348:	60a2      	str	r2, [r4, #8]
 800f34a:	6123      	str	r3, [r4, #16]
 800f34c:	7561      	strb	r1, [r4, #21]
 800f34e:	7da0      	ldrb	r0, [r4, #22]
 800f350:	f080 0001 	eor.w	r0, r0, #1
 800f354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	602b      	str	r3, [r5, #0]
 800f35c:	e7ef      	b.n	800f33e <ucdr_deserialize_endian_uint32_t+0xbe>
 800f35e:	68a2      	ldr	r2, [r4, #8]
 800f360:	6923      	ldr	r3, [r4, #16]
 800f362:	7da0      	ldrb	r0, [r4, #22]
 800f364:	f884 9015 	strb.w	r9, [r4, #21]
 800f368:	eba2 0208 	sub.w	r2, r2, r8
 800f36c:	eba3 0308 	sub.w	r3, r3, r8
 800f370:	60a2      	str	r2, [r4, #8]
 800f372:	6123      	str	r3, [r4, #16]
 800f374:	f080 0001 	eor.w	r0, r0, #1
 800f378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f37c:	68a3      	ldr	r3, [r4, #8]
 800f37e:	789b      	ldrb	r3, [r3, #2]
 800f380:	706b      	strb	r3, [r5, #1]
 800f382:	1cab      	adds	r3, r5, #2
 800f384:	68a2      	ldr	r2, [r4, #8]
 800f386:	7852      	ldrb	r2, [r2, #1]
 800f388:	f803 2b01 	strb.w	r2, [r3], #1
 800f38c:	68a2      	ldr	r2, [r4, #8]
 800f38e:	7812      	ldrb	r2, [r2, #0]
 800f390:	701a      	strb	r2, [r3, #0]
 800f392:	e7b2      	b.n	800f2fa <ucdr_deserialize_endian_uint32_t+0x7a>
 800f394:	4639      	mov	r1, r7
 800f396:	4642      	mov	r2, r8
 800f398:	4628      	mov	r0, r5
 800f39a:	f009 fa5c 	bl	8018856 <memcpy>
 800f39e:	68a1      	ldr	r1, [r4, #8]
 800f3a0:	4652      	mov	r2, sl
 800f3a2:	eb05 0008 	add.w	r0, r5, r8
 800f3a6:	f009 fa56 	bl	8018856 <memcpy>
 800f3aa:	e7a6      	b.n	800f2fa <ucdr_deserialize_endian_uint32_t+0x7a>

0800f3ac <ucdr_serialize_uint64_t>:
 800f3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b0:	2108      	movs	r1, #8
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	4604      	mov	r4, r0
 800f3b6:	e9cd 2300 	strd	r2, r3, [sp]
 800f3ba:	f000 fb41 	bl	800fa40 <ucdr_buffer_alignment>
 800f3be:	4601      	mov	r1, r0
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	7d67      	ldrb	r7, [r4, #21]
 800f3c4:	f000 fb80 	bl	800fac8 <ucdr_advance_buffer>
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	2108      	movs	r1, #8
 800f3cc:	f000 fada 	bl	800f984 <ucdr_check_buffer_available_for>
 800f3d0:	2800      	cmp	r0, #0
 800f3d2:	d14e      	bne.n	800f472 <ucdr_serialize_uint64_t+0xc6>
 800f3d4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800f3d8:	42b5      	cmp	r5, r6
 800f3da:	d945      	bls.n	800f468 <ucdr_serialize_uint64_t+0xbc>
 800f3dc:	6923      	ldr	r3, [r4, #16]
 800f3de:	60a5      	str	r5, [r4, #8]
 800f3e0:	1bad      	subs	r5, r5, r6
 800f3e2:	442b      	add	r3, r5
 800f3e4:	f1c5 0808 	rsb	r8, r5, #8
 800f3e8:	6123      	str	r3, [r4, #16]
 800f3ea:	4641      	mov	r1, r8
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f000 fad5 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	d074      	beq.n	800f4e0 <ucdr_serialize_uint64_t+0x134>
 800f3f6:	7d23      	ldrb	r3, [r4, #20]
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	f000 809b 	beq.w	800f534 <ucdr_serialize_uint64_t+0x188>
 800f3fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f402:	7033      	strb	r3, [r6, #0]
 800f404:	2d00      	cmp	r5, #0
 800f406:	d078      	beq.n	800f4fa <ucdr_serialize_uint64_t+0x14e>
 800f408:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f40c:	7073      	strb	r3, [r6, #1]
 800f40e:	2d01      	cmp	r5, #1
 800f410:	d077      	beq.n	800f502 <ucdr_serialize_uint64_t+0x156>
 800f412:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f416:	70b3      	strb	r3, [r6, #2]
 800f418:	2d02      	cmp	r5, #2
 800f41a:	d076      	beq.n	800f50a <ucdr_serialize_uint64_t+0x15e>
 800f41c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f420:	70f3      	strb	r3, [r6, #3]
 800f422:	2d03      	cmp	r5, #3
 800f424:	d075      	beq.n	800f512 <ucdr_serialize_uint64_t+0x166>
 800f426:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f42a:	7133      	strb	r3, [r6, #4]
 800f42c:	2d04      	cmp	r5, #4
 800f42e:	d074      	beq.n	800f51a <ucdr_serialize_uint64_t+0x16e>
 800f430:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f434:	7173      	strb	r3, [r6, #5]
 800f436:	2d05      	cmp	r5, #5
 800f438:	d073      	beq.n	800f522 <ucdr_serialize_uint64_t+0x176>
 800f43a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f43e:	71b3      	strb	r3, [r6, #6]
 800f440:	2d06      	cmp	r5, #6
 800f442:	d072      	beq.n	800f52a <ucdr_serialize_uint64_t+0x17e>
 800f444:	f89d 3000 	ldrb.w	r3, [sp]
 800f448:	71f3      	strb	r3, [r6, #7]
 800f44a:	6923      	ldr	r3, [r4, #16]
 800f44c:	68a2      	ldr	r2, [r4, #8]
 800f44e:	7da0      	ldrb	r0, [r4, #22]
 800f450:	3308      	adds	r3, #8
 800f452:	1b5d      	subs	r5, r3, r5
 800f454:	4442      	add	r2, r8
 800f456:	2308      	movs	r3, #8
 800f458:	f080 0001 	eor.w	r0, r0, #1
 800f45c:	6125      	str	r5, [r4, #16]
 800f45e:	60a2      	str	r2, [r4, #8]
 800f460:	7563      	strb	r3, [r4, #21]
 800f462:	b002      	add	sp, #8
 800f464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f468:	2108      	movs	r1, #8
 800f46a:	4620      	mov	r0, r4
 800f46c:	f000 fa96 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f470:	b350      	cbz	r0, 800f4c8 <ucdr_serialize_uint64_t+0x11c>
 800f472:	7d23      	ldrb	r3, [r4, #20]
 800f474:	2b01      	cmp	r3, #1
 800f476:	d02d      	beq.n	800f4d4 <ucdr_serialize_uint64_t+0x128>
 800f478:	68a3      	ldr	r3, [r4, #8]
 800f47a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f47e:	701a      	strb	r2, [r3, #0]
 800f480:	68a3      	ldr	r3, [r4, #8]
 800f482:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f486:	705a      	strb	r2, [r3, #1]
 800f488:	68a3      	ldr	r3, [r4, #8]
 800f48a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f48e:	709a      	strb	r2, [r3, #2]
 800f490:	68a3      	ldr	r3, [r4, #8]
 800f492:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f496:	70da      	strb	r2, [r3, #3]
 800f498:	68a3      	ldr	r3, [r4, #8]
 800f49a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f49e:	711a      	strb	r2, [r3, #4]
 800f4a0:	68a3      	ldr	r3, [r4, #8]
 800f4a2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f4a6:	715a      	strb	r2, [r3, #5]
 800f4a8:	68a3      	ldr	r3, [r4, #8]
 800f4aa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f4ae:	719a      	strb	r2, [r3, #6]
 800f4b0:	68a3      	ldr	r3, [r4, #8]
 800f4b2:	f89d 2000 	ldrb.w	r2, [sp]
 800f4b6:	71da      	strb	r2, [r3, #7]
 800f4b8:	68a2      	ldr	r2, [r4, #8]
 800f4ba:	6923      	ldr	r3, [r4, #16]
 800f4bc:	3208      	adds	r2, #8
 800f4be:	3308      	adds	r3, #8
 800f4c0:	2108      	movs	r1, #8
 800f4c2:	60a2      	str	r2, [r4, #8]
 800f4c4:	6123      	str	r3, [r4, #16]
 800f4c6:	7561      	strb	r1, [r4, #21]
 800f4c8:	7da0      	ldrb	r0, [r4, #22]
 800f4ca:	f080 0001 	eor.w	r0, r0, #1
 800f4ce:	b002      	add	sp, #8
 800f4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4d4:	466b      	mov	r3, sp
 800f4d6:	cb03      	ldmia	r3!, {r0, r1}
 800f4d8:	68a3      	ldr	r3, [r4, #8]
 800f4da:	6018      	str	r0, [r3, #0]
 800f4dc:	6059      	str	r1, [r3, #4]
 800f4de:	e7eb      	b.n	800f4b8 <ucdr_serialize_uint64_t+0x10c>
 800f4e0:	68a2      	ldr	r2, [r4, #8]
 800f4e2:	6923      	ldr	r3, [r4, #16]
 800f4e4:	7da0      	ldrb	r0, [r4, #22]
 800f4e6:	7567      	strb	r7, [r4, #21]
 800f4e8:	1b52      	subs	r2, r2, r5
 800f4ea:	f080 0001 	eor.w	r0, r0, #1
 800f4ee:	1b5d      	subs	r5, r3, r5
 800f4f0:	60a2      	str	r2, [r4, #8]
 800f4f2:	6125      	str	r5, [r4, #16]
 800f4f4:	b002      	add	sp, #8
 800f4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4fa:	68a3      	ldr	r3, [r4, #8]
 800f4fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f500:	701a      	strb	r2, [r3, #0]
 800f502:	68a3      	ldr	r3, [r4, #8]
 800f504:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f508:	701a      	strb	r2, [r3, #0]
 800f50a:	68a3      	ldr	r3, [r4, #8]
 800f50c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f510:	701a      	strb	r2, [r3, #0]
 800f512:	68a3      	ldr	r3, [r4, #8]
 800f514:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f518:	701a      	strb	r2, [r3, #0]
 800f51a:	68a3      	ldr	r3, [r4, #8]
 800f51c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f520:	701a      	strb	r2, [r3, #0]
 800f522:	68a3      	ldr	r3, [r4, #8]
 800f524:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f528:	701a      	strb	r2, [r3, #0]
 800f52a:	68a3      	ldr	r3, [r4, #8]
 800f52c:	f89d 2000 	ldrb.w	r2, [sp]
 800f530:	701a      	strb	r2, [r3, #0]
 800f532:	e78a      	b.n	800f44a <ucdr_serialize_uint64_t+0x9e>
 800f534:	4630      	mov	r0, r6
 800f536:	466e      	mov	r6, sp
 800f538:	4631      	mov	r1, r6
 800f53a:	462a      	mov	r2, r5
 800f53c:	f009 f98b 	bl	8018856 <memcpy>
 800f540:	68a0      	ldr	r0, [r4, #8]
 800f542:	4642      	mov	r2, r8
 800f544:	1971      	adds	r1, r6, r5
 800f546:	f009 f986 	bl	8018856 <memcpy>
 800f54a:	e77e      	b.n	800f44a <ucdr_serialize_uint64_t+0x9e>

0800f54c <ucdr_serialize_int16_t>:
 800f54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f550:	b082      	sub	sp, #8
 800f552:	460b      	mov	r3, r1
 800f554:	2102      	movs	r1, #2
 800f556:	4604      	mov	r4, r0
 800f558:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f55c:	f000 fa70 	bl	800fa40 <ucdr_buffer_alignment>
 800f560:	4601      	mov	r1, r0
 800f562:	4620      	mov	r0, r4
 800f564:	7d67      	ldrb	r7, [r4, #21]
 800f566:	f000 faaf 	bl	800fac8 <ucdr_advance_buffer>
 800f56a:	4620      	mov	r0, r4
 800f56c:	2102      	movs	r1, #2
 800f56e:	f000 fa09 	bl	800f984 <ucdr_check_buffer_available_for>
 800f572:	bb78      	cbnz	r0, 800f5d4 <ucdr_serialize_int16_t+0x88>
 800f574:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800f578:	42b5      	cmp	r5, r6
 800f57a:	d926      	bls.n	800f5ca <ucdr_serialize_int16_t+0x7e>
 800f57c:	6922      	ldr	r2, [r4, #16]
 800f57e:	60a5      	str	r5, [r4, #8]
 800f580:	1bad      	subs	r5, r5, r6
 800f582:	442a      	add	r2, r5
 800f584:	f1c5 0802 	rsb	r8, r5, #2
 800f588:	6122      	str	r2, [r4, #16]
 800f58a:	4641      	mov	r1, r8
 800f58c:	4620      	mov	r0, r4
 800f58e:	f000 fa05 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f592:	2800      	cmp	r0, #0
 800f594:	d03b      	beq.n	800f60e <ucdr_serialize_int16_t+0xc2>
 800f596:	7d23      	ldrb	r3, [r4, #20]
 800f598:	2b01      	cmp	r3, #1
 800f59a:	d04a      	beq.n	800f632 <ucdr_serialize_int16_t+0xe6>
 800f59c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5a0:	7033      	strb	r3, [r6, #0]
 800f5a2:	2d00      	cmp	r5, #0
 800f5a4:	d040      	beq.n	800f628 <ucdr_serialize_int16_t+0xdc>
 800f5a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f5aa:	7073      	strb	r3, [r6, #1]
 800f5ac:	6923      	ldr	r3, [r4, #16]
 800f5ae:	68a2      	ldr	r2, [r4, #8]
 800f5b0:	7da0      	ldrb	r0, [r4, #22]
 800f5b2:	3302      	adds	r3, #2
 800f5b4:	1b5b      	subs	r3, r3, r5
 800f5b6:	4442      	add	r2, r8
 800f5b8:	2102      	movs	r1, #2
 800f5ba:	f080 0001 	eor.w	r0, r0, #1
 800f5be:	6123      	str	r3, [r4, #16]
 800f5c0:	60a2      	str	r2, [r4, #8]
 800f5c2:	7561      	strb	r1, [r4, #21]
 800f5c4:	b002      	add	sp, #8
 800f5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ca:	2102      	movs	r1, #2
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	f000 f9e5 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f5d2:	b190      	cbz	r0, 800f5fa <ucdr_serialize_int16_t+0xae>
 800f5d4:	7d23      	ldrb	r3, [r4, #20]
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	68a3      	ldr	r3, [r4, #8]
 800f5da:	d014      	beq.n	800f606 <ucdr_serialize_int16_t+0xba>
 800f5dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f5e0:	701a      	strb	r2, [r3, #0]
 800f5e2:	68a3      	ldr	r3, [r4, #8]
 800f5e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5e8:	705a      	strb	r2, [r3, #1]
 800f5ea:	68a2      	ldr	r2, [r4, #8]
 800f5ec:	6923      	ldr	r3, [r4, #16]
 800f5ee:	3202      	adds	r2, #2
 800f5f0:	3302      	adds	r3, #2
 800f5f2:	2102      	movs	r1, #2
 800f5f4:	60a2      	str	r2, [r4, #8]
 800f5f6:	6123      	str	r3, [r4, #16]
 800f5f8:	7561      	strb	r1, [r4, #21]
 800f5fa:	7da0      	ldrb	r0, [r4, #22]
 800f5fc:	f080 0001 	eor.w	r0, r0, #1
 800f600:	b002      	add	sp, #8
 800f602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f606:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f60a:	801a      	strh	r2, [r3, #0]
 800f60c:	e7ed      	b.n	800f5ea <ucdr_serialize_int16_t+0x9e>
 800f60e:	68a2      	ldr	r2, [r4, #8]
 800f610:	6923      	ldr	r3, [r4, #16]
 800f612:	7da0      	ldrb	r0, [r4, #22]
 800f614:	7567      	strb	r7, [r4, #21]
 800f616:	1b52      	subs	r2, r2, r5
 800f618:	1b5b      	subs	r3, r3, r5
 800f61a:	f080 0001 	eor.w	r0, r0, #1
 800f61e:	60a2      	str	r2, [r4, #8]
 800f620:	6123      	str	r3, [r4, #16]
 800f622:	b002      	add	sp, #8
 800f624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f628:	68a3      	ldr	r3, [r4, #8]
 800f62a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f62e:	701a      	strb	r2, [r3, #0]
 800f630:	e7bc      	b.n	800f5ac <ucdr_serialize_int16_t+0x60>
 800f632:	4630      	mov	r0, r6
 800f634:	f10d 0606 	add.w	r6, sp, #6
 800f638:	4631      	mov	r1, r6
 800f63a:	462a      	mov	r2, r5
 800f63c:	f009 f90b 	bl	8018856 <memcpy>
 800f640:	68a0      	ldr	r0, [r4, #8]
 800f642:	4642      	mov	r2, r8
 800f644:	1971      	adds	r1, r6, r5
 800f646:	f009 f906 	bl	8018856 <memcpy>
 800f64a:	e7af      	b.n	800f5ac <ucdr_serialize_int16_t+0x60>

0800f64c <ucdr_deserialize_int16_t>:
 800f64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f650:	460d      	mov	r5, r1
 800f652:	2102      	movs	r1, #2
 800f654:	4604      	mov	r4, r0
 800f656:	f000 f9f3 	bl	800fa40 <ucdr_buffer_alignment>
 800f65a:	4601      	mov	r1, r0
 800f65c:	4620      	mov	r0, r4
 800f65e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f662:	f000 fa31 	bl	800fac8 <ucdr_advance_buffer>
 800f666:	4620      	mov	r0, r4
 800f668:	2102      	movs	r1, #2
 800f66a:	f000 f98b 	bl	800f984 <ucdr_check_buffer_available_for>
 800f66e:	bb60      	cbnz	r0, 800f6ca <ucdr_deserialize_int16_t+0x7e>
 800f670:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f674:	42be      	cmp	r6, r7
 800f676:	d923      	bls.n	800f6c0 <ucdr_deserialize_int16_t+0x74>
 800f678:	6922      	ldr	r2, [r4, #16]
 800f67a:	60a6      	str	r6, [r4, #8]
 800f67c:	1bf6      	subs	r6, r6, r7
 800f67e:	4432      	add	r2, r6
 800f680:	f1c6 0902 	rsb	r9, r6, #2
 800f684:	6122      	str	r2, [r4, #16]
 800f686:	4649      	mov	r1, r9
 800f688:	4620      	mov	r0, r4
 800f68a:	f000 f987 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f68e:	2800      	cmp	r0, #0
 800f690:	d034      	beq.n	800f6fc <ucdr_deserialize_int16_t+0xb0>
 800f692:	7d23      	ldrb	r3, [r4, #20]
 800f694:	2b01      	cmp	r3, #1
 800f696:	d042      	beq.n	800f71e <ucdr_deserialize_int16_t+0xd2>
 800f698:	787b      	ldrb	r3, [r7, #1]
 800f69a:	702b      	strb	r3, [r5, #0]
 800f69c:	2e00      	cmp	r6, #0
 800f69e:	d03a      	beq.n	800f716 <ucdr_deserialize_int16_t+0xca>
 800f6a0:	783b      	ldrb	r3, [r7, #0]
 800f6a2:	706b      	strb	r3, [r5, #1]
 800f6a4:	6923      	ldr	r3, [r4, #16]
 800f6a6:	68a2      	ldr	r2, [r4, #8]
 800f6a8:	7da0      	ldrb	r0, [r4, #22]
 800f6aa:	2102      	movs	r1, #2
 800f6ac:	3302      	adds	r3, #2
 800f6ae:	1b9b      	subs	r3, r3, r6
 800f6b0:	444a      	add	r2, r9
 800f6b2:	7561      	strb	r1, [r4, #21]
 800f6b4:	6123      	str	r3, [r4, #16]
 800f6b6:	60a2      	str	r2, [r4, #8]
 800f6b8:	f080 0001 	eor.w	r0, r0, #1
 800f6bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6c0:	2102      	movs	r1, #2
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	f000 f96a 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f6c8:	b180      	cbz	r0, 800f6ec <ucdr_deserialize_int16_t+0xa0>
 800f6ca:	7d23      	ldrb	r3, [r4, #20]
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	68a3      	ldr	r3, [r4, #8]
 800f6d0:	d011      	beq.n	800f6f6 <ucdr_deserialize_int16_t+0xaa>
 800f6d2:	785b      	ldrb	r3, [r3, #1]
 800f6d4:	702b      	strb	r3, [r5, #0]
 800f6d6:	68a3      	ldr	r3, [r4, #8]
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	706b      	strb	r3, [r5, #1]
 800f6dc:	68a2      	ldr	r2, [r4, #8]
 800f6de:	6923      	ldr	r3, [r4, #16]
 800f6e0:	3202      	adds	r2, #2
 800f6e2:	3302      	adds	r3, #2
 800f6e4:	2102      	movs	r1, #2
 800f6e6:	60a2      	str	r2, [r4, #8]
 800f6e8:	6123      	str	r3, [r4, #16]
 800f6ea:	7561      	strb	r1, [r4, #21]
 800f6ec:	7da0      	ldrb	r0, [r4, #22]
 800f6ee:	f080 0001 	eor.w	r0, r0, #1
 800f6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6f6:	881b      	ldrh	r3, [r3, #0]
 800f6f8:	802b      	strh	r3, [r5, #0]
 800f6fa:	e7ef      	b.n	800f6dc <ucdr_deserialize_int16_t+0x90>
 800f6fc:	68a2      	ldr	r2, [r4, #8]
 800f6fe:	6923      	ldr	r3, [r4, #16]
 800f700:	7da0      	ldrb	r0, [r4, #22]
 800f702:	f884 8015 	strb.w	r8, [r4, #21]
 800f706:	1b92      	subs	r2, r2, r6
 800f708:	1b9b      	subs	r3, r3, r6
 800f70a:	60a2      	str	r2, [r4, #8]
 800f70c:	6123      	str	r3, [r4, #16]
 800f70e:	f080 0001 	eor.w	r0, r0, #1
 800f712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f716:	68a3      	ldr	r3, [r4, #8]
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	706b      	strb	r3, [r5, #1]
 800f71c:	e7c2      	b.n	800f6a4 <ucdr_deserialize_int16_t+0x58>
 800f71e:	4639      	mov	r1, r7
 800f720:	4632      	mov	r2, r6
 800f722:	4628      	mov	r0, r5
 800f724:	f009 f897 	bl	8018856 <memcpy>
 800f728:	68a1      	ldr	r1, [r4, #8]
 800f72a:	464a      	mov	r2, r9
 800f72c:	19a8      	adds	r0, r5, r6
 800f72e:	f009 f892 	bl	8018856 <memcpy>
 800f732:	e7b7      	b.n	800f6a4 <ucdr_deserialize_int16_t+0x58>

0800f734 <ucdr_serialize_int32_t>:
 800f734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f738:	b082      	sub	sp, #8
 800f73a:	4604      	mov	r4, r0
 800f73c:	9101      	str	r1, [sp, #4]
 800f73e:	2104      	movs	r1, #4
 800f740:	f000 f97e 	bl	800fa40 <ucdr_buffer_alignment>
 800f744:	4601      	mov	r1, r0
 800f746:	4620      	mov	r0, r4
 800f748:	7d67      	ldrb	r7, [r4, #21]
 800f74a:	f000 f9bd 	bl	800fac8 <ucdr_advance_buffer>
 800f74e:	4620      	mov	r0, r4
 800f750:	2104      	movs	r1, #4
 800f752:	f000 f917 	bl	800f984 <ucdr_check_buffer_available_for>
 800f756:	2800      	cmp	r0, #0
 800f758:	d139      	bne.n	800f7ce <ucdr_serialize_int32_t+0x9a>
 800f75a:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800f75e:	42ae      	cmp	r6, r5
 800f760:	d930      	bls.n	800f7c4 <ucdr_serialize_int32_t+0x90>
 800f762:	6922      	ldr	r2, [r4, #16]
 800f764:	60a6      	str	r6, [r4, #8]
 800f766:	1b76      	subs	r6, r6, r5
 800f768:	4432      	add	r2, r6
 800f76a:	f1c6 0804 	rsb	r8, r6, #4
 800f76e:	6122      	str	r2, [r4, #16]
 800f770:	4641      	mov	r1, r8
 800f772:	4620      	mov	r0, r4
 800f774:	f000 f912 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f778:	2800      	cmp	r0, #0
 800f77a:	d04c      	beq.n	800f816 <ucdr_serialize_int32_t+0xe2>
 800f77c:	7d23      	ldrb	r3, [r4, #20]
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d063      	beq.n	800f84a <ucdr_serialize_int32_t+0x116>
 800f782:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f786:	702b      	strb	r3, [r5, #0]
 800f788:	2e00      	cmp	r6, #0
 800f78a:	d051      	beq.n	800f830 <ucdr_serialize_int32_t+0xfc>
 800f78c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f790:	706b      	strb	r3, [r5, #1]
 800f792:	2e01      	cmp	r6, #1
 800f794:	d050      	beq.n	800f838 <ucdr_serialize_int32_t+0x104>
 800f796:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f79a:	70ab      	strb	r3, [r5, #2]
 800f79c:	2e02      	cmp	r6, #2
 800f79e:	d04f      	beq.n	800f840 <ucdr_serialize_int32_t+0x10c>
 800f7a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f7a4:	70eb      	strb	r3, [r5, #3]
 800f7a6:	6923      	ldr	r3, [r4, #16]
 800f7a8:	68a2      	ldr	r2, [r4, #8]
 800f7aa:	7da0      	ldrb	r0, [r4, #22]
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	1b9b      	subs	r3, r3, r6
 800f7b0:	4442      	add	r2, r8
 800f7b2:	2104      	movs	r1, #4
 800f7b4:	f080 0001 	eor.w	r0, r0, #1
 800f7b8:	6123      	str	r3, [r4, #16]
 800f7ba:	60a2      	str	r2, [r4, #8]
 800f7bc:	7561      	strb	r1, [r4, #21]
 800f7be:	b002      	add	sp, #8
 800f7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c4:	2104      	movs	r1, #4
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	f000 f8e8 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f7cc:	b1d0      	cbz	r0, 800f804 <ucdr_serialize_int32_t+0xd0>
 800f7ce:	7d23      	ldrb	r3, [r4, #20]
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	68a3      	ldr	r3, [r4, #8]
 800f7d4:	d01c      	beq.n	800f810 <ucdr_serialize_int32_t+0xdc>
 800f7d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f7da:	701a      	strb	r2, [r3, #0]
 800f7dc:	68a3      	ldr	r3, [r4, #8]
 800f7de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7e2:	705a      	strb	r2, [r3, #1]
 800f7e4:	68a3      	ldr	r3, [r4, #8]
 800f7e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f7ea:	709a      	strb	r2, [r3, #2]
 800f7ec:	68a3      	ldr	r3, [r4, #8]
 800f7ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f7f2:	70da      	strb	r2, [r3, #3]
 800f7f4:	68a2      	ldr	r2, [r4, #8]
 800f7f6:	6923      	ldr	r3, [r4, #16]
 800f7f8:	3204      	adds	r2, #4
 800f7fa:	3304      	adds	r3, #4
 800f7fc:	2104      	movs	r1, #4
 800f7fe:	60a2      	str	r2, [r4, #8]
 800f800:	6123      	str	r3, [r4, #16]
 800f802:	7561      	strb	r1, [r4, #21]
 800f804:	7da0      	ldrb	r0, [r4, #22]
 800f806:	f080 0001 	eor.w	r0, r0, #1
 800f80a:	b002      	add	sp, #8
 800f80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f810:	9a01      	ldr	r2, [sp, #4]
 800f812:	601a      	str	r2, [r3, #0]
 800f814:	e7ee      	b.n	800f7f4 <ucdr_serialize_int32_t+0xc0>
 800f816:	68a2      	ldr	r2, [r4, #8]
 800f818:	6923      	ldr	r3, [r4, #16]
 800f81a:	7da0      	ldrb	r0, [r4, #22]
 800f81c:	7567      	strb	r7, [r4, #21]
 800f81e:	1b92      	subs	r2, r2, r6
 800f820:	1b9b      	subs	r3, r3, r6
 800f822:	f080 0001 	eor.w	r0, r0, #1
 800f826:	60a2      	str	r2, [r4, #8]
 800f828:	6123      	str	r3, [r4, #16]
 800f82a:	b002      	add	sp, #8
 800f82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f830:	68a3      	ldr	r3, [r4, #8]
 800f832:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f836:	701a      	strb	r2, [r3, #0]
 800f838:	68a3      	ldr	r3, [r4, #8]
 800f83a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f83e:	701a      	strb	r2, [r3, #0]
 800f840:	68a3      	ldr	r3, [r4, #8]
 800f842:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f846:	701a      	strb	r2, [r3, #0]
 800f848:	e7ad      	b.n	800f7a6 <ucdr_serialize_int32_t+0x72>
 800f84a:	4628      	mov	r0, r5
 800f84c:	ad01      	add	r5, sp, #4
 800f84e:	4629      	mov	r1, r5
 800f850:	4632      	mov	r2, r6
 800f852:	f009 f800 	bl	8018856 <memcpy>
 800f856:	68a0      	ldr	r0, [r4, #8]
 800f858:	4642      	mov	r2, r8
 800f85a:	19a9      	adds	r1, r5, r6
 800f85c:	f008 fffb 	bl	8018856 <memcpy>
 800f860:	e7a1      	b.n	800f7a6 <ucdr_serialize_int32_t+0x72>
 800f862:	bf00      	nop

0800f864 <ucdr_deserialize_int32_t>:
 800f864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f868:	460d      	mov	r5, r1
 800f86a:	2104      	movs	r1, #4
 800f86c:	4604      	mov	r4, r0
 800f86e:	f000 f8e7 	bl	800fa40 <ucdr_buffer_alignment>
 800f872:	4601      	mov	r1, r0
 800f874:	4620      	mov	r0, r4
 800f876:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f87a:	f000 f925 	bl	800fac8 <ucdr_advance_buffer>
 800f87e:	4620      	mov	r0, r4
 800f880:	2104      	movs	r1, #4
 800f882:	f000 f87f 	bl	800f984 <ucdr_check_buffer_available_for>
 800f886:	2800      	cmp	r0, #0
 800f888:	d138      	bne.n	800f8fc <ucdr_deserialize_int32_t+0x98>
 800f88a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f88e:	42b7      	cmp	r7, r6
 800f890:	d92f      	bls.n	800f8f2 <ucdr_deserialize_int32_t+0x8e>
 800f892:	6922      	ldr	r2, [r4, #16]
 800f894:	60a7      	str	r7, [r4, #8]
 800f896:	1bbf      	subs	r7, r7, r6
 800f898:	443a      	add	r2, r7
 800f89a:	f1c7 0904 	rsb	r9, r7, #4
 800f89e:	6122      	str	r2, [r4, #16]
 800f8a0:	4649      	mov	r1, r9
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	f000 f87a 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	d046      	beq.n	800f93a <ucdr_deserialize_int32_t+0xd6>
 800f8ac:	7d23      	ldrb	r3, [r4, #20]
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d05c      	beq.n	800f96c <ucdr_deserialize_int32_t+0x108>
 800f8b2:	78f3      	ldrb	r3, [r6, #3]
 800f8b4:	702b      	strb	r3, [r5, #0]
 800f8b6:	2f00      	cmp	r7, #0
 800f8b8:	d04c      	beq.n	800f954 <ucdr_deserialize_int32_t+0xf0>
 800f8ba:	78b3      	ldrb	r3, [r6, #2]
 800f8bc:	706b      	strb	r3, [r5, #1]
 800f8be:	2f01      	cmp	r7, #1
 800f8c0:	f105 0302 	add.w	r3, r5, #2
 800f8c4:	d04a      	beq.n	800f95c <ucdr_deserialize_int32_t+0xf8>
 800f8c6:	7873      	ldrb	r3, [r6, #1]
 800f8c8:	70ab      	strb	r3, [r5, #2]
 800f8ca:	2f02      	cmp	r7, #2
 800f8cc:	f105 0303 	add.w	r3, r5, #3
 800f8d0:	d048      	beq.n	800f964 <ucdr_deserialize_int32_t+0x100>
 800f8d2:	7833      	ldrb	r3, [r6, #0]
 800f8d4:	70eb      	strb	r3, [r5, #3]
 800f8d6:	6923      	ldr	r3, [r4, #16]
 800f8d8:	68a2      	ldr	r2, [r4, #8]
 800f8da:	7da0      	ldrb	r0, [r4, #22]
 800f8dc:	2104      	movs	r1, #4
 800f8de:	3304      	adds	r3, #4
 800f8e0:	1bdb      	subs	r3, r3, r7
 800f8e2:	444a      	add	r2, r9
 800f8e4:	7561      	strb	r1, [r4, #21]
 800f8e6:	6123      	str	r3, [r4, #16]
 800f8e8:	60a2      	str	r2, [r4, #8]
 800f8ea:	f080 0001 	eor.w	r0, r0, #1
 800f8ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8f2:	2104      	movs	r1, #4
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	f000 f851 	bl	800f99c <ucdr_check_final_buffer_behavior>
 800f8fa:	b1b0      	cbz	r0, 800f92a <ucdr_deserialize_int32_t+0xc6>
 800f8fc:	7d23      	ldrb	r3, [r4, #20]
 800f8fe:	2b01      	cmp	r3, #1
 800f900:	68a3      	ldr	r3, [r4, #8]
 800f902:	d017      	beq.n	800f934 <ucdr_deserialize_int32_t+0xd0>
 800f904:	78db      	ldrb	r3, [r3, #3]
 800f906:	702b      	strb	r3, [r5, #0]
 800f908:	68a3      	ldr	r3, [r4, #8]
 800f90a:	789b      	ldrb	r3, [r3, #2]
 800f90c:	706b      	strb	r3, [r5, #1]
 800f90e:	68a3      	ldr	r3, [r4, #8]
 800f910:	785b      	ldrb	r3, [r3, #1]
 800f912:	70ab      	strb	r3, [r5, #2]
 800f914:	68a3      	ldr	r3, [r4, #8]
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	70eb      	strb	r3, [r5, #3]
 800f91a:	68a2      	ldr	r2, [r4, #8]
 800f91c:	6923      	ldr	r3, [r4, #16]
 800f91e:	3204      	adds	r2, #4
 800f920:	3304      	adds	r3, #4
 800f922:	2104      	movs	r1, #4
 800f924:	60a2      	str	r2, [r4, #8]
 800f926:	6123      	str	r3, [r4, #16]
 800f928:	7561      	strb	r1, [r4, #21]
 800f92a:	7da0      	ldrb	r0, [r4, #22]
 800f92c:	f080 0001 	eor.w	r0, r0, #1
 800f930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	602b      	str	r3, [r5, #0]
 800f938:	e7ef      	b.n	800f91a <ucdr_deserialize_int32_t+0xb6>
 800f93a:	68a2      	ldr	r2, [r4, #8]
 800f93c:	6923      	ldr	r3, [r4, #16]
 800f93e:	7da0      	ldrb	r0, [r4, #22]
 800f940:	f884 8015 	strb.w	r8, [r4, #21]
 800f944:	1bd2      	subs	r2, r2, r7
 800f946:	1bdb      	subs	r3, r3, r7
 800f948:	60a2      	str	r2, [r4, #8]
 800f94a:	6123      	str	r3, [r4, #16]
 800f94c:	f080 0001 	eor.w	r0, r0, #1
 800f950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f954:	68a3      	ldr	r3, [r4, #8]
 800f956:	789b      	ldrb	r3, [r3, #2]
 800f958:	706b      	strb	r3, [r5, #1]
 800f95a:	1cab      	adds	r3, r5, #2
 800f95c:	68a2      	ldr	r2, [r4, #8]
 800f95e:	7852      	ldrb	r2, [r2, #1]
 800f960:	f803 2b01 	strb.w	r2, [r3], #1
 800f964:	68a2      	ldr	r2, [r4, #8]
 800f966:	7812      	ldrb	r2, [r2, #0]
 800f968:	701a      	strb	r2, [r3, #0]
 800f96a:	e7b4      	b.n	800f8d6 <ucdr_deserialize_int32_t+0x72>
 800f96c:	4631      	mov	r1, r6
 800f96e:	463a      	mov	r2, r7
 800f970:	4628      	mov	r0, r5
 800f972:	f008 ff70 	bl	8018856 <memcpy>
 800f976:	68a1      	ldr	r1, [r4, #8]
 800f978:	464a      	mov	r2, r9
 800f97a:	19e8      	adds	r0, r5, r7
 800f97c:	f008 ff6b 	bl	8018856 <memcpy>
 800f980:	e7a9      	b.n	800f8d6 <ucdr_deserialize_int32_t+0x72>
 800f982:	bf00      	nop

0800f984 <ucdr_check_buffer_available_for>:
 800f984:	7d83      	ldrb	r3, [r0, #22]
 800f986:	b93b      	cbnz	r3, 800f998 <ucdr_check_buffer_available_for+0x14>
 800f988:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f98c:	4419      	add	r1, r3
 800f98e:	4288      	cmp	r0, r1
 800f990:	bf34      	ite	cc
 800f992:	2000      	movcc	r0, #0
 800f994:	2001      	movcs	r0, #1
 800f996:	4770      	bx	lr
 800f998:	2000      	movs	r0, #0
 800f99a:	4770      	bx	lr

0800f99c <ucdr_check_final_buffer_behavior>:
 800f99c:	7d83      	ldrb	r3, [r0, #22]
 800f99e:	b943      	cbnz	r3, 800f9b2 <ucdr_check_final_buffer_behavior+0x16>
 800f9a0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f9a4:	4291      	cmp	r1, r2
 800f9a6:	b510      	push	{r4, lr}
 800f9a8:	4604      	mov	r4, r0
 800f9aa:	d205      	bcs.n	800f9b8 <ucdr_check_final_buffer_behavior+0x1c>
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	bd10      	pop	{r4, pc}
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	4770      	bx	lr
 800f9b8:	6982      	ldr	r2, [r0, #24]
 800f9ba:	b13a      	cbz	r2, 800f9cc <ucdr_check_final_buffer_behavior+0x30>
 800f9bc:	69c1      	ldr	r1, [r0, #28]
 800f9be:	4790      	blx	r2
 800f9c0:	f080 0301 	eor.w	r3, r0, #1
 800f9c4:	b2db      	uxtb	r3, r3
 800f9c6:	75a0      	strb	r0, [r4, #22]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	bd10      	pop	{r4, pc}
 800f9cc:	2001      	movs	r0, #1
 800f9ce:	75a0      	strb	r0, [r4, #22]
 800f9d0:	e7fa      	b.n	800f9c8 <ucdr_check_final_buffer_behavior+0x2c>
 800f9d2:	bf00      	nop

0800f9d4 <ucdr_set_on_full_buffer_callback>:
 800f9d4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f9d8:	4770      	bx	lr
 800f9da:	bf00      	nop

0800f9dc <ucdr_init_buffer_origin_offset_endian>:
 800f9dc:	b430      	push	{r4, r5}
 800f9de:	9c02      	ldr	r4, [sp, #8]
 800f9e0:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800f9e4:	6001      	str	r1, [r0, #0]
 800f9e6:	440a      	add	r2, r1
 800f9e8:	60c3      	str	r3, [r0, #12]
 800f9ea:	4421      	add	r1, r4
 800f9ec:	441c      	add	r4, r3
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	6104      	str	r4, [r0, #16]
 800f9f2:	7505      	strb	r5, [r0, #20]
 800f9f4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800f9f8:	bc30      	pop	{r4, r5}
 800f9fa:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800f9fe:	7543      	strb	r3, [r0, #21]
 800fa00:	7583      	strb	r3, [r0, #22]
 800fa02:	4770      	bx	lr

0800fa04 <ucdr_init_buffer_origin_offset>:
 800fa04:	b510      	push	{r4, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	9c04      	ldr	r4, [sp, #16]
 800fa0a:	9400      	str	r4, [sp, #0]
 800fa0c:	2401      	movs	r4, #1
 800fa0e:	9401      	str	r4, [sp, #4]
 800fa10:	f7ff ffe4 	bl	800f9dc <ucdr_init_buffer_origin_offset_endian>
 800fa14:	b002      	add	sp, #8
 800fa16:	bd10      	pop	{r4, pc}

0800fa18 <ucdr_init_buffer_origin>:
 800fa18:	b510      	push	{r4, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	2400      	movs	r4, #0
 800fa1e:	9400      	str	r4, [sp, #0]
 800fa20:	f7ff fff0 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 800fa24:	b002      	add	sp, #8
 800fa26:	bd10      	pop	{r4, pc}

0800fa28 <ucdr_init_buffer>:
 800fa28:	2300      	movs	r3, #0
 800fa2a:	f7ff bff5 	b.w	800fa18 <ucdr_init_buffer_origin>
 800fa2e:	bf00      	nop

0800fa30 <ucdr_alignment>:
 800fa30:	fbb0 f3f1 	udiv	r3, r0, r1
 800fa34:	fb03 0011 	mls	r0, r3, r1, r0
 800fa38:	1a08      	subs	r0, r1, r0
 800fa3a:	3901      	subs	r1, #1
 800fa3c:	4008      	ands	r0, r1
 800fa3e:	4770      	bx	lr

0800fa40 <ucdr_buffer_alignment>:
 800fa40:	7d43      	ldrb	r3, [r0, #21]
 800fa42:	428b      	cmp	r3, r1
 800fa44:	d208      	bcs.n	800fa58 <ucdr_buffer_alignment+0x18>
 800fa46:	6903      	ldr	r3, [r0, #16]
 800fa48:	fbb3 f0f1 	udiv	r0, r3, r1
 800fa4c:	fb01 3010 	mls	r0, r1, r0, r3
 800fa50:	1a08      	subs	r0, r1, r0
 800fa52:	3901      	subs	r1, #1
 800fa54:	4008      	ands	r0, r1
 800fa56:	4770      	bx	lr
 800fa58:	2000      	movs	r0, #0
 800fa5a:	4770      	bx	lr

0800fa5c <ucdr_align_to>:
 800fa5c:	b570      	push	{r4, r5, r6, lr}
 800fa5e:	4604      	mov	r4, r0
 800fa60:	460e      	mov	r6, r1
 800fa62:	f7ff ffed 	bl	800fa40 <ucdr_buffer_alignment>
 800fa66:	68a5      	ldr	r5, [r4, #8]
 800fa68:	6863      	ldr	r3, [r4, #4]
 800fa6a:	6922      	ldr	r2, [r4, #16]
 800fa6c:	7566      	strb	r6, [r4, #21]
 800fa6e:	4405      	add	r5, r0
 800fa70:	42ab      	cmp	r3, r5
 800fa72:	4410      	add	r0, r2
 800fa74:	bf28      	it	cs
 800fa76:	462b      	movcs	r3, r5
 800fa78:	6120      	str	r0, [r4, #16]
 800fa7a:	60a3      	str	r3, [r4, #8]
 800fa7c:	bd70      	pop	{r4, r5, r6, pc}
 800fa7e:	bf00      	nop

0800fa80 <ucdr_buffer_length>:
 800fa80:	6882      	ldr	r2, [r0, #8]
 800fa82:	6800      	ldr	r0, [r0, #0]
 800fa84:	1a10      	subs	r0, r2, r0
 800fa86:	4770      	bx	lr

0800fa88 <ucdr_buffer_remaining>:
 800fa88:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800fa8c:	1a10      	subs	r0, r2, r0
 800fa8e:	4770      	bx	lr

0800fa90 <ucdr_check_final_buffer_behavior_array>:
 800fa90:	b538      	push	{r3, r4, r5, lr}
 800fa92:	7d83      	ldrb	r3, [r0, #22]
 800fa94:	b963      	cbnz	r3, 800fab0 <ucdr_check_final_buffer_behavior_array+0x20>
 800fa96:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	4604      	mov	r4, r0
 800fa9e:	460d      	mov	r5, r1
 800faa0:	d308      	bcc.n	800fab4 <ucdr_check_final_buffer_behavior_array+0x24>
 800faa2:	b139      	cbz	r1, 800fab4 <ucdr_check_final_buffer_behavior_array+0x24>
 800faa4:	6983      	ldr	r3, [r0, #24]
 800faa6:	b163      	cbz	r3, 800fac2 <ucdr_check_final_buffer_behavior_array+0x32>
 800faa8:	69c1      	ldr	r1, [r0, #28]
 800faaa:	4798      	blx	r3
 800faac:	75a0      	strb	r0, [r4, #22]
 800faae:	b108      	cbz	r0, 800fab4 <ucdr_check_final_buffer_behavior_array+0x24>
 800fab0:	2000      	movs	r0, #0
 800fab2:	bd38      	pop	{r3, r4, r5, pc}
 800fab4:	4620      	mov	r0, r4
 800fab6:	f7ff ffe7 	bl	800fa88 <ucdr_buffer_remaining>
 800faba:	42a8      	cmp	r0, r5
 800fabc:	bf28      	it	cs
 800fabe:	4628      	movcs	r0, r5
 800fac0:	bd38      	pop	{r3, r4, r5, pc}
 800fac2:	2301      	movs	r3, #1
 800fac4:	7583      	strb	r3, [r0, #22]
 800fac6:	e7f3      	b.n	800fab0 <ucdr_check_final_buffer_behavior_array+0x20>

0800fac8 <ucdr_advance_buffer>:
 800fac8:	b538      	push	{r3, r4, r5, lr}
 800faca:	4604      	mov	r4, r0
 800facc:	460d      	mov	r5, r1
 800face:	f7ff ff59 	bl	800f984 <ucdr_check_buffer_available_for>
 800fad2:	b178      	cbz	r0, 800faf4 <ucdr_advance_buffer+0x2c>
 800fad4:	68a3      	ldr	r3, [r4, #8]
 800fad6:	6921      	ldr	r1, [r4, #16]
 800fad8:	442b      	add	r3, r5
 800fada:	60a3      	str	r3, [r4, #8]
 800fadc:	2301      	movs	r3, #1
 800fade:	4429      	add	r1, r5
 800fae0:	7563      	strb	r3, [r4, #21]
 800fae2:	6121      	str	r1, [r4, #16]
 800fae4:	bd38      	pop	{r3, r4, r5, pc}
 800fae6:	68a2      	ldr	r2, [r4, #8]
 800fae8:	6923      	ldr	r3, [r4, #16]
 800faea:	4402      	add	r2, r0
 800faec:	4403      	add	r3, r0
 800faee:	1a2d      	subs	r5, r5, r0
 800faf0:	60a2      	str	r2, [r4, #8]
 800faf2:	6123      	str	r3, [r4, #16]
 800faf4:	2201      	movs	r2, #1
 800faf6:	4629      	mov	r1, r5
 800faf8:	4620      	mov	r0, r4
 800fafa:	f7ff ffc9 	bl	800fa90 <ucdr_check_final_buffer_behavior_array>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	d1f1      	bne.n	800fae6 <ucdr_advance_buffer+0x1e>
 800fb02:	2301      	movs	r3, #1
 800fb04:	7563      	strb	r3, [r4, #21]
 800fb06:	bd38      	pop	{r3, r4, r5, pc}

0800fb08 <uxr_buffer_delete_entity>:
 800fb08:	b530      	push	{r4, r5, lr}
 800fb0a:	b08f      	sub	sp, #60	; 0x3c
 800fb0c:	2403      	movs	r4, #3
 800fb0e:	2500      	movs	r5, #0
 800fb10:	e9cd 4500 	strd	r4, r5, [sp]
 800fb14:	9202      	str	r2, [sp, #8]
 800fb16:	ab06      	add	r3, sp, #24
 800fb18:	2204      	movs	r2, #4
 800fb1a:	9103      	str	r1, [sp, #12]
 800fb1c:	4604      	mov	r4, r0
 800fb1e:	f001 fa85 	bl	801102c <uxr_prepare_stream_to_write_submessage>
 800fb22:	b918      	cbnz	r0, 800fb2c <uxr_buffer_delete_entity+0x24>
 800fb24:	4604      	mov	r4, r0
 800fb26:	4620      	mov	r0, r4
 800fb28:	b00f      	add	sp, #60	; 0x3c
 800fb2a:	bd30      	pop	{r4, r5, pc}
 800fb2c:	9902      	ldr	r1, [sp, #8]
 800fb2e:	aa05      	add	r2, sp, #20
 800fb30:	4620      	mov	r0, r4
 800fb32:	f001 fbb5 	bl	80112a0 <uxr_init_base_object_request>
 800fb36:	a905      	add	r1, sp, #20
 800fb38:	4604      	mov	r4, r0
 800fb3a:	a806      	add	r0, sp, #24
 800fb3c:	f002 fdf0 	bl	8012720 <uxr_serialize_DELETE_Payload>
 800fb40:	4620      	mov	r0, r4
 800fb42:	b00f      	add	sp, #60	; 0x3c
 800fb44:	bd30      	pop	{r4, r5, pc}
 800fb46:	bf00      	nop

0800fb48 <uxr_common_create_entity>:
 800fb48:	b530      	push	{r4, r5, lr}
 800fb4a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800fb4e:	b08d      	sub	sp, #52	; 0x34
 800fb50:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fb54:	2d01      	cmp	r5, #1
 800fb56:	bf0c      	ite	eq
 800fb58:	f003 0201 	andeq.w	r2, r3, #1
 800fb5c:	2200      	movne	r2, #0
 800fb5e:	330e      	adds	r3, #14
 800fb60:	4604      	mov	r4, r0
 800fb62:	441a      	add	r2, r3
 800fb64:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800fb68:	9001      	str	r0, [sp, #4]
 800fb6a:	2101      	movs	r1, #1
 800fb6c:	9100      	str	r1, [sp, #0]
 800fb6e:	b292      	uxth	r2, r2
 800fb70:	9903      	ldr	r1, [sp, #12]
 800fb72:	ab04      	add	r3, sp, #16
 800fb74:	4620      	mov	r0, r4
 800fb76:	f001 fa59 	bl	801102c <uxr_prepare_stream_to_write_submessage>
 800fb7a:	b918      	cbnz	r0, 800fb84 <uxr_common_create_entity+0x3c>
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	4620      	mov	r0, r4
 800fb80:	b00d      	add	sp, #52	; 0x34
 800fb82:	bd30      	pop	{r4, r5, pc}
 800fb84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fb86:	9902      	ldr	r1, [sp, #8]
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f001 fb89 	bl	80112a0 <uxr_init_base_object_request>
 800fb8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fb90:	4604      	mov	r4, r0
 800fb92:	a804      	add	r0, sp, #16
 800fb94:	f002 fd18 	bl	80125c8 <uxr_serialize_CREATE_Payload>
 800fb98:	4620      	mov	r0, r4
 800fb9a:	b00d      	add	sp, #52	; 0x34
 800fb9c:	bd30      	pop	{r4, r5, pc}
 800fb9e:	bf00      	nop

0800fba0 <uxr_buffer_create_participant_bin>:
 800fba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fba2:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800fba6:	ac11      	add	r4, sp, #68	; 0x44
 800fba8:	9103      	str	r1, [sp, #12]
 800fbaa:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800fbac:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800fbb0:	2103      	movs	r1, #3
 800fbb2:	7221      	strb	r1, [r4, #8]
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	7123      	strb	r3, [r4, #4]
 800fbba:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800fbbe:	9202      	str	r2, [sp, #8]
 800fbc0:	4605      	mov	r5, r0
 800fbc2:	f88d 1014 	strb.w	r1, [sp, #20]
 800fbc6:	b1ce      	cbz	r6, 800fbfc <uxr_buffer_create_participant_bin+0x5c>
 800fbc8:	f88d 301c 	strb.w	r3, [sp, #28]
 800fbcc:	9608      	str	r6, [sp, #32]
 800fbce:	a809      	add	r0, sp, #36	; 0x24
 800fbd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fbd4:	a915      	add	r1, sp, #84	; 0x54
 800fbd6:	f7ff ff27 	bl	800fa28 <ucdr_init_buffer>
 800fbda:	a905      	add	r1, sp, #20
 800fbdc:	a809      	add	r0, sp, #36	; 0x24
 800fbde:	f002 f8bb 	bl	8011d58 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fbe2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fbe4:	9401      	str	r4, [sp, #4]
 800fbe6:	b283      	uxth	r3, r0
 800fbe8:	9700      	str	r7, [sp, #0]
 800fbea:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fbee:	60e0      	str	r0, [r4, #12]
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	f7ff ffa9 	bl	800fb48 <uxr_common_create_entity>
 800fbf6:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800fbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbfc:	f88d 601c 	strb.w	r6, [sp, #28]
 800fc00:	e7e5      	b.n	800fbce <uxr_buffer_create_participant_bin+0x2e>
 800fc02:	bf00      	nop

0800fc04 <uxr_buffer_create_topic_bin>:
 800fc04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc06:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800fc0a:	ac13      	add	r4, sp, #76	; 0x4c
 800fc0c:	4605      	mov	r5, r0
 800fc0e:	9105      	str	r1, [sp, #20]
 800fc10:	4618      	mov	r0, r3
 800fc12:	a997      	add	r1, sp, #604	; 0x25c
 800fc14:	2602      	movs	r6, #2
 800fc16:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc1a:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800fc1e:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800fc22:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800fc24:	f000 f994 	bl	800ff50 <uxr_object_id_to_raw>
 800fc28:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800fc2a:	9206      	str	r2, [sp, #24]
 800fc2c:	2303      	movs	r3, #3
 800fc2e:	2101      	movs	r1, #1
 800fc30:	7223      	strb	r3, [r4, #8]
 800fc32:	a80b      	add	r0, sp, #44	; 0x2c
 800fc34:	2300      	movs	r3, #0
 800fc36:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc3a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800fc3e:	a917      	add	r1, sp, #92	; 0x5c
 800fc40:	f88d 301c 	strb.w	r3, [sp, #28]
 800fc44:	960a      	str	r6, [sp, #40]	; 0x28
 800fc46:	f7ff feef 	bl	800fa28 <ucdr_init_buffer>
 800fc4a:	a906      	add	r1, sp, #24
 800fc4c:	a80b      	add	r0, sp, #44	; 0x2c
 800fc4e:	f002 f8a5 	bl	8011d9c <uxr_serialize_OBJK_Topic_Binary>
 800fc52:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800fc54:	9401      	str	r4, [sp, #4]
 800fc56:	9700      	str	r7, [sp, #0]
 800fc58:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	b2b3      	uxth	r3, r6
 800fc60:	60e6      	str	r6, [r4, #12]
 800fc62:	f7ff ff71 	bl	800fb48 <uxr_common_create_entity>
 800fc66:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800fc6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc6c <uxr_buffer_create_publisher_bin>:
 800fc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc6e:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fc72:	ac0e      	add	r4, sp, #56	; 0x38
 800fc74:	4605      	mov	r5, r0
 800fc76:	9105      	str	r1, [sp, #20]
 800fc78:	4618      	mov	r0, r3
 800fc7a:	2603      	movs	r6, #3
 800fc7c:	a992      	add	r1, sp, #584	; 0x248
 800fc7e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc82:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fc86:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fc8a:	f000 f961 	bl	800ff50 <uxr_object_id_to_raw>
 800fc8e:	2300      	movs	r3, #0
 800fc90:	a806      	add	r0, sp, #24
 800fc92:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc96:	a912      	add	r1, sp, #72	; 0x48
 800fc98:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fc9c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fca0:	7226      	strb	r6, [r4, #8]
 800fca2:	f7ff fec1 	bl	800fa28 <ucdr_init_buffer>
 800fca6:	a993      	add	r1, sp, #588	; 0x24c
 800fca8:	a806      	add	r0, sp, #24
 800fcaa:	f002 f92b 	bl	8011f04 <uxr_serialize_OBJK_Publisher_Binary>
 800fcae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fcb0:	9700      	str	r7, [sp, #0]
 800fcb2:	9401      	str	r4, [sp, #4]
 800fcb4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fcb8:	4628      	mov	r0, r5
 800fcba:	b2b3      	uxth	r3, r6
 800fcbc:	60e6      	str	r6, [r4, #12]
 800fcbe:	f7ff ff43 	bl	800fb48 <uxr_common_create_entity>
 800fcc2:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fcc8 <uxr_buffer_create_subscriber_bin>:
 800fcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcca:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fcce:	ac0e      	add	r4, sp, #56	; 0x38
 800fcd0:	4605      	mov	r5, r0
 800fcd2:	9105      	str	r1, [sp, #20]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	a992      	add	r1, sp, #584	; 0x248
 800fcd8:	2604      	movs	r6, #4
 800fcda:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fcde:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fce2:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fce6:	f000 f933 	bl	800ff50 <uxr_object_id_to_raw>
 800fcea:	2103      	movs	r1, #3
 800fcec:	2300      	movs	r3, #0
 800fcee:	a806      	add	r0, sp, #24
 800fcf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fcf4:	7221      	strb	r1, [r4, #8]
 800fcf6:	a912      	add	r1, sp, #72	; 0x48
 800fcf8:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fcfc:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fd00:	f7ff fe92 	bl	800fa28 <ucdr_init_buffer>
 800fd04:	a993      	add	r1, sp, #588	; 0x24c
 800fd06:	a806      	add	r0, sp, #24
 800fd08:	f002 f9ac 	bl	8012064 <uxr_serialize_OBJK_Subscriber_Binary>
 800fd0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fd0e:	9700      	str	r7, [sp, #0]
 800fd10:	9401      	str	r4, [sp, #4]
 800fd12:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd16:	4628      	mov	r0, r5
 800fd18:	b2b3      	uxth	r3, r6
 800fd1a:	60e6      	str	r6, [r4, #12]
 800fd1c:	f7ff ff14 	bl	800fb48 <uxr_common_create_entity>
 800fd20:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fd24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd26:	bf00      	nop

0800fd28 <uxr_buffer_create_datawriter_bin>:
 800fd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd2c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800fd30:	ac1d      	add	r4, sp, #116	; 0x74
 800fd32:	2505      	movs	r5, #5
 800fd34:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fd38:	9105      	str	r1, [sp, #20]
 800fd3a:	4606      	mov	r6, r0
 800fd3c:	a9a1      	add	r1, sp, #644	; 0x284
 800fd3e:	4618      	mov	r0, r3
 800fd40:	7125      	strb	r5, [r4, #4]
 800fd42:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800fd46:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800fd4a:	2703      	movs	r7, #3
 800fd4c:	f000 f900 	bl	800ff50 <uxr_object_id_to_raw>
 800fd50:	a90e      	add	r1, sp, #56	; 0x38
 800fd52:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800fd54:	7227      	strb	r7, [r4, #8]
 800fd56:	f000 f8fb 	bl	800ff50 <uxr_object_id_to_raw>
 800fd5a:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800fd5e:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 800fd62:	3d00      	subs	r5, #0
 800fd64:	f04f 0300 	mov.w	r3, #0
 800fd68:	bf18      	it	ne
 800fd6a:	2501      	movne	r5, #1
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800fd72:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fd76:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fd7a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800fd7e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fd82:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fd86:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fd8a:	bb89      	cbnz	r1, 800fdf0 <uxr_buffer_create_datawriter_bin+0xc8>
 800fd8c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fd90:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800fd94:	f04f 0c13 	mov.w	ip, #19
 800fd98:	250b      	movs	r5, #11
 800fd9a:	2221      	movs	r2, #33	; 0x21
 800fd9c:	2111      	movs	r1, #17
 800fd9e:	2009      	movs	r0, #9
 800fda0:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800fda4:	b923      	cbnz	r3, 800fdb0 <uxr_buffer_create_datawriter_bin+0x88>
 800fda6:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800fdaa:	4672      	mov	r2, lr
 800fdac:	4661      	mov	r1, ip
 800fdae:	4628      	mov	r0, r5
 800fdb0:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d025      	beq.n	800fe04 <uxr_buffer_create_datawriter_bin+0xdc>
 800fdb8:	2b03      	cmp	r3, #3
 800fdba:	d029      	beq.n	800fe10 <uxr_buffer_create_datawriter_bin+0xe8>
 800fdbc:	b32b      	cbz	r3, 800fe0a <uxr_buffer_create_datawriter_bin+0xe2>
 800fdbe:	a806      	add	r0, sp, #24
 800fdc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fdc4:	a921      	add	r1, sp, #132	; 0x84
 800fdc6:	f7ff fe2f 	bl	800fa28 <ucdr_init_buffer>
 800fdca:	a90e      	add	r1, sp, #56	; 0x38
 800fdcc:	a806      	add	r0, sp, #24
 800fdce:	f002 f9fb 	bl	80121c8 <uxr_serialize_OBJK_DataWriter_Binary>
 800fdd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fdd4:	9401      	str	r4, [sp, #4]
 800fdd6:	b283      	uxth	r3, r0
 800fdd8:	f8cd 8000 	str.w	r8, [sp]
 800fddc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fde0:	60e0      	str	r0, [r4, #12]
 800fde2:	4630      	mov	r0, r6
 800fde4:	f7ff feb0 	bl	800fb48 <uxr_common_create_entity>
 800fde8:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fdec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdf0:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800fdf4:	f04f 0c12 	mov.w	ip, #18
 800fdf8:	250a      	movs	r5, #10
 800fdfa:	2220      	movs	r2, #32
 800fdfc:	2110      	movs	r1, #16
 800fdfe:	2008      	movs	r0, #8
 800fe00:	2702      	movs	r7, #2
 800fe02:	e7cd      	b.n	800fda0 <uxr_buffer_create_datawriter_bin+0x78>
 800fe04:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800fe08:	e7d9      	b.n	800fdbe <uxr_buffer_create_datawriter_bin+0x96>
 800fe0a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800fe0e:	e7d6      	b.n	800fdbe <uxr_buffer_create_datawriter_bin+0x96>
 800fe10:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fe14:	e7d3      	b.n	800fdbe <uxr_buffer_create_datawriter_bin+0x96>
 800fe16:	bf00      	nop

0800fe18 <uxr_buffer_create_datareader_bin>:
 800fe18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe1c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800fe20:	ac1f      	add	r4, sp, #124	; 0x7c
 800fe22:	2506      	movs	r5, #6
 800fe24:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fe28:	9105      	str	r1, [sp, #20]
 800fe2a:	4606      	mov	r6, r0
 800fe2c:	a9a3      	add	r1, sp, #652	; 0x28c
 800fe2e:	4618      	mov	r0, r3
 800fe30:	7125      	strb	r5, [r4, #4]
 800fe32:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800fe36:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800fe3a:	2703      	movs	r7, #3
 800fe3c:	f000 f888 	bl	800ff50 <uxr_object_id_to_raw>
 800fe40:	a90e      	add	r1, sp, #56	; 0x38
 800fe42:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800fe44:	7227      	strb	r7, [r4, #8]
 800fe46:	f000 f883 	bl	800ff50 <uxr_object_id_to_raw>
 800fe4a:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800fe4e:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 800fe52:	3d00      	subs	r5, #0
 800fe54:	f04f 0300 	mov.w	r3, #0
 800fe58:	bf18      	it	ne
 800fe5a:	2501      	movne	r5, #1
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800fe62:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fe66:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800fe6a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fe6e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800fe72:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fe76:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fe7a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fe7e:	bb89      	cbnz	r1, 800fee4 <uxr_buffer_create_datareader_bin+0xcc>
 800fe80:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fe84:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800fe88:	f04f 0c13 	mov.w	ip, #19
 800fe8c:	250b      	movs	r5, #11
 800fe8e:	2221      	movs	r2, #33	; 0x21
 800fe90:	2111      	movs	r1, #17
 800fe92:	2009      	movs	r0, #9
 800fe94:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800fe98:	b923      	cbnz	r3, 800fea4 <uxr_buffer_create_datareader_bin+0x8c>
 800fe9a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800fe9e:	4672      	mov	r2, lr
 800fea0:	4661      	mov	r1, ip
 800fea2:	4628      	mov	r0, r5
 800fea4:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d025      	beq.n	800fef8 <uxr_buffer_create_datareader_bin+0xe0>
 800feac:	2b03      	cmp	r3, #3
 800feae:	d029      	beq.n	800ff04 <uxr_buffer_create_datareader_bin+0xec>
 800feb0:	b32b      	cbz	r3, 800fefe <uxr_buffer_create_datareader_bin+0xe6>
 800feb2:	a806      	add	r0, sp, #24
 800feb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800feb8:	a923      	add	r1, sp, #140	; 0x8c
 800feba:	f7ff fdb5 	bl	800fa28 <ucdr_init_buffer>
 800febe:	a90e      	add	r1, sp, #56	; 0x38
 800fec0:	a806      	add	r0, sp, #24
 800fec2:	f002 f945 	bl	8012150 <uxr_serialize_OBJK_DataReader_Binary>
 800fec6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fec8:	9401      	str	r4, [sp, #4]
 800feca:	b283      	uxth	r3, r0
 800fecc:	f8cd 8000 	str.w	r8, [sp]
 800fed0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fed4:	60e0      	str	r0, [r4, #12]
 800fed6:	4630      	mov	r0, r6
 800fed8:	f7ff fe36 	bl	800fb48 <uxr_common_create_entity>
 800fedc:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800fee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fee4:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800fee8:	f04f 0c12 	mov.w	ip, #18
 800feec:	250a      	movs	r5, #10
 800feee:	2220      	movs	r2, #32
 800fef0:	2110      	movs	r1, #16
 800fef2:	2008      	movs	r0, #8
 800fef4:	2702      	movs	r7, #2
 800fef6:	e7cd      	b.n	800fe94 <uxr_buffer_create_datareader_bin+0x7c>
 800fef8:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800fefc:	e7d9      	b.n	800feb2 <uxr_buffer_create_datareader_bin+0x9a>
 800fefe:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800ff02:	e7d6      	b.n	800feb2 <uxr_buffer_create_datareader_bin+0x9a>
 800ff04:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ff08:	e7d3      	b.n	800feb2 <uxr_buffer_create_datareader_bin+0x9a>
 800ff0a:	bf00      	nop

0800ff0c <uxr_object_id>:
 800ff0c:	b082      	sub	sp, #8
 800ff0e:	2300      	movs	r3, #0
 800ff10:	f88d 1006 	strb.w	r1, [sp, #6]
 800ff14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ff18:	f360 030f 	bfi	r3, r0, #0, #16
 800ff1c:	f362 431f 	bfi	r3, r2, #16, #16
 800ff20:	4618      	mov	r0, r3
 800ff22:	b002      	add	sp, #8
 800ff24:	4770      	bx	lr
 800ff26:	bf00      	nop

0800ff28 <uxr_object_id_from_raw>:
 800ff28:	7843      	ldrb	r3, [r0, #1]
 800ff2a:	7801      	ldrb	r1, [r0, #0]
 800ff2c:	b082      	sub	sp, #8
 800ff2e:	f003 000f 	and.w	r0, r3, #15
 800ff32:	f88d 0006 	strb.w	r0, [sp, #6]
 800ff36:	091b      	lsrs	r3, r3, #4
 800ff38:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800ff42:	f363 020f 	bfi	r2, r3, #0, #16
 800ff46:	f361 421f 	bfi	r2, r1, #16, #16
 800ff4a:	4610      	mov	r0, r2
 800ff4c:	b002      	add	sp, #8
 800ff4e:	4770      	bx	lr

0800ff50 <uxr_object_id_to_raw>:
 800ff50:	4602      	mov	r2, r0
 800ff52:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ff56:	b082      	sub	sp, #8
 800ff58:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800ff5c:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800ff60:	700a      	strb	r2, [r1, #0]
 800ff62:	704b      	strb	r3, [r1, #1]
 800ff64:	b002      	add	sp, #8
 800ff66:	4770      	bx	lr

0800ff68 <uxr_buffer_request_data>:
 800ff68:	b530      	push	{r4, r5, lr}
 800ff6a:	b095      	sub	sp, #84	; 0x54
 800ff6c:	4604      	mov	r4, r0
 800ff6e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800ff70:	9105      	str	r1, [sp, #20]
 800ff72:	2d00      	cmp	r5, #0
 800ff74:	bf14      	ite	ne
 800ff76:	2101      	movne	r1, #1
 800ff78:	2100      	moveq	r1, #0
 800ff7a:	9204      	str	r2, [sp, #16]
 800ff7c:	f04f 0200 	mov.w	r2, #0
 800ff80:	9303      	str	r3, [sp, #12]
 800ff82:	f88d 301c 	strb.w	r3, [sp, #28]
 800ff86:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800ff8a:	f88d 201d 	strb.w	r2, [sp, #29]
 800ff8e:	f88d 201e 	strb.w	r2, [sp, #30]
 800ff92:	d021      	beq.n	800ffd8 <uxr_buffer_request_data+0x70>
 800ff94:	686a      	ldr	r2, [r5, #4]
 800ff96:	682b      	ldr	r3, [r5, #0]
 800ff98:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800ff9c:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800ffa0:	2210      	movs	r2, #16
 800ffa2:	2000      	movs	r0, #0
 800ffa4:	2108      	movs	r1, #8
 800ffa6:	e9cd 1000 	strd	r1, r0, [sp]
 800ffaa:	ab0c      	add	r3, sp, #48	; 0x30
 800ffac:	9905      	ldr	r1, [sp, #20]
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f001 f83c 	bl	801102c <uxr_prepare_stream_to_write_submessage>
 800ffb4:	b918      	cbnz	r0, 800ffbe <uxr_buffer_request_data+0x56>
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	4620      	mov	r0, r4
 800ffba:	b015      	add	sp, #84	; 0x54
 800ffbc:	bd30      	pop	{r4, r5, pc}
 800ffbe:	9904      	ldr	r1, [sp, #16]
 800ffc0:	aa06      	add	r2, sp, #24
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	f001 f96c 	bl	80112a0 <uxr_init_base_object_request>
 800ffc8:	a906      	add	r1, sp, #24
 800ffca:	4604      	mov	r4, r0
 800ffcc:	a80c      	add	r0, sp, #48	; 0x30
 800ffce:	f002 fc51 	bl	8012874 <uxr_serialize_READ_DATA_Payload>
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	b015      	add	sp, #84	; 0x54
 800ffd6:	bd30      	pop	{r4, r5, pc}
 800ffd8:	2208      	movs	r2, #8
 800ffda:	e7e2      	b.n	800ffa2 <uxr_buffer_request_data+0x3a>

0800ffdc <uxr_buffer_cancel_data>:
 800ffdc:	b530      	push	{r4, r5, lr}
 800ffde:	b095      	sub	sp, #84	; 0x54
 800ffe0:	2400      	movs	r4, #0
 800ffe2:	2308      	movs	r3, #8
 800ffe4:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800ffe8:	9300      	str	r3, [sp, #0]
 800ffea:	9205      	str	r2, [sp, #20]
 800ffec:	2501      	movs	r5, #1
 800ffee:	ab0c      	add	r3, sp, #48	; 0x30
 800fff0:	2210      	movs	r2, #16
 800fff2:	f8ad 401c 	strh.w	r4, [sp, #28]
 800fff6:	f88d 401e 	strb.w	r4, [sp, #30]
 800fffa:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 800fffe:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 8010002:	9103      	str	r1, [sp, #12]
 8010004:	4604      	mov	r4, r0
 8010006:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801000a:	f001 f80f 	bl	801102c <uxr_prepare_stream_to_write_submessage>
 801000e:	b918      	cbnz	r0, 8010018 <uxr_buffer_cancel_data+0x3c>
 8010010:	4604      	mov	r4, r0
 8010012:	4620      	mov	r0, r4
 8010014:	b015      	add	sp, #84	; 0x54
 8010016:	bd30      	pop	{r4, r5, pc}
 8010018:	9905      	ldr	r1, [sp, #20]
 801001a:	aa06      	add	r2, sp, #24
 801001c:	4620      	mov	r0, r4
 801001e:	f001 f93f 	bl	80112a0 <uxr_init_base_object_request>
 8010022:	a906      	add	r1, sp, #24
 8010024:	4604      	mov	r4, r0
 8010026:	a80c      	add	r0, sp, #48	; 0x30
 8010028:	f002 fc24 	bl	8012874 <uxr_serialize_READ_DATA_Payload>
 801002c:	4620      	mov	r0, r4
 801002e:	b015      	add	sp, #84	; 0x54
 8010030:	bd30      	pop	{r4, r5, pc}
 8010032:	bf00      	nop

08010034 <read_submessage_format>:
 8010034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010038:	b095      	sub	sp, #84	; 0x54
 801003a:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 801003e:	b113      	cbz	r3, 8010046 <read_submessage_format+0x12>
 8010040:	b015      	add	sp, #84	; 0x54
 8010042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010046:	460c      	mov	r4, r1
 8010048:	4616      	mov	r6, r2
 801004a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801004e:	461d      	mov	r5, r3
 8010050:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010052:	9304      	str	r3, [sp, #16]
 8010054:	1a52      	subs	r2, r2, r1
 8010056:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010058:	9305      	str	r3, [sp, #20]
 801005a:	4607      	mov	r7, r0
 801005c:	a80c      	add	r0, sp, #48	; 0x30
 801005e:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8010062:	f7ff fce1 	bl	800fa28 <ucdr_init_buffer>
 8010066:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801006a:	a80c      	add	r0, sp, #48	; 0x30
 801006c:	f7ff fcb2 	bl	800f9d4 <ucdr_set_on_full_buffer_callback>
 8010070:	69e3      	ldr	r3, [r4, #28]
 8010072:	b193      	cbz	r3, 801009a <read_submessage_format+0x66>
 8010074:	f1b8 0f07 	cmp.w	r8, #7
 8010078:	751d      	strb	r5, [r3, #20]
 801007a:	d03e      	beq.n	80100fa <read_submessage_format+0xc6>
 801007c:	f1b8 0f08 	cmp.w	r8, #8
 8010080:	d02c      	beq.n	80100dc <read_submessage_format+0xa8>
 8010082:	f1b8 0f06 	cmp.w	r8, #6
 8010086:	d011      	beq.n	80100ac <read_submessage_format+0x78>
 8010088:	2201      	movs	r2, #1
 801008a:	751a      	strb	r2, [r3, #20]
 801008c:	4631      	mov	r1, r6
 801008e:	4620      	mov	r0, r4
 8010090:	f7ff fd1a 	bl	800fac8 <ucdr_advance_buffer>
 8010094:	b015      	add	sp, #84	; 0x54
 8010096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801009a:	f1b8 0f07 	cmp.w	r8, #7
 801009e:	d02c      	beq.n	80100fa <read_submessage_format+0xc6>
 80100a0:	f1b8 0f08 	cmp.w	r8, #8
 80100a4:	d01a      	beq.n	80100dc <read_submessage_format+0xa8>
 80100a6:	f1b8 0f06 	cmp.w	r8, #6
 80100aa:	d1ef      	bne.n	801008c <read_submessage_format+0x58>
 80100ac:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 80100b0:	b18d      	cbz	r5, 80100d6 <read_submessage_format+0xa2>
 80100b2:	2306      	movs	r3, #6
 80100b4:	f88d 3016 	strb.w	r3, [sp, #22]
 80100b8:	aa0c      	add	r2, sp, #48	; 0x30
 80100ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80100be:	9302      	str	r3, [sp, #8]
 80100c0:	9200      	str	r2, [sp, #0]
 80100c2:	9b04      	ldr	r3, [sp, #16]
 80100c4:	9905      	ldr	r1, [sp, #20]
 80100c6:	9601      	str	r6, [sp, #4]
 80100c8:	464a      	mov	r2, r9
 80100ca:	4638      	mov	r0, r7
 80100cc:	47a8      	blx	r5
 80100ce:	2301      	movs	r3, #1
 80100d0:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80100d4:	69e3      	ldr	r3, [r4, #28]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1d6      	bne.n	8010088 <read_submessage_format+0x54>
 80100da:	e7d7      	b.n	801008c <read_submessage_format+0x58>
 80100dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80100e0:	2a00      	cmp	r2, #0
 80100e2:	d0f8      	beq.n	80100d6 <read_submessage_format+0xa2>
 80100e4:	a906      	add	r1, sp, #24
 80100e6:	a80c      	add	r0, sp, #48	; 0x30
 80100e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80100ea:	f002 fc89 	bl	8012a00 <uxr_deserialize_SampleIdentity>
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d13c      	bne.n	801016c <read_submessage_format+0x138>
 80100f2:	69e3      	ldr	r3, [r4, #28]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d1c7      	bne.n	8010088 <read_submessage_format+0x54>
 80100f8:	e7c8      	b.n	801008c <read_submessage_format+0x58>
 80100fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80100fe:	b132      	cbz	r2, 801010e <read_submessage_format+0xda>
 8010100:	a906      	add	r1, sp, #24
 8010102:	a80c      	add	r0, sp, #48	; 0x30
 8010104:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010106:	f002 f939 	bl	801237c <uxr_deserialize_BaseObjectRequest>
 801010a:	b930      	cbnz	r0, 801011a <read_submessage_format+0xe6>
 801010c:	69e3      	ldr	r3, [r4, #28]
 801010e:	68a2      	ldr	r2, [r4, #8]
 8010110:	4432      	add	r2, r6
 8010112:	60a2      	str	r2, [r4, #8]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d1b7      	bne.n	8010088 <read_submessage_format+0x54>
 8010118:	e7b8      	b.n	801008c <read_submessage_format+0x58>
 801011a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801011e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010120:	1a52      	subs	r2, r2, r1
 8010122:	a80c      	add	r0, sp, #48	; 0x30
 8010124:	1aed      	subs	r5, r5, r3
 8010126:	f7ff fc7f 	bl	800fa28 <ucdr_init_buffer>
 801012a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801012e:	a80c      	add	r0, sp, #48	; 0x30
 8010130:	f7ff fc50 	bl	800f9d4 <ucdr_set_on_full_buffer_callback>
 8010134:	4435      	add	r5, r6
 8010136:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801013a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801013e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8010142:	9002      	str	r0, [sp, #8]
 8010144:	2207      	movs	r2, #7
 8010146:	f88d 2016 	strb.w	r2, [sp, #22]
 801014a:	b2ad      	uxth	r5, r5
 801014c:	aa0c      	add	r2, sp, #48	; 0x30
 801014e:	9200      	str	r2, [sp, #0]
 8010150:	9501      	str	r5, [sp, #4]
 8010152:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010156:	b29b      	uxth	r3, r3
 8010158:	9905      	ldr	r1, [sp, #20]
 801015a:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 801015e:	464a      	mov	r2, r9
 8010160:	4638      	mov	r0, r7
 8010162:	47a8      	blx	r5
 8010164:	2301      	movs	r3, #1
 8010166:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 801016a:	e7cf      	b.n	801010c <read_submessage_format+0xd8>
 801016c:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8010170:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010172:	1a52      	subs	r2, r2, r1
 8010174:	a80c      	add	r0, sp, #48	; 0x30
 8010176:	1aed      	subs	r5, r5, r3
 8010178:	f7ff fc56 	bl	800fa28 <ucdr_init_buffer>
 801017c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010180:	a80c      	add	r0, sp, #48	; 0x30
 8010182:	f7ff fc27 	bl	800f9d4 <ucdr_set_on_full_buffer_callback>
 8010186:	4435      	add	r5, r6
 8010188:	2308      	movs	r3, #8
 801018a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 801018e:	f88d 3016 	strb.w	r3, [sp, #22]
 8010192:	b2ad      	uxth	r5, r5
 8010194:	ab0c      	add	r3, sp, #48	; 0x30
 8010196:	9300      	str	r3, [sp, #0]
 8010198:	9002      	str	r0, [sp, #8]
 801019a:	9501      	str	r5, [sp, #4]
 801019c:	ab06      	add	r3, sp, #24
 801019e:	9905      	ldr	r1, [sp, #20]
 80101a0:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 80101a4:	464a      	mov	r2, r9
 80101a6:	4638      	mov	r0, r7
 80101a8:	47a8      	blx	r5
 80101aa:	2301      	movs	r3, #1
 80101ac:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80101b0:	e79f      	b.n	80100f2 <read_submessage_format+0xbe>
 80101b2:	bf00      	nop

080101b4 <on_get_fragmentation_info>:
 80101b4:	b500      	push	{lr}
 80101b6:	b08b      	sub	sp, #44	; 0x2c
 80101b8:	4601      	mov	r1, r0
 80101ba:	2204      	movs	r2, #4
 80101bc:	a802      	add	r0, sp, #8
 80101be:	f7ff fc33 	bl	800fa28 <ucdr_init_buffer>
 80101c2:	f10d 0305 	add.w	r3, sp, #5
 80101c6:	a802      	add	r0, sp, #8
 80101c8:	f10d 0206 	add.w	r2, sp, #6
 80101cc:	a901      	add	r1, sp, #4
 80101ce:	f001 f9eb 	bl	80115a8 <uxr_read_submessage_header>
 80101d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80101d6:	2b0d      	cmp	r3, #13
 80101d8:	d003      	beq.n	80101e2 <on_get_fragmentation_info+0x2e>
 80101da:	2000      	movs	r0, #0
 80101dc:	b00b      	add	sp, #44	; 0x2c
 80101de:	f85d fb04 	ldr.w	pc, [sp], #4
 80101e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80101e6:	f013 0f02 	tst.w	r3, #2
 80101ea:	bf14      	ite	ne
 80101ec:	2002      	movne	r0, #2
 80101ee:	2001      	moveq	r0, #1
 80101f0:	b00b      	add	sp, #44	; 0x2c
 80101f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80101f6:	bf00      	nop

080101f8 <read_submessage_get_info>:
 80101f8:	b570      	push	{r4, r5, r6, lr}
 80101fa:	2500      	movs	r5, #0
 80101fc:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8010200:	4604      	mov	r4, r0
 8010202:	f44f 7224 	mov.w	r2, #656	; 0x290
 8010206:	460e      	mov	r6, r1
 8010208:	a810      	add	r0, sp, #64	; 0x40
 801020a:	4629      	mov	r1, r5
 801020c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010210:	f008 fa02 	bl	8018618 <memset>
 8010214:	a903      	add	r1, sp, #12
 8010216:	4630      	mov	r0, r6
 8010218:	f002 fa6e 	bl	80126f8 <uxr_deserialize_GET_INFO_Payload>
 801021c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010220:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010224:	4620      	mov	r0, r4
 8010226:	f001 f833 	bl	8011290 <uxr_session_header_offset>
 801022a:	462b      	mov	r3, r5
 801022c:	9000      	str	r0, [sp, #0]
 801022e:	a905      	add	r1, sp, #20
 8010230:	a808      	add	r0, sp, #32
 8010232:	220c      	movs	r2, #12
 8010234:	f7ff fbe6 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 8010238:	a910      	add	r1, sp, #64	; 0x40
 801023a:	a808      	add	r0, sp, #32
 801023c:	f002 face 	bl	80127dc <uxr_serialize_INFO_Payload>
 8010240:	9b08      	ldr	r3, [sp, #32]
 8010242:	462a      	mov	r2, r5
 8010244:	4629      	mov	r1, r5
 8010246:	4620      	mov	r0, r4
 8010248:	f000 ffca 	bl	80111e0 <uxr_stamp_session_header>
 801024c:	a808      	add	r0, sp, #32
 801024e:	f7ff fc17 	bl	800fa80 <ucdr_buffer_length>
 8010252:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010254:	4602      	mov	r2, r0
 8010256:	a905      	add	r1, sp, #20
 8010258:	e9d3 0400 	ldrd	r0, r4, [r3]
 801025c:	47a0      	blx	r4
 801025e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8010262:	bd70      	pop	{r4, r5, r6, pc}

08010264 <write_submessage_acknack.isra.0>:
 8010264:	b570      	push	{r4, r5, r6, lr}
 8010266:	b092      	sub	sp, #72	; 0x48
 8010268:	4605      	mov	r5, r0
 801026a:	460e      	mov	r6, r1
 801026c:	4614      	mov	r4, r2
 801026e:	f001 f80f 	bl	8011290 <uxr_session_header_offset>
 8010272:	a905      	add	r1, sp, #20
 8010274:	9000      	str	r0, [sp, #0]
 8010276:	2300      	movs	r3, #0
 8010278:	a80a      	add	r0, sp, #40	; 0x28
 801027a:	2211      	movs	r2, #17
 801027c:	f7ff fbc2 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 8010280:	2218      	movs	r2, #24
 8010282:	fb02 5404 	mla	r4, r2, r4, r5
 8010286:	2300      	movs	r3, #0
 8010288:	2205      	movs	r2, #5
 801028a:	3450      	adds	r4, #80	; 0x50
 801028c:	a80a      	add	r0, sp, #40	; 0x28
 801028e:	210a      	movs	r1, #10
 8010290:	f001 f970 	bl	8011574 <uxr_buffer_submessage_header>
 8010294:	a903      	add	r1, sp, #12
 8010296:	4620      	mov	r0, r4
 8010298:	f006 fa84 	bl	80167a4 <uxr_compute_acknack>
 801029c:	a903      	add	r1, sp, #12
 801029e:	ba43      	rev16	r3, r0
 80102a0:	a80a      	add	r0, sp, #40	; 0x28
 80102a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80102a6:	f88d 6010 	strb.w	r6, [sp, #16]
 80102aa:	f002 fb07 	bl	80128bc <uxr_serialize_ACKNACK_Payload>
 80102ae:	2200      	movs	r2, #0
 80102b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102b2:	4611      	mov	r1, r2
 80102b4:	4628      	mov	r0, r5
 80102b6:	f000 ff93 	bl	80111e0 <uxr_stamp_session_header>
 80102ba:	a80a      	add	r0, sp, #40	; 0x28
 80102bc:	f7ff fbe0 	bl	800fa80 <ucdr_buffer_length>
 80102c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80102c2:	4602      	mov	r2, r0
 80102c4:	a905      	add	r1, sp, #20
 80102c6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80102ca:	47a0      	blx	r4
 80102cc:	b012      	add	sp, #72	; 0x48
 80102ce:	bd70      	pop	{r4, r5, r6, pc}

080102d0 <uxr_init_session>:
 80102d0:	b5d0      	push	{r4, r6, r7, lr}
 80102d2:	2300      	movs	r3, #0
 80102d4:	2600      	movs	r6, #0
 80102d6:	2700      	movs	r7, #0
 80102d8:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 80102dc:	4604      	mov	r4, r0
 80102de:	6701      	str	r1, [r0, #112]	; 0x70
 80102e0:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 80102e4:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 80102e8:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 80102ec:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 80102f0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 80102f4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80102f8:	2181      	movs	r1, #129	; 0x81
 80102fa:	f000 fedb 	bl	80110b4 <uxr_init_session_info>
 80102fe:	f104 0008 	add.w	r0, r4, #8
 8010302:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8010306:	f001 b851 	b.w	80113ac <uxr_init_stream_storage>
 801030a:	bf00      	nop

0801030c <uxr_set_status_callback>:
 801030c:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop

08010314 <uxr_set_topic_callback>:
 8010314:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop

0801031c <uxr_set_request_callback>:
 801031c:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop

08010324 <uxr_set_reply_callback>:
 8010324:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8010328:	4770      	bx	lr
 801032a:	bf00      	nop

0801032c <uxr_create_output_best_effort_stream>:
 801032c:	b510      	push	{r4, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	e9cd 2100 	strd	r2, r1, [sp]
 8010334:	4604      	mov	r4, r0
 8010336:	f000 ffab 	bl	8011290 <uxr_session_header_offset>
 801033a:	e9dd 2100 	ldrd	r2, r1, [sp]
 801033e:	4603      	mov	r3, r0
 8010340:	f104 0008 	add.w	r0, r4, #8
 8010344:	b004      	add	sp, #16
 8010346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801034a:	f001 b879 	b.w	8011440 <uxr_add_output_best_effort_buffer>
 801034e:	bf00      	nop

08010350 <uxr_create_output_reliable_stream>:
 8010350:	b530      	push	{r4, r5, lr}
 8010352:	b089      	sub	sp, #36	; 0x24
 8010354:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010358:	9303      	str	r3, [sp, #12]
 801035a:	4604      	mov	r4, r0
 801035c:	f000 ff98 	bl	8011290 <uxr_session_header_offset>
 8010360:	4605      	mov	r5, r0
 8010362:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010366:	9905      	ldr	r1, [sp, #20]
 8010368:	9500      	str	r5, [sp, #0]
 801036a:	f104 0008 	add.w	r0, r4, #8
 801036e:	f001 f879 	bl	8011464 <uxr_add_output_reliable_buffer>
 8010372:	2200      	movs	r2, #0
 8010374:	b2c3      	uxtb	r3, r0
 8010376:	f363 0207 	bfi	r2, r3, #0, #8
 801037a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801037e:	f363 220f 	bfi	r2, r3, #8, #8
 8010382:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010386:	f363 4217 	bfi	r2, r3, #16, #8
 801038a:	0e03      	lsrs	r3, r0, #24
 801038c:	f363 621f 	bfi	r2, r3, #24, #8
 8010390:	4610      	mov	r0, r2
 8010392:	b009      	add	sp, #36	; 0x24
 8010394:	bd30      	pop	{r4, r5, pc}
 8010396:	bf00      	nop

08010398 <uxr_create_input_best_effort_stream>:
 8010398:	b082      	sub	sp, #8
 801039a:	3008      	adds	r0, #8
 801039c:	b002      	add	sp, #8
 801039e:	f001 b87b 	b.w	8011498 <uxr_add_input_best_effort_buffer>
 80103a2:	bf00      	nop

080103a4 <uxr_create_input_reliable_stream>:
 80103a4:	b510      	push	{r4, lr}
 80103a6:	b084      	sub	sp, #16
 80103a8:	4c0b      	ldr	r4, [pc, #44]	; (80103d8 <uxr_create_input_reliable_stream+0x34>)
 80103aa:	9400      	str	r4, [sp, #0]
 80103ac:	3008      	adds	r0, #8
 80103ae:	f001 f889 	bl	80114c4 <uxr_add_input_reliable_buffer>
 80103b2:	2200      	movs	r2, #0
 80103b4:	b2c3      	uxtb	r3, r0
 80103b6:	f363 0207 	bfi	r2, r3, #0, #8
 80103ba:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80103be:	f363 220f 	bfi	r2, r3, #8, #8
 80103c2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80103c6:	f363 4217 	bfi	r2, r3, #16, #8
 80103ca:	0e03      	lsrs	r3, r0, #24
 80103cc:	f363 621f 	bfi	r2, r3, #24, #8
 80103d0:	4610      	mov	r0, r2
 80103d2:	b004      	add	sp, #16
 80103d4:	bd10      	pop	{r4, pc}
 80103d6:	bf00      	nop
 80103d8:	080101b5 	.word	0x080101b5

080103dc <uxr_epoch_nanos>:
 80103dc:	b510      	push	{r4, lr}
 80103de:	4604      	mov	r4, r0
 80103e0:	f001 f92a 	bl	8011638 <uxr_nanos>
 80103e4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80103e8:	1ac0      	subs	r0, r0, r3
 80103ea:	eb61 0102 	sbc.w	r1, r1, r2
 80103ee:	bd10      	pop	{r4, pc}

080103f0 <uxr_flash_output_streams>:
 80103f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103f4:	7e03      	ldrb	r3, [r0, #24]
 80103f6:	b084      	sub	sp, #16
 80103f8:	4604      	mov	r4, r0
 80103fa:	b1fb      	cbz	r3, 801043c <uxr_flash_output_streams+0x4c>
 80103fc:	f04f 0900 	mov.w	r9, #0
 8010400:	4648      	mov	r0, r9
 8010402:	f10d 0802 	add.w	r8, sp, #2
 8010406:	af03      	add	r7, sp, #12
 8010408:	ae02      	add	r6, sp, #8
 801040a:	2201      	movs	r2, #1
 801040c:	4611      	mov	r1, r2
 801040e:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010412:	f000 ff75 	bl	8011300 <uxr_stream_id>
 8010416:	3508      	adds	r5, #8
 8010418:	4684      	mov	ip, r0
 801041a:	4643      	mov	r3, r8
 801041c:	4628      	mov	r0, r5
 801041e:	463a      	mov	r2, r7
 8010420:	4631      	mov	r1, r6
 8010422:	f8cd c004 	str.w	ip, [sp, #4]
 8010426:	f006 fa45 	bl	80168b4 <uxr_prepare_best_effort_buffer_to_send>
 801042a:	2800      	cmp	r0, #0
 801042c:	d13d      	bne.n	80104aa <uxr_flash_output_streams+0xba>
 801042e:	7e23      	ldrb	r3, [r4, #24]
 8010430:	f109 0901 	add.w	r9, r9, #1
 8010434:	fa5f f089 	uxtb.w	r0, r9
 8010438:	4283      	cmp	r3, r0
 801043a:	d8e6      	bhi.n	801040a <uxr_flash_output_streams+0x1a>
 801043c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010440:	b383      	cbz	r3, 80104a4 <uxr_flash_output_streams+0xb4>
 8010442:	f04f 0900 	mov.w	r9, #0
 8010446:	4648      	mov	r0, r9
 8010448:	f10d 0802 	add.w	r8, sp, #2
 801044c:	af03      	add	r7, sp, #12
 801044e:	ae02      	add	r6, sp, #8
 8010450:	2201      	movs	r2, #1
 8010452:	2102      	movs	r1, #2
 8010454:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010458:	f000 ff52 	bl	8011300 <uxr_stream_id>
 801045c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010460:	3520      	adds	r5, #32
 8010462:	9001      	str	r0, [sp, #4]
 8010464:	e00c      	b.n	8010480 <uxr_flash_output_streams+0x90>
 8010466:	9b02      	ldr	r3, [sp, #8]
 8010468:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801046c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010470:	f000 feb6 	bl	80111e0 <uxr_stamp_session_header>
 8010474:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010476:	9a03      	ldr	r2, [sp, #12]
 8010478:	9902      	ldr	r1, [sp, #8]
 801047a:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801047e:	47d0      	blx	sl
 8010480:	4643      	mov	r3, r8
 8010482:	463a      	mov	r2, r7
 8010484:	4631      	mov	r1, r6
 8010486:	4628      	mov	r0, r5
 8010488:	f006 fc1c 	bl	8016cc4 <uxr_prepare_next_reliable_buffer_to_send>
 801048c:	4603      	mov	r3, r0
 801048e:	4620      	mov	r0, r4
 8010490:	2b00      	cmp	r3, #0
 8010492:	d1e8      	bne.n	8010466 <uxr_flash_output_streams+0x76>
 8010494:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010498:	f109 0901 	add.w	r9, r9, #1
 801049c:	fa5f f089 	uxtb.w	r0, r9
 80104a0:	4283      	cmp	r3, r0
 80104a2:	d8d5      	bhi.n	8010450 <uxr_flash_output_streams+0x60>
 80104a4:	b004      	add	sp, #16
 80104a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104aa:	9b02      	ldr	r3, [sp, #8]
 80104ac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80104b0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80104b4:	4620      	mov	r0, r4
 80104b6:	f000 fe93 	bl	80111e0 <uxr_stamp_session_header>
 80104ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80104bc:	9a03      	ldr	r2, [sp, #12]
 80104be:	9902      	ldr	r1, [sp, #8]
 80104c0:	e9d3 0500 	ldrd	r0, r5, [r3]
 80104c4:	47a8      	blx	r5
 80104c6:	f109 0901 	add.w	r9, r9, #1
 80104ca:	7e23      	ldrb	r3, [r4, #24]
 80104cc:	fa5f f089 	uxtb.w	r0, r9
 80104d0:	4283      	cmp	r3, r0
 80104d2:	d89a      	bhi.n	801040a <uxr_flash_output_streams+0x1a>
 80104d4:	e7b2      	b.n	801043c <uxr_flash_output_streams+0x4c>
 80104d6:	bf00      	nop

080104d8 <read_submessage_info>:
 80104d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104dc:	460d      	mov	r5, r1
 80104de:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80104e2:	4669      	mov	r1, sp
 80104e4:	4607      	mov	r7, r0
 80104e6:	4628      	mov	r0, r5
 80104e8:	f002 f80c 	bl	8012504 <uxr_deserialize_BaseObjectReply>
 80104ec:	a902      	add	r1, sp, #8
 80104ee:	4604      	mov	r4, r0
 80104f0:	4628      	mov	r0, r5
 80104f2:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80104f6:	f7fe fad3 	bl	800eaa0 <ucdr_deserialize_bool>
 80104fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80104fe:	4004      	ands	r4, r0
 8010500:	b2e4      	uxtb	r4, r4
 8010502:	b95b      	cbnz	r3, 801051c <read_submessage_info+0x44>
 8010504:	a987      	add	r1, sp, #540	; 0x21c
 8010506:	4628      	mov	r0, r5
 8010508:	f7fe faca 	bl	800eaa0 <ucdr_deserialize_bool>
 801050c:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8010510:	4606      	mov	r6, r0
 8010512:	b94b      	cbnz	r3, 8010528 <read_submessage_info+0x50>
 8010514:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8010518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801051c:	a903      	add	r1, sp, #12
 801051e:	4628      	mov	r0, r5
 8010520:	f001 fe7e 	bl	8012220 <uxr_deserialize_ObjectVariant>
 8010524:	4004      	ands	r4, r0
 8010526:	e7ed      	b.n	8010504 <read_submessage_info+0x2c>
 8010528:	a988      	add	r1, sp, #544	; 0x220
 801052a:	4628      	mov	r0, r5
 801052c:	f7fe fae8 	bl	800eb00 <ucdr_deserialize_uint8_t>
 8010530:	4234      	tst	r4, r6
 8010532:	d0ef      	beq.n	8010514 <read_submessage_info+0x3c>
 8010534:	2800      	cmp	r0, #0
 8010536:	d0ed      	beq.n	8010514 <read_submessage_info+0x3c>
 8010538:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 801053c:	2b0d      	cmp	r3, #13
 801053e:	d1e9      	bne.n	8010514 <read_submessage_info+0x3c>
 8010540:	4628      	mov	r0, r5
 8010542:	a98a      	add	r1, sp, #552	; 0x228
 8010544:	f7ff f882 	bl	800f64c <ucdr_deserialize_int16_t>
 8010548:	b140      	cbz	r0, 801055c <read_submessage_info+0x84>
 801054a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801054e:	2b00      	cmp	r3, #0
 8010550:	dd07      	ble.n	8010562 <read_submessage_info+0x8a>
 8010552:	f1b8 0f00 	cmp.w	r8, #0
 8010556:	bf14      	ite	ne
 8010558:	2001      	movne	r0, #1
 801055a:	2002      	moveq	r0, #2
 801055c:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 8010560:	e7d8      	b.n	8010514 <read_submessage_info+0x3c>
 8010562:	2000      	movs	r0, #0
 8010564:	e7fa      	b.n	801055c <read_submessage_info+0x84>
 8010566:	bf00      	nop

08010568 <read_submessage_list>:
 8010568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801056c:	b098      	sub	sp, #96	; 0x60
 801056e:	f8df 9304 	ldr.w	r9, [pc, #772]	; 8010874 <read_submessage_list+0x30c>
 8010572:	920b      	str	r2, [sp, #44]	; 0x2c
 8010574:	4604      	mov	r4, r0
 8010576:	4688      	mov	r8, r1
 8010578:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 801057c:	aa0e      	add	r2, sp, #56	; 0x38
 801057e:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8010582:	4640      	mov	r0, r8
 8010584:	f001 f810 	bl	80115a8 <uxr_read_submessage_header>
 8010588:	2800      	cmp	r0, #0
 801058a:	f000 813d 	beq.w	8010808 <read_submessage_list+0x2a0>
 801058e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8010592:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8010596:	3b02      	subs	r3, #2
 8010598:	2b0d      	cmp	r3, #13
 801059a:	d8ed      	bhi.n	8010578 <read_submessage_list+0x10>
 801059c:	a101      	add	r1, pc, #4	; (adr r1, 80105a4 <read_submessage_list+0x3c>)
 801059e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105a2:	bf00      	nop
 80105a4:	080107ff 	.word	0x080107ff
 80105a8:	08010579 	.word	0x08010579
 80105ac:	080107ef 	.word	0x080107ef
 80105b0:	08010793 	.word	0x08010793
 80105b4:	08010789 	.word	0x08010789
 80105b8:	08010579 	.word	0x08010579
 80105bc:	08010579 	.word	0x08010579
 80105c0:	080106eb 	.word	0x080106eb
 80105c4:	0801067d 	.word	0x0801067d
 80105c8:	0801063b 	.word	0x0801063b
 80105cc:	08010579 	.word	0x08010579
 80105d0:	08010579 	.word	0x08010579
 80105d4:	08010579 	.word	0x08010579
 80105d8:	080105dd 	.word	0x080105dd
 80105dc:	a912      	add	r1, sp, #72	; 0x48
 80105de:	4640      	mov	r0, r8
 80105e0:	f002 f9bc 	bl	801295c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80105e4:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 80105e8:	2d00      	cmp	r5, #0
 80105ea:	f000 8115 	beq.w	8010818 <read_submessage_list+0x2b0>
 80105ee:	f001 f823 	bl	8011638 <uxr_nanos>
 80105f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80105f4:	460b      	mov	r3, r1
 80105f6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80105f8:	2700      	movs	r7, #0
 80105fa:	fbc9 6701 	smlal	r6, r7, r9, r1
 80105fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010602:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010604:	4602      	mov	r2, r0
 8010606:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010608:	460e      	mov	r6, r1
 801060a:	2700      	movs	r7, #0
 801060c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8010610:	9106      	str	r1, [sp, #24]
 8010612:	fbc9 6700 	smlal	r6, r7, r9, r0
 8010616:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010618:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801061c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801061e:	2700      	movs	r7, #0
 8010620:	4608      	mov	r0, r1
 8010622:	4639      	mov	r1, r7
 8010624:	fbc9 0106 	smlal	r0, r1, r9, r6
 8010628:	e9cd 0100 	strd	r0, r1, [sp]
 801062c:	4620      	mov	r0, r4
 801062e:	47a8      	blx	r5
 8010630:	f04f 0301 	mov.w	r3, #1
 8010634:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8010638:	e79e      	b.n	8010578 <read_submessage_list+0x10>
 801063a:	a912      	add	r1, sp, #72	; 0x48
 801063c:	4640      	mov	r0, r8
 801063e:	f002 f97b 	bl	8012938 <uxr_deserialize_HEARTBEAT_Payload>
 8010642:	2100      	movs	r1, #0
 8010644:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8010648:	f000 fe84 	bl	8011354 <uxr_stream_id_from_raw>
 801064c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010650:	4603      	mov	r3, r0
 8010652:	4629      	mov	r1, r5
 8010654:	f104 0008 	add.w	r0, r4, #8
 8010658:	9311      	str	r3, [sp, #68]	; 0x44
 801065a:	f000 ff69 	bl	8011530 <uxr_get_input_reliable_stream>
 801065e:	2800      	cmp	r0, #0
 8010660:	d08a      	beq.n	8010578 <read_submessage_list+0x10>
 8010662:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8010666:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 801066a:	f006 f88f 	bl	801678c <uxr_process_heartbeat>
 801066e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8010672:	462a      	mov	r2, r5
 8010674:	4620      	mov	r0, r4
 8010676:	f7ff fdf5 	bl	8010264 <write_submessage_acknack.isra.0>
 801067a:	e77d      	b.n	8010578 <read_submessage_list+0x10>
 801067c:	a912      	add	r1, sp, #72	; 0x48
 801067e:	4640      	mov	r0, r8
 8010680:	f002 f932 	bl	80128e8 <uxr_deserialize_ACKNACK_Payload>
 8010684:	2100      	movs	r1, #0
 8010686:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801068a:	f000 fe63 	bl	8011354 <uxr_stream_id_from_raw>
 801068e:	4603      	mov	r3, r0
 8010690:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010694:	f104 0008 	add.w	r0, r4, #8
 8010698:	930f      	str	r3, [sp, #60]	; 0x3c
 801069a:	f000 ff33 	bl	8011504 <uxr_get_output_reliable_stream>
 801069e:	4605      	mov	r5, r0
 80106a0:	2800      	cmp	r0, #0
 80106a2:	f43f af69 	beq.w	8010578 <read_submessage_list+0x10>
 80106a6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80106aa:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 80106ae:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80106b2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80106b6:	b289      	uxth	r1, r1
 80106b8:	f006 fbac 	bl	8016e14 <uxr_process_acknack>
 80106bc:	4628      	mov	r0, r5
 80106be:	f006 fb6f 	bl	8016da0 <uxr_begin_output_nack_buffer_it>
 80106c2:	af10      	add	r7, sp, #64	; 0x40
 80106c4:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 80106c8:	e005      	b.n	80106d6 <read_submessage_list+0x16e>
 80106ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80106cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80106ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 80106d0:	e9d3 0600 	ldrd	r0, r6, [r3]
 80106d4:	47b0      	blx	r6
 80106d6:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 80106da:	aa11      	add	r2, sp, #68	; 0x44
 80106dc:	4639      	mov	r1, r7
 80106de:	4628      	mov	r0, r5
 80106e0:	f006 fb60 	bl	8016da4 <uxr_next_reliable_nack_buffer_to_send>
 80106e4:	2800      	cmp	r0, #0
 80106e6:	d1f0      	bne.n	80106ca <read_submessage_list+0x162>
 80106e8:	e746      	b.n	8010578 <read_submessage_list+0x10>
 80106ea:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80106ee:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 80106f2:	af10      	add	r7, sp, #64	; 0x40
 80106f4:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80106f8:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 80106fc:	4639      	mov	r1, r7
 80106fe:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8010702:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 8010706:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801070a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 801070e:	4640      	mov	r0, r8
 8010710:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8010714:	f001 fe32 	bl	801237c <uxr_deserialize_BaseObjectRequest>
 8010718:	4638      	mov	r0, r7
 801071a:	a911      	add	r1, sp, #68	; 0x44
 801071c:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8010720:	f000 fddc 	bl	80112dc <uxr_parse_base_object_request>
 8010724:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8010728:	9911      	ldr	r1, [sp, #68]	; 0x44
 801072a:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 801072e:	9112      	str	r1, [sp, #72]	; 0x48
 8010730:	3d04      	subs	r5, #4
 8010732:	f006 060e 	and.w	r6, r6, #14
 8010736:	b2ad      	uxth	r5, r5
 8010738:	f1ba 0f00 	cmp.w	sl, #0
 801073c:	d006      	beq.n	801074c <read_submessage_list+0x1e4>
 801073e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	463a      	mov	r2, r7
 8010746:	2300      	movs	r3, #0
 8010748:	4620      	mov	r0, r4
 801074a:	47d0      	blx	sl
 801074c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801074e:	b168      	cbz	r0, 801076c <read_submessage_list+0x204>
 8010750:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8010752:	2300      	movs	r3, #0
 8010754:	3902      	subs	r1, #2
 8010756:	e002      	b.n	801075e <read_submessage_list+0x1f6>
 8010758:	3301      	adds	r3, #1
 801075a:	4283      	cmp	r3, r0
 801075c:	d006      	beq.n	801076c <read_submessage_list+0x204>
 801075e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8010762:	42ba      	cmp	r2, r7
 8010764:	d1f8      	bne.n	8010758 <read_submessage_list+0x1f0>
 8010766:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8010768:	2100      	movs	r1, #0
 801076a:	54d1      	strb	r1, [r2, r3]
 801076c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801076e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010770:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8010774:	9302      	str	r3, [sp, #8]
 8010776:	e9cd 1000 	strd	r1, r0, [sp]
 801077a:	4633      	mov	r3, r6
 801077c:	462a      	mov	r2, r5
 801077e:	4641      	mov	r1, r8
 8010780:	4620      	mov	r0, r4
 8010782:	f7ff fc57 	bl	8010034 <read_submessage_format>
 8010786:	e6f7      	b.n	8010578 <read_submessage_list+0x10>
 8010788:	4641      	mov	r1, r8
 801078a:	4620      	mov	r0, r4
 801078c:	f7ff fea4 	bl	80104d8 <read_submessage_info>
 8010790:	e6f2      	b.n	8010578 <read_submessage_list+0x10>
 8010792:	2a00      	cmp	r2, #0
 8010794:	d03b      	beq.n	801080e <read_submessage_list+0x2a6>
 8010796:	a912      	add	r1, sp, #72	; 0x48
 8010798:	4640      	mov	r0, r8
 801079a:	f002 f801 	bl	80127a0 <uxr_deserialize_STATUS_Payload>
 801079e:	a910      	add	r1, sp, #64	; 0x40
 80107a0:	aa0f      	add	r2, sp, #60	; 0x3c
 80107a2:	a812      	add	r0, sp, #72	; 0x48
 80107a4:	f000 fd9a 	bl	80112dc <uxr_parse_base_object_request>
 80107a8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80107ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 80107ae:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 80107b2:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80107b6:	9111      	str	r1, [sp, #68]	; 0x44
 80107b8:	b135      	cbz	r5, 80107c8 <read_submessage_list+0x260>
 80107ba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80107be:	9300      	str	r3, [sp, #0]
 80107c0:	4632      	mov	r2, r6
 80107c2:	463b      	mov	r3, r7
 80107c4:	4620      	mov	r0, r4
 80107c6:	47a8      	blx	r5
 80107c8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	f43f aed4 	beq.w	8010578 <read_submessage_list+0x10>
 80107d0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80107d2:	2100      	movs	r1, #0
 80107d4:	3802      	subs	r0, #2
 80107d6:	e003      	b.n	80107e0 <read_submessage_list+0x278>
 80107d8:	3101      	adds	r1, #1
 80107da:	4299      	cmp	r1, r3
 80107dc:	f43f aecc 	beq.w	8010578 <read_submessage_list+0x10>
 80107e0:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 80107e4:	42b2      	cmp	r2, r6
 80107e6:	d1f7      	bne.n	80107d8 <read_submessage_list+0x270>
 80107e8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80107ea:	545f      	strb	r7, [r3, r1]
 80107ec:	e6c4      	b.n	8010578 <read_submessage_list+0x10>
 80107ee:	2a00      	cmp	r2, #0
 80107f0:	f47f aec2 	bne.w	8010578 <read_submessage_list+0x10>
 80107f4:	4641      	mov	r1, r8
 80107f6:	4620      	mov	r0, r4
 80107f8:	f000 fcb4 	bl	8011164 <uxr_read_create_session_status>
 80107fc:	e6bc      	b.n	8010578 <read_submessage_list+0x10>
 80107fe:	4641      	mov	r1, r8
 8010800:	4620      	mov	r0, r4
 8010802:	f7ff fcf9 	bl	80101f8 <read_submessage_get_info>
 8010806:	e6b7      	b.n	8010578 <read_submessage_list+0x10>
 8010808:	b018      	add	sp, #96	; 0x60
 801080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801080e:	4641      	mov	r1, r8
 8010810:	4620      	mov	r0, r4
 8010812:	f000 fcb3 	bl	801117c <uxr_read_delete_session_status>
 8010816:	e6af      	b.n	8010578 <read_submessage_list+0x10>
 8010818:	f000 ff0e 	bl	8011638 <uxr_nanos>
 801081c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801081e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010820:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010822:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8010824:	2700      	movs	r7, #0
 8010826:	fbc9 6703 	smlal	r6, r7, r9, r3
 801082a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801082c:	eb16 0c00 	adds.w	ip, r6, r0
 8010830:	4618      	mov	r0, r3
 8010832:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010834:	eb47 0e01 	adc.w	lr, r7, r1
 8010838:	461e      	mov	r6, r3
 801083a:	2100      	movs	r1, #0
 801083c:	2700      	movs	r7, #0
 801083e:	fbc9 0105 	smlal	r0, r1, r9, r5
 8010842:	fbc9 6702 	smlal	r6, r7, r9, r2
 8010846:	1983      	adds	r3, r0, r6
 8010848:	eb41 0207 	adc.w	r2, r1, r7
 801084c:	ebbc 0303 	subs.w	r3, ip, r3
 8010850:	9308      	str	r3, [sp, #32]
 8010852:	eb6e 0302 	sbc.w	r3, lr, r2
 8010856:	9309      	str	r3, [sp, #36]	; 0x24
 8010858:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801085c:	0fd3      	lsrs	r3, r2, #31
 801085e:	18c9      	adds	r1, r1, r3
 8010860:	f142 0200 	adc.w	r2, r2, #0
 8010864:	084b      	lsrs	r3, r1, #1
 8010866:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 801086a:	1052      	asrs	r2, r2, #1
 801086c:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8010870:	e6de      	b.n	8010630 <read_submessage_list+0xc8>
 8010872:	bf00      	nop
 8010874:	3b9aca00 	.word	0x3b9aca00

08010878 <listen_message_reliably>:
 8010878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801087c:	1e0b      	subs	r3, r1, #0
 801087e:	b09d      	sub	sp, #116	; 0x74
 8010880:	bfb8      	it	lt
 8010882:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8010886:	9305      	str	r3, [sp, #20]
 8010888:	4607      	mov	r7, r0
 801088a:	f000 feb9 	bl	8011600 <uxr_millis>
 801088e:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8010892:	4681      	mov	r9, r0
 8010894:	2a00      	cmp	r2, #0
 8010896:	f000 8095 	beq.w	80109c4 <listen_message_reliably+0x14c>
 801089a:	2600      	movs	r6, #0
 801089c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108a0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80108a4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80108a8:	4630      	mov	r0, r6
 80108aa:	4688      	mov	r8, r1
 80108ac:	46ca      	mov	sl, r9
 80108ae:	e00f      	b.n	80108d0 <listen_message_reliably+0x58>
 80108b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80108b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80108b8:	42a2      	cmp	r2, r4
 80108ba:	eb73 0105 	sbcs.w	r1, r3, r5
 80108be:	bfb8      	it	lt
 80108c0:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 80108c4:	3601      	adds	r6, #1
 80108c6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80108ca:	b2f0      	uxtb	r0, r6
 80108cc:	4283      	cmp	r3, r0
 80108ce:	d951      	bls.n	8010974 <listen_message_reliably+0xfc>
 80108d0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80108d4:	2201      	movs	r2, #1
 80108d6:	2102      	movs	r1, #2
 80108d8:	f000 fd12 	bl	8011300 <uxr_stream_id>
 80108dc:	00e4      	lsls	r4, r4, #3
 80108de:	f104 0520 	add.w	r5, r4, #32
 80108e2:	443d      	add	r5, r7
 80108e4:	4601      	mov	r1, r0
 80108e6:	4643      	mov	r3, r8
 80108e8:	4652      	mov	r2, sl
 80108ea:	4628      	mov	r0, r5
 80108ec:	9109      	str	r1, [sp, #36]	; 0x24
 80108ee:	f006 fa2b 	bl	8016d48 <uxr_update_output_stream_heartbeat_timestamp>
 80108f2:	193b      	adds	r3, r7, r4
 80108f4:	2800      	cmp	r0, #0
 80108f6:	d0db      	beq.n	80108b0 <listen_message_reliably+0x38>
 80108f8:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80108fc:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8010900:	4638      	mov	r0, r7
 8010902:	f000 fcc5 	bl	8011290 <uxr_session_header_offset>
 8010906:	3501      	adds	r5, #1
 8010908:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 801090c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010910:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8010914:	9000      	str	r0, [sp, #0]
 8010916:	2300      	movs	r3, #0
 8010918:	4658      	mov	r0, fp
 801091a:	2211      	movs	r2, #17
 801091c:	a90c      	add	r1, sp, #48	; 0x30
 801091e:	f7ff f871 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 8010922:	2300      	movs	r3, #0
 8010924:	2205      	movs	r2, #5
 8010926:	210b      	movs	r1, #11
 8010928:	4658      	mov	r0, fp
 801092a:	f000 fe23 	bl	8011574 <uxr_buffer_submessage_header>
 801092e:	8968      	ldrh	r0, [r5, #10]
 8010930:	2101      	movs	r1, #1
 8010932:	f006 fac7 	bl	8016ec4 <uxr_seq_num_add>
 8010936:	892a      	ldrh	r2, [r5, #8]
 8010938:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801093c:	4603      	mov	r3, r0
 801093e:	a90a      	add	r1, sp, #40	; 0x28
 8010940:	4658      	mov	r0, fp
 8010942:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8010946:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 801094a:	f001 ffe1 	bl	8012910 <uxr_serialize_HEARTBEAT_Payload>
 801094e:	2200      	movs	r2, #0
 8010950:	4611      	mov	r1, r2
 8010952:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010954:	4638      	mov	r0, r7
 8010956:	f000 fc43 	bl	80111e0 <uxr_stamp_session_header>
 801095a:	4658      	mov	r0, fp
 801095c:	f7ff f890 	bl	800fa80 <ucdr_buffer_length>
 8010960:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010962:	4602      	mov	r2, r0
 8010964:	a90c      	add	r1, sp, #48	; 0x30
 8010966:	e9d3 0500 	ldrd	r0, r5, [r3]
 801096a:	443c      	add	r4, r7
 801096c:	47a8      	blx	r5
 801096e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8010972:	e79f      	b.n	80108b4 <listen_message_reliably+0x3c>
 8010974:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8010978:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801097c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010980:	4294      	cmp	r4, r2
 8010982:	bf08      	it	eq
 8010984:	428b      	cmpeq	r3, r1
 8010986:	d01d      	beq.n	80109c4 <listen_message_reliably+0x14c>
 8010988:	eba3 030a 	sub.w	r3, r3, sl
 801098c:	9905      	ldr	r1, [sp, #20]
 801098e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010990:	2b00      	cmp	r3, #0
 8010992:	bf08      	it	eq
 8010994:	2301      	moveq	r3, #1
 8010996:	4299      	cmp	r1, r3
 8010998:	bfa8      	it	ge
 801099a:	4619      	movge	r1, r3
 801099c:	6894      	ldr	r4, [r2, #8]
 801099e:	6810      	ldr	r0, [r2, #0]
 80109a0:	4689      	mov	r9, r1
 80109a2:	460b      	mov	r3, r1
 80109a4:	aa08      	add	r2, sp, #32
 80109a6:	a907      	add	r1, sp, #28
 80109a8:	47a0      	blx	r4
 80109aa:	b968      	cbnz	r0, 80109c8 <listen_message_reliably+0x150>
 80109ac:	9b05      	ldr	r3, [sp, #20]
 80109ae:	eba3 0309 	sub.w	r3, r3, r9
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	9305      	str	r3, [sp, #20]
 80109b6:	f73f af68 	bgt.w	801088a <listen_message_reliably+0x12>
 80109ba:	4604      	mov	r4, r0
 80109bc:	4620      	mov	r0, r4
 80109be:	b01d      	add	sp, #116	; 0x74
 80109c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109c4:	9b05      	ldr	r3, [sp, #20]
 80109c6:	e7e1      	b.n	801098c <listen_message_reliably+0x114>
 80109c8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80109cc:	4604      	mov	r4, r0
 80109ce:	a80c      	add	r0, sp, #48	; 0x30
 80109d0:	f7ff f82a 	bl	800fa28 <ucdr_init_buffer>
 80109d4:	2500      	movs	r5, #0
 80109d6:	a90c      	add	r1, sp, #48	; 0x30
 80109d8:	f10d 031a 	add.w	r3, sp, #26
 80109dc:	aa06      	add	r2, sp, #24
 80109de:	4638      	mov	r0, r7
 80109e0:	f88d 5018 	strb.w	r5, [sp, #24]
 80109e4:	f000 fc12 	bl	801120c <uxr_read_session_header>
 80109e8:	b918      	cbnz	r0, 80109f2 <listen_message_reliably+0x17a>
 80109ea:	4620      	mov	r0, r4
 80109ec:	b01d      	add	sp, #116	; 0x74
 80109ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f2:	4629      	mov	r1, r5
 80109f4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80109f8:	f000 fcac 	bl	8011354 <uxr_stream_id_from_raw>
 80109fc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010a00:	2e01      	cmp	r6, #1
 8010a02:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8010a06:	900a      	str	r0, [sp, #40]	; 0x28
 8010a08:	fa5f fa80 	uxtb.w	sl, r0
 8010a0c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010a10:	d04b      	beq.n	8010aaa <listen_message_reliably+0x232>
 8010a12:	2e02      	cmp	r6, #2
 8010a14:	d00f      	beq.n	8010a36 <listen_message_reliably+0x1be>
 8010a16:	2e00      	cmp	r6, #0
 8010a18:	d1e7      	bne.n	80109ea <listen_message_reliably+0x172>
 8010a1a:	4631      	mov	r1, r6
 8010a1c:	4630      	mov	r0, r6
 8010a1e:	f000 fc99 	bl	8011354 <uxr_stream_id_from_raw>
 8010a22:	a90c      	add	r1, sp, #48	; 0x30
 8010a24:	4602      	mov	r2, r0
 8010a26:	4638      	mov	r0, r7
 8010a28:	920a      	str	r2, [sp, #40]	; 0x28
 8010a2a:	f7ff fd9d 	bl	8010568 <read_submessage_list>
 8010a2e:	4620      	mov	r0, r4
 8010a30:	b01d      	add	sp, #116	; 0x74
 8010a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a36:	4629      	mov	r1, r5
 8010a38:	f107 0008 	add.w	r0, r7, #8
 8010a3c:	f000 fd78 	bl	8011530 <uxr_get_input_reliable_stream>
 8010a40:	4680      	mov	r8, r0
 8010a42:	b348      	cbz	r0, 8010a98 <listen_message_reliably+0x220>
 8010a44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a46:	9202      	str	r2, [sp, #8]
 8010a48:	a80c      	add	r0, sp, #48	; 0x30
 8010a4a:	f7ff f81d 	bl	800fa88 <ucdr_buffer_remaining>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	f10d 0019 	add.w	r0, sp, #25
 8010a54:	9000      	str	r0, [sp, #0]
 8010a56:	9a02      	ldr	r2, [sp, #8]
 8010a58:	4649      	mov	r1, r9
 8010a5a:	4640      	mov	r0, r8
 8010a5c:	f005 fd98 	bl	8016590 <uxr_receive_reliable_message>
 8010a60:	b1d0      	cbz	r0, 8010a98 <listen_message_reliably+0x220>
 8010a62:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d037      	beq.n	8010ada <listen_message_reliably+0x262>
 8010a6a:	ae14      	add	r6, sp, #80	; 0x50
 8010a6c:	f04f 0902 	mov.w	r9, #2
 8010a70:	e008      	b.n	8010a84 <listen_message_reliably+0x20c>
 8010a72:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010a76:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010a7a:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8010a7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a80:	f7ff fd72 	bl	8010568 <read_submessage_list>
 8010a84:	4631      	mov	r1, r6
 8010a86:	2204      	movs	r2, #4
 8010a88:	4640      	mov	r0, r8
 8010a8a:	f005 fe01 	bl	8016690 <uxr_next_input_reliable_buffer_available>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	4631      	mov	r1, r6
 8010a92:	4638      	mov	r0, r7
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d1ec      	bne.n	8010a72 <listen_message_reliably+0x1fa>
 8010a98:	4638      	mov	r0, r7
 8010a9a:	462a      	mov	r2, r5
 8010a9c:	4651      	mov	r1, sl
 8010a9e:	f7ff fbe1 	bl	8010264 <write_submessage_acknack.isra.0>
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	b01d      	add	sp, #116	; 0x74
 8010aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aaa:	4629      	mov	r1, r5
 8010aac:	f107 0008 	add.w	r0, r7, #8
 8010ab0:	f000 fd34 	bl	801151c <uxr_get_input_best_effort_stream>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	d098      	beq.n	80109ea <listen_message_reliably+0x172>
 8010ab8:	4649      	mov	r1, r9
 8010aba:	f005 fce5 	bl	8016488 <uxr_receive_best_effort_message>
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	d093      	beq.n	80109ea <listen_message_reliably+0x172>
 8010ac2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010ac6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010aca:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ad0:	a90c      	add	r1, sp, #48	; 0x30
 8010ad2:	4638      	mov	r0, r7
 8010ad4:	f7ff fd48 	bl	8010568 <read_submessage_list>
 8010ad8:	e787      	b.n	80109ea <listen_message_reliably+0x172>
 8010ada:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010ade:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010ae2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ae8:	a90c      	add	r1, sp, #48	; 0x30
 8010aea:	4638      	mov	r0, r7
 8010aec:	f7ff fd3c 	bl	8010568 <read_submessage_list>
 8010af0:	e7bb      	b.n	8010a6a <listen_message_reliably+0x1f2>
 8010af2:	bf00      	nop

08010af4 <uxr_run_session_timeout>:
 8010af4:	b570      	push	{r4, r5, r6, lr}
 8010af6:	4604      	mov	r4, r0
 8010af8:	460d      	mov	r5, r1
 8010afa:	f000 fd81 	bl	8011600 <uxr_millis>
 8010afe:	4606      	mov	r6, r0
 8010b00:	4620      	mov	r0, r4
 8010b02:	f7ff fc75 	bl	80103f0 <uxr_flash_output_streams>
 8010b06:	4629      	mov	r1, r5
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f7ff feb5 	bl	8010878 <listen_message_reliably>
 8010b0e:	f000 fd77 	bl	8011600 <uxr_millis>
 8010b12:	1b83      	subs	r3, r0, r6
 8010b14:	1ae9      	subs	r1, r5, r3
 8010b16:	2900      	cmp	r1, #0
 8010b18:	dcf6      	bgt.n	8010b08 <uxr_run_session_timeout+0x14>
 8010b1a:	f104 0008 	add.w	r0, r4, #8
 8010b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b22:	f000 bd11 	b.w	8011548 <uxr_output_streams_confirmed>
 8010b26:	bf00      	nop

08010b28 <uxr_run_session_until_data>:
 8010b28:	b570      	push	{r4, r5, r6, lr}
 8010b2a:	4604      	mov	r4, r0
 8010b2c:	460d      	mov	r5, r1
 8010b2e:	f000 fd67 	bl	8011600 <uxr_millis>
 8010b32:	4606      	mov	r6, r0
 8010b34:	4620      	mov	r0, r4
 8010b36:	f7ff fc5b 	bl	80103f0 <uxr_flash_output_streams>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8010b40:	4629      	mov	r1, r5
 8010b42:	e005      	b.n	8010b50 <uxr_run_session_until_data+0x28>
 8010b44:	f000 fd5c 	bl	8011600 <uxr_millis>
 8010b48:	1b83      	subs	r3, r0, r6
 8010b4a:	1ae9      	subs	r1, r5, r3
 8010b4c:	2900      	cmp	r1, #0
 8010b4e:	dd07      	ble.n	8010b60 <uxr_run_session_until_data+0x38>
 8010b50:	4620      	mov	r0, r4
 8010b52:	f7ff fe91 	bl	8010878 <listen_message_reliably>
 8010b56:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	d0f2      	beq.n	8010b44 <uxr_run_session_until_data+0x1c>
 8010b5e:	bd70      	pop	{r4, r5, r6, pc}
 8010b60:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8010b64:	bd70      	pop	{r4, r5, r6, pc}
 8010b66:	bf00      	nop

08010b68 <uxr_run_session_until_confirm_delivery>:
 8010b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b6c:	4606      	mov	r6, r0
 8010b6e:	460d      	mov	r5, r1
 8010b70:	f000 fd46 	bl	8011600 <uxr_millis>
 8010b74:	4607      	mov	r7, r0
 8010b76:	4630      	mov	r0, r6
 8010b78:	f7ff fc3a 	bl	80103f0 <uxr_flash_output_streams>
 8010b7c:	2d00      	cmp	r5, #0
 8010b7e:	f106 0808 	add.w	r8, r6, #8
 8010b82:	bfa8      	it	ge
 8010b84:	462c      	movge	r4, r5
 8010b86:	da07      	bge.n	8010b98 <uxr_run_session_until_confirm_delivery+0x30>
 8010b88:	e00e      	b.n	8010ba8 <uxr_run_session_until_confirm_delivery+0x40>
 8010b8a:	f7ff fe75 	bl	8010878 <listen_message_reliably>
 8010b8e:	f000 fd37 	bl	8011600 <uxr_millis>
 8010b92:	1bc3      	subs	r3, r0, r7
 8010b94:	1aec      	subs	r4, r5, r3
 8010b96:	d407      	bmi.n	8010ba8 <uxr_run_session_until_confirm_delivery+0x40>
 8010b98:	4640      	mov	r0, r8
 8010b9a:	f000 fcd5 	bl	8011548 <uxr_output_streams_confirmed>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	4621      	mov	r1, r4
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d0f0      	beq.n	8010b8a <uxr_run_session_until_confirm_delivery+0x22>
 8010ba8:	4640      	mov	r0, r8
 8010baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bae:	f000 bccb 	b.w	8011548 <uxr_output_streams_confirmed>
 8010bb2:	bf00      	nop

08010bb4 <uxr_run_session_until_all_status>:
 8010bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bb8:	9d08      	ldr	r5, [sp, #32]
 8010bba:	460f      	mov	r7, r1
 8010bbc:	4692      	mov	sl, r2
 8010bbe:	461c      	mov	r4, r3
 8010bc0:	4606      	mov	r6, r0
 8010bc2:	f7ff fc15 	bl	80103f0 <uxr_flash_output_streams>
 8010bc6:	b125      	cbz	r5, 8010bd2 <uxr_run_session_until_all_status+0x1e>
 8010bc8:	462a      	mov	r2, r5
 8010bca:	21ff      	movs	r1, #255	; 0xff
 8010bcc:	4620      	mov	r0, r4
 8010bce:	f007 fd23 	bl	8018618 <memset>
 8010bd2:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 8010bd6:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010bd8:	f000 fd12 	bl	8011600 <uxr_millis>
 8010bdc:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8010be0:	f1aa 0a02 	sub.w	sl, sl, #2
 8010be4:	4680      	mov	r8, r0
 8010be6:	4639      	mov	r1, r7
 8010be8:	4630      	mov	r0, r6
 8010bea:	f7ff fe45 	bl	8010878 <listen_message_reliably>
 8010bee:	f000 fd07 	bl	8011600 <uxr_millis>
 8010bf2:	eba0 0008 	sub.w	r0, r0, r8
 8010bf6:	1a39      	subs	r1, r7, r0
 8010bf8:	b33d      	cbz	r5, 8010c4a <uxr_run_session_until_all_status+0x96>
 8010bfa:	46cc      	mov	ip, r9
 8010bfc:	464a      	mov	r2, r9
 8010bfe:	2301      	movs	r3, #1
 8010c00:	e002      	b.n	8010c08 <uxr_run_session_until_all_status+0x54>
 8010c02:	42ab      	cmp	r3, r5
 8010c04:	d20c      	bcs.n	8010c20 <uxr_run_session_until_all_status+0x6c>
 8010c06:	3301      	adds	r3, #1
 8010c08:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8010c0c:	2cff      	cmp	r4, #255	; 0xff
 8010c0e:	d1f8      	bne.n	8010c02 <uxr_run_session_until_all_status+0x4e>
 8010c10:	42ab      	cmp	r3, r5
 8010c12:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8010c16:	d213      	bcs.n	8010c40 <uxr_run_session_until_all_status+0x8c>
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	d0f4      	beq.n	8010c06 <uxr_run_session_until_all_status+0x52>
 8010c1c:	2900      	cmp	r1, #0
 8010c1e:	dce3      	bgt.n	8010be8 <uxr_run_session_until_all_status+0x34>
 8010c20:	2300      	movs	r3, #0
 8010c22:	444d      	add	r5, r9
 8010c24:	67f3      	str	r3, [r6, #124]	; 0x7c
 8010c26:	e001      	b.n	8010c2c <uxr_run_session_until_all_status+0x78>
 8010c28:	2b01      	cmp	r3, #1
 8010c2a:	d812      	bhi.n	8010c52 <uxr_run_session_until_all_status+0x9e>
 8010c2c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010c30:	4565      	cmp	r5, ip
 8010c32:	d1f9      	bne.n	8010c28 <uxr_run_session_until_all_status+0x74>
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	bf8c      	ite	hi
 8010c38:	2000      	movhi	r0, #0
 8010c3a:	2001      	movls	r0, #1
 8010c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c40:	2900      	cmp	r1, #0
 8010c42:	dded      	ble.n	8010c20 <uxr_run_session_until_all_status+0x6c>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	d1cf      	bne.n	8010be8 <uxr_run_session_until_all_status+0x34>
 8010c48:	e7ea      	b.n	8010c20 <uxr_run_session_until_all_status+0x6c>
 8010c4a:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010c4c:	2001      	movs	r0, #1
 8010c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c52:	2000      	movs	r0, #0
 8010c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010c58 <uxr_create_session>:
 8010c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c5c:	ed2d 8b02 	vpush	{d8}
 8010c60:	f100 0808 	add.w	r8, r0, #8
 8010c64:	b0a9      	sub	sp, #164	; 0xa4
 8010c66:	4604      	mov	r4, r0
 8010c68:	4640      	mov	r0, r8
 8010c6a:	f000 fba9 	bl	80113c0 <uxr_reset_stream_storage>
 8010c6e:	4620      	mov	r0, r4
 8010c70:	f000 fb0e 	bl	8011290 <uxr_session_header_offset>
 8010c74:	a909      	add	r1, sp, #36	; 0x24
 8010c76:	9000      	str	r0, [sp, #0]
 8010c78:	2300      	movs	r3, #0
 8010c7a:	a810      	add	r0, sp, #64	; 0x40
 8010c7c:	221c      	movs	r2, #28
 8010c7e:	f7fe fec1 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 8010c82:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010c84:	8a1a      	ldrh	r2, [r3, #16]
 8010c86:	3a04      	subs	r2, #4
 8010c88:	b292      	uxth	r2, r2
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	a910      	add	r1, sp, #64	; 0x40
 8010c8e:	f000 fa23 	bl	80110d8 <uxr_buffer_create_session>
 8010c92:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010c94:	4620      	mov	r0, r4
 8010c96:	f000 fa8f 	bl	80111b8 <uxr_stamp_create_session_header>
 8010c9a:	a810      	add	r0, sp, #64	; 0x40
 8010c9c:	f7fe fef0 	bl	800fa80 <ucdr_buffer_length>
 8010ca0:	23ff      	movs	r3, #255	; 0xff
 8010ca2:	ee08 0a10 	vmov	s16, r0
 8010ca6:	7163      	strb	r3, [r4, #5]
 8010ca8:	f04f 090a 	mov.w	r9, #10
 8010cac:	46c2      	mov	sl, r8
 8010cae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010cb0:	ee18 2a10 	vmov	r2, s16
 8010cb4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010cb8:	a909      	add	r1, sp, #36	; 0x24
 8010cba:	47a8      	blx	r5
 8010cbc:	f000 fca0 	bl	8011600 <uxr_millis>
 8010cc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010cc4:	9002      	str	r0, [sp, #8]
 8010cc6:	e00c      	b.n	8010ce2 <uxr_create_session+0x8a>
 8010cc8:	f000 fc9a 	bl	8011600 <uxr_millis>
 8010ccc:	9b02      	ldr	r3, [sp, #8]
 8010cce:	7962      	ldrb	r2, [r4, #5]
 8010cd0:	1ac0      	subs	r0, r0, r3
 8010cd2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	f340 8094 	ble.w	8010e04 <uxr_create_session+0x1ac>
 8010cdc:	2aff      	cmp	r2, #255	; 0xff
 8010cde:	f040 8097 	bne.w	8010e10 <uxr_create_session+0x1b8>
 8010ce2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010ce4:	a905      	add	r1, sp, #20
 8010ce6:	6895      	ldr	r5, [r2, #8]
 8010ce8:	6810      	ldr	r0, [r2, #0]
 8010cea:	aa06      	add	r2, sp, #24
 8010cec:	47a8      	blx	r5
 8010cee:	2800      	cmp	r0, #0
 8010cf0:	d0ea      	beq.n	8010cc8 <uxr_create_session+0x70>
 8010cf2:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8010cf6:	a818      	add	r0, sp, #96	; 0x60
 8010cf8:	f7fe fe96 	bl	800fa28 <ucdr_init_buffer>
 8010cfc:	2500      	movs	r5, #0
 8010cfe:	f10d 0312 	add.w	r3, sp, #18
 8010d02:	aa04      	add	r2, sp, #16
 8010d04:	a918      	add	r1, sp, #96	; 0x60
 8010d06:	4620      	mov	r0, r4
 8010d08:	f88d 5010 	strb.w	r5, [sp, #16]
 8010d0c:	f000 fa7e 	bl	801120c <uxr_read_session_header>
 8010d10:	2800      	cmp	r0, #0
 8010d12:	d0d9      	beq.n	8010cc8 <uxr_create_session+0x70>
 8010d14:	4629      	mov	r1, r5
 8010d16:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8010d1a:	f000 fb1b 	bl	8011354 <uxr_stream_id_from_raw>
 8010d1e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010d22:	2f01      	cmp	r7, #1
 8010d24:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8010d28:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8010d2c:	fa5f f880 	uxtb.w	r8, r0
 8010d30:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010d34:	d04d      	beq.n	8010dd2 <uxr_create_session+0x17a>
 8010d36:	2f02      	cmp	r7, #2
 8010d38:	d00c      	beq.n	8010d54 <uxr_create_session+0xfc>
 8010d3a:	2f00      	cmp	r7, #0
 8010d3c:	d1c4      	bne.n	8010cc8 <uxr_create_session+0x70>
 8010d3e:	4639      	mov	r1, r7
 8010d40:	4638      	mov	r0, r7
 8010d42:	f000 fb07 	bl	8011354 <uxr_stream_id_from_raw>
 8010d46:	a918      	add	r1, sp, #96	; 0x60
 8010d48:	4602      	mov	r2, r0
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	9208      	str	r2, [sp, #32]
 8010d4e:	f7ff fc0b 	bl	8010568 <read_submessage_list>
 8010d52:	e7b9      	b.n	8010cc8 <uxr_create_session+0x70>
 8010d54:	4629      	mov	r1, r5
 8010d56:	4650      	mov	r0, sl
 8010d58:	f000 fbea 	bl	8011530 <uxr_get_input_reliable_stream>
 8010d5c:	4606      	mov	r6, r0
 8010d5e:	b390      	cbz	r0, 8010dc6 <uxr_create_session+0x16e>
 8010d60:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010d62:	9203      	str	r2, [sp, #12]
 8010d64:	a818      	add	r0, sp, #96	; 0x60
 8010d66:	f7fe fe8f 	bl	800fa88 <ucdr_buffer_remaining>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	f10d 0011 	add.w	r0, sp, #17
 8010d70:	9000      	str	r0, [sp, #0]
 8010d72:	9a03      	ldr	r2, [sp, #12]
 8010d74:	4659      	mov	r1, fp
 8010d76:	4630      	mov	r0, r6
 8010d78:	f005 fc0a 	bl	8016590 <uxr_receive_reliable_message>
 8010d7c:	b318      	cbz	r0, 8010dc6 <uxr_create_session+0x16e>
 8010d7e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8010d82:	b9b3      	cbnz	r3, 8010db2 <uxr_create_session+0x15a>
 8010d84:	f88d 8020 	strb.w	r8, [sp, #32]
 8010d88:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010d8c:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8010d90:	9a08      	ldr	r2, [sp, #32]
 8010d92:	a918      	add	r1, sp, #96	; 0x60
 8010d94:	4620      	mov	r0, r4
 8010d96:	f7ff fbe7 	bl	8010568 <read_submessage_list>
 8010d9a:	e00a      	b.n	8010db2 <uxr_create_session+0x15a>
 8010d9c:	f04f 0302 	mov.w	r3, #2
 8010da0:	f88d 8020 	strb.w	r8, [sp, #32]
 8010da4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010da8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8010dac:	9a08      	ldr	r2, [sp, #32]
 8010dae:	f7ff fbdb 	bl	8010568 <read_submessage_list>
 8010db2:	a920      	add	r1, sp, #128	; 0x80
 8010db4:	2204      	movs	r2, #4
 8010db6:	4630      	mov	r0, r6
 8010db8:	f005 fc6a 	bl	8016690 <uxr_next_input_reliable_buffer_available>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	a920      	add	r1, sp, #128	; 0x80
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d1ea      	bne.n	8010d9c <uxr_create_session+0x144>
 8010dc6:	462a      	mov	r2, r5
 8010dc8:	4641      	mov	r1, r8
 8010dca:	4620      	mov	r0, r4
 8010dcc:	f7ff fa4a 	bl	8010264 <write_submessage_acknack.isra.0>
 8010dd0:	e77a      	b.n	8010cc8 <uxr_create_session+0x70>
 8010dd2:	4629      	mov	r1, r5
 8010dd4:	4650      	mov	r0, sl
 8010dd6:	f000 fba1 	bl	801151c <uxr_get_input_best_effort_stream>
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	f43f af74 	beq.w	8010cc8 <uxr_create_session+0x70>
 8010de0:	4659      	mov	r1, fp
 8010de2:	f005 fb51 	bl	8016488 <uxr_receive_best_effort_message>
 8010de6:	2800      	cmp	r0, #0
 8010de8:	f43f af6e 	beq.w	8010cc8 <uxr_create_session+0x70>
 8010dec:	f88d 8020 	strb.w	r8, [sp, #32]
 8010df0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010df4:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8010df8:	9a08      	ldr	r2, [sp, #32]
 8010dfa:	a918      	add	r1, sp, #96	; 0x60
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f7ff fbb3 	bl	8010568 <read_submessage_list>
 8010e02:	e761      	b.n	8010cc8 <uxr_create_session+0x70>
 8010e04:	f1b9 0901 	subs.w	r9, r9, #1
 8010e08:	d002      	beq.n	8010e10 <uxr_create_session+0x1b8>
 8010e0a:	2aff      	cmp	r2, #255	; 0xff
 8010e0c:	f43f af4f 	beq.w	8010cae <uxr_create_session+0x56>
 8010e10:	b12a      	cbz	r2, 8010e1e <uxr_create_session+0x1c6>
 8010e12:	2000      	movs	r0, #0
 8010e14:	b029      	add	sp, #164	; 0xa4
 8010e16:	ecbd 8b02 	vpop	{d8}
 8010e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e1e:	4650      	mov	r0, sl
 8010e20:	f000 face 	bl	80113c0 <uxr_reset_stream_storage>
 8010e24:	2001      	movs	r0, #1
 8010e26:	b029      	add	sp, #164	; 0xa4
 8010e28:	ecbd 8b02 	vpop	{d8}
 8010e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e30 <wait_session_status>:
 8010e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e34:	4604      	mov	r4, r0
 8010e36:	b09d      	sub	sp, #116	; 0x74
 8010e38:	20ff      	movs	r0, #255	; 0xff
 8010e3a:	7160      	strb	r0, [r4, #5]
 8010e3c:	9304      	str	r3, [sp, #16]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	f000 80b8 	beq.w	8010fb4 <wait_session_status+0x184>
 8010e44:	2300      	movs	r3, #0
 8010e46:	468b      	mov	fp, r1
 8010e48:	4692      	mov	sl, r2
 8010e4a:	9303      	str	r3, [sp, #12]
 8010e4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010e4e:	4652      	mov	r2, sl
 8010e50:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010e54:	4659      	mov	r1, fp
 8010e56:	47a8      	blx	r5
 8010e58:	f000 fbd2 	bl	8011600 <uxr_millis>
 8010e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010e60:	4605      	mov	r5, r0
 8010e62:	e009      	b.n	8010e78 <wait_session_status+0x48>
 8010e64:	f000 fbcc 	bl	8011600 <uxr_millis>
 8010e68:	1b40      	subs	r0, r0, r5
 8010e6a:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	dd42      	ble.n	8010ef8 <wait_session_status+0xc8>
 8010e72:	7960      	ldrb	r0, [r4, #5]
 8010e74:	28ff      	cmp	r0, #255	; 0xff
 8010e76:	d148      	bne.n	8010f0a <wait_session_status+0xda>
 8010e78:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010e7a:	a908      	add	r1, sp, #32
 8010e7c:	6896      	ldr	r6, [r2, #8]
 8010e7e:	6810      	ldr	r0, [r2, #0]
 8010e80:	aa09      	add	r2, sp, #36	; 0x24
 8010e82:	47b0      	blx	r6
 8010e84:	2800      	cmp	r0, #0
 8010e86:	d0ed      	beq.n	8010e64 <wait_session_status+0x34>
 8010e88:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010e8c:	a80c      	add	r0, sp, #48	; 0x30
 8010e8e:	f7fe fdcb 	bl	800fa28 <ucdr_init_buffer>
 8010e92:	2600      	movs	r6, #0
 8010e94:	f10d 031e 	add.w	r3, sp, #30
 8010e98:	aa07      	add	r2, sp, #28
 8010e9a:	a90c      	add	r1, sp, #48	; 0x30
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f88d 601c 	strb.w	r6, [sp, #28]
 8010ea2:	f000 f9b3 	bl	801120c <uxr_read_session_header>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	d0dc      	beq.n	8010e64 <wait_session_status+0x34>
 8010eaa:	4631      	mov	r1, r6
 8010eac:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010eb0:	f000 fa50 	bl	8011354 <uxr_stream_id_from_raw>
 8010eb4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010eb8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010ebc:	9302      	str	r3, [sp, #8]
 8010ebe:	2f01      	cmp	r7, #1
 8010ec0:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8010ec4:	fa5f f880 	uxtb.w	r8, r0
 8010ec8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010ecc:	d058      	beq.n	8010f80 <wait_session_status+0x150>
 8010ece:	2f02      	cmp	r7, #2
 8010ed0:	d021      	beq.n	8010f16 <wait_session_status+0xe6>
 8010ed2:	2f00      	cmp	r7, #0
 8010ed4:	d1c6      	bne.n	8010e64 <wait_session_status+0x34>
 8010ed6:	4639      	mov	r1, r7
 8010ed8:	4638      	mov	r0, r7
 8010eda:	f000 fa3b 	bl	8011354 <uxr_stream_id_from_raw>
 8010ede:	a90c      	add	r1, sp, #48	; 0x30
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	920b      	str	r2, [sp, #44]	; 0x2c
 8010ee6:	f7ff fb3f 	bl	8010568 <read_submessage_list>
 8010eea:	f000 fb89 	bl	8011600 <uxr_millis>
 8010eee:	1b40      	subs	r0, r0, r5
 8010ef0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	dcbc      	bgt.n	8010e72 <wait_session_status+0x42>
 8010ef8:	9b03      	ldr	r3, [sp, #12]
 8010efa:	9a04      	ldr	r2, [sp, #16]
 8010efc:	7960      	ldrb	r0, [r4, #5]
 8010efe:	3301      	adds	r3, #1
 8010f00:	429a      	cmp	r2, r3
 8010f02:	9303      	str	r3, [sp, #12]
 8010f04:	d001      	beq.n	8010f0a <wait_session_status+0xda>
 8010f06:	28ff      	cmp	r0, #255	; 0xff
 8010f08:	d0a0      	beq.n	8010e4c <wait_session_status+0x1c>
 8010f0a:	38ff      	subs	r0, #255	; 0xff
 8010f0c:	bf18      	it	ne
 8010f0e:	2001      	movne	r0, #1
 8010f10:	b01d      	add	sp, #116	; 0x74
 8010f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f16:	4631      	mov	r1, r6
 8010f18:	f104 0008 	add.w	r0, r4, #8
 8010f1c:	f000 fb08 	bl	8011530 <uxr_get_input_reliable_stream>
 8010f20:	4681      	mov	r9, r0
 8010f22:	b338      	cbz	r0, 8010f74 <wait_session_status+0x144>
 8010f24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f26:	9205      	str	r2, [sp, #20]
 8010f28:	a80c      	add	r0, sp, #48	; 0x30
 8010f2a:	f7fe fdad 	bl	800fa88 <ucdr_buffer_remaining>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	f10d 001d 	add.w	r0, sp, #29
 8010f34:	9000      	str	r0, [sp, #0]
 8010f36:	9a05      	ldr	r2, [sp, #20]
 8010f38:	9902      	ldr	r1, [sp, #8]
 8010f3a:	4648      	mov	r0, r9
 8010f3c:	f005 fb28 	bl	8016590 <uxr_receive_reliable_message>
 8010f40:	b1c0      	cbz	r0, 8010f74 <wait_session_status+0x144>
 8010f42:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010f46:	b95b      	cbnz	r3, 8010f60 <wait_session_status+0x130>
 8010f48:	e03c      	b.n	8010fc4 <wait_session_status+0x194>
 8010f4a:	f04f 0302 	mov.w	r3, #2
 8010f4e:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8010f52:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010f56:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8010f5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f5c:	f7ff fb04 	bl	8010568 <read_submessage_list>
 8010f60:	a914      	add	r1, sp, #80	; 0x50
 8010f62:	2204      	movs	r2, #4
 8010f64:	4648      	mov	r0, r9
 8010f66:	f005 fb93 	bl	8016690 <uxr_next_input_reliable_buffer_available>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	a914      	add	r1, sp, #80	; 0x50
 8010f6e:	4620      	mov	r0, r4
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d1ea      	bne.n	8010f4a <wait_session_status+0x11a>
 8010f74:	4632      	mov	r2, r6
 8010f76:	4641      	mov	r1, r8
 8010f78:	4620      	mov	r0, r4
 8010f7a:	f7ff f973 	bl	8010264 <write_submessage_acknack.isra.0>
 8010f7e:	e771      	b.n	8010e64 <wait_session_status+0x34>
 8010f80:	4631      	mov	r1, r6
 8010f82:	f104 0008 	add.w	r0, r4, #8
 8010f86:	f000 fac9 	bl	801151c <uxr_get_input_best_effort_stream>
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	f43f af6a 	beq.w	8010e64 <wait_session_status+0x34>
 8010f90:	9902      	ldr	r1, [sp, #8]
 8010f92:	f005 fa79 	bl	8016488 <uxr_receive_best_effort_message>
 8010f96:	2800      	cmp	r0, #0
 8010f98:	f43f af64 	beq.w	8010e64 <wait_session_status+0x34>
 8010f9c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8010fa0:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010fa4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8010fa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010faa:	a90c      	add	r1, sp, #48	; 0x30
 8010fac:	4620      	mov	r0, r4
 8010fae:	f7ff fadb 	bl	8010568 <read_submessage_list>
 8010fb2:	e757      	b.n	8010e64 <wait_session_status+0x34>
 8010fb4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010fb6:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010fba:	47a0      	blx	r4
 8010fbc:	2001      	movs	r0, #1
 8010fbe:	b01d      	add	sp, #116	; 0x74
 8010fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fc4:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8010fc8:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010fcc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8010fd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010fd2:	a90c      	add	r1, sp, #48	; 0x30
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	f7ff fac7 	bl	8010568 <read_submessage_list>
 8010fda:	e7c1      	b.n	8010f60 <wait_session_status+0x130>

08010fdc <uxr_delete_session_retries>:
 8010fdc:	b530      	push	{r4, r5, lr}
 8010fde:	b08f      	sub	sp, #60	; 0x3c
 8010fe0:	4604      	mov	r4, r0
 8010fe2:	460d      	mov	r5, r1
 8010fe4:	f000 f954 	bl	8011290 <uxr_session_header_offset>
 8010fe8:	2300      	movs	r3, #0
 8010fea:	2210      	movs	r2, #16
 8010fec:	9000      	str	r0, [sp, #0]
 8010fee:	a902      	add	r1, sp, #8
 8010ff0:	a806      	add	r0, sp, #24
 8010ff2:	f7fe fd07 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 8010ff6:	a906      	add	r1, sp, #24
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	f000 f897 	bl	801112c <uxr_buffer_delete_session>
 8010ffe:	2200      	movs	r2, #0
 8011000:	4611      	mov	r1, r2
 8011002:	9b06      	ldr	r3, [sp, #24]
 8011004:	4620      	mov	r0, r4
 8011006:	f000 f8eb 	bl	80111e0 <uxr_stamp_session_header>
 801100a:	a806      	add	r0, sp, #24
 801100c:	f7fe fd38 	bl	800fa80 <ucdr_buffer_length>
 8011010:	462b      	mov	r3, r5
 8011012:	4602      	mov	r2, r0
 8011014:	a902      	add	r1, sp, #8
 8011016:	4620      	mov	r0, r4
 8011018:	f7ff ff0a 	bl	8010e30 <wait_session_status>
 801101c:	b118      	cbz	r0, 8011026 <uxr_delete_session_retries+0x4a>
 801101e:	7960      	ldrb	r0, [r4, #5]
 8011020:	fab0 f080 	clz	r0, r0
 8011024:	0940      	lsrs	r0, r0, #5
 8011026:	b00f      	add	sp, #60	; 0x3c
 8011028:	bd30      	pop	{r4, r5, pc}
 801102a:	bf00      	nop

0801102c <uxr_prepare_stream_to_write_submessage>:
 801102c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011030:	b082      	sub	sp, #8
 8011032:	4682      	mov	sl, r0
 8011034:	4610      	mov	r0, r2
 8011036:	4615      	mov	r5, r2
 8011038:	461e      	mov	r6, r3
 801103a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801103e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8011042:	9101      	str	r1, [sp, #4]
 8011044:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011048:	f000 fad4 	bl	80115f4 <uxr_submessage_padding>
 801104c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011050:	f105 0904 	add.w	r9, r5, #4
 8011054:	2b01      	cmp	r3, #1
 8011056:	4481      	add	r9, r0
 8011058:	d01d      	beq.n	8011096 <uxr_prepare_stream_to_write_submessage+0x6a>
 801105a:	2b02      	cmp	r3, #2
 801105c:	d116      	bne.n	801108c <uxr_prepare_stream_to_write_submessage+0x60>
 801105e:	4621      	mov	r1, r4
 8011060:	f10a 0008 	add.w	r0, sl, #8
 8011064:	f000 fa4e 	bl	8011504 <uxr_get_output_reliable_stream>
 8011068:	4604      	mov	r4, r0
 801106a:	b158      	cbz	r0, 8011084 <uxr_prepare_stream_to_write_submessage+0x58>
 801106c:	4649      	mov	r1, r9
 801106e:	4632      	mov	r2, r6
 8011070:	f005 fcc4 	bl	80169fc <uxr_prepare_reliable_buffer_to_write>
 8011074:	4604      	mov	r4, r0
 8011076:	b12c      	cbz	r4, 8011084 <uxr_prepare_stream_to_write_submessage+0x58>
 8011078:	4643      	mov	r3, r8
 801107a:	b2aa      	uxth	r2, r5
 801107c:	4639      	mov	r1, r7
 801107e:	4630      	mov	r0, r6
 8011080:	f000 fa78 	bl	8011574 <uxr_buffer_submessage_header>
 8011084:	4620      	mov	r0, r4
 8011086:	b002      	add	sp, #8
 8011088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801108c:	2400      	movs	r4, #0
 801108e:	4620      	mov	r0, r4
 8011090:	b002      	add	sp, #8
 8011092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011096:	4621      	mov	r1, r4
 8011098:	f10a 0008 	add.w	r0, sl, #8
 801109c:	f000 fa2a 	bl	80114f4 <uxr_get_output_best_effort_stream>
 80110a0:	4604      	mov	r4, r0
 80110a2:	2800      	cmp	r0, #0
 80110a4:	d0ee      	beq.n	8011084 <uxr_prepare_stream_to_write_submessage+0x58>
 80110a6:	4649      	mov	r1, r9
 80110a8:	4632      	mov	r2, r6
 80110aa:	f005 fbe3 	bl	8016874 <uxr_prepare_best_effort_buffer_to_write>
 80110ae:	4604      	mov	r4, r0
 80110b0:	e7e1      	b.n	8011076 <uxr_prepare_stream_to_write_submessage+0x4a>
 80110b2:	bf00      	nop

080110b4 <uxr_init_session_info>:
 80110b4:	b470      	push	{r4, r5, r6}
 80110b6:	7102      	strb	r2, [r0, #4]
 80110b8:	0e16      	lsrs	r6, r2, #24
 80110ba:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80110be:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80110c2:	23ff      	movs	r3, #255	; 0xff
 80110c4:	2209      	movs	r2, #9
 80110c6:	7046      	strb	r6, [r0, #1]
 80110c8:	7085      	strb	r5, [r0, #2]
 80110ca:	70c4      	strb	r4, [r0, #3]
 80110cc:	7001      	strb	r1, [r0, #0]
 80110ce:	bc70      	pop	{r4, r5, r6}
 80110d0:	80c2      	strh	r2, [r0, #6]
 80110d2:	7143      	strb	r3, [r0, #5]
 80110d4:	4770      	bx	lr
 80110d6:	bf00      	nop

080110d8 <uxr_buffer_create_session>:
 80110d8:	b570      	push	{r4, r5, r6, lr}
 80110da:	b088      	sub	sp, #32
 80110dc:	2300      	movs	r3, #0
 80110de:	4d12      	ldr	r5, [pc, #72]	; (8011128 <uxr_buffer_create_session+0x50>)
 80110e0:	9307      	str	r3, [sp, #28]
 80110e2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80110e6:	7802      	ldrb	r2, [r0, #0]
 80110e8:	9303      	str	r3, [sp, #12]
 80110ea:	460c      	mov	r4, r1
 80110ec:	f88d 200c 	strb.w	r2, [sp, #12]
 80110f0:	2101      	movs	r1, #1
 80110f2:	682a      	ldr	r2, [r5, #0]
 80110f4:	f8d0 6001 	ldr.w	r6, [r0, #1]
 80110f8:	88ad      	ldrh	r5, [r5, #4]
 80110fa:	80c1      	strh	r1, [r0, #6]
 80110fc:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011100:	9200      	str	r2, [sp, #0]
 8011102:	4619      	mov	r1, r3
 8011104:	2210      	movs	r2, #16
 8011106:	4620      	mov	r0, r4
 8011108:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801110c:	9306      	str	r3, [sp, #24]
 801110e:	f88d 300d 	strb.w	r3, [sp, #13]
 8011112:	9602      	str	r6, [sp, #8]
 8011114:	f8ad 5006 	strh.w	r5, [sp, #6]
 8011118:	f000 fa2c 	bl	8011574 <uxr_buffer_submessage_header>
 801111c:	4620      	mov	r0, r4
 801111e:	4669      	mov	r1, sp
 8011120:	f001 fa50 	bl	80125c4 <uxr_serialize_CREATE_CLIENT_Payload>
 8011124:	b008      	add	sp, #32
 8011126:	bd70      	pop	{r4, r5, r6, pc}
 8011128:	080198a8 	.word	0x080198a8

0801112c <uxr_buffer_delete_session>:
 801112c:	b530      	push	{r4, r5, lr}
 801112e:	4b0c      	ldr	r3, [pc, #48]	; (8011160 <uxr_buffer_delete_session+0x34>)
 8011130:	b083      	sub	sp, #12
 8011132:	891b      	ldrh	r3, [r3, #8]
 8011134:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011138:	2202      	movs	r2, #2
 801113a:	460c      	mov	r4, r1
 801113c:	80c2      	strh	r2, [r0, #6]
 801113e:	2300      	movs	r3, #0
 8011140:	2204      	movs	r2, #4
 8011142:	4608      	mov	r0, r1
 8011144:	f44f 7500 	mov.w	r5, #512	; 0x200
 8011148:	2103      	movs	r1, #3
 801114a:	f8ad 5004 	strh.w	r5, [sp, #4]
 801114e:	f000 fa11 	bl	8011574 <uxr_buffer_submessage_header>
 8011152:	4620      	mov	r0, r4
 8011154:	a901      	add	r1, sp, #4
 8011156:	f001 fae3 	bl	8012720 <uxr_serialize_DELETE_Payload>
 801115a:	b003      	add	sp, #12
 801115c:	bd30      	pop	{r4, r5, pc}
 801115e:	bf00      	nop
 8011160:	080198a8 	.word	0x080198a8

08011164 <uxr_read_create_session_status>:
 8011164:	b510      	push	{r4, lr}
 8011166:	b088      	sub	sp, #32
 8011168:	4604      	mov	r4, r0
 801116a:	4608      	mov	r0, r1
 801116c:	a901      	add	r1, sp, #4
 801116e:	f001 fae7 	bl	8012740 <uxr_deserialize_STATUS_AGENT_Payload>
 8011172:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011176:	7163      	strb	r3, [r4, #5]
 8011178:	b008      	add	sp, #32
 801117a:	bd10      	pop	{r4, pc}

0801117c <uxr_read_delete_session_status>:
 801117c:	b510      	push	{r4, lr}
 801117e:	4604      	mov	r4, r0
 8011180:	b084      	sub	sp, #16
 8011182:	4608      	mov	r0, r1
 8011184:	a902      	add	r1, sp, #8
 8011186:	f001 fb0b 	bl	80127a0 <uxr_deserialize_STATUS_Payload>
 801118a:	88e3      	ldrh	r3, [r4, #6]
 801118c:	2b02      	cmp	r3, #2
 801118e:	d001      	beq.n	8011194 <uxr_read_delete_session_status+0x18>
 8011190:	b004      	add	sp, #16
 8011192:	bd10      	pop	{r4, pc}
 8011194:	f10d 000a 	add.w	r0, sp, #10
 8011198:	f7fe fec6 	bl	800ff28 <uxr_object_id_from_raw>
 801119c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80111a0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80111a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	2b02      	cmp	r3, #2
 80111ac:	bf04      	itt	eq
 80111ae:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80111b2:	7163      	strbeq	r3, [r4, #5]
 80111b4:	b004      	add	sp, #16
 80111b6:	bd10      	pop	{r4, pc}

080111b8 <uxr_stamp_create_session_header>:
 80111b8:	b510      	push	{r4, lr}
 80111ba:	4604      	mov	r4, r0
 80111bc:	b08a      	sub	sp, #40	; 0x28
 80111be:	a802      	add	r0, sp, #8
 80111c0:	2208      	movs	r2, #8
 80111c2:	f7fe fc31 	bl	800fa28 <ucdr_init_buffer>
 80111c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111ca:	9400      	str	r4, [sp, #0]
 80111cc:	2300      	movs	r3, #0
 80111ce:	a802      	add	r0, sp, #8
 80111d0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80111d4:	461a      	mov	r2, r3
 80111d6:	f000 fbcb 	bl	8011970 <uxr_serialize_message_header>
 80111da:	b00a      	add	sp, #40	; 0x28
 80111dc:	bd10      	pop	{r4, pc}
 80111de:	bf00      	nop

080111e0 <uxr_stamp_session_header>:
 80111e0:	b570      	push	{r4, r5, r6, lr}
 80111e2:	4604      	mov	r4, r0
 80111e4:	b08c      	sub	sp, #48	; 0x30
 80111e6:	460d      	mov	r5, r1
 80111e8:	4616      	mov	r6, r2
 80111ea:	4619      	mov	r1, r3
 80111ec:	a804      	add	r0, sp, #16
 80111ee:	2208      	movs	r2, #8
 80111f0:	9603      	str	r6, [sp, #12]
 80111f2:	f7fe fc19 	bl	800fa28 <ucdr_init_buffer>
 80111f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111fa:	9b03      	ldr	r3, [sp, #12]
 80111fc:	9400      	str	r4, [sp, #0]
 80111fe:	462a      	mov	r2, r5
 8011200:	a804      	add	r0, sp, #16
 8011202:	f000 fbb5 	bl	8011970 <uxr_serialize_message_header>
 8011206:	b00c      	add	sp, #48	; 0x30
 8011208:	bd70      	pop	{r4, r5, r6, pc}
 801120a:	bf00      	nop

0801120c <uxr_read_session_header>:
 801120c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011210:	4607      	mov	r7, r0
 8011212:	b084      	sub	sp, #16
 8011214:	4608      	mov	r0, r1
 8011216:	460c      	mov	r4, r1
 8011218:	4615      	mov	r5, r2
 801121a:	461e      	mov	r6, r3
 801121c:	f7fe fc34 	bl	800fa88 <ucdr_buffer_remaining>
 8011220:	2808      	cmp	r0, #8
 8011222:	d803      	bhi.n	801122c <uxr_read_session_header+0x20>
 8011224:	2000      	movs	r0, #0
 8011226:	b004      	add	sp, #16
 8011228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801122c:	f10d 080c 	add.w	r8, sp, #12
 8011230:	4633      	mov	r3, r6
 8011232:	462a      	mov	r2, r5
 8011234:	4620      	mov	r0, r4
 8011236:	f8cd 8000 	str.w	r8, [sp]
 801123a:	f10d 010b 	add.w	r1, sp, #11
 801123e:	f000 fbb5 	bl	80119ac <uxr_deserialize_message_header>
 8011242:	783a      	ldrb	r2, [r7, #0]
 8011244:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011248:	4293      	cmp	r3, r2
 801124a:	d1eb      	bne.n	8011224 <uxr_read_session_header+0x18>
 801124c:	061b      	lsls	r3, r3, #24
 801124e:	d41c      	bmi.n	801128a <uxr_read_session_header+0x7e>
 8011250:	f898 2000 	ldrb.w	r2, [r8]
 8011254:	787b      	ldrb	r3, [r7, #1]
 8011256:	429a      	cmp	r2, r3
 8011258:	d003      	beq.n	8011262 <uxr_read_session_header+0x56>
 801125a:	2001      	movs	r0, #1
 801125c:	f080 0001 	eor.w	r0, r0, #1
 8011260:	e7e1      	b.n	8011226 <uxr_read_session_header+0x1a>
 8011262:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011266:	78bb      	ldrb	r3, [r7, #2]
 8011268:	429a      	cmp	r2, r3
 801126a:	f107 0102 	add.w	r1, r7, #2
 801126e:	d1f4      	bne.n	801125a <uxr_read_session_header+0x4e>
 8011270:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011274:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011278:	429a      	cmp	r2, r3
 801127a:	d1ee      	bne.n	801125a <uxr_read_session_header+0x4e>
 801127c:	784b      	ldrb	r3, [r1, #1]
 801127e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011282:	429a      	cmp	r2, r3
 8011284:	d1e9      	bne.n	801125a <uxr_read_session_header+0x4e>
 8011286:	2000      	movs	r0, #0
 8011288:	e7e8      	b.n	801125c <uxr_read_session_header+0x50>
 801128a:	2001      	movs	r0, #1
 801128c:	e7cb      	b.n	8011226 <uxr_read_session_header+0x1a>
 801128e:	bf00      	nop

08011290 <uxr_session_header_offset>:
 8011290:	f990 3000 	ldrsb.w	r3, [r0]
 8011294:	2b00      	cmp	r3, #0
 8011296:	bfac      	ite	ge
 8011298:	2008      	movge	r0, #8
 801129a:	2004      	movlt	r0, #4
 801129c:	4770      	bx	lr
 801129e:	bf00      	nop

080112a0 <uxr_init_base_object_request>:
 80112a0:	b530      	push	{r4, r5, lr}
 80112a2:	88c3      	ldrh	r3, [r0, #6]
 80112a4:	b083      	sub	sp, #12
 80112a6:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80112aa:	9101      	str	r1, [sp, #4]
 80112ac:	f1a3 010a 	sub.w	r1, r3, #10
 80112b0:	b289      	uxth	r1, r1
 80112b2:	42a1      	cmp	r1, r4
 80112b4:	d80e      	bhi.n	80112d4 <uxr_init_base_object_request+0x34>
 80112b6:	3301      	adds	r3, #1
 80112b8:	b29c      	uxth	r4, r3
 80112ba:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	80c4      	strh	r4, [r0, #6]
 80112c2:	1c91      	adds	r1, r2, #2
 80112c4:	9801      	ldr	r0, [sp, #4]
 80112c6:	7015      	strb	r5, [r2, #0]
 80112c8:	7053      	strb	r3, [r2, #1]
 80112ca:	f7fe fe41 	bl	800ff50 <uxr_object_id_to_raw>
 80112ce:	4620      	mov	r0, r4
 80112d0:	b003      	add	sp, #12
 80112d2:	bd30      	pop	{r4, r5, pc}
 80112d4:	230a      	movs	r3, #10
 80112d6:	461c      	mov	r4, r3
 80112d8:	2500      	movs	r5, #0
 80112da:	e7f1      	b.n	80112c0 <uxr_init_base_object_request+0x20>

080112dc <uxr_parse_base_object_request>:
 80112dc:	b570      	push	{r4, r5, r6, lr}
 80112de:	4604      	mov	r4, r0
 80112e0:	3002      	adds	r0, #2
 80112e2:	460d      	mov	r5, r1
 80112e4:	4616      	mov	r6, r2
 80112e6:	f7fe fe1f 	bl	800ff28 <uxr_object_id_from_raw>
 80112ea:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80112ee:	8028      	strh	r0, [r5, #0]
 80112f0:	806b      	strh	r3, [r5, #2]
 80112f2:	7822      	ldrb	r2, [r4, #0]
 80112f4:	7863      	ldrb	r3, [r4, #1]
 80112f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80112fa:	8033      	strh	r3, [r6, #0]
 80112fc:	bd70      	pop	{r4, r5, r6, pc}
 80112fe:	bf00      	nop

08011300 <uxr_stream_id>:
 8011300:	b410      	push	{r4}
 8011302:	2901      	cmp	r1, #1
 8011304:	b083      	sub	sp, #12
 8011306:	d01f      	beq.n	8011348 <uxr_stream_id+0x48>
 8011308:	2902      	cmp	r1, #2
 801130a:	f04f 0400 	mov.w	r4, #0
 801130e:	d01e      	beq.n	801134e <uxr_stream_id+0x4e>
 8011310:	2300      	movs	r3, #0
 8011312:	f364 0307 	bfi	r3, r4, #0, #8
 8011316:	f360 230f 	bfi	r3, r0, #8, #8
 801131a:	f361 4317 	bfi	r3, r1, #16, #8
 801131e:	f362 631f 	bfi	r3, r2, #24, #8
 8011322:	b2da      	uxtb	r2, r3
 8011324:	2000      	movs	r0, #0
 8011326:	f362 0007 	bfi	r0, r2, #0, #8
 801132a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801132e:	f362 200f 	bfi	r0, r2, #8, #8
 8011332:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011336:	f362 4017 	bfi	r0, r2, #16, #8
 801133a:	0e1b      	lsrs	r3, r3, #24
 801133c:	f363 601f 	bfi	r0, r3, #24, #8
 8011340:	b003      	add	sp, #12
 8011342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011346:	4770      	bx	lr
 8011348:	1c44      	adds	r4, r0, #1
 801134a:	b2e4      	uxtb	r4, r4
 801134c:	e7e0      	b.n	8011310 <uxr_stream_id+0x10>
 801134e:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8011352:	e7dd      	b.n	8011310 <uxr_stream_id+0x10>

08011354 <uxr_stream_id_from_raw>:
 8011354:	b410      	push	{r4}
 8011356:	b083      	sub	sp, #12
 8011358:	b128      	cbz	r0, 8011366 <uxr_stream_id_from_raw+0x12>
 801135a:	0603      	lsls	r3, r0, #24
 801135c:	d421      	bmi.n	80113a2 <uxr_stream_id_from_raw+0x4e>
 801135e:	1e42      	subs	r2, r0, #1
 8011360:	b2d2      	uxtb	r2, r2
 8011362:	2401      	movs	r4, #1
 8011364:	e001      	b.n	801136a <uxr_stream_id_from_raw+0x16>
 8011366:	4604      	mov	r4, r0
 8011368:	4602      	mov	r2, r0
 801136a:	2300      	movs	r3, #0
 801136c:	f360 0307 	bfi	r3, r0, #0, #8
 8011370:	f362 230f 	bfi	r3, r2, #8, #8
 8011374:	f364 4317 	bfi	r3, r4, #16, #8
 8011378:	f361 631f 	bfi	r3, r1, #24, #8
 801137c:	b2da      	uxtb	r2, r3
 801137e:	2000      	movs	r0, #0
 8011380:	f362 0007 	bfi	r0, r2, #0, #8
 8011384:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011388:	f362 200f 	bfi	r0, r2, #8, #8
 801138c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011390:	f362 4017 	bfi	r0, r2, #16, #8
 8011394:	0e1b      	lsrs	r3, r3, #24
 8011396:	f363 601f 	bfi	r0, r3, #24, #8
 801139a:	b003      	add	sp, #12
 801139c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113a0:	4770      	bx	lr
 80113a2:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80113a6:	2402      	movs	r4, #2
 80113a8:	e7df      	b.n	801136a <uxr_stream_id_from_raw+0x16>
 80113aa:	bf00      	nop

080113ac <uxr_init_stream_storage>:
 80113ac:	2300      	movs	r3, #0
 80113ae:	7403      	strb	r3, [r0, #16]
 80113b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80113b4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80113b8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80113bc:	4770      	bx	lr
 80113be:	bf00      	nop

080113c0 <uxr_reset_stream_storage>:
 80113c0:	b570      	push	{r4, r5, r6, lr}
 80113c2:	7c03      	ldrb	r3, [r0, #16]
 80113c4:	4604      	mov	r4, r0
 80113c6:	b153      	cbz	r3, 80113de <uxr_reset_stream_storage+0x1e>
 80113c8:	4606      	mov	r6, r0
 80113ca:	2500      	movs	r5, #0
 80113cc:	4630      	mov	r0, r6
 80113ce:	f005 fa4b 	bl	8016868 <uxr_reset_output_best_effort_stream>
 80113d2:	7c23      	ldrb	r3, [r4, #16]
 80113d4:	3501      	adds	r5, #1
 80113d6:	42ab      	cmp	r3, r5
 80113d8:	f106 0610 	add.w	r6, r6, #16
 80113dc:	d8f6      	bhi.n	80113cc <uxr_reset_stream_storage+0xc>
 80113de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80113e2:	b163      	cbz	r3, 80113fe <uxr_reset_stream_storage+0x3e>
 80113e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80113e8:	2500      	movs	r5, #0
 80113ea:	4630      	mov	r0, r6
 80113ec:	f005 f848 	bl	8016480 <uxr_reset_input_best_effort_stream>
 80113f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80113f4:	3501      	adds	r5, #1
 80113f6:	42ab      	cmp	r3, r5
 80113f8:	f106 0602 	add.w	r6, r6, #2
 80113fc:	d8f5      	bhi.n	80113ea <uxr_reset_stream_storage+0x2a>
 80113fe:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011402:	b163      	cbz	r3, 801141e <uxr_reset_stream_storage+0x5e>
 8011404:	f104 0618 	add.w	r6, r4, #24
 8011408:	2500      	movs	r5, #0
 801140a:	4630      	mov	r0, r6
 801140c:	f005 facc 	bl	80169a8 <uxr_reset_output_reliable_stream>
 8011410:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011414:	3501      	adds	r5, #1
 8011416:	42ab      	cmp	r3, r5
 8011418:	f106 0628 	add.w	r6, r6, #40	; 0x28
 801141c:	d8f5      	bhi.n	801140a <uxr_reset_stream_storage+0x4a>
 801141e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011422:	b163      	cbz	r3, 801143e <uxr_reset_stream_storage+0x7e>
 8011424:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8011428:	2500      	movs	r5, #0
 801142a:	4630      	mov	r0, r6
 801142c:	f005 f890 	bl	8016550 <uxr_reset_input_reliable_stream>
 8011430:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011434:	3501      	adds	r5, #1
 8011436:	42ab      	cmp	r3, r5
 8011438:	f106 0618 	add.w	r6, r6, #24
 801143c:	d8f5      	bhi.n	801142a <uxr_reset_stream_storage+0x6a>
 801143e:	bd70      	pop	{r4, r5, r6, pc}

08011440 <uxr_add_output_best_effort_buffer>:
 8011440:	b530      	push	{r4, r5, lr}
 8011442:	7c04      	ldrb	r4, [r0, #16]
 8011444:	1c65      	adds	r5, r4, #1
 8011446:	b083      	sub	sp, #12
 8011448:	7405      	strb	r5, [r0, #16]
 801144a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801144e:	f005 f9ff 	bl	8016850 <uxr_init_output_best_effort_stream>
 8011452:	2201      	movs	r2, #1
 8011454:	4620      	mov	r0, r4
 8011456:	4611      	mov	r1, r2
 8011458:	b003      	add	sp, #12
 801145a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801145e:	f7ff bf4f 	b.w	8011300 <uxr_stream_id>
 8011462:	bf00      	nop

08011464 <uxr_add_output_reliable_buffer>:
 8011464:	b570      	push	{r4, r5, r6, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 801146c:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8011470:	9600      	str	r6, [sp, #0]
 8011472:	2528      	movs	r5, #40	; 0x28
 8011474:	1c66      	adds	r6, r4, #1
 8011476:	fb05 0504 	mla	r5, r5, r4, r0
 801147a:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 801147e:	f105 0018 	add.w	r0, r5, #24
 8011482:	f005 fa5f 	bl	8016944 <uxr_init_output_reliable_stream>
 8011486:	4620      	mov	r0, r4
 8011488:	2201      	movs	r2, #1
 801148a:	2102      	movs	r1, #2
 801148c:	b004      	add	sp, #16
 801148e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011492:	f7ff bf35 	b.w	8011300 <uxr_stream_id>
 8011496:	bf00      	nop

08011498 <uxr_add_input_best_effort_buffer>:
 8011498:	b510      	push	{r4, lr}
 801149a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801149e:	1c62      	adds	r2, r4, #1
 80114a0:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80114a4:	b082      	sub	sp, #8
 80114a6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80114aa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80114ae:	f004 ffe3 	bl	8016478 <uxr_init_input_best_effort_stream>
 80114b2:	4620      	mov	r0, r4
 80114b4:	2200      	movs	r2, #0
 80114b6:	2101      	movs	r1, #1
 80114b8:	b002      	add	sp, #8
 80114ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114be:	f7ff bf1f 	b.w	8011300 <uxr_stream_id>
 80114c2:	bf00      	nop

080114c4 <uxr_add_input_reliable_buffer>:
 80114c4:	b570      	push	{r4, r5, r6, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 80114cc:	9e08      	ldr	r6, [sp, #32]
 80114ce:	9600      	str	r6, [sp, #0]
 80114d0:	2518      	movs	r5, #24
 80114d2:	1c66      	adds	r6, r4, #1
 80114d4:	fb05 0504 	mla	r5, r5, r4, r0
 80114d8:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 80114dc:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80114e0:	f005 f812 	bl	8016508 <uxr_init_input_reliable_stream>
 80114e4:	4620      	mov	r0, r4
 80114e6:	2200      	movs	r2, #0
 80114e8:	2102      	movs	r1, #2
 80114ea:	b004      	add	sp, #16
 80114ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114f0:	f7ff bf06 	b.w	8011300 <uxr_stream_id>

080114f4 <uxr_get_output_best_effort_stream>:
 80114f4:	7c03      	ldrb	r3, [r0, #16]
 80114f6:	428b      	cmp	r3, r1
 80114f8:	bf8c      	ite	hi
 80114fa:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80114fe:	2000      	movls	r0, #0
 8011500:	4770      	bx	lr
 8011502:	bf00      	nop

08011504 <uxr_get_output_reliable_stream>:
 8011504:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011508:	428b      	cmp	r3, r1
 801150a:	bf83      	ittte	hi
 801150c:	2328      	movhi	r3, #40	; 0x28
 801150e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8011512:	f101 0018 	addhi.w	r0, r1, #24
 8011516:	2000      	movls	r0, #0
 8011518:	4770      	bx	lr
 801151a:	bf00      	nop

0801151c <uxr_get_input_best_effort_stream>:
 801151c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8011520:	428b      	cmp	r3, r1
 8011522:	bf86      	itte	hi
 8011524:	3121      	addhi	r1, #33	; 0x21
 8011526:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801152a:	2000      	movls	r0, #0
 801152c:	4770      	bx	lr
 801152e:	bf00      	nop

08011530 <uxr_get_input_reliable_stream>:
 8011530:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8011534:	428b      	cmp	r3, r1
 8011536:	bf83      	ittte	hi
 8011538:	2318      	movhi	r3, #24
 801153a:	fb03 0101 	mlahi	r1, r3, r1, r0
 801153e:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 8011542:	2000      	movls	r0, #0
 8011544:	4770      	bx	lr
 8011546:	bf00      	nop

08011548 <uxr_output_streams_confirmed>:
 8011548:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801154c:	b183      	cbz	r3, 8011570 <uxr_output_streams_confirmed+0x28>
 801154e:	b570      	push	{r4, r5, r6, lr}
 8011550:	4606      	mov	r6, r0
 8011552:	f100 0518 	add.w	r5, r0, #24
 8011556:	2400      	movs	r4, #0
 8011558:	e001      	b.n	801155e <uxr_output_streams_confirmed+0x16>
 801155a:	3528      	adds	r5, #40	; 0x28
 801155c:	b138      	cbz	r0, 801156e <uxr_output_streams_confirmed+0x26>
 801155e:	4628      	mov	r0, r5
 8011560:	f005 fc86 	bl	8016e70 <uxr_is_output_up_to_date>
 8011564:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8011568:	3401      	adds	r4, #1
 801156a:	42a3      	cmp	r3, r4
 801156c:	d8f5      	bhi.n	801155a <uxr_output_streams_confirmed+0x12>
 801156e:	bd70      	pop	{r4, r5, r6, pc}
 8011570:	2001      	movs	r0, #1
 8011572:	4770      	bx	lr

08011574 <uxr_buffer_submessage_header>:
 8011574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011576:	4604      	mov	r4, r0
 8011578:	460e      	mov	r6, r1
 801157a:	2104      	movs	r1, #4
 801157c:	4615      	mov	r5, r2
 801157e:	461f      	mov	r7, r3
 8011580:	f7fe fa6c 	bl	800fa5c <ucdr_align_to>
 8011584:	2301      	movs	r3, #1
 8011586:	ea47 0203 	orr.w	r2, r7, r3
 801158a:	4631      	mov	r1, r6
 801158c:	7523      	strb	r3, [r4, #20]
 801158e:	4620      	mov	r0, r4
 8011590:	462b      	mov	r3, r5
 8011592:	f000 fa2b 	bl	80119ec <uxr_serialize_submessage_header>
 8011596:	4620      	mov	r0, r4
 8011598:	f7fe fa76 	bl	800fa88 <ucdr_buffer_remaining>
 801159c:	42a8      	cmp	r0, r5
 801159e:	bf34      	ite	cc
 80115a0:	2000      	movcc	r0, #0
 80115a2:	2001      	movcs	r0, #1
 80115a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115a6:	bf00      	nop

080115a8 <uxr_read_submessage_header>:
 80115a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115ac:	4604      	mov	r4, r0
 80115ae:	460d      	mov	r5, r1
 80115b0:	2104      	movs	r1, #4
 80115b2:	4616      	mov	r6, r2
 80115b4:	4698      	mov	r8, r3
 80115b6:	f7fe fa51 	bl	800fa5c <ucdr_align_to>
 80115ba:	4620      	mov	r0, r4
 80115bc:	f7fe fa64 	bl	800fa88 <ucdr_buffer_remaining>
 80115c0:	2803      	cmp	r0, #3
 80115c2:	bf8c      	ite	hi
 80115c4:	2701      	movhi	r7, #1
 80115c6:	2700      	movls	r7, #0
 80115c8:	d802      	bhi.n	80115d0 <uxr_read_submessage_header+0x28>
 80115ca:	4638      	mov	r0, r7
 80115cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115d0:	4633      	mov	r3, r6
 80115d2:	4642      	mov	r2, r8
 80115d4:	4620      	mov	r0, r4
 80115d6:	4629      	mov	r1, r5
 80115d8:	f000 fa1c 	bl	8011a14 <uxr_deserialize_submessage_header>
 80115dc:	f898 3000 	ldrb.w	r3, [r8]
 80115e0:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80115e4:	f003 0301 	and.w	r3, r3, #1
 80115e8:	f888 2000 	strb.w	r2, [r8]
 80115ec:	7523      	strb	r3, [r4, #20]
 80115ee:	4638      	mov	r0, r7
 80115f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080115f4 <uxr_submessage_padding>:
 80115f4:	f010 0003 	ands.w	r0, r0, #3
 80115f8:	bf18      	it	ne
 80115fa:	f1c0 0004 	rsbne	r0, r0, #4
 80115fe:	4770      	bx	lr

08011600 <uxr_millis>:
 8011600:	b510      	push	{r4, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	4669      	mov	r1, sp
 8011606:	2001      	movs	r0, #1
 8011608:	f7f1 f9d6 	bl	80029b8 <clock_gettime>
 801160c:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011610:	4907      	ldr	r1, [pc, #28]	; (8011630 <uxr_millis+0x30>)
 8011612:	9802      	ldr	r0, [sp, #8]
 8011614:	fba2 2301 	umull	r2, r3, r2, r1
 8011618:	fb01 3304 	mla	r3, r1, r4, r3
 801161c:	4604      	mov	r4, r0
 801161e:	1810      	adds	r0, r2, r0
 8011620:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8011624:	4a03      	ldr	r2, [pc, #12]	; (8011634 <uxr_millis+0x34>)
 8011626:	2300      	movs	r3, #0
 8011628:	f7ef fa60 	bl	8000aec <__aeabi_ldivmod>
 801162c:	b004      	add	sp, #16
 801162e:	bd10      	pop	{r4, pc}
 8011630:	3b9aca00 	.word	0x3b9aca00
 8011634:	000f4240 	.word	0x000f4240

08011638 <uxr_nanos>:
 8011638:	b510      	push	{r4, lr}
 801163a:	b084      	sub	sp, #16
 801163c:	4669      	mov	r1, sp
 801163e:	2001      	movs	r0, #1
 8011640:	f7f1 f9ba 	bl	80029b8 <clock_gettime>
 8011644:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011648:	4905      	ldr	r1, [pc, #20]	; (8011660 <uxr_nanos+0x28>)
 801164a:	9802      	ldr	r0, [sp, #8]
 801164c:	fba2 2301 	umull	r2, r3, r2, r1
 8011650:	fb01 3304 	mla	r3, r1, r4, r3
 8011654:	4604      	mov	r4, r0
 8011656:	1810      	adds	r0, r2, r0
 8011658:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 801165c:	b004      	add	sp, #16
 801165e:	bd10      	pop	{r4, pc}
 8011660:	3b9aca00 	.word	0x3b9aca00

08011664 <on_full_output_buffer_fragmented>:
 8011664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011668:	460c      	mov	r4, r1
 801166a:	b08a      	sub	sp, #40	; 0x28
 801166c:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8011670:	4606      	mov	r6, r0
 8011672:	f104 0008 	add.w	r0, r4, #8
 8011676:	f7ff ff45 	bl	8011504 <uxr_get_output_reliable_stream>
 801167a:	4605      	mov	r5, r0
 801167c:	f005 fc02 	bl	8016e84 <get_available_free_slots>
 8011680:	b968      	cbnz	r0, 801169e <on_full_output_buffer_fragmented+0x3a>
 8011682:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8011686:	4620      	mov	r0, r4
 8011688:	4798      	blx	r3
 801168a:	b918      	cbnz	r0, 8011694 <on_full_output_buffer_fragmented+0x30>
 801168c:	2001      	movs	r0, #1
 801168e:	b00a      	add	sp, #40	; 0x28
 8011690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011694:	4628      	mov	r0, r5
 8011696:	f005 fbf5 	bl	8016e84 <get_available_free_slots>
 801169a:	2800      	cmp	r0, #0
 801169c:	d0f6      	beq.n	801168c <on_full_output_buffer_fragmented+0x28>
 801169e:	8928      	ldrh	r0, [r5, #8]
 80116a0:	89eb      	ldrh	r3, [r5, #14]
 80116a2:	7b2a      	ldrb	r2, [r5, #12]
 80116a4:	fbb3 f1f0 	udiv	r1, r3, r0
 80116a8:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 80116ac:	fb00 3111 	mls	r1, r0, r1, r3
 80116b0:	b28b      	uxth	r3, r1
 80116b2:	32fc      	adds	r2, #252	; 0xfc
 80116b4:	6869      	ldr	r1, [r5, #4]
 80116b6:	fbb1 f1f0 	udiv	r1, r1, r0
 80116ba:	1f0f      	subs	r7, r1, #4
 80116bc:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 80116c0:	fb01 f103 	mul.w	r1, r1, r3
 80116c4:	443a      	add	r2, r7
 80116c6:	682b      	ldr	r3, [r5, #0]
 80116c8:	fa1f f882 	uxth.w	r8, r2
 80116cc:	3104      	adds	r1, #4
 80116ce:	4419      	add	r1, r3
 80116d0:	eba0 0008 	sub.w	r0, r0, r8
 80116d4:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 80116d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116dc:	9300      	str	r3, [sp, #0]
 80116de:	463a      	mov	r2, r7
 80116e0:	2300      	movs	r3, #0
 80116e2:	a802      	add	r0, sp, #8
 80116e4:	f7fe f98e 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 80116e8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80116ec:	f102 0308 	add.w	r3, r2, #8
 80116f0:	42bb      	cmp	r3, r7
 80116f2:	d927      	bls.n	8011744 <on_full_output_buffer_fragmented+0xe0>
 80116f4:	4642      	mov	r2, r8
 80116f6:	2300      	movs	r3, #0
 80116f8:	210d      	movs	r1, #13
 80116fa:	a802      	add	r0, sp, #8
 80116fc:	f7ff ff3a 	bl	8011574 <uxr_buffer_submessage_header>
 8011700:	8928      	ldrh	r0, [r5, #8]
 8011702:	89eb      	ldrh	r3, [r5, #14]
 8011704:	fbb3 f1f0 	udiv	r1, r3, r0
 8011708:	fb00 3111 	mls	r1, r0, r1, r3
 801170c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011710:	b289      	uxth	r1, r1
 8011712:	fbb3 f3f0 	udiv	r3, r3, r0
 8011716:	fb03 f301 	mul.w	r3, r3, r1
 801171a:	50d7      	str	r7, [r2, r3]
 801171c:	89e8      	ldrh	r0, [r5, #14]
 801171e:	2101      	movs	r1, #1
 8011720:	f005 fbd0 	bl	8016ec4 <uxr_seq_num_add>
 8011724:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8011728:	81e8      	strh	r0, [r5, #14]
 801172a:	1a52      	subs	r2, r2, r1
 801172c:	4630      	mov	r0, r6
 801172e:	f7fe f97b 	bl	800fa28 <ucdr_init_buffer>
 8011732:	4630      	mov	r0, r6
 8011734:	490f      	ldr	r1, [pc, #60]	; (8011774 <on_full_output_buffer_fragmented+0x110>)
 8011736:	4622      	mov	r2, r4
 8011738:	f7fe f94c 	bl	800f9d4 <ucdr_set_on_full_buffer_callback>
 801173c:	2000      	movs	r0, #0
 801173e:	b00a      	add	sp, #40	; 0x28
 8011740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011744:	b292      	uxth	r2, r2
 8011746:	2302      	movs	r3, #2
 8011748:	210d      	movs	r1, #13
 801174a:	a802      	add	r0, sp, #8
 801174c:	f7ff ff12 	bl	8011574 <uxr_buffer_submessage_header>
 8011750:	8928      	ldrh	r0, [r5, #8]
 8011752:	89eb      	ldrh	r3, [r5, #14]
 8011754:	fbb3 f2f0 	udiv	r2, r3, r0
 8011758:	fb00 3212 	mls	r2, r0, r2, r3
 801175c:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8011760:	686b      	ldr	r3, [r5, #4]
 8011762:	fbb3 f3f0 	udiv	r3, r3, r0
 8011766:	b292      	uxth	r2, r2
 8011768:	6828      	ldr	r0, [r5, #0]
 801176a:	fb03 f302 	mul.w	r3, r3, r2
 801176e:	3108      	adds	r1, #8
 8011770:	50c1      	str	r1, [r0, r3]
 8011772:	e7d3      	b.n	801171c <on_full_output_buffer_fragmented+0xb8>
 8011774:	08011665 	.word	0x08011665

08011778 <uxr_prepare_output_stream>:
 8011778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801177a:	b087      	sub	sp, #28
 801177c:	2407      	movs	r4, #7
 801177e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011780:	9202      	str	r2, [sp, #8]
 8011782:	2500      	movs	r5, #0
 8011784:	1d32      	adds	r2, r6, #4
 8011786:	e9cd 4500 	strd	r4, r5, [sp]
 801178a:	9103      	str	r1, [sp, #12]
 801178c:	461c      	mov	r4, r3
 801178e:	4606      	mov	r6, r0
 8011790:	f7ff fc4c 	bl	801102c <uxr_prepare_stream_to_write_submessage>
 8011794:	f080 0201 	eor.w	r2, r0, #1
 8011798:	b2d2      	uxtb	r2, r2
 801179a:	75a2      	strb	r2, [r4, #22]
 801179c:	b112      	cbz	r2, 80117a4 <uxr_prepare_output_stream+0x2c>
 801179e:	4628      	mov	r0, r5
 80117a0:	b007      	add	sp, #28
 80117a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117a4:	aa05      	add	r2, sp, #20
 80117a6:	9902      	ldr	r1, [sp, #8]
 80117a8:	4630      	mov	r0, r6
 80117aa:	f7ff fd79 	bl	80112a0 <uxr_init_base_object_request>
 80117ae:	a905      	add	r1, sp, #20
 80117b0:	4605      	mov	r5, r0
 80117b2:	4620      	mov	r0, r4
 80117b4:	f001 f872 	bl	801289c <uxr_serialize_WRITE_DATA_Payload_Data>
 80117b8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80117bc:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 80117c0:	1a52      	subs	r2, r2, r1
 80117c2:	4620      	mov	r0, r4
 80117c4:	f7fe f930 	bl	800fa28 <ucdr_init_buffer>
 80117c8:	4620      	mov	r0, r4
 80117ca:	463a      	mov	r2, r7
 80117cc:	4631      	mov	r1, r6
 80117ce:	f7fe f901 	bl	800f9d4 <ucdr_set_on_full_buffer_callback>
 80117d2:	4628      	mov	r0, r5
 80117d4:	b007      	add	sp, #28
 80117d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080117d8 <uxr_prepare_output_stream_fragmented>:
 80117d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117dc:	b093      	sub	sp, #76	; 0x4c
 80117de:	4605      	mov	r5, r0
 80117e0:	9107      	str	r1, [sp, #28]
 80117e2:	3008      	adds	r0, #8
 80117e4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80117e8:	9303      	str	r3, [sp, #12]
 80117ea:	9206      	str	r2, [sp, #24]
 80117ec:	f7ff fe8a 	bl	8011504 <uxr_get_output_reliable_stream>
 80117f0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	f000 8094 	beq.w	8011922 <uxr_prepare_output_stream_fragmented+0x14a>
 80117fa:	4604      	mov	r4, r0
 80117fc:	2800      	cmp	r0, #0
 80117fe:	f000 8090 	beq.w	8011922 <uxr_prepare_output_stream_fragmented+0x14a>
 8011802:	f005 fb3f 	bl	8016e84 <get_available_free_slots>
 8011806:	2800      	cmp	r0, #0
 8011808:	f000 8086 	beq.w	8011918 <uxr_prepare_output_stream_fragmented+0x140>
 801180c:	8922      	ldrh	r2, [r4, #8]
 801180e:	89e7      	ldrh	r7, [r4, #14]
 8011810:	fbb7 f8f2 	udiv	r8, r7, r2
 8011814:	e9d4 3100 	ldrd	r3, r1, [r4]
 8011818:	fb02 7818 	mls	r8, r2, r8, r7
 801181c:	fa1f f888 	uxth.w	r8, r8
 8011820:	fbb1 f2f2 	udiv	r2, r1, r2
 8011824:	fb02 f808 	mul.w	r8, r2, r8
 8011828:	f108 0804 	add.w	r8, r8, #4
 801182c:	4498      	add	r8, r3
 801182e:	7b23      	ldrb	r3, [r4, #12]
 8011830:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8011834:	9204      	str	r2, [sp, #16]
 8011836:	4553      	cmp	r3, sl
 8011838:	f1a2 0b04 	sub.w	fp, r2, #4
 801183c:	d37d      	bcc.n	801193a <uxr_prepare_output_stream_fragmented+0x162>
 801183e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8011840:	f8cd a000 	str.w	sl, [sp]
 8011844:	f1ab 0904 	sub.w	r9, fp, #4
 8011848:	eba9 0903 	sub.w	r9, r9, r3
 801184c:	3608      	adds	r6, #8
 801184e:	a80a      	add	r0, sp, #40	; 0x28
 8011850:	2300      	movs	r3, #0
 8011852:	465a      	mov	r2, fp
 8011854:	4641      	mov	r1, r8
 8011856:	fa1f f989 	uxth.w	r9, r9
 801185a:	9605      	str	r6, [sp, #20]
 801185c:	f7fe f8d2 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 8011860:	455e      	cmp	r6, fp
 8011862:	bf34      	ite	cc
 8011864:	2302      	movcc	r3, #2
 8011866:	2300      	movcs	r3, #0
 8011868:	464a      	mov	r2, r9
 801186a:	210d      	movs	r1, #13
 801186c:	a80a      	add	r0, sp, #40	; 0x28
 801186e:	f7ff fe81 	bl	8011574 <uxr_buffer_submessage_header>
 8011872:	8920      	ldrh	r0, [r4, #8]
 8011874:	fbb7 f3f0 	udiv	r3, r7, r0
 8011878:	e9d4 2100 	ldrd	r2, r1, [r4]
 801187c:	fb00 7313 	mls	r3, r0, r3, r7
 8011880:	b29b      	uxth	r3, r3
 8011882:	fbb1 f1f0 	udiv	r1, r1, r0
 8011886:	fb03 f301 	mul.w	r3, r3, r1
 801188a:	4638      	mov	r0, r7
 801188c:	f842 b003 	str.w	fp, [r2, r3]
 8011890:	2101      	movs	r1, #1
 8011892:	f005 fb17 	bl	8016ec4 <uxr_seq_num_add>
 8011896:	9b04      	ldr	r3, [sp, #16]
 8011898:	9e03      	ldr	r6, [sp, #12]
 801189a:	f1a3 0208 	sub.w	r2, r3, #8
 801189e:	f10a 0104 	add.w	r1, sl, #4
 80118a2:	4607      	mov	r7, r0
 80118a4:	eba2 020a 	sub.w	r2, r2, sl
 80118a8:	4441      	add	r1, r8
 80118aa:	4630      	mov	r0, r6
 80118ac:	f7fe f8bc 	bl	800fa28 <ucdr_init_buffer>
 80118b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80118b2:	81e7      	strh	r7, [r4, #14]
 80118b4:	1d1a      	adds	r2, r3, #4
 80118b6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80118ba:	bf28      	it	cs
 80118bc:	2200      	movcs	r2, #0
 80118be:	b292      	uxth	r2, r2
 80118c0:	2300      	movs	r3, #0
 80118c2:	2107      	movs	r1, #7
 80118c4:	4630      	mov	r0, r6
 80118c6:	f7ff fe55 	bl	8011574 <uxr_buffer_submessage_header>
 80118ca:	9906      	ldr	r1, [sp, #24]
 80118cc:	aa09      	add	r2, sp, #36	; 0x24
 80118ce:	4628      	mov	r0, r5
 80118d0:	f7ff fce6 	bl	80112a0 <uxr_init_base_object_request>
 80118d4:	4604      	mov	r4, r0
 80118d6:	b328      	cbz	r0, 8011924 <uxr_prepare_output_stream_fragmented+0x14c>
 80118d8:	9e03      	ldr	r6, [sp, #12]
 80118da:	a909      	add	r1, sp, #36	; 0x24
 80118dc:	4630      	mov	r0, r6
 80118de:	f000 ffdd 	bl	801289c <uxr_serialize_WRITE_DATA_Payload_Data>
 80118e2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80118e6:	4630      	mov	r0, r6
 80118e8:	1a52      	subs	r2, r2, r1
 80118ea:	f7fe f89d 	bl	800fa28 <ucdr_init_buffer>
 80118ee:	9a05      	ldr	r2, [sp, #20]
 80118f0:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80118f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80118f6:	9b07      	ldr	r3, [sp, #28]
 80118f8:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 80118fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80118fe:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 8011902:	4630      	mov	r0, r6
 8011904:	4919      	ldr	r1, [pc, #100]	; (801196c <uxr_prepare_output_stream_fragmented+0x194>)
 8011906:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801190a:	462a      	mov	r2, r5
 801190c:	f7fe f862 	bl	800f9d4 <ucdr_set_on_full_buffer_callback>
 8011910:	4620      	mov	r0, r4
 8011912:	b013      	add	sp, #76	; 0x4c
 8011914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011918:	991e      	ldr	r1, [sp, #120]	; 0x78
 801191a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801191c:	4628      	mov	r0, r5
 801191e:	4798      	blx	r3
 8011920:	b920      	cbnz	r0, 801192c <uxr_prepare_output_stream_fragmented+0x154>
 8011922:	2400      	movs	r4, #0
 8011924:	4620      	mov	r0, r4
 8011926:	b013      	add	sp, #76	; 0x4c
 8011928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801192c:	4620      	mov	r0, r4
 801192e:	f005 faa9 	bl	8016e84 <get_available_free_slots>
 8011932:	2800      	cmp	r0, #0
 8011934:	f47f af6a 	bne.w	801180c <uxr_prepare_output_stream_fragmented+0x34>
 8011938:	e7f3      	b.n	8011922 <uxr_prepare_output_stream_fragmented+0x14a>
 801193a:	4638      	mov	r0, r7
 801193c:	2101      	movs	r1, #1
 801193e:	f005 fac1 	bl	8016ec4 <uxr_seq_num_add>
 8011942:	8922      	ldrh	r2, [r4, #8]
 8011944:	fbb0 f8f2 	udiv	r8, r0, r2
 8011948:	fb02 0818 	mls	r8, r2, r8, r0
 801194c:	fa1f f888 	uxth.w	r8, r8
 8011950:	6863      	ldr	r3, [r4, #4]
 8011952:	fbb3 f3f2 	udiv	r3, r3, r2
 8011956:	6822      	ldr	r2, [r4, #0]
 8011958:	fb08 f803 	mul.w	r8, r8, r3
 801195c:	f108 0804 	add.w	r8, r8, #4
 8011960:	4490      	add	r8, r2
 8011962:	7b23      	ldrb	r3, [r4, #12]
 8011964:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8011968:	4607      	mov	r7, r0
 801196a:	e768      	b.n	801183e <uxr_prepare_output_stream_fragmented+0x66>
 801196c:	08011665 	.word	0x08011665

08011970 <uxr_serialize_message_header>:
 8011970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011972:	b083      	sub	sp, #12
 8011974:	4616      	mov	r6, r2
 8011976:	4604      	mov	r4, r0
 8011978:	9301      	str	r3, [sp, #4]
 801197a:	460d      	mov	r5, r1
 801197c:	9f08      	ldr	r7, [sp, #32]
 801197e:	f7fd f8a9 	bl	800ead4 <ucdr_serialize_uint8_t>
 8011982:	4631      	mov	r1, r6
 8011984:	4620      	mov	r0, r4
 8011986:	f7fd f8a5 	bl	800ead4 <ucdr_serialize_uint8_t>
 801198a:	9a01      	ldr	r2, [sp, #4]
 801198c:	4620      	mov	r0, r4
 801198e:	2101      	movs	r1, #1
 8011990:	f7fd f94c 	bl	800ec2c <ucdr_serialize_endian_uint16_t>
 8011994:	062b      	lsls	r3, r5, #24
 8011996:	d501      	bpl.n	801199c <uxr_serialize_message_header+0x2c>
 8011998:	b003      	add	sp, #12
 801199a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801199c:	4639      	mov	r1, r7
 801199e:	4620      	mov	r0, r4
 80119a0:	2204      	movs	r2, #4
 80119a2:	b003      	add	sp, #12
 80119a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80119a8:	f004 bb6e 	b.w	8016088 <ucdr_serialize_array_uint8_t>

080119ac <uxr_deserialize_message_header>:
 80119ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119ae:	b083      	sub	sp, #12
 80119b0:	4616      	mov	r6, r2
 80119b2:	4604      	mov	r4, r0
 80119b4:	9301      	str	r3, [sp, #4]
 80119b6:	460d      	mov	r5, r1
 80119b8:	9f08      	ldr	r7, [sp, #32]
 80119ba:	f7fd f8a1 	bl	800eb00 <ucdr_deserialize_uint8_t>
 80119be:	4631      	mov	r1, r6
 80119c0:	4620      	mov	r0, r4
 80119c2:	f7fd f89d 	bl	800eb00 <ucdr_deserialize_uint8_t>
 80119c6:	9a01      	ldr	r2, [sp, #4]
 80119c8:	4620      	mov	r0, r4
 80119ca:	2101      	movs	r1, #1
 80119cc:	f7fd fa22 	bl	800ee14 <ucdr_deserialize_endian_uint16_t>
 80119d0:	f995 3000 	ldrsb.w	r3, [r5]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	da01      	bge.n	80119dc <uxr_deserialize_message_header+0x30>
 80119d8:	b003      	add	sp, #12
 80119da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119dc:	4639      	mov	r1, r7
 80119de:	4620      	mov	r0, r4
 80119e0:	2204      	movs	r2, #4
 80119e2:	b003      	add	sp, #12
 80119e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80119e8:	f004 bbb2 	b.w	8016150 <ucdr_deserialize_array_uint8_t>

080119ec <uxr_serialize_submessage_header>:
 80119ec:	b530      	push	{r4, r5, lr}
 80119ee:	b083      	sub	sp, #12
 80119f0:	4615      	mov	r5, r2
 80119f2:	4604      	mov	r4, r0
 80119f4:	9301      	str	r3, [sp, #4]
 80119f6:	f7fd f86d 	bl	800ead4 <ucdr_serialize_uint8_t>
 80119fa:	4629      	mov	r1, r5
 80119fc:	4620      	mov	r0, r4
 80119fe:	f7fd f869 	bl	800ead4 <ucdr_serialize_uint8_t>
 8011a02:	9a01      	ldr	r2, [sp, #4]
 8011a04:	4620      	mov	r0, r4
 8011a06:	2101      	movs	r1, #1
 8011a08:	b003      	add	sp, #12
 8011a0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a0e:	f7fd b90d 	b.w	800ec2c <ucdr_serialize_endian_uint16_t>
 8011a12:	bf00      	nop

08011a14 <uxr_deserialize_submessage_header>:
 8011a14:	b530      	push	{r4, r5, lr}
 8011a16:	b083      	sub	sp, #12
 8011a18:	4615      	mov	r5, r2
 8011a1a:	4604      	mov	r4, r0
 8011a1c:	9301      	str	r3, [sp, #4]
 8011a1e:	f7fd f86f 	bl	800eb00 <ucdr_deserialize_uint8_t>
 8011a22:	4629      	mov	r1, r5
 8011a24:	4620      	mov	r0, r4
 8011a26:	f7fd f86b 	bl	800eb00 <ucdr_deserialize_uint8_t>
 8011a2a:	9a01      	ldr	r2, [sp, #4]
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	2101      	movs	r1, #1
 8011a30:	b003      	add	sp, #12
 8011a32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a36:	f7fd b9ed 	b.w	800ee14 <ucdr_deserialize_endian_uint16_t>
 8011a3a:	bf00      	nop

08011a3c <uxr_serialize_CLIENT_Representation>:
 8011a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a40:	2204      	movs	r2, #4
 8011a42:	460c      	mov	r4, r1
 8011a44:	4605      	mov	r5, r0
 8011a46:	f004 fb1f 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8011a4a:	1d21      	adds	r1, r4, #4
 8011a4c:	4607      	mov	r7, r0
 8011a4e:	2202      	movs	r2, #2
 8011a50:	4628      	mov	r0, r5
 8011a52:	f004 fb19 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8011a56:	1da1      	adds	r1, r4, #6
 8011a58:	4007      	ands	r7, r0
 8011a5a:	2202      	movs	r2, #2
 8011a5c:	4628      	mov	r0, r5
 8011a5e:	f004 fb13 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8011a62:	fa5f f887 	uxtb.w	r8, r7
 8011a66:	2204      	movs	r2, #4
 8011a68:	4607      	mov	r7, r0
 8011a6a:	f104 0108 	add.w	r1, r4, #8
 8011a6e:	4628      	mov	r0, r5
 8011a70:	f004 fb0a 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8011a74:	ea08 0707 	and.w	r7, r8, r7
 8011a78:	7b21      	ldrb	r1, [r4, #12]
 8011a7a:	4680      	mov	r8, r0
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	f7fd f829 	bl	800ead4 <ucdr_serialize_uint8_t>
 8011a82:	ea08 0807 	and.w	r8, r8, r7
 8011a86:	7b61      	ldrb	r1, [r4, #13]
 8011a88:	4607      	mov	r7, r0
 8011a8a:	4628      	mov	r0, r5
 8011a8c:	f7fc fff2 	bl	800ea74 <ucdr_serialize_bool>
 8011a90:	7b63      	ldrb	r3, [r4, #13]
 8011a92:	ea08 0707 	and.w	r7, r8, r7
 8011a96:	ea07 0600 	and.w	r6, r7, r0
 8011a9a:	b933      	cbnz	r3, 8011aaa <uxr_serialize_CLIENT_Representation+0x6e>
 8011a9c:	8ba1      	ldrh	r1, [r4, #28]
 8011a9e:	4628      	mov	r0, r5
 8011aa0:	f7fd f844 	bl	800eb2c <ucdr_serialize_uint16_t>
 8011aa4:	4030      	ands	r0, r6
 8011aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aaa:	6921      	ldr	r1, [r4, #16]
 8011aac:	4628      	mov	r0, r5
 8011aae:	f7fd fa27 	bl	800ef00 <ucdr_serialize_uint32_t>
 8011ab2:	6923      	ldr	r3, [r4, #16]
 8011ab4:	b1cb      	cbz	r3, 8011aea <uxr_serialize_CLIENT_Representation+0xae>
 8011ab6:	b1d0      	cbz	r0, 8011aee <uxr_serialize_CLIENT_Representation+0xb2>
 8011ab8:	46a0      	mov	r8, r4
 8011aba:	f04f 0900 	mov.w	r9, #0
 8011abe:	e002      	b.n	8011ac6 <uxr_serialize_CLIENT_Representation+0x8a>
 8011ac0:	f108 0808 	add.w	r8, r8, #8
 8011ac4:	b198      	cbz	r0, 8011aee <uxr_serialize_CLIENT_Representation+0xb2>
 8011ac6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011aca:	4628      	mov	r0, r5
 8011acc:	f004 fbfc 	bl	80162c8 <ucdr_serialize_string>
 8011ad0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011ad4:	4607      	mov	r7, r0
 8011ad6:	4628      	mov	r0, r5
 8011ad8:	f004 fbf6 	bl	80162c8 <ucdr_serialize_string>
 8011adc:	6923      	ldr	r3, [r4, #16]
 8011ade:	f109 0901 	add.w	r9, r9, #1
 8011ae2:	4038      	ands	r0, r7
 8011ae4:	4599      	cmp	r9, r3
 8011ae6:	b2c0      	uxtb	r0, r0
 8011ae8:	d3ea      	bcc.n	8011ac0 <uxr_serialize_CLIENT_Representation+0x84>
 8011aea:	4006      	ands	r6, r0
 8011aec:	e7d6      	b.n	8011a9c <uxr_serialize_CLIENT_Representation+0x60>
 8011aee:	2600      	movs	r6, #0
 8011af0:	e7d4      	b.n	8011a9c <uxr_serialize_CLIENT_Representation+0x60>
 8011af2:	bf00      	nop

08011af4 <uxr_deserialize_CLIENT_Representation>:
 8011af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011af8:	2204      	movs	r2, #4
 8011afa:	460c      	mov	r4, r1
 8011afc:	4605      	mov	r5, r0
 8011afe:	f004 fb27 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8011b02:	1d21      	adds	r1, r4, #4
 8011b04:	4607      	mov	r7, r0
 8011b06:	2202      	movs	r2, #2
 8011b08:	4628      	mov	r0, r5
 8011b0a:	f004 fb21 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8011b0e:	1da1      	adds	r1, r4, #6
 8011b10:	4007      	ands	r7, r0
 8011b12:	2202      	movs	r2, #2
 8011b14:	4628      	mov	r0, r5
 8011b16:	f004 fb1b 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8011b1a:	fa5f f887 	uxtb.w	r8, r7
 8011b1e:	2204      	movs	r2, #4
 8011b20:	4607      	mov	r7, r0
 8011b22:	f104 0108 	add.w	r1, r4, #8
 8011b26:	4628      	mov	r0, r5
 8011b28:	f004 fb12 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8011b2c:	ea08 0707 	and.w	r7, r8, r7
 8011b30:	f104 010c 	add.w	r1, r4, #12
 8011b34:	4680      	mov	r8, r0
 8011b36:	4628      	mov	r0, r5
 8011b38:	f7fc ffe2 	bl	800eb00 <ucdr_deserialize_uint8_t>
 8011b3c:	ea08 0807 	and.w	r8, r8, r7
 8011b40:	f104 010d 	add.w	r1, r4, #13
 8011b44:	4607      	mov	r7, r0
 8011b46:	4628      	mov	r0, r5
 8011b48:	f7fc ffaa 	bl	800eaa0 <ucdr_deserialize_bool>
 8011b4c:	7b63      	ldrb	r3, [r4, #13]
 8011b4e:	ea08 0707 	and.w	r7, r8, r7
 8011b52:	ea07 0600 	and.w	r6, r7, r0
 8011b56:	b93b      	cbnz	r3, 8011b68 <uxr_deserialize_CLIENT_Representation+0x74>
 8011b58:	f104 011c 	add.w	r1, r4, #28
 8011b5c:	4628      	mov	r0, r5
 8011b5e:	f7fd f8e5 	bl	800ed2c <ucdr_deserialize_uint16_t>
 8011b62:	4030      	ands	r0, r6
 8011b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b68:	f104 0110 	add.w	r1, r4, #16
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	f7fd faf7 	bl	800f160 <ucdr_deserialize_uint32_t>
 8011b72:	6923      	ldr	r3, [r4, #16]
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	d903      	bls.n	8011b80 <uxr_deserialize_CLIENT_Representation+0x8c>
 8011b78:	2301      	movs	r3, #1
 8011b7a:	75ab      	strb	r3, [r5, #22]
 8011b7c:	2600      	movs	r6, #0
 8011b7e:	e7eb      	b.n	8011b58 <uxr_deserialize_CLIENT_Representation+0x64>
 8011b80:	b1fb      	cbz	r3, 8011bc2 <uxr_deserialize_CLIENT_Representation+0xce>
 8011b82:	2800      	cmp	r0, #0
 8011b84:	d0fa      	beq.n	8011b7c <uxr_deserialize_CLIENT_Representation+0x88>
 8011b86:	46a0      	mov	r8, r4
 8011b88:	f04f 0900 	mov.w	r9, #0
 8011b8c:	e003      	b.n	8011b96 <uxr_deserialize_CLIENT_Representation+0xa2>
 8011b8e:	f108 0808 	add.w	r8, r8, #8
 8011b92:	2800      	cmp	r0, #0
 8011b94:	d0f2      	beq.n	8011b7c <uxr_deserialize_CLIENT_Representation+0x88>
 8011b96:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	f004 fba2 	bl	80162e8 <ucdr_deserialize_string>
 8011ba4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011ba8:	4607      	mov	r7, r0
 8011baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011bae:	4628      	mov	r0, r5
 8011bb0:	f004 fb9a 	bl	80162e8 <ucdr_deserialize_string>
 8011bb4:	6923      	ldr	r3, [r4, #16]
 8011bb6:	f109 0901 	add.w	r9, r9, #1
 8011bba:	4038      	ands	r0, r7
 8011bbc:	4599      	cmp	r9, r3
 8011bbe:	b2c0      	uxtb	r0, r0
 8011bc0:	d3e5      	bcc.n	8011b8e <uxr_deserialize_CLIENT_Representation+0x9a>
 8011bc2:	4006      	ands	r6, r0
 8011bc4:	e7c8      	b.n	8011b58 <uxr_deserialize_CLIENT_Representation+0x64>
 8011bc6:	bf00      	nop

08011bc8 <uxr_serialize_AGENT_Representation>:
 8011bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bcc:	2204      	movs	r2, #4
 8011bce:	460c      	mov	r4, r1
 8011bd0:	4605      	mov	r5, r0
 8011bd2:	f004 fa59 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8011bd6:	1d21      	adds	r1, r4, #4
 8011bd8:	4606      	mov	r6, r0
 8011bda:	2202      	movs	r2, #2
 8011bdc:	4628      	mov	r0, r5
 8011bde:	f004 fa53 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8011be2:	1da1      	adds	r1, r4, #6
 8011be4:	4006      	ands	r6, r0
 8011be6:	2202      	movs	r2, #2
 8011be8:	4628      	mov	r0, r5
 8011bea:	f004 fa4d 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8011bee:	b2f6      	uxtb	r6, r6
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	7a21      	ldrb	r1, [r4, #8]
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	401e      	ands	r6, r3
 8011bf8:	f7fc ff3c 	bl	800ea74 <ucdr_serialize_bool>
 8011bfc:	7a23      	ldrb	r3, [r4, #8]
 8011bfe:	ea00 0706 	and.w	r7, r0, r6
 8011c02:	b913      	cbnz	r3, 8011c0a <uxr_serialize_AGENT_Representation+0x42>
 8011c04:	4638      	mov	r0, r7
 8011c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c0a:	68e1      	ldr	r1, [r4, #12]
 8011c0c:	4628      	mov	r0, r5
 8011c0e:	f7fd f977 	bl	800ef00 <ucdr_serialize_uint32_t>
 8011c12:	68e3      	ldr	r3, [r4, #12]
 8011c14:	b313      	cbz	r3, 8011c5c <uxr_serialize_AGENT_Representation+0x94>
 8011c16:	b1e8      	cbz	r0, 8011c54 <uxr_serialize_AGENT_Representation+0x8c>
 8011c18:	46a0      	mov	r8, r4
 8011c1a:	f04f 0900 	mov.w	r9, #0
 8011c1e:	e002      	b.n	8011c26 <uxr_serialize_AGENT_Representation+0x5e>
 8011c20:	f108 0808 	add.w	r8, r8, #8
 8011c24:	b1b3      	cbz	r3, 8011c54 <uxr_serialize_AGENT_Representation+0x8c>
 8011c26:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	f004 fb4c 	bl	80162c8 <ucdr_serialize_string>
 8011c30:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011c34:	4606      	mov	r6, r0
 8011c36:	4628      	mov	r0, r5
 8011c38:	f004 fb46 	bl	80162c8 <ucdr_serialize_string>
 8011c3c:	68e2      	ldr	r2, [r4, #12]
 8011c3e:	f109 0901 	add.w	r9, r9, #1
 8011c42:	ea06 0300 	and.w	r3, r6, r0
 8011c46:	4591      	cmp	r9, r2
 8011c48:	b2db      	uxtb	r3, r3
 8011c4a:	d3e9      	bcc.n	8011c20 <uxr_serialize_AGENT_Representation+0x58>
 8011c4c:	401f      	ands	r7, r3
 8011c4e:	4638      	mov	r0, r7
 8011c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c54:	2700      	movs	r7, #0
 8011c56:	4638      	mov	r0, r7
 8011c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c5c:	4007      	ands	r7, r0
 8011c5e:	e7d1      	b.n	8011c04 <uxr_serialize_AGENT_Representation+0x3c>

08011c60 <uxr_serialize_ObjectVariant.part.0>:
 8011c60:	b570      	push	{r4, r5, r6, lr}
 8011c62:	780b      	ldrb	r3, [r1, #0]
 8011c64:	3b01      	subs	r3, #1
 8011c66:	460c      	mov	r4, r1
 8011c68:	4605      	mov	r5, r0
 8011c6a:	2b0d      	cmp	r3, #13
 8011c6c:	d869      	bhi.n	8011d42 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8011c6e:	e8df f003 	tbb	[pc, r3]
 8011c72:	074a      	.short	0x074a
 8011c74:	07073030 	.word	0x07073030
 8011c78:	21680707 	.word	0x21680707
 8011c7c:	45632121 	.word	0x45632121
 8011c80:	7909      	ldrb	r1, [r1, #4]
 8011c82:	f7fc ff27 	bl	800ead4 <ucdr_serialize_uint8_t>
 8011c86:	4606      	mov	r6, r0
 8011c88:	b158      	cbz	r0, 8011ca2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011c8a:	7923      	ldrb	r3, [r4, #4]
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	d003      	beq.n	8011c98 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011c90:	2b03      	cmp	r3, #3
 8011c92:	d029      	beq.n	8011ce8 <uxr_serialize_ObjectVariant.part.0+0x88>
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d104      	bne.n	8011ca2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011c98:	68a1      	ldr	r1, [r4, #8]
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	f004 fb14 	bl	80162c8 <ucdr_serialize_string>
 8011ca0:	4606      	mov	r6, r0
 8011ca2:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8011ca6:	4628      	mov	r0, r5
 8011ca8:	2202      	movs	r2, #2
 8011caa:	f004 f9ed 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8011cae:	4030      	ands	r0, r6
 8011cb0:	b2c0      	uxtb	r0, r0
 8011cb2:	bd70      	pop	{r4, r5, r6, pc}
 8011cb4:	7909      	ldrb	r1, [r1, #4]
 8011cb6:	f7fc ff0d 	bl	800ead4 <ucdr_serialize_uint8_t>
 8011cba:	b1e8      	cbz	r0, 8011cf8 <uxr_serialize_ObjectVariant.part.0+0x98>
 8011cbc:	7923      	ldrb	r3, [r4, #4]
 8011cbe:	2b01      	cmp	r3, #1
 8011cc0:	d001      	beq.n	8011cc6 <uxr_serialize_ObjectVariant.part.0+0x66>
 8011cc2:	2b02      	cmp	r3, #2
 8011cc4:	d13d      	bne.n	8011d42 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8011cc6:	68a1      	ldr	r1, [r4, #8]
 8011cc8:	4628      	mov	r0, r5
 8011cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011cce:	f004 bafb 	b.w	80162c8 <ucdr_serialize_string>
 8011cd2:	7909      	ldrb	r1, [r1, #4]
 8011cd4:	f7fc fefe 	bl	800ead4 <ucdr_serialize_uint8_t>
 8011cd8:	4606      	mov	r6, r0
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	d0e1      	beq.n	8011ca2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011cde:	7923      	ldrb	r3, [r4, #4]
 8011ce0:	2b02      	cmp	r3, #2
 8011ce2:	d0d9      	beq.n	8011c98 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011ce4:	2b03      	cmp	r3, #3
 8011ce6:	d1dc      	bne.n	8011ca2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011ce8:	68a2      	ldr	r2, [r4, #8]
 8011cea:	f104 010c 	add.w	r1, r4, #12
 8011cee:	4628      	mov	r0, r5
 8011cf0:	f004 fabe 	bl	8016270 <ucdr_serialize_sequence_uint8_t>
 8011cf4:	4606      	mov	r6, r0
 8011cf6:	e7d4      	b.n	8011ca2 <uxr_serialize_ObjectVariant.part.0+0x42>
 8011cf8:	2000      	movs	r0, #0
 8011cfa:	bd70      	pop	{r4, r5, r6, pc}
 8011cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d00:	3104      	adds	r1, #4
 8011d02:	f7ff be9b 	b.w	8011a3c <uxr_serialize_CLIENT_Representation>
 8011d06:	7909      	ldrb	r1, [r1, #4]
 8011d08:	f7fc fee4 	bl	800ead4 <ucdr_serialize_uint8_t>
 8011d0c:	4606      	mov	r6, r0
 8011d0e:	b158      	cbz	r0, 8011d28 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011d10:	7923      	ldrb	r3, [r4, #4]
 8011d12:	2b02      	cmp	r3, #2
 8011d14:	d003      	beq.n	8011d1e <uxr_serialize_ObjectVariant.part.0+0xbe>
 8011d16:	2b03      	cmp	r3, #3
 8011d18:	d015      	beq.n	8011d46 <uxr_serialize_ObjectVariant.part.0+0xe6>
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	d104      	bne.n	8011d28 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011d1e:	68a1      	ldr	r1, [r4, #8]
 8011d20:	4628      	mov	r0, r5
 8011d22:	f004 fad1 	bl	80162c8 <ucdr_serialize_string>
 8011d26:	4606      	mov	r6, r0
 8011d28:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	f7fd fc0d 	bl	800f54c <ucdr_serialize_int16_t>
 8011d32:	4030      	ands	r0, r6
 8011d34:	b2c0      	uxtb	r0, r0
 8011d36:	bd70      	pop	{r4, r5, r6, pc}
 8011d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d3c:	3104      	adds	r1, #4
 8011d3e:	f7ff bf43 	b.w	8011bc8 <uxr_serialize_AGENT_Representation>
 8011d42:	2001      	movs	r0, #1
 8011d44:	bd70      	pop	{r4, r5, r6, pc}
 8011d46:	68a2      	ldr	r2, [r4, #8]
 8011d48:	f104 010c 	add.w	r1, r4, #12
 8011d4c:	4628      	mov	r0, r5
 8011d4e:	f004 fa8f 	bl	8016270 <ucdr_serialize_sequence_uint8_t>
 8011d52:	4606      	mov	r6, r0
 8011d54:	e7e8      	b.n	8011d28 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011d56:	bf00      	nop

08011d58 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011d58:	b570      	push	{r4, r5, r6, lr}
 8011d5a:	460d      	mov	r5, r1
 8011d5c:	7809      	ldrb	r1, [r1, #0]
 8011d5e:	4606      	mov	r6, r0
 8011d60:	f7fc fe88 	bl	800ea74 <ucdr_serialize_bool>
 8011d64:	782b      	ldrb	r3, [r5, #0]
 8011d66:	4604      	mov	r4, r0
 8011d68:	b94b      	cbnz	r3, 8011d7e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011d6a:	7a29      	ldrb	r1, [r5, #8]
 8011d6c:	4630      	mov	r0, r6
 8011d6e:	f7fc fe81 	bl	800ea74 <ucdr_serialize_bool>
 8011d72:	7a2b      	ldrb	r3, [r5, #8]
 8011d74:	4004      	ands	r4, r0
 8011d76:	b2e4      	uxtb	r4, r4
 8011d78:	b943      	cbnz	r3, 8011d8c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011d7a:	4620      	mov	r0, r4
 8011d7c:	bd70      	pop	{r4, r5, r6, pc}
 8011d7e:	6869      	ldr	r1, [r5, #4]
 8011d80:	4630      	mov	r0, r6
 8011d82:	f004 faa1 	bl	80162c8 <ucdr_serialize_string>
 8011d86:	4004      	ands	r4, r0
 8011d88:	b2e4      	uxtb	r4, r4
 8011d8a:	e7ee      	b.n	8011d6a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011d8c:	68e9      	ldr	r1, [r5, #12]
 8011d8e:	4630      	mov	r0, r6
 8011d90:	f004 fa9a 	bl	80162c8 <ucdr_serialize_string>
 8011d94:	4004      	ands	r4, r0
 8011d96:	4620      	mov	r0, r4
 8011d98:	bd70      	pop	{r4, r5, r6, pc}
 8011d9a:	bf00      	nop

08011d9c <uxr_serialize_OBJK_Topic_Binary>:
 8011d9c:	b570      	push	{r4, r5, r6, lr}
 8011d9e:	460d      	mov	r5, r1
 8011da0:	6809      	ldr	r1, [r1, #0]
 8011da2:	4606      	mov	r6, r0
 8011da4:	f004 fa90 	bl	80162c8 <ucdr_serialize_string>
 8011da8:	7929      	ldrb	r1, [r5, #4]
 8011daa:	4604      	mov	r4, r0
 8011dac:	4630      	mov	r0, r6
 8011dae:	f7fc fe61 	bl	800ea74 <ucdr_serialize_bool>
 8011db2:	792b      	ldrb	r3, [r5, #4]
 8011db4:	4004      	ands	r4, r0
 8011db6:	b2e4      	uxtb	r4, r4
 8011db8:	b943      	cbnz	r3, 8011dcc <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011dba:	7b29      	ldrb	r1, [r5, #12]
 8011dbc:	4630      	mov	r0, r6
 8011dbe:	f7fc fe59 	bl	800ea74 <ucdr_serialize_bool>
 8011dc2:	7b2b      	ldrb	r3, [r5, #12]
 8011dc4:	4004      	ands	r4, r0
 8011dc6:	b93b      	cbnz	r3, 8011dd8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011dc8:	4620      	mov	r0, r4
 8011dca:	bd70      	pop	{r4, r5, r6, pc}
 8011dcc:	68a9      	ldr	r1, [r5, #8]
 8011dce:	4630      	mov	r0, r6
 8011dd0:	f004 fa7a 	bl	80162c8 <ucdr_serialize_string>
 8011dd4:	4004      	ands	r4, r0
 8011dd6:	e7f0      	b.n	8011dba <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011dd8:	6929      	ldr	r1, [r5, #16]
 8011dda:	4630      	mov	r0, r6
 8011ddc:	f004 fa74 	bl	80162c8 <ucdr_serialize_string>
 8011de0:	4004      	ands	r4, r0
 8011de2:	b2e4      	uxtb	r4, r4
 8011de4:	4620      	mov	r0, r4
 8011de6:	bd70      	pop	{r4, r5, r6, pc}

08011de8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dec:	460c      	mov	r4, r1
 8011dee:	7809      	ldrb	r1, [r1, #0]
 8011df0:	4606      	mov	r6, r0
 8011df2:	f7fc fe3f 	bl	800ea74 <ucdr_serialize_bool>
 8011df6:	7823      	ldrb	r3, [r4, #0]
 8011df8:	4605      	mov	r5, r0
 8011dfa:	b96b      	cbnz	r3, 8011e18 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011dfc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8011e00:	4630      	mov	r0, r6
 8011e02:	f7fc fe37 	bl	800ea74 <ucdr_serialize_bool>
 8011e06:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011e0a:	4005      	ands	r5, r0
 8011e0c:	b2ed      	uxtb	r5, r5
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d169      	bne.n	8011ee6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011e12:	4628      	mov	r0, r5
 8011e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e18:	6861      	ldr	r1, [r4, #4]
 8011e1a:	4630      	mov	r0, r6
 8011e1c:	f7fd f870 	bl	800ef00 <ucdr_serialize_uint32_t>
 8011e20:	6863      	ldr	r3, [r4, #4]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d06b      	beq.n	8011efe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011e26:	2800      	cmp	r0, #0
 8011e28:	d067      	beq.n	8011efa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e2a:	68a1      	ldr	r1, [r4, #8]
 8011e2c:	4630      	mov	r0, r6
 8011e2e:	f004 fa4b 	bl	80162c8 <ucdr_serialize_string>
 8011e32:	6863      	ldr	r3, [r4, #4]
 8011e34:	2b01      	cmp	r3, #1
 8011e36:	d953      	bls.n	8011ee0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e38:	2800      	cmp	r0, #0
 8011e3a:	d05e      	beq.n	8011efa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e3c:	68e1      	ldr	r1, [r4, #12]
 8011e3e:	4630      	mov	r0, r6
 8011e40:	f004 fa42 	bl	80162c8 <ucdr_serialize_string>
 8011e44:	6863      	ldr	r3, [r4, #4]
 8011e46:	2b02      	cmp	r3, #2
 8011e48:	d94a      	bls.n	8011ee0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e4a:	2800      	cmp	r0, #0
 8011e4c:	d055      	beq.n	8011efa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e4e:	6921      	ldr	r1, [r4, #16]
 8011e50:	4630      	mov	r0, r6
 8011e52:	f004 fa39 	bl	80162c8 <ucdr_serialize_string>
 8011e56:	6863      	ldr	r3, [r4, #4]
 8011e58:	2b03      	cmp	r3, #3
 8011e5a:	d941      	bls.n	8011ee0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e5c:	2800      	cmp	r0, #0
 8011e5e:	d04c      	beq.n	8011efa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e60:	6961      	ldr	r1, [r4, #20]
 8011e62:	4630      	mov	r0, r6
 8011e64:	f004 fa30 	bl	80162c8 <ucdr_serialize_string>
 8011e68:	6863      	ldr	r3, [r4, #4]
 8011e6a:	2b04      	cmp	r3, #4
 8011e6c:	d938      	bls.n	8011ee0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e6e:	2800      	cmp	r0, #0
 8011e70:	d043      	beq.n	8011efa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e72:	69a1      	ldr	r1, [r4, #24]
 8011e74:	4630      	mov	r0, r6
 8011e76:	f004 fa27 	bl	80162c8 <ucdr_serialize_string>
 8011e7a:	6863      	ldr	r3, [r4, #4]
 8011e7c:	2b05      	cmp	r3, #5
 8011e7e:	d92f      	bls.n	8011ee0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e80:	2800      	cmp	r0, #0
 8011e82:	d03a      	beq.n	8011efa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e84:	69e1      	ldr	r1, [r4, #28]
 8011e86:	4630      	mov	r0, r6
 8011e88:	f004 fa1e 	bl	80162c8 <ucdr_serialize_string>
 8011e8c:	6863      	ldr	r3, [r4, #4]
 8011e8e:	2b06      	cmp	r3, #6
 8011e90:	d926      	bls.n	8011ee0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e92:	b390      	cbz	r0, 8011efa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e94:	6a21      	ldr	r1, [r4, #32]
 8011e96:	4630      	mov	r0, r6
 8011e98:	f004 fa16 	bl	80162c8 <ucdr_serialize_string>
 8011e9c:	6863      	ldr	r3, [r4, #4]
 8011e9e:	2b07      	cmp	r3, #7
 8011ea0:	d91e      	bls.n	8011ee0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011ea2:	b350      	cbz	r0, 8011efa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011ea4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	f004 fa0e 	bl	80162c8 <ucdr_serialize_string>
 8011eac:	6863      	ldr	r3, [r4, #4]
 8011eae:	2b08      	cmp	r3, #8
 8011eb0:	d916      	bls.n	8011ee0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011eb2:	b310      	cbz	r0, 8011efa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011eb4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	f004 fa06 	bl	80162c8 <ucdr_serialize_string>
 8011ebc:	6863      	ldr	r3, [r4, #4]
 8011ebe:	2b09      	cmp	r3, #9
 8011ec0:	d90e      	bls.n	8011ee0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011ec2:	b1d0      	cbz	r0, 8011efa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011ec4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8011ec8:	2709      	movs	r7, #9
 8011eca:	e000      	b.n	8011ece <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011ecc:	b1a8      	cbz	r0, 8011efa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011ece:	f858 1b04 	ldr.w	r1, [r8], #4
 8011ed2:	4630      	mov	r0, r6
 8011ed4:	f004 f9f8 	bl	80162c8 <ucdr_serialize_string>
 8011ed8:	6862      	ldr	r2, [r4, #4]
 8011eda:	3701      	adds	r7, #1
 8011edc:	4297      	cmp	r7, r2
 8011ede:	d3f5      	bcc.n	8011ecc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011ee0:	4005      	ands	r5, r0
 8011ee2:	b2ed      	uxtb	r5, r5
 8011ee4:	e78a      	b.n	8011dfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011ee6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011ee8:	4630      	mov	r0, r6
 8011eea:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011eee:	f004 f9bf 	bl	8016270 <ucdr_serialize_sequence_uint8_t>
 8011ef2:	4005      	ands	r5, r0
 8011ef4:	4628      	mov	r0, r5
 8011ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011efa:	2500      	movs	r5, #0
 8011efc:	e77e      	b.n	8011dfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011efe:	4028      	ands	r0, r5
 8011f00:	b2c5      	uxtb	r5, r0
 8011f02:	e77b      	b.n	8011dfc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011f04 <uxr_serialize_OBJK_Publisher_Binary>:
 8011f04:	b570      	push	{r4, r5, r6, lr}
 8011f06:	460d      	mov	r5, r1
 8011f08:	7809      	ldrb	r1, [r1, #0]
 8011f0a:	4606      	mov	r6, r0
 8011f0c:	f7fc fdb2 	bl	800ea74 <ucdr_serialize_bool>
 8011f10:	782b      	ldrb	r3, [r5, #0]
 8011f12:	4604      	mov	r4, r0
 8011f14:	b94b      	cbnz	r3, 8011f2a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011f16:	7a29      	ldrb	r1, [r5, #8]
 8011f18:	4630      	mov	r0, r6
 8011f1a:	f7fc fdab 	bl	800ea74 <ucdr_serialize_bool>
 8011f1e:	7a2b      	ldrb	r3, [r5, #8]
 8011f20:	4004      	ands	r4, r0
 8011f22:	b2e4      	uxtb	r4, r4
 8011f24:	b943      	cbnz	r3, 8011f38 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011f26:	4620      	mov	r0, r4
 8011f28:	bd70      	pop	{r4, r5, r6, pc}
 8011f2a:	6869      	ldr	r1, [r5, #4]
 8011f2c:	4630      	mov	r0, r6
 8011f2e:	f004 f9cb 	bl	80162c8 <ucdr_serialize_string>
 8011f32:	4004      	ands	r4, r0
 8011f34:	b2e4      	uxtb	r4, r4
 8011f36:	e7ee      	b.n	8011f16 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011f38:	f105 010c 	add.w	r1, r5, #12
 8011f3c:	4630      	mov	r0, r6
 8011f3e:	f7ff ff53 	bl	8011de8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011f42:	4004      	ands	r4, r0
 8011f44:	4620      	mov	r0, r4
 8011f46:	bd70      	pop	{r4, r5, r6, pc}

08011f48 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8011f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f4c:	460c      	mov	r4, r1
 8011f4e:	7809      	ldrb	r1, [r1, #0]
 8011f50:	4606      	mov	r6, r0
 8011f52:	f7fc fd8f 	bl	800ea74 <ucdr_serialize_bool>
 8011f56:	7823      	ldrb	r3, [r4, #0]
 8011f58:	4605      	mov	r5, r0
 8011f5a:	b96b      	cbnz	r3, 8011f78 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8011f5c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8011f60:	4630      	mov	r0, r6
 8011f62:	f7fc fd87 	bl	800ea74 <ucdr_serialize_bool>
 8011f66:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011f6a:	4005      	ands	r5, r0
 8011f6c:	b2ed      	uxtb	r5, r5
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d169      	bne.n	8012046 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8011f72:	4628      	mov	r0, r5
 8011f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f78:	6861      	ldr	r1, [r4, #4]
 8011f7a:	4630      	mov	r0, r6
 8011f7c:	f7fc ffc0 	bl	800ef00 <ucdr_serialize_uint32_t>
 8011f80:	6863      	ldr	r3, [r4, #4]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d06b      	beq.n	801205e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d067      	beq.n	801205a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f8a:	68a1      	ldr	r1, [r4, #8]
 8011f8c:	4630      	mov	r0, r6
 8011f8e:	f004 f99b 	bl	80162c8 <ucdr_serialize_string>
 8011f92:	6863      	ldr	r3, [r4, #4]
 8011f94:	2b01      	cmp	r3, #1
 8011f96:	d953      	bls.n	8012040 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d05e      	beq.n	801205a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f9c:	68e1      	ldr	r1, [r4, #12]
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	f004 f992 	bl	80162c8 <ucdr_serialize_string>
 8011fa4:	6863      	ldr	r3, [r4, #4]
 8011fa6:	2b02      	cmp	r3, #2
 8011fa8:	d94a      	bls.n	8012040 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011faa:	2800      	cmp	r0, #0
 8011fac:	d055      	beq.n	801205a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011fae:	6921      	ldr	r1, [r4, #16]
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	f004 f989 	bl	80162c8 <ucdr_serialize_string>
 8011fb6:	6863      	ldr	r3, [r4, #4]
 8011fb8:	2b03      	cmp	r3, #3
 8011fba:	d941      	bls.n	8012040 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011fbc:	2800      	cmp	r0, #0
 8011fbe:	d04c      	beq.n	801205a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011fc0:	6961      	ldr	r1, [r4, #20]
 8011fc2:	4630      	mov	r0, r6
 8011fc4:	f004 f980 	bl	80162c8 <ucdr_serialize_string>
 8011fc8:	6863      	ldr	r3, [r4, #4]
 8011fca:	2b04      	cmp	r3, #4
 8011fcc:	d938      	bls.n	8012040 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	d043      	beq.n	801205a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011fd2:	69a1      	ldr	r1, [r4, #24]
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	f004 f977 	bl	80162c8 <ucdr_serialize_string>
 8011fda:	6863      	ldr	r3, [r4, #4]
 8011fdc:	2b05      	cmp	r3, #5
 8011fde:	d92f      	bls.n	8012040 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011fe0:	2800      	cmp	r0, #0
 8011fe2:	d03a      	beq.n	801205a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011fe4:	69e1      	ldr	r1, [r4, #28]
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	f004 f96e 	bl	80162c8 <ucdr_serialize_string>
 8011fec:	6863      	ldr	r3, [r4, #4]
 8011fee:	2b06      	cmp	r3, #6
 8011ff0:	d926      	bls.n	8012040 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011ff2:	b390      	cbz	r0, 801205a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011ff4:	6a21      	ldr	r1, [r4, #32]
 8011ff6:	4630      	mov	r0, r6
 8011ff8:	f004 f966 	bl	80162c8 <ucdr_serialize_string>
 8011ffc:	6863      	ldr	r3, [r4, #4]
 8011ffe:	2b07      	cmp	r3, #7
 8012000:	d91e      	bls.n	8012040 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012002:	b350      	cbz	r0, 801205a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012004:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012006:	4630      	mov	r0, r6
 8012008:	f004 f95e 	bl	80162c8 <ucdr_serialize_string>
 801200c:	6863      	ldr	r3, [r4, #4]
 801200e:	2b08      	cmp	r3, #8
 8012010:	d916      	bls.n	8012040 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012012:	b310      	cbz	r0, 801205a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012014:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012016:	4630      	mov	r0, r6
 8012018:	f004 f956 	bl	80162c8 <ucdr_serialize_string>
 801201c:	6863      	ldr	r3, [r4, #4]
 801201e:	2b09      	cmp	r3, #9
 8012020:	d90e      	bls.n	8012040 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012022:	b1d0      	cbz	r0, 801205a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012024:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012028:	2709      	movs	r7, #9
 801202a:	e000      	b.n	801202e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801202c:	b1a8      	cbz	r0, 801205a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801202e:	f858 1b04 	ldr.w	r1, [r8], #4
 8012032:	4630      	mov	r0, r6
 8012034:	f004 f948 	bl	80162c8 <ucdr_serialize_string>
 8012038:	6862      	ldr	r2, [r4, #4]
 801203a:	3701      	adds	r7, #1
 801203c:	4297      	cmp	r7, r2
 801203e:	d3f5      	bcc.n	801202c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012040:	4005      	ands	r5, r0
 8012042:	b2ed      	uxtb	r5, r5
 8012044:	e78a      	b.n	8011f5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012046:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012048:	4630      	mov	r0, r6
 801204a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801204e:	f004 f90f 	bl	8016270 <ucdr_serialize_sequence_uint8_t>
 8012052:	4005      	ands	r5, r0
 8012054:	4628      	mov	r0, r5
 8012056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801205a:	2500      	movs	r5, #0
 801205c:	e77e      	b.n	8011f5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801205e:	4028      	ands	r0, r5
 8012060:	b2c5      	uxtb	r5, r0
 8012062:	e77b      	b.n	8011f5c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012064 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012064:	b570      	push	{r4, r5, r6, lr}
 8012066:	460d      	mov	r5, r1
 8012068:	7809      	ldrb	r1, [r1, #0]
 801206a:	4606      	mov	r6, r0
 801206c:	f7fc fd02 	bl	800ea74 <ucdr_serialize_bool>
 8012070:	782b      	ldrb	r3, [r5, #0]
 8012072:	4604      	mov	r4, r0
 8012074:	b94b      	cbnz	r3, 801208a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012076:	7a29      	ldrb	r1, [r5, #8]
 8012078:	4630      	mov	r0, r6
 801207a:	f7fc fcfb 	bl	800ea74 <ucdr_serialize_bool>
 801207e:	7a2b      	ldrb	r3, [r5, #8]
 8012080:	4004      	ands	r4, r0
 8012082:	b2e4      	uxtb	r4, r4
 8012084:	b943      	cbnz	r3, 8012098 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012086:	4620      	mov	r0, r4
 8012088:	bd70      	pop	{r4, r5, r6, pc}
 801208a:	6869      	ldr	r1, [r5, #4]
 801208c:	4630      	mov	r0, r6
 801208e:	f004 f91b 	bl	80162c8 <ucdr_serialize_string>
 8012092:	4004      	ands	r4, r0
 8012094:	b2e4      	uxtb	r4, r4
 8012096:	e7ee      	b.n	8012076 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012098:	f105 010c 	add.w	r1, r5, #12
 801209c:	4630      	mov	r0, r6
 801209e:	f7ff ff53 	bl	8011f48 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80120a2:	4004      	ands	r4, r0
 80120a4:	4620      	mov	r0, r4
 80120a6:	bd70      	pop	{r4, r5, r6, pc}

080120a8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80120a8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80120ac:	4688      	mov	r8, r1
 80120ae:	8809      	ldrh	r1, [r1, #0]
 80120b0:	4681      	mov	r9, r0
 80120b2:	f7fc fd3b 	bl	800eb2c <ucdr_serialize_uint16_t>
 80120b6:	f898 1002 	ldrb.w	r1, [r8, #2]
 80120ba:	4606      	mov	r6, r0
 80120bc:	4648      	mov	r0, r9
 80120be:	f7fc fcd9 	bl	800ea74 <ucdr_serialize_bool>
 80120c2:	f898 3002 	ldrb.w	r3, [r8, #2]
 80120c6:	4030      	ands	r0, r6
 80120c8:	b2c5      	uxtb	r5, r0
 80120ca:	b9eb      	cbnz	r3, 8012108 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80120cc:	f898 1006 	ldrb.w	r1, [r8, #6]
 80120d0:	4648      	mov	r0, r9
 80120d2:	f7fc fccf 	bl	800ea74 <ucdr_serialize_bool>
 80120d6:	f898 3006 	ldrb.w	r3, [r8, #6]
 80120da:	4005      	ands	r5, r0
 80120dc:	bb7b      	cbnz	r3, 801213e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80120de:	f898 100c 	ldrb.w	r1, [r8, #12]
 80120e2:	4648      	mov	r0, r9
 80120e4:	f7fc fcc6 	bl	800ea74 <ucdr_serialize_bool>
 80120e8:	f898 300c 	ldrb.w	r3, [r8, #12]
 80120ec:	4005      	ands	r5, r0
 80120ee:	b9f3      	cbnz	r3, 801212e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80120f0:	f898 1014 	ldrb.w	r1, [r8, #20]
 80120f4:	4648      	mov	r0, r9
 80120f6:	f7fc fcbd 	bl	800ea74 <ucdr_serialize_bool>
 80120fa:	f898 3014 	ldrb.w	r3, [r8, #20]
 80120fe:	4005      	ands	r5, r0
 8012100:	b94b      	cbnz	r3, 8012116 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012102:	4628      	mov	r0, r5
 8012104:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012108:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801210c:	4648      	mov	r0, r9
 801210e:	f7fc fd0d 	bl	800eb2c <ucdr_serialize_uint16_t>
 8012112:	4005      	ands	r5, r0
 8012114:	e7da      	b.n	80120cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012116:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801211a:	4648      	mov	r0, r9
 801211c:	f108 011c 	add.w	r1, r8, #28
 8012120:	f004 f8a6 	bl	8016270 <ucdr_serialize_sequence_uint8_t>
 8012124:	4028      	ands	r0, r5
 8012126:	b2c5      	uxtb	r5, r0
 8012128:	4628      	mov	r0, r5
 801212a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801212e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012132:	4648      	mov	r0, r9
 8012134:	f7fc fee4 	bl	800ef00 <ucdr_serialize_uint32_t>
 8012138:	4028      	ands	r0, r5
 801213a:	b2c5      	uxtb	r5, r0
 801213c:	e7d8      	b.n	80120f0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801213e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012142:	4648      	mov	r0, r9
 8012144:	f7fc fedc 	bl	800ef00 <ucdr_serialize_uint32_t>
 8012148:	4028      	ands	r0, r5
 801214a:	b2c5      	uxtb	r5, r0
 801214c:	e7c7      	b.n	80120de <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801214e:	bf00      	nop

08012150 <uxr_serialize_OBJK_DataReader_Binary>:
 8012150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012152:	2202      	movs	r2, #2
 8012154:	460c      	mov	r4, r1
 8012156:	4606      	mov	r6, r0
 8012158:	f003 ff96 	bl	8016088 <ucdr_serialize_array_uint8_t>
 801215c:	78a1      	ldrb	r1, [r4, #2]
 801215e:	4605      	mov	r5, r0
 8012160:	4630      	mov	r0, r6
 8012162:	f7fc fc87 	bl	800ea74 <ucdr_serialize_bool>
 8012166:	78a3      	ldrb	r3, [r4, #2]
 8012168:	4005      	ands	r5, r0
 801216a:	b2ed      	uxtb	r5, r5
 801216c:	b90b      	cbnz	r3, 8012172 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801216e:	4628      	mov	r0, r5
 8012170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012172:	f104 0108 	add.w	r1, r4, #8
 8012176:	4630      	mov	r0, r6
 8012178:	f7ff ff96 	bl	80120a8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801217c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012180:	4607      	mov	r7, r0
 8012182:	4630      	mov	r0, r6
 8012184:	f7fc fc76 	bl	800ea74 <ucdr_serialize_bool>
 8012188:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801218c:	4038      	ands	r0, r7
 801218e:	b2c7      	uxtb	r7, r0
 8012190:	b95b      	cbnz	r3, 80121aa <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012192:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8012196:	4630      	mov	r0, r6
 8012198:	f7fc fc6c 	bl	800ea74 <ucdr_serialize_bool>
 801219c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80121a0:	4007      	ands	r7, r0
 80121a2:	b94b      	cbnz	r3, 80121b8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80121a4:	403d      	ands	r5, r7
 80121a6:	4628      	mov	r0, r5
 80121a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121aa:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80121ae:	4630      	mov	r0, r6
 80121b0:	f7fd f8fc 	bl	800f3ac <ucdr_serialize_uint64_t>
 80121b4:	4007      	ands	r7, r0
 80121b6:	e7ec      	b.n	8012192 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80121b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80121ba:	4630      	mov	r0, r6
 80121bc:	f004 f884 	bl	80162c8 <ucdr_serialize_string>
 80121c0:	4007      	ands	r7, r0
 80121c2:	b2ff      	uxtb	r7, r7
 80121c4:	e7ee      	b.n	80121a4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80121c6:	bf00      	nop

080121c8 <uxr_serialize_OBJK_DataWriter_Binary>:
 80121c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ca:	2202      	movs	r2, #2
 80121cc:	460d      	mov	r5, r1
 80121ce:	4606      	mov	r6, r0
 80121d0:	f003 ff5a 	bl	8016088 <ucdr_serialize_array_uint8_t>
 80121d4:	78a9      	ldrb	r1, [r5, #2]
 80121d6:	4604      	mov	r4, r0
 80121d8:	4630      	mov	r0, r6
 80121da:	f7fc fc4b 	bl	800ea74 <ucdr_serialize_bool>
 80121de:	78ab      	ldrb	r3, [r5, #2]
 80121e0:	4004      	ands	r4, r0
 80121e2:	b2e4      	uxtb	r4, r4
 80121e4:	b90b      	cbnz	r3, 80121ea <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80121e6:	4620      	mov	r0, r4
 80121e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121ea:	f105 0108 	add.w	r1, r5, #8
 80121ee:	4630      	mov	r0, r6
 80121f0:	f7ff ff5a 	bl	80120a8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80121f4:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80121f8:	4607      	mov	r7, r0
 80121fa:	4630      	mov	r0, r6
 80121fc:	f7fc fc3a 	bl	800ea74 <ucdr_serialize_bool>
 8012200:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012204:	4007      	ands	r7, r0
 8012206:	b2ff      	uxtb	r7, r7
 8012208:	b913      	cbnz	r3, 8012210 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801220a:	403c      	ands	r4, r7
 801220c:	4620      	mov	r0, r4
 801220e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012210:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8012214:	4630      	mov	r0, r6
 8012216:	f7fd f8c9 	bl	800f3ac <ucdr_serialize_uint64_t>
 801221a:	4007      	ands	r7, r0
 801221c:	e7f5      	b.n	801220a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801221e:	bf00      	nop

08012220 <uxr_deserialize_ObjectVariant>:
 8012220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012222:	4605      	mov	r5, r0
 8012224:	460e      	mov	r6, r1
 8012226:	f7fc fc6b 	bl	800eb00 <ucdr_deserialize_uint8_t>
 801222a:	b320      	cbz	r0, 8012276 <uxr_deserialize_ObjectVariant+0x56>
 801222c:	7833      	ldrb	r3, [r6, #0]
 801222e:	3b01      	subs	r3, #1
 8012230:	4604      	mov	r4, r0
 8012232:	2b0d      	cmp	r3, #13
 8012234:	d81d      	bhi.n	8012272 <uxr_deserialize_ObjectVariant+0x52>
 8012236:	e8df f003 	tbb	[pc, r3]
 801223a:	2107      	.short	0x2107
 801223c:	21214b4b 	.word	0x21214b4b
 8012240:	381c2121 	.word	0x381c2121
 8012244:	876a3838 	.word	0x876a3838
 8012248:	1d31      	adds	r1, r6, #4
 801224a:	4628      	mov	r0, r5
 801224c:	f7fc fc58 	bl	800eb00 <ucdr_deserialize_uint8_t>
 8012250:	4607      	mov	r7, r0
 8012252:	b138      	cbz	r0, 8012264 <uxr_deserialize_ObjectVariant+0x44>
 8012254:	7933      	ldrb	r3, [r6, #4]
 8012256:	2b02      	cmp	r3, #2
 8012258:	d07c      	beq.n	8012354 <uxr_deserialize_ObjectVariant+0x134>
 801225a:	2b03      	cmp	r3, #3
 801225c:	f000 8082 	beq.w	8012364 <uxr_deserialize_ObjectVariant+0x144>
 8012260:	2b01      	cmp	r3, #1
 8012262:	d077      	beq.n	8012354 <uxr_deserialize_ObjectVariant+0x134>
 8012264:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012268:	4628      	mov	r0, r5
 801226a:	f7fd f9ef 	bl	800f64c <ucdr_deserialize_int16_t>
 801226e:	4038      	ands	r0, r7
 8012270:	b2c4      	uxtb	r4, r0
 8012272:	4620      	mov	r0, r4
 8012274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012276:	2400      	movs	r4, #0
 8012278:	4620      	mov	r0, r4
 801227a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801227c:	1d31      	adds	r1, r6, #4
 801227e:	4628      	mov	r0, r5
 8012280:	f7fc fc3e 	bl	800eb00 <ucdr_deserialize_uint8_t>
 8012284:	4607      	mov	r7, r0
 8012286:	b130      	cbz	r0, 8012296 <uxr_deserialize_ObjectVariant+0x76>
 8012288:	7933      	ldrb	r3, [r6, #4]
 801228a:	2b02      	cmp	r3, #2
 801228c:	d037      	beq.n	80122fe <uxr_deserialize_ObjectVariant+0xde>
 801228e:	2b03      	cmp	r3, #3
 8012290:	d02a      	beq.n	80122e8 <uxr_deserialize_ObjectVariant+0xc8>
 8012292:	2b01      	cmp	r3, #1
 8012294:	d033      	beq.n	80122fe <uxr_deserialize_ObjectVariant+0xde>
 8012296:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801229a:	4628      	mov	r0, r5
 801229c:	2202      	movs	r2, #2
 801229e:	f003 ff57 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 80122a2:	4038      	ands	r0, r7
 80122a4:	b2c4      	uxtb	r4, r0
 80122a6:	4620      	mov	r0, r4
 80122a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122aa:	1d31      	adds	r1, r6, #4
 80122ac:	4628      	mov	r0, r5
 80122ae:	f7fc fc27 	bl	800eb00 <ucdr_deserialize_uint8_t>
 80122b2:	2800      	cmp	r0, #0
 80122b4:	d0df      	beq.n	8012276 <uxr_deserialize_ObjectVariant+0x56>
 80122b6:	7933      	ldrb	r3, [r6, #4]
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	d001      	beq.n	80122c0 <uxr_deserialize_ObjectVariant+0xa0>
 80122bc:	2b02      	cmp	r3, #2
 80122be:	d1d8      	bne.n	8012272 <uxr_deserialize_ObjectVariant+0x52>
 80122c0:	68b1      	ldr	r1, [r6, #8]
 80122c2:	4628      	mov	r0, r5
 80122c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80122cc:	f004 b80c 	b.w	80162e8 <ucdr_deserialize_string>
 80122d0:	1d31      	adds	r1, r6, #4
 80122d2:	4628      	mov	r0, r5
 80122d4:	f7fc fc14 	bl	800eb00 <ucdr_deserialize_uint8_t>
 80122d8:	4607      	mov	r7, r0
 80122da:	2800      	cmp	r0, #0
 80122dc:	d0db      	beq.n	8012296 <uxr_deserialize_ObjectVariant+0x76>
 80122de:	7933      	ldrb	r3, [r6, #4]
 80122e0:	2b02      	cmp	r3, #2
 80122e2:	d00c      	beq.n	80122fe <uxr_deserialize_ObjectVariant+0xde>
 80122e4:	2b03      	cmp	r3, #3
 80122e6:	d1d6      	bne.n	8012296 <uxr_deserialize_ObjectVariant+0x76>
 80122e8:	f106 0308 	add.w	r3, r6, #8
 80122ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122f0:	f106 010c 	add.w	r1, r6, #12
 80122f4:	4628      	mov	r0, r5
 80122f6:	f003 ffcd 	bl	8016294 <ucdr_deserialize_sequence_uint8_t>
 80122fa:	4607      	mov	r7, r0
 80122fc:	e7cb      	b.n	8012296 <uxr_deserialize_ObjectVariant+0x76>
 80122fe:	68b1      	ldr	r1, [r6, #8]
 8012300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012304:	4628      	mov	r0, r5
 8012306:	f003 ffef 	bl	80162e8 <ucdr_deserialize_string>
 801230a:	4607      	mov	r7, r0
 801230c:	e7c3      	b.n	8012296 <uxr_deserialize_ObjectVariant+0x76>
 801230e:	2204      	movs	r2, #4
 8012310:	18b1      	adds	r1, r6, r2
 8012312:	4628      	mov	r0, r5
 8012314:	f003 ff1c 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8012318:	2202      	movs	r2, #2
 801231a:	4604      	mov	r4, r0
 801231c:	f106 0108 	add.w	r1, r6, #8
 8012320:	4628      	mov	r0, r5
 8012322:	f003 ff15 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8012326:	2202      	movs	r2, #2
 8012328:	4004      	ands	r4, r0
 801232a:	f106 010a 	add.w	r1, r6, #10
 801232e:	4628      	mov	r0, r5
 8012330:	f003 ff0e 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8012334:	b2e4      	uxtb	r4, r4
 8012336:	4603      	mov	r3, r0
 8012338:	f106 010c 	add.w	r1, r6, #12
 801233c:	4628      	mov	r0, r5
 801233e:	401c      	ands	r4, r3
 8012340:	f7fc fbae 	bl	800eaa0 <ucdr_deserialize_bool>
 8012344:	4004      	ands	r4, r0
 8012346:	e794      	b.n	8012272 <uxr_deserialize_ObjectVariant+0x52>
 8012348:	1d31      	adds	r1, r6, #4
 801234a:	4628      	mov	r0, r5
 801234c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012350:	f7ff bbd0 	b.w	8011af4 <uxr_deserialize_CLIENT_Representation>
 8012354:	68b1      	ldr	r1, [r6, #8]
 8012356:	f44f 7200 	mov.w	r2, #512	; 0x200
 801235a:	4628      	mov	r0, r5
 801235c:	f003 ffc4 	bl	80162e8 <ucdr_deserialize_string>
 8012360:	4607      	mov	r7, r0
 8012362:	e77f      	b.n	8012264 <uxr_deserialize_ObjectVariant+0x44>
 8012364:	f106 0308 	add.w	r3, r6, #8
 8012368:	f44f 7200 	mov.w	r2, #512	; 0x200
 801236c:	f106 010c 	add.w	r1, r6, #12
 8012370:	4628      	mov	r0, r5
 8012372:	f003 ff8f 	bl	8016294 <ucdr_deserialize_sequence_uint8_t>
 8012376:	4607      	mov	r7, r0
 8012378:	e774      	b.n	8012264 <uxr_deserialize_ObjectVariant+0x44>
 801237a:	bf00      	nop

0801237c <uxr_deserialize_BaseObjectRequest>:
 801237c:	b570      	push	{r4, r5, r6, lr}
 801237e:	2202      	movs	r2, #2
 8012380:	4605      	mov	r5, r0
 8012382:	460e      	mov	r6, r1
 8012384:	f003 fee4 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8012388:	1cb1      	adds	r1, r6, #2
 801238a:	4604      	mov	r4, r0
 801238c:	2202      	movs	r2, #2
 801238e:	4628      	mov	r0, r5
 8012390:	f003 fede 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8012394:	4020      	ands	r0, r4
 8012396:	b2c0      	uxtb	r0, r0
 8012398:	bd70      	pop	{r4, r5, r6, pc}
 801239a:	bf00      	nop

0801239c <uxr_serialize_AGENT_ActivityInfo>:
 801239c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123a0:	460e      	mov	r6, r1
 80123a2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80123a6:	4607      	mov	r7, r0
 80123a8:	f7fd f8d0 	bl	800f54c <ucdr_serialize_int16_t>
 80123ac:	6871      	ldr	r1, [r6, #4]
 80123ae:	4680      	mov	r8, r0
 80123b0:	4638      	mov	r0, r7
 80123b2:	f7fc fda5 	bl	800ef00 <ucdr_serialize_uint32_t>
 80123b6:	6873      	ldr	r3, [r6, #4]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d06a      	beq.n	8012492 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 80123bc:	b318      	cbz	r0, 8012406 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 80123be:	f106 0904 	add.w	r9, r6, #4
 80123c2:	2500      	movs	r5, #0
 80123c4:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80123c8:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 80123cc:	7a21      	ldrb	r1, [r4, #8]
 80123ce:	4638      	mov	r0, r7
 80123d0:	f7fc fb80 	bl	800ead4 <ucdr_serialize_uint8_t>
 80123d4:	2800      	cmp	r0, #0
 80123d6:	d051      	beq.n	801247c <uxr_serialize_AGENT_ActivityInfo+0xe0>
 80123d8:	7a23      	ldrb	r3, [r4, #8]
 80123da:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80123de:	00c9      	lsls	r1, r1, #3
 80123e0:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 80123e4:	2b03      	cmp	r3, #3
 80123e6:	d859      	bhi.n	801249c <uxr_serialize_AGENT_ActivityInfo+0x100>
 80123e8:	e8df f003 	tbb	[pc, r3]
 80123ec:	02122436 	.word	0x02122436
 80123f0:	4449      	add	r1, r9
 80123f2:	4638      	mov	r0, r7
 80123f4:	6889      	ldr	r1, [r1, #8]
 80123f6:	f003 ff67 	bl	80162c8 <ucdr_serialize_string>
 80123fa:	6873      	ldr	r3, [r6, #4]
 80123fc:	3501      	adds	r5, #1
 80123fe:	429d      	cmp	r5, r3
 8012400:	d240      	bcs.n	8012484 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 8012402:	2800      	cmp	r0, #0
 8012404:	d1de      	bne.n	80123c4 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8012406:	f04f 0800 	mov.w	r8, #0
 801240a:	4640      	mov	r0, r8
 801240c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012410:	3108      	adds	r1, #8
 8012412:	4449      	add	r1, r9
 8012414:	2210      	movs	r2, #16
 8012416:	4638      	mov	r0, r7
 8012418:	f003 fe36 	bl	8016088 <ucdr_serialize_array_uint8_t>
 801241c:	44aa      	add	sl, r5
 801241e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012422:	4604      	mov	r4, r0
 8012424:	f8da 101c 	ldr.w	r1, [sl, #28]
 8012428:	4638      	mov	r0, r7
 801242a:	f7fc fd69 	bl	800ef00 <ucdr_serialize_uint32_t>
 801242e:	4020      	ands	r0, r4
 8012430:	b2c0      	uxtb	r0, r0
 8012432:	e7e2      	b.n	80123fa <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012434:	3108      	adds	r1, #8
 8012436:	4449      	add	r1, r9
 8012438:	2204      	movs	r2, #4
 801243a:	4638      	mov	r0, r7
 801243c:	f003 fe24 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8012440:	44aa      	add	sl, r5
 8012442:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8012446:	4604      	mov	r4, r0
 8012448:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 801244c:	4638      	mov	r0, r7
 801244e:	f7fc fb6d 	bl	800eb2c <ucdr_serialize_uint16_t>
 8012452:	4020      	ands	r0, r4
 8012454:	b2c0      	uxtb	r0, r0
 8012456:	e7d0      	b.n	80123fa <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012458:	3108      	adds	r1, #8
 801245a:	4449      	add	r1, r9
 801245c:	2202      	movs	r2, #2
 801245e:	4638      	mov	r0, r7
 8012460:	f003 fe12 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8012464:	44aa      	add	sl, r5
 8012466:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801246a:	4604      	mov	r4, r0
 801246c:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8012470:	4638      	mov	r0, r7
 8012472:	f7fc fb2f 	bl	800ead4 <ucdr_serialize_uint8_t>
 8012476:	4020      	ands	r0, r4
 8012478:	b2c0      	uxtb	r0, r0
 801247a:	e7be      	b.n	80123fa <uxr_serialize_AGENT_ActivityInfo+0x5e>
 801247c:	6873      	ldr	r3, [r6, #4]
 801247e:	3501      	adds	r5, #1
 8012480:	429d      	cmp	r5, r3
 8012482:	d3c0      	bcc.n	8012406 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8012484:	ea08 0000 	and.w	r0, r8, r0
 8012488:	fa5f f880 	uxtb.w	r8, r0
 801248c:	4640      	mov	r0, r8
 801248e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012492:	ea08 0800 	and.w	r8, r8, r0
 8012496:	fa5f f888 	uxtb.w	r8, r8
 801249a:	e7b6      	b.n	801240a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 801249c:	6873      	ldr	r3, [r6, #4]
 801249e:	3501      	adds	r5, #1
 80124a0:	42ab      	cmp	r3, r5
 80124a2:	f104 0418 	add.w	r4, r4, #24
 80124a6:	d891      	bhi.n	80123cc <uxr_serialize_AGENT_ActivityInfo+0x30>
 80124a8:	e7af      	b.n	801240a <uxr_serialize_AGENT_ActivityInfo+0x6e>
 80124aa:	bf00      	nop

080124ac <uxr_serialize_ActivityInfoVariant>:
 80124ac:	b570      	push	{r4, r5, r6, lr}
 80124ae:	460d      	mov	r5, r1
 80124b0:	7809      	ldrb	r1, [r1, #0]
 80124b2:	4606      	mov	r6, r0
 80124b4:	f7fc fb0e 	bl	800ead4 <ucdr_serialize_uint8_t>
 80124b8:	b130      	cbz	r0, 80124c8 <uxr_serialize_ActivityInfoVariant+0x1c>
 80124ba:	782b      	ldrb	r3, [r5, #0]
 80124bc:	2b06      	cmp	r3, #6
 80124be:	d019      	beq.n	80124f4 <uxr_serialize_ActivityInfoVariant+0x48>
 80124c0:	2b0d      	cmp	r3, #13
 80124c2:	d010      	beq.n	80124e6 <uxr_serialize_ActivityInfoVariant+0x3a>
 80124c4:	2b05      	cmp	r3, #5
 80124c6:	d000      	beq.n	80124ca <uxr_serialize_ActivityInfoVariant+0x1e>
 80124c8:	bd70      	pop	{r4, r5, r6, pc}
 80124ca:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80124ce:	4630      	mov	r0, r6
 80124d0:	f7fd f83c 	bl	800f54c <ucdr_serialize_int16_t>
 80124d4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80124d8:	4604      	mov	r4, r0
 80124da:	4630      	mov	r0, r6
 80124dc:	f7fc ff66 	bl	800f3ac <ucdr_serialize_uint64_t>
 80124e0:	4020      	ands	r0, r4
 80124e2:	b2c0      	uxtb	r0, r0
 80124e4:	bd70      	pop	{r4, r5, r6, pc}
 80124e6:	f105 0108 	add.w	r1, r5, #8
 80124ea:	4630      	mov	r0, r6
 80124ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124f0:	f7ff bf54 	b.w	801239c <uxr_serialize_AGENT_ActivityInfo>
 80124f4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80124f8:	4630      	mov	r0, r6
 80124fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124fe:	f7fd b825 	b.w	800f54c <ucdr_serialize_int16_t>
 8012502:	bf00      	nop

08012504 <uxr_deserialize_BaseObjectReply>:
 8012504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012508:	2202      	movs	r2, #2
 801250a:	4606      	mov	r6, r0
 801250c:	460f      	mov	r7, r1
 801250e:	f003 fe1f 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8012512:	2202      	movs	r2, #2
 8012514:	1cb9      	adds	r1, r7, #2
 8012516:	4605      	mov	r5, r0
 8012518:	4630      	mov	r0, r6
 801251a:	f003 fe19 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 801251e:	1d39      	adds	r1, r7, #4
 8012520:	4680      	mov	r8, r0
 8012522:	4630      	mov	r0, r6
 8012524:	f7fc faec 	bl	800eb00 <ucdr_deserialize_uint8_t>
 8012528:	1d79      	adds	r1, r7, #5
 801252a:	4604      	mov	r4, r0
 801252c:	4630      	mov	r0, r6
 801252e:	f7fc fae7 	bl	800eb00 <ucdr_deserialize_uint8_t>
 8012532:	ea05 0508 	and.w	r5, r5, r8
 8012536:	402c      	ands	r4, r5
 8012538:	4020      	ands	r0, r4
 801253a:	b2c0      	uxtb	r0, r0
 801253c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012540 <uxr_serialize_ReadSpecification>:
 8012540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012544:	460e      	mov	r6, r1
 8012546:	7809      	ldrb	r1, [r1, #0]
 8012548:	4607      	mov	r7, r0
 801254a:	f7fc fac3 	bl	800ead4 <ucdr_serialize_uint8_t>
 801254e:	7871      	ldrb	r1, [r6, #1]
 8012550:	4604      	mov	r4, r0
 8012552:	4638      	mov	r0, r7
 8012554:	f7fc fabe 	bl	800ead4 <ucdr_serialize_uint8_t>
 8012558:	78b1      	ldrb	r1, [r6, #2]
 801255a:	4004      	ands	r4, r0
 801255c:	4638      	mov	r0, r7
 801255e:	f7fc fa89 	bl	800ea74 <ucdr_serialize_bool>
 8012562:	78b3      	ldrb	r3, [r6, #2]
 8012564:	b2e4      	uxtb	r4, r4
 8012566:	4004      	ands	r4, r0
 8012568:	b94b      	cbnz	r3, 801257e <uxr_serialize_ReadSpecification+0x3e>
 801256a:	7a31      	ldrb	r1, [r6, #8]
 801256c:	4638      	mov	r0, r7
 801256e:	f7fc fa81 	bl	800ea74 <ucdr_serialize_bool>
 8012572:	7a33      	ldrb	r3, [r6, #8]
 8012574:	4004      	ands	r4, r0
 8012576:	b943      	cbnz	r3, 801258a <uxr_serialize_ReadSpecification+0x4a>
 8012578:	4620      	mov	r0, r4
 801257a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801257e:	6871      	ldr	r1, [r6, #4]
 8012580:	4638      	mov	r0, r7
 8012582:	f003 fea1 	bl	80162c8 <ucdr_serialize_string>
 8012586:	4004      	ands	r4, r0
 8012588:	e7ef      	b.n	801256a <uxr_serialize_ReadSpecification+0x2a>
 801258a:	8971      	ldrh	r1, [r6, #10]
 801258c:	4638      	mov	r0, r7
 801258e:	f7fc facd 	bl	800eb2c <ucdr_serialize_uint16_t>
 8012592:	89b1      	ldrh	r1, [r6, #12]
 8012594:	4605      	mov	r5, r0
 8012596:	4638      	mov	r0, r7
 8012598:	f7fc fac8 	bl	800eb2c <ucdr_serialize_uint16_t>
 801259c:	89f1      	ldrh	r1, [r6, #14]
 801259e:	4005      	ands	r5, r0
 80125a0:	4638      	mov	r0, r7
 80125a2:	f7fc fac3 	bl	800eb2c <ucdr_serialize_uint16_t>
 80125a6:	8a31      	ldrh	r1, [r6, #16]
 80125a8:	4680      	mov	r8, r0
 80125aa:	4638      	mov	r0, r7
 80125ac:	f7fc fabe 	bl	800eb2c <ucdr_serialize_uint16_t>
 80125b0:	b2ed      	uxtb	r5, r5
 80125b2:	4025      	ands	r5, r4
 80125b4:	ea08 0505 	and.w	r5, r8, r5
 80125b8:	ea00 0405 	and.w	r4, r0, r5
 80125bc:	4620      	mov	r0, r4
 80125be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125c2:	bf00      	nop

080125c4 <uxr_serialize_CREATE_CLIENT_Payload>:
 80125c4:	f7ff ba3a 	b.w	8011a3c <uxr_serialize_CLIENT_Representation>

080125c8 <uxr_serialize_CREATE_Payload>:
 80125c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ca:	2202      	movs	r2, #2
 80125cc:	4606      	mov	r6, r0
 80125ce:	460d      	mov	r5, r1
 80125d0:	f003 fd5a 	bl	8016088 <ucdr_serialize_array_uint8_t>
 80125d4:	1ca9      	adds	r1, r5, #2
 80125d6:	4604      	mov	r4, r0
 80125d8:	2202      	movs	r2, #2
 80125da:	4630      	mov	r0, r6
 80125dc:	f003 fd54 	bl	8016088 <ucdr_serialize_array_uint8_t>
 80125e0:	7929      	ldrb	r1, [r5, #4]
 80125e2:	4607      	mov	r7, r0
 80125e4:	4630      	mov	r0, r6
 80125e6:	f7fc fa75 	bl	800ead4 <ucdr_serialize_uint8_t>
 80125ea:	b328      	cbz	r0, 8012638 <uxr_serialize_CREATE_Payload+0x70>
 80125ec:	792b      	ldrb	r3, [r5, #4]
 80125ee:	403c      	ands	r4, r7
 80125f0:	3b01      	subs	r3, #1
 80125f2:	b2e4      	uxtb	r4, r4
 80125f4:	2b0d      	cmp	r3, #13
 80125f6:	d81d      	bhi.n	8012634 <uxr_serialize_CREATE_Payload+0x6c>
 80125f8:	e8df f003 	tbb	[pc, r3]
 80125fc:	32320753 	.word	0x32320753
 8012600:	07070707 	.word	0x07070707
 8012604:	2121211c 	.word	0x2121211c
 8012608:	684c      	.short	0x684c
 801260a:	7a29      	ldrb	r1, [r5, #8]
 801260c:	4630      	mov	r0, r6
 801260e:	f7fc fa61 	bl	800ead4 <ucdr_serialize_uint8_t>
 8012612:	4607      	mov	r7, r0
 8012614:	b130      	cbz	r0, 8012624 <uxr_serialize_CREATE_Payload+0x5c>
 8012616:	7a2b      	ldrb	r3, [r5, #8]
 8012618:	2b02      	cmp	r3, #2
 801261a:	d035      	beq.n	8012688 <uxr_serialize_CREATE_Payload+0xc0>
 801261c:	2b03      	cmp	r3, #3
 801261e:	d02b      	beq.n	8012678 <uxr_serialize_CREATE_Payload+0xb0>
 8012620:	2b01      	cmp	r3, #1
 8012622:	d031      	beq.n	8012688 <uxr_serialize_CREATE_Payload+0xc0>
 8012624:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8012628:	4630      	mov	r0, r6
 801262a:	2202      	movs	r2, #2
 801262c:	f003 fd2c 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8012630:	4038      	ands	r0, r7
 8012632:	4004      	ands	r4, r0
 8012634:	4620      	mov	r0, r4
 8012636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012638:	2400      	movs	r4, #0
 801263a:	4620      	mov	r0, r4
 801263c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801263e:	7a29      	ldrb	r1, [r5, #8]
 8012640:	4630      	mov	r0, r6
 8012642:	f7fc fa47 	bl	800ead4 <ucdr_serialize_uint8_t>
 8012646:	2800      	cmp	r0, #0
 8012648:	d0f6      	beq.n	8012638 <uxr_serialize_CREATE_Payload+0x70>
 801264a:	7a2b      	ldrb	r3, [r5, #8]
 801264c:	2b01      	cmp	r3, #1
 801264e:	d001      	beq.n	8012654 <uxr_serialize_CREATE_Payload+0x8c>
 8012650:	2b02      	cmp	r3, #2
 8012652:	d1ef      	bne.n	8012634 <uxr_serialize_CREATE_Payload+0x6c>
 8012654:	68e9      	ldr	r1, [r5, #12]
 8012656:	4630      	mov	r0, r6
 8012658:	f003 fe36 	bl	80162c8 <ucdr_serialize_string>
 801265c:	4004      	ands	r4, r0
 801265e:	e7e9      	b.n	8012634 <uxr_serialize_CREATE_Payload+0x6c>
 8012660:	7a29      	ldrb	r1, [r5, #8]
 8012662:	4630      	mov	r0, r6
 8012664:	f7fc fa36 	bl	800ead4 <ucdr_serialize_uint8_t>
 8012668:	4607      	mov	r7, r0
 801266a:	2800      	cmp	r0, #0
 801266c:	d0da      	beq.n	8012624 <uxr_serialize_CREATE_Payload+0x5c>
 801266e:	7a2b      	ldrb	r3, [r5, #8]
 8012670:	2b02      	cmp	r3, #2
 8012672:	d009      	beq.n	8012688 <uxr_serialize_CREATE_Payload+0xc0>
 8012674:	2b03      	cmp	r3, #3
 8012676:	d1d5      	bne.n	8012624 <uxr_serialize_CREATE_Payload+0x5c>
 8012678:	68ea      	ldr	r2, [r5, #12]
 801267a:	f105 0110 	add.w	r1, r5, #16
 801267e:	4630      	mov	r0, r6
 8012680:	f003 fdf6 	bl	8016270 <ucdr_serialize_sequence_uint8_t>
 8012684:	4607      	mov	r7, r0
 8012686:	e7cd      	b.n	8012624 <uxr_serialize_CREATE_Payload+0x5c>
 8012688:	68e9      	ldr	r1, [r5, #12]
 801268a:	4630      	mov	r0, r6
 801268c:	f003 fe1c 	bl	80162c8 <ucdr_serialize_string>
 8012690:	4607      	mov	r7, r0
 8012692:	e7c7      	b.n	8012624 <uxr_serialize_CREATE_Payload+0x5c>
 8012694:	f105 0108 	add.w	r1, r5, #8
 8012698:	4630      	mov	r0, r6
 801269a:	f7ff fa95 	bl	8011bc8 <uxr_serialize_AGENT_Representation>
 801269e:	4004      	ands	r4, r0
 80126a0:	e7c8      	b.n	8012634 <uxr_serialize_CREATE_Payload+0x6c>
 80126a2:	7a29      	ldrb	r1, [r5, #8]
 80126a4:	4630      	mov	r0, r6
 80126a6:	f7fc fa15 	bl	800ead4 <ucdr_serialize_uint8_t>
 80126aa:	4607      	mov	r7, r0
 80126ac:	b130      	cbz	r0, 80126bc <uxr_serialize_CREATE_Payload+0xf4>
 80126ae:	7a2b      	ldrb	r3, [r5, #8]
 80126b0:	2b02      	cmp	r3, #2
 80126b2:	d012      	beq.n	80126da <uxr_serialize_CREATE_Payload+0x112>
 80126b4:	2b03      	cmp	r3, #3
 80126b6:	d016      	beq.n	80126e6 <uxr_serialize_CREATE_Payload+0x11e>
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	d00e      	beq.n	80126da <uxr_serialize_CREATE_Payload+0x112>
 80126bc:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 80126c0:	4630      	mov	r0, r6
 80126c2:	f7fc ff43 	bl	800f54c <ucdr_serialize_int16_t>
 80126c6:	4038      	ands	r0, r7
 80126c8:	4004      	ands	r4, r0
 80126ca:	e7b3      	b.n	8012634 <uxr_serialize_CREATE_Payload+0x6c>
 80126cc:	f105 0108 	add.w	r1, r5, #8
 80126d0:	4630      	mov	r0, r6
 80126d2:	f7ff f9b3 	bl	8011a3c <uxr_serialize_CLIENT_Representation>
 80126d6:	4004      	ands	r4, r0
 80126d8:	e7ac      	b.n	8012634 <uxr_serialize_CREATE_Payload+0x6c>
 80126da:	68e9      	ldr	r1, [r5, #12]
 80126dc:	4630      	mov	r0, r6
 80126de:	f003 fdf3 	bl	80162c8 <ucdr_serialize_string>
 80126e2:	4607      	mov	r7, r0
 80126e4:	e7ea      	b.n	80126bc <uxr_serialize_CREATE_Payload+0xf4>
 80126e6:	68ea      	ldr	r2, [r5, #12]
 80126e8:	f105 0110 	add.w	r1, r5, #16
 80126ec:	4630      	mov	r0, r6
 80126ee:	f003 fdbf 	bl	8016270 <ucdr_serialize_sequence_uint8_t>
 80126f2:	4607      	mov	r7, r0
 80126f4:	e7e2      	b.n	80126bc <uxr_serialize_CREATE_Payload+0xf4>
 80126f6:	bf00      	nop

080126f8 <uxr_deserialize_GET_INFO_Payload>:
 80126f8:	b570      	push	{r4, r5, r6, lr}
 80126fa:	2202      	movs	r2, #2
 80126fc:	4605      	mov	r5, r0
 80126fe:	460e      	mov	r6, r1
 8012700:	f003 fd26 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8012704:	1cb1      	adds	r1, r6, #2
 8012706:	2202      	movs	r2, #2
 8012708:	4604      	mov	r4, r0
 801270a:	4628      	mov	r0, r5
 801270c:	f003 fd20 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8012710:	1d31      	adds	r1, r6, #4
 8012712:	4004      	ands	r4, r0
 8012714:	4628      	mov	r0, r5
 8012716:	f7fc fd23 	bl	800f160 <ucdr_deserialize_uint32_t>
 801271a:	b2e4      	uxtb	r4, r4
 801271c:	4020      	ands	r0, r4
 801271e:	bd70      	pop	{r4, r5, r6, pc}

08012720 <uxr_serialize_DELETE_Payload>:
 8012720:	b570      	push	{r4, r5, r6, lr}
 8012722:	2202      	movs	r2, #2
 8012724:	4605      	mov	r5, r0
 8012726:	460e      	mov	r6, r1
 8012728:	f003 fcae 	bl	8016088 <ucdr_serialize_array_uint8_t>
 801272c:	1cb1      	adds	r1, r6, #2
 801272e:	4604      	mov	r4, r0
 8012730:	2202      	movs	r2, #2
 8012732:	4628      	mov	r0, r5
 8012734:	f003 fca8 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8012738:	4020      	ands	r0, r4
 801273a:	b2c0      	uxtb	r0, r0
 801273c:	bd70      	pop	{r4, r5, r6, pc}
 801273e:	bf00      	nop

08012740 <uxr_deserialize_STATUS_AGENT_Payload>:
 8012740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012744:	4606      	mov	r6, r0
 8012746:	460f      	mov	r7, r1
 8012748:	f7fc f9da 	bl	800eb00 <ucdr_deserialize_uint8_t>
 801274c:	1c79      	adds	r1, r7, #1
 801274e:	4605      	mov	r5, r0
 8012750:	4630      	mov	r0, r6
 8012752:	f7fc f9d5 	bl	800eb00 <ucdr_deserialize_uint8_t>
 8012756:	1d39      	adds	r1, r7, #4
 8012758:	4681      	mov	r9, r0
 801275a:	2204      	movs	r2, #4
 801275c:	4630      	mov	r0, r6
 801275e:	f003 fcf7 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8012762:	f107 0108 	add.w	r1, r7, #8
 8012766:	4604      	mov	r4, r0
 8012768:	2202      	movs	r2, #2
 801276a:	4630      	mov	r0, r6
 801276c:	f003 fcf0 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8012770:	f107 010a 	add.w	r1, r7, #10
 8012774:	4680      	mov	r8, r0
 8012776:	2202      	movs	r2, #2
 8012778:	4630      	mov	r0, r6
 801277a:	f003 fce9 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 801277e:	ea05 0509 	and.w	r5, r5, r9
 8012782:	b2ed      	uxtb	r5, r5
 8012784:	402c      	ands	r4, r5
 8012786:	f107 010c 	add.w	r1, r7, #12
 801278a:	4605      	mov	r5, r0
 801278c:	4630      	mov	r0, r6
 801278e:	f7fc f987 	bl	800eaa0 <ucdr_deserialize_bool>
 8012792:	ea08 0404 	and.w	r4, r8, r4
 8012796:	4025      	ands	r5, r4
 8012798:	4028      	ands	r0, r5
 801279a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801279e:	bf00      	nop

080127a0 <uxr_deserialize_STATUS_Payload>:
 80127a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a4:	2202      	movs	r2, #2
 80127a6:	4606      	mov	r6, r0
 80127a8:	460f      	mov	r7, r1
 80127aa:	f003 fcd1 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 80127ae:	2202      	movs	r2, #2
 80127b0:	1cb9      	adds	r1, r7, #2
 80127b2:	4605      	mov	r5, r0
 80127b4:	4630      	mov	r0, r6
 80127b6:	f003 fccb 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 80127ba:	1d39      	adds	r1, r7, #4
 80127bc:	4680      	mov	r8, r0
 80127be:	4630      	mov	r0, r6
 80127c0:	f7fc f99e 	bl	800eb00 <ucdr_deserialize_uint8_t>
 80127c4:	1d79      	adds	r1, r7, #5
 80127c6:	4604      	mov	r4, r0
 80127c8:	4630      	mov	r0, r6
 80127ca:	f7fc f999 	bl	800eb00 <ucdr_deserialize_uint8_t>
 80127ce:	ea05 0508 	and.w	r5, r5, r8
 80127d2:	402c      	ands	r4, r5
 80127d4:	4020      	ands	r0, r4
 80127d6:	b2c0      	uxtb	r0, r0
 80127d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080127dc <uxr_serialize_INFO_Payload>:
 80127dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127e0:	2202      	movs	r2, #2
 80127e2:	460c      	mov	r4, r1
 80127e4:	4605      	mov	r5, r0
 80127e6:	f003 fc4f 	bl	8016088 <ucdr_serialize_array_uint8_t>
 80127ea:	2202      	movs	r2, #2
 80127ec:	4680      	mov	r8, r0
 80127ee:	1ca1      	adds	r1, r4, #2
 80127f0:	4628      	mov	r0, r5
 80127f2:	f003 fc49 	bl	8016088 <ucdr_serialize_array_uint8_t>
 80127f6:	7921      	ldrb	r1, [r4, #4]
 80127f8:	4607      	mov	r7, r0
 80127fa:	4628      	mov	r0, r5
 80127fc:	f7fc f96a 	bl	800ead4 <ucdr_serialize_uint8_t>
 8012800:	7961      	ldrb	r1, [r4, #5]
 8012802:	4606      	mov	r6, r0
 8012804:	4628      	mov	r0, r5
 8012806:	f7fc f965 	bl	800ead4 <ucdr_serialize_uint8_t>
 801280a:	ea08 0807 	and.w	r8, r8, r7
 801280e:	ea06 0608 	and.w	r6, r6, r8
 8012812:	4006      	ands	r6, r0
 8012814:	7a21      	ldrb	r1, [r4, #8]
 8012816:	4628      	mov	r0, r5
 8012818:	f7fc f92c 	bl	800ea74 <ucdr_serialize_bool>
 801281c:	7a23      	ldrb	r3, [r4, #8]
 801281e:	b2f7      	uxtb	r7, r6
 8012820:	4606      	mov	r6, r0
 8012822:	b96b      	cbnz	r3, 8012840 <uxr_serialize_INFO_Payload+0x64>
 8012824:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8012828:	4628      	mov	r0, r5
 801282a:	f7fc f923 	bl	800ea74 <ucdr_serialize_bool>
 801282e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8012832:	4030      	ands	r0, r6
 8012834:	b2c6      	uxtb	r6, r0
 8012836:	b983      	cbnz	r3, 801285a <uxr_serialize_INFO_Payload+0x7e>
 8012838:	ea06 0007 	and.w	r0, r6, r7
 801283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012840:	7b21      	ldrb	r1, [r4, #12]
 8012842:	4628      	mov	r0, r5
 8012844:	f7fc f946 	bl	800ead4 <ucdr_serialize_uint8_t>
 8012848:	b188      	cbz	r0, 801286e <uxr_serialize_INFO_Payload+0x92>
 801284a:	f104 010c 	add.w	r1, r4, #12
 801284e:	4628      	mov	r0, r5
 8012850:	f7ff fa06 	bl	8011c60 <uxr_serialize_ObjectVariant.part.0>
 8012854:	4030      	ands	r0, r6
 8012856:	b2c6      	uxtb	r6, r0
 8012858:	e7e4      	b.n	8012824 <uxr_serialize_INFO_Payload+0x48>
 801285a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801285e:	4628      	mov	r0, r5
 8012860:	f7ff fe24 	bl	80124ac <uxr_serialize_ActivityInfoVariant>
 8012864:	4006      	ands	r6, r0
 8012866:	ea06 0007 	and.w	r0, r6, r7
 801286a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801286e:	4606      	mov	r6, r0
 8012870:	e7d8      	b.n	8012824 <uxr_serialize_INFO_Payload+0x48>
 8012872:	bf00      	nop

08012874 <uxr_serialize_READ_DATA_Payload>:
 8012874:	b570      	push	{r4, r5, r6, lr}
 8012876:	2202      	movs	r2, #2
 8012878:	4605      	mov	r5, r0
 801287a:	460e      	mov	r6, r1
 801287c:	f003 fc04 	bl	8016088 <ucdr_serialize_array_uint8_t>
 8012880:	1cb1      	adds	r1, r6, #2
 8012882:	2202      	movs	r2, #2
 8012884:	4604      	mov	r4, r0
 8012886:	4628      	mov	r0, r5
 8012888:	f003 fbfe 	bl	8016088 <ucdr_serialize_array_uint8_t>
 801288c:	1d31      	adds	r1, r6, #4
 801288e:	4004      	ands	r4, r0
 8012890:	4628      	mov	r0, r5
 8012892:	f7ff fe55 	bl	8012540 <uxr_serialize_ReadSpecification>
 8012896:	b2e4      	uxtb	r4, r4
 8012898:	4020      	ands	r0, r4
 801289a:	bd70      	pop	{r4, r5, r6, pc}

0801289c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801289c:	b570      	push	{r4, r5, r6, lr}
 801289e:	2202      	movs	r2, #2
 80128a0:	4605      	mov	r5, r0
 80128a2:	460e      	mov	r6, r1
 80128a4:	f003 fbf0 	bl	8016088 <ucdr_serialize_array_uint8_t>
 80128a8:	1cb1      	adds	r1, r6, #2
 80128aa:	4604      	mov	r4, r0
 80128ac:	2202      	movs	r2, #2
 80128ae:	4628      	mov	r0, r5
 80128b0:	f003 fbea 	bl	8016088 <ucdr_serialize_array_uint8_t>
 80128b4:	4020      	ands	r0, r4
 80128b6:	b2c0      	uxtb	r0, r0
 80128b8:	bd70      	pop	{r4, r5, r6, pc}
 80128ba:	bf00      	nop

080128bc <uxr_serialize_ACKNACK_Payload>:
 80128bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128be:	460f      	mov	r7, r1
 80128c0:	460e      	mov	r6, r1
 80128c2:	f837 1b02 	ldrh.w	r1, [r7], #2
 80128c6:	4605      	mov	r5, r0
 80128c8:	f7fc f930 	bl	800eb2c <ucdr_serialize_uint16_t>
 80128cc:	4639      	mov	r1, r7
 80128ce:	2202      	movs	r2, #2
 80128d0:	4604      	mov	r4, r0
 80128d2:	4628      	mov	r0, r5
 80128d4:	f003 fbd8 	bl	8016088 <ucdr_serialize_array_uint8_t>
 80128d8:	7931      	ldrb	r1, [r6, #4]
 80128da:	4004      	ands	r4, r0
 80128dc:	4628      	mov	r0, r5
 80128de:	f7fc f8f9 	bl	800ead4 <ucdr_serialize_uint8_t>
 80128e2:	b2e4      	uxtb	r4, r4
 80128e4:	4020      	ands	r0, r4
 80128e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080128e8 <uxr_deserialize_ACKNACK_Payload>:
 80128e8:	b570      	push	{r4, r5, r6, lr}
 80128ea:	4605      	mov	r5, r0
 80128ec:	460e      	mov	r6, r1
 80128ee:	f7fc fa1d 	bl	800ed2c <ucdr_deserialize_uint16_t>
 80128f2:	1cb1      	adds	r1, r6, #2
 80128f4:	2202      	movs	r2, #2
 80128f6:	4604      	mov	r4, r0
 80128f8:	4628      	mov	r0, r5
 80128fa:	f003 fc29 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 80128fe:	1d31      	adds	r1, r6, #4
 8012900:	4004      	ands	r4, r0
 8012902:	4628      	mov	r0, r5
 8012904:	f7fc f8fc 	bl	800eb00 <ucdr_deserialize_uint8_t>
 8012908:	b2e4      	uxtb	r4, r4
 801290a:	4020      	ands	r0, r4
 801290c:	bd70      	pop	{r4, r5, r6, pc}
 801290e:	bf00      	nop

08012910 <uxr_serialize_HEARTBEAT_Payload>:
 8012910:	b570      	push	{r4, r5, r6, lr}
 8012912:	460d      	mov	r5, r1
 8012914:	8809      	ldrh	r1, [r1, #0]
 8012916:	4606      	mov	r6, r0
 8012918:	f7fc f908 	bl	800eb2c <ucdr_serialize_uint16_t>
 801291c:	8869      	ldrh	r1, [r5, #2]
 801291e:	4604      	mov	r4, r0
 8012920:	4630      	mov	r0, r6
 8012922:	f7fc f903 	bl	800eb2c <ucdr_serialize_uint16_t>
 8012926:	7929      	ldrb	r1, [r5, #4]
 8012928:	4004      	ands	r4, r0
 801292a:	4630      	mov	r0, r6
 801292c:	f7fc f8d2 	bl	800ead4 <ucdr_serialize_uint8_t>
 8012930:	b2e4      	uxtb	r4, r4
 8012932:	4020      	ands	r0, r4
 8012934:	bd70      	pop	{r4, r5, r6, pc}
 8012936:	bf00      	nop

08012938 <uxr_deserialize_HEARTBEAT_Payload>:
 8012938:	b570      	push	{r4, r5, r6, lr}
 801293a:	4605      	mov	r5, r0
 801293c:	460e      	mov	r6, r1
 801293e:	f7fc f9f5 	bl	800ed2c <ucdr_deserialize_uint16_t>
 8012942:	1cb1      	adds	r1, r6, #2
 8012944:	4604      	mov	r4, r0
 8012946:	4628      	mov	r0, r5
 8012948:	f7fc f9f0 	bl	800ed2c <ucdr_deserialize_uint16_t>
 801294c:	1d31      	adds	r1, r6, #4
 801294e:	4004      	ands	r4, r0
 8012950:	4628      	mov	r0, r5
 8012952:	f7fc f8d5 	bl	800eb00 <ucdr_deserialize_uint8_t>
 8012956:	b2e4      	uxtb	r4, r4
 8012958:	4020      	ands	r0, r4
 801295a:	bd70      	pop	{r4, r5, r6, pc}

0801295c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801295c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012960:	4605      	mov	r5, r0
 8012962:	460e      	mov	r6, r1
 8012964:	f7fc ff7e 	bl	800f864 <ucdr_deserialize_int32_t>
 8012968:	1d31      	adds	r1, r6, #4
 801296a:	4607      	mov	r7, r0
 801296c:	4628      	mov	r0, r5
 801296e:	f7fc fbf7 	bl	800f160 <ucdr_deserialize_uint32_t>
 8012972:	f106 0108 	add.w	r1, r6, #8
 8012976:	4680      	mov	r8, r0
 8012978:	4628      	mov	r0, r5
 801297a:	f7fc ff73 	bl	800f864 <ucdr_deserialize_int32_t>
 801297e:	f106 010c 	add.w	r1, r6, #12
 8012982:	4604      	mov	r4, r0
 8012984:	4628      	mov	r0, r5
 8012986:	f7fc fbeb 	bl	800f160 <ucdr_deserialize_uint32_t>
 801298a:	ea07 0708 	and.w	r7, r7, r8
 801298e:	403c      	ands	r4, r7
 8012990:	f106 0110 	add.w	r1, r6, #16
 8012994:	4004      	ands	r4, r0
 8012996:	4628      	mov	r0, r5
 8012998:	f7fc ff64 	bl	800f864 <ucdr_deserialize_int32_t>
 801299c:	f106 0114 	add.w	r1, r6, #20
 80129a0:	4603      	mov	r3, r0
 80129a2:	4628      	mov	r0, r5
 80129a4:	461d      	mov	r5, r3
 80129a6:	f7fc fbdb 	bl	800f160 <ucdr_deserialize_uint32_t>
 80129aa:	b2e4      	uxtb	r4, r4
 80129ac:	402c      	ands	r4, r5
 80129ae:	4020      	ands	r0, r4
 80129b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080129b4 <uxr_serialize_SampleIdentity>:
 80129b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b8:	220c      	movs	r2, #12
 80129ba:	4604      	mov	r4, r0
 80129bc:	460d      	mov	r5, r1
 80129be:	f003 fb63 	bl	8016088 <ucdr_serialize_array_uint8_t>
 80129c2:	2203      	movs	r2, #3
 80129c4:	f105 010c 	add.w	r1, r5, #12
 80129c8:	4607      	mov	r7, r0
 80129ca:	4620      	mov	r0, r4
 80129cc:	f003 fb5c 	bl	8016088 <ucdr_serialize_array_uint8_t>
 80129d0:	7be9      	ldrb	r1, [r5, #15]
 80129d2:	4680      	mov	r8, r0
 80129d4:	4620      	mov	r0, r4
 80129d6:	f7fc f87d 	bl	800ead4 <ucdr_serialize_uint8_t>
 80129da:	6929      	ldr	r1, [r5, #16]
 80129dc:	4606      	mov	r6, r0
 80129de:	4620      	mov	r0, r4
 80129e0:	f7fc fea8 	bl	800f734 <ucdr_serialize_int32_t>
 80129e4:	6969      	ldr	r1, [r5, #20]
 80129e6:	4603      	mov	r3, r0
 80129e8:	4620      	mov	r0, r4
 80129ea:	ea07 0708 	and.w	r7, r7, r8
 80129ee:	461c      	mov	r4, r3
 80129f0:	f7fc fa86 	bl	800ef00 <ucdr_serialize_uint32_t>
 80129f4:	403e      	ands	r6, r7
 80129f6:	4034      	ands	r4, r6
 80129f8:	4020      	ands	r0, r4
 80129fa:	b2c0      	uxtb	r0, r0
 80129fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a00 <uxr_deserialize_SampleIdentity>:
 8012a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a04:	220c      	movs	r2, #12
 8012a06:	4604      	mov	r4, r0
 8012a08:	460d      	mov	r5, r1
 8012a0a:	f003 fba1 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8012a0e:	2203      	movs	r2, #3
 8012a10:	f105 010c 	add.w	r1, r5, #12
 8012a14:	4607      	mov	r7, r0
 8012a16:	4620      	mov	r0, r4
 8012a18:	f003 fb9a 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8012a1c:	f105 010f 	add.w	r1, r5, #15
 8012a20:	4680      	mov	r8, r0
 8012a22:	4620      	mov	r0, r4
 8012a24:	f7fc f86c 	bl	800eb00 <ucdr_deserialize_uint8_t>
 8012a28:	f105 0110 	add.w	r1, r5, #16
 8012a2c:	4606      	mov	r6, r0
 8012a2e:	4620      	mov	r0, r4
 8012a30:	f7fc ff18 	bl	800f864 <ucdr_deserialize_int32_t>
 8012a34:	f105 0114 	add.w	r1, r5, #20
 8012a38:	4603      	mov	r3, r0
 8012a3a:	4620      	mov	r0, r4
 8012a3c:	ea07 0708 	and.w	r7, r7, r8
 8012a40:	461c      	mov	r4, r3
 8012a42:	f7fc fb8d 	bl	800f160 <ucdr_deserialize_uint32_t>
 8012a46:	403e      	ands	r6, r7
 8012a48:	4034      	ands	r4, r6
 8012a4a:	4020      	ands	r0, r4
 8012a4c:	b2c0      	uxtb	r0, r0
 8012a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a52:	bf00      	nop

08012a54 <rcl_client_get_rmw_handle>:
 8012a54:	b110      	cbz	r0, 8012a5c <rcl_client_get_rmw_handle+0x8>
 8012a56:	6800      	ldr	r0, [r0, #0]
 8012a58:	b100      	cbz	r0, 8012a5c <rcl_client_get_rmw_handle+0x8>
 8012a5a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop

08012a60 <rcl_take_response>:
 8012a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a62:	460e      	mov	r6, r1
 8012a64:	460c      	mov	r4, r1
 8012a66:	4607      	mov	r7, r0
 8012a68:	4694      	mov	ip, r2
 8012a6a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012a6c:	b08d      	sub	sp, #52	; 0x34
 8012a6e:	ad06      	add	r5, sp, #24
 8012a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012a72:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012a76:	e885 0003 	stmia.w	r5, {r0, r1}
 8012a7a:	b337      	cbz	r7, 8012aca <rcl_take_response+0x6a>
 8012a7c:	683b      	ldr	r3, [r7, #0]
 8012a7e:	b323      	cbz	r3, 8012aca <rcl_take_response+0x6a>
 8012a80:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012a82:	b310      	cbz	r0, 8012aca <rcl_take_response+0x6a>
 8012a84:	4662      	mov	r2, ip
 8012a86:	b31a      	cbz	r2, 8012ad0 <rcl_take_response+0x70>
 8012a88:	2300      	movs	r3, #0
 8012a8a:	2600      	movs	r6, #0
 8012a8c:	2700      	movs	r7, #0
 8012a8e:	f88d 3007 	strb.w	r3, [sp, #7]
 8012a92:	a902      	add	r1, sp, #8
 8012a94:	f10d 0307 	add.w	r3, sp, #7
 8012a98:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012a9c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012aa0:	f003 f83a 	bl	8015b18 <rmw_take_response>
 8012aa4:	4606      	mov	r6, r0
 8012aa6:	b9a8      	cbnz	r0, 8012ad4 <rcl_take_response+0x74>
 8012aa8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012aac:	f240 13f5 	movw	r3, #501	; 0x1f5
 8012ab0:	2a00      	cmp	r2, #0
 8012ab2:	bf08      	it	eq
 8012ab4:	461e      	moveq	r6, r3
 8012ab6:	ad06      	add	r5, sp, #24
 8012ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012abc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012ac0:	e884 0003 	stmia.w	r4, {r0, r1}
 8012ac4:	4630      	mov	r0, r6
 8012ac6:	b00d      	add	sp, #52	; 0x34
 8012ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012aca:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8012ace:	e7f2      	b.n	8012ab6 <rcl_take_response+0x56>
 8012ad0:	260b      	movs	r6, #11
 8012ad2:	e7f0      	b.n	8012ab6 <rcl_take_response+0x56>
 8012ad4:	2601      	movs	r6, #1
 8012ad6:	e7ee      	b.n	8012ab6 <rcl_take_response+0x56>

08012ad8 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012ad8:	280b      	cmp	r0, #11
 8012ada:	dc0d      	bgt.n	8012af8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012adc:	2800      	cmp	r0, #0
 8012ade:	db09      	blt.n	8012af4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012ae0:	280b      	cmp	r0, #11
 8012ae2:	d807      	bhi.n	8012af4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012ae4:	e8df f000 	tbb	[pc, r0]
 8012ae8:	07060607 	.word	0x07060607
 8012aec:	06060606 	.word	0x06060606
 8012af0:	07070606 	.word	0x07070606
 8012af4:	2001      	movs	r0, #1
 8012af6:	4770      	bx	lr
 8012af8:	28cb      	cmp	r0, #203	; 0xcb
 8012afa:	bf18      	it	ne
 8012afc:	2001      	movne	r0, #1
 8012afe:	4770      	bx	lr

08012b00 <rcl_get_zero_initialized_context>:
 8012b00:	4a03      	ldr	r2, [pc, #12]	; (8012b10 <rcl_get_zero_initialized_context+0x10>)
 8012b02:	4603      	mov	r3, r0
 8012b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b08:	e883 0003 	stmia.w	r3, {r0, r1}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	4770      	bx	lr
 8012b10:	08019b1c 	.word	0x08019b1c

08012b14 <rcl_context_is_valid>:
 8012b14:	b118      	cbz	r0, 8012b1e <rcl_context_is_valid+0xa>
 8012b16:	6840      	ldr	r0, [r0, #4]
 8012b18:	3800      	subs	r0, #0
 8012b1a:	bf18      	it	ne
 8012b1c:	2001      	movne	r0, #1
 8012b1e:	4770      	bx	lr

08012b20 <__cleanup_context>:
 8012b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b24:	4606      	mov	r6, r0
 8012b26:	6800      	ldr	r0, [r0, #0]
 8012b28:	2300      	movs	r3, #0
 8012b2a:	6073      	str	r3, [r6, #4]
 8012b2c:	2800      	cmp	r0, #0
 8012b2e:	d04d      	beq.n	8012bcc <__cleanup_context+0xac>
 8012b30:	6947      	ldr	r7, [r0, #20]
 8012b32:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012b36:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012b3a:	b137      	cbz	r7, 8012b4a <__cleanup_context+0x2a>
 8012b3c:	3014      	adds	r0, #20
 8012b3e:	f000 fb1d 	bl	801317c <rcl_init_options_fini>
 8012b42:	4607      	mov	r7, r0
 8012b44:	2800      	cmp	r0, #0
 8012b46:	d148      	bne.n	8012bda <__cleanup_context+0xba>
 8012b48:	6830      	ldr	r0, [r6, #0]
 8012b4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012b4c:	b143      	cbz	r3, 8012b60 <__cleanup_context+0x40>
 8012b4e:	3028      	adds	r0, #40	; 0x28
 8012b50:	f002 fd5e 	bl	8015610 <rmw_context_fini>
 8012b54:	b118      	cbz	r0, 8012b5e <__cleanup_context+0x3e>
 8012b56:	2f00      	cmp	r7, #0
 8012b58:	d042      	beq.n	8012be0 <__cleanup_context+0xc0>
 8012b5a:	f7fa feb3 	bl	800d8c4 <rcutils_reset_error>
 8012b5e:	6830      	ldr	r0, [r6, #0]
 8012b60:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8012b64:	f1bc 0f00 	cmp.w	ip, #0
 8012b68:	d01c      	beq.n	8012ba4 <__cleanup_context+0x84>
 8012b6a:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012b6e:	2a01      	cmp	r2, #1
 8012b70:	f173 0100 	sbcs.w	r1, r3, #0
 8012b74:	db12      	blt.n	8012b9c <__cleanup_context+0x7c>
 8012b76:	2400      	movs	r4, #0
 8012b78:	2500      	movs	r5, #0
 8012b7a:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8012b7e:	4649      	mov	r1, r9
 8012b80:	b1c0      	cbz	r0, 8012bb4 <__cleanup_context+0x94>
 8012b82:	47c0      	blx	r8
 8012b84:	6831      	ldr	r1, [r6, #0]
 8012b86:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8012b8a:	3401      	adds	r4, #1
 8012b8c:	f145 0500 	adc.w	r5, r5, #0
 8012b90:	4294      	cmp	r4, r2
 8012b92:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8012b96:	eb75 0103 	sbcs.w	r1, r5, r3
 8012b9a:	dbee      	blt.n	8012b7a <__cleanup_context+0x5a>
 8012b9c:	4660      	mov	r0, ip
 8012b9e:	4649      	mov	r1, r9
 8012ba0:	47c0      	blx	r8
 8012ba2:	6830      	ldr	r0, [r6, #0]
 8012ba4:	4649      	mov	r1, r9
 8012ba6:	47c0      	blx	r8
 8012ba8:	2300      	movs	r3, #0
 8012baa:	e9c6 3300 	strd	r3, r3, [r6]
 8012bae:	4638      	mov	r0, r7
 8012bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bb4:	3401      	adds	r4, #1
 8012bb6:	f145 0500 	adc.w	r5, r5, #0
 8012bba:	4294      	cmp	r4, r2
 8012bbc:	eb75 0103 	sbcs.w	r1, r5, r3
 8012bc0:	dbdb      	blt.n	8012b7a <__cleanup_context+0x5a>
 8012bc2:	4660      	mov	r0, ip
 8012bc4:	4649      	mov	r1, r9
 8012bc6:	47c0      	blx	r8
 8012bc8:	6830      	ldr	r0, [r6, #0]
 8012bca:	e7eb      	b.n	8012ba4 <__cleanup_context+0x84>
 8012bcc:	4607      	mov	r7, r0
 8012bce:	2300      	movs	r3, #0
 8012bd0:	e9c6 3300 	strd	r3, r3, [r6]
 8012bd4:	4638      	mov	r0, r7
 8012bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bda:	f7fa fe73 	bl	800d8c4 <rcutils_reset_error>
 8012bde:	e7b3      	b.n	8012b48 <__cleanup_context+0x28>
 8012be0:	f7ff ff7a 	bl	8012ad8 <rcl_convert_rmw_ret_to_rcl_ret>
 8012be4:	4607      	mov	r7, r0
 8012be6:	e7b8      	b.n	8012b5a <__cleanup_context+0x3a>

08012be8 <rcl_expand_topic_name>:
 8012be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bec:	b08b      	sub	sp, #44	; 0x2c
 8012bee:	9306      	str	r3, [sp, #24]
 8012bf0:	2800      	cmp	r0, #0
 8012bf2:	f000 80d2 	beq.w	8012d9a <rcl_expand_topic_name+0x1b2>
 8012bf6:	460e      	mov	r6, r1
 8012bf8:	2900      	cmp	r1, #0
 8012bfa:	f000 80ce 	beq.w	8012d9a <rcl_expand_topic_name+0x1b2>
 8012bfe:	4617      	mov	r7, r2
 8012c00:	2a00      	cmp	r2, #0
 8012c02:	f000 80ca 	beq.w	8012d9a <rcl_expand_topic_name+0x1b2>
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	f000 80c7 	beq.w	8012d9a <rcl_expand_topic_name+0x1b2>
 8012c0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	f000 80c3 	beq.w	8012d9a <rcl_expand_topic_name+0x1b2>
 8012c14:	a909      	add	r1, sp, #36	; 0x24
 8012c16:	2200      	movs	r2, #0
 8012c18:	4680      	mov	r8, r0
 8012c1a:	f001 f899 	bl	8013d50 <rcl_validate_topic_name>
 8012c1e:	4604      	mov	r4, r0
 8012c20:	2800      	cmp	r0, #0
 8012c22:	f040 80b6 	bne.w	8012d92 <rcl_expand_topic_name+0x1aa>
 8012c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	f040 80bf 	bne.w	8012dac <rcl_expand_topic_name+0x1c4>
 8012c2e:	4602      	mov	r2, r0
 8012c30:	a909      	add	r1, sp, #36	; 0x24
 8012c32:	4630      	mov	r0, r6
 8012c34:	f002 fa0e 	bl	8015054 <rmw_validate_node_name>
 8012c38:	2800      	cmp	r0, #0
 8012c3a:	f040 80b3 	bne.w	8012da4 <rcl_expand_topic_name+0x1bc>
 8012c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c40:	2a00      	cmp	r2, #0
 8012c42:	f040 80b8 	bne.w	8012db6 <rcl_expand_topic_name+0x1ce>
 8012c46:	a909      	add	r1, sp, #36	; 0x24
 8012c48:	4638      	mov	r0, r7
 8012c4a:	f002 f9e5 	bl	8015018 <rmw_validate_namespace>
 8012c4e:	2800      	cmp	r0, #0
 8012c50:	f040 80a8 	bne.w	8012da4 <rcl_expand_topic_name+0x1bc>
 8012c54:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012c56:	2c00      	cmp	r4, #0
 8012c58:	f040 80f6 	bne.w	8012e48 <rcl_expand_topic_name+0x260>
 8012c5c:	217b      	movs	r1, #123	; 0x7b
 8012c5e:	4640      	mov	r0, r8
 8012c60:	f005 fce2 	bl	8018628 <strchr>
 8012c64:	f898 3000 	ldrb.w	r3, [r8]
 8012c68:	2b2f      	cmp	r3, #47	; 0x2f
 8012c6a:	4605      	mov	r5, r0
 8012c6c:	f000 80c4 	beq.w	8012df8 <rcl_expand_topic_name+0x210>
 8012c70:	2b7e      	cmp	r3, #126	; 0x7e
 8012c72:	d16f      	bne.n	8012d54 <rcl_expand_topic_name+0x16c>
 8012c74:	4638      	mov	r0, r7
 8012c76:	f7ed fabd 	bl	80001f4 <strlen>
 8012c7a:	4b87      	ldr	r3, [pc, #540]	; (8012e98 <rcl_expand_topic_name+0x2b0>)
 8012c7c:	4987      	ldr	r1, [pc, #540]	; (8012e9c <rcl_expand_topic_name+0x2b4>)
 8012c7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012c80:	9604      	str	r6, [sp, #16]
 8012c82:	2801      	cmp	r0, #1
 8012c84:	bf0c      	ite	eq
 8012c86:	4618      	moveq	r0, r3
 8012c88:	4608      	movne	r0, r1
 8012c8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012c8e:	e9cd 2300 	strd	r2, r3, [sp]
 8012c92:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012c96:	f108 0101 	add.w	r1, r8, #1
 8012c9a:	9105      	str	r1, [sp, #20]
 8012c9c:	ab14      	add	r3, sp, #80	; 0x50
 8012c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012ca0:	f001 ffe8 	bl	8014c74 <rcutils_format_string_limit>
 8012ca4:	4682      	mov	sl, r0
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	f000 80d0 	beq.w	8012e4c <rcl_expand_topic_name+0x264>
 8012cac:	2d00      	cmp	r5, #0
 8012cae:	f000 80aa 	beq.w	8012e06 <rcl_expand_topic_name+0x21e>
 8012cb2:	217b      	movs	r1, #123	; 0x7b
 8012cb4:	f005 fcb8 	bl	8018628 <strchr>
 8012cb8:	46d1      	mov	r9, sl
 8012cba:	4605      	mov	r5, r0
 8012cbc:	9407      	str	r4, [sp, #28]
 8012cbe:	46d3      	mov	fp, sl
 8012cc0:	464c      	mov	r4, r9
 8012cc2:	2d00      	cmp	r5, #0
 8012cc4:	f000 80c7 	beq.w	8012e56 <rcl_expand_topic_name+0x26e>
 8012cc8:	217d      	movs	r1, #125	; 0x7d
 8012cca:	4620      	mov	r0, r4
 8012ccc:	f005 fcac 	bl	8018628 <strchr>
 8012cd0:	eba0 0905 	sub.w	r9, r0, r5
 8012cd4:	f109 0a01 	add.w	sl, r9, #1
 8012cd8:	4871      	ldr	r0, [pc, #452]	; (8012ea0 <rcl_expand_topic_name+0x2b8>)
 8012cda:	4652      	mov	r2, sl
 8012cdc:	4629      	mov	r1, r5
 8012cde:	f005 fcb0 	bl	8018642 <strncmp>
 8012ce2:	2800      	cmp	r0, #0
 8012ce4:	f000 808d 	beq.w	8012e02 <rcl_expand_topic_name+0x21a>
 8012ce8:	486e      	ldr	r0, [pc, #440]	; (8012ea4 <rcl_expand_topic_name+0x2bc>)
 8012cea:	4652      	mov	r2, sl
 8012cec:	4629      	mov	r1, r5
 8012cee:	f005 fca8 	bl	8018642 <strncmp>
 8012cf2:	b130      	cbz	r0, 8012d02 <rcl_expand_topic_name+0x11a>
 8012cf4:	486c      	ldr	r0, [pc, #432]	; (8012ea8 <rcl_expand_topic_name+0x2c0>)
 8012cf6:	4652      	mov	r2, sl
 8012cf8:	4629      	mov	r1, r5
 8012cfa:	f005 fca2 	bl	8018642 <strncmp>
 8012cfe:	2800      	cmp	r0, #0
 8012d00:	d15b      	bne.n	8012dba <rcl_expand_topic_name+0x1d2>
 8012d02:	46b9      	mov	r9, r7
 8012d04:	ab16      	add	r3, sp, #88	; 0x58
 8012d06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d0a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012d0e:	ab14      	add	r3, sp, #80	; 0x50
 8012d10:	4628      	mov	r0, r5
 8012d12:	cb0c      	ldmia	r3, {r2, r3}
 8012d14:	4651      	mov	r1, sl
 8012d16:	f002 f8f9 	bl	8014f0c <rcutils_strndup>
 8012d1a:	4605      	mov	r5, r0
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	f000 80a4 	beq.w	8012e6a <rcl_expand_topic_name+0x282>
 8012d22:	464a      	mov	r2, r9
 8012d24:	4620      	mov	r0, r4
 8012d26:	ab14      	add	r3, sp, #80	; 0x50
 8012d28:	4629      	mov	r1, r5
 8012d2a:	f001 fff5 	bl	8014d18 <rcutils_repl_str>
 8012d2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d30:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d32:	4604      	mov	r4, r0
 8012d34:	4628      	mov	r0, r5
 8012d36:	4798      	blx	r3
 8012d38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d3c:	4658      	mov	r0, fp
 8012d3e:	4798      	blx	r3
 8012d40:	2c00      	cmp	r4, #0
 8012d42:	f000 8083 	beq.w	8012e4c <rcl_expand_topic_name+0x264>
 8012d46:	217b      	movs	r1, #123	; 0x7b
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f005 fc6d 	bl	8018628 <strchr>
 8012d4e:	46a3      	mov	fp, r4
 8012d50:	4605      	mov	r5, r0
 8012d52:	e7b6      	b.n	8012cc2 <rcl_expand_topic_name+0xda>
 8012d54:	2800      	cmp	r0, #0
 8012d56:	d151      	bne.n	8012dfc <rcl_expand_topic_name+0x214>
 8012d58:	4638      	mov	r0, r7
 8012d5a:	f7ed fa4b 	bl	80001f4 <strlen>
 8012d5e:	4b53      	ldr	r3, [pc, #332]	; (8012eac <rcl_expand_topic_name+0x2c4>)
 8012d60:	4a53      	ldr	r2, [pc, #332]	; (8012eb0 <rcl_expand_topic_name+0x2c8>)
 8012d62:	f8cd 8010 	str.w	r8, [sp, #16]
 8012d66:	2801      	cmp	r0, #1
 8012d68:	bf0c      	ite	eq
 8012d6a:	4618      	moveq	r0, r3
 8012d6c:	4610      	movne	r0, r2
 8012d6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012d74:	e9cd 3200 	strd	r3, r2, [sp]
 8012d78:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012d7c:	ab14      	add	r3, sp, #80	; 0x50
 8012d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012d80:	f001 ff78 	bl	8014c74 <rcutils_format_string_limit>
 8012d84:	4682      	mov	sl, r0
 8012d86:	4653      	mov	r3, sl
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d05f      	beq.n	8012e4c <rcl_expand_topic_name+0x264>
 8012d8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d8e:	f8c3 a000 	str.w	sl, [r3]
 8012d92:	4620      	mov	r0, r4
 8012d94:	b00b      	add	sp, #44	; 0x2c
 8012d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d9a:	240b      	movs	r4, #11
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	b00b      	add	sp, #44	; 0x2c
 8012da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012da4:	f7ff fe98 	bl	8012ad8 <rcl_convert_rmw_ret_to_rcl_ret>
 8012da8:	4604      	mov	r4, r0
 8012daa:	e7f2      	b.n	8012d92 <rcl_expand_topic_name+0x1aa>
 8012dac:	2467      	movs	r4, #103	; 0x67
 8012dae:	4620      	mov	r0, r4
 8012db0:	b00b      	add	sp, #44	; 0x2c
 8012db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012db6:	24c9      	movs	r4, #201	; 0xc9
 8012db8:	e7eb      	b.n	8012d92 <rcl_expand_topic_name+0x1aa>
 8012dba:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8012dbe:	9806      	ldr	r0, [sp, #24]
 8012dc0:	1c69      	adds	r1, r5, #1
 8012dc2:	f7fa fe95 	bl	800daf0 <rcutils_string_map_getn>
 8012dc6:	4681      	mov	r9, r0
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	d19b      	bne.n	8012d04 <rcl_expand_topic_name+0x11c>
 8012dcc:	aa16      	add	r2, sp, #88	; 0x58
 8012dce:	ca07      	ldmia	r2, {r0, r1, r2}
 8012dd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012dd2:	f8c3 9000 	str.w	r9, [r3]
 8012dd6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012dda:	ab14      	add	r3, sp, #80	; 0x50
 8012ddc:	cb0c      	ldmia	r3, {r2, r3}
 8012dde:	4651      	mov	r1, sl
 8012de0:	4628      	mov	r0, r5
 8012de2:	f002 f893 	bl	8014f0c <rcutils_strndup>
 8012de6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012de8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012dea:	4798      	blx	r3
 8012dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012dee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012df0:	4658      	mov	r0, fp
 8012df2:	4798      	blx	r3
 8012df4:	2469      	movs	r4, #105	; 0x69
 8012df6:	e7cc      	b.n	8012d92 <rcl_expand_topic_name+0x1aa>
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	d03e      	beq.n	8012e7a <rcl_expand_topic_name+0x292>
 8012dfc:	46c1      	mov	r9, r8
 8012dfe:	46a2      	mov	sl, r4
 8012e00:	e75c      	b.n	8012cbc <rcl_expand_topic_name+0xd4>
 8012e02:	46b1      	mov	r9, r6
 8012e04:	e77e      	b.n	8012d04 <rcl_expand_topic_name+0x11c>
 8012e06:	f89a 3000 	ldrb.w	r3, [sl]
 8012e0a:	2b2f      	cmp	r3, #47	; 0x2f
 8012e0c:	d0be      	beq.n	8012d8c <rcl_expand_topic_name+0x1a4>
 8012e0e:	4638      	mov	r0, r7
 8012e10:	f7ed f9f0 	bl	80001f4 <strlen>
 8012e14:	4b25      	ldr	r3, [pc, #148]	; (8012eac <rcl_expand_topic_name+0x2c4>)
 8012e16:	4926      	ldr	r1, [pc, #152]	; (8012eb0 <rcl_expand_topic_name+0x2c8>)
 8012e18:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012e1a:	f8cd a010 	str.w	sl, [sp, #16]
 8012e1e:	2801      	cmp	r0, #1
 8012e20:	bf0c      	ite	eq
 8012e22:	4618      	moveq	r0, r3
 8012e24:	4608      	movne	r0, r1
 8012e26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e2a:	e9cd 2300 	strd	r2, r3, [sp]
 8012e2e:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012e32:	ab14      	add	r3, sp, #80	; 0x50
 8012e34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012e36:	f001 ff1d 	bl	8014c74 <rcutils_format_string_limit>
 8012e3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012e3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012e3e:	4603      	mov	r3, r0
 8012e40:	4650      	mov	r0, sl
 8012e42:	469a      	mov	sl, r3
 8012e44:	4790      	blx	r2
 8012e46:	e79e      	b.n	8012d86 <rcl_expand_topic_name+0x19e>
 8012e48:	24ca      	movs	r4, #202	; 0xca
 8012e4a:	e7a2      	b.n	8012d92 <rcl_expand_topic_name+0x1aa>
 8012e4c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012e4e:	2300      	movs	r3, #0
 8012e50:	6013      	str	r3, [r2, #0]
 8012e52:	240a      	movs	r4, #10
 8012e54:	e79d      	b.n	8012d92 <rcl_expand_topic_name+0x1aa>
 8012e56:	465b      	mov	r3, fp
 8012e58:	9c07      	ldr	r4, [sp, #28]
 8012e5a:	46da      	mov	sl, fp
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d1d2      	bne.n	8012e06 <rcl_expand_topic_name+0x21e>
 8012e60:	f898 3000 	ldrb.w	r3, [r8]
 8012e64:	2b2f      	cmp	r3, #47	; 0x2f
 8012e66:	d091      	beq.n	8012d8c <rcl_expand_topic_name+0x1a4>
 8012e68:	e776      	b.n	8012d58 <rcl_expand_topic_name+0x170>
 8012e6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012e6e:	601d      	str	r5, [r3, #0]
 8012e70:	4658      	mov	r0, fp
 8012e72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012e74:	4798      	blx	r3
 8012e76:	240a      	movs	r4, #10
 8012e78:	e78b      	b.n	8012d92 <rcl_expand_topic_name+0x1aa>
 8012e7a:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8012e7e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012e82:	ab14      	add	r3, sp, #80	; 0x50
 8012e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012e86:	4640      	mov	r0, r8
 8012e88:	f002 f81e 	bl	8014ec8 <rcutils_strdup>
 8012e8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e8e:	2800      	cmp	r0, #0
 8012e90:	bf08      	it	eq
 8012e92:	240a      	moveq	r4, #10
 8012e94:	6018      	str	r0, [r3, #0]
 8012e96:	e77c      	b.n	8012d92 <rcl_expand_topic_name+0x1aa>
 8012e98:	08019ae8 	.word	0x08019ae8
 8012e9c:	08019b24 	.word	0x08019b24
 8012ea0:	08019b34 	.word	0x08019b34
 8012ea4:	08019b3c 	.word	0x08019b3c
 8012ea8:	08019b44 	.word	0x08019b44
 8012eac:	08019af8 	.word	0x08019af8
 8012eb0:	08019b2c 	.word	0x08019b2c

08012eb4 <rcl_get_default_topic_name_substitutions>:
 8012eb4:	2800      	cmp	r0, #0
 8012eb6:	bf0c      	ite	eq
 8012eb8:	200b      	moveq	r0, #11
 8012eba:	2000      	movne	r0, #0
 8012ebc:	4770      	bx	lr
 8012ebe:	bf00      	nop

08012ec0 <rcl_init>:
 8012ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec4:	1e07      	subs	r7, r0, #0
 8012ec6:	b09f      	sub	sp, #124	; 0x7c
 8012ec8:	4688      	mov	r8, r1
 8012eca:	4692      	mov	sl, r2
 8012ecc:	4699      	mov	r9, r3
 8012ece:	f340 8097 	ble.w	8013000 <rcl_init+0x140>
 8012ed2:	2900      	cmp	r1, #0
 8012ed4:	f000 8097 	beq.w	8013006 <rcl_init+0x146>
 8012ed8:	1f0d      	subs	r5, r1, #4
 8012eda:	2400      	movs	r4, #0
 8012edc:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8012ee0:	3401      	adds	r4, #1
 8012ee2:	2e00      	cmp	r6, #0
 8012ee4:	f000 808f 	beq.w	8013006 <rcl_init+0x146>
 8012ee8:	42a7      	cmp	r7, r4
 8012eea:	d1f7      	bne.n	8012edc <rcl_init+0x1c>
 8012eec:	f1ba 0f00 	cmp.w	sl, #0
 8012ef0:	f000 8089 	beq.w	8013006 <rcl_init+0x146>
 8012ef4:	f8da 4000 	ldr.w	r4, [sl]
 8012ef8:	2c00      	cmp	r4, #0
 8012efa:	f000 8084 	beq.w	8013006 <rcl_init+0x146>
 8012efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f00:	ad19      	add	r5, sp, #100	; 0x64
 8012f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012f04:	6823      	ldr	r3, [r4, #0]
 8012f06:	602b      	str	r3, [r5, #0]
 8012f08:	a819      	add	r0, sp, #100	; 0x64
 8012f0a:	f7fa fcb7 	bl	800d87c <rcutils_allocator_is_valid>
 8012f0e:	2800      	cmp	r0, #0
 8012f10:	d079      	beq.n	8013006 <rcl_init+0x146>
 8012f12:	f1b9 0f00 	cmp.w	r9, #0
 8012f16:	d076      	beq.n	8013006 <rcl_init+0x146>
 8012f18:	f8d9 3000 	ldr.w	r3, [r9]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d177      	bne.n	8013010 <rcl_init+0x150>
 8012f20:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012f24:	2178      	movs	r1, #120	; 0x78
 8012f26:	2001      	movs	r0, #1
 8012f28:	4798      	blx	r3
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	f8c9 0000 	str.w	r0, [r9]
 8012f30:	2800      	cmp	r0, #0
 8012f32:	f000 80ba 	beq.w	80130aa <rcl_init+0x1ea>
 8012f36:	a802      	add	r0, sp, #8
 8012f38:	f002 f804 	bl	8014f44 <rmw_get_zero_initialized_context>
 8012f3c:	a902      	add	r1, sp, #8
 8012f3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012f42:	2250      	movs	r2, #80	; 0x50
 8012f44:	ac19      	add	r4, sp, #100	; 0x64
 8012f46:	f005 fc86 	bl	8018856 <memcpy>
 8012f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f4c:	f8d9 5000 	ldr.w	r5, [r9]
 8012f50:	6826      	ldr	r6, [r4, #0]
 8012f52:	462c      	mov	r4, r5
 8012f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f56:	f105 0114 	add.w	r1, r5, #20
 8012f5a:	6026      	str	r6, [r4, #0]
 8012f5c:	4650      	mov	r0, sl
 8012f5e:	f000 f931 	bl	80131c4 <rcl_init_options_copy>
 8012f62:	4606      	mov	r6, r0
 8012f64:	2800      	cmp	r0, #0
 8012f66:	d144      	bne.n	8012ff2 <rcl_init+0x132>
 8012f68:	f8d9 a000 	ldr.w	sl, [r9]
 8012f6c:	463c      	mov	r4, r7
 8012f6e:	17fd      	asrs	r5, r7, #31
 8012f70:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8012f74:	f8ca 0020 	str.w	r0, [sl, #32]
 8012f78:	2f00      	cmp	r7, #0
 8012f7a:	d050      	beq.n	801301e <rcl_init+0x15e>
 8012f7c:	f1b8 0f00 	cmp.w	r8, #0
 8012f80:	d04d      	beq.n	801301e <rcl_init+0x15e>
 8012f82:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012f86:	4638      	mov	r0, r7
 8012f88:	2104      	movs	r1, #4
 8012f8a:	4798      	blx	r3
 8012f8c:	f8ca 0020 	str.w	r0, [sl, #32]
 8012f90:	f8d9 a000 	ldr.w	sl, [r9]
 8012f94:	f8da 3020 	ldr.w	r3, [sl, #32]
 8012f98:	46d3      	mov	fp, sl
 8012f9a:	b34b      	cbz	r3, 8012ff0 <rcl_init+0x130>
 8012f9c:	2f01      	cmp	r7, #1
 8012f9e:	f175 0300 	sbcs.w	r3, r5, #0
 8012fa2:	db3c      	blt.n	801301e <rcl_init+0x15e>
 8012fa4:	f1a8 0804 	sub.w	r8, r8, #4
 8012fa8:	2600      	movs	r6, #0
 8012faa:	2700      	movs	r7, #0
 8012fac:	e00c      	b.n	8012fc8 <rcl_init+0x108>
 8012fae:	f8d8 1000 	ldr.w	r1, [r8]
 8012fb2:	f005 fc50 	bl	8018856 <memcpy>
 8012fb6:	3601      	adds	r6, #1
 8012fb8:	f147 0700 	adc.w	r7, r7, #0
 8012fbc:	42bd      	cmp	r5, r7
 8012fbe:	bf08      	it	eq
 8012fc0:	42b4      	cmpeq	r4, r6
 8012fc2:	d02a      	beq.n	801301a <rcl_init+0x15a>
 8012fc4:	f8d9 b000 	ldr.w	fp, [r9]
 8012fc8:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8012fcc:	f7ed f912 	bl	80001f4 <strlen>
 8012fd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012fd2:	991d      	ldr	r1, [sp, #116]	; 0x74
 8012fd4:	f8db a020 	ldr.w	sl, [fp, #32]
 8012fd8:	9001      	str	r0, [sp, #4]
 8012fda:	4798      	blx	r3
 8012fdc:	f8d9 1000 	ldr.w	r1, [r9]
 8012fe0:	9a01      	ldr	r2, [sp, #4]
 8012fe2:	6a09      	ldr	r1, [r1, #32]
 8012fe4:	00b3      	lsls	r3, r6, #2
 8012fe6:	f84a 0003 	str.w	r0, [sl, r3]
 8012fea:	58c8      	ldr	r0, [r1, r3]
 8012fec:	2800      	cmp	r0, #0
 8012fee:	d1de      	bne.n	8012fae <rcl_init+0xee>
 8012ff0:	260a      	movs	r6, #10
 8012ff2:	4648      	mov	r0, r9
 8012ff4:	f7ff fd94 	bl	8012b20 <__cleanup_context>
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	b01f      	add	sp, #124	; 0x7c
 8012ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013000:	2900      	cmp	r1, #0
 8013002:	f43f af73 	beq.w	8012eec <rcl_init+0x2c>
 8013006:	260b      	movs	r6, #11
 8013008:	4630      	mov	r0, r6
 801300a:	b01f      	add	sp, #124	; 0x7c
 801300c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013010:	2664      	movs	r6, #100	; 0x64
 8013012:	4630      	mov	r0, r6
 8013014:	b01f      	add	sp, #124	; 0x7c
 8013016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801301a:	f8d9 a000 	ldr.w	sl, [r9]
 801301e:	4a2c      	ldr	r2, [pc, #176]	; (80130d0 <rcl_init+0x210>)
 8013020:	6813      	ldr	r3, [r2, #0]
 8013022:	3301      	adds	r3, #1
 8013024:	d03b      	beq.n	801309e <rcl_init+0x1de>
 8013026:	6013      	str	r3, [r2, #0]
 8013028:	4619      	mov	r1, r3
 801302a:	2000      	movs	r0, #0
 801302c:	f8da 4014 	ldr.w	r4, [sl, #20]
 8013030:	f8c9 3004 	str.w	r3, [r9, #4]
 8013034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013036:	3301      	adds	r3, #1
 8013038:	e9c4 1006 	strd	r1, r0, [r4, #24]
 801303c:	d039      	beq.n	80130b2 <rcl_init+0x1f2>
 801303e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8013042:	b94b      	cbnz	r3, 8013058 <rcl_init+0x198>
 8013044:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8013048:	f000 f962 	bl	8013310 <rcl_get_localhost_only>
 801304c:	4606      	mov	r6, r0
 801304e:	2800      	cmp	r0, #0
 8013050:	d1cf      	bne.n	8012ff2 <rcl_init+0x132>
 8013052:	f8d9 3000 	ldr.w	r3, [r9]
 8013056:	695c      	ldr	r4, [r3, #20]
 8013058:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801305a:	aa18      	add	r2, sp, #96	; 0x60
 801305c:	a917      	add	r1, sp, #92	; 0x5c
 801305e:	f000 fe65 	bl	8013d2c <rcl_validate_enclave_name>
 8013062:	4606      	mov	r6, r0
 8013064:	2800      	cmp	r0, #0
 8013066:	d1c4      	bne.n	8012ff2 <rcl_init+0x132>
 8013068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801306a:	bb03      	cbnz	r3, 80130ae <rcl_init+0x1ee>
 801306c:	f8d9 1000 	ldr.w	r1, [r9]
 8013070:	694b      	ldr	r3, [r1, #20]
 8013072:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8013074:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8013078:	f000 fbb8 	bl	80137ec <rcl_get_security_options_from_environment>
 801307c:	4606      	mov	r6, r0
 801307e:	2800      	cmp	r0, #0
 8013080:	d1b7      	bne.n	8012ff2 <rcl_init+0x132>
 8013082:	f8d9 1000 	ldr.w	r1, [r9]
 8013086:	6948      	ldr	r0, [r1, #20]
 8013088:	3128      	adds	r1, #40	; 0x28
 801308a:	3018      	adds	r0, #24
 801308c:	f002 f988 	bl	80153a0 <rmw_init>
 8013090:	4606      	mov	r6, r0
 8013092:	2800      	cmp	r0, #0
 8013094:	d0b8      	beq.n	8013008 <rcl_init+0x148>
 8013096:	f7ff fd1f 	bl	8012ad8 <rcl_convert_rmw_ret_to_rcl_ret>
 801309a:	4606      	mov	r6, r0
 801309c:	e7a9      	b.n	8012ff2 <rcl_init+0x132>
 801309e:	2401      	movs	r4, #1
 80130a0:	4618      	mov	r0, r3
 80130a2:	4621      	mov	r1, r4
 80130a4:	6014      	str	r4, [r2, #0]
 80130a6:	4623      	mov	r3, r4
 80130a8:	e7c0      	b.n	801302c <rcl_init+0x16c>
 80130aa:	260a      	movs	r6, #10
 80130ac:	e7ac      	b.n	8013008 <rcl_init+0x148>
 80130ae:	2601      	movs	r6, #1
 80130b0:	e79f      	b.n	8012ff2 <rcl_init+0x132>
 80130b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80130b6:	f004 fba3 	bl	8017800 <rcl_get_default_domain_id>
 80130ba:	4606      	mov	r6, r0
 80130bc:	2800      	cmp	r0, #0
 80130be:	d198      	bne.n	8012ff2 <rcl_init+0x132>
 80130c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130c2:	3301      	adds	r3, #1
 80130c4:	f8d9 3000 	ldr.w	r3, [r9]
 80130c8:	bf08      	it	eq
 80130ca:	6260      	streq	r0, [r4, #36]	; 0x24
 80130cc:	695c      	ldr	r4, [r3, #20]
 80130ce:	e7b6      	b.n	801303e <rcl_init+0x17e>
 80130d0:	20009c28 	.word	0x20009c28

080130d4 <rcl_get_zero_initialized_init_options>:
 80130d4:	2000      	movs	r0, #0
 80130d6:	4770      	bx	lr

080130d8 <rcl_init_options_init>:
 80130d8:	b084      	sub	sp, #16
 80130da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130dc:	b091      	sub	sp, #68	; 0x44
 80130de:	af17      	add	r7, sp, #92	; 0x5c
 80130e0:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 80130e4:	2800      	cmp	r0, #0
 80130e6:	d044      	beq.n	8013172 <rcl_init_options_init+0x9a>
 80130e8:	6803      	ldr	r3, [r0, #0]
 80130ea:	4606      	mov	r6, r0
 80130ec:	b133      	cbz	r3, 80130fc <rcl_init_options_init+0x24>
 80130ee:	2464      	movs	r4, #100	; 0x64
 80130f0:	4620      	mov	r0, r4
 80130f2:	b011      	add	sp, #68	; 0x44
 80130f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80130f8:	b004      	add	sp, #16
 80130fa:	4770      	bx	lr
 80130fc:	4638      	mov	r0, r7
 80130fe:	f7fa fbbd 	bl	800d87c <rcutils_allocator_is_valid>
 8013102:	2800      	cmp	r0, #0
 8013104:	d035      	beq.n	8013172 <rcl_init_options_init+0x9a>
 8013106:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013108:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801310a:	2050      	movs	r0, #80	; 0x50
 801310c:	4798      	blx	r3
 801310e:	4604      	mov	r4, r0
 8013110:	6030      	str	r0, [r6, #0]
 8013112:	2800      	cmp	r0, #0
 8013114:	d02f      	beq.n	8013176 <rcl_init_options_init+0x9e>
 8013116:	46bc      	mov	ip, r7
 8013118:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801311c:	4625      	mov	r5, r4
 801311e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013120:	f8dc 3000 	ldr.w	r3, [ip]
 8013124:	602b      	str	r3, [r5, #0]
 8013126:	a802      	add	r0, sp, #8
 8013128:	ad02      	add	r5, sp, #8
 801312a:	f001 ff13 	bl	8014f54 <rmw_get_zero_initialized_init_options>
 801312e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013130:	3418      	adds	r4, #24
 8013132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801313a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801313c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013140:	6833      	ldr	r3, [r6, #0]
 8013142:	e884 0003 	stmia.w	r4, {r0, r1}
 8013146:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 801314a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801314e:	f103 0018 	add.w	r0, r3, #24
 8013152:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8013156:	f002 f849 	bl	80151ec <rmw_init_options_init>
 801315a:	4604      	mov	r4, r0
 801315c:	2800      	cmp	r0, #0
 801315e:	d0c7      	beq.n	80130f0 <rcl_init_options_init+0x18>
 8013160:	6830      	ldr	r0, [r6, #0]
 8013162:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8013164:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8013166:	4798      	blx	r3
 8013168:	4620      	mov	r0, r4
 801316a:	f7ff fcb5 	bl	8012ad8 <rcl_convert_rmw_ret_to_rcl_ret>
 801316e:	4604      	mov	r4, r0
 8013170:	e7be      	b.n	80130f0 <rcl_init_options_init+0x18>
 8013172:	240b      	movs	r4, #11
 8013174:	e7bc      	b.n	80130f0 <rcl_init_options_init+0x18>
 8013176:	240a      	movs	r4, #10
 8013178:	e7ba      	b.n	80130f0 <rcl_init_options_init+0x18>
 801317a:	bf00      	nop

0801317c <rcl_init_options_fini>:
 801317c:	b570      	push	{r4, r5, r6, lr}
 801317e:	b086      	sub	sp, #24
 8013180:	b1c0      	cbz	r0, 80131b4 <rcl_init_options_fini+0x38>
 8013182:	6804      	ldr	r4, [r0, #0]
 8013184:	4606      	mov	r6, r0
 8013186:	b1ac      	cbz	r4, 80131b4 <rcl_init_options_fini+0x38>
 8013188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801318a:	ad01      	add	r5, sp, #4
 801318c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801318e:	6823      	ldr	r3, [r4, #0]
 8013190:	602b      	str	r3, [r5, #0]
 8013192:	a801      	add	r0, sp, #4
 8013194:	f7fa fb72 	bl	800d87c <rcutils_allocator_is_valid>
 8013198:	b160      	cbz	r0, 80131b4 <rcl_init_options_fini+0x38>
 801319a:	6830      	ldr	r0, [r6, #0]
 801319c:	3018      	adds	r0, #24
 801319e:	f002 f8bf 	bl	8015320 <rmw_init_options_fini>
 80131a2:	4604      	mov	r4, r0
 80131a4:	b950      	cbnz	r0, 80131bc <rcl_init_options_fini+0x40>
 80131a6:	6830      	ldr	r0, [r6, #0]
 80131a8:	9b02      	ldr	r3, [sp, #8]
 80131aa:	9905      	ldr	r1, [sp, #20]
 80131ac:	4798      	blx	r3
 80131ae:	4620      	mov	r0, r4
 80131b0:	b006      	add	sp, #24
 80131b2:	bd70      	pop	{r4, r5, r6, pc}
 80131b4:	240b      	movs	r4, #11
 80131b6:	4620      	mov	r0, r4
 80131b8:	b006      	add	sp, #24
 80131ba:	bd70      	pop	{r4, r5, r6, pc}
 80131bc:	f7ff fc8c 	bl	8012ad8 <rcl_convert_rmw_ret_to_rcl_ret>
 80131c0:	4604      	mov	r4, r0
 80131c2:	e7f8      	b.n	80131b6 <rcl_init_options_fini+0x3a>

080131c4 <rcl_init_options_copy>:
 80131c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131c8:	b096      	sub	sp, #88	; 0x58
 80131ca:	2800      	cmp	r0, #0
 80131cc:	d063      	beq.n	8013296 <rcl_init_options_copy+0xd2>
 80131ce:	6806      	ldr	r6, [r0, #0]
 80131d0:	4605      	mov	r5, r0
 80131d2:	2e00      	cmp	r6, #0
 80131d4:	d05f      	beq.n	8013296 <rcl_init_options_copy+0xd2>
 80131d6:	460c      	mov	r4, r1
 80131d8:	2900      	cmp	r1, #0
 80131da:	d05c      	beq.n	8013296 <rcl_init_options_copy+0xd2>
 80131dc:	680b      	ldr	r3, [r1, #0]
 80131de:	b123      	cbz	r3, 80131ea <rcl_init_options_copy+0x26>
 80131e0:	2664      	movs	r6, #100	; 0x64
 80131e2:	4630      	mov	r0, r6
 80131e4:	b016      	add	sp, #88	; 0x58
 80131e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80131ec:	af11      	add	r7, sp, #68	; 0x44
 80131ee:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80131f0:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 80131f4:	6833      	ldr	r3, [r6, #0]
 80131f6:	603b      	str	r3, [r7, #0]
 80131f8:	4640      	mov	r0, r8
 80131fa:	f7fa fb3f 	bl	800d87c <rcutils_allocator_is_valid>
 80131fe:	2800      	cmp	r0, #0
 8013200:	d049      	beq.n	8013296 <rcl_init_options_copy+0xd2>
 8013202:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013204:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013206:	2050      	movs	r0, #80	; 0x50
 8013208:	4798      	blx	r3
 801320a:	4606      	mov	r6, r0
 801320c:	6020      	str	r0, [r4, #0]
 801320e:	2800      	cmp	r0, #0
 8013210:	d077      	beq.n	8013302 <rcl_init_options_copy+0x13e>
 8013212:	46c4      	mov	ip, r8
 8013214:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013218:	4637      	mov	r7, r6
 801321a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801321c:	f8dc 3000 	ldr.w	r3, [ip]
 8013220:	603b      	str	r3, [r7, #0]
 8013222:	a802      	add	r0, sp, #8
 8013224:	af02      	add	r7, sp, #8
 8013226:	f001 fe95 	bl	8014f54 <rmw_get_zero_initialized_init_options>
 801322a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801322c:	3618      	adds	r6, #24
 801322e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013230:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013232:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013234:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013236:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013238:	e897 0003 	ldmia.w	r7, {r0, r1}
 801323c:	ab16      	add	r3, sp, #88	; 0x58
 801323e:	e886 0003 	stmia.w	r6, {r0, r1}
 8013242:	e913 0003 	ldmdb	r3, {r0, r1}
 8013246:	6823      	ldr	r3, [r4, #0]
 8013248:	e88d 0003 	stmia.w	sp, {r0, r1}
 801324c:	f103 0018 	add.w	r0, r3, #24
 8013250:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8013254:	f001 ffca 	bl	80151ec <rmw_init_options_init>
 8013258:	4606      	mov	r6, r0
 801325a:	bb08      	cbnz	r0, 80132a0 <rcl_init_options_copy+0xdc>
 801325c:	682f      	ldr	r7, [r5, #0]
 801325e:	f8d4 c000 	ldr.w	ip, [r4]
 8013262:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013264:	4666      	mov	r6, ip
 8013266:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013268:	683b      	ldr	r3, [r7, #0]
 801326a:	6033      	str	r3, [r6, #0]
 801326c:	f10c 0018 	add.w	r0, ip, #24
 8013270:	f002 f856 	bl	8015320 <rmw_init_options_fini>
 8013274:	4607      	mov	r7, r0
 8013276:	b1f0      	cbz	r0, 80132b6 <rcl_init_options_copy+0xf2>
 8013278:	f7fa fb0e 	bl	800d898 <rcutils_get_error_string>
 801327c:	f7fa fb22 	bl	800d8c4 <rcutils_reset_error>
 8013280:	4620      	mov	r0, r4
 8013282:	f7ff ff7b 	bl	801317c <rcl_init_options_fini>
 8013286:	4606      	mov	r6, r0
 8013288:	2800      	cmp	r0, #0
 801328a:	d1aa      	bne.n	80131e2 <rcl_init_options_copy+0x1e>
 801328c:	4638      	mov	r0, r7
 801328e:	f7ff fc23 	bl	8012ad8 <rcl_convert_rmw_ret_to_rcl_ret>
 8013292:	4606      	mov	r6, r0
 8013294:	e7a5      	b.n	80131e2 <rcl_init_options_copy+0x1e>
 8013296:	260b      	movs	r6, #11
 8013298:	4630      	mov	r0, r6
 801329a:	b016      	add	sp, #88	; 0x58
 801329c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80132a2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80132a4:	6820      	ldr	r0, [r4, #0]
 80132a6:	4798      	blx	r3
 80132a8:	4630      	mov	r0, r6
 80132aa:	f7ff fc15 	bl	8012ad8 <rcl_convert_rmw_ret_to_rcl_ret>
 80132ae:	4606      	mov	r6, r0
 80132b0:	2800      	cmp	r0, #0
 80132b2:	d0d3      	beq.n	801325c <rcl_init_options_copy+0x98>
 80132b4:	e795      	b.n	80131e2 <rcl_init_options_copy+0x1e>
 80132b6:	a802      	add	r0, sp, #8
 80132b8:	ae02      	add	r6, sp, #8
 80132ba:	6827      	ldr	r7, [r4, #0]
 80132bc:	f001 fe4a 	bl	8014f54 <rmw_get_zero_initialized_init_options>
 80132c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80132c2:	3718      	adds	r7, #24
 80132c4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80132c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80132c8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80132ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80132cc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80132ce:	e896 0003 	ldmia.w	r6, {r0, r1}
 80132d2:	682a      	ldr	r2, [r5, #0]
 80132d4:	6823      	ldr	r3, [r4, #0]
 80132d6:	e887 0003 	stmia.w	r7, {r0, r1}
 80132da:	f102 0018 	add.w	r0, r2, #24
 80132de:	f103 0118 	add.w	r1, r3, #24
 80132e2:	f001 ffdb 	bl	801529c <rmw_init_options_copy>
 80132e6:	4606      	mov	r6, r0
 80132e8:	2800      	cmp	r0, #0
 80132ea:	f43f af7a 	beq.w	80131e2 <rcl_init_options_copy+0x1e>
 80132ee:	f7fa fad3 	bl	800d898 <rcutils_get_error_string>
 80132f2:	f7fa fae7 	bl	800d8c4 <rcutils_reset_error>
 80132f6:	4620      	mov	r0, r4
 80132f8:	f7ff ff40 	bl	801317c <rcl_init_options_fini>
 80132fc:	b118      	cbz	r0, 8013306 <rcl_init_options_copy+0x142>
 80132fe:	4606      	mov	r6, r0
 8013300:	e76f      	b.n	80131e2 <rcl_init_options_copy+0x1e>
 8013302:	260a      	movs	r6, #10
 8013304:	e76d      	b.n	80131e2 <rcl_init_options_copy+0x1e>
 8013306:	4630      	mov	r0, r6
 8013308:	f7ff fbe6 	bl	8012ad8 <rcl_convert_rmw_ret_to_rcl_ret>
 801330c:	4606      	mov	r6, r0
 801330e:	e768      	b.n	80131e2 <rcl_init_options_copy+0x1e>

08013310 <rcl_get_localhost_only>:
 8013310:	b510      	push	{r4, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	2300      	movs	r3, #0
 8013316:	9301      	str	r3, [sp, #4]
 8013318:	b1b8      	cbz	r0, 801334a <rcl_get_localhost_only+0x3a>
 801331a:	4604      	mov	r4, r0
 801331c:	a901      	add	r1, sp, #4
 801331e:	480c      	ldr	r0, [pc, #48]	; (8013350 <rcl_get_localhost_only+0x40>)
 8013320:	f001 fce2 	bl	8014ce8 <rcutils_get_env>
 8013324:	b110      	cbz	r0, 801332c <rcl_get_localhost_only+0x1c>
 8013326:	2001      	movs	r0, #1
 8013328:	b002      	add	sp, #8
 801332a:	bd10      	pop	{r4, pc}
 801332c:	9b01      	ldr	r3, [sp, #4]
 801332e:	b113      	cbz	r3, 8013336 <rcl_get_localhost_only+0x26>
 8013330:	781a      	ldrb	r2, [r3, #0]
 8013332:	2a31      	cmp	r2, #49	; 0x31
 8013334:	d004      	beq.n	8013340 <rcl_get_localhost_only+0x30>
 8013336:	2302      	movs	r3, #2
 8013338:	2000      	movs	r0, #0
 801333a:	7023      	strb	r3, [r4, #0]
 801333c:	b002      	add	sp, #8
 801333e:	bd10      	pop	{r4, pc}
 8013340:	785b      	ldrb	r3, [r3, #1]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d1f7      	bne.n	8013336 <rcl_get_localhost_only+0x26>
 8013346:	2301      	movs	r3, #1
 8013348:	e7f6      	b.n	8013338 <rcl_get_localhost_only+0x28>
 801334a:	200b      	movs	r0, #11
 801334c:	b002      	add	sp, #8
 801334e:	bd10      	pop	{r4, pc}
 8013350:	08019b50 	.word	0x08019b50

08013354 <rcl_get_zero_initialized_node>:
 8013354:	4a03      	ldr	r2, [pc, #12]	; (8013364 <rcl_get_zero_initialized_node+0x10>)
 8013356:	4603      	mov	r3, r0
 8013358:	e892 0003 	ldmia.w	r2, {r0, r1}
 801335c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013360:	4618      	mov	r0, r3
 8013362:	4770      	bx	lr
 8013364:	08019b70 	.word	0x08019b70

08013368 <rcl_node_init>:
 8013368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801336c:	b09b      	sub	sp, #108	; 0x6c
 801336e:	4604      	mov	r4, r0
 8013370:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8013374:	f04f 0c00 	mov.w	ip, #0
 8013378:	a815      	add	r0, sp, #84	; 0x54
 801337a:	460e      	mov	r6, r1
 801337c:	4615      	mov	r5, r2
 801337e:	461f      	mov	r7, r3
 8013380:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8013384:	f004 faf8 	bl	8017978 <rcl_guard_condition_get_default_options>
 8013388:	f1b8 0f00 	cmp.w	r8, #0
 801338c:	f000 80fd 	beq.w	801358a <rcl_node_init+0x222>
 8013390:	f108 0b04 	add.w	fp, r8, #4
 8013394:	4658      	mov	r0, fp
 8013396:	f7fa fa71 	bl	800d87c <rcutils_allocator_is_valid>
 801339a:	2800      	cmp	r0, #0
 801339c:	f000 80f5 	beq.w	801358a <rcl_node_init+0x222>
 80133a0:	2e00      	cmp	r6, #0
 80133a2:	f000 80f2 	beq.w	801358a <rcl_node_init+0x222>
 80133a6:	2d00      	cmp	r5, #0
 80133a8:	f000 80ef 	beq.w	801358a <rcl_node_init+0x222>
 80133ac:	2c00      	cmp	r4, #0
 80133ae:	f000 80ec 	beq.w	801358a <rcl_node_init+0x222>
 80133b2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80133b6:	f1b9 0f00 	cmp.w	r9, #0
 80133ba:	f040 8112 	bne.w	80135e2 <rcl_node_init+0x27a>
 80133be:	2f00      	cmp	r7, #0
 80133c0:	f000 80e3 	beq.w	801358a <rcl_node_init+0x222>
 80133c4:	4638      	mov	r0, r7
 80133c6:	f7ff fba5 	bl	8012b14 <rcl_context_is_valid>
 80133ca:	4682      	mov	sl, r0
 80133cc:	2800      	cmp	r0, #0
 80133ce:	f000 80e2 	beq.w	8013596 <rcl_node_init+0x22e>
 80133d2:	464a      	mov	r2, r9
 80133d4:	a914      	add	r1, sp, #80	; 0x50
 80133d6:	4630      	mov	r0, r6
 80133d8:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 80133dc:	f001 fe3a 	bl	8015054 <rmw_validate_node_name>
 80133e0:	4681      	mov	r9, r0
 80133e2:	2800      	cmp	r0, #0
 80133e4:	f040 80d3 	bne.w	801358e <rcl_node_init+0x226>
 80133e8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80133ea:	2800      	cmp	r0, #0
 80133ec:	f040 8105 	bne.w	80135fa <rcl_node_init+0x292>
 80133f0:	4628      	mov	r0, r5
 80133f2:	f7ec feff 	bl	80001f4 <strlen>
 80133f6:	2800      	cmp	r0, #0
 80133f8:	f040 80d0 	bne.w	801359c <rcl_node_init+0x234>
 80133fc:	4d8e      	ldr	r5, [pc, #568]	; (8013638 <rcl_node_init+0x2d0>)
 80133fe:	a914      	add	r1, sp, #80	; 0x50
 8013400:	2200      	movs	r2, #0
 8013402:	4628      	mov	r0, r5
 8013404:	f001 fe08 	bl	8015018 <rmw_validate_namespace>
 8013408:	4681      	mov	r9, r0
 801340a:	2800      	cmp	r0, #0
 801340c:	f040 80bf 	bne.w	801358e <rcl_node_init+0x226>
 8013410:	4682      	mov	sl, r0
 8013412:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013414:	2b00      	cmp	r3, #0
 8013416:	f040 80f5 	bne.w	8013604 <rcl_node_init+0x29c>
 801341a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801341e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013422:	9307      	str	r3, [sp, #28]
 8013424:	2030      	movs	r0, #48	; 0x30
 8013426:	4790      	blx	r2
 8013428:	4681      	mov	r9, r0
 801342a:	6060      	str	r0, [r4, #4]
 801342c:	2800      	cmp	r0, #0
 801342e:	f000 80de 	beq.w	80135ee <rcl_node_init+0x286>
 8013432:	9b07      	ldr	r3, [sp, #28]
 8013434:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8013438:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 801343c:	a80a      	add	r0, sp, #40	; 0x28
 801343e:	f7f9 faad 	bl	800c99c <rcl_node_get_default_options>
 8013442:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8013446:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801344a:	46cc      	mov	ip, r9
 801344c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013450:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8013454:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8013458:	6861      	ldr	r1, [r4, #4]
 801345a:	6027      	str	r7, [r4, #0]
 801345c:	4640      	mov	r0, r8
 801345e:	f7f9 fab9 	bl	800c9d4 <rcl_node_options_copy>
 8013462:	2800      	cmp	r0, #0
 8013464:	d167      	bne.n	8013536 <rcl_node_init+0x1ce>
 8013466:	4628      	mov	r0, r5
 8013468:	f7ec fec4 	bl	80001f4 <strlen>
 801346c:	4428      	add	r0, r5
 801346e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013472:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013476:	2b2f      	cmp	r3, #47	; 0x2f
 8013478:	bf08      	it	eq
 801347a:	4970      	ldreq	r1, [pc, #448]	; (801363c <rcl_node_init+0x2d4>)
 801347c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013480:	bf18      	it	ne
 8013482:	496f      	ldrne	r1, [pc, #444]	; (8013640 <rcl_node_init+0x2d8>)
 8013484:	9604      	str	r6, [sp, #16]
 8013486:	e9cd 1502 	strd	r1, r5, [sp, #8]
 801348a:	e9cd 3200 	strd	r3, r2, [sp]
 801348e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8013492:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8013496:	f001 fbed 	bl	8014c74 <rcutils_format_string_limit>
 801349a:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 801349e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80134a2:	f8d9 3000 	ldr.w	r3, [r9]
 80134a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80134a8:	1c59      	adds	r1, r3, #1
 80134aa:	f000 80b7 	beq.w	801361c <rcl_node_init+0x2b4>
 80134ae:	683a      	ldr	r2, [r7, #0]
 80134b0:	f8c9 301c 	str.w	r3, [r9, #28]
 80134b4:	6952      	ldr	r2, [r2, #20]
 80134b6:	6821      	ldr	r1, [r4, #0]
 80134b8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80134bc:	6808      	ldr	r0, [r1, #0]
 80134be:	f1a2 0201 	sub.w	r2, r2, #1
 80134c2:	fab2 f282 	clz	r2, r2
 80134c6:	0952      	lsrs	r2, r2, #5
 80134c8:	9200      	str	r2, [sp, #0]
 80134ca:	4631      	mov	r1, r6
 80134cc:	3028      	adds	r0, #40	; 0x28
 80134ce:	462a      	mov	r2, r5
 80134d0:	f002 f9ce 	bl	8015870 <rmw_create_node>
 80134d4:	6863      	ldr	r3, [r4, #4]
 80134d6:	f8c9 0020 	str.w	r0, [r9, #32]
 80134da:	6a18      	ldr	r0, [r3, #32]
 80134dc:	b368      	cbz	r0, 801353a <rcl_node_init+0x1d2>
 80134de:	f002 fa59 	bl	8015994 <rmw_node_get_graph_guard_condition>
 80134e2:	4681      	mov	r9, r0
 80134e4:	b338      	cbz	r0, 8013536 <rcl_node_init+0x1ce>
 80134e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80134ea:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80134ee:	6866      	ldr	r6, [r4, #4]
 80134f0:	2008      	movs	r0, #8
 80134f2:	4798      	blx	r3
 80134f4:	6863      	ldr	r3, [r4, #4]
 80134f6:	6270      	str	r0, [r6, #36]	; 0x24
 80134f8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80134fa:	b1f6      	cbz	r6, 801353a <rcl_node_init+0x1d2>
 80134fc:	a808      	add	r0, sp, #32
 80134fe:	f004 f9b3 	bl	8017868 <rcl_get_zero_initialized_guard_condition>
 8013502:	a808      	add	r0, sp, #32
 8013504:	c803      	ldmia	r0, {r0, r1}
 8013506:	e886 0003 	stmia.w	r6, {r0, r1}
 801350a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801350e:	ae15      	add	r6, sp, #84	; 0x54
 8013510:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013512:	f8db 3000 	ldr.w	r3, [fp]
 8013516:	6033      	str	r3, [r6, #0]
 8013518:	ab1a      	add	r3, sp, #104	; 0x68
 801351a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801351e:	6866      	ldr	r6, [r4, #4]
 8013520:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8013522:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013526:	4649      	mov	r1, r9
 8013528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801352a:	4630      	mov	r0, r6
 801352c:	463a      	mov	r2, r7
 801352e:	f004 f9a5 	bl	801787c <rcl_guard_condition_init_from_rmw>
 8013532:	4681      	mov	r9, r0
 8013534:	b328      	cbz	r0, 8013582 <rcl_node_init+0x21a>
 8013536:	6863      	ldr	r3, [r4, #4]
 8013538:	b1f3      	cbz	r3, 8013578 <rcl_node_init+0x210>
 801353a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801353c:	b128      	cbz	r0, 801354a <rcl_node_init+0x1e2>
 801353e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013542:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013546:	4798      	blx	r3
 8013548:	6863      	ldr	r3, [r4, #4]
 801354a:	6a18      	ldr	r0, [r3, #32]
 801354c:	b110      	cbz	r0, 8013554 <rcl_node_init+0x1ec>
 801354e:	f002 f9a7 	bl	80158a0 <rmw_destroy_node>
 8013552:	6863      	ldr	r3, [r4, #4]
 8013554:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013556:	b148      	cbz	r0, 801356c <rcl_node_init+0x204>
 8013558:	f004 f9e8 	bl	801792c <rcl_guard_condition_fini>
 801355c:	6862      	ldr	r2, [r4, #4]
 801355e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013562:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8013564:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013568:	4798      	blx	r3
 801356a:	6863      	ldr	r3, [r4, #4]
 801356c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8013570:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013574:	4618      	mov	r0, r3
 8013576:	4790      	blx	r2
 8013578:	2300      	movs	r3, #0
 801357a:	e9c4 3300 	strd	r3, r3, [r4]
 801357e:	f04f 0901 	mov.w	r9, #1
 8013582:	f1ba 0f00 	cmp.w	sl, #0
 8013586:	d125      	bne.n	80135d4 <rcl_node_init+0x26c>
 8013588:	e001      	b.n	801358e <rcl_node_init+0x226>
 801358a:	f04f 090b 	mov.w	r9, #11
 801358e:	4648      	mov	r0, r9
 8013590:	b01b      	add	sp, #108	; 0x6c
 8013592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013596:	f04f 0965 	mov.w	r9, #101	; 0x65
 801359a:	e7f8      	b.n	801358e <rcl_node_init+0x226>
 801359c:	782b      	ldrb	r3, [r5, #0]
 801359e:	2b2f      	cmp	r3, #47	; 0x2f
 80135a0:	f43f af2d 	beq.w	80133fe <rcl_node_init+0x96>
 80135a4:	4927      	ldr	r1, [pc, #156]	; (8013644 <rcl_node_init+0x2dc>)
 80135a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80135aa:	9300      	str	r3, [sp, #0]
 80135ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80135b0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80135b4:	9503      	str	r5, [sp, #12]
 80135b6:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80135ba:	f001 fb5b 	bl	8014c74 <rcutils_format_string_limit>
 80135be:	4605      	mov	r5, r0
 80135c0:	b348      	cbz	r0, 8013616 <rcl_node_init+0x2ae>
 80135c2:	2200      	movs	r2, #0
 80135c4:	a914      	add	r1, sp, #80	; 0x50
 80135c6:	9214      	str	r2, [sp, #80]	; 0x50
 80135c8:	f001 fd26 	bl	8015018 <rmw_validate_namespace>
 80135cc:	4681      	mov	r9, r0
 80135ce:	2800      	cmp	r0, #0
 80135d0:	f43f af1f 	beq.w	8013412 <rcl_node_init+0xaa>
 80135d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80135d8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80135dc:	4628      	mov	r0, r5
 80135de:	4798      	blx	r3
 80135e0:	e7d5      	b.n	801358e <rcl_node_init+0x226>
 80135e2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80135e6:	4648      	mov	r0, r9
 80135e8:	b01b      	add	sp, #108	; 0x6c
 80135ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ee:	f04f 090a 	mov.w	r9, #10
 80135f2:	f1ba 0f00 	cmp.w	sl, #0
 80135f6:	d1ed      	bne.n	80135d4 <rcl_node_init+0x26c>
 80135f8:	e7c9      	b.n	801358e <rcl_node_init+0x226>
 80135fa:	f001 fd7d 	bl	80150f8 <rmw_node_name_validation_result_string>
 80135fe:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8013602:	e7c4      	b.n	801358e <rcl_node_init+0x226>
 8013604:	4618      	mov	r0, r3
 8013606:	f001 fd19 	bl	801503c <rmw_namespace_validation_result_string>
 801360a:	f04f 09ca 	mov.w	r9, #202	; 0xca
 801360e:	f1ba 0f00 	cmp.w	sl, #0
 8013612:	d1df      	bne.n	80135d4 <rcl_node_init+0x26c>
 8013614:	e7bb      	b.n	801358e <rcl_node_init+0x226>
 8013616:	f04f 090a 	mov.w	r9, #10
 801361a:	e7b8      	b.n	801358e <rcl_node_init+0x226>
 801361c:	a813      	add	r0, sp, #76	; 0x4c
 801361e:	f004 f8ef 	bl	8017800 <rcl_get_default_domain_id>
 8013622:	2800      	cmp	r0, #0
 8013624:	d187      	bne.n	8013536 <rcl_node_init+0x1ce>
 8013626:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013628:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801362c:	1c5a      	adds	r2, r3, #1
 801362e:	bf04      	itt	eq
 8013630:	9013      	streq	r0, [sp, #76]	; 0x4c
 8013632:	4603      	moveq	r3, r0
 8013634:	e73b      	b.n	80134ae <rcl_node_init+0x146>
 8013636:	bf00      	nop
 8013638:	08019b68 	.word	0x08019b68
 801363c:	08019af8 	.word	0x08019af8
 8013640:	08019b2c 	.word	0x08019b2c
 8013644:	08019b6c 	.word	0x08019b6c

08013648 <rcl_node_is_valid>:
 8013648:	b130      	cbz	r0, 8013658 <rcl_node_is_valid+0x10>
 801364a:	6843      	ldr	r3, [r0, #4]
 801364c:	b123      	cbz	r3, 8013658 <rcl_node_is_valid+0x10>
 801364e:	6a1b      	ldr	r3, [r3, #32]
 8013650:	b113      	cbz	r3, 8013658 <rcl_node_is_valid+0x10>
 8013652:	6800      	ldr	r0, [r0, #0]
 8013654:	f7ff ba5e 	b.w	8012b14 <rcl_context_is_valid>
 8013658:	2000      	movs	r0, #0
 801365a:	4770      	bx	lr

0801365c <rcl_node_get_name>:
 801365c:	b120      	cbz	r0, 8013668 <rcl_node_get_name+0xc>
 801365e:	6840      	ldr	r0, [r0, #4]
 8013660:	b110      	cbz	r0, 8013668 <rcl_node_get_name+0xc>
 8013662:	6a00      	ldr	r0, [r0, #32]
 8013664:	b100      	cbz	r0, 8013668 <rcl_node_get_name+0xc>
 8013666:	6880      	ldr	r0, [r0, #8]
 8013668:	4770      	bx	lr
 801366a:	bf00      	nop

0801366c <rcl_node_get_namespace>:
 801366c:	b120      	cbz	r0, 8013678 <rcl_node_get_namespace+0xc>
 801366e:	6840      	ldr	r0, [r0, #4]
 8013670:	b110      	cbz	r0, 8013678 <rcl_node_get_namespace+0xc>
 8013672:	6a00      	ldr	r0, [r0, #32]
 8013674:	b100      	cbz	r0, 8013678 <rcl_node_get_namespace+0xc>
 8013676:	68c0      	ldr	r0, [r0, #12]
 8013678:	4770      	bx	lr
 801367a:	bf00      	nop

0801367c <rcl_node_get_options>:
 801367c:	b128      	cbz	r0, 801368a <rcl_node_get_options+0xe>
 801367e:	6840      	ldr	r0, [r0, #4]
 8013680:	b118      	cbz	r0, 801368a <rcl_node_get_options+0xe>
 8013682:	6a03      	ldr	r3, [r0, #32]
 8013684:	2b00      	cmp	r3, #0
 8013686:	bf08      	it	eq
 8013688:	2000      	moveq	r0, #0
 801368a:	4770      	bx	lr

0801368c <rcl_node_get_rmw_handle>:
 801368c:	b110      	cbz	r0, 8013694 <rcl_node_get_rmw_handle+0x8>
 801368e:	6840      	ldr	r0, [r0, #4]
 8013690:	b100      	cbz	r0, 8013694 <rcl_node_get_rmw_handle+0x8>
 8013692:	6a00      	ldr	r0, [r0, #32]
 8013694:	4770      	bx	lr
 8013696:	bf00      	nop

08013698 <exact_match_lookup>:
 8013698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801369a:	f102 0708 	add.w	r7, r2, #8
 801369e:	460b      	mov	r3, r1
 80136a0:	4614      	mov	r4, r2
 80136a2:	4606      	mov	r6, r0
 80136a4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80136a8:	b085      	sub	sp, #20
 80136aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80136ae:	4618      	mov	r0, r3
 80136b0:	4918      	ldr	r1, [pc, #96]	; (8013714 <exact_match_lookup+0x7c>)
 80136b2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80136b6:	f001 facf 	bl	8014c58 <rcutils_join_path>
 80136ba:	7833      	ldrb	r3, [r6, #0]
 80136bc:	2b2f      	cmp	r3, #47	; 0x2f
 80136be:	4605      	mov	r5, r0
 80136c0:	d021      	beq.n	8013706 <exact_match_lookup+0x6e>
 80136c2:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80136c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80136ca:	1c70      	adds	r0, r6, #1
 80136cc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80136d0:	f001 fac8 	bl	8014c64 <rcutils_to_native_path>
 80136d4:	4606      	mov	r6, r0
 80136d6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80136da:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80136de:	4631      	mov	r1, r6
 80136e0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80136e4:	4628      	mov	r0, r5
 80136e6:	f001 fab7 	bl	8014c58 <rcutils_join_path>
 80136ea:	6862      	ldr	r2, [r4, #4]
 80136ec:	6921      	ldr	r1, [r4, #16]
 80136ee:	4603      	mov	r3, r0
 80136f0:	4630      	mov	r0, r6
 80136f2:	461e      	mov	r6, r3
 80136f4:	4790      	blx	r2
 80136f6:	4628      	mov	r0, r5
 80136f8:	6863      	ldr	r3, [r4, #4]
 80136fa:	6921      	ldr	r1, [r4, #16]
 80136fc:	4798      	blx	r3
 80136fe:	4635      	mov	r5, r6
 8013700:	4628      	mov	r0, r5
 8013702:	b005      	add	sp, #20
 8013704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013706:	7873      	ldrb	r3, [r6, #1]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d1da      	bne.n	80136c2 <exact_match_lookup+0x2a>
 801370c:	4628      	mov	r0, r5
 801370e:	b005      	add	sp, #20
 8013710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013712:	bf00      	nop
 8013714:	08019bb4 	.word	0x08019bb4

08013718 <rcl_get_secure_root>:
 8013718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801371c:	b085      	sub	sp, #20
 801371e:	b168      	cbz	r0, 801373c <rcl_get_secure_root+0x24>
 8013720:	4607      	mov	r7, r0
 8013722:	4608      	mov	r0, r1
 8013724:	460c      	mov	r4, r1
 8013726:	f7fa f8a9 	bl	800d87c <rcutils_allocator_is_valid>
 801372a:	b138      	cbz	r0, 801373c <rcl_get_secure_root+0x24>
 801372c:	2300      	movs	r3, #0
 801372e:	482d      	ldr	r0, [pc, #180]	; (80137e4 <rcl_get_secure_root+0xcc>)
 8013730:	9303      	str	r3, [sp, #12]
 8013732:	a903      	add	r1, sp, #12
 8013734:	f001 fad8 	bl	8014ce8 <rcutils_get_env>
 8013738:	4605      	mov	r5, r0
 801373a:	b120      	cbz	r0, 8013746 <rcl_get_secure_root+0x2e>
 801373c:	2500      	movs	r5, #0
 801373e:	4628      	mov	r0, r5
 8013740:	b005      	add	sp, #20
 8013742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013746:	9b03      	ldr	r3, [sp, #12]
 8013748:	781a      	ldrb	r2, [r3, #0]
 801374a:	2a00      	cmp	r2, #0
 801374c:	d0f6      	beq.n	801373c <rcl_get_secure_root+0x24>
 801374e:	f104 090c 	add.w	r9, r4, #12
 8013752:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013756:	e88d 0003 	stmia.w	sp, {r0, r1}
 801375a:	4618      	mov	r0, r3
 801375c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013760:	f001 fbb2 	bl	8014ec8 <rcutils_strdup>
 8013764:	4680      	mov	r8, r0
 8013766:	2800      	cmp	r0, #0
 8013768:	d0e8      	beq.n	801373c <rcl_get_secure_root+0x24>
 801376a:	481f      	ldr	r0, [pc, #124]	; (80137e8 <rcl_get_secure_root+0xd0>)
 801376c:	9503      	str	r5, [sp, #12]
 801376e:	a903      	add	r1, sp, #12
 8013770:	f001 faba 	bl	8014ce8 <rcutils_get_env>
 8013774:	b160      	cbz	r0, 8013790 <rcl_get_secure_root+0x78>
 8013776:	2600      	movs	r6, #0
 8013778:	6863      	ldr	r3, [r4, #4]
 801377a:	6921      	ldr	r1, [r4, #16]
 801377c:	4630      	mov	r0, r6
 801377e:	4798      	blx	r3
 8013780:	4640      	mov	r0, r8
 8013782:	6863      	ldr	r3, [r4, #4]
 8013784:	6921      	ldr	r1, [r4, #16]
 8013786:	4798      	blx	r3
 8013788:	4628      	mov	r0, r5
 801378a:	b005      	add	sp, #20
 801378c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013790:	9b03      	ldr	r3, [sp, #12]
 8013792:	781e      	ldrb	r6, [r3, #0]
 8013794:	b1f6      	cbz	r6, 80137d4 <rcl_get_secure_root+0xbc>
 8013796:	e899 0003 	ldmia.w	r9, {r0, r1}
 801379a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801379e:	4618      	mov	r0, r3
 80137a0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80137a4:	f001 fb90 	bl	8014ec8 <rcutils_strdup>
 80137a8:	4606      	mov	r6, r0
 80137aa:	2800      	cmp	r0, #0
 80137ac:	d0e3      	beq.n	8013776 <rcl_get_secure_root+0x5e>
 80137ae:	4622      	mov	r2, r4
 80137b0:	4641      	mov	r1, r8
 80137b2:	f7ff ff71 	bl	8013698 <exact_match_lookup>
 80137b6:	4605      	mov	r5, r0
 80137b8:	2d00      	cmp	r5, #0
 80137ba:	d0dd      	beq.n	8013778 <rcl_get_secure_root+0x60>
 80137bc:	4628      	mov	r0, r5
 80137be:	f001 fa49 	bl	8014c54 <rcutils_is_directory>
 80137c2:	4607      	mov	r7, r0
 80137c4:	2800      	cmp	r0, #0
 80137c6:	d1d7      	bne.n	8013778 <rcl_get_secure_root+0x60>
 80137c8:	4628      	mov	r0, r5
 80137ca:	6863      	ldr	r3, [r4, #4]
 80137cc:	6921      	ldr	r1, [r4, #16]
 80137ce:	4798      	blx	r3
 80137d0:	463d      	mov	r5, r7
 80137d2:	e7d1      	b.n	8013778 <rcl_get_secure_root+0x60>
 80137d4:	4638      	mov	r0, r7
 80137d6:	4622      	mov	r2, r4
 80137d8:	4641      	mov	r1, r8
 80137da:	f7ff ff5d 	bl	8013698 <exact_match_lookup>
 80137de:	4605      	mov	r5, r0
 80137e0:	e7ea      	b.n	80137b8 <rcl_get_secure_root+0xa0>
 80137e2:	bf00      	nop
 80137e4:	08019bc0 	.word	0x08019bc0
 80137e8:	08019bd8 	.word	0x08019bd8

080137ec <rcl_get_security_options_from_environment>:
 80137ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137f0:	b082      	sub	sp, #8
 80137f2:	4607      	mov	r7, r0
 80137f4:	4688      	mov	r8, r1
 80137f6:	2400      	movs	r4, #0
 80137f8:	481d      	ldr	r0, [pc, #116]	; (8013870 <rcl_get_security_options_from_environment+0x84>)
 80137fa:	9401      	str	r4, [sp, #4]
 80137fc:	a901      	add	r1, sp, #4
 80137fe:	4616      	mov	r6, r2
 8013800:	f001 fa72 	bl	8014ce8 <rcutils_get_env>
 8013804:	b120      	cbz	r0, 8013810 <rcl_get_security_options_from_environment+0x24>
 8013806:	2501      	movs	r5, #1
 8013808:	4628      	mov	r0, r5
 801380a:	b002      	add	sp, #8
 801380c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013810:	4918      	ldr	r1, [pc, #96]	; (8013874 <rcl_get_security_options_from_environment+0x88>)
 8013812:	4604      	mov	r4, r0
 8013814:	9801      	ldr	r0, [sp, #4]
 8013816:	f7ec fce3 	bl	80001e0 <strcmp>
 801381a:	4605      	mov	r5, r0
 801381c:	b9c8      	cbnz	r0, 8013852 <rcl_get_security_options_from_environment+0x66>
 801381e:	9001      	str	r0, [sp, #4]
 8013820:	b1ee      	cbz	r6, 801385e <rcl_get_security_options_from_environment+0x72>
 8013822:	4815      	ldr	r0, [pc, #84]	; (8013878 <rcl_get_security_options_from_environment+0x8c>)
 8013824:	a901      	add	r1, sp, #4
 8013826:	f001 fa5f 	bl	8014ce8 <rcutils_get_env>
 801382a:	2800      	cmp	r0, #0
 801382c:	d1eb      	bne.n	8013806 <rcl_get_security_options_from_environment+0x1a>
 801382e:	4913      	ldr	r1, [pc, #76]	; (801387c <rcl_get_security_options_from_environment+0x90>)
 8013830:	9801      	ldr	r0, [sp, #4]
 8013832:	f7ec fcd5 	bl	80001e0 <strcmp>
 8013836:	fab0 f080 	clz	r0, r0
 801383a:	0940      	lsrs	r0, r0, #5
 801383c:	7030      	strb	r0, [r6, #0]
 801383e:	4641      	mov	r1, r8
 8013840:	4638      	mov	r0, r7
 8013842:	f7ff ff69 	bl	8013718 <rcl_get_secure_root>
 8013846:	b160      	cbz	r0, 8013862 <rcl_get_security_options_from_environment+0x76>
 8013848:	6070      	str	r0, [r6, #4]
 801384a:	4628      	mov	r0, r5
 801384c:	b002      	add	sp, #8
 801384e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013852:	4625      	mov	r5, r4
 8013854:	4628      	mov	r0, r5
 8013856:	7034      	strb	r4, [r6, #0]
 8013858:	b002      	add	sp, #8
 801385a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801385e:	250b      	movs	r5, #11
 8013860:	e7d2      	b.n	8013808 <rcl_get_security_options_from_environment+0x1c>
 8013862:	7835      	ldrb	r5, [r6, #0]
 8013864:	f1a5 0501 	sub.w	r5, r5, #1
 8013868:	fab5 f585 	clz	r5, r5
 801386c:	096d      	lsrs	r5, r5, #5
 801386e:	e7cb      	b.n	8013808 <rcl_get_security_options_from_environment+0x1c>
 8013870:	08019b78 	.word	0x08019b78
 8013874:	08019b8c 	.word	0x08019b8c
 8013878:	08019b94 	.word	0x08019b94
 801387c:	08019bac 	.word	0x08019bac

08013880 <rcl_service_get_rmw_handle>:
 8013880:	b110      	cbz	r0, 8013888 <rcl_service_get_rmw_handle+0x8>
 8013882:	6800      	ldr	r0, [r0, #0]
 8013884:	b100      	cbz	r0, 8013888 <rcl_service_get_rmw_handle+0x8>
 8013886:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013888:	4770      	bx	lr
 801388a:	bf00      	nop

0801388c <rcl_take_request>:
 801388c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801388e:	460e      	mov	r6, r1
 8013890:	460c      	mov	r4, r1
 8013892:	4607      	mov	r7, r0
 8013894:	4694      	mov	ip, r2
 8013896:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013898:	b08d      	sub	sp, #52	; 0x34
 801389a:	ad06      	add	r5, sp, #24
 801389c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801389e:	e896 0003 	ldmia.w	r6, {r0, r1}
 80138a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80138a6:	b1e7      	cbz	r7, 80138e2 <rcl_take_request+0x56>
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	b1d3      	cbz	r3, 80138e2 <rcl_take_request+0x56>
 80138ac:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80138ae:	b1c0      	cbz	r0, 80138e2 <rcl_take_request+0x56>
 80138b0:	4662      	mov	r2, ip
 80138b2:	b30a      	cbz	r2, 80138f8 <rcl_take_request+0x6c>
 80138b4:	2500      	movs	r5, #0
 80138b6:	f10d 0307 	add.w	r3, sp, #7
 80138ba:	a902      	add	r1, sp, #8
 80138bc:	f88d 5007 	strb.w	r5, [sp, #7]
 80138c0:	f002 f86e 	bl	80159a0 <rmw_take_request>
 80138c4:	4606      	mov	r6, r0
 80138c6:	b178      	cbz	r0, 80138e8 <rcl_take_request+0x5c>
 80138c8:	280a      	cmp	r0, #10
 80138ca:	bf18      	it	ne
 80138cc:	2601      	movne	r6, #1
 80138ce:	ad06      	add	r5, sp, #24
 80138d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80138d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80138dc:	4630      	mov	r0, r6
 80138de:	b00d      	add	sp, #52	; 0x34
 80138e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138e2:	f44f 7616 	mov.w	r6, #600	; 0x258
 80138e6:	e7f2      	b.n	80138ce <rcl_take_request+0x42>
 80138e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80138ec:	f240 2359 	movw	r3, #601	; 0x259
 80138f0:	2a00      	cmp	r2, #0
 80138f2:	bf08      	it	eq
 80138f4:	461e      	moveq	r6, r3
 80138f6:	e7ea      	b.n	80138ce <rcl_take_request+0x42>
 80138f8:	260b      	movs	r6, #11
 80138fa:	e7e8      	b.n	80138ce <rcl_take_request+0x42>

080138fc <rcl_send_response>:
 80138fc:	b160      	cbz	r0, 8013918 <rcl_send_response+0x1c>
 80138fe:	6800      	ldr	r0, [r0, #0]
 8013900:	b150      	cbz	r0, 8013918 <rcl_send_response+0x1c>
 8013902:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013904:	b140      	cbz	r0, 8013918 <rcl_send_response+0x1c>
 8013906:	b151      	cbz	r1, 801391e <rcl_send_response+0x22>
 8013908:	b510      	push	{r4, lr}
 801390a:	b152      	cbz	r2, 8013922 <rcl_send_response+0x26>
 801390c:	f002 f8a6 	bl	8015a5c <rmw_send_response>
 8013910:	3800      	subs	r0, #0
 8013912:	bf18      	it	ne
 8013914:	2001      	movne	r0, #1
 8013916:	bd10      	pop	{r4, pc}
 8013918:	f44f 7016 	mov.w	r0, #600	; 0x258
 801391c:	4770      	bx	lr
 801391e:	200b      	movs	r0, #11
 8013920:	4770      	bx	lr
 8013922:	200b      	movs	r0, #11
 8013924:	bd10      	pop	{r4, pc}
 8013926:	bf00      	nop

08013928 <rcl_get_system_time>:
 8013928:	4608      	mov	r0, r1
 801392a:	f7fa b913 	b.w	800db54 <rcutils_system_time_now>
 801392e:	bf00      	nop

08013930 <rcl_get_steady_time>:
 8013930:	4608      	mov	r0, r1
 8013932:	f7fa b937 	b.w	800dba4 <rcutils_steady_time_now>
 8013936:	bf00      	nop

08013938 <rcl_get_ros_time>:
 8013938:	7a03      	ldrb	r3, [r0, #8]
 801393a:	b510      	push	{r4, lr}
 801393c:	460c      	mov	r4, r1
 801393e:	b133      	cbz	r3, 801394e <rcl_get_ros_time+0x16>
 8013940:	2105      	movs	r1, #5
 8013942:	f001 f8e5 	bl	8014b10 <__atomic_load_8>
 8013946:	e9c4 0100 	strd	r0, r1, [r4]
 801394a:	2000      	movs	r0, #0
 801394c:	bd10      	pop	{r4, pc}
 801394e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013952:	4608      	mov	r0, r1
 8013954:	f7fa b8fe 	b.w	800db54 <rcutils_system_time_now>

08013958 <rcl_clock_init>:
 8013958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801395c:	4606      	mov	r6, r0
 801395e:	4610      	mov	r0, r2
 8013960:	4614      	mov	r4, r2
 8013962:	460d      	mov	r5, r1
 8013964:	f7f9 ff8a 	bl	800d87c <rcutils_allocator_is_valid>
 8013968:	b128      	cbz	r0, 8013976 <rcl_clock_init+0x1e>
 801396a:	2e03      	cmp	r6, #3
 801396c:	d803      	bhi.n	8013976 <rcl_clock_init+0x1e>
 801396e:	e8df f006 	tbb	[pc, r6]
 8013972:	2c1b      	.short	0x2c1b
 8013974:	0554      	.short	0x0554
 8013976:	200b      	movs	r0, #11
 8013978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801397c:	2d00      	cmp	r5, #0
 801397e:	d0fa      	beq.n	8013976 <rcl_clock_init+0x1e>
 8013980:	2c00      	cmp	r4, #0
 8013982:	d0f8      	beq.n	8013976 <rcl_clock_init+0x1e>
 8013984:	2600      	movs	r6, #0
 8013986:	702e      	strb	r6, [r5, #0]
 8013988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801398a:	f105 0714 	add.w	r7, r5, #20
 801398e:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8013992:	612e      	str	r6, [r5, #16]
 8013994:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013996:	6823      	ldr	r3, [r4, #0]
 8013998:	603b      	str	r3, [r7, #0]
 801399a:	2303      	movs	r3, #3
 801399c:	4a2b      	ldr	r2, [pc, #172]	; (8013a4c <rcl_clock_init+0xf4>)
 801399e:	702b      	strb	r3, [r5, #0]
 80139a0:	4630      	mov	r0, r6
 80139a2:	60ea      	str	r2, [r5, #12]
 80139a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139a8:	2d00      	cmp	r5, #0
 80139aa:	d0e4      	beq.n	8013976 <rcl_clock_init+0x1e>
 80139ac:	2600      	movs	r6, #0
 80139ae:	702e      	strb	r6, [r5, #0]
 80139b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139b2:	f105 0714 	add.w	r7, r5, #20
 80139b6:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80139ba:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80139be:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80139c0:	6823      	ldr	r3, [r4, #0]
 80139c2:	603b      	str	r3, [r7, #0]
 80139c4:	4630      	mov	r0, r6
 80139c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ca:	2d00      	cmp	r5, #0
 80139cc:	d0d3      	beq.n	8013976 <rcl_clock_init+0x1e>
 80139ce:	2c00      	cmp	r4, #0
 80139d0:	d0d1      	beq.n	8013976 <rcl_clock_init+0x1e>
 80139d2:	2600      	movs	r6, #0
 80139d4:	702e      	strb	r6, [r5, #0]
 80139d6:	46a4      	mov	ip, r4
 80139d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139dc:	f105 0714 	add.w	r7, r5, #20
 80139e0:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80139e4:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80139e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80139ea:	f8dc 3000 	ldr.w	r3, [ip]
 80139ee:	603b      	str	r3, [r7, #0]
 80139f0:	6921      	ldr	r1, [r4, #16]
 80139f2:	6823      	ldr	r3, [r4, #0]
 80139f4:	2010      	movs	r0, #16
 80139f6:	4798      	blx	r3
 80139f8:	4603      	mov	r3, r0
 80139fa:	6128      	str	r0, [r5, #16]
 80139fc:	b318      	cbz	r0, 8013a46 <rcl_clock_init+0xee>
 80139fe:	f04f 0800 	mov.w	r8, #0
 8013a02:	f04f 0900 	mov.w	r9, #0
 8013a06:	7206      	strb	r6, [r0, #8]
 8013a08:	e9c3 8900 	strd	r8, r9, [r3]
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	4a10      	ldr	r2, [pc, #64]	; (8013a50 <rcl_clock_init+0xf8>)
 8013a10:	702b      	strb	r3, [r5, #0]
 8013a12:	4630      	mov	r0, r6
 8013a14:	60ea      	str	r2, [r5, #12]
 8013a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a1a:	2d00      	cmp	r5, #0
 8013a1c:	d0ab      	beq.n	8013976 <rcl_clock_init+0x1e>
 8013a1e:	2c00      	cmp	r4, #0
 8013a20:	d0a9      	beq.n	8013976 <rcl_clock_init+0x1e>
 8013a22:	2600      	movs	r6, #0
 8013a24:	702e      	strb	r6, [r5, #0]
 8013a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a28:	f105 0714 	add.w	r7, r5, #20
 8013a2c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8013a30:	612e      	str	r6, [r5, #16]
 8013a32:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013a34:	6823      	ldr	r3, [r4, #0]
 8013a36:	603b      	str	r3, [r7, #0]
 8013a38:	2302      	movs	r3, #2
 8013a3a:	4a06      	ldr	r2, [pc, #24]	; (8013a54 <rcl_clock_init+0xfc>)
 8013a3c:	702b      	strb	r3, [r5, #0]
 8013a3e:	4630      	mov	r0, r6
 8013a40:	60ea      	str	r2, [r5, #12]
 8013a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a46:	200a      	movs	r0, #10
 8013a48:	e796      	b.n	8013978 <rcl_clock_init+0x20>
 8013a4a:	bf00      	nop
 8013a4c:	08013931 	.word	0x08013931
 8013a50:	08013939 	.word	0x08013939
 8013a54:	08013929 	.word	0x08013929

08013a58 <rcl_clock_get_now>:
 8013a58:	b140      	cbz	r0, 8013a6c <rcl_clock_get_now+0x14>
 8013a5a:	b139      	cbz	r1, 8013a6c <rcl_clock_get_now+0x14>
 8013a5c:	7803      	ldrb	r3, [r0, #0]
 8013a5e:	b11b      	cbz	r3, 8013a68 <rcl_clock_get_now+0x10>
 8013a60:	68c3      	ldr	r3, [r0, #12]
 8013a62:	b10b      	cbz	r3, 8013a68 <rcl_clock_get_now+0x10>
 8013a64:	6900      	ldr	r0, [r0, #16]
 8013a66:	4718      	bx	r3
 8013a68:	2001      	movs	r0, #1
 8013a6a:	4770      	bx	lr
 8013a6c:	200b      	movs	r0, #11
 8013a6e:	4770      	bx	lr

08013a70 <rcl_timer_call>:
 8013a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a74:	b08b      	sub	sp, #44	; 0x2c
 8013a76:	2800      	cmp	r0, #0
 8013a78:	d06e      	beq.n	8013b58 <rcl_timer_call+0xe8>
 8013a7a:	6803      	ldr	r3, [r0, #0]
 8013a7c:	f3bf 8f5b 	dmb	ish
 8013a80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013a84:	f3bf 8f5b 	dmb	ish
 8013a88:	4604      	mov	r4, r0
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d159      	bne.n	8013b42 <rcl_timer_call+0xd2>
 8013a8e:	6803      	ldr	r3, [r0, #0]
 8013a90:	a908      	add	r1, sp, #32
 8013a92:	6818      	ldr	r0, [r3, #0]
 8013a94:	f7ff ffe0 	bl	8013a58 <rcl_clock_get_now>
 8013a98:	4605      	mov	r5, r0
 8013a9a:	2800      	cmp	r0, #0
 8013a9c:	d14d      	bne.n	8013b3a <rcl_timer_call+0xca>
 8013a9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013aa2:	2a00      	cmp	r2, #0
 8013aa4:	f173 0100 	sbcs.w	r1, r3, #0
 8013aa8:	db51      	blt.n	8013b4e <rcl_timer_call+0xde>
 8013aaa:	6820      	ldr	r0, [r4, #0]
 8013aac:	2605      	movs	r6, #5
 8013aae:	9600      	str	r6, [sp, #0]
 8013ab0:	3020      	adds	r0, #32
 8013ab2:	f001 f895 	bl	8014be0 <__atomic_exchange_8>
 8013ab6:	6822      	ldr	r2, [r4, #0]
 8013ab8:	f3bf 8f5b 	dmb	ish
 8013abc:	4682      	mov	sl, r0
 8013abe:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8013ac2:	f3bf 8f5b 	dmb	ish
 8013ac6:	6820      	ldr	r0, [r4, #0]
 8013ac8:	460b      	mov	r3, r1
 8013aca:	3028      	adds	r0, #40	; 0x28
 8013acc:	4631      	mov	r1, r6
 8013ace:	9305      	str	r3, [sp, #20]
 8013ad0:	f001 f81e 	bl	8014b10 <__atomic_load_8>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	6820      	ldr	r0, [r4, #0]
 8013ad8:	460a      	mov	r2, r1
 8013ada:	3018      	adds	r0, #24
 8013adc:	4631      	mov	r1, r6
 8013ade:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8013ae2:	f001 f815 	bl	8014b10 <__atomic_load_8>
 8013ae6:	9b04      	ldr	r3, [sp, #16]
 8013ae8:	9a03      	ldr	r2, [sp, #12]
 8013aea:	4606      	mov	r6, r0
 8013aec:	460f      	mov	r7, r1
 8013aee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013af2:	eb13 0806 	adds.w	r8, r3, r6
 8013af6:	eb42 0907 	adc.w	r9, r2, r7
 8013afa:	4580      	cmp	r8, r0
 8013afc:	eb79 0301 	sbcs.w	r3, r9, r1
 8013b00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013b04:	460a      	mov	r2, r1
 8013b06:	da04      	bge.n	8013b12 <rcl_timer_call+0xa2>
 8013b08:	ea56 0307 	orrs.w	r3, r6, r7
 8013b0c:	d129      	bne.n	8013b62 <rcl_timer_call+0xf2>
 8013b0e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8013b12:	6820      	ldr	r0, [r4, #0]
 8013b14:	2105      	movs	r1, #5
 8013b16:	4642      	mov	r2, r8
 8013b18:	464b      	mov	r3, r9
 8013b1a:	3028      	adds	r0, #40	; 0x28
 8013b1c:	9100      	str	r1, [sp, #0]
 8013b1e:	f001 f82b 	bl	8014b78 <__atomic_store_8>
 8013b22:	f1bb 0f00 	cmp.w	fp, #0
 8013b26:	d008      	beq.n	8013b3a <rcl_timer_call+0xca>
 8013b28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013b2c:	9905      	ldr	r1, [sp, #20]
 8013b2e:	ebb2 020a 	subs.w	r2, r2, sl
 8013b32:	4620      	mov	r0, r4
 8013b34:	eb63 0301 	sbc.w	r3, r3, r1
 8013b38:	47d8      	blx	fp
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	b00b      	add	sp, #44	; 0x2c
 8013b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b42:	f240 3521 	movw	r5, #801	; 0x321
 8013b46:	4628      	mov	r0, r5
 8013b48:	b00b      	add	sp, #44	; 0x2c
 8013b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b4e:	2501      	movs	r5, #1
 8013b50:	4628      	mov	r0, r5
 8013b52:	b00b      	add	sp, #44	; 0x2c
 8013b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b58:	250b      	movs	r5, #11
 8013b5a:	4628      	mov	r0, r5
 8013b5c:	b00b      	add	sp, #44	; 0x2c
 8013b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b62:	ebb0 0008 	subs.w	r0, r0, r8
 8013b66:	eb62 0109 	sbc.w	r1, r2, r9
 8013b6a:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8013b6e:	463b      	mov	r3, r7
 8013b70:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8013b74:	4632      	mov	r2, r6
 8013b76:	f7ec ffb9 	bl	8000aec <__aeabi_ldivmod>
 8013b7a:	1c43      	adds	r3, r0, #1
 8013b7c:	f141 0100 	adc.w	r1, r1, #0
 8013b80:	fb00 7007 	mla	r0, r0, r7, r7
 8013b84:	fb06 0001 	mla	r0, r6, r1, r0
 8013b88:	fba3 6706 	umull	r6, r7, r3, r6
 8013b8c:	4407      	add	r7, r0
 8013b8e:	eb18 0806 	adds.w	r8, r8, r6
 8013b92:	eb49 0907 	adc.w	r9, r9, r7
 8013b96:	e7bc      	b.n	8013b12 <rcl_timer_call+0xa2>

08013b98 <rcl_timer_is_ready>:
 8013b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b9c:	b082      	sub	sp, #8
 8013b9e:	b310      	cbz	r0, 8013be6 <rcl_timer_is_ready+0x4e>
 8013ba0:	4688      	mov	r8, r1
 8013ba2:	b301      	cbz	r1, 8013be6 <rcl_timer_is_ready+0x4e>
 8013ba4:	6803      	ldr	r3, [r0, #0]
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	4669      	mov	r1, sp
 8013baa:	6818      	ldr	r0, [r3, #0]
 8013bac:	f7ff ff54 	bl	8013a58 <rcl_clock_get_now>
 8013bb0:	4605      	mov	r5, r0
 8013bb2:	b118      	cbz	r0, 8013bbc <rcl_timer_is_ready+0x24>
 8013bb4:	4628      	mov	r0, r5
 8013bb6:	b002      	add	sp, #8
 8013bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bbc:	6820      	ldr	r0, [r4, #0]
 8013bbe:	2105      	movs	r1, #5
 8013bc0:	3028      	adds	r0, #40	; 0x28
 8013bc2:	f000 ffa5 	bl	8014b10 <__atomic_load_8>
 8013bc6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013bca:	1ac6      	subs	r6, r0, r3
 8013bcc:	eb61 0702 	sbc.w	r7, r1, r2
 8013bd0:	2e01      	cmp	r6, #1
 8013bd2:	f177 0300 	sbcs.w	r3, r7, #0
 8013bd6:	db0b      	blt.n	8013bf0 <rcl_timer_is_ready+0x58>
 8013bd8:	462b      	mov	r3, r5
 8013bda:	4628      	mov	r0, r5
 8013bdc:	f888 3000 	strb.w	r3, [r8]
 8013be0:	b002      	add	sp, #8
 8013be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013be6:	250b      	movs	r5, #11
 8013be8:	4628      	mov	r0, r5
 8013bea:	b002      	add	sp, #8
 8013bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bf0:	6823      	ldr	r3, [r4, #0]
 8013bf2:	f3bf 8f5b 	dmb	ish
 8013bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013bfa:	f3bf 8f5b 	dmb	ish
 8013bfe:	fab3 f383 	clz	r3, r3
 8013c02:	095b      	lsrs	r3, r3, #5
 8013c04:	e7e9      	b.n	8013bda <rcl_timer_is_ready+0x42>
 8013c06:	bf00      	nop

08013c08 <rcl_timer_get_time_until_next_call>:
 8013c08:	b570      	push	{r4, r5, r6, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	b1d8      	cbz	r0, 8013c46 <rcl_timer_get_time_until_next_call+0x3e>
 8013c0e:	460d      	mov	r5, r1
 8013c10:	b1c9      	cbz	r1, 8013c46 <rcl_timer_get_time_until_next_call+0x3e>
 8013c12:	6803      	ldr	r3, [r0, #0]
 8013c14:	4604      	mov	r4, r0
 8013c16:	4669      	mov	r1, sp
 8013c18:	6818      	ldr	r0, [r3, #0]
 8013c1a:	f7ff ff1d 	bl	8013a58 <rcl_clock_get_now>
 8013c1e:	4606      	mov	r6, r0
 8013c20:	b110      	cbz	r0, 8013c28 <rcl_timer_get_time_until_next_call+0x20>
 8013c22:	4630      	mov	r0, r6
 8013c24:	b002      	add	sp, #8
 8013c26:	bd70      	pop	{r4, r5, r6, pc}
 8013c28:	6820      	ldr	r0, [r4, #0]
 8013c2a:	2105      	movs	r1, #5
 8013c2c:	3028      	adds	r0, #40	; 0x28
 8013c2e:	f000 ff6f 	bl	8014b10 <__atomic_load_8>
 8013c32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013c36:	1ac0      	subs	r0, r0, r3
 8013c38:	eb61 0102 	sbc.w	r1, r1, r2
 8013c3c:	e9c5 0100 	strd	r0, r1, [r5]
 8013c40:	4630      	mov	r0, r6
 8013c42:	b002      	add	sp, #8
 8013c44:	bd70      	pop	{r4, r5, r6, pc}
 8013c46:	260b      	movs	r6, #11
 8013c48:	4630      	mov	r0, r6
 8013c4a:	b002      	add	sp, #8
 8013c4c:	bd70      	pop	{r4, r5, r6, pc}
 8013c4e:	bf00      	nop

08013c50 <rcl_timer_is_canceled>:
 8013c50:	b168      	cbz	r0, 8013c6e <rcl_timer_is_canceled+0x1e>
 8013c52:	b161      	cbz	r1, 8013c6e <rcl_timer_is_canceled+0x1e>
 8013c54:	6803      	ldr	r3, [r0, #0]
 8013c56:	f3bf 8f5b 	dmb	ish
 8013c5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013c5e:	f3bf 8f5b 	dmb	ish
 8013c62:	3b00      	subs	r3, #0
 8013c64:	bf18      	it	ne
 8013c66:	2301      	movne	r3, #1
 8013c68:	700b      	strb	r3, [r1, #0]
 8013c6a:	2000      	movs	r0, #0
 8013c6c:	4770      	bx	lr
 8013c6e:	200b      	movs	r0, #11
 8013c70:	4770      	bx	lr
 8013c72:	bf00      	nop

08013c74 <rcl_timer_get_guard_condition>:
 8013c74:	b130      	cbz	r0, 8013c84 <rcl_timer_get_guard_condition+0x10>
 8013c76:	6800      	ldr	r0, [r0, #0]
 8013c78:	b120      	cbz	r0, 8013c84 <rcl_timer_get_guard_condition+0x10>
 8013c7a:	68c3      	ldr	r3, [r0, #12]
 8013c7c:	b10b      	cbz	r3, 8013c82 <rcl_timer_get_guard_condition+0xe>
 8013c7e:	3008      	adds	r0, #8
 8013c80:	4770      	bx	lr
 8013c82:	4618      	mov	r0, r3
 8013c84:	4770      	bx	lr
 8013c86:	bf00      	nop

08013c88 <rcl_validate_enclave_name_with_size>:
 8013c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c8a:	b0c3      	sub	sp, #268	; 0x10c
 8013c8c:	b1d0      	cbz	r0, 8013cc4 <rcl_validate_enclave_name_with_size+0x3c>
 8013c8e:	4615      	mov	r5, r2
 8013c90:	b1c2      	cbz	r2, 8013cc4 <rcl_validate_enclave_name_with_size+0x3c>
 8013c92:	461f      	mov	r7, r3
 8013c94:	466a      	mov	r2, sp
 8013c96:	ab01      	add	r3, sp, #4
 8013c98:	460e      	mov	r6, r1
 8013c9a:	f001 f96f 	bl	8014f7c <rmw_validate_namespace_with_size>
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	b9e0      	cbnz	r0, 8013cdc <rcl_validate_enclave_name_with_size+0x54>
 8013ca2:	9b00      	ldr	r3, [sp, #0]
 8013ca4:	b923      	cbnz	r3, 8013cb0 <rcl_validate_enclave_name_with_size+0x28>
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	602b      	str	r3, [r5, #0]
 8013caa:	4620      	mov	r0, r4
 8013cac:	b043      	add	sp, #268	; 0x10c
 8013cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cb0:	2b07      	cmp	r3, #7
 8013cb2:	d00b      	beq.n	8013ccc <rcl_validate_enclave_name_with_size+0x44>
 8013cb4:	1e5a      	subs	r2, r3, #1
 8013cb6:	2a05      	cmp	r2, #5
 8013cb8:	d82e      	bhi.n	8013d18 <rcl_validate_enclave_name_with_size+0x90>
 8013cba:	e8df f002 	tbb	[pc, r2]
 8013cbe:	211e      	.short	0x211e
 8013cc0:	152a2724 	.word	0x152a2724
 8013cc4:	240b      	movs	r4, #11
 8013cc6:	4620      	mov	r0, r4
 8013cc8:	b043      	add	sp, #268	; 0x10c
 8013cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ccc:	2eff      	cmp	r6, #255	; 0xff
 8013cce:	d9ea      	bls.n	8013ca6 <rcl_validate_enclave_name_with_size+0x1e>
 8013cd0:	602b      	str	r3, [r5, #0]
 8013cd2:	2f00      	cmp	r7, #0
 8013cd4:	d0e9      	beq.n	8013caa <rcl_validate_enclave_name_with_size+0x22>
 8013cd6:	23fe      	movs	r3, #254	; 0xfe
 8013cd8:	603b      	str	r3, [r7, #0]
 8013cda:	e7e6      	b.n	8013caa <rcl_validate_enclave_name_with_size+0x22>
 8013cdc:	f7fe fefc 	bl	8012ad8 <rcl_convert_rmw_ret_to_rcl_ret>
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	4620      	mov	r0, r4
 8013ce4:	b043      	add	sp, #268	; 0x10c
 8013ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ce8:	2306      	movs	r3, #6
 8013cea:	602b      	str	r3, [r5, #0]
 8013cec:	2f00      	cmp	r7, #0
 8013cee:	d0dc      	beq.n	8013caa <rcl_validate_enclave_name_with_size+0x22>
 8013cf0:	9b01      	ldr	r3, [sp, #4]
 8013cf2:	603b      	str	r3, [r7, #0]
 8013cf4:	4620      	mov	r0, r4
 8013cf6:	b043      	add	sp, #268	; 0x10c
 8013cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	602b      	str	r3, [r5, #0]
 8013cfe:	e7f5      	b.n	8013cec <rcl_validate_enclave_name_with_size+0x64>
 8013d00:	2302      	movs	r3, #2
 8013d02:	602b      	str	r3, [r5, #0]
 8013d04:	e7f2      	b.n	8013cec <rcl_validate_enclave_name_with_size+0x64>
 8013d06:	2303      	movs	r3, #3
 8013d08:	602b      	str	r3, [r5, #0]
 8013d0a:	e7ef      	b.n	8013cec <rcl_validate_enclave_name_with_size+0x64>
 8013d0c:	2304      	movs	r3, #4
 8013d0e:	602b      	str	r3, [r5, #0]
 8013d10:	e7ec      	b.n	8013cec <rcl_validate_enclave_name_with_size+0x64>
 8013d12:	2305      	movs	r3, #5
 8013d14:	602b      	str	r3, [r5, #0]
 8013d16:	e7e9      	b.n	8013cec <rcl_validate_enclave_name_with_size+0x64>
 8013d18:	4a03      	ldr	r2, [pc, #12]	; (8013d28 <rcl_validate_enclave_name_with_size+0xa0>)
 8013d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013d1e:	a802      	add	r0, sp, #8
 8013d20:	f001 f8a6 	bl	8014e70 <rcutils_snprintf>
 8013d24:	2401      	movs	r4, #1
 8013d26:	e7c0      	b.n	8013caa <rcl_validate_enclave_name_with_size+0x22>
 8013d28:	08019bf8 	.word	0x08019bf8

08013d2c <rcl_validate_enclave_name>:
 8013d2c:	b168      	cbz	r0, 8013d4a <rcl_validate_enclave_name+0x1e>
 8013d2e:	b570      	push	{r4, r5, r6, lr}
 8013d30:	460d      	mov	r5, r1
 8013d32:	4616      	mov	r6, r2
 8013d34:	4604      	mov	r4, r0
 8013d36:	f7ec fa5d 	bl	80001f4 <strlen>
 8013d3a:	4633      	mov	r3, r6
 8013d3c:	4601      	mov	r1, r0
 8013d3e:	462a      	mov	r2, r5
 8013d40:	4620      	mov	r0, r4
 8013d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d46:	f7ff bf9f 	b.w	8013c88 <rcl_validate_enclave_name_with_size>
 8013d4a:	200b      	movs	r0, #11
 8013d4c:	4770      	bx	lr
 8013d4e:	bf00      	nop

08013d50 <rcl_validate_topic_name>:
 8013d50:	2800      	cmp	r0, #0
 8013d52:	f000 808b 	beq.w	8013e6c <rcl_validate_topic_name+0x11c>
 8013d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d5a:	460e      	mov	r6, r1
 8013d5c:	2900      	cmp	r1, #0
 8013d5e:	f000 808c 	beq.w	8013e7a <rcl_validate_topic_name+0x12a>
 8013d62:	4617      	mov	r7, r2
 8013d64:	4605      	mov	r5, r0
 8013d66:	f7ec fa45 	bl	80001f4 <strlen>
 8013d6a:	b1b0      	cbz	r0, 8013d9a <rcl_validate_topic_name+0x4a>
 8013d6c:	f895 9000 	ldrb.w	r9, [r5]
 8013d70:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8013f20 <rcl_validate_topic_name+0x1d0>
 8013d74:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8013d78:	f013 0304 	ands.w	r3, r3, #4
 8013d7c:	d178      	bne.n	8013e70 <rcl_validate_topic_name+0x120>
 8013d7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8013d82:	f815 2008 	ldrb.w	r2, [r5, r8]
 8013d86:	2a2f      	cmp	r2, #47	; 0x2f
 8013d88:	d10e      	bne.n	8013da8 <rcl_validate_topic_name+0x58>
 8013d8a:	2202      	movs	r2, #2
 8013d8c:	6032      	str	r2, [r6, #0]
 8013d8e:	b36f      	cbz	r7, 8013dec <rcl_validate_topic_name+0x9c>
 8013d90:	f8c7 8000 	str.w	r8, [r7]
 8013d94:	4618      	mov	r0, r3
 8013d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	6033      	str	r3, [r6, #0]
 8013d9e:	b32f      	cbz	r7, 8013dec <rcl_validate_topic_name+0x9c>
 8013da0:	2000      	movs	r0, #0
 8013da2:	6038      	str	r0, [r7, #0]
 8013da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013da8:	461c      	mov	r4, r3
 8013daa:	4619      	mov	r1, r3
 8013dac:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8013db0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8013db4:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013db8:	f1be 0f09 	cmp.w	lr, #9
 8013dbc:	d946      	bls.n	8013e4c <rcl_validate_topic_name+0xfc>
 8013dbe:	f022 0e20 	bic.w	lr, r2, #32
 8013dc2:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8013dc6:	f1be 0f19 	cmp.w	lr, #25
 8013dca:	d93f      	bls.n	8013e4c <rcl_validate_topic_name+0xfc>
 8013dcc:	2a5f      	cmp	r2, #95	; 0x5f
 8013dce:	d014      	beq.n	8013dfa <rcl_validate_topic_name+0xaa>
 8013dd0:	2a2f      	cmp	r2, #47	; 0x2f
 8013dd2:	d05b      	beq.n	8013e8c <rcl_validate_topic_name+0x13c>
 8013dd4:	2a7e      	cmp	r2, #126	; 0x7e
 8013dd6:	d052      	beq.n	8013e7e <rcl_validate_topic_name+0x12e>
 8013dd8:	2a7b      	cmp	r2, #123	; 0x7b
 8013dda:	d00a      	beq.n	8013df2 <rcl_validate_topic_name+0xa2>
 8013ddc:	2a7d      	cmp	r2, #125	; 0x7d
 8013dde:	d16f      	bne.n	8013ec0 <rcl_validate_topic_name+0x170>
 8013de0:	2c00      	cmp	r4, #0
 8013de2:	d15e      	bne.n	8013ea2 <rcl_validate_topic_name+0x152>
 8013de4:	2305      	movs	r3, #5
 8013de6:	6033      	str	r3, [r6, #0]
 8013de8:	b107      	cbz	r7, 8013dec <rcl_validate_topic_name+0x9c>
 8013dea:	6039      	str	r1, [r7, #0]
 8013dec:	2000      	movs	r0, #0
 8013dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013df2:	2c00      	cmp	r4, #0
 8013df4:	d14c      	bne.n	8013e90 <rcl_validate_topic_name+0x140>
 8013df6:	460b      	mov	r3, r1
 8013df8:	2401      	movs	r4, #1
 8013dfa:	3101      	adds	r1, #1
 8013dfc:	4288      	cmp	r0, r1
 8013dfe:	d1d7      	bne.n	8013db0 <rcl_validate_topic_name+0x60>
 8013e00:	2c00      	cmp	r4, #0
 8013e02:	d156      	bne.n	8013eb2 <rcl_validate_topic_name+0x162>
 8013e04:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8013e08:	4620      	mov	r0, r4
 8013e0a:	d061      	beq.n	8013ed0 <rcl_validate_topic_name+0x180>
 8013e0c:	f108 0e01 	add.w	lr, r8, #1
 8013e10:	e007      	b.n	8013e22 <rcl_validate_topic_name+0xd2>
 8013e12:	2801      	cmp	r0, #1
 8013e14:	d047      	beq.n	8013ea6 <rcl_validate_topic_name+0x156>
 8013e16:	461a      	mov	r2, r3
 8013e18:	4291      	cmp	r1, r2
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f105 0501 	add.w	r5, r5, #1
 8013e20:	d944      	bls.n	8013eac <rcl_validate_topic_name+0x15c>
 8013e22:	4580      	cmp	r8, r0
 8013e24:	f100 0301 	add.w	r3, r0, #1
 8013e28:	d037      	beq.n	8013e9a <rcl_validate_topic_name+0x14a>
 8013e2a:	782a      	ldrb	r2, [r5, #0]
 8013e2c:	2a2f      	cmp	r2, #47	; 0x2f
 8013e2e:	d1f0      	bne.n	8013e12 <rcl_validate_topic_name+0xc2>
 8013e30:	786b      	ldrb	r3, [r5, #1]
 8013e32:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8013e36:	1c43      	adds	r3, r0, #1
 8013e38:	0760      	lsls	r0, r4, #29
 8013e3a:	461a      	mov	r2, r3
 8013e3c:	d5ec      	bpl.n	8013e18 <rcl_validate_topic_name+0xc8>
 8013e3e:	2304      	movs	r3, #4
 8013e40:	6033      	str	r3, [r6, #0]
 8013e42:	2f00      	cmp	r7, #0
 8013e44:	d0d2      	beq.n	8013dec <rcl_validate_topic_name+0x9c>
 8013e46:	603a      	str	r2, [r7, #0]
 8013e48:	2000      	movs	r0, #0
 8013e4a:	e7ab      	b.n	8013da4 <rcl_validate_topic_name+0x54>
 8013e4c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013e50:	0752      	lsls	r2, r2, #29
 8013e52:	d5d2      	bpl.n	8013dfa <rcl_validate_topic_name+0xaa>
 8013e54:	2c00      	cmp	r4, #0
 8013e56:	d0d0      	beq.n	8013dfa <rcl_validate_topic_name+0xaa>
 8013e58:	2900      	cmp	r1, #0
 8013e5a:	d0ce      	beq.n	8013dfa <rcl_validate_topic_name+0xaa>
 8013e5c:	1e4a      	subs	r2, r1, #1
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d1cb      	bne.n	8013dfa <rcl_validate_topic_name+0xaa>
 8013e62:	2309      	movs	r3, #9
 8013e64:	6033      	str	r3, [r6, #0]
 8013e66:	2f00      	cmp	r7, #0
 8013e68:	d1bf      	bne.n	8013dea <rcl_validate_topic_name+0x9a>
 8013e6a:	e7bf      	b.n	8013dec <rcl_validate_topic_name+0x9c>
 8013e6c:	200b      	movs	r0, #11
 8013e6e:	4770      	bx	lr
 8013e70:	2304      	movs	r3, #4
 8013e72:	6033      	str	r3, [r6, #0]
 8013e74:	2f00      	cmp	r7, #0
 8013e76:	d193      	bne.n	8013da0 <rcl_validate_topic_name+0x50>
 8013e78:	e7b8      	b.n	8013dec <rcl_validate_topic_name+0x9c>
 8013e7a:	200b      	movs	r0, #11
 8013e7c:	e792      	b.n	8013da4 <rcl_validate_topic_name+0x54>
 8013e7e:	2900      	cmp	r1, #0
 8013e80:	d0bb      	beq.n	8013dfa <rcl_validate_topic_name+0xaa>
 8013e82:	2306      	movs	r3, #6
 8013e84:	6033      	str	r3, [r6, #0]
 8013e86:	2f00      	cmp	r7, #0
 8013e88:	d1af      	bne.n	8013dea <rcl_validate_topic_name+0x9a>
 8013e8a:	e7af      	b.n	8013dec <rcl_validate_topic_name+0x9c>
 8013e8c:	2c00      	cmp	r4, #0
 8013e8e:	d0b4      	beq.n	8013dfa <rcl_validate_topic_name+0xaa>
 8013e90:	2308      	movs	r3, #8
 8013e92:	6033      	str	r3, [r6, #0]
 8013e94:	2f00      	cmp	r7, #0
 8013e96:	d1a8      	bne.n	8013dea <rcl_validate_topic_name+0x9a>
 8013e98:	e7a8      	b.n	8013dec <rcl_validate_topic_name+0x9c>
 8013e9a:	4672      	mov	r2, lr
 8013e9c:	f108 0301 	add.w	r3, r8, #1
 8013ea0:	e7ba      	b.n	8013e18 <rcl_validate_topic_name+0xc8>
 8013ea2:	2400      	movs	r4, #0
 8013ea4:	e7a9      	b.n	8013dfa <rcl_validate_topic_name+0xaa>
 8013ea6:	2202      	movs	r2, #2
 8013ea8:	4613      	mov	r3, r2
 8013eaa:	e7b5      	b.n	8013e18 <rcl_validate_topic_name+0xc8>
 8013eac:	2000      	movs	r0, #0
 8013eae:	6030      	str	r0, [r6, #0]
 8013eb0:	e778      	b.n	8013da4 <rcl_validate_topic_name+0x54>
 8013eb2:	2205      	movs	r2, #5
 8013eb4:	6032      	str	r2, [r6, #0]
 8013eb6:	2f00      	cmp	r7, #0
 8013eb8:	d098      	beq.n	8013dec <rcl_validate_topic_name+0x9c>
 8013eba:	603b      	str	r3, [r7, #0]
 8013ebc:	2000      	movs	r0, #0
 8013ebe:	e771      	b.n	8013da4 <rcl_validate_topic_name+0x54>
 8013ec0:	2c00      	cmp	r4, #0
 8013ec2:	bf14      	ite	ne
 8013ec4:	2308      	movne	r3, #8
 8013ec6:	2303      	moveq	r3, #3
 8013ec8:	6033      	str	r3, [r6, #0]
 8013eca:	2f00      	cmp	r7, #0
 8013ecc:	d18d      	bne.n	8013dea <rcl_validate_topic_name+0x9a>
 8013ece:	e78d      	b.n	8013dec <rcl_validate_topic_name+0x9c>
 8013ed0:	f108 0401 	add.w	r4, r8, #1
 8013ed4:	e007      	b.n	8013ee6 <rcl_validate_topic_name+0x196>
 8013ed6:	2801      	cmp	r0, #1
 8013ed8:	d019      	beq.n	8013f0e <rcl_validate_topic_name+0x1be>
 8013eda:	461a      	mov	r2, r3
 8013edc:	4291      	cmp	r1, r2
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f105 0501 	add.w	r5, r5, #1
 8013ee4:	d9e2      	bls.n	8013eac <rcl_validate_topic_name+0x15c>
 8013ee6:	4580      	cmp	r8, r0
 8013ee8:	f100 0301 	add.w	r3, r0, #1
 8013eec:	d00b      	beq.n	8013f06 <rcl_validate_topic_name+0x1b6>
 8013eee:	782a      	ldrb	r2, [r5, #0]
 8013ef0:	2a2f      	cmp	r2, #47	; 0x2f
 8013ef2:	d1f0      	bne.n	8013ed6 <rcl_validate_topic_name+0x186>
 8013ef4:	786b      	ldrb	r3, [r5, #1]
 8013ef6:	f81c e003 	ldrb.w	lr, [ip, r3]
 8013efa:	1c43      	adds	r3, r0, #1
 8013efc:	f01e 0f04 	tst.w	lr, #4
 8013f00:	461a      	mov	r2, r3
 8013f02:	d0eb      	beq.n	8013edc <rcl_validate_topic_name+0x18c>
 8013f04:	e79b      	b.n	8013e3e <rcl_validate_topic_name+0xee>
 8013f06:	4622      	mov	r2, r4
 8013f08:	f108 0301 	add.w	r3, r8, #1
 8013f0c:	e7e6      	b.n	8013edc <rcl_validate_topic_name+0x18c>
 8013f0e:	2307      	movs	r3, #7
 8013f10:	6033      	str	r3, [r6, #0]
 8013f12:	2f00      	cmp	r7, #0
 8013f14:	f43f af6a 	beq.w	8013dec <rcl_validate_topic_name+0x9c>
 8013f18:	6038      	str	r0, [r7, #0]
 8013f1a:	2000      	movs	r0, #0
 8013f1c:	e742      	b.n	8013da4 <rcl_validate_topic_name+0x54>
 8013f1e:	bf00      	nop
 8013f20:	0801a280 	.word	0x0801a280

08013f24 <rcl_get_zero_initialized_wait_set>:
 8013f24:	b470      	push	{r4, r5, r6}
 8013f26:	4d07      	ldr	r5, [pc, #28]	; (8013f44 <rcl_get_zero_initialized_wait_set+0x20>)
 8013f28:	4606      	mov	r6, r0
 8013f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f2c:	4634      	mov	r4, r6
 8013f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f38:	682b      	ldr	r3, [r5, #0]
 8013f3a:	6023      	str	r3, [r4, #0]
 8013f3c:	4630      	mov	r0, r6
 8013f3e:	bc70      	pop	{r4, r5, r6}
 8013f40:	4770      	bx	lr
 8013f42:	bf00      	nop
 8013f44:	08019c58 	.word	0x08019c58

08013f48 <rcl_wait_set_is_valid>:
 8013f48:	b118      	cbz	r0, 8013f52 <rcl_wait_set_is_valid+0xa>
 8013f4a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8013f4c:	3800      	subs	r0, #0
 8013f4e:	bf18      	it	ne
 8013f50:	2001      	movne	r0, #1
 8013f52:	4770      	bx	lr

08013f54 <rcl_wait_set_fini>:
 8013f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f58:	b082      	sub	sp, #8
 8013f5a:	2800      	cmp	r0, #0
 8013f5c:	f000 8095 	beq.w	801408a <rcl_wait_set_fini+0x136>
 8013f60:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8013f62:	4604      	mov	r4, r0
 8013f64:	2e00      	cmp	r6, #0
 8013f66:	f000 808c 	beq.w	8014082 <rcl_wait_set_fini+0x12e>
 8013f6a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8013f6c:	f002 f806 	bl	8015f7c <rmw_destroy_wait_set>
 8013f70:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013f72:	1e06      	subs	r6, r0, #0
 8013f74:	bf18      	it	ne
 8013f76:	f44f 7661 	movne.w	r6, #900	; 0x384
 8013f7a:	2d00      	cmp	r5, #0
 8013f7c:	f000 8081 	beq.w	8014082 <rcl_wait_set_fini+0x12e>
 8013f80:	6820      	ldr	r0, [r4, #0]
 8013f82:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8013f86:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013f88:	2700      	movs	r7, #0
 8013f8a:	6067      	str	r7, [r4, #4]
 8013f8c:	602f      	str	r7, [r5, #0]
 8013f8e:	b120      	cbz	r0, 8013f9a <rcl_wait_set_fini+0x46>
 8013f90:	9101      	str	r1, [sp, #4]
 8013f92:	47c0      	blx	r8
 8013f94:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013f96:	9901      	ldr	r1, [sp, #4]
 8013f98:	6027      	str	r7, [r4, #0]
 8013f9a:	68a8      	ldr	r0, [r5, #8]
 8013f9c:	b120      	cbz	r0, 8013fa8 <rcl_wait_set_fini+0x54>
 8013f9e:	47c0      	blx	r8
 8013fa0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013fa8:	68a0      	ldr	r0, [r4, #8]
 8013faa:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013fac:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013fae:	f04f 0800 	mov.w	r8, #0
 8013fb2:	f8c4 800c 	str.w	r8, [r4, #12]
 8013fb6:	f8c5 800c 	str.w	r8, [r5, #12]
 8013fba:	b128      	cbz	r0, 8013fc8 <rcl_wait_set_fini+0x74>
 8013fbc:	47b8      	blx	r7
 8013fbe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013fc0:	f8c4 8008 	str.w	r8, [r4, #8]
 8013fc4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013fc6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013fc8:	6968      	ldr	r0, [r5, #20]
 8013fca:	f04f 0800 	mov.w	r8, #0
 8013fce:	f8c5 8010 	str.w	r8, [r5, #16]
 8013fd2:	b128      	cbz	r0, 8013fe0 <rcl_wait_set_fini+0x8c>
 8013fd4:	47b8      	blx	r7
 8013fd6:	f8c5 8014 	str.w	r8, [r5, #20]
 8013fda:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013fdc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013fde:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013fe0:	6920      	ldr	r0, [r4, #16]
 8013fe2:	f04f 0800 	mov.w	r8, #0
 8013fe6:	f8c4 8014 	str.w	r8, [r4, #20]
 8013fea:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8013fee:	b128      	cbz	r0, 8013ffc <rcl_wait_set_fini+0xa8>
 8013ff0:	47b8      	blx	r7
 8013ff2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013ff4:	f8c4 8010 	str.w	r8, [r4, #16]
 8013ff8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013ffa:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013ffc:	69a0      	ldr	r0, [r4, #24]
 8013ffe:	f04f 0800 	mov.w	r8, #0
 8014002:	f8c4 801c 	str.w	r8, [r4, #28]
 8014006:	f8c5 8018 	str.w	r8, [r5, #24]
 801400a:	b128      	cbz	r0, 8014018 <rcl_wait_set_fini+0xc4>
 801400c:	9101      	str	r1, [sp, #4]
 801400e:	47b8      	blx	r7
 8014010:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014012:	9901      	ldr	r1, [sp, #4]
 8014014:	f8c4 8018 	str.w	r8, [r4, #24]
 8014018:	6a28      	ldr	r0, [r5, #32]
 801401a:	b120      	cbz	r0, 8014026 <rcl_wait_set_fini+0xd2>
 801401c:	47b8      	blx	r7
 801401e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014020:	2300      	movs	r3, #0
 8014022:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014026:	6a20      	ldr	r0, [r4, #32]
 8014028:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801402c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801402e:	2700      	movs	r7, #0
 8014030:	6267      	str	r7, [r4, #36]	; 0x24
 8014032:	626f      	str	r7, [r5, #36]	; 0x24
 8014034:	b120      	cbz	r0, 8014040 <rcl_wait_set_fini+0xec>
 8014036:	9101      	str	r1, [sp, #4]
 8014038:	47c0      	blx	r8
 801403a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801403c:	9901      	ldr	r1, [sp, #4]
 801403e:	6227      	str	r7, [r4, #32]
 8014040:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014042:	b120      	cbz	r0, 801404e <rcl_wait_set_fini+0xfa>
 8014044:	47c0      	blx	r8
 8014046:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014048:	2300      	movs	r3, #0
 801404a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801404e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014050:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8014054:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014056:	2700      	movs	r7, #0
 8014058:	62e7      	str	r7, [r4, #44]	; 0x2c
 801405a:	632f      	str	r7, [r5, #48]	; 0x30
 801405c:	b120      	cbz	r0, 8014068 <rcl_wait_set_fini+0x114>
 801405e:	9101      	str	r1, [sp, #4]
 8014060:	47c0      	blx	r8
 8014062:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014064:	9901      	ldr	r1, [sp, #4]
 8014066:	62a7      	str	r7, [r4, #40]	; 0x28
 8014068:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801406a:	b120      	cbz	r0, 8014076 <rcl_wait_set_fini+0x122>
 801406c:	47c0      	blx	r8
 801406e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014070:	2300      	movs	r3, #0
 8014072:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8014076:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8014078:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801407a:	4628      	mov	r0, r5
 801407c:	4798      	blx	r3
 801407e:	2300      	movs	r3, #0
 8014080:	6323      	str	r3, [r4, #48]	; 0x30
 8014082:	4630      	mov	r0, r6
 8014084:	b002      	add	sp, #8
 8014086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801408a:	260b      	movs	r6, #11
 801408c:	4630      	mov	r0, r6
 801408e:	b002      	add	sp, #8
 8014090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014094 <rcl_wait_set_add_subscription>:
 8014094:	b320      	cbz	r0, 80140e0 <rcl_wait_set_add_subscription+0x4c>
 8014096:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014098:	b570      	push	{r4, r5, r6, lr}
 801409a:	4604      	mov	r4, r0
 801409c:	b1d3      	cbz	r3, 80140d4 <rcl_wait_set_add_subscription+0x40>
 801409e:	b319      	cbz	r1, 80140e8 <rcl_wait_set_add_subscription+0x54>
 80140a0:	681d      	ldr	r5, [r3, #0]
 80140a2:	6860      	ldr	r0, [r4, #4]
 80140a4:	4285      	cmp	r5, r0
 80140a6:	d218      	bcs.n	80140da <rcl_wait_set_add_subscription+0x46>
 80140a8:	6820      	ldr	r0, [r4, #0]
 80140aa:	1c6e      	adds	r6, r5, #1
 80140ac:	601e      	str	r6, [r3, #0]
 80140ae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80140b2:	b102      	cbz	r2, 80140b6 <rcl_wait_set_add_subscription+0x22>
 80140b4:	6015      	str	r5, [r2, #0]
 80140b6:	4608      	mov	r0, r1
 80140b8:	f7f8 ff60 	bl	800cf7c <rcl_subscription_get_rmw_handle>
 80140bc:	b190      	cbz	r0, 80140e4 <rcl_wait_set_add_subscription+0x50>
 80140be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80140c0:	6842      	ldr	r2, [r0, #4]
 80140c2:	689b      	ldr	r3, [r3, #8]
 80140c4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80140c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80140ca:	6853      	ldr	r3, [r2, #4]
 80140cc:	3301      	adds	r3, #1
 80140ce:	6053      	str	r3, [r2, #4]
 80140d0:	2000      	movs	r0, #0
 80140d2:	bd70      	pop	{r4, r5, r6, pc}
 80140d4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80140d8:	bd70      	pop	{r4, r5, r6, pc}
 80140da:	f240 3086 	movw	r0, #902	; 0x386
 80140de:	bd70      	pop	{r4, r5, r6, pc}
 80140e0:	200b      	movs	r0, #11
 80140e2:	4770      	bx	lr
 80140e4:	2001      	movs	r0, #1
 80140e6:	bd70      	pop	{r4, r5, r6, pc}
 80140e8:	200b      	movs	r0, #11
 80140ea:	bd70      	pop	{r4, r5, r6, pc}

080140ec <rcl_wait_set_clear>:
 80140ec:	2800      	cmp	r0, #0
 80140ee:	d073      	beq.n	80141d8 <rcl_wait_set_clear+0xec>
 80140f0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80140f2:	b510      	push	{r4, lr}
 80140f4:	4604      	mov	r4, r0
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d070      	beq.n	80141dc <rcl_wait_set_clear+0xf0>
 80140fa:	6800      	ldr	r0, [r0, #0]
 80140fc:	b138      	cbz	r0, 801410e <rcl_wait_set_clear+0x22>
 80140fe:	6862      	ldr	r2, [r4, #4]
 8014100:	2100      	movs	r1, #0
 8014102:	0092      	lsls	r2, r2, #2
 8014104:	f004 fa88 	bl	8018618 <memset>
 8014108:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801410a:	2200      	movs	r2, #0
 801410c:	601a      	str	r2, [r3, #0]
 801410e:	68a0      	ldr	r0, [r4, #8]
 8014110:	b138      	cbz	r0, 8014122 <rcl_wait_set_clear+0x36>
 8014112:	68e2      	ldr	r2, [r4, #12]
 8014114:	2100      	movs	r1, #0
 8014116:	0092      	lsls	r2, r2, #2
 8014118:	f004 fa7e 	bl	8018618 <memset>
 801411c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801411e:	2200      	movs	r2, #0
 8014120:	60da      	str	r2, [r3, #12]
 8014122:	69a0      	ldr	r0, [r4, #24]
 8014124:	b138      	cbz	r0, 8014136 <rcl_wait_set_clear+0x4a>
 8014126:	69e2      	ldr	r2, [r4, #28]
 8014128:	2100      	movs	r1, #0
 801412a:	0092      	lsls	r2, r2, #2
 801412c:	f004 fa74 	bl	8018618 <memset>
 8014130:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014132:	2200      	movs	r2, #0
 8014134:	619a      	str	r2, [r3, #24]
 8014136:	6a20      	ldr	r0, [r4, #32]
 8014138:	b138      	cbz	r0, 801414a <rcl_wait_set_clear+0x5e>
 801413a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801413c:	2100      	movs	r1, #0
 801413e:	0092      	lsls	r2, r2, #2
 8014140:	f004 fa6a 	bl	8018618 <memset>
 8014144:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014146:	2200      	movs	r2, #0
 8014148:	625a      	str	r2, [r3, #36]	; 0x24
 801414a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801414c:	b138      	cbz	r0, 801415e <rcl_wait_set_clear+0x72>
 801414e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014150:	2100      	movs	r1, #0
 8014152:	0092      	lsls	r2, r2, #2
 8014154:	f004 fa60 	bl	8018618 <memset>
 8014158:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801415a:	2200      	movs	r2, #0
 801415c:	631a      	str	r2, [r3, #48]	; 0x30
 801415e:	6920      	ldr	r0, [r4, #16]
 8014160:	b138      	cbz	r0, 8014172 <rcl_wait_set_clear+0x86>
 8014162:	6962      	ldr	r2, [r4, #20]
 8014164:	2100      	movs	r1, #0
 8014166:	0092      	lsls	r2, r2, #2
 8014168:	f004 fa56 	bl	8018618 <memset>
 801416c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801416e:	2200      	movs	r2, #0
 8014170:	641a      	str	r2, [r3, #64]	; 0x40
 8014172:	6898      	ldr	r0, [r3, #8]
 8014174:	b138      	cbz	r0, 8014186 <rcl_wait_set_clear+0x9a>
 8014176:	685a      	ldr	r2, [r3, #4]
 8014178:	2100      	movs	r1, #0
 801417a:	0092      	lsls	r2, r2, #2
 801417c:	f004 fa4c 	bl	8018618 <memset>
 8014180:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014182:	2200      	movs	r2, #0
 8014184:	605a      	str	r2, [r3, #4]
 8014186:	6958      	ldr	r0, [r3, #20]
 8014188:	b138      	cbz	r0, 801419a <rcl_wait_set_clear+0xae>
 801418a:	691a      	ldr	r2, [r3, #16]
 801418c:	2100      	movs	r1, #0
 801418e:	0092      	lsls	r2, r2, #2
 8014190:	f004 fa42 	bl	8018618 <memset>
 8014194:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014196:	2200      	movs	r2, #0
 8014198:	611a      	str	r2, [r3, #16]
 801419a:	6a18      	ldr	r0, [r3, #32]
 801419c:	b138      	cbz	r0, 80141ae <rcl_wait_set_clear+0xc2>
 801419e:	69da      	ldr	r2, [r3, #28]
 80141a0:	2100      	movs	r1, #0
 80141a2:	0092      	lsls	r2, r2, #2
 80141a4:	f004 fa38 	bl	8018618 <memset>
 80141a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141aa:	2200      	movs	r2, #0
 80141ac:	61da      	str	r2, [r3, #28]
 80141ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80141b0:	b138      	cbz	r0, 80141c2 <rcl_wait_set_clear+0xd6>
 80141b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80141b4:	2100      	movs	r1, #0
 80141b6:	0092      	lsls	r2, r2, #2
 80141b8:	f004 fa2e 	bl	8018618 <memset>
 80141bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141be:	2200      	movs	r2, #0
 80141c0:	629a      	str	r2, [r3, #40]	; 0x28
 80141c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80141c4:	b138      	cbz	r0, 80141d6 <rcl_wait_set_clear+0xea>
 80141c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80141c8:	2100      	movs	r1, #0
 80141ca:	0092      	lsls	r2, r2, #2
 80141cc:	f004 fa24 	bl	8018618 <memset>
 80141d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141d2:	2000      	movs	r0, #0
 80141d4:	6358      	str	r0, [r3, #52]	; 0x34
 80141d6:	bd10      	pop	{r4, pc}
 80141d8:	200b      	movs	r0, #11
 80141da:	4770      	bx	lr
 80141dc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80141e0:	bd10      	pop	{r4, pc}
 80141e2:	bf00      	nop

080141e4 <rcl_wait_set_resize>:
 80141e4:	2800      	cmp	r0, #0
 80141e6:	f000 81a6 	beq.w	8014536 <rcl_wait_set_resize+0x352>
 80141ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141ee:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 80141f2:	b083      	sub	sp, #12
 80141f4:	4604      	mov	r4, r0
 80141f6:	f1ba 0f00 	cmp.w	sl, #0
 80141fa:	f000 819e 	beq.w	801453a <rcl_wait_set_resize+0x356>
 80141fe:	461e      	mov	r6, r3
 8014200:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8014204:	f04f 0800 	mov.w	r8, #0
 8014208:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 801420c:	9300      	str	r3, [sp, #0]
 801420e:	f8c0 8004 	str.w	r8, [r0, #4]
 8014212:	460f      	mov	r7, r1
 8014214:	4615      	mov	r5, r2
 8014216:	f8ca 8000 	str.w	r8, [sl]
 801421a:	2900      	cmp	r1, #0
 801421c:	f000 80c9 	beq.w	80143b2 <rcl_wait_set_resize+0x1ce>
 8014220:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8014224:	6800      	ldr	r0, [r0, #0]
 8014226:	4651      	mov	r1, sl
 8014228:	464a      	mov	r2, r9
 801422a:	4798      	blx	r3
 801422c:	6020      	str	r0, [r4, #0]
 801422e:	2800      	cmp	r0, #0
 8014230:	f000 80d8 	beq.w	80143e4 <rcl_wait_set_resize+0x200>
 8014234:	4652      	mov	r2, sl
 8014236:	4641      	mov	r1, r8
 8014238:	f004 f9ee 	bl	8018618 <memset>
 801423c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801423e:	6067      	str	r7, [r4, #4]
 8014240:	6898      	ldr	r0, [r3, #8]
 8014242:	f8c3 8004 	str.w	r8, [r3, #4]
 8014246:	9301      	str	r3, [sp, #4]
 8014248:	464a      	mov	r2, r9
 801424a:	9b00      	ldr	r3, [sp, #0]
 801424c:	4651      	mov	r1, sl
 801424e:	4798      	blx	r3
 8014250:	9b01      	ldr	r3, [sp, #4]
 8014252:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014254:	6098      	str	r0, [r3, #8]
 8014256:	6897      	ldr	r7, [r2, #8]
 8014258:	2f00      	cmp	r7, #0
 801425a:	f000 80be 	beq.w	80143da <rcl_wait_set_resize+0x1f6>
 801425e:	4652      	mov	r2, sl
 8014260:	4641      	mov	r1, r8
 8014262:	4638      	mov	r0, r7
 8014264:	f004 f9d8 	bl	8018618 <memset>
 8014268:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801426c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014270:	2700      	movs	r7, #0
 8014272:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8014276:	60e7      	str	r7, [r4, #12]
 8014278:	f8ca 700c 	str.w	r7, [sl, #12]
 801427c:	2d00      	cmp	r5, #0
 801427e:	f040 80b5 	bne.w	80143ec <rcl_wait_set_resize+0x208>
 8014282:	68a0      	ldr	r0, [r4, #8]
 8014284:	b130      	cbz	r0, 8014294 <rcl_wait_set_resize+0xb0>
 8014286:	4641      	mov	r1, r8
 8014288:	4790      	blx	r2
 801428a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801428e:	60a5      	str	r5, [r4, #8]
 8014290:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014294:	2700      	movs	r7, #0
 8014296:	19ad      	adds	r5, r5, r6
 8014298:	f8ca 7010 	str.w	r7, [sl, #16]
 801429c:	f040 80be 	bne.w	801441c <rcl_wait_set_resize+0x238>
 80142a0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80142a4:	b148      	cbz	r0, 80142ba <rcl_wait_set_resize+0xd6>
 80142a6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80142aa:	4641      	mov	r1, r8
 80142ac:	4798      	blx	r3
 80142ae:	f8ca 5014 	str.w	r5, [sl, #20]
 80142b2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80142b6:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80142ba:	2500      	movs	r5, #0
 80142bc:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80142c0:	6165      	str	r5, [r4, #20]
 80142c2:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 80142c6:	2e00      	cmp	r6, #0
 80142c8:	f040 80bf 	bne.w	801444a <rcl_wait_set_resize+0x266>
 80142cc:	6920      	ldr	r0, [r4, #16]
 80142ce:	b140      	cbz	r0, 80142e2 <rcl_wait_set_resize+0xfe>
 80142d0:	4641      	mov	r1, r8
 80142d2:	47c8      	blx	r9
 80142d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80142d8:	6126      	str	r6, [r4, #16]
 80142da:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80142de:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80142e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142e4:	2500      	movs	r5, #0
 80142e6:	61e5      	str	r5, [r4, #28]
 80142e8:	f8ca 5018 	str.w	r5, [sl, #24]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	f040 80c1 	bne.w	8014474 <rcl_wait_set_resize+0x290>
 80142f2:	69a0      	ldr	r0, [r4, #24]
 80142f4:	b128      	cbz	r0, 8014302 <rcl_wait_set_resize+0x11e>
 80142f6:	4641      	mov	r1, r8
 80142f8:	47c8      	blx	r9
 80142fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142fc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014300:	61a3      	str	r3, [r4, #24]
 8014302:	f8da 0020 	ldr.w	r0, [sl, #32]
 8014306:	b130      	cbz	r0, 8014316 <rcl_wait_set_resize+0x132>
 8014308:	4641      	mov	r1, r8
 801430a:	47c8      	blx	r9
 801430c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014310:	2300      	movs	r3, #0
 8014312:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8014316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014318:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 801431c:	2600      	movs	r6, #0
 801431e:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 8014322:	6266      	str	r6, [r4, #36]	; 0x24
 8014324:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8014328:	2b00      	cmp	r3, #0
 801432a:	f000 80c8 	beq.w	80144be <rcl_wait_set_resize+0x2da>
 801432e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014332:	6a20      	ldr	r0, [r4, #32]
 8014334:	4651      	mov	r1, sl
 8014336:	463a      	mov	r2, r7
 8014338:	47c8      	blx	r9
 801433a:	6220      	str	r0, [r4, #32]
 801433c:	2800      	cmp	r0, #0
 801433e:	d051      	beq.n	80143e4 <rcl_wait_set_resize+0x200>
 8014340:	4652      	mov	r2, sl
 8014342:	4631      	mov	r1, r6
 8014344:	f004 f968 	bl	8018618 <memset>
 8014348:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801434a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801434c:	6263      	str	r3, [r4, #36]	; 0x24
 801434e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014350:	62ae      	str	r6, [r5, #40]	; 0x28
 8014352:	463a      	mov	r2, r7
 8014354:	4651      	mov	r1, sl
 8014356:	47c8      	blx	r9
 8014358:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801435a:	62e8      	str	r0, [r5, #44]	; 0x2c
 801435c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801435e:	2d00      	cmp	r5, #0
 8014360:	f000 8105 	beq.w	801456e <rcl_wait_set_resize+0x38a>
 8014364:	4652      	mov	r2, sl
 8014366:	4631      	mov	r1, r6
 8014368:	4628      	mov	r0, r5
 801436a:	f004 f955 	bl	8018618 <memset>
 801436e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014374:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8014378:	2500      	movs	r5, #0
 801437a:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 801437e:	62e5      	str	r5, [r4, #44]	; 0x2c
 8014380:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8014384:	2b00      	cmp	r3, #0
 8014386:	f040 80af 	bne.w	80144e8 <rcl_wait_set_resize+0x304>
 801438a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801438c:	b128      	cbz	r0, 801439a <rcl_wait_set_resize+0x1b6>
 801438e:	4631      	mov	r1, r6
 8014390:	47b8      	blx	r7
 8014392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014394:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014398:	62a3      	str	r3, [r4, #40]	; 0x28
 801439a:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801439e:	b310      	cbz	r0, 80143e6 <rcl_wait_set_resize+0x202>
 80143a0:	4631      	mov	r1, r6
 80143a2:	47b8      	blx	r7
 80143a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80143a6:	2000      	movs	r0, #0
 80143a8:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 80143ac:	b003      	add	sp, #12
 80143ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143b2:	6800      	ldr	r0, [r0, #0]
 80143b4:	b120      	cbz	r0, 80143c0 <rcl_wait_set_resize+0x1dc>
 80143b6:	4649      	mov	r1, r9
 80143b8:	47d8      	blx	fp
 80143ba:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80143be:	6027      	str	r7, [r4, #0]
 80143c0:	f8da 0008 	ldr.w	r0, [sl, #8]
 80143c4:	2800      	cmp	r0, #0
 80143c6:	f43f af51 	beq.w	801426c <rcl_wait_set_resize+0x88>
 80143ca:	4649      	mov	r1, r9
 80143cc:	47d8      	blx	fp
 80143ce:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80143d2:	2300      	movs	r3, #0
 80143d4:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80143d8:	e748      	b.n	801426c <rcl_wait_set_resize+0x88>
 80143da:	6820      	ldr	r0, [r4, #0]
 80143dc:	4649      	mov	r1, r9
 80143de:	47d8      	blx	fp
 80143e0:	e9c4 7700 	strd	r7, r7, [r4]
 80143e4:	200a      	movs	r0, #10
 80143e6:	b003      	add	sp, #12
 80143e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ec:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80143f0:	68a0      	ldr	r0, [r4, #8]
 80143f2:	4642      	mov	r2, r8
 80143f4:	4649      	mov	r1, r9
 80143f6:	4798      	blx	r3
 80143f8:	60a0      	str	r0, [r4, #8]
 80143fa:	2800      	cmp	r0, #0
 80143fc:	d0f2      	beq.n	80143e4 <rcl_wait_set_resize+0x200>
 80143fe:	4639      	mov	r1, r7
 8014400:	464a      	mov	r2, r9
 8014402:	f004 f909 	bl	8018618 <memset>
 8014406:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801440a:	60e5      	str	r5, [r4, #12]
 801440c:	2700      	movs	r7, #0
 801440e:	19ad      	adds	r5, r5, r6
 8014410:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014414:	f8ca 7010 	str.w	r7, [sl, #16]
 8014418:	f43f af42 	beq.w	80142a0 <rcl_wait_set_resize+0xbc>
 801441c:	00ad      	lsls	r5, r5, #2
 801441e:	4642      	mov	r2, r8
 8014420:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8014424:	f8da 0014 	ldr.w	r0, [sl, #20]
 8014428:	4629      	mov	r1, r5
 801442a:	4798      	blx	r3
 801442c:	4680      	mov	r8, r0
 801442e:	f8ca 0014 	str.w	r0, [sl, #20]
 8014432:	2800      	cmp	r0, #0
 8014434:	f000 8084 	beq.w	8014540 <rcl_wait_set_resize+0x35c>
 8014438:	462a      	mov	r2, r5
 801443a:	4639      	mov	r1, r7
 801443c:	f004 f8ec 	bl	8018618 <memset>
 8014440:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014444:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014448:	e737      	b.n	80142ba <rcl_wait_set_resize+0xd6>
 801444a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801444e:	6920      	ldr	r0, [r4, #16]
 8014450:	4642      	mov	r2, r8
 8014452:	4649      	mov	r1, r9
 8014454:	47b8      	blx	r7
 8014456:	6120      	str	r0, [r4, #16]
 8014458:	2800      	cmp	r0, #0
 801445a:	d0c3      	beq.n	80143e4 <rcl_wait_set_resize+0x200>
 801445c:	464a      	mov	r2, r9
 801445e:	4629      	mov	r1, r5
 8014460:	f004 f8da 	bl	8018618 <memset>
 8014464:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014468:	6166      	str	r6, [r4, #20]
 801446a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801446e:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014472:	e736      	b.n	80142e2 <rcl_wait_set_resize+0xfe>
 8014474:	009e      	lsls	r6, r3, #2
 8014476:	69a0      	ldr	r0, [r4, #24]
 8014478:	4631      	mov	r1, r6
 801447a:	4642      	mov	r2, r8
 801447c:	47b8      	blx	r7
 801447e:	61a0      	str	r0, [r4, #24]
 8014480:	2800      	cmp	r0, #0
 8014482:	d0af      	beq.n	80143e4 <rcl_wait_set_resize+0x200>
 8014484:	4632      	mov	r2, r6
 8014486:	4629      	mov	r1, r5
 8014488:	f004 f8c6 	bl	8018618 <memset>
 801448c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014492:	61e3      	str	r3, [r4, #28]
 8014494:	f8da 0020 	ldr.w	r0, [sl, #32]
 8014498:	f8ca 501c 	str.w	r5, [sl, #28]
 801449c:	4642      	mov	r2, r8
 801449e:	4631      	mov	r1, r6
 80144a0:	47b8      	blx	r7
 80144a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80144a4:	f8ca 0020 	str.w	r0, [sl, #32]
 80144a8:	6a1f      	ldr	r7, [r3, #32]
 80144aa:	2f00      	cmp	r7, #0
 80144ac:	d058      	beq.n	8014560 <rcl_wait_set_resize+0x37c>
 80144ae:	4632      	mov	r2, r6
 80144b0:	4629      	mov	r1, r5
 80144b2:	4638      	mov	r0, r7
 80144b4:	f004 f8b0 	bl	8018618 <memset>
 80144b8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144bc:	e72b      	b.n	8014316 <rcl_wait_set_resize+0x132>
 80144be:	6a20      	ldr	r0, [r4, #32]
 80144c0:	b128      	cbz	r0, 80144ce <rcl_wait_set_resize+0x2ea>
 80144c2:	4639      	mov	r1, r7
 80144c4:	47c0      	blx	r8
 80144c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144c8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144cc:	6223      	str	r3, [r4, #32]
 80144ce:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 80144d2:	2800      	cmp	r0, #0
 80144d4:	f43f af4d 	beq.w	8014372 <rcl_wait_set_resize+0x18e>
 80144d8:	4639      	mov	r1, r7
 80144da:	47c0      	blx	r8
 80144dc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144e0:	2300      	movs	r3, #0
 80144e2:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 80144e6:	e744      	b.n	8014372 <rcl_wait_set_resize+0x18e>
 80144e8:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80144ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80144ee:	4641      	mov	r1, r8
 80144f0:	4632      	mov	r2, r6
 80144f2:	47c8      	blx	r9
 80144f4:	62a0      	str	r0, [r4, #40]	; 0x28
 80144f6:	2800      	cmp	r0, #0
 80144f8:	f43f af74 	beq.w	80143e4 <rcl_wait_set_resize+0x200>
 80144fc:	4642      	mov	r2, r8
 80144fe:	4629      	mov	r1, r5
 8014500:	f004 f88a 	bl	8018618 <memset>
 8014504:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801450a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801450c:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8014510:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8014514:	4632      	mov	r2, r6
 8014516:	4641      	mov	r1, r8
 8014518:	47c8      	blx	r9
 801451a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801451c:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8014520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014522:	b35b      	cbz	r3, 801457c <rcl_wait_set_resize+0x398>
 8014524:	4642      	mov	r2, r8
 8014526:	4618      	mov	r0, r3
 8014528:	4629      	mov	r1, r5
 801452a:	f004 f875 	bl	8018618 <memset>
 801452e:	4628      	mov	r0, r5
 8014530:	b003      	add	sp, #12
 8014532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014536:	200b      	movs	r0, #11
 8014538:	4770      	bx	lr
 801453a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801453e:	e752      	b.n	80143e6 <rcl_wait_set_resize+0x202>
 8014540:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014542:	68a0      	ldr	r0, [r4, #8]
 8014544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014546:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8014548:	4790      	blx	r2
 801454a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801454c:	6920      	ldr	r0, [r4, #16]
 801454e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014550:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8014552:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8014556:	4790      	blx	r2
 8014558:	e9c4 8804 	strd	r8, r8, [r4, #16]
 801455c:	200a      	movs	r0, #10
 801455e:	e742      	b.n	80143e6 <rcl_wait_set_resize+0x202>
 8014560:	69a0      	ldr	r0, [r4, #24]
 8014562:	4641      	mov	r1, r8
 8014564:	47c8      	blx	r9
 8014566:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801456a:	200a      	movs	r0, #10
 801456c:	e73b      	b.n	80143e6 <rcl_wait_set_resize+0x202>
 801456e:	6a20      	ldr	r0, [r4, #32]
 8014570:	4639      	mov	r1, r7
 8014572:	47c0      	blx	r8
 8014574:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8014578:	200a      	movs	r0, #10
 801457a:	e734      	b.n	80143e6 <rcl_wait_set_resize+0x202>
 801457c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801457e:	9300      	str	r3, [sp, #0]
 8014580:	4631      	mov	r1, r6
 8014582:	47b8      	blx	r7
 8014584:	9b00      	ldr	r3, [sp, #0]
 8014586:	200a      	movs	r0, #10
 8014588:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801458c:	e72b      	b.n	80143e6 <rcl_wait_set_resize+0x202>
 801458e:	bf00      	nop

08014590 <rcl_wait_set_init>:
 8014590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014594:	b084      	sub	sp, #16
 8014596:	4604      	mov	r4, r0
 8014598:	a810      	add	r0, sp, #64	; 0x40
 801459a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801459e:	460f      	mov	r7, r1
 80145a0:	4690      	mov	r8, r2
 80145a2:	4699      	mov	r9, r3
 80145a4:	f7f9 f96a 	bl	800d87c <rcutils_allocator_is_valid>
 80145a8:	2800      	cmp	r0, #0
 80145aa:	d06b      	beq.n	8014684 <rcl_wait_set_init+0xf4>
 80145ac:	2c00      	cmp	r4, #0
 80145ae:	d069      	beq.n	8014684 <rcl_wait_set_init+0xf4>
 80145b0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80145b2:	b125      	cbz	r5, 80145be <rcl_wait_set_init+0x2e>
 80145b4:	2564      	movs	r5, #100	; 0x64
 80145b6:	4628      	mov	r0, r5
 80145b8:	b004      	add	sp, #16
 80145ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145be:	f1ba 0f00 	cmp.w	sl, #0
 80145c2:	d05f      	beq.n	8014684 <rcl_wait_set_init+0xf4>
 80145c4:	4650      	mov	r0, sl
 80145c6:	f7fe faa5 	bl	8012b14 <rcl_context_is_valid>
 80145ca:	2800      	cmp	r0, #0
 80145cc:	d067      	beq.n	801469e <rcl_wait_set_init+0x10e>
 80145ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145d0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80145d2:	205c      	movs	r0, #92	; 0x5c
 80145d4:	4798      	blx	r3
 80145d6:	6320      	str	r0, [r4, #48]	; 0x30
 80145d8:	2800      	cmp	r0, #0
 80145da:	d062      	beq.n	80146a2 <rcl_wait_set_init+0x112>
 80145dc:	225c      	movs	r2, #92	; 0x5c
 80145de:	4629      	mov	r1, r5
 80145e0:	f004 f81a 	bl	8018618 <memset>
 80145e4:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80145e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80145ec:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80145ee:	f8dc e000 	ldr.w	lr, [ip]
 80145f2:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 80145f6:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 80145fa:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80145fe:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8014602:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8014606:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 801460a:	60b5      	str	r5, [r6, #8]
 801460c:	6075      	str	r5, [r6, #4]
 801460e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014612:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8014616:	1899      	adds	r1, r3, r2
 8014618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801461a:	f8da 0000 	ldr.w	r0, [sl]
 801461e:	f8cc e000 	str.w	lr, [ip]
 8014622:	4419      	add	r1, r3
 8014624:	4441      	add	r1, r8
 8014626:	3028      	adds	r0, #40	; 0x28
 8014628:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801462c:	f001 fc9c 	bl	8015f68 <rmw_create_wait_set>
 8014630:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014632:	63f0      	str	r0, [r6, #60]	; 0x3c
 8014634:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8014636:	b350      	cbz	r0, 801468e <rcl_wait_set_init+0xfe>
 8014638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801463a:	9302      	str	r3, [sp, #8]
 801463c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801463e:	9301      	str	r3, [sp, #4]
 8014640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014642:	9300      	str	r3, [sp, #0]
 8014644:	4642      	mov	r2, r8
 8014646:	464b      	mov	r3, r9
 8014648:	4639      	mov	r1, r7
 801464a:	4620      	mov	r0, r4
 801464c:	f7ff fdca 	bl	80141e4 <rcl_wait_set_resize>
 8014650:	4605      	mov	r5, r0
 8014652:	2800      	cmp	r0, #0
 8014654:	d0af      	beq.n	80145b6 <rcl_wait_set_init+0x26>
 8014656:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014658:	bb2b      	cbnz	r3, 80146a6 <rcl_wait_set_init+0x116>
 801465a:	2600      	movs	r6, #0
 801465c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8014660:	9600      	str	r6, [sp, #0]
 8014662:	4633      	mov	r3, r6
 8014664:	4632      	mov	r2, r6
 8014666:	4631      	mov	r1, r6
 8014668:	4620      	mov	r0, r4
 801466a:	f7ff fdbb 	bl	80141e4 <rcl_wait_set_resize>
 801466e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014670:	2800      	cmp	r0, #0
 8014672:	d0a0      	beq.n	80145b6 <rcl_wait_set_init+0x26>
 8014674:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014676:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8014678:	4798      	blx	r3
 801467a:	4628      	mov	r0, r5
 801467c:	6326      	str	r6, [r4, #48]	; 0x30
 801467e:	b004      	add	sp, #16
 8014680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014684:	250b      	movs	r5, #11
 8014686:	4628      	mov	r0, r5
 8014688:	b004      	add	sp, #16
 801468a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801468e:	2501      	movs	r5, #1
 8014690:	f001 fc74 	bl	8015f7c <rmw_destroy_wait_set>
 8014694:	2800      	cmp	r0, #0
 8014696:	bf18      	it	ne
 8014698:	f44f 7561 	movne.w	r5, #900	; 0x384
 801469c:	e7dd      	b.n	801465a <rcl_wait_set_init+0xca>
 801469e:	2565      	movs	r5, #101	; 0x65
 80146a0:	e789      	b.n	80145b6 <rcl_wait_set_init+0x26>
 80146a2:	250a      	movs	r5, #10
 80146a4:	e787      	b.n	80145b6 <rcl_wait_set_init+0x26>
 80146a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80146a8:	e7f2      	b.n	8014690 <rcl_wait_set_init+0x100>
 80146aa:	bf00      	nop

080146ac <rcl_wait_set_add_guard_condition>:
 80146ac:	b320      	cbz	r0, 80146f8 <rcl_wait_set_add_guard_condition+0x4c>
 80146ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80146b0:	b570      	push	{r4, r5, r6, lr}
 80146b2:	4604      	mov	r4, r0
 80146b4:	b1d3      	cbz	r3, 80146ec <rcl_wait_set_add_guard_condition+0x40>
 80146b6:	b319      	cbz	r1, 8014700 <rcl_wait_set_add_guard_condition+0x54>
 80146b8:	68dd      	ldr	r5, [r3, #12]
 80146ba:	68e0      	ldr	r0, [r4, #12]
 80146bc:	4285      	cmp	r5, r0
 80146be:	d218      	bcs.n	80146f2 <rcl_wait_set_add_guard_condition+0x46>
 80146c0:	68a0      	ldr	r0, [r4, #8]
 80146c2:	1c6e      	adds	r6, r5, #1
 80146c4:	60de      	str	r6, [r3, #12]
 80146c6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80146ca:	b102      	cbz	r2, 80146ce <rcl_wait_set_add_guard_condition+0x22>
 80146cc:	6015      	str	r5, [r2, #0]
 80146ce:	4608      	mov	r0, r1
 80146d0:	f003 f96c 	bl	80179ac <rcl_guard_condition_get_rmw_handle>
 80146d4:	b190      	cbz	r0, 80146fc <rcl_wait_set_add_guard_condition+0x50>
 80146d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80146d8:	6842      	ldr	r2, [r0, #4]
 80146da:	695b      	ldr	r3, [r3, #20]
 80146dc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80146e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80146e2:	6913      	ldr	r3, [r2, #16]
 80146e4:	3301      	adds	r3, #1
 80146e6:	6113      	str	r3, [r2, #16]
 80146e8:	2000      	movs	r0, #0
 80146ea:	bd70      	pop	{r4, r5, r6, pc}
 80146ec:	f44f 7061 	mov.w	r0, #900	; 0x384
 80146f0:	bd70      	pop	{r4, r5, r6, pc}
 80146f2:	f240 3086 	movw	r0, #902	; 0x386
 80146f6:	bd70      	pop	{r4, r5, r6, pc}
 80146f8:	200b      	movs	r0, #11
 80146fa:	4770      	bx	lr
 80146fc:	2001      	movs	r0, #1
 80146fe:	bd70      	pop	{r4, r5, r6, pc}
 8014700:	200b      	movs	r0, #11
 8014702:	bd70      	pop	{r4, r5, r6, pc}

08014704 <rcl_wait_set_add_timer>:
 8014704:	b340      	cbz	r0, 8014758 <rcl_wait_set_add_timer+0x54>
 8014706:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014708:	b570      	push	{r4, r5, r6, lr}
 801470a:	4604      	mov	r4, r0
 801470c:	b1f3      	cbz	r3, 801474c <rcl_wait_set_add_timer+0x48>
 801470e:	b329      	cbz	r1, 801475c <rcl_wait_set_add_timer+0x58>
 8014710:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8014712:	6965      	ldr	r5, [r4, #20]
 8014714:	42a8      	cmp	r0, r5
 8014716:	d21c      	bcs.n	8014752 <rcl_wait_set_add_timer+0x4e>
 8014718:	6925      	ldr	r5, [r4, #16]
 801471a:	1c46      	adds	r6, r0, #1
 801471c:	641e      	str	r6, [r3, #64]	; 0x40
 801471e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8014722:	b102      	cbz	r2, 8014726 <rcl_wait_set_add_timer+0x22>
 8014724:	6010      	str	r0, [r2, #0]
 8014726:	4608      	mov	r0, r1
 8014728:	f7ff faa4 	bl	8013c74 <rcl_timer_get_guard_condition>
 801472c:	b168      	cbz	r0, 801474a <rcl_wait_set_add_timer+0x46>
 801472e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014730:	68e3      	ldr	r3, [r4, #12]
 8014732:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8014734:	3b01      	subs	r3, #1
 8014736:	441d      	add	r5, r3
 8014738:	f003 f938 	bl	80179ac <rcl_guard_condition_get_rmw_handle>
 801473c:	b180      	cbz	r0, 8014760 <rcl_wait_set_add_timer+0x5c>
 801473e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014740:	6842      	ldr	r2, [r0, #4]
 8014742:	695b      	ldr	r3, [r3, #20]
 8014744:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014748:	2000      	movs	r0, #0
 801474a:	bd70      	pop	{r4, r5, r6, pc}
 801474c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014750:	bd70      	pop	{r4, r5, r6, pc}
 8014752:	f240 3086 	movw	r0, #902	; 0x386
 8014756:	bd70      	pop	{r4, r5, r6, pc}
 8014758:	200b      	movs	r0, #11
 801475a:	4770      	bx	lr
 801475c:	200b      	movs	r0, #11
 801475e:	bd70      	pop	{r4, r5, r6, pc}
 8014760:	2001      	movs	r0, #1
 8014762:	bd70      	pop	{r4, r5, r6, pc}

08014764 <rcl_wait_set_add_client>:
 8014764:	b320      	cbz	r0, 80147b0 <rcl_wait_set_add_client+0x4c>
 8014766:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014768:	b570      	push	{r4, r5, r6, lr}
 801476a:	4604      	mov	r4, r0
 801476c:	b1d3      	cbz	r3, 80147a4 <rcl_wait_set_add_client+0x40>
 801476e:	b319      	cbz	r1, 80147b8 <rcl_wait_set_add_client+0x54>
 8014770:	699d      	ldr	r5, [r3, #24]
 8014772:	69e0      	ldr	r0, [r4, #28]
 8014774:	4285      	cmp	r5, r0
 8014776:	d218      	bcs.n	80147aa <rcl_wait_set_add_client+0x46>
 8014778:	69a0      	ldr	r0, [r4, #24]
 801477a:	1c6e      	adds	r6, r5, #1
 801477c:	619e      	str	r6, [r3, #24]
 801477e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014782:	b102      	cbz	r2, 8014786 <rcl_wait_set_add_client+0x22>
 8014784:	6015      	str	r5, [r2, #0]
 8014786:	4608      	mov	r0, r1
 8014788:	f7fe f964 	bl	8012a54 <rcl_client_get_rmw_handle>
 801478c:	b190      	cbz	r0, 80147b4 <rcl_wait_set_add_client+0x50>
 801478e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014790:	6842      	ldr	r2, [r0, #4]
 8014792:	6a1b      	ldr	r3, [r3, #32]
 8014794:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014798:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801479a:	69d3      	ldr	r3, [r2, #28]
 801479c:	3301      	adds	r3, #1
 801479e:	61d3      	str	r3, [r2, #28]
 80147a0:	2000      	movs	r0, #0
 80147a2:	bd70      	pop	{r4, r5, r6, pc}
 80147a4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80147a8:	bd70      	pop	{r4, r5, r6, pc}
 80147aa:	f240 3086 	movw	r0, #902	; 0x386
 80147ae:	bd70      	pop	{r4, r5, r6, pc}
 80147b0:	200b      	movs	r0, #11
 80147b2:	4770      	bx	lr
 80147b4:	2001      	movs	r0, #1
 80147b6:	bd70      	pop	{r4, r5, r6, pc}
 80147b8:	200b      	movs	r0, #11
 80147ba:	bd70      	pop	{r4, r5, r6, pc}

080147bc <rcl_wait_set_add_service>:
 80147bc:	b320      	cbz	r0, 8014808 <rcl_wait_set_add_service+0x4c>
 80147be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80147c0:	b570      	push	{r4, r5, r6, lr}
 80147c2:	4604      	mov	r4, r0
 80147c4:	b1d3      	cbz	r3, 80147fc <rcl_wait_set_add_service+0x40>
 80147c6:	b319      	cbz	r1, 8014810 <rcl_wait_set_add_service+0x54>
 80147c8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80147ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80147cc:	4285      	cmp	r5, r0
 80147ce:	d218      	bcs.n	8014802 <rcl_wait_set_add_service+0x46>
 80147d0:	6a20      	ldr	r0, [r4, #32]
 80147d2:	1c6e      	adds	r6, r5, #1
 80147d4:	625e      	str	r6, [r3, #36]	; 0x24
 80147d6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80147da:	b102      	cbz	r2, 80147de <rcl_wait_set_add_service+0x22>
 80147dc:	6015      	str	r5, [r2, #0]
 80147de:	4608      	mov	r0, r1
 80147e0:	f7ff f84e 	bl	8013880 <rcl_service_get_rmw_handle>
 80147e4:	b190      	cbz	r0, 801480c <rcl_wait_set_add_service+0x50>
 80147e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80147e8:	6842      	ldr	r2, [r0, #4]
 80147ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147ec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80147f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80147f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80147f4:	3301      	adds	r3, #1
 80147f6:	6293      	str	r3, [r2, #40]	; 0x28
 80147f8:	2000      	movs	r0, #0
 80147fa:	bd70      	pop	{r4, r5, r6, pc}
 80147fc:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014800:	bd70      	pop	{r4, r5, r6, pc}
 8014802:	f240 3086 	movw	r0, #902	; 0x386
 8014806:	bd70      	pop	{r4, r5, r6, pc}
 8014808:	200b      	movs	r0, #11
 801480a:	4770      	bx	lr
 801480c:	2001      	movs	r0, #1
 801480e:	bd70      	pop	{r4, r5, r6, pc}
 8014810:	200b      	movs	r0, #11
 8014812:	bd70      	pop	{r4, r5, r6, pc}
 8014814:	0000      	movs	r0, r0
	...

08014818 <rcl_wait>:
 8014818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801481c:	b08f      	sub	sp, #60	; 0x3c
 801481e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014822:	2800      	cmp	r0, #0
 8014824:	f000 814c 	beq.w	8014ac0 <rcl_wait+0x2a8>
 8014828:	6b05      	ldr	r5, [r0, #48]	; 0x30
 801482a:	4604      	mov	r4, r0
 801482c:	2d00      	cmp	r5, #0
 801482e:	f000 80bc 	beq.w	80149aa <rcl_wait+0x192>
 8014832:	6843      	ldr	r3, [r0, #4]
 8014834:	b973      	cbnz	r3, 8014854 <rcl_wait+0x3c>
 8014836:	68e3      	ldr	r3, [r4, #12]
 8014838:	b963      	cbnz	r3, 8014854 <rcl_wait+0x3c>
 801483a:	6963      	ldr	r3, [r4, #20]
 801483c:	b953      	cbnz	r3, 8014854 <rcl_wait+0x3c>
 801483e:	69e3      	ldr	r3, [r4, #28]
 8014840:	b943      	cbnz	r3, 8014854 <rcl_wait+0x3c>
 8014842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014844:	b933      	cbnz	r3, 8014854 <rcl_wait+0x3c>
 8014846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014848:	b923      	cbnz	r3, 8014854 <rcl_wait+0x3c>
 801484a:	f240 3085 	movw	r0, #901	; 0x385
 801484e:	b00f      	add	sp, #60	; 0x3c
 8014850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014858:	2a01      	cmp	r2, #1
 801485a:	f173 0300 	sbcs.w	r3, r3, #0
 801485e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8014860:	db56      	blt.n	8014910 <rcl_wait+0xf8>
 8014862:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8014866:	2900      	cmp	r1, #0
 8014868:	f000 8149 	beq.w	8014afe <rcl_wait+0x2e6>
 801486c:	2300      	movs	r3, #0
 801486e:	9307      	str	r3, [sp, #28]
 8014870:	469b      	mov	fp, r3
 8014872:	f04f 0800 	mov.w	r8, #0
 8014876:	f04f 0900 	mov.w	r9, #0
 801487a:	e00d      	b.n	8014898 <rcl_wait+0x80>
 801487c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801487e:	6922      	ldr	r2, [r4, #16]
 8014880:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8014882:	f842 000a 	str.w	r0, [r2, sl]
 8014886:	f118 0801 	adds.w	r8, r8, #1
 801488a:	f149 0900 	adc.w	r9, r9, #0
 801488e:	2300      	movs	r3, #0
 8014890:	4599      	cmp	r9, r3
 8014892:	bf08      	it	eq
 8014894:	4588      	cmpeq	r8, r1
 8014896:	d243      	bcs.n	8014920 <rcl_wait+0x108>
 8014898:	6922      	ldr	r2, [r4, #16]
 801489a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 801489e:	f852 000a 	ldr.w	r0, [r2, sl]
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d0ef      	beq.n	8014886 <rcl_wait+0x6e>
 80148a6:	68e2      	ldr	r2, [r4, #12]
 80148a8:	6969      	ldr	r1, [r5, #20]
 80148aa:	4442      	add	r2, r8
 80148ac:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80148b0:	b13b      	cbz	r3, 80148c2 <rcl_wait+0xaa>
 80148b2:	692a      	ldr	r2, [r5, #16]
 80148b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80148b8:	6921      	ldr	r1, [r4, #16]
 80148ba:	3201      	adds	r2, #1
 80148bc:	f851 000a 	ldr.w	r0, [r1, sl]
 80148c0:	612a      	str	r2, [r5, #16]
 80148c2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80148c6:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 80148ca:	f7ff f9c1 	bl	8013c50 <rcl_timer_is_canceled>
 80148ce:	2800      	cmp	r0, #0
 80148d0:	d1bd      	bne.n	801484e <rcl_wait+0x36>
 80148d2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80148d6:	2a00      	cmp	r2, #0
 80148d8:	d1d0      	bne.n	801487c <rcl_wait+0x64>
 80148da:	6922      	ldr	r2, [r4, #16]
 80148dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80148e0:	f852 000a 	ldr.w	r0, [r2, sl]
 80148e4:	a90a      	add	r1, sp, #40	; 0x28
 80148e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80148ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80148ee:	f7ff f98b 	bl	8013c08 <rcl_timer_get_time_until_next_call>
 80148f2:	2800      	cmp	r0, #0
 80148f4:	d1ab      	bne.n	801484e <rcl_wait+0x36>
 80148f6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80148fa:	42b2      	cmp	r2, r6
 80148fc:	eb73 0107 	sbcs.w	r1, r3, r7
 8014900:	da03      	bge.n	801490a <rcl_wait+0xf2>
 8014902:	461f      	mov	r7, r3
 8014904:	2301      	movs	r3, #1
 8014906:	4616      	mov	r6, r2
 8014908:	9307      	str	r3, [sp, #28]
 801490a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801490c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801490e:	e7ba      	b.n	8014886 <rcl_wait+0x6e>
 8014910:	2900      	cmp	r1, #0
 8014912:	f000 80de 	beq.w	8014ad2 <rcl_wait+0x2ba>
 8014916:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801491a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801491e:	e7a5      	b.n	801486c <rcl_wait+0x54>
 8014920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014924:	4313      	orrs	r3, r2
 8014926:	d145      	bne.n	80149b4 <rcl_wait+0x19c>
 8014928:	2300      	movs	r3, #0
 801492a:	2200      	movs	r2, #0
 801492c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014930:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014934:	ab0a      	add	r3, sp, #40	; 0x28
 8014936:	9302      	str	r3, [sp, #8]
 8014938:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801493a:	9301      	str	r3, [sp, #4]
 801493c:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8014940:	9300      	str	r3, [sp, #0]
 8014942:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8014946:	f105 031c 	add.w	r3, r5, #28
 801494a:	f105 0110 	add.w	r1, r5, #16
 801494e:	1d28      	adds	r0, r5, #4
 8014950:	f001 f98a 	bl	8015c68 <rmw_wait>
 8014954:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014958:	4680      	mov	r8, r0
 801495a:	b30a      	cbz	r2, 80149a0 <rcl_wait+0x188>
 801495c:	2500      	movs	r5, #0
 801495e:	462f      	mov	r7, r5
 8014960:	e004      	b.n	801496c <rcl_wait+0x154>
 8014962:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014966:	3501      	adds	r5, #1
 8014968:	42aa      	cmp	r2, r5
 801496a:	d919      	bls.n	80149a0 <rcl_wait+0x188>
 801496c:	6922      	ldr	r2, [r4, #16]
 801496e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014972:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8014976:	00ae      	lsls	r6, r5, #2
 8014978:	2800      	cmp	r0, #0
 801497a:	d0f3      	beq.n	8014964 <rcl_wait+0x14c>
 801497c:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8014980:	f7ff f90a 	bl	8013b98 <rcl_timer_is_ready>
 8014984:	2800      	cmp	r0, #0
 8014986:	f47f af62 	bne.w	801484e <rcl_wait+0x36>
 801498a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 801498e:	2a00      	cmp	r2, #0
 8014990:	d1e7      	bne.n	8014962 <rcl_wait+0x14a>
 8014992:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014994:	6921      	ldr	r1, [r4, #16]
 8014996:	518a      	str	r2, [r1, r6]
 8014998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801499a:	3501      	adds	r5, #1
 801499c:	42aa      	cmp	r2, r5
 801499e:	d8e5      	bhi.n	801496c <rcl_wait+0x154>
 80149a0:	f038 0002 	bics.w	r0, r8, #2
 80149a4:	d029      	beq.n	80149fa <rcl_wait+0x1e2>
 80149a6:	2001      	movs	r0, #1
 80149a8:	e751      	b.n	801484e <rcl_wait+0x36>
 80149aa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80149ae:	b00f      	add	sp, #60	; 0x3c
 80149b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149b8:	2a01      	cmp	r2, #1
 80149ba:	f173 0300 	sbcs.w	r3, r3, #0
 80149be:	f2c0 8083 	blt.w	8014ac8 <rcl_wait+0x2b0>
 80149c2:	2e00      	cmp	r6, #0
 80149c4:	f177 0300 	sbcs.w	r3, r7, #0
 80149c8:	bfbc      	itt	lt
 80149ca:	2600      	movlt	r6, #0
 80149cc:	2700      	movlt	r7, #0
 80149ce:	a34e      	add	r3, pc, #312	; (adr r3, 8014b08 <rcl_wait+0x2f0>)
 80149d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d4:	4630      	mov	r0, r6
 80149d6:	4639      	mov	r1, r7
 80149d8:	f7ec f888 	bl	8000aec <__aeabi_ldivmod>
 80149dc:	a34a      	add	r3, pc, #296	; (adr r3, 8014b08 <rcl_wait+0x2f0>)
 80149de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e2:	4680      	mov	r8, r0
 80149e4:	4689      	mov	r9, r1
 80149e6:	4630      	mov	r0, r6
 80149e8:	4639      	mov	r1, r7
 80149ea:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80149ee:	f7ec f87d 	bl	8000aec <__aeabi_ldivmod>
 80149f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80149f6:	ab0a      	add	r3, sp, #40	; 0x28
 80149f8:	e79d      	b.n	8014936 <rcl_wait+0x11e>
 80149fa:	6866      	ldr	r6, [r4, #4]
 80149fc:	4602      	mov	r2, r0
 80149fe:	b91e      	cbnz	r6, 8014a08 <rcl_wait+0x1f0>
 8014a00:	e00d      	b.n	8014a1e <rcl_wait+0x206>
 8014a02:	3201      	adds	r2, #1
 8014a04:	42b2      	cmp	r2, r6
 8014a06:	d00a      	beq.n	8014a1e <rcl_wait+0x206>
 8014a08:	6899      	ldr	r1, [r3, #8]
 8014a0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a0e:	2900      	cmp	r1, #0
 8014a10:	d1f7      	bne.n	8014a02 <rcl_wait+0x1ea>
 8014a12:	6825      	ldr	r5, [r4, #0]
 8014a14:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014a18:	3201      	adds	r2, #1
 8014a1a:	42b2      	cmp	r2, r6
 8014a1c:	d1f4      	bne.n	8014a08 <rcl_wait+0x1f0>
 8014a1e:	68e6      	ldr	r6, [r4, #12]
 8014a20:	2200      	movs	r2, #0
 8014a22:	b91e      	cbnz	r6, 8014a2c <rcl_wait+0x214>
 8014a24:	e00d      	b.n	8014a42 <rcl_wait+0x22a>
 8014a26:	3201      	adds	r2, #1
 8014a28:	42b2      	cmp	r2, r6
 8014a2a:	d00a      	beq.n	8014a42 <rcl_wait+0x22a>
 8014a2c:	6959      	ldr	r1, [r3, #20]
 8014a2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a32:	2900      	cmp	r1, #0
 8014a34:	d1f7      	bne.n	8014a26 <rcl_wait+0x20e>
 8014a36:	68a5      	ldr	r5, [r4, #8]
 8014a38:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014a3c:	3201      	adds	r2, #1
 8014a3e:	42b2      	cmp	r2, r6
 8014a40:	d1f4      	bne.n	8014a2c <rcl_wait+0x214>
 8014a42:	69e6      	ldr	r6, [r4, #28]
 8014a44:	2200      	movs	r2, #0
 8014a46:	b91e      	cbnz	r6, 8014a50 <rcl_wait+0x238>
 8014a48:	e00d      	b.n	8014a66 <rcl_wait+0x24e>
 8014a4a:	3201      	adds	r2, #1
 8014a4c:	42b2      	cmp	r2, r6
 8014a4e:	d00a      	beq.n	8014a66 <rcl_wait+0x24e>
 8014a50:	6a19      	ldr	r1, [r3, #32]
 8014a52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a56:	2900      	cmp	r1, #0
 8014a58:	d1f7      	bne.n	8014a4a <rcl_wait+0x232>
 8014a5a:	69a5      	ldr	r5, [r4, #24]
 8014a5c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014a60:	3201      	adds	r2, #1
 8014a62:	42b2      	cmp	r2, r6
 8014a64:	d1f4      	bne.n	8014a50 <rcl_wait+0x238>
 8014a66:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014a68:	2200      	movs	r2, #0
 8014a6a:	b91e      	cbnz	r6, 8014a74 <rcl_wait+0x25c>
 8014a6c:	e00d      	b.n	8014a8a <rcl_wait+0x272>
 8014a6e:	3201      	adds	r2, #1
 8014a70:	4296      	cmp	r6, r2
 8014a72:	d00a      	beq.n	8014a8a <rcl_wait+0x272>
 8014a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014a76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a7a:	2900      	cmp	r1, #0
 8014a7c:	d1f7      	bne.n	8014a6e <rcl_wait+0x256>
 8014a7e:	6a25      	ldr	r5, [r4, #32]
 8014a80:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014a84:	3201      	adds	r2, #1
 8014a86:	4296      	cmp	r6, r2
 8014a88:	d1f4      	bne.n	8014a74 <rcl_wait+0x25c>
 8014a8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	b91e      	cbnz	r6, 8014a98 <rcl_wait+0x280>
 8014a90:	e00d      	b.n	8014aae <rcl_wait+0x296>
 8014a92:	3201      	adds	r2, #1
 8014a94:	42b2      	cmp	r2, r6
 8014a96:	d00a      	beq.n	8014aae <rcl_wait+0x296>
 8014a98:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8014a9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a9e:	2900      	cmp	r1, #0
 8014aa0:	d1f7      	bne.n	8014a92 <rcl_wait+0x27a>
 8014aa2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8014aa4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014aa8:	3201      	adds	r2, #1
 8014aaa:	42b2      	cmp	r2, r6
 8014aac:	d1f4      	bne.n	8014a98 <rcl_wait+0x280>
 8014aae:	f1b8 0f02 	cmp.w	r8, #2
 8014ab2:	f47f aecc 	bne.w	801484e <rcl_wait+0x36>
 8014ab6:	9b07      	ldr	r3, [sp, #28]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	bf08      	it	eq
 8014abc:	2002      	moveq	r0, #2
 8014abe:	e6c6      	b.n	801484e <rcl_wait+0x36>
 8014ac0:	200b      	movs	r0, #11
 8014ac2:	b00f      	add	sp, #60	; 0x3c
 8014ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac8:	9b07      	ldr	r3, [sp, #28]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	f47f af79 	bne.w	80149c2 <rcl_wait+0x1aa>
 8014ad0:	e731      	b.n	8014936 <rcl_wait+0x11e>
 8014ad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ad6:	4313      	orrs	r3, r2
 8014ad8:	bf08      	it	eq
 8014ada:	9107      	streq	r1, [sp, #28]
 8014adc:	f43f af24 	beq.w	8014928 <rcl_wait+0x110>
 8014ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ae4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8014ae8:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8014aec:	2a01      	cmp	r2, #1
 8014aee:	f173 0300 	sbcs.w	r3, r3, #0
 8014af2:	f04f 0300 	mov.w	r3, #0
 8014af6:	9307      	str	r3, [sp, #28]
 8014af8:	f6bf af63 	bge.w	80149c2 <rcl_wait+0x1aa>
 8014afc:	e71b      	b.n	8014936 <rcl_wait+0x11e>
 8014afe:	4632      	mov	r2, r6
 8014b00:	463b      	mov	r3, r7
 8014b02:	e7f3      	b.n	8014aec <rcl_wait+0x2d4>
 8014b04:	f3af 8000 	nop.w
 8014b08:	3b9aca00 	.word	0x3b9aca00
 8014b0c:	00000000 	.word	0x00000000

08014b10 <__atomic_load_8>:
 8014b10:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014b14:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8014b18:	4b14      	ldr	r3, [pc, #80]	; (8014b6c <__atomic_load_8+0x5c>)
 8014b1a:	4a15      	ldr	r2, [pc, #84]	; (8014b70 <__atomic_load_8+0x60>)
 8014b1c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014b20:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014b24:	fb03 f301 	mul.w	r3, r3, r1
 8014b28:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8014b2c:	fba2 1203 	umull	r1, r2, r2, r3
 8014b30:	0912      	lsrs	r2, r2, #4
 8014b32:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8014b36:	b430      	push	{r4, r5}
 8014b38:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8014b3c:	4c0d      	ldr	r4, [pc, #52]	; (8014b74 <__atomic_load_8+0x64>)
 8014b3e:	1a9b      	subs	r3, r3, r2
 8014b40:	18e1      	adds	r1, r4, r3
 8014b42:	f04f 0501 	mov.w	r5, #1
 8014b46:	e8d1 2f4f 	ldrexb	r2, [r1]
 8014b4a:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8014b4e:	f1bc 0f00 	cmp.w	ip, #0
 8014b52:	d1f8      	bne.n	8014b46 <__atomic_load_8+0x36>
 8014b54:	f3bf 8f5b 	dmb	ish
 8014b58:	b2d2      	uxtb	r2, r2
 8014b5a:	2a00      	cmp	r2, #0
 8014b5c:	d1f3      	bne.n	8014b46 <__atomic_load_8+0x36>
 8014b5e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8014b62:	f3bf 8f5b 	dmb	ish
 8014b66:	54e2      	strb	r2, [r4, r3]
 8014b68:	bc30      	pop	{r4, r5}
 8014b6a:	4770      	bx	lr
 8014b6c:	27d4eb2d 	.word	0x27d4eb2d
 8014b70:	b21642c9 	.word	0xb21642c9
 8014b74:	20009c2c 	.word	0x20009c2c

08014b78 <__atomic_store_8>:
 8014b78:	b4f0      	push	{r4, r5, r6, r7}
 8014b7a:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8014b7e:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8014b82:	4914      	ldr	r1, [pc, #80]	; (8014bd4 <__atomic_store_8+0x5c>)
 8014b84:	4c14      	ldr	r4, [pc, #80]	; (8014bd8 <__atomic_store_8+0x60>)
 8014b86:	4e15      	ldr	r6, [pc, #84]	; (8014bdc <__atomic_store_8+0x64>)
 8014b88:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8014b8c:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8014b90:	fb01 f105 	mul.w	r1, r1, r5
 8014b94:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014b98:	fba4 5401 	umull	r5, r4, r4, r1
 8014b9c:	0924      	lsrs	r4, r4, #4
 8014b9e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8014ba2:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8014ba6:	1b09      	subs	r1, r1, r4
 8014ba8:	1875      	adds	r5, r6, r1
 8014baa:	f04f 0701 	mov.w	r7, #1
 8014bae:	e8d5 4f4f 	ldrexb	r4, [r5]
 8014bb2:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8014bb6:	f1bc 0f00 	cmp.w	ip, #0
 8014bba:	d1f8      	bne.n	8014bae <__atomic_store_8+0x36>
 8014bbc:	f3bf 8f5b 	dmb	ish
 8014bc0:	b2e4      	uxtb	r4, r4
 8014bc2:	2c00      	cmp	r4, #0
 8014bc4:	d1f3      	bne.n	8014bae <__atomic_store_8+0x36>
 8014bc6:	e9c0 2300 	strd	r2, r3, [r0]
 8014bca:	f3bf 8f5b 	dmb	ish
 8014bce:	5474      	strb	r4, [r6, r1]
 8014bd0:	bcf0      	pop	{r4, r5, r6, r7}
 8014bd2:	4770      	bx	lr
 8014bd4:	27d4eb2d 	.word	0x27d4eb2d
 8014bd8:	b21642c9 	.word	0xb21642c9
 8014bdc:	20009c2c 	.word	0x20009c2c

08014be0 <__atomic_exchange_8>:
 8014be0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8014be4:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8014be8:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8014bec:	4c16      	ldr	r4, [pc, #88]	; (8014c48 <__atomic_exchange_8+0x68>)
 8014bee:	4917      	ldr	r1, [pc, #92]	; (8014c4c <__atomic_exchange_8+0x6c>)
 8014bf0:	4e17      	ldr	r6, [pc, #92]	; (8014c50 <__atomic_exchange_8+0x70>)
 8014bf2:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8014bf6:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8014bfa:	fb04 f505 	mul.w	r5, r4, r5
 8014bfe:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8014c02:	fba1 4105 	umull	r4, r1, r1, r5
 8014c06:	0909      	lsrs	r1, r1, #4
 8014c08:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8014c0c:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8014c10:	1a6c      	subs	r4, r5, r1
 8014c12:	1931      	adds	r1, r6, r4
 8014c14:	f04f 0701 	mov.w	r7, #1
 8014c18:	e8d1 5f4f 	ldrexb	r5, [r1]
 8014c1c:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8014c20:	f1bc 0f00 	cmp.w	ip, #0
 8014c24:	d1f8      	bne.n	8014c18 <__atomic_exchange_8+0x38>
 8014c26:	f3bf 8f5b 	dmb	ish
 8014c2a:	b2ed      	uxtb	r5, r5
 8014c2c:	2d00      	cmp	r5, #0
 8014c2e:	d1f3      	bne.n	8014c18 <__atomic_exchange_8+0x38>
 8014c30:	e9d0 8900 	ldrd	r8, r9, [r0]
 8014c34:	e9c0 2300 	strd	r2, r3, [r0]
 8014c38:	f3bf 8f5b 	dmb	ish
 8014c3c:	5535      	strb	r5, [r6, r4]
 8014c3e:	4640      	mov	r0, r8
 8014c40:	4649      	mov	r1, r9
 8014c42:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8014c46:	4770      	bx	lr
 8014c48:	27d4eb2d 	.word	0x27d4eb2d
 8014c4c:	b21642c9 	.word	0xb21642c9
 8014c50:	20009c2c 	.word	0x20009c2c

08014c54 <rcutils_is_directory>:
 8014c54:	2000      	movs	r0, #0
 8014c56:	4770      	bx	lr

08014c58 <rcutils_join_path>:
 8014c58:	b082      	sub	sp, #8
 8014c5a:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014c5e:	2000      	movs	r0, #0
 8014c60:	b002      	add	sp, #8
 8014c62:	4770      	bx	lr

08014c64 <rcutils_to_native_path>:
 8014c64:	b084      	sub	sp, #16
 8014c66:	a801      	add	r0, sp, #4
 8014c68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014c6c:	b004      	add	sp, #16
 8014c6e:	2000      	movs	r0, #0
 8014c70:	4770      	bx	lr
 8014c72:	bf00      	nop

08014c74 <rcutils_format_string_limit>:
 8014c74:	b40f      	push	{r0, r1, r2, r3}
 8014c76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c78:	b083      	sub	sp, #12
 8014c7a:	ac08      	add	r4, sp, #32
 8014c7c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014c7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014c82:	b34e      	cbz	r6, 8014cd8 <rcutils_format_string_limit+0x64>
 8014c84:	a808      	add	r0, sp, #32
 8014c86:	f7f8 fdf9 	bl	800d87c <rcutils_allocator_is_valid>
 8014c8a:	b328      	cbz	r0, 8014cd8 <rcutils_format_string_limit+0x64>
 8014c8c:	2100      	movs	r1, #0
 8014c8e:	ab0f      	add	r3, sp, #60	; 0x3c
 8014c90:	4608      	mov	r0, r1
 8014c92:	4632      	mov	r2, r6
 8014c94:	e9cd 3300 	strd	r3, r3, [sp]
 8014c98:	f000 f904 	bl	8014ea4 <rcutils_vsnprintf>
 8014c9c:	1c43      	adds	r3, r0, #1
 8014c9e:	4605      	mov	r5, r0
 8014ca0:	d01a      	beq.n	8014cd8 <rcutils_format_string_limit+0x64>
 8014ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ca4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014ca6:	1c47      	adds	r7, r0, #1
 8014ca8:	429f      	cmp	r7, r3
 8014caa:	bf84      	itt	hi
 8014cac:	461f      	movhi	r7, r3
 8014cae:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8014cb2:	4638      	mov	r0, r7
 8014cb4:	9b08      	ldr	r3, [sp, #32]
 8014cb6:	4798      	blx	r3
 8014cb8:	4604      	mov	r4, r0
 8014cba:	b168      	cbz	r0, 8014cd8 <rcutils_format_string_limit+0x64>
 8014cbc:	9b01      	ldr	r3, [sp, #4]
 8014cbe:	4632      	mov	r2, r6
 8014cc0:	4639      	mov	r1, r7
 8014cc2:	f000 f8ef 	bl	8014ea4 <rcutils_vsnprintf>
 8014cc6:	2800      	cmp	r0, #0
 8014cc8:	db02      	blt.n	8014cd0 <rcutils_format_string_limit+0x5c>
 8014cca:	2300      	movs	r3, #0
 8014ccc:	5563      	strb	r3, [r4, r5]
 8014cce:	e004      	b.n	8014cda <rcutils_format_string_limit+0x66>
 8014cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	4798      	blx	r3
 8014cd8:	2400      	movs	r4, #0
 8014cda:	4620      	mov	r0, r4
 8014cdc:	b003      	add	sp, #12
 8014cde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014ce2:	b004      	add	sp, #16
 8014ce4:	4770      	bx	lr
 8014ce6:	bf00      	nop

08014ce8 <rcutils_get_env>:
 8014ce8:	b168      	cbz	r0, 8014d06 <rcutils_get_env+0x1e>
 8014cea:	b510      	push	{r4, lr}
 8014cec:	460c      	mov	r4, r1
 8014cee:	b129      	cbz	r1, 8014cfc <rcutils_get_env+0x14>
 8014cf0:	f002 ff8c 	bl	8017c0c <getenv>
 8014cf4:	b120      	cbz	r0, 8014d00 <rcutils_get_env+0x18>
 8014cf6:	6020      	str	r0, [r4, #0]
 8014cf8:	2000      	movs	r0, #0
 8014cfa:	bd10      	pop	{r4, pc}
 8014cfc:	4803      	ldr	r0, [pc, #12]	; (8014d0c <rcutils_get_env+0x24>)
 8014cfe:	bd10      	pop	{r4, pc}
 8014d00:	4b03      	ldr	r3, [pc, #12]	; (8014d10 <rcutils_get_env+0x28>)
 8014d02:	6023      	str	r3, [r4, #0]
 8014d04:	bd10      	pop	{r4, pc}
 8014d06:	4803      	ldr	r0, [pc, #12]	; (8014d14 <rcutils_get_env+0x2c>)
 8014d08:	4770      	bx	lr
 8014d0a:	bf00      	nop
 8014d0c:	08019ca8 	.word	0x08019ca8
 8014d10:	08019dcc 	.word	0x08019dcc
 8014d14:	08019c8c 	.word	0x08019c8c

08014d18 <rcutils_repl_str>:
 8014d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d1c:	ed2d 8b02 	vpush	{d8}
 8014d20:	b087      	sub	sp, #28
 8014d22:	4680      	mov	r8, r0
 8014d24:	4608      	mov	r0, r1
 8014d26:	f8cd 8000 	str.w	r8, [sp]
 8014d2a:	ee08 2a10 	vmov	s16, r2
 8014d2e:	468a      	mov	sl, r1
 8014d30:	4699      	mov	r9, r3
 8014d32:	f7eb fa5f 	bl	80001f4 <strlen>
 8014d36:	2600      	movs	r6, #0
 8014d38:	4647      	mov	r7, r8
 8014d3a:	9001      	str	r0, [sp, #4]
 8014d3c:	46b3      	mov	fp, r6
 8014d3e:	2510      	movs	r5, #16
 8014d40:	46b0      	mov	r8, r6
 8014d42:	e01d      	b.n	8014d80 <rcutils_repl_str+0x68>
 8014d44:	f10b 0b01 	add.w	fp, fp, #1
 8014d48:	455e      	cmp	r6, fp
 8014d4a:	d211      	bcs.n	8014d70 <rcutils_repl_str+0x58>
 8014d4c:	442e      	add	r6, r5
 8014d4e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014d52:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014d56:	00b1      	lsls	r1, r6, #2
 8014d58:	4798      	blx	r3
 8014d5a:	2800      	cmp	r0, #0
 8014d5c:	f000 8084 	beq.w	8014e68 <rcutils_repl_str+0x150>
 8014d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014d64:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8014d68:	bf28      	it	cs
 8014d6a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8014d6e:	4680      	mov	r8, r0
 8014d70:	9a00      	ldr	r2, [sp, #0]
 8014d72:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014d76:	1aa2      	subs	r2, r4, r2
 8014d78:	f843 2c04 	str.w	r2, [r3, #-4]
 8014d7c:	9b01      	ldr	r3, [sp, #4]
 8014d7e:	18e7      	adds	r7, r4, r3
 8014d80:	4651      	mov	r1, sl
 8014d82:	4638      	mov	r0, r7
 8014d84:	f003 fc6f 	bl	8018666 <strstr>
 8014d88:	4604      	mov	r4, r0
 8014d8a:	4640      	mov	r0, r8
 8014d8c:	2c00      	cmp	r4, #0
 8014d8e:	d1d9      	bne.n	8014d44 <rcutils_repl_str+0x2c>
 8014d90:	46b8      	mov	r8, r7
 8014d92:	4607      	mov	r7, r0
 8014d94:	4640      	mov	r0, r8
 8014d96:	f7eb fa2d 	bl	80001f4 <strlen>
 8014d9a:	9b00      	ldr	r3, [sp, #0]
 8014d9c:	eba8 0303 	sub.w	r3, r8, r3
 8014da0:	181d      	adds	r5, r3, r0
 8014da2:	9504      	str	r5, [sp, #16]
 8014da4:	f1bb 0f00 	cmp.w	fp, #0
 8014da8:	d03d      	beq.n	8014e26 <rcutils_repl_str+0x10e>
 8014daa:	ee18 0a10 	vmov	r0, s16
 8014dae:	f7eb fa21 	bl	80001f4 <strlen>
 8014db2:	9b01      	ldr	r3, [sp, #4]
 8014db4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014db8:	1ac3      	subs	r3, r0, r3
 8014dba:	fb0b 5303 	mla	r3, fp, r3, r5
 8014dbe:	9305      	str	r3, [sp, #20]
 8014dc0:	4606      	mov	r6, r0
 8014dc2:	1c58      	adds	r0, r3, #1
 8014dc4:	f8d9 3000 	ldr.w	r3, [r9]
 8014dc8:	4798      	blx	r3
 8014dca:	9003      	str	r0, [sp, #12]
 8014dcc:	2800      	cmp	r0, #0
 8014dce:	d04c      	beq.n	8014e6a <rcutils_repl_str+0x152>
 8014dd0:	683a      	ldr	r2, [r7, #0]
 8014dd2:	9900      	ldr	r1, [sp, #0]
 8014dd4:	f003 fd3f 	bl	8018856 <memcpy>
 8014dd8:	9b03      	ldr	r3, [sp, #12]
 8014dda:	683d      	ldr	r5, [r7, #0]
 8014ddc:	ee18 8a10 	vmov	r8, s16
 8014de0:	441d      	add	r5, r3
 8014de2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8014de6:	9302      	str	r3, [sp, #8]
 8014de8:	46ba      	mov	sl, r7
 8014dea:	4632      	mov	r2, r6
 8014dec:	4641      	mov	r1, r8
 8014dee:	4628      	mov	r0, r5
 8014df0:	f003 fd31 	bl	8018856 <memcpy>
 8014df4:	9b01      	ldr	r3, [sp, #4]
 8014df6:	f85a 2b04 	ldr.w	r2, [sl], #4
 8014dfa:	441a      	add	r2, r3
 8014dfc:	9b00      	ldr	r3, [sp, #0]
 8014dfe:	1899      	adds	r1, r3, r2
 8014e00:	9b02      	ldr	r3, [sp, #8]
 8014e02:	4435      	add	r5, r6
 8014e04:	429c      	cmp	r4, r3
 8014e06:	4628      	mov	r0, r5
 8014e08:	d025      	beq.n	8014e56 <rcutils_repl_str+0x13e>
 8014e0a:	f8da 3000 	ldr.w	r3, [sl]
 8014e0e:	3401      	adds	r4, #1
 8014e10:	1a9a      	subs	r2, r3, r2
 8014e12:	4415      	add	r5, r2
 8014e14:	f003 fd1f 	bl	8018856 <memcpy>
 8014e18:	455c      	cmp	r4, fp
 8014e1a:	d3e6      	bcc.n	8014dea <rcutils_repl_str+0xd2>
 8014e1c:	9a03      	ldr	r2, [sp, #12]
 8014e1e:	9905      	ldr	r1, [sp, #20]
 8014e20:	2300      	movs	r3, #0
 8014e22:	5453      	strb	r3, [r2, r1]
 8014e24:	e00b      	b.n	8014e3e <rcutils_repl_str+0x126>
 8014e26:	4628      	mov	r0, r5
 8014e28:	f8d9 3000 	ldr.w	r3, [r9]
 8014e2c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014e30:	3001      	adds	r0, #1
 8014e32:	4798      	blx	r3
 8014e34:	9003      	str	r0, [sp, #12]
 8014e36:	b110      	cbz	r0, 8014e3e <rcutils_repl_str+0x126>
 8014e38:	9900      	ldr	r1, [sp, #0]
 8014e3a:	f003 fd04 	bl	8018846 <strcpy>
 8014e3e:	4638      	mov	r0, r7
 8014e40:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014e44:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014e48:	4798      	blx	r3
 8014e4a:	9803      	ldr	r0, [sp, #12]
 8014e4c:	b007      	add	sp, #28
 8014e4e:	ecbd 8b02 	vpop	{d8}
 8014e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e56:	9b04      	ldr	r3, [sp, #16]
 8014e58:	3401      	adds	r4, #1
 8014e5a:	1a9a      	subs	r2, r3, r2
 8014e5c:	4415      	add	r5, r2
 8014e5e:	f003 fcfa 	bl	8018856 <memcpy>
 8014e62:	455c      	cmp	r4, fp
 8014e64:	d3c1      	bcc.n	8014dea <rcutils_repl_str+0xd2>
 8014e66:	e7d9      	b.n	8014e1c <rcutils_repl_str+0x104>
 8014e68:	4647      	mov	r7, r8
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	9303      	str	r3, [sp, #12]
 8014e6e:	e7e6      	b.n	8014e3e <rcutils_repl_str+0x126>

08014e70 <rcutils_snprintf>:
 8014e70:	b40c      	push	{r2, r3}
 8014e72:	b530      	push	{r4, r5, lr}
 8014e74:	b083      	sub	sp, #12
 8014e76:	ab06      	add	r3, sp, #24
 8014e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e7c:	9301      	str	r3, [sp, #4]
 8014e7e:	b152      	cbz	r2, 8014e96 <rcutils_snprintf+0x26>
 8014e80:	b138      	cbz	r0, 8014e92 <rcutils_snprintf+0x22>
 8014e82:	b141      	cbz	r1, 8014e96 <rcutils_snprintf+0x26>
 8014e84:	f003 fb0a 	bl	801849c <vsniprintf>
 8014e88:	b003      	add	sp, #12
 8014e8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e8e:	b002      	add	sp, #8
 8014e90:	4770      	bx	lr
 8014e92:	2900      	cmp	r1, #0
 8014e94:	d0f6      	beq.n	8014e84 <rcutils_snprintf+0x14>
 8014e96:	f003 fca9 	bl	80187ec <__errno>
 8014e9a:	2316      	movs	r3, #22
 8014e9c:	6003      	str	r3, [r0, #0]
 8014e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ea2:	e7f1      	b.n	8014e88 <rcutils_snprintf+0x18>

08014ea4 <rcutils_vsnprintf>:
 8014ea4:	b570      	push	{r4, r5, r6, lr}
 8014ea6:	b13a      	cbz	r2, 8014eb8 <rcutils_vsnprintf+0x14>
 8014ea8:	b120      	cbz	r0, 8014eb4 <rcutils_vsnprintf+0x10>
 8014eaa:	b129      	cbz	r1, 8014eb8 <rcutils_vsnprintf+0x14>
 8014eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014eb0:	f003 baf4 	b.w	801849c <vsniprintf>
 8014eb4:	2900      	cmp	r1, #0
 8014eb6:	d0f9      	beq.n	8014eac <rcutils_vsnprintf+0x8>
 8014eb8:	f003 fc98 	bl	80187ec <__errno>
 8014ebc:	2316      	movs	r3, #22
 8014ebe:	6003      	str	r3, [r0, #0]
 8014ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ec4:	bd70      	pop	{r4, r5, r6, pc}
 8014ec6:	bf00      	nop

08014ec8 <rcutils_strdup>:
 8014ec8:	b084      	sub	sp, #16
 8014eca:	b570      	push	{r4, r5, r6, lr}
 8014ecc:	b082      	sub	sp, #8
 8014ece:	ac07      	add	r4, sp, #28
 8014ed0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014ed4:	4605      	mov	r5, r0
 8014ed6:	b1b0      	cbz	r0, 8014f06 <rcutils_strdup+0x3e>
 8014ed8:	f7eb f98c 	bl	80001f4 <strlen>
 8014edc:	1c42      	adds	r2, r0, #1
 8014ede:	9b07      	ldr	r3, [sp, #28]
 8014ee0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ee2:	9201      	str	r2, [sp, #4]
 8014ee4:	4606      	mov	r6, r0
 8014ee6:	4610      	mov	r0, r2
 8014ee8:	4798      	blx	r3
 8014eea:	4604      	mov	r4, r0
 8014eec:	b128      	cbz	r0, 8014efa <rcutils_strdup+0x32>
 8014eee:	9a01      	ldr	r2, [sp, #4]
 8014ef0:	4629      	mov	r1, r5
 8014ef2:	f003 fcb0 	bl	8018856 <memcpy>
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	55a3      	strb	r3, [r4, r6]
 8014efa:	4620      	mov	r0, r4
 8014efc:	b002      	add	sp, #8
 8014efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f02:	b004      	add	sp, #16
 8014f04:	4770      	bx	lr
 8014f06:	4604      	mov	r4, r0
 8014f08:	e7f7      	b.n	8014efa <rcutils_strdup+0x32>
 8014f0a:	bf00      	nop

08014f0c <rcutils_strndup>:
 8014f0c:	b082      	sub	sp, #8
 8014f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f10:	460e      	mov	r6, r1
 8014f12:	a906      	add	r1, sp, #24
 8014f14:	e881 000c 	stmia.w	r1, {r2, r3}
 8014f18:	4605      	mov	r5, r0
 8014f1a:	b180      	cbz	r0, 8014f3e <rcutils_strndup+0x32>
 8014f1c:	1c77      	adds	r7, r6, #1
 8014f1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f20:	4638      	mov	r0, r7
 8014f22:	4790      	blx	r2
 8014f24:	4604      	mov	r4, r0
 8014f26:	b128      	cbz	r0, 8014f34 <rcutils_strndup+0x28>
 8014f28:	463a      	mov	r2, r7
 8014f2a:	4629      	mov	r1, r5
 8014f2c:	f003 fc93 	bl	8018856 <memcpy>
 8014f30:	2300      	movs	r3, #0
 8014f32:	55a3      	strb	r3, [r4, r6]
 8014f34:	4620      	mov	r0, r4
 8014f36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014f3a:	b002      	add	sp, #8
 8014f3c:	4770      	bx	lr
 8014f3e:	4604      	mov	r4, r0
 8014f40:	e7f8      	b.n	8014f34 <rcutils_strndup+0x28>
 8014f42:	bf00      	nop

08014f44 <rmw_get_zero_initialized_context>:
 8014f44:	b510      	push	{r4, lr}
 8014f46:	2250      	movs	r2, #80	; 0x50
 8014f48:	4604      	mov	r4, r0
 8014f4a:	2100      	movs	r1, #0
 8014f4c:	f003 fb64 	bl	8018618 <memset>
 8014f50:	4620      	mov	r0, r4
 8014f52:	bd10      	pop	{r4, pc}

08014f54 <rmw_get_zero_initialized_init_options>:
 8014f54:	b510      	push	{r4, lr}
 8014f56:	2238      	movs	r2, #56	; 0x38
 8014f58:	4604      	mov	r4, r0
 8014f5a:	2100      	movs	r1, #0
 8014f5c:	f003 fb5c 	bl	8018618 <memset>
 8014f60:	f104 0010 	add.w	r0, r4, #16
 8014f64:	f000 f806 	bl	8014f74 <rmw_get_default_security_options>
 8014f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f6c:	60e3      	str	r3, [r4, #12]
 8014f6e:	4620      	mov	r0, r4
 8014f70:	bd10      	pop	{r4, pc}
 8014f72:	bf00      	nop

08014f74 <rmw_get_default_security_options>:
 8014f74:	2200      	movs	r2, #0
 8014f76:	7002      	strb	r2, [r0, #0]
 8014f78:	6042      	str	r2, [r0, #4]
 8014f7a:	4770      	bx	lr

08014f7c <rmw_validate_namespace_with_size>:
 8014f7c:	b340      	cbz	r0, 8014fd0 <rmw_validate_namespace_with_size+0x54>
 8014f7e:	b5d0      	push	{r4, r6, r7, lr}
 8014f80:	4614      	mov	r4, r2
 8014f82:	b0c2      	sub	sp, #264	; 0x108
 8014f84:	b332      	cbz	r2, 8014fd4 <rmw_validate_namespace_with_size+0x58>
 8014f86:	2901      	cmp	r1, #1
 8014f88:	460f      	mov	r7, r1
 8014f8a:	461e      	mov	r6, r3
 8014f8c:	d102      	bne.n	8014f94 <rmw_validate_namespace_with_size+0x18>
 8014f8e:	7803      	ldrb	r3, [r0, #0]
 8014f90:	2b2f      	cmp	r3, #47	; 0x2f
 8014f92:	d019      	beq.n	8014fc8 <rmw_validate_namespace_with_size+0x4c>
 8014f94:	aa01      	add	r2, sp, #4
 8014f96:	4669      	mov	r1, sp
 8014f98:	f7f8 fe44 	bl	800dc24 <rmw_validate_full_topic_name>
 8014f9c:	b990      	cbnz	r0, 8014fc4 <rmw_validate_namespace_with_size+0x48>
 8014f9e:	9b00      	ldr	r3, [sp, #0]
 8014fa0:	b14b      	cbz	r3, 8014fb6 <rmw_validate_namespace_with_size+0x3a>
 8014fa2:	2b07      	cmp	r3, #7
 8014fa4:	d007      	beq.n	8014fb6 <rmw_validate_namespace_with_size+0x3a>
 8014fa6:	1e5a      	subs	r2, r3, #1
 8014fa8:	2a05      	cmp	r2, #5
 8014faa:	d82b      	bhi.n	8015004 <rmw_validate_namespace_with_size+0x88>
 8014fac:	e8df f002 	tbb	[pc, r2]
 8014fb0:	24211e1b 	.word	0x24211e1b
 8014fb4:	1427      	.short	0x1427
 8014fb6:	2ff5      	cmp	r7, #245	; 0xf5
 8014fb8:	d906      	bls.n	8014fc8 <rmw_validate_namespace_with_size+0x4c>
 8014fba:	2307      	movs	r3, #7
 8014fbc:	6023      	str	r3, [r4, #0]
 8014fbe:	b10e      	cbz	r6, 8014fc4 <rmw_validate_namespace_with_size+0x48>
 8014fc0:	23f4      	movs	r3, #244	; 0xf4
 8014fc2:	6033      	str	r3, [r6, #0]
 8014fc4:	b042      	add	sp, #264	; 0x108
 8014fc6:	bdd0      	pop	{r4, r6, r7, pc}
 8014fc8:	2000      	movs	r0, #0
 8014fca:	6020      	str	r0, [r4, #0]
 8014fcc:	b042      	add	sp, #264	; 0x108
 8014fce:	bdd0      	pop	{r4, r6, r7, pc}
 8014fd0:	200b      	movs	r0, #11
 8014fd2:	4770      	bx	lr
 8014fd4:	200b      	movs	r0, #11
 8014fd6:	e7f5      	b.n	8014fc4 <rmw_validate_namespace_with_size+0x48>
 8014fd8:	2306      	movs	r3, #6
 8014fda:	6023      	str	r3, [r4, #0]
 8014fdc:	2e00      	cmp	r6, #0
 8014fde:	d0f1      	beq.n	8014fc4 <rmw_validate_namespace_with_size+0x48>
 8014fe0:	9b01      	ldr	r3, [sp, #4]
 8014fe2:	6033      	str	r3, [r6, #0]
 8014fe4:	e7ee      	b.n	8014fc4 <rmw_validate_namespace_with_size+0x48>
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	6023      	str	r3, [r4, #0]
 8014fea:	e7f7      	b.n	8014fdc <rmw_validate_namespace_with_size+0x60>
 8014fec:	2302      	movs	r3, #2
 8014fee:	6023      	str	r3, [r4, #0]
 8014ff0:	e7f4      	b.n	8014fdc <rmw_validate_namespace_with_size+0x60>
 8014ff2:	2303      	movs	r3, #3
 8014ff4:	6023      	str	r3, [r4, #0]
 8014ff6:	e7f1      	b.n	8014fdc <rmw_validate_namespace_with_size+0x60>
 8014ff8:	2304      	movs	r3, #4
 8014ffa:	6023      	str	r3, [r4, #0]
 8014ffc:	e7ee      	b.n	8014fdc <rmw_validate_namespace_with_size+0x60>
 8014ffe:	2305      	movs	r3, #5
 8015000:	6023      	str	r3, [r4, #0]
 8015002:	e7eb      	b.n	8014fdc <rmw_validate_namespace_with_size+0x60>
 8015004:	4a03      	ldr	r2, [pc, #12]	; (8015014 <rmw_validate_namespace_with_size+0x98>)
 8015006:	f44f 7180 	mov.w	r1, #256	; 0x100
 801500a:	a802      	add	r0, sp, #8
 801500c:	f7ff ff30 	bl	8014e70 <rcutils_snprintf>
 8015010:	2001      	movs	r0, #1
 8015012:	e7d7      	b.n	8014fc4 <rmw_validate_namespace_with_size+0x48>
 8015014:	08019cc4 	.word	0x08019cc4

08015018 <rmw_validate_namespace>:
 8015018:	b168      	cbz	r0, 8015036 <rmw_validate_namespace+0x1e>
 801501a:	b570      	push	{r4, r5, r6, lr}
 801501c:	460d      	mov	r5, r1
 801501e:	4616      	mov	r6, r2
 8015020:	4604      	mov	r4, r0
 8015022:	f7eb f8e7 	bl	80001f4 <strlen>
 8015026:	4633      	mov	r3, r6
 8015028:	4601      	mov	r1, r0
 801502a:	462a      	mov	r2, r5
 801502c:	4620      	mov	r0, r4
 801502e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015032:	f7ff bfa3 	b.w	8014f7c <rmw_validate_namespace_with_size>
 8015036:	200b      	movs	r0, #11
 8015038:	4770      	bx	lr
 801503a:	bf00      	nop

0801503c <rmw_namespace_validation_result_string>:
 801503c:	2807      	cmp	r0, #7
 801503e:	bf9a      	itte	ls
 8015040:	4b02      	ldrls	r3, [pc, #8]	; (801504c <rmw_namespace_validation_result_string+0x10>)
 8015042:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015046:	4802      	ldrhi	r0, [pc, #8]	; (8015050 <rmw_namespace_validation_result_string+0x14>)
 8015048:	4770      	bx	lr
 801504a:	bf00      	nop
 801504c:	08019ebc 	.word	0x08019ebc
 8015050:	08019d14 	.word	0x08019d14

08015054 <rmw_validate_node_name>:
 8015054:	2800      	cmp	r0, #0
 8015056:	d03b      	beq.n	80150d0 <rmw_validate_node_name+0x7c>
 8015058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801505c:	460f      	mov	r7, r1
 801505e:	2900      	cmp	r1, #0
 8015060:	d038      	beq.n	80150d4 <rmw_validate_node_name+0x80>
 8015062:	4615      	mov	r5, r2
 8015064:	4604      	mov	r4, r0
 8015066:	f7eb f8c5 	bl	80001f4 <strlen>
 801506a:	b1e0      	cbz	r0, 80150a6 <rmw_validate_node_name+0x52>
 801506c:	1e63      	subs	r3, r4, #1
 801506e:	eb03 0e00 	add.w	lr, r3, r0
 8015072:	f1c4 0c01 	rsb	ip, r4, #1
 8015076:	eb0c 0803 	add.w	r8, ip, r3
 801507a:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 801507e:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8015082:	f026 0220 	bic.w	r2, r6, #32
 8015086:	2909      	cmp	r1, #9
 8015088:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 801508c:	d913      	bls.n	80150b6 <rmw_validate_node_name+0x62>
 801508e:	2a19      	cmp	r2, #25
 8015090:	d911      	bls.n	80150b6 <rmw_validate_node_name+0x62>
 8015092:	2e5f      	cmp	r6, #95	; 0x5f
 8015094:	d00f      	beq.n	80150b6 <rmw_validate_node_name+0x62>
 8015096:	2302      	movs	r3, #2
 8015098:	603b      	str	r3, [r7, #0]
 801509a:	b10d      	cbz	r5, 80150a0 <rmw_validate_node_name+0x4c>
 801509c:	f8c5 8000 	str.w	r8, [r5]
 80150a0:	2000      	movs	r0, #0
 80150a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150a6:	2301      	movs	r3, #1
 80150a8:	603b      	str	r3, [r7, #0]
 80150aa:	2d00      	cmp	r5, #0
 80150ac:	d0f8      	beq.n	80150a0 <rmw_validate_node_name+0x4c>
 80150ae:	2000      	movs	r0, #0
 80150b0:	6028      	str	r0, [r5, #0]
 80150b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150b6:	4573      	cmp	r3, lr
 80150b8:	d1dd      	bne.n	8015076 <rmw_validate_node_name+0x22>
 80150ba:	7822      	ldrb	r2, [r4, #0]
 80150bc:	4b0d      	ldr	r3, [pc, #52]	; (80150f4 <rmw_validate_node_name+0xa0>)
 80150be:	5cd3      	ldrb	r3, [r2, r3]
 80150c0:	f013 0304 	ands.w	r3, r3, #4
 80150c4:	d110      	bne.n	80150e8 <rmw_validate_node_name+0x94>
 80150c6:	28ff      	cmp	r0, #255	; 0xff
 80150c8:	d806      	bhi.n	80150d8 <rmw_validate_node_name+0x84>
 80150ca:	603b      	str	r3, [r7, #0]
 80150cc:	4618      	mov	r0, r3
 80150ce:	e7e8      	b.n	80150a2 <rmw_validate_node_name+0x4e>
 80150d0:	200b      	movs	r0, #11
 80150d2:	4770      	bx	lr
 80150d4:	200b      	movs	r0, #11
 80150d6:	e7e4      	b.n	80150a2 <rmw_validate_node_name+0x4e>
 80150d8:	2204      	movs	r2, #4
 80150da:	603a      	str	r2, [r7, #0]
 80150dc:	2d00      	cmp	r5, #0
 80150de:	d0df      	beq.n	80150a0 <rmw_validate_node_name+0x4c>
 80150e0:	22fe      	movs	r2, #254	; 0xfe
 80150e2:	4618      	mov	r0, r3
 80150e4:	602a      	str	r2, [r5, #0]
 80150e6:	e7dc      	b.n	80150a2 <rmw_validate_node_name+0x4e>
 80150e8:	2303      	movs	r3, #3
 80150ea:	603b      	str	r3, [r7, #0]
 80150ec:	2d00      	cmp	r5, #0
 80150ee:	d1de      	bne.n	80150ae <rmw_validate_node_name+0x5a>
 80150f0:	e7d6      	b.n	80150a0 <rmw_validate_node_name+0x4c>
 80150f2:	bf00      	nop
 80150f4:	0801a280 	.word	0x0801a280

080150f8 <rmw_node_name_validation_result_string>:
 80150f8:	2804      	cmp	r0, #4
 80150fa:	bf9a      	itte	ls
 80150fc:	4b02      	ldrls	r3, [pc, #8]	; (8015108 <rmw_node_name_validation_result_string+0x10>)
 80150fe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015102:	4802      	ldrhi	r0, [pc, #8]	; (801510c <rmw_node_name_validation_result_string+0x14>)
 8015104:	4770      	bx	lr
 8015106:	bf00      	nop
 8015108:	08019fc8 	.word	0x08019fc8
 801510c:	08019edc 	.word	0x08019edc

08015110 <get_memory>:
 8015110:	4603      	mov	r3, r0
 8015112:	6840      	ldr	r0, [r0, #4]
 8015114:	b158      	cbz	r0, 801512e <get_memory+0x1e>
 8015116:	6882      	ldr	r2, [r0, #8]
 8015118:	605a      	str	r2, [r3, #4]
 801511a:	b10a      	cbz	r2, 8015120 <get_memory+0x10>
 801511c:	2100      	movs	r1, #0
 801511e:	6051      	str	r1, [r2, #4]
 8015120:	681a      	ldr	r2, [r3, #0]
 8015122:	6082      	str	r2, [r0, #8]
 8015124:	b102      	cbz	r2, 8015128 <get_memory+0x18>
 8015126:	6050      	str	r0, [r2, #4]
 8015128:	2200      	movs	r2, #0
 801512a:	6042      	str	r2, [r0, #4]
 801512c:	6018      	str	r0, [r3, #0]
 801512e:	4770      	bx	lr

08015130 <put_memory>:
 8015130:	684b      	ldr	r3, [r1, #4]
 8015132:	b10b      	cbz	r3, 8015138 <put_memory+0x8>
 8015134:	688a      	ldr	r2, [r1, #8]
 8015136:	609a      	str	r2, [r3, #8]
 8015138:	688a      	ldr	r2, [r1, #8]
 801513a:	b102      	cbz	r2, 801513e <put_memory+0xe>
 801513c:	6053      	str	r3, [r2, #4]
 801513e:	6803      	ldr	r3, [r0, #0]
 8015140:	428b      	cmp	r3, r1
 8015142:	6843      	ldr	r3, [r0, #4]
 8015144:	bf08      	it	eq
 8015146:	6002      	streq	r2, [r0, #0]
 8015148:	608b      	str	r3, [r1, #8]
 801514a:	b103      	cbz	r3, 801514e <put_memory+0x1e>
 801514c:	6059      	str	r1, [r3, #4]
 801514e:	2300      	movs	r3, #0
 8015150:	604b      	str	r3, [r1, #4]
 8015152:	6041      	str	r1, [r0, #4]
 8015154:	4770      	bx	lr
 8015156:	bf00      	nop

08015158 <rmw_destroy_client>:
 8015158:	b570      	push	{r4, r5, r6, lr}
 801515a:	b128      	cbz	r0, 8015168 <rmw_destroy_client+0x10>
 801515c:	4604      	mov	r4, r0
 801515e:	6800      	ldr	r0, [r0, #0]
 8015160:	460d      	mov	r5, r1
 8015162:	f7f9 fc3d 	bl	800e9e0 <is_uxrce_rmw_identifier_valid>
 8015166:	b910      	cbnz	r0, 801516e <rmw_destroy_client+0x16>
 8015168:	2401      	movs	r4, #1
 801516a:	4620      	mov	r0, r4
 801516c:	bd70      	pop	{r4, r5, r6, pc}
 801516e:	6863      	ldr	r3, [r4, #4]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d0f9      	beq.n	8015168 <rmw_destroy_client+0x10>
 8015174:	2d00      	cmp	r5, #0
 8015176:	d0f7      	beq.n	8015168 <rmw_destroy_client+0x10>
 8015178:	6828      	ldr	r0, [r5, #0]
 801517a:	f7f9 fc31 	bl	800e9e0 <is_uxrce_rmw_identifier_valid>
 801517e:	2800      	cmp	r0, #0
 8015180:	d0f2      	beq.n	8015168 <rmw_destroy_client+0x10>
 8015182:	686e      	ldr	r6, [r5, #4]
 8015184:	2e00      	cmp	r6, #0
 8015186:	d0ef      	beq.n	8015168 <rmw_destroy_client+0x10>
 8015188:	6864      	ldr	r4, [r4, #4]
 801518a:	6932      	ldr	r2, [r6, #16]
 801518c:	6920      	ldr	r0, [r4, #16]
 801518e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015192:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015196:	6819      	ldr	r1, [r3, #0]
 8015198:	f7fa ff20 	bl	800ffdc <uxr_buffer_cancel_data>
 801519c:	4602      	mov	r2, r0
 801519e:	6920      	ldr	r0, [r4, #16]
 80151a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80151a4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80151a8:	f7f9 fb9a 	bl	800e8e0 <run_xrce_session>
 80151ac:	6920      	ldr	r0, [r4, #16]
 80151ae:	6932      	ldr	r2, [r6, #16]
 80151b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80151b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80151b8:	6819      	ldr	r1, [r3, #0]
 80151ba:	f7fa fca5 	bl	800fb08 <uxr_buffer_delete_entity>
 80151be:	4602      	mov	r2, r0
 80151c0:	6920      	ldr	r0, [r4, #16]
 80151c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80151c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80151ca:	f7f9 fb89 	bl	800e8e0 <run_xrce_session>
 80151ce:	2800      	cmp	r0, #0
 80151d0:	4628      	mov	r0, r5
 80151d2:	bf14      	ite	ne
 80151d4:	2400      	movne	r4, #0
 80151d6:	2402      	moveq	r4, #2
 80151d8:	f7f9 fa72 	bl	800e6c0 <rmw_uxrce_fini_client_memory>
 80151dc:	e7c5      	b.n	801516a <rmw_destroy_client+0x12>
 80151de:	bf00      	nop

080151e0 <rmw_get_implementation_identifier>:
 80151e0:	4b01      	ldr	r3, [pc, #4]	; (80151e8 <rmw_get_implementation_identifier+0x8>)
 80151e2:	6818      	ldr	r0, [r3, #0]
 80151e4:	4770      	bx	lr
 80151e6:	bf00      	nop
 80151e8:	08019ff4 	.word	0x08019ff4

080151ec <rmw_init_options_init>:
 80151ec:	b084      	sub	sp, #16
 80151ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151f2:	ad09      	add	r5, sp, #36	; 0x24
 80151f4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80151f8:	b130      	cbz	r0, 8015208 <rmw_init_options_init+0x1c>
 80151fa:	4604      	mov	r4, r0
 80151fc:	4628      	mov	r0, r5
 80151fe:	f7f8 fb3d 	bl	800d87c <rcutils_allocator_is_valid>
 8015202:	b108      	cbz	r0, 8015208 <rmw_init_options_init+0x1c>
 8015204:	68a3      	ldr	r3, [r4, #8]
 8015206:	b123      	cbz	r3, 8015212 <rmw_init_options_init+0x26>
 8015208:	200b      	movs	r0, #11
 801520a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801520e:	b004      	add	sp, #16
 8015210:	4770      	bx	lr
 8015212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015214:	4f1c      	ldr	r7, [pc, #112]	; (8015288 <rmw_init_options_init+0x9c>)
 8015216:	682e      	ldr	r6, [r5, #0]
 8015218:	683d      	ldr	r5, [r7, #0]
 801521a:	60a5      	str	r5, [r4, #8]
 801521c:	f04f 0800 	mov.w	r8, #0
 8015220:	f04f 0900 	mov.w	r9, #0
 8015224:	f104 0520 	add.w	r5, r4, #32
 8015228:	e9c4 8900 	strd	r8, r9, [r4]
 801522c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801522e:	4b17      	ldr	r3, [pc, #92]	; (801528c <rmw_init_options_init+0xa0>)
 8015230:	4817      	ldr	r0, [pc, #92]	; (8015290 <rmw_init_options_init+0xa4>)
 8015232:	602e      	str	r6, [r5, #0]
 8015234:	4917      	ldr	r1, [pc, #92]	; (8015294 <rmw_init_options_init+0xa8>)
 8015236:	61e3      	str	r3, [r4, #28]
 8015238:	2203      	movs	r2, #3
 801523a:	f7f9 f991 	bl	800e560 <rmw_uxrce_init_init_options_impl_memory>
 801523e:	4814      	ldr	r0, [pc, #80]	; (8015290 <rmw_init_options_init+0xa4>)
 8015240:	f7ff ff66 	bl	8015110 <get_memory>
 8015244:	b1e8      	cbz	r0, 8015282 <rmw_init_options_init+0x96>
 8015246:	4a14      	ldr	r2, [pc, #80]	; (8015298 <rmw_init_options_init+0xac>)
 8015248:	68c3      	ldr	r3, [r0, #12]
 801524a:	6851      	ldr	r1, [r2, #4]
 801524c:	7810      	ldrb	r0, [r2, #0]
 801524e:	6363      	str	r3, [r4, #52]	; 0x34
 8015250:	7418      	strb	r0, [r3, #16]
 8015252:	6159      	str	r1, [r3, #20]
 8015254:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 8015258:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 801525c:	e9c3 5006 	strd	r5, r0, [r3, #24]
 8015260:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8015264:	f7fc f9e8 	bl	8011638 <uxr_nanos>
 8015268:	f002 fdd4 	bl	8017e14 <srand>
 801526c:	f002 fe00 	bl	8017e70 <rand>
 8015270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015272:	6298      	str	r0, [r3, #40]	; 0x28
 8015274:	2800      	cmp	r0, #0
 8015276:	d0f9      	beq.n	801526c <rmw_init_options_init+0x80>
 8015278:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801527c:	2000      	movs	r0, #0
 801527e:	b004      	add	sp, #16
 8015280:	4770      	bx	lr
 8015282:	2001      	movs	r0, #1
 8015284:	e7c1      	b.n	801520a <rmw_init_options_init+0x1e>
 8015286:	bf00      	nop
 8015288:	08019ff4 	.word	0x08019ff4
 801528c:	08019b68 	.word	0x08019b68
 8015290:	2000d1bc 	.word	0x2000d1bc
 8015294:	2000ce10 	.word	0x2000ce10
 8015298:	20009ea0 	.word	0x20009ea0

0801529c <rmw_init_options_copy>:
 801529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801529e:	b158      	cbz	r0, 80152b8 <rmw_init_options_copy+0x1c>
 80152a0:	460e      	mov	r6, r1
 80152a2:	b149      	cbz	r1, 80152b8 <rmw_init_options_copy+0x1c>
 80152a4:	4604      	mov	r4, r0
 80152a6:	6880      	ldr	r0, [r0, #8]
 80152a8:	b120      	cbz	r0, 80152b4 <rmw_init_options_copy+0x18>
 80152aa:	4b1b      	ldr	r3, [pc, #108]	; (8015318 <rmw_init_options_copy+0x7c>)
 80152ac:	6819      	ldr	r1, [r3, #0]
 80152ae:	f7ea ff97 	bl	80001e0 <strcmp>
 80152b2:	bb60      	cbnz	r0, 801530e <rmw_init_options_copy+0x72>
 80152b4:	68b3      	ldr	r3, [r6, #8]
 80152b6:	b113      	cbz	r3, 80152be <rmw_init_options_copy+0x22>
 80152b8:	230b      	movs	r3, #11
 80152ba:	4618      	mov	r0, r3
 80152bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152be:	4623      	mov	r3, r4
 80152c0:	4632      	mov	r2, r6
 80152c2:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80152c6:	681d      	ldr	r5, [r3, #0]
 80152c8:	6858      	ldr	r0, [r3, #4]
 80152ca:	6899      	ldr	r1, [r3, #8]
 80152cc:	68df      	ldr	r7, [r3, #12]
 80152ce:	60d7      	str	r7, [r2, #12]
 80152d0:	3310      	adds	r3, #16
 80152d2:	4563      	cmp	r3, ip
 80152d4:	6015      	str	r5, [r2, #0]
 80152d6:	6050      	str	r0, [r2, #4]
 80152d8:	6091      	str	r1, [r2, #8]
 80152da:	f102 0210 	add.w	r2, r2, #16
 80152de:	d1f2      	bne.n	80152c6 <rmw_init_options_copy+0x2a>
 80152e0:	6819      	ldr	r1, [r3, #0]
 80152e2:	685b      	ldr	r3, [r3, #4]
 80152e4:	480d      	ldr	r0, [pc, #52]	; (801531c <rmw_init_options_copy+0x80>)
 80152e6:	6053      	str	r3, [r2, #4]
 80152e8:	6011      	str	r1, [r2, #0]
 80152ea:	f7ff ff11 	bl	8015110 <get_memory>
 80152ee:	b188      	cbz	r0, 8015314 <rmw_init_options_copy+0x78>
 80152f0:	68c5      	ldr	r5, [r0, #12]
 80152f2:	6375      	str	r5, [r6, #52]	; 0x34
 80152f4:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80152f6:	3610      	adds	r6, #16
 80152f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80152fa:	f105 0410 	add.w	r4, r5, #16
 80152fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015300:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015304:	2300      	movs	r3, #0
 8015306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801530a:	4618      	mov	r0, r3
 801530c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801530e:	230c      	movs	r3, #12
 8015310:	4618      	mov	r0, r3
 8015312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015314:	2301      	movs	r3, #1
 8015316:	e7d0      	b.n	80152ba <rmw_init_options_copy+0x1e>
 8015318:	08019ff4 	.word	0x08019ff4
 801531c:	2000d1bc 	.word	0x2000d1bc

08015320 <rmw_init_options_fini>:
 8015320:	2800      	cmp	r0, #0
 8015322:	d036      	beq.n	8015392 <rmw_init_options_fini+0x72>
 8015324:	b530      	push	{r4, r5, lr}
 8015326:	4604      	mov	r4, r0
 8015328:	b08f      	sub	sp, #60	; 0x3c
 801532a:	3020      	adds	r0, #32
 801532c:	f7f8 faa6 	bl	800d87c <rcutils_allocator_is_valid>
 8015330:	b328      	cbz	r0, 801537e <rmw_init_options_fini+0x5e>
 8015332:	68a0      	ldr	r0, [r4, #8]
 8015334:	b120      	cbz	r0, 8015340 <rmw_init_options_fini+0x20>
 8015336:	4b18      	ldr	r3, [pc, #96]	; (8015398 <rmw_init_options_fini+0x78>)
 8015338:	6819      	ldr	r1, [r3, #0]
 801533a:	f7ea ff51 	bl	80001e0 <strcmp>
 801533e:	bb30      	cbnz	r0, 801538e <rmw_init_options_fini+0x6e>
 8015340:	4b16      	ldr	r3, [pc, #88]	; (801539c <rmw_init_options_fini+0x7c>)
 8015342:	6819      	ldr	r1, [r3, #0]
 8015344:	b1f9      	cbz	r1, 8015386 <rmw_init_options_fini+0x66>
 8015346:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015348:	e001      	b.n	801534e <rmw_init_options_fini+0x2e>
 801534a:	6889      	ldr	r1, [r1, #8]
 801534c:	b1d9      	cbz	r1, 8015386 <rmw_init_options_fini+0x66>
 801534e:	68cb      	ldr	r3, [r1, #12]
 8015350:	429a      	cmp	r2, r3
 8015352:	d1fa      	bne.n	801534a <rmw_init_options_fini+0x2a>
 8015354:	4811      	ldr	r0, [pc, #68]	; (801539c <rmw_init_options_fini+0x7c>)
 8015356:	f7ff feeb 	bl	8015130 <put_memory>
 801535a:	466d      	mov	r5, sp
 801535c:	4668      	mov	r0, sp
 801535e:	f7ff fdf9 	bl	8014f54 <rmw_get_zero_initialized_init_options>
 8015362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801536a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801536c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801536e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015372:	e884 0003 	stmia.w	r4, {r0, r1}
 8015376:	2300      	movs	r3, #0
 8015378:	4618      	mov	r0, r3
 801537a:	b00f      	add	sp, #60	; 0x3c
 801537c:	bd30      	pop	{r4, r5, pc}
 801537e:	230b      	movs	r3, #11
 8015380:	4618      	mov	r0, r3
 8015382:	b00f      	add	sp, #60	; 0x3c
 8015384:	bd30      	pop	{r4, r5, pc}
 8015386:	2301      	movs	r3, #1
 8015388:	4618      	mov	r0, r3
 801538a:	b00f      	add	sp, #60	; 0x3c
 801538c:	bd30      	pop	{r4, r5, pc}
 801538e:	230c      	movs	r3, #12
 8015390:	e7f2      	b.n	8015378 <rmw_init_options_fini+0x58>
 8015392:	230b      	movs	r3, #11
 8015394:	4618      	mov	r0, r3
 8015396:	4770      	bx	lr
 8015398:	08019ff4 	.word	0x08019ff4
 801539c:	2000d1bc 	.word	0x2000d1bc

080153a0 <rmw_init>:
 80153a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153a4:	b082      	sub	sp, #8
 80153a6:	2800      	cmp	r0, #0
 80153a8:	f000 80d6 	beq.w	8015558 <rmw_init+0x1b8>
 80153ac:	460e      	mov	r6, r1
 80153ae:	2900      	cmp	r1, #0
 80153b0:	f000 80d2 	beq.w	8015558 <rmw_init+0x1b8>
 80153b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80153b6:	4605      	mov	r5, r0
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	f000 80cd 	beq.w	8015558 <rmw_init+0x1b8>
 80153be:	4b79      	ldr	r3, [pc, #484]	; (80155a4 <rmw_init+0x204>)
 80153c0:	6880      	ldr	r0, [r0, #8]
 80153c2:	f8d3 9000 	ldr.w	r9, [r3]
 80153c6:	b128      	cbz	r0, 80153d4 <rmw_init+0x34>
 80153c8:	4649      	mov	r1, r9
 80153ca:	f7ea ff09 	bl	80001e0 <strcmp>
 80153ce:	2800      	cmp	r0, #0
 80153d0:	f040 80cc 	bne.w	801556c <rmw_init+0x1cc>
 80153d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80153d8:	68eb      	ldr	r3, [r5, #12]
 80153da:	61f3      	str	r3, [r6, #28]
 80153dc:	e9c6 0100 	strd	r0, r1, [r6]
 80153e0:	2201      	movs	r2, #1
 80153e2:	4971      	ldr	r1, [pc, #452]	; (80155a8 <rmw_init+0x208>)
 80153e4:	4871      	ldr	r0, [pc, #452]	; (80155ac <rmw_init+0x20c>)
 80153e6:	f8c6 9008 	str.w	r9, [r6, #8]
 80153ea:	f7f9 f861 	bl	800e4b0 <rmw_uxrce_init_session_memory>
 80153ee:	4870      	ldr	r0, [pc, #448]	; (80155b0 <rmw_init+0x210>)
 80153f0:	4970      	ldr	r1, [pc, #448]	; (80155b4 <rmw_init+0x214>)
 80153f2:	2204      	movs	r2, #4
 80153f4:	f7f9 f896 	bl	800e524 <rmw_uxrce_init_static_input_buffer_memory>
 80153f8:	486c      	ldr	r0, [pc, #432]	; (80155ac <rmw_init+0x20c>)
 80153fa:	f7ff fe89 	bl	8015110 <get_memory>
 80153fe:	2800      	cmp	r0, #0
 8015400:	f000 80af 	beq.w	8015562 <rmw_init+0x1c2>
 8015404:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8015406:	68c4      	ldr	r4, [r0, #12]
 8015408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801540a:	7c39      	ldrb	r1, [r7, #16]
 801540c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015410:	9001      	str	r0, [sp, #4]
 8015412:	6a38      	ldr	r0, [r7, #32]
 8015414:	9000      	str	r0, [sp, #0]
 8015416:	f104 0a10 	add.w	sl, r4, #16
 801541a:	4650      	mov	r0, sl
 801541c:	f000 ffe8 	bl	80163f0 <uxr_set_custom_transport_callbacks>
 8015420:	f241 5294 	movw	r2, #5524	; 0x1594
 8015424:	f241 5398 	movw	r3, #5528	; 0x1598
 8015428:	f04f 0800 	mov.w	r8, #0
 801542c:	f241 509c 	movw	r0, #5532	; 0x159c
 8015430:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 8015434:	f844 8002 	str.w	r8, [r4, r2]
 8015438:	f844 8003 	str.w	r8, [r4, r3]
 801543c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015440:	f504 735e 	add.w	r3, r4, #888	; 0x378
 8015444:	f844 8000 	str.w	r8, [r4, r0]
 8015448:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 801544c:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8015450:	4859      	ldr	r0, [pc, #356]	; (80155b8 <rmw_init+0x218>)
 8015452:	f8c1 8000 	str.w	r8, [r1]
 8015456:	2201      	movs	r2, #1
 8015458:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 801545c:	4957      	ldr	r1, [pc, #348]	; (80155bc <rmw_init+0x21c>)
 801545e:	64b4      	str	r4, [r6, #72]	; 0x48
 8015460:	f7f9 f80c 	bl	800e47c <rmw_uxrce_init_node_memory>
 8015464:	4956      	ldr	r1, [pc, #344]	; (80155c0 <rmw_init+0x220>)
 8015466:	4857      	ldr	r0, [pc, #348]	; (80155c4 <rmw_init+0x224>)
 8015468:	2205      	movs	r2, #5
 801546a:	f7f8 ffed 	bl	800e448 <rmw_uxrce_init_subscription_memory>
 801546e:	4956      	ldr	r1, [pc, #344]	; (80155c8 <rmw_init+0x228>)
 8015470:	4856      	ldr	r0, [pc, #344]	; (80155cc <rmw_init+0x22c>)
 8015472:	220a      	movs	r2, #10
 8015474:	f7f8 ffce 	bl	800e414 <rmw_uxrce_init_publisher_memory>
 8015478:	4955      	ldr	r1, [pc, #340]	; (80155d0 <rmw_init+0x230>)
 801547a:	4856      	ldr	r0, [pc, #344]	; (80155d4 <rmw_init+0x234>)
 801547c:	2201      	movs	r2, #1
 801547e:	f7f8 ff95 	bl	800e3ac <rmw_uxrce_init_service_memory>
 8015482:	4955      	ldr	r1, [pc, #340]	; (80155d8 <rmw_init+0x238>)
 8015484:	4855      	ldr	r0, [pc, #340]	; (80155dc <rmw_init+0x23c>)
 8015486:	2201      	movs	r2, #1
 8015488:	f7f8 ffaa 	bl	800e3e0 <rmw_uxrce_init_client_memory>
 801548c:	4954      	ldr	r1, [pc, #336]	; (80155e0 <rmw_init+0x240>)
 801548e:	4855      	ldr	r0, [pc, #340]	; (80155e4 <rmw_init+0x244>)
 8015490:	220f      	movs	r2, #15
 8015492:	f7f9 f82b 	bl	800e4ec <rmw_uxrce_init_topic_memory>
 8015496:	4954      	ldr	r1, [pc, #336]	; (80155e8 <rmw_init+0x248>)
 8015498:	4854      	ldr	r0, [pc, #336]	; (80155ec <rmw_init+0x24c>)
 801549a:	2203      	movs	r2, #3
 801549c:	f7f9 f860 	bl	800e560 <rmw_uxrce_init_init_options_impl_memory>
 80154a0:	4953      	ldr	r1, [pc, #332]	; (80155f0 <rmw_init+0x250>)
 80154a2:	4854      	ldr	r0, [pc, #336]	; (80155f4 <rmw_init+0x254>)
 80154a4:	2204      	movs	r2, #4
 80154a6:	f7f9 f875 	bl	800e594 <rmw_uxrce_init_wait_set_memory>
 80154aa:	4953      	ldr	r1, [pc, #332]	; (80155f8 <rmw_init+0x258>)
 80154ac:	4853      	ldr	r0, [pc, #332]	; (80155fc <rmw_init+0x25c>)
 80154ae:	2204      	movs	r2, #4
 80154b0:	f7f9 f88c 	bl	800e5cc <rmw_uxrce_init_guard_condition_memory>
 80154b4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80154b6:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 80154b8:	4642      	mov	r2, r8
 80154ba:	f000 fbbd 	bl	8015c38 <rmw_uxrce_transport_init>
 80154be:	4607      	mov	r7, r0
 80154c0:	2800      	cmp	r0, #0
 80154c2:	d158      	bne.n	8015576 <rmw_init+0x1d6>
 80154c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80154c6:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80154ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80154cc:	4628      	mov	r0, r5
 80154ce:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80154d2:	f7fa fefd 	bl	80102d0 <uxr_init_session>
 80154d6:	494a      	ldr	r1, [pc, #296]	; (8015600 <rmw_init+0x260>)
 80154d8:	4622      	mov	r2, r4
 80154da:	4628      	mov	r0, r5
 80154dc:	f7fa ff1a 	bl	8010314 <uxr_set_topic_callback>
 80154e0:	4948      	ldr	r1, [pc, #288]	; (8015604 <rmw_init+0x264>)
 80154e2:	463a      	mov	r2, r7
 80154e4:	4628      	mov	r0, r5
 80154e6:	f7fa ff11 	bl	801030c <uxr_set_status_callback>
 80154ea:	4947      	ldr	r1, [pc, #284]	; (8015608 <rmw_init+0x268>)
 80154ec:	463a      	mov	r2, r7
 80154ee:	4628      	mov	r0, r5
 80154f0:	f7fa ff14 	bl	801031c <uxr_set_request_callback>
 80154f4:	4945      	ldr	r1, [pc, #276]	; (801560c <rmw_init+0x26c>)
 80154f6:	463a      	mov	r2, r7
 80154f8:	4628      	mov	r0, r5
 80154fa:	f7fa ff13 	bl	8010324 <uxr_set_reply_callback>
 80154fe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015502:	2304      	movs	r3, #4
 8015504:	0092      	lsls	r2, r2, #2
 8015506:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801550a:	4628      	mov	r0, r5
 801550c:	f7fa ff4a 	bl	80103a4 <uxr_create_input_reliable_stream>
 8015510:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015514:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8015518:	0092      	lsls	r2, r2, #2
 801551a:	2304      	movs	r3, #4
 801551c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8015520:	4628      	mov	r0, r5
 8015522:	f7fa ff15 	bl	8010350 <uxr_create_output_reliable_stream>
 8015526:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 801552a:	4628      	mov	r0, r5
 801552c:	f7fa ff34 	bl	8010398 <uxr_create_input_best_effort_stream>
 8015530:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8015534:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8015538:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801553c:	4628      	mov	r0, r5
 801553e:	3114      	adds	r1, #20
 8015540:	f7fa fef4 	bl	801032c <uxr_create_output_best_effort_stream>
 8015544:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8015548:	4628      	mov	r0, r5
 801554a:	f7fb fb85 	bl	8010c58 <uxr_create_session>
 801554e:	b1f8      	cbz	r0, 8015590 <rmw_init+0x1f0>
 8015550:	4638      	mov	r0, r7
 8015552:	b002      	add	sp, #8
 8015554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015558:	270b      	movs	r7, #11
 801555a:	4638      	mov	r0, r7
 801555c:	b002      	add	sp, #8
 801555e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015562:	2701      	movs	r7, #1
 8015564:	4638      	mov	r0, r7
 8015566:	b002      	add	sp, #8
 8015568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801556c:	270c      	movs	r7, #12
 801556e:	4638      	mov	r0, r7
 8015570:	b002      	add	sp, #8
 8015572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015576:	4650      	mov	r0, sl
 8015578:	f000 ff7a 	bl	8016470 <uxr_close_custom_transport>
 801557c:	480b      	ldr	r0, [pc, #44]	; (80155ac <rmw_init+0x20c>)
 801557e:	4621      	mov	r1, r4
 8015580:	f7ff fdd6 	bl	8015130 <put_memory>
 8015584:	4638      	mov	r0, r7
 8015586:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 801558a:	b002      	add	sp, #8
 801558c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015590:	4650      	mov	r0, sl
 8015592:	f000 ff6d 	bl	8016470 <uxr_close_custom_transport>
 8015596:	4805      	ldr	r0, [pc, #20]	; (80155ac <rmw_init+0x20c>)
 8015598:	4621      	mov	r1, r4
 801559a:	f7ff fdc9 	bl	8015130 <put_memory>
 801559e:	64b7      	str	r7, [r6, #72]	; 0x48
 80155a0:	2701      	movs	r7, #1
 80155a2:	e7d5      	b.n	8015550 <rmw_init+0x1b0>
 80155a4:	08019ff4 	.word	0x08019ff4
 80155a8:	2000d298 	.word	0x2000d298
 80155ac:	2000d068 	.word	0x2000d068
 80155b0:	20009ec0 	.word	0x20009ec0
 80155b4:	2000aca0 	.word	0x2000aca0
 80155b8:	2000ce94 	.word	0x2000ce94
 80155bc:	2000d078 	.word	0x2000d078
 80155c0:	2000a7c8 	.word	0x2000a7c8
 80155c4:	2000d12c 	.word	0x2000d12c
 80155c8:	20009ee0 	.word	0x20009ee0
 80155cc:	20009ed0 	.word	0x20009ed0
 80155d0:	2000d1d0 	.word	0x2000d1d0
 80155d4:	2000d11c 	.word	0x2000d11c
 80155d8:	2000abd8 	.word	0x2000abd8
 80155dc:	2000a750 	.word	0x2000a750
 80155e0:	2000cea4 	.word	0x2000cea4
 80155e4:	2000d058 	.word	0x2000d058
 80155e8:	2000ce10 	.word	0x2000ce10
 80155ec:	2000d1bc 	.word	0x2000d1bc
 80155f0:	2000cda0 	.word	0x2000cda0
 80155f4:	2000e840 	.word	0x2000e840
 80155f8:	2000d13c 	.word	0x2000d13c
 80155fc:	2000d048 	.word	0x2000d048
 8015600:	080179c1 	.word	0x080179c1
 8015604:	080179b9 	.word	0x080179b9
 8015608:	08017a55 	.word	0x08017a55
 801560c:	08017aed 	.word	0x08017aed

08015610 <rmw_context_fini>:
 8015610:	4b17      	ldr	r3, [pc, #92]	; (8015670 <rmw_context_fini+0x60>)
 8015612:	b570      	push	{r4, r5, r6, lr}
 8015614:	681c      	ldr	r4, [r3, #0]
 8015616:	4605      	mov	r5, r0
 8015618:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801561a:	b33c      	cbz	r4, 801566c <rmw_context_fini+0x5c>
 801561c:	2600      	movs	r6, #0
 801561e:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 8015622:	691a      	ldr	r2, [r3, #16]
 8015624:	4282      	cmp	r2, r0
 8015626:	d018      	beq.n	801565a <rmw_context_fini+0x4a>
 8015628:	2c00      	cmp	r4, #0
 801562a:	d1f8      	bne.n	801561e <rmw_context_fini+0xe>
 801562c:	b188      	cbz	r0, 8015652 <rmw_context_fini+0x42>
 801562e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015632:	789b      	ldrb	r3, [r3, #2]
 8015634:	2b01      	cmp	r3, #1
 8015636:	bf14      	ite	ne
 8015638:	210a      	movne	r1, #10
 801563a:	2100      	moveq	r1, #0
 801563c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015640:	f7fb fccc 	bl	8010fdc <uxr_delete_session_retries>
 8015644:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8015646:	f7f8 ffdb 	bl	800e600 <rmw_uxrce_fini_session_memory>
 801564a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801564c:	3010      	adds	r0, #16
 801564e:	f000 ff0f 	bl	8016470 <uxr_close_custom_transport>
 8015652:	2300      	movs	r3, #0
 8015654:	4630      	mov	r0, r6
 8015656:	64ab      	str	r3, [r5, #72]	; 0x48
 8015658:	bd70      	pop	{r4, r5, r6, pc}
 801565a:	f103 0018 	add.w	r0, r3, #24
 801565e:	f000 f91f 	bl	80158a0 <rmw_destroy_node>
 8015662:	4606      	mov	r6, r0
 8015664:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8015666:	2c00      	cmp	r4, #0
 8015668:	d1d9      	bne.n	801561e <rmw_context_fini+0xe>
 801566a:	e7df      	b.n	801562c <rmw_context_fini+0x1c>
 801566c:	4626      	mov	r6, r4
 801566e:	e7dd      	b.n	801562c <rmw_context_fini+0x1c>
 8015670:	2000ce94 	.word	0x2000ce94

08015674 <create_topic>:
 8015674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015678:	4605      	mov	r5, r0
 801567a:	b084      	sub	sp, #16
 801567c:	482b      	ldr	r0, [pc, #172]	; (801572c <create_topic+0xb8>)
 801567e:	460f      	mov	r7, r1
 8015680:	4616      	mov	r6, r2
 8015682:	f7ff fd45 	bl	8015110 <get_memory>
 8015686:	4604      	mov	r4, r0
 8015688:	2800      	cmp	r0, #0
 801568a:	d036      	beq.n	80156fa <create_topic+0x86>
 801568c:	692a      	ldr	r2, [r5, #16]
 801568e:	68c4      	ldr	r4, [r0, #12]
 8015690:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8015734 <create_topic+0xc0>
 8015694:	61a5      	str	r5, [r4, #24]
 8015696:	f241 5396 	movw	r3, #5526	; 0x1596
 801569a:	6166      	str	r6, [r4, #20]
 801569c:	5ad0      	ldrh	r0, [r2, r3]
 801569e:	1c41      	adds	r1, r0, #1
 80156a0:	52d1      	strh	r1, [r2, r3]
 80156a2:	2102      	movs	r1, #2
 80156a4:	f7fa fc32 	bl	800ff0c <uxr_object_id>
 80156a8:	4641      	mov	r1, r8
 80156aa:	6120      	str	r0, [r4, #16]
 80156ac:	223c      	movs	r2, #60	; 0x3c
 80156ae:	4638      	mov	r0, r7
 80156b0:	f7f9 f97c 	bl	800e9ac <generate_topic_name>
 80156b4:	4607      	mov	r7, r0
 80156b6:	b320      	cbz	r0, 8015702 <create_topic+0x8e>
 80156b8:	4f1d      	ldr	r7, [pc, #116]	; (8015730 <create_topic+0xbc>)
 80156ba:	4630      	mov	r0, r6
 80156bc:	4639      	mov	r1, r7
 80156be:	2264      	movs	r2, #100	; 0x64
 80156c0:	f7f9 f944 	bl	800e94c <generate_type_name>
 80156c4:	4606      	mov	r6, r0
 80156c6:	b320      	cbz	r0, 8015712 <create_topic+0x9e>
 80156c8:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 80156cc:	2106      	movs	r1, #6
 80156ce:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80156d2:	9701      	str	r7, [sp, #4]
 80156d4:	f8cd 8000 	str.w	r8, [sp]
 80156d8:	9102      	str	r1, [sp, #8]
 80156da:	6811      	ldr	r1, [r2, #0]
 80156dc:	6922      	ldr	r2, [r4, #16]
 80156de:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80156e2:	f7fa fa8f 	bl	800fc04 <uxr_buffer_create_topic_bin>
 80156e6:	4602      	mov	r2, r0
 80156e8:	6928      	ldr	r0, [r5, #16]
 80156ea:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80156ee:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80156f2:	f7f9 f8f5 	bl	800e8e0 <run_xrce_session>
 80156f6:	4605      	mov	r5, r0
 80156f8:	b198      	cbz	r0, 8015722 <create_topic+0xae>
 80156fa:	4620      	mov	r0, r4
 80156fc:	b004      	add	sp, #16
 80156fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015702:	4620      	mov	r0, r4
 8015704:	f7f8 fff2 	bl	800e6ec <rmw_uxrce_fini_topic_memory>
 8015708:	463c      	mov	r4, r7
 801570a:	4620      	mov	r0, r4
 801570c:	b004      	add	sp, #16
 801570e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015712:	4620      	mov	r0, r4
 8015714:	f7f8 ffea 	bl	800e6ec <rmw_uxrce_fini_topic_memory>
 8015718:	4634      	mov	r4, r6
 801571a:	4620      	mov	r0, r4
 801571c:	b004      	add	sp, #16
 801571e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015722:	4620      	mov	r0, r4
 8015724:	f7f8 ffe2 	bl	800e6ec <rmw_uxrce_fini_topic_memory>
 8015728:	462c      	mov	r4, r5
 801572a:	e7e6      	b.n	80156fa <create_topic+0x86>
 801572c:	2000d058 	.word	0x2000d058
 8015730:	20009c80 	.word	0x20009c80
 8015734:	20009c44 	.word	0x20009c44

08015738 <destroy_topic>:
 8015738:	b538      	push	{r3, r4, r5, lr}
 801573a:	6985      	ldr	r5, [r0, #24]
 801573c:	b1d5      	cbz	r5, 8015774 <destroy_topic+0x3c>
 801573e:	4604      	mov	r4, r0
 8015740:	6928      	ldr	r0, [r5, #16]
 8015742:	6922      	ldr	r2, [r4, #16]
 8015744:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015748:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801574c:	6819      	ldr	r1, [r3, #0]
 801574e:	f7fa f9db 	bl	800fb08 <uxr_buffer_delete_entity>
 8015752:	4602      	mov	r2, r0
 8015754:	6928      	ldr	r0, [r5, #16]
 8015756:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801575a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801575e:	f7f9 f8bf 	bl	800e8e0 <run_xrce_session>
 8015762:	2800      	cmp	r0, #0
 8015764:	4620      	mov	r0, r4
 8015766:	bf14      	ite	ne
 8015768:	2400      	movne	r4, #0
 801576a:	2402      	moveq	r4, #2
 801576c:	f7f8 ffbe 	bl	800e6ec <rmw_uxrce_fini_topic_memory>
 8015770:	4620      	mov	r0, r4
 8015772:	bd38      	pop	{r3, r4, r5, pc}
 8015774:	2401      	movs	r4, #1
 8015776:	4620      	mov	r0, r4
 8015778:	bd38      	pop	{r3, r4, r5, pc}
 801577a:	bf00      	nop

0801577c <create_node>:
 801577c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015780:	b083      	sub	sp, #12
 8015782:	2b00      	cmp	r3, #0
 8015784:	d05f      	beq.n	8015846 <create_node+0xca>
 8015786:	4606      	mov	r6, r0
 8015788:	4835      	ldr	r0, [pc, #212]	; (8015860 <create_node+0xe4>)
 801578a:	460f      	mov	r7, r1
 801578c:	4690      	mov	r8, r2
 801578e:	461d      	mov	r5, r3
 8015790:	f7ff fcbe 	bl	8015110 <get_memory>
 8015794:	2800      	cmp	r0, #0
 8015796:	d056      	beq.n	8015846 <create_node+0xca>
 8015798:	68c4      	ldr	r4, [r0, #12]
 801579a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801579c:	6123      	str	r3, [r4, #16]
 801579e:	f7ff fd1f 	bl	80151e0 <rmw_get_implementation_identifier>
 80157a2:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80157a6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80157aa:	f8c4 9020 	str.w	r9, [r4, #32]
 80157ae:	4630      	mov	r0, r6
 80157b0:	f7ea fd20 	bl	80001f4 <strlen>
 80157b4:	1c42      	adds	r2, r0, #1
 80157b6:	2a3c      	cmp	r2, #60	; 0x3c
 80157b8:	f104 0518 	add.w	r5, r4, #24
 80157bc:	d840      	bhi.n	8015840 <create_node+0xc4>
 80157be:	4648      	mov	r0, r9
 80157c0:	4631      	mov	r1, r6
 80157c2:	f104 0968 	add.w	r9, r4, #104	; 0x68
 80157c6:	f003 f846 	bl	8018856 <memcpy>
 80157ca:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80157ce:	4638      	mov	r0, r7
 80157d0:	f7ea fd10 	bl	80001f4 <strlen>
 80157d4:	1c42      	adds	r2, r0, #1
 80157d6:	2a3c      	cmp	r2, #60	; 0x3c
 80157d8:	d832      	bhi.n	8015840 <create_node+0xc4>
 80157da:	4639      	mov	r1, r7
 80157dc:	4648      	mov	r0, r9
 80157de:	f003 f83a 	bl	8018856 <memcpy>
 80157e2:	f241 5394 	movw	r3, #5524	; 0x1594
 80157e6:	6922      	ldr	r2, [r4, #16]
 80157e8:	5ad0      	ldrh	r0, [r2, r3]
 80157ea:	2101      	movs	r1, #1
 80157ec:	eb00 0c01 	add.w	ip, r0, r1
 80157f0:	f822 c003 	strh.w	ip, [r2, r3]
 80157f4:	f7fa fb8a 	bl	800ff0c <uxr_object_id>
 80157f8:	6160      	str	r0, [r4, #20]
 80157fa:	783b      	ldrb	r3, [r7, #0]
 80157fc:	2b2f      	cmp	r3, #47	; 0x2f
 80157fe:	d127      	bne.n	8015850 <create_node+0xd4>
 8015800:	787b      	ldrb	r3, [r7, #1]
 8015802:	bb2b      	cbnz	r3, 8015850 <create_node+0xd4>
 8015804:	4a17      	ldr	r2, [pc, #92]	; (8015864 <create_node+0xe8>)
 8015806:	4818      	ldr	r0, [pc, #96]	; (8015868 <create_node+0xec>)
 8015808:	4633      	mov	r3, r6
 801580a:	213c      	movs	r1, #60	; 0x3c
 801580c:	f002 fda4 	bl	8018358 <sniprintf>
 8015810:	6920      	ldr	r0, [r4, #16]
 8015812:	4b15      	ldr	r3, [pc, #84]	; (8015868 <create_node+0xec>)
 8015814:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015818:	9300      	str	r3, [sp, #0]
 801581a:	2306      	movs	r3, #6
 801581c:	9301      	str	r3, [sp, #4]
 801581e:	6811      	ldr	r1, [r2, #0]
 8015820:	6962      	ldr	r2, [r4, #20]
 8015822:	fa1f f388 	uxth.w	r3, r8
 8015826:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801582a:	f7fa f9b9 	bl	800fba0 <uxr_buffer_create_participant_bin>
 801582e:	4602      	mov	r2, r0
 8015830:	6920      	ldr	r0, [r4, #16]
 8015832:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015836:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801583a:	f7f9 f851 	bl	800e8e0 <run_xrce_session>
 801583e:	b918      	cbnz	r0, 8015848 <create_node+0xcc>
 8015840:	4628      	mov	r0, r5
 8015842:	f7f8 fee3 	bl	800e60c <rmw_uxrce_fini_node_memory>
 8015846:	2500      	movs	r5, #0
 8015848:	4628      	mov	r0, r5
 801584a:	b003      	add	sp, #12
 801584c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015850:	4a06      	ldr	r2, [pc, #24]	; (801586c <create_node+0xf0>)
 8015852:	9600      	str	r6, [sp, #0]
 8015854:	463b      	mov	r3, r7
 8015856:	213c      	movs	r1, #60	; 0x3c
 8015858:	4803      	ldr	r0, [pc, #12]	; (8015868 <create_node+0xec>)
 801585a:	f002 fd7d 	bl	8018358 <sniprintf>
 801585e:	e7d7      	b.n	8015810 <create_node+0x94>
 8015860:	2000ce94 	.word	0x2000ce94
 8015864:	08019aec 	.word	0x08019aec
 8015868:	20009ce4 	.word	0x20009ce4
 801586c:	08019b2c 	.word	0x08019b2c

08015870 <rmw_create_node>:
 8015870:	b199      	cbz	r1, 801589a <rmw_create_node+0x2a>
 8015872:	b430      	push	{r4, r5}
 8015874:	4615      	mov	r5, r2
 8015876:	461a      	mov	r2, r3
 8015878:	780b      	ldrb	r3, [r1, #0]
 801587a:	460c      	mov	r4, r1
 801587c:	b153      	cbz	r3, 8015894 <rmw_create_node+0x24>
 801587e:	b14d      	cbz	r5, 8015894 <rmw_create_node+0x24>
 8015880:	782b      	ldrb	r3, [r5, #0]
 8015882:	b13b      	cbz	r3, 8015894 <rmw_create_node+0x24>
 8015884:	b902      	cbnz	r2, 8015888 <rmw_create_node+0x18>
 8015886:	69c2      	ldr	r2, [r0, #28]
 8015888:	4603      	mov	r3, r0
 801588a:	4629      	mov	r1, r5
 801588c:	4620      	mov	r0, r4
 801588e:	bc30      	pop	{r4, r5}
 8015890:	f7ff bf74 	b.w	801577c <create_node>
 8015894:	2000      	movs	r0, #0
 8015896:	bc30      	pop	{r4, r5}
 8015898:	4770      	bx	lr
 801589a:	2000      	movs	r0, #0
 801589c:	4770      	bx	lr
 801589e:	bf00      	nop

080158a0 <rmw_destroy_node>:
 80158a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158a2:	2800      	cmp	r0, #0
 80158a4:	d066      	beq.n	8015974 <rmw_destroy_node+0xd4>
 80158a6:	4607      	mov	r7, r0
 80158a8:	6800      	ldr	r0, [r0, #0]
 80158aa:	b128      	cbz	r0, 80158b8 <rmw_destroy_node+0x18>
 80158ac:	4b34      	ldr	r3, [pc, #208]	; (8015980 <rmw_destroy_node+0xe0>)
 80158ae:	6819      	ldr	r1, [r3, #0]
 80158b0:	f7ea fc96 	bl	80001e0 <strcmp>
 80158b4:	2800      	cmp	r0, #0
 80158b6:	d15d      	bne.n	8015974 <rmw_destroy_node+0xd4>
 80158b8:	687c      	ldr	r4, [r7, #4]
 80158ba:	2c00      	cmp	r4, #0
 80158bc:	d05a      	beq.n	8015974 <rmw_destroy_node+0xd4>
 80158be:	4b31      	ldr	r3, [pc, #196]	; (8015984 <rmw_destroy_node+0xe4>)
 80158c0:	681d      	ldr	r5, [r3, #0]
 80158c2:	2d00      	cmp	r5, #0
 80158c4:	d059      	beq.n	801597a <rmw_destroy_node+0xda>
 80158c6:	2600      	movs	r6, #0
 80158c8:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80158cc:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80158d0:	429c      	cmp	r4, r3
 80158d2:	d047      	beq.n	8015964 <rmw_destroy_node+0xc4>
 80158d4:	2d00      	cmp	r5, #0
 80158d6:	d1f7      	bne.n	80158c8 <rmw_destroy_node+0x28>
 80158d8:	4b2b      	ldr	r3, [pc, #172]	; (8015988 <rmw_destroy_node+0xe8>)
 80158da:	681d      	ldr	r5, [r3, #0]
 80158dc:	b15d      	cbz	r5, 80158f6 <rmw_destroy_node+0x56>
 80158de:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80158e2:	6a0b      	ldr	r3, [r1, #32]
 80158e4:	429c      	cmp	r4, r3
 80158e6:	d1f9      	bne.n	80158dc <rmw_destroy_node+0x3c>
 80158e8:	317c      	adds	r1, #124	; 0x7c
 80158ea:	4638      	mov	r0, r7
 80158ec:	f7f8 fcac 	bl	800e248 <rmw_destroy_subscription>
 80158f0:	4606      	mov	r6, r0
 80158f2:	2d00      	cmp	r5, #0
 80158f4:	d1f3      	bne.n	80158de <rmw_destroy_node+0x3e>
 80158f6:	4b25      	ldr	r3, [pc, #148]	; (801598c <rmw_destroy_node+0xec>)
 80158f8:	681d      	ldr	r5, [r3, #0]
 80158fa:	b15d      	cbz	r5, 8015914 <rmw_destroy_node+0x74>
 80158fc:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8015900:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015902:	429c      	cmp	r4, r3
 8015904:	d1f9      	bne.n	80158fa <rmw_destroy_node+0x5a>
 8015906:	317c      	adds	r1, #124	; 0x7c
 8015908:	4638      	mov	r0, r7
 801590a:	f000 f951 	bl	8015bb0 <rmw_destroy_service>
 801590e:	4606      	mov	r6, r0
 8015910:	2d00      	cmp	r5, #0
 8015912:	d1f3      	bne.n	80158fc <rmw_destroy_node+0x5c>
 8015914:	4b1e      	ldr	r3, [pc, #120]	; (8015990 <rmw_destroy_node+0xf0>)
 8015916:	681d      	ldr	r5, [r3, #0]
 8015918:	b15d      	cbz	r5, 8015932 <rmw_destroy_node+0x92>
 801591a:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 801591e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015920:	429c      	cmp	r4, r3
 8015922:	d1f9      	bne.n	8015918 <rmw_destroy_node+0x78>
 8015924:	317c      	adds	r1, #124	; 0x7c
 8015926:	4638      	mov	r0, r7
 8015928:	f7ff fc16 	bl	8015158 <rmw_destroy_client>
 801592c:	4606      	mov	r6, r0
 801592e:	2d00      	cmp	r5, #0
 8015930:	d1f3      	bne.n	801591a <rmw_destroy_node+0x7a>
 8015932:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8015936:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801593a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801593e:	6819      	ldr	r1, [r3, #0]
 8015940:	f7fa f8e2 	bl	800fb08 <uxr_buffer_delete_entity>
 8015944:	4602      	mov	r2, r0
 8015946:	6920      	ldr	r0, [r4, #16]
 8015948:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801594c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015950:	f7f8 ffc6 	bl	800e8e0 <run_xrce_session>
 8015954:	2800      	cmp	r0, #0
 8015956:	bf08      	it	eq
 8015958:	2602      	moveq	r6, #2
 801595a:	4638      	mov	r0, r7
 801595c:	f7f8 fe56 	bl	800e60c <rmw_uxrce_fini_node_memory>
 8015960:	4630      	mov	r0, r6
 8015962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015964:	3184      	adds	r1, #132	; 0x84
 8015966:	4638      	mov	r0, r7
 8015968:	f7f8 fb3c 	bl	800dfe4 <rmw_destroy_publisher>
 801596c:	4606      	mov	r6, r0
 801596e:	2d00      	cmp	r5, #0
 8015970:	d1aa      	bne.n	80158c8 <rmw_destroy_node+0x28>
 8015972:	e7b1      	b.n	80158d8 <rmw_destroy_node+0x38>
 8015974:	2601      	movs	r6, #1
 8015976:	4630      	mov	r0, r6
 8015978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801597a:	462e      	mov	r6, r5
 801597c:	e7ac      	b.n	80158d8 <rmw_destroy_node+0x38>
 801597e:	bf00      	nop
 8015980:	08019ff4 	.word	0x08019ff4
 8015984:	20009ed0 	.word	0x20009ed0
 8015988:	2000d12c 	.word	0x2000d12c
 801598c:	2000d11c 	.word	0x2000d11c
 8015990:	2000a750 	.word	0x2000a750

08015994 <rmw_node_get_graph_guard_condition>:
 8015994:	6843      	ldr	r3, [r0, #4]
 8015996:	6918      	ldr	r0, [r3, #16]
 8015998:	f500 705a 	add.w	r0, r0, #872	; 0x368
 801599c:	4770      	bx	lr
 801599e:	bf00      	nop

080159a0 <rmw_take_request>:
 80159a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159a4:	4605      	mov	r5, r0
 80159a6:	6800      	ldr	r0, [r0, #0]
 80159a8:	b089      	sub	sp, #36	; 0x24
 80159aa:	460c      	mov	r4, r1
 80159ac:	4690      	mov	r8, r2
 80159ae:	461e      	mov	r6, r3
 80159b0:	b128      	cbz	r0, 80159be <rmw_take_request+0x1e>
 80159b2:	4b28      	ldr	r3, [pc, #160]	; (8015a54 <rmw_take_request+0xb4>)
 80159b4:	6819      	ldr	r1, [r3, #0]
 80159b6:	f7ea fc13 	bl	80001e0 <strcmp>
 80159ba:	2800      	cmp	r0, #0
 80159bc:	d146      	bne.n	8015a4c <rmw_take_request+0xac>
 80159be:	b10e      	cbz	r6, 80159c4 <rmw_take_request+0x24>
 80159c0:	2300      	movs	r3, #0
 80159c2:	7033      	strb	r3, [r6, #0]
 80159c4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80159c8:	f7f8 ff12 	bl	800e7f0 <rmw_uxrce_clean_expired_static_input_buffer>
 80159cc:	4648      	mov	r0, r9
 80159ce:	f7f8 fee5 	bl	800e79c <rmw_uxrce_find_static_input_buffer_by_owner>
 80159d2:	4607      	mov	r7, r0
 80159d4:	b3b0      	cbz	r0, 8015a44 <rmw_take_request+0xa4>
 80159d6:	68c5      	ldr	r5, [r0, #12]
 80159d8:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 80159dc:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 80159e0:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80159e4:	7423      	strb	r3, [r4, #16]
 80159e6:	e9c4 1208 	strd	r1, r2, [r4, #32]
 80159ea:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80159ee:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 80159f2:	74e2      	strb	r2, [r4, #19]
 80159f4:	f8a4 3011 	strh.w	r3, [r4, #17]
 80159f8:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 80159fc:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8015a00:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8015a04:	61e1      	str	r1, [r4, #28]
 8015a06:	6162      	str	r2, [r4, #20]
 8015a08:	61a3      	str	r3, [r4, #24]
 8015a0a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015a0e:	689b      	ldr	r3, [r3, #8]
 8015a10:	4798      	blx	r3
 8015a12:	6844      	ldr	r4, [r0, #4]
 8015a14:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8015a18:	f105 0110 	add.w	r1, r5, #16
 8015a1c:	4668      	mov	r0, sp
 8015a1e:	f7fa f803 	bl	800fa28 <ucdr_init_buffer>
 8015a22:	68e3      	ldr	r3, [r4, #12]
 8015a24:	4641      	mov	r1, r8
 8015a26:	4668      	mov	r0, sp
 8015a28:	4798      	blx	r3
 8015a2a:	4639      	mov	r1, r7
 8015a2c:	4604      	mov	r4, r0
 8015a2e:	480a      	ldr	r0, [pc, #40]	; (8015a58 <rmw_take_request+0xb8>)
 8015a30:	f7ff fb7e 	bl	8015130 <put_memory>
 8015a34:	b106      	cbz	r6, 8015a38 <rmw_take_request+0x98>
 8015a36:	7034      	strb	r4, [r6, #0]
 8015a38:	f084 0001 	eor.w	r0, r4, #1
 8015a3c:	b2c0      	uxtb	r0, r0
 8015a3e:	b009      	add	sp, #36	; 0x24
 8015a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a44:	2001      	movs	r0, #1
 8015a46:	b009      	add	sp, #36	; 0x24
 8015a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a4c:	200c      	movs	r0, #12
 8015a4e:	b009      	add	sp, #36	; 0x24
 8015a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a54:	08019ff4 	.word	0x08019ff4
 8015a58:	20009ec0 	.word	0x20009ec0

08015a5c <rmw_send_response>:
 8015a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a5e:	4605      	mov	r5, r0
 8015a60:	6800      	ldr	r0, [r0, #0]
 8015a62:	b091      	sub	sp, #68	; 0x44
 8015a64:	460c      	mov	r4, r1
 8015a66:	4617      	mov	r7, r2
 8015a68:	b128      	cbz	r0, 8015a76 <rmw_send_response+0x1a>
 8015a6a:	4b2a      	ldr	r3, [pc, #168]	; (8015b14 <rmw_send_response+0xb8>)
 8015a6c:	6819      	ldr	r1, [r3, #0]
 8015a6e:	f7ea fbb7 	bl	80001e0 <strcmp>
 8015a72:	2800      	cmp	r0, #0
 8015a74:	d143      	bne.n	8015afe <rmw_send_response+0xa2>
 8015a76:	4623      	mov	r3, r4
 8015a78:	4626      	mov	r6, r4
 8015a7a:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8015a7e:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 8015a82:	6859      	ldr	r1, [r3, #4]
 8015a84:	686d      	ldr	r5, [r5, #4]
 8015a86:	689a      	ldr	r2, [r3, #8]
 8015a88:	78b3      	ldrb	r3, [r6, #2]
 8015a8a:	f894 c000 	ldrb.w	ip, [r4]
 8015a8e:	6966      	ldr	r6, [r4, #20]
 8015a90:	f88d 3016 	strb.w	r3, [sp, #22]
 8015a94:	ab02      	add	r3, sp, #8
 8015a96:	f8ad e014 	strh.w	lr, [sp, #20]
 8015a9a:	f88d c017 	strb.w	ip, [sp, #23]
 8015a9e:	9606      	str	r6, [sp, #24]
 8015aa0:	c307      	stmia	r3!, {r0, r1, r2}
 8015aa2:	696b      	ldr	r3, [r5, #20]
 8015aa4:	6922      	ldr	r2, [r4, #16]
 8015aa6:	9207      	str	r2, [sp, #28]
 8015aa8:	68db      	ldr	r3, [r3, #12]
 8015aaa:	6fae      	ldr	r6, [r5, #120]	; 0x78
 8015aac:	4798      	blx	r3
 8015aae:	4603      	mov	r3, r0
 8015ab0:	4638      	mov	r0, r7
 8015ab2:	685c      	ldr	r4, [r3, #4]
 8015ab4:	6923      	ldr	r3, [r4, #16]
 8015ab6:	4798      	blx	r3
 8015ab8:	6933      	ldr	r3, [r6, #16]
 8015aba:	3018      	adds	r0, #24
 8015abc:	9000      	str	r0, [sp, #0]
 8015abe:	692a      	ldr	r2, [r5, #16]
 8015ac0:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8015ac2:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015ac6:	ab08      	add	r3, sp, #32
 8015ac8:	f7fb fe56 	bl	8011778 <uxr_prepare_output_stream>
 8015acc:	b910      	cbnz	r0, 8015ad4 <rmw_send_response+0x78>
 8015ace:	2001      	movs	r0, #1
 8015ad0:	b011      	add	sp, #68	; 0x44
 8015ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ad4:	a902      	add	r1, sp, #8
 8015ad6:	a808      	add	r0, sp, #32
 8015ad8:	f7fc ff6c 	bl	80129b4 <uxr_serialize_SampleIdentity>
 8015adc:	68a3      	ldr	r3, [r4, #8]
 8015ade:	a908      	add	r1, sp, #32
 8015ae0:	4638      	mov	r0, r7
 8015ae2:	4798      	blx	r3
 8015ae4:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8015ae8:	6930      	ldr	r0, [r6, #16]
 8015aea:	2b01      	cmp	r3, #1
 8015aec:	d00a      	beq.n	8015b04 <rmw_send_response+0xa8>
 8015aee:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8015af0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015af4:	f7fb f838 	bl	8010b68 <uxr_run_session_until_confirm_delivery>
 8015af8:	2000      	movs	r0, #0
 8015afa:	b011      	add	sp, #68	; 0x44
 8015afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015afe:	200c      	movs	r0, #12
 8015b00:	b011      	add	sp, #68	; 0x44
 8015b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b04:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015b08:	f7fa fc72 	bl	80103f0 <uxr_flash_output_streams>
 8015b0c:	2000      	movs	r0, #0
 8015b0e:	b011      	add	sp, #68	; 0x44
 8015b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b12:	bf00      	nop
 8015b14:	08019ff4 	.word	0x08019ff4

08015b18 <rmw_take_response>:
 8015b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b1c:	4604      	mov	r4, r0
 8015b1e:	6800      	ldr	r0, [r0, #0]
 8015b20:	b089      	sub	sp, #36	; 0x24
 8015b22:	4688      	mov	r8, r1
 8015b24:	4617      	mov	r7, r2
 8015b26:	461d      	mov	r5, r3
 8015b28:	b120      	cbz	r0, 8015b34 <rmw_take_response+0x1c>
 8015b2a:	4b1f      	ldr	r3, [pc, #124]	; (8015ba8 <rmw_take_response+0x90>)
 8015b2c:	6819      	ldr	r1, [r3, #0]
 8015b2e:	f7ea fb57 	bl	80001e0 <strcmp>
 8015b32:	bb88      	cbnz	r0, 8015b98 <rmw_take_response+0x80>
 8015b34:	b10d      	cbz	r5, 8015b3a <rmw_take_response+0x22>
 8015b36:	2300      	movs	r3, #0
 8015b38:	702b      	strb	r3, [r5, #0]
 8015b3a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015b3e:	f7f8 fe57 	bl	800e7f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8015b42:	4648      	mov	r0, r9
 8015b44:	f7f8 fe2a 	bl	800e79c <rmw_uxrce_find_static_input_buffer_by_owner>
 8015b48:	4606      	mov	r6, r0
 8015b4a:	b348      	cbz	r0, 8015ba0 <rmw_take_response+0x88>
 8015b4c:	68c4      	ldr	r4, [r0, #12]
 8015b4e:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8015b52:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8015b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5a:	68c9      	ldr	r1, [r1, #12]
 8015b5c:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8015b60:	4788      	blx	r1
 8015b62:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015b66:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8015b6a:	f104 0110 	add.w	r1, r4, #16
 8015b6e:	4668      	mov	r0, sp
 8015b70:	f7f9 ff5a 	bl	800fa28 <ucdr_init_buffer>
 8015b74:	4639      	mov	r1, r7
 8015b76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b7a:	4668      	mov	r0, sp
 8015b7c:	4798      	blx	r3
 8015b7e:	4631      	mov	r1, r6
 8015b80:	4604      	mov	r4, r0
 8015b82:	480a      	ldr	r0, [pc, #40]	; (8015bac <rmw_take_response+0x94>)
 8015b84:	f7ff fad4 	bl	8015130 <put_memory>
 8015b88:	b105      	cbz	r5, 8015b8c <rmw_take_response+0x74>
 8015b8a:	702c      	strb	r4, [r5, #0]
 8015b8c:	f084 0001 	eor.w	r0, r4, #1
 8015b90:	b2c0      	uxtb	r0, r0
 8015b92:	b009      	add	sp, #36	; 0x24
 8015b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b98:	200c      	movs	r0, #12
 8015b9a:	b009      	add	sp, #36	; 0x24
 8015b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ba0:	2001      	movs	r0, #1
 8015ba2:	b009      	add	sp, #36	; 0x24
 8015ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ba8:	08019ff4 	.word	0x08019ff4
 8015bac:	20009ec0 	.word	0x20009ec0

08015bb0 <rmw_destroy_service>:
 8015bb0:	b570      	push	{r4, r5, r6, lr}
 8015bb2:	b128      	cbz	r0, 8015bc0 <rmw_destroy_service+0x10>
 8015bb4:	4604      	mov	r4, r0
 8015bb6:	6800      	ldr	r0, [r0, #0]
 8015bb8:	460d      	mov	r5, r1
 8015bba:	f7f8 ff11 	bl	800e9e0 <is_uxrce_rmw_identifier_valid>
 8015bbe:	b910      	cbnz	r0, 8015bc6 <rmw_destroy_service+0x16>
 8015bc0:	2401      	movs	r4, #1
 8015bc2:	4620      	mov	r0, r4
 8015bc4:	bd70      	pop	{r4, r5, r6, pc}
 8015bc6:	6863      	ldr	r3, [r4, #4]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d0f9      	beq.n	8015bc0 <rmw_destroy_service+0x10>
 8015bcc:	2d00      	cmp	r5, #0
 8015bce:	d0f7      	beq.n	8015bc0 <rmw_destroy_service+0x10>
 8015bd0:	6828      	ldr	r0, [r5, #0]
 8015bd2:	f7f8 ff05 	bl	800e9e0 <is_uxrce_rmw_identifier_valid>
 8015bd6:	2800      	cmp	r0, #0
 8015bd8:	d0f2      	beq.n	8015bc0 <rmw_destroy_service+0x10>
 8015bda:	686e      	ldr	r6, [r5, #4]
 8015bdc:	2e00      	cmp	r6, #0
 8015bde:	d0ef      	beq.n	8015bc0 <rmw_destroy_service+0x10>
 8015be0:	6864      	ldr	r4, [r4, #4]
 8015be2:	6932      	ldr	r2, [r6, #16]
 8015be4:	6920      	ldr	r0, [r4, #16]
 8015be6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015bea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015bee:	6819      	ldr	r1, [r3, #0]
 8015bf0:	f7fa f9f4 	bl	800ffdc <uxr_buffer_cancel_data>
 8015bf4:	4602      	mov	r2, r0
 8015bf6:	6920      	ldr	r0, [r4, #16]
 8015bf8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015bfc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015c00:	f7f8 fe6e 	bl	800e8e0 <run_xrce_session>
 8015c04:	6920      	ldr	r0, [r4, #16]
 8015c06:	6932      	ldr	r2, [r6, #16]
 8015c08:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015c0c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015c10:	6819      	ldr	r1, [r3, #0]
 8015c12:	f7f9 ff79 	bl	800fb08 <uxr_buffer_delete_entity>
 8015c16:	4602      	mov	r2, r0
 8015c18:	6920      	ldr	r0, [r4, #16]
 8015c1a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015c1e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015c22:	f7f8 fe5d 	bl	800e8e0 <run_xrce_session>
 8015c26:	2800      	cmp	r0, #0
 8015c28:	4628      	mov	r0, r5
 8015c2a:	bf14      	ite	ne
 8015c2c:	2400      	movne	r4, #0
 8015c2e:	2402      	moveq	r4, #2
 8015c30:	f7f8 fd30 	bl	800e694 <rmw_uxrce_fini_service_memory>
 8015c34:	e7c5      	b.n	8015bc2 <rmw_destroy_service+0x12>
 8015c36:	bf00      	nop

08015c38 <rmw_uxrce_transport_init>:
 8015c38:	b508      	push	{r3, lr}
 8015c3a:	b108      	cbz	r0, 8015c40 <rmw_uxrce_transport_init+0x8>
 8015c3c:	f100 0210 	add.w	r2, r0, #16
 8015c40:	b139      	cbz	r1, 8015c52 <rmw_uxrce_transport_init+0x1a>
 8015c42:	6949      	ldr	r1, [r1, #20]
 8015c44:	4610      	mov	r0, r2
 8015c46:	f000 fbdf 	bl	8016408 <uxr_init_custom_transport>
 8015c4a:	f080 0001 	eor.w	r0, r0, #1
 8015c4e:	b2c0      	uxtb	r0, r0
 8015c50:	bd08      	pop	{r3, pc}
 8015c52:	4b04      	ldr	r3, [pc, #16]	; (8015c64 <rmw_uxrce_transport_init+0x2c>)
 8015c54:	4610      	mov	r0, r2
 8015c56:	6859      	ldr	r1, [r3, #4]
 8015c58:	f000 fbd6 	bl	8016408 <uxr_init_custom_transport>
 8015c5c:	f080 0001 	eor.w	r0, r0, #1
 8015c60:	b2c0      	uxtb	r0, r0
 8015c62:	bd08      	pop	{r3, pc}
 8015c64:	20009ea0 	.word	0x20009ea0

08015c68 <rmw_wait>:
 8015c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c6c:	460f      	mov	r7, r1
 8015c6e:	4606      	mov	r6, r0
 8015c70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015c72:	469a      	mov	sl, r3
 8015c74:	4615      	mov	r5, r2
 8015c76:	2a00      	cmp	r2, #0
 8015c78:	f000 8122 	beq.w	8015ec0 <rmw_wait+0x258>
 8015c7c:	2900      	cmp	r1, #0
 8015c7e:	f000 812a 	beq.w	8015ed6 <rmw_wait+0x26e>
 8015c82:	e9d1 2300 	ldrd	r2, r3, [r1]
 8015c86:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8015c8a:	015c      	lsls	r4, r3, #5
 8015c8c:	ebbb 0b02 	subs.w	fp, fp, r2
 8015c90:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8015c94:	eb64 0403 	sbc.w	r4, r4, r3
 8015c98:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8015c9c:	00a4      	lsls	r4, r4, #2
 8015c9e:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8015ca2:	eb10 0b02 	adds.w	fp, r0, r2
 8015ca6:	eb43 0404 	adc.w	r4, r3, r4
 8015caa:	4aad      	ldr	r2, [pc, #692]	; (8015f60 <rmw_wait+0x2f8>)
 8015cac:	2300      	movs	r3, #0
 8015cae:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8015cb2:	f7ea ff6b 	bl	8000b8c <__aeabi_uldivmod>
 8015cb6:	00e4      	lsls	r4, r4, #3
 8015cb8:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8015cbc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8015cc0:	eb1b 0800 	adds.w	r8, fp, r0
 8015cc4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015cc8:	eb44 0901 	adc.w	r9, r4, r1
 8015ccc:	2300      	movs	r3, #0
 8015cce:	4542      	cmp	r2, r8
 8015cd0:	eb73 0109 	sbcs.w	r1, r3, r9
 8015cd4:	f2c0 80f2 	blt.w	8015ebc <rmw_wait+0x254>
 8015cd8:	f7f8 fd8a 	bl	800e7f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8015cdc:	4ba1      	ldr	r3, [pc, #644]	; (8015f64 <rmw_wait+0x2fc>)
 8015cde:	681c      	ldr	r4, [r3, #0]
 8015ce0:	b144      	cbz	r4, 8015cf4 <rmw_wait+0x8c>
 8015ce2:	4623      	mov	r3, r4
 8015ce4:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8015ce8:	2100      	movs	r1, #0
 8015cea:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8015cee:	5411      	strb	r1, [r2, r0]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d1fa      	bne.n	8015cea <rmw_wait+0x82>
 8015cf4:	b185      	cbz	r5, 8015d18 <rmw_wait+0xb0>
 8015cf6:	6829      	ldr	r1, [r5, #0]
 8015cf8:	b171      	cbz	r1, 8015d18 <rmw_wait+0xb0>
 8015cfa:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8015cfe:	2300      	movs	r3, #0
 8015d00:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015d04:	2001      	movs	r0, #1
 8015d06:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8015d0a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8015d0c:	3301      	adds	r3, #1
 8015d0e:	6912      	ldr	r2, [r2, #16]
 8015d10:	4299      	cmp	r1, r3
 8015d12:	f802 000c 	strb.w	r0, [r2, ip]
 8015d16:	d1f6      	bne.n	8015d06 <rmw_wait+0x9e>
 8015d18:	f1ba 0f00 	cmp.w	sl, #0
 8015d1c:	d011      	beq.n	8015d42 <rmw_wait+0xda>
 8015d1e:	f8da 1000 	ldr.w	r1, [sl]
 8015d22:	b171      	cbz	r1, 8015d42 <rmw_wait+0xda>
 8015d24:	f8da e004 	ldr.w	lr, [sl, #4]
 8015d28:	2300      	movs	r3, #0
 8015d2a:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015d2e:	2001      	movs	r0, #1
 8015d30:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8015d34:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8015d36:	3301      	adds	r3, #1
 8015d38:	6912      	ldr	r2, [r2, #16]
 8015d3a:	4299      	cmp	r1, r3
 8015d3c:	f802 000c 	strb.w	r0, [r2, ip]
 8015d40:	d1f6      	bne.n	8015d30 <rmw_wait+0xc8>
 8015d42:	b186      	cbz	r6, 8015d66 <rmw_wait+0xfe>
 8015d44:	6831      	ldr	r1, [r6, #0]
 8015d46:	b171      	cbz	r1, 8015d66 <rmw_wait+0xfe>
 8015d48:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015d52:	2001      	movs	r0, #1
 8015d54:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8015d58:	6a12      	ldr	r2, [r2, #32]
 8015d5a:	3301      	adds	r3, #1
 8015d5c:	6912      	ldr	r2, [r2, #16]
 8015d5e:	4299      	cmp	r1, r3
 8015d60:	f802 000c 	strb.w	r0, [r2, ip]
 8015d64:	d1f6      	bne.n	8015d54 <rmw_wait+0xec>
 8015d66:	b34c      	cbz	r4, 8015dbc <rmw_wait+0x154>
 8015d68:	4622      	mov	r2, r4
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8015d70:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8015d74:	5c09      	ldrb	r1, [r1, r0]
 8015d76:	440b      	add	r3, r1
 8015d78:	b2db      	uxtb	r3, r3
 8015d7a:	2a00      	cmp	r2, #0
 8015d7c:	d1f8      	bne.n	8015d70 <rmw_wait+0x108>
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	f000 8082 	beq.w	8015e88 <rmw_wait+0x220>
 8015d84:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8015d88:	d00d      	beq.n	8015da6 <rmw_wait+0x13e>
 8015d8a:	ee07 8a90 	vmov	s15, r8
 8015d8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015d92:	ee07 3a90 	vmov	s15, r3
 8015d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d9e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015da2:	ee17 8a90 	vmov	r8, s15
 8015da6:	f241 59a4 	movw	r9, #5540	; 0x15a4
 8015daa:	68e0      	ldr	r0, [r4, #12]
 8015dac:	f810 3009 	ldrb.w	r3, [r0, r9]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	f040 8093 	bne.w	8015edc <rmw_wait+0x274>
 8015db6:	68a4      	ldr	r4, [r4, #8]
 8015db8:	2c00      	cmp	r4, #0
 8015dba:	d1f6      	bne.n	8015daa <rmw_wait+0x142>
 8015dbc:	2d00      	cmp	r5, #0
 8015dbe:	f000 80ac 	beq.w	8015f1a <rmw_wait+0x2b2>
 8015dc2:	682b      	ldr	r3, [r5, #0]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	f000 8093 	beq.w	8015ef0 <rmw_wait+0x288>
 8015dca:	2400      	movs	r4, #0
 8015dcc:	46a0      	mov	r8, r4
 8015dce:	686b      	ldr	r3, [r5, #4]
 8015dd0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015dd4:	f7f8 fce2 	bl	800e79c <rmw_uxrce_find_static_input_buffer_by_owner>
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	d05f      	beq.n	8015e9c <rmw_wait+0x234>
 8015ddc:	682b      	ldr	r3, [r5, #0]
 8015dde:	3401      	adds	r4, #1
 8015de0:	42a3      	cmp	r3, r4
 8015de2:	f04f 0801 	mov.w	r8, #1
 8015de6:	d8f2      	bhi.n	8015dce <rmw_wait+0x166>
 8015de8:	f1ba 0f00 	cmp.w	sl, #0
 8015dec:	d012      	beq.n	8015e14 <rmw_wait+0x1ac>
 8015dee:	f8da 3000 	ldr.w	r3, [sl]
 8015df2:	b17b      	cbz	r3, 8015e14 <rmw_wait+0x1ac>
 8015df4:	2400      	movs	r4, #0
 8015df6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015dfa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015dfe:	f7f8 fccd 	bl	800e79c <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e02:	2800      	cmp	r0, #0
 8015e04:	d052      	beq.n	8015eac <rmw_wait+0x244>
 8015e06:	f8da 3000 	ldr.w	r3, [sl]
 8015e0a:	3401      	adds	r4, #1
 8015e0c:	42a3      	cmp	r3, r4
 8015e0e:	f04f 0801 	mov.w	r8, #1
 8015e12:	d8f0      	bhi.n	8015df6 <rmw_wait+0x18e>
 8015e14:	b1e6      	cbz	r6, 8015e50 <rmw_wait+0x1e8>
 8015e16:	6833      	ldr	r3, [r6, #0]
 8015e18:	b1d3      	cbz	r3, 8015e50 <rmw_wait+0x1e8>
 8015e1a:	2400      	movs	r4, #0
 8015e1c:	6873      	ldr	r3, [r6, #4]
 8015e1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015e22:	f7f8 fcbb 	bl	800e79c <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e26:	b160      	cbz	r0, 8015e42 <rmw_wait+0x1da>
 8015e28:	6833      	ldr	r3, [r6, #0]
 8015e2a:	3401      	adds	r4, #1
 8015e2c:	42a3      	cmp	r3, r4
 8015e2e:	d96c      	bls.n	8015f0a <rmw_wait+0x2a2>
 8015e30:	6873      	ldr	r3, [r6, #4]
 8015e32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015e36:	f04f 0801 	mov.w	r8, #1
 8015e3a:	f7f8 fcaf 	bl	800e79c <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e3e:	2800      	cmp	r0, #0
 8015e40:	d1f2      	bne.n	8015e28 <rmw_wait+0x1c0>
 8015e42:	e9d6 3200 	ldrd	r3, r2, [r6]
 8015e46:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015e4a:	3401      	adds	r4, #1
 8015e4c:	42a3      	cmp	r3, r4
 8015e4e:	d8e5      	bhi.n	8015e1c <rmw_wait+0x1b4>
 8015e50:	b1a7      	cbz	r7, 8015e7c <rmw_wait+0x214>
 8015e52:	683c      	ldr	r4, [r7, #0]
 8015e54:	b194      	cbz	r4, 8015e7c <rmw_wait+0x214>
 8015e56:	2300      	movs	r3, #0
 8015e58:	461d      	mov	r5, r3
 8015e5a:	e004      	b.n	8015e66 <rmw_wait+0x1fe>
 8015e5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015e60:	3301      	adds	r3, #1
 8015e62:	42a3      	cmp	r3, r4
 8015e64:	d00a      	beq.n	8015e7c <rmw_wait+0x214>
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015e6c:	7c0a      	ldrb	r2, [r1, #16]
 8015e6e:	2a00      	cmp	r2, #0
 8015e70:	d0f4      	beq.n	8015e5c <rmw_wait+0x1f4>
 8015e72:	3301      	adds	r3, #1
 8015e74:	42a3      	cmp	r3, r4
 8015e76:	740d      	strb	r5, [r1, #16]
 8015e78:	4690      	mov	r8, r2
 8015e7a:	d1f4      	bne.n	8015e66 <rmw_wait+0x1fe>
 8015e7c:	f1b8 0f00 	cmp.w	r8, #0
 8015e80:	d040      	beq.n	8015f04 <rmw_wait+0x29c>
 8015e82:	2000      	movs	r0, #0
 8015e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e88:	68e0      	ldr	r0, [r4, #12]
 8015e8a:	2100      	movs	r1, #0
 8015e8c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e90:	f7fa fe30 	bl	8010af4 <uxr_run_session_timeout>
 8015e94:	68a4      	ldr	r4, [r4, #8]
 8015e96:	2c00      	cmp	r4, #0
 8015e98:	d1f6      	bne.n	8015e88 <rmw_wait+0x220>
 8015e9a:	e78f      	b.n	8015dbc <rmw_wait+0x154>
 8015e9c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015ea0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015ea4:	3401      	adds	r4, #1
 8015ea6:	42a3      	cmp	r3, r4
 8015ea8:	d891      	bhi.n	8015dce <rmw_wait+0x166>
 8015eaa:	e79d      	b.n	8015de8 <rmw_wait+0x180>
 8015eac:	e9da 3200 	ldrd	r3, r2, [sl]
 8015eb0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015eb4:	3401      	adds	r4, #1
 8015eb6:	429c      	cmp	r4, r3
 8015eb8:	d39d      	bcc.n	8015df6 <rmw_wait+0x18e>
 8015eba:	e7ab      	b.n	8015e14 <rmw_wait+0x1ac>
 8015ebc:	4690      	mov	r8, r2
 8015ebe:	e70b      	b.n	8015cd8 <rmw_wait+0x70>
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	f47f aedb 	bne.w	8015c7c <rmw_wait+0x14>
 8015ec6:	2800      	cmp	r0, #0
 8015ec8:	f47f aed8 	bne.w	8015c7c <rmw_wait+0x14>
 8015ecc:	2f00      	cmp	r7, #0
 8015ece:	d0d8      	beq.n	8015e82 <rmw_wait+0x21a>
 8015ed0:	2900      	cmp	r1, #0
 8015ed2:	f47f aed6 	bne.w	8015c82 <rmw_wait+0x1a>
 8015ed6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015eda:	e6fd      	b.n	8015cd8 <rmw_wait+0x70>
 8015edc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015ee0:	4641      	mov	r1, r8
 8015ee2:	f7fa fe21 	bl	8010b28 <uxr_run_session_until_data>
 8015ee6:	68a4      	ldr	r4, [r4, #8]
 8015ee8:	2c00      	cmp	r4, #0
 8015eea:	f47f af5e 	bne.w	8015daa <rmw_wait+0x142>
 8015eee:	e765      	b.n	8015dbc <rmw_wait+0x154>
 8015ef0:	f1ba 0f00 	cmp.w	sl, #0
 8015ef4:	d11e      	bne.n	8015f34 <rmw_wait+0x2cc>
 8015ef6:	b35e      	cbz	r6, 8015f50 <rmw_wait+0x2e8>
 8015ef8:	6833      	ldr	r3, [r6, #0]
 8015efa:	46d0      	mov	r8, sl
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d18c      	bne.n	8015e1a <rmw_wait+0x1b2>
 8015f00:	2f00      	cmp	r7, #0
 8015f02:	d1a6      	bne.n	8015e52 <rmw_wait+0x1ea>
 8015f04:	2002      	movs	r0, #2
 8015f06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f0a:	2f00      	cmp	r7, #0
 8015f0c:	d0b9      	beq.n	8015e82 <rmw_wait+0x21a>
 8015f0e:	683c      	ldr	r4, [r7, #0]
 8015f10:	f04f 0801 	mov.w	r8, #1
 8015f14:	2c00      	cmp	r4, #0
 8015f16:	d19e      	bne.n	8015e56 <rmw_wait+0x1ee>
 8015f18:	e7b3      	b.n	8015e82 <rmw_wait+0x21a>
 8015f1a:	f1ba 0f00 	cmp.w	sl, #0
 8015f1e:	d0ea      	beq.n	8015ef6 <rmw_wait+0x28e>
 8015f20:	f8da 3000 	ldr.w	r3, [sl]
 8015f24:	46a8      	mov	r8, r5
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	f47f af64 	bne.w	8015df4 <rmw_wait+0x18c>
 8015f2c:	2e00      	cmp	r6, #0
 8015f2e:	f47f af72 	bne.w	8015e16 <rmw_wait+0x1ae>
 8015f32:	e009      	b.n	8015f48 <rmw_wait+0x2e0>
 8015f34:	f8da 2000 	ldr.w	r2, [sl]
 8015f38:	4698      	mov	r8, r3
 8015f3a:	2a00      	cmp	r2, #0
 8015f3c:	f47f af5a 	bne.w	8015df4 <rmw_wait+0x18c>
 8015f40:	4690      	mov	r8, r2
 8015f42:	2e00      	cmp	r6, #0
 8015f44:	f47f af67 	bne.w	8015e16 <rmw_wait+0x1ae>
 8015f48:	46b0      	mov	r8, r6
 8015f4a:	2f00      	cmp	r7, #0
 8015f4c:	d181      	bne.n	8015e52 <rmw_wait+0x1ea>
 8015f4e:	e7d9      	b.n	8015f04 <rmw_wait+0x29c>
 8015f50:	2f00      	cmp	r7, #0
 8015f52:	d0d7      	beq.n	8015f04 <rmw_wait+0x29c>
 8015f54:	683c      	ldr	r4, [r7, #0]
 8015f56:	46b0      	mov	r8, r6
 8015f58:	2c00      	cmp	r4, #0
 8015f5a:	f47f af7c 	bne.w	8015e56 <rmw_wait+0x1ee>
 8015f5e:	e7d1      	b.n	8015f04 <rmw_wait+0x29c>
 8015f60:	000f4240 	.word	0x000f4240
 8015f64:	2000d068 	.word	0x2000d068

08015f68 <rmw_create_wait_set>:
 8015f68:	b508      	push	{r3, lr}
 8015f6a:	4803      	ldr	r0, [pc, #12]	; (8015f78 <rmw_create_wait_set+0x10>)
 8015f6c:	f7ff f8d0 	bl	8015110 <get_memory>
 8015f70:	b108      	cbz	r0, 8015f76 <rmw_create_wait_set+0xe>
 8015f72:	68c0      	ldr	r0, [r0, #12]
 8015f74:	3010      	adds	r0, #16
 8015f76:	bd08      	pop	{r3, pc}
 8015f78:	2000e840 	.word	0x2000e840

08015f7c <rmw_destroy_wait_set>:
 8015f7c:	b508      	push	{r3, lr}
 8015f7e:	4b08      	ldr	r3, [pc, #32]	; (8015fa0 <rmw_destroy_wait_set+0x24>)
 8015f80:	6819      	ldr	r1, [r3, #0]
 8015f82:	b911      	cbnz	r1, 8015f8a <rmw_destroy_wait_set+0xe>
 8015f84:	e00a      	b.n	8015f9c <rmw_destroy_wait_set+0x20>
 8015f86:	6889      	ldr	r1, [r1, #8]
 8015f88:	b141      	cbz	r1, 8015f9c <rmw_destroy_wait_set+0x20>
 8015f8a:	68cb      	ldr	r3, [r1, #12]
 8015f8c:	3310      	adds	r3, #16
 8015f8e:	4298      	cmp	r0, r3
 8015f90:	d1f9      	bne.n	8015f86 <rmw_destroy_wait_set+0xa>
 8015f92:	4803      	ldr	r0, [pc, #12]	; (8015fa0 <rmw_destroy_wait_set+0x24>)
 8015f94:	f7ff f8cc 	bl	8015130 <put_memory>
 8015f98:	2000      	movs	r0, #0
 8015f9a:	bd08      	pop	{r3, pc}
 8015f9c:	2001      	movs	r0, #1
 8015f9e:	bd08      	pop	{r3, pc}
 8015fa0:	2000e840 	.word	0x2000e840

08015fa4 <rmw_uros_epoch_nanos>:
 8015fa4:	4b05      	ldr	r3, [pc, #20]	; (8015fbc <rmw_uros_epoch_nanos+0x18>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	b123      	cbz	r3, 8015fb4 <rmw_uros_epoch_nanos+0x10>
 8015faa:	68d8      	ldr	r0, [r3, #12]
 8015fac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015fb0:	f7fa ba14 	b.w	80103dc <uxr_epoch_nanos>
 8015fb4:	2000      	movs	r0, #0
 8015fb6:	2100      	movs	r1, #0
 8015fb8:	4770      	bx	lr
 8015fba:	bf00      	nop
 8015fbc:	2000d068 	.word	0x2000d068

08015fc0 <ucdr_serialize_endian_array_char>:
 8015fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fc4:	4619      	mov	r1, r3
 8015fc6:	461e      	mov	r6, r3
 8015fc8:	4690      	mov	r8, r2
 8015fca:	4604      	mov	r4, r0
 8015fcc:	f7f9 fcda 	bl	800f984 <ucdr_check_buffer_available_for>
 8015fd0:	b9e0      	cbnz	r0, 801600c <ucdr_serialize_endian_array_char+0x4c>
 8015fd2:	4637      	mov	r7, r6
 8015fd4:	e009      	b.n	8015fea <ucdr_serialize_endian_array_char+0x2a>
 8015fd6:	68a0      	ldr	r0, [r4, #8]
 8015fd8:	f002 fc3d 	bl	8018856 <memcpy>
 8015fdc:	68a2      	ldr	r2, [r4, #8]
 8015fde:	6923      	ldr	r3, [r4, #16]
 8015fe0:	442a      	add	r2, r5
 8015fe2:	442b      	add	r3, r5
 8015fe4:	1b7f      	subs	r7, r7, r5
 8015fe6:	60a2      	str	r2, [r4, #8]
 8015fe8:	6123      	str	r3, [r4, #16]
 8015fea:	2201      	movs	r2, #1
 8015fec:	4639      	mov	r1, r7
 8015fee:	4620      	mov	r0, r4
 8015ff0:	f7f9 fd4e 	bl	800fa90 <ucdr_check_final_buffer_behavior_array>
 8015ff4:	1bf1      	subs	r1, r6, r7
 8015ff6:	4441      	add	r1, r8
 8015ff8:	4605      	mov	r5, r0
 8015ffa:	4602      	mov	r2, r0
 8015ffc:	2800      	cmp	r0, #0
 8015ffe:	d1ea      	bne.n	8015fd6 <ucdr_serialize_endian_array_char+0x16>
 8016000:	2301      	movs	r3, #1
 8016002:	7da0      	ldrb	r0, [r4, #22]
 8016004:	7563      	strb	r3, [r4, #21]
 8016006:	4058      	eors	r0, r3
 8016008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801600c:	4632      	mov	r2, r6
 801600e:	68a0      	ldr	r0, [r4, #8]
 8016010:	4641      	mov	r1, r8
 8016012:	f002 fc20 	bl	8018856 <memcpy>
 8016016:	68a2      	ldr	r2, [r4, #8]
 8016018:	6923      	ldr	r3, [r4, #16]
 801601a:	4432      	add	r2, r6
 801601c:	4433      	add	r3, r6
 801601e:	60a2      	str	r2, [r4, #8]
 8016020:	6123      	str	r3, [r4, #16]
 8016022:	e7ed      	b.n	8016000 <ucdr_serialize_endian_array_char+0x40>

08016024 <ucdr_deserialize_endian_array_char>:
 8016024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016028:	4619      	mov	r1, r3
 801602a:	461e      	mov	r6, r3
 801602c:	4690      	mov	r8, r2
 801602e:	4604      	mov	r4, r0
 8016030:	f7f9 fca8 	bl	800f984 <ucdr_check_buffer_available_for>
 8016034:	b9e0      	cbnz	r0, 8016070 <ucdr_deserialize_endian_array_char+0x4c>
 8016036:	4637      	mov	r7, r6
 8016038:	e009      	b.n	801604e <ucdr_deserialize_endian_array_char+0x2a>
 801603a:	68a1      	ldr	r1, [r4, #8]
 801603c:	f002 fc0b 	bl	8018856 <memcpy>
 8016040:	68a2      	ldr	r2, [r4, #8]
 8016042:	6923      	ldr	r3, [r4, #16]
 8016044:	442a      	add	r2, r5
 8016046:	442b      	add	r3, r5
 8016048:	1b7f      	subs	r7, r7, r5
 801604a:	60a2      	str	r2, [r4, #8]
 801604c:	6123      	str	r3, [r4, #16]
 801604e:	2201      	movs	r2, #1
 8016050:	4639      	mov	r1, r7
 8016052:	4620      	mov	r0, r4
 8016054:	f7f9 fd1c 	bl	800fa90 <ucdr_check_final_buffer_behavior_array>
 8016058:	4605      	mov	r5, r0
 801605a:	1bf0      	subs	r0, r6, r7
 801605c:	4440      	add	r0, r8
 801605e:	462a      	mov	r2, r5
 8016060:	2d00      	cmp	r5, #0
 8016062:	d1ea      	bne.n	801603a <ucdr_deserialize_endian_array_char+0x16>
 8016064:	2301      	movs	r3, #1
 8016066:	7da0      	ldrb	r0, [r4, #22]
 8016068:	7563      	strb	r3, [r4, #21]
 801606a:	4058      	eors	r0, r3
 801606c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016070:	4632      	mov	r2, r6
 8016072:	68a1      	ldr	r1, [r4, #8]
 8016074:	4640      	mov	r0, r8
 8016076:	f002 fbee 	bl	8018856 <memcpy>
 801607a:	68a2      	ldr	r2, [r4, #8]
 801607c:	6923      	ldr	r3, [r4, #16]
 801607e:	4432      	add	r2, r6
 8016080:	4433      	add	r3, r6
 8016082:	60a2      	str	r2, [r4, #8]
 8016084:	6123      	str	r3, [r4, #16]
 8016086:	e7ed      	b.n	8016064 <ucdr_deserialize_endian_array_char+0x40>

08016088 <ucdr_serialize_array_uint8_t>:
 8016088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801608c:	4688      	mov	r8, r1
 801608e:	4611      	mov	r1, r2
 8016090:	4616      	mov	r6, r2
 8016092:	4604      	mov	r4, r0
 8016094:	f7f9 fc76 	bl	800f984 <ucdr_check_buffer_available_for>
 8016098:	b9e0      	cbnz	r0, 80160d4 <ucdr_serialize_array_uint8_t+0x4c>
 801609a:	4637      	mov	r7, r6
 801609c:	e009      	b.n	80160b2 <ucdr_serialize_array_uint8_t+0x2a>
 801609e:	68a0      	ldr	r0, [r4, #8]
 80160a0:	f002 fbd9 	bl	8018856 <memcpy>
 80160a4:	68a2      	ldr	r2, [r4, #8]
 80160a6:	6923      	ldr	r3, [r4, #16]
 80160a8:	442a      	add	r2, r5
 80160aa:	442b      	add	r3, r5
 80160ac:	1b7f      	subs	r7, r7, r5
 80160ae:	60a2      	str	r2, [r4, #8]
 80160b0:	6123      	str	r3, [r4, #16]
 80160b2:	2201      	movs	r2, #1
 80160b4:	4639      	mov	r1, r7
 80160b6:	4620      	mov	r0, r4
 80160b8:	f7f9 fcea 	bl	800fa90 <ucdr_check_final_buffer_behavior_array>
 80160bc:	1bf1      	subs	r1, r6, r7
 80160be:	4441      	add	r1, r8
 80160c0:	4605      	mov	r5, r0
 80160c2:	4602      	mov	r2, r0
 80160c4:	2800      	cmp	r0, #0
 80160c6:	d1ea      	bne.n	801609e <ucdr_serialize_array_uint8_t+0x16>
 80160c8:	2301      	movs	r3, #1
 80160ca:	7da0      	ldrb	r0, [r4, #22]
 80160cc:	7563      	strb	r3, [r4, #21]
 80160ce:	4058      	eors	r0, r3
 80160d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160d4:	4632      	mov	r2, r6
 80160d6:	68a0      	ldr	r0, [r4, #8]
 80160d8:	4641      	mov	r1, r8
 80160da:	f002 fbbc 	bl	8018856 <memcpy>
 80160de:	68a3      	ldr	r3, [r4, #8]
 80160e0:	6922      	ldr	r2, [r4, #16]
 80160e2:	4433      	add	r3, r6
 80160e4:	4432      	add	r2, r6
 80160e6:	60a3      	str	r3, [r4, #8]
 80160e8:	6122      	str	r2, [r4, #16]
 80160ea:	e7ed      	b.n	80160c8 <ucdr_serialize_array_uint8_t+0x40>

080160ec <ucdr_serialize_endian_array_uint8_t>:
 80160ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160f0:	4619      	mov	r1, r3
 80160f2:	461e      	mov	r6, r3
 80160f4:	4690      	mov	r8, r2
 80160f6:	4604      	mov	r4, r0
 80160f8:	f7f9 fc44 	bl	800f984 <ucdr_check_buffer_available_for>
 80160fc:	b9e0      	cbnz	r0, 8016138 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80160fe:	4637      	mov	r7, r6
 8016100:	e009      	b.n	8016116 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8016102:	68a0      	ldr	r0, [r4, #8]
 8016104:	f002 fba7 	bl	8018856 <memcpy>
 8016108:	68a2      	ldr	r2, [r4, #8]
 801610a:	6923      	ldr	r3, [r4, #16]
 801610c:	442a      	add	r2, r5
 801610e:	442b      	add	r3, r5
 8016110:	1b7f      	subs	r7, r7, r5
 8016112:	60a2      	str	r2, [r4, #8]
 8016114:	6123      	str	r3, [r4, #16]
 8016116:	2201      	movs	r2, #1
 8016118:	4639      	mov	r1, r7
 801611a:	4620      	mov	r0, r4
 801611c:	f7f9 fcb8 	bl	800fa90 <ucdr_check_final_buffer_behavior_array>
 8016120:	1bf1      	subs	r1, r6, r7
 8016122:	4441      	add	r1, r8
 8016124:	4605      	mov	r5, r0
 8016126:	4602      	mov	r2, r0
 8016128:	2800      	cmp	r0, #0
 801612a:	d1ea      	bne.n	8016102 <ucdr_serialize_endian_array_uint8_t+0x16>
 801612c:	2301      	movs	r3, #1
 801612e:	7da0      	ldrb	r0, [r4, #22]
 8016130:	7563      	strb	r3, [r4, #21]
 8016132:	4058      	eors	r0, r3
 8016134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016138:	4632      	mov	r2, r6
 801613a:	68a0      	ldr	r0, [r4, #8]
 801613c:	4641      	mov	r1, r8
 801613e:	f002 fb8a 	bl	8018856 <memcpy>
 8016142:	68a2      	ldr	r2, [r4, #8]
 8016144:	6923      	ldr	r3, [r4, #16]
 8016146:	4432      	add	r2, r6
 8016148:	4433      	add	r3, r6
 801614a:	60a2      	str	r2, [r4, #8]
 801614c:	6123      	str	r3, [r4, #16]
 801614e:	e7ed      	b.n	801612c <ucdr_serialize_endian_array_uint8_t+0x40>

08016150 <ucdr_deserialize_array_uint8_t>:
 8016150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016154:	4688      	mov	r8, r1
 8016156:	4611      	mov	r1, r2
 8016158:	4616      	mov	r6, r2
 801615a:	4604      	mov	r4, r0
 801615c:	f7f9 fc12 	bl	800f984 <ucdr_check_buffer_available_for>
 8016160:	b9e0      	cbnz	r0, 801619c <ucdr_deserialize_array_uint8_t+0x4c>
 8016162:	4637      	mov	r7, r6
 8016164:	e009      	b.n	801617a <ucdr_deserialize_array_uint8_t+0x2a>
 8016166:	68a1      	ldr	r1, [r4, #8]
 8016168:	f002 fb75 	bl	8018856 <memcpy>
 801616c:	68a2      	ldr	r2, [r4, #8]
 801616e:	6923      	ldr	r3, [r4, #16]
 8016170:	442a      	add	r2, r5
 8016172:	442b      	add	r3, r5
 8016174:	1b7f      	subs	r7, r7, r5
 8016176:	60a2      	str	r2, [r4, #8]
 8016178:	6123      	str	r3, [r4, #16]
 801617a:	2201      	movs	r2, #1
 801617c:	4639      	mov	r1, r7
 801617e:	4620      	mov	r0, r4
 8016180:	f7f9 fc86 	bl	800fa90 <ucdr_check_final_buffer_behavior_array>
 8016184:	4605      	mov	r5, r0
 8016186:	1bf0      	subs	r0, r6, r7
 8016188:	4440      	add	r0, r8
 801618a:	462a      	mov	r2, r5
 801618c:	2d00      	cmp	r5, #0
 801618e:	d1ea      	bne.n	8016166 <ucdr_deserialize_array_uint8_t+0x16>
 8016190:	2301      	movs	r3, #1
 8016192:	7da0      	ldrb	r0, [r4, #22]
 8016194:	7563      	strb	r3, [r4, #21]
 8016196:	4058      	eors	r0, r3
 8016198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801619c:	4632      	mov	r2, r6
 801619e:	68a1      	ldr	r1, [r4, #8]
 80161a0:	4640      	mov	r0, r8
 80161a2:	f002 fb58 	bl	8018856 <memcpy>
 80161a6:	68a3      	ldr	r3, [r4, #8]
 80161a8:	6922      	ldr	r2, [r4, #16]
 80161aa:	4433      	add	r3, r6
 80161ac:	4432      	add	r2, r6
 80161ae:	60a3      	str	r3, [r4, #8]
 80161b0:	6122      	str	r2, [r4, #16]
 80161b2:	e7ed      	b.n	8016190 <ucdr_deserialize_array_uint8_t+0x40>

080161b4 <ucdr_deserialize_endian_array_uint8_t>:
 80161b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161b8:	4619      	mov	r1, r3
 80161ba:	461e      	mov	r6, r3
 80161bc:	4690      	mov	r8, r2
 80161be:	4604      	mov	r4, r0
 80161c0:	f7f9 fbe0 	bl	800f984 <ucdr_check_buffer_available_for>
 80161c4:	b9e0      	cbnz	r0, 8016200 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80161c6:	4637      	mov	r7, r6
 80161c8:	e009      	b.n	80161de <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80161ca:	68a1      	ldr	r1, [r4, #8]
 80161cc:	f002 fb43 	bl	8018856 <memcpy>
 80161d0:	68a2      	ldr	r2, [r4, #8]
 80161d2:	6923      	ldr	r3, [r4, #16]
 80161d4:	442a      	add	r2, r5
 80161d6:	442b      	add	r3, r5
 80161d8:	1b7f      	subs	r7, r7, r5
 80161da:	60a2      	str	r2, [r4, #8]
 80161dc:	6123      	str	r3, [r4, #16]
 80161de:	2201      	movs	r2, #1
 80161e0:	4639      	mov	r1, r7
 80161e2:	4620      	mov	r0, r4
 80161e4:	f7f9 fc54 	bl	800fa90 <ucdr_check_final_buffer_behavior_array>
 80161e8:	4605      	mov	r5, r0
 80161ea:	1bf0      	subs	r0, r6, r7
 80161ec:	4440      	add	r0, r8
 80161ee:	462a      	mov	r2, r5
 80161f0:	2d00      	cmp	r5, #0
 80161f2:	d1ea      	bne.n	80161ca <ucdr_deserialize_endian_array_uint8_t+0x16>
 80161f4:	2301      	movs	r3, #1
 80161f6:	7da0      	ldrb	r0, [r4, #22]
 80161f8:	7563      	strb	r3, [r4, #21]
 80161fa:	4058      	eors	r0, r3
 80161fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016200:	4632      	mov	r2, r6
 8016202:	68a1      	ldr	r1, [r4, #8]
 8016204:	4640      	mov	r0, r8
 8016206:	f002 fb26 	bl	8018856 <memcpy>
 801620a:	68a2      	ldr	r2, [r4, #8]
 801620c:	6923      	ldr	r3, [r4, #16]
 801620e:	4432      	add	r2, r6
 8016210:	4433      	add	r3, r6
 8016212:	60a2      	str	r2, [r4, #8]
 8016214:	6123      	str	r3, [r4, #16]
 8016216:	e7ed      	b.n	80161f4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08016218 <ucdr_serialize_sequence_char>:
 8016218:	b570      	push	{r4, r5, r6, lr}
 801621a:	460e      	mov	r6, r1
 801621c:	4615      	mov	r5, r2
 801621e:	7d01      	ldrb	r1, [r0, #20]
 8016220:	4604      	mov	r4, r0
 8016222:	f7f8 ff05 	bl	800f030 <ucdr_serialize_endian_uint32_t>
 8016226:	b90d      	cbnz	r5, 801622c <ucdr_serialize_sequence_char+0x14>
 8016228:	2001      	movs	r0, #1
 801622a:	bd70      	pop	{r4, r5, r6, pc}
 801622c:	7d21      	ldrb	r1, [r4, #20]
 801622e:	462b      	mov	r3, r5
 8016230:	4632      	mov	r2, r6
 8016232:	4620      	mov	r0, r4
 8016234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016238:	f7ff bec2 	b.w	8015fc0 <ucdr_serialize_endian_array_char>

0801623c <ucdr_deserialize_sequence_char>:
 801623c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016240:	461d      	mov	r5, r3
 8016242:	4616      	mov	r6, r2
 8016244:	460f      	mov	r7, r1
 8016246:	461a      	mov	r2, r3
 8016248:	7d01      	ldrb	r1, [r0, #20]
 801624a:	4604      	mov	r4, r0
 801624c:	f7f9 f818 	bl	800f280 <ucdr_deserialize_endian_uint32_t>
 8016250:	682b      	ldr	r3, [r5, #0]
 8016252:	429e      	cmp	r6, r3
 8016254:	bf3c      	itt	cc
 8016256:	2201      	movcc	r2, #1
 8016258:	75a2      	strbcc	r2, [r4, #22]
 801625a:	b913      	cbnz	r3, 8016262 <ucdr_deserialize_sequence_char+0x26>
 801625c:	2001      	movs	r0, #1
 801625e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016262:	7d21      	ldrb	r1, [r4, #20]
 8016264:	463a      	mov	r2, r7
 8016266:	4620      	mov	r0, r4
 8016268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801626c:	f7ff beda 	b.w	8016024 <ucdr_deserialize_endian_array_char>

08016270 <ucdr_serialize_sequence_uint8_t>:
 8016270:	b570      	push	{r4, r5, r6, lr}
 8016272:	460e      	mov	r6, r1
 8016274:	4615      	mov	r5, r2
 8016276:	7d01      	ldrb	r1, [r0, #20]
 8016278:	4604      	mov	r4, r0
 801627a:	f7f8 fed9 	bl	800f030 <ucdr_serialize_endian_uint32_t>
 801627e:	b90d      	cbnz	r5, 8016284 <ucdr_serialize_sequence_uint8_t+0x14>
 8016280:	2001      	movs	r0, #1
 8016282:	bd70      	pop	{r4, r5, r6, pc}
 8016284:	7d21      	ldrb	r1, [r4, #20]
 8016286:	462b      	mov	r3, r5
 8016288:	4632      	mov	r2, r6
 801628a:	4620      	mov	r0, r4
 801628c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016290:	f7ff bf2c 	b.w	80160ec <ucdr_serialize_endian_array_uint8_t>

08016294 <ucdr_deserialize_sequence_uint8_t>:
 8016294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016298:	461d      	mov	r5, r3
 801629a:	4616      	mov	r6, r2
 801629c:	460f      	mov	r7, r1
 801629e:	461a      	mov	r2, r3
 80162a0:	7d01      	ldrb	r1, [r0, #20]
 80162a2:	4604      	mov	r4, r0
 80162a4:	f7f8 ffec 	bl	800f280 <ucdr_deserialize_endian_uint32_t>
 80162a8:	682b      	ldr	r3, [r5, #0]
 80162aa:	429e      	cmp	r6, r3
 80162ac:	bf3c      	itt	cc
 80162ae:	2201      	movcc	r2, #1
 80162b0:	75a2      	strbcc	r2, [r4, #22]
 80162b2:	b913      	cbnz	r3, 80162ba <ucdr_deserialize_sequence_uint8_t+0x26>
 80162b4:	2001      	movs	r0, #1
 80162b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ba:	7d21      	ldrb	r1, [r4, #20]
 80162bc:	463a      	mov	r2, r7
 80162be:	4620      	mov	r0, r4
 80162c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162c4:	f7ff bf76 	b.w	80161b4 <ucdr_deserialize_endian_array_uint8_t>

080162c8 <ucdr_serialize_string>:
 80162c8:	b510      	push	{r4, lr}
 80162ca:	b082      	sub	sp, #8
 80162cc:	4604      	mov	r4, r0
 80162ce:	4608      	mov	r0, r1
 80162d0:	9101      	str	r1, [sp, #4]
 80162d2:	f7e9 ff8f 	bl	80001f4 <strlen>
 80162d6:	9901      	ldr	r1, [sp, #4]
 80162d8:	4602      	mov	r2, r0
 80162da:	3201      	adds	r2, #1
 80162dc:	4620      	mov	r0, r4
 80162de:	b002      	add	sp, #8
 80162e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162e4:	f7ff bf98 	b.w	8016218 <ucdr_serialize_sequence_char>

080162e8 <ucdr_deserialize_string>:
 80162e8:	b500      	push	{lr}
 80162ea:	b083      	sub	sp, #12
 80162ec:	ab01      	add	r3, sp, #4
 80162ee:	f7ff ffa5 	bl	801623c <ucdr_deserialize_sequence_char>
 80162f2:	b003      	add	sp, #12
 80162f4:	f85d fb04 	ldr.w	pc, [sp], #4

080162f8 <get_custom_error>:
 80162f8:	4b01      	ldr	r3, [pc, #4]	; (8016300 <get_custom_error+0x8>)
 80162fa:	7818      	ldrb	r0, [r3, #0]
 80162fc:	4770      	bx	lr
 80162fe:	bf00      	nop
 8016300:	20009d20 	.word	0x20009d20

08016304 <recv_custom_msg>:
 8016304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016308:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801630c:	b089      	sub	sp, #36	; 0x24
 801630e:	2600      	movs	r6, #0
 8016310:	4604      	mov	r4, r0
 8016312:	9305      	str	r3, [sp, #20]
 8016314:	468a      	mov	sl, r1
 8016316:	4693      	mov	fp, r2
 8016318:	f88d 601e 	strb.w	r6, [sp, #30]
 801631c:	b325      	cbz	r5, 8016368 <recv_custom_msg+0x64>
 801631e:	f200 2902 	addw	r9, r0, #514	; 0x202
 8016322:	f10d 081f 	add.w	r8, sp, #31
 8016326:	af05      	add	r7, sp, #20
 8016328:	f10d 061e 	add.w	r6, sp, #30
 801632c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8016330:	e002      	b.n	8016338 <recv_custom_msg+0x34>
 8016332:	9b05      	ldr	r3, [sp, #20]
 8016334:	2b00      	cmp	r3, #0
 8016336:	dd0f      	ble.n	8016358 <recv_custom_msg+0x54>
 8016338:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801633c:	e9cd 5600 	strd	r5, r6, [sp]
 8016340:	4623      	mov	r3, r4
 8016342:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8016346:	4622      	mov	r2, r4
 8016348:	4648      	mov	r0, r9
 801634a:	f000 ffc9 	bl	80172e0 <uxr_read_framed_msg>
 801634e:	2800      	cmp	r0, #0
 8016350:	d0ef      	beq.n	8016332 <recv_custom_msg+0x2e>
 8016352:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016356:	b1b3      	cbz	r3, 8016386 <recv_custom_msg+0x82>
 8016358:	4b0f      	ldr	r3, [pc, #60]	; (8016398 <recv_custom_msg+0x94>)
 801635a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801635e:	701a      	strb	r2, [r3, #0]
 8016360:	2000      	movs	r0, #0
 8016362:	b009      	add	sp, #36	; 0x24
 8016364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016368:	f10d 021f 	add.w	r2, sp, #31
 801636c:	9200      	str	r2, [sp, #0]
 801636e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8016372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016376:	4601      	mov	r1, r0
 8016378:	47a8      	blx	r5
 801637a:	2800      	cmp	r0, #0
 801637c:	d0ec      	beq.n	8016358 <recv_custom_msg+0x54>
 801637e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d1e8      	bne.n	8016358 <recv_custom_msg+0x54>
 8016386:	f8cb 0000 	str.w	r0, [fp]
 801638a:	2001      	movs	r0, #1
 801638c:	f8ca 4000 	str.w	r4, [sl]
 8016390:	b009      	add	sp, #36	; 0x24
 8016392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016396:	bf00      	nop
 8016398:	20009d20 	.word	0x20009d20

0801639c <send_custom_msg>:
 801639c:	b570      	push	{r4, r5, r6, lr}
 801639e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80163a2:	b086      	sub	sp, #24
 80163a4:	4616      	mov	r6, r2
 80163a6:	b975      	cbnz	r5, 80163c6 <send_custom_msg+0x2a>
 80163a8:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 80163ac:	f10d 0317 	add.w	r3, sp, #23
 80163b0:	47a0      	blx	r4
 80163b2:	b108      	cbz	r0, 80163b8 <send_custom_msg+0x1c>
 80163b4:	42b0      	cmp	r0, r6
 80163b6:	d015      	beq.n	80163e4 <send_custom_msg+0x48>
 80163b8:	4b0c      	ldr	r3, [pc, #48]	; (80163ec <send_custom_msg+0x50>)
 80163ba:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80163be:	701a      	strb	r2, [r3, #0]
 80163c0:	2000      	movs	r0, #0
 80163c2:	b006      	add	sp, #24
 80163c4:	bd70      	pop	{r4, r5, r6, pc}
 80163c6:	460b      	mov	r3, r1
 80163c8:	2200      	movs	r2, #0
 80163ca:	f10d 0117 	add.w	r1, sp, #23
 80163ce:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80163d2:	9600      	str	r6, [sp, #0]
 80163d4:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80163d8:	4602      	mov	r2, r0
 80163da:	f200 2002 	addw	r0, r0, #514	; 0x202
 80163de:	f000 fd97 	bl	8016f10 <uxr_write_framed_msg>
 80163e2:	e7e6      	b.n	80163b2 <send_custom_msg+0x16>
 80163e4:	2001      	movs	r0, #1
 80163e6:	b006      	add	sp, #24
 80163e8:	bd70      	pop	{r4, r5, r6, pc}
 80163ea:	bf00      	nop
 80163ec:	20009d20 	.word	0x20009d20

080163f0 <uxr_set_custom_transport_callbacks>:
 80163f0:	b430      	push	{r4, r5}
 80163f2:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80163f6:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80163fa:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 80163fe:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8016402:	bc30      	pop	{r4, r5}
 8016404:	4770      	bx	lr
 8016406:	bf00      	nop

08016408 <uxr_init_custom_transport>:
 8016408:	b538      	push	{r3, r4, r5, lr}
 801640a:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801640e:	b303      	cbz	r3, 8016452 <uxr_init_custom_transport+0x4a>
 8016410:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8016414:	4604      	mov	r4, r0
 8016416:	b1e2      	cbz	r2, 8016452 <uxr_init_custom_transport+0x4a>
 8016418:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 801641c:	b1ca      	cbz	r2, 8016452 <uxr_init_custom_transport+0x4a>
 801641e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8016422:	b1b2      	cbz	r2, 8016452 <uxr_init_custom_transport+0x4a>
 8016424:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8016428:	4798      	blx	r3
 801642a:	4605      	mov	r5, r0
 801642c:	b188      	cbz	r0, 8016452 <uxr_init_custom_transport+0x4a>
 801642e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8016432:	b98b      	cbnz	r3, 8016458 <uxr_init_custom_transport+0x50>
 8016434:	480b      	ldr	r0, [pc, #44]	; (8016464 <uxr_init_custom_transport+0x5c>)
 8016436:	490c      	ldr	r1, [pc, #48]	; (8016468 <uxr_init_custom_transport+0x60>)
 8016438:	4a0c      	ldr	r2, [pc, #48]	; (801646c <uxr_init_custom_transport+0x64>)
 801643a:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 801643e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016442:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 8016446:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801644a:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801644e:	4628      	mov	r0, r5
 8016450:	bd38      	pop	{r3, r4, r5, pc}
 8016452:	2500      	movs	r5, #0
 8016454:	4628      	mov	r0, r5
 8016456:	bd38      	pop	{r3, r4, r5, pc}
 8016458:	2100      	movs	r1, #0
 801645a:	f204 2002 	addw	r0, r4, #514	; 0x202
 801645e:	f000 fd51 	bl	8016f04 <uxr_init_framing_io>
 8016462:	e7e7      	b.n	8016434 <uxr_init_custom_transport+0x2c>
 8016464:	0801639d 	.word	0x0801639d
 8016468:	08016305 	.word	0x08016305
 801646c:	080162f9 	.word	0x080162f9

08016470 <uxr_close_custom_transport>:
 8016470:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8016474:	4718      	bx	r3
 8016476:	bf00      	nop

08016478 <uxr_init_input_best_effort_stream>:
 8016478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801647c:	8003      	strh	r3, [r0, #0]
 801647e:	4770      	bx	lr

08016480 <uxr_reset_input_best_effort_stream>:
 8016480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016484:	8003      	strh	r3, [r0, #0]
 8016486:	4770      	bx	lr

08016488 <uxr_receive_best_effort_message>:
 8016488:	b538      	push	{r3, r4, r5, lr}
 801648a:	4604      	mov	r4, r0
 801648c:	8800      	ldrh	r0, [r0, #0]
 801648e:	460d      	mov	r5, r1
 8016490:	f000 fd20 	bl	8016ed4 <uxr_seq_num_cmp>
 8016494:	4603      	mov	r3, r0
 8016496:	2b00      	cmp	r3, #0
 8016498:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801649c:	bfb8      	it	lt
 801649e:	8025      	strhlt	r5, [r4, #0]
 80164a0:	bd38      	pop	{r3, r4, r5, pc}
 80164a2:	bf00      	nop

080164a4 <on_full_input_buffer>:
 80164a4:	b570      	push	{r4, r5, r6, lr}
 80164a6:	6802      	ldr	r2, [r0, #0]
 80164a8:	460d      	mov	r5, r1
 80164aa:	6809      	ldr	r1, [r1, #0]
 80164ac:	686c      	ldr	r4, [r5, #4]
 80164ae:	1a53      	subs	r3, r2, r1
 80164b0:	4606      	mov	r6, r0
 80164b2:	8928      	ldrh	r0, [r5, #8]
 80164b4:	fbb4 f4f0 	udiv	r4, r4, r0
 80164b8:	fbb3 f3f4 	udiv	r3, r3, r4
 80164bc:	3301      	adds	r3, #1
 80164be:	b29b      	uxth	r3, r3
 80164c0:	fbb3 f2f0 	udiv	r2, r3, r0
 80164c4:	fb00 3312 	mls	r3, r0, r2, r3
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	fb04 f403 	mul.w	r4, r4, r3
 80164ce:	1d23      	adds	r3, r4, #4
 80164d0:	440b      	add	r3, r1
 80164d2:	7d28      	ldrb	r0, [r5, #20]
 80164d4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80164d8:	b110      	cbz	r0, 80164e0 <on_full_input_buffer+0x3c>
 80164da:	2000      	movs	r0, #0
 80164dc:	f843 0c04 	str.w	r0, [r3, #-4]
 80164e0:	2a03      	cmp	r2, #3
 80164e2:	d801      	bhi.n	80164e8 <on_full_input_buffer+0x44>
 80164e4:	2001      	movs	r0, #1
 80164e6:	bd70      	pop	{r4, r5, r6, pc}
 80164e8:	3408      	adds	r4, #8
 80164ea:	6933      	ldr	r3, [r6, #16]
 80164ec:	4421      	add	r1, r4
 80164ee:	4630      	mov	r0, r6
 80164f0:	3a04      	subs	r2, #4
 80164f2:	f7f9 fa91 	bl	800fa18 <ucdr_init_buffer_origin>
 80164f6:	4630      	mov	r0, r6
 80164f8:	4902      	ldr	r1, [pc, #8]	; (8016504 <on_full_input_buffer+0x60>)
 80164fa:	462a      	mov	r2, r5
 80164fc:	f7f9 fa6a 	bl	800f9d4 <ucdr_set_on_full_buffer_callback>
 8016500:	2000      	movs	r0, #0
 8016502:	bd70      	pop	{r4, r5, r6, pc}
 8016504:	080164a5 	.word	0x080164a5

08016508 <uxr_init_input_reliable_stream>:
 8016508:	b470      	push	{r4, r5, r6}
 801650a:	9c03      	ldr	r4, [sp, #12]
 801650c:	6001      	str	r1, [r0, #0]
 801650e:	2600      	movs	r6, #0
 8016510:	8103      	strh	r3, [r0, #8]
 8016512:	6042      	str	r2, [r0, #4]
 8016514:	6104      	str	r4, [r0, #16]
 8016516:	7506      	strb	r6, [r0, #20]
 8016518:	b1ab      	cbz	r3, 8016546 <uxr_init_input_reliable_stream+0x3e>
 801651a:	600e      	str	r6, [r1, #0]
 801651c:	8901      	ldrh	r1, [r0, #8]
 801651e:	2901      	cmp	r1, #1
 8016520:	d911      	bls.n	8016546 <uxr_init_input_reliable_stream+0x3e>
 8016522:	2201      	movs	r2, #1
 8016524:	e9d0 5400 	ldrd	r5, r4, [r0]
 8016528:	fbb2 f3f1 	udiv	r3, r2, r1
 801652c:	fb01 2313 	mls	r3, r1, r3, r2
 8016530:	b29b      	uxth	r3, r3
 8016532:	fbb4 f1f1 	udiv	r1, r4, r1
 8016536:	fb03 f301 	mul.w	r3, r3, r1
 801653a:	3201      	adds	r2, #1
 801653c:	50ee      	str	r6, [r5, r3]
 801653e:	8901      	ldrh	r1, [r0, #8]
 8016540:	b292      	uxth	r2, r2
 8016542:	4291      	cmp	r1, r2
 8016544:	d8ee      	bhi.n	8016524 <uxr_init_input_reliable_stream+0x1c>
 8016546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801654a:	bc70      	pop	{r4, r5, r6}
 801654c:	60c3      	str	r3, [r0, #12]
 801654e:	4770      	bx	lr

08016550 <uxr_reset_input_reliable_stream>:
 8016550:	8902      	ldrh	r2, [r0, #8]
 8016552:	b1ca      	cbz	r2, 8016588 <uxr_reset_input_reliable_stream+0x38>
 8016554:	b470      	push	{r4, r5, r6}
 8016556:	2400      	movs	r4, #0
 8016558:	4621      	mov	r1, r4
 801655a:	4626      	mov	r6, r4
 801655c:	fbb1 f3f2 	udiv	r3, r1, r2
 8016560:	fb02 1313 	mls	r3, r2, r3, r1
 8016564:	e9d0 5100 	ldrd	r5, r1, [r0]
 8016568:	b29b      	uxth	r3, r3
 801656a:	fbb1 f2f2 	udiv	r2, r1, r2
 801656e:	fb03 f302 	mul.w	r3, r3, r2
 8016572:	3401      	adds	r4, #1
 8016574:	50ee      	str	r6, [r5, r3]
 8016576:	8902      	ldrh	r2, [r0, #8]
 8016578:	b2a1      	uxth	r1, r4
 801657a:	428a      	cmp	r2, r1
 801657c:	d8ee      	bhi.n	801655c <uxr_reset_input_reliable_stream+0xc>
 801657e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016582:	bc70      	pop	{r4, r5, r6}
 8016584:	60c3      	str	r3, [r0, #12]
 8016586:	4770      	bx	lr
 8016588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801658c:	60c3      	str	r3, [r0, #12]
 801658e:	4770      	bx	lr

08016590 <uxr_receive_reliable_message>:
 8016590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016594:	4604      	mov	r4, r0
 8016596:	460d      	mov	r5, r1
 8016598:	8901      	ldrh	r1, [r0, #8]
 801659a:	8980      	ldrh	r0, [r0, #12]
 801659c:	4690      	mov	r8, r2
 801659e:	461f      	mov	r7, r3
 80165a0:	f000 fc90 	bl	8016ec4 <uxr_seq_num_add>
 80165a4:	4629      	mov	r1, r5
 80165a6:	4606      	mov	r6, r0
 80165a8:	89a0      	ldrh	r0, [r4, #12]
 80165aa:	f000 fc93 	bl	8016ed4 <uxr_seq_num_cmp>
 80165ae:	2800      	cmp	r0, #0
 80165b0:	db0a      	blt.n	80165c8 <uxr_receive_reliable_message+0x38>
 80165b2:	2600      	movs	r6, #0
 80165b4:	89e0      	ldrh	r0, [r4, #14]
 80165b6:	4629      	mov	r1, r5
 80165b8:	f000 fc8c 	bl	8016ed4 <uxr_seq_num_cmp>
 80165bc:	2800      	cmp	r0, #0
 80165be:	bfb8      	it	lt
 80165c0:	81e5      	strhlt	r5, [r4, #14]
 80165c2:	4630      	mov	r0, r6
 80165c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165c8:	4630      	mov	r0, r6
 80165ca:	4629      	mov	r1, r5
 80165cc:	f000 fc82 	bl	8016ed4 <uxr_seq_num_cmp>
 80165d0:	2800      	cmp	r0, #0
 80165d2:	dbee      	blt.n	80165b2 <uxr_receive_reliable_message+0x22>
 80165d4:	6923      	ldr	r3, [r4, #16]
 80165d6:	4640      	mov	r0, r8
 80165d8:	4798      	blx	r3
 80165da:	2101      	movs	r1, #1
 80165dc:	4681      	mov	r9, r0
 80165de:	89a0      	ldrh	r0, [r4, #12]
 80165e0:	f000 fc70 	bl	8016ec4 <uxr_seq_num_add>
 80165e4:	f1b9 0f00 	cmp.w	r9, #0
 80165e8:	d101      	bne.n	80165ee <uxr_receive_reliable_message+0x5e>
 80165ea:	4285      	cmp	r5, r0
 80165ec:	d049      	beq.n	8016682 <uxr_receive_reliable_message+0xf2>
 80165ee:	8921      	ldrh	r1, [r4, #8]
 80165f0:	fbb5 f3f1 	udiv	r3, r5, r1
 80165f4:	fb01 5313 	mls	r3, r1, r3, r5
 80165f8:	b29b      	uxth	r3, r3
 80165fa:	6862      	ldr	r2, [r4, #4]
 80165fc:	6820      	ldr	r0, [r4, #0]
 80165fe:	fbb2 f2f1 	udiv	r2, r2, r1
 8016602:	fb03 f302 	mul.w	r3, r3, r2
 8016606:	3304      	adds	r3, #4
 8016608:	4418      	add	r0, r3
 801660a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d1cf      	bne.n	80165b2 <uxr_receive_reliable_message+0x22>
 8016612:	4641      	mov	r1, r8
 8016614:	463a      	mov	r2, r7
 8016616:	f002 f91e 	bl	8018856 <memcpy>
 801661a:	8921      	ldrh	r1, [r4, #8]
 801661c:	fbb5 f3f1 	udiv	r3, r5, r1
 8016620:	fb01 5313 	mls	r3, r1, r3, r5
 8016624:	b29b      	uxth	r3, r3
 8016626:	6862      	ldr	r2, [r4, #4]
 8016628:	fbb2 f2f1 	udiv	r2, r2, r1
 801662c:	6821      	ldr	r1, [r4, #0]
 801662e:	fb03 f302 	mul.w	r3, r3, r2
 8016632:	2201      	movs	r2, #1
 8016634:	50cf      	str	r7, [r1, r3]
 8016636:	9b08      	ldr	r3, [sp, #32]
 8016638:	701a      	strb	r2, [r3, #0]
 801663a:	f1b9 0f00 	cmp.w	r9, #0
 801663e:	d0b8      	beq.n	80165b2 <uxr_receive_reliable_message+0x22>
 8016640:	89a6      	ldrh	r6, [r4, #12]
 8016642:	e001      	b.n	8016648 <uxr_receive_reliable_message+0xb8>
 8016644:	2801      	cmp	r0, #1
 8016646:	d1b4      	bne.n	80165b2 <uxr_receive_reliable_message+0x22>
 8016648:	4630      	mov	r0, r6
 801664a:	2101      	movs	r1, #1
 801664c:	f000 fc3a 	bl	8016ec4 <uxr_seq_num_add>
 8016650:	8921      	ldrh	r1, [r4, #8]
 8016652:	fbb0 f3f1 	udiv	r3, r0, r1
 8016656:	fb01 0313 	mls	r3, r1, r3, r0
 801665a:	b29b      	uxth	r3, r3
 801665c:	6862      	ldr	r2, [r4, #4]
 801665e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016662:	4606      	mov	r6, r0
 8016664:	fb03 f302 	mul.w	r3, r3, r2
 8016668:	6820      	ldr	r0, [r4, #0]
 801666a:	3304      	adds	r3, #4
 801666c:	4418      	add	r0, r3
 801666e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d09d      	beq.n	80165b2 <uxr_receive_reliable_message+0x22>
 8016676:	6923      	ldr	r3, [r4, #16]
 8016678:	4798      	blx	r3
 801667a:	2802      	cmp	r0, #2
 801667c:	d1e2      	bne.n	8016644 <uxr_receive_reliable_message+0xb4>
 801667e:	2601      	movs	r6, #1
 8016680:	e798      	b.n	80165b4 <uxr_receive_reliable_message+0x24>
 8016682:	9b08      	ldr	r3, [sp, #32]
 8016684:	81a5      	strh	r5, [r4, #12]
 8016686:	2601      	movs	r6, #1
 8016688:	f883 9000 	strb.w	r9, [r3]
 801668c:	e792      	b.n	80165b4 <uxr_receive_reliable_message+0x24>
 801668e:	bf00      	nop

08016690 <uxr_next_input_reliable_buffer_available>:
 8016690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016694:	4604      	mov	r4, r0
 8016696:	460e      	mov	r6, r1
 8016698:	8980      	ldrh	r0, [r0, #12]
 801669a:	2101      	movs	r1, #1
 801669c:	4617      	mov	r7, r2
 801669e:	f000 fc11 	bl	8016ec4 <uxr_seq_num_add>
 80166a2:	8921      	ldrh	r1, [r4, #8]
 80166a4:	fbb0 f3f1 	udiv	r3, r0, r1
 80166a8:	fb01 0313 	mls	r3, r1, r3, r0
 80166ac:	b29b      	uxth	r3, r3
 80166ae:	6862      	ldr	r2, [r4, #4]
 80166b0:	fbb2 f2f1 	udiv	r2, r2, r1
 80166b4:	fb03 f302 	mul.w	r3, r3, r2
 80166b8:	6822      	ldr	r2, [r4, #0]
 80166ba:	3304      	adds	r3, #4
 80166bc:	eb02 0803 	add.w	r8, r2, r3
 80166c0:	f858 9c04 	ldr.w	r9, [r8, #-4]
 80166c4:	f1b9 0f00 	cmp.w	r9, #0
 80166c8:	d025      	beq.n	8016716 <uxr_next_input_reliable_buffer_available+0x86>
 80166ca:	6923      	ldr	r3, [r4, #16]
 80166cc:	4605      	mov	r5, r0
 80166ce:	4640      	mov	r0, r8
 80166d0:	4798      	blx	r3
 80166d2:	4682      	mov	sl, r0
 80166d4:	b310      	cbz	r0, 801671c <uxr_next_input_reliable_buffer_available+0x8c>
 80166d6:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80166da:	e005      	b.n	80166e8 <uxr_next_input_reliable_buffer_available+0x58>
 80166dc:	6923      	ldr	r3, [r4, #16]
 80166de:	4798      	blx	r3
 80166e0:	2802      	cmp	r0, #2
 80166e2:	d032      	beq.n	801674a <uxr_next_input_reliable_buffer_available+0xba>
 80166e4:	2801      	cmp	r0, #1
 80166e6:	d116      	bne.n	8016716 <uxr_next_input_reliable_buffer_available+0x86>
 80166e8:	4650      	mov	r0, sl
 80166ea:	2101      	movs	r1, #1
 80166ec:	f000 fbea 	bl	8016ec4 <uxr_seq_num_add>
 80166f0:	8921      	ldrh	r1, [r4, #8]
 80166f2:	fbb0 f3f1 	udiv	r3, r0, r1
 80166f6:	fb01 0313 	mls	r3, r1, r3, r0
 80166fa:	b29b      	uxth	r3, r3
 80166fc:	6862      	ldr	r2, [r4, #4]
 80166fe:	fbb2 f2f1 	udiv	r2, r2, r1
 8016702:	4682      	mov	sl, r0
 8016704:	fb03 f302 	mul.w	r3, r3, r2
 8016708:	6820      	ldr	r0, [r4, #0]
 801670a:	3304      	adds	r3, #4
 801670c:	4418      	add	r0, r3
 801670e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d1e2      	bne.n	80166dc <uxr_next_input_reliable_buffer_available+0x4c>
 8016716:	2000      	movs	r0, #0
 8016718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801671c:	464a      	mov	r2, r9
 801671e:	4641      	mov	r1, r8
 8016720:	4630      	mov	r0, r6
 8016722:	f7f9 f981 	bl	800fa28 <ucdr_init_buffer>
 8016726:	8921      	ldrh	r1, [r4, #8]
 8016728:	fbb5 f3f1 	udiv	r3, r5, r1
 801672c:	fb01 5313 	mls	r3, r1, r3, r5
 8016730:	b29b      	uxth	r3, r3
 8016732:	6862      	ldr	r2, [r4, #4]
 8016734:	fbb2 f2f1 	udiv	r2, r2, r1
 8016738:	6821      	ldr	r1, [r4, #0]
 801673a:	fb03 f302 	mul.w	r3, r3, r2
 801673e:	2001      	movs	r0, #1
 8016740:	f841 a003 	str.w	sl, [r1, r3]
 8016744:	81a5      	strh	r5, [r4, #12]
 8016746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801674a:	8922      	ldrh	r2, [r4, #8]
 801674c:	fbb5 f0f2 	udiv	r0, r5, r2
 8016750:	fb02 5510 	mls	r5, r2, r0, r5
 8016754:	b2ad      	uxth	r5, r5
 8016756:	6863      	ldr	r3, [r4, #4]
 8016758:	fbb3 f3f2 	udiv	r3, r3, r2
 801675c:	fb05 f503 	mul.w	r5, r5, r3
 8016760:	6823      	ldr	r3, [r4, #0]
 8016762:	2000      	movs	r0, #0
 8016764:	5158      	str	r0, [r3, r5]
 8016766:	eba9 0207 	sub.w	r2, r9, r7
 801676a:	eb08 0107 	add.w	r1, r8, r7
 801676e:	4630      	mov	r0, r6
 8016770:	f7f9 f95a 	bl	800fa28 <ucdr_init_buffer>
 8016774:	4630      	mov	r0, r6
 8016776:	4904      	ldr	r1, [pc, #16]	; (8016788 <uxr_next_input_reliable_buffer_available+0xf8>)
 8016778:	4622      	mov	r2, r4
 801677a:	f7f9 f92b 	bl	800f9d4 <ucdr_set_on_full_buffer_callback>
 801677e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016782:	2001      	movs	r0, #1
 8016784:	e7c8      	b.n	8016718 <uxr_next_input_reliable_buffer_available+0x88>
 8016786:	bf00      	nop
 8016788:	080164a5 	.word	0x080164a5

0801678c <uxr_process_heartbeat>:
 801678c:	b538      	push	{r3, r4, r5, lr}
 801678e:	4611      	mov	r1, r2
 8016790:	4604      	mov	r4, r0
 8016792:	89c0      	ldrh	r0, [r0, #14]
 8016794:	4615      	mov	r5, r2
 8016796:	f000 fb9d 	bl	8016ed4 <uxr_seq_num_cmp>
 801679a:	2800      	cmp	r0, #0
 801679c:	bfb8      	it	lt
 801679e:	81e5      	strhlt	r5, [r4, #14]
 80167a0:	bd38      	pop	{r3, r4, r5, pc}
 80167a2:	bf00      	nop

080167a4 <uxr_compute_acknack>:
 80167a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167a8:	8903      	ldrh	r3, [r0, #8]
 80167aa:	8986      	ldrh	r6, [r0, #12]
 80167ac:	4604      	mov	r4, r0
 80167ae:	460d      	mov	r5, r1
 80167b0:	b1d3      	cbz	r3, 80167e8 <uxr_compute_acknack+0x44>
 80167b2:	4630      	mov	r0, r6
 80167b4:	2701      	movs	r7, #1
 80167b6:	e003      	b.n	80167c0 <uxr_compute_acknack+0x1c>
 80167b8:	4567      	cmp	r7, ip
 80167ba:	d215      	bcs.n	80167e8 <uxr_compute_acknack+0x44>
 80167bc:	89a0      	ldrh	r0, [r4, #12]
 80167be:	3701      	adds	r7, #1
 80167c0:	b2b9      	uxth	r1, r7
 80167c2:	f000 fb7f 	bl	8016ec4 <uxr_seq_num_add>
 80167c6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80167ca:	fbb0 f2fc 	udiv	r2, r0, ip
 80167ce:	e9d4 1300 	ldrd	r1, r3, [r4]
 80167d2:	fb0c 0212 	mls	r2, ip, r2, r0
 80167d6:	b292      	uxth	r2, r2
 80167d8:	fbb3 f3fc 	udiv	r3, r3, ip
 80167dc:	fb02 1303 	mla	r3, r2, r3, r1
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d1e8      	bne.n	80167b8 <uxr_compute_acknack+0x14>
 80167e6:	4606      	mov	r6, r0
 80167e8:	802e      	strh	r6, [r5, #0]
 80167ea:	4630      	mov	r0, r6
 80167ec:	2101      	movs	r1, #1
 80167ee:	89e6      	ldrh	r6, [r4, #14]
 80167f0:	f000 fb6c 	bl	8016ecc <uxr_seq_num_sub>
 80167f4:	4601      	mov	r1, r0
 80167f6:	4630      	mov	r0, r6
 80167f8:	f000 fb68 	bl	8016ecc <uxr_seq_num_sub>
 80167fc:	4606      	mov	r6, r0
 80167fe:	b318      	cbz	r0, 8016848 <uxr_compute_acknack+0xa4>
 8016800:	f04f 0900 	mov.w	r9, #0
 8016804:	464f      	mov	r7, r9
 8016806:	f04f 0801 	mov.w	r8, #1
 801680a:	fa1f f189 	uxth.w	r1, r9
 801680e:	8828      	ldrh	r0, [r5, #0]
 8016810:	f000 fb58 	bl	8016ec4 <uxr_seq_num_add>
 8016814:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016818:	6822      	ldr	r2, [r4, #0]
 801681a:	fbb0 f1fc 	udiv	r1, r0, ip
 801681e:	fb01 011c 	mls	r1, r1, ip, r0
 8016822:	b289      	uxth	r1, r1
 8016824:	6863      	ldr	r3, [r4, #4]
 8016826:	fbb3 f3fc 	udiv	r3, r3, ip
 801682a:	fb01 2303 	mla	r3, r1, r3, r2
 801682e:	fa08 f209 	lsl.w	r2, r8, r9
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	f109 0901 	add.w	r9, r9, #1
 8016838:	b90b      	cbnz	r3, 801683e <uxr_compute_acknack+0x9a>
 801683a:	4317      	orrs	r7, r2
 801683c:	b2bf      	uxth	r7, r7
 801683e:	454e      	cmp	r6, r9
 8016840:	d1e3      	bne.n	801680a <uxr_compute_acknack+0x66>
 8016842:	4638      	mov	r0, r7
 8016844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016848:	4607      	mov	r7, r0
 801684a:	4638      	mov	r0, r7
 801684c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016850 <uxr_init_output_best_effort_stream>:
 8016850:	b410      	push	{r4}
 8016852:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8016856:	81c4      	strh	r4, [r0, #14]
 8016858:	e9c0 1300 	strd	r1, r3, [r0]
 801685c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016860:	7303      	strb	r3, [r0, #12]
 8016862:	6082      	str	r2, [r0, #8]
 8016864:	4770      	bx	lr
 8016866:	bf00      	nop

08016868 <uxr_reset_output_best_effort_stream>:
 8016868:	7b02      	ldrb	r2, [r0, #12]
 801686a:	6042      	str	r2, [r0, #4]
 801686c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016870:	81c3      	strh	r3, [r0, #14]
 8016872:	4770      	bx	lr

08016874 <uxr_prepare_best_effort_buffer_to_write>:
 8016874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016876:	4604      	mov	r4, r0
 8016878:	b083      	sub	sp, #12
 801687a:	6840      	ldr	r0, [r0, #4]
 801687c:	460d      	mov	r5, r1
 801687e:	4616      	mov	r6, r2
 8016880:	f7fa feb8 	bl	80115f4 <uxr_submessage_padding>
 8016884:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8016888:	4410      	add	r0, r2
 801688a:	1942      	adds	r2, r0, r5
 801688c:	4293      	cmp	r3, r2
 801688e:	bf2c      	ite	cs
 8016890:	2701      	movcs	r7, #1
 8016892:	2700      	movcc	r7, #0
 8016894:	d202      	bcs.n	801689c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016896:	4638      	mov	r0, r7
 8016898:	b003      	add	sp, #12
 801689a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801689c:	9000      	str	r0, [sp, #0]
 801689e:	6821      	ldr	r1, [r4, #0]
 80168a0:	4630      	mov	r0, r6
 80168a2:	2300      	movs	r3, #0
 80168a4:	f7f9 f8ae 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 80168a8:	6861      	ldr	r1, [r4, #4]
 80168aa:	4638      	mov	r0, r7
 80168ac:	4429      	add	r1, r5
 80168ae:	6061      	str	r1, [r4, #4]
 80168b0:	b003      	add	sp, #12
 80168b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080168b4 <uxr_prepare_best_effort_buffer_to_send>:
 80168b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168b8:	6845      	ldr	r5, [r0, #4]
 80168ba:	4604      	mov	r4, r0
 80168bc:	7b00      	ldrb	r0, [r0, #12]
 80168be:	4285      	cmp	r5, r0
 80168c0:	bf8c      	ite	hi
 80168c2:	2701      	movhi	r7, #1
 80168c4:	2700      	movls	r7, #0
 80168c6:	d802      	bhi.n	80168ce <uxr_prepare_best_effort_buffer_to_send+0x1a>
 80168c8:	4638      	mov	r0, r7
 80168ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168ce:	4688      	mov	r8, r1
 80168d0:	89e0      	ldrh	r0, [r4, #14]
 80168d2:	2101      	movs	r1, #1
 80168d4:	4615      	mov	r5, r2
 80168d6:	461e      	mov	r6, r3
 80168d8:	f000 faf4 	bl	8016ec4 <uxr_seq_num_add>
 80168dc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80168e0:	81e0      	strh	r0, [r4, #14]
 80168e2:	8030      	strh	r0, [r6, #0]
 80168e4:	f8c8 2000 	str.w	r2, [r8]
 80168e8:	602b      	str	r3, [r5, #0]
 80168ea:	7b23      	ldrb	r3, [r4, #12]
 80168ec:	6063      	str	r3, [r4, #4]
 80168ee:	4638      	mov	r0, r7
 80168f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080168f4 <on_full_output_buffer>:
 80168f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168f6:	6802      	ldr	r2, [r0, #0]
 80168f8:	460d      	mov	r5, r1
 80168fa:	6809      	ldr	r1, [r1, #0]
 80168fc:	892f      	ldrh	r7, [r5, #8]
 80168fe:	686c      	ldr	r4, [r5, #4]
 8016900:	fbb4 f4f7 	udiv	r4, r4, r7
 8016904:	1a53      	subs	r3, r2, r1
 8016906:	fbb3 f3f4 	udiv	r3, r3, r4
 801690a:	3301      	adds	r3, #1
 801690c:	b29b      	uxth	r3, r3
 801690e:	fbb3 f2f7 	udiv	r2, r3, r7
 8016912:	fb07 3312 	mls	r3, r7, r2, r3
 8016916:	b29b      	uxth	r3, r3
 8016918:	fb04 f403 	mul.w	r4, r4, r3
 801691c:	7b2f      	ldrb	r7, [r5, #12]
 801691e:	590a      	ldr	r2, [r1, r4]
 8016920:	6903      	ldr	r3, [r0, #16]
 8016922:	443c      	add	r4, r7
 8016924:	3408      	adds	r4, #8
 8016926:	1bd2      	subs	r2, r2, r7
 8016928:	4606      	mov	r6, r0
 801692a:	4421      	add	r1, r4
 801692c:	3a04      	subs	r2, #4
 801692e:	f7f9 f873 	bl	800fa18 <ucdr_init_buffer_origin>
 8016932:	4630      	mov	r0, r6
 8016934:	4902      	ldr	r1, [pc, #8]	; (8016940 <on_full_output_buffer+0x4c>)
 8016936:	462a      	mov	r2, r5
 8016938:	f7f9 f84c 	bl	800f9d4 <ucdr_set_on_full_buffer_callback>
 801693c:	2000      	movs	r0, #0
 801693e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016940:	080168f5 	.word	0x080168f5

08016944 <uxr_init_output_reliable_stream>:
 8016944:	b430      	push	{r4, r5}
 8016946:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801694a:	6001      	str	r1, [r0, #0]
 801694c:	8103      	strh	r3, [r0, #8]
 801694e:	6042      	str	r2, [r0, #4]
 8016950:	7304      	strb	r4, [r0, #12]
 8016952:	b1b3      	cbz	r3, 8016982 <uxr_init_output_reliable_stream+0x3e>
 8016954:	600c      	str	r4, [r1, #0]
 8016956:	8901      	ldrh	r1, [r0, #8]
 8016958:	2901      	cmp	r1, #1
 801695a:	d912      	bls.n	8016982 <uxr_init_output_reliable_stream+0x3e>
 801695c:	2201      	movs	r2, #1
 801695e:	e9d0 5400 	ldrd	r5, r4, [r0]
 8016962:	fbb2 f3f1 	udiv	r3, r2, r1
 8016966:	fb01 2313 	mls	r3, r1, r3, r2
 801696a:	b29b      	uxth	r3, r3
 801696c:	fbb4 f1f1 	udiv	r1, r4, r1
 8016970:	fb03 f301 	mul.w	r3, r3, r1
 8016974:	7b01      	ldrb	r1, [r0, #12]
 8016976:	50e9      	str	r1, [r5, r3]
 8016978:	3201      	adds	r2, #1
 801697a:	8901      	ldrh	r1, [r0, #8]
 801697c:	b292      	uxth	r2, r2
 801697e:	4291      	cmp	r1, r2
 8016980:	d8ed      	bhi.n	801695e <uxr_init_output_reliable_stream+0x1a>
 8016982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016986:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801698a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801698e:	4b05      	ldr	r3, [pc, #20]	; (80169a4 <uxr_init_output_reliable_stream+0x60>)
 8016990:	f8c0 300e 	str.w	r3, [r0, #14]
 8016994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016998:	2300      	movs	r3, #0
 801699a:	bc30      	pop	{r4, r5}
 801699c:	8242      	strh	r2, [r0, #18]
 801699e:	8403      	strh	r3, [r0, #32]
 80169a0:	4770      	bx	lr
 80169a2:	bf00      	nop
 80169a4:	ffff0000 	.word	0xffff0000

080169a8 <uxr_reset_output_reliable_stream>:
 80169a8:	8902      	ldrh	r2, [r0, #8]
 80169aa:	b430      	push	{r4, r5}
 80169ac:	b19a      	cbz	r2, 80169d6 <uxr_reset_output_reliable_stream+0x2e>
 80169ae:	2400      	movs	r4, #0
 80169b0:	4621      	mov	r1, r4
 80169b2:	fbb1 f3f2 	udiv	r3, r1, r2
 80169b6:	fb02 1313 	mls	r3, r2, r3, r1
 80169ba:	e9d0 5100 	ldrd	r5, r1, [r0]
 80169be:	b29b      	uxth	r3, r3
 80169c0:	fbb1 f2f2 	udiv	r2, r1, r2
 80169c4:	fb03 f302 	mul.w	r3, r3, r2
 80169c8:	7b02      	ldrb	r2, [r0, #12]
 80169ca:	50ea      	str	r2, [r5, r3]
 80169cc:	3401      	adds	r4, #1
 80169ce:	8902      	ldrh	r2, [r0, #8]
 80169d0:	b2a1      	uxth	r1, r4
 80169d2:	428a      	cmp	r2, r1
 80169d4:	d8ed      	bhi.n	80169b2 <uxr_reset_output_reliable_stream+0xa>
 80169d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80169da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80169de:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80169e2:	4b05      	ldr	r3, [pc, #20]	; (80169f8 <uxr_reset_output_reliable_stream+0x50>)
 80169e4:	f8c0 300e 	str.w	r3, [r0, #14]
 80169e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80169ec:	2300      	movs	r3, #0
 80169ee:	bc30      	pop	{r4, r5}
 80169f0:	8242      	strh	r2, [r0, #18]
 80169f2:	8403      	strh	r3, [r0, #32]
 80169f4:	4770      	bx	lr
 80169f6:	bf00      	nop
 80169f8:	ffff0000 	.word	0xffff0000

080169fc <uxr_prepare_reliable_buffer_to_write>:
 80169fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a00:	89c5      	ldrh	r5, [r0, #14]
 8016a02:	4604      	mov	r4, r0
 8016a04:	8900      	ldrh	r0, [r0, #8]
 8016a06:	fbb5 f3f0 	udiv	r3, r5, r0
 8016a0a:	4688      	mov	r8, r1
 8016a0c:	e9d4 1600 	ldrd	r1, r6, [r4]
 8016a10:	fb00 5313 	mls	r3, r0, r3, r5
 8016a14:	b29b      	uxth	r3, r3
 8016a16:	fbb6 f0f0 	udiv	r0, r6, r0
 8016a1a:	fb00 f303 	mul.w	r3, r0, r3
 8016a1e:	3304      	adds	r3, #4
 8016a20:	18cb      	adds	r3, r1, r3
 8016a22:	b091      	sub	sp, #68	; 0x44
 8016a24:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8016a28:	9004      	str	r0, [sp, #16]
 8016a2a:	2104      	movs	r1, #4
 8016a2c:	4630      	mov	r0, r6
 8016a2e:	9305      	str	r3, [sp, #20]
 8016a30:	9206      	str	r2, [sp, #24]
 8016a32:	f7f8 fffd 	bl	800fa30 <ucdr_alignment>
 8016a36:	1833      	adds	r3, r6, r0
 8016a38:	9804      	ldr	r0, [sp, #16]
 8016a3a:	9303      	str	r3, [sp, #12]
 8016a3c:	eb03 0708 	add.w	r7, r3, r8
 8016a40:	1f06      	subs	r6, r0, #4
 8016a42:	42b7      	cmp	r7, r6
 8016a44:	f240 80dc 	bls.w	8016c00 <uxr_prepare_reliable_buffer_to_write+0x204>
 8016a48:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8016a4c:	eb0e 0308 	add.w	r3, lr, r8
 8016a50:	42b3      	cmp	r3, r6
 8016a52:	f240 80c2 	bls.w	8016bda <uxr_prepare_reliable_buffer_to_write+0x1de>
 8016a56:	9b03      	ldr	r3, [sp, #12]
 8016a58:	3304      	adds	r3, #4
 8016a5a:	42b3      	cmp	r3, r6
 8016a5c:	f080 8112 	bcs.w	8016c84 <uxr_prepare_reliable_buffer_to_write+0x288>
 8016a60:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016a64:	f1bc 0f00 	cmp.w	ip, #0
 8016a68:	f000 8127 	beq.w	8016cba <uxr_prepare_reliable_buffer_to_write+0x2be>
 8016a6c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8016a70:	2100      	movs	r1, #0
 8016a72:	4608      	mov	r0, r1
 8016a74:	460a      	mov	r2, r1
 8016a76:	fbb3 f9fc 	udiv	r9, r3, ip
 8016a7a:	fbb2 f3fc 	udiv	r3, r2, ip
 8016a7e:	fb0c 2313 	mls	r3, ip, r3, r2
 8016a82:	b29b      	uxth	r3, r3
 8016a84:	fb09 7303 	mla	r3, r9, r3, r7
 8016a88:	3101      	adds	r1, #1
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	459e      	cmp	lr, r3
 8016a8e:	bf08      	it	eq
 8016a90:	3001      	addeq	r0, #1
 8016a92:	b28a      	uxth	r2, r1
 8016a94:	bf08      	it	eq
 8016a96:	b280      	uxtheq	r0, r0
 8016a98:	4562      	cmp	r2, ip
 8016a9a:	d3ee      	bcc.n	8016a7a <uxr_prepare_reliable_buffer_to_write+0x7e>
 8016a9c:	9b03      	ldr	r3, [sp, #12]
 8016a9e:	1f37      	subs	r7, r6, #4
 8016aa0:	b2bf      	uxth	r7, r7
 8016aa2:	eba7 0903 	sub.w	r9, r7, r3
 8016aa6:	fa1f f989 	uxth.w	r9, r9
 8016aaa:	eba7 070e 	sub.w	r7, r7, lr
 8016aae:	b2bf      	uxth	r7, r7
 8016ab0:	eba8 0809 	sub.w	r8, r8, r9
 8016ab4:	fbb8 faf7 	udiv	sl, r8, r7
 8016ab8:	fb07 831a 	mls	r3, r7, sl, r8
 8016abc:	9707      	str	r7, [sp, #28]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	f040 80bf 	bne.w	8016c42 <uxr_prepare_reliable_buffer_to_write+0x246>
 8016ac4:	fa1f fa8a 	uxth.w	sl, sl
 8016ac8:	4582      	cmp	sl, r0
 8016aca:	f200 8095 	bhi.w	8016bf8 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8016ace:	f10d 0b20 	add.w	fp, sp, #32
 8016ad2:	f1ba 0f00 	cmp.w	sl, #0
 8016ad6:	d03a      	beq.n	8016b4e <uxr_prepare_reliable_buffer_to_write+0x152>
 8016ad8:	f04f 0800 	mov.w	r8, #0
 8016adc:	f10d 0b20 	add.w	fp, sp, #32
 8016ae0:	e000      	b.n	8016ae4 <uxr_prepare_reliable_buffer_to_write+0xe8>
 8016ae2:	46b9      	mov	r9, r7
 8016ae4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8016ae8:	fbb5 f1fc 	udiv	r1, r5, ip
 8016aec:	fb0c 5111 	mls	r1, ip, r1, r5
 8016af0:	b289      	uxth	r1, r1
 8016af2:	fbb2 f2fc 	udiv	r2, r2, ip
 8016af6:	fb01 f102 	mul.w	r1, r1, r2
 8016afa:	3104      	adds	r1, #4
 8016afc:	4419      	add	r1, r3
 8016afe:	4632      	mov	r2, r6
 8016b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b04:	9300      	str	r3, [sp, #0]
 8016b06:	4658      	mov	r0, fp
 8016b08:	2300      	movs	r3, #0
 8016b0a:	f7f8 ff7b 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 8016b0e:	464a      	mov	r2, r9
 8016b10:	2300      	movs	r3, #0
 8016b12:	210d      	movs	r1, #13
 8016b14:	4658      	mov	r0, fp
 8016b16:	f7fa fd2d 	bl	8011574 <uxr_buffer_submessage_header>
 8016b1a:	8920      	ldrh	r0, [r4, #8]
 8016b1c:	fbb5 f3f0 	udiv	r3, r5, r0
 8016b20:	e9d4 2100 	ldrd	r2, r1, [r4]
 8016b24:	fb00 5313 	mls	r3, r0, r3, r5
 8016b28:	b29b      	uxth	r3, r3
 8016b2a:	fbb1 f1f0 	udiv	r1, r1, r0
 8016b2e:	fb03 f301 	mul.w	r3, r3, r1
 8016b32:	4628      	mov	r0, r5
 8016b34:	50d6      	str	r6, [r2, r3]
 8016b36:	2101      	movs	r1, #1
 8016b38:	f000 f9c4 	bl	8016ec4 <uxr_seq_num_add>
 8016b3c:	f108 0801 	add.w	r8, r8, #1
 8016b40:	fa1f f388 	uxth.w	r3, r8
 8016b44:	459a      	cmp	sl, r3
 8016b46:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016b4a:	4605      	mov	r5, r0
 8016b4c:	d8c9      	bhi.n	8016ae2 <uxr_prepare_reliable_buffer_to_write+0xe6>
 8016b4e:	fbb5 f1fc 	udiv	r1, r5, ip
 8016b52:	fb0c 5111 	mls	r1, ip, r1, r5
 8016b56:	b289      	uxth	r1, r1
 8016b58:	6863      	ldr	r3, [r4, #4]
 8016b5a:	fbb3 fcfc 	udiv	ip, r3, ip
 8016b5e:	6823      	ldr	r3, [r4, #0]
 8016b60:	fb01 f10c 	mul.w	r1, r1, ip
 8016b64:	3104      	adds	r1, #4
 8016b66:	4419      	add	r1, r3
 8016b68:	4632      	mov	r2, r6
 8016b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b6e:	9300      	str	r3, [sp, #0]
 8016b70:	4658      	mov	r0, fp
 8016b72:	2300      	movs	r3, #0
 8016b74:	f7f8 ff46 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 8016b78:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016b7c:	4658      	mov	r0, fp
 8016b7e:	fa1f f288 	uxth.w	r2, r8
 8016b82:	2302      	movs	r3, #2
 8016b84:	210d      	movs	r1, #13
 8016b86:	f7fa fcf5 	bl	8011574 <uxr_buffer_submessage_header>
 8016b8a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8016b8e:	8921      	ldrh	r1, [r4, #8]
 8016b90:	9f03      	ldr	r7, [sp, #12]
 8016b92:	9307      	str	r3, [sp, #28]
 8016b94:	9b05      	ldr	r3, [sp, #20]
 8016b96:	7b26      	ldrb	r6, [r4, #12]
 8016b98:	fbb5 f0f1 	udiv	r0, r5, r1
 8016b9c:	fbb2 f2f1 	udiv	r2, r2, r1
 8016ba0:	fb01 5010 	mls	r0, r1, r0, r5
 8016ba4:	1d39      	adds	r1, r7, #4
 8016ba6:	440b      	add	r3, r1
 8016ba8:	b280      	uxth	r0, r0
 8016baa:	fb00 f002 	mul.w	r0, r0, r2
 8016bae:	4619      	mov	r1, r3
 8016bb0:	3604      	adds	r6, #4
 8016bb2:	9b07      	ldr	r3, [sp, #28]
 8016bb4:	9a04      	ldr	r2, [sp, #16]
 8016bb6:	4446      	add	r6, r8
 8016bb8:	501e      	str	r6, [r3, r0]
 8016bba:	9e06      	ldr	r6, [sp, #24]
 8016bbc:	3a08      	subs	r2, #8
 8016bbe:	1bd2      	subs	r2, r2, r7
 8016bc0:	4630      	mov	r0, r6
 8016bc2:	f7f8 ff31 	bl	800fa28 <ucdr_init_buffer>
 8016bc6:	4630      	mov	r0, r6
 8016bc8:	493d      	ldr	r1, [pc, #244]	; (8016cc0 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8016bca:	4622      	mov	r2, r4
 8016bcc:	f7f8 ff02 	bl	800f9d4 <ucdr_set_on_full_buffer_callback>
 8016bd0:	2001      	movs	r0, #1
 8016bd2:	81e5      	strh	r5, [r4, #14]
 8016bd4:	b011      	add	sp, #68	; 0x44
 8016bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bda:	2101      	movs	r1, #1
 8016bdc:	89e0      	ldrh	r0, [r4, #14]
 8016bde:	f000 f971 	bl	8016ec4 <uxr_seq_num_add>
 8016be2:	8921      	ldrh	r1, [r4, #8]
 8016be4:	4605      	mov	r5, r0
 8016be6:	8a60      	ldrh	r0, [r4, #18]
 8016be8:	f000 f96c 	bl	8016ec4 <uxr_seq_num_add>
 8016bec:	4601      	mov	r1, r0
 8016bee:	4628      	mov	r0, r5
 8016bf0:	f000 f970 	bl	8016ed4 <uxr_seq_num_cmp>
 8016bf4:	2800      	cmp	r0, #0
 8016bf6:	dd2a      	ble.n	8016c4e <uxr_prepare_reliable_buffer_to_write+0x252>
 8016bf8:	2000      	movs	r0, #0
 8016bfa:	b011      	add	sp, #68	; 0x44
 8016bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c00:	8921      	ldrh	r1, [r4, #8]
 8016c02:	8a60      	ldrh	r0, [r4, #18]
 8016c04:	f000 f95e 	bl	8016ec4 <uxr_seq_num_add>
 8016c08:	4601      	mov	r1, r0
 8016c0a:	4628      	mov	r0, r5
 8016c0c:	f000 f962 	bl	8016ed4 <uxr_seq_num_cmp>
 8016c10:	2800      	cmp	r0, #0
 8016c12:	dcf1      	bgt.n	8016bf8 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8016c14:	8921      	ldrh	r1, [r4, #8]
 8016c16:	fbb5 f3f1 	udiv	r3, r5, r1
 8016c1a:	e9d4 4200 	ldrd	r4, r2, [r4]
 8016c1e:	fb01 5313 	mls	r3, r1, r3, r5
 8016c22:	b29b      	uxth	r3, r3
 8016c24:	fbb2 f2f1 	udiv	r2, r2, r1
 8016c28:	fb03 f302 	mul.w	r3, r3, r2
 8016c2c:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8016c30:	50e7      	str	r7, [r4, r3]
 8016c32:	9b03      	ldr	r3, [sp, #12]
 8016c34:	9300      	str	r3, [sp, #0]
 8016c36:	463a      	mov	r2, r7
 8016c38:	2300      	movs	r3, #0
 8016c3a:	f7f8 fee3 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 8016c3e:	2001      	movs	r0, #1
 8016c40:	e7db      	b.n	8016bfa <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8016c42:	f10a 0a01 	add.w	sl, sl, #1
 8016c46:	fa1f fa8a 	uxth.w	sl, sl
 8016c4a:	9307      	str	r3, [sp, #28]
 8016c4c:	e73c      	b.n	8016ac8 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8016c4e:	8920      	ldrh	r0, [r4, #8]
 8016c50:	fbb5 f3f0 	udiv	r3, r5, r0
 8016c54:	fb00 5313 	mls	r3, r0, r3, r5
 8016c58:	b29b      	uxth	r3, r3
 8016c5a:	6862      	ldr	r2, [r4, #4]
 8016c5c:	6821      	ldr	r1, [r4, #0]
 8016c5e:	fbb2 f0f0 	udiv	r0, r2, r0
 8016c62:	fb03 f300 	mul.w	r3, r3, r0
 8016c66:	7b22      	ldrb	r2, [r4, #12]
 8016c68:	9806      	ldr	r0, [sp, #24]
 8016c6a:	3304      	adds	r3, #4
 8016c6c:	4419      	add	r1, r3
 8016c6e:	4442      	add	r2, r8
 8016c70:	f841 2c04 	str.w	r2, [r1, #-4]
 8016c74:	7b23      	ldrb	r3, [r4, #12]
 8016c76:	9300      	str	r3, [sp, #0]
 8016c78:	2300      	movs	r3, #0
 8016c7a:	f7f8 fec3 	bl	800fa04 <ucdr_init_buffer_origin_offset>
 8016c7e:	81e5      	strh	r5, [r4, #14]
 8016c80:	2001      	movs	r0, #1
 8016c82:	e7ba      	b.n	8016bfa <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8016c84:	4628      	mov	r0, r5
 8016c86:	2101      	movs	r1, #1
 8016c88:	f000 f91c 	bl	8016ec4 <uxr_seq_num_add>
 8016c8c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016c90:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016c94:	fbb3 f1fc 	udiv	r1, r3, ip
 8016c98:	fbb0 f3fc 	udiv	r3, r0, ip
 8016c9c:	fb0c 0313 	mls	r3, ip, r3, r0
 8016ca0:	b29b      	uxth	r3, r3
 8016ca2:	fb03 f301 	mul.w	r3, r3, r1
 8016ca6:	3304      	adds	r3, #4
 8016ca8:	18d3      	adds	r3, r2, r3
 8016caa:	9305      	str	r3, [sp, #20]
 8016cac:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016cb0:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8016cb4:	9303      	str	r3, [sp, #12]
 8016cb6:	4605      	mov	r5, r0
 8016cb8:	e6d4      	b.n	8016a64 <uxr_prepare_reliable_buffer_to_write+0x68>
 8016cba:	4660      	mov	r0, ip
 8016cbc:	e6ee      	b.n	8016a9c <uxr_prepare_reliable_buffer_to_write+0xa0>
 8016cbe:	bf00      	nop
 8016cc0:	080168f5 	.word	0x080168f5

08016cc4 <uxr_prepare_next_reliable_buffer_to_send>:
 8016cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cc8:	4605      	mov	r5, r0
 8016cca:	4688      	mov	r8, r1
 8016ccc:	8a00      	ldrh	r0, [r0, #16]
 8016cce:	2101      	movs	r1, #1
 8016cd0:	4617      	mov	r7, r2
 8016cd2:	461e      	mov	r6, r3
 8016cd4:	f000 f8f6 	bl	8016ec4 <uxr_seq_num_add>
 8016cd8:	8030      	strh	r0, [r6, #0]
 8016cda:	892a      	ldrh	r2, [r5, #8]
 8016cdc:	fbb0 f3f2 	udiv	r3, r0, r2
 8016ce0:	fb02 0413 	mls	r4, r2, r3, r0
 8016ce4:	b2a4      	uxth	r4, r4
 8016ce6:	686b      	ldr	r3, [r5, #4]
 8016ce8:	fbb3 f2f2 	udiv	r2, r3, r2
 8016cec:	682b      	ldr	r3, [r5, #0]
 8016cee:	89e9      	ldrh	r1, [r5, #14]
 8016cf0:	fb04 f402 	mul.w	r4, r4, r2
 8016cf4:	3404      	adds	r4, #4
 8016cf6:	4423      	add	r3, r4
 8016cf8:	f8c8 3000 	str.w	r3, [r8]
 8016cfc:	682b      	ldr	r3, [r5, #0]
 8016cfe:	441c      	add	r4, r3
 8016d00:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016d04:	603b      	str	r3, [r7, #0]
 8016d06:	f000 f8e5 	bl	8016ed4 <uxr_seq_num_cmp>
 8016d0a:	2800      	cmp	r0, #0
 8016d0c:	dd02      	ble.n	8016d14 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8016d0e:	2000      	movs	r0, #0
 8016d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d14:	683a      	ldr	r2, [r7, #0]
 8016d16:	7b2b      	ldrb	r3, [r5, #12]
 8016d18:	429a      	cmp	r2, r3
 8016d1a:	d9f8      	bls.n	8016d0e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016d1c:	8a69      	ldrh	r1, [r5, #18]
 8016d1e:	8a28      	ldrh	r0, [r5, #16]
 8016d20:	f000 f8d4 	bl	8016ecc <uxr_seq_num_sub>
 8016d24:	892b      	ldrh	r3, [r5, #8]
 8016d26:	4283      	cmp	r3, r0
 8016d28:	d0f1      	beq.n	8016d0e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016d2a:	8830      	ldrh	r0, [r6, #0]
 8016d2c:	89eb      	ldrh	r3, [r5, #14]
 8016d2e:	8228      	strh	r0, [r5, #16]
 8016d30:	4298      	cmp	r0, r3
 8016d32:	d002      	beq.n	8016d3a <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8016d34:	2001      	movs	r0, #1
 8016d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d3a:	2101      	movs	r1, #1
 8016d3c:	f000 f8c2 	bl	8016ec4 <uxr_seq_num_add>
 8016d40:	81e8      	strh	r0, [r5, #14]
 8016d42:	2001      	movs	r0, #1
 8016d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016d48 <uxr_update_output_stream_heartbeat_timestamp>:
 8016d48:	b5d0      	push	{r4, r6, r7, lr}
 8016d4a:	8a01      	ldrh	r1, [r0, #16]
 8016d4c:	4604      	mov	r4, r0
 8016d4e:	8a40      	ldrh	r0, [r0, #18]
 8016d50:	4616      	mov	r6, r2
 8016d52:	461f      	mov	r7, r3
 8016d54:	f000 f8be 	bl	8016ed4 <uxr_seq_num_cmp>
 8016d58:	2800      	cmp	r0, #0
 8016d5a:	db07      	blt.n	8016d6c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016d60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016d64:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016d68:	2000      	movs	r0, #0
 8016d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8016d6c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016d70:	b948      	cbnz	r0, 8016d86 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8016d72:	2301      	movs	r3, #1
 8016d74:	f884 3020 	strb.w	r3, [r4, #32]
 8016d78:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8016d7c:	f147 0200 	adc.w	r2, r7, #0
 8016d80:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8016d84:	bdd0      	pop	{r4, r6, r7, pc}
 8016d86:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016d8a:	4296      	cmp	r6, r2
 8016d8c:	eb77 0303 	sbcs.w	r3, r7, r3
 8016d90:	bfa5      	ittet	ge
 8016d92:	3001      	addge	r0, #1
 8016d94:	f884 0020 	strbge.w	r0, [r4, #32]
 8016d98:	2000      	movlt	r0, #0
 8016d9a:	2001      	movge	r0, #1
 8016d9c:	e7ec      	b.n	8016d78 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8016d9e:	bf00      	nop

08016da0 <uxr_begin_output_nack_buffer_it>:
 8016da0:	8a40      	ldrh	r0, [r0, #18]
 8016da2:	4770      	bx	lr

08016da4 <uxr_next_reliable_nack_buffer_to_send>:
 8016da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016da8:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8016dac:	f1b9 0f00 	cmp.w	r9, #0
 8016db0:	d011      	beq.n	8016dd6 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8016db2:	4605      	mov	r5, r0
 8016db4:	8818      	ldrh	r0, [r3, #0]
 8016db6:	460f      	mov	r7, r1
 8016db8:	4690      	mov	r8, r2
 8016dba:	461e      	mov	r6, r3
 8016dbc:	2101      	movs	r1, #1
 8016dbe:	f000 f881 	bl	8016ec4 <uxr_seq_num_add>
 8016dc2:	8030      	strh	r0, [r6, #0]
 8016dc4:	8a29      	ldrh	r1, [r5, #16]
 8016dc6:	f000 f885 	bl	8016ed4 <uxr_seq_num_cmp>
 8016dca:	2800      	cmp	r0, #0
 8016dcc:	dd06      	ble.n	8016ddc <uxr_next_reliable_nack_buffer_to_send+0x38>
 8016dce:	f04f 0900 	mov.w	r9, #0
 8016dd2:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8016dd6:	4648      	mov	r0, r9
 8016dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ddc:	892a      	ldrh	r2, [r5, #8]
 8016dde:	8830      	ldrh	r0, [r6, #0]
 8016de0:	fbb0 f4f2 	udiv	r4, r0, r2
 8016de4:	fb02 0414 	mls	r4, r2, r4, r0
 8016de8:	b2a4      	uxth	r4, r4
 8016dea:	686b      	ldr	r3, [r5, #4]
 8016dec:	fbb3 f2f2 	udiv	r2, r3, r2
 8016df0:	682b      	ldr	r3, [r5, #0]
 8016df2:	fb04 f402 	mul.w	r4, r4, r2
 8016df6:	3404      	adds	r4, #4
 8016df8:	4423      	add	r3, r4
 8016dfa:	603b      	str	r3, [r7, #0]
 8016dfc:	682b      	ldr	r3, [r5, #0]
 8016dfe:	441c      	add	r4, r3
 8016e00:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016e04:	f8c8 3000 	str.w	r3, [r8]
 8016e08:	7b2a      	ldrb	r2, [r5, #12]
 8016e0a:	429a      	cmp	r2, r3
 8016e0c:	d0d6      	beq.n	8016dbc <uxr_next_reliable_nack_buffer_to_send+0x18>
 8016e0e:	4648      	mov	r0, r9
 8016e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016e14 <uxr_process_acknack>:
 8016e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e16:	4604      	mov	r4, r0
 8016e18:	460e      	mov	r6, r1
 8016e1a:	4610      	mov	r0, r2
 8016e1c:	2101      	movs	r1, #1
 8016e1e:	f000 f855 	bl	8016ecc <uxr_seq_num_sub>
 8016e22:	8a61      	ldrh	r1, [r4, #18]
 8016e24:	f000 f852 	bl	8016ecc <uxr_seq_num_sub>
 8016e28:	b1c0      	cbz	r0, 8016e5c <uxr_process_acknack+0x48>
 8016e2a:	4605      	mov	r5, r0
 8016e2c:	2700      	movs	r7, #0
 8016e2e:	2101      	movs	r1, #1
 8016e30:	8a60      	ldrh	r0, [r4, #18]
 8016e32:	f000 f847 	bl	8016ec4 <uxr_seq_num_add>
 8016e36:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016e3a:	fbb0 f3fc 	udiv	r3, r0, ip
 8016e3e:	e9d4 2100 	ldrd	r2, r1, [r4]
 8016e42:	fb0c 0313 	mls	r3, ip, r3, r0
 8016e46:	b29b      	uxth	r3, r3
 8016e48:	fbb1 f1fc 	udiv	r1, r1, ip
 8016e4c:	3701      	adds	r7, #1
 8016e4e:	fb03 f301 	mul.w	r3, r3, r1
 8016e52:	42bd      	cmp	r5, r7
 8016e54:	7b21      	ldrb	r1, [r4, #12]
 8016e56:	8260      	strh	r0, [r4, #18]
 8016e58:	50d1      	str	r1, [r2, r3]
 8016e5a:	d1e8      	bne.n	8016e2e <uxr_process_acknack+0x1a>
 8016e5c:	3e00      	subs	r6, #0
 8016e5e:	f04f 0300 	mov.w	r3, #0
 8016e62:	bf18      	it	ne
 8016e64:	2601      	movne	r6, #1
 8016e66:	f884 3020 	strb.w	r3, [r4, #32]
 8016e6a:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8016e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016e70 <uxr_is_output_up_to_date>:
 8016e70:	8a01      	ldrh	r1, [r0, #16]
 8016e72:	8a40      	ldrh	r0, [r0, #18]
 8016e74:	b508      	push	{r3, lr}
 8016e76:	f000 f82d 	bl	8016ed4 <uxr_seq_num_cmp>
 8016e7a:	fab0 f080 	clz	r0, r0
 8016e7e:	0940      	lsrs	r0, r0, #5
 8016e80:	bd08      	pop	{r3, pc}
 8016e82:	bf00      	nop

08016e84 <get_available_free_slots>:
 8016e84:	8901      	ldrh	r1, [r0, #8]
 8016e86:	b1d9      	cbz	r1, 8016ec0 <get_available_free_slots+0x3c>
 8016e88:	b4f0      	push	{r4, r5, r6, r7}
 8016e8a:	2400      	movs	r4, #0
 8016e8c:	6845      	ldr	r5, [r0, #4]
 8016e8e:	6807      	ldr	r7, [r0, #0]
 8016e90:	7b06      	ldrb	r6, [r0, #12]
 8016e92:	fbb5 f5f1 	udiv	r5, r5, r1
 8016e96:	4620      	mov	r0, r4
 8016e98:	4622      	mov	r2, r4
 8016e9a:	fbb2 f3f1 	udiv	r3, r2, r1
 8016e9e:	fb01 2313 	mls	r3, r1, r3, r2
 8016ea2:	b29b      	uxth	r3, r3
 8016ea4:	fb05 7303 	mla	r3, r5, r3, r7
 8016ea8:	3401      	adds	r4, #1
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	429e      	cmp	r6, r3
 8016eae:	bf08      	it	eq
 8016eb0:	3001      	addeq	r0, #1
 8016eb2:	b2a2      	uxth	r2, r4
 8016eb4:	bf08      	it	eq
 8016eb6:	b280      	uxtheq	r0, r0
 8016eb8:	428a      	cmp	r2, r1
 8016eba:	d3ee      	bcc.n	8016e9a <get_available_free_slots+0x16>
 8016ebc:	bcf0      	pop	{r4, r5, r6, r7}
 8016ebe:	4770      	bx	lr
 8016ec0:	4608      	mov	r0, r1
 8016ec2:	4770      	bx	lr

08016ec4 <uxr_seq_num_add>:
 8016ec4:	4408      	add	r0, r1
 8016ec6:	b280      	uxth	r0, r0
 8016ec8:	4770      	bx	lr
 8016eca:	bf00      	nop

08016ecc <uxr_seq_num_sub>:
 8016ecc:	1a40      	subs	r0, r0, r1
 8016ece:	b280      	uxth	r0, r0
 8016ed0:	4770      	bx	lr
 8016ed2:	bf00      	nop

08016ed4 <uxr_seq_num_cmp>:
 8016ed4:	4288      	cmp	r0, r1
 8016ed6:	d011      	beq.n	8016efc <uxr_seq_num_cmp+0x28>
 8016ed8:	d309      	bcc.n	8016eee <uxr_seq_num_cmp+0x1a>
 8016eda:	4288      	cmp	r0, r1
 8016edc:	d910      	bls.n	8016f00 <uxr_seq_num_cmp+0x2c>
 8016ede:	1a40      	subs	r0, r0, r1
 8016ee0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8016ee4:	bfd4      	ite	le
 8016ee6:	2001      	movle	r0, #1
 8016ee8:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8016eec:	4770      	bx	lr
 8016eee:	1a0b      	subs	r3, r1, r0
 8016ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016ef4:	daf1      	bge.n	8016eda <uxr_seq_num_cmp+0x6>
 8016ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016efa:	4770      	bx	lr
 8016efc:	2000      	movs	r0, #0
 8016efe:	4770      	bx	lr
 8016f00:	2001      	movs	r0, #1
 8016f02:	4770      	bx	lr

08016f04 <uxr_init_framing_io>:
 8016f04:	2300      	movs	r3, #0
 8016f06:	7041      	strb	r1, [r0, #1]
 8016f08:	7003      	strb	r3, [r0, #0]
 8016f0a:	8583      	strh	r3, [r0, #44]	; 0x2c
 8016f0c:	4770      	bx	lr
 8016f0e:	bf00      	nop

08016f10 <uxr_write_framed_msg>:
 8016f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f14:	7845      	ldrb	r5, [r0, #1]
 8016f16:	b085      	sub	sp, #20
 8016f18:	4604      	mov	r4, r0
 8016f1a:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8016f1e:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8016f22:	f1bc 0f01 	cmp.w	ip, #1
 8016f26:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8016f2a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8016f2e:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8016f32:	460e      	mov	r6, r1
 8016f34:	4617      	mov	r7, r2
 8016f36:	469b      	mov	fp, r3
 8016f38:	f240 8116 	bls.w	8017168 <uxr_write_framed_msg+0x258>
 8016f3c:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8016f40:	2302      	movs	r3, #2
 8016f42:	2a01      	cmp	r2, #1
 8016f44:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8016f48:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016f4c:	f240 8091 	bls.w	8017072 <uxr_write_framed_msg+0x162>
 8016f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f52:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8016f56:	b2d9      	uxtb	r1, r3
 8016f58:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8016f5c:	2203      	movs	r2, #3
 8016f5e:	2b01      	cmp	r3, #1
 8016f60:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016f64:	f240 809a 	bls.w	801709c <uxr_write_framed_msg+0x18c>
 8016f68:	18a3      	adds	r3, r4, r2
 8016f6a:	3201      	adds	r2, #1
 8016f6c:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8016f70:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f76:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016f7a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016f7e:	2901      	cmp	r1, #1
 8016f80:	eb04 0102 	add.w	r1, r4, r2
 8016f84:	f240 8101 	bls.w	801718a <uxr_write_framed_msg+0x27a>
 8016f88:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8016f8c:	3201      	adds	r2, #1
 8016f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f90:	b2d2      	uxtb	r2, r2
 8016f92:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	f000 8106 	beq.w	80171a8 <uxr_write_framed_msg+0x298>
 8016f9c:	f04f 0a00 	mov.w	sl, #0
 8016fa0:	46d1      	mov	r9, sl
 8016fa2:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8016fa6:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016faa:	2901      	cmp	r1, #1
 8016fac:	f240 80a3 	bls.w	80170f6 <uxr_write_framed_msg+0x1e6>
 8016fb0:	2a29      	cmp	r2, #41	; 0x29
 8016fb2:	d87f      	bhi.n	80170b4 <uxr_write_framed_msg+0x1a4>
 8016fb4:	18a1      	adds	r1, r4, r2
 8016fb6:	3201      	adds	r2, #1
 8016fb8:	b2d2      	uxtb	r2, r2
 8016fba:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8016fbe:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016fc2:	ea8a 0303 	eor.w	r3, sl, r3
 8016fc6:	4984      	ldr	r1, [pc, #528]	; (80171d8 <uxr_write_framed_msg+0x2c8>)
 8016fc8:	b2db      	uxtb	r3, r3
 8016fca:	f109 0901 	add.w	r9, r9, #1
 8016fce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016fd2:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8016fd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016fd8:	454b      	cmp	r3, r9
 8016fda:	d8e2      	bhi.n	8016fa2 <uxr_write_framed_msg+0x92>
 8016fdc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016fe0:	fa5f f98a 	uxtb.w	r9, sl
 8016fe4:	9301      	str	r3, [sp, #4]
 8016fe6:	f04f 0b00 	mov.w	fp, #0
 8016fea:	f88d 900c 	strb.w	r9, [sp, #12]
 8016fee:	f88d 300d 	strb.w	r3, [sp, #13]
 8016ff2:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8016ff6:	fa5f f18a 	uxtb.w	r1, sl
 8016ffa:	2901      	cmp	r1, #1
 8016ffc:	d920      	bls.n	8017040 <uxr_write_framed_msg+0x130>
 8016ffe:	2a29      	cmp	r2, #41	; 0x29
 8017000:	f240 808b 	bls.w	801711a <uxr_write_framed_msg+0x20a>
 8017004:	2500      	movs	r5, #0
 8017006:	e000      	b.n	801700a <uxr_write_framed_msg+0xfa>
 8017008:	b160      	cbz	r0, 8017024 <uxr_write_framed_msg+0x114>
 801700a:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801700e:	1b52      	subs	r2, r2, r5
 8017010:	4421      	add	r1, r4
 8017012:	4643      	mov	r3, r8
 8017014:	4638      	mov	r0, r7
 8017016:	47b0      	blx	r6
 8017018:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801701c:	4405      	add	r5, r0
 801701e:	4295      	cmp	r5, r2
 8017020:	d3f2      	bcc.n	8017008 <uxr_write_framed_msg+0xf8>
 8017022:	d003      	beq.n	801702c <uxr_write_framed_msg+0x11c>
 8017024:	2000      	movs	r0, #0
 8017026:	b005      	add	sp, #20
 8017028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801702c:	fa5f f18a 	uxtb.w	r1, sl
 8017030:	f04f 0300 	mov.w	r3, #0
 8017034:	2901      	cmp	r1, #1
 8017036:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801703a:	f04f 0200 	mov.w	r2, #0
 801703e:	d86c      	bhi.n	801711a <uxr_write_framed_msg+0x20a>
 8017040:	1c51      	adds	r1, r2, #1
 8017042:	b2c9      	uxtb	r1, r1
 8017044:	2929      	cmp	r1, #41	; 0x29
 8017046:	d8dd      	bhi.n	8017004 <uxr_write_framed_msg+0xf4>
 8017048:	18a0      	adds	r0, r4, r2
 801704a:	3202      	adds	r2, #2
 801704c:	f089 0920 	eor.w	r9, r9, #32
 8017050:	b2d2      	uxtb	r2, r2
 8017052:	4659      	mov	r1, fp
 8017054:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8017058:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 801705c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8017060:	f04f 0b01 	mov.w	fp, #1
 8017064:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017068:	2900      	cmp	r1, #0
 801706a:	d162      	bne.n	8017132 <uxr_write_framed_msg+0x222>
 801706c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017070:	e7bf      	b.n	8016ff2 <uxr_write_framed_msg+0xe2>
 8017072:	2204      	movs	r2, #4
 8017074:	2503      	movs	r5, #3
 8017076:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017078:	4423      	add	r3, r4
 801707a:	b2c9      	uxtb	r1, r1
 801707c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8017080:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8017084:	4425      	add	r5, r4
 8017086:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801708a:	f080 0020 	eor.w	r0, r0, #32
 801708e:	2b01      	cmp	r3, #1
 8017090:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8017094:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017098:	f63f af66 	bhi.w	8016f68 <uxr_write_framed_msg+0x58>
 801709c:	18a3      	adds	r3, r4, r2
 801709e:	f081 0120 	eor.w	r1, r1, #32
 80170a2:	3202      	adds	r2, #2
 80170a4:	207d      	movs	r0, #125	; 0x7d
 80170a6:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 80170aa:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 80170ae:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80170b2:	e75f      	b.n	8016f74 <uxr_write_framed_msg+0x64>
 80170b4:	2500      	movs	r5, #0
 80170b6:	e001      	b.n	80170bc <uxr_write_framed_msg+0x1ac>
 80170b8:	2800      	cmp	r0, #0
 80170ba:	d0b3      	beq.n	8017024 <uxr_write_framed_msg+0x114>
 80170bc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80170c0:	1b52      	subs	r2, r2, r5
 80170c2:	4421      	add	r1, r4
 80170c4:	4643      	mov	r3, r8
 80170c6:	4638      	mov	r0, r7
 80170c8:	47b0      	blx	r6
 80170ca:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80170ce:	4405      	add	r5, r0
 80170d0:	4295      	cmp	r5, r2
 80170d2:	d3f1      	bcc.n	80170b8 <uxr_write_framed_msg+0x1a8>
 80170d4:	d1a6      	bne.n	8017024 <uxr_write_framed_msg+0x114>
 80170d6:	f04f 0300 	mov.w	r3, #0
 80170da:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80170de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170e0:	454b      	cmp	r3, r9
 80170e2:	d971      	bls.n	80171c8 <uxr_write_framed_msg+0x2b8>
 80170e4:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80170e8:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80170ec:	2901      	cmp	r1, #1
 80170ee:	f04f 0200 	mov.w	r2, #0
 80170f2:	f63f af5d 	bhi.w	8016fb0 <uxr_write_framed_msg+0xa0>
 80170f6:	1c51      	adds	r1, r2, #1
 80170f8:	b2c9      	uxtb	r1, r1
 80170fa:	2929      	cmp	r1, #41	; 0x29
 80170fc:	d8da      	bhi.n	80170b4 <uxr_write_framed_msg+0x1a4>
 80170fe:	18a0      	adds	r0, r4, r2
 8017100:	3202      	adds	r2, #2
 8017102:	b2d2      	uxtb	r2, r2
 8017104:	f083 0120 	eor.w	r1, r3, #32
 8017108:	f04f 057d 	mov.w	r5, #125	; 0x7d
 801710c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8017110:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8017114:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017118:	e753      	b.n	8016fc2 <uxr_write_framed_msg+0xb2>
 801711a:	18a0      	adds	r0, r4, r2
 801711c:	3201      	adds	r2, #1
 801711e:	b2d2      	uxtb	r2, r2
 8017120:	4659      	mov	r1, fp
 8017122:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8017126:	f04f 0b01 	mov.w	fp, #1
 801712a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801712e:	2900      	cmp	r1, #0
 8017130:	d09c      	beq.n	801706c <uxr_write_framed_msg+0x15c>
 8017132:	2500      	movs	r5, #0
 8017134:	e002      	b.n	801713c <uxr_write_framed_msg+0x22c>
 8017136:	2800      	cmp	r0, #0
 8017138:	f43f af74 	beq.w	8017024 <uxr_write_framed_msg+0x114>
 801713c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8017140:	1b52      	subs	r2, r2, r5
 8017142:	4421      	add	r1, r4
 8017144:	4643      	mov	r3, r8
 8017146:	4638      	mov	r0, r7
 8017148:	47b0      	blx	r6
 801714a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801714e:	4405      	add	r5, r0
 8017150:	4295      	cmp	r5, r2
 8017152:	d3f0      	bcc.n	8017136 <uxr_write_framed_msg+0x226>
 8017154:	f47f af66 	bne.w	8017024 <uxr_write_framed_msg+0x114>
 8017158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801715a:	2300      	movs	r3, #0
 801715c:	b290      	uxth	r0, r2
 801715e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8017162:	b005      	add	sp, #20
 8017164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017168:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801716c:	f085 0520 	eor.w	r5, r5, #32
 8017170:	2303      	movs	r3, #3
 8017172:	217d      	movs	r1, #125	; 0x7d
 8017174:	2a01      	cmp	r2, #1
 8017176:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 801717a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801717e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8017182:	d814      	bhi.n	80171ae <uxr_write_framed_msg+0x29e>
 8017184:	2205      	movs	r2, #5
 8017186:	2504      	movs	r5, #4
 8017188:	e775      	b.n	8017076 <uxr_write_framed_msg+0x166>
 801718a:	f083 0320 	eor.w	r3, r3, #32
 801718e:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8017192:	3202      	adds	r2, #2
 8017194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017196:	b2d2      	uxtb	r2, r2
 8017198:	207d      	movs	r0, #125	; 0x7d
 801719a:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801719e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	f47f aefa 	bne.w	8016f9c <uxr_write_framed_msg+0x8c>
 80171a8:	9301      	str	r3, [sp, #4]
 80171aa:	4699      	mov	r9, r3
 80171ac:	e71b      	b.n	8016fe6 <uxr_write_framed_msg+0xd6>
 80171ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171b0:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80171b4:	b2d9      	uxtb	r1, r3
 80171b6:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80171ba:	2204      	movs	r2, #4
 80171bc:	2b01      	cmp	r3, #1
 80171be:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80171c2:	f63f aed1 	bhi.w	8016f68 <uxr_write_framed_msg+0x58>
 80171c6:	e769      	b.n	801709c <uxr_write_framed_msg+0x18c>
 80171c8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80171cc:	fa5f f98a 	uxtb.w	r9, sl
 80171d0:	9301      	str	r3, [sp, #4]
 80171d2:	2200      	movs	r2, #0
 80171d4:	e707      	b.n	8016fe6 <uxr_write_framed_msg+0xd6>
 80171d6:	bf00      	nop
 80171d8:	08019ff8 	.word	0x08019ff8

080171dc <uxr_framing_read_transport>:
 80171dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171e0:	4604      	mov	r4, r0
 80171e2:	b083      	sub	sp, #12
 80171e4:	461f      	mov	r7, r3
 80171e6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80171ea:	4689      	mov	r9, r1
 80171ec:	4692      	mov	sl, r2
 80171ee:	f7fa fa07 	bl	8011600 <uxr_millis>
 80171f2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80171f6:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80171fa:	42b3      	cmp	r3, r6
 80171fc:	4680      	mov	r8, r0
 80171fe:	d05f      	beq.n	80172c0 <uxr_framing_read_transport+0xe4>
 8017200:	d81b      	bhi.n	801723a <uxr_framing_read_transport+0x5e>
 8017202:	1e75      	subs	r5, r6, #1
 8017204:	1aed      	subs	r5, r5, r3
 8017206:	b2ed      	uxtb	r5, r5
 8017208:	2600      	movs	r6, #0
 801720a:	455d      	cmp	r5, fp
 801720c:	d81e      	bhi.n	801724c <uxr_framing_read_transport+0x70>
 801720e:	19ab      	adds	r3, r5, r6
 8017210:	455b      	cmp	r3, fp
 8017212:	bf84      	itt	hi
 8017214:	ebab 0605 	subhi.w	r6, fp, r5
 8017218:	b2f6      	uxtbhi	r6, r6
 801721a:	b9e5      	cbnz	r5, 8017256 <uxr_framing_read_transport+0x7a>
 801721c:	f04f 0b00 	mov.w	fp, #0
 8017220:	f7fa f9ee 	bl	8011600 <uxr_millis>
 8017224:	683b      	ldr	r3, [r7, #0]
 8017226:	eba0 0008 	sub.w	r0, r0, r8
 801722a:	1a1b      	subs	r3, r3, r0
 801722c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017230:	4658      	mov	r0, fp
 8017232:	603b      	str	r3, [r7, #0]
 8017234:	b003      	add	sp, #12
 8017236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801723a:	2e00      	cmp	r6, #0
 801723c:	d048      	beq.n	80172d0 <uxr_framing_read_transport+0xf4>
 801723e:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8017242:	b2ed      	uxtb	r5, r5
 8017244:	3e01      	subs	r6, #1
 8017246:	455d      	cmp	r5, fp
 8017248:	b2f6      	uxtb	r6, r6
 801724a:	d9e0      	bls.n	801720e <uxr_framing_read_transport+0x32>
 801724c:	fa5f f58b 	uxtb.w	r5, fp
 8017250:	2600      	movs	r6, #0
 8017252:	2d00      	cmp	r5, #0
 8017254:	d0e2      	beq.n	801721c <uxr_framing_read_transport+0x40>
 8017256:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801725a:	3102      	adds	r1, #2
 801725c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801725e:	9300      	str	r3, [sp, #0]
 8017260:	683b      	ldr	r3, [r7, #0]
 8017262:	4421      	add	r1, r4
 8017264:	462a      	mov	r2, r5
 8017266:	4650      	mov	r0, sl
 8017268:	47c8      	blx	r9
 801726a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801726e:	4a1b      	ldr	r2, [pc, #108]	; (80172dc <uxr_framing_read_transport+0x100>)
 8017270:	4403      	add	r3, r0
 8017272:	0859      	lsrs	r1, r3, #1
 8017274:	fba2 2101 	umull	r2, r1, r2, r1
 8017278:	0889      	lsrs	r1, r1, #2
 801727a:	222a      	movs	r2, #42	; 0x2a
 801727c:	fb02 3111 	mls	r1, r2, r1, r3
 8017280:	4683      	mov	fp, r0
 8017282:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8017286:	2800      	cmp	r0, #0
 8017288:	d0c8      	beq.n	801721c <uxr_framing_read_transport+0x40>
 801728a:	42a8      	cmp	r0, r5
 801728c:	d1c8      	bne.n	8017220 <uxr_framing_read_transport+0x44>
 801728e:	b31e      	cbz	r6, 80172d8 <uxr_framing_read_transport+0xfc>
 8017290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017292:	9300      	str	r3, [sp, #0]
 8017294:	3102      	adds	r1, #2
 8017296:	4421      	add	r1, r4
 8017298:	4632      	mov	r2, r6
 801729a:	2300      	movs	r3, #0
 801729c:	4650      	mov	r0, sl
 801729e:	47c8      	blx	r9
 80172a0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80172a4:	490d      	ldr	r1, [pc, #52]	; (80172dc <uxr_framing_read_transport+0x100>)
 80172a6:	181a      	adds	r2, r3, r0
 80172a8:	0853      	lsrs	r3, r2, #1
 80172aa:	fba1 1303 	umull	r1, r3, r1, r3
 80172ae:	089b      	lsrs	r3, r3, #2
 80172b0:	212a      	movs	r1, #42	; 0x2a
 80172b2:	fb01 2313 	mls	r3, r1, r3, r2
 80172b6:	eb00 0b05 	add.w	fp, r0, r5
 80172ba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80172be:	e7af      	b.n	8017220 <uxr_framing_read_transport+0x44>
 80172c0:	2600      	movs	r6, #0
 80172c2:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80172c6:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80172c8:	d9c0      	bls.n	801724c <uxr_framing_read_transport+0x70>
 80172ca:	2102      	movs	r1, #2
 80172cc:	2529      	movs	r5, #41	; 0x29
 80172ce:	e7c5      	b.n	801725c <uxr_framing_read_transport+0x80>
 80172d0:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80172d4:	b2ed      	uxtb	r5, r5
 80172d6:	e798      	b.n	801720a <uxr_framing_read_transport+0x2e>
 80172d8:	46ab      	mov	fp, r5
 80172da:	e7a1      	b.n	8017220 <uxr_framing_read_transport+0x44>
 80172dc:	30c30c31 	.word	0x30c30c31

080172e0 <uxr_read_framed_msg>:
 80172e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172e4:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 80172e8:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 80172ec:	42ae      	cmp	r6, r5
 80172ee:	b083      	sub	sp, #12
 80172f0:	4604      	mov	r4, r0
 80172f2:	461f      	mov	r7, r3
 80172f4:	4689      	mov	r9, r1
 80172f6:	4692      	mov	sl, r2
 80172f8:	f000 817d 	beq.w	80175f6 <uxr_read_framed_msg+0x316>
 80172fc:	7823      	ldrb	r3, [r4, #0]
 80172fe:	4ecc      	ldr	r6, [pc, #816]	; (8017630 <uxr_read_framed_msg+0x350>)
 8017300:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8017634 <uxr_read_framed_msg+0x354>
 8017304:	2b07      	cmp	r3, #7
 8017306:	d8fd      	bhi.n	8017304 <uxr_read_framed_msg+0x24>
 8017308:	e8df f013 	tbh	[pc, r3, lsl #1]
 801730c:	00f40113 	.word	0x00f40113
 8017310:	00b700d4 	.word	0x00b700d4
 8017314:	004d008e 	.word	0x004d008e
 8017318:	00080030 	.word	0x00080030
 801731c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017320:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017324:	4298      	cmp	r0, r3
 8017326:	f000 8141 	beq.w	80175ac <uxr_read_framed_msg+0x2cc>
 801732a:	18e2      	adds	r2, r4, r3
 801732c:	7891      	ldrb	r1, [r2, #2]
 801732e:	297d      	cmp	r1, #125	; 0x7d
 8017330:	f000 81a2 	beq.w	8017678 <uxr_read_framed_msg+0x398>
 8017334:	3301      	adds	r3, #1
 8017336:	085a      	lsrs	r2, r3, #1
 8017338:	fba6 0202 	umull	r0, r2, r6, r2
 801733c:	0892      	lsrs	r2, r2, #2
 801733e:	202a      	movs	r0, #42	; 0x2a
 8017340:	fb00 3312 	mls	r3, r0, r2, r3
 8017344:	297e      	cmp	r1, #126	; 0x7e
 8017346:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801734a:	f000 8251 	beq.w	80177f0 <uxr_read_framed_msg+0x510>
 801734e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017350:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017352:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017356:	b29b      	uxth	r3, r3
 8017358:	2100      	movs	r1, #0
 801735a:	429a      	cmp	r2, r3
 801735c:	86a3      	strh	r3, [r4, #52]	; 0x34
 801735e:	7021      	strb	r1, [r4, #0]
 8017360:	f000 8182 	beq.w	8017668 <uxr_read_framed_msg+0x388>
 8017364:	2000      	movs	r0, #0
 8017366:	b003      	add	sp, #12
 8017368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801736c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017370:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017374:	4298      	cmp	r0, r3
 8017376:	f000 8128 	beq.w	80175ca <uxr_read_framed_msg+0x2ea>
 801737a:	18e2      	adds	r2, r4, r3
 801737c:	7891      	ldrb	r1, [r2, #2]
 801737e:	297d      	cmp	r1, #125	; 0x7d
 8017380:	f000 8196 	beq.w	80176b0 <uxr_read_framed_msg+0x3d0>
 8017384:	3301      	adds	r3, #1
 8017386:	085a      	lsrs	r2, r3, #1
 8017388:	fba6 0202 	umull	r0, r2, r6, r2
 801738c:	0892      	lsrs	r2, r2, #2
 801738e:	202a      	movs	r0, #42	; 0x2a
 8017390:	fb00 3312 	mls	r3, r0, r2, r3
 8017394:	297e      	cmp	r1, #126	; 0x7e
 8017396:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801739a:	f000 8219 	beq.w	80177d0 <uxr_read_framed_msg+0x4f0>
 801739e:	2307      	movs	r3, #7
 80173a0:	86a1      	strh	r1, [r4, #52]	; 0x34
 80173a2:	7023      	strb	r3, [r4, #0]
 80173a4:	e7ae      	b.n	8017304 <uxr_read_framed_msg+0x24>
 80173a6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80173a8:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80173aa:	429d      	cmp	r5, r3
 80173ac:	d937      	bls.n	801741e <uxr_read_framed_msg+0x13e>
 80173ae:	ee07 9a90 	vmov	s15, r9
 80173b2:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80173b6:	e01e      	b.n	80173f6 <uxr_read_framed_msg+0x116>
 80173b8:	f89e e002 	ldrb.w	lr, [lr, #2]
 80173bc:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 80173c0:	f000 80d2 	beq.w	8017568 <uxr_read_framed_msg+0x288>
 80173c4:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80173c8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80173cc:	f000 8214 	beq.w	80177f8 <uxr_read_framed_msg+0x518>
 80173d0:	f807 e003 	strb.w	lr, [r7, r3]
 80173d4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80173d6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80173d8:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80173da:	ea80 010e 	eor.w	r1, r0, lr
 80173de:	b2c9      	uxtb	r1, r1
 80173e0:	3301      	adds	r3, #1
 80173e2:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80173ec:	42ab      	cmp	r3, r5
 80173ee:	86e2      	strh	r2, [r4, #54]	; 0x36
 80173f0:	8663      	strh	r3, [r4, #50]	; 0x32
 80173f2:	f080 8121 	bcs.w	8017638 <uxr_read_framed_msg+0x358>
 80173f6:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 80173fa:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80173fe:	f101 0b01 	add.w	fp, r1, #1
 8017402:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8017406:	fba6 9202 	umull	r9, r2, r6, r2
 801740a:	0892      	lsrs	r2, r2, #2
 801740c:	4288      	cmp	r0, r1
 801740e:	eb04 0e01 	add.w	lr, r4, r1
 8017412:	fb0c b212 	mls	r2, ip, r2, fp
 8017416:	d1cf      	bne.n	80173b8 <uxr_read_framed_msg+0xd8>
 8017418:	ee17 9a90 	vmov	r9, s15
 801741c:	429d      	cmp	r5, r3
 801741e:	f040 8112 	bne.w	8017646 <uxr_read_framed_msg+0x366>
 8017422:	2306      	movs	r3, #6
 8017424:	7023      	strb	r3, [r4, #0]
 8017426:	e76d      	b.n	8017304 <uxr_read_framed_msg+0x24>
 8017428:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801742c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017430:	4298      	cmp	r0, r3
 8017432:	f000 80bb 	beq.w	80175ac <uxr_read_framed_msg+0x2cc>
 8017436:	18e2      	adds	r2, r4, r3
 8017438:	7891      	ldrb	r1, [r2, #2]
 801743a:	297d      	cmp	r1, #125	; 0x7d
 801743c:	f000 8153 	beq.w	80176e6 <uxr_read_framed_msg+0x406>
 8017440:	3301      	adds	r3, #1
 8017442:	085a      	lsrs	r2, r3, #1
 8017444:	fba6 0202 	umull	r0, r2, r6, r2
 8017448:	0892      	lsrs	r2, r2, #2
 801744a:	202a      	movs	r0, #42	; 0x2a
 801744c:	fb00 3212 	mls	r2, r0, r2, r3
 8017450:	297e      	cmp	r1, #126	; 0x7e
 8017452:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017456:	f000 81cb 	beq.w	80177f0 <uxr_read_framed_msg+0x510>
 801745a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801745c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017460:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017462:	b29b      	uxth	r3, r3
 8017464:	2000      	movs	r0, #0
 8017466:	428b      	cmp	r3, r1
 8017468:	8623      	strh	r3, [r4, #48]	; 0x30
 801746a:	8660      	strh	r0, [r4, #50]	; 0x32
 801746c:	86e0      	strh	r0, [r4, #54]	; 0x36
 801746e:	f240 80db 	bls.w	8017628 <uxr_read_framed_msg+0x348>
 8017472:	7020      	strb	r0, [r4, #0]
 8017474:	b003      	add	sp, #12
 8017476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801747a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801747e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017482:	4298      	cmp	r0, r3
 8017484:	f000 80a1 	beq.w	80175ca <uxr_read_framed_msg+0x2ea>
 8017488:	18e2      	adds	r2, r4, r3
 801748a:	7891      	ldrb	r1, [r2, #2]
 801748c:	297d      	cmp	r1, #125	; 0x7d
 801748e:	f000 8167 	beq.w	8017760 <uxr_read_framed_msg+0x480>
 8017492:	3301      	adds	r3, #1
 8017494:	085a      	lsrs	r2, r3, #1
 8017496:	fba6 0202 	umull	r0, r2, r6, r2
 801749a:	0892      	lsrs	r2, r2, #2
 801749c:	202a      	movs	r0, #42	; 0x2a
 801749e:	fb00 3312 	mls	r3, r0, r2, r3
 80174a2:	297e      	cmp	r1, #126	; 0x7e
 80174a4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80174a8:	f000 8192 	beq.w	80177d0 <uxr_read_framed_msg+0x4f0>
 80174ac:	2304      	movs	r3, #4
 80174ae:	8621      	strh	r1, [r4, #48]	; 0x30
 80174b0:	7023      	strb	r3, [r4, #0]
 80174b2:	e727      	b.n	8017304 <uxr_read_framed_msg+0x24>
 80174b4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80174b8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80174bc:	4290      	cmp	r0, r2
 80174be:	f000 80b1 	beq.w	8017624 <uxr_read_framed_msg+0x344>
 80174c2:	18a3      	adds	r3, r4, r2
 80174c4:	7899      	ldrb	r1, [r3, #2]
 80174c6:	297d      	cmp	r1, #125	; 0x7d
 80174c8:	f000 8166 	beq.w	8017798 <uxr_read_framed_msg+0x4b8>
 80174cc:	3201      	adds	r2, #1
 80174ce:	0850      	lsrs	r0, r2, #1
 80174d0:	fba6 3000 	umull	r3, r0, r6, r0
 80174d4:	0880      	lsrs	r0, r0, #2
 80174d6:	232a      	movs	r3, #42	; 0x2a
 80174d8:	fb03 2210 	mls	r2, r3, r0, r2
 80174dc:	297e      	cmp	r1, #126	; 0x7e
 80174de:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80174e2:	f000 8187 	beq.w	80177f4 <uxr_read_framed_msg+0x514>
 80174e6:	7863      	ldrb	r3, [r4, #1]
 80174e8:	428b      	cmp	r3, r1
 80174ea:	bf0c      	ite	eq
 80174ec:	2303      	moveq	r3, #3
 80174ee:	2300      	movne	r3, #0
 80174f0:	7023      	strb	r3, [r4, #0]
 80174f2:	e707      	b.n	8017304 <uxr_read_framed_msg+0x24>
 80174f4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80174f8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80174fc:	2200      	movs	r2, #0
 80174fe:	4299      	cmp	r1, r3
 8017500:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8017504:	d063      	beq.n	80175ce <uxr_read_framed_msg+0x2ee>
 8017506:	18e2      	adds	r2, r4, r3
 8017508:	7892      	ldrb	r2, [r2, #2]
 801750a:	2a7d      	cmp	r2, #125	; 0x7d
 801750c:	f000 8107 	beq.w	801771e <uxr_read_framed_msg+0x43e>
 8017510:	1c59      	adds	r1, r3, #1
 8017512:	084b      	lsrs	r3, r1, #1
 8017514:	fba6 0303 	umull	r0, r3, r6, r3
 8017518:	089b      	lsrs	r3, r3, #2
 801751a:	202a      	movs	r0, #42	; 0x2a
 801751c:	fb00 1313 	mls	r3, r0, r3, r1
 8017520:	2a7e      	cmp	r2, #126	; 0x7e
 8017522:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8017526:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801752a:	d050      	beq.n	80175ce <uxr_read_framed_msg+0x2ee>
 801752c:	2302      	movs	r3, #2
 801752e:	7023      	strb	r3, [r4, #0]
 8017530:	e6e8      	b.n	8017304 <uxr_read_framed_msg+0x24>
 8017532:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8017536:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801753a:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801753e:	1c51      	adds	r1, r2, #1
 8017540:	084b      	lsrs	r3, r1, #1
 8017542:	fba6 5303 	umull	r5, r3, r6, r3
 8017546:	089b      	lsrs	r3, r3, #2
 8017548:	fb0c 1313 	mls	r3, ip, r3, r1
 801754c:	4596      	cmp	lr, r2
 801754e:	eb04 0002 	add.w	r0, r4, r2
 8017552:	b2da      	uxtb	r2, r3
 8017554:	f43f af06 	beq.w	8017364 <uxr_read_framed_msg+0x84>
 8017558:	7883      	ldrb	r3, [r0, #2]
 801755a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801755e:	2b7e      	cmp	r3, #126	; 0x7e
 8017560:	d1ed      	bne.n	801753e <uxr_read_framed_msg+0x25e>
 8017562:	2301      	movs	r3, #1
 8017564:	7023      	strb	r3, [r4, #0]
 8017566:	e6cd      	b.n	8017304 <uxr_read_framed_msg+0x24>
 8017568:	f101 0b01 	add.w	fp, r1, #1
 801756c:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8017570:	fba6 e202 	umull	lr, r2, r6, r2
 8017574:	3102      	adds	r1, #2
 8017576:	0892      	lsrs	r2, r2, #2
 8017578:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 801757c:	fb0c b212 	mls	r2, ip, r2, fp
 8017580:	fba6 9e0e 	umull	r9, lr, r6, lr
 8017584:	eb04 0b02 	add.w	fp, r4, r2
 8017588:	b2d2      	uxtb	r2, r2
 801758a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801758e:	4290      	cmp	r0, r2
 8017590:	fb0c 111e 	mls	r1, ip, lr, r1
 8017594:	f43f af40 	beq.w	8017418 <uxr_read_framed_msg+0x138>
 8017598:	f89b e002 	ldrb.w	lr, [fp, #2]
 801759c:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80175a0:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80175a4:	d036      	beq.n	8017614 <uxr_read_framed_msg+0x334>
 80175a6:	f08e 0e20 	eor.w	lr, lr, #32
 80175aa:	e711      	b.n	80173d0 <uxr_read_framed_msg+0xf0>
 80175ac:	2301      	movs	r3, #1
 80175ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80175b0:	4649      	mov	r1, r9
 80175b2:	e9cd 2300 	strd	r2, r3, [sp]
 80175b6:	4620      	mov	r0, r4
 80175b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175ba:	4652      	mov	r2, sl
 80175bc:	f7ff fe0e 	bl	80171dc <uxr_framing_read_transport>
 80175c0:	2800      	cmp	r0, #0
 80175c2:	f43f aecf 	beq.w	8017364 <uxr_read_framed_msg+0x84>
 80175c6:	7823      	ldrb	r3, [r4, #0]
 80175c8:	e69c      	b.n	8017304 <uxr_read_framed_msg+0x24>
 80175ca:	2302      	movs	r3, #2
 80175cc:	e7ef      	b.n	80175ae <uxr_read_framed_msg+0x2ce>
 80175ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80175d0:	2304      	movs	r3, #4
 80175d2:	e9cd 2300 	strd	r2, r3, [sp]
 80175d6:	4649      	mov	r1, r9
 80175d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175da:	4652      	mov	r2, sl
 80175dc:	4620      	mov	r0, r4
 80175de:	f7ff fdfd 	bl	80171dc <uxr_framing_read_transport>
 80175e2:	2800      	cmp	r0, #0
 80175e4:	d1ef      	bne.n	80175c6 <uxr_read_framed_msg+0x2e6>
 80175e6:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80175ea:	387e      	subs	r0, #126	; 0x7e
 80175ec:	bf18      	it	ne
 80175ee:	2001      	movne	r0, #1
 80175f0:	2800      	cmp	r0, #0
 80175f2:	d0e8      	beq.n	80175c6 <uxr_read_framed_msg+0x2e6>
 80175f4:	e6b6      	b.n	8017364 <uxr_read_framed_msg+0x84>
 80175f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80175f8:	2305      	movs	r3, #5
 80175fa:	e9cd 5300 	strd	r5, r3, [sp]
 80175fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017600:	f7ff fdec 	bl	80171dc <uxr_framing_read_transport>
 8017604:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017608:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801760c:	429a      	cmp	r2, r3
 801760e:	f43f aea9 	beq.w	8017364 <uxr_read_framed_msg+0x84>
 8017612:	e673      	b.n	80172fc <uxr_read_framed_msg+0x1c>
 8017614:	429d      	cmp	r5, r3
 8017616:	ee17 9a90 	vmov	r9, s15
 801761a:	f43f af02 	beq.w	8017422 <uxr_read_framed_msg+0x142>
 801761e:	2301      	movs	r3, #1
 8017620:	7023      	strb	r3, [r4, #0]
 8017622:	e66f      	b.n	8017304 <uxr_read_framed_msg+0x24>
 8017624:	2303      	movs	r3, #3
 8017626:	e7c2      	b.n	80175ae <uxr_read_framed_msg+0x2ce>
 8017628:	2305      	movs	r3, #5
 801762a:	7023      	strb	r3, [r4, #0]
 801762c:	e66a      	b.n	8017304 <uxr_read_framed_msg+0x24>
 801762e:	bf00      	nop
 8017630:	30c30c31 	.word	0x30c30c31
 8017634:	08019ff8 	.word	0x08019ff8
 8017638:	ee17 9a90 	vmov	r9, s15
 801763c:	f43f aef1 	beq.w	8017422 <uxr_read_framed_msg+0x142>
 8017640:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8017644:	d08d      	beq.n	8017562 <uxr_read_framed_msg+0x282>
 8017646:	1aeb      	subs	r3, r5, r3
 8017648:	3302      	adds	r3, #2
 801764a:	9301      	str	r3, [sp, #4]
 801764c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801764e:	9300      	str	r3, [sp, #0]
 8017650:	4652      	mov	r2, sl
 8017652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017654:	4649      	mov	r1, r9
 8017656:	4620      	mov	r0, r4
 8017658:	f7ff fdc0 	bl	80171dc <uxr_framing_read_transport>
 801765c:	fab0 f080 	clz	r0, r0
 8017660:	0940      	lsrs	r0, r0, #5
 8017662:	2800      	cmp	r0, #0
 8017664:	d0af      	beq.n	80175c6 <uxr_read_framed_msg+0x2e6>
 8017666:	e67d      	b.n	8017364 <uxr_read_framed_msg+0x84>
 8017668:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801766a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801766e:	7013      	strb	r3, [r2, #0]
 8017670:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8017672:	b003      	add	sp, #12
 8017674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017678:	1c59      	adds	r1, r3, #1
 801767a:	084a      	lsrs	r2, r1, #1
 801767c:	fba6 5202 	umull	r5, r2, r6, r2
 8017680:	0892      	lsrs	r2, r2, #2
 8017682:	252a      	movs	r5, #42	; 0x2a
 8017684:	fb05 1212 	mls	r2, r5, r2, r1
 8017688:	b2d1      	uxtb	r1, r2
 801768a:	4288      	cmp	r0, r1
 801768c:	d08e      	beq.n	80175ac <uxr_read_framed_msg+0x2cc>
 801768e:	3302      	adds	r3, #2
 8017690:	4422      	add	r2, r4
 8017692:	0858      	lsrs	r0, r3, #1
 8017694:	fba6 1000 	umull	r1, r0, r6, r0
 8017698:	7891      	ldrb	r1, [r2, #2]
 801769a:	0882      	lsrs	r2, r0, #2
 801769c:	fb05 3312 	mls	r3, r5, r2, r3
 80176a0:	297e      	cmp	r1, #126	; 0x7e
 80176a2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80176a6:	f000 80a3 	beq.w	80177f0 <uxr_read_framed_msg+0x510>
 80176aa:	f081 0120 	eor.w	r1, r1, #32
 80176ae:	e64e      	b.n	801734e <uxr_read_framed_msg+0x6e>
 80176b0:	1c59      	adds	r1, r3, #1
 80176b2:	084a      	lsrs	r2, r1, #1
 80176b4:	fba6 5202 	umull	r5, r2, r6, r2
 80176b8:	0892      	lsrs	r2, r2, #2
 80176ba:	252a      	movs	r5, #42	; 0x2a
 80176bc:	fb05 1212 	mls	r2, r5, r2, r1
 80176c0:	b2d1      	uxtb	r1, r2
 80176c2:	4288      	cmp	r0, r1
 80176c4:	d081      	beq.n	80175ca <uxr_read_framed_msg+0x2ea>
 80176c6:	3302      	adds	r3, #2
 80176c8:	4422      	add	r2, r4
 80176ca:	0858      	lsrs	r0, r3, #1
 80176cc:	fba6 1000 	umull	r1, r0, r6, r0
 80176d0:	7891      	ldrb	r1, [r2, #2]
 80176d2:	0882      	lsrs	r2, r0, #2
 80176d4:	fb05 3312 	mls	r3, r5, r2, r3
 80176d8:	297e      	cmp	r1, #126	; 0x7e
 80176da:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80176de:	d077      	beq.n	80177d0 <uxr_read_framed_msg+0x4f0>
 80176e0:	f081 0120 	eor.w	r1, r1, #32
 80176e4:	e65b      	b.n	801739e <uxr_read_framed_msg+0xbe>
 80176e6:	1c59      	adds	r1, r3, #1
 80176e8:	084a      	lsrs	r2, r1, #1
 80176ea:	fba6 5202 	umull	r5, r2, r6, r2
 80176ee:	0892      	lsrs	r2, r2, #2
 80176f0:	252a      	movs	r5, #42	; 0x2a
 80176f2:	fb05 1212 	mls	r2, r5, r2, r1
 80176f6:	b2d1      	uxtb	r1, r2
 80176f8:	4288      	cmp	r0, r1
 80176fa:	f43f af57 	beq.w	80175ac <uxr_read_framed_msg+0x2cc>
 80176fe:	3302      	adds	r3, #2
 8017700:	4422      	add	r2, r4
 8017702:	0858      	lsrs	r0, r3, #1
 8017704:	fba6 1000 	umull	r1, r0, r6, r0
 8017708:	7891      	ldrb	r1, [r2, #2]
 801770a:	0882      	lsrs	r2, r0, #2
 801770c:	fb05 3312 	mls	r3, r5, r2, r3
 8017710:	297e      	cmp	r1, #126	; 0x7e
 8017712:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017716:	d06b      	beq.n	80177f0 <uxr_read_framed_msg+0x510>
 8017718:	f081 0120 	eor.w	r1, r1, #32
 801771c:	e69d      	b.n	801745a <uxr_read_framed_msg+0x17a>
 801771e:	1c5d      	adds	r5, r3, #1
 8017720:	086a      	lsrs	r2, r5, #1
 8017722:	fba6 0202 	umull	r0, r2, r6, r2
 8017726:	0892      	lsrs	r2, r2, #2
 8017728:	202a      	movs	r0, #42	; 0x2a
 801772a:	fb00 5212 	mls	r2, r0, r2, r5
 801772e:	b2d5      	uxtb	r5, r2
 8017730:	42a9      	cmp	r1, r5
 8017732:	f43f af4c 	beq.w	80175ce <uxr_read_framed_msg+0x2ee>
 8017736:	3302      	adds	r3, #2
 8017738:	4422      	add	r2, r4
 801773a:	0859      	lsrs	r1, r3, #1
 801773c:	fba6 5101 	umull	r5, r1, r6, r1
 8017740:	7895      	ldrb	r5, [r2, #2]
 8017742:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8017746:	088a      	lsrs	r2, r1, #2
 8017748:	fb00 3312 	mls	r3, r0, r2, r3
 801774c:	2d7e      	cmp	r5, #126	; 0x7e
 801774e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017752:	f43f af3c 	beq.w	80175ce <uxr_read_framed_msg+0x2ee>
 8017756:	f085 0520 	eor.w	r5, r5, #32
 801775a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801775e:	e6e5      	b.n	801752c <uxr_read_framed_msg+0x24c>
 8017760:	1c59      	adds	r1, r3, #1
 8017762:	084a      	lsrs	r2, r1, #1
 8017764:	fba6 5202 	umull	r5, r2, r6, r2
 8017768:	0892      	lsrs	r2, r2, #2
 801776a:	252a      	movs	r5, #42	; 0x2a
 801776c:	fb05 1212 	mls	r2, r5, r2, r1
 8017770:	b2d1      	uxtb	r1, r2
 8017772:	4288      	cmp	r0, r1
 8017774:	f43f af29 	beq.w	80175ca <uxr_read_framed_msg+0x2ea>
 8017778:	3302      	adds	r3, #2
 801777a:	4422      	add	r2, r4
 801777c:	0858      	lsrs	r0, r3, #1
 801777e:	fba6 1000 	umull	r1, r0, r6, r0
 8017782:	7891      	ldrb	r1, [r2, #2]
 8017784:	0882      	lsrs	r2, r0, #2
 8017786:	fb05 3312 	mls	r3, r5, r2, r3
 801778a:	297e      	cmp	r1, #126	; 0x7e
 801778c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017790:	d01e      	beq.n	80177d0 <uxr_read_framed_msg+0x4f0>
 8017792:	f081 0120 	eor.w	r1, r1, #32
 8017796:	e689      	b.n	80174ac <uxr_read_framed_msg+0x1cc>
 8017798:	1c51      	adds	r1, r2, #1
 801779a:	084b      	lsrs	r3, r1, #1
 801779c:	fba6 5303 	umull	r5, r3, r6, r3
 80177a0:	089b      	lsrs	r3, r3, #2
 80177a2:	252a      	movs	r5, #42	; 0x2a
 80177a4:	fb05 1313 	mls	r3, r5, r3, r1
 80177a8:	b2d9      	uxtb	r1, r3
 80177aa:	4288      	cmp	r0, r1
 80177ac:	f43f af3a 	beq.w	8017624 <uxr_read_framed_msg+0x344>
 80177b0:	3202      	adds	r2, #2
 80177b2:	4423      	add	r3, r4
 80177b4:	0850      	lsrs	r0, r2, #1
 80177b6:	789b      	ldrb	r3, [r3, #2]
 80177b8:	fba6 1000 	umull	r1, r0, r6, r0
 80177bc:	0880      	lsrs	r0, r0, #2
 80177be:	fb05 2210 	mls	r2, r5, r0, r2
 80177c2:	2b7e      	cmp	r3, #126	; 0x7e
 80177c4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80177c8:	d014      	beq.n	80177f4 <uxr_read_framed_msg+0x514>
 80177ca:	f083 0120 	eor.w	r1, r3, #32
 80177ce:	e68a      	b.n	80174e6 <uxr_read_framed_msg+0x206>
 80177d0:	2302      	movs	r3, #2
 80177d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177d4:	4649      	mov	r1, r9
 80177d6:	e9cd 2300 	strd	r2, r3, [sp]
 80177da:	4620      	mov	r0, r4
 80177dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177de:	4652      	mov	r2, sl
 80177e0:	f7ff fcfc 	bl	80171dc <uxr_framing_read_transport>
 80177e4:	2800      	cmp	r0, #0
 80177e6:	f47f aeee 	bne.w	80175c6 <uxr_read_framed_msg+0x2e6>
 80177ea:	2301      	movs	r3, #1
 80177ec:	7023      	strb	r3, [r4, #0]
 80177ee:	e589      	b.n	8017304 <uxr_read_framed_msg+0x24>
 80177f0:	2301      	movs	r3, #1
 80177f2:	e7ee      	b.n	80177d2 <uxr_read_framed_msg+0x4f2>
 80177f4:	2303      	movs	r3, #3
 80177f6:	e7ec      	b.n	80177d2 <uxr_read_framed_msg+0x4f2>
 80177f8:	ee17 9a90 	vmov	r9, s15
 80177fc:	e6b1      	b.n	8017562 <uxr_read_framed_msg+0x282>
 80177fe:	bf00      	nop

08017800 <rcl_get_default_domain_id>:
 8017800:	b530      	push	{r4, r5, lr}
 8017802:	b083      	sub	sp, #12
 8017804:	2300      	movs	r3, #0
 8017806:	9300      	str	r3, [sp, #0]
 8017808:	b1d0      	cbz	r0, 8017840 <rcl_get_default_domain_id+0x40>
 801780a:	4604      	mov	r4, r0
 801780c:	4669      	mov	r1, sp
 801780e:	4815      	ldr	r0, [pc, #84]	; (8017864 <rcl_get_default_domain_id+0x64>)
 8017810:	f7fd fa6a 	bl	8014ce8 <rcutils_get_env>
 8017814:	4602      	mov	r2, r0
 8017816:	b110      	cbz	r0, 801781e <rcl_get_default_domain_id+0x1e>
 8017818:	2001      	movs	r0, #1
 801781a:	b003      	add	sp, #12
 801781c:	bd30      	pop	{r4, r5, pc}
 801781e:	9b00      	ldr	r3, [sp, #0]
 8017820:	b18b      	cbz	r3, 8017846 <rcl_get_default_domain_id+0x46>
 8017822:	7818      	ldrb	r0, [r3, #0]
 8017824:	2800      	cmp	r0, #0
 8017826:	d0f8      	beq.n	801781a <rcl_get_default_domain_id+0x1a>
 8017828:	4618      	mov	r0, r3
 801782a:	a901      	add	r1, sp, #4
 801782c:	9201      	str	r2, [sp, #4]
 801782e:	f000 fc07 	bl	8018040 <strtoul>
 8017832:	4605      	mov	r5, r0
 8017834:	b150      	cbz	r0, 801784c <rcl_get_default_domain_id+0x4c>
 8017836:	1c43      	adds	r3, r0, #1
 8017838:	d00d      	beq.n	8017856 <rcl_get_default_domain_id+0x56>
 801783a:	6025      	str	r5, [r4, #0]
 801783c:	2000      	movs	r0, #0
 801783e:	e7ec      	b.n	801781a <rcl_get_default_domain_id+0x1a>
 8017840:	200b      	movs	r0, #11
 8017842:	b003      	add	sp, #12
 8017844:	bd30      	pop	{r4, r5, pc}
 8017846:	4618      	mov	r0, r3
 8017848:	b003      	add	sp, #12
 801784a:	bd30      	pop	{r4, r5, pc}
 801784c:	9b01      	ldr	r3, [sp, #4]
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d0f2      	beq.n	801783a <rcl_get_default_domain_id+0x3a>
 8017854:	e7e0      	b.n	8017818 <rcl_get_default_domain_id+0x18>
 8017856:	f000 ffc9 	bl	80187ec <__errno>
 801785a:	6803      	ldr	r3, [r0, #0]
 801785c:	2b22      	cmp	r3, #34	; 0x22
 801785e:	d1ec      	bne.n	801783a <rcl_get_default_domain_id+0x3a>
 8017860:	e7da      	b.n	8017818 <rcl_get_default_domain_id+0x18>
 8017862:	bf00      	nop
 8017864:	0801a1f8 	.word	0x0801a1f8

08017868 <rcl_get_zero_initialized_guard_condition>:
 8017868:	4a03      	ldr	r2, [pc, #12]	; (8017878 <rcl_get_zero_initialized_guard_condition+0x10>)
 801786a:	4603      	mov	r3, r0
 801786c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017870:	e883 0003 	stmia.w	r3, {r0, r1}
 8017874:	4618      	mov	r0, r3
 8017876:	4770      	bx	lr
 8017878:	0801a208 	.word	0x0801a208

0801787c <rcl_guard_condition_init_from_rmw>:
 801787c:	b082      	sub	sp, #8
 801787e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017882:	b086      	sub	sp, #24
 8017884:	ac0c      	add	r4, sp, #48	; 0x30
 8017886:	4684      	mov	ip, r0
 8017888:	f844 3f04 	str.w	r3, [r4, #4]!
 801788c:	460f      	mov	r7, r1
 801788e:	4690      	mov	r8, r2
 8017890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017892:	ad01      	add	r5, sp, #4
 8017894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017896:	6823      	ldr	r3, [r4, #0]
 8017898:	602b      	str	r3, [r5, #0]
 801789a:	a801      	add	r0, sp, #4
 801789c:	4664      	mov	r4, ip
 801789e:	f7f5 ffed 	bl	800d87c <rcutils_allocator_is_valid>
 80178a2:	b328      	cbz	r0, 80178f0 <rcl_guard_condition_init_from_rmw+0x74>
 80178a4:	b324      	cbz	r4, 80178f0 <rcl_guard_condition_init_from_rmw+0x74>
 80178a6:	6866      	ldr	r6, [r4, #4]
 80178a8:	b9e6      	cbnz	r6, 80178e4 <rcl_guard_condition_init_from_rmw+0x68>
 80178aa:	f1b8 0f00 	cmp.w	r8, #0
 80178ae:	d01f      	beq.n	80178f0 <rcl_guard_condition_init_from_rmw+0x74>
 80178b0:	4640      	mov	r0, r8
 80178b2:	f7fb f92f 	bl	8012b14 <rcl_context_is_valid>
 80178b6:	b308      	cbz	r0, 80178fc <rcl_guard_condition_init_from_rmw+0x80>
 80178b8:	9b01      	ldr	r3, [sp, #4]
 80178ba:	9905      	ldr	r1, [sp, #20]
 80178bc:	201c      	movs	r0, #28
 80178be:	4798      	blx	r3
 80178c0:	4605      	mov	r5, r0
 80178c2:	6060      	str	r0, [r4, #4]
 80178c4:	b340      	cbz	r0, 8017918 <rcl_guard_condition_init_from_rmw+0x9c>
 80178c6:	b1df      	cbz	r7, 8017900 <rcl_guard_condition_init_from_rmw+0x84>
 80178c8:	6007      	str	r7, [r0, #0]
 80178ca:	7106      	strb	r6, [r0, #4]
 80178cc:	ac01      	add	r4, sp, #4
 80178ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178d0:	3508      	adds	r5, #8
 80178d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80178d4:	6823      	ldr	r3, [r4, #0]
 80178d6:	602b      	str	r3, [r5, #0]
 80178d8:	2000      	movs	r0, #0
 80178da:	b006      	add	sp, #24
 80178dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178e0:	b002      	add	sp, #8
 80178e2:	4770      	bx	lr
 80178e4:	2064      	movs	r0, #100	; 0x64
 80178e6:	b006      	add	sp, #24
 80178e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178ec:	b002      	add	sp, #8
 80178ee:	4770      	bx	lr
 80178f0:	200b      	movs	r0, #11
 80178f2:	b006      	add	sp, #24
 80178f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178f8:	b002      	add	sp, #8
 80178fa:	4770      	bx	lr
 80178fc:	2065      	movs	r0, #101	; 0x65
 80178fe:	e7f2      	b.n	80178e6 <rcl_guard_condition_init_from_rmw+0x6a>
 8017900:	f8d8 0000 	ldr.w	r0, [r8]
 8017904:	3028      	adds	r0, #40	; 0x28
 8017906:	f000 f93b 	bl	8017b80 <rmw_create_guard_condition>
 801790a:	6028      	str	r0, [r5, #0]
 801790c:	6865      	ldr	r5, [r4, #4]
 801790e:	682e      	ldr	r6, [r5, #0]
 8017910:	b126      	cbz	r6, 801791c <rcl_guard_condition_init_from_rmw+0xa0>
 8017912:	2301      	movs	r3, #1
 8017914:	712b      	strb	r3, [r5, #4]
 8017916:	e7d9      	b.n	80178cc <rcl_guard_condition_init_from_rmw+0x50>
 8017918:	200a      	movs	r0, #10
 801791a:	e7e4      	b.n	80178e6 <rcl_guard_condition_init_from_rmw+0x6a>
 801791c:	4628      	mov	r0, r5
 801791e:	9b02      	ldr	r3, [sp, #8]
 8017920:	9905      	ldr	r1, [sp, #20]
 8017922:	4798      	blx	r3
 8017924:	6066      	str	r6, [r4, #4]
 8017926:	2001      	movs	r0, #1
 8017928:	e7dd      	b.n	80178e6 <rcl_guard_condition_init_from_rmw+0x6a>
 801792a:	bf00      	nop

0801792c <rcl_guard_condition_fini>:
 801792c:	b570      	push	{r4, r5, r6, lr}
 801792e:	b082      	sub	sp, #8
 8017930:	b1f0      	cbz	r0, 8017970 <rcl_guard_condition_fini+0x44>
 8017932:	4604      	mov	r4, r0
 8017934:	6840      	ldr	r0, [r0, #4]
 8017936:	b158      	cbz	r0, 8017950 <rcl_guard_condition_fini+0x24>
 8017938:	6803      	ldr	r3, [r0, #0]
 801793a:	68c6      	ldr	r6, [r0, #12]
 801793c:	6981      	ldr	r1, [r0, #24]
 801793e:	b15b      	cbz	r3, 8017958 <rcl_guard_condition_fini+0x2c>
 8017940:	7905      	ldrb	r5, [r0, #4]
 8017942:	b95d      	cbnz	r5, 801795c <rcl_guard_condition_fini+0x30>
 8017944:	47b0      	blx	r6
 8017946:	2300      	movs	r3, #0
 8017948:	4628      	mov	r0, r5
 801794a:	6063      	str	r3, [r4, #4]
 801794c:	b002      	add	sp, #8
 801794e:	bd70      	pop	{r4, r5, r6, pc}
 8017950:	4605      	mov	r5, r0
 8017952:	4628      	mov	r0, r5
 8017954:	b002      	add	sp, #8
 8017956:	bd70      	pop	{r4, r5, r6, pc}
 8017958:	461d      	mov	r5, r3
 801795a:	e7f3      	b.n	8017944 <rcl_guard_condition_fini+0x18>
 801795c:	4618      	mov	r0, r3
 801795e:	9101      	str	r1, [sp, #4]
 8017960:	f000 f922 	bl	8017ba8 <rmw_destroy_guard_condition>
 8017964:	1e05      	subs	r5, r0, #0
 8017966:	9901      	ldr	r1, [sp, #4]
 8017968:	6860      	ldr	r0, [r4, #4]
 801796a:	bf18      	it	ne
 801796c:	2501      	movne	r5, #1
 801796e:	e7e9      	b.n	8017944 <rcl_guard_condition_fini+0x18>
 8017970:	250b      	movs	r5, #11
 8017972:	4628      	mov	r0, r5
 8017974:	b002      	add	sp, #8
 8017976:	bd70      	pop	{r4, r5, r6, pc}

08017978 <rcl_guard_condition_get_default_options>:
 8017978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801797a:	b087      	sub	sp, #28
 801797c:	4607      	mov	r7, r0
 801797e:	466c      	mov	r4, sp
 8017980:	4668      	mov	r0, sp
 8017982:	f7f5 ff6d 	bl	800d860 <rcutils_get_default_allocator>
 8017986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017988:	4d07      	ldr	r5, [pc, #28]	; (80179a8 <rcl_guard_condition_get_default_options+0x30>)
 801798a:	f8d4 c000 	ldr.w	ip, [r4]
 801798e:	462e      	mov	r6, r5
 8017990:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017992:	462c      	mov	r4, r5
 8017994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017996:	463c      	mov	r4, r7
 8017998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801799a:	4638      	mov	r0, r7
 801799c:	f8c6 c000 	str.w	ip, [r6]
 80179a0:	f8c4 c000 	str.w	ip, [r4]
 80179a4:	b007      	add	sp, #28
 80179a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179a8:	20009d24 	.word	0x20009d24

080179ac <rcl_guard_condition_get_rmw_handle>:
 80179ac:	b110      	cbz	r0, 80179b4 <rcl_guard_condition_get_rmw_handle+0x8>
 80179ae:	6840      	ldr	r0, [r0, #4]
 80179b0:	b100      	cbz	r0, 80179b4 <rcl_guard_condition_get_rmw_handle+0x8>
 80179b2:	6800      	ldr	r0, [r0, #0]
 80179b4:	4770      	bx	lr
 80179b6:	bf00      	nop

080179b8 <on_status>:
 80179b8:	b082      	sub	sp, #8
 80179ba:	b002      	add	sp, #8
 80179bc:	4770      	bx	lr
 80179be:	bf00      	nop

080179c0 <on_topic>:
 80179c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179c4:	4a21      	ldr	r2, [pc, #132]	; (8017a4c <on_topic+0x8c>)
 80179c6:	b094      	sub	sp, #80	; 0x50
 80179c8:	6812      	ldr	r2, [r2, #0]
 80179ca:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80179cc:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80179d0:	9113      	str	r1, [sp, #76]	; 0x4c
 80179d2:	9312      	str	r3, [sp, #72]	; 0x48
 80179d4:	b3ba      	cbz	r2, 8017a46 <on_topic+0x86>
 80179d6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80179da:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80179de:	e001      	b.n	80179e4 <on_topic+0x24>
 80179e0:	6892      	ldr	r2, [r2, #8]
 80179e2:	b382      	cbz	r2, 8017a46 <on_topic+0x86>
 80179e4:	68d4      	ldr	r4, [r2, #12]
 80179e6:	8aa3      	ldrh	r3, [r4, #20]
 80179e8:	428b      	cmp	r3, r1
 80179ea:	d1f9      	bne.n	80179e0 <on_topic+0x20>
 80179ec:	7da3      	ldrb	r3, [r4, #22]
 80179ee:	4283      	cmp	r3, r0
 80179f0:	d1f6      	bne.n	80179e0 <on_topic+0x20>
 80179f2:	2248      	movs	r2, #72	; 0x48
 80179f4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80179f8:	4668      	mov	r0, sp
 80179fa:	f000 ff2c 	bl	8018856 <memcpy>
 80179fe:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8017a02:	4620      	mov	r0, r4
 8017a04:	f7f6 fe7e 	bl	800e704 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017a08:	4607      	mov	r7, r0
 8017a0a:	b1e0      	cbz	r0, 8017a46 <on_topic+0x86>
 8017a0c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017a10:	462a      	mov	r2, r5
 8017a12:	4630      	mov	r0, r6
 8017a14:	f108 0110 	add.w	r1, r8, #16
 8017a18:	f7fe fb9a 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8017a1c:	b930      	cbnz	r0, 8017a2c <on_topic+0x6c>
 8017a1e:	480c      	ldr	r0, [pc, #48]	; (8017a50 <on_topic+0x90>)
 8017a20:	4639      	mov	r1, r7
 8017a22:	b014      	add	sp, #80	; 0x50
 8017a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a28:	f7fd bb82 	b.w	8015130 <put_memory>
 8017a2c:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8017a30:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8017a34:	f7fe fab6 	bl	8015fa4 <rmw_uros_epoch_nanos>
 8017a38:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8017a3c:	2305      	movs	r3, #5
 8017a3e:	e9c2 0100 	strd	r0, r1, [r2]
 8017a42:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8017a46:	b014      	add	sp, #80	; 0x50
 8017a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a4c:	2000d12c 	.word	0x2000d12c
 8017a50:	20009ec0 	.word	0x20009ec0

08017a54 <on_request>:
 8017a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a58:	4822      	ldr	r0, [pc, #136]	; (8017ae4 <on_request+0x90>)
 8017a5a:	b095      	sub	sp, #84	; 0x54
 8017a5c:	9113      	str	r1, [sp, #76]	; 0x4c
 8017a5e:	6801      	ldr	r1, [r0, #0]
 8017a60:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8017a62:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8017a66:	2900      	cmp	r1, #0
 8017a68:	d039      	beq.n	8017ade <on_request+0x8a>
 8017a6a:	461d      	mov	r5, r3
 8017a6c:	e001      	b.n	8017a72 <on_request+0x1e>
 8017a6e:	6889      	ldr	r1, [r1, #8]
 8017a70:	b3a9      	cbz	r1, 8017ade <on_request+0x8a>
 8017a72:	68cc      	ldr	r4, [r1, #12]
 8017a74:	8b20      	ldrh	r0, [r4, #24]
 8017a76:	4290      	cmp	r0, r2
 8017a78:	d1f9      	bne.n	8017a6e <on_request+0x1a>
 8017a7a:	2248      	movs	r2, #72	; 0x48
 8017a7c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017a80:	4668      	mov	r0, sp
 8017a82:	f000 fee8 	bl	8018856 <memcpy>
 8017a86:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8017a8a:	4620      	mov	r0, r4
 8017a8c:	f7f6 fe3a 	bl	800e704 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017a90:	4680      	mov	r8, r0
 8017a92:	b320      	cbz	r0, 8017ade <on_request+0x8a>
 8017a94:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8017a98:	4632      	mov	r2, r6
 8017a9a:	4638      	mov	r0, r7
 8017a9c:	f109 0110 	add.w	r1, r9, #16
 8017aa0:	f7fe fb56 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8017aa4:	b930      	cbnz	r0, 8017ab4 <on_request+0x60>
 8017aa6:	4810      	ldr	r0, [pc, #64]	; (8017ae8 <on_request+0x94>)
 8017aa8:	4641      	mov	r1, r8
 8017aaa:	b015      	add	sp, #84	; 0x54
 8017aac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ab0:	f7fd bb3e 	b.w	8015130 <put_memory>
 8017ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ab6:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8017aba:	f609 0428 	addw	r4, r9, #2088	; 0x828
 8017abe:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8017ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017ac4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017ac8:	e884 0003 	stmia.w	r4, {r0, r1}
 8017acc:	f7fe fa6a 	bl	8015fa4 <rmw_uros_epoch_nanos>
 8017ad0:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8017ad4:	2303      	movs	r3, #3
 8017ad6:	e9c2 0100 	strd	r0, r1, [r2]
 8017ada:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8017ade:	b015      	add	sp, #84	; 0x54
 8017ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ae4:	2000d11c 	.word	0x2000d11c
 8017ae8:	20009ec0 	.word	0x20009ec0

08017aec <on_reply>:
 8017aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017af0:	4821      	ldr	r0, [pc, #132]	; (8017b78 <on_reply+0x8c>)
 8017af2:	b095      	sub	sp, #84	; 0x54
 8017af4:	9113      	str	r1, [sp, #76]	; 0x4c
 8017af6:	6801      	ldr	r1, [r0, #0]
 8017af8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8017afa:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8017afe:	b3b9      	cbz	r1, 8017b70 <on_reply+0x84>
 8017b00:	461d      	mov	r5, r3
 8017b02:	e001      	b.n	8017b08 <on_reply+0x1c>
 8017b04:	6889      	ldr	r1, [r1, #8]
 8017b06:	b399      	cbz	r1, 8017b70 <on_reply+0x84>
 8017b08:	68cc      	ldr	r4, [r1, #12]
 8017b0a:	8b20      	ldrh	r0, [r4, #24]
 8017b0c:	4290      	cmp	r0, r2
 8017b0e:	d1f9      	bne.n	8017b04 <on_reply+0x18>
 8017b10:	2248      	movs	r2, #72	; 0x48
 8017b12:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017b16:	4668      	mov	r0, sp
 8017b18:	f000 fe9d 	bl	8018856 <memcpy>
 8017b1c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8017b20:	4620      	mov	r0, r4
 8017b22:	f7f6 fdef 	bl	800e704 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017b26:	4680      	mov	r8, r0
 8017b28:	b310      	cbz	r0, 8017b70 <on_reply+0x84>
 8017b2a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8017b2e:	4632      	mov	r2, r6
 8017b30:	4638      	mov	r0, r7
 8017b32:	f109 0110 	add.w	r1, r9, #16
 8017b36:	f7fe fb0b 	bl	8016150 <ucdr_deserialize_array_uint8_t>
 8017b3a:	b930      	cbnz	r0, 8017b4a <on_reply+0x5e>
 8017b3c:	480f      	ldr	r0, [pc, #60]	; (8017b7c <on_reply+0x90>)
 8017b3e:	4641      	mov	r1, r8
 8017b40:	b015      	add	sp, #84	; 0x54
 8017b42:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b46:	f7fd baf3 	b.w	8015130 <put_memory>
 8017b4a:	b2aa      	uxth	r2, r5
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8017b52:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8017b56:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8017b5a:	e9c1 2300 	strd	r2, r3, [r1]
 8017b5e:	f7fe fa21 	bl	8015fa4 <rmw_uros_epoch_nanos>
 8017b62:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8017b66:	2304      	movs	r3, #4
 8017b68:	e9c2 0100 	strd	r0, r1, [r2]
 8017b6c:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8017b70:	b015      	add	sp, #84	; 0x54
 8017b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b76:	bf00      	nop
 8017b78:	2000a750 	.word	0x2000a750
 8017b7c:	20009ec0 	.word	0x20009ec0

08017b80 <rmw_create_guard_condition>:
 8017b80:	b538      	push	{r3, r4, r5, lr}
 8017b82:	4605      	mov	r5, r0
 8017b84:	4807      	ldr	r0, [pc, #28]	; (8017ba4 <rmw_create_guard_condition+0x24>)
 8017b86:	f7fd fac3 	bl	8015110 <get_memory>
 8017b8a:	b148      	cbz	r0, 8017ba0 <rmw_create_guard_condition+0x20>
 8017b8c:	68c4      	ldr	r4, [r0, #12]
 8017b8e:	2300      	movs	r3, #0
 8017b90:	61e5      	str	r5, [r4, #28]
 8017b92:	7423      	strb	r3, [r4, #16]
 8017b94:	f7fd fb24 	bl	80151e0 <rmw_get_implementation_identifier>
 8017b98:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017b9c:	f104 0014 	add.w	r0, r4, #20
 8017ba0:	bd38      	pop	{r3, r4, r5, pc}
 8017ba2:	bf00      	nop
 8017ba4:	2000d048 	.word	0x2000d048

08017ba8 <rmw_destroy_guard_condition>:
 8017ba8:	b508      	push	{r3, lr}
 8017baa:	4b08      	ldr	r3, [pc, #32]	; (8017bcc <rmw_destroy_guard_condition+0x24>)
 8017bac:	6819      	ldr	r1, [r3, #0]
 8017bae:	b911      	cbnz	r1, 8017bb6 <rmw_destroy_guard_condition+0xe>
 8017bb0:	e00a      	b.n	8017bc8 <rmw_destroy_guard_condition+0x20>
 8017bb2:	6889      	ldr	r1, [r1, #8]
 8017bb4:	b141      	cbz	r1, 8017bc8 <rmw_destroy_guard_condition+0x20>
 8017bb6:	68cb      	ldr	r3, [r1, #12]
 8017bb8:	3314      	adds	r3, #20
 8017bba:	4298      	cmp	r0, r3
 8017bbc:	d1f9      	bne.n	8017bb2 <rmw_destroy_guard_condition+0xa>
 8017bbe:	4803      	ldr	r0, [pc, #12]	; (8017bcc <rmw_destroy_guard_condition+0x24>)
 8017bc0:	f7fd fab6 	bl	8015130 <put_memory>
 8017bc4:	2000      	movs	r0, #0
 8017bc6:	bd08      	pop	{r3, pc}
 8017bc8:	2001      	movs	r0, #1
 8017bca:	bd08      	pop	{r3, pc}
 8017bcc:	2000d048 	.word	0x2000d048

08017bd0 <calloc>:
 8017bd0:	4b02      	ldr	r3, [pc, #8]	; (8017bdc <calloc+0xc>)
 8017bd2:	460a      	mov	r2, r1
 8017bd4:	4601      	mov	r1, r0
 8017bd6:	6818      	ldr	r0, [r3, #0]
 8017bd8:	f000 b802 	b.w	8017be0 <_calloc_r>
 8017bdc:	200000cc 	.word	0x200000cc

08017be0 <_calloc_r>:
 8017be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017be2:	fba1 2402 	umull	r2, r4, r1, r2
 8017be6:	b94c      	cbnz	r4, 8017bfc <_calloc_r+0x1c>
 8017be8:	4611      	mov	r1, r2
 8017bea:	9201      	str	r2, [sp, #4]
 8017bec:	f000 f886 	bl	8017cfc <_malloc_r>
 8017bf0:	9a01      	ldr	r2, [sp, #4]
 8017bf2:	4605      	mov	r5, r0
 8017bf4:	b930      	cbnz	r0, 8017c04 <_calloc_r+0x24>
 8017bf6:	4628      	mov	r0, r5
 8017bf8:	b003      	add	sp, #12
 8017bfa:	bd30      	pop	{r4, r5, pc}
 8017bfc:	220c      	movs	r2, #12
 8017bfe:	6002      	str	r2, [r0, #0]
 8017c00:	2500      	movs	r5, #0
 8017c02:	e7f8      	b.n	8017bf6 <_calloc_r+0x16>
 8017c04:	4621      	mov	r1, r4
 8017c06:	f000 fd07 	bl	8018618 <memset>
 8017c0a:	e7f4      	b.n	8017bf6 <_calloc_r+0x16>

08017c0c <getenv>:
 8017c0c:	b507      	push	{r0, r1, r2, lr}
 8017c0e:	4b04      	ldr	r3, [pc, #16]	; (8017c20 <getenv+0x14>)
 8017c10:	4601      	mov	r1, r0
 8017c12:	aa01      	add	r2, sp, #4
 8017c14:	6818      	ldr	r0, [r3, #0]
 8017c16:	f000 f805 	bl	8017c24 <_findenv_r>
 8017c1a:	b003      	add	sp, #12
 8017c1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c20:	200000cc 	.word	0x200000cc

08017c24 <_findenv_r>:
 8017c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c28:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8017c98 <_findenv_r+0x74>
 8017c2c:	4607      	mov	r7, r0
 8017c2e:	4689      	mov	r9, r1
 8017c30:	4616      	mov	r6, r2
 8017c32:	f000 fe3d 	bl	80188b0 <__env_lock>
 8017c36:	f8da 4000 	ldr.w	r4, [sl]
 8017c3a:	b134      	cbz	r4, 8017c4a <_findenv_r+0x26>
 8017c3c:	464b      	mov	r3, r9
 8017c3e:	4698      	mov	r8, r3
 8017c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c44:	b13a      	cbz	r2, 8017c56 <_findenv_r+0x32>
 8017c46:	2a3d      	cmp	r2, #61	; 0x3d
 8017c48:	d1f9      	bne.n	8017c3e <_findenv_r+0x1a>
 8017c4a:	4638      	mov	r0, r7
 8017c4c:	f000 fe36 	bl	80188bc <__env_unlock>
 8017c50:	2000      	movs	r0, #0
 8017c52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c56:	eba8 0809 	sub.w	r8, r8, r9
 8017c5a:	46a3      	mov	fp, r4
 8017c5c:	f854 0b04 	ldr.w	r0, [r4], #4
 8017c60:	2800      	cmp	r0, #0
 8017c62:	d0f2      	beq.n	8017c4a <_findenv_r+0x26>
 8017c64:	4642      	mov	r2, r8
 8017c66:	4649      	mov	r1, r9
 8017c68:	f000 fceb 	bl	8018642 <strncmp>
 8017c6c:	2800      	cmp	r0, #0
 8017c6e:	d1f4      	bne.n	8017c5a <_findenv_r+0x36>
 8017c70:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017c74:	eb03 0508 	add.w	r5, r3, r8
 8017c78:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017c7c:	2b3d      	cmp	r3, #61	; 0x3d
 8017c7e:	d1ec      	bne.n	8017c5a <_findenv_r+0x36>
 8017c80:	f8da 3000 	ldr.w	r3, [sl]
 8017c84:	ebab 0303 	sub.w	r3, fp, r3
 8017c88:	109b      	asrs	r3, r3, #2
 8017c8a:	4638      	mov	r0, r7
 8017c8c:	6033      	str	r3, [r6, #0]
 8017c8e:	f000 fe15 	bl	80188bc <__env_unlock>
 8017c92:	1c68      	adds	r0, r5, #1
 8017c94:	e7dd      	b.n	8017c52 <_findenv_r+0x2e>
 8017c96:	bf00      	nop
 8017c98:	200000d0 	.word	0x200000d0

08017c9c <malloc>:
 8017c9c:	4b02      	ldr	r3, [pc, #8]	; (8017ca8 <malloc+0xc>)
 8017c9e:	4601      	mov	r1, r0
 8017ca0:	6818      	ldr	r0, [r3, #0]
 8017ca2:	f000 b82b 	b.w	8017cfc <_malloc_r>
 8017ca6:	bf00      	nop
 8017ca8:	200000cc 	.word	0x200000cc

08017cac <free>:
 8017cac:	4b02      	ldr	r3, [pc, #8]	; (8017cb8 <free+0xc>)
 8017cae:	4601      	mov	r1, r0
 8017cb0:	6818      	ldr	r0, [r3, #0]
 8017cb2:	f000 be09 	b.w	80188c8 <_free_r>
 8017cb6:	bf00      	nop
 8017cb8:	200000cc 	.word	0x200000cc

08017cbc <sbrk_aligned>:
 8017cbc:	b570      	push	{r4, r5, r6, lr}
 8017cbe:	4e0e      	ldr	r6, [pc, #56]	; (8017cf8 <sbrk_aligned+0x3c>)
 8017cc0:	460c      	mov	r4, r1
 8017cc2:	6831      	ldr	r1, [r6, #0]
 8017cc4:	4605      	mov	r5, r0
 8017cc6:	b911      	cbnz	r1, 8017cce <sbrk_aligned+0x12>
 8017cc8:	f000 fd6e 	bl	80187a8 <_sbrk_r>
 8017ccc:	6030      	str	r0, [r6, #0]
 8017cce:	4621      	mov	r1, r4
 8017cd0:	4628      	mov	r0, r5
 8017cd2:	f000 fd69 	bl	80187a8 <_sbrk_r>
 8017cd6:	1c43      	adds	r3, r0, #1
 8017cd8:	d00a      	beq.n	8017cf0 <sbrk_aligned+0x34>
 8017cda:	1cc4      	adds	r4, r0, #3
 8017cdc:	f024 0403 	bic.w	r4, r4, #3
 8017ce0:	42a0      	cmp	r0, r4
 8017ce2:	d007      	beq.n	8017cf4 <sbrk_aligned+0x38>
 8017ce4:	1a21      	subs	r1, r4, r0
 8017ce6:	4628      	mov	r0, r5
 8017ce8:	f000 fd5e 	bl	80187a8 <_sbrk_r>
 8017cec:	3001      	adds	r0, #1
 8017cee:	d101      	bne.n	8017cf4 <sbrk_aligned+0x38>
 8017cf0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017cf4:	4620      	mov	r0, r4
 8017cf6:	bd70      	pop	{r4, r5, r6, pc}
 8017cf8:	20009d3c 	.word	0x20009d3c

08017cfc <_malloc_r>:
 8017cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d00:	1ccd      	adds	r5, r1, #3
 8017d02:	f025 0503 	bic.w	r5, r5, #3
 8017d06:	3508      	adds	r5, #8
 8017d08:	2d0c      	cmp	r5, #12
 8017d0a:	bf38      	it	cc
 8017d0c:	250c      	movcc	r5, #12
 8017d0e:	2d00      	cmp	r5, #0
 8017d10:	4607      	mov	r7, r0
 8017d12:	db01      	blt.n	8017d18 <_malloc_r+0x1c>
 8017d14:	42a9      	cmp	r1, r5
 8017d16:	d905      	bls.n	8017d24 <_malloc_r+0x28>
 8017d18:	230c      	movs	r3, #12
 8017d1a:	603b      	str	r3, [r7, #0]
 8017d1c:	2600      	movs	r6, #0
 8017d1e:	4630      	mov	r0, r6
 8017d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017df8 <_malloc_r+0xfc>
 8017d28:	f000 f868 	bl	8017dfc <__malloc_lock>
 8017d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8017d30:	461c      	mov	r4, r3
 8017d32:	bb5c      	cbnz	r4, 8017d8c <_malloc_r+0x90>
 8017d34:	4629      	mov	r1, r5
 8017d36:	4638      	mov	r0, r7
 8017d38:	f7ff ffc0 	bl	8017cbc <sbrk_aligned>
 8017d3c:	1c43      	adds	r3, r0, #1
 8017d3e:	4604      	mov	r4, r0
 8017d40:	d155      	bne.n	8017dee <_malloc_r+0xf2>
 8017d42:	f8d8 4000 	ldr.w	r4, [r8]
 8017d46:	4626      	mov	r6, r4
 8017d48:	2e00      	cmp	r6, #0
 8017d4a:	d145      	bne.n	8017dd8 <_malloc_r+0xdc>
 8017d4c:	2c00      	cmp	r4, #0
 8017d4e:	d048      	beq.n	8017de2 <_malloc_r+0xe6>
 8017d50:	6823      	ldr	r3, [r4, #0]
 8017d52:	4631      	mov	r1, r6
 8017d54:	4638      	mov	r0, r7
 8017d56:	eb04 0903 	add.w	r9, r4, r3
 8017d5a:	f000 fd25 	bl	80187a8 <_sbrk_r>
 8017d5e:	4581      	cmp	r9, r0
 8017d60:	d13f      	bne.n	8017de2 <_malloc_r+0xe6>
 8017d62:	6821      	ldr	r1, [r4, #0]
 8017d64:	1a6d      	subs	r5, r5, r1
 8017d66:	4629      	mov	r1, r5
 8017d68:	4638      	mov	r0, r7
 8017d6a:	f7ff ffa7 	bl	8017cbc <sbrk_aligned>
 8017d6e:	3001      	adds	r0, #1
 8017d70:	d037      	beq.n	8017de2 <_malloc_r+0xe6>
 8017d72:	6823      	ldr	r3, [r4, #0]
 8017d74:	442b      	add	r3, r5
 8017d76:	6023      	str	r3, [r4, #0]
 8017d78:	f8d8 3000 	ldr.w	r3, [r8]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d038      	beq.n	8017df2 <_malloc_r+0xf6>
 8017d80:	685a      	ldr	r2, [r3, #4]
 8017d82:	42a2      	cmp	r2, r4
 8017d84:	d12b      	bne.n	8017dde <_malloc_r+0xe2>
 8017d86:	2200      	movs	r2, #0
 8017d88:	605a      	str	r2, [r3, #4]
 8017d8a:	e00f      	b.n	8017dac <_malloc_r+0xb0>
 8017d8c:	6822      	ldr	r2, [r4, #0]
 8017d8e:	1b52      	subs	r2, r2, r5
 8017d90:	d41f      	bmi.n	8017dd2 <_malloc_r+0xd6>
 8017d92:	2a0b      	cmp	r2, #11
 8017d94:	d917      	bls.n	8017dc6 <_malloc_r+0xca>
 8017d96:	1961      	adds	r1, r4, r5
 8017d98:	42a3      	cmp	r3, r4
 8017d9a:	6025      	str	r5, [r4, #0]
 8017d9c:	bf18      	it	ne
 8017d9e:	6059      	strne	r1, [r3, #4]
 8017da0:	6863      	ldr	r3, [r4, #4]
 8017da2:	bf08      	it	eq
 8017da4:	f8c8 1000 	streq.w	r1, [r8]
 8017da8:	5162      	str	r2, [r4, r5]
 8017daa:	604b      	str	r3, [r1, #4]
 8017dac:	4638      	mov	r0, r7
 8017dae:	f104 060b 	add.w	r6, r4, #11
 8017db2:	f000 f829 	bl	8017e08 <__malloc_unlock>
 8017db6:	f026 0607 	bic.w	r6, r6, #7
 8017dba:	1d23      	adds	r3, r4, #4
 8017dbc:	1af2      	subs	r2, r6, r3
 8017dbe:	d0ae      	beq.n	8017d1e <_malloc_r+0x22>
 8017dc0:	1b9b      	subs	r3, r3, r6
 8017dc2:	50a3      	str	r3, [r4, r2]
 8017dc4:	e7ab      	b.n	8017d1e <_malloc_r+0x22>
 8017dc6:	42a3      	cmp	r3, r4
 8017dc8:	6862      	ldr	r2, [r4, #4]
 8017dca:	d1dd      	bne.n	8017d88 <_malloc_r+0x8c>
 8017dcc:	f8c8 2000 	str.w	r2, [r8]
 8017dd0:	e7ec      	b.n	8017dac <_malloc_r+0xb0>
 8017dd2:	4623      	mov	r3, r4
 8017dd4:	6864      	ldr	r4, [r4, #4]
 8017dd6:	e7ac      	b.n	8017d32 <_malloc_r+0x36>
 8017dd8:	4634      	mov	r4, r6
 8017dda:	6876      	ldr	r6, [r6, #4]
 8017ddc:	e7b4      	b.n	8017d48 <_malloc_r+0x4c>
 8017dde:	4613      	mov	r3, r2
 8017de0:	e7cc      	b.n	8017d7c <_malloc_r+0x80>
 8017de2:	230c      	movs	r3, #12
 8017de4:	603b      	str	r3, [r7, #0]
 8017de6:	4638      	mov	r0, r7
 8017de8:	f000 f80e 	bl	8017e08 <__malloc_unlock>
 8017dec:	e797      	b.n	8017d1e <_malloc_r+0x22>
 8017dee:	6025      	str	r5, [r4, #0]
 8017df0:	e7dc      	b.n	8017dac <_malloc_r+0xb0>
 8017df2:	605b      	str	r3, [r3, #4]
 8017df4:	deff      	udf	#255	; 0xff
 8017df6:	bf00      	nop
 8017df8:	20009d38 	.word	0x20009d38

08017dfc <__malloc_lock>:
 8017dfc:	4801      	ldr	r0, [pc, #4]	; (8017e04 <__malloc_lock+0x8>)
 8017dfe:	f000 bd20 	b.w	8018842 <__retarget_lock_acquire_recursive>
 8017e02:	bf00      	nop
 8017e04:	20009e81 	.word	0x20009e81

08017e08 <__malloc_unlock>:
 8017e08:	4801      	ldr	r0, [pc, #4]	; (8017e10 <__malloc_unlock+0x8>)
 8017e0a:	f000 bd1b 	b.w	8018844 <__retarget_lock_release_recursive>
 8017e0e:	bf00      	nop
 8017e10:	20009e81 	.word	0x20009e81

08017e14 <srand>:
 8017e14:	b538      	push	{r3, r4, r5, lr}
 8017e16:	4b10      	ldr	r3, [pc, #64]	; (8017e58 <srand+0x44>)
 8017e18:	681d      	ldr	r5, [r3, #0]
 8017e1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017e1c:	4604      	mov	r4, r0
 8017e1e:	b9b3      	cbnz	r3, 8017e4e <srand+0x3a>
 8017e20:	2018      	movs	r0, #24
 8017e22:	f7ff ff3b 	bl	8017c9c <malloc>
 8017e26:	4602      	mov	r2, r0
 8017e28:	6328      	str	r0, [r5, #48]	; 0x30
 8017e2a:	b920      	cbnz	r0, 8017e36 <srand+0x22>
 8017e2c:	4b0b      	ldr	r3, [pc, #44]	; (8017e5c <srand+0x48>)
 8017e2e:	480c      	ldr	r0, [pc, #48]	; (8017e60 <srand+0x4c>)
 8017e30:	2146      	movs	r1, #70	; 0x46
 8017e32:	f000 fd1f 	bl	8018874 <__assert_func>
 8017e36:	490b      	ldr	r1, [pc, #44]	; (8017e64 <srand+0x50>)
 8017e38:	4b0b      	ldr	r3, [pc, #44]	; (8017e68 <srand+0x54>)
 8017e3a:	e9c0 1300 	strd	r1, r3, [r0]
 8017e3e:	4b0b      	ldr	r3, [pc, #44]	; (8017e6c <srand+0x58>)
 8017e40:	6083      	str	r3, [r0, #8]
 8017e42:	230b      	movs	r3, #11
 8017e44:	8183      	strh	r3, [r0, #12]
 8017e46:	2100      	movs	r1, #0
 8017e48:	2001      	movs	r0, #1
 8017e4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017e4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017e50:	2200      	movs	r2, #0
 8017e52:	611c      	str	r4, [r3, #16]
 8017e54:	615a      	str	r2, [r3, #20]
 8017e56:	bd38      	pop	{r3, r4, r5, pc}
 8017e58:	200000cc 	.word	0x200000cc
 8017e5c:	0801a210 	.word	0x0801a210
 8017e60:	0801a227 	.word	0x0801a227
 8017e64:	abcd330e 	.word	0xabcd330e
 8017e68:	e66d1234 	.word	0xe66d1234
 8017e6c:	0005deec 	.word	0x0005deec

08017e70 <rand>:
 8017e70:	4b16      	ldr	r3, [pc, #88]	; (8017ecc <rand+0x5c>)
 8017e72:	b510      	push	{r4, lr}
 8017e74:	681c      	ldr	r4, [r3, #0]
 8017e76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017e78:	b9b3      	cbnz	r3, 8017ea8 <rand+0x38>
 8017e7a:	2018      	movs	r0, #24
 8017e7c:	f7ff ff0e 	bl	8017c9c <malloc>
 8017e80:	4602      	mov	r2, r0
 8017e82:	6320      	str	r0, [r4, #48]	; 0x30
 8017e84:	b920      	cbnz	r0, 8017e90 <rand+0x20>
 8017e86:	4b12      	ldr	r3, [pc, #72]	; (8017ed0 <rand+0x60>)
 8017e88:	4812      	ldr	r0, [pc, #72]	; (8017ed4 <rand+0x64>)
 8017e8a:	2152      	movs	r1, #82	; 0x52
 8017e8c:	f000 fcf2 	bl	8018874 <__assert_func>
 8017e90:	4911      	ldr	r1, [pc, #68]	; (8017ed8 <rand+0x68>)
 8017e92:	4b12      	ldr	r3, [pc, #72]	; (8017edc <rand+0x6c>)
 8017e94:	e9c0 1300 	strd	r1, r3, [r0]
 8017e98:	4b11      	ldr	r3, [pc, #68]	; (8017ee0 <rand+0x70>)
 8017e9a:	6083      	str	r3, [r0, #8]
 8017e9c:	230b      	movs	r3, #11
 8017e9e:	8183      	strh	r3, [r0, #12]
 8017ea0:	2100      	movs	r1, #0
 8017ea2:	2001      	movs	r0, #1
 8017ea4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017ea8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017eaa:	480e      	ldr	r0, [pc, #56]	; (8017ee4 <rand+0x74>)
 8017eac:	690b      	ldr	r3, [r1, #16]
 8017eae:	694c      	ldr	r4, [r1, #20]
 8017eb0:	4a0d      	ldr	r2, [pc, #52]	; (8017ee8 <rand+0x78>)
 8017eb2:	4358      	muls	r0, r3
 8017eb4:	fb02 0004 	mla	r0, r2, r4, r0
 8017eb8:	fba3 3202 	umull	r3, r2, r3, r2
 8017ebc:	3301      	adds	r3, #1
 8017ebe:	eb40 0002 	adc.w	r0, r0, r2
 8017ec2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017ec6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017eca:	bd10      	pop	{r4, pc}
 8017ecc:	200000cc 	.word	0x200000cc
 8017ed0:	0801a210 	.word	0x0801a210
 8017ed4:	0801a227 	.word	0x0801a227
 8017ed8:	abcd330e 	.word	0xabcd330e
 8017edc:	e66d1234 	.word	0xe66d1234
 8017ee0:	0005deec 	.word	0x0005deec
 8017ee4:	5851f42d 	.word	0x5851f42d
 8017ee8:	4c957f2d 	.word	0x4c957f2d

08017eec <realloc>:
 8017eec:	4b02      	ldr	r3, [pc, #8]	; (8017ef8 <realloc+0xc>)
 8017eee:	460a      	mov	r2, r1
 8017ef0:	4601      	mov	r1, r0
 8017ef2:	6818      	ldr	r0, [r3, #0]
 8017ef4:	f000 b802 	b.w	8017efc <_realloc_r>
 8017ef8:	200000cc 	.word	0x200000cc

08017efc <_realloc_r>:
 8017efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f00:	4680      	mov	r8, r0
 8017f02:	4614      	mov	r4, r2
 8017f04:	460e      	mov	r6, r1
 8017f06:	b921      	cbnz	r1, 8017f12 <_realloc_r+0x16>
 8017f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f0c:	4611      	mov	r1, r2
 8017f0e:	f7ff bef5 	b.w	8017cfc <_malloc_r>
 8017f12:	b92a      	cbnz	r2, 8017f20 <_realloc_r+0x24>
 8017f14:	f000 fcd8 	bl	80188c8 <_free_r>
 8017f18:	4625      	mov	r5, r4
 8017f1a:	4628      	mov	r0, r5
 8017f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f20:	f000 fd1e 	bl	8018960 <_malloc_usable_size_r>
 8017f24:	4284      	cmp	r4, r0
 8017f26:	4607      	mov	r7, r0
 8017f28:	d802      	bhi.n	8017f30 <_realloc_r+0x34>
 8017f2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017f2e:	d812      	bhi.n	8017f56 <_realloc_r+0x5a>
 8017f30:	4621      	mov	r1, r4
 8017f32:	4640      	mov	r0, r8
 8017f34:	f7ff fee2 	bl	8017cfc <_malloc_r>
 8017f38:	4605      	mov	r5, r0
 8017f3a:	2800      	cmp	r0, #0
 8017f3c:	d0ed      	beq.n	8017f1a <_realloc_r+0x1e>
 8017f3e:	42bc      	cmp	r4, r7
 8017f40:	4622      	mov	r2, r4
 8017f42:	4631      	mov	r1, r6
 8017f44:	bf28      	it	cs
 8017f46:	463a      	movcs	r2, r7
 8017f48:	f000 fc85 	bl	8018856 <memcpy>
 8017f4c:	4631      	mov	r1, r6
 8017f4e:	4640      	mov	r0, r8
 8017f50:	f000 fcba 	bl	80188c8 <_free_r>
 8017f54:	e7e1      	b.n	8017f1a <_realloc_r+0x1e>
 8017f56:	4635      	mov	r5, r6
 8017f58:	e7df      	b.n	8017f1a <_realloc_r+0x1e>
	...

08017f5c <_strtoul_l.constprop.0>:
 8017f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f60:	4f36      	ldr	r7, [pc, #216]	; (801803c <_strtoul_l.constprop.0+0xe0>)
 8017f62:	4686      	mov	lr, r0
 8017f64:	460d      	mov	r5, r1
 8017f66:	4628      	mov	r0, r5
 8017f68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f6c:	5d3e      	ldrb	r6, [r7, r4]
 8017f6e:	f016 0608 	ands.w	r6, r6, #8
 8017f72:	d1f8      	bne.n	8017f66 <_strtoul_l.constprop.0+0xa>
 8017f74:	2c2d      	cmp	r4, #45	; 0x2d
 8017f76:	d130      	bne.n	8017fda <_strtoul_l.constprop.0+0x7e>
 8017f78:	782c      	ldrb	r4, [r5, #0]
 8017f7a:	2601      	movs	r6, #1
 8017f7c:	1c85      	adds	r5, r0, #2
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d057      	beq.n	8018032 <_strtoul_l.constprop.0+0xd6>
 8017f82:	2b10      	cmp	r3, #16
 8017f84:	d109      	bne.n	8017f9a <_strtoul_l.constprop.0+0x3e>
 8017f86:	2c30      	cmp	r4, #48	; 0x30
 8017f88:	d107      	bne.n	8017f9a <_strtoul_l.constprop.0+0x3e>
 8017f8a:	7828      	ldrb	r0, [r5, #0]
 8017f8c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017f90:	2858      	cmp	r0, #88	; 0x58
 8017f92:	d149      	bne.n	8018028 <_strtoul_l.constprop.0+0xcc>
 8017f94:	786c      	ldrb	r4, [r5, #1]
 8017f96:	2310      	movs	r3, #16
 8017f98:	3502      	adds	r5, #2
 8017f9a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017f9e:	2700      	movs	r7, #0
 8017fa0:	fbb8 f8f3 	udiv	r8, r8, r3
 8017fa4:	fb03 f908 	mul.w	r9, r3, r8
 8017fa8:	ea6f 0909 	mvn.w	r9, r9
 8017fac:	4638      	mov	r0, r7
 8017fae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017fb2:	f1bc 0f09 	cmp.w	ip, #9
 8017fb6:	d815      	bhi.n	8017fe4 <_strtoul_l.constprop.0+0x88>
 8017fb8:	4664      	mov	r4, ip
 8017fba:	42a3      	cmp	r3, r4
 8017fbc:	dd23      	ble.n	8018006 <_strtoul_l.constprop.0+0xaa>
 8017fbe:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8017fc2:	d007      	beq.n	8017fd4 <_strtoul_l.constprop.0+0x78>
 8017fc4:	4580      	cmp	r8, r0
 8017fc6:	d31b      	bcc.n	8018000 <_strtoul_l.constprop.0+0xa4>
 8017fc8:	d101      	bne.n	8017fce <_strtoul_l.constprop.0+0x72>
 8017fca:	45a1      	cmp	r9, r4
 8017fcc:	db18      	blt.n	8018000 <_strtoul_l.constprop.0+0xa4>
 8017fce:	fb00 4003 	mla	r0, r0, r3, r4
 8017fd2:	2701      	movs	r7, #1
 8017fd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017fd8:	e7e9      	b.n	8017fae <_strtoul_l.constprop.0+0x52>
 8017fda:	2c2b      	cmp	r4, #43	; 0x2b
 8017fdc:	bf04      	itt	eq
 8017fde:	782c      	ldrbeq	r4, [r5, #0]
 8017fe0:	1c85      	addeq	r5, r0, #2
 8017fe2:	e7cc      	b.n	8017f7e <_strtoul_l.constprop.0+0x22>
 8017fe4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017fe8:	f1bc 0f19 	cmp.w	ip, #25
 8017fec:	d801      	bhi.n	8017ff2 <_strtoul_l.constprop.0+0x96>
 8017fee:	3c37      	subs	r4, #55	; 0x37
 8017ff0:	e7e3      	b.n	8017fba <_strtoul_l.constprop.0+0x5e>
 8017ff2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017ff6:	f1bc 0f19 	cmp.w	ip, #25
 8017ffa:	d804      	bhi.n	8018006 <_strtoul_l.constprop.0+0xaa>
 8017ffc:	3c57      	subs	r4, #87	; 0x57
 8017ffe:	e7dc      	b.n	8017fba <_strtoul_l.constprop.0+0x5e>
 8018000:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018004:	e7e6      	b.n	8017fd4 <_strtoul_l.constprop.0+0x78>
 8018006:	1c7b      	adds	r3, r7, #1
 8018008:	d106      	bne.n	8018018 <_strtoul_l.constprop.0+0xbc>
 801800a:	2322      	movs	r3, #34	; 0x22
 801800c:	f8ce 3000 	str.w	r3, [lr]
 8018010:	4638      	mov	r0, r7
 8018012:	b932      	cbnz	r2, 8018022 <_strtoul_l.constprop.0+0xc6>
 8018014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018018:	b106      	cbz	r6, 801801c <_strtoul_l.constprop.0+0xc0>
 801801a:	4240      	negs	r0, r0
 801801c:	2a00      	cmp	r2, #0
 801801e:	d0f9      	beq.n	8018014 <_strtoul_l.constprop.0+0xb8>
 8018020:	b107      	cbz	r7, 8018024 <_strtoul_l.constprop.0+0xc8>
 8018022:	1e69      	subs	r1, r5, #1
 8018024:	6011      	str	r1, [r2, #0]
 8018026:	e7f5      	b.n	8018014 <_strtoul_l.constprop.0+0xb8>
 8018028:	2430      	movs	r4, #48	; 0x30
 801802a:	2b00      	cmp	r3, #0
 801802c:	d1b5      	bne.n	8017f9a <_strtoul_l.constprop.0+0x3e>
 801802e:	2308      	movs	r3, #8
 8018030:	e7b3      	b.n	8017f9a <_strtoul_l.constprop.0+0x3e>
 8018032:	2c30      	cmp	r4, #48	; 0x30
 8018034:	d0a9      	beq.n	8017f8a <_strtoul_l.constprop.0+0x2e>
 8018036:	230a      	movs	r3, #10
 8018038:	e7af      	b.n	8017f9a <_strtoul_l.constprop.0+0x3e>
 801803a:	bf00      	nop
 801803c:	0801a280 	.word	0x0801a280

08018040 <strtoul>:
 8018040:	4613      	mov	r3, r2
 8018042:	460a      	mov	r2, r1
 8018044:	4601      	mov	r1, r0
 8018046:	4802      	ldr	r0, [pc, #8]	; (8018050 <strtoul+0x10>)
 8018048:	6800      	ldr	r0, [r0, #0]
 801804a:	f7ff bf87 	b.w	8017f5c <_strtoul_l.constprop.0>
 801804e:	bf00      	nop
 8018050:	200000cc 	.word	0x200000cc

08018054 <std>:
 8018054:	2300      	movs	r3, #0
 8018056:	b510      	push	{r4, lr}
 8018058:	4604      	mov	r4, r0
 801805a:	e9c0 3300 	strd	r3, r3, [r0]
 801805e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018062:	6083      	str	r3, [r0, #8]
 8018064:	8181      	strh	r1, [r0, #12]
 8018066:	6643      	str	r3, [r0, #100]	; 0x64
 8018068:	81c2      	strh	r2, [r0, #14]
 801806a:	6183      	str	r3, [r0, #24]
 801806c:	4619      	mov	r1, r3
 801806e:	2208      	movs	r2, #8
 8018070:	305c      	adds	r0, #92	; 0x5c
 8018072:	f000 fad1 	bl	8018618 <memset>
 8018076:	4b0d      	ldr	r3, [pc, #52]	; (80180ac <std+0x58>)
 8018078:	6263      	str	r3, [r4, #36]	; 0x24
 801807a:	4b0d      	ldr	r3, [pc, #52]	; (80180b0 <std+0x5c>)
 801807c:	62a3      	str	r3, [r4, #40]	; 0x28
 801807e:	4b0d      	ldr	r3, [pc, #52]	; (80180b4 <std+0x60>)
 8018080:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018082:	4b0d      	ldr	r3, [pc, #52]	; (80180b8 <std+0x64>)
 8018084:	6323      	str	r3, [r4, #48]	; 0x30
 8018086:	4b0d      	ldr	r3, [pc, #52]	; (80180bc <std+0x68>)
 8018088:	6224      	str	r4, [r4, #32]
 801808a:	429c      	cmp	r4, r3
 801808c:	d006      	beq.n	801809c <std+0x48>
 801808e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8018092:	4294      	cmp	r4, r2
 8018094:	d002      	beq.n	801809c <std+0x48>
 8018096:	33d0      	adds	r3, #208	; 0xd0
 8018098:	429c      	cmp	r4, r3
 801809a:	d105      	bne.n	80180a8 <std+0x54>
 801809c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80180a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180a4:	f000 bbcc 	b.w	8018840 <__retarget_lock_init_recursive>
 80180a8:	bd10      	pop	{r4, pc}
 80180aa:	bf00      	nop
 80180ac:	080183c1 	.word	0x080183c1
 80180b0:	080183e3 	.word	0x080183e3
 80180b4:	0801841b 	.word	0x0801841b
 80180b8:	0801843f 	.word	0x0801843f
 80180bc:	20009d40 	.word	0x20009d40

080180c0 <stdio_exit_handler>:
 80180c0:	4a02      	ldr	r2, [pc, #8]	; (80180cc <stdio_exit_handler+0xc>)
 80180c2:	4903      	ldr	r1, [pc, #12]	; (80180d0 <stdio_exit_handler+0x10>)
 80180c4:	4803      	ldr	r0, [pc, #12]	; (80180d4 <stdio_exit_handler+0x14>)
 80180c6:	f000 b869 	b.w	801819c <_fwalk_sglue>
 80180ca:	bf00      	nop
 80180cc:	20000074 	.word	0x20000074
 80180d0:	080192d5 	.word	0x080192d5
 80180d4:	20000080 	.word	0x20000080

080180d8 <cleanup_stdio>:
 80180d8:	6841      	ldr	r1, [r0, #4]
 80180da:	4b0c      	ldr	r3, [pc, #48]	; (801810c <cleanup_stdio+0x34>)
 80180dc:	4299      	cmp	r1, r3
 80180de:	b510      	push	{r4, lr}
 80180e0:	4604      	mov	r4, r0
 80180e2:	d001      	beq.n	80180e8 <cleanup_stdio+0x10>
 80180e4:	f001 f8f6 	bl	80192d4 <_fflush_r>
 80180e8:	68a1      	ldr	r1, [r4, #8]
 80180ea:	4b09      	ldr	r3, [pc, #36]	; (8018110 <cleanup_stdio+0x38>)
 80180ec:	4299      	cmp	r1, r3
 80180ee:	d002      	beq.n	80180f6 <cleanup_stdio+0x1e>
 80180f0:	4620      	mov	r0, r4
 80180f2:	f001 f8ef 	bl	80192d4 <_fflush_r>
 80180f6:	68e1      	ldr	r1, [r4, #12]
 80180f8:	4b06      	ldr	r3, [pc, #24]	; (8018114 <cleanup_stdio+0x3c>)
 80180fa:	4299      	cmp	r1, r3
 80180fc:	d004      	beq.n	8018108 <cleanup_stdio+0x30>
 80180fe:	4620      	mov	r0, r4
 8018100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018104:	f001 b8e6 	b.w	80192d4 <_fflush_r>
 8018108:	bd10      	pop	{r4, pc}
 801810a:	bf00      	nop
 801810c:	20009d40 	.word	0x20009d40
 8018110:	20009da8 	.word	0x20009da8
 8018114:	20009e10 	.word	0x20009e10

08018118 <global_stdio_init.part.0>:
 8018118:	b510      	push	{r4, lr}
 801811a:	4b0b      	ldr	r3, [pc, #44]	; (8018148 <global_stdio_init.part.0+0x30>)
 801811c:	4c0b      	ldr	r4, [pc, #44]	; (801814c <global_stdio_init.part.0+0x34>)
 801811e:	4a0c      	ldr	r2, [pc, #48]	; (8018150 <global_stdio_init.part.0+0x38>)
 8018120:	601a      	str	r2, [r3, #0]
 8018122:	4620      	mov	r0, r4
 8018124:	2200      	movs	r2, #0
 8018126:	2104      	movs	r1, #4
 8018128:	f7ff ff94 	bl	8018054 <std>
 801812c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018130:	2201      	movs	r2, #1
 8018132:	2109      	movs	r1, #9
 8018134:	f7ff ff8e 	bl	8018054 <std>
 8018138:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801813c:	2202      	movs	r2, #2
 801813e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018142:	2112      	movs	r1, #18
 8018144:	f7ff bf86 	b.w	8018054 <std>
 8018148:	20009e78 	.word	0x20009e78
 801814c:	20009d40 	.word	0x20009d40
 8018150:	080180c1 	.word	0x080180c1

08018154 <__sfp_lock_acquire>:
 8018154:	4801      	ldr	r0, [pc, #4]	; (801815c <__sfp_lock_acquire+0x8>)
 8018156:	f000 bb74 	b.w	8018842 <__retarget_lock_acquire_recursive>
 801815a:	bf00      	nop
 801815c:	20009e82 	.word	0x20009e82

08018160 <__sfp_lock_release>:
 8018160:	4801      	ldr	r0, [pc, #4]	; (8018168 <__sfp_lock_release+0x8>)
 8018162:	f000 bb6f 	b.w	8018844 <__retarget_lock_release_recursive>
 8018166:	bf00      	nop
 8018168:	20009e82 	.word	0x20009e82

0801816c <__sinit>:
 801816c:	b510      	push	{r4, lr}
 801816e:	4604      	mov	r4, r0
 8018170:	f7ff fff0 	bl	8018154 <__sfp_lock_acquire>
 8018174:	6a23      	ldr	r3, [r4, #32]
 8018176:	b11b      	cbz	r3, 8018180 <__sinit+0x14>
 8018178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801817c:	f7ff bff0 	b.w	8018160 <__sfp_lock_release>
 8018180:	4b04      	ldr	r3, [pc, #16]	; (8018194 <__sinit+0x28>)
 8018182:	6223      	str	r3, [r4, #32]
 8018184:	4b04      	ldr	r3, [pc, #16]	; (8018198 <__sinit+0x2c>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d1f5      	bne.n	8018178 <__sinit+0xc>
 801818c:	f7ff ffc4 	bl	8018118 <global_stdio_init.part.0>
 8018190:	e7f2      	b.n	8018178 <__sinit+0xc>
 8018192:	bf00      	nop
 8018194:	080180d9 	.word	0x080180d9
 8018198:	20009e78 	.word	0x20009e78

0801819c <_fwalk_sglue>:
 801819c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181a0:	4607      	mov	r7, r0
 80181a2:	4688      	mov	r8, r1
 80181a4:	4614      	mov	r4, r2
 80181a6:	2600      	movs	r6, #0
 80181a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181ac:	f1b9 0901 	subs.w	r9, r9, #1
 80181b0:	d505      	bpl.n	80181be <_fwalk_sglue+0x22>
 80181b2:	6824      	ldr	r4, [r4, #0]
 80181b4:	2c00      	cmp	r4, #0
 80181b6:	d1f7      	bne.n	80181a8 <_fwalk_sglue+0xc>
 80181b8:	4630      	mov	r0, r6
 80181ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181be:	89ab      	ldrh	r3, [r5, #12]
 80181c0:	2b01      	cmp	r3, #1
 80181c2:	d907      	bls.n	80181d4 <_fwalk_sglue+0x38>
 80181c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80181c8:	3301      	adds	r3, #1
 80181ca:	d003      	beq.n	80181d4 <_fwalk_sglue+0x38>
 80181cc:	4629      	mov	r1, r5
 80181ce:	4638      	mov	r0, r7
 80181d0:	47c0      	blx	r8
 80181d2:	4306      	orrs	r6, r0
 80181d4:	3568      	adds	r5, #104	; 0x68
 80181d6:	e7e9      	b.n	80181ac <_fwalk_sglue+0x10>

080181d8 <iprintf>:
 80181d8:	b40f      	push	{r0, r1, r2, r3}
 80181da:	b507      	push	{r0, r1, r2, lr}
 80181dc:	4906      	ldr	r1, [pc, #24]	; (80181f8 <iprintf+0x20>)
 80181de:	ab04      	add	r3, sp, #16
 80181e0:	6808      	ldr	r0, [r1, #0]
 80181e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80181e6:	6881      	ldr	r1, [r0, #8]
 80181e8:	9301      	str	r3, [sp, #4]
 80181ea:	f000 fd43 	bl	8018c74 <_vfiprintf_r>
 80181ee:	b003      	add	sp, #12
 80181f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80181f4:	b004      	add	sp, #16
 80181f6:	4770      	bx	lr
 80181f8:	200000cc 	.word	0x200000cc

080181fc <setvbuf>:
 80181fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018200:	461d      	mov	r5, r3
 8018202:	4b54      	ldr	r3, [pc, #336]	; (8018354 <setvbuf+0x158>)
 8018204:	681f      	ldr	r7, [r3, #0]
 8018206:	4604      	mov	r4, r0
 8018208:	460e      	mov	r6, r1
 801820a:	4690      	mov	r8, r2
 801820c:	b127      	cbz	r7, 8018218 <setvbuf+0x1c>
 801820e:	6a3b      	ldr	r3, [r7, #32]
 8018210:	b913      	cbnz	r3, 8018218 <setvbuf+0x1c>
 8018212:	4638      	mov	r0, r7
 8018214:	f7ff ffaa 	bl	801816c <__sinit>
 8018218:	f1b8 0f02 	cmp.w	r8, #2
 801821c:	d006      	beq.n	801822c <setvbuf+0x30>
 801821e:	f1b8 0f01 	cmp.w	r8, #1
 8018222:	f200 8094 	bhi.w	801834e <setvbuf+0x152>
 8018226:	2d00      	cmp	r5, #0
 8018228:	f2c0 8091 	blt.w	801834e <setvbuf+0x152>
 801822c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801822e:	07da      	lsls	r2, r3, #31
 8018230:	d405      	bmi.n	801823e <setvbuf+0x42>
 8018232:	89a3      	ldrh	r3, [r4, #12]
 8018234:	059b      	lsls	r3, r3, #22
 8018236:	d402      	bmi.n	801823e <setvbuf+0x42>
 8018238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801823a:	f000 fb02 	bl	8018842 <__retarget_lock_acquire_recursive>
 801823e:	4621      	mov	r1, r4
 8018240:	4638      	mov	r0, r7
 8018242:	f001 f847 	bl	80192d4 <_fflush_r>
 8018246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018248:	b141      	cbz	r1, 801825c <setvbuf+0x60>
 801824a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801824e:	4299      	cmp	r1, r3
 8018250:	d002      	beq.n	8018258 <setvbuf+0x5c>
 8018252:	4638      	mov	r0, r7
 8018254:	f000 fb38 	bl	80188c8 <_free_r>
 8018258:	2300      	movs	r3, #0
 801825a:	6363      	str	r3, [r4, #52]	; 0x34
 801825c:	2300      	movs	r3, #0
 801825e:	61a3      	str	r3, [r4, #24]
 8018260:	6063      	str	r3, [r4, #4]
 8018262:	89a3      	ldrh	r3, [r4, #12]
 8018264:	0618      	lsls	r0, r3, #24
 8018266:	d503      	bpl.n	8018270 <setvbuf+0x74>
 8018268:	6921      	ldr	r1, [r4, #16]
 801826a:	4638      	mov	r0, r7
 801826c:	f000 fb2c 	bl	80188c8 <_free_r>
 8018270:	89a3      	ldrh	r3, [r4, #12]
 8018272:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8018276:	f023 0303 	bic.w	r3, r3, #3
 801827a:	f1b8 0f02 	cmp.w	r8, #2
 801827e:	81a3      	strh	r3, [r4, #12]
 8018280:	d05f      	beq.n	8018342 <setvbuf+0x146>
 8018282:	ab01      	add	r3, sp, #4
 8018284:	466a      	mov	r2, sp
 8018286:	4621      	mov	r1, r4
 8018288:	4638      	mov	r0, r7
 801828a:	f001 f85d 	bl	8019348 <__swhatbuf_r>
 801828e:	89a3      	ldrh	r3, [r4, #12]
 8018290:	4318      	orrs	r0, r3
 8018292:	81a0      	strh	r0, [r4, #12]
 8018294:	bb2d      	cbnz	r5, 80182e2 <setvbuf+0xe6>
 8018296:	9d00      	ldr	r5, [sp, #0]
 8018298:	4628      	mov	r0, r5
 801829a:	f7ff fcff 	bl	8017c9c <malloc>
 801829e:	4606      	mov	r6, r0
 80182a0:	2800      	cmp	r0, #0
 80182a2:	d150      	bne.n	8018346 <setvbuf+0x14a>
 80182a4:	f8dd 9000 	ldr.w	r9, [sp]
 80182a8:	45a9      	cmp	r9, r5
 80182aa:	d13e      	bne.n	801832a <setvbuf+0x12e>
 80182ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80182b0:	2200      	movs	r2, #0
 80182b2:	60a2      	str	r2, [r4, #8]
 80182b4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80182b8:	6022      	str	r2, [r4, #0]
 80182ba:	6122      	str	r2, [r4, #16]
 80182bc:	2201      	movs	r2, #1
 80182be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182c2:	6162      	str	r2, [r4, #20]
 80182c4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80182c6:	f043 0302 	orr.w	r3, r3, #2
 80182ca:	07d1      	lsls	r1, r2, #31
 80182cc:	81a3      	strh	r3, [r4, #12]
 80182ce:	d404      	bmi.n	80182da <setvbuf+0xde>
 80182d0:	059b      	lsls	r3, r3, #22
 80182d2:	d402      	bmi.n	80182da <setvbuf+0xde>
 80182d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182d6:	f000 fab5 	bl	8018844 <__retarget_lock_release_recursive>
 80182da:	4628      	mov	r0, r5
 80182dc:	b003      	add	sp, #12
 80182de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182e2:	2e00      	cmp	r6, #0
 80182e4:	d0d8      	beq.n	8018298 <setvbuf+0x9c>
 80182e6:	6a3b      	ldr	r3, [r7, #32]
 80182e8:	b913      	cbnz	r3, 80182f0 <setvbuf+0xf4>
 80182ea:	4638      	mov	r0, r7
 80182ec:	f7ff ff3e 	bl	801816c <__sinit>
 80182f0:	f1b8 0f01 	cmp.w	r8, #1
 80182f4:	bf08      	it	eq
 80182f6:	89a3      	ldrheq	r3, [r4, #12]
 80182f8:	6026      	str	r6, [r4, #0]
 80182fa:	bf04      	itt	eq
 80182fc:	f043 0301 	orreq.w	r3, r3, #1
 8018300:	81a3      	strheq	r3, [r4, #12]
 8018302:	89a3      	ldrh	r3, [r4, #12]
 8018304:	f013 0208 	ands.w	r2, r3, #8
 8018308:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801830c:	d01d      	beq.n	801834a <setvbuf+0x14e>
 801830e:	07da      	lsls	r2, r3, #31
 8018310:	bf41      	itttt	mi
 8018312:	2200      	movmi	r2, #0
 8018314:	426d      	negmi	r5, r5
 8018316:	60a2      	strmi	r2, [r4, #8]
 8018318:	61a5      	strmi	r5, [r4, #24]
 801831a:	bf58      	it	pl
 801831c:	60a5      	strpl	r5, [r4, #8]
 801831e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8018320:	f015 0501 	ands.w	r5, r5, #1
 8018324:	d0d4      	beq.n	80182d0 <setvbuf+0xd4>
 8018326:	2500      	movs	r5, #0
 8018328:	e7d7      	b.n	80182da <setvbuf+0xde>
 801832a:	4648      	mov	r0, r9
 801832c:	f7ff fcb6 	bl	8017c9c <malloc>
 8018330:	4606      	mov	r6, r0
 8018332:	2800      	cmp	r0, #0
 8018334:	d0ba      	beq.n	80182ac <setvbuf+0xb0>
 8018336:	89a3      	ldrh	r3, [r4, #12]
 8018338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801833c:	81a3      	strh	r3, [r4, #12]
 801833e:	464d      	mov	r5, r9
 8018340:	e7d1      	b.n	80182e6 <setvbuf+0xea>
 8018342:	2500      	movs	r5, #0
 8018344:	e7b4      	b.n	80182b0 <setvbuf+0xb4>
 8018346:	46a9      	mov	r9, r5
 8018348:	e7f5      	b.n	8018336 <setvbuf+0x13a>
 801834a:	60a2      	str	r2, [r4, #8]
 801834c:	e7e7      	b.n	801831e <setvbuf+0x122>
 801834e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018352:	e7c2      	b.n	80182da <setvbuf+0xde>
 8018354:	200000cc 	.word	0x200000cc

08018358 <sniprintf>:
 8018358:	b40c      	push	{r2, r3}
 801835a:	b530      	push	{r4, r5, lr}
 801835c:	4b17      	ldr	r3, [pc, #92]	; (80183bc <sniprintf+0x64>)
 801835e:	1e0c      	subs	r4, r1, #0
 8018360:	681d      	ldr	r5, [r3, #0]
 8018362:	b09d      	sub	sp, #116	; 0x74
 8018364:	da08      	bge.n	8018378 <sniprintf+0x20>
 8018366:	238b      	movs	r3, #139	; 0x8b
 8018368:	602b      	str	r3, [r5, #0]
 801836a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801836e:	b01d      	add	sp, #116	; 0x74
 8018370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018374:	b002      	add	sp, #8
 8018376:	4770      	bx	lr
 8018378:	f44f 7302 	mov.w	r3, #520	; 0x208
 801837c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018380:	bf14      	ite	ne
 8018382:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8018386:	4623      	moveq	r3, r4
 8018388:	9304      	str	r3, [sp, #16]
 801838a:	9307      	str	r3, [sp, #28]
 801838c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018390:	9002      	str	r0, [sp, #8]
 8018392:	9006      	str	r0, [sp, #24]
 8018394:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018398:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801839a:	ab21      	add	r3, sp, #132	; 0x84
 801839c:	a902      	add	r1, sp, #8
 801839e:	4628      	mov	r0, r5
 80183a0:	9301      	str	r3, [sp, #4]
 80183a2:	f000 fb3f 	bl	8018a24 <_svfiprintf_r>
 80183a6:	1c43      	adds	r3, r0, #1
 80183a8:	bfbc      	itt	lt
 80183aa:	238b      	movlt	r3, #139	; 0x8b
 80183ac:	602b      	strlt	r3, [r5, #0]
 80183ae:	2c00      	cmp	r4, #0
 80183b0:	d0dd      	beq.n	801836e <sniprintf+0x16>
 80183b2:	9b02      	ldr	r3, [sp, #8]
 80183b4:	2200      	movs	r2, #0
 80183b6:	701a      	strb	r2, [r3, #0]
 80183b8:	e7d9      	b.n	801836e <sniprintf+0x16>
 80183ba:	bf00      	nop
 80183bc:	200000cc 	.word	0x200000cc

080183c0 <__sread>:
 80183c0:	b510      	push	{r4, lr}
 80183c2:	460c      	mov	r4, r1
 80183c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183c8:	f000 f9dc 	bl	8018784 <_read_r>
 80183cc:	2800      	cmp	r0, #0
 80183ce:	bfab      	itete	ge
 80183d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80183d2:	89a3      	ldrhlt	r3, [r4, #12]
 80183d4:	181b      	addge	r3, r3, r0
 80183d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80183da:	bfac      	ite	ge
 80183dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80183de:	81a3      	strhlt	r3, [r4, #12]
 80183e0:	bd10      	pop	{r4, pc}

080183e2 <__swrite>:
 80183e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183e6:	461f      	mov	r7, r3
 80183e8:	898b      	ldrh	r3, [r1, #12]
 80183ea:	05db      	lsls	r3, r3, #23
 80183ec:	4605      	mov	r5, r0
 80183ee:	460c      	mov	r4, r1
 80183f0:	4616      	mov	r6, r2
 80183f2:	d505      	bpl.n	8018400 <__swrite+0x1e>
 80183f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183f8:	2302      	movs	r3, #2
 80183fa:	2200      	movs	r2, #0
 80183fc:	f000 f9b0 	bl	8018760 <_lseek_r>
 8018400:	89a3      	ldrh	r3, [r4, #12]
 8018402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801840a:	81a3      	strh	r3, [r4, #12]
 801840c:	4632      	mov	r2, r6
 801840e:	463b      	mov	r3, r7
 8018410:	4628      	mov	r0, r5
 8018412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018416:	f000 b9d7 	b.w	80187c8 <_write_r>

0801841a <__sseek>:
 801841a:	b510      	push	{r4, lr}
 801841c:	460c      	mov	r4, r1
 801841e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018422:	f000 f99d 	bl	8018760 <_lseek_r>
 8018426:	1c43      	adds	r3, r0, #1
 8018428:	89a3      	ldrh	r3, [r4, #12]
 801842a:	bf15      	itete	ne
 801842c:	6560      	strne	r0, [r4, #84]	; 0x54
 801842e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018436:	81a3      	strheq	r3, [r4, #12]
 8018438:	bf18      	it	ne
 801843a:	81a3      	strhne	r3, [r4, #12]
 801843c:	bd10      	pop	{r4, pc}

0801843e <__sclose>:
 801843e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018442:	f000 b927 	b.w	8018694 <_close_r>

08018446 <_vsniprintf_r>:
 8018446:	b530      	push	{r4, r5, lr}
 8018448:	4614      	mov	r4, r2
 801844a:	2c00      	cmp	r4, #0
 801844c:	b09b      	sub	sp, #108	; 0x6c
 801844e:	4605      	mov	r5, r0
 8018450:	461a      	mov	r2, r3
 8018452:	da05      	bge.n	8018460 <_vsniprintf_r+0x1a>
 8018454:	238b      	movs	r3, #139	; 0x8b
 8018456:	6003      	str	r3, [r0, #0]
 8018458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801845c:	b01b      	add	sp, #108	; 0x6c
 801845e:	bd30      	pop	{r4, r5, pc}
 8018460:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018464:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018468:	bf14      	ite	ne
 801846a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801846e:	4623      	moveq	r3, r4
 8018470:	9302      	str	r3, [sp, #8]
 8018472:	9305      	str	r3, [sp, #20]
 8018474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018478:	9100      	str	r1, [sp, #0]
 801847a:	9104      	str	r1, [sp, #16]
 801847c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018480:	4669      	mov	r1, sp
 8018482:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018484:	f000 face 	bl	8018a24 <_svfiprintf_r>
 8018488:	1c43      	adds	r3, r0, #1
 801848a:	bfbc      	itt	lt
 801848c:	238b      	movlt	r3, #139	; 0x8b
 801848e:	602b      	strlt	r3, [r5, #0]
 8018490:	2c00      	cmp	r4, #0
 8018492:	d0e3      	beq.n	801845c <_vsniprintf_r+0x16>
 8018494:	9b00      	ldr	r3, [sp, #0]
 8018496:	2200      	movs	r2, #0
 8018498:	701a      	strb	r2, [r3, #0]
 801849a:	e7df      	b.n	801845c <_vsniprintf_r+0x16>

0801849c <vsniprintf>:
 801849c:	b507      	push	{r0, r1, r2, lr}
 801849e:	9300      	str	r3, [sp, #0]
 80184a0:	4613      	mov	r3, r2
 80184a2:	460a      	mov	r2, r1
 80184a4:	4601      	mov	r1, r0
 80184a6:	4803      	ldr	r0, [pc, #12]	; (80184b4 <vsniprintf+0x18>)
 80184a8:	6800      	ldr	r0, [r0, #0]
 80184aa:	f7ff ffcc 	bl	8018446 <_vsniprintf_r>
 80184ae:	b003      	add	sp, #12
 80184b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80184b4:	200000cc 	.word	0x200000cc

080184b8 <__swbuf_r>:
 80184b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ba:	460e      	mov	r6, r1
 80184bc:	4614      	mov	r4, r2
 80184be:	4605      	mov	r5, r0
 80184c0:	b118      	cbz	r0, 80184ca <__swbuf_r+0x12>
 80184c2:	6a03      	ldr	r3, [r0, #32]
 80184c4:	b90b      	cbnz	r3, 80184ca <__swbuf_r+0x12>
 80184c6:	f7ff fe51 	bl	801816c <__sinit>
 80184ca:	69a3      	ldr	r3, [r4, #24]
 80184cc:	60a3      	str	r3, [r4, #8]
 80184ce:	89a3      	ldrh	r3, [r4, #12]
 80184d0:	071a      	lsls	r2, r3, #28
 80184d2:	d525      	bpl.n	8018520 <__swbuf_r+0x68>
 80184d4:	6923      	ldr	r3, [r4, #16]
 80184d6:	b31b      	cbz	r3, 8018520 <__swbuf_r+0x68>
 80184d8:	6823      	ldr	r3, [r4, #0]
 80184da:	6922      	ldr	r2, [r4, #16]
 80184dc:	1a98      	subs	r0, r3, r2
 80184de:	6963      	ldr	r3, [r4, #20]
 80184e0:	b2f6      	uxtb	r6, r6
 80184e2:	4283      	cmp	r3, r0
 80184e4:	4637      	mov	r7, r6
 80184e6:	dc04      	bgt.n	80184f2 <__swbuf_r+0x3a>
 80184e8:	4621      	mov	r1, r4
 80184ea:	4628      	mov	r0, r5
 80184ec:	f000 fef2 	bl	80192d4 <_fflush_r>
 80184f0:	b9e0      	cbnz	r0, 801852c <__swbuf_r+0x74>
 80184f2:	68a3      	ldr	r3, [r4, #8]
 80184f4:	3b01      	subs	r3, #1
 80184f6:	60a3      	str	r3, [r4, #8]
 80184f8:	6823      	ldr	r3, [r4, #0]
 80184fa:	1c5a      	adds	r2, r3, #1
 80184fc:	6022      	str	r2, [r4, #0]
 80184fe:	701e      	strb	r6, [r3, #0]
 8018500:	6962      	ldr	r2, [r4, #20]
 8018502:	1c43      	adds	r3, r0, #1
 8018504:	429a      	cmp	r2, r3
 8018506:	d004      	beq.n	8018512 <__swbuf_r+0x5a>
 8018508:	89a3      	ldrh	r3, [r4, #12]
 801850a:	07db      	lsls	r3, r3, #31
 801850c:	d506      	bpl.n	801851c <__swbuf_r+0x64>
 801850e:	2e0a      	cmp	r6, #10
 8018510:	d104      	bne.n	801851c <__swbuf_r+0x64>
 8018512:	4621      	mov	r1, r4
 8018514:	4628      	mov	r0, r5
 8018516:	f000 fedd 	bl	80192d4 <_fflush_r>
 801851a:	b938      	cbnz	r0, 801852c <__swbuf_r+0x74>
 801851c:	4638      	mov	r0, r7
 801851e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018520:	4621      	mov	r1, r4
 8018522:	4628      	mov	r0, r5
 8018524:	f000 f806 	bl	8018534 <__swsetup_r>
 8018528:	2800      	cmp	r0, #0
 801852a:	d0d5      	beq.n	80184d8 <__swbuf_r+0x20>
 801852c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018530:	e7f4      	b.n	801851c <__swbuf_r+0x64>
	...

08018534 <__swsetup_r>:
 8018534:	b538      	push	{r3, r4, r5, lr}
 8018536:	4b2a      	ldr	r3, [pc, #168]	; (80185e0 <__swsetup_r+0xac>)
 8018538:	4605      	mov	r5, r0
 801853a:	6818      	ldr	r0, [r3, #0]
 801853c:	460c      	mov	r4, r1
 801853e:	b118      	cbz	r0, 8018548 <__swsetup_r+0x14>
 8018540:	6a03      	ldr	r3, [r0, #32]
 8018542:	b90b      	cbnz	r3, 8018548 <__swsetup_r+0x14>
 8018544:	f7ff fe12 	bl	801816c <__sinit>
 8018548:	89a3      	ldrh	r3, [r4, #12]
 801854a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801854e:	0718      	lsls	r0, r3, #28
 8018550:	d422      	bmi.n	8018598 <__swsetup_r+0x64>
 8018552:	06d9      	lsls	r1, r3, #27
 8018554:	d407      	bmi.n	8018566 <__swsetup_r+0x32>
 8018556:	2309      	movs	r3, #9
 8018558:	602b      	str	r3, [r5, #0]
 801855a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801855e:	81a3      	strh	r3, [r4, #12]
 8018560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018564:	e034      	b.n	80185d0 <__swsetup_r+0x9c>
 8018566:	0758      	lsls	r0, r3, #29
 8018568:	d512      	bpl.n	8018590 <__swsetup_r+0x5c>
 801856a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801856c:	b141      	cbz	r1, 8018580 <__swsetup_r+0x4c>
 801856e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018572:	4299      	cmp	r1, r3
 8018574:	d002      	beq.n	801857c <__swsetup_r+0x48>
 8018576:	4628      	mov	r0, r5
 8018578:	f000 f9a6 	bl	80188c8 <_free_r>
 801857c:	2300      	movs	r3, #0
 801857e:	6363      	str	r3, [r4, #52]	; 0x34
 8018580:	89a3      	ldrh	r3, [r4, #12]
 8018582:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018586:	81a3      	strh	r3, [r4, #12]
 8018588:	2300      	movs	r3, #0
 801858a:	6063      	str	r3, [r4, #4]
 801858c:	6923      	ldr	r3, [r4, #16]
 801858e:	6023      	str	r3, [r4, #0]
 8018590:	89a3      	ldrh	r3, [r4, #12]
 8018592:	f043 0308 	orr.w	r3, r3, #8
 8018596:	81a3      	strh	r3, [r4, #12]
 8018598:	6923      	ldr	r3, [r4, #16]
 801859a:	b94b      	cbnz	r3, 80185b0 <__swsetup_r+0x7c>
 801859c:	89a3      	ldrh	r3, [r4, #12]
 801859e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80185a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80185a6:	d003      	beq.n	80185b0 <__swsetup_r+0x7c>
 80185a8:	4621      	mov	r1, r4
 80185aa:	4628      	mov	r0, r5
 80185ac:	f000 fef2 	bl	8019394 <__smakebuf_r>
 80185b0:	89a0      	ldrh	r0, [r4, #12]
 80185b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80185b6:	f010 0301 	ands.w	r3, r0, #1
 80185ba:	d00a      	beq.n	80185d2 <__swsetup_r+0x9e>
 80185bc:	2300      	movs	r3, #0
 80185be:	60a3      	str	r3, [r4, #8]
 80185c0:	6963      	ldr	r3, [r4, #20]
 80185c2:	425b      	negs	r3, r3
 80185c4:	61a3      	str	r3, [r4, #24]
 80185c6:	6923      	ldr	r3, [r4, #16]
 80185c8:	b943      	cbnz	r3, 80185dc <__swsetup_r+0xa8>
 80185ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80185ce:	d1c4      	bne.n	801855a <__swsetup_r+0x26>
 80185d0:	bd38      	pop	{r3, r4, r5, pc}
 80185d2:	0781      	lsls	r1, r0, #30
 80185d4:	bf58      	it	pl
 80185d6:	6963      	ldrpl	r3, [r4, #20]
 80185d8:	60a3      	str	r3, [r4, #8]
 80185da:	e7f4      	b.n	80185c6 <__swsetup_r+0x92>
 80185dc:	2000      	movs	r0, #0
 80185de:	e7f7      	b.n	80185d0 <__swsetup_r+0x9c>
 80185e0:	200000cc 	.word	0x200000cc

080185e4 <memmove>:
 80185e4:	4288      	cmp	r0, r1
 80185e6:	b510      	push	{r4, lr}
 80185e8:	eb01 0402 	add.w	r4, r1, r2
 80185ec:	d902      	bls.n	80185f4 <memmove+0x10>
 80185ee:	4284      	cmp	r4, r0
 80185f0:	4623      	mov	r3, r4
 80185f2:	d807      	bhi.n	8018604 <memmove+0x20>
 80185f4:	1e43      	subs	r3, r0, #1
 80185f6:	42a1      	cmp	r1, r4
 80185f8:	d008      	beq.n	801860c <memmove+0x28>
 80185fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80185fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018602:	e7f8      	b.n	80185f6 <memmove+0x12>
 8018604:	4402      	add	r2, r0
 8018606:	4601      	mov	r1, r0
 8018608:	428a      	cmp	r2, r1
 801860a:	d100      	bne.n	801860e <memmove+0x2a>
 801860c:	bd10      	pop	{r4, pc}
 801860e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018616:	e7f7      	b.n	8018608 <memmove+0x24>

08018618 <memset>:
 8018618:	4402      	add	r2, r0
 801861a:	4603      	mov	r3, r0
 801861c:	4293      	cmp	r3, r2
 801861e:	d100      	bne.n	8018622 <memset+0xa>
 8018620:	4770      	bx	lr
 8018622:	f803 1b01 	strb.w	r1, [r3], #1
 8018626:	e7f9      	b.n	801861c <memset+0x4>

08018628 <strchr>:
 8018628:	b2c9      	uxtb	r1, r1
 801862a:	4603      	mov	r3, r0
 801862c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018630:	b11a      	cbz	r2, 801863a <strchr+0x12>
 8018632:	428a      	cmp	r2, r1
 8018634:	d1f9      	bne.n	801862a <strchr+0x2>
 8018636:	4618      	mov	r0, r3
 8018638:	4770      	bx	lr
 801863a:	2900      	cmp	r1, #0
 801863c:	bf18      	it	ne
 801863e:	2300      	movne	r3, #0
 8018640:	e7f9      	b.n	8018636 <strchr+0xe>

08018642 <strncmp>:
 8018642:	b510      	push	{r4, lr}
 8018644:	b16a      	cbz	r2, 8018662 <strncmp+0x20>
 8018646:	3901      	subs	r1, #1
 8018648:	1884      	adds	r4, r0, r2
 801864a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801864e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018652:	429a      	cmp	r2, r3
 8018654:	d103      	bne.n	801865e <strncmp+0x1c>
 8018656:	42a0      	cmp	r0, r4
 8018658:	d001      	beq.n	801865e <strncmp+0x1c>
 801865a:	2a00      	cmp	r2, #0
 801865c:	d1f5      	bne.n	801864a <strncmp+0x8>
 801865e:	1ad0      	subs	r0, r2, r3
 8018660:	bd10      	pop	{r4, pc}
 8018662:	4610      	mov	r0, r2
 8018664:	e7fc      	b.n	8018660 <strncmp+0x1e>

08018666 <strstr>:
 8018666:	780a      	ldrb	r2, [r1, #0]
 8018668:	b570      	push	{r4, r5, r6, lr}
 801866a:	b96a      	cbnz	r2, 8018688 <strstr+0x22>
 801866c:	bd70      	pop	{r4, r5, r6, pc}
 801866e:	429a      	cmp	r2, r3
 8018670:	d109      	bne.n	8018686 <strstr+0x20>
 8018672:	460c      	mov	r4, r1
 8018674:	4605      	mov	r5, r0
 8018676:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801867a:	2b00      	cmp	r3, #0
 801867c:	d0f6      	beq.n	801866c <strstr+0x6>
 801867e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018682:	429e      	cmp	r6, r3
 8018684:	d0f7      	beq.n	8018676 <strstr+0x10>
 8018686:	3001      	adds	r0, #1
 8018688:	7803      	ldrb	r3, [r0, #0]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d1ef      	bne.n	801866e <strstr+0x8>
 801868e:	4618      	mov	r0, r3
 8018690:	e7ec      	b.n	801866c <strstr+0x6>
	...

08018694 <_close_r>:
 8018694:	b538      	push	{r3, r4, r5, lr}
 8018696:	4d06      	ldr	r5, [pc, #24]	; (80186b0 <_close_r+0x1c>)
 8018698:	2300      	movs	r3, #0
 801869a:	4604      	mov	r4, r0
 801869c:	4608      	mov	r0, r1
 801869e:	602b      	str	r3, [r5, #0]
 80186a0:	f7ea fc82 	bl	8002fa8 <_close>
 80186a4:	1c43      	adds	r3, r0, #1
 80186a6:	d102      	bne.n	80186ae <_close_r+0x1a>
 80186a8:	682b      	ldr	r3, [r5, #0]
 80186aa:	b103      	cbz	r3, 80186ae <_close_r+0x1a>
 80186ac:	6023      	str	r3, [r4, #0]
 80186ae:	bd38      	pop	{r3, r4, r5, pc}
 80186b0:	20009e7c 	.word	0x20009e7c

080186b4 <_reclaim_reent>:
 80186b4:	4b29      	ldr	r3, [pc, #164]	; (801875c <_reclaim_reent+0xa8>)
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	4283      	cmp	r3, r0
 80186ba:	b570      	push	{r4, r5, r6, lr}
 80186bc:	4604      	mov	r4, r0
 80186be:	d04b      	beq.n	8018758 <_reclaim_reent+0xa4>
 80186c0:	69c3      	ldr	r3, [r0, #28]
 80186c2:	b143      	cbz	r3, 80186d6 <_reclaim_reent+0x22>
 80186c4:	68db      	ldr	r3, [r3, #12]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d144      	bne.n	8018754 <_reclaim_reent+0xa0>
 80186ca:	69e3      	ldr	r3, [r4, #28]
 80186cc:	6819      	ldr	r1, [r3, #0]
 80186ce:	b111      	cbz	r1, 80186d6 <_reclaim_reent+0x22>
 80186d0:	4620      	mov	r0, r4
 80186d2:	f000 f8f9 	bl	80188c8 <_free_r>
 80186d6:	6961      	ldr	r1, [r4, #20]
 80186d8:	b111      	cbz	r1, 80186e0 <_reclaim_reent+0x2c>
 80186da:	4620      	mov	r0, r4
 80186dc:	f000 f8f4 	bl	80188c8 <_free_r>
 80186e0:	69e1      	ldr	r1, [r4, #28]
 80186e2:	b111      	cbz	r1, 80186ea <_reclaim_reent+0x36>
 80186e4:	4620      	mov	r0, r4
 80186e6:	f000 f8ef 	bl	80188c8 <_free_r>
 80186ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80186ec:	b111      	cbz	r1, 80186f4 <_reclaim_reent+0x40>
 80186ee:	4620      	mov	r0, r4
 80186f0:	f000 f8ea 	bl	80188c8 <_free_r>
 80186f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80186f6:	b111      	cbz	r1, 80186fe <_reclaim_reent+0x4a>
 80186f8:	4620      	mov	r0, r4
 80186fa:	f000 f8e5 	bl	80188c8 <_free_r>
 80186fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018700:	b111      	cbz	r1, 8018708 <_reclaim_reent+0x54>
 8018702:	4620      	mov	r0, r4
 8018704:	f000 f8e0 	bl	80188c8 <_free_r>
 8018708:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801870a:	b111      	cbz	r1, 8018712 <_reclaim_reent+0x5e>
 801870c:	4620      	mov	r0, r4
 801870e:	f000 f8db 	bl	80188c8 <_free_r>
 8018712:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018714:	b111      	cbz	r1, 801871c <_reclaim_reent+0x68>
 8018716:	4620      	mov	r0, r4
 8018718:	f000 f8d6 	bl	80188c8 <_free_r>
 801871c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801871e:	b111      	cbz	r1, 8018726 <_reclaim_reent+0x72>
 8018720:	4620      	mov	r0, r4
 8018722:	f000 f8d1 	bl	80188c8 <_free_r>
 8018726:	6a23      	ldr	r3, [r4, #32]
 8018728:	b1b3      	cbz	r3, 8018758 <_reclaim_reent+0xa4>
 801872a:	4620      	mov	r0, r4
 801872c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018730:	4718      	bx	r3
 8018732:	5949      	ldr	r1, [r1, r5]
 8018734:	b941      	cbnz	r1, 8018748 <_reclaim_reent+0x94>
 8018736:	3504      	adds	r5, #4
 8018738:	69e3      	ldr	r3, [r4, #28]
 801873a:	2d80      	cmp	r5, #128	; 0x80
 801873c:	68d9      	ldr	r1, [r3, #12]
 801873e:	d1f8      	bne.n	8018732 <_reclaim_reent+0x7e>
 8018740:	4620      	mov	r0, r4
 8018742:	f000 f8c1 	bl	80188c8 <_free_r>
 8018746:	e7c0      	b.n	80186ca <_reclaim_reent+0x16>
 8018748:	680e      	ldr	r6, [r1, #0]
 801874a:	4620      	mov	r0, r4
 801874c:	f000 f8bc 	bl	80188c8 <_free_r>
 8018750:	4631      	mov	r1, r6
 8018752:	e7ef      	b.n	8018734 <_reclaim_reent+0x80>
 8018754:	2500      	movs	r5, #0
 8018756:	e7ef      	b.n	8018738 <_reclaim_reent+0x84>
 8018758:	bd70      	pop	{r4, r5, r6, pc}
 801875a:	bf00      	nop
 801875c:	200000cc 	.word	0x200000cc

08018760 <_lseek_r>:
 8018760:	b538      	push	{r3, r4, r5, lr}
 8018762:	4d07      	ldr	r5, [pc, #28]	; (8018780 <_lseek_r+0x20>)
 8018764:	4604      	mov	r4, r0
 8018766:	4608      	mov	r0, r1
 8018768:	4611      	mov	r1, r2
 801876a:	2200      	movs	r2, #0
 801876c:	602a      	str	r2, [r5, #0]
 801876e:	461a      	mov	r2, r3
 8018770:	f7ea fc31 	bl	8002fd6 <_lseek>
 8018774:	1c43      	adds	r3, r0, #1
 8018776:	d102      	bne.n	801877e <_lseek_r+0x1e>
 8018778:	682b      	ldr	r3, [r5, #0]
 801877a:	b103      	cbz	r3, 801877e <_lseek_r+0x1e>
 801877c:	6023      	str	r3, [r4, #0]
 801877e:	bd38      	pop	{r3, r4, r5, pc}
 8018780:	20009e7c 	.word	0x20009e7c

08018784 <_read_r>:
 8018784:	b538      	push	{r3, r4, r5, lr}
 8018786:	4d07      	ldr	r5, [pc, #28]	; (80187a4 <_read_r+0x20>)
 8018788:	4604      	mov	r4, r0
 801878a:	4608      	mov	r0, r1
 801878c:	4611      	mov	r1, r2
 801878e:	2200      	movs	r2, #0
 8018790:	602a      	str	r2, [r5, #0]
 8018792:	461a      	mov	r2, r3
 8018794:	f7ea fc30 	bl	8002ff8 <_read>
 8018798:	1c43      	adds	r3, r0, #1
 801879a:	d102      	bne.n	80187a2 <_read_r+0x1e>
 801879c:	682b      	ldr	r3, [r5, #0]
 801879e:	b103      	cbz	r3, 80187a2 <_read_r+0x1e>
 80187a0:	6023      	str	r3, [r4, #0]
 80187a2:	bd38      	pop	{r3, r4, r5, pc}
 80187a4:	20009e7c 	.word	0x20009e7c

080187a8 <_sbrk_r>:
 80187a8:	b538      	push	{r3, r4, r5, lr}
 80187aa:	4d06      	ldr	r5, [pc, #24]	; (80187c4 <_sbrk_r+0x1c>)
 80187ac:	2300      	movs	r3, #0
 80187ae:	4604      	mov	r4, r0
 80187b0:	4608      	mov	r0, r1
 80187b2:	602b      	str	r3, [r5, #0]
 80187b4:	f7eb f8ba 	bl	800392c <_sbrk>
 80187b8:	1c43      	adds	r3, r0, #1
 80187ba:	d102      	bne.n	80187c2 <_sbrk_r+0x1a>
 80187bc:	682b      	ldr	r3, [r5, #0]
 80187be:	b103      	cbz	r3, 80187c2 <_sbrk_r+0x1a>
 80187c0:	6023      	str	r3, [r4, #0]
 80187c2:	bd38      	pop	{r3, r4, r5, pc}
 80187c4:	20009e7c 	.word	0x20009e7c

080187c8 <_write_r>:
 80187c8:	b538      	push	{r3, r4, r5, lr}
 80187ca:	4d07      	ldr	r5, [pc, #28]	; (80187e8 <_write_r+0x20>)
 80187cc:	4604      	mov	r4, r0
 80187ce:	4608      	mov	r0, r1
 80187d0:	4611      	mov	r1, r2
 80187d2:	2200      	movs	r2, #0
 80187d4:	602a      	str	r2, [r5, #0]
 80187d6:	461a      	mov	r2, r3
 80187d8:	f7ea fbba 	bl	8002f50 <_write>
 80187dc:	1c43      	adds	r3, r0, #1
 80187de:	d102      	bne.n	80187e6 <_write_r+0x1e>
 80187e0:	682b      	ldr	r3, [r5, #0]
 80187e2:	b103      	cbz	r3, 80187e6 <_write_r+0x1e>
 80187e4:	6023      	str	r3, [r4, #0]
 80187e6:	bd38      	pop	{r3, r4, r5, pc}
 80187e8:	20009e7c 	.word	0x20009e7c

080187ec <__errno>:
 80187ec:	4b01      	ldr	r3, [pc, #4]	; (80187f4 <__errno+0x8>)
 80187ee:	6818      	ldr	r0, [r3, #0]
 80187f0:	4770      	bx	lr
 80187f2:	bf00      	nop
 80187f4:	200000cc 	.word	0x200000cc

080187f8 <__libc_init_array>:
 80187f8:	b570      	push	{r4, r5, r6, lr}
 80187fa:	4d0d      	ldr	r5, [pc, #52]	; (8018830 <__libc_init_array+0x38>)
 80187fc:	4c0d      	ldr	r4, [pc, #52]	; (8018834 <__libc_init_array+0x3c>)
 80187fe:	1b64      	subs	r4, r4, r5
 8018800:	10a4      	asrs	r4, r4, #2
 8018802:	2600      	movs	r6, #0
 8018804:	42a6      	cmp	r6, r4
 8018806:	d109      	bne.n	801881c <__libc_init_array+0x24>
 8018808:	4d0b      	ldr	r5, [pc, #44]	; (8018838 <__libc_init_array+0x40>)
 801880a:	4c0c      	ldr	r4, [pc, #48]	; (801883c <__libc_init_array+0x44>)
 801880c:	f000 fe6e 	bl	80194ec <_init>
 8018810:	1b64      	subs	r4, r4, r5
 8018812:	10a4      	asrs	r4, r4, #2
 8018814:	2600      	movs	r6, #0
 8018816:	42a6      	cmp	r6, r4
 8018818:	d105      	bne.n	8018826 <__libc_init_array+0x2e>
 801881a:	bd70      	pop	{r4, r5, r6, pc}
 801881c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018820:	4798      	blx	r3
 8018822:	3601      	adds	r6, #1
 8018824:	e7ee      	b.n	8018804 <__libc_init_array+0xc>
 8018826:	f855 3b04 	ldr.w	r3, [r5], #4
 801882a:	4798      	blx	r3
 801882c:	3601      	adds	r6, #1
 801882e:	e7f2      	b.n	8018816 <__libc_init_array+0x1e>
 8018830:	0801a3f8 	.word	0x0801a3f8
 8018834:	0801a3f8 	.word	0x0801a3f8
 8018838:	0801a3f8 	.word	0x0801a3f8
 801883c:	0801a3fc 	.word	0x0801a3fc

08018840 <__retarget_lock_init_recursive>:
 8018840:	4770      	bx	lr

08018842 <__retarget_lock_acquire_recursive>:
 8018842:	4770      	bx	lr

08018844 <__retarget_lock_release_recursive>:
 8018844:	4770      	bx	lr

08018846 <strcpy>:
 8018846:	4603      	mov	r3, r0
 8018848:	f811 2b01 	ldrb.w	r2, [r1], #1
 801884c:	f803 2b01 	strb.w	r2, [r3], #1
 8018850:	2a00      	cmp	r2, #0
 8018852:	d1f9      	bne.n	8018848 <strcpy+0x2>
 8018854:	4770      	bx	lr

08018856 <memcpy>:
 8018856:	440a      	add	r2, r1
 8018858:	4291      	cmp	r1, r2
 801885a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801885e:	d100      	bne.n	8018862 <memcpy+0xc>
 8018860:	4770      	bx	lr
 8018862:	b510      	push	{r4, lr}
 8018864:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018868:	f803 4f01 	strb.w	r4, [r3, #1]!
 801886c:	4291      	cmp	r1, r2
 801886e:	d1f9      	bne.n	8018864 <memcpy+0xe>
 8018870:	bd10      	pop	{r4, pc}
	...

08018874 <__assert_func>:
 8018874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018876:	4614      	mov	r4, r2
 8018878:	461a      	mov	r2, r3
 801887a:	4b09      	ldr	r3, [pc, #36]	; (80188a0 <__assert_func+0x2c>)
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	4605      	mov	r5, r0
 8018880:	68d8      	ldr	r0, [r3, #12]
 8018882:	b14c      	cbz	r4, 8018898 <__assert_func+0x24>
 8018884:	4b07      	ldr	r3, [pc, #28]	; (80188a4 <__assert_func+0x30>)
 8018886:	9100      	str	r1, [sp, #0]
 8018888:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801888c:	4906      	ldr	r1, [pc, #24]	; (80188a8 <__assert_func+0x34>)
 801888e:	462b      	mov	r3, r5
 8018890:	f000 fd48 	bl	8019324 <fiprintf>
 8018894:	f000 fddc 	bl	8019450 <abort>
 8018898:	4b04      	ldr	r3, [pc, #16]	; (80188ac <__assert_func+0x38>)
 801889a:	461c      	mov	r4, r3
 801889c:	e7f3      	b.n	8018886 <__assert_func+0x12>
 801889e:	bf00      	nop
 80188a0:	200000cc 	.word	0x200000cc
 80188a4:	0801a380 	.word	0x0801a380
 80188a8:	0801a38d 	.word	0x0801a38d
 80188ac:	0801a3bb 	.word	0x0801a3bb

080188b0 <__env_lock>:
 80188b0:	4801      	ldr	r0, [pc, #4]	; (80188b8 <__env_lock+0x8>)
 80188b2:	f7ff bfc6 	b.w	8018842 <__retarget_lock_acquire_recursive>
 80188b6:	bf00      	nop
 80188b8:	20009e80 	.word	0x20009e80

080188bc <__env_unlock>:
 80188bc:	4801      	ldr	r0, [pc, #4]	; (80188c4 <__env_unlock+0x8>)
 80188be:	f7ff bfc1 	b.w	8018844 <__retarget_lock_release_recursive>
 80188c2:	bf00      	nop
 80188c4:	20009e80 	.word	0x20009e80

080188c8 <_free_r>:
 80188c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188ca:	2900      	cmp	r1, #0
 80188cc:	d044      	beq.n	8018958 <_free_r+0x90>
 80188ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188d2:	9001      	str	r0, [sp, #4]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	f1a1 0404 	sub.w	r4, r1, #4
 80188da:	bfb8      	it	lt
 80188dc:	18e4      	addlt	r4, r4, r3
 80188de:	f7ff fa8d 	bl	8017dfc <__malloc_lock>
 80188e2:	4a1e      	ldr	r2, [pc, #120]	; (801895c <_free_r+0x94>)
 80188e4:	9801      	ldr	r0, [sp, #4]
 80188e6:	6813      	ldr	r3, [r2, #0]
 80188e8:	b933      	cbnz	r3, 80188f8 <_free_r+0x30>
 80188ea:	6063      	str	r3, [r4, #4]
 80188ec:	6014      	str	r4, [r2, #0]
 80188ee:	b003      	add	sp, #12
 80188f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80188f4:	f7ff ba88 	b.w	8017e08 <__malloc_unlock>
 80188f8:	42a3      	cmp	r3, r4
 80188fa:	d908      	bls.n	801890e <_free_r+0x46>
 80188fc:	6825      	ldr	r5, [r4, #0]
 80188fe:	1961      	adds	r1, r4, r5
 8018900:	428b      	cmp	r3, r1
 8018902:	bf01      	itttt	eq
 8018904:	6819      	ldreq	r1, [r3, #0]
 8018906:	685b      	ldreq	r3, [r3, #4]
 8018908:	1949      	addeq	r1, r1, r5
 801890a:	6021      	streq	r1, [r4, #0]
 801890c:	e7ed      	b.n	80188ea <_free_r+0x22>
 801890e:	461a      	mov	r2, r3
 8018910:	685b      	ldr	r3, [r3, #4]
 8018912:	b10b      	cbz	r3, 8018918 <_free_r+0x50>
 8018914:	42a3      	cmp	r3, r4
 8018916:	d9fa      	bls.n	801890e <_free_r+0x46>
 8018918:	6811      	ldr	r1, [r2, #0]
 801891a:	1855      	adds	r5, r2, r1
 801891c:	42a5      	cmp	r5, r4
 801891e:	d10b      	bne.n	8018938 <_free_r+0x70>
 8018920:	6824      	ldr	r4, [r4, #0]
 8018922:	4421      	add	r1, r4
 8018924:	1854      	adds	r4, r2, r1
 8018926:	42a3      	cmp	r3, r4
 8018928:	6011      	str	r1, [r2, #0]
 801892a:	d1e0      	bne.n	80188ee <_free_r+0x26>
 801892c:	681c      	ldr	r4, [r3, #0]
 801892e:	685b      	ldr	r3, [r3, #4]
 8018930:	6053      	str	r3, [r2, #4]
 8018932:	440c      	add	r4, r1
 8018934:	6014      	str	r4, [r2, #0]
 8018936:	e7da      	b.n	80188ee <_free_r+0x26>
 8018938:	d902      	bls.n	8018940 <_free_r+0x78>
 801893a:	230c      	movs	r3, #12
 801893c:	6003      	str	r3, [r0, #0]
 801893e:	e7d6      	b.n	80188ee <_free_r+0x26>
 8018940:	6825      	ldr	r5, [r4, #0]
 8018942:	1961      	adds	r1, r4, r5
 8018944:	428b      	cmp	r3, r1
 8018946:	bf04      	itt	eq
 8018948:	6819      	ldreq	r1, [r3, #0]
 801894a:	685b      	ldreq	r3, [r3, #4]
 801894c:	6063      	str	r3, [r4, #4]
 801894e:	bf04      	itt	eq
 8018950:	1949      	addeq	r1, r1, r5
 8018952:	6021      	streq	r1, [r4, #0]
 8018954:	6054      	str	r4, [r2, #4]
 8018956:	e7ca      	b.n	80188ee <_free_r+0x26>
 8018958:	b003      	add	sp, #12
 801895a:	bd30      	pop	{r4, r5, pc}
 801895c:	20009d38 	.word	0x20009d38

08018960 <_malloc_usable_size_r>:
 8018960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018964:	1f18      	subs	r0, r3, #4
 8018966:	2b00      	cmp	r3, #0
 8018968:	bfbc      	itt	lt
 801896a:	580b      	ldrlt	r3, [r1, r0]
 801896c:	18c0      	addlt	r0, r0, r3
 801896e:	4770      	bx	lr

08018970 <__ssputs_r>:
 8018970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018974:	688e      	ldr	r6, [r1, #8]
 8018976:	461f      	mov	r7, r3
 8018978:	42be      	cmp	r6, r7
 801897a:	680b      	ldr	r3, [r1, #0]
 801897c:	4682      	mov	sl, r0
 801897e:	460c      	mov	r4, r1
 8018980:	4690      	mov	r8, r2
 8018982:	d82c      	bhi.n	80189de <__ssputs_r+0x6e>
 8018984:	898a      	ldrh	r2, [r1, #12]
 8018986:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801898a:	d026      	beq.n	80189da <__ssputs_r+0x6a>
 801898c:	6965      	ldr	r5, [r4, #20]
 801898e:	6909      	ldr	r1, [r1, #16]
 8018990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018994:	eba3 0901 	sub.w	r9, r3, r1
 8018998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801899c:	1c7b      	adds	r3, r7, #1
 801899e:	444b      	add	r3, r9
 80189a0:	106d      	asrs	r5, r5, #1
 80189a2:	429d      	cmp	r5, r3
 80189a4:	bf38      	it	cc
 80189a6:	461d      	movcc	r5, r3
 80189a8:	0553      	lsls	r3, r2, #21
 80189aa:	d527      	bpl.n	80189fc <__ssputs_r+0x8c>
 80189ac:	4629      	mov	r1, r5
 80189ae:	f7ff f9a5 	bl	8017cfc <_malloc_r>
 80189b2:	4606      	mov	r6, r0
 80189b4:	b360      	cbz	r0, 8018a10 <__ssputs_r+0xa0>
 80189b6:	6921      	ldr	r1, [r4, #16]
 80189b8:	464a      	mov	r2, r9
 80189ba:	f7ff ff4c 	bl	8018856 <memcpy>
 80189be:	89a3      	ldrh	r3, [r4, #12]
 80189c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80189c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80189c8:	81a3      	strh	r3, [r4, #12]
 80189ca:	6126      	str	r6, [r4, #16]
 80189cc:	6165      	str	r5, [r4, #20]
 80189ce:	444e      	add	r6, r9
 80189d0:	eba5 0509 	sub.w	r5, r5, r9
 80189d4:	6026      	str	r6, [r4, #0]
 80189d6:	60a5      	str	r5, [r4, #8]
 80189d8:	463e      	mov	r6, r7
 80189da:	42be      	cmp	r6, r7
 80189dc:	d900      	bls.n	80189e0 <__ssputs_r+0x70>
 80189de:	463e      	mov	r6, r7
 80189e0:	6820      	ldr	r0, [r4, #0]
 80189e2:	4632      	mov	r2, r6
 80189e4:	4641      	mov	r1, r8
 80189e6:	f7ff fdfd 	bl	80185e4 <memmove>
 80189ea:	68a3      	ldr	r3, [r4, #8]
 80189ec:	1b9b      	subs	r3, r3, r6
 80189ee:	60a3      	str	r3, [r4, #8]
 80189f0:	6823      	ldr	r3, [r4, #0]
 80189f2:	4433      	add	r3, r6
 80189f4:	6023      	str	r3, [r4, #0]
 80189f6:	2000      	movs	r0, #0
 80189f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189fc:	462a      	mov	r2, r5
 80189fe:	f7ff fa7d 	bl	8017efc <_realloc_r>
 8018a02:	4606      	mov	r6, r0
 8018a04:	2800      	cmp	r0, #0
 8018a06:	d1e0      	bne.n	80189ca <__ssputs_r+0x5a>
 8018a08:	6921      	ldr	r1, [r4, #16]
 8018a0a:	4650      	mov	r0, sl
 8018a0c:	f7ff ff5c 	bl	80188c8 <_free_r>
 8018a10:	230c      	movs	r3, #12
 8018a12:	f8ca 3000 	str.w	r3, [sl]
 8018a16:	89a3      	ldrh	r3, [r4, #12]
 8018a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a1c:	81a3      	strh	r3, [r4, #12]
 8018a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a22:	e7e9      	b.n	80189f8 <__ssputs_r+0x88>

08018a24 <_svfiprintf_r>:
 8018a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a28:	4698      	mov	r8, r3
 8018a2a:	898b      	ldrh	r3, [r1, #12]
 8018a2c:	061b      	lsls	r3, r3, #24
 8018a2e:	b09d      	sub	sp, #116	; 0x74
 8018a30:	4607      	mov	r7, r0
 8018a32:	460d      	mov	r5, r1
 8018a34:	4614      	mov	r4, r2
 8018a36:	d50e      	bpl.n	8018a56 <_svfiprintf_r+0x32>
 8018a38:	690b      	ldr	r3, [r1, #16]
 8018a3a:	b963      	cbnz	r3, 8018a56 <_svfiprintf_r+0x32>
 8018a3c:	2140      	movs	r1, #64	; 0x40
 8018a3e:	f7ff f95d 	bl	8017cfc <_malloc_r>
 8018a42:	6028      	str	r0, [r5, #0]
 8018a44:	6128      	str	r0, [r5, #16]
 8018a46:	b920      	cbnz	r0, 8018a52 <_svfiprintf_r+0x2e>
 8018a48:	230c      	movs	r3, #12
 8018a4a:	603b      	str	r3, [r7, #0]
 8018a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a50:	e0d0      	b.n	8018bf4 <_svfiprintf_r+0x1d0>
 8018a52:	2340      	movs	r3, #64	; 0x40
 8018a54:	616b      	str	r3, [r5, #20]
 8018a56:	2300      	movs	r3, #0
 8018a58:	9309      	str	r3, [sp, #36]	; 0x24
 8018a5a:	2320      	movs	r3, #32
 8018a5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018a60:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a64:	2330      	movs	r3, #48	; 0x30
 8018a66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018c0c <_svfiprintf_r+0x1e8>
 8018a6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018a6e:	f04f 0901 	mov.w	r9, #1
 8018a72:	4623      	mov	r3, r4
 8018a74:	469a      	mov	sl, r3
 8018a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a7a:	b10a      	cbz	r2, 8018a80 <_svfiprintf_r+0x5c>
 8018a7c:	2a25      	cmp	r2, #37	; 0x25
 8018a7e:	d1f9      	bne.n	8018a74 <_svfiprintf_r+0x50>
 8018a80:	ebba 0b04 	subs.w	fp, sl, r4
 8018a84:	d00b      	beq.n	8018a9e <_svfiprintf_r+0x7a>
 8018a86:	465b      	mov	r3, fp
 8018a88:	4622      	mov	r2, r4
 8018a8a:	4629      	mov	r1, r5
 8018a8c:	4638      	mov	r0, r7
 8018a8e:	f7ff ff6f 	bl	8018970 <__ssputs_r>
 8018a92:	3001      	adds	r0, #1
 8018a94:	f000 80a9 	beq.w	8018bea <_svfiprintf_r+0x1c6>
 8018a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a9a:	445a      	add	r2, fp
 8018a9c:	9209      	str	r2, [sp, #36]	; 0x24
 8018a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	f000 80a1 	beq.w	8018bea <_svfiprintf_r+0x1c6>
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018aae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018ab2:	f10a 0a01 	add.w	sl, sl, #1
 8018ab6:	9304      	str	r3, [sp, #16]
 8018ab8:	9307      	str	r3, [sp, #28]
 8018aba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018abe:	931a      	str	r3, [sp, #104]	; 0x68
 8018ac0:	4654      	mov	r4, sl
 8018ac2:	2205      	movs	r2, #5
 8018ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ac8:	4850      	ldr	r0, [pc, #320]	; (8018c0c <_svfiprintf_r+0x1e8>)
 8018aca:	f7e7 fba1 	bl	8000210 <memchr>
 8018ace:	9a04      	ldr	r2, [sp, #16]
 8018ad0:	b9d8      	cbnz	r0, 8018b0a <_svfiprintf_r+0xe6>
 8018ad2:	06d0      	lsls	r0, r2, #27
 8018ad4:	bf44      	itt	mi
 8018ad6:	2320      	movmi	r3, #32
 8018ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018adc:	0711      	lsls	r1, r2, #28
 8018ade:	bf44      	itt	mi
 8018ae0:	232b      	movmi	r3, #43	; 0x2b
 8018ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8018aea:	2b2a      	cmp	r3, #42	; 0x2a
 8018aec:	d015      	beq.n	8018b1a <_svfiprintf_r+0xf6>
 8018aee:	9a07      	ldr	r2, [sp, #28]
 8018af0:	4654      	mov	r4, sl
 8018af2:	2000      	movs	r0, #0
 8018af4:	f04f 0c0a 	mov.w	ip, #10
 8018af8:	4621      	mov	r1, r4
 8018afa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018afe:	3b30      	subs	r3, #48	; 0x30
 8018b00:	2b09      	cmp	r3, #9
 8018b02:	d94d      	bls.n	8018ba0 <_svfiprintf_r+0x17c>
 8018b04:	b1b0      	cbz	r0, 8018b34 <_svfiprintf_r+0x110>
 8018b06:	9207      	str	r2, [sp, #28]
 8018b08:	e014      	b.n	8018b34 <_svfiprintf_r+0x110>
 8018b0a:	eba0 0308 	sub.w	r3, r0, r8
 8018b0e:	fa09 f303 	lsl.w	r3, r9, r3
 8018b12:	4313      	orrs	r3, r2
 8018b14:	9304      	str	r3, [sp, #16]
 8018b16:	46a2      	mov	sl, r4
 8018b18:	e7d2      	b.n	8018ac0 <_svfiprintf_r+0x9c>
 8018b1a:	9b03      	ldr	r3, [sp, #12]
 8018b1c:	1d19      	adds	r1, r3, #4
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	9103      	str	r1, [sp, #12]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	bfbb      	ittet	lt
 8018b26:	425b      	neglt	r3, r3
 8018b28:	f042 0202 	orrlt.w	r2, r2, #2
 8018b2c:	9307      	strge	r3, [sp, #28]
 8018b2e:	9307      	strlt	r3, [sp, #28]
 8018b30:	bfb8      	it	lt
 8018b32:	9204      	strlt	r2, [sp, #16]
 8018b34:	7823      	ldrb	r3, [r4, #0]
 8018b36:	2b2e      	cmp	r3, #46	; 0x2e
 8018b38:	d10c      	bne.n	8018b54 <_svfiprintf_r+0x130>
 8018b3a:	7863      	ldrb	r3, [r4, #1]
 8018b3c:	2b2a      	cmp	r3, #42	; 0x2a
 8018b3e:	d134      	bne.n	8018baa <_svfiprintf_r+0x186>
 8018b40:	9b03      	ldr	r3, [sp, #12]
 8018b42:	1d1a      	adds	r2, r3, #4
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	9203      	str	r2, [sp, #12]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	bfb8      	it	lt
 8018b4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018b50:	3402      	adds	r4, #2
 8018b52:	9305      	str	r3, [sp, #20]
 8018b54:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018c1c <_svfiprintf_r+0x1f8>
 8018b58:	7821      	ldrb	r1, [r4, #0]
 8018b5a:	2203      	movs	r2, #3
 8018b5c:	4650      	mov	r0, sl
 8018b5e:	f7e7 fb57 	bl	8000210 <memchr>
 8018b62:	b138      	cbz	r0, 8018b74 <_svfiprintf_r+0x150>
 8018b64:	9b04      	ldr	r3, [sp, #16]
 8018b66:	eba0 000a 	sub.w	r0, r0, sl
 8018b6a:	2240      	movs	r2, #64	; 0x40
 8018b6c:	4082      	lsls	r2, r0
 8018b6e:	4313      	orrs	r3, r2
 8018b70:	3401      	adds	r4, #1
 8018b72:	9304      	str	r3, [sp, #16]
 8018b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b78:	4825      	ldr	r0, [pc, #148]	; (8018c10 <_svfiprintf_r+0x1ec>)
 8018b7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018b7e:	2206      	movs	r2, #6
 8018b80:	f7e7 fb46 	bl	8000210 <memchr>
 8018b84:	2800      	cmp	r0, #0
 8018b86:	d038      	beq.n	8018bfa <_svfiprintf_r+0x1d6>
 8018b88:	4b22      	ldr	r3, [pc, #136]	; (8018c14 <_svfiprintf_r+0x1f0>)
 8018b8a:	bb1b      	cbnz	r3, 8018bd4 <_svfiprintf_r+0x1b0>
 8018b8c:	9b03      	ldr	r3, [sp, #12]
 8018b8e:	3307      	adds	r3, #7
 8018b90:	f023 0307 	bic.w	r3, r3, #7
 8018b94:	3308      	adds	r3, #8
 8018b96:	9303      	str	r3, [sp, #12]
 8018b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b9a:	4433      	add	r3, r6
 8018b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8018b9e:	e768      	b.n	8018a72 <_svfiprintf_r+0x4e>
 8018ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8018ba4:	460c      	mov	r4, r1
 8018ba6:	2001      	movs	r0, #1
 8018ba8:	e7a6      	b.n	8018af8 <_svfiprintf_r+0xd4>
 8018baa:	2300      	movs	r3, #0
 8018bac:	3401      	adds	r4, #1
 8018bae:	9305      	str	r3, [sp, #20]
 8018bb0:	4619      	mov	r1, r3
 8018bb2:	f04f 0c0a 	mov.w	ip, #10
 8018bb6:	4620      	mov	r0, r4
 8018bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018bbc:	3a30      	subs	r2, #48	; 0x30
 8018bbe:	2a09      	cmp	r2, #9
 8018bc0:	d903      	bls.n	8018bca <_svfiprintf_r+0x1a6>
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d0c6      	beq.n	8018b54 <_svfiprintf_r+0x130>
 8018bc6:	9105      	str	r1, [sp, #20]
 8018bc8:	e7c4      	b.n	8018b54 <_svfiprintf_r+0x130>
 8018bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8018bce:	4604      	mov	r4, r0
 8018bd0:	2301      	movs	r3, #1
 8018bd2:	e7f0      	b.n	8018bb6 <_svfiprintf_r+0x192>
 8018bd4:	ab03      	add	r3, sp, #12
 8018bd6:	9300      	str	r3, [sp, #0]
 8018bd8:	462a      	mov	r2, r5
 8018bda:	4b0f      	ldr	r3, [pc, #60]	; (8018c18 <_svfiprintf_r+0x1f4>)
 8018bdc:	a904      	add	r1, sp, #16
 8018bde:	4638      	mov	r0, r7
 8018be0:	f3af 8000 	nop.w
 8018be4:	1c42      	adds	r2, r0, #1
 8018be6:	4606      	mov	r6, r0
 8018be8:	d1d6      	bne.n	8018b98 <_svfiprintf_r+0x174>
 8018bea:	89ab      	ldrh	r3, [r5, #12]
 8018bec:	065b      	lsls	r3, r3, #25
 8018bee:	f53f af2d 	bmi.w	8018a4c <_svfiprintf_r+0x28>
 8018bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018bf4:	b01d      	add	sp, #116	; 0x74
 8018bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bfa:	ab03      	add	r3, sp, #12
 8018bfc:	9300      	str	r3, [sp, #0]
 8018bfe:	462a      	mov	r2, r5
 8018c00:	4b05      	ldr	r3, [pc, #20]	; (8018c18 <_svfiprintf_r+0x1f4>)
 8018c02:	a904      	add	r1, sp, #16
 8018c04:	4638      	mov	r0, r7
 8018c06:	f000 f9bd 	bl	8018f84 <_printf_i>
 8018c0a:	e7eb      	b.n	8018be4 <_svfiprintf_r+0x1c0>
 8018c0c:	0801a3bc 	.word	0x0801a3bc
 8018c10:	0801a3c6 	.word	0x0801a3c6
 8018c14:	00000000 	.word	0x00000000
 8018c18:	08018971 	.word	0x08018971
 8018c1c:	0801a3c2 	.word	0x0801a3c2

08018c20 <__sfputc_r>:
 8018c20:	6893      	ldr	r3, [r2, #8]
 8018c22:	3b01      	subs	r3, #1
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	b410      	push	{r4}
 8018c28:	6093      	str	r3, [r2, #8]
 8018c2a:	da08      	bge.n	8018c3e <__sfputc_r+0x1e>
 8018c2c:	6994      	ldr	r4, [r2, #24]
 8018c2e:	42a3      	cmp	r3, r4
 8018c30:	db01      	blt.n	8018c36 <__sfputc_r+0x16>
 8018c32:	290a      	cmp	r1, #10
 8018c34:	d103      	bne.n	8018c3e <__sfputc_r+0x1e>
 8018c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c3a:	f7ff bc3d 	b.w	80184b8 <__swbuf_r>
 8018c3e:	6813      	ldr	r3, [r2, #0]
 8018c40:	1c58      	adds	r0, r3, #1
 8018c42:	6010      	str	r0, [r2, #0]
 8018c44:	7019      	strb	r1, [r3, #0]
 8018c46:	4608      	mov	r0, r1
 8018c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c4c:	4770      	bx	lr

08018c4e <__sfputs_r>:
 8018c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c50:	4606      	mov	r6, r0
 8018c52:	460f      	mov	r7, r1
 8018c54:	4614      	mov	r4, r2
 8018c56:	18d5      	adds	r5, r2, r3
 8018c58:	42ac      	cmp	r4, r5
 8018c5a:	d101      	bne.n	8018c60 <__sfputs_r+0x12>
 8018c5c:	2000      	movs	r0, #0
 8018c5e:	e007      	b.n	8018c70 <__sfputs_r+0x22>
 8018c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c64:	463a      	mov	r2, r7
 8018c66:	4630      	mov	r0, r6
 8018c68:	f7ff ffda 	bl	8018c20 <__sfputc_r>
 8018c6c:	1c43      	adds	r3, r0, #1
 8018c6e:	d1f3      	bne.n	8018c58 <__sfputs_r+0xa>
 8018c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018c74 <_vfiprintf_r>:
 8018c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c78:	460d      	mov	r5, r1
 8018c7a:	b09d      	sub	sp, #116	; 0x74
 8018c7c:	4614      	mov	r4, r2
 8018c7e:	4698      	mov	r8, r3
 8018c80:	4606      	mov	r6, r0
 8018c82:	b118      	cbz	r0, 8018c8c <_vfiprintf_r+0x18>
 8018c84:	6a03      	ldr	r3, [r0, #32]
 8018c86:	b90b      	cbnz	r3, 8018c8c <_vfiprintf_r+0x18>
 8018c88:	f7ff fa70 	bl	801816c <__sinit>
 8018c8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c8e:	07d9      	lsls	r1, r3, #31
 8018c90:	d405      	bmi.n	8018c9e <_vfiprintf_r+0x2a>
 8018c92:	89ab      	ldrh	r3, [r5, #12]
 8018c94:	059a      	lsls	r2, r3, #22
 8018c96:	d402      	bmi.n	8018c9e <_vfiprintf_r+0x2a>
 8018c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c9a:	f7ff fdd2 	bl	8018842 <__retarget_lock_acquire_recursive>
 8018c9e:	89ab      	ldrh	r3, [r5, #12]
 8018ca0:	071b      	lsls	r3, r3, #28
 8018ca2:	d501      	bpl.n	8018ca8 <_vfiprintf_r+0x34>
 8018ca4:	692b      	ldr	r3, [r5, #16]
 8018ca6:	b99b      	cbnz	r3, 8018cd0 <_vfiprintf_r+0x5c>
 8018ca8:	4629      	mov	r1, r5
 8018caa:	4630      	mov	r0, r6
 8018cac:	f7ff fc42 	bl	8018534 <__swsetup_r>
 8018cb0:	b170      	cbz	r0, 8018cd0 <_vfiprintf_r+0x5c>
 8018cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018cb4:	07dc      	lsls	r4, r3, #31
 8018cb6:	d504      	bpl.n	8018cc2 <_vfiprintf_r+0x4e>
 8018cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018cbc:	b01d      	add	sp, #116	; 0x74
 8018cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cc2:	89ab      	ldrh	r3, [r5, #12]
 8018cc4:	0598      	lsls	r0, r3, #22
 8018cc6:	d4f7      	bmi.n	8018cb8 <_vfiprintf_r+0x44>
 8018cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018cca:	f7ff fdbb 	bl	8018844 <__retarget_lock_release_recursive>
 8018cce:	e7f3      	b.n	8018cb8 <_vfiprintf_r+0x44>
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8018cd4:	2320      	movs	r3, #32
 8018cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8018cde:	2330      	movs	r3, #48	; 0x30
 8018ce0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018e94 <_vfiprintf_r+0x220>
 8018ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018ce8:	f04f 0901 	mov.w	r9, #1
 8018cec:	4623      	mov	r3, r4
 8018cee:	469a      	mov	sl, r3
 8018cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018cf4:	b10a      	cbz	r2, 8018cfa <_vfiprintf_r+0x86>
 8018cf6:	2a25      	cmp	r2, #37	; 0x25
 8018cf8:	d1f9      	bne.n	8018cee <_vfiprintf_r+0x7a>
 8018cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8018cfe:	d00b      	beq.n	8018d18 <_vfiprintf_r+0xa4>
 8018d00:	465b      	mov	r3, fp
 8018d02:	4622      	mov	r2, r4
 8018d04:	4629      	mov	r1, r5
 8018d06:	4630      	mov	r0, r6
 8018d08:	f7ff ffa1 	bl	8018c4e <__sfputs_r>
 8018d0c:	3001      	adds	r0, #1
 8018d0e:	f000 80a9 	beq.w	8018e64 <_vfiprintf_r+0x1f0>
 8018d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d14:	445a      	add	r2, fp
 8018d16:	9209      	str	r2, [sp, #36]	; 0x24
 8018d18:	f89a 3000 	ldrb.w	r3, [sl]
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	f000 80a1 	beq.w	8018e64 <_vfiprintf_r+0x1f0>
 8018d22:	2300      	movs	r3, #0
 8018d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d2c:	f10a 0a01 	add.w	sl, sl, #1
 8018d30:	9304      	str	r3, [sp, #16]
 8018d32:	9307      	str	r3, [sp, #28]
 8018d34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018d38:	931a      	str	r3, [sp, #104]	; 0x68
 8018d3a:	4654      	mov	r4, sl
 8018d3c:	2205      	movs	r2, #5
 8018d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d42:	4854      	ldr	r0, [pc, #336]	; (8018e94 <_vfiprintf_r+0x220>)
 8018d44:	f7e7 fa64 	bl	8000210 <memchr>
 8018d48:	9a04      	ldr	r2, [sp, #16]
 8018d4a:	b9d8      	cbnz	r0, 8018d84 <_vfiprintf_r+0x110>
 8018d4c:	06d1      	lsls	r1, r2, #27
 8018d4e:	bf44      	itt	mi
 8018d50:	2320      	movmi	r3, #32
 8018d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d56:	0713      	lsls	r3, r2, #28
 8018d58:	bf44      	itt	mi
 8018d5a:	232b      	movmi	r3, #43	; 0x2b
 8018d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d60:	f89a 3000 	ldrb.w	r3, [sl]
 8018d64:	2b2a      	cmp	r3, #42	; 0x2a
 8018d66:	d015      	beq.n	8018d94 <_vfiprintf_r+0x120>
 8018d68:	9a07      	ldr	r2, [sp, #28]
 8018d6a:	4654      	mov	r4, sl
 8018d6c:	2000      	movs	r0, #0
 8018d6e:	f04f 0c0a 	mov.w	ip, #10
 8018d72:	4621      	mov	r1, r4
 8018d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d78:	3b30      	subs	r3, #48	; 0x30
 8018d7a:	2b09      	cmp	r3, #9
 8018d7c:	d94d      	bls.n	8018e1a <_vfiprintf_r+0x1a6>
 8018d7e:	b1b0      	cbz	r0, 8018dae <_vfiprintf_r+0x13a>
 8018d80:	9207      	str	r2, [sp, #28]
 8018d82:	e014      	b.n	8018dae <_vfiprintf_r+0x13a>
 8018d84:	eba0 0308 	sub.w	r3, r0, r8
 8018d88:	fa09 f303 	lsl.w	r3, r9, r3
 8018d8c:	4313      	orrs	r3, r2
 8018d8e:	9304      	str	r3, [sp, #16]
 8018d90:	46a2      	mov	sl, r4
 8018d92:	e7d2      	b.n	8018d3a <_vfiprintf_r+0xc6>
 8018d94:	9b03      	ldr	r3, [sp, #12]
 8018d96:	1d19      	adds	r1, r3, #4
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	9103      	str	r1, [sp, #12]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	bfbb      	ittet	lt
 8018da0:	425b      	neglt	r3, r3
 8018da2:	f042 0202 	orrlt.w	r2, r2, #2
 8018da6:	9307      	strge	r3, [sp, #28]
 8018da8:	9307      	strlt	r3, [sp, #28]
 8018daa:	bfb8      	it	lt
 8018dac:	9204      	strlt	r2, [sp, #16]
 8018dae:	7823      	ldrb	r3, [r4, #0]
 8018db0:	2b2e      	cmp	r3, #46	; 0x2e
 8018db2:	d10c      	bne.n	8018dce <_vfiprintf_r+0x15a>
 8018db4:	7863      	ldrb	r3, [r4, #1]
 8018db6:	2b2a      	cmp	r3, #42	; 0x2a
 8018db8:	d134      	bne.n	8018e24 <_vfiprintf_r+0x1b0>
 8018dba:	9b03      	ldr	r3, [sp, #12]
 8018dbc:	1d1a      	adds	r2, r3, #4
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	9203      	str	r2, [sp, #12]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	bfb8      	it	lt
 8018dc6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018dca:	3402      	adds	r4, #2
 8018dcc:	9305      	str	r3, [sp, #20]
 8018dce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018ea4 <_vfiprintf_r+0x230>
 8018dd2:	7821      	ldrb	r1, [r4, #0]
 8018dd4:	2203      	movs	r2, #3
 8018dd6:	4650      	mov	r0, sl
 8018dd8:	f7e7 fa1a 	bl	8000210 <memchr>
 8018ddc:	b138      	cbz	r0, 8018dee <_vfiprintf_r+0x17a>
 8018dde:	9b04      	ldr	r3, [sp, #16]
 8018de0:	eba0 000a 	sub.w	r0, r0, sl
 8018de4:	2240      	movs	r2, #64	; 0x40
 8018de6:	4082      	lsls	r2, r0
 8018de8:	4313      	orrs	r3, r2
 8018dea:	3401      	adds	r4, #1
 8018dec:	9304      	str	r3, [sp, #16]
 8018dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018df2:	4829      	ldr	r0, [pc, #164]	; (8018e98 <_vfiprintf_r+0x224>)
 8018df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018df8:	2206      	movs	r2, #6
 8018dfa:	f7e7 fa09 	bl	8000210 <memchr>
 8018dfe:	2800      	cmp	r0, #0
 8018e00:	d03f      	beq.n	8018e82 <_vfiprintf_r+0x20e>
 8018e02:	4b26      	ldr	r3, [pc, #152]	; (8018e9c <_vfiprintf_r+0x228>)
 8018e04:	bb1b      	cbnz	r3, 8018e4e <_vfiprintf_r+0x1da>
 8018e06:	9b03      	ldr	r3, [sp, #12]
 8018e08:	3307      	adds	r3, #7
 8018e0a:	f023 0307 	bic.w	r3, r3, #7
 8018e0e:	3308      	adds	r3, #8
 8018e10:	9303      	str	r3, [sp, #12]
 8018e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e14:	443b      	add	r3, r7
 8018e16:	9309      	str	r3, [sp, #36]	; 0x24
 8018e18:	e768      	b.n	8018cec <_vfiprintf_r+0x78>
 8018e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e1e:	460c      	mov	r4, r1
 8018e20:	2001      	movs	r0, #1
 8018e22:	e7a6      	b.n	8018d72 <_vfiprintf_r+0xfe>
 8018e24:	2300      	movs	r3, #0
 8018e26:	3401      	adds	r4, #1
 8018e28:	9305      	str	r3, [sp, #20]
 8018e2a:	4619      	mov	r1, r3
 8018e2c:	f04f 0c0a 	mov.w	ip, #10
 8018e30:	4620      	mov	r0, r4
 8018e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e36:	3a30      	subs	r2, #48	; 0x30
 8018e38:	2a09      	cmp	r2, #9
 8018e3a:	d903      	bls.n	8018e44 <_vfiprintf_r+0x1d0>
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d0c6      	beq.n	8018dce <_vfiprintf_r+0x15a>
 8018e40:	9105      	str	r1, [sp, #20]
 8018e42:	e7c4      	b.n	8018dce <_vfiprintf_r+0x15a>
 8018e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e48:	4604      	mov	r4, r0
 8018e4a:	2301      	movs	r3, #1
 8018e4c:	e7f0      	b.n	8018e30 <_vfiprintf_r+0x1bc>
 8018e4e:	ab03      	add	r3, sp, #12
 8018e50:	9300      	str	r3, [sp, #0]
 8018e52:	462a      	mov	r2, r5
 8018e54:	4b12      	ldr	r3, [pc, #72]	; (8018ea0 <_vfiprintf_r+0x22c>)
 8018e56:	a904      	add	r1, sp, #16
 8018e58:	4630      	mov	r0, r6
 8018e5a:	f3af 8000 	nop.w
 8018e5e:	4607      	mov	r7, r0
 8018e60:	1c78      	adds	r0, r7, #1
 8018e62:	d1d6      	bne.n	8018e12 <_vfiprintf_r+0x19e>
 8018e64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e66:	07d9      	lsls	r1, r3, #31
 8018e68:	d405      	bmi.n	8018e76 <_vfiprintf_r+0x202>
 8018e6a:	89ab      	ldrh	r3, [r5, #12]
 8018e6c:	059a      	lsls	r2, r3, #22
 8018e6e:	d402      	bmi.n	8018e76 <_vfiprintf_r+0x202>
 8018e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e72:	f7ff fce7 	bl	8018844 <__retarget_lock_release_recursive>
 8018e76:	89ab      	ldrh	r3, [r5, #12]
 8018e78:	065b      	lsls	r3, r3, #25
 8018e7a:	f53f af1d 	bmi.w	8018cb8 <_vfiprintf_r+0x44>
 8018e7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e80:	e71c      	b.n	8018cbc <_vfiprintf_r+0x48>
 8018e82:	ab03      	add	r3, sp, #12
 8018e84:	9300      	str	r3, [sp, #0]
 8018e86:	462a      	mov	r2, r5
 8018e88:	4b05      	ldr	r3, [pc, #20]	; (8018ea0 <_vfiprintf_r+0x22c>)
 8018e8a:	a904      	add	r1, sp, #16
 8018e8c:	4630      	mov	r0, r6
 8018e8e:	f000 f879 	bl	8018f84 <_printf_i>
 8018e92:	e7e4      	b.n	8018e5e <_vfiprintf_r+0x1ea>
 8018e94:	0801a3bc 	.word	0x0801a3bc
 8018e98:	0801a3c6 	.word	0x0801a3c6
 8018e9c:	00000000 	.word	0x00000000
 8018ea0:	08018c4f 	.word	0x08018c4f
 8018ea4:	0801a3c2 	.word	0x0801a3c2

08018ea8 <_printf_common>:
 8018ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018eac:	4616      	mov	r6, r2
 8018eae:	4699      	mov	r9, r3
 8018eb0:	688a      	ldr	r2, [r1, #8]
 8018eb2:	690b      	ldr	r3, [r1, #16]
 8018eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018eb8:	4293      	cmp	r3, r2
 8018eba:	bfb8      	it	lt
 8018ebc:	4613      	movlt	r3, r2
 8018ebe:	6033      	str	r3, [r6, #0]
 8018ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018ec4:	4607      	mov	r7, r0
 8018ec6:	460c      	mov	r4, r1
 8018ec8:	b10a      	cbz	r2, 8018ece <_printf_common+0x26>
 8018eca:	3301      	adds	r3, #1
 8018ecc:	6033      	str	r3, [r6, #0]
 8018ece:	6823      	ldr	r3, [r4, #0]
 8018ed0:	0699      	lsls	r1, r3, #26
 8018ed2:	bf42      	ittt	mi
 8018ed4:	6833      	ldrmi	r3, [r6, #0]
 8018ed6:	3302      	addmi	r3, #2
 8018ed8:	6033      	strmi	r3, [r6, #0]
 8018eda:	6825      	ldr	r5, [r4, #0]
 8018edc:	f015 0506 	ands.w	r5, r5, #6
 8018ee0:	d106      	bne.n	8018ef0 <_printf_common+0x48>
 8018ee2:	f104 0a19 	add.w	sl, r4, #25
 8018ee6:	68e3      	ldr	r3, [r4, #12]
 8018ee8:	6832      	ldr	r2, [r6, #0]
 8018eea:	1a9b      	subs	r3, r3, r2
 8018eec:	42ab      	cmp	r3, r5
 8018eee:	dc26      	bgt.n	8018f3e <_printf_common+0x96>
 8018ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018ef4:	1e13      	subs	r3, r2, #0
 8018ef6:	6822      	ldr	r2, [r4, #0]
 8018ef8:	bf18      	it	ne
 8018efa:	2301      	movne	r3, #1
 8018efc:	0692      	lsls	r2, r2, #26
 8018efe:	d42b      	bmi.n	8018f58 <_printf_common+0xb0>
 8018f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018f04:	4649      	mov	r1, r9
 8018f06:	4638      	mov	r0, r7
 8018f08:	47c0      	blx	r8
 8018f0a:	3001      	adds	r0, #1
 8018f0c:	d01e      	beq.n	8018f4c <_printf_common+0xa4>
 8018f0e:	6823      	ldr	r3, [r4, #0]
 8018f10:	6922      	ldr	r2, [r4, #16]
 8018f12:	f003 0306 	and.w	r3, r3, #6
 8018f16:	2b04      	cmp	r3, #4
 8018f18:	bf02      	ittt	eq
 8018f1a:	68e5      	ldreq	r5, [r4, #12]
 8018f1c:	6833      	ldreq	r3, [r6, #0]
 8018f1e:	1aed      	subeq	r5, r5, r3
 8018f20:	68a3      	ldr	r3, [r4, #8]
 8018f22:	bf0c      	ite	eq
 8018f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018f28:	2500      	movne	r5, #0
 8018f2a:	4293      	cmp	r3, r2
 8018f2c:	bfc4      	itt	gt
 8018f2e:	1a9b      	subgt	r3, r3, r2
 8018f30:	18ed      	addgt	r5, r5, r3
 8018f32:	2600      	movs	r6, #0
 8018f34:	341a      	adds	r4, #26
 8018f36:	42b5      	cmp	r5, r6
 8018f38:	d11a      	bne.n	8018f70 <_printf_common+0xc8>
 8018f3a:	2000      	movs	r0, #0
 8018f3c:	e008      	b.n	8018f50 <_printf_common+0xa8>
 8018f3e:	2301      	movs	r3, #1
 8018f40:	4652      	mov	r2, sl
 8018f42:	4649      	mov	r1, r9
 8018f44:	4638      	mov	r0, r7
 8018f46:	47c0      	blx	r8
 8018f48:	3001      	adds	r0, #1
 8018f4a:	d103      	bne.n	8018f54 <_printf_common+0xac>
 8018f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f54:	3501      	adds	r5, #1
 8018f56:	e7c6      	b.n	8018ee6 <_printf_common+0x3e>
 8018f58:	18e1      	adds	r1, r4, r3
 8018f5a:	1c5a      	adds	r2, r3, #1
 8018f5c:	2030      	movs	r0, #48	; 0x30
 8018f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018f62:	4422      	add	r2, r4
 8018f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018f6c:	3302      	adds	r3, #2
 8018f6e:	e7c7      	b.n	8018f00 <_printf_common+0x58>
 8018f70:	2301      	movs	r3, #1
 8018f72:	4622      	mov	r2, r4
 8018f74:	4649      	mov	r1, r9
 8018f76:	4638      	mov	r0, r7
 8018f78:	47c0      	blx	r8
 8018f7a:	3001      	adds	r0, #1
 8018f7c:	d0e6      	beq.n	8018f4c <_printf_common+0xa4>
 8018f7e:	3601      	adds	r6, #1
 8018f80:	e7d9      	b.n	8018f36 <_printf_common+0x8e>
	...

08018f84 <_printf_i>:
 8018f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018f88:	7e0f      	ldrb	r7, [r1, #24]
 8018f8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018f8c:	2f78      	cmp	r7, #120	; 0x78
 8018f8e:	4691      	mov	r9, r2
 8018f90:	4680      	mov	r8, r0
 8018f92:	460c      	mov	r4, r1
 8018f94:	469a      	mov	sl, r3
 8018f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018f9a:	d807      	bhi.n	8018fac <_printf_i+0x28>
 8018f9c:	2f62      	cmp	r7, #98	; 0x62
 8018f9e:	d80a      	bhi.n	8018fb6 <_printf_i+0x32>
 8018fa0:	2f00      	cmp	r7, #0
 8018fa2:	f000 80d4 	beq.w	801914e <_printf_i+0x1ca>
 8018fa6:	2f58      	cmp	r7, #88	; 0x58
 8018fa8:	f000 80c0 	beq.w	801912c <_printf_i+0x1a8>
 8018fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018fb4:	e03a      	b.n	801902c <_printf_i+0xa8>
 8018fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018fba:	2b15      	cmp	r3, #21
 8018fbc:	d8f6      	bhi.n	8018fac <_printf_i+0x28>
 8018fbe:	a101      	add	r1, pc, #4	; (adr r1, 8018fc4 <_printf_i+0x40>)
 8018fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018fc4:	0801901d 	.word	0x0801901d
 8018fc8:	08019031 	.word	0x08019031
 8018fcc:	08018fad 	.word	0x08018fad
 8018fd0:	08018fad 	.word	0x08018fad
 8018fd4:	08018fad 	.word	0x08018fad
 8018fd8:	08018fad 	.word	0x08018fad
 8018fdc:	08019031 	.word	0x08019031
 8018fe0:	08018fad 	.word	0x08018fad
 8018fe4:	08018fad 	.word	0x08018fad
 8018fe8:	08018fad 	.word	0x08018fad
 8018fec:	08018fad 	.word	0x08018fad
 8018ff0:	08019135 	.word	0x08019135
 8018ff4:	0801905d 	.word	0x0801905d
 8018ff8:	080190ef 	.word	0x080190ef
 8018ffc:	08018fad 	.word	0x08018fad
 8019000:	08018fad 	.word	0x08018fad
 8019004:	08019157 	.word	0x08019157
 8019008:	08018fad 	.word	0x08018fad
 801900c:	0801905d 	.word	0x0801905d
 8019010:	08018fad 	.word	0x08018fad
 8019014:	08018fad 	.word	0x08018fad
 8019018:	080190f7 	.word	0x080190f7
 801901c:	682b      	ldr	r3, [r5, #0]
 801901e:	1d1a      	adds	r2, r3, #4
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	602a      	str	r2, [r5, #0]
 8019024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801902c:	2301      	movs	r3, #1
 801902e:	e09f      	b.n	8019170 <_printf_i+0x1ec>
 8019030:	6820      	ldr	r0, [r4, #0]
 8019032:	682b      	ldr	r3, [r5, #0]
 8019034:	0607      	lsls	r7, r0, #24
 8019036:	f103 0104 	add.w	r1, r3, #4
 801903a:	6029      	str	r1, [r5, #0]
 801903c:	d501      	bpl.n	8019042 <_printf_i+0xbe>
 801903e:	681e      	ldr	r6, [r3, #0]
 8019040:	e003      	b.n	801904a <_printf_i+0xc6>
 8019042:	0646      	lsls	r6, r0, #25
 8019044:	d5fb      	bpl.n	801903e <_printf_i+0xba>
 8019046:	f9b3 6000 	ldrsh.w	r6, [r3]
 801904a:	2e00      	cmp	r6, #0
 801904c:	da03      	bge.n	8019056 <_printf_i+0xd2>
 801904e:	232d      	movs	r3, #45	; 0x2d
 8019050:	4276      	negs	r6, r6
 8019052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019056:	485a      	ldr	r0, [pc, #360]	; (80191c0 <_printf_i+0x23c>)
 8019058:	230a      	movs	r3, #10
 801905a:	e012      	b.n	8019082 <_printf_i+0xfe>
 801905c:	682b      	ldr	r3, [r5, #0]
 801905e:	6820      	ldr	r0, [r4, #0]
 8019060:	1d19      	adds	r1, r3, #4
 8019062:	6029      	str	r1, [r5, #0]
 8019064:	0605      	lsls	r5, r0, #24
 8019066:	d501      	bpl.n	801906c <_printf_i+0xe8>
 8019068:	681e      	ldr	r6, [r3, #0]
 801906a:	e002      	b.n	8019072 <_printf_i+0xee>
 801906c:	0641      	lsls	r1, r0, #25
 801906e:	d5fb      	bpl.n	8019068 <_printf_i+0xe4>
 8019070:	881e      	ldrh	r6, [r3, #0]
 8019072:	4853      	ldr	r0, [pc, #332]	; (80191c0 <_printf_i+0x23c>)
 8019074:	2f6f      	cmp	r7, #111	; 0x6f
 8019076:	bf0c      	ite	eq
 8019078:	2308      	moveq	r3, #8
 801907a:	230a      	movne	r3, #10
 801907c:	2100      	movs	r1, #0
 801907e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019082:	6865      	ldr	r5, [r4, #4]
 8019084:	60a5      	str	r5, [r4, #8]
 8019086:	2d00      	cmp	r5, #0
 8019088:	bfa2      	ittt	ge
 801908a:	6821      	ldrge	r1, [r4, #0]
 801908c:	f021 0104 	bicge.w	r1, r1, #4
 8019090:	6021      	strge	r1, [r4, #0]
 8019092:	b90e      	cbnz	r6, 8019098 <_printf_i+0x114>
 8019094:	2d00      	cmp	r5, #0
 8019096:	d04b      	beq.n	8019130 <_printf_i+0x1ac>
 8019098:	4615      	mov	r5, r2
 801909a:	fbb6 f1f3 	udiv	r1, r6, r3
 801909e:	fb03 6711 	mls	r7, r3, r1, r6
 80190a2:	5dc7      	ldrb	r7, [r0, r7]
 80190a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80190a8:	4637      	mov	r7, r6
 80190aa:	42bb      	cmp	r3, r7
 80190ac:	460e      	mov	r6, r1
 80190ae:	d9f4      	bls.n	801909a <_printf_i+0x116>
 80190b0:	2b08      	cmp	r3, #8
 80190b2:	d10b      	bne.n	80190cc <_printf_i+0x148>
 80190b4:	6823      	ldr	r3, [r4, #0]
 80190b6:	07de      	lsls	r6, r3, #31
 80190b8:	d508      	bpl.n	80190cc <_printf_i+0x148>
 80190ba:	6923      	ldr	r3, [r4, #16]
 80190bc:	6861      	ldr	r1, [r4, #4]
 80190be:	4299      	cmp	r1, r3
 80190c0:	bfde      	ittt	le
 80190c2:	2330      	movle	r3, #48	; 0x30
 80190c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80190c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80190cc:	1b52      	subs	r2, r2, r5
 80190ce:	6122      	str	r2, [r4, #16]
 80190d0:	f8cd a000 	str.w	sl, [sp]
 80190d4:	464b      	mov	r3, r9
 80190d6:	aa03      	add	r2, sp, #12
 80190d8:	4621      	mov	r1, r4
 80190da:	4640      	mov	r0, r8
 80190dc:	f7ff fee4 	bl	8018ea8 <_printf_common>
 80190e0:	3001      	adds	r0, #1
 80190e2:	d14a      	bne.n	801917a <_printf_i+0x1f6>
 80190e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190e8:	b004      	add	sp, #16
 80190ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190ee:	6823      	ldr	r3, [r4, #0]
 80190f0:	f043 0320 	orr.w	r3, r3, #32
 80190f4:	6023      	str	r3, [r4, #0]
 80190f6:	4833      	ldr	r0, [pc, #204]	; (80191c4 <_printf_i+0x240>)
 80190f8:	2778      	movs	r7, #120	; 0x78
 80190fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80190fe:	6823      	ldr	r3, [r4, #0]
 8019100:	6829      	ldr	r1, [r5, #0]
 8019102:	061f      	lsls	r7, r3, #24
 8019104:	f851 6b04 	ldr.w	r6, [r1], #4
 8019108:	d402      	bmi.n	8019110 <_printf_i+0x18c>
 801910a:	065f      	lsls	r7, r3, #25
 801910c:	bf48      	it	mi
 801910e:	b2b6      	uxthmi	r6, r6
 8019110:	07df      	lsls	r7, r3, #31
 8019112:	bf48      	it	mi
 8019114:	f043 0320 	orrmi.w	r3, r3, #32
 8019118:	6029      	str	r1, [r5, #0]
 801911a:	bf48      	it	mi
 801911c:	6023      	strmi	r3, [r4, #0]
 801911e:	b91e      	cbnz	r6, 8019128 <_printf_i+0x1a4>
 8019120:	6823      	ldr	r3, [r4, #0]
 8019122:	f023 0320 	bic.w	r3, r3, #32
 8019126:	6023      	str	r3, [r4, #0]
 8019128:	2310      	movs	r3, #16
 801912a:	e7a7      	b.n	801907c <_printf_i+0xf8>
 801912c:	4824      	ldr	r0, [pc, #144]	; (80191c0 <_printf_i+0x23c>)
 801912e:	e7e4      	b.n	80190fa <_printf_i+0x176>
 8019130:	4615      	mov	r5, r2
 8019132:	e7bd      	b.n	80190b0 <_printf_i+0x12c>
 8019134:	682b      	ldr	r3, [r5, #0]
 8019136:	6826      	ldr	r6, [r4, #0]
 8019138:	6961      	ldr	r1, [r4, #20]
 801913a:	1d18      	adds	r0, r3, #4
 801913c:	6028      	str	r0, [r5, #0]
 801913e:	0635      	lsls	r5, r6, #24
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	d501      	bpl.n	8019148 <_printf_i+0x1c4>
 8019144:	6019      	str	r1, [r3, #0]
 8019146:	e002      	b.n	801914e <_printf_i+0x1ca>
 8019148:	0670      	lsls	r0, r6, #25
 801914a:	d5fb      	bpl.n	8019144 <_printf_i+0x1c0>
 801914c:	8019      	strh	r1, [r3, #0]
 801914e:	2300      	movs	r3, #0
 8019150:	6123      	str	r3, [r4, #16]
 8019152:	4615      	mov	r5, r2
 8019154:	e7bc      	b.n	80190d0 <_printf_i+0x14c>
 8019156:	682b      	ldr	r3, [r5, #0]
 8019158:	1d1a      	adds	r2, r3, #4
 801915a:	602a      	str	r2, [r5, #0]
 801915c:	681d      	ldr	r5, [r3, #0]
 801915e:	6862      	ldr	r2, [r4, #4]
 8019160:	2100      	movs	r1, #0
 8019162:	4628      	mov	r0, r5
 8019164:	f7e7 f854 	bl	8000210 <memchr>
 8019168:	b108      	cbz	r0, 801916e <_printf_i+0x1ea>
 801916a:	1b40      	subs	r0, r0, r5
 801916c:	6060      	str	r0, [r4, #4]
 801916e:	6863      	ldr	r3, [r4, #4]
 8019170:	6123      	str	r3, [r4, #16]
 8019172:	2300      	movs	r3, #0
 8019174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019178:	e7aa      	b.n	80190d0 <_printf_i+0x14c>
 801917a:	6923      	ldr	r3, [r4, #16]
 801917c:	462a      	mov	r2, r5
 801917e:	4649      	mov	r1, r9
 8019180:	4640      	mov	r0, r8
 8019182:	47d0      	blx	sl
 8019184:	3001      	adds	r0, #1
 8019186:	d0ad      	beq.n	80190e4 <_printf_i+0x160>
 8019188:	6823      	ldr	r3, [r4, #0]
 801918a:	079b      	lsls	r3, r3, #30
 801918c:	d413      	bmi.n	80191b6 <_printf_i+0x232>
 801918e:	68e0      	ldr	r0, [r4, #12]
 8019190:	9b03      	ldr	r3, [sp, #12]
 8019192:	4298      	cmp	r0, r3
 8019194:	bfb8      	it	lt
 8019196:	4618      	movlt	r0, r3
 8019198:	e7a6      	b.n	80190e8 <_printf_i+0x164>
 801919a:	2301      	movs	r3, #1
 801919c:	4632      	mov	r2, r6
 801919e:	4649      	mov	r1, r9
 80191a0:	4640      	mov	r0, r8
 80191a2:	47d0      	blx	sl
 80191a4:	3001      	adds	r0, #1
 80191a6:	d09d      	beq.n	80190e4 <_printf_i+0x160>
 80191a8:	3501      	adds	r5, #1
 80191aa:	68e3      	ldr	r3, [r4, #12]
 80191ac:	9903      	ldr	r1, [sp, #12]
 80191ae:	1a5b      	subs	r3, r3, r1
 80191b0:	42ab      	cmp	r3, r5
 80191b2:	dcf2      	bgt.n	801919a <_printf_i+0x216>
 80191b4:	e7eb      	b.n	801918e <_printf_i+0x20a>
 80191b6:	2500      	movs	r5, #0
 80191b8:	f104 0619 	add.w	r6, r4, #25
 80191bc:	e7f5      	b.n	80191aa <_printf_i+0x226>
 80191be:	bf00      	nop
 80191c0:	0801a3cd 	.word	0x0801a3cd
 80191c4:	0801a3de 	.word	0x0801a3de

080191c8 <__sflush_r>:
 80191c8:	898a      	ldrh	r2, [r1, #12]
 80191ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191ce:	4605      	mov	r5, r0
 80191d0:	0710      	lsls	r0, r2, #28
 80191d2:	460c      	mov	r4, r1
 80191d4:	d458      	bmi.n	8019288 <__sflush_r+0xc0>
 80191d6:	684b      	ldr	r3, [r1, #4]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	dc05      	bgt.n	80191e8 <__sflush_r+0x20>
 80191dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80191de:	2b00      	cmp	r3, #0
 80191e0:	dc02      	bgt.n	80191e8 <__sflush_r+0x20>
 80191e2:	2000      	movs	r0, #0
 80191e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80191ea:	2e00      	cmp	r6, #0
 80191ec:	d0f9      	beq.n	80191e2 <__sflush_r+0x1a>
 80191ee:	2300      	movs	r3, #0
 80191f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80191f4:	682f      	ldr	r7, [r5, #0]
 80191f6:	6a21      	ldr	r1, [r4, #32]
 80191f8:	602b      	str	r3, [r5, #0]
 80191fa:	d032      	beq.n	8019262 <__sflush_r+0x9a>
 80191fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80191fe:	89a3      	ldrh	r3, [r4, #12]
 8019200:	075a      	lsls	r2, r3, #29
 8019202:	d505      	bpl.n	8019210 <__sflush_r+0x48>
 8019204:	6863      	ldr	r3, [r4, #4]
 8019206:	1ac0      	subs	r0, r0, r3
 8019208:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801920a:	b10b      	cbz	r3, 8019210 <__sflush_r+0x48>
 801920c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801920e:	1ac0      	subs	r0, r0, r3
 8019210:	2300      	movs	r3, #0
 8019212:	4602      	mov	r2, r0
 8019214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019216:	6a21      	ldr	r1, [r4, #32]
 8019218:	4628      	mov	r0, r5
 801921a:	47b0      	blx	r6
 801921c:	1c43      	adds	r3, r0, #1
 801921e:	89a3      	ldrh	r3, [r4, #12]
 8019220:	d106      	bne.n	8019230 <__sflush_r+0x68>
 8019222:	6829      	ldr	r1, [r5, #0]
 8019224:	291d      	cmp	r1, #29
 8019226:	d82b      	bhi.n	8019280 <__sflush_r+0xb8>
 8019228:	4a29      	ldr	r2, [pc, #164]	; (80192d0 <__sflush_r+0x108>)
 801922a:	410a      	asrs	r2, r1
 801922c:	07d6      	lsls	r6, r2, #31
 801922e:	d427      	bmi.n	8019280 <__sflush_r+0xb8>
 8019230:	2200      	movs	r2, #0
 8019232:	6062      	str	r2, [r4, #4]
 8019234:	04d9      	lsls	r1, r3, #19
 8019236:	6922      	ldr	r2, [r4, #16]
 8019238:	6022      	str	r2, [r4, #0]
 801923a:	d504      	bpl.n	8019246 <__sflush_r+0x7e>
 801923c:	1c42      	adds	r2, r0, #1
 801923e:	d101      	bne.n	8019244 <__sflush_r+0x7c>
 8019240:	682b      	ldr	r3, [r5, #0]
 8019242:	b903      	cbnz	r3, 8019246 <__sflush_r+0x7e>
 8019244:	6560      	str	r0, [r4, #84]	; 0x54
 8019246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019248:	602f      	str	r7, [r5, #0]
 801924a:	2900      	cmp	r1, #0
 801924c:	d0c9      	beq.n	80191e2 <__sflush_r+0x1a>
 801924e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019252:	4299      	cmp	r1, r3
 8019254:	d002      	beq.n	801925c <__sflush_r+0x94>
 8019256:	4628      	mov	r0, r5
 8019258:	f7ff fb36 	bl	80188c8 <_free_r>
 801925c:	2000      	movs	r0, #0
 801925e:	6360      	str	r0, [r4, #52]	; 0x34
 8019260:	e7c0      	b.n	80191e4 <__sflush_r+0x1c>
 8019262:	2301      	movs	r3, #1
 8019264:	4628      	mov	r0, r5
 8019266:	47b0      	blx	r6
 8019268:	1c41      	adds	r1, r0, #1
 801926a:	d1c8      	bne.n	80191fe <__sflush_r+0x36>
 801926c:	682b      	ldr	r3, [r5, #0]
 801926e:	2b00      	cmp	r3, #0
 8019270:	d0c5      	beq.n	80191fe <__sflush_r+0x36>
 8019272:	2b1d      	cmp	r3, #29
 8019274:	d001      	beq.n	801927a <__sflush_r+0xb2>
 8019276:	2b16      	cmp	r3, #22
 8019278:	d101      	bne.n	801927e <__sflush_r+0xb6>
 801927a:	602f      	str	r7, [r5, #0]
 801927c:	e7b1      	b.n	80191e2 <__sflush_r+0x1a>
 801927e:	89a3      	ldrh	r3, [r4, #12]
 8019280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019284:	81a3      	strh	r3, [r4, #12]
 8019286:	e7ad      	b.n	80191e4 <__sflush_r+0x1c>
 8019288:	690f      	ldr	r7, [r1, #16]
 801928a:	2f00      	cmp	r7, #0
 801928c:	d0a9      	beq.n	80191e2 <__sflush_r+0x1a>
 801928e:	0793      	lsls	r3, r2, #30
 8019290:	680e      	ldr	r6, [r1, #0]
 8019292:	bf08      	it	eq
 8019294:	694b      	ldreq	r3, [r1, #20]
 8019296:	600f      	str	r7, [r1, #0]
 8019298:	bf18      	it	ne
 801929a:	2300      	movne	r3, #0
 801929c:	eba6 0807 	sub.w	r8, r6, r7
 80192a0:	608b      	str	r3, [r1, #8]
 80192a2:	f1b8 0f00 	cmp.w	r8, #0
 80192a6:	dd9c      	ble.n	80191e2 <__sflush_r+0x1a>
 80192a8:	6a21      	ldr	r1, [r4, #32]
 80192aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80192ac:	4643      	mov	r3, r8
 80192ae:	463a      	mov	r2, r7
 80192b0:	4628      	mov	r0, r5
 80192b2:	47b0      	blx	r6
 80192b4:	2800      	cmp	r0, #0
 80192b6:	dc06      	bgt.n	80192c6 <__sflush_r+0xfe>
 80192b8:	89a3      	ldrh	r3, [r4, #12]
 80192ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192be:	81a3      	strh	r3, [r4, #12]
 80192c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192c4:	e78e      	b.n	80191e4 <__sflush_r+0x1c>
 80192c6:	4407      	add	r7, r0
 80192c8:	eba8 0800 	sub.w	r8, r8, r0
 80192cc:	e7e9      	b.n	80192a2 <__sflush_r+0xda>
 80192ce:	bf00      	nop
 80192d0:	dfbffffe 	.word	0xdfbffffe

080192d4 <_fflush_r>:
 80192d4:	b538      	push	{r3, r4, r5, lr}
 80192d6:	690b      	ldr	r3, [r1, #16]
 80192d8:	4605      	mov	r5, r0
 80192da:	460c      	mov	r4, r1
 80192dc:	b913      	cbnz	r3, 80192e4 <_fflush_r+0x10>
 80192de:	2500      	movs	r5, #0
 80192e0:	4628      	mov	r0, r5
 80192e2:	bd38      	pop	{r3, r4, r5, pc}
 80192e4:	b118      	cbz	r0, 80192ee <_fflush_r+0x1a>
 80192e6:	6a03      	ldr	r3, [r0, #32]
 80192e8:	b90b      	cbnz	r3, 80192ee <_fflush_r+0x1a>
 80192ea:	f7fe ff3f 	bl	801816c <__sinit>
 80192ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d0f3      	beq.n	80192de <_fflush_r+0xa>
 80192f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80192f8:	07d0      	lsls	r0, r2, #31
 80192fa:	d404      	bmi.n	8019306 <_fflush_r+0x32>
 80192fc:	0599      	lsls	r1, r3, #22
 80192fe:	d402      	bmi.n	8019306 <_fflush_r+0x32>
 8019300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019302:	f7ff fa9e 	bl	8018842 <__retarget_lock_acquire_recursive>
 8019306:	4628      	mov	r0, r5
 8019308:	4621      	mov	r1, r4
 801930a:	f7ff ff5d 	bl	80191c8 <__sflush_r>
 801930e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019310:	07da      	lsls	r2, r3, #31
 8019312:	4605      	mov	r5, r0
 8019314:	d4e4      	bmi.n	80192e0 <_fflush_r+0xc>
 8019316:	89a3      	ldrh	r3, [r4, #12]
 8019318:	059b      	lsls	r3, r3, #22
 801931a:	d4e1      	bmi.n	80192e0 <_fflush_r+0xc>
 801931c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801931e:	f7ff fa91 	bl	8018844 <__retarget_lock_release_recursive>
 8019322:	e7dd      	b.n	80192e0 <_fflush_r+0xc>

08019324 <fiprintf>:
 8019324:	b40e      	push	{r1, r2, r3}
 8019326:	b503      	push	{r0, r1, lr}
 8019328:	4601      	mov	r1, r0
 801932a:	ab03      	add	r3, sp, #12
 801932c:	4805      	ldr	r0, [pc, #20]	; (8019344 <fiprintf+0x20>)
 801932e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019332:	6800      	ldr	r0, [r0, #0]
 8019334:	9301      	str	r3, [sp, #4]
 8019336:	f7ff fc9d 	bl	8018c74 <_vfiprintf_r>
 801933a:	b002      	add	sp, #8
 801933c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019340:	b003      	add	sp, #12
 8019342:	4770      	bx	lr
 8019344:	200000cc 	.word	0x200000cc

08019348 <__swhatbuf_r>:
 8019348:	b570      	push	{r4, r5, r6, lr}
 801934a:	460c      	mov	r4, r1
 801934c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019350:	2900      	cmp	r1, #0
 8019352:	b096      	sub	sp, #88	; 0x58
 8019354:	4615      	mov	r5, r2
 8019356:	461e      	mov	r6, r3
 8019358:	da0d      	bge.n	8019376 <__swhatbuf_r+0x2e>
 801935a:	89a3      	ldrh	r3, [r4, #12]
 801935c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019360:	f04f 0100 	mov.w	r1, #0
 8019364:	bf0c      	ite	eq
 8019366:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801936a:	2340      	movne	r3, #64	; 0x40
 801936c:	2000      	movs	r0, #0
 801936e:	6031      	str	r1, [r6, #0]
 8019370:	602b      	str	r3, [r5, #0]
 8019372:	b016      	add	sp, #88	; 0x58
 8019374:	bd70      	pop	{r4, r5, r6, pc}
 8019376:	466a      	mov	r2, sp
 8019378:	f000 f848 	bl	801940c <_fstat_r>
 801937c:	2800      	cmp	r0, #0
 801937e:	dbec      	blt.n	801935a <__swhatbuf_r+0x12>
 8019380:	9901      	ldr	r1, [sp, #4]
 8019382:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019386:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801938a:	4259      	negs	r1, r3
 801938c:	4159      	adcs	r1, r3
 801938e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019392:	e7eb      	b.n	801936c <__swhatbuf_r+0x24>

08019394 <__smakebuf_r>:
 8019394:	898b      	ldrh	r3, [r1, #12]
 8019396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019398:	079d      	lsls	r5, r3, #30
 801939a:	4606      	mov	r6, r0
 801939c:	460c      	mov	r4, r1
 801939e:	d507      	bpl.n	80193b0 <__smakebuf_r+0x1c>
 80193a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80193a4:	6023      	str	r3, [r4, #0]
 80193a6:	6123      	str	r3, [r4, #16]
 80193a8:	2301      	movs	r3, #1
 80193aa:	6163      	str	r3, [r4, #20]
 80193ac:	b002      	add	sp, #8
 80193ae:	bd70      	pop	{r4, r5, r6, pc}
 80193b0:	ab01      	add	r3, sp, #4
 80193b2:	466a      	mov	r2, sp
 80193b4:	f7ff ffc8 	bl	8019348 <__swhatbuf_r>
 80193b8:	9900      	ldr	r1, [sp, #0]
 80193ba:	4605      	mov	r5, r0
 80193bc:	4630      	mov	r0, r6
 80193be:	f7fe fc9d 	bl	8017cfc <_malloc_r>
 80193c2:	b948      	cbnz	r0, 80193d8 <__smakebuf_r+0x44>
 80193c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80193c8:	059a      	lsls	r2, r3, #22
 80193ca:	d4ef      	bmi.n	80193ac <__smakebuf_r+0x18>
 80193cc:	f023 0303 	bic.w	r3, r3, #3
 80193d0:	f043 0302 	orr.w	r3, r3, #2
 80193d4:	81a3      	strh	r3, [r4, #12]
 80193d6:	e7e3      	b.n	80193a0 <__smakebuf_r+0xc>
 80193d8:	89a3      	ldrh	r3, [r4, #12]
 80193da:	6020      	str	r0, [r4, #0]
 80193dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80193e0:	81a3      	strh	r3, [r4, #12]
 80193e2:	9b00      	ldr	r3, [sp, #0]
 80193e4:	6163      	str	r3, [r4, #20]
 80193e6:	9b01      	ldr	r3, [sp, #4]
 80193e8:	6120      	str	r0, [r4, #16]
 80193ea:	b15b      	cbz	r3, 8019404 <__smakebuf_r+0x70>
 80193ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80193f0:	4630      	mov	r0, r6
 80193f2:	f000 f81d 	bl	8019430 <_isatty_r>
 80193f6:	b128      	cbz	r0, 8019404 <__smakebuf_r+0x70>
 80193f8:	89a3      	ldrh	r3, [r4, #12]
 80193fa:	f023 0303 	bic.w	r3, r3, #3
 80193fe:	f043 0301 	orr.w	r3, r3, #1
 8019402:	81a3      	strh	r3, [r4, #12]
 8019404:	89a3      	ldrh	r3, [r4, #12]
 8019406:	431d      	orrs	r5, r3
 8019408:	81a5      	strh	r5, [r4, #12]
 801940a:	e7cf      	b.n	80193ac <__smakebuf_r+0x18>

0801940c <_fstat_r>:
 801940c:	b538      	push	{r3, r4, r5, lr}
 801940e:	4d07      	ldr	r5, [pc, #28]	; (801942c <_fstat_r+0x20>)
 8019410:	2300      	movs	r3, #0
 8019412:	4604      	mov	r4, r0
 8019414:	4608      	mov	r0, r1
 8019416:	4611      	mov	r1, r2
 8019418:	602b      	str	r3, [r5, #0]
 801941a:	f7e9 fe15 	bl	8003048 <_fstat>
 801941e:	1c43      	adds	r3, r0, #1
 8019420:	d102      	bne.n	8019428 <_fstat_r+0x1c>
 8019422:	682b      	ldr	r3, [r5, #0]
 8019424:	b103      	cbz	r3, 8019428 <_fstat_r+0x1c>
 8019426:	6023      	str	r3, [r4, #0]
 8019428:	bd38      	pop	{r3, r4, r5, pc}
 801942a:	bf00      	nop
 801942c:	20009e7c 	.word	0x20009e7c

08019430 <_isatty_r>:
 8019430:	b538      	push	{r3, r4, r5, lr}
 8019432:	4d06      	ldr	r5, [pc, #24]	; (801944c <_isatty_r+0x1c>)
 8019434:	2300      	movs	r3, #0
 8019436:	4604      	mov	r4, r0
 8019438:	4608      	mov	r0, r1
 801943a:	602b      	str	r3, [r5, #0]
 801943c:	f7e9 fd72 	bl	8002f24 <_isatty>
 8019440:	1c43      	adds	r3, r0, #1
 8019442:	d102      	bne.n	801944a <_isatty_r+0x1a>
 8019444:	682b      	ldr	r3, [r5, #0]
 8019446:	b103      	cbz	r3, 801944a <_isatty_r+0x1a>
 8019448:	6023      	str	r3, [r4, #0]
 801944a:	bd38      	pop	{r3, r4, r5, pc}
 801944c:	20009e7c 	.word	0x20009e7c

08019450 <abort>:
 8019450:	b508      	push	{r3, lr}
 8019452:	2006      	movs	r0, #6
 8019454:	f000 f82c 	bl	80194b0 <raise>
 8019458:	2001      	movs	r0, #1
 801945a:	f000 f845 	bl	80194e8 <_exit>

0801945e <_raise_r>:
 801945e:	291f      	cmp	r1, #31
 8019460:	b538      	push	{r3, r4, r5, lr}
 8019462:	4604      	mov	r4, r0
 8019464:	460d      	mov	r5, r1
 8019466:	d904      	bls.n	8019472 <_raise_r+0x14>
 8019468:	2316      	movs	r3, #22
 801946a:	6003      	str	r3, [r0, #0]
 801946c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019470:	bd38      	pop	{r3, r4, r5, pc}
 8019472:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019474:	b112      	cbz	r2, 801947c <_raise_r+0x1e>
 8019476:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801947a:	b94b      	cbnz	r3, 8019490 <_raise_r+0x32>
 801947c:	4620      	mov	r0, r4
 801947e:	f000 f831 	bl	80194e4 <_getpid_r>
 8019482:	462a      	mov	r2, r5
 8019484:	4601      	mov	r1, r0
 8019486:	4620      	mov	r0, r4
 8019488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801948c:	f000 b818 	b.w	80194c0 <_kill_r>
 8019490:	2b01      	cmp	r3, #1
 8019492:	d00a      	beq.n	80194aa <_raise_r+0x4c>
 8019494:	1c59      	adds	r1, r3, #1
 8019496:	d103      	bne.n	80194a0 <_raise_r+0x42>
 8019498:	2316      	movs	r3, #22
 801949a:	6003      	str	r3, [r0, #0]
 801949c:	2001      	movs	r0, #1
 801949e:	e7e7      	b.n	8019470 <_raise_r+0x12>
 80194a0:	2400      	movs	r4, #0
 80194a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80194a6:	4628      	mov	r0, r5
 80194a8:	4798      	blx	r3
 80194aa:	2000      	movs	r0, #0
 80194ac:	e7e0      	b.n	8019470 <_raise_r+0x12>
	...

080194b0 <raise>:
 80194b0:	4b02      	ldr	r3, [pc, #8]	; (80194bc <raise+0xc>)
 80194b2:	4601      	mov	r1, r0
 80194b4:	6818      	ldr	r0, [r3, #0]
 80194b6:	f7ff bfd2 	b.w	801945e <_raise_r>
 80194ba:	bf00      	nop
 80194bc:	200000cc 	.word	0x200000cc

080194c0 <_kill_r>:
 80194c0:	b538      	push	{r3, r4, r5, lr}
 80194c2:	4d07      	ldr	r5, [pc, #28]	; (80194e0 <_kill_r+0x20>)
 80194c4:	2300      	movs	r3, #0
 80194c6:	4604      	mov	r4, r0
 80194c8:	4608      	mov	r0, r1
 80194ca:	4611      	mov	r1, r2
 80194cc:	602b      	str	r3, [r5, #0]
 80194ce:	f7e9 fdde 	bl	800308e <_kill>
 80194d2:	1c43      	adds	r3, r0, #1
 80194d4:	d102      	bne.n	80194dc <_kill_r+0x1c>
 80194d6:	682b      	ldr	r3, [r5, #0]
 80194d8:	b103      	cbz	r3, 80194dc <_kill_r+0x1c>
 80194da:	6023      	str	r3, [r4, #0]
 80194dc:	bd38      	pop	{r3, r4, r5, pc}
 80194de:	bf00      	nop
 80194e0:	20009e7c 	.word	0x20009e7c

080194e4 <_getpid_r>:
 80194e4:	f7e9 bdcb 	b.w	800307e <_getpid>

080194e8 <_exit>:
 80194e8:	e7fe      	b.n	80194e8 <_exit>
	...

080194ec <_init>:
 80194ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194ee:	bf00      	nop
 80194f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80194f2:	bc08      	pop	{r3}
 80194f4:	469e      	mov	lr, r3
 80194f6:	4770      	bx	lr

080194f8 <_fini>:
 80194f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194fa:	bf00      	nop
 80194fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80194fe:	bc08      	pop	{r3}
 8019500:	469e      	mov	lr, r3
 8019502:	4770      	bx	lr
